void sub_10059DD5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v0 = type metadata accessor for RectangleMark(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  RectangleMark.init(xStart:xEnd:yStart:yEnd:)(0, 1, 0, 1, 0, 1, 0, 1);
  ChartContent.offset(x:yStart:yEnd:)(v0, &protocol witness table for RectangleMark, 0.0, -20.0, 20.0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100079F70();
}

void sub_10059DE0C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  __n128 v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  __n128 v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  __n128 v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  __n128 v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t);
  void (*v126)(char *, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char *v138;
  __n128 v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(char *, uint64_t, uint64_t, __n128);
  __n128 v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __n128 v161;
  __n128 v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  void (*v171)(char *, char *, uint64_t);
  char *v172;
  uint64_t v173;
  int v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;

  v211 = a2;
  v218 = a3;
  v4 = type metadata accessor for AxisValueLabelOrientation(0);
  v5 = __chkstk_darwin(v4);
  v201 = (char *)&v178 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AxisValueLabelCollisionResolution(0, v5);
  __chkstk_darwin(v7);
  v206 = (char *)&v178 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BF2378);
  v200 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v199 = (char *)&v178 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v198 = (char *)&v178 - v12;
  v13 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v13);
  v203 = (char *)&v178 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = type metadata accessor for DetailChartDataElement(0);
  v221 = *(_QWORD *)(v210 - 8);
  __chkstk_darwin(v210);
  v16 = (char *)&v178 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v17);
  v205 = (char *)&v178 - v19;
  v212 = type metadata accessor for AxisValue(0, v18);
  v214 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v207 = (char *)&v178 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000BA294(&qword_100BF2368);
  __chkstk_darwin(v21);
  v217 = (uint64_t)&v178 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v216 = (char *)&v178 - v24;
  v25 = sub_1000BA294(&qword_100BDCCE0);
  v26 = __chkstk_darwin(v25);
  v197 = (char *)&v178 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for AxisTick.Length(0, v26);
  __chkstk_darwin(v28);
  v188 = (char *)&v178 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for AxisTick(0);
  v190 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v189 = (char *)&v178 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_1000BA294(&qword_100BDCD08);
  v193 = *(_QWORD *)(v196 - 8);
  __chkstk_darwin(v196);
  v192 = (char *)&v178 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v194 = (char *)&v178 - v34;
  *(_QWORD *)&v187 = type metadata accessor for AxisGridLine(0);
  *(_QWORD *)&v186 = *(_QWORD *)(v187 - 8);
  __chkstk_darwin(v187);
  v36 = (char *)&v178 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_1000BA294(&qword_100BDCC88);
  v191 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v208 = (char *)&v178 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v209 = (char *)&v178 - v39;
  v213 = sub_1000BA294(&qword_100BF2348);
  __chkstk_darwin(v213);
  v195 = (uint64_t)&v178 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v202 = (uint64_t)&v178 - v42;
  v43 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v43);
  v45 = (char *)&v178 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v48 = (char *)&v178 - v47;
  v49 = type metadata accessor for Date(0);
  v50 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v222 = (char *)&v178 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v220 = (char *)&v178 - v53;
  __chkstk_darwin(v54);
  v56 = (char *)&v178 - v55;
  v57 = sub_1000BA294(&qword_100BF2338);
  __chkstk_darwin(v57);
  v215 = (uint64_t)&v178 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v59);
  v219 = (uint64_t)&v178 - v60;
  AxisValue.as<A>(_:)(v49, v49, &protocol witness table for Date);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v49) == 1)
  {
    sub_100021A14((uint64_t)v48, (uint64_t *)&unk_100BD35A0);
    v61 = 1;
    v62 = a1;
  }
  else
  {
    v63.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v50 + 32))(v56, v48, v49);
    v64 = AxisValue.isFirst.getter(v63);
    v62 = a1;
    if ((v64 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v56, v49);
      v61 = 1;
    }
    else
    {
      v182 = v56;
      v183 = v50;
      if ((AxisValue.isLast.getter(v64) & 1) != 0)
      {
        v65 = v30;
        v185 = a1;
        v184 = v9;
        if (qword_100BC20C0 != -1)
          swift_once(&qword_100BC20C0, sub_1004049E8);
        swift_beginAccess(&qword_100CAE968, &v234, 33, 0);
        sub_100404780();
        v181 = v225;
        v180 = v226;
        v66 = v227;
        swift_endAccess(&v234);
        v234 = v181;
        v235 = v180;
        v236 = v66;
        AxisGridLine.init(centered:stroke:)(2, &v234);
        swift_beginAccess(&qword_100CAE968, &v231, 33, 0);
        sub_10040441C();
        v68 = v67;
        swift_endAccess(&v231);
        *(_QWORD *)&v231 = v68;
        v69 = v208;
        v70 = v187;
        AxisMark.foregroundStyle<A>(_:)(&v231, v187, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
        v71 = swift_release();
        (*(void (**)(char *, uint64_t, __n128))(v186 + 8))(v36, v70, v71);
        v72 = v69;
        v73 = v191;
        v74 = (*(uint64_t (**)(char *, char *, uint64_t))(v191 + 32))(v209, v72, v204);
        v75 = v188;
        static AxisTick.Length.longestLabel.getter(v74);
        swift_beginAccess(&qword_100CAE968, &v231, 33, 0);
        sub_100404780();
        v187 = v228;
        v186 = v229;
        v76 = v230;
        swift_endAccess(&v231);
        v231 = v187;
        v232 = v186;
        v233 = v76;
        v77 = v189;
        AxisTick.init(centered:length:stroke:)(2, v75, &v231);
        swift_beginAccess(&qword_100CAE968, &v223, 33, 0);
        sub_10040441C();
        v79 = v78;
        swift_endAccess(&v223);
        v223 = v79;
        v80 = v192;
        AxisMark.foregroundStyle<A>(_:)(&v223, v65, &type metadata for Color, &protocol witness table for AxisTick, &protocol witness table for Color);
        v81 = swift_release();
        (*(void (**)(char *, uint64_t, __n128))(v190 + 8))(v77, v65, v81);
        v82 = v193;
        v83 = v194;
        v84 = v196;
        (*(void (**)(char *, char *, uint64_t))(v193 + 32))(v194, v80, v196);
        v85 = v208;
        v86 = v204;
        (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v208, v209, v204);
        v223 = (uint64_t)v85;
        (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v80, v83, v84);
        v224 = (uint64_t)v80;
        v87 = (uint64_t)v197;
        sub_10073C240();
        v88 = *(void (**)(char *, uint64_t))(v82 + 8);
        v88(v80, v84);
        v89 = *(void (**)(char *, uint64_t))(v73 + 8);
        v89(v208, v86);
        v90 = v195;
        sub_100037768(v87, v195, &qword_100BDCCE0);
        v91 = sub_1000BA294(&qword_100BF23B0);
        swift_storeEnumTagMultiPayload(v90, v91, 0);
        sub_100021A14(v87, &qword_100BDCCE0);
        v88(v83, v84);
        v89(v209, v86);
        v50 = v183;
        (*(void (**)(char *, uint64_t))(v183 + 8))(v182, v49);
        v92 = sub_1000BA294(&qword_100BF2358);
        _s7Weather24LocationCompositionStateOwst_0(v90, 0, 1, v92);
        v93 = v202;
        sub_1000787D4(v90, v202, &qword_100BF2348);
        v9 = v184;
        v62 = v185;
      }
      else
      {
        *(_QWORD *)&v181 = v30;
        v94 = v211 + *(int *)(type metadata accessor for PrecipitationAveragesHeroChartView(0) + 24);
        v95 = type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
        v96 = v183;
        v97 = v220;
        (*(void (**)(char *, uint64_t, uint64_t))(v183 + 16))(v220, v94 + *(int *)(v95 + 64), v49);
        sub_10007A100((uint64_t)&qword_100BC3590);
        v98 = v182;
        LOBYTE(v94) = dispatch thunk of static Equatable.== infix(_:_:)(v182, v97, v49, v99);
        v100 = *(void (**)(char *, uint64_t))(v96 + 8);
        v100(v97, v49);
        if ((v94 & 1) != 0)
        {
          v100(v98, v49);
          v101 = sub_1000BA294(&qword_100BF2358);
          v93 = v202;
          _s7Weather24LocationCompositionStateOwst_0(v202, 1, 1, v101);
        }
        else
        {
          *(_QWORD *)&v180 = v100;
          v185 = v62;
          v184 = v9;
          if (qword_100BC20C0 != -1)
            swift_once(&qword_100BC20C0, sub_1004049E8);
          swift_beginAccess(&qword_100CAE968, &v234, 33, 0);
          sub_100404818();
          v179 = v225;
          v178 = v226;
          v102 = v227;
          swift_endAccess(&v234);
          v234 = v179;
          v235 = v178;
          v236 = v102;
          AxisGridLine.init(centered:stroke:)(2, &v234);
          swift_beginAccess(&qword_100CAE968, &v231, 33, 0);
          sub_10040441C();
          v104 = v103;
          swift_endAccess(&v231);
          *(_QWORD *)&v231 = v104;
          v105 = v208;
          v106 = v187;
          AxisMark.foregroundStyle<A>(_:)(&v231, v187, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
          v107 = swift_release();
          (*(void (**)(char *, uint64_t, __n128))(v186 + 8))(v36, v106, v107);
          v108 = v105;
          v109 = v191;
          v110 = (*(uint64_t (**)(char *, char *, uint64_t))(v191 + 32))(v209, v108, v204);
          v111 = v188;
          static AxisTick.Length.longestLabel.getter(v110);
          swift_beginAccess(&qword_100CAE968, &v231, 33, 0);
          sub_100404818();
          v187 = v228;
          v186 = v229;
          v112 = v230;
          swift_endAccess(&v231);
          v231 = v187;
          v232 = v186;
          v233 = v112;
          v113 = v189;
          AxisTick.init(centered:length:stroke:)(2, v111, &v231);
          swift_beginAccess(&qword_100CAE968, &v223, 33, 0);
          sub_10040441C();
          v115 = v114;
          swift_endAccess(&v223);
          v223 = v115;
          v116 = v192;
          v117 = v181;
          AxisMark.foregroundStyle<A>(_:)(&v223, v181, &type metadata for Color, &protocol witness table for AxisTick, &protocol witness table for Color);
          v118 = swift_release();
          (*(void (**)(char *, uint64_t, __n128))(v190 + 8))(v113, v117, v118);
          v119 = v193;
          v120 = v194;
          v121 = v196;
          (*(void (**)(char *, char *, uint64_t))(v193 + 32))(v194, v116, v196);
          v122 = v208;
          v123 = v204;
          (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v208, v209, v204);
          v223 = (uint64_t)v122;
          (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v116, v120, v121);
          v224 = (uint64_t)v116;
          v124 = (uint64_t)v197;
          sub_10073C240();
          v125 = *(void (**)(char *, uint64_t))(v119 + 8);
          v125(v116, v121);
          v126 = *(void (**)(char *, uint64_t))(v109 + 8);
          v126(v208, v123);
          v127 = v195;
          sub_100037768(v124, v195, &qword_100BDCCE0);
          v128 = sub_1000BA294(&qword_100BF23B0);
          swift_storeEnumTagMultiPayload(v127, v128, 1);
          sub_100021A14(v124, &qword_100BDCCE0);
          v125(v120, v121);
          v126(v209, v123);
          ((void (*)(char *, uint64_t))v180)(v182, v49);
          v129 = sub_1000BA294(&qword_100BF2358);
          _s7Weather24LocationCompositionStateOwst_0(v127, 0, 1, v129);
          v93 = v202;
          sub_1000787D4(v127, v202, &qword_100BF2348);
          v9 = v184;
          v62 = v185;
        }
        v50 = v183;
      }
      sub_1000787D4(v93, v219, &qword_100BF2348);
      v61 = 0;
    }
  }
  v130 = v214;
  v131 = v212;
  _s7Weather24LocationCompositionStateOwst_0(v219, v61, 1, v213);
  AxisValue.as<A>(_:)(v49, v49, &protocol witness table for Date);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v49) == 1)
  {
    v132 = (uint64_t *)&unk_100BD35A0;
    v133 = (uint64_t)v45;
LABEL_31:
    sub_100021A14(v133, v132);
    goto LABEL_32;
  }
  v134 = v222;
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v222, v45, v49);
  v135 = v211 + *(int *)(type metadata accessor for PrecipitationAveragesHeroChartView(0) + 24);
  v136 = type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  v137 = static Date.== infix(_:_:)(v134, v135 + *(int *)(v136 + 64));
  v138 = v207;
  (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v207, v62, v131);
  if ((v137 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v130 + 8))(v138, v131);
  }
  else
  {
    v140 = AxisValue.isFirst.getter(v139);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v138, v131);
    if ((v140 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v222, v49);
LABEL_32:
      v157 = (uint64_t)v216;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v216, 1, 1, v9);
      goto LABEL_33;
    }
  }
  v141 = v49;
  v185 = v62;
  v142 = *(_QWORD *)(v135 + 64);
  v143 = *(_QWORD *)(v142 + 16);
  if (v143)
  {
    v184 = v9;
    v144 = v142 + ((*(unsigned __int8 *)(v221 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v221 + 80));
    v145 = *(_QWORD *)(v221 + 72);
    v146 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v221 + 16);
    v214 = v142;
    v147 = swift_bridgeObjectRetain();
    v148 = v210;
    v149 = v220;
    while (1)
    {
      v150 = v146(v16, v144, v148, v147);
      v151 = v16;
      DetailChartDataElement.date.getter(v150);
      v152 = static Date.== infix(_:_:)(v149, v222);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v149, v141);
      if ((v152 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v221 + 8))(v151, v148);
      v144 += v145;
      --v143;
      v16 = v151;
      if (!v143)
      {
        v153 = 1;
        v9 = v184;
        v154 = (uint64_t)v203;
        goto LABEL_29;
      }
    }
    v154 = (uint64_t)v203;
    (*(void (**)(char *, char *, uint64_t))(v221 + 32))(v203, v151, v148);
    v153 = 0;
    v9 = v184;
  }
  else
  {
    swift_bridgeObjectRetain();
    v153 = 1;
    v154 = (uint64_t)v203;
    v148 = v210;
  }
LABEL_29:
  _s7Weather24LocationCompositionStateOwst_0(v154, v153, 1, v148);
  swift_bridgeObjectRelease();
  v155 = _s7Weather24LocationCompositionStateOwet_0(v154, 1, v148);
  v156 = v206;
  if (v155 == 1)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v222, v141);
    v132 = &qword_100BCB0A0;
    v133 = v154;
    goto LABEL_31;
  }
  v161.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t))(v221 + 32))(v205, v154, v148);
  v163 = v9;
  if ((AxisValue.isFirst.getter(v161) & 1) != 0)
    v164 = static AxisValueLabelCollisionResolution.disabled.getter();
  else
    v164 = static AxisValueLabelCollisionResolution.automatic.getter(v162);
  __chkstk_darwin(v164);
  v165 = v205;
  v166 = v201;
  static AxisValueLabelOrientation.automatic.getter(v167);
  v168 = sub_1000BA294(&qword_100BF2380);
  sub_1003208AC((uint64_t)&unk_100BF2388);
  v176 = v168;
  v177 = v169;
  v175 = &v173;
  LOBYTE(v174) = 1;
  v170 = v199;
  ((void (*)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, char *, char, char *, _QWORD, _BYTE, _QWORD, int, void (*)(uint64_t@<X8>, __n128@<Q0>)))AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:))(0, 0, 0, 1, 0, 0, 1, v156, 2, v166, 0, 0, 0, v174, sub_1005A0CE4);
  v171 = *(void (**)(char *, char *, uint64_t))(v200 + 32);
  v172 = v198;
  v171(v198, v170, v163);
  v157 = (uint64_t)v216;
  v171(v216, v172, v163);
  _s7Weather24LocationCompositionStateOwst_0(v157, 0, 1, v163);
  (*(void (**)(char *, uint64_t))(v221 + 8))(v165, v210);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v222, v141);
LABEL_33:
  v158 = v219;
  v159 = v215;
  sub_100037768(v219, v215, &qword_100BF2338);
  v223 = v159;
  v160 = v217;
  sub_100037768(v157, v217, &qword_100BF2368);
  v224 = v160;
  sub_10073C390();
  sub_100021A14(v157, &qword_100BF2368);
  sub_100021A14(v158, &qword_100BF2338);
  sub_100021A14(v160, &qword_100BF2368);
  sub_100021A14(v159, &qword_100BF2338);
}

void sub_10059F2D0(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  _BYTE v26[24];
  _QWORD v27[2];
  char v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v3 = AxisValue.isFirst.getter(a2);
  v4 = sub_10059F438(v3 & 1, (uint64_t)v27);
  v5 = v27[0];
  v6 = v27[1];
  v7 = v28;
  v25 = v29;
  v8 = v30;
  v9 = v31;
  v10 = v32;
  v24 = v33;
  v11 = static Edge.Set.horizontal.getter(v4);
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, v26, 0, 0);
  v12 = EdgeInsets.init(_all:)(*((double *)&xmmword_100CAEB40 + 1));
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = static Edge.Set.vertical.getter();
  v20 = EdgeInsets.init(_all:)(*(double *)&qword_100CAEB50);
  v34 = 0;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 24) = v25;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 49) = v10;
  *(_BYTE *)(a1 + 50) = v24;
  *(_BYTE *)(a1 + 56) = v11;
  *(double *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v18;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = v19;
  *(double *)(a1 + 112) = v20;
  *(_QWORD *)(a1 + 120) = v21;
  *(_QWORD *)(a1 + 128) = v22;
  *(_QWORD *)(a1 + 136) = v23;
  *(_BYTE *)(a1 + 144) = v34;
}

uint64_t sub_10059F438@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  _QWORD v42[3];

  HIDWORD(v41) = a1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  v42[0] = DetailChartDataElement.dateLabel.getter(v8);
  v42[1] = v9;
  v10 = sub_100114EF8();
  v11 = Text.init<A>(_:)(v42, &type metadata for String, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  DetailChartDataElement.date.getter(v11);
  v18 = v2 + *(int *)(type metadata accessor for PrecipitationAveragesHeroChartView(0) + 24);
  v19 = type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  LOBYTE(v18) = static Date.== infix(_:_:)(v7, v18 + *(int *)(v19 + 64));
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v18 & 1) != 0)
  {
    v21 = static Color.primary.getter(v20);
  }
  else
  {
    if (qword_100BC20C0 != -1)
      swift_once(&qword_100BC20C0, sub_1004049E8);
    swift_beginAccess(&qword_100CAE968, v42, 33, 0);
    sub_100404670();
    v21 = v22;
    swift_endAccess(v42);
  }
  v23 = v15 & 1;
  v24 = Text.foregroundColor(_:)(v21, v11, v13, v15 & 1, v17);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  swift_release();
  sub_1000D31B4(v11, v13, v23);
  swift_bridgeObjectRelease();
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  v31 = v28 & 1;
  swift_beginAccess(&qword_100CAE968, v42, 33, 0);
  v32 = sub_10040459C();
  swift_endAccess(v42);
  v33 = Text.font(_:)(v32, v24, v26, v31, v30);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  swift_release();
  sub_1000D31B4(v24, v26, v31);
  swift_bridgeObjectRelease();
  result = swift_getKeyPath(&unk_1009B0D88);
  *(_QWORD *)a2 = v33;
  *(_QWORD *)(a2 + 8) = v35;
  *(_BYTE *)(a2 + 16) = v37 & 1;
  *(_QWORD *)(a2 + 24) = v39;
  *(_QWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 0;
  *(_WORD *)(a2 + 49) = BYTE4(v41) & 1;
  return result;
}

uint64_t sub_10059F6BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  double v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  _QWORD v47[4];
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _OWORD v57[2];
  uint64_t v58;

  v54 = a1;
  v1 = type metadata accessor for AxisValueLabelOrientation(0);
  v2 = __chkstk_darwin(v1);
  v49 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AxisValueLabelCollisionResolution(0, v2);
  __chkstk_darwin(v4);
  v51 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BDCC70);
  __chkstk_darwin(v6);
  v53 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v52 = (char *)&v48 - v9;
  v10 = type metadata accessor for AxisGridLine(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BDCC88);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v48 - v19;
  v58 = 0;
  memset(v57, 0, sizeof(v57));
  AxisGridLine.init(centered:stroke:)(2, v57);
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, &v55, 33, 0);
  sub_10040441C();
  v22 = v21;
  swift_endAccess(&v55);
  v55 = v22;
  AxisMark.foregroundStyle<A>(_:)(&v55, v10, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
  v23 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v23);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v17, v14);
  AxisValue.as<A>(_:)(&type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  if ((v56 & 1) != 0)
  {
    v24 = 1;
LABEL_7:
    v42 = (uint64_t)v52;
    goto LABEL_8;
  }
  v25 = *(double *)&v55;
  v26 = (char *)v50 + *(int *)(type metadata accessor for PrecipitationAveragesHeroChartView(0) + 24);
  v27 = *((_QWORD *)v26 + 13);
  v28 = *((_QWORD *)v26 + 14);
  v29 = *((_QWORD *)v26 + 15);
  v30 = v26[128];
  v32 = AxisValue.isFirst.getter(v31);
  v33 = v32;
  v34 = AxisValue.isLast.getter(v32);
  v35 = sub_1005F7604(v33 & 1, v34 & 1, v27, v28, v29, v30, v25);
  v24 = 1;
  if (!v36)
    goto LABEL_7;
  v50 = &v48;
  v37 = __chkstk_darwin(v35);
  v38 = static AxisValueLabelCollisionResolution.automatic.getter(v37);
  v39 = v49;
  static AxisValueLabelOrientation.automatic.getter(v38);
  v40 = sub_1000BA294(&qword_100BDCC90);
  sub_1003208AC((uint64_t)&unk_100BDCC98);
  v47[2] = v40;
  v47[3] = v41;
  v47[1] = v47;
  v42 = (uint64_t)v52;
  ((void (*)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, char *, char, char *, _QWORD, _BYTE, _QWORD, char, double (*)@<D0>(uint64_t@<X8>)))AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:))(2, 0, 0, 1, 0, 0, 1, v51, 2, v39, 0, 0, 0, 1, sub_1005A0AEC);
  swift_bridgeObjectRelease();
  v24 = 0;
LABEL_8:
  v43 = sub_1000BA294(&qword_100BDCC80);
  _s7Weather24LocationCompositionStateOwst_0(v42, v24, 1, v43);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v20, v14);
  v55 = v17;
  v44 = v53;
  sub_100037768(v42, v53, &qword_100BDCC70);
  v56 = v44;
  sub_10073C2E8();
  sub_100021A14(v42, &qword_100BDCC70);
  v45 = *(void (**)(char *, uint64_t))(v15 + 8);
  v45(v20, v14);
  sub_100021A14(v44, &qword_100BDCC70);
  return ((uint64_t (*)(char *, uint64_t))v45)(v17, v14);
}

double sub_10059FB44@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double result;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  double v65[3];

  v53 = a1;
  v54 = a2;
  v4 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v5 = Text.init<A>(_:)(&v53, &type metadata for String, v4);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, &v53, 33, 0);
  v12 = sub_10040459C();
  swift_endAccess(&v53);
  v13 = Text.font(_:)(v12, v5, v7, v9 & 1, v11);
  v15 = v14;
  v17 = v16;
  v45 = v18;
  swift_release();
  LOBYTE(v12) = v17 & 1;
  sub_1000D31B4(v5, v7, v9 & 1);
  swift_bridgeObjectRelease();
  swift_beginAccess(&qword_100CAE968, &v53, 33, 0);
  sub_100404670();
  v20 = v19;
  swift_endAccess(&v53);
  v21 = Text.foregroundColor(_:)(v20, v13, v15, v17 & 1, v45);
  v46 = v22;
  v24 = v23;
  v26 = v25;
  swift_release();
  sub_1000D31B4(v13, v15, v12);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_1009B0D88);
  LOBYTE(v13) = static Edge.Set.horizontal.getter(KeyPath);
  v28 = EdgeInsets.init(_all:)(*(double *)&xmmword_100CAEB40);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = static Alignment.leading.getter(v35);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v53, 0x4044000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v36, v37);
  v38 = v53;
  v39 = v55;
  v40 = v57;
  v41 = v59;
  v42 = v61;
  v43 = v63;
  v52 = v54;
  v51 = v56;
  v50 = v58;
  v49 = v60;
  v48 = v62;
  v47 = v64;
  *(_QWORD *)a3 = v21;
  *(_QWORD *)(a3 + 8) = v46;
  *(_BYTE *)(a3 + 16) = v24 & 1;
  *(_QWORD *)(a3 + 24) = v26;
  *(_QWORD *)(a3 + 32) = KeyPath;
  *(_QWORD *)(a3 + 40) = 1;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = v13;
  *(double *)(a3 + 64) = v28;
  *(_QWORD *)(a3 + 72) = v30;
  *(_QWORD *)(a3 + 80) = v32;
  *(_QWORD *)(a3 + 88) = v34;
  *(_BYTE *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = v38;
  *(_BYTE *)(a3 + 112) = v52;
  *(_QWORD *)(a3 + 120) = v39;
  *(_BYTE *)(a3 + 128) = v51;
  *(_QWORD *)(a3 + 136) = v40;
  *(_BYTE *)(a3 + 144) = v50;
  *(_QWORD *)(a3 + 152) = v41;
  *(_BYTE *)(a3 + 160) = v49;
  *(_QWORD *)(a3 + 168) = v42;
  *(_BYTE *)(a3 + 176) = v48;
  *(_QWORD *)(a3 + 184) = v43;
  *(_BYTE *)(a3 + 192) = v47;
  result = v65[0];
  *(_OWORD *)(a3 + 200) = *(_OWORD *)v65;
  return result;
}

unint64_t sub_10059FE34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF21C0;
  if (!qword_100BF21C0)
  {
    v1 = sub_100075EB0(&qword_100BF21B0);
    sub_10007AB60((uint64_t)&unk_100BF21C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF21C0);
  }
  return result;
}

uint64_t sub_10059FEB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10059AB34(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10059FEB8()
{
  unint64_t result;
  uint64_t v1;
  void *v2;
  uint64_t OpaqueTypeConformance2;
  void *v4;
  void *v5;
  void *v6;

  result = qword_100BF2240;
  if (!qword_100BF2240)
  {
    v1 = sub_100075EB0(&qword_100BF2238);
    OpaqueTypeConformance2 = type metadata accessor for RectangleMark(255);
    v4 = &type metadata for HierarchicalShapeStyle;
    v5 = &protocol witness table for RectangleMark;
    v6 = &protocol witness table for HierarchicalShapeStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&OpaqueTypeConformance2, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    sub_1005A0BC0((uint64_t)&unk_100BF2248);
    v4 = v2;
    v5 = v2;
    v6 = (void *)sub_1005A0274();
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2240);
  }
  return result;
}

unint64_t sub_10059FF8C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;

  result = qword_100BF2258;
  if (!qword_100BF2258)
  {
    v1 = sub_100075EB0(&qword_100BF2260);
    v2 = sub_100075EB0(&qword_100BF2268);
    v3 = sub_100075EB0(&qword_100BF2270);
    v4 = sub_100075EB0(&qword_100BF2278);
    v5 = sub_100075EB0(&qword_100BDCB70);
    v11 = type metadata accessor for LineMark(255);
    v12 = &protocol witness table for LineMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    v11 = v5;
    v12 = &type metadata for Color;
    v13 = OpaqueTypeConformance2;
    v14 = &protocol witness table for Color;
    v7 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v11 = v4;
    v12 = (void *)v7;
    v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
    v11 = type metadata accessor for RectangleMark(255);
    v12 = &protocol witness table for RectangleMark;
    v9 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of ChartContent.offset(x:yStart:yEnd:)>>, 1);
    v11 = v2;
    v12 = (void *)v3;
    v13 = v8;
    v14 = (void *)v9;
    v11 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of ChartContent.mask<A>(content:)>>, 1);
    sub_1005A0BC0((uint64_t)&unk_100BF2280);
    v12 = v10;
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2258);
  }
  return result;
}

unint64_t sub_1005A0120()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  result = qword_100BF2290;
  if (!qword_100BF2290)
  {
    v1 = sub_100075EB0(&qword_100BF2298);
    sub_10007A100((uint64_t)&unk_100BDCB88);
    v14 = v2;
    v3 = sub_100075EB0(&qword_100BD78C8);
    v4 = sub_100075EB0(&qword_100BD78C0);
    v5 = type metadata accessor for PointMark(255);
    v6 = type metadata accessor for BasicChartSymbolShape(255);
    sub_10007A100((uint64_t)&qword_100BD78E8);
    v10 = v5;
    v11 = (void *)v6;
    v12 = &protocol witness table for PointMark;
    v13 = v7;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(_:)>>, 1);
    v10 = v4;
    v11 = (void *)OpaqueTypeConformance2;
    v9 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of ChartContent.symbolSize(_:)>>, 1);
    v10 = v3;
    v11 = &type metadata for Color;
    v12 = (void *)v9;
    v13 = &protocol witness table for Color;
    v15 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2290);
  }
  return result;
}

unint64_t sub_1005A0274()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF22A0;
  if (!qword_100BF22A0)
  {
    v1 = sub_100075EB0(&qword_100BF22A8);
    sub_1005A02F8();
    sub_10007A100((uint64_t)&unk_100BDCBB8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> BuilderConditional<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF22A0);
  }
  return result;
}

unint64_t sub_1005A02F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF22B0;
  if (!qword_100BF22B0)
  {
    v1 = sub_100075EB0(&qword_100BF22B8);
    sub_10007A100((uint64_t)&unk_100BDCBB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF22B0);
  }
  return result;
}

uint64_t sub_1005A0380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000C3D38() - 8) + 80);
  return sub_10059B844(a1, v1 + ((v3 + 16) & ~v3));
}

void sub_1005A03B8()
{
  sub_10059B8DC();
  sub_10004A298();
}

void sub_1005A03D4(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  sub_10059BA88(a1, a2);
  sub_10004A298();
}

unint64_t sub_1005A03F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF22E0;
  if (!qword_100BF22E0)
  {
    v1 = sub_100075EB0(&qword_100BF22D8);
    sub_10007AB60((uint64_t)&unk_100BF22E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> BuilderConditional<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF22E0);
  }
  return result;
}

uint64_t sub_1005A0470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (**v2)();

  sub_1000BC5D8();
  v0 = sub_1000C130C();
  return sub_10059BDBC(v0, v1, v2);
}

unint64_t sub_1005A0498()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF2300;
  if (!qword_100BF2300)
  {
    v1 = sub_100075EB0(&qword_100BF2218);
    sub_1005A051C();
    sub_10007AB60((uint64_t)&unk_100BDCC28);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2300);
  }
  return result;
}

unint64_t sub_1005A051C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;

  result = qword_100BF2308;
  if (!qword_100BF2308)
  {
    v19 = sub_100075EB0(&qword_100BF2210);
    v18 = sub_100075EB0(&qword_100BF2200);
    v17 = sub_100075EB0(&qword_100BDCBE8);
    v1 = sub_100075EB0(&qword_100BF21F8);
    v2 = sub_100075EB0(&qword_100BF22D8);
    v3 = sub_100075EB0(&qword_100BF21F0);
    v4 = sub_100075EB0(&qword_100BF22C8);
    v5 = sub_100075EB0(&qword_100BF21E8);
    v6 = type metadata accessor for AutomaticScaleDomain(255);
    v7 = type metadata accessor for PlotDimensionScaleRange(255);
    v8 = sub_100075EB0(&qword_100BF21E0);
    sub_10007AB60((uint64_t)&unk_100BF22C0);
    v20 = v8;
    v21 = v7;
    v22 = v9;
    v23 = &protocol witness table for PlotDimensionScaleRange;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v20, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(range:type:)>>, 1);
    v20 = v5;
    v21 = v6;
    v22 = v7;
    v23 = (void *)OpaqueTypeConformance2;
    v24 = &protocol witness table for AutomaticScaleDomain;
    v25 = &protocol witness table for PlotDimensionScaleRange;
    v11 = swift_getOpaqueTypeConformance2(&v20, &opaque type descriptor for <<opaque return type of View.chartYScale<A, B>(domain:range:type:)>>, 1);
    sub_10007AB60((uint64_t)&unk_100BF22D0);
    v20 = v3;
    v21 = v4;
    v22 = v11;
    v23 = v12;
    v13 = swift_getOpaqueTypeConformance2(&v20, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
    v14 = sub_1005A03F0();
    v20 = v1;
    v21 = v2;
    v22 = v13;
    v23 = (void *)v14;
    v15 = swift_getOpaqueTypeConformance2(&v20, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
    sub_10007AB60((uint64_t)&unk_100BDCBF0);
    v20 = v18;
    v21 = v17;
    v22 = v15;
    v23 = v16;
    swift_getOpaqueTypeConformance2(&v20, &opaque type descriptor for <<opaque return type of View.chartOverlay<A>(alignment:content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
    atomic_store(result, (unint64_t *)&qword_100BF2308);
  }
  return result;
}

uint64_t sub_1005A0748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t active;
  uint64_t v15;
  int v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = sub_1000C3D38();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v24 = *(_QWORD *)(v2 + 64);
  v25 = type metadata accessor for ChartProxy(0);
  v4 = *(_QWORD *)(v25 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v23 = *(_QWORD *)(v4 + 64);
  v6 = v0 + ((v3 + 16) & ~v3);
  sub_1000B15F8(*(_QWORD *)v6, *(_BYTE *)(v6 + 8));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v6 + 16));
  v7 = v6 + *(int *)(v1 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000D1900();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = (int *)sub_1000E7200();
  v9 = v7 + v8[12];
  type metadata accessor for Date(0);
  sub_1000C54D0(v9);
  v10 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  sub_1000BA548(v9 + v10[6]);
  sub_1000BA548(v9 + v10[7]);
  sub_1000BA548(v9 + v10[8]);
  v11 = v7 + v8[13];
  sub_1000C54D0(v11);
  sub_1000BA548(v11 + v10[6]);
  sub_1000BA548(v11 + v10[7]);
  sub_1000BA548(v11 + v10[8]);
  v12 = v7 + v8[14];
  v13 = type metadata accessor for DetailHeroChartLollipopModel(0);
  if (sub_100094FAC(v13) == 1)
  {
    active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
    sub_1000C54D0(v12 + *(int *)(active + 20));
    v12 += *(int *)(active + 24);
  }
  v15 = type metadata accessor for LollipopDetailViewModel(0);
  v16 = sub_100094FAC(v15);
  switch(v16)
  {
    case 2:
      swift_bridgeObjectRelease();
      v17 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v22 = v12 + v17[5];
      v18 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v22, v18);
      sub_1000BA548(v12 + v17[6]);
      sub_1000BA548(v12 + v17[7]);
      sub_1000BA548(v12 + v17[8]);
      sub_1000BA548(v12 + v17[9]);
      goto LABEL_9;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_9:
      swift_bridgeObjectRelease();
      break;
  }
  v19 = v3 | v5 | 7;
  v20 = (((v3 + 16) & ~v3) + v24 + v5) & ~v5;
  sub_1000C54D0(v7 + v8[15]);
  sub_1000C54D0(v7 + v8[16]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v20, v25);
  return swift_deallocObject(v0, v20 + v23, v19);
}

uint64_t sub_1005A0A30()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(sub_1000BC5D8() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ChartProxy(0) - 8) + 80);
  return sub_10059BF04(v0, v1 + v4, v1 + ((v4 + v5 + v6) & ~v6), v2);
}

void sub_1005A0AB0()
{
  uint64_t v0;

  sub_1000BC5D8();
  sub_10059F6BC(v0);
  sub_100079F70();
}

double sub_1005A0AEC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10059FB44(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1005A0B00(uint64_t a1)
{
  return sub_1005A0D58(a1, (uint64_t (*)(uint64_t))sub_10059DE0C);
}

unint64_t sub_1005A0B0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF2328;
  if (!qword_100BF2328)
  {
    v1 = sub_100075EB0(&qword_100BF2320);
    sub_1005A0BC0((uint64_t)&unk_100BF2330);
    sub_1005A0C8C((uint64_t)&qword_100BF2360);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2328);
  }
  return result;
}

void sub_1005A0BC0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  void (*v3)(void);
  uint64_t *v4;

  if (!sub_10009987C(a1))
  {
    sub_1000AE8E8(0, v4);
    v3();
    atomic_store(sub_100099A04(v2), v1);
  }
  sub_100099960();
}

void sub_1005A0C04()
{
  sub_1005A0BC0((uint64_t)&unk_100BF2340);
}

unint64_t sub_1005A0C28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF2350;
  if (!qword_100BF2350)
  {
    v1 = sub_100075EB0(&qword_100BF2358);
    sub_1003972B0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> BuilderConditional<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2350);
  }
  return result;
}

void sub_1005A0C8C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t *v3;

  if (!sub_10009987C(a1))
  {
    sub_1000AE8E8(0, v3);
    sub_10007AB60(v2);
    atomic_store(sub_100099A04((uint64_t)&protocol conformance descriptor for <A> A?), v1);
  }
  sub_100099960();
}

void sub_1005A0CE4(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  sub_10059F2D0(a1, a2);
}

void sub_1005A0CF0()
{
  sub_1003208AC((uint64_t)&unk_100BF2390);
}

void sub_1005A0D14()
{
  sub_1003208AC((uint64_t)&unk_100BF23A0);
}

uint64_t sub_1005A0D3C(uint64_t a1)
{
  return sub_1005A0D58(a1, (uint64_t (*)(uint64_t))sub_10059C1E8);
}

uint64_t sub_1005A0D4C(uint64_t a1)
{
  return sub_1005A0D58(a1, (uint64_t (*)(uint64_t))sub_10059D184);
}

uint64_t sub_1005A0D58(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;

  sub_1000BC5D8();
  v2 = sub_1000C130C();
  return a2(v2);
}

ValueMetadata *type metadata accessor for AveragesHeroChartStyle()
{
  return &type metadata for AveragesHeroChartStyle;
}

void sub_1005A0DA0()
{
  sub_10007AB60((uint64_t)&unk_100BF23D8);
}

void WeatherFeatureFlags.domain.getter()
{
  sub_1000BB138();
}

uint64_t WeatherFeatureFlags.isEnabled.getter(char a1)
{
  char v1;
  char v2;
  _QWORD v4[5];

  v1 = a1 & 1;
  v4[3] = &type metadata for WeatherFeatureFlags;
  v4[4] = sub_1005A0E2C();
  LOBYTE(v4[0]) = v1;
  v2 = isFeatureEnabled(_:)(v4);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v4);
  return v2 & 1;
}

unint64_t sub_1005A0E2C()
{
  unint64_t result;

  result = qword_100BF23E8;
  if (!qword_100BF23E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WeatherFeatureFlags, &type metadata for WeatherFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100BF23E8);
  }
  return result;
}

void WeatherFeatureFlags.feature.getter()
{
  sub_1000BB138();
}

unint64_t sub_1005A0E88()
{
  unint64_t result;

  result = qword_100BF23F0;
  if (!qword_100BF23F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WeatherFeatureFlags, &type metadata for WeatherFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100BF23F0);
  }
  return result;
}

const char *sub_1005A0EC4()
{
  return "Weather";
}

void sub_1005A0ED8()
{
  WeatherFeatureFlags.feature.getter();
}

uint64_t storeEnumTagSinglePayload for WeatherFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1005A0F44 + 4 * byte_1009B0DE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005A0F78 + 4 * asc_1009B0DE0[v4]))();
}

uint64_t sub_1005A0F78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005A0F80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005A0F88);
  return result;
}

uint64_t sub_1005A0F94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005A0F9CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1005A0FA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005A0FA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WeatherFeatureFlags()
{
  return &type metadata for WeatherFeatureFlags;
}

uint64_t sub_1005A0FC4()
{
  return sub_100133D84((uint64_t (*)(_QWORD *, unint64_t, uint64_t, uint64_t))&dispatch thunk of AppConfigurationManagerType.removeObserver(_:));
}

double sub_1005A0FE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  v2 = sub_1000BAD84();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = swift_allocObject(&unk_100B81818, 24, 7);
  swift_weakInit(v5 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_100B81840, v7 + v4, v6 | 7);
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  swift_retain();
  asyncMain(block:)(sub_1005A1294, v8);
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_1005A10E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t Strong;
  double result;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  _BYTE v13[24];

  v4 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v4);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v13, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v9 = *(uint64_t (**)(uint64_t))(Strong + 16);
    swift_retain();
    swift_release();
    v10 = type metadata accessor for AppConfiguration(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v6, a2, v10);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    sub_1000A5EBC((uint64_t)v6, (uint64_t)v11, v9);
    sub_100159C94((uint64_t)v11);
    sub_1000A0AA4((uint64_t)v6);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_1005A1200()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005A1224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = sub_1000BAD84();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = swift_release();
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

double sub_1005A1294()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000BAD84() - 8) + 80);
  return sub_1005A10E8(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t storeEnumTagSinglePayload for TimeAction(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1005A1300 + 4 * byte_1009B0F38[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1005A1320 + 4 * byte_1009B0F3D[v4]))();
}

_BYTE *sub_1005A1300(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1005A1320(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1005A1328(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1005A1330(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1005A1338(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1005A1340(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TimeAction()
{
  return &type metadata for TimeAction;
}

unint64_t sub_1005A1360()
{
  unint64_t result;

  result = qword_100BF24A8;
  if (!qword_100BF24A8)
  {
    result = swift_getWitnessTable(&unk_1009B0F90, &type metadata for TimeAction);
    atomic_store(result, (unint64_t *)&qword_100BF24A8);
  }
  return result;
}

uint64_t sub_1005A139C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[48];

  sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100079F58();
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Location(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for SearchLocation(0);
  sub_1005A1770(a1 + *(int *)(v12 + 32), (uint64_t)v7);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v8) == 1)
  {
    sub_100021A68((uint64_t)v7, &qword_100BC35F8);
    v13 = *(uint64_t (**)(uint64_t))(v2 + 16);
    sub_1005A17B8(a1, v1);
    v14 = sub_1000B4B70();
    swift_storeEnumTagMultiPayload(v1, v14, 5);
    v15 = sub_1000C4BB8();
    sub_1000BB144(v15);
    sub_1000C4BA8();
    sub_1000C3C80();
    sub_1000B49C8(v1, (uint64_t)v20, v13);
    sub_100021A68((uint64_t)v20, (uint64_t *)&unk_100BFFA10);
    sub_1000D0D60();
    return sub_10009880C();
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v7, v8);
    v17 = *(uint64_t (**)(uint64_t))(v2 + 16);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 16))(v1, v11, v8);
    v18 = sub_1000B4B70();
    sub_1000BB144(v18);
    v19 = sub_1000C4BB8();
    sub_1000BB144(v19);
    sub_1000C4BA8();
    sub_1000C3C80();
    sub_1000B49C8(v1, (uint64_t)v20, v17);
    sub_100021A68((uint64_t)v20, (uint64_t *)&unk_100BFFA10);
    sub_1000D0D60();
    sub_10009880C();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_1005A1578(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;

  v4 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100079F58();
  v6 = *(uint64_t (**)(uint64_t))(v2 + 16);
  v7 = type metadata accessor for LocationOfInterest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v1, a1, v7);
  v8 = sub_1000B4B70();
  swift_storeEnumTagMultiPayload(v1, v8, 4);
  v9 = sub_1000C4BB8();
  sub_1000BB144(v9);
  swift_storeEnumTagMultiPayload(v1, v4, 6);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_retain();
  sub_1000B49C8(v1, (uint64_t)v11, v6);
  sub_100021A68((uint64_t)v11, (uint64_t *)&unk_100BFFA10);
  sub_1000D0D60();
  return sub_10009880C();
}

uint64_t sub_1005A1654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;

  v2 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100079F58();
  v4 = *(uint64_t (**)(uint64_t))(v1 + 16);
  v5 = sub_1000B4B70();
  swift_storeEnumTagMultiPayload(v0, v5, 8);
  v6 = sub_1000C4BB8();
  sub_1000BB144(v6);
  swift_storeEnumTagMultiPayload(v0, v2, 6);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  swift_retain();
  sub_1000B49C8(v0, (uint64_t)v8, v4);
  sub_100021A68((uint64_t)v8, (uint64_t *)&unk_100BFFA10);
  sub_1000D0D60();
  return sub_10009880C();
}

uint64_t sub_1005A1704()
{
  uint64_t v0;

  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 32));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 72));
  return v0;
}

uint64_t sub_1005A1730()
{
  uint64_t v0;

  sub_1005A1704();
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for SearchInteractor()
{
  return objc_opt_self(_TtC7Weather16SearchInteractor);
}

uint64_t sub_1005A1770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC35F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005A17B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1005A17FC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t, __n128);
  __n128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t, __n128);
  __n128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t, __n128);
  __n128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t, __n128);
  __n128 v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t, __n128);
  __n128 v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  int *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  void (*v143)(char *, char *, uint64_t, __n128);
  __n128 v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unsigned int EnumCaseMultiPayload;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  void (*v160)(char *, char *, uint64_t, __n128);
  __n128 v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  void (*v206)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v207;
  uint64_t v209;
  unsigned int v210;
  void (*v211)(char *, char *, uint64_t);
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  int *v215;
  char *v216;
  int *v217;
  char *v218;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return v13;
  }
  v7 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    v8 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = a1;
    v10 = v7;
    v11 = 1;
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    v9 = a1;
    v10 = v7;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  v14 = a3[5];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v16) == 1)
  {
    v18 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
    v19 = v15;
    v20 = v17;
    v21 = 1;
  }
  else
  {
    *v15 = *v16;
    swift_retain();
    v19 = v15;
    v20 = v17;
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v19, v20, v21);
  v22 = a3[6];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)v24;
  v26 = v24[8];
  sub_10008D47C(*(_QWORD *)v24, v26);
  *(_QWORD *)v23 = v25;
  v23[8] = v26;
  v214 = a1;
  v215 = a3;
  v27 = a3[7];
  v28 = (char *)a1 + v27;
  v213 = a2;
  v29 = (char *)a2 + v27;
  v30 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  v28[*(int *)(v31 + 20)] = v29[*(int *)(v31 + 20)];
  v28[*(int *)(v31 + 24)] = v29[*(int *)(v31 + 24)];
  v217 = (int *)type metadata accessor for DetailChartViewModel(0);
  v218 = v28;
  v32 = v217[5];
  v33 = &v28[v32];
  v216 = v29;
  v34 = &v29[v32];
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = v35;
  v36 = (int *)type metadata accessor for ChartViewModel(0);
  v37 = v36[5];
  v38 = &v33[v37];
  v39 = &v34[v37];
  v40 = type metadata accessor for ChartKind(0);
  v41 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v40 - 8) + 16);
  v42 = swift_bridgeObjectRetain();
  v41(v38, v39, v40, v42);
  *(_QWORD *)&v33[v36[6]] = *(_QWORD *)&v34[v36[6]];
  v43 = v36[7];
  v44 = &v33[v43];
  v45 = &v34[v43];
  v46 = type metadata accessor for DetailChartExtrema(0);
  v47 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v46 - 8) + 16);
  v48 = swift_bridgeObjectRetain();
  v47(v44, v45, v46, v48);
  *(_QWORD *)&v33[v36[8]] = *(_QWORD *)&v34[v36[8]];
  *(_QWORD *)&v33[v36[9]] = *(_QWORD *)&v34[v36[9]];
  *(_OWORD *)&v33[v36[10]] = *(_OWORD *)&v34[v36[10]];
  v49 = v36[11];
  v50 = &v33[v49];
  v51 = &v34[v49];
  v52 = *(void **)v51;
  v53 = (void *)*((_QWORD *)v51 + 1);
  v54 = *((_QWORD *)v51 + 2);
  v55 = v51[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001A41A0(v52, v53, v54, v55);
  *(_QWORD *)v50 = v52;
  *((_QWORD *)v50 + 1) = v53;
  *((_QWORD *)v50 + 2) = v54;
  v50[24] = v55;
  v56 = v36[12];
  v57 = &v33[v56];
  v58 = &v34[v56];
  *(_QWORD *)&v33[v56] = *(_QWORD *)&v34[v56];
  v59 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v60 = &v57[v59];
  v61 = &v58[v59];
  v62 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v62))
  {
    v63 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v60, 0, 1, v62);
  }
  v64 = v36[13];
  v65 = &v33[v64];
  v66 = &v34[v64];
  *(_QWORD *)v65 = *(_QWORD *)v66;
  v65[8] = v66[8];
  v67 = v36[14];
  v68 = &v33[v67];
  v69 = &v34[v67];
  v70 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v70))
  {
    v71 = type metadata accessor for ChartViewModel.Background(0);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v68 = *(_QWORD *)v69;
    v72 = *(int *)(v70 + 48);
    v73 = &v68[v72];
    v74 = &v69[v72];
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v74, 1, v62))
    {
      v75 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v73, v74, v62);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v73, 0, 1, v62);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v68, 0, 1, v70);
  }
  *(_QWORD *)&v33[v36[15]] = *(_QWORD *)&v34[v36[15]];
  v76 = v36[16];
  v77 = &v33[v76];
  v78 = &v34[v76];
  v79 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
  *(_QWORD *)&v33[v36[17]] = *(_QWORD *)&v34[v36[17]];
  v80 = v36[18];
  v81 = &v33[v80];
  v82 = &v34[v80];
  v83 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v62 - 8) + 16);
  v84 = swift_bridgeObjectRetain();
  v83(v81, v82, v62, v84);
  ((void (*)(char *, char *, uint64_t))v83)(&v33[v36[19]], &v34[v36[19]], v62);
  v211 = (void (*)(char *, char *, uint64_t))v83;
  ((void (*)(char *, char *, uint64_t))v83)(&v33[v36[20]], &v34[v36[20]], v62);
  v85 = v36[21];
  v86 = &v33[v85];
  v87 = &v34[v85];
  v88 = type metadata accessor for DetailChartDataElement(0);
  v212 = v62;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v87, 1, v88))
  {
    v89 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v86, v87, v88);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v86, 0, 1, v88);
  }
  *(_QWORD *)&v33[v36[22]] = *(_QWORD *)&v34[v36[22]];
  v90 = v36[23];
  v91 = &v33[v90];
  v92 = &v34[v90];
  v93 = type metadata accessor for ChartPeakMarkStyle(0);
  v94 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v93 - 8) + 16);
  v95 = swift_bridgeObjectRetain();
  v94(v91, v92, v93, v95);
  *(_QWORD *)&v33[v36[24]] = *(_QWORD *)&v34[v36[24]];
  *(_QWORD *)&v33[v36[25]] = *(_QWORD *)&v34[v36[25]];
  v96 = v36[26];
  v97 = &v33[v96];
  v98 = &v34[v96];
  v99 = type metadata accessor for ChartViewModelInterpolationMode(0);
  v100 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v99 - 8) + 16);
  v101 = swift_bridgeObjectRetain();
  v100(v97, v98, v99, v101);
  v102 = v36[27];
  v103 = &v33[v102];
  v104 = &v34[v102];
  v105 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v103, v104, v105);
  v106 = v36[28];
  v107 = &v33[v106];
  v108 = &v34[v106];
  v109 = *((_QWORD *)v108 + 1);
  *(_QWORD *)v107 = *(_QWORD *)v108;
  *((_QWORD *)v107 + 1) = v109;
  v110 = v36[29];
  v111 = &v33[v110];
  v112 = &v34[v110];
  v113 = *((_QWORD *)v112 + 1);
  *(_QWORD *)v111 = *(_QWORD *)v112;
  *((_QWORD *)v111 + 1) = v113;
  v114 = v36[30];
  v115 = &v33[v114];
  v116 = &v34[v114];
  v117 = *((_QWORD *)v116 + 1);
  *(_QWORD *)v115 = *(_QWORD *)v116;
  *((_QWORD *)v115 + 1) = v117;
  v118 = v36[31];
  v119 = &v33[v118];
  v120 = &v34[v118];
  v121 = *((_QWORD *)v120 + 1);
  *(_QWORD *)v119 = *(_QWORD *)v120;
  *((_QWORD *)v119 + 1) = v121;
  v122 = v36[32];
  v123 = &v33[v122];
  v124 = &v34[v122];
  v125 = *((_QWORD *)v124 + 1);
  *(_QWORD *)v123 = *(_QWORD *)v124;
  *((_QWORD *)v123 + 1) = v125;
  v126 = v36[33];
  v127 = &v33[v126];
  v128 = &v34[v126];
  v129 = *((_QWORD *)v128 + 1);
  *(_QWORD *)v127 = *(_QWORD *)v128;
  *((_QWORD *)v127 + 1) = v129;
  v130 = v217[6];
  v131 = &v218[v130];
  v132 = v216;
  v133 = &v216[v130];
  v134 = (int *)type metadata accessor for LollipopViewModel(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v133, 1, (uint64_t)v134))
  {
    v138 = *((_QWORD *)v133 + 1);
    *(_QWORD *)v131 = *(_QWORD *)v133;
    *((_QWORD *)v131 + 1) = v138;
    v139 = v134[5];
    v140 = &v131[v139];
    v141 = &v133[v139];
    v142 = type metadata accessor for DetailChartDataPoint(0);
    v143 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v142 - 8) + 16);
    v144 = swift_bridgeObjectRetain();
    v143(v140, v141, v142, v144);
    *(_QWORD *)&v131[v134[6]] = *(_QWORD *)&v133[v134[6]];
    v145 = v134[7];
    v146 = &v131[v145];
    v147 = &v133[v145];
    v148 = type metadata accessor for LollipopDetailViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v147);
    v210 = EnumCaseMultiPayload;
    if (EnumCaseMultiPayload == 2)
    {
      v154 = *((_QWORD *)v147 + 1);
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *((_QWORD *)v146 + 1) = v154;
      v209 = v148;
      v155 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v156 = v155[5];
      v157 = &v146[v156];
      v158 = &v147[v156];
      v159 = type metadata accessor for AttributedString(0);
      v160 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v159 - 8) + 16);
      v161 = swift_bridgeObjectRetain();
      v160(v157, v158, v159, v161);
      v162 = v155[6];
      v163 = &v146[v162];
      v164 = &v147[v162];
      v165 = *((_QWORD *)v164 + 1);
      *(_QWORD *)v163 = *(_QWORD *)v164;
      *((_QWORD *)v163 + 1) = v165;
      v166 = v155[7];
      v167 = &v146[v166];
      v168 = &v147[v166];
      v169 = *((_QWORD *)v168 + 1);
      *(_QWORD *)v167 = *(_QWORD *)v168;
      *((_QWORD *)v167 + 1) = v169;
      v170 = v155[8];
      v171 = &v146[v170];
      v172 = &v147[v170];
      v173 = *((_QWORD *)v172 + 1);
      *(_QWORD *)v171 = *(_QWORD *)v172;
      *((_QWORD *)v171 + 1) = v173;
      v174 = v155[9];
      v175 = &v146[v174];
      v176 = &v147[v174];
      v177 = *((_QWORD *)v176 + 1);
      *(_QWORD *)v175 = *(_QWORD *)v176;
      *((_QWORD *)v175 + 1) = v177;
      v178 = v155[10];
      v179 = &v146[v178];
      v180 = &v147[v178];
      v181 = *((_QWORD *)v180 + 1);
      *(_QWORD *)v179 = *(_QWORD *)v180;
      *((_QWORD *)v179 + 1) = v181;
      v182 = v155[11];
      v148 = v209;
      v146[v182] = v147[v182];
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        v183 = *((_QWORD *)v147 + 1);
        *(_QWORD *)v146 = *(_QWORD *)v147;
        *((_QWORD *)v146 + 1) = v183;
        v184 = *((_QWORD *)v147 + 3);
        *((_QWORD *)v146 + 2) = *((_QWORD *)v147 + 2);
        *((_QWORD *)v146 + 3) = v184;
        v185 = *((_QWORD *)v147 + 5);
        *((_QWORD *)v146 + 4) = *((_QWORD *)v147 + 4);
        *((_QWORD *)v146 + 5) = v185;
        goto LABEL_29;
      }
      v150 = *((_QWORD *)v147 + 1);
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *((_QWORD *)v146 + 1) = v150;
      v151 = *((_QWORD *)v147 + 3);
      *((_QWORD *)v146 + 2) = *((_QWORD *)v147 + 2);
      *((_QWORD *)v146 + 3) = v151;
      v152 = *((_QWORD *)v147 + 5);
      *((_QWORD *)v146 + 4) = *((_QWORD *)v147 + 4);
      *((_QWORD *)v146 + 5) = v152;
      v153 = *((_QWORD *)v147 + 7);
      *((_QWORD *)v146 + 6) = *((_QWORD *)v147 + 6);
      *((_QWORD *)v146 + 7) = v153;
      v146[64] = v147[64];
      v146[65] = v147[65];
    }
    swift_bridgeObjectRetain();
LABEL_29:
    v136 = v213;
    v13 = v214;
    v132 = v216;
    v137 = v212;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload(v146, v148, v210);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v131, 0, 1, (uint64_t)v134);
    goto LABEL_30;
  }
  v135 = sub_1000BA294(&qword_100BE19B8);
  memcpy(v131, v133, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
  v136 = v213;
  v13 = v214;
  v137 = v212;
LABEL_30:
  v186 = v217[7];
  v187 = &v218[v186];
  v188 = &v132[v186];
  v189 = type metadata accessor for ConditionDetailChartFooterViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v188, 1, v189))
  {
    v190 = sub_1000BA294(&qword_100BE1968);
    memcpy(v187, v188, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v188) == 1)
    {
      v191 = type metadata accessor for TemperatureChartKind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v191 - 8) + 16))(v187, v188, v191);
      v192 = v187;
      v193 = v189;
      v194 = 1;
    }
    else
    {
      v195 = *((_QWORD *)v188 + 1);
      *(_QWORD *)v187 = *(_QWORD *)v188;
      *((_QWORD *)v187 + 1) = v195;
      swift_bridgeObjectRetain();
      v192 = v187;
      v193 = v189;
      v194 = 0;
    }
    swift_storeEnumTagMultiPayload(v192, v193, v194);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v187, 0, 1, v189);
  }
  v196 = v215[9];
  *((_BYTE *)v13 + v215[8]) = *((_BYTE *)v136 + v215[8]);
  v197 = (char *)v13 + v196;
  v198 = (char *)v136 + v196;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v136 + v196, 1, v137))
  {
    v199 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v199 - 8) + 64));
  }
  else
  {
    v211(v197, v198, v137);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v197, 0, 1, v137);
  }
  v200 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&v197[*(int *)(v200 + 28)] = *(_QWORD *)&v198[*(int *)(v200 + 28)];
  v201 = v215[10];
  v202 = (uint64_t)v13 + v201;
  v203 = (uint64_t)v136 + v201;
  v204 = *(_OWORD *)((char *)v136 + v201 + 24);
  *(_OWORD *)((char *)v13 + v201 + 24) = v204;
  v205 = v204;
  v206 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v204 - 8);
  v207 = swift_retain();
  v206(v202, v203, v205, v207);
  *(_QWORD *)((char *)v13 + v215[11]) = *(_QWORD *)((char *)v136 + v215[11]);
  return v13;
}

uint64_t sub_1005A22F0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  void (*v25)(uint64_t, uint64_t, __n128);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int EnumCaseMultiPayload;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(a1) == 1)
  {
    v4 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  v5 = a1 + a2[5];
  sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v5) == 1)
  {
    v6 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  sub_1000B15F8(*(_QWORD *)(a1 + a2[6]), *(_BYTE *)(a1 + a2[6] + 8));
  v7 = a1 + a2[7];
  v8 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (int *)type metadata accessor for DetailChartViewModel(0);
  v10 = v7 + v9[5];
  swift_bridgeObjectRelease();
  v11 = (int *)type metadata accessor for ChartViewModel(0);
  v12 = v10 + v11[5];
  v13 = type metadata accessor for ChartKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  v14 = v10 + v11[7];
  v15 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001A44FC(*(void **)(v10 + v11[11]), *(void **)(v10 + v11[11] + 8), *(_QWORD *)(v10 + v11[11] + 16), *(_BYTE *)(v10 + v11[11] + 24));
  v16 = v10 + v11[12];
  v17 = v16 + *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v18 = type metadata accessor for Date(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v17, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = v10 + v11[14];
  v20 = sub_1000BA294(&qword_100BCB988);
  if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v20))
  {
    swift_release();
    v21 = v19 + *(int *)(v20 + 48);
    if (!_s7Weather24LocationCompositionStateOwet_0(v21, 1, v18))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v21, v18);
  }
  v22 = v10 + v11[16];
  v23 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  v24 = swift_bridgeObjectRelease();
  v25 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v18 - 8) + 8);
  v25(v10 + v11[18], v18, v24);
  ((void (*)(uint64_t, uint64_t))v25)(v10 + v11[19], v18);
  ((void (*)(uint64_t, uint64_t))v25)(v10 + v11[20], v18);
  v26 = v10 + v11[21];
  v27 = type metadata accessor for DetailChartDataElement(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v26, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  swift_bridgeObjectRelease();
  v28 = v10 + v11[23];
  v29 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
  swift_bridgeObjectRelease();
  v30 = v10 + v11[26];
  v31 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
  v32 = v10 + v11[27];
  v33 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v34 = v7 + v9[6];
  v35 = type metadata accessor for LollipopViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v34, 1, v35))
  {
    swift_bridgeObjectRelease();
    v36 = v34 + *(int *)(v35 + 20);
    v37 = type metadata accessor for DetailChartDataPoint(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
    v38 = v34 + *(int *)(v35 + 28);
    type metadata accessor for LollipopDetailViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v38);
    if (EnumCaseMultiPayload == 2)
    {
      swift_bridgeObjectRelease();
      v40 = v38 + *(int *)(type metadata accessor for TitleAndDetailLollipopDetailViewModel(0) + 20);
      v41 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v40, v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (EnumCaseMultiPayload)
        goto LABEL_22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
LABEL_22:
  v42 = v7 + v9[7];
  v43 = type metadata accessor for ConditionDetailChartFooterViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v42, 1, v43))
  {
    if (swift_getEnumCaseMultiPayload(v42) == 1)
    {
      v44 = type metadata accessor for TemperatureChartKind(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v42, v44);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v45 = a1 + a2[9];
  if (!_s7Weather24LocationCompositionStateOwet_0(v45, 1, v18))
    ((void (*)(uint64_t, uint64_t))v25)(v45, v18);
  sub_1000BA294(&qword_100BDD670);
  swift_release();
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + a2[10]));
}

_QWORD *sub_1005A28DC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t, __n128);
  __n128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void (*v80)(char *, char *, uint64_t, __n128);
  __n128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t, __n128);
  __n128 v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t, __n128);
  __n128 v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  void (*v137)(char *, char *, uint64_t, __n128);
  __n128 v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t EnumCaseMultiPayload;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  void (*v154)(char *, char *, uint64_t, __n128);
  __n128 v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  __int128 v198;
  uint64_t v199;
  void (*v200)(char *, char *, uint64_t, __n128);
  __n128 v201;
  char *v203;
  uint64_t v204;
  void (*v205)(char *, char *, uint64_t);
  int *v206;
  _QWORD *v207;
  _QWORD *v208;
  int *v209;
  char *v210;
  char *v211;

  v6 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    v7 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v11 = a3[5];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v13) == 1)
  {
    v15 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = v12;
    v17 = v14;
    v18 = 1;
  }
  else
  {
    *v12 = *v13;
    swift_retain();
    v16 = v12;
    v17 = v14;
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v16, v17, v18);
  v19 = a3[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)v21;
  v23 = v21[8];
  sub_10008D47C(*(_QWORD *)v21, v23);
  *(_QWORD *)v20 = v22;
  v20[8] = v23;
  v206 = a3;
  v207 = a2;
  v24 = a3[7];
  v208 = a1;
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  v28 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  v25[*(int *)(v28 + 20)] = v26[*(int *)(v28 + 20)];
  v25[*(int *)(v28 + 24)] = v26[*(int *)(v28 + 24)];
  v209 = (int *)type metadata accessor for DetailChartViewModel(0);
  v210 = v25;
  v29 = v209[5];
  v30 = &v25[v29];
  v211 = v26;
  v31 = &v26[v29];
  v32 = *(_QWORD *)&v26[v29];
  v33 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = v32;
  *((_QWORD *)v30 + 1) = v33;
  v34 = (int *)type metadata accessor for ChartViewModel(0);
  v35 = v34[5];
  v36 = &v30[v35];
  v37 = &v31[v35];
  v38 = type metadata accessor for ChartKind(0);
  v39 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v38 - 8) + 16);
  v40 = swift_bridgeObjectRetain();
  v39(v36, v37, v38, v40);
  *(_QWORD *)&v30[v34[6]] = *(_QWORD *)&v31[v34[6]];
  v41 = v34[7];
  v42 = &v30[v41];
  v43 = &v31[v41];
  v44 = type metadata accessor for DetailChartExtrema(0);
  v45 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v44 - 8) + 16);
  v46 = swift_bridgeObjectRetain();
  v45(v42, v43, v44, v46);
  *(_QWORD *)&v30[v34[8]] = *(_QWORD *)&v31[v34[8]];
  *(_QWORD *)&v30[v34[9]] = *(_QWORD *)&v31[v34[9]];
  *(_OWORD *)&v30[v34[10]] = *(_OWORD *)&v31[v34[10]];
  v47 = v34[11];
  v48 = &v30[v47];
  v49 = &v31[v47];
  v50 = *(void **)v49;
  v51 = (void *)*((_QWORD *)v49 + 1);
  v52 = *((_QWORD *)v49 + 2);
  LOBYTE(v45) = v49[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001A41A0(v50, v51, v52, v45);
  *(_QWORD *)v48 = v50;
  *((_QWORD *)v48 + 1) = v51;
  *((_QWORD *)v48 + 2) = v52;
  v48[24] = (char)v45;
  v53 = v34[12];
  v54 = &v30[v53];
  v55 = &v31[v53];
  *(_QWORD *)&v30[v53] = *(_QWORD *)&v31[v53];
  v56 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v57 = &v54[v56];
  v58 = &v55[v56];
  v59 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v58, 1, v59))
  {
    v60 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v57, 0, 1, v59);
  }
  v61 = v34[13];
  v62 = &v30[v61];
  v63 = &v31[v61];
  *(_QWORD *)v62 = *(_QWORD *)v63;
  v62[8] = v63[8];
  v64 = v34[14];
  v65 = &v30[v64];
  v66 = &v31[v64];
  v67 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v66, 1, v67))
  {
    v68 = type metadata accessor for ChartViewModel.Background(0);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v65 = *(_QWORD *)v66;
    v69 = *(int *)(v67 + 48);
    v70 = &v65[v69];
    v71 = &v66[v69];
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v59))
    {
      v72 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v70, v71, v59);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v59);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v65, 0, 1, v67);
  }
  *(_QWORD *)&v30[v34[15]] = *(_QWORD *)&v31[v34[15]];
  v73 = v34[16];
  v74 = &v30[v73];
  v75 = &v31[v73];
  v76 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
  *(_QWORD *)&v30[v34[17]] = *(_QWORD *)&v31[v34[17]];
  v77 = v34[18];
  v78 = &v30[v77];
  v79 = &v31[v77];
  v80 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v59 - 8) + 16);
  v81 = swift_bridgeObjectRetain();
  v80(v78, v79, v59, v81);
  ((void (*)(char *, char *, uint64_t))v80)(&v30[v34[19]], &v31[v34[19]], v59);
  v205 = (void (*)(char *, char *, uint64_t))v80;
  ((void (*)(char *, char *, uint64_t))v80)(&v30[v34[20]], &v31[v34[20]], v59);
  v82 = v34[21];
  v83 = &v30[v82];
  v84 = &v31[v82];
  v85 = type metadata accessor for DetailChartDataElement(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v84, 1, v85))
  {
    v86 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v83, v84, v85);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v83, 0, 1, v85);
  }
  *(_QWORD *)&v30[v34[22]] = *(_QWORD *)&v31[v34[22]];
  v87 = v34[23];
  v88 = &v30[v87];
  v89 = &v31[v87];
  v90 = type metadata accessor for ChartPeakMarkStyle(0);
  v91 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v90 - 8) + 16);
  v92 = swift_bridgeObjectRetain();
  v91(v88, v89, v90, v92);
  *(_QWORD *)&v30[v34[24]] = *(_QWORD *)&v31[v34[24]];
  *(_QWORD *)&v30[v34[25]] = *(_QWORD *)&v31[v34[25]];
  v93 = v34[26];
  v94 = &v30[v93];
  v95 = &v31[v93];
  v96 = type metadata accessor for ChartViewModelInterpolationMode(0);
  v97 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v96 - 8) + 16);
  v98 = swift_bridgeObjectRetain();
  v97(v94, v95, v96, v98);
  v99 = v34[27];
  v100 = &v30[v99];
  v101 = &v31[v99];
  v102 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v100, v101, v102);
  v103 = v34[28];
  v104 = &v30[v103];
  v105 = &v31[v103];
  v106 = *((_QWORD *)v105 + 1);
  *(_QWORD *)v104 = *(_QWORD *)v105;
  *((_QWORD *)v104 + 1) = v106;
  v107 = v34[29];
  v108 = &v30[v107];
  v109 = &v31[v107];
  v110 = *((_QWORD *)v109 + 1);
  *(_QWORD *)v108 = *(_QWORD *)v109;
  *((_QWORD *)v108 + 1) = v110;
  v111 = v34[30];
  v112 = &v30[v111];
  v113 = &v31[v111];
  v114 = *((_QWORD *)v113 + 1);
  *(_QWORD *)v112 = *(_QWORD *)v113;
  *((_QWORD *)v112 + 1) = v114;
  v115 = v34[31];
  v116 = &v30[v115];
  v117 = &v31[v115];
  v118 = *((_QWORD *)v117 + 1);
  *(_QWORD *)v116 = *(_QWORD *)v117;
  *((_QWORD *)v116 + 1) = v118;
  v119 = v34[32];
  v120 = &v30[v119];
  v121 = &v31[v119];
  v122 = *((_QWORD *)v121 + 1);
  *(_QWORD *)v120 = *(_QWORD *)v121;
  *((_QWORD *)v120 + 1) = v122;
  v123 = v34[33];
  v124 = &v30[v123];
  v125 = &v31[v123];
  v126 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v124 = *(_QWORD *)v125;
  *((_QWORD *)v124 + 1) = v126;
  v127 = v209[6];
  v128 = &v210[v127];
  v129 = &v211[v127];
  v130 = (int *)type metadata accessor for LollipopViewModel(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v129, 1, (uint64_t)v130))
  {
    v131 = sub_1000BA294(&qword_100BE19B8);
    memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
    goto LABEL_28;
  }
  v132 = *((_QWORD *)v129 + 1);
  *(_QWORD *)v128 = *(_QWORD *)v129;
  *((_QWORD *)v128 + 1) = v132;
  v133 = v130[5];
  v134 = &v128[v133];
  v135 = &v129[v133];
  v136 = type metadata accessor for DetailChartDataPoint(0);
  v137 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v136 - 8) + 16);
  v138 = swift_bridgeObjectRetain();
  v137(v134, v135, v136, v138);
  *(_QWORD *)&v128[v130[6]] = *(_QWORD *)&v129[v130[6]];
  v139 = v130[7];
  v140 = &v128[v139];
  v141 = &v129[v139];
  v142 = type metadata accessor for LollipopDetailViewModel(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v141);
  v144 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v204 = v142;
    v149 = *((_QWORD *)v141 + 1);
    *(_QWORD *)v140 = *(_QWORD *)v141;
    *((_QWORD *)v140 + 1) = v149;
    v150 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
    v151 = v150[5];
    v203 = &v140[v151];
    v152 = &v141[v151];
    v153 = type metadata accessor for AttributedString(0);
    v154 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v153 - 8) + 16);
    v155 = swift_bridgeObjectRetain();
    v154(v203, v152, v153, v155);
    v156 = v150[6];
    v157 = &v140[v156];
    v158 = &v141[v156];
    v159 = *((_QWORD *)v158 + 1);
    *(_QWORD *)v157 = *(_QWORD *)v158;
    *((_QWORD *)v157 + 1) = v159;
    v160 = v150[7];
    v161 = &v140[v160];
    v162 = &v141[v160];
    v163 = *((_QWORD *)v162 + 1);
    *(_QWORD *)v161 = *(_QWORD *)v162;
    *((_QWORD *)v161 + 1) = v163;
    v164 = v150[8];
    v165 = &v140[v164];
    v166 = &v141[v164];
    v167 = *((_QWORD *)v166 + 1);
    *(_QWORD *)v165 = *(_QWORD *)v166;
    *((_QWORD *)v165 + 1) = v167;
    v168 = v150[9];
    v169 = &v140[v168];
    v170 = &v141[v168];
    v171 = *((_QWORD *)v170 + 1);
    *(_QWORD *)v169 = *(_QWORD *)v170;
    *((_QWORD *)v169 + 1) = v171;
    v172 = v150[10];
    v173 = &v140[v172];
    v174 = &v141[v172];
    v175 = *((_QWORD *)v174 + 1);
    *(_QWORD *)v173 = *(_QWORD *)v174;
    *((_QWORD *)v173 + 1) = v175;
    v176 = v150[11];
    v144 = 2;
    v140[v176] = v141[v176];
    swift_bridgeObjectRetain();
    v142 = v204;
  }
  else
  {
    if ((_DWORD)EnumCaseMultiPayload != 1)
    {
      v177 = *((_QWORD *)v141 + 1);
      *(_QWORD *)v140 = *(_QWORD *)v141;
      *((_QWORD *)v140 + 1) = v177;
      v178 = *((_QWORD *)v141 + 3);
      *((_QWORD *)v140 + 2) = *((_QWORD *)v141 + 2);
      *((_QWORD *)v140 + 3) = v178;
      v179 = *((_QWORD *)v141 + 5);
      *((_QWORD *)v140 + 4) = *((_QWORD *)v141 + 4);
      *((_QWORD *)v140 + 5) = v179;
      goto LABEL_27;
    }
    v145 = *((_QWORD *)v141 + 1);
    *(_QWORD *)v140 = *(_QWORD *)v141;
    *((_QWORD *)v140 + 1) = v145;
    v146 = *((_QWORD *)v141 + 3);
    *((_QWORD *)v140 + 2) = *((_QWORD *)v141 + 2);
    *((_QWORD *)v140 + 3) = v146;
    v147 = *((_QWORD *)v141 + 5);
    *((_QWORD *)v140 + 4) = *((_QWORD *)v141 + 4);
    *((_QWORD *)v140 + 5) = v147;
    v148 = *((_QWORD *)v141 + 7);
    *((_QWORD *)v140 + 6) = *((_QWORD *)v141 + 6);
    *((_QWORD *)v140 + 7) = v148;
    v140[64] = v141[64];
    v140[65] = v141[65];
  }
  swift_bridgeObjectRetain();
LABEL_27:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload(v140, v142, v144);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v128, 0, 1, (uint64_t)v130);
LABEL_28:
  v180 = v209[7];
  v181 = &v210[v180];
  v182 = &v211[v180];
  v183 = type metadata accessor for ConditionDetailChartFooterViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v182, 1, v183))
  {
    v184 = sub_1000BA294(&qword_100BE1968);
    memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v182) == 1)
    {
      v185 = type metadata accessor for TemperatureChartKind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v185 - 8) + 16))(v181, v182, v185);
      v186 = v181;
      v187 = v183;
      v188 = 1;
    }
    else
    {
      v189 = *((_QWORD *)v182 + 1);
      *(_QWORD *)v181 = *(_QWORD *)v182;
      *((_QWORD *)v181 + 1) = v189;
      swift_bridgeObjectRetain();
      v186 = v181;
      v187 = v183;
      v188 = 0;
    }
    swift_storeEnumTagMultiPayload(v186, v187, v188);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v181, 0, 1, v183);
  }
  v190 = v206[9];
  *((_BYTE *)v208 + v206[8]) = *((_BYTE *)v207 + v206[8]);
  v191 = (char *)v208 + v190;
  v192 = (char *)v207 + v190;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v207 + v190, 1, v59))
  {
    v193 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
  }
  else
  {
    v205(v191, v192, v59);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v191, 0, 1, v59);
  }
  v194 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&v191[*(int *)(v194 + 28)] = *(_QWORD *)&v192[*(int *)(v194 + 28)];
  v195 = v206[10];
  v196 = (char *)v208 + v195;
  v197 = (char *)v207 + v195;
  v198 = *(_OWORD *)((char *)v207 + v195 + 24);
  *(_OWORD *)((char *)v208 + v195 + 24) = v198;
  v199 = v198;
  v200 = **(void (***)(char *, char *, uint64_t, __n128))(v198 - 8);
  v201 = swift_retain();
  v200(v196, v197, v199, v201);
  *(_QWORD *)((char *)v208 + v206[11]) = *(_QWORD *)((char *)v207 + v206[11]);
  return v208;
}

_QWORD *sub_1005A33A0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  id v49;
  void *v50;
  uint64_t v51;
  unsigned __int8 v52;
  void *v53;
  void *v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  size_t v81;
  char *v82;
  const void *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  __n128 v95;
  void (*v96)(char *, char *, uint64_t, __n128);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  int *v142;
  int v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  void (*v148)(char *, char *, uint64_t, __n128);
  __n128 v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unsigned int EnumCaseMultiPayload;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int *v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(char *, char *, uint64_t, __n128);
  __n128 v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  int *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  void (*v196)(uint64_t, char *, uint64_t, __n128);
  __n128 v197;
  uint64_t v198;
  _QWORD *v199;
  char *v200;
  uint64_t v201;
  _QWORD *v202;
  char *v203;
  uint64_t v204;
  _QWORD *v205;
  char *v206;
  uint64_t v207;
  _QWORD *v208;
  char *v209;
  uint64_t v210;
  _QWORD *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  int v218;
  int v219;
  int *v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  char *v238;
  char *v239;
  unsigned int v240;
  uint64_t v241;
  void (*v242)(char *, char *, uint64_t);
  uint64_t v243;
  int *v244;
  _QWORD *v245;
  char *v246;
  char *v247;
  uint64_t v248;

  if (a1 != a2)
  {
    sub_100021A14((uint64_t)a1, &qword_100BC2908);
    v6 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v7 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v11 = a3[5];
    v12 = (_QWORD *)((char *)a1 + v11);
    v13 = (_QWORD *)((char *)a2 + v11);
    sub_100021A14((uint64_t)a1 + v11, &qword_100BC68C8);
    v14 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v13) == 1)
    {
      v15 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = v12;
      v17 = v14;
      v18 = 1;
    }
    else
    {
      *v12 = *v13;
      swift_retain();
      v16 = v12;
      v17 = v14;
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v17, v18);
  }
  v19 = a3[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)v21;
  v23 = v21[8];
  sub_10008D47C(*(_QWORD *)v21, v23);
  v24 = *(_QWORD *)v20;
  v25 = v20[8];
  *(_QWORD *)v20 = v22;
  v20[8] = v23;
  sub_1000B15F8(v24, v25);
  v26 = a3[7];
  v27 = (char *)a1 + v26;
  v245 = a2;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  v30 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  v27[*(int *)(v30 + 20)] = v28[*(int *)(v30 + 20)];
  v27[*(int *)(v30 + 24)] = v28[*(int *)(v30 + 24)];
  v247 = v27;
  v248 = type metadata accessor for DetailChartViewModel(0);
  v31 = *(int *)(v248 + 20);
  v32 = &v27[v31];
  v246 = v28;
  v33 = &v28[v31];
  *(_QWORD *)v32 = *(_QWORD *)&v28[v31];
  *((_QWORD *)v32 + 1) = *(_QWORD *)&v28[v31 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = (int *)type metadata accessor for ChartViewModel(0);
  v35 = v34[5];
  v36 = &v32[v35];
  v37 = &v33[v35];
  v38 = type metadata accessor for ChartKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  *(_QWORD *)&v32[v34[6]] = *(_QWORD *)&v33[v34[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39 = v34[7];
  v40 = &v32[v39];
  v41 = &v33[v39];
  v42 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  *(_QWORD *)&v32[v34[8]] = *(_QWORD *)&v33[v34[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v32[v34[9]] = *(_QWORD *)&v33[v34[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = v34[10];
  v44 = &v32[v43];
  v45 = &v33[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *((_QWORD *)v44 + 1) = *((_QWORD *)v45 + 1);
  v46 = v34[11];
  v47 = &v32[v46];
  v48 = &v33[v46];
  v49 = *(id *)v48;
  v50 = (void *)*((_QWORD *)v48 + 1);
  v51 = *((_QWORD *)v48 + 2);
  v52 = v48[24];
  sub_1001A41A0(*(id *)v48, v50, v51, v52);
  v53 = *(void **)v47;
  v54 = (void *)*((_QWORD *)v47 + 1);
  v55 = *((_QWORD *)v47 + 2);
  *(_QWORD *)v47 = v49;
  *((_QWORD *)v47 + 1) = v50;
  *((_QWORD *)v47 + 2) = v51;
  v56 = v47[24];
  v47[24] = v52;
  sub_1001A44FC(v53, v54, v55, v56);
  v57 = v34[12];
  v58 = &v32[v57];
  v59 = &v33[v57];
  *(_QWORD *)&v32[v57] = *(_QWORD *)&v33[v57];
  v60 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v61 = &v58[v60];
  v62 = &v59[v60];
  v63 = type metadata accessor for Date(0);
  LODWORD(v58) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v63);
  v64 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v62, 1, v63);
  v244 = a3;
  if ((_DWORD)v58)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v61, 0, 1, v63);
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  v65 = *(_QWORD *)(v63 - 8);
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v65 + 8))(v61, v63);
LABEL_14:
    v66 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v65 + 24))(v61, v62, v63);
LABEL_15:
  v67 = v34[13];
  v68 = &v32[v67];
  v69 = &v33[v67];
  v70 = *(_QWORD *)v69;
  v68[8] = v69[8];
  *(_QWORD *)v68 = v70;
  v71 = v34[14];
  v72 = &v32[v71];
  v73 = &v33[v71];
  v74 = sub_1000BA294(&qword_100BCB988);
  v75 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v72, 1, v74);
  v76 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v73, 1, v74);
  if (v75)
  {
    if (!v76)
    {
      *(_QWORD *)v72 = *(_QWORD *)v73;
      v77 = *(int *)(v74 + 48);
      v78 = &v72[v77];
      v79 = &v73[v77];
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v79, 1, v63))
      {
        v80 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v78, v79, v63);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v78, 0, 1, v63);
      }
      v89 = (uint64_t)v72;
      v90 = v74;
      goto LABEL_29;
    }
    goto LABEL_21;
  }
  if (v76)
  {
    sub_100021A14((uint64_t)v72, &qword_100BCB988);
LABEL_21:
    v81 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for ChartViewModel.Background(0) - 8) + 64);
    v82 = v72;
    v83 = v73;
LABEL_22:
    memcpy(v82, v83, v81);
    goto LABEL_30;
  }
  *(_QWORD *)v72 = *(_QWORD *)v73;
  swift_retain();
  swift_release();
  v84 = *(int *)(v74 + 48);
  v85 = &v72[v84];
  v86 = (uint64_t)&v73[v84];
  v87 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&v72[v84], 1, v63);
  v88 = _s7Weather24LocationCompositionStateOwet_0(v86, 1, v63);
  if (v87)
  {
    if (!v88)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v85, v86, v63);
      v89 = (uint64_t)v85;
      v90 = v63;
LABEL_29:
      _s7Weather24LocationCompositionStateOwst_0(v89, 0, 1, v90);
      goto LABEL_30;
    }
    goto LABEL_55;
  }
  v190 = *(_QWORD *)(v63 - 8);
  if (v88)
  {
    (*(void (**)(char *, uint64_t))(v190 + 8))(v85, v63);
LABEL_55:
    v81 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
    v82 = v85;
    v83 = (const void *)v86;
    goto LABEL_22;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v190 + 24))(v85, v86, v63);
LABEL_30:
  *(_QWORD *)&v32[v34[15]] = *(_QWORD *)&v33[v34[15]];
  v91 = v34[16];
  v92 = &v32[v91];
  v93 = &v33[v91];
  v94 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 24))(v92, v93, v94);
  *(_QWORD *)&v32[v34[17]] = *(_QWORD *)&v33[v34[17]];
  swift_bridgeObjectRetain();
  v95 = swift_bridgeObjectRelease();
  v243 = *(_QWORD *)(v63 - 8);
  v96 = *(void (**)(char *, char *, uint64_t, __n128))(v243 + 24);
  v96(&v32[v34[18]], &v33[v34[18]], v63, v95);
  ((void (*)(char *, char *, uint64_t))v96)(&v32[v34[19]], &v33[v34[19]], v63);
  v242 = (void (*)(char *, char *, uint64_t))v96;
  ((void (*)(char *, char *, uint64_t))v96)(&v32[v34[20]], &v33[v34[20]], v63);
  v97 = v34[21];
  v98 = &v32[v97];
  v99 = &v33[v97];
  v100 = type metadata accessor for DetailChartDataElement(0);
  v101 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v98, 1, v100);
  v102 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v99, 1, v100);
  if (v101)
  {
    if (!v102)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 16))(v98, v99, v100);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v98, 0, 1, v100);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v103 = *(_QWORD *)(v100 - 8);
  if (v102)
  {
    (*(void (**)(char *, uint64_t))(v103 + 8))(v98, v100);
LABEL_35:
    v104 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v103 + 24))(v98, v99, v100);
LABEL_36:
  v105 = v246;
  *(_QWORD *)&v32[v34[22]] = *(_QWORD *)&v33[v34[22]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v106 = v34[23];
  v107 = &v32[v106];
  v108 = &v33[v106];
  v109 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 24))(v107, v108, v109);
  *(_QWORD *)&v32[v34[24]] = *(_QWORD *)&v33[v34[24]];
  *(_QWORD *)&v32[v34[25]] = *(_QWORD *)&v33[v34[25]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v110 = v34[26];
  v111 = &v32[v110];
  v112 = &v33[v110];
  v113 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v113 - 8) + 24))(v111, v112, v113);
  v114 = v34[27];
  v115 = &v32[v114];
  v116 = &v33[v114];
  v117 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 24))(v115, v116, v117);
  v118 = v34[28];
  v119 = &v32[v118];
  v120 = &v33[v118];
  *(_QWORD *)v119 = *(_QWORD *)v120;
  *((_QWORD *)v119 + 1) = *((_QWORD *)v120 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v121 = v34[29];
  v122 = &v32[v121];
  v123 = &v33[v121];
  *(_QWORD *)v122 = *(_QWORD *)v123;
  *((_QWORD *)v122 + 1) = *((_QWORD *)v123 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v124 = v34[30];
  v125 = &v32[v124];
  v126 = &v33[v124];
  *(_QWORD *)v125 = *(_QWORD *)v126;
  *((_QWORD *)v125 + 1) = *((_QWORD *)v126 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v127 = v34[31];
  v128 = &v32[v127];
  v129 = &v33[v127];
  *(_QWORD *)v128 = *(_QWORD *)v129;
  *((_QWORD *)v128 + 1) = *((_QWORD *)v129 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v130 = v34[32];
  v131 = &v32[v130];
  v132 = &v33[v130];
  *(_QWORD *)v131 = *(_QWORD *)v132;
  *((_QWORD *)v131 + 1) = *((_QWORD *)v132 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v133 = v34[33];
  v134 = &v32[v133];
  v135 = &v33[v133];
  v136 = *((_QWORD *)v135 + 1);
  *(_QWORD *)v134 = *(_QWORD *)v135;
  *((_QWORD *)v134 + 1) = v136;
  swift_retain();
  swift_release();
  v138 = v247;
  v137 = v248;
  v139 = *(int *)(v248 + 24);
  v140 = &v247[v139];
  v141 = &v246[v139];
  v142 = (int *)type metadata accessor for LollipopViewModel(0);
  LODWORD(v115) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v140, 1, (uint64_t)v142);
  v143 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v141, 1, (uint64_t)v142);
  if ((_DWORD)v115)
  {
    if (!v143)
    {
      *(_QWORD *)v140 = *(_QWORD *)v141;
      *((_QWORD *)v140 + 1) = *((_QWORD *)v141 + 1);
      v144 = v142[5];
      v145 = &v140[v144];
      v146 = &v141[v144];
      v147 = type metadata accessor for DetailChartDataPoint(0);
      v148 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v147 - 8) + 16);
      v149 = swift_bridgeObjectRetain();
      v148(v145, v146, v147, v149);
      *(_QWORD *)&v140[v142[6]] = *(_QWORD *)&v141[v142[6]];
      v150 = v142[7];
      v151 = &v140[v150];
      v152 = &v141[v150];
      v153 = type metadata accessor for LollipopDetailViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v152);
      v240 = EnumCaseMultiPayload;
      if (EnumCaseMultiPayload == 2)
      {
        *(_QWORD *)v151 = *(_QWORD *)v152;
        *((_QWORD *)v151 + 1) = *((_QWORD *)v152 + 1);
        v170 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
        v171 = v170[5];
        v238 = &v152[v171];
        v239 = &v151[v171];
        v172 = type metadata accessor for AttributedString(0);
        v173 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v172 - 8) + 16);
        v174 = swift_bridgeObjectRetain();
        v173(v239, v238, v172, v174);
        v175 = v170[6];
        v176 = &v151[v175];
        v177 = &v152[v175];
        *(_QWORD *)v176 = *(_QWORD *)v177;
        *((_QWORD *)v176 + 1) = *((_QWORD *)v177 + 1);
        v178 = v170[7];
        v179 = &v151[v178];
        v180 = &v152[v178];
        *(_QWORD *)v179 = *(_QWORD *)v180;
        *((_QWORD *)v179 + 1) = *((_QWORD *)v180 + 1);
        v181 = v170[8];
        v182 = &v151[v181];
        v183 = &v152[v181];
        *(_QWORD *)v182 = *(_QWORD *)v183;
        *((_QWORD *)v182 + 1) = *((_QWORD *)v183 + 1);
        v184 = v170[9];
        v185 = &v151[v184];
        v186 = &v152[v184];
        *(_QWORD *)v185 = *(_QWORD *)v186;
        *((_QWORD *)v185 + 1) = *((_QWORD *)v186 + 1);
        v187 = v170[10];
        v188 = &v151[v187];
        v189 = &v152[v187];
        *(_QWORD *)v188 = *(_QWORD *)v189;
        *((_QWORD *)v188 + 1) = *((_QWORD *)v189 + 1);
        v151[v170[11]] = v152[v170[11]];
        swift_bridgeObjectRetain();
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          *(_QWORD *)v151 = *(_QWORD *)v152;
          *((_QWORD *)v151 + 1) = *((_QWORD *)v152 + 1);
          *((_QWORD *)v151 + 2) = *((_QWORD *)v152 + 2);
          *((_QWORD *)v151 + 3) = *((_QWORD *)v152 + 3);
          *((_QWORD *)v151 + 4) = *((_QWORD *)v152 + 4);
          *((_QWORD *)v151 + 5) = *((_QWORD *)v152 + 5);
          goto LABEL_52;
        }
        *(_QWORD *)v151 = *(_QWORD *)v152;
        *((_QWORD *)v151 + 1) = *((_QWORD *)v152 + 1);
        *((_QWORD *)v151 + 2) = *((_QWORD *)v152 + 2);
        *((_QWORD *)v151 + 3) = *((_QWORD *)v152 + 3);
        *((_QWORD *)v151 + 4) = *((_QWORD *)v152 + 4);
        *((_QWORD *)v151 + 5) = *((_QWORD *)v152 + 5);
        *((_QWORD *)v151 + 6) = *((_QWORD *)v152 + 6);
        *((_QWORD *)v151 + 7) = *((_QWORD *)v152 + 7);
        v151[64] = v152[64];
        v151[65] = v152[65];
      }
      swift_bridgeObjectRetain();
LABEL_52:
      v138 = v247;
      v137 = v248;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload(v151, v153, v240);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v140, 0, 1, (uint64_t)v142);
      v156 = v245;
      v105 = v246;
      goto LABEL_59;
    }
LABEL_43:
    v155 = sub_1000BA294(&qword_100BE19B8);
    memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
    v156 = v245;
    goto LABEL_59;
  }
  if (v143)
  {
    sub_1000215BC((uint64_t)v140, type metadata accessor for LollipopViewModel);
    goto LABEL_43;
  }
  *(_QWORD *)v140 = *(_QWORD *)v141;
  *((_QWORD *)v140 + 1) = *((_QWORD *)v141 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v157 = v142[5];
  v158 = &v140[v157];
  v159 = &v141[v157];
  v160 = type metadata accessor for DetailChartDataPoint(0);
  v161 = v159;
  v137 = v248;
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 24))(v158, v161, v160);
  *(_QWORD *)&v140[v142[6]] = *(_QWORD *)&v141[v142[6]];
  v156 = v245;
  if (a1 != v245)
  {
    v162 = v142[7];
    v163 = (uint64_t)&v140[v162];
    v164 = &v141[v162];
    sub_1000215BC(v163, type metadata accessor for LollipopDetailViewModel);
    v165 = type metadata accessor for LollipopDetailViewModel(0);
    v166 = swift_getEnumCaseMultiPayload(v164);
    if (v166 == 2)
    {
      *(_QWORD *)v163 = *(_QWORD *)v164;
      *(_QWORD *)(v163 + 8) = *((_QWORD *)v164 + 1);
      v191 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v192 = v191[5];
      v193 = v163 + v192;
      v241 = v165;
      v194 = &v164[v192];
      v195 = type metadata accessor for AttributedString(0);
      v196 = *(void (**)(uint64_t, char *, uint64_t, __n128))(*(_QWORD *)(v195 - 8) + 16);
      v197 = swift_bridgeObjectRetain();
      v196(v193, v194, v195, v197);
      v198 = v191[6];
      v199 = (_QWORD *)(v163 + v198);
      v200 = &v164[v198];
      *v199 = *(_QWORD *)v200;
      v199[1] = *((_QWORD *)v200 + 1);
      v201 = v191[7];
      v202 = (_QWORD *)(v163 + v201);
      v203 = &v164[v201];
      *v202 = *(_QWORD *)v203;
      v202[1] = *((_QWORD *)v203 + 1);
      v204 = v191[8];
      v205 = (_QWORD *)(v163 + v204);
      v206 = &v164[v204];
      *v205 = *(_QWORD *)v206;
      v205[1] = *((_QWORD *)v206 + 1);
      v207 = v191[9];
      v208 = (_QWORD *)(v163 + v207);
      v209 = &v164[v207];
      *v208 = *(_QWORD *)v209;
      v208[1] = *((_QWORD *)v209 + 1);
      v210 = v191[10];
      v211 = (_QWORD *)(v163 + v210);
      v212 = &v164[v210];
      *v211 = *(_QWORD *)v212;
      v211[1] = *((_QWORD *)v212 + 1);
      v213 = v191[11];
      v105 = v246;
      *(_BYTE *)(v163 + v213) = v164[v213];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v138 = v247;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v156 = v245;
      swift_bridgeObjectRetain();
      v167 = v163;
      v168 = v241;
      v169 = 2;
    }
    else
    {
      *(_QWORD *)v163 = *(_QWORD *)v164;
      *(_QWORD *)(v163 + 8) = *((_QWORD *)v164 + 1);
      *(_QWORD *)(v163 + 16) = *((_QWORD *)v164 + 2);
      *(_QWORD *)(v163 + 24) = *((_QWORD *)v164 + 3);
      *(_QWORD *)(v163 + 32) = *((_QWORD *)v164 + 4);
      *(_QWORD *)(v163 + 40) = *((_QWORD *)v164 + 5);
      if (v166 == 1)
      {
        *(_QWORD *)(v163 + 48) = *((_QWORD *)v164 + 6);
        *(_QWORD *)(v163 + 56) = *((_QWORD *)v164 + 7);
        *(_BYTE *)(v163 + 64) = v164[64];
        *(_BYTE *)(v163 + 65) = v164[65];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v105 = v246;
        swift_bridgeObjectRetain();
        v138 = v247;
        swift_bridgeObjectRetain();
        v167 = v163;
        v168 = v165;
        v169 = 1;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v167 = v163;
        v168 = v165;
        v169 = 0;
      }
    }
    swift_storeEnumTagMultiPayload(v167, v168, v169);
    v137 = v248;
  }
LABEL_59:
  v214 = *(int *)(v137 + 28);
  v215 = &v138[v214];
  v216 = &v105[v214];
  v217 = type metadata accessor for ConditionDetailChartFooterViewModel(0);
  v218 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v215, 1, v217);
  v219 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v216, 1, v217);
  if (v218)
  {
    if (!v219)
    {
      v220 = v244;
      if (swift_getEnumCaseMultiPayload(v216) == 1)
      {
        v221 = type metadata accessor for TemperatureChartKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v221 - 8) + 16))(v215, v216, v221);
        v222 = v215;
        v223 = v217;
        v224 = 1;
      }
      else
      {
        *(_QWORD *)v215 = *(_QWORD *)v216;
        *((_QWORD *)v215 + 1) = *((_QWORD *)v216 + 1);
        swift_bridgeObjectRetain();
        v222 = v215;
        v223 = v217;
        v224 = 0;
      }
      swift_storeEnumTagMultiPayload(v222, v223, v224);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v215, 0, 1, v217);
      goto LABEL_73;
    }
LABEL_65:
    v225 = sub_1000BA294(&qword_100BE1968);
    memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
    v220 = v244;
    goto LABEL_73;
  }
  if (v219)
  {
    sub_1000215BC((uint64_t)v215, type metadata accessor for ConditionDetailChartFooterViewModel);
    goto LABEL_65;
  }
  v220 = v244;
  if (a1 != v156)
  {
    sub_1000215BC((uint64_t)v215, type metadata accessor for ConditionDetailChartFooterViewModel);
    if (swift_getEnumCaseMultiPayload(v216) == 1)
    {
      v226 = type metadata accessor for TemperatureChartKind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v226 - 8) + 16))(v215, v216, v226);
      v227 = v215;
      v228 = v217;
      v229 = 1;
    }
    else
    {
      *(_QWORD *)v215 = *(_QWORD *)v216;
      *((_QWORD *)v215 + 1) = *((_QWORD *)v216 + 1);
      swift_bridgeObjectRetain();
      v227 = v215;
      v228 = v217;
      v229 = 0;
    }
    swift_storeEnumTagMultiPayload(v227, v228, v229);
  }
LABEL_73:
  *((_BYTE *)a1 + v220[8]) = *((_BYTE *)v156 + v220[8]);
  v230 = v220[9];
  v231 = (char *)a1 + v230;
  v232 = (char *)v156 + v230;
  v233 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1 + v230, 1, v63);
  v234 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v232, 1, v63);
  if (!v233)
  {
    if (!v234)
    {
      v242(v231, v232, v63);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v243 + 8))(v231, v63);
    goto LABEL_78;
  }
  if (v234)
  {
LABEL_78:
    v235 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v231, v232, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v243 + 16))(v231, v232, v63);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v231, 0, 1, v63);
LABEL_79:
  v236 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&v231[*(int *)(v236 + 28)] = *(_QWORD *)&v232[*(int *)(v236 + 28)];
  swift_retain();
  swift_release();
  sub_100094D04((_QWORD *)((char *)a1 + v220[10]), (_QWORD *)((char *)v156 + v220[10]));
  *(_QWORD *)((char *)a1 + v220[11]) = *(_QWORD *)((char *)v156 + v220[11]);
  return a1;
}

char *sub_1005A4514(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int *v82;
  uint64_t v83;
  char *v84;
  int *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  __int128 v112;
  char *v114;
  char *v115;
  void (*v116)(char *, char *, uint64_t);
  int *v117;
  char *v118;
  char *v119;
  uint64_t v120;

  v6 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    v7 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v10) == 1)
  {
    v12 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v117 = a3;
  v118 = a2;
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = &a1[v14];
  v18 = &a2[v14];
  v19 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  v17[*(int *)(v20 + 20)] = v18[*(int *)(v20 + 20)];
  v17[*(int *)(v20 + 24)] = v18[*(int *)(v20 + 24)];
  v119 = v18;
  v120 = type metadata accessor for DetailChartViewModel(0);
  v21 = *(int *)(v120 + 20);
  v22 = &v17[v21];
  v23 = &v18[v21];
  *(_OWORD *)&v17[v21] = *(_OWORD *)&v18[v21];
  v24 = (int *)type metadata accessor for ChartViewModel(0);
  v25 = v24[5];
  v26 = &v22[v25];
  v27 = &v23[v25];
  v28 = type metadata accessor for ChartKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  *(_QWORD *)&v22[v24[6]] = *(_QWORD *)&v23[v24[6]];
  v29 = v24[7];
  v30 = &v22[v29];
  v31 = &v23[v29];
  v32 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
  *(_QWORD *)&v22[v24[8]] = *(_QWORD *)&v23[v24[8]];
  *(_QWORD *)&v22[v24[9]] = *(_QWORD *)&v23[v24[9]];
  *(_OWORD *)&v22[v24[10]] = *(_OWORD *)&v23[v24[10]];
  v33 = v24[11];
  v34 = &v22[v33];
  v35 = &v23[v33];
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 9) = *(_OWORD *)(v35 + 9);
  v36 = v24[12];
  v37 = &v22[v36];
  v38 = &v23[v36];
  *(_QWORD *)&v22[v36] = *(_QWORD *)&v23[v36];
  v39 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v40 = &v37[v39];
  v41 = &v38[v39];
  v42 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v42))
  {
    v43 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v40, 0, 1, v42);
  }
  v44 = v24[13];
  v45 = &v22[v44];
  v46 = &v23[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  v47 = v24[14];
  v48 = &v22[v47];
  v49 = &v23[v47];
  v50 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50))
  {
    v51 = type metadata accessor for ChartViewModel.Background(0);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v52 = *(int *)(v50 + 48);
    v53 = &v48[v52];
    v54 = &v49[v52];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v54, 1, v42))
    {
      v55 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v53, v54, v42);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v53, 0, 1, v42);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
  }
  *(_QWORD *)&v22[v24[15]] = *(_QWORD *)&v23[v24[15]];
  v56 = v24[16];
  v57 = &v22[v56];
  v58 = &v23[v56];
  v59 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v57, v58, v59);
  *(_QWORD *)&v22[v24[17]] = *(_QWORD *)&v23[v24[17]];
  v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32);
  v60(&v22[v24[18]], &v23[v24[18]], v42);
  v60(&v22[v24[19]], &v23[v24[19]], v42);
  v116 = v60;
  v60(&v22[v24[20]], &v23[v24[20]], v42);
  v61 = v24[21];
  v62 = &v22[v61];
  v63 = &v23[v61];
  v64 = type metadata accessor for DetailChartDataElement(0);
  v65 = v120;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v63, 1, v64))
  {
    v66 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v62, v63, v64);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v62, 0, 1, v64);
  }
  *(_QWORD *)&v22[v24[22]] = *(_QWORD *)&v23[v24[22]];
  v67 = v24[23];
  v68 = &v22[v67];
  v69 = &v23[v67];
  v70 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v68, v69, v70);
  *(_QWORD *)&v22[v24[24]] = *(_QWORD *)&v23[v24[24]];
  *(_QWORD *)&v22[v24[25]] = *(_QWORD *)&v23[v24[25]];
  v71 = v24[26];
  v72 = &v22[v71];
  v73 = &v23[v71];
  v74 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
  v75 = v24[27];
  v76 = &v22[v75];
  v77 = &v23[v75];
  v78 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v76, v77, v78);
  *(_OWORD *)&v22[v24[28]] = *(_OWORD *)&v23[v24[28]];
  *(_OWORD *)&v22[v24[29]] = *(_OWORD *)&v23[v24[29]];
  *(_OWORD *)&v22[v24[30]] = *(_OWORD *)&v23[v24[30]];
  *(_OWORD *)&v22[v24[31]] = *(_OWORD *)&v23[v24[31]];
  *(_OWORD *)&v22[v24[32]] = *(_OWORD *)&v23[v24[32]];
  *(_OWORD *)&v22[v24[33]] = *(_OWORD *)&v23[v24[33]];
  v79 = *(int *)(v120 + 24);
  v80 = &v17[v79];
  v81 = &v119[v79];
  v82 = (int *)type metadata accessor for LollipopViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v81, 1, (uint64_t)v82))
  {
    v83 = sub_1000BA294(&qword_100BE19B8);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    v85 = v117;
    v84 = v118;
  }
  else
  {
    *(_OWORD *)v80 = *(_OWORD *)v81;
    v86 = v82[5];
    v87 = &v80[v86];
    v88 = &v81[v86];
    v89 = type metadata accessor for DetailChartDataPoint(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v87, v88, v89);
    *(_QWORD *)&v80[v82[6]] = *(_QWORD *)&v81[v82[6]];
    v90 = v82[7];
    v91 = &v80[v90];
    v92 = &v81[v90];
    v93 = type metadata accessor for LollipopDetailViewModel(0);
    if (swift_getEnumCaseMultiPayload(v92) == 2)
    {
      *(_OWORD *)v91 = *(_OWORD *)v92;
      v94 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v95 = v94[5];
      v114 = &v92[v95];
      v115 = &v91[v95];
      v96 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v115, v114, v96);
      *(_OWORD *)&v91[v94[6]] = *(_OWORD *)&v92[v94[6]];
      *(_OWORD *)&v91[v94[7]] = *(_OWORD *)&v92[v94[7]];
      *(_OWORD *)&v91[v94[8]] = *(_OWORD *)&v92[v94[8]];
      *(_OWORD *)&v91[v94[9]] = *(_OWORD *)&v92[v94[9]];
      *(_OWORD *)&v91[v94[10]] = *(_OWORD *)&v92[v94[10]];
      v91[v94[11]] = v92[v94[11]];
      swift_storeEnumTagMultiPayload(v91, v93, 2);
    }
    else
    {
      memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    }
    v85 = v117;
    v84 = v118;
    v65 = v120;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v80, 0, 1, (uint64_t)v82);
  }
  v97 = *(int *)(v65 + 28);
  v98 = &v17[v97];
  v99 = &v119[v97];
  v100 = type metadata accessor for ConditionDetailChartFooterViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v99, 1, v100))
  {
    v101 = sub_1000BA294(&qword_100BE1968);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v99) == 1)
    {
      v102 = type metadata accessor for TemperatureChartKind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 32))(v98, v99, v102);
      swift_storeEnumTagMultiPayload(v98, v100, 1);
    }
    else
    {
      memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v98, 0, 1, v100);
  }
  v103 = v85[9];
  a1[v85[8]] = v84[v85[8]];
  v104 = &a1[v103];
  v105 = &v84[v103];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v84[v103], 1, v42))
  {
    v106 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
  }
  else
  {
    v116(v104, v105, v42);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v104, 0, 1, v42);
  }
  v107 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&v104[*(int *)(v107 + 28)] = *(_QWORD *)&v105[*(int *)(v107 + 28)];
  v108 = v85[10];
  v109 = v85[11];
  v110 = &a1[v108];
  v111 = &v84[v108];
  *((_QWORD *)v110 + 4) = *((_QWORD *)v111 + 4);
  v112 = *((_OWORD *)v111 + 1);
  *(_OWORD *)v110 = *(_OWORD *)v111;
  *((_OWORD *)v110 + 1) = v112;
  *(_QWORD *)&a1[v109] = *(_QWORD *)&v84[v109];
  return a1;
}

char *sub_1005A4E10(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41;
  void *v42;
  void *v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  __n128 v80;
  void (*v81)(char *, char *, uint64_t, __n128);
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  int *v132;
  int v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  int *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  size_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  int *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  int v170;
  int v171;
  char *v172;
  int *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  __int128 v187;
  uint64_t v189;
  void (*v190)(char *, char *, uint64_t);
  uint64_t v191;
  int *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  char *v196;
  char *v197;

  if (a1 != a2)
  {
    sub_100021A14((uint64_t)a1, &qword_100BC2908);
    v6 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      v7 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100021A14((uint64_t)&a1[v8], &qword_100BC68C8);
    v11 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v10) == 1)
    {
      v12 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  v18 = v14[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  sub_1000B15F8(v17, v18);
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  v20[*(int *)(v23 + 20)] = v21[*(int *)(v23 + 20)];
  v20[*(int *)(v23 + 24)] = v21[*(int *)(v23 + 24)];
  v193 = v20;
  v195 = type metadata accessor for DetailChartViewModel(0);
  v24 = *(int *)(v195 + 20);
  v25 = &v20[v24];
  v196 = v21;
  v26 = &v21[v24];
  v27 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  v28 = (int *)type metadata accessor for ChartViewModel(0);
  v29 = v28[5];
  v30 = &v25[v29];
  v31 = &v26[v29];
  v32 = type metadata accessor for ChartKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 40))(v30, v31, v32);
  *(_QWORD *)&v25[v28[6]] = *(_QWORD *)&v26[v28[6]];
  swift_bridgeObjectRelease();
  v33 = v28[7];
  v34 = &v25[v33];
  v35 = &v26[v33];
  v36 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 40))(v34, v35, v36);
  *(_QWORD *)&v25[v28[8]] = *(_QWORD *)&v26[v28[8]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v25[v28[9]] = *(_QWORD *)&v26[v28[9]];
  swift_bridgeObjectRelease();
  *(_OWORD *)&v25[v28[10]] = *(_OWORD *)&v26[v28[10]];
  v37 = v28[11];
  v38 = &v25[v37];
  v39 = &v26[v37];
  v40 = *((_QWORD *)v39 + 2);
  v41 = v39[24];
  v42 = *(void **)v38;
  v43 = (void *)*((_QWORD *)v38 + 1);
  v44 = *((_QWORD *)v38 + 2);
  *(_OWORD *)v38 = *(_OWORD *)v39;
  *((_QWORD *)v38 + 2) = v40;
  v45 = v38[24];
  v38[24] = v41;
  sub_1001A44FC(v42, v43, v44, v45);
  v46 = v28[12];
  v47 = &v25[v46];
  v48 = &v26[v46];
  *(_QWORD *)&v25[v46] = *(_QWORD *)&v26[v46];
  v49 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v50 = &v47[v49];
  v51 = &v48[v49];
  v52 = type metadata accessor for Date(0);
  LODWORD(v47) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v52);
  v53 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v51, 1, v52);
  v197 = a2;
  v192 = a3;
  if ((_DWORD)v47)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v50, 0, 1, v52);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  v54 = *(_QWORD *)(v52 - 8);
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v50, v52);
LABEL_13:
    v55 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 40))(v50, v51, v52);
LABEL_14:
  v56 = v193;
  v57 = v28[13];
  v58 = &v25[v57];
  v59 = &v26[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v59[8];
  v60 = v28[14];
  v61 = &v25[v60];
  v62 = &v26[v60];
  v63 = sub_1000BA294(&qword_100BCB988);
  v64 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v63);
  v65 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v62, 1, v63);
  if (v64)
  {
    if (!v65)
    {
      *(_QWORD *)v61 = *(_QWORD *)v62;
      v66 = *(int *)(v63 + 48);
      v67 = &v61[v66];
      v68 = &v62[v66];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v68, 1, v52))
      {
        v69 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v67, v68, v52);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v67, 0, 1, v52);
      }
      v74 = (uint64_t)v61;
      v75 = v63;
      goto LABEL_28;
    }
    goto LABEL_20;
  }
  if (v65)
  {
    sub_100021A14((uint64_t)v61, &qword_100BCB988);
LABEL_20:
    v70 = type metadata accessor for ChartViewModel.Background(0);
LABEL_21:
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_29;
  }
  *(_QWORD *)v61 = *(_QWORD *)v62;
  swift_release();
  v71 = *(int *)(v63 + 48);
  v61 += v71;
  v62 += v71;
  v72 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v52);
  v73 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v62, 1, v52);
  if (v72)
  {
    if (!v73)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v61, v62, v52);
      v74 = (uint64_t)v61;
      v75 = v52;
LABEL_28:
      _s7Weather24LocationCompositionStateOwst_0(v74, 0, 1, v75);
      goto LABEL_29;
    }
    goto LABEL_71;
  }
  v189 = *(_QWORD *)(v52 - 8);
  if (v73)
  {
    (*(void (**)(char *, uint64_t))(v189 + 8))(v61, v52);
LABEL_71:
    v70 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v189 + 40))(v61, v62, v52);
LABEL_29:
  *(_QWORD *)&v25[v28[15]] = *(_QWORD *)&v26[v28[15]];
  v76 = v28[16];
  v77 = &v25[v76];
  v78 = &v26[v76];
  v79 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 40))(v77, v78, v79);
  *(_QWORD *)&v25[v28[17]] = *(_QWORD *)&v26[v28[17]];
  v80 = swift_bridgeObjectRelease();
  v191 = *(_QWORD *)(v52 - 8);
  v81 = *(void (**)(char *, char *, uint64_t, __n128))(v191 + 40);
  v81(&v25[v28[18]], &v26[v28[18]], v52, v80);
  ((void (*)(char *, char *, uint64_t))v81)(&v25[v28[19]], &v26[v28[19]], v52);
  v190 = (void (*)(char *, char *, uint64_t))v81;
  ((void (*)(char *, char *, uint64_t))v81)(&v25[v28[20]], &v26[v28[20]], v52);
  v82 = v28[21];
  v83 = &v25[v82];
  v84 = &v26[v82];
  v85 = type metadata accessor for DetailChartDataElement(0);
  v86 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v83, 1, v85);
  v87 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v84, 1, v85);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v83, v84, v85);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v83, 0, 1, v85);
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  v88 = *(_QWORD *)(v85 - 8);
  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v88 + 8))(v83, v85);
LABEL_34:
    v89 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    goto LABEL_35;
  }
  (*(void (**)(char *, char *, uint64_t))(v88 + 40))(v83, v84, v85);
LABEL_35:
  *(_QWORD *)&v25[v28[22]] = *(_QWORD *)&v26[v28[22]];
  swift_bridgeObjectRelease();
  v90 = v28[23];
  v91 = &v25[v90];
  v92 = &v26[v90];
  v93 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 40))(v91, v92, v93);
  *(_QWORD *)&v25[v28[24]] = *(_QWORD *)&v26[v28[24]];
  *(_QWORD *)&v25[v28[25]] = *(_QWORD *)&v26[v28[25]];
  swift_bridgeObjectRelease();
  v94 = v28[26];
  v95 = &v25[v94];
  v96 = &v26[v94];
  v97 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 40))(v95, v96, v97);
  v98 = v28[27];
  v99 = &v25[v98];
  v100 = &v26[v98];
  v101 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 40))(v99, v100, v101);
  v102 = v28[28];
  v103 = &v25[v102];
  v104 = &v26[v102];
  v106 = *(_QWORD *)v104;
  v105 = *((_QWORD *)v104 + 1);
  *(_QWORD *)v103 = v106;
  *((_QWORD *)v103 + 1) = v105;
  swift_bridgeObjectRelease();
  v107 = v28[29];
  v108 = &v25[v107];
  v109 = &v26[v107];
  v111 = *(_QWORD *)v109;
  v110 = *((_QWORD *)v109 + 1);
  *(_QWORD *)v108 = v111;
  *((_QWORD *)v108 + 1) = v110;
  swift_bridgeObjectRelease();
  v112 = v28[30];
  v113 = &v25[v112];
  v114 = &v26[v112];
  v116 = *(_QWORD *)v114;
  v115 = *((_QWORD *)v114 + 1);
  *(_QWORD *)v113 = v116;
  *((_QWORD *)v113 + 1) = v115;
  swift_bridgeObjectRelease();
  v117 = v28[31];
  v118 = &v25[v117];
  v119 = &v26[v117];
  v121 = *(_QWORD *)v119;
  v120 = *((_QWORD *)v119 + 1);
  *(_QWORD *)v118 = v121;
  *((_QWORD *)v118 + 1) = v120;
  swift_bridgeObjectRelease();
  v122 = v28[32];
  v123 = &v25[v122];
  v124 = &v26[v122];
  v126 = *(_QWORD *)v124;
  v125 = *((_QWORD *)v124 + 1);
  *(_QWORD *)v123 = v126;
  *((_QWORD *)v123 + 1) = v125;
  swift_bridgeObjectRelease();
  *(_OWORD *)&v25[v28[33]] = *(_OWORD *)&v26[v28[33]];
  swift_release();
  v128 = v195;
  v127 = v196;
  v129 = *(int *)(v195 + 24);
  v130 = &v193[v129];
  v131 = &v196[v129];
  v132 = (int *)type metadata accessor for LollipopViewModel(0);
  LODWORD(v99) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v130, 1, (uint64_t)v132);
  v133 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v131, 1, (uint64_t)v132);
  if (!(_DWORD)v99)
  {
    if (!v133)
    {
      v153 = *((_QWORD *)v131 + 1);
      *(_QWORD *)v130 = *(_QWORD *)v131;
      *((_QWORD *)v130 + 1) = v153;
      swift_bridgeObjectRelease();
      v154 = v132[5];
      v155 = &v130[v154];
      v156 = &v131[v154];
      v157 = type metadata accessor for DetailChartDataPoint(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 40))(v155, v156, v157);
      *(_QWORD *)&v130[v132[6]] = *(_QWORD *)&v131[v132[6]];
      if (a1 == v197)
        goto LABEL_49;
      v158 = v132[7];
      v159 = &v130[v158];
      v160 = &v131[v158];
      sub_1000215BC((uint64_t)v159, type metadata accessor for LollipopDetailViewModel);
      v161 = type metadata accessor for LollipopDetailViewModel(0);
      if (swift_getEnumCaseMultiPayload(v160) == 2)
      {
        *(_OWORD *)v159 = *(_OWORD *)v160;
        v162 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
        v163 = v162[5];
        v164 = &v159[v163];
        v194 = &v160[v163];
        v165 = type metadata accessor for AttributedString(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v165 - 8) + 32))(v164, v194, v165);
        *(_OWORD *)&v159[v162[6]] = *(_OWORD *)&v160[v162[6]];
        *(_OWORD *)&v159[v162[7]] = *(_OWORD *)&v160[v162[7]];
        *(_OWORD *)&v159[v162[8]] = *(_OWORD *)&v160[v162[8]];
        *(_OWORD *)&v159[v162[9]] = *(_OWORD *)&v160[v162[9]];
        *(_OWORD *)&v159[v162[10]] = *(_OWORD *)&v160[v162[10]];
        v159[v162[11]] = v160[v162[11]];
        swift_storeEnumTagMultiPayload(v159, v161, 2);
        goto LABEL_49;
      }
      v150 = *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64);
      v151 = v159;
      v152 = v160;
LABEL_42:
      memcpy(v151, v152, v150);
      goto LABEL_49;
    }
    sub_1000215BC((uint64_t)v130, type metadata accessor for LollipopViewModel);
LABEL_41:
    v150 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BE19B8) - 8) + 64);
    v151 = v130;
    v152 = v131;
    goto LABEL_42;
  }
  if (v133)
    goto LABEL_41;
  *(_OWORD *)v130 = *(_OWORD *)v131;
  v134 = v132[5];
  v135 = &v130[v134];
  v136 = &v131[v134];
  v137 = type metadata accessor for DetailChartDataPoint(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 32))(v135, v136, v137);
  *(_QWORD *)&v130[v132[6]] = *(_QWORD *)&v131[v132[6]];
  v138 = v132[7];
  v139 = &v130[v138];
  v140 = &v131[v138];
  v141 = type metadata accessor for LollipopDetailViewModel(0);
  if (swift_getEnumCaseMultiPayload(v140) == 2)
  {
    *(_OWORD *)v139 = *(_OWORD *)v140;
    v142 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
    v143 = v142[5];
    v144 = &v139[v143];
    v145 = &v140[v143];
    v146 = type metadata accessor for AttributedString(0);
    v147 = v144;
    v56 = v193;
    v148 = v145;
    v127 = v196;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v146 - 8) + 32))(v147, v148, v146);
    *(_OWORD *)&v139[v142[6]] = *(_OWORD *)&v140[v142[6]];
    *(_OWORD *)&v139[v142[7]] = *(_OWORD *)&v140[v142[7]];
    *(_OWORD *)&v139[v142[8]] = *(_OWORD *)&v140[v142[8]];
    *(_OWORD *)&v139[v142[9]] = *(_OWORD *)&v140[v142[9]];
    *(_OWORD *)&v139[v142[10]] = *(_OWORD *)&v140[v142[10]];
    v149 = v142[11];
    v128 = v195;
    v139[v149] = v140[v149];
    swift_storeEnumTagMultiPayload(v139, v141, 2);
  }
  else
  {
    memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
  }
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v130, 0, 1, (uint64_t)v132);
LABEL_49:
  v166 = *(int *)(v128 + 28);
  v167 = &v56[v166];
  v168 = &v127[v166];
  v169 = type metadata accessor for ConditionDetailChartFooterViewModel(0);
  v170 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v167, 1, v169);
  v171 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v168, 1, v169);
  if (v170)
  {
    if (!v171)
    {
      v172 = v197;
      v173 = v192;
      if (swift_getEnumCaseMultiPayload(v168) == 1)
      {
        v174 = type metadata accessor for TemperatureChartKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v174 - 8) + 32))(v167, v168, v174);
        swift_storeEnumTagMultiPayload(v167, v169, 1);
      }
      else
      {
        memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v167, 0, 1, v169);
      goto LABEL_61;
    }
LABEL_55:
    v175 = sub_1000BA294(&qword_100BE1968);
    memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
    v172 = v197;
    v173 = v192;
    goto LABEL_61;
  }
  if (v171)
  {
    sub_1000215BC((uint64_t)v167, type metadata accessor for ConditionDetailChartFooterViewModel);
    goto LABEL_55;
  }
  v172 = v197;
  v173 = v192;
  if (a1 != v197)
  {
    sub_1000215BC((uint64_t)v167, type metadata accessor for ConditionDetailChartFooterViewModel);
    if (swift_getEnumCaseMultiPayload(v168) == 1)
    {
      v176 = type metadata accessor for TemperatureChartKind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v176 - 8) + 32))(v167, v168, v176);
      swift_storeEnumTagMultiPayload(v167, v169, 1);
    }
    else
    {
      memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
    }
  }
LABEL_61:
  v177 = v173[9];
  a1[v173[8]] = v172[v173[8]];
  v178 = &a1[v177];
  v179 = &v172[v177];
  v180 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&a1[v177], 1, v52);
  v181 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v179, 1, v52);
  if (!v180)
  {
    if (!v181)
    {
      v190(v178, v179, v52);
      goto LABEL_67;
    }
    (*(void (**)(char *, uint64_t))(v191 + 8))(v178, v52);
    goto LABEL_66;
  }
  if (v181)
  {
LABEL_66:
    v182 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v178, v179, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v178, v179, v52);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v178, 0, 1, v52);
LABEL_67:
  v183 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&v178[*(int *)(v183 + 28)] = *(_QWORD *)&v179[*(int *)(v183 + 28)];
  swift_release();
  v184 = v173[10];
  v185 = &a1[v184];
  v186 = &v172[v184];
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&a1[v184]);
  v187 = *((_OWORD *)v186 + 1);
  *(_OWORD *)v185 = *(_OWORD *)v186;
  *((_OWORD *)v185 + 1) = v187;
  *((_QWORD *)v185 + 4) = *((_QWORD *)v186 + 4);
  *(_QWORD *)&a1[v173[11]] = *(_QWORD *)&v172[v173[11]];
  return a1;
}

uint64_t sub_1005A5BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005A5C04);
}

void sub_1005A5C04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  sub_1000BA294(&qword_100BC3800);
  sub_100088FF0();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    sub_1000BA294(&qword_100BCD380);
    sub_100088FF0();
    if (v9)
    {
      v7 = v10;
      v11 = a3[5];
    }
    else
    {
      sub_1000E7208();
      sub_100088FF0();
      if (v12)
      {
        v7 = v13;
        v11 = a3[7];
      }
      else
      {
        sub_1000BA294(&qword_100BDD670);
        sub_100088FF0();
        if (!v14)
        {
          sub_100079F70();
          return;
        }
        v7 = v15;
        v11 = a3[9];
      }
    }
    v8 = a1 + v11;
  }
  sub_1000B250C(v8, a2, v7);
}

uint64_t sub_1005A5CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005A5CD4);
}

void sub_1005A5CD4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  sub_1000BA294(&qword_100BC3800);
  sub_10009D2E8();
  if (v10)
  {
    v8 = v7;
    v9 = a1;
  }
  else
  {
    sub_1000BA294(&qword_100BCD380);
    sub_10009D2E8();
    if (v10)
    {
      v8 = v11;
      v12 = a4[5];
    }
    else
    {
      sub_1000E7208();
      sub_10009D2E8();
      if (v13)
      {
        v8 = v14;
        v12 = a4[7];
      }
      else
      {
        sub_1000BA294(&qword_100BDD670);
        sub_10009D2E8();
        if (!v15)
        {
          *(_QWORD *)(a1 + a4[10] + 24) = (a2 - 1);
          sub_100079F70();
          return;
        }
        v8 = v16;
        v12 = a4[9];
      }
    }
    v9 = a1 + v12;
  }
  sub_1000987C4(v9, a2, a2, v8);
}

uint64_t type metadata accessor for DetailChart(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF25B8, (uint64_t)&nominal type descriptor for DetailChart);
}

void sub_1005A5DA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];

  sub_100158B48(319, (unint64_t *)&qword_100BC3880, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100158B48(319, (unint64_t *)&qword_100BCD3F8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = "\t";
      v6 = type metadata accessor for DetailChartViewModel(319);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v10[4] = &unk_1009B10A0;
        sub_100154578(319);
        if (v9 <= 0x3F)
        {
          v10[5] = *(_QWORD *)(v8 - 8) + 64;
          v10[6] = &unk_1009B10B8;
          v10[7] = (char *)&value witness table for Builtin.Int64 + 64;
          swift_initStructMetadata(a1, 256, 8, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_1005A5EAC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB9D14, 1);
}

void sub_1005A5EBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int16 v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  __int128 v46;

  v1 = sub_1000BA294(&qword_100BF2608);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  sub_1000BA294(&qword_100BF2610);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = (_QWORD *)(v8 - v7);
  sub_1000BA294(&qword_100BF2618);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  v14 = type metadata accessor for DetailChart(0);
  v15 = v0 + *(int *)(v14 + 24);
  v16 = *(_QWORD *)v15;
  v17 = *(_BYTE *)(v15 + 8);
  sub_10008D47C(*(_QWORD *)v15, v17);
  sub_100109D8C();
  v19 = v18;
  v20 = sub_1000B15F8(v16, v17);
  if ((v19 & 0x100) != 0)
  {
    *(_QWORD *)v13 = static HorizontalAlignment.leading.getter(v20);
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 1;
    v32 = sub_1000BA294(&qword_100BF2628);
    v33 = v13 + *(int *)(v32 + 44);
    *v9 = static Alignment.topLeading.getter(v32);
    v9[1] = v34;
    v35 = sub_1000BA294(&qword_100BF2630);
    sub_1005A6170(v0, (uint64_t)v9 + *(int *)(v35 + 44));
    sub_1000BCF38((uint64_t)v9, v33);
    sub_100099298((uint64_t)v9);
    sub_100037768(v13, v5, &qword_100BF2618);
    swift_storeEnumTagMultiPayload(v5, v1, 0);
    v36 = sub_1000BA294(&qword_100BDD178);
    sub_10034AEE4((uint64_t)&unk_100BF2620);
    v38 = v37;
    sub_10042BF7C();
    v39 = sub_1000C6BBC();
    _ConditionalContent<>.init(storage:)(v39, v40, v36, v38, v41);
    sub_100021A14(v13, &qword_100BF2618);
  }
  else
  {
    v21 = static Color.clear.getter(v20);
    v22 = v0 + *(int *)(v14 + 28);
    v23 = v22 + *(int *)(sub_1000E7208() + 20);
    v24 = sub_1000995F0();
    v25 = *(_QWORD *)(v23 + *(int *)(v24 + 60));
    static Alignment.center.getter(v24);
    sub_1000C6704();
    sub_1000DA64C(0, 1, v25);
    *(_QWORD *)v5 = v21;
    *(_WORD *)(v5 + 8) = 256;
    *(_QWORD *)(v5 + 16) = v42;
    *(_BYTE *)(v5 + 24) = v43;
    *(_QWORD *)(v5 + 32) = v44;
    *(_BYTE *)(v5 + 40) = v45;
    *(_OWORD *)(v5 + 48) = v46;
    swift_storeEnumTagMultiPayload(v5, v1, 1);
    v26 = sub_1000BA294(&qword_100BDD178);
    sub_10034AEE4((uint64_t)&unk_100BF2620);
    v28 = v27;
    sub_10042BF7C();
    v29 = sub_1000C6BBC();
    _ConditionalContent<>.init(storage:)(v29, v30, v26, v28, v31);
  }
}

void sub_1005A6170(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t (**v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54[3];

  v53 = a2;
  v3 = (int *)type metadata accessor for DetailChart(0);
  v50 = *((_QWORD *)v3 - 1);
  __chkstk_darwin(v3);
  v51 = v4;
  v52 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BC3800);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v48 = type metadata accessor for ChartViewModel(0);
  __chkstk_darwin(v48);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for ChartView(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BF2638);
  __chkstk_darwin(v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_1000BA294(&qword_100BF2640);
  __chkstk_darwin(v49);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1 + v3[7];
  v19 = v18 + *(int *)(type metadata accessor for DetailChartViewModel(0) + 20);
  sub_100080C0C(v19, (uint64_t)v9, type metadata accessor for ChartViewModel);
  if (qword_100BC23B8 != -1)
    swift_once(&qword_100BC23B8, sub_1001593B8);
  v47 = xmmword_100CAEF78;
  v20 = qword_100CAEF88;
  v21 = qword_100CAEF90;
  v22 = *(_QWORD *)(a1 + v3[11]);
  sub_100043CA8(a1 + v3[10], (uint64_t)v54);
  *v7 = swift_getKeyPath(&unk_1009B1120);
  v23 = sub_1000BA294(&qword_100BC2908);
  swift_storeEnumTagMultiPayload(v7, v23, 0);
  sub_10007802C((uint64_t)v9, (uint64_t)v12, type metadata accessor for ChartViewModel);
  v24 = &v12[v10[5]];
  *(_OWORD *)v24 = v47;
  *((_QWORD *)v24 + 2) = v20;
  *((_QWORD *)v24 + 3) = v21;
  *(_QWORD *)&v12[v10[6]] = v22;
  sub_10003C800(v54, (uint64_t)&v12[v10[7]]);
  v25 = &v12[v10[8]];
  *(_QWORD *)v25 = swift_getKeyPath(&unk_1009B1150);
  v25[8] = 0;
  v26 = &v12[v10[9]];
  *(_QWORD *)v26 = swift_getKeyPath(&unk_1009B1180);
  v27 = sub_1000BA294(&qword_100BC68C8);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  sub_1000787D4((uint64_t)v7, (uint64_t)&v12[v10[10]], &qword_100BC3800);
  Text.Measurements.init()(v28);
  sub_100080C0C((uint64_t)v12, (uint64_t)v15, type metadata accessor for ChartView);
  v29 = (uint64_t (**)())&v15[*(int *)(v13 + 36)];
  *v29 = sub_1005B0358;
  v29[1] = 0;
  sub_1000215BC((uint64_t)v12, type metadata accessor for ChartView);
  v30 = *(_QWORD *)(v19 + *(int *)(v48 + 60));
  static Alignment.center.getter(v31);
  _FrameLayout.init(width:height:alignment:)(0, 1, v30, 0);
  sub_100037768((uint64_t)v15, (uint64_t)v17, &qword_100BF2638);
  v32 = v49;
  v33 = &v17[*(int *)(v49 + 36)];
  v34 = v54[1];
  *(_OWORD *)v33 = v54[0];
  *((_OWORD *)v33 + 1) = v34;
  *((_OWORD *)v33 + 2) = v54[2];
  sub_100021A14((uint64_t)v15, &qword_100BF2638);
  v36 = static Alignment.topLeading.getter(v35);
  v38 = v37;
  v39 = v52;
  sub_100080C0C(a1, v52, type metadata accessor for DetailChart);
  v40 = *(unsigned __int8 *)(v50 + 80);
  v41 = (v40 + 16) & ~v40;
  v42 = swift_allocObject(&unk_100B819A8, v41 + v51, v40 | 7);
  sub_10007802C(v39, v42 + v41, type metadata accessor for DetailChart);
  v43 = sub_1000BA294(&qword_100BF2648);
  sub_100397180((uint64_t)&unk_100BF2650);
  v45 = v44;
  sub_10034AEE4((uint64_t)&unk_100BF2668);
  View.chartOverlay<A>(alignment:content:)(v36, v38, sub_1005AB384, v42, v32, v43, v45, v46);
  swift_release();
  sub_100021A14((uint64_t)v17, &qword_100BF2640);
}

void sub_1005A662C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *a3 = static Alignment.topLeading.getter(a1);
  a3[1] = v6;
  v7 = sub_1000BA294(&qword_100BF2670);
  sub_1005A6680(a2, a1, (uint64_t)a3 + *(int *)(v7 + 44));
}

void sub_1005A6680(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  __n128 v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  char v125;
  double v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unsigned __int8 *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  double v143;
  char v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  uint64_t v162;
  __n128 v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _OWORD *v171;
  __int128 v172;
  uint64_t v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  double v179;
  uint64_t v180;
  __n128 v181;
  double v182;
  uint64_t v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  double v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  char v197;
  double v198;
  double v199;
  double v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t (**v241)();
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  void (*v252)(char *, uint64_t, uint64_t);
  double v253;
  int *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned __int8 *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t OpaqueTypeConformance2;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  __n128 v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  void (*v295)(char *, uint64_t);
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t KeyPath;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t (*v340)(char *, uint64_t);
  char *v341;
  uint64_t v342;
  uint64_t v343;
  double v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  char *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  char *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  uint64_t v376;
  unsigned __int8 *v377;
  uint64_t v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  _QWORD v395[19];
  char v396;
  _DWORD v397[2];
  _DWORD v398[2];
  _DWORD v399[2];
  _DWORD v400[2];
  _BYTE v401[7];
  char v402;
  _BYTE v403[7];
  char v404;
  _BYTE v405[7];
  char v406;
  _BYTE v407[7];
  _DWORD v408[2];
  _DWORD v409[2];
  _DWORD v410[2];
  _DWORD v411[2];
  uint64_t v412[19];
  _BYTE v413[40];
  __int128 v414;
  __int128 v415;
  uint64_t v416;
  unsigned __int8 v417;
  char *v418;
  unsigned __int8 v419;
  char *v420;
  char *v421;
  uint64_t v422;
  char v423;
  uint64_t v424;
  char v425;
  uint64_t v426;
  uint64_t v427;

  v393 = a2;
  v372 = a3;
  v368 = type metadata accessor for LocalCoordinateSpace(0);
  v367 = *(_QWORD *)(v368 - 8);
  __chkstk_darwin(v368);
  v366 = (char *)&v296 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DetailChart(0);
  v355 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v356 = v7;
  v360 = (uint64_t)&v296 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v361 = type metadata accessor for ChartDragGestureRecognizerRepresentable(0, v6);
  v359 = *(_QWORD *)(v361 - 8);
  __chkstk_darwin(v361);
  v358 = (char *)&v296 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v364 = sub_1000BA294(&qword_100BF2678);
  v363 = *(_QWORD *)(v364 - 8);
  __chkstk_darwin(v364);
  v386 = (char *)&v296 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v371 = sub_1000BA294(&qword_100BDB0B0);
  v369 = *(_QWORD *)(v371 - 8);
  __chkstk_darwin(v371);
  v370 = (char *)&v296 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v365 = (char *)&v296 - v12;
  v327 = type metadata accessor for DetailChart.LollipopOverlayView(0);
  __chkstk_darwin(v327);
  v328 = (char *)&v296 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v354 = sub_1000BA294(&qword_100BF2680);
  __chkstk_darwin(v354);
  v326 = (uint64_t)&v296 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v325 = (uint64_t)&v296 - v16;
  v17 = type metadata accessor for DetailChartLollipopPoint(0);
  v352 = *(_QWORD *)(v17 - 8);
  v353 = v17;
  __chkstk_darwin(v17);
  v350 = (char *)&v296 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v351 = (char *)&v296 - v20;
  v21 = sub_1000BA294(&qword_100BDB0A8);
  __chkstk_darwin(v21);
  v362 = (uint64_t)&v296 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v385 = (uint64_t)&v296 - v24;
  v25 = sub_1000BA294(&qword_100BF2688);
  __chkstk_darwin(v25);
  v348 = (uint64_t)&v296 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v384 = (uint64_t)&v296 - v28;
  v376 = type metadata accessor for ChartProxy(0);
  v377 = *(unsigned __int8 **)(v376 - 8);
  __chkstk_darwin(v376);
  v349 = (char *)&v296 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v379 = v29;
  __chkstk_darwin(v30);
  v380 = (char *)&v296 - v31;
  v32 = sub_1000BA294(&qword_100BF2690);
  v338 = *(_QWORD *)(v32 - 8);
  v339 = v32;
  __chkstk_darwin(v32);
  v337 = (char *)&v296 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v334 = sub_1000BA294(&qword_100BF2698);
  __chkstk_darwin(v334);
  v336 = (char *)&v296 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v347 = sub_1000BA294(&qword_100BF26A0);
  __chkstk_darwin(v347);
  v335 = (uint64_t)&v296 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1000BA294(&qword_100BDB0A0);
  __chkstk_darwin(v36);
  v357 = (uint64_t)&v296 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v38);
  v383 = (uint64_t)&v296 - v40;
  v41 = type metadata accessor for IdentityTransition(0, v39);
  v302 = *(_QWORD *)(v41 - 8);
  v303 = v41;
  __chkstk_darwin(v41);
  v300 = (char *)&v296 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v301 = (char *)&v296 - v44;
  v45 = type metadata accessor for ChartKind(0);
  v311 = *(_QWORD *)(v45 - 8);
  v312 = v45;
  __chkstk_darwin(v45);
  v313 = (char *)&v296 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1000BA294(&qword_100BF26A8);
  __chkstk_darwin(v47);
  v315 = (uint64_t)&v296 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49);
  v318 = (uint64_t)&v296 - v50;
  v308 = sub_1000BA294(&qword_100BF26B0);
  __chkstk_darwin(v308);
  v310 = (uint64_t)&v296 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v309 = sub_1000BA294(&qword_100BF26B8);
  __chkstk_darwin(v309);
  v317 = (uint64_t)&v296 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v316 = (uint64_t)&v296 - v54;
  v55 = type metadata accessor for ChartPastDataTreatment(0);
  v306 = *(_QWORD *)(v55 - 8);
  v307 = v55;
  __chkstk_darwin(v55);
  v305 = (char *)&v296 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v346 = sub_1000BA294(&qword_100BF26C0);
  __chkstk_darwin(v346);
  v314 = (uint64_t)&v296 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  v323 = (uint64_t)&v296 - v59;
  v60 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v60);
  *(_QWORD *)&v344 = (char *)&v296 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v375 = type metadata accessor for DetailChartDataElement(0);
  v345 = *(_QWORD *)(v375 - 8);
  __chkstk_darwin(v375);
  v374 = (char *)&v296 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_1000BA294(&qword_100BDB098);
  __chkstk_darwin(v63);
  v382 = (uint64_t)&v296 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  v389 = (uint64_t)&v296 - v66;
  v373 = sub_1000BA294(&qword_100BF26C8);
  __chkstk_darwin(v373);
  v322 = (uint64_t)&v296 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v68);
  v321 = (uint64_t)&v296 - v69;
  v70 = type metadata accessor for Date(0);
  v342 = *(_QWORD *)(v70 - 8);
  v343 = v70;
  __chkstk_darwin(v70);
  v341 = (char *)&v296 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_1000BA294(&qword_100BDB090);
  __chkstk_darwin(v72);
  v388 = (uint64_t)&v296 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v74);
  v319 = (uint64_t)&v296 - v75;
  __chkstk_darwin(v76);
  v391 = (uint64_t)&v296 - v77;
  v78 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v78);
  v332 = (char *)&v296 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for BlendMode(0);
  KeyPath = *(_QWORD *)(v80 - 8);
  v331 = v80;
  __chkstk_darwin(v80);
  v329 = (char *)&v296 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_1000BA294(&qword_100BF26D0);
  __chkstk_darwin(v82);
  v333 = (char *)&v296 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_1000BA294(&qword_100BF26D8);
  __chkstk_darwin(v84);
  v320 = (uint64_t)&v296 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for ChartDarkeningScrim(0);
  v87 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v89 = (char *)&v296 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_1000BA294(&qword_100BDB080);
  __chkstk_darwin(v90);
  v381 = (uint64_t)&v296 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v92);
  v390 = (uint64_t)&v296 - v93;
  v94 = *(int *)(v5 + 28);
  v392 = a1;
  v95 = a1 + v94;
  v96 = *(int *)(type metadata accessor for DetailChartViewModel(0) + 20);
  v324 = v95;
  v97 = v95 + v96;
  v387 = type metadata accessor for ChartViewModel(0);
  v98 = *(int *)(v387 + 64);
  v378 = v97;
  v99 = v97 + v98;
  static ChartDarkeningScrim.dimmingEffect.getter(v387);
  sub_10007A100((uint64_t)&unk_100BF26E0);
  v101 = v100;
  LOBYTE(a1) = dispatch thunk of SetAlgebra.isSuperset(of:)(v89, v86, v100);
  v340 = *(uint64_t (**)(char *, uint64_t))(v87 + 8);
  v102 = v340(v89, v86);
  v304 = v82;
  if ((a1 & 1) != 0)
  {
    v297 = v101;
    v298 = v99;
    v299 = v84;
    static Color.black.getter(v102);
    if (qword_100BC20C0 != -1)
      swift_once(&qword_100BC20C0, sub_1004049E8);
    swift_beginAccess(&qword_100CAE968, &v394, 1, 0);
    v103 = sub_1004048B8();
    v104 = Color.opacity(_:)(v103);
    v105 = swift_release();
    v106 = v329;
    v107 = KeyPath;
    v108 = v331;
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(KeyPath + 104))(v329, enum case for BlendMode.destinationOut(_:), v331, v105);
    v109 = (uint64_t)v332;
    (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v332, v106, v108);
    v110 = *(int *)(v82 + 36);
    v111 = (uint64_t)v333;
    sub_100080C0C(v109, (uint64_t)&v333[v110], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    *(_QWORD *)v111 = v104;
    *(_WORD *)(v111 + 8) = 256;
    swift_retain();
    sub_1000215BC(v109, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v106, v108);
    swift_release();
    v112 = v320;
    sub_100037768(v111, v320, &qword_100BF26D0);
    v84 = v299;
    *(_BYTE *)(v112 + *(int *)(v299 + 36)) = 0;
    sub_100021A14(v111, &qword_100BF26D0);
    v113 = v390;
    sub_1000787D4(v112, v390, &qword_100BF26D8);
    v114 = 0;
    v101 = v297;
  }
  else
  {
    v114 = 1;
    v113 = v390;
  }
  v115 = 1;
  v116 = _s7Weather24LocationCompositionStateOwst_0(v113, v114, 1, v84);
  static ChartDarkeningScrim.hashPatternEffect.getter(v116);
  v117 = dispatch thunk of SetAlgebra.isSuperset(of:)(v89, v86, v101);
  v340(v89, v86);
  v118 = v378;
  v119 = v387;
  if ((v117 & 1) != 0)
  {
    v121 = v341;
    v120 = v342;
    v122 = v343;
    (*(void (**)(char *, uint64_t, uint64_t))(v342 + 16))(v341, v378 + *(int *)(v387 + 80), v343);
    *(double *)&v123 = COERCE_DOUBLE(ChartProxy.position<A>(forX:)(v121, v122, &protocol witness table for Date));
    v125 = v124;
    (*(void (**)(char *, uint64_t))(v120 + 8))(v121, v122);
    v126 = *(double *)&v123;
    if ((v125 & 1) != 0)
      v126 = 0.0;
    *(double *)&v127 = sub_1005A85E4(v126);
    v128 = v322;
    sub_1005A8768(v127, 0, v322);
    v129 = v128;
    v130 = v321;
    sub_1000787D4(v129, v321, &qword_100BF26C8);
    sub_1000787D4(v130, v391, &qword_100BF26C8);
    v115 = 0;
  }
  _s7Weather24LocationCompositionStateOwst_0(v391, v115, 1, v373);
  v131 = *(_QWORD *)&v344;
  sub_100037768(v118 + *(int *)(v119 + 84), *(uint64_t *)&v344, &qword_100BCB0A0);
  v132 = v375;
  v133 = _s7Weather24LocationCompositionStateOwet_0(v131, 1, v375);
  v134 = v376;
  v135 = v377;
  v136 = v389;
  v137 = v374;
  if (v133 == 1)
  {
    sub_100021A14(v131, &qword_100BCB0A0);
    v138 = 1;
  }
  else
  {
    v139 = v118;
    v140 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v345 + 32))(v374, v131, v132);
    v141 = v341;
    DetailChartDataElement.date.getter(v140);
    v142 = v343;
    v143 = COERCE_DOUBLE(ChartProxy.position<A>(forX:)(v141, v343, &protocol witness table for Date));
    v145 = v144;
    v146 = (*(uint64_t (**)(char *, uint64_t))(v342 + 8))(v141, v142);
    if ((v145 & 1) != 0
      || (v395[0] = DetailChartDataElement.value.getter(v146),
          v147 = ChartProxy.position<A>(forY:)(v395, &type metadata for Double, &protocol witness table for Double),
          (v148 & 1) != 0))
    {
      (*(void (**)(char *, uint64_t))(v345 + 8))(v137, v132);
      v157 = sub_1000BA294(&qword_100BF2708);
      v158 = v323;
      _s7Weather24LocationCompositionStateOwst_0(v323, 1, 1, v157);
      v118 = v139;
      v119 = v387;
      v135 = v377;
    }
    else
    {
      v344 = *(double *)&v147;
      v149 = sub_1005A85E4(v143);
      v150 = v139;
      v151 = v139 + *(int *)(v387 + 108);
      v153 = v305;
      v152 = v306;
      v154 = v307;
      (*(void (**)(char *, _QWORD, uint64_t))(v306 + 104))(v305, enum case for ChartPastDataTreatment.hashed(_:), v307);
      LOBYTE(v151) = static ChartPastDataTreatment.== infix(_:_:)(v151, v153);
      (*(void (**)(char *, uint64_t))(v152 + 8))(v153, v154);
      if ((v151 & 1) != 0)
      {
        v155 = v319;
        sub_1005A8768(*(uint64_t *)&v149, 0, v319);
        v156 = 0;
      }
      else
      {
        v156 = 1;
        v155 = v319;
      }
      v159 = _s7Weather24LocationCompositionStateOwst_0(v155, v156, 1, v373);
      static Color.black.getter(v159);
      v160 = v387;
      if (qword_100BC20C0 != -1)
        swift_once(&qword_100BC20C0, sub_1004049E8);
      swift_beginAccess(&qword_100CAE968, v413, 1, 0);
      v161 = sub_1004048B8();
      v162 = Color.opacity(_:)(v161);
      v163 = swift_release();
      v165 = v329;
      v164 = KeyPath;
      v166 = v331;
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(KeyPath + 104))(v329, enum case for BlendMode.destinationOut(_:), v331, v163);
      v167 = (uint64_t)v332;
      (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v332, v165, v166);
      v168 = (uint64_t)v333;
      sub_100080C0C(v167, (uint64_t)&v333[*(int *)(v304 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
      *(_QWORD *)v168 = v162;
      *(_WORD *)(v168 + 8) = 256;
      swift_retain();
      sub_1000215BC(v167, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
      (*(void (**)(char *, uint64_t))(v164 + 8))(v165, v166);
      swift_release();
      static Alignment.center.getter(v169);
      _FrameLayout.init(width:height:alignment:)(*(_QWORD *)&v149, 0, 0, 1);
      v170 = v310;
      sub_100037768(v168, v310, &qword_100BF26D0);
      v171 = (_OWORD *)(v170 + *(int *)(v308 + 36));
      v172 = v414;
      *v171 = *(_OWORD *)&v413[24];
      v171[1] = v172;
      v171[2] = v415;
      sub_100021A14(v168, &qword_100BF26D0);
      v173 = v317;
      sub_100037768(v170, v317, &qword_100BF26B0);
      *(_BYTE *)(v173 + *(int *)(v309 + 36)) = 0;
      sub_100021A14(v170, &qword_100BF26B0);
      sub_1000787D4(v173, v316, &qword_100BF26B8);
      v174 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
      v373 = Color.init(_:)(v174);
      v175 = *(_QWORD *)(v150 + *(int *)(v160 + 60));
      static Alignment.center.getter(v373);
      _FrameLayout.init(width:height:alignment:)(0x3FF0000000000000, 0, v175, 0);
      v343 = v416;
      LODWORD(v342) = v417;
      v341 = v418;
      LODWORD(v340) = v419;
      v332 = v421;
      v333 = v420;
      v177 = v311;
      v176 = v312;
      v178 = (uint64_t)v313;
      (*(void (**)(char *, uint64_t, uint64_t))(v311 + 16))(v313, v150 + *(int *)(v160 + 20), v312);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v177 + 88))(v178, v176) == enum case for ChartKind.line(_:))
      {
        v179 = v344;
        (*(void (**)(uint64_t, uint64_t))(v177 + 96))(v178, v176);
        v180 = sub_1000BA294(&qword_100BCB970);
        sub_100021A14(v178 + *(int *)(v180 + 48), &qword_100BCB940);
        sub_100021A14(v178, &qword_100BCB940);
        v331 = static Color.primary.getter(v181);
        KeyPath = swift_getKeyPath(&unk_1009B11E0);
        v182 = sub_1004043AC();
        LODWORD(v329) = static Edge.Set.all.getter(v183);
        v184 = EdgeInsets.init(_all:)(v182);
        v186 = v185;
        v188 = v187;
        v190 = v189;
        v191 = sub_100404730();
        v192 = sub_100404730();
        static Alignment.center.getter(v193);
        _FrameLayout.init(width:height:alignment:)(*(_QWORD *)&v191, 0, *(_QWORD *)&v192, 0);
        v194 = v422;
        v195 = v423;
        v196 = v424;
        v197 = v425;
        v321 = v427;
        v322 = v426;
        v198 = v149 - sub_100404730() * 0.5;
        v199 = sub_100404730();
        v406 = 0;
        v200 = v179 - v199 * 0.5;
        v404 = v195;
        v402 = v197;
        v411[0] = *(_DWORD *)v407;
        *(_DWORD *)((char *)v411 + 3) = *(_DWORD *)&v407[3];
        v410[0] = *(_DWORD *)v405;
        *(_DWORD *)((char *)v410 + 3) = *(_DWORD *)&v405[3];
        v409[0] = *(_DWORD *)v403;
        *(_DWORD *)((char *)v409 + 3) = *(_DWORD *)&v403[3];
        *(_DWORD *)((char *)v408 + 3) = *(_DWORD *)&v401[3];
        v408[0] = *(_DWORD *)v401;
        v201 = v301;
        IdentityTransition.init()();
        v203 = v302;
        v202 = v303;
        v204 = v300;
        (*(void (**)(char *, char *, uint64_t))(v302 + 16))(v300, v201, v303);
        sub_10007A100((uint64_t)&unk_100BF2720);
        v206 = AnyTransition.init<A>(_:)(v204, v202, v205);
        v400[0] = v411[0];
        *(_DWORD *)((char *)v400 + 3) = *(_DWORD *)((char *)v411 + 3);
        v399[0] = v410[0];
        *(_DWORD *)((char *)v399 + 3) = *(_DWORD *)((char *)v410 + 3);
        v398[0] = v409[0];
        *(_DWORD *)((char *)v398 + 3) = *(_DWORD *)((char *)v409 + 3);
        *(_DWORD *)((char *)v397 + 3) = *(_DWORD *)((char *)v408 + 3);
        v397[0] = v408[0];
        (*(void (**)(char *, uint64_t))(v203 + 8))(v201, v202);
        v412[0] = KeyPath;
        v412[1] = v331;
        LOBYTE(v412[2]) = (_BYTE)v329;
        *(_DWORD *)((char *)&v412[2] + 1) = v400[0];
        HIDWORD(v412[2]) = *(_DWORD *)((char *)v400 + 3);
        *(double *)&v412[3] = v184;
        v412[4] = v186;
        v412[5] = v188;
        v412[6] = v190;
        LOBYTE(v412[7]) = 0;
        *(_DWORD *)((char *)&v412[7] + 1) = v399[0];
        HIDWORD(v412[7]) = *(_DWORD *)((char *)v399 + 3);
        v412[8] = v194;
        LOBYTE(v412[9]) = v195;
        v207 = v319;
        HIDWORD(v412[9]) = *(_DWORD *)((char *)v398 + 3);
        *(_DWORD *)((char *)&v412[9] + 1) = v398[0];
        v412[10] = v196;
        LOBYTE(v412[11]) = v197;
        HIDWORD(v412[11]) = *(_DWORD *)((char *)v397 + 3);
        *(_DWORD *)((char *)&v412[11] + 1) = v397[0];
        v412[12] = v322;
        v412[13] = v321;
        v135 = v377;
        *(double *)&v412[14] = v198;
        *(double *)&v412[15] = v200;
        v412[16] = 0;
        *(double *)&v412[17] = v344;
        v412[18] = v206;
        memcpy(v395, v412, sizeof(v395));
        v396 = 0;
        v208 = sub_1000BA294(&qword_100BF2728);
        sub_1005ABB30((uint64_t)&unk_100BF2730);
        v209 = v318;
        View.accessibilityHidden(_:)(1, v208, v210);
        sub_1005ABD8C(v412);
        v211 = sub_1000BA294(&qword_100BF2710);
        _s7Weather24LocationCompositionStateOwst_0(v209, 0, 1, v211);
        v134 = v376;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v178, v176);
        v212 = sub_1000BA294(&qword_100BF2710);
        v209 = v318;
        _s7Weather24LocationCompositionStateOwst_0(v318, 1, 1, v212);
        v134 = v376;
        v135 = v377;
        v207 = v319;
      }
      v213 = v388;
      sub_100037768(v207, v388, &qword_100BDB090);
      v215 = v316;
      v214 = v317;
      sub_100037768(v316, v317, &qword_100BF26B8);
      v216 = v315;
      sub_100037768(v209, v315, &qword_100BF26A8);
      v217 = v213;
      v218 = v314;
      sub_100037768(v217, v314, &qword_100BDB090);
      v219 = (int *)sub_1000BA294(&qword_100BF2718);
      sub_100037768(v214, v218 + v219[12], &qword_100BF26B8);
      v220 = v218 + v219[16];
      *(_QWORD *)v220 = v373;
      *(_WORD *)(v220 + 8) = 256;
      *(_QWORD *)(v220 + 16) = v343;
      *(_BYTE *)(v220 + 24) = v342;
      *(_QWORD *)(v220 + 32) = v341;
      *(_BYTE *)(v220 + 40) = (_BYTE)v340;
      v221 = v332;
      *(_QWORD *)(v220 + 48) = v333;
      *(_QWORD *)(v220 + 56) = v221;
      *(double *)(v220 + 64) = v149;
      *(_QWORD *)(v220 + 72) = 0;
      *(_BYTE *)(v220 + 80) = 0;
      sub_100037768(v216, v218 + v219[20], &qword_100BF26A8);
      swift_retain();
      sub_100021A14(v318, &qword_100BF26A8);
      sub_100021A14(v215, &qword_100BF26B8);
      sub_100021A14(v319, &qword_100BDB090);
      (*(void (**)(char *, uint64_t))(v345 + 8))(v374, v375);
      sub_100021A14(v216, &qword_100BF26A8);
      swift_release();
      sub_100021A14(v214, &qword_100BF26B8);
      sub_100021A14(v388, &qword_100BDB090);
      v222 = sub_1000BA294(&qword_100BF2708);
      _s7Weather24LocationCompositionStateOwst_0(v218, 0, 1, v222);
      v158 = v323;
      sub_1000787D4(v218, v323, &qword_100BF26C0);
      v118 = v378;
      v119 = v387;
    }
    v136 = v389;
    sub_1000787D4(v158, v389, &qword_100BF26C0);
    v138 = 0;
  }
  v223 = 1;
  _s7Weather24LocationCompositionStateOwst_0(v136, v138, 1, v346);
  v224 = *(int *)(v119 + 36);
  if (*(_QWORD *)(v118 + v224))
  {
    v395[0] = *(_QWORD *)(v118 + v224);
    v225 = swift_getKeyPath(&unk_1009B11B0);
    v226 = v380;
    (*((void (**)(char *, uint64_t, uint64_t))v135 + 2))(v380, v393, v134);
    v227 = v135[80];
    v228 = (v227 + 16) & ~v227;
    v229 = swift_allocObject(&unk_100B81A20, v228 + v379, v227 | 7);
    (*((void (**)(uint64_t, char *, uint64_t))v135 + 4))(v229 + v228, v226, v134);
    swift_bridgeObjectRetain();
    v230 = sub_1000BA294(&qword_100BDCD30);
    v231 = type metadata accessor for ScaleLabel(0);
    sub_10034AEE4((uint64_t)&unk_100BDCD40);
    v233 = v232;
    sub_10007A100((uint64_t)&unk_100BF2700);
    v234 = v337;
    ForEach<>.init(_:id:content:)(v395, v225, sub_1005ABAA4, v229, v230, v231, v233, &protocol witness table for Double, v235);
    v237 = v338;
    v236 = v339;
    v238 = (uint64_t)v336;
    (*(void (**)(char *, char *, uint64_t))(v338 + 16))(v336, v234, v339);
    *(_BYTE *)(v238 + *(int *)(v334 + 36)) = 0;
    (*(void (**)(char *, uint64_t))(v237 + 8))(v234, v236);
    v239 = v335;
    sub_100037768(v238, v335, &qword_100BF2698);
    v240 = v347;
    v241 = (uint64_t (**)())(v239 + *(int *)(v347 + 36));
    *v241 = sub_100309070;
    v241[1] = 0;
    sub_100021A14(v238, &qword_100BF2698);
    v242 = v239;
    v243 = v383;
    sub_1000787D4(v242, v383, &qword_100BF26A0);
    v223 = 0;
    v244 = v385;
  }
  else
  {
    v244 = v385;
    v243 = v383;
    v240 = v347;
  }
  _s7Weather24LocationCompositionStateOwst_0(v243, v223, 1, v240);
  v245 = v384;
  sub_1005A8B5C(v393, v384);
  v246 = v348;
  sub_100037768(v245, v348, &qword_100BF2688);
  v247 = v353;
  if (_s7Weather24LocationCompositionStateOwet_0(v246, 1, v353) == 1)
  {
    sub_100021A14(v246, &qword_100BF2688);
    v248 = 1;
    v249 = v354;
  }
  else
  {
    v251 = v351;
    v250 = v352;
    v252 = *(void (**)(char *, uint64_t, uint64_t))(v352 + 32);
    v252(v351, v246, v247);
    (*(void (**)(char *, char *, uint64_t))(v250 + 16))(v350, v251, v247);
    (*((void (**)(char *, uint64_t, uint64_t))v135 + 2))(v349, v393, v134);
    if (*(_QWORD *)(v378 + *(int *)(v387 + 32)))
    {
      if (qword_100BC20C0 != -1)
        swift_once(&qword_100BC20C0, sub_1004049E8);
      swift_beginAccess(&qword_100CAE968, v412, 0, 0);
      v253 = *(double *)&xmmword_100CAE988 + *((double *)&xmmword_100CAE988 + 1) + *((double *)&xmmword_100CAE988 + 1);
    }
    else
    {
      v253 = 0.0;
    }
    v254 = (int *)v327;
    v255 = (uint64_t)v328;
    sub_100080C0C(v324, (uint64_t)&v328[*(int *)(v327 + 28)], type metadata accessor for DetailChartViewModel);
    v252((char *)v255, (uint64_t)v350, v247);
    (*((void (**)(uint64_t, char *, uint64_t))v135 + 4))(v255 + v254[5], v349, v134);
    *(double *)(v255 + v254[6]) = v253;
    *(_QWORD *)(v255 + v254[8]) = 0x4034000000000000;
    *(_QWORD *)(v255 + v254[9]) = 0x4000000000000000;
    *(_QWORD *)(v255 + v254[10]) = 0x3FF0000000000000;
    v256 = v326;
    sub_100080C0C(v255, v326, type metadata accessor for DetailChart.LollipopOverlayView);
    v249 = v354;
    *(_BYTE *)(v256 + *(int *)(v354 + 36)) = 0;
    sub_1000215BC(v255, type metadata accessor for DetailChart.LollipopOverlayView);
    (*(void (**)(char *, uint64_t))(v352 + 8))(v351, v247);
    v257 = v325;
    sub_1000787D4(v256, v325, &qword_100BF2680);
    sub_1000787D4(v257, v244, &qword_100BF2680);
    v248 = 0;
  }
  v258 = _s7Weather24LocationCompositionStateOwst_0(v244, v248, 1, v249);
  v395[0] = static Color.clear.getter(v258);
  LOWORD(v395[1]) = 256;
  BYTE2(v395[1]) = 0;
  v259 = v360;
  sub_100080C0C(v392, v360, type metadata accessor for DetailChart);
  v387 = *((_QWORD *)v135 + 2);
  v260 = v135;
  v261 = v380;
  v262 = v393;
  ((void (*)(char *, uint64_t, uint64_t))v387)(v380, v393, v134);
  v263 = *(unsigned __int8 *)(v355 + 80);
  v264 = v260[80];
  v265 = (v263 + 16) & ~v263;
  v375 = v265;
  v379 += (v356 + v264 + v265) & ~v264;
  v266 = (v356 + v264 + v265) & ~v264;
  v378 = v266;
  v376 = v263 | v264 | 7;
  v267 = swift_allocObject(&unk_100B819D0, v379, v376);
  sub_10007802C(v259, v267 + v265, type metadata accessor for DetailChart);
  v377 = (unsigned __int8 *)*((_QWORD *)v260 + 4);
  ((void (*)(uint64_t, char *, uint64_t))v377)(v267 + v266, v261, v134);
  v268 = v358;
  ChartDragGestureRecognizerRepresentable.init(isRecognizedHandler:)(sub_1005AB434, v267);
  v269 = sub_1000BA294(&qword_100BF26E8);
  v374 = (char *)v269;
  v270 = sub_1005AB438();
  sub_10007A100((uint64_t)&unk_100BF26F8);
  v272 = v271;
  v273 = v269;
  v274 = v361;
  View.gesture<A>(_:)(v268, v273, v361, v270, v271);
  (*(void (**)(char *, uint64_t))(v359 + 8))(v268, v274);
  swift_release();
  sub_100080C0C(v392, v259, type metadata accessor for DetailChart);
  ((void (*)(char *, uint64_t, uint64_t))v387)(v261, v262, v134);
  v275 = swift_allocObject(&unk_100B819F8, v379, v376);
  sub_10007802C(v259, v275 + v375, type metadata accessor for DetailChart);
  v276 = ((uint64_t (*)(uint64_t, char *, uint64_t))v377)(v275 + v378, v261, v134);
  v277 = v366;
  static CoordinateSpaceProtocol<>.local.getter(v276);
  v395[0] = v374;
  v395[1] = v274;
  v395[2] = v270;
  v395[3] = v272;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v395, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:)>>, 1);
  v279 = v370;
  v280 = v364;
  v281 = v368;
  v282 = v386;
  View.onContinuousHover<A>(coordinateSpace:perform:)(v277, sub_1005AB434, v275, v364, v368, OpaqueTypeConformance2, &protocol witness table for LocalCoordinateSpace);
  v283 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v367 + 8))(v277, v281, v283);
  (*(void (**)(char *, uint64_t))(v363 + 8))(v282, v280);
  v284 = v369;
  v285 = v365;
  v286 = v371;
  (*(void (**)(char *, char *, uint64_t))(v369 + 32))(v365, v279, v371);
  v287 = v381;
  sub_100037768(v390, v381, &qword_100BDB080);
  v395[0] = v287;
  v288 = v388;
  sub_100037768(v391, v388, &qword_100BDB090);
  v395[1] = v288;
  v289 = v389;
  v290 = v382;
  sub_100037768(v389, v382, &qword_100BDB098);
  v395[2] = v290;
  v291 = v383;
  v292 = v357;
  sub_100037768(v383, v357, &qword_100BDB0A0);
  v395[3] = v292;
  v293 = v385;
  v294 = v362;
  sub_100037768(v385, v362, &qword_100BDB0A8);
  v395[4] = v294;
  (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v279, v285, v286);
  v395[5] = v279;
  sub_10035E15C((uint64_t)v395);
  v295 = *(void (**)(char *, uint64_t))(v284 + 8);
  v295(v285, v286);
  sub_100021A14(v293, &qword_100BDB0A8);
  sub_100021A14(v384, &qword_100BF2688);
  sub_100021A14(v291, &qword_100BDB0A0);
  sub_100021A14(v289, &qword_100BDB098);
  sub_100021A14(v391, &qword_100BDB090);
  sub_100021A14(v390, &qword_100BDB080);
  v295(v279, v286);
  sub_100021A14(v294, &qword_100BDB0A8);
  sub_100021A14(v292, &qword_100BDB0A0);
  sub_100021A14(v382, &qword_100BDB098);
  sub_100021A14(v388, &qword_100BDB090);
  sub_100021A14(v381, &qword_100BDB080);
}

double sub_1005A85E4(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  double v20;
  char v21;
  double v22;
  uint64_t v24;

  v3 = type metadata accessor for LayoutDirection(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - v8;
  sub_1001591C8();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for LayoutDirection.rightToLeft(_:), v3);
  v10 = static LayoutDirection.== infix(_:_:)(v9, v6);
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, v3);
  v11(v9, v3);
  if ((v10 & 1) != 0)
  {
    v12 = v1 + *(int *)(type metadata accessor for DetailChart(0) + 28);
    v13 = v12 + *(int *)(type metadata accessor for DetailChartViewModel(0) + 20);
    v14 = type metadata accessor for ChartViewModel(0);
    v15 = v13 + *(int *)(v14 + 76);
    v16 = type metadata accessor for Date(0);
    v17 = ChartProxy.position<A>(forX:)(v15, v16, &protocol witness table for Date);
    if ((v18 & 1) == 0)
    {
      v19 = *(double *)&v17;
      v20 = COERCE_DOUBLE(ChartProxy.position<A>(forX:)(v13 + *(int *)(v14 + 80), v16, &protocol witness table for Date));
      if ((v21 & 1) == 0)
      {
        v22 = v19;
        if (v19 <= v20)
          v22 = v20;
        return v22 - a1;
      }
    }
  }
  return a1;
}

void sub_1005A8768(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  double v12;
  long double v13;
  double v14;
  double v15;
  _QWORD *v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[16];
  double v46;
  double v47;
  double v48;
  _BYTE v49[24];
  char v50[24];
  _QWORD v51[4];
  unsigned __int8 v52;

  v43 = a1;
  v44 = a3;
  v4 = sub_1000BA294(&qword_100BF27B0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1000BA294(&qword_100BF27B8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = ChartProxy.plotSize.getter(v8);
  v12 = v11.n128_f64[0];
  ChartProxy.plotSize.getter(v11);
  v14 = v13;
  v15 = hypot(v12, v13);
  v46 = v15;
  v47 = v12;
  v48 = v14;
  v16 = Path.init(_:)(v51, sub_1005ABDDC, v45);
  v41 = v51[0];
  v40 = v51[1];
  v39 = v51[2];
  v38 = v51[3];
  v37 = v52;
  static Color.white.getter(v16);
  v36 = Color.opacity(_:)(0.1);
  swift_release();
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  v17 = (v15 - v14) * -0.5;
  v18 = (v15 - v12) * -0.5;
  swift_beginAccess(&qword_100CAE968, v50, 1, 0);
  v19 = sub_100404958() * 0.0174532925;
  v21 = static UnitPoint.center.getter(v20);
  v23 = v22;
  swift_beginAccess(&qword_100CAE968, v49, 33, 0);
  v24 = sub_100404980();
  swift_endAccess(v49);
  v26 = static Edge.Set.all.getter(v25);
  v27 = v26;
  v28 = static Alignment.topLeading.getter(v26);
  v30 = v29;
  sub_1005AA2E8(v42, v43, a2 & 1, (uint64_t)v6 + *(int *)(v4 + 36), v31);
  *v6 = v28;
  v6[1] = v30;
  sub_100037768((uint64_t)v6, (uint64_t)&v10[*(int *)(v7 + 36)], &qword_100BF27B0);
  v32 = v40;
  *(_QWORD *)v10 = v41;
  *((_QWORD *)v10 + 1) = v32;
  v33 = v38;
  *((_QWORD *)v10 + 2) = v39;
  *((_QWORD *)v10 + 3) = v33;
  v10[32] = v37;
  *((_QWORD *)v10 + 5) = v36;
  *((_WORD *)v10 + 24) = 256;
  *((double *)v10 + 7) = v18;
  *((double *)v10 + 8) = v17;
  *((double *)v10 + 9) = v19;
  *((double *)v10 + 10) = v21;
  *((_QWORD *)v10 + 11) = v23;
  *((_QWORD *)v10 + 12) = v24;
  v10[104] = v27;
  sub_100021A14((uint64_t)v6, &qword_100BF27B0);
  v34 = v44;
  sub_100037768((uint64_t)v10, v44, &qword_100BF27B8);
  *(_BYTE *)(v34 + *(int *)(sub_1000BA294(&qword_100BF26C8) + 36)) = 0;
  sub_100021A14((uint64_t)v10, &qword_100BF27B8);
}

uint64_t sub_1005A8A90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  char v5;
  double v6;
  int *v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  double v11;

  v11 = DetailChartDataElement.value.getter(a1);
  v4 = COERCE_DOUBLE(ChartProxy.position<A>(forY:)(&v11, &type metadata for Double, &protocol witness table for Double));
  if ((v5 & 1) != 0)
    v6 = 0.0;
  else
    v6 = v4;
  v7 = (int *)type metadata accessor for ScaleLabel(0);
  v8 = (char *)a2 + v7[5];
  v9 = type metadata accessor for DetailChartDataElement(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, a1, v9);
  *a2 = 0x4010000000000000;
  *(double *)((char *)a2 + v7[6]) = v6;
  *((_BYTE *)a2 + v7[7]) = 1;
  *((_BYTE *)a2 + v7[8]) = 0;
  return result;
}

uint64_t sub_1005A8B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  double v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v3 = v2;
  v64 = a1;
  v65 = a2;
  v4 = type metadata accessor for Calendar(0);
  v62 = *(_QWORD *)(v4 - 8);
  v63 = v4;
  __chkstk_darwin(v4);
  v61 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v53 - v11;
  v13 = sub_1000BA294(&qword_100BE19B8);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DetailChartDataPoint(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v53 - v21;
  v23 = type metadata accessor for DetailChart(0);
  if ((*(_BYTE *)(v3 + *(int *)(v23 + 32)) & 1) != 0)
    goto LABEL_4;
  v58 = v19;
  v59 = v17;
  v54 = v9;
  v55 = v12;
  v60 = v22;
  v56 = v7;
  v57 = v6;
  v24 = v3 + *(int *)(v23 + 28);
  v25 = type metadata accessor for DetailChartViewModel(0);
  sub_100037768(v24 + *(int *)(v25 + 24), (uint64_t)v15, &qword_100BE19B8);
  v26 = type metadata accessor for LollipopViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v26) != 1)
  {
    v53 = v3;
    v31 = v58;
    v32 = v59;
    v33 = v16;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v58, &v15[*(int *)(v26 + 20)], v16);
    sub_1000215BC((uint64_t)v15, type metadata accessor for LollipopViewModel);
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v60, v31, v16);
    type metadata accessor for ChartViewModel(0);
    v34 = ChartKind.isBarChart.getter();
    if ((v34 & 1) != 0)
    {
      v35 = v54;
      v36 = DetailChartDataPoint.date.getter(v34);
      v37 = v61;
      static Calendar.current.getter(v36);
      v38 = v55;
      Date.wc_addMinutes(_:calendar:)(30, v37);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v37, v63);
      v40 = v56;
      v39 = v57;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v57);
      v28 = v65;
    }
    else
    {
      v38 = v55;
      DetailChartDataPoint.date.getter(v34);
      v28 = v65;
      v40 = v56;
      v39 = v57;
    }
    v41 = ChartProxy.position<A>(forX:)(v38, v39, &protocol witness table for Date);
    if ((v42 & 1) == 0)
    {
      v43 = *(double *)&v41;
      v44 = v60;
      v45 = DetailChartDataPoint.value.getter(v41);
      v46 = v45;
      if ((v47 & 1) != 0)
      {
        v52 = sub_1005A85E4(v43);
        DetailChartLollipopPoint.init(x:y:)(v46, 1, v52);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v44, v33);
        goto LABEL_15;
      }
      v66 = v45;
      v48 = ChartProxy.position<A>(forY:)(&v66, &type metadata for Double, &protocol witness table for Double);
      if ((v49 & 1) == 0)
      {
        v50 = v48;
        v51 = sub_1005A85E4(v43);
        DetailChartLollipopPoint.init(x:y:)(v50, 0, v51);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v60, v33);
LABEL_15:
        v27 = 0;
        goto LABEL_5;
      }
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v60, v33);
    v27 = 1;
    goto LABEL_5;
  }
  sub_100021A14((uint64_t)v15, &qword_100BE19B8);
LABEL_4:
  v27 = 1;
  v28 = v65;
LABEL_5:
  v29 = type metadata accessor for DetailChartLollipopPoint(0);
  return _s7Weather24LocationCompositionStateOwst_0(v28, v27, 1, v29);
}

void sub_1005A8F60(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *);
  char v32;
  void (*v33)(char *, uint64_t);
  double v34;
  double v35;
  __n128 v36;
  double v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  double v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  double v54;
  char v55;
  double v56;
  char v57;
  void (*v58)(char *, uint64_t);
  _BOOL4 v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  int *v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *);
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v94 = a1;
  v85 = type metadata accessor for DetailChartSelection(0);
  __chkstk_darwin(v85);
  v82 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v5);
  v89 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v90 = (uint64_t)&v74 - v8;
  v91 = type metadata accessor for DetailChartDataElement(0);
  v88 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v87 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v10);
  v84 = (uint64_t)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v83 = (char *)&v74 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v74 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v74 - v18;
  v20 = type metadata accessor for Date(0);
  v93 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v86 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v92 = (char *)&v74 - v23;
  v24 = type metadata accessor for LayoutDirection(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)&v74 - v29;
  v95 = v2;
  sub_1001591C8();
  v31 = *(void (**)(char *))(v25 + 104);
  v81 = enum case for LayoutDirection.rightToLeft(_:);
  v31(v27);
  v32 = static LayoutDirection.== infix(_:_:)(v30, v27);
  v33 = *(void (**)(char *, uint64_t))(v25 + 8);
  v33(v27, v24);
  v33(v30, v24);
  v34 = 0.0;
  if ((v32 & 1) != 0)
  {
    v35 = *(double *)(v95 + *(int *)(type metadata accessor for DetailChart(0) + 44));
    v34 = v35 - ChartProxy.plotSize.getter(v36);
  }
  v37 = a2 - v34;
  ChartProxy.value<A>(atX:as:)(v20, v20, &protocol witness table for Date, v37);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v20) == 1)
  {
    sub_100021A14((uint64_t)v19, (uint64_t *)&unk_100BD35A0);
    sub_1005A969C();
    return;
  }
  v76 = v31;
  v77 = v33;
  v39 = v92;
  v38 = v93;
  v40 = *(void (**)(char *, char *, uint64_t))(v93 + 32);
  v40(v92, v19, v20);
  v41 = type metadata accessor for DetailChart(0);
  v42 = v95 + *(int *)(v41 + 36);
  v78 = sub_1000BA294(&qword_100BDD670);
  v79 = v42;
  State.wrappedValue.getter(v16, v78);
  v43 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v20);
  v80 = v41;
  if (v43 == 1)
  {
    sub_100021A14((uint64_t)v16, (uint64_t *)&unk_100BD35A0);
  }
  else
  {
    v44 = v86;
    v40(v86, v16, v20);
    v45 = fabs(Date.timeIntervalSince(_:)(v44));
    v46 = *(void (**)(char *, uint64_t))(v38 + 8);
    v46(v44, v20);
    if (v45 < 60.0)
    {
      v46(v39, v20);
      return;
    }
  }
  v47 = v95 + *(int *)(v80 + 28);
  v48 = (char *)(v47 + *(int *)(type metadata accessor for DetailChartViewModel(0) + 20));
  v75 = type metadata accessor for ChartViewModel(0);
  v86 = v48;
  __chkstk_darwin(v75);
  *(&v74 - 2) = (uint64_t)v39;
  swift_bridgeObjectRetain();
  v49 = (uint64_t)v89;
  sub_10084B38C();
  swift_bridgeObjectRelease();
  v50 = v90;
  sub_1000787D4(v49, v90, &qword_100BCB0A0);
  v51 = v91;
  if (_s7Weather24LocationCompositionStateOwet_0(v50, 1, v91) == 1)
  {
    (*(void (**)(char *, uint64_t))(v93 + 8))(v39, v20);
    sub_100021A14(v50, &qword_100BCB0A0);
  }
  else
  {
    v52 = (uint64_t *)v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v87, v50, v51);
    *(double *)&v53 = COERCE_DOUBLE(sub_1005AA4F0(v95, v94));
    v54 = 0.0;
    if ((v55 & 1) != 0)
      goto LABEL_16;
    v56 = *(double *)&v53;
    sub_1001591C8();
    ((void (*)(char *, _QWORD, uint64_t))v76)(v27, v81, v24);
    v57 = static LayoutDirection.== infix(_:_:)(v30, v27);
    v58 = v77;
    v77(v27, v24);
    v58(v30, v24);
    v59 = v37 < v56;
    if ((v57 & 1) != 0)
      v59 = v37 > v56;
    if (!v59)
    {
LABEL_16:
      LODWORD(v90) = 1;
    }
    else
    {
      v54 = sub_1005A85E4(v56);
      LODWORD(v90) = 0;
    }
    v60 = v82;
    v62 = *v52;
    v61 = v52[1];
    v63 = (char *)v52 + *(int *)(v75 + 72);
    v64 = (int *)v85;
    v65 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
    v65(&v82[*(int *)(v85 + 20)], v63, v20);
    v66 = (char *)v60 + v64[6];
    v65(v66, v92, v20);
    swift_bridgeObjectRetain();
    v67 = v87;
    DetailChartDataElement.date.getter(v68);
    v69 = v95;
    v70 = sub_1005A85E4(v37);
    *v60 = v62;
    v60[1] = v61;
    *(double *)((char *)v60 + v64[8]) = v70;
    v71 = (double *)((char *)v60 + v64[9]);
    *v71 = v54;
    *((_BYTE *)v71 + 8) = v90;
    v72 = (uint64_t)v83;
    v65(v83, v66, v20);
    _s7Weather24LocationCompositionStateOwst_0(v72, 0, 1, v20);
    v73 = v84;
    sub_100037768(v72, v84, (uint64_t *)&unk_100BD35A0);
    State.wrappedValue.setter(v73, v78);
    sub_100021A14(v72, (uint64_t *)&unk_100BD35A0);
    sub_1000DB418((_QWORD *)(v69 + *(int *)(v80 + 40)), *(_QWORD *)(v69 + *(int *)(v80 + 40) + 24));
    sub_100223D98((uint64_t)v60);
    sub_1000215BC((uint64_t)v60, type metadata accessor for DetailChartSelection);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v67, v91);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v92, v20);
  }
}

void sub_1005A969C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - v5;
  v7 = type metadata accessor for Date(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 1, 1, v7);
  v8 = type metadata accessor for DetailChart(0);
  sub_100037768((uint64_t)v6, (uint64_t)v3, (uint64_t *)&unk_100BD35A0);
  v9 = sub_1000BA294(&qword_100BDD670);
  State.wrappedValue.setter(v3, v9);
  sub_100021A14((uint64_t)v6, (uint64_t *)&unk_100BD35A0);
  sub_1000DB418((_QWORD *)(v0 + *(int *)(v8 + 40)), *(_QWORD *)(v0 + *(int *)(v8 + 40) + 24));
  sub_100223E30();
}

void sub_1005A97A0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if ((a3 & 1) != 0)
    sub_1005A969C();
  else
    sub_1005A8F60(a5, *(double *)&a1);
}

uint64_t sub_1005A97D8(double a1)
{
  double v2;
  char v3;
  uint64_t result;

  type metadata accessor for DetailChart.LollipopOverlayView(0);
  type metadata accessor for DetailChartViewModel(0);
  type metadata accessor for ChartViewModel(0);
  if ((ChartKind.isBarChart.getter() & 1) != 0)
  {
    v2 = COERCE_DOUBLE(DetailChartLollipopPoint.y.getter());
    if ((v3 & 1) != 0)
      *(double *)&result = 0.0;
    else
      *(double *)&result = v2 + -1.0;
  }
  else
  {
    *(double *)&result = a1;
  }
  return result;
}

uint64_t sub_1005A9874@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  char v19;
  uint64_t v20;
  char v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  id v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _QWORD v90[3];
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  double v103;
  double v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  _QWORD v110[4];
  unsigned __int8 v111;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  unsigned __int8 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  char v131;
  __int128 v132;

  v2 = v1;
  sub_1000BA294(&qword_100BF2948);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v89 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v88 = (char *)&v65 - v7;
  v8 = sub_1000BA294(&qword_100BF2950);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v65 - v13;
  v15 = (int *)type metadata accessor for DetailChart.LollipopOverlayView(0);
  v16 = v1 + v15[7];
  v17 = v16 + *(int *)(sub_1000E7208() + 20);
  v90[0] = *(_QWORD *)(v17 + *(int *)(sub_1000995F0() + 40));
  v18 = COERCE_DOUBLE(ChartProxy.position<A>(forY:)(v90, &type metadata for Double, &protocol witness table for Double));
  if ((v19 & 1) != 0 || (*(double *)&v20 = COERCE_DOUBLE(sub_1005A97D8(v18)), (v21 & 1) != 0))
  {
    v54 = 1;
  }
  else
  {
    v87 = v20;
    v22 = *(double *)&v20;
    DetailChartLollipopPoint.x.getter();
    if (v22 <= 0.0)
    {
      v55 = sub_1000BA294(&qword_100BF2958);
      sub_10009926C((uint64_t)v14, 1, v56, v55);
    }
    else
    {
      v85 = v14;
      v86 = a1;
      v24 = *(uint64_t *)(v1 + v15[10]);
      v25 = v23 + *(double *)&v24 * -0.5;
      v26 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
      v84 = Color.init(_:)(v26);
      if (qword_100BC20C0 != -1)
        swift_once(&qword_100BC20C0, sub_1004049E8);
      swift_beginAccess(&qword_100CAE968, v110, 1, 0);
      v27 = sub_1004048E0();
      *(double *)&v28 = v27 + v27 + 1.0;
      v29 = *(_QWORD *)(v1 + v15[6]);
      static Alignment.center.getter(v30);
      sub_1000C6704();
      sub_1000DA64C(v28, 0, v29);
      v82 = v110[3];
      v81 = v111;
      v80 = v112;
      v79 = v113;
      v77 = v115;
      v78 = v114;
      v31 = v25 - sub_1004048E0();
      v83 = static Color.white.getter(v32);
      static Alignment.center.getter(v83);
      sub_1000C6704();
      v33 = sub_1000DA64C(v24, 0, v87);
      v87 = v116;
      v34 = v117;
      v76 = v118;
      v75 = v119;
      v73 = v121;
      v74 = v120;
      if ((ChartKind.isBarChart.getter(v33) & 1) != 0
        || (*(double *)&v35 = COERCE_DOUBLE(DetailChartLollipopPoint.y.getter()), (v36 & 1) != 0))
      {
        v51 = sub_1000BA294(&qword_100BF2960);
        v48 = (uint64_t)v88;
        v52 = (uint64_t)v88;
        v53 = 1;
      }
      else
      {
        v37 = *(double *)&v35;
        v38 = static Alignment.center.getter(v35);
        v71 = v39;
        v72 = v38;
        v40 = v15[8];
        v41 = *(uint64_t *)(v1 + v40);
        static Alignment.center.getter(v38);
        sub_1000C6704();
        v42 = sub_1000DA64C(v41, 0, v41);
        v43 = v123;
        v69 = v124;
        v70 = v122;
        v44 = v125;
        v67 = v127;
        v68 = v126;
        v66 = static Color.white.getter(v42);
        *(double *)&v45 = *(double *)&v41 - (*(double *)(v2 + v15[9]) + *(double *)(v2 + v15[9]));
        static Alignment.center.getter(v66);
        sub_1000C6704();
        sub_1000DA64C(v45, 0, v45);
        v109 = v43;
        v108 = v44;
        v107 = v129;
        v106 = v131;
        v46 = *(double *)(v2 + v40) * 0.5;
        v90[0] = v72;
        v90[1] = v71;
        v90[2] = v70;
        v91 = v43;
        v92 = v69;
        v93 = v44;
        v94 = v68;
        v95 = v67;
        v96 = v66;
        v97 = 256;
        v98 = v128;
        v99 = v129;
        v100 = v130;
        v101 = v131;
        v102 = v132;
        v103 = v25 - v46;
        v104 = v37 - v46;
        v105 = 0;
        v47 = sub_1000BA294(&qword_100BF2970);
        sub_1005ABB30((uint64_t)&unk_100BF2978);
        v48 = (uint64_t)v88;
        View.accessibilityHidden(_:)(1, v47, v49);
        swift_release();
        v51 = sub_1000BA294(&qword_100BF2960);
        v52 = v48;
        v53 = 0;
      }
      sub_10009926C(v52, v53, v50, v51);
      v57 = v89;
      sub_1000BCF38(v48, v89);
      v58 = v83;
      *(_QWORD *)v11 = v84;
      *((_WORD *)v11 + 4) = 256;
      *((_QWORD *)v11 + 2) = v82;
      v11[24] = v81;
      *((_QWORD *)v11 + 4) = v80;
      v11[40] = v79;
      v59 = v77;
      *((_QWORD *)v11 + 6) = v78;
      *((_QWORD *)v11 + 7) = v59;
      *((double *)v11 + 8) = v31;
      *((_QWORD *)v11 + 9) = 0;
      v11[80] = 0;
      *((_QWORD *)v11 + 11) = v58;
      *((_WORD *)v11 + 48) = 256;
      *((_QWORD *)v11 + 13) = v87;
      v11[112] = v34;
      *((_QWORD *)v11 + 15) = v76;
      v11[128] = v75;
      v60 = v73;
      *((_QWORD *)v11 + 17) = v74;
      *((_QWORD *)v11 + 18) = v60;
      *((double *)v11 + 19) = v25;
      *((_QWORD *)v11 + 20) = 0;
      v11[168] = 0;
      v61 = sub_1000BA294(&qword_100BF2968);
      sub_1000BCF38(v57, (uint64_t)&v11[*(int *)(v61 + 64)]);
      swift_retain();
      swift_retain();
      sub_100099298(v48);
      sub_100099298(v57);
      swift_release();
      swift_release();
      v62 = sub_1000BA294(&qword_100BF2958);
      sub_10009926C((uint64_t)v11, 0, v63, v62);
      v14 = v85;
      sub_1000787D4((uint64_t)v11, (uint64_t)v85, &qword_100BF2950);
      a1 = v86;
    }
    sub_1000787D4((uint64_t)v14, a1, &qword_100BF2950);
    v54 = 0;
  }
  return _s7Weather24LocationCompositionStateOwst_0(a1, v54, 1, v8);
}

uint64_t sub_1005A9E74@<X0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
  result = Color.init(_:)(v2);
  *(_QWORD *)a1 = result;
  *(_WORD *)(a1 + 8) = 256;
  return result;
}

void sub_1005A9EC4(double a1, double a2, double a3)
{
  double v6;
  double v7;
  double v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double *v34;
  int64_t v35;
  char v36[24];
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, v36, 1, 0);
  v6 = sub_100404930();
  v7 = v6 + sub_100404908();
  v8 = ceil(a1 / v7);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v9 = (uint64_t)v8;
  if ((uint64_t)v8 >= 1001)
  {
    v10 = sub_1000BA294(&qword_100BC3C38);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_10097CA50;
    v37 = 0;
    v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v37 = 0x3D6874646977;
    v38 = 0xE600000000000000;
    v12._countAndFlagsBits = Double.description.getter(a2);
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x746867696568202CLL;
    v13._object = (void *)0xE90000000000003DLL;
    String.append(_:)(v13);
    v14._countAndFlagsBits = Double.description.getter(a3);
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0x6874676E656C202CLL;
    v15._object = (void *)0xE90000000000003DLL;
    String.append(_:)(v15);
    v16._countAndFlagsBits = Double.description.getter(a1);
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0x6F4374636572202CLL;
    v17._object = (void *)0xEC0000003D746E75;
    String.append(_:)(v17);
    v35 = v9;
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19 = v37;
    v20 = v38;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = sub_1000B2E24();
    *(_QWORD *)(v11 + 32) = v19;
    *(_QWORD *)(v11 + 40) = v20;
    simulateCrash(_:_:)("Occusion hash pattern is trying to add too many Rects to Path; %@", 65, 2, v11, v35);
    swift_bridgeObjectRelease();
    v9 = 1000;
    goto LABEL_10;
  }
  if (v9 < 0)
  {
LABEL_29:
    __break(1u);
    return;
  }
  if (v9)
  {
LABEL_10:
    v37 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100605E64(0, v9, 0);
    v21 = 0;
    v22 = (_QWORD *)v37;
    v23 = *(_QWORD *)(v37 + 16);
    do
    {
      v37 = (uint64_t)v22;
      v24 = v22[3];
      v25 = v23 + 1;
      if (v23 >= v24 >> 1)
      {
        sub_100605E64((char *)(v24 > 1), v23 + 1, 1);
        v22 = (_QWORD *)v37;
      }
      v22[2] = v25;
      *(double *)&v22[v23++ + 4] = (double)v21++;
    }
    while (v9 != v21);
    goto LABEL_17;
  }
  v25 = _swiftEmptyArrayStorage[2];
  if (v25)
  {
    v22 = _swiftEmptyArrayStorage;
LABEL_17:
    v37 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1006061F0();
    v26 = 0;
    v27 = (_QWORD *)v37;
    v28 = *(_QWORD *)(v37 + 16);
    v29 = 32 * v28 + 32;
    do
    {
      v30 = *(double *)&v22[v26 + 4];
      v37 = (uint64_t)v27;
      v31 = v28 + v26 + 1;
      if ((unint64_t)(v28 + v26) >= v27[3] >> 1)
      {
        sub_1006061F0();
        v27 = (_QWORD *)v37;
      }
      ++v26;
      v27[2] = v31;
      v32 = (char *)v27 + v29;
      *(double *)v32 = v7 * v30;
      *((_QWORD *)v32 + 1) = 0;
      *((double *)v32 + 2) = v6;
      *((double *)v32 + 3) = a1;
      v29 += 32;
    }
    while (v25 != v26);
    goto LABEL_21;
  }
  v27 = _swiftEmptyArrayStorage;
LABEL_21:
  swift_bridgeObjectRelease();
  v33 = v27[2];
  if (v33)
  {
    v37 = 0x3FF0000000000000;
    v38 = 0;
    v39 = 0;
    v40 = 0x3FF0000000000000;
    v34 = (double *)(v27 + 7);
    v41 = 0;
    v42 = 0;
    do
    {
      Path.addRect(_:transform:)(&v37, *(v34 - 3), *(v34 - 2), *(v34 - 1), *v34);
      v34 += 4;
      --v33;
    }
    while (v33);
  }
  swift_bridgeObjectRelease();
}

void sub_1005AA2E8(uint64_t a1@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  _OWORD v32[3];

  v8 = a3 & 1;
  v9 = type metadata accessor for UnevenRoundedRectangle(0, a5);
  __chkstk_darwin(v9);
  v11 = (double *)((char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_1000BA294(&qword_100BF27C0);
  __chkstk_darwin(v12);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1 + *(int *)(type metadata accessor for DetailChart(0) + 28);
  v16 = v15 + *(int *)(type metadata accessor for DetailChartViewModel(0) + 20);
  *(_QWORD *)&v32[0] = *(_QWORD *)(v16 + *(int *)(type metadata accessor for ChartViewModel(0) + 40));
  v17 = ChartProxy.position<A>(forY:)(v32, &type metadata for Double, &protocol witness table for Double);
  LOBYTE(v16) = v18;
  v19 = RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)(8.0, 0.0, 0.0, 0.0);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v26 = (char *)v11 + *(int *)(v9 + 20);
  v27 = enum case for RoundedCornerStyle.continuous(_:);
  v28 = type metadata accessor for RoundedCornerStyle(0);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v26, v27, v28);
  *v11 = v19;
  *((_QWORD *)v11 + 1) = v21;
  *((_QWORD *)v11 + 2) = v23;
  *((_QWORD *)v11 + 3) = v25;
  if ((v16 & 1) != 0)
    v17 = 0;
  static Alignment.center.getter(v29);
  _FrameLayout.init(width:height:alignment:)(a2, v8, v17, 0);
  sub_100080C0C((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  v30 = &v14[*(int *)(v12 + 36)];
  v31 = v32[1];
  *(_OWORD *)v30 = v32[0];
  *((_OWORD *)v30 + 1) = v31;
  *((_OWORD *)v30 + 2) = v32[2];
  sub_1000215BC((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  sub_1000787D4((uint64_t)v14, a4, &qword_100BF27C0);
}

uint64_t sub_1005AA4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char v20;
  char v21;
  double v22;
  _QWORD v24[2];

  v24[1] = a2;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v7);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DetailChartDataElement(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(int *)(type metadata accessor for DetailChart(0) + 28);
  v24[0] = a1;
  v15 = a1 + v14;
  v16 = *(int *)(type metadata accessor for DetailChartViewModel(0) + 20);
  v17 = type metadata accessor for ChartViewModel(0);
  sub_100037768(v15 + v16 + *(int *)(v17 + 84), (uint64_t)v9, &qword_100BCB0A0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10) == 1)
  {
    sub_100021A14((uint64_t)v9, &qword_100BCB0A0);
  }
  else
  {
    v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    DetailChartDataElement.date.getter(v18);
    v19 = COERCE_DOUBLE(ChartProxy.position<A>(forX:)(v6, v3, &protocol witness table for Date));
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if ((v21 & 1) == 0)
    {
      v22 = sub_1005A85E4(v19);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      return *(_QWORD *)&v22;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return 0;
}

void sub_1005AA6F8(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v66;
  _QWORD *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;

  v113 = a1;
  v2 = type metadata accessor for BlendMode(0);
  v111 = *(_QWORD *)(v2 - 8);
  v112 = v2;
  __chkstk_darwin(v2);
  v110 = (char *)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v102);
  v104 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_1000BA294(&qword_100BDFBE8);
  __chkstk_darwin(v108);
  v109 = (uint64_t)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for DynamicTypeSize(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v96 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_1000BA294(&qword_100BF2920);
  v93 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v92 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_1000BA294(&qword_100BF2928);
  __chkstk_darwin(v91);
  v94 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_1000BA294(&qword_100BF2930);
  __chkstk_darwin(v99);
  v103 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_1000BA294(&qword_100BF2938);
  __chkstk_darwin(v100);
  v106 = (uint64_t)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_1000BA294(&qword_100BF2940);
  __chkstk_darwin(v101);
  v105 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for ScaleLabel(0);
  v107 = v1;
  DetailChartDataElement.valueLabel.getter();
  v20 = static ChartValueLabel.with(label:)(v14);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v27 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.caption2(_:), v7);
  static Font.Weight.semibold.getter(v27);
  v28 = static Font.system(_:weight:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v29 = Text.font(_:)(v28, v20, v22, v26, v24);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  swift_release();
  sub_1000D31B4(v20, v22, v26);
  swift_bridgeObjectRelease();
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, &v114, 33, 0);
  sub_1004046D0();
  v37 = v36;
  swift_endAccess(&v114);
  v38 = v33 & 1;
  v39 = Text.foregroundColor(_:)(v37, v29, v31, v33 & 1, v35);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  swift_release();
  sub_1000D31B4(v29, v31, v38);
  v46 = swift_bridgeObjectRelease();
  v114 = v39;
  v115 = v41;
  v116 = v43 & 1;
  v117 = v45;
  v47 = v97;
  v48 = v96;
  v49 = v98;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v97 + 104))(v96, enum case for DynamicTypeSize.medium(_:), v98, v46);
  v50 = v92;
  View.dynamicTypeSize(_:)(v48, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
  sub_1000D31B4(v114, v115, v116);
  swift_bridgeObjectRelease();
  LOBYTE(v49) = static Edge.Set.all.getter(v51);
  v52 = v93;
  v53 = (uint64_t)v94;
  v54 = v95;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v94, v50, v95);
  v55 = v53 + *(int *)(v91 + 36);
  *(_BYTE *)v55 = v49;
  *(_OWORD *)(v55 + 8) = xmmword_1009B1060;
  *(_OWORD *)(v55 + 24) = xmmword_1009B1060;
  *(_BYTE *)(v55 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v54);
  v56 = v104;
  v57 = &v104[*(int *)(v102 + 20)];
  v58 = enum case for RoundedCornerStyle.continuous(_:);
  v59 = type metadata accessor for RoundedCornerStyle(0);
  v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v57, v58, v59);
  __asm { FMOV            V0.2D, #4.0 }
  *v56 = _Q0;
  v66 = v90;
  v67 = v107;
  if (*((_BYTE *)v107 + *(int *)(v90 + 28)) == 1)
  {
    v68 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
    v69 = Color.init(_:)(v68);
  }
  else
  {
    v69 = static Color.clear.getter(v60);
  }
  v70 = v69;
  v71 = v109;
  sub_100080C0C((uint64_t)v56, v109, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v72 = v108;
  *(_QWORD *)(v71 + *(int *)(v108 + 52)) = v70;
  *(_WORD *)(v71 + *(int *)(v72 + 56)) = 256;
  sub_1000215BC((uint64_t)v56, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v74 = static Alignment.center.getter(v73);
  v76 = v75;
  v77 = (uint64_t)v103;
  v78 = (uint64_t)&v103[*(int *)(v99 + 36)];
  sub_100037768(v71, v78, &qword_100BDFBE8);
  v79 = (uint64_t *)(v78 + *(int *)(sub_1000BA294(&qword_100BDFC18) + 36));
  *v79 = v74;
  v79[1] = v76;
  sub_100037768(v53, v77, &qword_100BF2928);
  sub_100021A14(v71, &qword_100BDFBE8);
  sub_100021A14(v53, &qword_100BF2928);
  v80 = *v67;
  v81 = *(double *)((char *)v67 + *(int *)(v66 + 24)) + 1.0;
  v82 = v106;
  sub_100037768(v77, v106, &qword_100BF2930);
  v83 = v82 + *(int *)(v100 + 36);
  *(_QWORD *)v83 = v80;
  *(double *)(v83 + 8) = v81;
  sub_100021A14(v77, &qword_100BF2930);
  v85 = v110;
  v84 = v111;
  if (*((_BYTE *)v67 + *(int *)(v66 + 32)))
    v86 = (unsigned int *)&enum case for BlendMode.destinationOut(_:);
  else
    v86 = (unsigned int *)&enum case for BlendMode.normal(_:);
  v87 = v112;
  (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v110, *v86, v112);
  v88 = (uint64_t)v105;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(&v105[*(int *)(v101 + 36)], v85, v87);
  sub_100037768(v82, v88, &qword_100BF2938);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v87);
  sub_100021A14(v82, &qword_100BF2938);
  sub_1000787D4(v88, v113, &qword_100BF2940);
}

uint64_t sub_1005AAEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int EnumCaseMultiPayload;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;

  v3 = (int *)type metadata accessor for DetailChart(0);
  v4 = *((_QWORD *)v3 - 1);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = v0 + v6;
  sub_1000BA294(&qword_100BC2908);
  v45 = v5;
  if (swift_getEnumCaseMultiPayload(v0 + v6) == 1)
  {
    v9 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v6, v9);
  }
  else
  {
    swift_release();
  }
  v10 = sub_1000BA294(&qword_100BC68C8);
  v44 = (v5 + 16) & ~v5;
  if (sub_1000952AC(v10) == 1)
  {
    v11 = type metadata accessor for ColorSchemeContrast(0);
    sub_1000B2568(v11);
  }
  else
  {
    swift_release();
  }
  sub_1000B15F8(*(_QWORD *)(v8 + v3[6]), *(_BYTE *)(v8 + v3[6] + 8));
  v12 = v8 + v3[7];
  v13 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  sub_1000B2568(v13);
  v14 = (int *)sub_1000E7208();
  v15 = v12 + v14[5];
  swift_bridgeObjectRelease();
  v16 = (int *)sub_1000995F0();
  v17 = type metadata accessor for ChartKind(0);
  sub_1000BA9C0(v17);
  sub_1000BD578(v16[6]);
  v18 = type metadata accessor for DetailChartExtrema(0);
  sub_1000BA9C0(v18);
  sub_1000BD578(v16[8]);
  sub_1000BD578(v16[9]);
  sub_1000D1254(v15 + v16[11]);
  sub_1000BA294(&qword_100BCB978);
  v19 = sub_1000D9124();
  type metadata accessor for Date(v19);
  if (!sub_10009D53C(v1))
    sub_100098C64();
  v20 = v15 + v16[14];
  v21 = sub_1000BA294(&qword_100BCB988);
  if (!sub_1000B4988(v21))
  {
    swift_release();
    v20 += *(int *)(v2 + 48);
    if (!sub_10009D53C(v20))
      sub_100098C64();
  }
  v22 = sub_1000D9124();
  v23 = type metadata accessor for ChartDarkeningScrim(v22);
  sub_1000BC1D4(v23);
  sub_1000BD578(v16[17]);
  sub_1000C0F58(v15 + v16[18]);
  sub_1000C0F58(v15 + v16[19]);
  sub_1000C0F58(v15 + v16[20]);
  v24 = sub_1000D9124();
  v25 = type metadata accessor for DetailChartDataElement(v24);
  if (!sub_1000B4988(v25))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v20, v2);
  sub_1000BD578(v16[22]);
  v26 = sub_1000D9124();
  v27 = type metadata accessor for ChartPeakMarkStyle(v26);
  sub_1000BC1D4(v27);
  sub_1000BD578(v16[25]);
  v28 = sub_1000D9124();
  v29 = type metadata accessor for ChartViewModelInterpolationMode(v28);
  sub_1000BC1D4(v29);
  v30 = sub_1000D9124();
  v31 = type metadata accessor for ChartPastDataTreatment(v30);
  sub_1000BC1D4(v31);
  sub_1000BA548(v15 + v16[28]);
  sub_1000BA548(v15 + v16[29]);
  sub_1000BA548(v15 + v16[30]);
  sub_1000BA548(v15 + v16[31]);
  sub_1000BA548(v15 + v16[32]);
  swift_release();
  v32 = v12 + v14[6];
  v33 = type metadata accessor for LollipopViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v32, 1, v33))
  {
    sub_1000C48E0();
    v34 = type metadata accessor for DetailChartDataPoint(0);
    sub_1000BB154(v34);
    v35 = v32 + *(int *)(v33 + 28);
    type metadata accessor for LollipopDetailViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v35);
    if (EnumCaseMultiPayload == 2)
    {
      swift_bridgeObjectRelease();
      v37 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v38 = type metadata accessor for AttributedString(0);
      sub_1000BB154(v38);
      sub_1000BA548(v35 + v37[6]);
      sub_1000BA548(v35 + v37[7]);
      sub_1000BA548(v35 + v37[8]);
      sub_1000BA548(v35 + v37[9]);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      sub_1000C48E0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (EnumCaseMultiPayload)
        goto LABEL_22;
      sub_1000C48E0();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
LABEL_22:
  v39 = v12 + v14[7];
  v40 = type metadata accessor for ConditionDetailChartFooterViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v39, 1, v40))
  {
    if (swift_getEnumCaseMultiPayload(v39) == 1)
    {
      v41 = type metadata accessor for TemperatureChartKind(0);
      sub_1000B2568(v41);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v42 = v8 + v3[9];
  if (!sub_10009D53C(v42))
    sub_1000C0F58(v42);
  sub_1000BA294(&qword_100BDD670);
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v8 + v3[10]));
  return swift_deallocObject(v0, v44 + v7, v45 | 7);
}

uint64_t sub_1005AB384(uint64_t a1)
{
  return sub_1005ABAB8(a1, type metadata accessor for DetailChart, (uint64_t (*)(uint64_t, uint64_t))sub_1005A662C);
}

unint64_t sub_1005AB398()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF2658;
  if (!qword_100BF2658)
  {
    v1 = sub_100075EB0(&qword_100BF2638);
    sub_10007A100((uint64_t)&unk_100BF2660);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2658);
  }
  return result;
}

uint64_t type metadata accessor for DetailChart.LollipopOverlayView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF2820, (uint64_t)&nominal type descriptor for DetailChart.LollipopOverlayView);
}

unint64_t sub_1005AB438()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF26F0;
  if (!qword_100BF26F0)
  {
    v1 = sub_100075EB0(&qword_100BF26E8);
    sub_10034AEE4((uint64_t)&qword_100BDD180);
    sub_10034AEE4((uint64_t)&qword_100BDFC58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF26F0);
  }
  return result;
}

uint64_t sub_1005AB4D8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int EnumCaseMultiPayload;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = (int *)type metadata accessor for DetailChart(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = sub_10009D6D0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v46 = *(_QWORD *)(v7 + 64);
  v9 = v0 + ((v4 + 16) & ~v4);
  v10 = sub_1000BA294(&qword_100BC2908);
  v51 = v7;
  v52 = v6;
  if (sub_1000952AC(v10) == 1)
  {
    v11 = type metadata accessor for LayoutDirection(0);
    sub_1000B2568(v11);
  }
  else
  {
    swift_release();
  }
  v12 = v9 + v2[5];
  sub_1000BA294(&qword_100BC68C8);
  v53 = v0;
  v49 = (v4 + 16) & ~v4;
  v50 = v4;
  v47 = v8;
  v48 = v5;
  if (swift_getEnumCaseMultiPayload(v12) == 1)
  {
    v13 = type metadata accessor for ColorSchemeContrast(0);
    sub_1000989A0(v13);
  }
  else
  {
    swift_release();
  }
  sub_1000B15F8(*(_QWORD *)(v9 + v2[6]), *(_BYTE *)(v9 + v2[6] + 8));
  v14 = v9 + v2[7];
  v15 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  sub_1000989A0(v15);
  v16 = (int *)sub_1000E7208();
  v17 = v14 + v16[5];
  swift_bridgeObjectRelease();
  v18 = (int *)sub_1000995F0();
  v19 = type metadata accessor for ChartKind(0);
  sub_10009BF1C(v19);
  sub_100094FCC(v18[6]);
  v20 = type metadata accessor for DetailChartExtrema(0);
  sub_10009BF1C(v20);
  sub_100094FCC(v18[8]);
  sub_100094FCC(v18[9]);
  sub_1000D1254(v17 + v18[11]);
  sub_1000BA294(&qword_100BCB978);
  v21 = sub_1000D1368();
  type metadata accessor for Date(v21);
  if (!sub_1000952CC(v8))
    sub_1000C173C();
  v22 = v17 + v18[14];
  v23 = sub_1000BA294(&qword_100BCB988);
  if (!sub_1000CD878(v23))
  {
    swift_release();
    v22 += *(int *)(v1 + 48);
    if (!sub_1000952CC(v22))
      sub_1000C173C();
  }
  v24 = sub_1000D1368();
  v25 = type metadata accessor for ChartDarkeningScrim(v24);
  sub_1000BB154(v25);
  sub_100094FCC(v18[17]);
  sub_100099604(v17 + v18[18]);
  sub_100099604(v17 + v18[19]);
  sub_100099604(v17 + v18[20]);
  v26 = sub_1000D1368();
  v27 = type metadata accessor for DetailChartDataElement(v26);
  if (!sub_1000CD878(v27))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v22, v1);
  sub_100094FCC(v18[22]);
  v28 = sub_1000D1368();
  v29 = type metadata accessor for ChartPeakMarkStyle(v28);
  sub_1000BB154(v29);
  sub_100094FCC(v18[25]);
  v30 = sub_1000D1368();
  v31 = type metadata accessor for ChartViewModelInterpolationMode(v30);
  sub_1000BB154(v31);
  v32 = sub_1000D1368();
  v33 = type metadata accessor for ChartPastDataTreatment(v32);
  sub_1000BB154(v33);
  sub_1000BA548(v17 + v18[28]);
  sub_1000BA548(v17 + v18[29]);
  sub_1000BA548(v17 + v18[30]);
  sub_1000BA548(v17 + v18[31]);
  sub_1000BA548(v17 + v18[32]);
  swift_release();
  v34 = v14 + v16[6];
  v35 = type metadata accessor for LollipopViewModel(0);
  if (!sub_1000B4988(v35))
  {
    sub_10009C0D4();
    v36 = type metadata accessor for DetailChartDataPoint(0);
    sub_1000CFE2C(v36);
    v37 = v34 + *(int *)(v22 + 28);
    type metadata accessor for LollipopDetailViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v37);
    if (EnumCaseMultiPayload == 2)
    {
      swift_bridgeObjectRelease();
      v39 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v40 = type metadata accessor for AttributedString(0);
      sub_1000CFE2C(v40);
      sub_1000BA548(v37 + v39[6]);
      sub_1000BA548(v37 + v39[7]);
      sub_1000BA548(v37 + v39[8]);
      sub_1000BA548(v37 + v39[9]);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      sub_10009C0D4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (EnumCaseMultiPayload)
        goto LABEL_22;
      sub_10009C0D4();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
LABEL_22:
  v41 = v14 + v16[7];
  type metadata accessor for ConditionDetailChartFooterViewModel(0);
  if (!sub_10009D53C(v41))
  {
    if (swift_getEnumCaseMultiPayload(v41) == 1)
    {
      v42 = type metadata accessor for TemperatureChartKind(0);
      sub_1000989A0(v42);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v43 = v9 + v2[9];
  if (!sub_1000952CC(v43))
    sub_100099604(v43);
  v44 = (v49 + v48 + v47) & ~v47;
  sub_1000BA294(&qword_100BDD670);
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v9 + v2[10]));
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v53 + v44, v52);
  return swift_deallocObject(v53, v44 + v46, v50 | v47 | 7);
}

void sub_1005AB9A0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = a3 & 1;
  v7 = *(_QWORD *)(type metadata accessor for DetailChart(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(sub_10009D6D0() - 8) + 80);
  sub_1005A97A0(a1, a2, v6, v3 + v8, v3 + ((v8 + v9 + v10) & ~v10));
}

void sub_1005ABA20(double *a1@<X8>)
{
  *a1 = DetailChartDataElement.value.getter();
}

uint64_t sub_1005ABA48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10009D6D0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1005ABAA4(uint64_t a1)
{
  return sub_1005ABAB8(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ChartProxy, (uint64_t (*)(uint64_t, uint64_t))sub_1005A8A90);
}

uint64_t sub_1005ABAB8(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

uint64_t type metadata accessor for ScaleLabel(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF28C8, (uint64_t)&nominal type descriptor for ScaleLabel);
}

void sub_1005ABB30(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  void (*v3)(void);
  void (*v4)(void);
  uint64_t v5;

  if (!sub_10009987C(a1))
  {
    v4 = v3;
    v5 = sub_100098C3C(0, v2);
    v4();
    sub_1005ABD50();
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5), v1);
  }
  sub_100099960();
}

unint64_t sub_1005ABB88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF2738;
  if (!qword_100BF2738)
  {
    v1 = sub_100075EB0(&qword_100BF2740);
    sub_1005ABC0C();
    sub_10034AEE4((uint64_t)&qword_100BC4050);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2738);
  }
  return result;
}

unint64_t sub_1005ABC0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF2748;
  if (!qword_100BF2748)
  {
    v1 = sub_100075EB0(&qword_100BF2750);
    sub_100397180((uint64_t)&unk_100BF2758);
    sub_10034AEE4((uint64_t)&unk_100BF2798);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2748);
  }
  return result;
}

void sub_1005ABCB0()
{
  sub_100397180((uint64_t)&unk_100BF2768);
}

unint64_t sub_1005ABCD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF2778;
  if (!qword_100BF2778)
  {
    v1 = sub_100075EB0(&qword_100BF2780);
    sub_10034AEE4((uint64_t)&unk_100BF2788);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2778);
  }
  return result;
}

unint64_t sub_1005ABD50()
{
  unint64_t result;

  result = qword_100BF27A8;
  if (!qword_100BF27A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AllowsHitTestingModifier, &type metadata for _AllowsHitTestingModifier);
    atomic_store(result, (unint64_t *)&qword_100BF27A8);
  }
  return result;
}

uint64_t *sub_1005ABD8C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[16];
  swift_release(a1[18]);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  return a1;
}

void sub_1005ABDDC()
{
  double *v0;

  sub_1005A9EC4(v0[2], v0[3], v0[4]);
}

_QWORD *sub_1005ABDE8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t, __n128);
  __n128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  void (*v69)(char *, char *, uint64_t, __n128);
  __n128 v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t, __n128);
  __n128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t, __n128);
  __n128 v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  int *v119;
  uint64_t v120;
  _QWORD *v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  void (*v128)(char *, char *, uint64_t, __n128);
  __n128 v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  unsigned int EnumCaseMultiPayload;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  void (*v145)(char *, char *, uint64_t, __n128);
  __n128 v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v183;
  unsigned int v184;
  int *v185;
  _QWORD *v186;
  _QWORD *v187;
  int *v188;
  char *v189;
  char *v190;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v48 = *a2;
    *a1 = *a2;
    v49 = (_QWORD *)(v48 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return v49;
  }
  v7 = type metadata accessor for DetailChartLollipopPoint(0);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ChartProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v186 = a2;
  v187 = a1;
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  v13[*(int *)(v16 + 20)] = v14[*(int *)(v16 + 20)];
  v13[*(int *)(v16 + 24)] = v14[*(int *)(v16 + 24)];
  v188 = (int *)type metadata accessor for DetailChartViewModel(0);
  v189 = v13;
  v17 = v188[5];
  v18 = &v13[v17];
  v190 = v14;
  v19 = &v14[v17];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = (int *)type metadata accessor for ChartViewModel(0);
  v22 = v21[5];
  v23 = &v18[v22];
  v24 = &v19[v22];
  v25 = type metadata accessor for ChartKind(0);
  v26 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v25 - 8) + 16);
  v27 = swift_bridgeObjectRetain();
  v26(v23, v24, v25, v27);
  *(_QWORD *)&v18[v21[6]] = *(_QWORD *)&v19[v21[6]];
  v28 = v21[7];
  v29 = &v18[v28];
  v30 = &v19[v28];
  v31 = type metadata accessor for DetailChartExtrema(0);
  v32 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v31 - 8) + 16);
  v33 = swift_bridgeObjectRetain();
  v32(v29, v30, v31, v33);
  *(_QWORD *)&v18[v21[8]] = *(_QWORD *)&v19[v21[8]];
  *(_QWORD *)&v18[v21[9]] = *(_QWORD *)&v19[v21[9]];
  *(_OWORD *)&v18[v21[10]] = *(_OWORD *)&v19[v21[10]];
  v34 = v21[11];
  v35 = &v18[v34];
  v36 = &v19[v34];
  v37 = *(void **)v36;
  v38 = (void *)*((_QWORD *)v36 + 1);
  v39 = *((_QWORD *)v36 + 2);
  LOBYTE(v32) = v36[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001A41A0(v37, v38, v39, v32);
  *(_QWORD *)v35 = v37;
  *((_QWORD *)v35 + 1) = v38;
  *((_QWORD *)v35 + 2) = v39;
  v35[24] = (char)v32;
  v40 = v21[12];
  v41 = &v18[v40];
  v42 = &v19[v40];
  *(_QWORD *)&v18[v40] = *(_QWORD *)&v19[v40];
  v43 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v44 = &v41[v43];
  v45 = &v42[v43];
  v46 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v46))
  {
    v47 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v44, 0, 1, v46);
  }
  v50 = v21[13];
  v51 = &v18[v50];
  v52 = &v19[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  v51[8] = v52[8];
  v53 = v21[14];
  v54 = &v18[v53];
  v55 = &v19[v53];
  v56 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v55, 1, v56))
  {
    v57 = type metadata accessor for ChartViewModel.Background(0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v54 = *(_QWORD *)v55;
    v58 = *(int *)(v56 + 48);
    v59 = &v54[v58];
    v60 = &v55[v58];
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v60, 1, v46))
    {
      v61 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v59, v60, v46);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v59, 0, 1, v46);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v54, 0, 1, v56);
  }
  *(_QWORD *)&v18[v21[15]] = *(_QWORD *)&v19[v21[15]];
  v62 = v21[16];
  v63 = &v18[v62];
  v64 = &v19[v62];
  v65 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
  *(_QWORD *)&v18[v21[17]] = *(_QWORD *)&v19[v21[17]];
  v66 = v21[18];
  v67 = &v18[v66];
  v68 = &v19[v66];
  v69 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v46 - 8) + 16);
  v70 = swift_bridgeObjectRetain();
  v69(v67, v68, v46, v70);
  ((void (*)(char *, char *, uint64_t))v69)(&v18[v21[19]], &v19[v21[19]], v46);
  ((void (*)(char *, char *, uint64_t))v69)(&v18[v21[20]], &v19[v21[20]], v46);
  v71 = v21[21];
  v72 = &v18[v71];
  v73 = &v19[v71];
  v74 = type metadata accessor for DetailChartDataElement(0);
  v185 = a3;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v73, 1, v74))
  {
    v75 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v72, v73, v74);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v72, 0, 1, v74);
  }
  *(_QWORD *)&v18[v21[22]] = *(_QWORD *)&v19[v21[22]];
  v76 = v21[23];
  v77 = &v18[v76];
  v78 = &v19[v76];
  v79 = type metadata accessor for ChartPeakMarkStyle(0);
  v80 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v79 - 8) + 16);
  v81 = swift_bridgeObjectRetain();
  v80(v77, v78, v79, v81);
  *(_QWORD *)&v18[v21[24]] = *(_QWORD *)&v19[v21[24]];
  *(_QWORD *)&v18[v21[25]] = *(_QWORD *)&v19[v21[25]];
  v82 = v21[26];
  v83 = &v18[v82];
  v84 = &v19[v82];
  v85 = type metadata accessor for ChartViewModelInterpolationMode(0);
  v86 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v85 - 8) + 16);
  v87 = swift_bridgeObjectRetain();
  v86(v83, v84, v85, v87);
  v88 = v21[27];
  v89 = &v18[v88];
  v90 = &v19[v88];
  v91 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v89, v90, v91);
  v92 = v21[28];
  v93 = &v18[v92];
  v94 = &v19[v92];
  v95 = *((_QWORD *)v94 + 1);
  *(_QWORD *)v93 = *(_QWORD *)v94;
  *((_QWORD *)v93 + 1) = v95;
  v96 = v21[29];
  v97 = &v18[v96];
  v98 = &v19[v96];
  v99 = *((_QWORD *)v98 + 1);
  *(_QWORD *)v97 = *(_QWORD *)v98;
  *((_QWORD *)v97 + 1) = v99;
  v100 = v21[30];
  v101 = &v18[v100];
  v102 = &v19[v100];
  v103 = *((_QWORD *)v102 + 1);
  *(_QWORD *)v101 = *(_QWORD *)v102;
  *((_QWORD *)v101 + 1) = v103;
  v104 = v21[31];
  v105 = &v18[v104];
  v106 = &v19[v104];
  v107 = *((_QWORD *)v106 + 1);
  *(_QWORD *)v105 = *(_QWORD *)v106;
  *((_QWORD *)v105 + 1) = v107;
  v108 = v21[32];
  v109 = &v18[v108];
  v110 = &v19[v108];
  v111 = *((_QWORD *)v110 + 1);
  *(_QWORD *)v109 = *(_QWORD *)v110;
  *((_QWORD *)v109 + 1) = v111;
  v112 = v21[33];
  v113 = &v18[v112];
  v114 = &v19[v112];
  v115 = *((_QWORD *)v114 + 1);
  *(_QWORD *)v113 = *(_QWORD *)v114;
  *((_QWORD *)v113 + 1) = v115;
  v116 = v188[6];
  v117 = &v189[v116];
  v118 = &v190[v116];
  v119 = (int *)type metadata accessor for LollipopViewModel(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v118, 1, (uint64_t)v119))
  {
    v123 = *((_QWORD *)v118 + 1);
    *(_QWORD *)v117 = *(_QWORD *)v118;
    *((_QWORD *)v117 + 1) = v123;
    v124 = v119[5];
    v125 = &v117[v124];
    v126 = &v118[v124];
    v127 = type metadata accessor for DetailChartDataPoint(0);
    v128 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v127 - 8) + 16);
    v129 = swift_bridgeObjectRetain();
    v128(v125, v126, v127, v129);
    *(_QWORD *)&v117[v119[6]] = *(_QWORD *)&v118[v119[6]];
    v130 = v119[7];
    v131 = &v117[v130];
    v132 = &v118[v130];
    v133 = type metadata accessor for LollipopDetailViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v132);
    v184 = EnumCaseMultiPayload;
    if (EnumCaseMultiPayload == 2)
    {
      v139 = *((_QWORD *)v132 + 1);
      *(_QWORD *)v131 = *(_QWORD *)v132;
      *((_QWORD *)v131 + 1) = v139;
      v183 = v133;
      v140 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v141 = v140[5];
      v142 = &v131[v141];
      v143 = &v132[v141];
      v144 = type metadata accessor for AttributedString(0);
      v145 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v144 - 8) + 16);
      v146 = swift_bridgeObjectRetain();
      v145(v142, v143, v144, v146);
      v147 = v140[6];
      v148 = &v131[v147];
      v149 = &v132[v147];
      v150 = *((_QWORD *)v149 + 1);
      *(_QWORD *)v148 = *(_QWORD *)v149;
      *((_QWORD *)v148 + 1) = v150;
      v151 = v140[7];
      v152 = &v131[v151];
      v153 = &v132[v151];
      v154 = *((_QWORD *)v153 + 1);
      *(_QWORD *)v152 = *(_QWORD *)v153;
      *((_QWORD *)v152 + 1) = v154;
      v155 = v140[8];
      v156 = &v131[v155];
      v157 = &v132[v155];
      v158 = *((_QWORD *)v157 + 1);
      *(_QWORD *)v156 = *(_QWORD *)v157;
      *((_QWORD *)v156 + 1) = v158;
      v159 = v140[9];
      v160 = &v131[v159];
      v161 = &v132[v159];
      v162 = *((_QWORD *)v161 + 1);
      *(_QWORD *)v160 = *(_QWORD *)v161;
      *((_QWORD *)v160 + 1) = v162;
      v163 = v140[10];
      v164 = &v131[v163];
      v165 = &v132[v163];
      v166 = *((_QWORD *)v165 + 1);
      *(_QWORD *)v164 = *(_QWORD *)v165;
      *((_QWORD *)v164 + 1) = v166;
      v167 = v140[11];
      v133 = v183;
      v131[v167] = v132[v167];
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        v168 = *((_QWORD *)v132 + 1);
        *(_QWORD *)v131 = *(_QWORD *)v132;
        *((_QWORD *)v131 + 1) = v168;
        v169 = *((_QWORD *)v132 + 3);
        *((_QWORD *)v131 + 2) = *((_QWORD *)v132 + 2);
        *((_QWORD *)v131 + 3) = v169;
        v170 = *((_QWORD *)v132 + 5);
        *((_QWORD *)v131 + 4) = *((_QWORD *)v132 + 4);
        *((_QWORD *)v131 + 5) = v170;
        goto LABEL_23;
      }
      v135 = *((_QWORD *)v132 + 1);
      *(_QWORD *)v131 = *(_QWORD *)v132;
      *((_QWORD *)v131 + 1) = v135;
      v136 = *((_QWORD *)v132 + 3);
      *((_QWORD *)v131 + 2) = *((_QWORD *)v132 + 2);
      *((_QWORD *)v131 + 3) = v136;
      v137 = *((_QWORD *)v132 + 5);
      *((_QWORD *)v131 + 4) = *((_QWORD *)v132 + 4);
      *((_QWORD *)v131 + 5) = v137;
      v138 = *((_QWORD *)v132 + 7);
      *((_QWORD *)v131 + 6) = *((_QWORD *)v132 + 6);
      *((_QWORD *)v131 + 7) = v138;
      v131[64] = v132[64];
      v131[65] = v132[65];
    }
    swift_bridgeObjectRetain();
LABEL_23:
    v121 = v186;
    v49 = v187;
    v122 = v185;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload(v131, v133, v184);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v117, 0, 1, (uint64_t)v119);
    goto LABEL_24;
  }
  v120 = sub_1000BA294(&qword_100BE19B8);
  memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
  v121 = v186;
  v49 = v187;
  v122 = v185;
LABEL_24:
  v171 = v188[7];
  v172 = &v189[v171];
  v173 = &v190[v171];
  v174 = type metadata accessor for ConditionDetailChartFooterViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v173, 1, v174))
  {
    v175 = sub_1000BA294(&qword_100BE1968);
    memcpy(v172, v173, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v173) == 1)
    {
      v176 = type metadata accessor for TemperatureChartKind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v176 - 8) + 16))(v172, v173, v176);
      v177 = v172;
      v178 = v174;
      v179 = 1;
    }
    else
    {
      v180 = *((_QWORD *)v173 + 1);
      *(_QWORD *)v172 = *(_QWORD *)v173;
      *((_QWORD *)v172 + 1) = v180;
      swift_bridgeObjectRetain();
      v177 = v172;
      v178 = v174;
      v179 = 0;
    }
    swift_storeEnumTagMultiPayload(v177, v178, v179);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v172, 0, 1, v174);
  }
  v181 = v122[9];
  *(_QWORD *)((char *)v49 + v122[8]) = *(_QWORD *)((char *)v121 + v122[8]);
  *(_QWORD *)((char *)v49 + v181) = *(_QWORD *)((char *)v121 + v181);
  *(_QWORD *)((char *)v49 + v122[10]) = *(_QWORD *)((char *)v121 + v122[10]);
  return v49;
}

double sub_1005AC764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  void (*v25)(uint64_t, uint64_t, __n128);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int EnumCaseMultiPayload;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double result;
  uint64_t v45;

  v4 = type metadata accessor for DetailChartLollipopPoint(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for ChartProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 28);
  v8 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (int *)type metadata accessor for DetailChartViewModel(0);
  v10 = v7 + v9[5];
  swift_bridgeObjectRelease();
  v11 = (int *)type metadata accessor for ChartViewModel(0);
  v12 = v10 + v11[5];
  v13 = type metadata accessor for ChartKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  v14 = v10 + v11[7];
  v15 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001A44FC(*(void **)(v10 + v11[11]), *(void **)(v10 + v11[11] + 8), *(_QWORD *)(v10 + v11[11] + 16), *(_BYTE *)(v10 + v11[11] + 24));
  v16 = v10 + v11[12];
  v17 = v16 + *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v18 = type metadata accessor for Date(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v17, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = v10 + v11[14];
  v20 = sub_1000BA294(&qword_100BCB988);
  if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v20))
  {
    swift_release();
    v21 = v19 + *(int *)(v20 + 48);
    if (!_s7Weather24LocationCompositionStateOwet_0(v21, 1, v18))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v21, v18);
  }
  v22 = v10 + v11[16];
  v23 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  v24 = swift_bridgeObjectRelease();
  v25 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v18 - 8) + 8);
  v25(v10 + v11[18], v18, v24);
  ((void (*)(uint64_t, uint64_t))v25)(v10 + v11[19], v18);
  ((void (*)(uint64_t, uint64_t))v25)(v10 + v11[20], v18);
  v26 = v10 + v11[21];
  v27 = type metadata accessor for DetailChartDataElement(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v26, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  swift_bridgeObjectRelease();
  v28 = v10 + v11[23];
  v29 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
  swift_bridgeObjectRelease();
  v30 = v10 + v11[26];
  v31 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
  v32 = v10 + v11[27];
  v33 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v34 = v7 + v9[6];
  v35 = type metadata accessor for LollipopViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v34, 1, v35))
  {
    swift_bridgeObjectRelease();
    v36 = v34 + *(int *)(v35 + 20);
    v37 = type metadata accessor for DetailChartDataPoint(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
    v38 = v34 + *(int *)(v35 + 28);
    type metadata accessor for LollipopDetailViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v38);
    if (EnumCaseMultiPayload == 2)
    {
      swift_bridgeObjectRelease();
      v40 = v38 + *(int *)(type metadata accessor for TitleAndDetailLollipopDetailViewModel(0) + 20);
      v41 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v40, v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (EnumCaseMultiPayload)
        goto LABEL_16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
LABEL_16:
  v42 = v7 + v9[7];
  v43 = type metadata accessor for ConditionDetailChartFooterViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v42, 1, v43))
  {
    if (swift_getEnumCaseMultiPayload(v42) == 1)
    {
      v45 = type metadata accessor for TemperatureChartKind(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v42, v45);
    }
    else
    {
      *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_1005ACCB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t, __n128);
  __n128 v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t, __n128);
  __n128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t, __n128);
  __n128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t, __n128);
  __n128 v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t EnumCaseMultiPayload;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  void (*v142)(char *, char *, uint64_t, __n128);
  __n128 v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t result;
  unsigned int v180;
  uint64_t v181;
  int *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int *v186;
  uint64_t v187;

  v6 = type metadata accessor for DetailChartLollipopPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ChartProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  v182 = a3;
  v183 = a2;
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v184 = a1;
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  *(_BYTE *)(v12 + *(int *)(v15 + 20)) = *(_BYTE *)(v13 + *(int *)(v15 + 20));
  *(_BYTE *)(v12 + *(int *)(v15 + 24)) = *(_BYTE *)(v13 + *(int *)(v15 + 24));
  v186 = (int *)type metadata accessor for DetailChartViewModel(0);
  v187 = v12;
  v16 = v186[5];
  v17 = (_QWORD *)(v12 + v16);
  v185 = v13;
  v18 = (_QWORD *)(v13 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (int *)type metadata accessor for ChartViewModel(0);
  v21 = v20[5];
  v22 = (char *)v17 + v21;
  v23 = (char *)v18 + v21;
  v24 = type metadata accessor for ChartKind(0);
  v25 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v24 - 8) + 16);
  v26 = swift_bridgeObjectRetain();
  v25(v22, v23, v24, v26);
  *(_QWORD *)((char *)v17 + v20[6]) = *(_QWORD *)((char *)v18 + v20[6]);
  v27 = v20[7];
  v28 = (char *)v17 + v27;
  v29 = (char *)v18 + v27;
  v30 = type metadata accessor for DetailChartExtrema(0);
  v31 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 16);
  v32 = swift_bridgeObjectRetain();
  v31(v28, v29, v30, v32);
  *(_QWORD *)((char *)v17 + v20[8]) = *(_QWORD *)((char *)v18 + v20[8]);
  *(_QWORD *)((char *)v17 + v20[9]) = *(_QWORD *)((char *)v18 + v20[9]);
  *(_OWORD *)((char *)v17 + v20[10]) = *(_OWORD *)((char *)v18 + v20[10]);
  v33 = v20[11];
  v34 = (char *)v17 + v33;
  v35 = (char *)v18 + v33;
  v36 = *(void **)v35;
  v37 = (void *)*((_QWORD *)v35 + 1);
  v38 = *((_QWORD *)v35 + 2);
  LOBYTE(v31) = v35[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001A41A0(v36, v37, v38, v31);
  *(_QWORD *)v34 = v36;
  *((_QWORD *)v34 + 1) = v37;
  *((_QWORD *)v34 + 2) = v38;
  v34[24] = (char)v31;
  v39 = v20[12];
  v40 = (char *)v17 + v39;
  v41 = (char *)v18 + v39;
  *(_QWORD *)((char *)v17 + v39) = *(_QWORD *)((char *)v18 + v39);
  v42 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v43 = &v40[v42];
  v44 = &v41[v42];
  v45 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v44, 1, v45))
  {
    v46 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v43, 0, 1, v45);
  }
  v47 = v20[13];
  v48 = (char *)v17 + v47;
  v49 = (char *)v18 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v49[8];
  v50 = v20[14];
  v51 = (_QWORD *)((char *)v17 + v50);
  v52 = (_QWORD *)((char *)v18 + v50);
  v53 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v52, 1, v53))
  {
    v54 = type metadata accessor for ChartViewModel.Background(0);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    *v51 = *v52;
    v55 = *(int *)(v53 + 48);
    v56 = (char *)v51 + v55;
    v57 = (char *)v52 + v55;
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v57, 1, v45))
    {
      v58 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v56, v57, v45);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v56, 0, 1, v45);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v51, 0, 1, v53);
  }
  *(_QWORD *)((char *)v17 + v20[15]) = *(_QWORD *)((char *)v18 + v20[15]);
  v59 = v20[16];
  v60 = (char *)v17 + v59;
  v61 = (char *)v18 + v59;
  v62 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
  *(_QWORD *)((char *)v17 + v20[17]) = *(_QWORD *)((char *)v18 + v20[17]);
  v63 = v20[18];
  v64 = (char *)v17 + v63;
  v65 = (char *)v18 + v63;
  v66 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v45 - 8) + 16);
  v67 = swift_bridgeObjectRetain();
  v66(v64, v65, v45, v67);
  ((void (*)(char *, char *, uint64_t))v66)((char *)v17 + v20[19], (char *)v18 + v20[19], v45);
  ((void (*)(char *, char *, uint64_t))v66)((char *)v17 + v20[20], (char *)v18 + v20[20], v45);
  v68 = v20[21];
  v69 = (char *)v17 + v68;
  v70 = (char *)v18 + v68;
  v71 = type metadata accessor for DetailChartDataElement(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 1, v71))
  {
    v72 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v69, 0, 1, v71);
  }
  *(_QWORD *)((char *)v17 + v20[22]) = *(_QWORD *)((char *)v18 + v20[22]);
  v73 = v20[23];
  v74 = (char *)v17 + v73;
  v75 = (char *)v18 + v73;
  v76 = type metadata accessor for ChartPeakMarkStyle(0);
  v77 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v76 - 8) + 16);
  v78 = swift_bridgeObjectRetain();
  v77(v74, v75, v76, v78);
  *(_QWORD *)((char *)v17 + v20[24]) = *(_QWORD *)((char *)v18 + v20[24]);
  *(_QWORD *)((char *)v17 + v20[25]) = *(_QWORD *)((char *)v18 + v20[25]);
  v79 = v20[26];
  v80 = (char *)v17 + v79;
  v81 = (char *)v18 + v79;
  v82 = type metadata accessor for ChartViewModelInterpolationMode(0);
  v83 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v82 - 8) + 16);
  v84 = swift_bridgeObjectRetain();
  v83(v80, v81, v82, v84);
  v85 = v20[27];
  v86 = (char *)v17 + v85;
  v87 = (char *)v18 + v85;
  v88 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v86, v87, v88);
  v89 = v20[28];
  v90 = (_QWORD *)((char *)v17 + v89);
  v91 = (_QWORD *)((char *)v18 + v89);
  v92 = v91[1];
  *v90 = *v91;
  v90[1] = v92;
  v93 = v20[29];
  v94 = (_QWORD *)((char *)v17 + v93);
  v95 = (_QWORD *)((char *)v18 + v93);
  v96 = v95[1];
  *v94 = *v95;
  v94[1] = v96;
  v97 = v20[30];
  v98 = (_QWORD *)((char *)v17 + v97);
  v99 = (_QWORD *)((char *)v18 + v97);
  v100 = v99[1];
  *v98 = *v99;
  v98[1] = v100;
  v101 = v20[31];
  v102 = (_QWORD *)((char *)v17 + v101);
  v103 = (_QWORD *)((char *)v18 + v101);
  v104 = v103[1];
  *v102 = *v103;
  v102[1] = v104;
  v105 = v20[32];
  v106 = (_QWORD *)((char *)v17 + v105);
  v107 = (_QWORD *)((char *)v18 + v105);
  v108 = v107[1];
  *v106 = *v107;
  v106[1] = v108;
  v109 = v20[33];
  v110 = (_QWORD *)((char *)v17 + v109);
  v111 = (_QWORD *)((char *)v18 + v109);
  v112 = v111[1];
  *v110 = *v111;
  v110[1] = v112;
  v113 = v186[6];
  v114 = (_QWORD *)(v187 + v113);
  v115 = v185;
  v116 = (_QWORD *)(v185 + v113);
  v117 = (int *)type metadata accessor for LollipopViewModel(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v116, 1, (uint64_t)v117))
  {
    v118 = sub_1000BA294(&qword_100BE19B8);
    memcpy(v114, v116, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
    goto LABEL_22;
  }
  v119 = v116[1];
  *v114 = *v116;
  v114[1] = v119;
  v120 = v117[5];
  v121 = (char *)v114 + v120;
  v122 = (char *)v116 + v120;
  v123 = type metadata accessor for DetailChartDataPoint(0);
  v124 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v123 - 8) + 16);
  v125 = swift_bridgeObjectRetain();
  v124(v121, v122, v123, v125);
  *(_QWORD *)((char *)v114 + v117[6]) = *(_QWORD *)((char *)v116 + v117[6]);
  v126 = v117[7];
  v127 = (char *)v114 + v126;
  v128 = (char *)v116 + v126;
  v129 = type metadata accessor for LollipopDetailViewModel(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v128);
  v131 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v136 = *((_QWORD *)v128 + 1);
    *(_QWORD *)v127 = *(_QWORD *)v128;
    *((_QWORD *)v127 + 1) = v136;
    v181 = v129;
    v137 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
    v138 = v137[5];
    v139 = &v127[v138];
    v180 = v131;
    v140 = &v128[v138];
    v141 = type metadata accessor for AttributedString(0);
    v142 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v141 - 8) + 16);
    v143 = swift_bridgeObjectRetain();
    v142(v139, v140, v141, v143);
    v144 = v137[6];
    v145 = &v127[v144];
    v146 = &v128[v144];
    v147 = *((_QWORD *)v146 + 1);
    *(_QWORD *)v145 = *(_QWORD *)v146;
    *((_QWORD *)v145 + 1) = v147;
    v148 = v137[7];
    v149 = &v127[v148];
    v150 = &v128[v148];
    v151 = *((_QWORD *)v150 + 1);
    *(_QWORD *)v149 = *(_QWORD *)v150;
    *((_QWORD *)v149 + 1) = v151;
    v152 = v137[8];
    v153 = &v127[v152];
    v154 = &v128[v152];
    v155 = *((_QWORD *)v154 + 1);
    *(_QWORD *)v153 = *(_QWORD *)v154;
    *((_QWORD *)v153 + 1) = v155;
    v156 = v137[9];
    v157 = &v127[v156];
    v158 = &v128[v156];
    v159 = *((_QWORD *)v158 + 1);
    *(_QWORD *)v157 = *(_QWORD *)v158;
    *((_QWORD *)v157 + 1) = v159;
    v160 = v137[10];
    v161 = &v127[v160];
    v162 = &v128[v160];
    v163 = *((_QWORD *)v162 + 1);
    *(_QWORD *)v161 = *(_QWORD *)v162;
    *((_QWORD *)v161 + 1) = v163;
    v164 = v137[11];
    v129 = v181;
    v127[v164] = v128[v164];
    swift_bridgeObjectRetain();
    v131 = v180;
  }
  else
  {
    if ((_DWORD)EnumCaseMultiPayload != 1)
    {
      v115 = v185;
      v165 = *((_QWORD *)v128 + 1);
      *(_QWORD *)v127 = *(_QWORD *)v128;
      *((_QWORD *)v127 + 1) = v165;
      v166 = *((_QWORD *)v128 + 3);
      *((_QWORD *)v127 + 2) = *((_QWORD *)v128 + 2);
      *((_QWORD *)v127 + 3) = v166;
      v167 = *((_QWORD *)v128 + 5);
      *((_QWORD *)v127 + 4) = *((_QWORD *)v128 + 4);
      *((_QWORD *)v127 + 5) = v167;
      goto LABEL_21;
    }
    v132 = *((_QWORD *)v128 + 1);
    *(_QWORD *)v127 = *(_QWORD *)v128;
    *((_QWORD *)v127 + 1) = v132;
    v133 = *((_QWORD *)v128 + 3);
    *((_QWORD *)v127 + 2) = *((_QWORD *)v128 + 2);
    *((_QWORD *)v127 + 3) = v133;
    v134 = *((_QWORD *)v128 + 5);
    *((_QWORD *)v127 + 4) = *((_QWORD *)v128 + 4);
    *((_QWORD *)v127 + 5) = v134;
    v135 = *((_QWORD *)v128 + 7);
    *((_QWORD *)v127 + 6) = *((_QWORD *)v128 + 6);
    *((_QWORD *)v127 + 7) = v135;
    v127[64] = v128[64];
    v127[65] = v128[65];
  }
  swift_bridgeObjectRetain();
  v115 = v185;
LABEL_21:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload(v127, v129, v131);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v114, 0, 1, (uint64_t)v117);
LABEL_22:
  v168 = v186[7];
  v169 = (_QWORD *)(v187 + v168);
  v170 = (_QWORD *)(v115 + v168);
  v171 = type metadata accessor for ConditionDetailChartFooterViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v170, 1, v171))
  {
    v172 = sub_1000BA294(&qword_100BE1968);
    memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v170) == 1)
    {
      v173 = type metadata accessor for TemperatureChartKind(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v173 - 8) + 16))(v169, v170, v173);
      v174 = v169;
      v175 = v171;
      v176 = 1;
    }
    else
    {
      v177 = v170[1];
      *v169 = *v170;
      v169[1] = v177;
      swift_bridgeObjectRetain();
      v174 = v169;
      v175 = v171;
      v176 = 0;
    }
    swift_storeEnumTagMultiPayload(v174, v175, v176);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v169, 0, 1, v171);
  }
  v178 = v182[9];
  result = v184;
  *(_QWORD *)(v184 + v182[8]) = *(_QWORD *)(v183 + v182[8]);
  *(_QWORD *)(v184 + v178) = *(_QWORD *)(v183 + v178);
  *(_QWORD *)(v184 + v182[10]) = *(_QWORD *)(v183 + v182[10]);
  return result;
}

uint64_t sub_1005AD608(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unsigned __int8 v37;
  void *v38;
  void *v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  void (*v80)(char *, uint64_t, uint64_t, __n128);
  uint64_t v81;
  char *v82;
  const void *v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  int *v124;
  int v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  void (*v130)(char *, char *, uint64_t, __n128);
  __n128 v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unsigned int EnumCaseMultiPayload;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  void (*v156)(char *, char *, uint64_t, __n128);
  __n128 v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  void (*v181)(uint64_t, char *, uint64_t, __n128);
  __n128 v182;
  uint64_t v183;
  _QWORD *v184;
  char *v185;
  uint64_t v186;
  _QWORD *v187;
  char *v188;
  uint64_t v189;
  _QWORD *v190;
  char *v191;
  uint64_t v192;
  _QWORD *v193;
  char *v194;
  uint64_t v195;
  _QWORD *v196;
  char *v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  int v202;
  int v203;
  int *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  char *v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  int *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;

  v6 = type metadata accessor for DetailChartLollipopPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ChartProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v220 = a3;
  v221 = a1;
  v11 = a3[7];
  v12 = a1 + v11;
  v222 = a2;
  v13 = a2 + v11;
  v14 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  *(_BYTE *)(v12 + *(int *)(v15 + 20)) = *(_BYTE *)(v13 + *(int *)(v15 + 20));
  *(_BYTE *)(v12 + *(int *)(v15 + 24)) = *(_BYTE *)(v13 + *(int *)(v15 + 24));
  v223 = v12;
  v224 = type metadata accessor for DetailChartViewModel(0);
  v16 = *(int *)(v224 + 20);
  v17 = (char *)(v12 + v16);
  v18 = v13 + v16;
  *(_QWORD *)v17 = *(_QWORD *)(v13 + v16);
  *((_QWORD *)v17 + 1) = *(_QWORD *)(v13 + v16 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = (int *)type metadata accessor for ChartViewModel(0);
  v20 = v19[5];
  v21 = &v17[v20];
  v22 = v18 + v20;
  v23 = type metadata accessor for ChartKind(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  *(_QWORD *)&v17[v19[6]] = *(_QWORD *)(v18 + v19[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = v19[7];
  v25 = &v17[v24];
  v26 = v18 + v24;
  v27 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  *(_QWORD *)&v17[v19[8]] = *(_QWORD *)(v18 + v19[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v17[v19[9]] = *(_QWORD *)(v18 + v19[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = v19[10];
  v29 = &v17[v28];
  v30 = (_QWORD *)(v18 + v28);
  *(_QWORD *)v29 = *v30;
  *((_QWORD *)v29 + 1) = v30[1];
  v31 = v19[11];
  v32 = &v17[v31];
  v33 = v18 + v31;
  v34 = *(id *)v33;
  v35 = *(void **)(v33 + 8);
  v36 = *(_QWORD *)(v33 + 16);
  v37 = *(_BYTE *)(v33 + 24);
  sub_1001A41A0(*(id *)v33, v35, v36, v37);
  v38 = *(void **)v32;
  v39 = (void *)*((_QWORD *)v32 + 1);
  v40 = *((_QWORD *)v32 + 2);
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  *((_QWORD *)v32 + 2) = v36;
  v41 = v32[24];
  v32[24] = v37;
  sub_1001A44FC(v38, v39, v40, v41);
  v42 = v19[12];
  v43 = &v17[v42];
  v44 = v18 + v42;
  *(_QWORD *)&v17[v42] = *(_QWORD *)(v18 + v42);
  v45 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v46 = &v43[v45];
  v47 = (const void *)(v44 + v45);
  v48 = type metadata accessor for Date(0);
  LODWORD(v44) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v48);
  v49 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v47, 1, v48);
  if ((_DWORD)v44)
  {
    v50 = v13;
    if (!v49)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v46, 0, 1, v48);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v51 = *(_QWORD *)(v48 - 8);
  v50 = v13;
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v46, v48);
LABEL_6:
    v52 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, const void *, uint64_t))(v51 + 24))(v46, v47, v48);
LABEL_7:
  v53 = v19[13];
  v54 = &v17[v53];
  v55 = (uint64_t *)(v18 + v53);
  v56 = *v55;
  v54[8] = *((_BYTE *)v55 + 8);
  *(_QWORD *)v54 = v56;
  v57 = v19[14];
  v58 = &v17[v57];
  v59 = (_QWORD *)(v18 + v57);
  v60 = sub_1000BA294(&qword_100BCB988);
  v61 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v58, 1, v60);
  v62 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v60);
  if (v61)
  {
    if (!v62)
    {
      *(_QWORD *)v58 = *v59;
      v63 = *(int *)(v60 + 48);
      v64 = &v58[v63];
      v65 = (char *)v59 + v63;
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v65, 1, v48))
      {
        v66 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v64, v65, v48);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v64, 0, 1, v48);
      }
      v68 = v50;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v60);
      goto LABEL_20;
    }
LABEL_13:
    v67 = type metadata accessor for ChartViewModel.Background(0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    v68 = v50;
LABEL_20:
    v74 = v223;
    goto LABEL_21;
  }
  if (v62)
  {
    sub_100021A14((uint64_t)v58, &qword_100BCB988);
    goto LABEL_13;
  }
  *(_QWORD *)v58 = *v59;
  swift_retain();
  swift_release();
  v69 = *(int *)(v60 + 48);
  v70 = &v58[v69];
  v71 = (char *)v59 + v69;
  v72 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 1, v48);
  v73 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v48);
  if (v72)
  {
    v68 = v50;
    v74 = v223;
    if (!v73)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v70, v71, v48);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v48);
      goto LABEL_21;
    }
    goto LABEL_46;
  }
  v174 = *(_QWORD *)(v48 - 8);
  v68 = v50;
  v74 = v223;
  if (v73)
  {
    (*(void (**)(char *, uint64_t))(v174 + 8))(v70, v48);
LABEL_46:
    v175 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v174 + 24))(v70, v71, v48);
LABEL_21:
  *(_QWORD *)&v17[v19[15]] = *(_QWORD *)(v18 + v19[15]);
  v75 = v19[16];
  v76 = &v17[v75];
  v77 = v18 + v75;
  v78 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 24))(v76, v77, v78);
  *(_QWORD *)&v17[v19[17]] = *(_QWORD *)(v18 + v19[17]);
  swift_bridgeObjectRetain();
  v79 = swift_bridgeObjectRelease();
  v80 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v48 - 8) + 24);
  v80(&v17[v19[18]], v18 + v19[18], v48, v79);
  ((void (*)(char *, uint64_t, uint64_t))v80)(&v17[v19[19]], v18 + v19[19], v48);
  ((void (*)(char *, uint64_t, uint64_t))v80)(&v17[v19[20]], v18 + v19[20], v48);
  v81 = v19[21];
  v82 = &v17[v81];
  v83 = (const void *)(v18 + v81);
  v84 = type metadata accessor for DetailChartDataElement(0);
  v85 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v82, 1, v84);
  v86 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v83, 1, v84);
  if (v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v82, v83, v84);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v82, 0, 1, v84);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  v87 = *(_QWORD *)(v84 - 8);
  if (v86)
  {
    (*(void (**)(char *, uint64_t))(v87 + 8))(v82, v84);
LABEL_26:
    v88 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(char *, const void *, uint64_t))(v87 + 24))(v82, v83, v84);
LABEL_27:
  v89 = v224;
  *(_QWORD *)&v17[v19[22]] = *(_QWORD *)(v18 + v19[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v90 = v19[23];
  v91 = &v17[v90];
  v92 = v18 + v90;
  v93 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 24))(v91, v92, v93);
  *(_QWORD *)&v17[v19[24]] = *(_QWORD *)(v18 + v19[24]);
  *(_QWORD *)&v17[v19[25]] = *(_QWORD *)(v18 + v19[25]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v94 = v19[26];
  v95 = &v17[v94];
  v96 = v18 + v94;
  v97 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 24))(v95, v96, v97);
  v98 = v19[27];
  v99 = &v17[v98];
  v100 = v18 + v98;
  v101 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 24))(v99, v100, v101);
  v102 = v19[28];
  v103 = &v17[v102];
  v104 = (_QWORD *)(v18 + v102);
  *(_QWORD *)v103 = *v104;
  *((_QWORD *)v103 + 1) = v104[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v105 = v19[29];
  v106 = &v17[v105];
  v107 = (_QWORD *)(v18 + v105);
  *(_QWORD *)v106 = *v107;
  *((_QWORD *)v106 + 1) = v107[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v108 = v19[30];
  v109 = &v17[v108];
  v110 = (_QWORD *)(v18 + v108);
  *(_QWORD *)v109 = *v110;
  *((_QWORD *)v109 + 1) = v110[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v111 = v19[31];
  v112 = &v17[v111];
  v113 = (_QWORD *)(v18 + v111);
  *(_QWORD *)v112 = *v113;
  *((_QWORD *)v112 + 1) = v113[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v114 = v19[32];
  v115 = &v17[v114];
  v116 = (_QWORD *)(v18 + v114);
  *(_QWORD *)v115 = *v116;
  *((_QWORD *)v115 + 1) = v116[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v117 = v19[33];
  v118 = &v17[v117];
  v119 = (_QWORD *)(v18 + v117);
  v120 = v119[1];
  *(_QWORD *)v118 = *v119;
  *((_QWORD *)v118 + 1) = v120;
  swift_retain();
  swift_release();
  v121 = *(int *)(v224 + 24);
  v122 = (_QWORD *)(v74 + v121);
  v123 = (_QWORD *)(v68 + v121);
  v124 = (int *)type metadata accessor for LollipopViewModel(0);
  LODWORD(v99) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v122, 1, (uint64_t)v124);
  v125 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v123, 1, (uint64_t)v124);
  if ((_DWORD)v99)
  {
    if (!v125)
    {
      v218 = v68;
      *v122 = *v123;
      v122[1] = v123[1];
      v126 = v124[5];
      v127 = (char *)v122 + v126;
      v128 = (char *)v123 + v126;
      v129 = type metadata accessor for DetailChartDataPoint(0);
      v130 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v129 - 8) + 16);
      v131 = swift_bridgeObjectRetain();
      v130(v127, v128, v129, v131);
      *(_QWORD *)((char *)v122 + v124[6]) = *(_QWORD *)((char *)v123 + v124[6]);
      v132 = v124[7];
      v133 = (char *)v122 + v132;
      v134 = (char *)v123 + v132;
      v135 = type metadata accessor for LollipopDetailViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v134);
      v137 = v221;
      v217 = EnumCaseMultiPayload;
      if (EnumCaseMultiPayload == 2)
      {
        *(_QWORD *)v133 = *(_QWORD *)v134;
        *((_QWORD *)v133 + 1) = *((_QWORD *)v134 + 1);
        v216 = v135;
        v152 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
        v153 = v152[5];
        v215 = &v133[v153];
        v154 = &v134[v153];
        v155 = type metadata accessor for AttributedString(0);
        v156 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v155 - 8) + 16);
        v157 = swift_bridgeObjectRetain();
        v156(v215, v154, v155, v157);
        v158 = v152[6];
        v159 = &v133[v158];
        v160 = &v134[v158];
        *(_QWORD *)v159 = *(_QWORD *)v160;
        *((_QWORD *)v159 + 1) = *((_QWORD *)v160 + 1);
        v161 = v152[7];
        v162 = &v133[v161];
        v163 = &v134[v161];
        *(_QWORD *)v162 = *(_QWORD *)v163;
        *((_QWORD *)v162 + 1) = *((_QWORD *)v163 + 1);
        v164 = v152[8];
        v165 = &v133[v164];
        v166 = &v134[v164];
        *(_QWORD *)v165 = *(_QWORD *)v166;
        *((_QWORD *)v165 + 1) = *((_QWORD *)v166 + 1);
        v167 = v152[9];
        v168 = &v133[v167];
        v169 = &v134[v167];
        *(_QWORD *)v168 = *(_QWORD *)v169;
        *((_QWORD *)v168 + 1) = *((_QWORD *)v169 + 1);
        v170 = v152[10];
        v171 = &v133[v170];
        v172 = &v134[v170];
        *(_QWORD *)v171 = *(_QWORD *)v172;
        *((_QWORD *)v171 + 1) = *((_QWORD *)v172 + 1);
        v173 = v152[11];
        v135 = v216;
        v133[v173] = v134[v173];
        swift_bridgeObjectRetain();
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          *(_QWORD *)v133 = *(_QWORD *)v134;
          *((_QWORD *)v133 + 1) = *((_QWORD *)v134 + 1);
          *((_QWORD *)v133 + 2) = *((_QWORD *)v134 + 2);
          *((_QWORD *)v133 + 3) = *((_QWORD *)v134 + 3);
          *((_QWORD *)v133 + 4) = *((_QWORD *)v134 + 4);
          *((_QWORD *)v133 + 5) = *((_QWORD *)v134 + 5);
          goto LABEL_43;
        }
        *(_QWORD *)v133 = *(_QWORD *)v134;
        *((_QWORD *)v133 + 1) = *((_QWORD *)v134 + 1);
        *((_QWORD *)v133 + 2) = *((_QWORD *)v134 + 2);
        *((_QWORD *)v133 + 3) = *((_QWORD *)v134 + 3);
        *((_QWORD *)v133 + 4) = *((_QWORD *)v134 + 4);
        *((_QWORD *)v133 + 5) = *((_QWORD *)v134 + 5);
        *((_QWORD *)v133 + 6) = *((_QWORD *)v134 + 6);
        *((_QWORD *)v133 + 7) = *((_QWORD *)v134 + 7);
        v133[64] = v134[64];
        v133[65] = v134[65];
      }
      swift_bridgeObjectRetain();
LABEL_43:
      v139 = v222;
      v68 = v218;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload(v133, v135, v217);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v122, 0, 1, (uint64_t)v124);
      v74 = v223;
      v89 = v224;
      goto LABEL_50;
    }
LABEL_34:
    v138 = sub_1000BA294(&qword_100BE19B8);
    memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
    v137 = v221;
    v139 = v222;
    goto LABEL_50;
  }
  if (v125)
  {
    sub_1000215BC((uint64_t)v122, type metadata accessor for LollipopViewModel);
    goto LABEL_34;
  }
  *v122 = *v123;
  v122[1] = v123[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v140 = v124[5];
  v141 = (char *)v122 + v140;
  v142 = (char *)v123 + v140;
  v143 = type metadata accessor for DetailChartDataPoint(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 24))(v141, v142, v143);
  *(_QWORD *)((char *)v122 + v124[6]) = *(_QWORD *)((char *)v123 + v124[6]);
  v137 = v221;
  v139 = v222;
  if (v221 != v222)
  {
    v144 = v124[7];
    v145 = (uint64_t)v122 + v144;
    v146 = (char *)v123 + v144;
    sub_1000215BC(v145, type metadata accessor for LollipopDetailViewModel);
    v147 = type metadata accessor for LollipopDetailViewModel(0);
    v148 = swift_getEnumCaseMultiPayload(v146);
    if (v148 == 2)
    {
      *(_QWORD *)v145 = *(_QWORD *)v146;
      *(_QWORD *)(v145 + 8) = *((_QWORD *)v146 + 1);
      v176 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v177 = v176[5];
      v178 = v145 + v177;
      v179 = &v146[v177];
      v219 = v68;
      v180 = type metadata accessor for AttributedString(0);
      v181 = *(void (**)(uint64_t, char *, uint64_t, __n128))(*(_QWORD *)(v180 - 8) + 16);
      v182 = swift_bridgeObjectRetain();
      v181(v178, v179, v180, v182);
      v139 = v222;
      v183 = v176[6];
      v184 = (_QWORD *)(v145 + v183);
      v185 = &v146[v183];
      *v184 = *(_QWORD *)v185;
      v184[1] = *((_QWORD *)v185 + 1);
      v186 = v176[7];
      v187 = (_QWORD *)(v145 + v186);
      v188 = &v146[v186];
      *v187 = *(_QWORD *)v188;
      v187[1] = *((_QWORD *)v188 + 1);
      v189 = v176[8];
      v190 = (_QWORD *)(v145 + v189);
      v191 = &v146[v189];
      *v190 = *(_QWORD *)v191;
      v190[1] = *((_QWORD *)v191 + 1);
      v192 = v176[9];
      v193 = (_QWORD *)(v145 + v192);
      v194 = &v146[v192];
      *v193 = *(_QWORD *)v194;
      v193[1] = *((_QWORD *)v194 + 1);
      v195 = v176[10];
      v196 = (_QWORD *)(v145 + v195);
      v197 = &v146[v195];
      *v196 = *(_QWORD *)v197;
      v196[1] = *((_QWORD *)v197 + 1);
      *(_BYTE *)(v145 + v176[11]) = v146[v176[11]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v89 = v224;
      swift_bridgeObjectRetain();
      v74 = v223;
      swift_bridgeObjectRetain();
      v68 = v219;
      swift_bridgeObjectRetain();
      v149 = v145;
      v150 = v147;
      v151 = 2;
    }
    else
    {
      *(_QWORD *)v145 = *(_QWORD *)v146;
      *(_QWORD *)(v145 + 8) = *((_QWORD *)v146 + 1);
      *(_QWORD *)(v145 + 16) = *((_QWORD *)v146 + 2);
      *(_QWORD *)(v145 + 24) = *((_QWORD *)v146 + 3);
      *(_QWORD *)(v145 + 32) = *((_QWORD *)v146 + 4);
      *(_QWORD *)(v145 + 40) = *((_QWORD *)v146 + 5);
      if (v148 == 1)
      {
        *(_QWORD *)(v145 + 48) = *((_QWORD *)v146 + 6);
        *(_QWORD *)(v145 + 56) = *((_QWORD *)v146 + 7);
        *(_BYTE *)(v145 + 64) = v146[64];
        *(_BYTE *)(v145 + 65) = v146[65];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v89 = v224;
        swift_bridgeObjectRetain();
        v149 = v145;
        v150 = v147;
        v151 = 1;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v149 = v145;
        v150 = v147;
        v151 = 0;
      }
    }
    swift_storeEnumTagMultiPayload(v149, v150, v151);
  }
LABEL_50:
  v198 = *(int *)(v89 + 28);
  v199 = (_QWORD *)(v74 + v198);
  v200 = (_QWORD *)(v68 + v198);
  v201 = type metadata accessor for ConditionDetailChartFooterViewModel(0);
  v202 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v199, 1, v201);
  v203 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v200, 1, v201);
  if (v202)
  {
    if (!v203)
    {
      v204 = v220;
      if (swift_getEnumCaseMultiPayload(v200) == 1)
      {
        v205 = type metadata accessor for TemperatureChartKind(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v205 - 8) + 16))(v199, v200, v205);
        v206 = v199;
        v207 = v201;
        v208 = 1;
      }
      else
      {
        *v199 = *v200;
        v199[1] = v200[1];
        swift_bridgeObjectRetain();
        v206 = v199;
        v207 = v201;
        v208 = 0;
      }
      swift_storeEnumTagMultiPayload(v206, v207, v208);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v199, 0, 1, v201);
      goto LABEL_64;
    }
LABEL_56:
    v209 = sub_1000BA294(&qword_100BE1968);
    memcpy(v199, v200, *(_QWORD *)(*(_QWORD *)(v209 - 8) + 64));
    v204 = v220;
    goto LABEL_64;
  }
  if (v203)
  {
    sub_1000215BC((uint64_t)v199, type metadata accessor for ConditionDetailChartFooterViewModel);
    goto LABEL_56;
  }
  v204 = v220;
  if (v137 != v139)
  {
    sub_1000215BC((uint64_t)v199, type metadata accessor for ConditionDetailChartFooterViewModel);
    if (swift_getEnumCaseMultiPayload(v200) == 1)
    {
      v210 = type metadata accessor for TemperatureChartKind(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v210 - 8) + 16))(v199, v200, v210);
      v211 = v199;
      v212 = v201;
      v213 = 1;
    }
    else
    {
      *v199 = *v200;
      v199[1] = v200[1];
      swift_bridgeObjectRetain();
      v211 = v199;
      v212 = v201;
      v213 = 0;
    }
    swift_storeEnumTagMultiPayload(v211, v212, v213);
  }
LABEL_64:
  *(_QWORD *)(v137 + v204[8]) = *(_QWORD *)(v139 + v204[8]);
  *(_QWORD *)(v137 + v204[9]) = *(_QWORD *)(v139 + v204[9]);
  *(_QWORD *)(v137 + v204[10]) = *(_QWORD *)(v139 + v204[10]);
  return v137;
}

uint64_t sub_1005AE5CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  void *v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  _OWORD *v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  _OWORD *v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v6 = type metadata accessor for DetailChartLollipopPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ChartProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  v102 = a3;
  v103 = a2;
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  *(_BYTE *)(v12 + *(int *)(v15 + 20)) = *(_BYTE *)(v13 + *(int *)(v15 + 20));
  *(_BYTE *)(v12 + *(int *)(v15 + 24)) = *(_BYTE *)(v13 + *(int *)(v15 + 24));
  v104 = v13;
  v105 = type metadata accessor for DetailChartViewModel(0);
  v16 = *(int *)(v105 + 20);
  v17 = v12 + v16;
  v18 = v13 + v16;
  *(_OWORD *)(v12 + v16) = *(_OWORD *)(v13 + v16);
  v19 = (int *)type metadata accessor for ChartViewModel(0);
  v20 = v19[5];
  v21 = v17 + v20;
  v22 = v18 + v20;
  v23 = type metadata accessor for ChartKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  *(_QWORD *)(v17 + v19[6]) = *(_QWORD *)(v18 + v19[6]);
  v24 = v19[7];
  v25 = v17 + v24;
  v26 = v18 + v24;
  v27 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  *(_QWORD *)(v17 + v19[8]) = *(_QWORD *)(v18 + v19[8]);
  *(_QWORD *)(v17 + v19[9]) = *(_QWORD *)(v18 + v19[9]);
  *(_OWORD *)(v17 + v19[10]) = *(_OWORD *)(v18 + v19[10]);
  v28 = v19[11];
  v29 = (_OWORD *)(v17 + v28);
  v30 = (_OWORD *)(v18 + v28);
  *v29 = *v30;
  *(_OWORD *)((char *)v29 + 9) = *(_OWORD *)((char *)v30 + 9);
  v31 = v19[12];
  v32 = v17 + v31;
  v33 = v18 + v31;
  *(_QWORD *)(v17 + v31) = *(_QWORD *)(v18 + v31);
  v34 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v35 = (void *)(v32 + v34);
  v36 = (const void *)(v33 + v34);
  v37 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v37))
  {
    v38 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v37);
  }
  v39 = v19[13];
  v40 = v17 + v39;
  v41 = v18 + v39;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  v42 = v19[14];
  v43 = (_QWORD *)(v17 + v42);
  v44 = (_QWORD *)(v18 + v42);
  v45 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v44, 1, v45))
  {
    v46 = type metadata accessor for ChartViewModel.Background(0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    *v43 = *v44;
    v47 = *(int *)(v45 + 48);
    v48 = (char *)v43 + v47;
    v49 = (char *)v44 + v47;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v37))
    {
      v50 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v48, v49, v37);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v37);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v43, 0, 1, v45);
  }
  *(_QWORD *)(v17 + v19[15]) = *(_QWORD *)(v18 + v19[15]);
  v51 = v19[16];
  v52 = v17 + v51;
  v53 = v18 + v51;
  v54 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
  *(_QWORD *)(v17 + v19[17]) = *(_QWORD *)(v18 + v19[17]);
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
  v55(v17 + v19[18], v18 + v19[18], v37);
  v55(v17 + v19[19], v18 + v19[19], v37);
  v55(v17 + v19[20], v18 + v19[20], v37);
  v56 = v19[21];
  v57 = (void *)(v17 + v56);
  v58 = (const void *)(v18 + v56);
  v59 = type metadata accessor for DetailChartDataElement(0);
  v60 = v105;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v58, 1, v59))
  {
    v61 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v57, v58, v59);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v57, 0, 1, v59);
  }
  *(_QWORD *)(v17 + v19[22]) = *(_QWORD *)(v18 + v19[22]);
  v62 = v19[23];
  v63 = v17 + v62;
  v64 = v18 + v62;
  v65 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v63, v64, v65);
  *(_QWORD *)(v17 + v19[24]) = *(_QWORD *)(v18 + v19[24]);
  *(_QWORD *)(v17 + v19[25]) = *(_QWORD *)(v18 + v19[25]);
  v66 = v19[26];
  v67 = v17 + v66;
  v68 = v18 + v66;
  v69 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
  v70 = v19[27];
  v71 = v17 + v70;
  v72 = v18 + v70;
  v73 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
  *(_OWORD *)(v17 + v19[28]) = *(_OWORD *)(v18 + v19[28]);
  *(_OWORD *)(v17 + v19[29]) = *(_OWORD *)(v18 + v19[29]);
  *(_OWORD *)(v17 + v19[30]) = *(_OWORD *)(v18 + v19[30]);
  *(_OWORD *)(v17 + v19[31]) = *(_OWORD *)(v18 + v19[31]);
  *(_OWORD *)(v17 + v19[32]) = *(_OWORD *)(v18 + v19[32]);
  *(_OWORD *)(v17 + v19[33]) = *(_OWORD *)(v18 + v19[33]);
  v74 = *(int *)(v105 + 24);
  v75 = (_OWORD *)(v12 + v74);
  v76 = (_OWORD *)(v104 + v74);
  v77 = (int *)type metadata accessor for LollipopViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v76, 1, (uint64_t)v77))
  {
    v78 = sub_1000BA294(&qword_100BE19B8);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    v80 = v102;
    v79 = v103;
  }
  else
  {
    *v75 = *v76;
    v81 = v77[5];
    v82 = (char *)v75 + v81;
    v83 = (char *)v76 + v81;
    v84 = type metadata accessor for DetailChartDataPoint(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(v82, v83, v84);
    *(_QWORD *)((char *)v75 + v77[6]) = *(_QWORD *)((char *)v76 + v77[6]);
    v85 = v77[7];
    v86 = (_OWORD *)((char *)v75 + v85);
    v87 = (_OWORD *)((char *)v76 + v85);
    v88 = type metadata accessor for LollipopDetailViewModel(0);
    if (swift_getEnumCaseMultiPayload(v87) == 2)
    {
      *v86 = *v87;
      v89 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v90 = v89[5];
      v91 = (char *)v86 + v90;
      v101 = (char *)v87 + v90;
      v92 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32))(v91, v101, v92);
      *(_OWORD *)((char *)v86 + v89[6]) = *(_OWORD *)((char *)v87 + v89[6]);
      *(_OWORD *)((char *)v86 + v89[7]) = *(_OWORD *)((char *)v87 + v89[7]);
      *(_OWORD *)((char *)v86 + v89[8]) = *(_OWORD *)((char *)v87 + v89[8]);
      *(_OWORD *)((char *)v86 + v89[9]) = *(_OWORD *)((char *)v87 + v89[9]);
      *(_OWORD *)((char *)v86 + v89[10]) = *(_OWORD *)((char *)v87 + v89[10]);
      *((_BYTE *)v86 + v89[11]) = *((_BYTE *)v87 + v89[11]);
      swift_storeEnumTagMultiPayload(v86, v88, 2);
    }
    else
    {
      memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    }
    v80 = v102;
    v79 = v103;
    v60 = v105;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v75, 0, 1, (uint64_t)v77);
  }
  v93 = *(int *)(v60 + 28);
  v94 = (void *)(v12 + v93);
  v95 = (const void *)(v104 + v93);
  v96 = type metadata accessor for ConditionDetailChartFooterViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v95, 1, v96))
  {
    v97 = sub_1000BA294(&qword_100BE1968);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v95) == 1)
    {
      v98 = type metadata accessor for TemperatureChartKind(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v98 - 8) + 32))(v94, v95, v98);
      swift_storeEnumTagMultiPayload(v94, v96, 1);
    }
    else
    {
      memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v94, 0, 1, v96);
  }
  v99 = v80[9];
  *(_QWORD *)(a1 + v80[8]) = *(_QWORD *)(v79 + v80[8]);
  *(_QWORD *)(a1 + v99) = *(_QWORD *)(v79 + v99);
  *(_QWORD *)(a1 + v80[10]) = *(_QWORD *)(v79 + v80[10]);
  return a1;
}

uint64_t sub_1005AED90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char v33;
  void *v34;
  void *v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  __n128 v71;
  void (*v72)(char *, char *, uint64_t, __n128);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  int *v122;
  int v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  _OWORD *v129;
  _OWORD *v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD *v147;
  _OWORD *v148;
  uint64_t v149;
  int *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  const void *v158;
  uint64_t v159;
  int v160;
  int v161;
  int *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v168;
  int *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v6 = type metadata accessor for DetailChartLollipopPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ChartProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  v169 = a3;
  v170 = a2;
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for ConditionDetailChartHeaderStringModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = type metadata accessor for ConditionDetailChartHeaderViewModel(0);
  *(_BYTE *)(v12 + *(int *)(v15 + 20)) = *(_BYTE *)(v13 + *(int *)(v15 + 20));
  *(_BYTE *)(v12 + *(int *)(v15 + 24)) = *(_BYTE *)(v13 + *(int *)(v15 + 24));
  v171 = type metadata accessor for DetailChartViewModel(0);
  v172 = v13;
  v16 = *(int *)(v171 + 20);
  v17 = (char *)(v12 + v16);
  v18 = (char *)(v13 + v16);
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  v20 = (int *)type metadata accessor for ChartViewModel(0);
  v21 = v20[5];
  v22 = &v17[v21];
  v23 = &v18[v21];
  v24 = type metadata accessor for ChartKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
  *(_QWORD *)&v17[v20[6]] = *(_QWORD *)&v18[v20[6]];
  swift_bridgeObjectRelease();
  v25 = v20[7];
  v26 = &v17[v25];
  v27 = &v18[v25];
  v28 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
  *(_QWORD *)&v17[v20[8]] = *(_QWORD *)&v18[v20[8]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v17[v20[9]] = *(_QWORD *)&v18[v20[9]];
  swift_bridgeObjectRelease();
  *(_OWORD *)&v17[v20[10]] = *(_OWORD *)&v18[v20[10]];
  v29 = v20[11];
  v30 = &v17[v29];
  v31 = &v18[v29];
  v32 = *((_QWORD *)v31 + 2);
  v33 = v31[24];
  v34 = *(void **)v30;
  v35 = (void *)*((_QWORD *)v30 + 1);
  v36 = *((_QWORD *)v30 + 2);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *((_QWORD *)v30 + 2) = v32;
  v37 = v30[24];
  v30[24] = v33;
  sub_1001A44FC(v34, v35, v36, v37);
  v38 = v20[12];
  v39 = &v17[v38];
  v40 = &v18[v38];
  *(_QWORD *)&v17[v38] = *(_QWORD *)&v18[v38];
  v41 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v42 = &v39[v41];
  v43 = &v40[v41];
  v44 = type metadata accessor for Date(0);
  LODWORD(v39) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v44);
  v45 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44);
  if ((_DWORD)v39)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v44);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v46 = *(_QWORD *)(v44 - 8);
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v44);
LABEL_6:
    v47 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 40))(v42, v43, v44);
LABEL_7:
  v48 = v20[13];
  v49 = &v17[v48];
  v50 = &v18[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v49[8] = v50[8];
  v51 = v20[14];
  v52 = &v17[v51];
  v53 = &v18[v51];
  v54 = sub_1000BA294(&qword_100BCB988);
  v55 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v52, 1, v54);
  v56 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v54);
  if (v55)
  {
    if (!v56)
    {
      *(_QWORD *)v52 = *(_QWORD *)v53;
      v57 = *(int *)(v54 + 48);
      v58 = &v52[v57];
      v59 = &v53[v57];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v44))
      {
        v60 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v58, v59, v44);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v44);
      }
      v65 = (uint64_t)v52;
      v66 = v54;
      goto LABEL_21;
    }
    goto LABEL_13;
  }
  if (v56)
  {
    sub_100021A14((uint64_t)v52, &qword_100BCB988);
LABEL_13:
    v61 = type metadata accessor for ChartViewModel.Background(0);
LABEL_14:
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_22;
  }
  *(_QWORD *)v52 = *(_QWORD *)v53;
  swift_release();
  v62 = *(int *)(v54 + 48);
  v52 += v62;
  v53 += v62;
  v63 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v52, 1, v44);
  v64 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v44);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v52, v53, v44);
      v65 = (uint64_t)v52;
      v66 = v44;
LABEL_21:
      _s7Weather24LocationCompositionStateOwst_0(v65, 0, 1, v66);
      goto LABEL_22;
    }
    goto LABEL_56;
  }
  v168 = *(_QWORD *)(v44 - 8);
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v168 + 8))(v52, v44);
LABEL_56:
    v61 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v168 + 40))(v52, v53, v44);
LABEL_22:
  *(_QWORD *)&v17[v20[15]] = *(_QWORD *)&v18[v20[15]];
  v67 = v20[16];
  v68 = &v17[v67];
  v69 = &v18[v67];
  v70 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 40))(v68, v69, v70);
  *(_QWORD *)&v17[v20[17]] = *(_QWORD *)&v18[v20[17]];
  v71 = swift_bridgeObjectRelease();
  v72 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v44 - 8) + 40);
  v72(&v17[v20[18]], &v18[v20[18]], v44, v71);
  ((void (*)(char *, char *, uint64_t))v72)(&v17[v20[19]], &v18[v20[19]], v44);
  ((void (*)(char *, char *, uint64_t))v72)(&v17[v20[20]], &v18[v20[20]], v44);
  v73 = v20[21];
  v74 = &v17[v73];
  v75 = &v18[v73];
  v76 = type metadata accessor for DetailChartDataElement(0);
  LODWORD(v72) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v74, 1, v76);
  v77 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v75, 1, v76);
  if ((_DWORD)v72)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(v74, v75, v76);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v74, 0, 1, v76);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  v78 = *(_QWORD *)(v76 - 8);
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v78 + 8))(v74, v76);
LABEL_27:
    v79 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v78 + 40))(v74, v75, v76);
LABEL_28:
  *(_QWORD *)&v17[v20[22]] = *(_QWORD *)&v18[v20[22]];
  swift_bridgeObjectRelease();
  v80 = v20[23];
  v81 = &v17[v80];
  v82 = &v18[v80];
  v83 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 40))(v81, v82, v83);
  *(_QWORD *)&v17[v20[24]] = *(_QWORD *)&v18[v20[24]];
  *(_QWORD *)&v17[v20[25]] = *(_QWORD *)&v18[v20[25]];
  swift_bridgeObjectRelease();
  v84 = v20[26];
  v85 = &v17[v84];
  v86 = &v18[v84];
  v87 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 40))(v85, v86, v87);
  v88 = v20[27];
  v89 = &v17[v88];
  v90 = &v18[v88];
  v91 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 40))(v89, v90, v91);
  v92 = v20[28];
  v93 = &v17[v92];
  v94 = (uint64_t *)&v18[v92];
  v96 = *v94;
  v95 = v94[1];
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease();
  v97 = v20[29];
  v98 = &v17[v97];
  v99 = (uint64_t *)&v18[v97];
  v101 = *v99;
  v100 = v99[1];
  *(_QWORD *)v98 = v101;
  *((_QWORD *)v98 + 1) = v100;
  swift_bridgeObjectRelease();
  v102 = v20[30];
  v103 = &v17[v102];
  v104 = (uint64_t *)&v18[v102];
  v106 = *v104;
  v105 = v104[1];
  *(_QWORD *)v103 = v106;
  *((_QWORD *)v103 + 1) = v105;
  swift_bridgeObjectRelease();
  v107 = v20[31];
  v108 = &v17[v107];
  v109 = (uint64_t *)&v18[v107];
  v111 = *v109;
  v110 = v109[1];
  *(_QWORD *)v108 = v111;
  *((_QWORD *)v108 + 1) = v110;
  swift_bridgeObjectRelease();
  v112 = v20[32];
  v113 = &v17[v112];
  v114 = (uint64_t *)&v18[v112];
  v116 = *v114;
  v115 = v114[1];
  *(_QWORD *)v113 = v116;
  *((_QWORD *)v113 + 1) = v115;
  swift_bridgeObjectRelease();
  *(_OWORD *)&v17[v20[33]] = *(_OWORD *)&v18[v20[33]];
  swift_release();
  v118 = v171;
  v117 = v172;
  v119 = *(int *)(v171 + 24);
  v120 = (_QWORD *)(v12 + v119);
  v121 = (_QWORD *)(v172 + v119);
  v122 = (int *)type metadata accessor for LollipopViewModel(0);
  LODWORD(v89) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v120, 1, (uint64_t)v122);
  v123 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v121, 1, (uint64_t)v122);
  if ((_DWORD)v89)
  {
    if (!v123)
    {
      *(_OWORD *)v120 = *(_OWORD *)v121;
      v124 = v122[5];
      v125 = (char *)v120 + v124;
      v126 = (char *)v121 + v124;
      v127 = type metadata accessor for DetailChartDataPoint(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 32))(v125, v126, v127);
      *(_QWORD *)((char *)v120 + v122[6]) = *(_QWORD *)((char *)v121 + v122[6]);
      v128 = v122[7];
      v129 = (_OWORD *)((char *)v120 + v128);
      v130 = (_OWORD *)((char *)v121 + v128);
      v131 = type metadata accessor for LollipopDetailViewModel(0);
      if (swift_getEnumCaseMultiPayload(v130) == 2)
      {
        *v129 = *v130;
        v132 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
        v133 = v132[5];
        v134 = (char *)v129 + v133;
        v135 = (char *)v130 + v133;
        v136 = type metadata accessor for AttributedString(0);
        v137 = v134;
        v138 = v135;
        v118 = v171;
        v117 = v172;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 32))(v137, v138, v136);
        *(_OWORD *)((char *)v129 + v132[6]) = *(_OWORD *)((char *)v130 + v132[6]);
        *(_OWORD *)((char *)v129 + v132[7]) = *(_OWORD *)((char *)v130 + v132[7]);
        *(_OWORD *)((char *)v129 + v132[8]) = *(_OWORD *)((char *)v130 + v132[8]);
        *(_OWORD *)((char *)v129 + v132[9]) = *(_OWORD *)((char *)v130 + v132[9]);
        *(_OWORD *)((char *)v129 + v132[10]) = *(_OWORD *)((char *)v130 + v132[10]);
        *((_BYTE *)v129 + v132[11]) = *((_BYTE *)v130 + v132[11]);
        swift_storeEnumTagMultiPayload(v129, v131, 2);
      }
      else
      {
        memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
      }
      v140 = v170;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v120, 0, 1, (uint64_t)v122);
      goto LABEL_41;
    }
LABEL_34:
    v139 = sub_1000BA294(&qword_100BE19B8);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
    v140 = v170;
    goto LABEL_41;
  }
  if (v123)
  {
    sub_1000215BC((uint64_t)v120, type metadata accessor for LollipopViewModel);
    goto LABEL_34;
  }
  v141 = v121[1];
  *v120 = *v121;
  v120[1] = v141;
  swift_bridgeObjectRelease();
  v142 = v122[5];
  v143 = (char *)v120 + v142;
  v144 = (char *)v121 + v142;
  v145 = type metadata accessor for DetailChartDataPoint(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 40))(v143, v144, v145);
  *(_QWORD *)((char *)v120 + v122[6]) = *(_QWORD *)((char *)v121 + v122[6]);
  v140 = v170;
  if (a1 != v170)
  {
    v146 = v122[7];
    v147 = (_OWORD *)((char *)v120 + v146);
    v148 = (_OWORD *)((char *)v121 + v146);
    sub_1000215BC((uint64_t)v147, type metadata accessor for LollipopDetailViewModel);
    v149 = type metadata accessor for LollipopDetailViewModel(0);
    if (swift_getEnumCaseMultiPayload(v148) == 2)
    {
      *v147 = *v148;
      v150 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v151 = v150[5];
      v152 = (char *)v147 + v151;
      v153 = (char *)v148 + v151;
      v154 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v154 - 8) + 32))(v152, v153, v154);
      *(_OWORD *)((char *)v147 + v150[6]) = *(_OWORD *)((char *)v148 + v150[6]);
      *(_OWORD *)((char *)v147 + v150[7]) = *(_OWORD *)((char *)v148 + v150[7]);
      *(_OWORD *)((char *)v147 + v150[8]) = *(_OWORD *)((char *)v148 + v150[8]);
      *(_OWORD *)((char *)v147 + v150[9]) = *(_OWORD *)((char *)v148 + v150[9]);
      *(_OWORD *)((char *)v147 + v150[10]) = *(_OWORD *)((char *)v148 + v150[10]);
      v155 = v150[11];
      v140 = v170;
      *((_BYTE *)v147 + v155) = *((_BYTE *)v148 + v155);
      swift_storeEnumTagMultiPayload(v147, v149, 2);
    }
    else
    {
      memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    }
  }
LABEL_41:
  v156 = *(int *)(v118 + 28);
  v157 = (void *)(v12 + v156);
  v158 = (const void *)(v117 + v156);
  v159 = type metadata accessor for ConditionDetailChartFooterViewModel(0);
  v160 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v157, 1, v159);
  v161 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v158, 1, v159);
  if (v160)
  {
    if (!v161)
    {
      v162 = v169;
      if (swift_getEnumCaseMultiPayload(v158) == 1)
      {
        v163 = type metadata accessor for TemperatureChartKind(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v163 - 8) + 32))(v157, v158, v163);
        swift_storeEnumTagMultiPayload(v157, v159, 1);
      }
      else
      {
        memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v157, 0, 1, v159);
      goto LABEL_53;
    }
LABEL_47:
    v164 = sub_1000BA294(&qword_100BE1968);
    memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
    v162 = v169;
    goto LABEL_53;
  }
  if (v161)
  {
    sub_1000215BC((uint64_t)v157, type metadata accessor for ConditionDetailChartFooterViewModel);
    goto LABEL_47;
  }
  v162 = v169;
  if (a1 != v140)
  {
    sub_1000215BC((uint64_t)v157, type metadata accessor for ConditionDetailChartFooterViewModel);
    if (swift_getEnumCaseMultiPayload(v158) == 1)
    {
      v165 = type metadata accessor for TemperatureChartKind(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v165 - 8) + 32))(v157, v158, v165);
      swift_storeEnumTagMultiPayload(v157, v159, 1);
    }
    else
    {
      memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    }
  }
LABEL_53:
  v166 = v162[9];
  *(_QWORD *)(a1 + v162[8]) = *(_QWORD *)(v140 + v162[8]);
  *(_QWORD *)(a1 + v166) = *(_QWORD *)(v140 + v166);
  *(_QWORD *)(a1 + v162[10]) = *(_QWORD *)(v140 + v162[10]);
  return a1;
}

uint64_t sub_1005AF98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005AF998);
}

uint64_t sub_1005AF998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v3 = sub_1000C2268();
  type metadata accessor for DetailChartLollipopPoint(v3);
  sub_100088FF0();
  if (v7)
  {
    v5 = v4;
    v6 = v1;
  }
  else
  {
    sub_10009D6D0();
    sub_100088FF0();
    if (v7)
    {
      v5 = v8;
      v9 = *(int *)(v2 + 20);
    }
    else
    {
      v5 = sub_1000E7208();
      v9 = *(int *)(v2 + 28);
    }
    v6 = v1 + v9;
  }
  return sub_1000B250C(v6, v0, v5);
}

uint64_t sub_1005AF9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005AFA04);
}

uint64_t sub_1005AFA04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v3 = sub_1000CCD14();
  type metadata accessor for DetailChartLollipopPoint(v3);
  sub_10009D2E8();
  if (v7)
  {
    v5 = v4;
    v6 = v1;
  }
  else
  {
    sub_10009D6D0();
    sub_10009D2E8();
    if (v7)
    {
      v5 = v8;
      v9 = *(int *)(v2 + 20);
    }
    else
    {
      v5 = sub_1000E7208();
      v9 = *(int *)(v2 + 28);
    }
    v6 = v1 + v9;
  }
  return sub_1000987C4(v6, v0, v0, v5);
}

uint64_t sub_1005AFA68(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  result = type metadata accessor for DetailChartLollipopPoint(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ChartProxy(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
      result = type metadata accessor for DetailChartViewModel(319);
      if (v5 <= 0x3F)
      {
        v6[3] = *(_QWORD *)(result - 8) + 64;
        v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
        v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
        v6[6] = (char *)&value witness table for Builtin.Int64 + 64;
        swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

_QWORD *sub_1005AFB18(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DetailChartDataElement(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[7];
    *(_QWORD *)((char *)v4 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *((_BYTE *)v4 + v11) = *((_BYTE *)a2 + v11);
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }
  return v4;
}

uint64_t sub_1005AFBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for DetailChartDataElement(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *sub_1005AFC08(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DetailChartDataElement(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_1005AFC94(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DetailChartDataElement(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_1005AFD24(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DetailChartDataElement(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_1005AFDB0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DetailChartDataElement(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t sub_1005AFE3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005AFE48);
}

void sub_1005AFE48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = sub_1000C2268();
  type metadata accessor for DetailChartDataElement(v3);
  sub_100088FF0();
  if (v5)
    sub_1000B250C(v1 + *(int *)(v2 + 20), v0, v4);
  else
    sub_100079F70();
}

uint64_t sub_1005AFEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005AFEBC);
}

void sub_1005AFEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = sub_1000CCD14();
  type metadata accessor for DetailChartDataElement(v3);
  sub_10009D2E8();
  if (v5)
  {
    sub_1000987C4(v1 + *(int *)(v2 + 20), v0, v0, v4);
  }
  else
  {
    *(_BYTE *)(v1 + *(int *)(v2 + 28)) = v0 + 1;
    sub_100079F70();
  }
}

uint64_t sub_1005AFF0C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for DetailChartDataElement(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_1009B10A0;
    v4[4] = &unk_1009B10A0;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DetailChart.MarkerView()
{
  return &type metadata for DetailChart.MarkerView;
}

unint64_t sub_1005AFFA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF2910;
  if (!qword_100BF2910)
  {
    v1 = sub_100075EB0(&qword_100BF2918);
    sub_10034AEE4((uint64_t)&unk_100BF2620);
    sub_10042BF7C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2910);
  }
  return result;
}

uint64_t sub_1005B0028(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB9D8C, 1);
}

uint64_t sub_1005B0038(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB9D64, 1);
}

uint64_t sub_1005B0048(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB9D3C, 1);
}

unint64_t sub_1005B0058()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF2980;
  if (!qword_100BF2980)
  {
    v1 = sub_100075EB0(&qword_100BF2988);
    sub_10034AEE4((uint64_t)&unk_100BF2990);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2980);
  }
  return result;
}

void sub_1005B00DC()
{
  sub_100397180((uint64_t)&unk_100BF29A0);
}

void sub_1005B0110()
{
  sub_100397180((uint64_t)&unk_100BF29A8);
}

unint64_t sub_1005B0134()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF29B0;
  if (!qword_100BF29B0)
  {
    v1 = sub_100075EB0(&qword_100BF2930);
    sub_1005B01B8();
    sub_10034AEE4((uint64_t)&qword_100BDFC50);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF29B0);
  }
  return result;
}

unint64_t sub_1005B01B8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100BF29B8;
  if (!qword_100BF29B8)
  {
    v1 = sub_100075EB0(&qword_100BF2928);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF29B8);
  }
  return result;
}

unint64_t sub_1005B024C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF29C0;
  if (!qword_100BF29C0)
  {
    v1 = sub_100075EB0(&qword_100BF29C8);
    sub_1005B02B0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BF29C0);
  }
  return result;
}

unint64_t sub_1005B02B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF29D0;
  if (!qword_100BF29D0)
  {
    v1 = sub_100075EB0(&qword_100BF2950);
    sub_10034AEE4((uint64_t)&unk_100BF29D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BF29D0);
  }
  return result;
}

void sub_1005B032C()
{
  sub_10034AEE4((uint64_t)&qword_100BDD198);
}

void sub_1005B035C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  sub_1000986AC();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_1000BA294(qword_100BC4E80);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009883C();
  v12 = v10 - v11;
  __chkstk_darwin(v13);
  sub_1000998F4();
  Measurement<>.converted(rounded:)(0);
  v14 = sub_1000CD88C();
  Measurement<>.converted(rounded:)(0);
  sub_1000EB03C();
  v15 = sub_1000BA294(&qword_100BC4E68);
  if (_s7Weather24LocationCompositionStateOwet_0(v12, 1, v15) == 1)
  {
    sub_100021A14(v2, qword_100BC4E80);
    v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
    v16(v4, v15);
    v16(v6, v15);
    sub_100021A14(v12, qword_100BC4E80);
    v17 = 1;
  }
  else
  {
    Measurement<>.converted(rounded:)(0);
    sub_100021A14(v2, qword_100BC4E80);
    sub_1000BDD58(v4);
    sub_1000BDD58(v6);
    sub_1000BDD58(v12);
    v17 = 0;
  }
  _s7Weather24LocationCompositionStateOwst_0(v0, v17, 1, v15);
  sub_10009E8CC(v0, v8 + *(int *)(v14 + 24), qword_100BC4E80);
}

void sub_1005B04E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v72 = a1;
  v73 = a4;
  v75 = sub_1000CD88C();
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_1000DBB98();
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_10009883C();
  v13 = v11 - v12;
  v15 = __chkstk_darwin(v14);
  v17 = (double *)((char *)&v69 - v16);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v69 - v19;
  __chkstk_darwin(v18);
  sub_1000998F4();
  v82 = sub_10009DBB0();
  __chkstk_darwin(v82);
  sub_10009883C();
  v22 = __chkstk_darwin(v21);
  v77 = (uint64_t)&v69 - v23;
  v24 = __chkstk_darwin(v22);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v69 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v69 - v29;
  __chkstk_darwin(v28);
  v35 = *(_QWORD *)(a2 + 16);
  if (!v35)
  {
    sub_1000986C4();
    swift_bridgeObjectRelease(a3);
    v66 = 0;
    v63 = 0;
    v67 = 0;
    v46 = 0;
    v65 = 0;
    goto LABEL_30;
  }
  v70 = a3;
  v71 = (char *)&v69 - v31;
  v76 = v34;
  v69 = v33;
  v80 = v32;
  v78 = a2 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
  sub_100078058(v78, (uint64_t)v30, type metadata accessor for ComparisonCapsuleViewModel.Row);
  sub_1000989F8();
  v79 = v35;
  v81 = a2;
  if (v35 != 1)
  {
    v36 = 1;
    v74 = v4;
    while (v36 < *(_QWORD *)(a2 + 16))
    {
      sub_100078058(v78 + *(_QWORD *)(v80 + 72) * v36, (uint64_t)v27, type metadata accessor for ComparisonCapsuleViewModel.Row);
      sub_1000BF1E4();
      sub_100078058((uint64_t)&v27[v37], v4, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
      if (sub_1000DAFA8(v4) == 1)
      {
        v38 = *(double *)v4;
        swift_bridgeObjectRelease(*(_QWORD *)(v4 + 40));
        sub_1000986C4();
      }
      else
      {
        sub_1000D0734(v4, (uint64_t)v9);
        v39 = sub_1000BA294(&qword_100BC4E68);
        v38 = Measurement.value.getter(v39);
        sub_10009D37C((uint64_t)v9);
      }
      sub_1000BF1E4();
      sub_100078058((uint64_t)&v30[v40], (uint64_t)v20, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
      if (sub_1000DAFA8((uint64_t)v20) == 1)
      {
        v41 = *(double *)v20;
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 5));
        sub_1000986C4();
      }
      else
      {
        sub_1000D0734((uint64_t)v20, (uint64_t)v9);
        v42 = sub_1000BA294(&qword_100BC4E68);
        v41 = Measurement.value.getter(v42);
        sub_10009D37C((uint64_t)v9);
      }
      a2 = v81;
      if (v38 >= v41)
      {
        sub_1000215BC((uint64_t)v27, type metadata accessor for ComparisonCapsuleViewModel.Row);
      }
      else
      {
        sub_10009D37C((uint64_t)v30);
        v4 = v74;
        sub_10007C75C((uint64_t)v27, (uint64_t)v30, type metadata accessor for ComparisonCapsuleViewModel.Row);
      }
      if (v79 == ++v36)
        goto LABEL_15;
    }
    __break(1u);
    goto LABEL_32;
  }
LABEL_15:
  sub_1000986C4();
  v43 = (uint64_t)v71;
  sub_1000CDF74((uint64_t)v30);
  sub_1005B11F0();
  v44 = v81;
  v46 = v45;
  sub_100079F9C(v43);
  sub_100078058(v78, v77, type metadata accessor for ComparisonCapsuleViewModel.Row);
  sub_1000989F8();
  v47 = v80;
  v48 = v76;
  if (v79 == 1)
  {
LABEL_28:
    sub_1000986C4();
    v62 = v69;
    sub_1000CDF74(v77);
    sub_1005B12EC();
    v63 = v81;
    v65 = v64;
    sub_100079F9C(v62);
    v66 = v72;
    v67 = v70;
LABEL_30:
    v68 = v73;
    *v73 = v66;
    v68[1] = v63;
    v68[2] = v67;
    v68[3] = v46;
    v68[4] = v65;
    return;
  }
  v49 = 1;
  while (v49 < *(_QWORD *)(v44 + 16))
  {
    sub_100078058(v78 + *(_QWORD *)(v47 + 72) * v49, v48, type metadata accessor for ComparisonCapsuleViewModel.Row);
    sub_1000BF1E4();
    sub_100078058(v77 + v50, (uint64_t)v17, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    if (sub_1000DAFA8((uint64_t)v17) == 1)
    {
      v51 = *v17;
      v52 = v17[1];
      swift_bridgeObjectRelease(*((_QWORD *)v17 + 5));
      sub_1000986C4();
      v53 = v51 + v52;
    }
    else
    {
      sub_1000D0A44((uint64_t)v17);
      v54 = sub_1000BA294(&qword_100BC4E68);
      v53 = Measurement.value.getter(v54);
      sub_1000BD95C((uint64_t)v9);
    }
    sub_1000BF1E4();
    sub_100078058(v48 + v55, v13, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    if (sub_1000DAFA8(v13) == 1)
    {
      v56 = *(double *)v13;
      v57 = *(double *)(v13 + 8);
      swift_bridgeObjectRelease(*(_QWORD *)(v13 + 40));
      sub_1000986C4();
      v58 = v56 + v57;
    }
    else
    {
      sub_1000D0A44(v13);
      v59 = sub_1000BA294(&qword_100BC4E68);
      v58 = Measurement.value.getter(v59);
      sub_1000BD95C((uint64_t)v9);
    }
    v44 = v81;
    if (v53 >= v58)
    {
      sub_100079F9C(v48);
    }
    else
    {
      v60 = v77;
      sub_100079F9C(v77);
      v61 = v60;
      v48 = v76;
      sub_10007C75C(v76, v61, type metadata accessor for ComparisonCapsuleViewModel.Row);
    }
    ++v49;
    v47 = v80;
    if (v79 == v49)
      goto LABEL_28;
  }
LABEL_32:
  __break(1u);
}

void sub_1005B0A88(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 != *a2 || v5 != v6)
  {
    sub_100099264(v4, v5, *a2, v6);
    sub_10007A150();
    if ((v8 & 1) == 0)
      goto LABEL_22;
  }
  v9 = a1[3];
  v10 = a2[3];
  if (v9)
  {
    if (!v10)
      goto LABEL_22;
    v11 = a1[2];
    v12 = a2[2];
    if (v11 != v12 || v9 != v10)
    {
      sub_100099264(v11, v9, v12, v10);
      sub_10007A150();
      if ((v14 & 1) == 0)
        goto LABEL_22;
    }
  }
  else if (v10)
  {
    goto LABEL_22;
  }
  v15 = a1[5];
  v16 = a2[5];
  if (v15 && v16)
  {
    v17 = a1[4];
    v18 = a2[4];
    if (v17 != v18 || v15 != v16)
      sub_100099264(v17, v15, v18, v16);
  }
LABEL_22:
  sub_10004A298();
}

void sub_1005B0B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  sub_1000986AC();
  v1 = v0;
  v3 = v2;
  v4 = sub_1000BA294(&qword_100BC4E68);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  sub_10009D98C();
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BF29E0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(qword_100BC4E80);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_10009883C();
  v15 = v13 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v41 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v41 - v20;
  sub_100079FE8(v22, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
  v23 = v3;
  v24 = v3;
  v25 = v1;
  if ((sub_1000D0D88(v24, v1) & 1) != 0)
  {
    v43 = v18;
    v44 = v21;
    v41 = v7;
    v42 = v15;
    v26 = v46;
    v27 = sub_1000CD88C();
    v28 = v25;
    if ((sub_1000D0D88(v23 + *(int *)(v27 + 20), v25 + *(int *)(v27 + 20)) & 1) != 0)
    {
      v29 = (uint64_t)v44;
      sub_1005B0EEC(v23 + *(int *)(v27 + 24), (uint64_t)v44);
      v30 = (uint64_t)v43;
      sub_1005B0EEC(v28 + *(int *)(v27 + 24), (uint64_t)v43);
      v31 = (uint64_t)v11;
      v32 = (uint64_t)&v11[*(int *)(v8 + 48)];
      sub_1000EB03C();
      sub_1005B0EEC(v30, v32);
      v33 = v26;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v26) == 1)
      {
        sub_10009E47C(v30);
        sub_10009E47C(v29);
        v34 = _s7Weather24LocationCompositionStateOwet_0(v32, 1, v26);
        if ((_DWORD)v34 == 1)
        {
          sub_1000B3B00(v34, qword_100BC4E80);
          goto LABEL_10;
        }
      }
      else
      {
        v35 = v42;
        sub_1005B0EEC((uint64_t)v11, v42);
        if (_s7Weather24LocationCompositionStateOwet_0(v32, 1, v33) != 1)
        {
          v36 = v29;
          v37 = v45;
          v38 = v41;
          (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v41, v32, v33);
          sub_10003D310(&qword_100BF29E8, &qword_100BC4E68, (uint64_t)&protocol conformance descriptor for Measurement<A>);
          dispatch thunk of static Equatable.== infix(_:_:)(v35, v38, v33, v39);
          v40 = *(void (**)(char *, uint64_t))(v37 + 8);
          v40(v38, v33);
          sub_100098BAC(v30);
          sub_100098BAC(v36);
          v40((char *)v35, v33);
          sub_100098BAC(v31);
          goto LABEL_10;
        }
        sub_10009E47C(v30);
        sub_10009E47C(v29);
        v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v35, v33);
      }
      sub_1000B3B00(v34, &qword_100BF29E0);
    }
  }
LABEL_10:
  sub_100098640();
}

void sub_1005B0E34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
    goto LABEL_12;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  if (!v4)
  {
    if (!v5)
      goto LABEL_13;
LABEL_12:
    sub_10004A298();
    return;
  }
  if (!v5)
    goto LABEL_12;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  if (v6 != v7 || v4 != v5)
  {
    sub_100099264(v6, v4, v7, v5);
    sub_10007A150();
    if ((v9 & 1) == 0)
      goto LABEL_12;
  }
LABEL_13:
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a2 + 32);
  if (v10 == v12 && v11 == *(_QWORD *)(a2 + 40))
    goto LABEL_12;
  _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12);
}

uint64_t type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF2B90, (uint64_t)&nominal type descriptor for ComparisonCapsuleViewModel.Row.Body.Temperature);
}

uint64_t sub_1005B0EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(qword_100BC4E80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1005B0F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[16];
  __int128 v28;
  _BYTE v29[16];
  __int128 v30;

  sub_1000986AC();
  v2 = v1;
  v4 = v3;
  type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000DBB98();
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_10009883C();
  v11 = (__int128 *)(v9 - v10);
  __chkstk_darwin(v12);
  v14 = (char *)&v21 - v13;
  sub_1000BA294(&qword_100BF29F0);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100079F58();
  v17 = (__int128 *)(v0 + *(int *)(v16 + 48));
  sub_1000C227C(v4, v0);
  sub_1000C227C(v2, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload(v0) == 1)
  {
    sub_100078058(v0, (uint64_t)v11, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    v18 = v11[1];
    v21 = *v11;
    v22 = v18;
    v23 = v11[2];
    if (sub_1000C3900() == 1)
    {
      v19 = v17[1];
      v24 = *v17;
      v25 = v19;
      v26 = v17[2];
      sub_1005B0E34((uint64_t)&v21, (uint64_t)&v24);
      sub_10009E8CC((uint64_t)&v22, (uint64_t)v29, &qword_100BC5AA8);
      sub_100121AA8((uint64_t)v29);
      v30 = v23;
      sub_100121AA8((uint64_t)&v30);
      sub_10009E8CC((uint64_t)&v25, (uint64_t)v27, &qword_100BC5AA8);
      sub_100121AA8((uint64_t)v27);
      v28 = v26;
      sub_100121AA8((uint64_t)&v28);
LABEL_9:
      sub_1000215BC(v0, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
      goto LABEL_10;
    }
    sub_10009E8CC((uint64_t)&v22, (uint64_t)&v30, &qword_100BC5AA8);
    sub_100121AA8((uint64_t)&v30);
    v24 = v23;
    v20 = sub_100121AA8((uint64_t)&v24);
  }
  else
  {
    sub_100078058(v0, (uint64_t)v14, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    if (sub_1000C3900() != 1)
    {
      sub_10007C75C((uint64_t)v17, (uint64_t)v7, type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature);
      sub_1005B0B3C();
      sub_1000215BC((uint64_t)v7, type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature);
      sub_1000215BC((uint64_t)v14, type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature);
      goto LABEL_9;
    }
    sub_1000215BC((uint64_t)v14, type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature);
  }
  sub_1000B3B00(v20, &qword_100BF29F0);
LABEL_10:
  sub_100098640();
}

uint64_t type metadata accessor for ComparisonCapsuleViewModel.Row.Body(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF2B00, (uint64_t)&nominal type descriptor for ComparisonCapsuleViewModel.Row.Body);
}

uint64_t sub_1005B11C8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1000989F8();
  return v1;
}

void sub_1005B11F0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
  sub_1000B42B0();
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000DBB98();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000E7210();
  sub_100078058(v7, (uint64_t)v6, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
  if (swift_getEnumCaseMultiPayload(v6, v3) == 1)
  {
    swift_bridgeObjectRelease(*((_QWORD *)v6 + 5));
    sub_1000986C4();
  }
  else
  {
    sub_10007C75C((uint64_t)v6, (uint64_t)v2, type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature);
    v8 = sub_1000BA294(&qword_100BC4E68);
    Measurement.value.getter(v8);
    sub_1000BD95C((uint64_t)v2);
  }
  sub_1000D01FC();
}

void sub_1005B12EC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000CD88C();
  sub_1000B42B0();
  __chkstk_darwin(v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000DBB98();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000E7210();
  sub_100078058(v7, (uint64_t)v6, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
  if (swift_getEnumCaseMultiPayload(v6, v3) == 1)
  {
    v8 = *((_QWORD *)v6 + 3);
    swift_bridgeObjectRelease(*((_QWORD *)v6 + 5));
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_1000D0734((uint64_t)v6, (uint64_t)v2);
    v9 = sub_1000BA294(&qword_100BC4E68);
    Measurement.value.getter(v9);
    sub_10009D37C((uint64_t)v2);
  }
  sub_1000D01FC();
}

void sub_1005B13F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1000986AC();
  sub_1000DAA90();
  sub_1000BEAF8();
  __chkstk_darwin(v4);
  v5 = sub_1000D9FA0();
  v17 = *(_QWORD *)(v5 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_1000DF76C();
  sub_1000B42B0();
  __chkstk_darwin(v7);
  type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000E7210();
  sub_1000C227C(v11, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000DC738((uint64_t)v10);
    static WeatherFormatStyle<>.weather.getter(v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v1, enum case for WeatherFormatPlaceholder.none(_:), v0);
    sub_1000BCF94();
    v13 = sub_1000B314C();
    v14 = sub_1000BA294(&qword_100BC4E68);
    v15 = sub_1000A9A78();
    Measurement.formatted<A>(_:placeholder:unitManager:)(v2, v1, v13, &protocol witness table for UnitManager, v14, v5, v15);
    swift_release();
    sub_1000BBF94();
    sub_1000B4B78(v17);
    sub_1000BCFC4();
  }
  sub_100098640();
}

void sub_1005B157C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;

  sub_1000986AC();
  v17 = sub_1000DAA90();
  v4 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v5 = sub_1000D9FA0();
  v16 = *(_QWORD *)(v5 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_1000DF76C();
  sub_1000B42B0();
  __chkstk_darwin(v7);
  type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v9 = sub_1000C4668();
  v10 = type metadata accessor for ComparisonCapsuleViewModel.Row(v9);
  sub_100078058(v0 + *(int *)(v10 + 20), v3, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
  if (swift_getEnumCaseMultiPayload(v3) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000DC738(v3);
    static WeatherFormatStyle<>.weather.getter(v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v1, enum case for WeatherFormatPlaceholder.none(_:), v17);
    sub_1000BCF94();
    v12 = sub_1000B314C();
    v13 = sub_1000BA294(&qword_100BC4E68);
    v14 = sub_1000A9A78();
    Measurement.formatted<A>(_:placeholder:unitManager:)(v2, v1, v12, &protocol witness table for UnitManager, v13, v5, v14);
    v15 = swift_release();
    (*(void (**)(uint64_t, uint64_t, __n128))(v4 + 8))(v1, v17, v15);
    sub_1000B4B78(v16);
    sub_1000BCFC4();
  }
  sub_100098640();
}

void sub_1005B172C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  objc_class *v34;
  NSBundle v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  objc_class *v59;
  NSBundle v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  Swift::String v85;
  uint64_t v86;
  Swift::String v87;
  Swift::String_optional v88;
  Swift::String v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  objc_class *v99;
  NSBundle v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  sub_1000986AC();
  v4 = sub_1000DAA90();
  v131 = *(_QWORD *)(v4 - 8);
  v132 = v4;
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v130 = v6;
  v7 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v128 = *(_QWORD *)(v7 - 8);
  v129 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v127 = v9;
  sub_1000BA294(qword_100BC4E80);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100079F58();
  v136 = sub_1000BA294(&qword_100BC4E68);
  v133 = *(_QWORD *)(v136 - 8);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v135 = v12;
  sub_1000DBB98();
  sub_1000B42B0();
  __chkstk_darwin(v13);
  v14 = sub_1000C4668();
  v15 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(v14);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v134 = v17;
  v137 = sub_10009DBB0();
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_10009883C();
  v21 = (uint64_t *)(v19 - v20);
  __chkstk_darwin(v22);
  sub_1000998F4();
  v23 = *(_QWORD *)(v1 + 32);
  v24 = *(_QWORD *)(v1 + 40);
  v138 = v1;
  sub_100078058(v1, v2, v25);
  if (v24)
  {
    swift_bridgeObjectRetain();
    v21 = (uint64_t *)v2;
  }
  else
  {
    v23 = *(_QWORD *)(v2 + 16);
    v26 = *(_QWORD *)(v2 + 24);
    sub_10007C75C(v2, (uint64_t)v21, type metadata accessor for ComparisonCapsuleViewModel.Row);
    if (v26)
    {
      v24 = v26;
    }
    else
    {
      v23 = *v21;
      v24 = v21[1];
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
  }
  sub_1000215BC((uint64_t)v21, type metadata accessor for ComparisonCapsuleViewModel.Row);
  sub_1000B2E08();
  v28 = v27;
  v29 = *(_QWORD *)(v27 + 16);
  if (v29 >= *(_QWORD *)(v27 + 24) >> 1)
  {
    sub_1000C4BC0();
    v28 = v121;
  }
  *(_QWORD *)(v28 + 16) = v29 + 1;
  v30 = v28 + 16 * v29;
  *(_QWORD *)(v30 + 32) = v23;
  *(_QWORD *)(v30 + 40) = v24;
  v31 = v137;
  sub_100078058(v1 + *(int *)(v137 + 20), v3, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
  if (swift_getEnumCaseMultiPayload(v3) == 1)
  {
    sub_1000215BC(v3, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
  }
  else
  {
    sub_10007C75C(v3, v134, type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature);
    sub_1005B0EEC(v134 + *(int *)(v15 + 24), v0);
    if (_s7Weather24LocationCompositionStateOwet_0(v0, 1, v136) == 1)
    {
      sub_1000215BC(v134, type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature);
      sub_1000B3B00(v32, qword_100BC4E80);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v133 + 32))(v135, v0, v136);
      v33 = (void *)sub_1000DC480();
      v34 = (objc_class *)sub_1000BEEFC(v33);
      sub_1000989C4();
      sub_1000BEB0C();
      v35.super.isa = v34;
      v43 = sub_1000BA340(v36, v37, v38, v39, v35, v40, v41, v42);
      v125 = v44;
      v126 = v43;

      v45 = sub_1000BA294(&qword_100BC3C38);
      v46 = sub_100098740(v45, 72);
      *(_OWORD *)(v46 + 16) = xmmword_10097CA50;
      static WeatherFormatStyle<>.weather.getter(v46);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v131 + 104))(v130, enum case for WeatherFormatPlaceholder.none(_:), v132);
      sub_1000BCF94();
      v47 = sub_1000B314C();
      v48 = sub_1000A9A78();
      v49 = Measurement.formatted<A>(_:placeholder:unitManager:)(v127, v130, v47, &protocol witness table for UnitManager, v136, v129, v48);
      v51 = v50;
      v52 = swift_release();
      (*(void (**)(uint64_t, uint64_t, __n128))(v131 + 8))(v130, v132, v52);
      (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v127, v129);
      *(_QWORD *)(v46 + 56) = &type metadata for String;
      *(_QWORD *)(v46 + 64) = sub_1000B2E24();
      *(_QWORD *)(v46 + 32) = v49;
      *(_QWORD *)(v46 + 40) = v51;
      v53 = String.init(format:_:)(v126, v125, v46);
      v55 = v54;
      sub_1000986C4();
      v56 = *(_QWORD *)(v28 + 16);
      if (v56 >= *(_QWORD *)(v28 + 24) >> 1)
      {
        sub_1000C4BC0();
        v28 = v124;
      }
      v1 = v138;
      *(_QWORD *)(v28 + 16) = v56 + 1;
      v57 = v28 + 16 * v56;
      *(_QWORD *)(v57 + 32) = v53;
      *(_QWORD *)(v57 + 40) = v55;
      (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v135, v136);
      sub_1000215BC(v134, type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature);
      v31 = v137;
    }
  }
  if (*(unsigned __int8 *)(v1 + *(int *)(v31 + 24)) > 2u)
  {
    sub_1005B13F0();
    if (!v95)
      goto LABEL_26;
    v96 = v94;
    v97 = v95;
    v98 = (void *)sub_1000DC480();
    v99 = (objc_class *)sub_1000BEEFC(v98);
    sub_1000989C4();
    sub_1000BEB0C();
    v100.super.isa = v99;
    v108 = sub_1000BA340(v101, v102, v103, v104, v100, v105, v106, v107);
    v110 = v109;

    v111 = sub_1000BA294(&qword_100BC3C38);
    v112 = sub_100098740(v111, 112);
    *(_OWORD *)(v112 + 16) = xmmword_10097DA20;
    *(_QWORD *)(v112 + 56) = &type metadata for String;
    v113 = sub_1000B2E24();
    *(_QWORD *)(v112 + 64) = v113;
    *(_QWORD *)(v112 + 32) = v96;
    *(_QWORD *)(v112 + 40) = v97;
    sub_1005B157C();
    *(_QWORD *)(v112 + 96) = &type metadata for String;
    *(_QWORD *)(v112 + 104) = v113;
    *(_QWORD *)(v112 + 72) = v114;
    *(_QWORD *)(v112 + 80) = v115;
    v91 = String.init(format:_:)(v108, v110, v112);
    v93 = v116;
    goto LABEL_23;
  }
  v58 = (void *)sub_1000DC480();
  v59 = (objc_class *)sub_1000BEEFC(v58);
  sub_1000989C4();
  sub_1000BEB0C();
  v60.super.isa = v59;
  v68 = sub_1000BA340(v61, v62, v63, v64, v60, v65, v66, v67);
  v70 = v69;

  v71 = sub_1000BA294(&qword_100BC3C38);
  v72 = sub_100098740(v71, 72);
  *(_OWORD *)(v72 + 16) = xmmword_10097CA50;
  sub_1005B157C();
  v74 = v73;
  v76 = v75;
  *(_QWORD *)(v72 + 56) = &type metadata for String;
  v77 = sub_1000B2E24();
  *(_QWORD *)(v72 + 64) = v77;
  *(_QWORD *)(v72 + 32) = v74;
  *(_QWORD *)(v72 + 40) = v76;
  v78 = String.init(format:_:)(v68, v70, v72);
  v80 = v79;
  swift_bridgeObjectRelease();
  v81 = *(_QWORD *)(v28 + 16);
  if (v81 >= *(_QWORD *)(v28 + 24) >> 1)
  {
    sub_1000B2E08();
    v28 = v123;
  }
  *(_QWORD *)(v28 + 16) = v81 + 1;
  v82 = v28 + 16 * v81;
  *(_QWORD *)(v82 + 32) = v78;
  *(_QWORD *)(v82 + 40) = v80;
  sub_1005B13F0();
  if (v83)
  {
    sub_10009DEC0();
    v84 = objc_msgSend(v58, "mainBundle");
    sub_1000989C4();
    sub_1000BEB0C();
    v85._countAndFlagsBits = 0;
    v85._object = (void *)0xE000000000000000;
    v86 = 0x1000000000000077;
    v89 = NSLocalizedString(_:tableName:bundle:value:comment:)(v87, v88, (NSBundle)v84, v85, *(Swift::String *)(&v129 - 1));

    v90 = sub_100098740(v71, 72);
    *(_OWORD *)(v90 + 16) = xmmword_10097CA50;
    *(_QWORD *)(v90 + 56) = &type metadata for String;
    *(_QWORD *)(v90 + 64) = v77;
    *(_QWORD *)(v90 + 32) = v59;
    *(_QWORD *)(v90 + 40) = v138;
    v91 = String.init(format:_:)(v89._countAndFlagsBits, v89._object, v90);
    v93 = v92;
LABEL_23:
    swift_bridgeObjectRelease();
    v117 = *(_QWORD *)(v28 + 16);
    if (v117 >= *(_QWORD *)(v28 + 24) >> 1)
    {
      sub_1000C4BC0();
      v28 = v122;
    }
    *(_QWORD *)(v28 + 16) = v117 + 1;
    v118 = v28 + 16 * v117;
    *(_QWORD *)(v118 + 32) = v91;
    *(_QWORD *)(v118 + 40) = v93;
  }
LABEL_26:
  v119 = sub_1000BA294(&qword_100BF1280);
  sub_10003D310((unint64_t *)&qword_100BD35B0, &qword_100BF1280, (uint64_t)&protocol conformance descriptor for [A]);
  BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v119, v120);
  sub_10009DEC0();
  swift_bridgeObjectRelease();
  sub_100098640();
}

void sub_1005B1EF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char v18;
  char v20;

  sub_1000986AC();
  v1 = v0;
  v3 = v2;
  v4 = *v2;
  v5 = v3[1];
  v6 = v3[2];
  v8 = v3[3];
  v7 = v3[4];
  v9 = v3[5];
  v10 = v1[1];
  v12 = v1[2];
  v11 = v1[3];
  v14 = v1[4];
  v13 = v1[5];
  if (v4 != *v1 || v5 != v10)
  {
    sub_100099264(v4, v5, *v1, v10);
    sub_10007A150();
    if ((v16 & 1) == 0)
      goto LABEL_25;
  }
  if (!v8)
  {
    if (v11)
      goto LABEL_25;
LABEL_15:
    if (v9)
    {
      if (!v13)
        goto LABEL_25;
      if (v7 != v14 || v9 != v13)
      {
        sub_100099264(v7, v9, v14, v13);
        sub_10007A150();
        if ((v20 & 1) == 0)
          goto LABEL_25;
      }
    }
    else if (v13)
    {
      goto LABEL_25;
    }
    sub_10009DBB0();
    sub_1005B0F34();
    goto LABEL_25;
  }
  if (v11)
  {
    if (v6 == v12 && v8 == v11)
      goto LABEL_15;
    sub_100099264(v6, v8, v12, v11);
    sub_10007A150();
    if ((v18 & 1) != 0)
      goto LABEL_15;
  }
LABEL_25:
  sub_100098640();
}

uint64_t type metadata accessor for ComparisonCapsuleViewModel.Row(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF2A50, (uint64_t)&nominal type descriptor for ComparisonCapsuleViewModel.Row);
}

uint64_t sub_1005B2010@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1005B11C8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1005B2034()
{
  __asm { BR              X10 }
}

void *sub_1005B2064(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __n128 a9, uint64_t a10, char __src, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t *v27;
  uint64_t v28;
  _BYTE v30[136];

  sub_1008F6C7C((uint64_t)v30, a9);
  v27[3] = (uint64_t)&unk_100B9A470;
  v27[4] = (uint64_t)&off_100B9A5D8;
  v28 = sub_100098740((uint64_t)&unk_100B81D20, 113);
  *v27 = v28;
  return memcpy((void *)(v28 + 16), v30, 0x61uLL);
}

void sub_1005B2118(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && sub_100948898(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1)))
    sub_10010CD10(*((_QWORD *)a1 + 2), *((_QWORD *)a2 + 2));
  sub_10004A298();
}

uint64_t sub_1005B2190()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _QWORD v45[15];
  uint64_t v46;
  uint64_t v47;

  sub_1000986AC();
  v46 = v2;
  v47 = v3;
  v44 = v0;
  v5 = v4;
  v6 = type metadata accessor for TimeStyle(0);
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v40 = v8;
  v9 = sub_1000DAA90();
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v43 = *(_QWORD *)(v13 - 8);
  sub_10009D98C();
  __chkstk_darwin(v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  v18 = sub_1000C4668();
  type metadata accessor for ComparisonCapsuleViewModel.Row.Body(v18);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ComparisonCapsuleViewModel.Row(0);
  sub_100078058(v5 + *(int *)(v22 + 20), (uint64_t)v21, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
  if (swift_getEnumCaseMultiPayload(v21) == 1)
  {
    v23 = *((_QWORD *)v21 + 2);
    v24 = *((_QWORD *)v21 + 3);
    swift_bridgeObjectRelease();
    if (!v24)
      return 0;
  }
  else
  {
    sub_10007C75C((uint64_t)v21, v1, type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature);
    static WeatherFormatStyle<>.weather.getter(v25);
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for WeatherFormatPlaceholder.none(_:), v9);
    sub_1000BCF94();
    v26 = sub_1000B314C();
    v27 = sub_1000BA294(&qword_100BC4E68);
    v28 = sub_1000A9A78();
    v23 = Measurement.formatted<A>(_:placeholder:unitManager:)(v16, v12, v26, &protocol witness table for UnitManager, v27, v13, v28);
    v24 = v29;
    v30 = swift_release();
    (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v30);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v13);
    sub_1000215BC(v1, type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature);
  }
  if (*v44 == 3)
  {
    type metadata accessor for Style(0);
    v31 = v40;
    v32 = static Style.componentTime.getter();
    sub_100079FE8(v32, (unint64_t *)&qword_100BC4E58, NSDateFormatter_ptr);
    v34 = static NSDateFormatter.prevailingPeriodSymbols.getter(v33);
    sub_1005B2034();
    v35 = v45[4];
    sub_1000DB418(v45, v45[3]);
    v36 = sub_1000C5560(*(uint64_t (**)(uint64_t, uint64_t))(v35 + 40));
    TimeStyle.formatTime(_:periodSymbols:font:)(v23, v24, v34, v36);
    sub_10009DEC0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v37 = swift_release();
    (*(void (**)(uint64_t, uint64_t, __n128))(v41 + 8))(v31, v42, v37);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v45);
  }
  else
  {
    v45[0] = v23;
    v45[1] = v24;
    v38 = sub_100114EF8();
    Text.init<A>(_:)(v45, &type metadata for String, v38);
    sub_10009DEC0();
  }
  return v23;
}

char *sub_1005B24D4()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v21[16];
  uint64_t v22;
  uint64_t v23;

  sub_1000986AC();
  v22 = v1;
  v23 = v2;
  v4 = v3;
  type metadata accessor for TimeStyle(0);
  sub_1000BEAF8();
  __chkstk_darwin(v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v0 == 3)
  {
    type metadata accessor for Style(0);
    static Style.componentTime.getter();
    sub_1005B157C();
    v9 = v8;
    v11 = v10;
    sub_100079FE8(v8, (unint64_t *)&qword_100BC4E58, NSDateFormatter_ptr);
    v13 = static NSDateFormatter.prevailingPeriodSymbols.getter(v12);
    sub_1005B2034();
    v14 = v21[4];
    sub_1000DB418(v21, v21[3]);
    v15 = sub_1000C5560(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 48));
    v16 = v7;
    TimeStyle.formatTime(_:periodSymbols:font:)(v9, v11, v13, v15);
    sub_1000C4B6C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000BBF94();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v21);
  }
  else
  {
    v16 = v4;
    sub_1005B157C();
    v21[0] = v17;
    v21[1] = v18;
    v19 = sub_100114EF8();
    Text.init<A>(_:)(v21, &type metadata for String, v19);
    sub_1000C4B6C();
  }
  return v16;
}

uint64_t sub_1005B2634(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_1005B2678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t sub_1005B26EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

void type metadata accessor for ComparisonCapsuleViewModel()
{
  sub_100098884();
}

_QWORD *sub_1005B2744(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v13 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
      v14 = *((_QWORD *)v12 + 3);
      *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
      *((_QWORD *)v11 + 3) = v14;
      v15 = *((_QWORD *)v12 + 4);
      v16 = *((_QWORD *)v12 + 5);
      *((_QWORD *)v11 + 4) = v15;
      *((_QWORD *)v11 + 5) = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17 = 1;
    }
    else
    {
      v19 = sub_1000BA294(&qword_100BC4E68);
      v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
      v20(v11, v12, v19);
      v21 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v20(&v11[*(int *)(v21 + 20)], &v12[*(int *)(v21 + 20)], v19);
      v22 = *(int *)(v21 + 24);
      v23 = &v11[v22];
      v24 = &v12[v22];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v19))
      {
        v25 = sub_1000BA294(qword_100BC4E80);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v20(v23, v24, v19);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v19);
      }
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v17);
    *((_BYTE *)v4 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

void sub_1005B290C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = sub_1000BA294(&qword_100BC4E68);
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v8(v4, v5);
    v6 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v8(v4 + *(int *)(v6 + 20), v5);
    v7 = v4 + *(int *)(v6 + 24);
    if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v5))
      v8(v7, v5);
  }
}

_QWORD *sub_1005B2A20(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v12 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload(v11) == 1)
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
    v13 = *((_QWORD *)v11 + 3);
    *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
    *((_QWORD *)v10 + 3) = v13;
    v14 = *((_QWORD *)v11 + 4);
    v15 = *((_QWORD *)v11 + 5);
    *((_QWORD *)v10 + 4) = v14;
    *((_QWORD *)v10 + 5) = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = 1;
  }
  else
  {
    v17 = sub_1000BA294(&qword_100BC4E68);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v10, v11, v17);
    v19 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v18(&v10[*(int *)(v19 + 20)], &v11[*(int *)(v19 + 20)], v17);
    v20 = *(int *)(v19 + 24);
    v21 = &v10[v20];
    v22 = &v11[v20];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, v17))
    {
      v23 = sub_1000BA294(qword_100BC4E80);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v18(v21, v22, v17);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v21, 0, 1, v17);
    }
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v16);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_1005B2BBC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    sub_1000215BC((uint64_t)a1 + v6, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    v9 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
    if (swift_getEnumCaseMultiPayload(v8) == 1)
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
      *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
      *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
      *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
      *((_QWORD *)v7 + 5) = *((_QWORD *)v8 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10 = 1;
    }
    else
    {
      v11 = sub_1000BA294(&qword_100BC4E68);
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      v12(v7, v8, v11);
      v13 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v12(&v7[*(int *)(v13 + 20)], &v8[*(int *)(v13 + 20)], v11);
      v14 = *(int *)(v13 + 24);
      v15 = &v7[v14];
      v16 = &v8[v14];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v11))
      {
        v17 = sub_1000BA294(qword_100BC4E80);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        v12(v15, v16, v11);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v11);
      }
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v9, v10);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_1005B2DB8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
  if (swift_getEnumCaseMultiPayload(v9))
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = sub_1000BA294(&qword_100BC4E68);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
    v12(v8, v9, v11);
    v13 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v12(&v8[*(int *)(v13 + 20)], &v9[*(int *)(v13 + 20)], v11);
    v14 = *(int *)(v13 + 24);
    v15 = &v8[v14];
    v16 = &v9[v14];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v11))
    {
      v17 = sub_1000BA294(qword_100BC4E80);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v12(v15, v16, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload(v8, v10, 0);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_1005B2F1C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    sub_1000215BC((uint64_t)a1 + v9, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    v12 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
    if (swift_getEnumCaseMultiPayload(v11))
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v13 = sub_1000BA294(&qword_100BC4E68);
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
      v14(v10, v11, v13);
      v15 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v14(&v10[*(int *)(v15 + 20)], &v11[*(int *)(v15 + 20)], v13);
      v16 = *(int *)(v15 + 24);
      v17 = &v10[v16];
      v18 = &v11[v16];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v13))
      {
        v19 = sub_1000BA294(qword_100BC4E80);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        v14(v17, v18, v13);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v13);
      }
      swift_storeEnumTagMultiPayload(v10, v12, 0);
    }
  }
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1005B30B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005B30C4);
}

uint64_t sub_1005B30C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000DBB98();
    return sub_1000B250C(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1005B312C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005B3138);
}

uint64_t sub_1005B3138(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000DBB98();
    return sub_1000987C4(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1005B3198(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "0";
  result = type metadata accessor for ComparisonCapsuleViewModel.Row.Body(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1009B1378;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_1005B3214(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      v8 = a2[4];
      v9 = a2[5];
      a1[4] = v8;
      a1[5] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      v14 = sub_1000BA294(&qword_100BC4E68);
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      v15((char *)a1, (char *)a2, v14);
      v16 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v15((char *)a1 + *(int *)(v16 + 20), (char *)a2 + *(int *)(v16 + 20), v14);
      v17 = *(int *)(v16 + 24);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v14))
      {
        v20 = sub_1000BA294(qword_100BC4E80);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v15(v18, v19, v14);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v18, 0, 1, v14);
      }
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

void sub_1005B3380(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload(a1) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = sub_1000BA294(&qword_100BC4E68);
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
    v5(a1, v2);
    v3 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v5(a1 + *(int *)(v3 + 20), v2);
    v4 = a1 + *(int *)(v3 + 24);
    if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v2))
      v5(v4, v2);
  }
}

_QWORD *sub_1005B3460(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = a1;
    v9 = a3;
    v10 = 1;
  }
  else
  {
    v11 = sub_1000BA294(&qword_100BC4E68);
    v12 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(a1, a2, v11);
    v13 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v12((char *)a1 + *(int *)(v13 + 20), (char *)a2 + *(int *)(v13 + 20), v11);
    v14 = *(int *)(v13 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v11))
    {
      v17 = sub_1000BA294(qword_100BC4E80);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v12(v15, v16, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v11);
    }
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

char *sub_1005B35A0(char *a1, char *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v6 = a1;
      v7 = a3;
      v8 = 1;
    }
    else
    {
      v9 = sub_1000BA294(&qword_100BC4E68);
      v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
      v10(a1, a2, v9);
      v11 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v10(&a1[*(int *)(v11 + 20)], &a2[*(int *)(v11 + 20)], v9);
      v12 = *(int *)(v11 + 24);
      v13 = &a1[v12];
      v14 = &a2[v12];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v9))
      {
        v15 = sub_1000BA294(qword_100BC4E80);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        v10(v13, v14, v9);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v9);
      }
      v6 = a1;
      v7 = a3;
      v8 = 0;
    }
    swift_storeEnumTagMultiPayload(v6, v7, v8);
  }
  return a1;
}

char *sub_1005B3710(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  if (swift_getEnumCaseMultiPayload(a2))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_1000BA294(&qword_100BC4E68);
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    v8 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
    v7(&a1[*(int *)(v8 + 20)], &a2[*(int *)(v8 + 20)], v6);
    v9 = *(int *)(v8 + 24);
    v10 = &a1[v9];
    v11 = &a2[v9];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v6))
    {
      v12 = sub_1000BA294(qword_100BC4E80);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v7(v10, v11, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

char *sub_1005B3830(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for ComparisonCapsuleViewModel.Row.Body);
    if (swift_getEnumCaseMultiPayload(a2))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_1000BA294(&qword_100BC4E68);
      v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      v8 = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
      v7(&a1[*(int *)(v8 + 20)], &a2[*(int *)(v8 + 20)], v6);
      v9 = *(int *)(v8 + 24);
      v10 = &a1[v9];
      v11 = &a2[v9];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v6))
      {
        v12 = sub_1000BA294(qword_100BC4E80);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        v7(v10, v11, v6);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_1005B3968(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "0";
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

char *sub_1005B39D4(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BC4E68);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    v8(&a1[*(int *)(a3 + 20)], (char *)a2 + *(int *)(a3 + 20), v7);
    v9 = *(int *)(a3 + 24);
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v7))
    {
      v12 = sub_1000BA294(qword_100BC4E80);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1005B3ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t);

  v4 = sub_1000BA294(&qword_100BC4E68);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v7(a1, v4);
  v7(a1 + *(int *)(a2 + 20), v4);
  v5 = a1 + *(int *)(a2 + 24);
  result = _s7Weather24LocationCompositionStateOwet_0(v5, 1, v4);
  if (!(_DWORD)result)
    return v7(v5, v4);
  return result;
}

char *sub_1005B3B88(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = sub_1000BA294(&qword_100BC4E68);
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  v8 = *(int *)(a3 + 24);
  v9 = &a1[v8];
  v10 = &a2[v8];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v6))
  {
    v11 = sub_1000BA294(qword_100BC4E80);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v6);
  }
  return a1;
}

char *sub_1005B3C64(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;

  v6 = sub_1000BA294(&qword_100BC4E68);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  v9 = *(int *)(a3 + 24);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&a1[v9], 1, v6);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v6);
  if (!v12)
  {
    if (!v13)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_1000BA294(qword_100BC4E80);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v6);
  return a1;
}

char *sub_1005B3D8C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = sub_1000BA294(&qword_100BC4E68);
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  v8 = *(int *)(a3 + 24);
  v9 = &a1[v8];
  v10 = &a2[v8];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v6))
  {
    v11 = sub_1000BA294(qword_100BC4E80);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v6);
  }
  return a1;
}

char *sub_1005B3E68(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;

  v6 = sub_1000BA294(&qword_100BC4E68);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  v9 = *(int *)(a3 + 24);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)&a1[v9], 1, v6);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v6);
  if (!v12)
  {
    if (!v13)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_1000BA294(qword_100BC4E80);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v6);
  return a1;
}

uint64_t sub_1005B3F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005B3F9C);
}

uint64_t sub_1005B3F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1000BA294(&qword_100BC4E68);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = sub_1000BA294(qword_100BC4E80);
    v8 = a1 + *(int *)(a3 + 24);
  }
  return sub_1000B250C(v8, a2, v7);
}

uint64_t sub_1005B4004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005B4010);
}

uint64_t sub_1005B4010(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_1000BA294(&qword_100BC4E68);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = sub_1000BA294(qword_100BC4E80);
    v10 = a1 + *(int *)(a4 + 24);
  }
  return sub_1000987C4(v10, a2, a2, v9);
}

void sub_1005B4080(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_1005B4104(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = v6[0];
    sub_1005B4168(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

void sub_1005B4104(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!qword_100BDD6E0)
  {
    sub_1000A0794(255, (unint64_t *)&qword_100BC5658, NSUnitTemperature_ptr);
    v2 = type metadata accessor for Measurement(a1);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_100BDD6E0);
  }
}

void sub_1005B4168(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BDD6E8)
  {
    v2 = sub_100075EB0(&qword_100BC4E68);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BDD6E8);
  }
}

uint64_t sub_1005B41C0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1005B420C + 4 * byte_1009B1339[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1005B4240 + 4 * byte_1009B1334[v4]))();
}

uint64_t sub_1005B4240(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005B4248(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005B4250);
  return result;
}

uint64_t sub_1005B425C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005B4264);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1005B4268(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005B4270(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ComparisonCapsuleViewModel.Kind()
{
  sub_100098884();
}

void type metadata accessor for ComparisonCapsuleViewModel.Row.Label()
{
  sub_100098884();
}

double sub_1005B4294(uint64_t a1)
{
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1005B42BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_1005B4300(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a2[3];
  v5 = a1[3];
  a1[3] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[4] = a2[4];
  v6 = a2[5];
  v7 = a1[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_1005B437C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_1005B43C8(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1005B4408(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Bar()
{
  sub_100098884();
}

unint64_t sub_1005B4464()
{
  unint64_t result;

  result = qword_100BF2BD0;
  if (!qword_100BF2BD0)
  {
    result = swift_getWitnessTable(&unk_1009B14DC, &unk_100B81BC8);
    atomic_store(result, (unint64_t *)&qword_100BF2BD0);
  }
  return result;
}

uint64_t ScrollView.wScrollsContentToBeginningInRightToLeft(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  return ScrollView.scrollsContentToBeginningInRightToLeft.setter(a1, a2);
}

void sub_1005B44FC(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = _s5DemosO8Fall2024CMa(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  sub_1005C5F14();
  v4 = v3;
  v5 = sub_1005C4BD0();
  v7 = v6;
  swift_release(v4);
  *a1 = v5;
  a1[1] = v7;
}

uint64_t sub_1005B4558@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain(v3);
}

void sub_1005B4564(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t (*v50)(uint64_t);
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  id v55[2];
  uint64_t v56;
  char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD aBlock[5];
  _QWORD *v62;
  char v63;
  _OWORD v64[2];
  uint64_t v65;

  v58 = a3 & 1;
  v7 = sub_1000BE878();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100099ACC();
  sub_1000C0F60();
  v60 = v11;
  __chkstk_darwin(v12);
  v57 = (char *)v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)v55 - v15;
  __chkstk_darwin(v17);
  v20 = (char *)v55 - v19;
  if ((a3 & 1) != 0)
  {
    v25 = _swiftEmptyArrayStorage;
    v33 = v59;
  }
  else
  {
    v21 = *(double *)&a2;
    v55[1] = a1;
    LocationModel.identifier.getter(v18);
    v22 = sub_1000C56AC();
    swift_storeEnumTagMultiPayload(v20, v22, 2);
    v23 = sub_1000C4BB8();
    sub_1000916FC((uint64_t)v20, v23);
    v56 = v3;
    sub_1000BA4FC((uint64_t)v20, v3);
    sub_1000F5568();
    v25 = v24;
    v26 = v24[2];
    if (v26 >= v24[3] >> 1)
    {
      sub_1000CCF88();
      v25 = v54;
    }
    sub_100099BA4();
    sub_1004AB310((uint64_t)v20, (uint64_t)v25 + (v28 & ~v27) + *(_QWORD *)(v29 + 72) * v26);
    v55[0] = (id)objc_opt_self(NSTimer);
    sub_10009960C((uint64_t)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    v30 = *(unsigned __int8 *)(v8 + 80);
    v31 = (v30 + 24) & ~v30;
    v32 = swift_allocObject(&unk_100B81E88, v31 + v9, v30 | 7);
    v33 = v59;
    *(_QWORD *)(v32 + 16) = v59;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v32 + v31, v10, v7);
    aBlock[4] = sub_1005B5AB0;
    v62 = (_QWORD *)v32;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10021BA7C;
    aBlock[3] = &unk_100B81EA0;
    v34 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    v35 = objc_msgSend(v55[0], "scheduledTimerWithTimeInterval:repeats:block:", 0, v34, v21);
    _Block_release(v34);

    v3 = v56;
  }
  sub_10009960C((uint64_t)v16);
  v36 = v58 ^ 1;
  v16[*(int *)(sub_1000BA294(&qword_100BDDB50) + 48)] = v36;
  v37 = sub_1000C56AC();
  sub_1000916FC((uint64_t)v16, v37);
  v38 = sub_1000C4BB8();
  sub_1000916FC((uint64_t)v16, v38);
  sub_1000BA4FC((uint64_t)v16, v3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v40 = (uint64_t)v57;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000F5568();
    v25 = v51;
  }
  v41 = v25[2];
  v42 = v3;
  if (v41 >= v25[3] >> 1)
  {
    sub_1000CCF88();
    v25 = v52;
  }
  sub_100099BA4();
  v45 = v44 & ~v43;
  v47 = *(_QWORD *)(v46 + 72);
  sub_1004AB310((uint64_t)v16, (uint64_t)v25 + v45 + v47 * v41);
  v48 = sub_1000B4B70();
  swift_storeEnumTagMultiPayload(v40, v48, 9);
  sub_1000CE604(v40, v38);
  sub_1000BA4FC(v40, v42);
  v49 = v25[2];
  if (v49 >= v25[3] >> 1)
  {
    sub_1000CCF88();
    v25 = v53;
  }
  v25[2] = v49 + 1;
  sub_1004AB310(v40, (uint64_t)v25 + v45 + v49 * v47);
  v50 = *(uint64_t (**)(uint64_t))(v33 + 16);
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  sub_1000A5F84((uint64_t)v64, (uint64_t)aBlock);
  v62 = v25;
  v63 = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10009FF10((uint64_t)aBlock, v50);
  sub_100021A68((uint64_t)aBlock, &qword_100BD3378);
  swift_bridgeObjectRelease();
  sub_100021A68((uint64_t)v64, (uint64_t *)&unk_100BFFA10);
  swift_release();
}

double sub_1005B499C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  _OWORD v11[2];
  uint64_t v12;

  v3 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(uint64_t (**)(uint64_t))(a2 + 16);
  swift_retain();
  LocationModel.identifier.getter(v7);
  v8 = type metadata accessor for LocationViewerViewAction(0);
  swift_storeEnumTagMultiPayload(v5, v8, 2);
  v9 = type metadata accessor for ViewAction(0);
  swift_storeEnumTagMultiPayload(v5, v9, 1);
  swift_storeEnumTagMultiPayload(v5, v3, 6);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  sub_1000A5EBC((uint64_t)v5, (uint64_t)v11, v6);
  sub_100021A68((uint64_t)v11, (uint64_t *)&unk_100BFFA10);
  sub_1000A0AA4((uint64_t)v5);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1005B4AA0()
{
  sub_1005B4D98(6);
}

void sub_1005B4AA8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[5];
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v4 = a1 & 0xFE;
  v5 = *(uint64_t (**)(uint64_t))(v1 + 16);
  sub_1000BA294(&qword_100BD3370);
  sub_100099ACC();
  sub_1000C0F60();
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = sub_1000C6710(v9 + 2 * v7, v8);
  *(_OWORD *)(v10 + 16) = xmmword_10097DA20;
  v11 = v10 + v9;
  v12 = sub_1000C56AC();
  v13 = v11 + v7;
  if (v4 == 2 || (a1 & 1) != 0)
  {
    v14 = v11;
    v15 = 7;
  }
  else
  {
    v14 = v11;
    v15 = 8;
  }
  swift_storeEnumTagMultiPayload(v14, v12, v15);
  v16 = sub_1000C4BB8();
  sub_1000916FC(v11, v16);
  sub_1000BA4FC(v11, v2);
  v17 = type metadata accessor for NotificationsOptInAction(0);
  sub_1000BA4FC(v13, v17);
  v18 = sub_1000E77DC(v13);
  sub_1000BBF20(v18, v19, v20, v21, v22, v23, v24, v25, v36, v38[0], v38[1], v38[2], v38[3], v38[4], v39, v40, v41, v42, v43);
  v39 = v10;
  sub_1000DF788();
  sub_1000860DC();
  v26 = sub_1000D1910((uint64_t)v38, v5);
  sub_1000BD580(v26, &qword_100BD3378, v27);
  v28 = sub_10003BC58();
  sub_1000CFE40(v29, (uint64_t *)&unk_100BFFA10, v30, v31, v32, v33, v34, v35, v37, v38[0], v28);
  sub_10009925C();
  sub_1000D1218();
}

uint64_t sub_1005B4BC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[5];
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v2 = *(uint64_t (**)(uint64_t))(v0 + 16);
  sub_1000BA294(&qword_100BD3370);
  sub_100099ACC();
  sub_1000C0F60();
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = sub_1000C6710(v6 + 2 * v4, v5);
  *(_OWORD *)(v7 + 16) = xmmword_10097DA20;
  v8 = sub_1000C56AC();
  sub_1000DAFB0(v8);
  v9 = sub_1000C4BB8();
  sub_1000916FC(v7 + v6, v9);
  sub_1000BA4FC(v7 + v6, v1);
  v10 = v7 + v6 + v4;
  v11 = type metadata accessor for NotificationsOptInAction(0);
  swift_storeEnumTagMultiPayload(v10, v11, 8);
  v12 = sub_1000E77DC(v10);
  sub_1000BBF20(v12, v13, v14, v15, v16, v17, v18, v19, v31, v33[0], v33[1], v33[2], v33[3], v33[4], v34, v35, v36, v37, v38);
  v34 = v7;
  sub_1000DF788();
  sub_1000860DC();
  v20 = sub_1000D1910((uint64_t)v33, v2);
  sub_1000BD580(v20, &qword_100BD3378, v21);
  v22 = sub_10003BC58();
  sub_1000CFE40(v23, (uint64_t *)&unk_100BFFA10, v24, v25, v26, v27, v28, v29, v32, v33[0], v22);
  return sub_10009925C();
}

void sub_1005B4CC8(unsigned __int8 a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[48];

  v3 = a1;
  v4 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v3)
  {
    sub_10082FB80(a1);
    if ((v8 & 1) != 0)
    {
      v9 = *(uint64_t (**)(uint64_t))(v1 + 16);
      v10 = type metadata accessor for LocationViewerViewAction(0);
      sub_1000CE604((uint64_t)v7, v10);
      v11 = sub_1000C4BB8();
      sub_10009525C((uint64_t)v7, v11);
      sub_1000BA4FC((uint64_t)v7, v4);
      sub_1000BA5F4();
      v12 = sub_1000A5EBC((uint64_t)v7, (uint64_t)v13, v9);
      sub_1000D1350(v12, (uint64_t *)&unk_100BFFA10);
      sub_1000D0D60();
      sub_10009880C();
    }
  }
  sub_10004A2A0();
}

void sub_1005B4D90()
{
  sub_1005B4D98(11);
}

void sub_1005B4D98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[48];

  v3 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100079FBC();
  v5 = sub_1000C56AC();
  swift_storeEnumTagMultiPayload(v1, v5, a1);
  v6 = sub_1000C4BB8();
  sub_1000916FC(v1, v6);
  sub_1000BA4FC(v1, v3);
  sub_1000BA5F4();
  v7 = sub_1000C16A0(v1, (uint64_t)v8);
  sub_1000D1350(v7, (uint64_t *)&unk_100BFFA10);
  sub_1000A0AA4(v1);
  sub_10009880C();
  sub_10004A2A0();
}

void sub_1005B4E38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];

  v6 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098694();
  v8 = *(uint64_t (**)(uint64_t))(v2 + 16);
  *v3 = a1;
  v3[1] = a2;
  v9 = type metadata accessor for LocationsAction(0);
  sub_1000CE604((uint64_t)v3, v9);
  sub_1000CE604((uint64_t)v3, v6);
  sub_1000BA5F4();
  v10 = sub_1000A5EBC((uint64_t)v3, (uint64_t)v11, v8);
  sub_1000D1350(v10, (uint64_t *)&unk_100BFFA10);
  sub_1000A0AA4((uint64_t)v3);
  sub_10009880C();
  sub_10004A2A0();
}

void sub_1005B4ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[40];
  uint64_t v18;
  char v19;
  _BYTE v20[48];

  v2 = type metadata accessor for IndexSet.Index(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100079FBC();
  IndexSet.startIndex.getter();
  v4 = IndexSet.subscript.getter(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v5 = *(uint64_t (**)(uint64_t))(v0 + 16);
  v6 = sub_1000BA294(&qword_100BD3370);
  sub_100099ACC();
  sub_1000C0F60();
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v6, v10 + 2 * v8, v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_10097DA20;
  v12 = (uint64_t *)(v11 + v10);
  *v12 = v4;
  v13 = type metadata accessor for LocationsAction(0);
  swift_storeEnumTagMultiPayload(v12, v13, 4);
  sub_1000CE604((uint64_t)v12, v1);
  v14 = sub_1000B4B70();
  swift_storeEnumTagMultiPayload((char *)v12 + v8, v14, 9);
  v15 = sub_1000C4BB8();
  sub_1000CE604((uint64_t)v12 + v8, v15);
  sub_1000BA4FC((uint64_t)v12 + v8, v1);
  v16 = sub_1000C1F14();
  sub_1000A5F84(v16, (uint64_t)v17);
  v18 = v11;
  v19 = 0;
  sub_10009D4E0();
  sub_1000860DC();
  sub_1000D1910((uint64_t)v17, v5);
  sub_100021A68((uint64_t)v17, &qword_100BD3378);
  sub_10003BC58();
  sub_100021A68((uint64_t)v20, (uint64_t *)&unk_100BFFA10);
  sub_10009925C();
  sub_10009D300();
}

void sub_1005B5050(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  uint64_t (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  if ((a2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a2) & 0xF;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  v57 = *(_QWORD *)(v2 + 16);
  v6 = sub_1000BA294(&qword_100BD3370);
  v7 = sub_100099ACC();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + 2 * v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10097DA20;
  v13 = v12 + v11;
  v14 = sub_1000C56AC();
  swift_storeEnumTagMultiPayload(v12 + v11, v14, 13);
  v15 = sub_1000C4BB8();
  sub_1000916FC(v13, v15);
  sub_1000BA4FC(v13, v7);
  v16 = (_QWORD *)(v13 + v9);
  if (v5)
  {
    *v16 = a1;
    v16[1] = a2;
    v17 = sub_1000B4B70();
    swift_storeEnumTagMultiPayload(v16, v17, 2);
    sub_1000CE604((uint64_t)v16, v15);
    v18 = sub_1000BA4FC((uint64_t)v16, v7);
    sub_1000BBF20(v18, v19, v20, v21, v22, v23, v24, v25, v57, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69);
    v65 = v12;
    sub_1000DF788();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26 = sub_1000D1910((uint64_t)&v60, v58);
    sub_1000BD580(v26, &qword_100BD3378, v27);
    *(_QWORD *)&v28 = swift_bridgeObjectRelease().n128_u64[0];
    sub_1000CFE40(v29, (uint64_t *)&unk_100BFFA10, v30, v31, v32, v33, v34, v35, (uint64_t)v58, v60, v28);
    sub_10009925C();
    sub_1000992EC(v2 + 72, (uint64_t)&v67);
    sub_100043CA8(v2 + 72, (uint64_t)&v60);
    v36 = v63;
    v37 = v64;
    sub_1000DB418(&v60, v63);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v37 + 32))(a1, a2, v36, v37);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v60);
  }
  else
  {
    v38 = sub_1000B4B70();
    swift_storeEnumTagMultiPayload(v16, v38, 7);
    sub_1000CE604((uint64_t)v16, v15);
    v39 = sub_1000BA4FC((uint64_t)v16, v7);
    sub_1000BBF20(v39, v40, v41, v42, v43, v44, v45, v46, v57, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69);
    v65 = v12;
    sub_1000DF788();
    swift_bridgeObjectRetain();
    v47 = sub_1000D1910((uint64_t)&v60, v59);
    sub_1000BD580(v47, &qword_100BD3378, v48);
    *(_QWORD *)&v49 = swift_bridgeObjectRelease().n128_u64[0];
    sub_1000CFE40(v50, (uint64_t *)&unk_100BFFA10, v51, v52, v53, v54, v55, v56, (uint64_t)v59, v60, v49);
    sub_10009925C();
  }
  sub_1000D1218();
}

void sub_1005B5264(char a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE v24[48];

  v4 = sub_100099ACC();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100079FBC();
  v6 = *(uint64_t (**)(uint64_t))(v1 + 16);
  if ((a1 & 1) != 0)
  {
    *v2 = 1;
    v7 = sub_1000C56AC();
    sub_10009525C((uint64_t)v2, v7);
    v8 = sub_1000C4BB8();
    sub_1000916FC((uint64_t)v2, v8);
    sub_1000BA4FC((uint64_t)v2, v4);
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    sub_10009D4E0();
    sub_1000A5EBC((uint64_t)v2, (uint64_t)v20, v6);
    sub_100021A68((uint64_t)v20, (uint64_t *)&unk_100BFFA10);
    sub_1000A0AA4((uint64_t)v2);
  }
  else
  {
    v9 = sub_1000BA294(&qword_100BD3370);
    v10 = *(_QWORD *)(v5 + 72);
    v11 = *(unsigned __int8 *)(v5 + 80);
    v12 = (v11 + 32) & ~v11;
    v13 = swift_allocObject(v9, v12 + 2 * v10, v11 | 7);
    *(_OWORD *)(v13 + 16) = xmmword_10097DA20;
    v14 = (_BYTE *)(v13 + v12);
    *v14 = 0;
    v15 = sub_1000C56AC();
    sub_10009525C((uint64_t)v14, v15);
    v16 = sub_1000C4BB8();
    sub_1000916FC((uint64_t)v14, v16);
    sub_1000BA4FC((uint64_t)v14, v4);
    v17 = (uint64_t)&v14[v10];
    v18 = sub_1000B4B70();
    sub_1000DAFB0(v18);
    sub_1000CE604(v17, v16);
    sub_1000BA4FC(v17, v4);
    v19 = sub_1000C1F14();
    sub_1000A5F84(v19, (uint64_t)v20);
    v22 = v13;
    v23 = 0;
    sub_10009D4E0();
    swift_bridgeObjectRetain();
    sub_1000D1910((uint64_t)v20, v6);
    sub_100021A68((uint64_t)v20, &qword_100BD3378);
    swift_bridgeObjectRelease();
    sub_100021A68((uint64_t)v24, (uint64_t *)&unk_100BFFA10);
  }
  sub_10009925C();
  sub_10009D300();
}

uint64_t sub_1005B541C(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = result & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v5 = result;
    v6 = v2 + 72;
    sub_1000992EC(v6, (uint64_t)v12);
    sub_100043CA8(v6, (uint64_t)v9);
    v7 = v10;
    v8 = v11;
    sub_1000DB418(v9, v10);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v8 + 32))(v5, a2, v7, v8);
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v9);
  }
  return result;
}

void sub_1005B54B8()
{
  sub_1005B4D98(14);
}

uint64_t sub_1005B54C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  __n128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  __int128 aBlock;
  __int128 v25;
  double (*v26)();
  uint64_t v27;

  v2 = v0;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098694();
  v8 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(uint64_t (**)(uint64_t))(v2 + 16);
  *v11 = 1;
  v13 = sub_1000C4BB8();
  sub_1000BA4FC((uint64_t)v11, v13);
  sub_1000BA4FC((uint64_t)v11, v8);
  v26 = 0;
  aBlock = 0u;
  v25 = 0u;
  swift_retain();
  sub_1000A5EBC((uint64_t)v11, (uint64_t)&aBlock, v12);
  sub_100021A68((uint64_t)&aBlock, (uint64_t *)&unk_100BFFA10);
  sub_1000A0AA4((uint64_t)v11);
  swift_release();
  v14 = sub_10009FFE0();
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  v26 = sub_1005B5A38;
  v27 = v2;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v25 = sub_100121D84;
  *((_QWORD *)&v25 + 1) = &unk_100B81E50;
  v16 = _Block_copy(&aBlock);
  swift_retain();
  sub_10009880C();
  static DispatchQoS.unspecified.getter(v17);
  *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
  v18 = sub_1001221E0();
  v19 = sub_1000BA294(&qword_100BD4F10);
  v20 = sub_100121014();
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v19, v20, v3, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v1, v5, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v1, v6);
}

double sub_1005B5704(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  double result;
  _BYTE v14[40];
  uint64_t v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 16);
  v2 = sub_1000BA294(&qword_100BD3370);
  v3 = type metadata accessor for MainAction(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v2, v7 + 2 * v5, v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_10097DA20;
  v9 = (_BYTE *)(v8 + v7);
  *v9 = 1;
  v10 = type metadata accessor for ListViewAction(0);
  swift_storeEnumTagMultiPayload(v9, v10, 1);
  v11 = type metadata accessor for ViewAction(0);
  swift_storeEnumTagMultiPayload(v9, v11, 0);
  swift_storeEnumTagMultiPayload(v9, v3, 6);
  v12 = &v9[v5];
  swift_storeEnumTagMultiPayload(v12, v10, 14);
  swift_storeEnumTagMultiPayload(v12, v11, 0);
  swift_storeEnumTagMultiPayload(v12, v3, 6);
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  sub_1000A5F84((uint64_t)v17, (uint64_t)v14);
  v15 = v8;
  v16 = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10009FF10((uint64_t)v14, v1);
  sub_100021A68((uint64_t)v14, &qword_100BD3378);
  swift_bridgeObjectRelease();
  sub_100021A68((uint64_t)v17, (uint64_t *)&unk_100BFFA10);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t type metadata accessor for ListInteractor()
{
  return objc_opt_self(_TtC7Weather14ListInteractor);
}

void sub_1005B58AC(uint64_t a1)
{
  uint64_t v1;

  sub_1000DB418((_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 56));
  sub_1002CAFB0(a1);
}

void sub_1005B58DC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[48];

  v4 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_1000BC5E8();
  *v2 = a2;
  v6 = sub_1000B4B70();
  sub_10009525C((uint64_t)v2, v6);
  v7 = sub_1000C4BB8();
  sub_1000CE604((uint64_t)v2, v7);
  sub_1000BA4FC((uint64_t)v2, v4);
  sub_1000BA5F4();
  sub_1000860DC();
  v8 = sub_1000C16A0((uint64_t)v2, (uint64_t)v9);
  sub_1000D1350(v8, (uint64_t *)&unk_100BFFA10);
  sub_1000D0D60();
  sub_10009880C();
  sub_10004A2A0();
}

void sub_1005B5978(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;

  v4 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_1000BC5E8();
  swift_retain();
  swift_errorRetain(a2);
  CodableError.init(_:)(a2);
  v6 = sub_1000B4B70();
  sub_1000916FC(v2, v6);
  v7 = sub_1000C4BB8();
  sub_1000CE604(v2, v7);
  sub_1000BA4FC(v2, v4);
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v8 = sub_1000C16A0(v2, (uint64_t)v9);
  sub_1000D1350(v8, (uint64_t *)&unk_100BFFA10);
  sub_1000D0D60();
  sub_10009880C();
  sub_10004A2A0();
}

double sub_1005B5A38()
{
  uint64_t v0;

  return sub_1005B5704(v0);
}

uint64_t sub_1005B5A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = sub_1000BE878();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = swift_release();
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

double sub_1005B5AB0(uint64_t a1)
{
  uint64_t v1;

  sub_1000BE878();
  return sub_1005B499C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1005B5AF4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 88, 7);
}

double destroy for ReportWeatherConditionsView(_QWORD *a1)
{
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[23]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[25]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ReportWeatherConditionsView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = *a2;
  v15 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v15;
  v14 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v14;
  v4 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v5 = a2[8];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = v5;
  v6 = a2[10];
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_QWORD *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
  v7 = a2[13];
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = v7;
  v8 = a2[15];
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_QWORD *)(a1 + 120) = v8;
  *(_WORD *)(a1 + 128) = *((_WORD *)a2 + 64);
  v9 = a2[18];
  *(_QWORD *)(a1 + 136) = a2[17];
  *(_QWORD *)(a1 + 144) = v9;
  v10 = a2[20];
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = v10;
  *(_WORD *)(a1 + 168) = *((_WORD *)a2 + 84);
  v11 = a2[23];
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_QWORD *)(a1 + 184) = v11;
  v12 = a2[25];
  *(_QWORD *)(a1 + 192) = a2[24];
  *(_QWORD *)(a1 + 200) = v12;
  *(_WORD *)(a1 + 208) = *((_WORD *)a2 + 104);
  swift_retain(v3);
  swift_retain(v15);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t *assignWithCopy for ReportWeatherConditionsView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  a1[7] = a2[7];
  v12 = a2[8];
  v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[9] = a2[9];
  v14 = a2[10];
  v15 = a1[10];
  a1[10] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a1 + 89) = *((_BYTE *)a2 + 89);
  a1[12] = a2[12];
  v16 = a2[13];
  v17 = a1[13];
  a1[13] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  a1[14] = a2[14];
  v18 = a2[15];
  v19 = a1[15];
  a1[15] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
  *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
  a1[17] = a2[17];
  v20 = a2[18];
  v21 = a1[18];
  a1[18] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  a1[19] = a2[19];
  v22 = a2[20];
  v23 = a1[20];
  a1[20] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *((_BYTE *)a1 + 168) = *((_BYTE *)a2 + 168);
  *((_BYTE *)a1 + 169) = *((_BYTE *)a2 + 169);
  a1[22] = a2[22];
  v24 = a2[23];
  v25 = a1[23];
  a1[23] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  a1[24] = a2[24];
  v26 = a2[25];
  v27 = a1[25];
  a1[25] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *((_BYTE *)a1 + 208) = *((_BYTE *)a2 + 208);
  *((_BYTE *)a1 + 209) = *((_BYTE *)a2 + 209);
  return a1;
}

void *initializeWithTake for ReportWeatherConditionsView(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD2uLL);
}

uint64_t assignWithTake for ReportWeatherConditionsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v11;
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v13 = *(_QWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 120);
  v16 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  v17 = *(_QWORD *)(a2 + 144);
  v18 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v17;
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 160);
  v20 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v19;
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  v21 = *(_QWORD *)(a2 + 184);
  v22 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v21;
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 200);
  v24 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v23;
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReportWeatherConditionsView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 210))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReportWeatherConditionsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 208) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 210) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 210) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReportWeatherConditionsView()
{
  return &type metadata for ReportWeatherConditionsView;
}

uint64_t sub_1005B6080(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABA0A4, 1);
}

uint64_t sub_1005B6090@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, __n128);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t WitnessTable;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v42 = a5;
  v44 = a2;
  v49 = a7;
  v11 = type metadata accessor for Optional(255, a4);
  v52 = a6;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v11);
  v46 = v11;
  v12 = type metadata accessor for TagValueTraitKey.Value(0, v11);
  v47 = *(_QWORD *)(v12 - 8);
  v48 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - v13;
  v15 = type metadata accessor for TagValueTraitKey.Value(0, a4);
  v39 = *(_QWORD *)(v15 - 8);
  v40 = v15;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v38 - v17;
  v19 = type metadata accessor for TagValueTraitKey(255, a4, a6, v16);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for TagValueTraitKey<A>, v19);
  v41 = type metadata accessor for _TraitWritingModifier(255, v19, v20);
  v21 = type metadata accessor for ModifiedContent(0, a3, v41);
  v43 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v38 - v23;
  v25 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(a4 - 8) + 16);
  v38 = a1;
  v25(v18, a1, a4, v22);
  v26 = 1;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v18, 0, 1, a4);
  v27 = v19;
  v28 = v19;
  v29 = v42;
  View._trait<A>(_:_:)(v27, v18, a3, v28, v42, v20);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v18, v40);
  if ((v44 & 1) != 0)
  {
    ((void (*)(char *, uint64_t, uint64_t))v25)(v14, v38, a4);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, a4);
    v26 = 0;
  }
  v30 = v46;
  v31 = swift_checkMetadataState(0, v46);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, v26, 1, v31);
  v33 = type metadata accessor for TagValueTraitKey(0, v30, WitnessTable, v32);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v41);
  v50 = v29;
  v51 = v34;
  v35 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v21);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for TagValueTraitKey<A>, v33);
  View._trait<A>(_:_:)(v33, v14, v21, v33, v35, v36);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v14, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v24, v21);
}

uint64_t sub_1005B6364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;

  v1 = type metadata accessor for AutomationInfo(0);
  __chkstk_darwin(v1);
  v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_1000BA294(&qword_100BD98D0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v21._countAndFlagsBits = 0xD000000000000053;
  v21._object = (void *)0x8000000100A0C480;
  v9._object = (void *)0x8000000100A0C460;
  v9._countAndFlagsBits = 0xD000000000000012;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v21);

  v18 = v11;
  v19 = 0;
  v20 = 0;
  v17 = v0;
  v12 = sub_1000BA294(&qword_100BF2D60);
  v13 = sub_100483224();
  sub_10005F124(&qword_100BF2D68, &qword_100BF2D60, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Section<>.init(header:content:)(&v18, sub_1005B71C4, v16, &type metadata for SectionHeader, v12, v13);
  v14 = type metadata accessor for AutomationCellInfo(0);
  swift_storeEnumTagMultiPayload(v3, v14, 20);
  swift_storeEnumTagMultiPayload(v3, v1, 1);
  sub_100335474();
  sub_1002BA0F0((uint64_t)v3);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

double sub_1005B6560@<D0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v66[27];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[2];
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[2];
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108[27];
  _QWORD v109[25];
  _QWORD v110[25];
  _QWORD v111[25];
  uint64_t v112[27];
  _QWORD v113[25];
  _QWORD v114[25];
  _QWORD v115[25];
  uint64_t v116[27];
  _QWORD v117[25];
  _QWORD v118[25];
  _QWORD v119[25];
  uint64_t v120[27];
  _BYTE __dst[210];
  uint64_t __src[27];
  _QWORD v123[25];
  _QWORD v124[25];
  uint64_t v125[27];
  _QWORD v126[25];
  _QWORD v127[25];
  _QWORD v128[26];

  memcpy(__dst, a1, sizeof(__dst));
  memcpy(v125, a1, 0xD2uLL);
  v3 = sub_1000BA294(qword_100BF2D70);
  Binding.projectedValue.getter(v3);
  KeyPath = swift_getKeyPath(&unk_1009B16A0);
  memcpy(v125, __src, 0xD2uLL);
  Binding.subscript.getter(v120, KeyPath, v3);
  swift_release();
  sub_100483144(__src);
  v63 = v120[1];
  v64 = v120[0];
  v62 = v120[2];
  memcpy(v125, a1, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  v60 = v123[0];
  v61 = v123[1];
  swift_bridgeObjectRetain();
  sub_1001F53E4(v123);
  memcpy(v125, a1, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  v58 = v124[2];
  v59 = v124[3];
  swift_bridgeObjectRetain();
  sub_1001F53E4(v124);
  memcpy(v120, a1, 0xD2uLL);
  Binding.projectedValue.getter(v3);
  v5 = swift_getKeyPath(&unk_1009B16C0);
  memcpy(v120, v125, 0xD2uLL);
  Binding.subscript.getter(v116, v5, v3);
  swift_release();
  sub_100483144(v125);
  v56 = v116[1];
  v57 = v116[0];
  v55 = v116[2];
  memcpy(v120, a1, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  v53 = v126[6];
  v54 = v126[5];
  swift_bridgeObjectRetain();
  sub_1001F53E4(v126);
  memcpy(v120, a1, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  v51 = v127[8];
  v52 = v127[7];
  swift_bridgeObjectRetain();
  sub_1001F53E4(v127);
  memcpy(v120, a1, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  memcpy(v128, v116, 0xC2uLL);
  sub_1001F53E4(v128);
  if (LOBYTE(v128[9]) == 1)
  {
    memcpy(v116, a1, 0xD2uLL);
    Binding.projectedValue.getter(v3);
    v6 = swift_getKeyPath(&unk_1009B17C0);
    memcpy(v116, v120, 0xD2uLL);
    Binding.subscript.getter(v112, v6, v3);
    swift_release();
    sub_100483144(v120);
    v49 = v112[1];
    v50 = v112[0];
    v48 = LOBYTE(v112[2]);
    if (qword_100BC2180 != -1)
      swift_once(&qword_100BC2180, sub_100517698);
    v47 = qword_100CAECA0;
    swift_bridgeObjectRetain();
  }
  else
  {
    v49 = 0;
    v50 = 0;
    v47 = 0;
    v48 = 0;
  }
  memcpy(v116, __dst, 0xD2uLL);
  Binding.projectedValue.getter(v3);
  v7 = swift_getKeyPath(&unk_1009B16E8);
  memcpy(v116, v120, 0xD2uLL);
  Binding.subscript.getter(v112, v7, v3);
  swift_release();
  sub_100483144(v120);
  v45 = v112[1];
  v46 = v112[0];
  v44 = v112[2];
  memcpy(v116, __dst, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  v42 = v117[10];
  v43 = v117[11];
  swift_bridgeObjectRetain();
  sub_1001F53E4(v117);
  memcpy(v116, __dst, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  v40 = v118[12];
  v41 = v118[13];
  swift_bridgeObjectRetain();
  sub_1001F53E4(v118);
  memcpy(v116, __dst, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  memcpy(v119, v112, 0xC2uLL);
  sub_1001F53E4(v119);
  if (LOBYTE(v119[14]) == 1)
  {
    memcpy(v112, __dst, 0xD2uLL);
    Binding.projectedValue.getter(v3);
    v8 = swift_getKeyPath(&unk_1009B17A0);
    memcpy(v112, v116, 0xD2uLL);
    Binding.subscript.getter(v108, v8, v3);
    swift_release();
    sub_100483144(v116);
    v38 = v108[1];
    v39 = v108[0];
    v37 = LOBYTE(v108[2]);
    if (qword_100BC2188 != -1)
      swift_once(&qword_100BC2188, sub_1005176D4);
    v36 = qword_100CAECA8;
    swift_bridgeObjectRetain();
  }
  else
  {
    v38 = 0;
    v39 = 0;
    v36 = 0;
    v37 = 0;
  }
  memcpy(v112, __dst, 0xD2uLL);
  Binding.projectedValue.getter(v3);
  v9 = swift_getKeyPath(&unk_1009B1710);
  memcpy(v112, v116, 0xD2uLL);
  Binding.subscript.getter(v108, v9, v3);
  swift_release();
  sub_100483144(v116);
  v34 = v108[1];
  v35 = v108[0];
  v33 = (char)v108[2];
  memcpy(v112, __dst, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  v31 = v113[15];
  v32 = v113[16];
  swift_bridgeObjectRetain();
  sub_1001F53E4(v113);
  memcpy(v112, __dst, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  v29 = v114[17];
  v30 = v114[18];
  swift_bridgeObjectRetain();
  sub_1001F53E4(v114);
  memcpy(v112, __dst, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  memcpy(v115, v108, 0xC2uLL);
  sub_1001F53E4(v115);
  if (LOBYTE(v115[19]) == 1)
  {
    memcpy(v108, __dst, 0xD2uLL);
    Binding.projectedValue.getter(v3);
    v10 = swift_getKeyPath(&unk_1009B1780);
    memcpy(v108, v112, 0xD2uLL);
    Binding.subscript.getter(v66, v10, v3);
    swift_release();
    sub_100483144(v112);
    v27 = v66[1];
    v28 = v66[0];
    v26 = LOBYTE(v66[2]);
    if (qword_100BC2190 != -1)
      swift_once(&qword_100BC2190, sub_100517710);
    v25 = qword_100CAECB0;
    swift_bridgeObjectRetain();
  }
  else
  {
    v27 = 0;
    v28 = 0;
    v25 = 0;
    v26 = 0;
  }
  memcpy(v108, __dst, 0xD2uLL);
  Binding.projectedValue.getter(v3);
  v11 = swift_getKeyPath(&unk_1009B1738);
  memcpy(v108, v112, 0xD2uLL);
  Binding.subscript.getter(v66, v11, v3);
  swift_release();
  sub_100483144(v112);
  v12 = v66[0];
  v13 = v66[1];
  v14 = v66[2];
  memcpy(v108, __dst, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  v15 = v109[20];
  v16 = v109[21];
  swift_bridgeObjectRetain();
  sub_1001F53E4(v109);
  memcpy(v108, __dst, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  v17 = v110[22];
  v18 = v110[23];
  swift_bridgeObjectRetain();
  sub_1001F53E4(v110);
  memcpy(v108, __dst, 0xD2uLL);
  Binding.wrappedValue.getter(v3);
  memcpy(v111, v66, 0xC2uLL);
  sub_1001F53E4(v111);
  if (LOBYTE(v111[24]) == 1)
  {
    memcpy(v66, __dst, 0xD2uLL);
    Binding.projectedValue.getter(v3);
    v19 = swift_getKeyPath(&unk_1009B1760);
    memcpy(v66, v108, 0xD2uLL);
    Binding.subscript.getter(&v101, v19, v3);
    swift_release();
    sub_100483144((uint64_t *)v108);
    v20 = v101;
    v21 = v102;
    v22 = v103;
    if (qword_100BC2198 != -1)
      swift_once(&qword_100BC2198, sub_10051774C);
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v66[0] = v64;
  v66[1] = v63;
  LOBYTE(v66[2]) = v62;
  v66[3] = v60;
  v66[4] = v61;
  v66[5] = v58;
  v66[6] = v59;
  v101 = v57;
  v102 = v56;
  v103 = v55;
  v104 = v54;
  v105 = v53;
  v106 = v52;
  v107 = v51;
  v97 = v50;
  v98 = v49;
  v99 = v48;
  v100 = v47;
  v91[0] = v46;
  v91[1] = v45;
  v92 = v44;
  v108[0] = v66;
  v108[1] = &v101;
  v93 = v42;
  v94 = v43;
  v95 = v40;
  v96 = v41;
  v108[2] = &v97;
  v108[3] = v91;
  v87 = v39;
  v88 = v38;
  v89 = v37;
  v90 = v36;
  v81[0] = v35;
  v81[1] = v34;
  v82 = v33;
  v83 = v31;
  v84 = v32;
  v85 = v29;
  v86 = v30;
  v108[4] = (uint64_t *)&v87;
  v108[5] = v81;
  v77 = v28;
  v78 = v27;
  v79 = v26;
  v80 = v25;
  v71[0] = v12;
  v71[1] = v13;
  v72 = v14;
  v73 = v15;
  v74 = v16;
  v75 = v17;
  v76 = v18;
  v108[6] = &v77;
  v108[7] = v71;
  v67 = v20;
  v68 = v21;
  v69 = v22;
  v70 = v23;
  v108[8] = &v67;
  sub_10035E204(v108, a2);
  sub_1005B725C(v67, v68, v69, v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1005B725C(v77, v78, v79, v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1005B725C((uint64_t)v87, (uint64_t)v88, v89, v90);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1005B725C(v97, v98, v99, v100);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1005B717C()
{
  const void *v0;
  _BYTE __dst[210];

  memcpy(__dst, v0, sizeof(__dst));
  return sub_1005B6364();
}

double sub_1005B71C4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1005B6560(*(const void **)(v1 + 16), a1);
}

void sub_1005B71CC(_BYTE *a1@<X8>)
{
  sub_1000BC604(a1);
}

void sub_1005B71D4(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_1000C3D40(a1);
  sub_100517688(v1);
  sub_10004A298();
}

void sub_1005B71F0(_BYTE *a1@<X8>)
{
  sub_1000BC604(a1);
}

void sub_1005B71F8(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_1000C3D40(a1);
  sub_1005176C4(v1);
  sub_10004A298();
}

void sub_1005B7214(_BYTE *a1@<X8>)
{
  sub_1000BC604(a1);
}

void sub_1005B721C(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_1000C3D40(a1);
  sub_100517700(v1);
  sub_10004A298();
}

void sub_1005B7238(_BYTE *a1@<X8>)
{
  sub_1000BC604(a1);
}

void sub_1005B7240(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = sub_1000C3D40(a1);
  sub_10051773C(v1);
  sub_10004A298();
}

uint64_t sub_1005B725C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  if (a2)
  {
    v5 = result;
    swift_release(a2);
    swift_bridgeObjectRelease(a4);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_1005B7298(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Binding(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 40);
    return 0;
  }
  return result;
}

uint64_t *sub_1005B7310(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t *v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    v13 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v15 = *v14;
    *v13 = *v14;
    v16 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v17 = ((unint64_t)v14 + v6 + 8) & ~v6;
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 16);
    swift_retain(v9);
    v19 = swift_retain(v15);
    v18(v16, v17, v4, v19);
    v20 = (uint64_t *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
    v21 = *v20;
    *(_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *v20;
    swift_bridgeObjectRetain(v21);
  }
  return a1;
}

double sub_1005B7424(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = (unint64_t)a1 + 15;
  swift_release(*a1);
  v4 &= 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)v4);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))((v4 + v6 + 8) & ~v6);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(((unint64_t)a1
                                                            + *(_QWORD *)(v5 + 64)
                                                            + ((v6 + 16) & ~v6)
                                                            + 7) & 0xFFFFFFFFFFFFF8)).n128_u64[0];
  return result;
}

uint64_t *sub_1005B74A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;

  v5 = *a2;
  *a1 = *a2;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = *v7;
  *v6 = *v7;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v6 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v7 + v11 + 8) & ~v11;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 16);
  swift_retain(v5);
  v15 = swift_retain(v8);
  v14(v12, v13, v9, v15);
  v16 = ((v11 + 16) & ~v11) + *(_QWORD *)(v10 + 64) + 7;
  v17 = (_QWORD *)(((unint64_t)a1 + v16) & 0xFFFFFFFFFFFFF8);
  v18 = (uint64_t *)(((unint64_t)a2 + v16) & 0xFFFFFFFFFFFFF8);
  v19 = *v18;
  *v17 = *v18;
  swift_bridgeObjectRetain(v19);
  return a1;
}

uint64_t *sub_1005B7578(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a1;
  v8 = (unint64_t)a2 + 15;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v9 = (uint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v8;
  v11 = *v9;
  *v9 = *(_QWORD *)v8;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))(((unint64_t)v9 + v13 + 8) & ~v13, (v13 + 8 + v8) & ~v13);
  v14 = ((v13 + 16) & ~v13) + *(_QWORD *)(v12 + 64) + 7;
  v15 = (uint64_t *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8);
  v16 = (uint64_t *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFF8);
  v17 = *v16;
  v18 = *v15;
  *v15 = *v16;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  return a1;
}

_QWORD *sub_1005B7654(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v5 + v8 + 8) & ~v8, ((unint64_t)v6 + v8 + 8) & ~v8);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
  *(_QWORD *)(((unint64_t)a1 + v9) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *sub_1005B76F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v6 = *a1;
  v7 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release(v6);
  v8 = (uint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v9 = *v8;
  *v8 = *(_QWORD *)v7;
  swift_release(v9);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))(((unint64_t)v8 + v11 + 8) & ~v11, (v11 + 8 + v7) & ~v11);
  v12 = ((v11 + 16) & ~v11) + *(_QWORD *)(v10 + 64) + 7;
  v13 = (uint64_t *)(((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  *v13 = *(_QWORD *)(((unint64_t)a2 + v12) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_1005B77B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t *v13;
  unint64_t v14;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v5 + 80);
  if (v7 >= a2)
  {
    v13 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 0x80000000) != 0)
    {
      return _s7Weather24LocationCompositionStateOwet_0(((unint64_t)v13 + v8 + 8) & ~v8, v6, v4);
    }
    else
    {
      v14 = *v13;
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v5 + 64) + ((v8 + 16) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1005B7844 + 4 * byte_1009B1620[v11]))();
  }
}

void sub_1005B78C8(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  if (v6 >= a3)
  {
    v10 = 0;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~*(unsigned __int8 *)(v5 + 80)) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
  }
  if (a2 > v6)
  {
    if ((_DWORD)v7)
    {
      v11 = ~v6 + a2;
      bzero(a1, v7);
      *a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_1005B79C8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a1)
  {
    v7 = (_QWORD *)((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((a2 & 0x80000000) != 0)
    {
      return _s7Weather24LocationCompositionStateOwst_0(((unint64_t)v7 + v4 + 8) & a4, a1, a2, a3);
    }
    else
    {
      if ((a1 & 0x80000000) != 0)
        v8 = a1 ^ 0x80000000;
      else
        v8 = (a1 - 1);
      *v7 = v8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ConditionPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionPicker);
}

double destroy for ConditionToggle(_QWORD *a1)
{
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[6]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ConditionToggle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v5;
  v6 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v6;
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for ConditionToggle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t assignWithTake for ConditionToggle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

ValueMetadata *type metadata accessor for ConditionToggle()
{
  return &type metadata for ConditionToggle;
}

unint64_t sub_1005B7C14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF2DF8;
  if (!qword_100BF2DF8)
  {
    v1 = sub_100075EB0(&qword_100BD98D8);
    sub_1005B7C80();
    sub_1005B7D10();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2DF8);
  }
  return result;
}

unint64_t sub_1005B7C80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF2E00;
  if (!qword_100BF2E00)
  {
    v1 = sub_100075EB0(&qword_100BD98D0);
    sub_100483224();
    sub_10005F124(&qword_100BF2D68, &qword_100BF2D60, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF2E00);
  }
  return result;
}

unint64_t sub_1005B7D10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC6768;
  if (!qword_100BC6768)
  {
    v1 = type metadata accessor for AutomationInfoViewModifier(255);
    result = swift_getWitnessTable(&unk_10099E6AC, v1);
    atomic_store(result, (unint64_t *)&qword_100BC6768);
  }
  return result;
}

uint64_t sub_1005B7D50(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABA10C, 1);
}

uint64_t sub_1005B7D60()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  v7 = *v0;
  v8 = *((_BYTE *)v0 + 16);
  v1 = sub_1000BA294((uint64_t *)&unk_100BD4270);
  Binding.projectedValue.getter(v1);
  v6 = v0;
  v2 = sub_1000BA294(&qword_100BCF180);
  v3 = sub_10005F124(&qword_100BCF188, &qword_100BCF180, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  return Toggle.init(isOn:label:)(v9, v10, v11, sub_1005B8DA8, &v5, v2, v3);
}

uint64_t sub_1005B7E20(uint64_t a1)
{
  _QWORD v2[4];
  _BYTE v3[16];
  uint64_t v4;

  v4 = a1;
  v2[2] = a1;
  return Label.init(title:icon:)(sub_1005B8DB0, v3, sub_1005B8DB8, v2, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_1005B7E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[2];

  v3 = *(_QWORD *)(a1 + 32);
  v9[0] = *(_QWORD *)(a1 + 24);
  v9[1] = v3;
  v4 = sub_100114EF8();
  swift_bridgeObjectRetain();
  result = Text.init<A>(_:)(v9, &type metadata for String, v4);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v7 & 1;
  *(_QWORD *)(a2 + 24) = v8;
  return result;
}

uint64_t sub_1005B7EE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = sub_1000BA294(&qword_100BDD818);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRetain();
  v9 = Image.init(systemName:)(v8, v7);
  static Image.TemplateRenderingMode.macSafeOriginal.getter();
  v10 = type metadata accessor for Image.TemplateRenderingMode(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 0, 1, v10);
  v11 = Image.renderingMode(_:)(v6, v9);
  swift_release();
  result = sub_1005B8DC0((uint64_t)v6);
  *a2 = v11;
  return result;
}

uint64_t sub_1005B7FAC(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for Binding(0, *(_QWORD *)(a1 + 16));
  return Binding.projectedValue.getter(v1);
}

uint64_t sub_1005B7FD8()
{
  return sub_1005B7D60();
}

uint64_t sub_1005B8018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  v5 = v2;
  return swift_getOpaqueTypeConformance2(&v4, &unk_100ABA0CC, 1);
}

uint64_t sub_1005B8054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t OpaqueTypeConformance2;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105[16];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;

  v103 = a2;
  v104 = type metadata accessor for InlinePickerStyle(0);
  v102 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v101 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Binding(0, v4);
  __chkstk_darwin(v5);
  v99 = (char *)&v79 - v6;
  v7 = type metadata accessor for Array(255, v4);
  v8 = *(_QWORD *)(a1 + 32);
  v10 = type metadata accessor for TagValueTraitKey(255, v4, v8, v9);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TagValueTraitKey<A>, v10);
  v12 = type metadata accessor for _TraitWritingModifier(255, v10, WitnessTable);
  v13 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v12);
  v14 = type metadata accessor for Optional(255, v4);
  v125 = v8;
  v15 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v14);
  v17 = type metadata accessor for TagValueTraitKey(255, v14, v15, v16);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for TagValueTraitKey<A>, v17);
  v19 = type metadata accessor for _TraitWritingModifier(255, v17, v18);
  v20 = type metadata accessor for ModifiedContent(255, v13, v19);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  v114 = (_QWORD *)v7;
  v115 = v4;
  v90 = v4;
  v116 = v20;
  v117 = (void *)v21;
  v89 = v8;
  v118 = v8;
  v22 = type metadata accessor for ForEach(255, &v114);
  v23 = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v12);
  v123 = &protocol witness table for Text;
  v124 = v23;
  v24 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v19);
  v121 = v24;
  v122 = v25;
  v120 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v20);
  v94 = v22;
  v91 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v22);
  v114 = &type metadata for Text;
  v115 = v4;
  v116 = v22;
  v117 = &protocol witness table for Text;
  v118 = v8;
  v119 = v91;
  v26 = type metadata accessor for Picker(0, &v114);
  v98 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v88 = (char *)&v79 - v27;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for Picker<A, B, C>, v26);
  v29 = v104;
  v114 = (_QWORD *)v26;
  v115 = v104;
  v116 = v28;
  v117 = &protocol witness table for InlinePickerStyle;
  v30 = v28;
  v83 = v28;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v114, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 0);
  v95 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v82 = (char *)&v79 - v32;
  v114 = (_QWORD *)v26;
  v115 = v29;
  v116 = v30;
  v117 = &protocol witness table for InlinePickerStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v114, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
  v114 = (_QWORD *)OpaqueTypeMetadata2;
  v115 = OpaqueTypeConformance2;
  v33 = swift_getOpaqueTypeMetadata2(0, &v114, &opaque type descriptor for <<opaque return type of View.labelsHidden()>>, 0);
  v92 = *(_QWORD *)(v33 - 8);
  v87 = v33;
  __chkstk_darwin(v33);
  v80 = (char *)&v79 - v34;
  v36 = type metadata accessor for ModifiedContent(0, v35, &type metadata for _PaddingLayout);
  v37 = *(_QWORD *)(v36 - 8);
  v86 = v36;
  v96 = v37;
  __chkstk_darwin(v36);
  v81 = (char *)&v79 - v38;
  v39 = sub_100075EB0((uint64_t *)&unk_100C09EE0);
  v40 = type metadata accessor for ModifiedContent(0, v36, v39);
  v97 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v84 = (char *)&v79 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v93 = (char *)&v79 - v43;
  v44 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
  v46 = v45;
  LOBYTE(v20) = v47;
  v49 = v48;
  v50 = v99;
  v51 = a1;
  v52 = a1;
  v53 = v100;
  sub_1005B7FAC(v52);
  v54 = *(_QWORD *)(v51 + 24);
  v106 = v90;
  v107 = v54;
  v108 = v89;
  v109 = v53;
  v55 = v20 & 1;
  v56 = v88;
  v57 = Picker<>.init(_:selection:content:)(v44, v46, v55, v49, v50, sub_1005B8D80, v105, v90, v94, v89, v91);
  v58 = v101;
  InlinePickerStyle.init()(v57);
  v59 = v82;
  v60 = v104;
  View.pickerStyle<A>(_:)(v58, v26, v104, v83, &protocol witness table for InlinePickerStyle);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v58, v60);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v56, v26);
  v61 = v80;
  v62 = OpaqueTypeConformance2;
  View.labelsHidden()(OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v63 = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v59, OpaqueTypeMetadata2);
  v64 = static Edge.Set.leading.getter(v63);
  v114 = (_QWORD *)OpaqueTypeMetadata2;
  v115 = v62;
  v65 = swift_getOpaqueTypeConformance2(&v114, &opaque type descriptor for <<opaque return type of View.labelsHidden()>>, 1);
  v66 = v81;
  v67 = v87;
  View.padding(_:_:)(v64, 0x4043000000000000, 0, v87, v65);
  v68.n128_f64[0] = (*(double (**)(char *, uint64_t))(v92 + 8))(v61, v67);
  v69 = static Color.blue.getter(v68);
  v112 = v65;
  v113 = &protocol witness table for _PaddingLayout;
  v70 = v86;
  v71 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v86);
  v72 = v84;
  View.accentColor(_:)(v69, v70, v71);
  v73 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v96 + 8))(v66, v70, v73);
  v74 = sub_10005F124((unint64_t *)&qword_100BC4B98, (uint64_t *)&unk_100C09EE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v110 = v71;
  v111 = v74;
  v75 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v40);
  v76 = (uint64_t)v93;
  sub_1000B2074(v72, v40, v75);
  v77 = *(void (**)(char *, uint64_t))(v97 + 8);
  v77(v72, v40);
  sub_1000B1100(v76, v40, v103);
  return ((uint64_t (*)(uint64_t, uint64_t))v77)(v76, v40);
}

uint64_t sub_1005B87DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t KeyPath;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[7];

  v41 = a5;
  v9 = type metadata accessor for Array(255, a2);
  v11 = type metadata accessor for TagValueTraitKey(255, a2, a4, v10);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TagValueTraitKey<A>, v11);
  v40 = type metadata accessor for _TraitWritingModifier(255, v11, WitnessTable);
  v35 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v40);
  v13 = type metadata accessor for Optional(255, a2);
  v50[5] = a4;
  v14 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v13);
  v16 = type metadata accessor for TagValueTraitKey(255, v13, v14, v15);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for TagValueTraitKey<A>, v16);
  v36 = type metadata accessor for _TraitWritingModifier(255, v16, v17);
  v18 = type metadata accessor for ModifiedContent(255, v35, v36);
  v38 = v9;
  v37 = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  v50[0] = v9;
  v50[1] = a2;
  v50[2] = v18;
  v50[3] = v37;
  v50[4] = a4;
  v19 = type metadata accessor for ForEach(0, v50);
  v39 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v34 - v23;
  v50[0] = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ConditionPicker(0, a2, a3, a4) + 44));
  v42 = a2;
  v43 = a3;
  v44 = a4;
  KeyPath = swift_getKeyPath(&unk_1009B18B8);
  v26 = (_QWORD *)swift_allocObject(&unk_100B82068, 40, 7);
  v26[2] = a2;
  v26[3] = a3;
  v26[4] = a4;
  swift_bridgeObjectRetain();
  v27 = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v40);
  v48 = &protocol witness table for Text;
  v49 = v27;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v35);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v36);
  v46 = v28;
  v47 = v29;
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  ForEach<>.init(_:id:content:)(v50, KeyPath, sub_1005B8D9C, v26, v38, v18, v37, a4, v30);
  v45 = v30;
  v31 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v19);
  sub_1000B2074(v21, v19, v31);
  v32 = *(void (**)(char *, uint64_t))(v39 + 8);
  v32(v21, v19);
  sub_1000B1100((uint64_t)v24, v19, v41);
  return ((uint64_t (*)(char *, uint64_t))v32)(v24, v19);
}

uint64_t sub_1005B8AE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;

  v41 = a4;
  v38 = a3;
  v8 = type metadata accessor for TagValueTraitKey(255, a2, a3, a5);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TagValueTraitKey<A>, v8);
  v40 = type metadata accessor for _TraitWritingModifier(255, v8, WitnessTable);
  v36 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v40);
  v10 = type metadata accessor for Optional(255, a2);
  v50 = a3;
  v11 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v10);
  v13 = type metadata accessor for TagValueTraitKey(255, v10, v11, v12);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for TagValueTraitKey<A>, v13);
  v37 = type metadata accessor for _TraitWritingModifier(255, v13, v14);
  v15 = type metadata accessor for ModifiedContent(0, v36, v37);
  v39 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v35 - v19;
  v46 = dispatch thunk of CustomStringConvertible.description.getter(a2);
  v47 = v21;
  v22 = sub_100114EF8();
  v23 = Text.init<A>(_:)(&v46, &type metadata for String, v22);
  v25 = v24;
  v46 = v23;
  v47 = v24;
  v27 = v26 & 1;
  v48 = v26 & 1;
  v49 = v28;
  sub_1005B6090(a1, 1, (uint64_t)&type metadata for Text, a2, (uint64_t)&protocol witness table for Text, v38, (uint64_t)v17);
  sub_1000D31B4(v23, v25, v27);
  swift_bridgeObjectRelease();
  v29 = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v40);
  v44 = &protocol witness table for Text;
  v45 = v29;
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v36);
  v31 = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v37);
  v42 = v30;
  v43 = v31;
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  sub_1000B2074(v17, v15, v32);
  v33 = *(void (**)(char *, uint64_t))(v39 + 8);
  v33(v17, v15);
  sub_1000B1100((uint64_t)v20, v15, v41);
  return ((uint64_t (*)(char *, uint64_t))v33)(v20, v15);
}

uint64_t sub_1005B8D80@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1005B87DC(v1[5], v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1005B8D8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1005B8D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;

  return sub_1005B8AE4(a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 32), a2, a3);
}

uint64_t sub_1005B8DA8()
{
  uint64_t v0;

  return sub_1005B7E20(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1005B8DB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1005B7E7C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1005B8DB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1005B7EE4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1005B8DC0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BDD818);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1005B8E00(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *a1;
  v2 = a1[2];
  v3 = type metadata accessor for Array(255, *a1);
  v5 = type metadata accessor for TagValueTraitKey(255, v1, v2, v4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TagValueTraitKey<A>, v5);
  v7 = type metadata accessor for _TraitWritingModifier(255, v5, WitnessTable);
  v8 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v7);
  v9 = type metadata accessor for Optional(255, v1);
  v45 = v2;
  v10 = sub_1000C4770((uint64_t)&protocol conformance descriptor for <A> A?);
  v12 = type metadata accessor for TagValueTraitKey(255, v9, v10, v11);
  v13 = sub_1000C4770((uint64_t)&protocol conformance descriptor for TagValueTraitKey<A>);
  v14 = type metadata accessor for _TraitWritingModifier(255, v12, v13);
  type metadata accessor for ModifiedContent(255, v8, v14);
  swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
  v15 = sub_1000C2D04();
  v17 = type metadata accessor for ForEach(v15, v16);
  v43 = &protocol witness table for Text;
  v44 = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v7);
  v41 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  v42 = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v14);
  v40 = sub_1000C4770((uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v38 = v2;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v17);
  v18 = sub_1000C2D04();
  v20 = type metadata accessor for Picker(v18, v19);
  v21 = type metadata accessor for InlinePickerStyle(255);
  v22 = swift_getWitnessTable(&protocol conformance descriptor for Picker<A, B, C>, v20);
  v23 = sub_1000C2D04();
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(v23, v24, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 0);
  v34 = v20;
  v35 = v21;
  v36 = v22;
  v37 = &protocol witness table for InlinePickerStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v34, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
  v34 = OpaqueTypeMetadata2;
  v35 = OpaqueTypeConformance2;
  v27 = sub_1000C2D04();
  v29 = swift_getOpaqueTypeMetadata2(v27, v28, &opaque type descriptor for <<opaque return type of View.labelsHidden()>>, 0);
  v30 = type metadata accessor for ModifiedContent(255, v29, &type metadata for _PaddingLayout);
  v31 = sub_100075EB0((uint64_t *)&unk_100C09EE0);
  v32 = type metadata accessor for ModifiedContent(255, v30, v31);
  v34 = OpaqueTypeMetadata2;
  v35 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2(&v34, &opaque type descriptor for <<opaque return type of View.labelsHidden()>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v30);
  sub_10005F124((unint64_t *)&qword_100BC4B98, (uint64_t *)&unk_100C09EE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v32);
}

uint64_t sub_1005B90E8()
{
  return sub_10005F124(&qword_100BF2E08, &qword_100BCF1B0, (uint64_t)&protocol conformance descriptor for Toggle<A>);
}

void sub_1005B9114(char a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[32];

  v93 = a3;
  v5 = type metadata accessor for TipPriorityQueue.GridEntry(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v92 = v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  v91 = (uint64_t)&v68 - v9;
  sub_10009D2A4();
  __chkstk_darwin(v10);
  v90 = (uint64_t)&v68 - v11;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v68 - v20;
  sub_1000BA294(&qword_100BCC760);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000986FC();
  v89 = v23;
  sub_10009D2A4();
  __chkstk_darwin(v24);
  v26 = (char *)&v68 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v68 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v68 - v31;
  if (a1)
  {
    if (a1 == 1)
    {
      if ((a2 & 1) != 0)
      {
        v33 = &qword_100BF3220;
        goto LABEL_11;
      }
    }
    else if ((a2 & 1) != 0)
    {
      v33 = &qword_100BF3630;
      goto LABEL_11;
    }
    v33 = &qword_100BF3428;
  }
  else if ((a2 & 1) != 0)
  {
    v33 = &qword_100BF2E10;
  }
  else
  {
    v33 = &qword_100BF3018;
  }
LABEL_11:
  v34 = *((_BYTE *)v33 + 224);
  v76 = *v33;
  v75 = v33[1];
  v74 = v33[2];
  v73 = v33[3];
  v35 = v33[8];
  v79 = v33[9];
  v80 = v35;
  v36 = v33[10];
  v77 = v33[11];
  v78 = v36;
  v37 = v33[24];
  v72 = v33[25];
  v71 = v33[26];
  v70 = v33[27];
  v38 = v33[53];
  v83 = v33[54];
  v84 = v38;
  v39 = v33[55];
  v81 = v33[56];
  v82 = v39;
  v40 = v33[61];
  v87 = v33[62];
  v88 = v40;
  v41 = v93 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_map;
  v43 = v33[63];
  v42 = v33[64];
  v85 = v43;
  v86 = v42;
  sub_1000992EC(v93 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_map, (uint64_t)v94);
  sub_10003773C(v41, v15, &qword_100BC4A98);
  v44 = sub_1000878BC();
  if (_s7Weather24LocationCompositionStateOwet_0(v15, 1, v44) == 1)
  {
    sub_100021A14(v15, &qword_100BC4A98);
LABEL_16:
    v45 = 1;
    goto LABEL_17;
  }
  v69 = v37;
  sub_10009D3BC(v15 + *(int *)(v44 + 20), (uint64_t)v18);
  sub_1000215BC(v15, type metadata accessor for LocationComponentContainerViewModel);
  sub_10007C77C((uint64_t)v18, (uint64_t)v21, type metadata accessor for LocationComponentViewModel);
  if ((v34 & 1) != 0)
  {
    sub_1000215BC((uint64_t)v21, type metadata accessor for LocationComponentViewModel);
    goto LABEL_16;
  }
  sub_10007C77C((uint64_t)v21, (uint64_t)v29, type metadata accessor for LocationComponentViewModel);
  v45 = 0;
  v46 = &v29[*(int *)(v5 + 20)];
  v47 = v72;
  *(_QWORD *)v46 = v69;
  *((_QWORD *)v46 + 1) = v47;
  v48 = v70;
  *((_QWORD *)v46 + 2) = v71;
  *((_QWORD *)v46 + 3) = v48;
LABEL_17:
  sub_1000988B8((uint64_t)v29, v45);
  sub_1002228F0((uint64_t)v29, (uint64_t)v32);
  sub_10009D3BC(v93 + *(int *)(v44 + 20) + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_airQuality, (uint64_t)v26);
  v49 = &v26[*(int *)(v5 + 20)];
  v50 = v75;
  *(_QWORD *)v49 = v76;
  *((_QWORD *)v49 + 1) = v50;
  v51 = v73;
  *((_QWORD *)v49 + 2) = v74;
  *((_QWORD *)v49 + 3) = v51;
  sub_1000988B8((uint64_t)v26, 0);
  v52 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast);
  v53 = v90;
  sub_10009D3BC(v52, v90);
  v54 = (uint64_t *)(v53 + *(int *)(v5 + 20));
  v55 = v79;
  *v54 = v80;
  v54[1] = v55;
  v56 = v77;
  v54[2] = v78;
  v54[3] = v56;
  v57 = v89;
  sub_10003773C((uint64_t)v32, v89, &qword_100BCC760);
  v58 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
  v59 = v91;
  sub_10009D3BC(v58, v91);
  v60 = (uint64_t *)(v59 + *(int *)(v5 + 20));
  v61 = v83;
  *v60 = v84;
  v60[1] = v61;
  v62 = v81;
  v60[2] = v82;
  v60[3] = v62;
  v63 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
  v64 = v92;
  sub_10009D3BC(v63, v92);
  v65 = (uint64_t *)(v64 + *(int *)(v5 + 20));
  v66 = v87;
  *v65 = v88;
  v65[1] = v66;
  v67 = v86;
  v65[2] = v85;
  v65[3] = v67;
  sub_10087CED0((uint64_t)v26, v53, v57, v59, v64);
  sub_100021A14((uint64_t)v32, &qword_100BCC760);
  sub_100098640();
}

void sub_1005B9604(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  __n128 *v79;
  uint64_t v80;
  uint64_t v81;
  __n128 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __n128 *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __n128 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __n128 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  _BYTE v137[24];

  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v6 = sub_1000878BC();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098728();
  v10 = v9 - v8;
  v11 = a1;
  v12 = a1 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_map;
  sub_1000992EC(a1 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_map, (uint64_t)v137);
  sub_10003773C(v12, v5, &qword_100BC4A98);
  if (_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6) == 1)
  {
    sub_100021A14(v5, &qword_100BC4A98);
    v13 = sub_1000BA294(&qword_100BCC750);
    v14 = swift_allocObject(v13, 272, 7);
    *(_OWORD *)(v14 + 16) = xmmword_10097FA60;
    v15 = sub_1000BA294(&qword_100BCC758);
    v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v17 = v16 + *(_QWORD *)(v7 + 72);
    v18 = *(_QWORD *)(v7 + 72);
    v19 = v15;
    v20 = (__n128 *)sub_1000C2514(v15, v17);
    v21 = sub_100099954(v20, (__n128)xmmword_10097CA50);
    v22 = v11;
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_severeAlert, (uint64_t)v21 + v16);
    *(_QWORD *)(v14 + 32) = sub_1000B4580();
    *(_QWORD *)(v14 + 40) = v23;
    *(_QWORD *)(v14 + 48) = v24;
    v25 = sub_1000C2514(v19, v17);
    *(_OWORD *)(v25 + 16) = v136;
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_nextHourPrecipitation, v25 + v16);
    *(_QWORD *)(v14 + 56) = sub_1000B4580();
    *(_QWORD *)(v14 + 64) = v26;
    *(_QWORD *)(v14 + 72) = v27;
    v28 = (__n128 *)sub_1000C2514(v19, v17);
    sub_1000BD314(v28);
    sub_10009D3BC(v29 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v30);
    *(_QWORD *)(v14 + 80) = sub_1000B4580();
    *(_QWORD *)(v14 + 88) = v31;
    *(_QWORD *)(v14 + 96) = v32;
    v33 = (__n128 *)sub_1000C2514(v19, v17);
    sub_1000BD314(v33);
    sub_10009D3BC(v34 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v35);
    *(_QWORD *)(v14 + 104) = sub_1000B4580();
    *(_QWORD *)(v14 + 112) = v36;
    *(_QWORD *)(v14 + 120) = v37;
    v38 = sub_1000C2514(v19, v17);
    *(_OWORD *)(v38 + 16) = v136;
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_airQuality, v38 + v16);
    *(_QWORD *)(v14 + 128) = sub_100080C44(v38);
    *(_QWORD *)(v14 + 136) = v39;
    *(_QWORD *)(v14 + 144) = v40;
    v41 = v18;
    v133 = v16 + 2 * v18;
    v42 = (__n128 *)sub_1000C2514(v19, v133);
    v43 = (char *)sub_100099954(v42, (__n128)xmmword_10097DA20) + v16;
    v44 = *(_QWORD *)(v11 + 16);
    v45 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
    sub_1000C3608(v45, v46);
    sub_1000C3608(v44 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v43[v41]);
    *(_QWORD *)(v14 + 152) = sub_1000B4580();
    *(_QWORD *)(v14 + 160) = v47;
    *(_QWORD *)(v14 + 168) = v48;
    v49 = (__n128 *)sub_1000C2514(v19, v133);
    sub_100098A24(v49);
    v132 = v22;
    v50 = *(_QWORD *)(v22 + 16);
    v51 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
    sub_10008611C(v51, v52);
    sub_10008611C(v50 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v43[v41]);
    *(_QWORD *)(v14 + 176) = sub_1000B4580();
    *(_QWORD *)(v14 + 184) = v53;
    *(_QWORD *)(v14 + 192) = v54;
    v55 = (__n128 *)sub_1000C2514(v19, v133);
    sub_100098A24(v55);
    v56 = *(_QWORD *)(v22 + 16);
    v57 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike);
    sub_1000C3608(v57, v58);
    sub_100095B78(v56 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v43[v41], type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v14 + 200) = sub_1000B4580();
    *(_QWORD *)(v14 + 208) = v59;
    *(_QWORD *)(v14 + 216) = v60;
    v61 = (__n128 *)sub_1000C2514(v19, v133);
    sub_100098A24(v61);
    v62 = *(_QWORD *)(v22 + 16);
    v63 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility);
    sub_100098A1C(v63, v64);
    sub_100098A1C(v62 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v43[v41]);
    *(_QWORD *)(v14 + 224) = sub_1000B4580();
    *(_QWORD *)(v14 + 232) = v65;
    *(_QWORD *)(v14 + 240) = v66;
    v67 = sub_1000C2514(v19, v133);
    *(_OWORD *)(v67 + 16) = v136;
    v68 = *(_QWORD *)(v132 + 16);
    sub_100098A1C(v68 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v67 + v16);
    sub_100098A1C(v68 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v67 + v16 + v41);
    *(_QWORD *)(v14 + 248) = sub_100080C44(v67);
    *(_QWORD *)(v14 + 256) = v69;
    *(_QWORD *)(v14 + 264) = v70;
  }
  else
  {
    sub_10007C77C(v5, v10, type metadata accessor for LocationComponentContainerViewModel);
    v71 = sub_1000BA294(&qword_100BCC750);
    v72 = swift_allocObject(v71, 296, 7);
    *(_OWORD *)(v72 + 16) = xmmword_100989890;
    v73 = sub_1000BA294(&qword_100BCC758);
    v135 = *(_QWORD *)(v7 + 72);
    v74 = *(unsigned __int8 *)(v7 + 80);
    v75 = (v74 + 32) & ~v74;
    v76 = v74 | 7;
    v77 = v73;
    v78 = (__n128 *)sub_1000C3600(v73, v75 + v135);
    v79 = sub_100099954(v78, (__n128)xmmword_10097CA50);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_severeAlert, (uint64_t)v79 + v75);
    *(_QWORD *)(v72 + 32) = sub_1000B4588();
    *(_QWORD *)(v72 + 40) = v80;
    *(_QWORD *)(v72 + 48) = v81;
    v82 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v82);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_nextHourPrecipitation, v83);
    *(_QWORD *)(v72 + 56) = sub_1000B4588();
    *(_QWORD *)(v72 + 64) = v84;
    *(_QWORD *)(v72 + 72) = v85;
    v86 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v86);
    sub_1000B4590(v87 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v88);
    *(_QWORD *)(v72 + 80) = sub_1000B4588();
    *(_QWORD *)(v72 + 88) = v89;
    *(_QWORD *)(v72 + 96) = v90;
    v91 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v91);
    sub_1000B4590(v92 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v93);
    *(_QWORD *)(v72 + 104) = sub_1000B4588();
    *(_QWORD *)(v72 + 112) = v94;
    *(_QWORD *)(v72 + 120) = v95;
    v96 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v96);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather19SevereNhpAqiContent8_Storage_airQuality, v97);
    *(_QWORD *)(v72 + 128) = sub_1000B4588();
    *(_QWORD *)(v72 + 136) = v98;
    *(_QWORD *)(v72 + 144) = v99;
    v100 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v100);
    sub_1000B4590(v10, v101);
    *(_QWORD *)(v72 + 152) = sub_1000B4580();
    *(_QWORD *)(v72 + 160) = v102;
    *(_QWORD *)(v72 + 168) = v103;
    v134 = v75 + 2 * v135;
    v104 = (__n128 *)swift_allocObject(v77, v134, v76);
    v105 = (char *)sub_100099954(v104, (__n128)xmmword_10097DA20) + v75;
    v106 = *(_QWORD *)(a1 + 16);
    v107 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
    sub_1000C3608(v107, v108);
    sub_1000C3608(v106 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v105[v135]);
    *(_QWORD *)(v72 + 176) = sub_1000B4588();
    *(_QWORD *)(v72 + 184) = v109;
    *(_QWORD *)(v72 + 192) = v110;
    v111 = (__n128 *)sub_1000C3600(v77, v134);
    sub_1000C0D34(v111);
    v112 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
    sub_100098A1C(v112, v113);
    sub_100098A1C(v106 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v105[v135]);
    *(_QWORD *)(v72 + 200) = sub_1000B4588();
    *(_QWORD *)(v72 + 208) = v114;
    *(_QWORD *)(v72 + 216) = v115;
    v116 = (__n128 *)sub_1000C3600(v77, v134);
    sub_1000C0D34(v116);
    v117 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike);
    sub_1000C3608(v117, v118);
    sub_1000C3608(v106 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v105[v135]);
    *(_QWORD *)(v72 + 224) = sub_1000B4588();
    *(_QWORD *)(v72 + 232) = v119;
    *(_QWORD *)(v72 + 240) = v120;
    v121 = sub_1000C3600(v77, v134);
    *(_OWORD *)(v121 + 16) = v136;
    v122 = v121 + v75;
    v123 = *(_QWORD *)(a1 + 16);
    v124 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility);
    sub_10008611C(v124, v125);
    sub_10008611C(v123 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, v122 + v135);
    *(_QWORD *)(v72 + 248) = sub_1000B4588();
    *(_QWORD *)(v72 + 256) = v126;
    *(_QWORD *)(v72 + 264) = v127;
    v128 = sub_1000C3600(v77, v134);
    *(_OWORD *)(v128 + 16) = v136;
    v129 = *(_QWORD *)(a1 + 16);
    sub_100095B78(v129 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v128 + v75, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v129 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v128 + v75 + v135, type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v72 + 272) = sub_100080C44(v128);
    *(_QWORD *)(v72 + 280) = v130;
    *(_QWORD *)(v72 + 288) = v131;
    sub_1000215BC(v10, type metadata accessor for LocationComponentContainerViewModel);
  }
  sub_100098640();
}

void sub_1005B9DDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_1000878BC();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000986FC();
  v20 = v4;
  sub_10009D2A4();
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v19 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100098728();
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  v16 = *(_QWORD *)(a1 + 16);
  swift_retain();
  sub_100520630();
  v19 = v17;
  swift_release(v16);
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather33LocationSevereNhpAqiConfiguration8_Storage_map);
  sub_1000BD32C();
  sub_1000C5218();
  _s7Weather24LocationCompositionStateOwst_0(v15, 0, 1, v2);
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather33LocationSevereNhpAqiConfiguration8_Storage_airQuality);
  sub_1000BD32C();
  sub_1000C5218();
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather33LocationSevereNhpAqiConfiguration8_Storage_nextHourPrecipitation);
  sub_1000BD32C();
  sub_1000C5218();
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather33LocationSevereNhpAqiConfiguration8_Storage_severeAlert);
  v18 = v20;
  sub_1000BD32C();
  sub_1000C5218();
  sub_1001F1B48(v19, v15, v10, v8, v18);
  sub_100098640();
}

double sub_1005B9F84(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  double result;
  _BYTE v15[40];
  uint64_t v16;
  char v17;
  _OWORD v18[2];
  uint64_t v19;

  v5 = *(uint64_t (**)(uint64_t))(v2 + 16);
  v6 = sub_1000BA294(&qword_100BD3370);
  v7 = *(_QWORD *)(type metadata accessor for MainAction(0) - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v6, v10 + 2 * v8, v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_10097DA20;
  sub_1005BA1E0(a1, v11 + v10);
  v12 = type metadata accessor for MoonDetailViewAction(0);
  swift_storeEnumTagMultiPayload(v11 + v10, v12, 0);
  sub_1000BB178();
  v13 = (_BYTE *)(v11 + v10 + v8);
  *v13 = a2;
  swift_storeEnumTagMultiPayload(v13, v12, 2);
  sub_1000BB178();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  sub_1000A5F84((uint64_t)v18, (uint64_t)v15);
  v16 = v11;
  v17 = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10009FF10((uint64_t)v15, v5);
  sub_100021A68((uint64_t)v15, &qword_100BD3378);
  swift_bridgeObjectRelease();
  sub_100021A68((uint64_t)v18, (uint64_t *)&unk_100BFFA10);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_1005BA0DC(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  double result;
  _OWORD v9[2];
  uint64_t v10;

  v3 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v3);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(uint64_t (**)(uint64_t))(v1 + 16);
  *v5 = a1;
  v7 = type metadata accessor for MoonDetailViewAction(0);
  swift_storeEnumTagMultiPayload(v5, v7, 2);
  swift_storeEnumTagMultiPayload(v5, v3, 13);
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  swift_retain();
  sub_1000A5EBC((uint64_t)v5, (uint64_t)v9, v6);
  sub_100021A68((uint64_t)v9, (uint64_t *)&unk_100BFFA10);
  sub_1000A0AA4((uint64_t)v5);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t type metadata accessor for MoonScrubberInteractor()
{
  return objc_opt_self(_TtC7Weather22MoonScrubberInteractor);
}

uint64_t sub_1005BA1E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MoonDetailSelectedDate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1005BA224()
{
  uint64_t v0;
  uint64_t v1;

  v0 = static AnyTransition.opacity.getter();
  if (qword_100BC1FA0 != -1)
    swift_once(&qword_100BC1FA0, sub_10032E43C);
  v1 = AnyTransition.animation(_:)(qword_100CAE6C0, v0);
  swift_release();
  qword_100CAEDA0 = v1;
}

_QWORD *sub_1005BA290(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *a2;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    *a1 = v7;
    a1 = (_QWORD *)(v7 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v7);
  }
  else
  {
    v10 = a2[1];
    *a1 = v7;
    a1[1] = v10;
    v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain(v7);
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t *sub_1005BA350(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *a2;
  v7 = a2[1];
  v8 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v8);
  a1[1] = v7;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_OWORD *sub_1005BA3CC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t *sub_1005BA41C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a2[1];
  v7 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v7);
  a1[1] = v6;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_1005BA488(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_22;
  v10 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64);
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(_WORD *)((char *)a1 + v10))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_22:
      if ((v6 & 0x80000000) != 0)
        return _s7Weather24LocationCompositionStateOwet_0(((unint64_t)a1 + v8 + 16) & ~v8, v6, v4);
      v16 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((_BYTE *)a1 + v10))
    goto LABEL_22;
LABEL_15:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if (!(_DWORD)v10)
    return v7 + v15 + 1;
  if (v10 > 3)
    LODWORD(v10) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1005BA55C + 4 * byte_1009B1930[(v10 - 1)]))();
}

void sub_1005BA5C8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  char v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << v8)) >> v8) + 1;
      if (HIWORD(v11))
      {
        v9 = &dword_100000004;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v12 = v10 & ~(-1 << v8);
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

double sub_1005BA7BC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  int *v9;
  char *v10;
  char *v11;
  double result;
  _OWORD v13[5];
  _OWORD v14[2];
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)a6 = a1;
  *((_QWORD *)a6 + 1) = a2;
  v9 = (int *)type metadata accessor for SlowDeviceGridView(0, a4, a5, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(&a6[v9[9]], a3, a4);
  v10 = &a6[v9[10]];
  memset(v14, 0, sizeof(v14));
  v15 = 255;
  v16 = 0u;
  v17 = 0u;
  sub_1005BA8A4((uint64_t)v14, v13);
  memcpy(v10, v13, 0x50uLL);
  v11 = &a6[v9[11]];
  *(_QWORD *)v11 = swift_getKeyPath(&unk_1009B19E8);
  result = 0.0;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  v11[72] = 0;
  return result;
}

double sub_1005BA8A4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[72];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  sub_1005BA90C(a1, (uint64_t)v9);
  v3 = sub_1000BA294(qword_100BF3958);
  State.init(wrappedValue:)(v9, v3);
  result = *(double *)&v10;
  v5 = v11;
  v6 = v12;
  v7 = v13;
  v8 = v14;
  *a2 = v10;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  return result;
}

uint64_t sub_1005BA90C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(qword_100BF3958);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1005BA954(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  void *v15;
  const void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  _QWORD *v30;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = *a2;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8) + 73 > 0x18)
  {
    *a1 = v8;
    v27 = (_QWORD *)(v8 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v11 = a2[1];
    *a1 = v8;
    a1[1] = v11;
    v12 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain(v8);
    v14(v12, v13, v4);
    v15 = (void *)((v7 + v12) & 0xFFFFFFFFFFFFFFF8);
    v16 = (const void *)((v7 + v13) & 0xFFFFFFFFFFFFFFF8);
    memcpy(v15, v16, 0x50uLL);
    v17 = ((unint64_t)v15 + 87) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)v16 + 87) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)(v18 + 8);
    v29 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    v22 = *(_QWORD *)(v18 + 32);
    v23 = *(_QWORD *)(v18 + 40);
    v30 = a1;
    v25 = *(_QWORD *)(v18 + 48);
    v24 = *(_QWORD *)(v18 + 56);
    v26 = *(_QWORD *)(v18 + 64);
    LOBYTE(v16) = *(_BYTE *)(v18 + 72);
    swift_retain();
    sub_1000D4FF4(v29, v19, v20, v21, v22, v23, v25, v24, v26, (char)v16);
    *(_QWORD *)v17 = v29;
    *(_QWORD *)(v17 + 8) = v19;
    *(_QWORD *)(v17 + 16) = v20;
    *(_QWORD *)(v17 + 24) = v21;
    *(_QWORD *)(v17 + 32) = v22;
    *(_QWORD *)(v17 + 40) = v23;
    *(_QWORD *)(v17 + 48) = v25;
    *(_QWORD *)(v17 + 56) = v24;
    v27 = v30;
    *(_QWORD *)(v17 + 64) = v26;
    *(_BYTE *)(v17 + 72) = (_BYTE)v16;
  }
  return v27;
}

uint64_t sub_1005BAAF0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  swift_unknownObjectRelease(*a1);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v7 = (v6 + 87) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000CEE98(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), *(_QWORD *)(v7 + 64), *(_BYTE *)(v7 + 72));
}

__int128 *sub_1005BAB90(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  void *v11;
  const void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;

  v3 = *a2;
  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_unknownObjectRetain(v3);
  v9(v7, v8, v4);
  v10 = *(_QWORD *)(v5 + 64) + 7;
  v11 = (void *)((v10 + v7) & 0xFFFFFFFFFFFFFFF8);
  v12 = (const void *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  memcpy(v11, v12, 0x50uLL);
  v13 = ((unint64_t)v11 + 87) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v12 + 87) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  v16 = *(_QWORD *)(v14 + 8);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = *(_QWORD *)(v14 + 24);
  v19 = *(_QWORD *)(v14 + 32);
  v20 = *(_QWORD *)(v14 + 40);
  v21 = *(_QWORD *)(v14 + 48);
  v25 = *(_QWORD *)(v14 + 56);
  v22 = *(_QWORD *)(v14 + 64);
  v23 = *(_BYTE *)(v14 + 72);
  swift_retain();
  sub_1000D4FF4(v15, v16, v17, v18, v19, v20, v21, v25, v22, v23);
  *(_QWORD *)v13 = v15;
  *(_QWORD *)(v13 + 8) = v16;
  *(_QWORD *)(v13 + 16) = v17;
  *(_QWORD *)(v13 + 24) = v18;
  *(_QWORD *)(v13 + 32) = v19;
  *(_QWORD *)(v13 + 40) = v20;
  *(_QWORD *)(v13 + 48) = v21;
  *(_QWORD *)(v13 + 56) = v25;
  *(_QWORD *)(v13 + 64) = v22;
  *(_BYTE *)(v13 + 72) = v23;
  return a1;
}

uint64_t *sub_1005BACCC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v40;
  uint64_t *v41;

  v6 = *a2;
  v7 = a2[1];
  v8 = *a1;
  *a1 = *a2;
  v9 = a1;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v8);
  v41 = v9;
  v9[1] = v7;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v9 + v11 + 16) & ~v11;
  v13 = ((unint64_t)a2 + v11 + 16) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (char *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (const void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  memcpy(v15, v16, 0x50uLL);
  swift_retain();
  swift_release();
  v17 = (unint64_t)(v15 + 87);
  v18 = ((unint64_t)v16 + 87) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  v20 = *(_QWORD *)(v18 + 8);
  v21 = v17 & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)(v18 + 16);
  v23 = *(_QWORD *)(v18 + 24);
  v24 = *(_QWORD *)(v18 + 32);
  v25 = *(_QWORD *)(v18 + 40);
  v26 = *(_QWORD *)(v18 + 48);
  v27 = *(_QWORD *)(v18 + 56);
  v28 = *(_QWORD *)(v18 + 64);
  v40 = *(_BYTE *)(v18 + 72);
  sub_1000D4FF4(*(_QWORD *)v18, v20, v22, v23, v24, v25, v26, v27, v28, v40);
  v29 = *(_QWORD *)v21;
  v30 = *(_QWORD *)(v21 + 8);
  v31 = *(_QWORD *)(v21 + 16);
  v32 = *(_QWORD *)(v21 + 24);
  v33 = *(_QWORD *)(v21 + 32);
  v34 = *(_QWORD *)(v21 + 40);
  v35 = *(_QWORD *)(v21 + 48);
  v36 = *(_QWORD *)(v21 + 56);
  v37 = *(_QWORD *)(v21 + 64);
  v38 = *(_BYTE *)(v21 + 72);
  *(_QWORD *)v21 = v19;
  *(_QWORD *)(v21 + 8) = v20;
  *(_QWORD *)(v21 + 16) = v22;
  *(_QWORD *)(v21 + 24) = v23;
  *(_QWORD *)(v21 + 32) = v24;
  *(_QWORD *)(v21 + 40) = v25;
  *(_QWORD *)(v21 + 48) = v26;
  *(_QWORD *)(v21 + 56) = v27;
  *(_QWORD *)(v21 + 64) = v28;
  *(_BYTE *)(v21 + 72) = v40;
  sub_1000CEE98(v29, v30, v31, v32, v33, v34, v35, v36, v37, v38);
  return v41;
}

_OWORD *sub_1005BAE48(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (void *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (const void *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  memcpy(v9, v10, 0x50uLL);
  memcpy((void *)(((unint64_t)v9 + 87) & 0xFFFFFFFFFFFFFFF8), (const void *)(((unint64_t)v10 + 87) & 0xFFFFFFFFFFFFFFF8), 0x49uLL);
  return a1;
}

uint64_t *sub_1005BAEE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v6 = a2[1];
  v7 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v7);
  a1[1] = v6;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (void *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = (const void *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  memcpy(v13, v14, 0x50uLL);
  swift_release();
  v15 = ((unint64_t)v14 + 87) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v15 + 64);
  v17 = *(_BYTE *)(v15 + 72);
  v18 = ((unint64_t)v13 + 87) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  v20 = *(_QWORD *)(v18 + 8);
  v21 = *(_QWORD *)(v18 + 16);
  v22 = *(_QWORD *)(v18 + 24);
  v23 = *(_QWORD *)(v18 + 32);
  v24 = *(_QWORD *)(v18 + 40);
  v25 = *(_QWORD *)(v18 + 48);
  v26 = *(_QWORD *)(v18 + 56);
  v27 = *(_QWORD *)(v18 + 64);
  v28 = *(_BYTE *)(v18 + 72);
  v29 = *(_OWORD *)(v15 + 16);
  v30 = *(_OWORD *)(v15 + 32);
  v31 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)v18 = *(_OWORD *)v15;
  *(_OWORD *)(v18 + 16) = v29;
  *(_OWORD *)(v18 + 32) = v30;
  *(_OWORD *)(v18 + 48) = v31;
  *(_QWORD *)(v18 + 64) = v16;
  *(_BYTE *)(v18 + 72) = v17;
  sub_1000CEE98(v19, v20, v21, v22, v23, v24, v25, v26, v27, v28);
  return a1;
}

uint64_t sub_1005BAFF0(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v5 + 80);
  if (v7 >= a2)
  {
    if ((v6 & 0x80000000) != 0)
    {
      return _s7Weather24LocationCompositionStateOwet_0(((unint64_t)a1 + v8 + 16) & ~v8, v6, v4);
    }
    else
    {
      v15 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  else
  {
    v9 = ((((*(_QWORD *)(v5 + 64) + ((v8 + 16) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8) + 73;
    v10 = (a2 - v7 + 255) >> (8 * v9);
    if (v9 < 4)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1005BB090 + 4 * byte_1009B193E[v13]))();
  }
}

void sub_1005BB11C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64)
         + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 87) & 0xFFFFFFFFFFFFFFF8)
     + 73;
  if (v6 >= a3)
  {
    v10 = 0;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
  }
  if (v6 < a2)
  {
    v11 = ~v6 + a2;
    v12 = (~(_BYTE)v6 + a2);
    if (v7 >= 4)
      v13 = v11;
    else
      v13 = v12;
    bzero(a1, v7);
    if ((_DWORD)v7 == 1)
      *a1 = v13;
    else
      *(_DWORD *)a1 = v13;
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

void sub_1005BB250()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1005BB2B8);
}

void sub_1005BB258(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1005BB260);
  JUMPOUT(0x1005BB2B8);
}

void sub_1005BB270()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1005BB2B8);
}

void sub_1005BB278()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1005BB2B8);
}

void sub_1005BB280(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x1005BB2B4);
      JUMPOUT(0x1005BB2ACLL);
    }
    JUMPOUT(0x1005BB28CLL);
  }
  JUMPOUT(0x1005BB2B8);
}

uint64_t sub_1005BB2D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = type metadata accessor for SlowDeviceGridView(255, *a1, a1[1], a4);
  type metadata accessor for _ConditionalContent(255, v5, v4);
  swift_getWitnessTable(&unk_1009B1A68, v5);
  return sub_10009D4E8((uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
}

uint64_t sub_1005BB348(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100ABA264, 1);
}

uint64_t sub_1005BB37C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  char *v29;
  char *v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char *v39;
  __n128 v40;
  uint64_t OpaqueTypeConformance2;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[11];
  uint64_t v70;
  _QWORD __dst[10];

  v64 = a2;
  v55 = *(_QWORD *)(a1 - 8);
  v51 = *(_QWORD *)(v55 + 64);
  __chkstk_darwin(a1);
  v54 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for Optional(255, v5);
  v70 = *(_QWORD *)(a1 + 24);
  v7 = v70;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v6);
  v9 = type metadata accessor for ZStack(0, v6, WitnessTable);
  v56 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - v10;
  v12 = type metadata accessor for ModifiedContent(0, v9, &type metadata for _AppearanceActionModifier);
  v63 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v53 = (char *)&v46 - v13;
  v52 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v9);
  v69[9] = v52;
  v69[10] = &protocol witness table for _AppearanceActionModifier;
  v14 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v58 = v14;
  v59 = sub_10014AFEC();
  __dst[0] = v12;
  __dst[1] = &unk_100B93750;
  __dst[2] = v14;
  __dst[3] = v59;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, __dst, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v62 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v57 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v60 = (char *)&v46 - v17;
  v18 = v5;
  v49 = v5;
  v66 = v5;
  v48 = v7;
  v67 = v7;
  v19 = v65;
  v68 = v65;
  v21 = static Alignment.center.getter(v20);
  ZStack.init(alignment:content:)(v21);
  v22 = v55;
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
  v23 = v54;
  v50(v54, v19, a1);
  v24 = *(unsigned __int8 *)(v22 + 80);
  v25 = v22;
  v26 = (v24 + 32) & ~v24;
  v51 += v26;
  v47 = v24 | 7;
  v27 = swift_allocObject(&unk_100B821A0, v51, v24 | 7);
  *(_QWORD *)(v27 + 16) = v18;
  *(_QWORD *)(v27 + 24) = v7;
  v28 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 32);
  v29 = v23;
  v28(v27 + v26, v23, a1);
  v30 = v53;
  View.onAppear(perform:)(sub_1005BBC98, v27, v9, v52);
  v31 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v56 + 8))(v11, v9, v31);
  v32 = v65;
  memcpy(__dst, (const void *)(v65 + *(int *)(a1 + 44)), 0x49uLL);
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
  sub_10008CF58();
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
  v33 = v29;
  v50(v29, v32, a1);
  v34 = swift_allocObject(&unk_100B821C8, v51, v47);
  v35 = v48;
  *(_QWORD *)(v34 + 16) = v49;
  *(_QWORD *)(v34 + 24) = v35;
  v28(v34 + v26, v33, a1);
  v36 = v58;
  v37 = v59;
  v38 = variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
  v39 = v57;
  View.onChange<A>(of:initial:_:)(v69, v38 & 1, sub_1005BBCE0, v34, v12, &unk_100B93750, v36, v37);
  v40 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v63 + 8))(v30, v12, v40);
  v69[0] = v12;
  v69[1] = &unk_100B93750;
  v69[2] = v36;
  v69[3] = v37;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v69, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v42 = (uint64_t)v60;
  v43 = OpaqueTypeMetadata2;
  sub_1000B2074(v39, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v44 = *(void (**)(char *, uint64_t))(v62 + 8);
  v44(v39, v43);
  sub_1000B1100(v42, v43, v64);
  return ((uint64_t (*)(uint64_t, uint64_t))v44)(v42, v43);
}

uint64_t sub_1005BB8E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[4];
  int v36;

  v28 = a4;
  v27 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v26 - v15;
  v18 = type metadata accessor for SlowDeviceGridView(0, a2, a3, v17);
  v19 = (__int128 *)(a1 + *(int *)(v18 + 40));
  v20 = v19[1];
  v30 = *v19;
  v31 = v20;
  v21 = v19[3];
  v32 = v19[2];
  v33 = v21;
  v34 = v19[4];
  v22 = sub_1000BA294(&qword_100BF39E0);
  State.wrappedValue.getter(v35, v22);
  if ((_BYTE)v36 == 0xFF)
  {
    v23 = 1;
  }
  else
  {
    sub_1000B2074(a1 + *(int *)(v18 + 36), a2, a3);
    sub_1000B1100((uint64_t)v8, a2, (uint64_t)v13);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, a2);
    v23 = 0;
  }
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, v23, 1, a2);
  sub_100158984((uint64_t)v13, a2, (uint64_t)v16);
  v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v13, v10);
  v29 = a3;
  swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v10);
  sub_1000B1100((uint64_t)v16, v10, v28);
  return ((uint64_t (*)(char *, uint64_t))v24)(v16, v10);
}

uint64_t sub_1005BBAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[32];
  _BYTE __dst[80];

  v5 = type metadata accessor for SlowDeviceGridView(0, a2, a3, a4);
  memcpy(__dst, (const void *)(a1 + *(int *)(v5 + 44)), 0x49uLL);
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
  sub_10008CF58();
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
  v6 = v24;
  v7 = *((_QWORD *)&v24 + 1);
  v8 = *(unsigned __int16 *)v25;
  v9 = v22;
  v10 = v23;
  v11 = *(_OWORD *)&v25[8];
  v12 = (__int128 *)(a1 + *(int *)(v5 + 40));
  v13 = v12[1];
  v22 = *v12;
  v23 = v13;
  v14 = v12[3];
  v24 = v12[2];
  *(_OWORD *)v25 = v14;
  *(_OWORD *)&v25[16] = v12[4];
  v17[0] = v9;
  v17[1] = v10;
  v18 = v6;
  v19 = v7;
  v20 = v8;
  v21 = v11;
  v15 = sub_1000BA294(&qword_100BF39E0);
  return State.wrappedValue.setter(v17, v15);
}

uint64_t sub_1005BBBA8(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v21 = *a2;
  v8 = *((_QWORD *)a2 + 3);
  v20 = *((_QWORD *)a2 + 2);
  v9 = *((unsigned __int8 *)a2 + 32);
  v10 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)a2 + 7);
  v12 = *((_QWORD *)a2 + 8);
  v13 = *((unsigned __int16 *)a2 + 24);
  sub_1006BEED4();
  v15 = (__int128 *)(a3 + *(int *)(type metadata accessor for SlowDeviceGridView(0, a4, a5, v14) + 40));
  v16 = v15[1];
  v30 = *v15;
  v31 = v16;
  v17 = v15[3];
  v32 = v15[2];
  v33 = v17;
  v34 = v15[4];
  v22 = v21;
  v23 = v20;
  v24 = v8;
  v25 = v9;
  v26 = v10;
  v27 = v13;
  v28 = v11;
  v29 = v12;
  v18 = sub_1000BA294(&qword_100BF39E0);
  return State.wrappedValue.setter(&v22, v18);
}

uint64_t sub_1005BBC88@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1005BB8E0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1005BBC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  type metadata accessor for SlowDeviceGridView(0, v5, v6, a4);
  sub_100095298();
  return sub_1005BBAD0(v4 + v7, v5, v6, v8);
}

uint64_t sub_1005BBCE0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  type metadata accessor for SlowDeviceGridView(0, v7, v8, a4);
  sub_100095298();
  return sub_1005BBBA8(a1, a2, v4 + v9, v7, v8);
}

uint64_t sub_1005BBD3C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[7];

  v1 = a1[1];
  v2 = type metadata accessor for Optional(255, *a1);
  v7[6] = v1;
  v3 = sub_10009D4E8((uint64_t)&protocol conformance descriptor for <A> A?);
  v4 = type metadata accessor for ZStack(255, v2, v3);
  v5 = type metadata accessor for ModifiedContent(255, v4, &type metadata for _AppearanceActionModifier);
  v7[4] = sub_10009D4E8((uint64_t)&protocol conformance descriptor for ZStack<A>);
  v7[5] = &protocol witness table for _AppearanceActionModifier;
  v7[0] = v5;
  v7[1] = &unk_100B93750;
  v7[2] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  v7[3] = sub_10014AFEC();
  return swift_getOpaqueTypeConformance2(v7, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

char *sub_1005BBE04(char *a1, char *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v7;
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v12(&v4[a3[6]], &a2[a3[6]], v11);
    v12(&v4[a3[7]], &a2[a3[7]], v11);
    v13 = a3[9];
    *(_QWORD *)&v4[a3[8]] = *(_QWORD *)&a2[a3[8]];
    v14 = &v4[v13];
    v15 = &a2[v13];
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
  }
  return v4;
}

uint64_t sub_1005BBEFC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  v7(a1 + a2[6], v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + a2[7], v5);
}

char *sub_1005BBF88(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v11(&a1[a3[6]], &a2[a3[6]], v10);
  v11(&a1[a3[7]], &a2[a3[7]], v10);
  v12 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  return a1;
}

char *sub_1005BC054(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  char v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24);
  v12(v9, v10, v11);
  v12(&a1[a3[6]], &a2[a3[6]], v11);
  v12(&a1[a3[7]], &a2[a3[7]], v11);
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v13 = a3[9];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = v15[8];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v16;
  return a1;
}

char *sub_1005BC134(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v10(&a1[a3[7]], &a2[a3[7]], v9);
  v11 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  return a1;
}

char *sub_1005BC1F8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12(&a1[a3[6]], &a2[a3[6]], v11);
  v12(&a1[a3[7]], &a2[a3[7]], v11);
  v13 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t sub_1005BC2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005BC2D0);
}

void sub_1005BC2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_100079F70();
  }
  else
  {
    v6 = type metadata accessor for Date(0);
    _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t sub_1005BC33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005BC348);
}

uint64_t sub_1005BC348(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_1005BC3B4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int *v8;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0) & 1) != 0)
  {
    v8 = (int *)type metadata accessor for DetailChartSelection(0);
    if ((sub_1000B4438(v8[5]) & 1) != 0 && (sub_1000B4438(v8[6]) & 1) != 0)
      sub_1000B4438(v8[7]);
  }
  sub_100079F70();
}

uint64_t sub_1005BC480(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  char v14;

  if (a1 == 0x44497472616863 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44497472616863, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6574614479656BLL && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574614479656BLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6F697463656C6573 && a2 == 0xED0000657461446ELL)
  {
    v10 = 0xED0000657461446ELL;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697463656C6573, 0xED0000657461446ELL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100A0C510)
  {
    v11 = 0x8000000100A0C510;
LABEL_30:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100A0C510, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_30;
  }
  if (a1 == 0x6F697469736F5078 && a2 == 0xE90000000000006ELL)
  {
    v13 = 0xE90000000000006ELL;
    goto LABEL_38;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469736F5078, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_38:
    swift_bridgeObjectRelease(v13);
    return 4;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100A0C530)
  {
    swift_bridgeObjectRelease(0x8000000100A0C530);
    return 5;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100A0C530, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1005BC71C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005BC750 + 4 * byte_1009B1AC0[a1]))(0x44497472616863, 0xE700000000000000);
}

uint64_t sub_1005BC750()
{
  return 0x6574614479656BLL;
}

uint64_t sub_1005BC764()
{
  return 0x6F697463656C6573;
}

unint64_t sub_1005BC7C0()
{
  return 0xD000000000000012;
}

void sub_1005BC7DC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v3 = v1;
  v5 = sub_1000BA294(&qword_100BF3AA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1005BCEAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DetailChartSelection.CodingKeys, &type metadata for DetailChartSelection.CodingKeys, v12, v10, v11);
  v13 = v3[1];
  v22 = *v3;
  v23 = v13;
  v24 = 0;
  v14 = sub_1005BCF60();
  sub_1000B4634((uint64_t)&v22, (uint64_t)&v24, v5, (uint64_t)&type metadata for ConditionsChartID, v14);
  if (!v2)
  {
    v15 = (int *)type metadata accessor for DetailChartSelection(0);
    v16 = (uint64_t)v3 + v15[5];
    LOBYTE(v22) = 1;
    type metadata accessor for Date(0);
    sub_1001196A4(&qword_100BC3578, (uint64_t)&protocol conformance descriptor for Date);
    sub_1000BB188(v16, (uint64_t)&v22);
    v17 = (uint64_t)v3 + v15[6];
    LOBYTE(v22) = 2;
    sub_1000BB188(v17, (uint64_t)&v22);
    v18 = (uint64_t)v3 + v15[7];
    LOBYTE(v22) = 3;
    sub_1000BB188(v18, (uint64_t)&v22);
    v22 = *(uint64_t *)((char *)v3 + v15[8]);
    v24 = 4;
    v19 = sub_1003E6AF8();
    sub_1000B4634((uint64_t)&v22, (uint64_t)&v24, v5, (uint64_t)&type metadata for CGFloat, v19);
    v20 = (char *)v3 + v15[9];
    v21 = *(_QWORD *)v20;
    LOBYTE(v20) = v20[8];
    v22 = v21;
    LOBYTE(v23) = (_BYTE)v20;
    v24 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v22, &v24, v5, &type metadata for CGFloat, v19);
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  sub_1000B44B0();
}

void sub_1005BC9E4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v30 = a2;
  v34 = type metadata accessor for Date(0);
  v32 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  v9 = (char *)v28 - v8;
  v31 = sub_1000BA294(&qword_100BF3A88);
  v10 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  sub_100098728();
  v33 = (int *)type metadata accessor for DetailChartSelection(0);
  __chkstk_darwin(v33);
  sub_100098728();
  v35 = (_QWORD *)(v12 - v11);
  v36 = a1;
  v13 = a1[3];
  v14 = a1[4];
  sub_1000DB418(a1, v13);
  v15 = sub_1005BCEAC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DetailChartSelection.CodingKeys, &type metadata for DetailChartSelection.CodingKeys, v15, v13, v14);
  if (v2)
  {
    sub_10009EE88();
  }
  else
  {
    v16 = v9;
    v28[1] = v5;
    v29 = v10;
    v39 = 0;
    sub_1005BCEE8();
    v17 = v31;
    sub_100098CBC((uint64_t)&type metadata for ConditionsChartID, (uint64_t)&v39, v31, (uint64_t)&type metadata for ConditionsChartID);
    v18 = v38;
    v19 = (uint64_t)v35;
    *v35 = v37;
    *(_QWORD *)(v19 + 8) = v18;
    LOBYTE(v37) = 1;
    v20 = sub_1001196A4(&qword_100BC3558, (uint64_t)&protocol conformance descriptor for Date);
    v21 = v16;
    v22 = v34;
    sub_1000BC618(v20, (uint64_t)&v37);
    v23 = v19 + v33[5];
    v28[0] = *(_QWORD *)(v32 + 32);
    v24 = ((uint64_t (*)(uint64_t, char *, uint64_t))v28[0])(v23, v21, v22);
    LOBYTE(v37) = 2;
    sub_1000BC618(v24, (uint64_t)&v37);
    v25 = sub_1000CCFA0(v33[6]);
    LOBYTE(v37) = 3;
    sub_1000BC618(v25, (uint64_t)&v37);
    sub_1000CCFA0(v33[7]);
    v39 = 4;
    sub_1003E6ABC();
    sub_100098CBC((uint64_t)&type metadata for CGFloat, (uint64_t)&v39, v17, (uint64_t)&type metadata for CGFloat);
    *(_QWORD *)(v19 + v33[8]) = v37;
    v39 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for CGFloat, &v39, v17, &type metadata for CGFloat);
    sub_1000BABB0(v29);
    v26 = v38;
    v27 = v19 + v33[9];
    *(_QWORD *)v27 = v37;
    *(_BYTE *)(v27 + 8) = v26;
    sub_10022406C(v19, v30);
    sub_10009EE88();
    sub_1005BCF24(v19);
  }
  sub_1000B44B0();
}

uint64_t sub_1005BCDDC()
{
  unsigned __int8 *v0;

  return sub_1005BC71C(*v0);
}

uint64_t sub_1005BCDE4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1005BC480(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005BCE08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005BCEAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005BCE30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005BCEAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1005BCE5C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1005BC9E4(a1, a2);
}

void sub_1005BCE70(_QWORD *a1)
{
  sub_1005BC7DC(a1);
}

void sub_1005BCE84()
{
  sub_100696CF4();
}

void sub_1005BCE98(uint64_t a1)
{
  sub_100696EE8(a1);
}

unint64_t sub_1005BCEAC()
{
  unint64_t result;

  result = qword_100BF3A90;
  if (!qword_100BF3A90)
  {
    result = swift_getWitnessTable(&unk_1009B1CA4, &type metadata for DetailChartSelection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF3A90);
  }
  return result;
}

unint64_t sub_1005BCEE8()
{
  unint64_t result;

  result = qword_100BF3A98;
  if (!qword_100BF3A98)
  {
    result = swift_getWitnessTable(&unk_1009B7CD4, &type metadata for ConditionsChartID);
    atomic_store(result, (unint64_t *)&qword_100BF3A98);
  }
  return result;
}

uint64_t sub_1005BCF24(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DetailChartSelection(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1005BCF60()
{
  unint64_t result;

  result = qword_100BF3AA8;
  if (!qword_100BF3AA8)
  {
    result = swift_getWitnessTable(&unk_1009B7CAC, &type metadata for ConditionsChartID);
    atomic_store(result, (unint64_t *)&qword_100BF3AA8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DetailChartSelection.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1005BCFE8 + 4 * byte_1009B1ACB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1005BD01C + 4 * byte_1009B1AC6[v4]))();
}

uint64_t sub_1005BD01C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005BD024(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005BD02CLL);
  return result;
}

uint64_t sub_1005BD038(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005BD040);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1005BD044(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005BD04C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DetailChartSelection.CodingKeys()
{
  return &type metadata for DetailChartSelection.CodingKeys;
}

unint64_t sub_1005BD06C()
{
  unint64_t result;

  result = qword_100BF3AB0;
  if (!qword_100BF3AB0)
  {
    result = swift_getWitnessTable(&unk_1009B1C7C, &type metadata for DetailChartSelection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF3AB0);
  }
  return result;
}

unint64_t sub_1005BD0AC()
{
  unint64_t result;

  result = qword_100BF3AB8;
  if (!qword_100BF3AB8)
  {
    result = swift_getWitnessTable(&unk_1009B1BEC, &type metadata for DetailChartSelection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF3AB8);
  }
  return result;
}

unint64_t sub_1005BD0EC()
{
  unint64_t result;

  result = qword_100BF3AC0;
  if (!qword_100BF3AC0)
  {
    result = swift_getWitnessTable(&unk_1009B1C14, &type metadata for DetailChartSelection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF3AC0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LocationViewComponent.ComponentType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xED)
  {
    if (a2 + 19 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 19) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 20;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v5 = v6 - 20;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationViewComponent.ComponentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1005BD1FC + 4 * byte_1009B1D05[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1005BD230 + 4 * byte_1009B1D00[v4]))();
}

uint64_t sub_1005BD230(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005BD238(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005BD240);
  return result;
}

uint64_t sub_1005BD24C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005BD254);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1005BD258(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005BD260(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_QWORD *sub_1005BD26C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t HourPrecipitationComponent;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, char *, uint64_t, __n128);
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  void (*v165)(char *, char *, uint64_t, __n128);
  __n128 v166;
  int *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  char *v211;
  uint64_t v212;
  int EnumCaseMultiPayload;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  void (*v248)(char *, char *, uint64_t);
  uint64_t v249;
  _QWORD *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v268;
  uint64_t v269;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v8 = type metadata accessor for AirQuality(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = a3;
        v11 = 0;
        goto LABEL_86;
      case 1u:
        v13 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v14 = type metadata accessor for DailyForecastComponent(0);
        *(_QWORD *)((char *)a1 + *(int *)(v14 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v14 + 20));
        swift_bridgeObjectRetain();
        v9 = a1;
        v10 = a3;
        v11 = 1;
        goto LABEL_86;
      case 2u:
        v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        v16 = a2[3];
        a1[2] = a2[2];
        a1[3] = v16;
        v17 = a2[5];
        a1[4] = a2[4];
        a1[5] = v17;
        v18 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
        v19 = *(int *)(v18 + 28);
        v20 = (_QWORD *)((char *)a1 + v19);
        v21 = (_QWORD *)((char *)a2 + v19);
        v22 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v22))
        {
          v23 = sub_1000BA294(&qword_100BC3360);
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          v160 = v21[1];
          *v20 = *v21;
          v20[1] = v160;
          v161 = *(int *)(v22 + 20);
          v162 = (char *)v20 + v161;
          v163 = (char *)v21 + v161;
          v164 = type metadata accessor for TemperatureScaleConfiguration(0);
          v269 = v18;
          v165 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v164 - 8) + 16);
          v166 = swift_bridgeObjectRetain();
          v165(v162, v163, v164, v166);
          v18 = v269;
          v167 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
          *(_QWORD *)&v162[v167[5]] = *(_QWORD *)&v163[v167[5]];
          *(_QWORD *)&v162[v167[6]] = *(_QWORD *)&v163[v167[6]];
          *(_QWORD *)&v162[v167[7]] = *(_QWORD *)&v163[v167[7]];
          v168 = v167[8];
          v169 = &v162[v168];
          v170 = &v163[v168];
          v172 = *(_QWORD *)v170;
          v171 = *((_QWORD *)v170 + 1);
          *(_QWORD *)v169 = v172;
          *((_QWORD *)v169 + 1) = v171;
          v162[v167[9]] = v163[v167[9]];
          swift_bridgeObjectRetain();
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 0, 1, v22);
        }
        v173 = *(int *)(v18 + 32);
        v174 = (_QWORD *)((char *)a1 + v173);
        v175 = (_QWORD *)((char *)a2 + v173);
        v176 = v175[1];
        *v174 = *v175;
        v174[1] = v176;
        swift_bridgeObjectRetain();
        v9 = a1;
        v10 = a3;
        v11 = 2;
        goto LABEL_86;
      case 3u:
        v24 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
        v25 = (int *)type metadata accessor for HourlyForecastComponent(0);
        v26 = v25[5];
        v27 = (char *)a1 + v26;
        v28 = (char *)a2 + v26;
        *(_QWORD *)((char *)a1 + v26) = *(_QWORD *)((char *)a2 + v26);
        v29 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
        v30 = &v27[v29];
        v31 = &v28[v29];
        v32 = type metadata accessor for WeatherDescription(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v31, 1, v32))
        {
          v33 = sub_1000BA294(&qword_100BC3368);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v30, 0, 1, v32);
        }
        v177 = v25[6];
        v178 = (char *)a1 + v177;
        v179 = (char *)a2 + v177;
        v180 = sub_1000BA294(&qword_100BCB9F8);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v180 - 8) + 16))(v178, v179, v180);
        v181 = v25[7];
        v182 = (char *)a1 + v181;
        v183 = (char *)a2 + v181;
        v184 = sub_1000BA294(&qword_100BCB130);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v184 - 8) + 16))(v182, v183, v184);
        v185 = v25[8];
        v186 = (char *)a1 + v185;
        v187 = (char *)a2 + v185;
        v188 = type metadata accessor for WeatherChanges(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v187, 1, v188))
        {
          v189 = sub_1000BA294(&qword_100BCCC48);
          memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v188 - 8) + 16))(v186, v187, v188);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v186, 0, 1, v188);
        }
        *((_BYTE *)a1 + v25[9]) = *((_BYTE *)a2 + v25[9]);
        *((_BYTE *)a1 + v25[10]) = *((_BYTE *)a2 + v25[10]);
        v9 = a1;
        v10 = a3;
        v11 = 3;
        goto LABEL_86;
      case 4u:
        v34 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(a1, a2, v34);
        v9 = a1;
        v10 = a3;
        v11 = 4;
        goto LABEL_86;
      case 5u:
        v35 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a1, a2, v35);
        v36 = *(int *)(type metadata accessor for MapComponent(0) + 20);
        v37 = (_QWORD *)((char *)a1 + v36);
        v38 = (char *)a2 + v36;
        v39 = *(_QWORD *)((char *)a2 + v36 + 8);
        *v37 = *(_QWORD *)((char *)a2 + v36);
        v37[1] = v39;
        v40 = (int *)type metadata accessor for WeatherData(0);
        v41 = v40[5];
        v42 = (char *)v37 + v41;
        v43 = &v38[v41];
        v44 = type metadata accessor for Locale(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44))
        {
          v45 = sub_1000BA294(&qword_100BC3340);
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v44);
        }
        v190 = v40[6];
        v191 = (char *)v37 + v190;
        v192 = &v38[v190];
        v193 = type metadata accessor for WeatherDataModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v193 - 8) + 16))(v191, v192, v193);
        v194 = v40[7];
        v195 = (char *)v37 + v194;
        v196 = &v38[v194];
        v197 = sub_1000BA294(&qword_100BC3348);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v196, 1, v197))
        {
          v198 = type metadata accessor for WeatherData.CachingState(0);
          memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
        }
        else
        {
          v208 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v208 - 8) + 16))(v195, v196, v208);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v195, 0, 1, v197);
        }
        v209 = v40[8];
        v210 = (_QWORD *)((char *)v37 + v209);
        v211 = &v38[v209];
        v212 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v211);
        if (EnumCaseMultiPayload == 1)
        {
          v228 = type metadata accessor for WeatherStatisticsModel(0);
          (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v228 - 8) + 16))(v210, v211, v228);
          v215 = v210;
          v216 = v212;
          v217 = 1;
          goto LABEL_55;
        }
        if (!EnumCaseMultiPayload)
        {
          v214 = *((_QWORD *)v211 + 1);
          *v210 = *(_QWORD *)v211;
          v210[1] = v214;
          swift_bridgeObjectRetain();
          v215 = v210;
          v216 = v212;
          v217 = 0;
LABEL_55:
          swift_storeEnumTagMultiPayload(v215, v216, v217);
          goto LABEL_57;
        }
        memcpy(v210, v211, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
LABEL_57:
        v229 = v40[9];
        v230 = (char *)v37 + v229;
        v231 = &v38[v229];
        v232 = type metadata accessor for WeatherDataOverrides(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v231, 1, v232))
        {
          v233 = sub_1000BA294(&qword_100BC3350);
          memcpy(v230, v231, *(_QWORD *)(*(_QWORD *)(v233 - 8) + 64));
        }
        else
        {
          v234 = type metadata accessor for Date(0);
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v231, 1, v234))
          {
            v235 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v230, v231, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v234 - 8) + 16))(v230, v231, v234);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v230, 0, 1, v234);
          }
          v259 = *(int *)(v232 + 20);
          v260 = &v230[v259];
          v261 = &v231[v259];
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v261, 1, v234))
          {
            v262 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v260, v261, *(_QWORD *)(*(_QWORD *)(v262 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v234 - 8) + 16))(v260, v261, v234);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v260, 0, 1, v234);
          }
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v230, 0, 1, v232);
        }
        v9 = a1;
        v10 = a3;
        v11 = 5;
        goto LABEL_86;
      case 6u:
        v46 = a2[1];
        *a1 = *a2;
        a1[1] = v46;
        v47 = (int *)type metadata accessor for WeatherData(0);
        v48 = v47[5];
        v49 = (char *)a1 + v48;
        v50 = (char *)a2 + v48;
        v51 = type metadata accessor for Locale(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v51))
        {
          v52 = sub_1000BA294(&qword_100BC3340);
          memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v49, 0, 1, v51);
        }
        v199 = v47[6];
        v200 = (char *)a1 + v199;
        v201 = (char *)a2 + v199;
        v202 = type metadata accessor for WeatherDataModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v202 - 8) + 16))(v200, v201, v202);
        v203 = v47[7];
        v204 = (char *)a1 + v203;
        v205 = (char *)a2 + v203;
        v206 = sub_1000BA294(&qword_100BC3348);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v205, 1, v206))
        {
          v207 = type metadata accessor for WeatherData.CachingState(0);
          memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
        }
        else
        {
          v218 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v218 - 8) + 16))(v204, v205, v218);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v204, 0, 1, v206);
        }
        v219 = v47[8];
        v220 = (_QWORD *)((char *)a1 + v219);
        v221 = (_QWORD *)((char *)a2 + v219);
        v222 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
        v223 = swift_getEnumCaseMultiPayload(v221);
        if (v223 == 1)
        {
          v236 = type metadata accessor for WeatherStatisticsModel(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v236 - 8) + 16))(v220, v221, v236);
          v225 = v220;
          v226 = v222;
          v227 = 1;
          goto LABEL_62;
        }
        if (!v223)
        {
          v224 = v221[1];
          *v220 = *v221;
          v220[1] = v224;
          swift_bridgeObjectRetain();
          v225 = v220;
          v226 = v222;
          v227 = 0;
LABEL_62:
          swift_storeEnumTagMultiPayload(v225, v226, v227);
          goto LABEL_64;
        }
        memcpy(v220, v221, *(_QWORD *)(*(_QWORD *)(v222 - 8) + 64));
LABEL_64:
        v237 = v47[9];
        v238 = (char *)a1 + v237;
        v239 = (char *)a2 + v237;
        v240 = type metadata accessor for WeatherDataOverrides(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v239, 1, v240))
        {
          v241 = sub_1000BA294(&qword_100BC3350);
          memcpy(v238, v239, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
        }
        else
        {
          v242 = type metadata accessor for Date(0);
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v239, 1, v242))
          {
            v243 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v238, v239, *(_QWORD *)(*(_QWORD *)(v243 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v242 - 8) + 16))(v238, v239, v242);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v238, 0, 1, v242);
          }
          v263 = *(int *)(v240 + 20);
          v264 = &v238[v263];
          v265 = &v239[v263];
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v265, 1, v242))
          {
            v266 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v264, v265, *(_QWORD *)(*(_QWORD *)(v266 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v242 - 8) + 16))(v264, v265, v242);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v264, 0, 1, v242);
          }
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v238, 0, 1, v240);
        }
        v9 = a1;
        v10 = a3;
        v11 = 6;
LABEL_86:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      case 7u:
        v53 = type metadata accessor for ArticleModel(0);
        if (swift_getEnumCaseMultiPayload(a2) == 1)
        {
          v54 = a2[1];
          *a1 = *a2;
          a1[1] = v54;
          v55 = a2[3];
          a1[2] = a2[2];
          a1[3] = v55;
          v56 = (int *)type metadata accessor for NewsArticle(0);
          v57 = v56[6];
          v58 = (char *)a1 + v57;
          v59 = (char *)a2 + v57;
          v60 = type metadata accessor for URL(0);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v268 = v53;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v60))
          {
            v61 = sub_1000BA294(&qword_100BD4280);
            memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v60);
          }
          v244 = v56[7];
          v245 = (char *)a1 + v244;
          v246 = (char *)a2 + v244;
          v247 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v247 - 8) + 16))(v245, v246, v247);
          v248 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
          v248((char *)a1 + v56[8], (char *)a2 + v56[8], v60);
          v249 = v56[9];
          v250 = (_QWORD *)((char *)a1 + v249);
          v251 = (char *)a2 + v249;
          v252 = *(_QWORD *)((char *)a2 + v249 + 8);
          *v250 = *(_QWORD *)((char *)a2 + v249);
          v250[1] = v252;
          v253 = *(_QWORD *)((char *)a2 + v249 + 24);
          v250[2] = *(_QWORD *)((char *)a2 + v249 + 16);
          v250[3] = v253;
          v254 = *(int *)(type metadata accessor for NewsChannel(0) + 24);
          v255 = (char *)v250 + v254;
          v256 = &v251[v254];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v256, 1, v60))
          {
            v257 = sub_1000BA294(&qword_100BD4280);
            memcpy(v255, v256, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
          }
          else
          {
            v248(v255, v256, v60);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v255, 0, 1, v60);
          }
          *(_QWORD *)((char *)a1 + v56[10]) = *(_QWORD *)((char *)a2 + v56[10]);
          *(_QWORD *)((char *)a1 + v56[11]) = *(_QWORD *)((char *)a2 + v56[11]);
          *(_QWORD *)((char *)a1 + v56[12]) = *(_QWORD *)((char *)a2 + v56[12]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v157 = a1;
          v158 = v268;
          v159 = 1;
        }
        else
        {
          v156 = type metadata accessor for Article(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v156 - 8) + 16))(a1, a2, v156);
          v157 = a1;
          v158 = v53;
          v159 = 0;
        }
        swift_storeEnumTagMultiPayload(v157, v158, v159);
        v258 = type metadata accessor for NewsArticleComponent(0);
        *((_BYTE *)a1 + *(int *)(v258 + 20)) = *((_BYTE *)a2 + *(int *)(v258 + 20));
        v9 = a1;
        v10 = a3;
        v11 = 7;
        goto LABEL_86;
      case 8u:
        v62 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(a1, a2, v62);
        HourPrecipitationComponent = type metadata accessor for NextHourPrecipitationComponent(0);
        v64 = *(int *)(HourPrecipitationComponent + 20);
        v65 = (char *)a1 + v64;
        v66 = (char *)a2 + v64;
        v67 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
        v68 = *(int *)(HourPrecipitationComponent + 24);
        v69 = (char *)a1 + v68;
        v70 = (char *)a2 + v68;
        v71 = sub_1000BA294(&qword_100BCE378);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
        v9 = a1;
        v10 = a3;
        v11 = 8;
        goto LABEL_86;
      case 9u:
        v72 = type metadata accessor for Location(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(a1, a2, v72);
        v9 = a1;
        v10 = a3;
        v11 = 9;
        goto LABEL_86;
      case 0xAu:
        v73 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(a1, a2, v73);
        v74 = *(int *)(type metadata accessor for PressureComponent(0) + 20);
        v75 = (char *)a1 + v74;
        v76 = (char *)a2 + v74;
        v77 = type metadata accessor for PressureTrend(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
        v78 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
        v79 = v78[5];
        v80 = &v75[v79];
        v81 = &v76[v79];
        v83 = *(_QWORD *)v81;
        v82 = *((_QWORD *)v81 + 1);
        *(_QWORD *)v80 = v83;
        *((_QWORD *)v80 + 1) = v82;
        v84 = v78[6];
        v85 = &v75[v84];
        v86 = &v76[v84];
        v87 = *((_QWORD *)v86 + 1);
        *(_QWORD *)v85 = *(_QWORD *)v86;
        *((_QWORD *)v85 + 1) = v87;
        v88 = v78[7];
        v89 = &v75[v88];
        v90 = &v76[v88];
        v91 = *((_QWORD *)v90 + 1);
        *(_QWORD *)v89 = *(_QWORD *)v90;
        *((_QWORD *)v89 + 1) = v91;
        *(_QWORD *)&v75[v78[8]] = *(_QWORD *)&v76[v78[8]];
        v92 = v78[9];
        v93 = &v75[v92];
        v94 = &v76[v92];
        v95 = *((_QWORD *)v94 + 1);
        *(_QWORD *)v93 = *(_QWORD *)v94;
        *((_QWORD *)v93 + 1) = v95;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 = a1;
        v10 = a3;
        v11 = 10;
        goto LABEL_86;
      case 0xBu:
        v96 = a2[1];
        *a1 = *a2;
        a1[1] = v96;
        v97 = a2[3];
        a1[2] = a2[2];
        a1[3] = v97;
        v98 = a2[5];
        a1[4] = a2[4];
        a1[5] = v98;
        v99 = a2[7];
        a1[6] = a2[6];
        a1[7] = v99;
        v100 = a2[9];
        a1[8] = a2[8];
        a1[9] = v100;
        v101 = a2[11];
        a1[10] = a2[10];
        a1[11] = v101;
        v102 = a2[12];
        v103 = a2[13];
        a1[12] = v102;
        a1[13] = v103;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 = a1;
        v10 = a3;
        v11 = 11;
        goto LABEL_86;
      case 0xDu:
        v104 = a2[1];
        *a1 = *a2;
        a1[1] = v104;
        v105 = *(int *)(type metadata accessor for SevereAlertComponent(0) + 24);
        v106 = (char *)a1 + v105;
        v107 = (char *)a2 + v105;
        v108 = type metadata accessor for Date(0);
        v109 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v108 - 8) + 16);
        v110 = swift_bridgeObjectRetain();
        v109(v106, v107, v108, v110);
        v9 = a1;
        v10 = a3;
        v11 = 13;
        goto LABEL_86;
      case 0xEu:
        v111 = type metadata accessor for SunriseSunsetModel(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(a1, a2, v111);
        v9 = a1;
        v10 = a3;
        v11 = 14;
        goto LABEL_86;
      case 0xFu:
        v112 = type metadata accessor for HistoricalComparisons(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v112))
        {
          v113 = sub_1000BA294(&qword_100BCB328);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v112 - 8) + 16))(a1, a2, v112);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v112);
        }
        v9 = a1;
        v10 = a3;
        v11 = 15;
        goto LABEL_86;
      case 0x10u:
        v114 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(a1, a2, v114);
        v115 = (int *)type metadata accessor for UVIndexComponent(0);
        v116 = v115[5];
        v117 = (char *)a1 + v116;
        v118 = (char *)a2 + v116;
        v119 = type metadata accessor for WeatherDescription(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 16))(v117, v118, v119);
        v120 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
        v121 = &v117[v120];
        v122 = &v118[v120];
        v123 = *((_QWORD *)v122 + 1);
        *(_QWORD *)v121 = *(_QWORD *)v122;
        *((_QWORD *)v121 + 1) = v123;
        v124 = v115[6];
        v125 = (char *)a1 + v124;
        v126 = (char *)a2 + v124;
        swift_bridgeObjectRetain();
        v127 = sub_1000BA294(&qword_100BCB130);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 16))(v125, v126, v127);
        v128 = v115[7];
        v129 = (char *)a1 + v128;
        v130 = (char *)a2 + v128;
        v131 = sub_1000BA294(&qword_100BCB9F8);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
        v9 = a1;
        v10 = a3;
        v11 = 16;
        goto LABEL_86;
      case 0x11u:
        v132 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v132 - 8) + 16))(a1, a2, v132);
        v133 = *(int *)(type metadata accessor for VisibilityComponent(0) + 20);
        v134 = (_QWORD *)((char *)a1 + v133);
        v135 = (_QWORD *)((char *)a2 + v133);
        v136 = v135[1];
        *v134 = *v135;
        v134[1] = v136;
        v137 = v135[3];
        v134[2] = v135[2];
        v134[3] = v137;
        v138 = v135[5];
        v134[4] = v135[4];
        v134[5] = v138;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 = a1;
        v10 = a3;
        v11 = 17;
        goto LABEL_86;
      case 0x12u:
        v139 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v139 - 8) + 16))(a1, a2, v139);
        v140 = *(int *)(type metadata accessor for WindComponent(0) + 20);
        v141 = (char *)a1 + v140;
        v142 = (char *)a2 + v140;
        v143 = *((_QWORD *)v142 + 1);
        *(_QWORD *)v141 = *(_QWORD *)v142;
        *((_QWORD *)v141 + 1) = v143;
        v144 = *((_QWORD *)v142 + 3);
        *((_QWORD *)v141 + 2) = *((_QWORD *)v142 + 2);
        *((_QWORD *)v141 + 3) = v144;
        v145 = *((_QWORD *)v142 + 5);
        *((_QWORD *)v141 + 4) = *((_QWORD *)v142 + 4);
        *((_QWORD *)v141 + 5) = v145;
        v146 = *((_QWORD *)v142 + 7);
        *((_QWORD *)v141 + 6) = *((_QWORD *)v142 + 6);
        *((_QWORD *)v141 + 7) = v146;
        v147 = *((_QWORD *)v142 + 9);
        *((_QWORD *)v141 + 8) = *((_QWORD *)v142 + 8);
        *((_QWORD *)v141 + 9) = v147;
        v148 = *((_QWORD *)v142 + 11);
        *((_QWORD *)v141 + 10) = *((_QWORD *)v142 + 10);
        *((_QWORD *)v141 + 11) = v148;
        v149 = *((_QWORD *)v142 + 13);
        *((_QWORD *)v141 + 12) = *((_QWORD *)v142 + 12);
        *((_QWORD *)v141 + 13) = v149;
        v150 = *((_QWORD *)v142 + 15);
        *((_QWORD *)v141 + 14) = *((_QWORD *)v142 + 14);
        *((_QWORD *)v141 + 15) = v150;
        v151 = *((_QWORD *)v142 + 17);
        *((_QWORD *)v141 + 16) = *((_QWORD *)v142 + 16);
        *((_QWORD *)v141 + 17) = v151;
        v152 = *((_QWORD *)v142 + 19);
        *((_QWORD *)v141 + 18) = *((_QWORD *)v142 + 18);
        *((_QWORD *)v141 + 19) = v152;
        v153 = *((_QWORD *)v142 + 21);
        *((_QWORD *)v141 + 20) = *((_QWORD *)v142 + 20);
        *((_QWORD *)v141 + 21) = v153;
        v154 = *((_QWORD *)v142 + 23);
        *((_QWORD *)v141 + 22) = *((_QWORD *)v142 + 22);
        *((_QWORD *)v141 + 23) = v154;
        v155 = *((_QWORD *)v142 + 25);
        *((_QWORD *)v141 + 24) = *((_QWORD *)v142 + 24);
        *((_QWORD *)v141 + 25) = v155;
        *((_OWORD *)v141 + 13) = *((_OWORD *)v142 + 13);
        *((_QWORD *)v141 + 28) = *((_QWORD *)v142 + 28);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 = a1;
        v10 = a3;
        v11 = 18;
        goto LABEL_86;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
    }
  }
  return a1;
}

_QWORD *sub_1005BE5B0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t HourPrecipitationComponent;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t, __n128);
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t, __n128);
  __n128 v124;
  int *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  char *v166;
  uint64_t v167;
  int EnumCaseMultiPayload;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  int v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  void (*v201)(char *, char *, uint64_t);
  uint64_t v202;
  _QWORD *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v219;

  if (a1 != a2)
  {
    sub_1000979AC((uint64_t)a1, type metadata accessor for LocationViewComponent);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v6 = type metadata accessor for AirQuality(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_85;
      case 1u:
        v10 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = type metadata accessor for DailyForecastComponent(0);
        *(_QWORD *)((char *)a1 + *(int *)(v11 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v11 + 20));
        swift_bridgeObjectRetain();
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_85;
      case 2u:
        v219 = a3;
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        v12 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
        v13 = *(int *)(v12 + 28);
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        v16 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v16))
        {
          v17 = sub_1000BA294(&qword_100BC3360);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          *v14 = *v15;
          v14[1] = v15[1];
          v119 = *(int *)(v16 + 20);
          v120 = (char *)v14 + v119;
          v121 = (char *)v15 + v119;
          v122 = type metadata accessor for TemperatureScaleConfiguration(0);
          v123 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v122 - 8) + 16);
          v124 = swift_bridgeObjectRetain();
          v123(v120, v121, v122, v124);
          v125 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
          *(_QWORD *)&v120[v125[5]] = *(_QWORD *)&v121[v125[5]];
          *(_QWORD *)&v120[v125[6]] = *(_QWORD *)&v121[v125[6]];
          *(_QWORD *)&v120[v125[7]] = *(_QWORD *)&v121[v125[7]];
          v126 = v125[8];
          v127 = &v120[v126];
          v128 = &v121[v126];
          *(_QWORD *)v127 = *(_QWORD *)v128;
          *((_QWORD *)v127 + 1) = *((_QWORD *)v128 + 1);
          v120[v125[9]] = v121[v125[9]];
          swift_bridgeObjectRetain();
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v16);
        }
        v129 = *(int *)(v12 + 32);
        v130 = (_QWORD *)((char *)a1 + v129);
        v131 = (_QWORD *)((char *)a2 + v129);
        *v130 = *v131;
        v130[1] = v131[1];
        swift_bridgeObjectRetain();
        v7 = a1;
        v8 = v219;
        v9 = 2;
        goto LABEL_85;
      case 3u:
        v18 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a1, a2, v18);
        v19 = (int *)type metadata accessor for HourlyForecastComponent(0);
        v20 = v19[5];
        v21 = (char *)a1 + v20;
        v22 = (char *)a2 + v20;
        *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
        v23 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
        v24 = &v21[v23];
        v25 = &v22[v23];
        v26 = type metadata accessor for WeatherDescription(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v26))
        {
          v27 = sub_1000BA294(&qword_100BC3368);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v26);
        }
        v132 = v19[6];
        v133 = (char *)a1 + v132;
        v134 = (char *)a2 + v132;
        v135 = sub_1000BA294(&qword_100BCB9F8);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16))(v133, v134, v135);
        v136 = v19[7];
        v137 = (char *)a1 + v136;
        v138 = (char *)a2 + v136;
        v139 = sub_1000BA294(&qword_100BCB130);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v139 - 8) + 16))(v137, v138, v139);
        v140 = v19[8];
        v141 = (char *)a1 + v140;
        v142 = (char *)a2 + v140;
        v143 = type metadata accessor for WeatherChanges(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v142, 1, v143))
        {
          v144 = sub_1000BA294(&qword_100BCCC48);
          memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v141, 0, 1, v143);
        }
        *((_BYTE *)a1 + v19[9]) = *((_BYTE *)a2 + v19[9]);
        *((_BYTE *)a1 + v19[10]) = *((_BYTE *)a2 + v19[10]);
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_85;
      case 4u:
        v28 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(a1, a2, v28);
        v7 = a1;
        v8 = a3;
        v9 = 4;
        goto LABEL_85;
      case 5u:
        v29 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(a1, a2, v29);
        v30 = *(int *)(type metadata accessor for MapComponent(0) + 20);
        v31 = (_QWORD *)((char *)a1 + v30);
        v32 = (char *)a2 + v30;
        *v31 = *(_QWORD *)((char *)a2 + v30);
        v31[1] = *(_QWORD *)((char *)a2 + v30 + 8);
        v33 = (int *)type metadata accessor for WeatherData(0);
        v34 = v33[5];
        v35 = (char *)v31 + v34;
        v36 = &v32[v34];
        v37 = type metadata accessor for Locale(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v37))
        {
          v38 = sub_1000BA294(&qword_100BC3340);
          memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v37);
        }
        v145 = v33[6];
        v146 = (char *)v31 + v145;
        v147 = &v32[v145];
        v148 = type metadata accessor for WeatherDataModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v148 - 8) + 16))(v146, v147, v148);
        v149 = v33[7];
        v150 = (char *)v31 + v149;
        v151 = &v32[v149];
        v152 = sub_1000BA294(&qword_100BC3348);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v151, 1, v152))
        {
          v153 = type metadata accessor for WeatherData.CachingState(0);
          memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
        }
        else
        {
          v163 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v163 - 8) + 16))(v150, v151, v163);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v150, 0, 1, v152);
        }
        v164 = v33[8];
        v165 = (_QWORD *)((char *)v31 + v164);
        v166 = &v32[v164];
        v167 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v166);
        if (EnumCaseMultiPayload == 1)
        {
          v181 = type metadata accessor for WeatherStatisticsModel(0);
          (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 16))(v165, v166, v181);
          v169 = v165;
          v170 = v167;
          v171 = 1;
          goto LABEL_54;
        }
        if (!EnumCaseMultiPayload)
        {
          *v165 = *(_QWORD *)v166;
          v165[1] = *((_QWORD *)v166 + 1);
          swift_bridgeObjectRetain();
          v169 = v165;
          v170 = v167;
          v171 = 0;
LABEL_54:
          swift_storeEnumTagMultiPayload(v169, v170, v171);
          goto LABEL_56;
        }
        memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
LABEL_56:
        v182 = v33[9];
        v183 = (char *)v31 + v182;
        v184 = &v32[v182];
        v185 = type metadata accessor for WeatherDataOverrides(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v184, 1, v185))
        {
          v186 = sub_1000BA294(&qword_100BC3350);
          memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
        }
        else
        {
          v187 = type metadata accessor for Date(0);
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v184, 1, v187))
          {
            v188 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v187 - 8) + 16))(v183, v184, v187);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v183, 0, 1, v187);
          }
          v210 = *(int *)(v185 + 20);
          v211 = &v183[v210];
          v212 = &v184[v210];
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v212, 1, v187))
          {
            v213 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v187 - 8) + 16))(v211, v212, v187);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v211, 0, 1, v187);
          }
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v183, 0, 1, v185);
        }
        v7 = a1;
        v8 = a3;
        v9 = 5;
        goto LABEL_85;
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        v39 = (int *)type metadata accessor for WeatherData(0);
        v40 = v39[5];
        v41 = (char *)a1 + v40;
        v42 = (char *)a2 + v40;
        v43 = type metadata accessor for Locale(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v43))
        {
          v44 = sub_1000BA294(&qword_100BC3340);
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v43);
        }
        v154 = v39[6];
        v155 = (char *)a1 + v154;
        v156 = (char *)a2 + v154;
        v157 = type metadata accessor for WeatherDataModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 16))(v155, v156, v157);
        v158 = v39[7];
        v159 = (char *)a1 + v158;
        v160 = (char *)a2 + v158;
        v161 = sub_1000BA294(&qword_100BC3348);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v160, 1, v161))
        {
          v162 = type metadata accessor for WeatherData.CachingState(0);
          memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
        }
        else
        {
          v172 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v172 - 8) + 16))(v159, v160, v172);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v159, 0, 1, v161);
        }
        v173 = v39[8];
        v174 = (_QWORD *)((char *)a1 + v173);
        v175 = (_QWORD *)((char *)a2 + v173);
        v176 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
        v177 = swift_getEnumCaseMultiPayload(v175);
        if (v177 == 1)
        {
          v189 = type metadata accessor for WeatherStatisticsModel(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v189 - 8) + 16))(v174, v175, v189);
          v178 = v174;
          v179 = v176;
          v180 = 1;
          goto LABEL_61;
        }
        if (!v177)
        {
          *v174 = *v175;
          v174[1] = v175[1];
          swift_bridgeObjectRetain();
          v178 = v174;
          v179 = v176;
          v180 = 0;
LABEL_61:
          swift_storeEnumTagMultiPayload(v178, v179, v180);
          goto LABEL_63;
        }
        memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
LABEL_63:
        v190 = v39[9];
        v191 = (char *)a1 + v190;
        v192 = (char *)a2 + v190;
        v193 = type metadata accessor for WeatherDataOverrides(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v192, 1, v193))
        {
          v194 = sub_1000BA294(&qword_100BC3350);
          memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
        }
        else
        {
          v195 = type metadata accessor for Date(0);
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v192, 1, v195))
          {
            v196 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v191, v192, v195);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v191, 0, 1, v195);
          }
          v214 = *(int *)(v193 + 20);
          v215 = &v191[v214];
          v216 = &v192[v214];
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v216, 1, v195))
          {
            v217 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v215, v216, v195);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v215, 0, 1, v195);
          }
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v191, 0, 1, v193);
        }
        v7 = a1;
        v8 = a3;
        v9 = 6;
LABEL_85:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      case 7u:
        v45 = type metadata accessor for ArticleModel(0);
        if (swift_getEnumCaseMultiPayload(a2) == 1)
        {
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          a1[3] = a2[3];
          v46 = (int *)type metadata accessor for NewsArticle(0);
          v47 = v46[6];
          v48 = (char *)a1 + v47;
          v49 = (char *)a2 + v47;
          v50 = type metadata accessor for URL(0);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50))
          {
            v51 = sub_1000BA294(&qword_100BD4280);
            memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
          }
          v197 = v46[7];
          v198 = (char *)a1 + v197;
          v199 = (char *)a2 + v197;
          v200 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v200 - 8) + 16))(v198, v199, v200);
          v201 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
          v201((char *)a1 + v46[8], (char *)a2 + v46[8], v50);
          v202 = v46[9];
          v203 = (_QWORD *)((char *)a1 + v202);
          v204 = (char *)a2 + v202;
          *v203 = *(_QWORD *)((char *)a2 + v202);
          v203[1] = *(_QWORD *)((char *)a2 + v202 + 8);
          v203[2] = *(_QWORD *)((char *)a2 + v202 + 16);
          v203[3] = *(_QWORD *)((char *)a2 + v202 + 24);
          v205 = *(int *)(type metadata accessor for NewsChannel(0) + 24);
          v206 = (char *)v203 + v205;
          v207 = &v204[v205];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v207, 1, v50))
          {
            v208 = sub_1000BA294(&qword_100BD4280);
            memcpy(v206, v207, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
          }
          else
          {
            v201(v206, v207, v50);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v206, 0, 1, v50);
          }
          *(_QWORD *)((char *)a1 + v46[10]) = *(_QWORD *)((char *)a2 + v46[10]);
          *(_QWORD *)((char *)a1 + v46[11]) = *(_QWORD *)((char *)a2 + v46[11]);
          *(_QWORD *)((char *)a1 + v46[12]) = *(_QWORD *)((char *)a2 + v46[12]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v116 = a1;
          v117 = v45;
          v118 = 1;
        }
        else
        {
          v115 = type metadata accessor for Article(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v115 - 8) + 16))(a1, a2, v115);
          v116 = a1;
          v117 = v45;
          v118 = 0;
        }
        swift_storeEnumTagMultiPayload(v116, v117, v118);
        v209 = type metadata accessor for NewsArticleComponent(0);
        *((_BYTE *)a1 + *(int *)(v209 + 20)) = *((_BYTE *)a2 + *(int *)(v209 + 20));
        v7 = a1;
        v8 = a3;
        v9 = 7;
        goto LABEL_85;
      case 8u:
        v52 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(a1, a2, v52);
        HourPrecipitationComponent = type metadata accessor for NextHourPrecipitationComponent(0);
        v54 = *(int *)(HourPrecipitationComponent + 20);
        v55 = (char *)a1 + v54;
        v56 = (char *)a2 + v54;
        v57 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
        v58 = *(int *)(HourPrecipitationComponent + 24);
        v59 = (char *)a1 + v58;
        v60 = (char *)a2 + v58;
        v61 = sub_1000BA294(&qword_100BCE378);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
        v7 = a1;
        v8 = a3;
        v9 = 8;
        goto LABEL_85;
      case 9u:
        v62 = type metadata accessor for Location(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(a1, a2, v62);
        v7 = a1;
        v8 = a3;
        v9 = 9;
        goto LABEL_85;
      case 0xAu:
        v63 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(a1, a2, v63);
        v64 = *(int *)(type metadata accessor for PressureComponent(0) + 20);
        v65 = (char *)a1 + v64;
        v66 = (char *)a2 + v64;
        v67 = type metadata accessor for PressureTrend(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
        v68 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
        v69 = v68[5];
        v70 = &v65[v69];
        v71 = &v66[v69];
        *(_QWORD *)v70 = *(_QWORD *)v71;
        *((_QWORD *)v70 + 1) = *((_QWORD *)v71 + 1);
        v72 = v68[6];
        v73 = &v65[v72];
        v74 = &v66[v72];
        *(_QWORD *)v73 = *(_QWORD *)v74;
        *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
        v75 = v68[7];
        v76 = &v65[v75];
        v77 = &v66[v75];
        *(_QWORD *)v76 = *(_QWORD *)v77;
        *((_QWORD *)v76 + 1) = *((_QWORD *)v77 + 1);
        *(_QWORD *)&v65[v68[8]] = *(_QWORD *)&v66[v68[8]];
        v78 = v68[9];
        v79 = &v65[v78];
        v80 = &v66[v78];
        *(_QWORD *)v79 = *(_QWORD *)v80;
        *((_QWORD *)v79 + 1) = *((_QWORD *)v80 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v7 = a1;
        v8 = a3;
        v9 = 10;
        goto LABEL_85;
      case 0xBu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        a1[11] = a2[11];
        a1[12] = a2[12];
        a1[13] = a2[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v7 = a1;
        v8 = a3;
        v9 = 11;
        goto LABEL_85;
      case 0xDu:
        *a1 = *a2;
        a1[1] = a2[1];
        v81 = *(int *)(type metadata accessor for SevereAlertComponent(0) + 24);
        v82 = (char *)a1 + v81;
        v83 = (char *)a2 + v81;
        v84 = type metadata accessor for Date(0);
        v85 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v84 - 8) + 16);
        v86 = swift_bridgeObjectRetain();
        v85(v82, v83, v84, v86);
        v7 = a1;
        v8 = a3;
        v9 = 13;
        goto LABEL_85;
      case 0xEu:
        v87 = type metadata accessor for SunriseSunsetModel(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(a1, a2, v87);
        v7 = a1;
        v8 = a3;
        v9 = 14;
        goto LABEL_85;
      case 0xFu:
        v88 = type metadata accessor for HistoricalComparisons(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v88))
        {
          v89 = sub_1000BA294(&qword_100BCB328);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(a1, a2, v88);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v88);
        }
        v7 = a1;
        v8 = a3;
        v9 = 15;
        goto LABEL_85;
      case 0x10u:
        v90 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(a1, a2, v90);
        v91 = (int *)type metadata accessor for UVIndexComponent(0);
        v92 = v91[5];
        v93 = (char *)a1 + v92;
        v94 = (char *)a2 + v92;
        v95 = type metadata accessor for WeatherDescription(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v93, v94, v95);
        v96 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
        v97 = &v93[v96];
        v98 = &v94[v96];
        *(_QWORD *)v97 = *(_QWORD *)v98;
        *((_QWORD *)v97 + 1) = *((_QWORD *)v98 + 1);
        v99 = v91[6];
        v100 = (char *)a1 + v99;
        v101 = (char *)a2 + v99;
        swift_bridgeObjectRetain();
        v102 = sub_1000BA294(&qword_100BCB130);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v100, v101, v102);
        v103 = v91[7];
        v104 = (char *)a1 + v103;
        v105 = (char *)a2 + v103;
        v106 = sub_1000BA294(&qword_100BCB9F8);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v104, v105, v106);
        v7 = a1;
        v8 = a3;
        v9 = 16;
        goto LABEL_85;
      case 0x11u:
        v107 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(a1, a2, v107);
        v108 = *(int *)(type metadata accessor for VisibilityComponent(0) + 20);
        v109 = (_QWORD *)((char *)a1 + v108);
        v110 = (_QWORD *)((char *)a2 + v108);
        *v109 = *v110;
        v109[1] = v110[1];
        v109[2] = v110[2];
        v109[3] = v110[3];
        v109[4] = v110[4];
        v109[5] = v110[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v7 = a1;
        v8 = a3;
        v9 = 17;
        goto LABEL_85;
      case 0x12u:
        v111 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(a1, a2, v111);
        v112 = *(int *)(type metadata accessor for WindComponent(0) + 20);
        v113 = (_QWORD *)((char *)a1 + v112);
        v114 = (_QWORD *)((char *)a2 + v112);
        *v113 = *v114;
        v113[1] = v114[1];
        v113[2] = v114[2];
        v113[3] = v114[3];
        v113[4] = v114[4];
        v113[5] = v114[5];
        v113[6] = v114[6];
        v113[7] = v114[7];
        v113[8] = v114[8];
        v113[9] = v114[9];
        v113[10] = v114[10];
        v113[11] = v114[11];
        v113[12] = v114[12];
        v113[13] = v114[13];
        v113[14] = v114[14];
        v113[15] = v114[15];
        v113[16] = v114[16];
        v113[17] = v114[17];
        v113[18] = v114[18];
        v113[19] = v114[19];
        v113[20] = v114[20];
        v113[21] = v114[21];
        v113[22] = v114[22];
        v113[23] = v114[23];
        v113[24] = v114[24];
        v113[25] = v114[25];
        v113[26] = v114[26];
        v113[27] = v114[27];
        v113[28] = v114[28];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v7 = a1;
        v8 = a3;
        v9 = 18;
        goto LABEL_85;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

_OWORD *sub_1005BFA44(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t HourPrecipitationComponent;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  void (*v170)(char *, char *, uint64_t);
  uint64_t v171;
  _OWORD *v172;
  char *v173;
  __int128 v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;

  switch(swift_getEnumCaseMultiPayload(a2))
  {
    case 0u:
      v6 = type metadata accessor for AirQuality(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_77;
    case 1u:
      v10 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = type metadata accessor for DailyForecastComponent(0);
      *(_QWORD *)((char *)a1 + *(int *)(v11 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v11 + 20));
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_77;
    case 2u:
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      a1[2] = a2[2];
      v13 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
      v14 = *(int *)(v13 + 28);
      v15 = (_OWORD *)((char *)a1 + v14);
      v16 = (_OWORD *)((char *)a2 + v14);
      v17 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17))
      {
        v18 = sub_1000BA294(&qword_100BC3360);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        *v15 = *v16;
        v104 = *(int *)(v17 + 20);
        v105 = (char *)v15 + v104;
        v106 = (char *)v16 + v104;
        v107 = type metadata accessor for TemperatureScaleConfiguration(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 32))(v105, v106, v107);
        v108 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        *(_QWORD *)&v105[v108[5]] = *(_QWORD *)&v106[v108[5]];
        *(_QWORD *)&v105[v108[6]] = *(_QWORD *)&v106[v108[6]];
        *(_QWORD *)&v105[v108[7]] = *(_QWORD *)&v106[v108[7]];
        *(_OWORD *)&v105[v108[8]] = *(_OWORD *)&v106[v108[8]];
        v105[v108[9]] = v106[v108[9]];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v17);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v13 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 32));
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_77;
    case 3u:
      v19 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a1, a2, v19);
      v20 = (int *)type metadata accessor for HourlyForecastComponent(0);
      v21 = v20[5];
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
      v24 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
      v25 = &v22[v24];
      v26 = &v23[v24];
      v27 = type metadata accessor for WeatherDescription(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v26, 1, v27))
      {
        v28 = sub_1000BA294(&qword_100BC3368);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v25, 0, 1, v27);
      }
      v109 = v20[6];
      v110 = (char *)a1 + v109;
      v111 = (char *)a2 + v109;
      v112 = sub_1000BA294(&qword_100BCB9F8);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 32))(v110, v111, v112);
      v113 = v20[7];
      v114 = (char *)a1 + v113;
      v115 = (char *)a2 + v113;
      v116 = sub_1000BA294(&qword_100BCB130);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 32))(v114, v115, v116);
      v117 = v20[8];
      v118 = (char *)a1 + v117;
      v119 = (char *)a2 + v117;
      v120 = type metadata accessor for WeatherChanges(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v119, 1, v120))
      {
        v121 = sub_1000BA294(&qword_100BCCC48);
        memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 32))(v118, v119, v120);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v118, 0, 1, v120);
      }
      *((_BYTE *)a1 + v20[9]) = *((_BYTE *)a2 + v20[9]);
      *((_BYTE *)a1 + v20[10]) = *((_BYTE *)a2 + v20[10]);
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_77;
    case 4u:
      v29 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(a1, a2, v29);
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_77;
    case 5u:
      v30 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(a1, a2, v30);
      v31 = *(int *)(type metadata accessor for MapComponent(0) + 20);
      v32 = (char *)a1 + v31;
      v33 = (char *)a2 + v31;
      *(_OWORD *)((char *)a1 + v31) = *(_OWORD *)((char *)a2 + v31);
      v34 = (int *)type metadata accessor for WeatherData(0);
      v35 = v34[5];
      v36 = &v32[v35];
      v37 = &v33[v35];
      v38 = type metadata accessor for Locale(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v38))
      {
        v39 = sub_1000BA294(&qword_100BC3340);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, v38);
      }
      v122 = v34[6];
      v123 = &v32[v122];
      v124 = &v33[v122];
      v125 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v123, v124, v125);
      v126 = v34[7];
      v127 = &v32[v126];
      v128 = &v33[v126];
      v129 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v128, 1, v129))
      {
        v130 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
      }
      else
      {
        v140 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 32))(v127, v128, v140);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v127, 0, 1, v129);
      }
      v141 = v34[8];
      v142 = &v32[v141];
      v143 = &v33[v141];
      v144 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      if (swift_getEnumCaseMultiPayload(v143) == 1)
      {
        v145 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v142, v143, v145);
        swift_storeEnumTagMultiPayload(v142, v144, 1);
      }
      else
      {
        memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
      }
      v146 = v34[9];
      v147 = &v32[v146];
      v148 = &v33[v146];
      v149 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v148, 1, v149))
      {
        v150 = sub_1000BA294(&qword_100BC3350);
        memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
      }
      else
      {
        v162 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v148, 1, v162))
        {
          v163 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v162 - 8) + 32))(v147, v148, v162);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v147, 0, 1, v162);
        }
        v180 = *(int *)(v149 + 20);
        v181 = &v147[v180];
        v182 = &v148[v180];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v182, 1, v162))
        {
          v183 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v162 - 8) + 32))(v181, v182, v162);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v181, 0, 1, v162);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v147, 0, 1, v149);
      }
      v7 = a1;
      v8 = a3;
      v9 = 5;
      goto LABEL_77;
    case 6u:
      *a1 = *a2;
      v40 = (int *)type metadata accessor for WeatherData(0);
      v41 = v40[5];
      v42 = (char *)a1 + v41;
      v43 = (char *)a2 + v41;
      v44 = type metadata accessor for Locale(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44))
      {
        v45 = sub_1000BA294(&qword_100BC3340);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v44);
      }
      v131 = v40[6];
      v132 = (char *)a1 + v131;
      v133 = (char *)a2 + v131;
      v134 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 32))(v132, v133, v134);
      v135 = v40[7];
      v136 = (char *)a1 + v135;
      v137 = (char *)a2 + v135;
      v138 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v137, 1, v138))
      {
        v139 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
      }
      else
      {
        v151 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 32))(v136, v137, v151);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v136, 0, 1, v138);
      }
      v152 = v40[8];
      v153 = (char *)a1 + v152;
      v154 = (char *)a2 + v152;
      v155 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      if (swift_getEnumCaseMultiPayload(v154) == 1)
      {
        v156 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v156 - 8) + 32))(v153, v154, v156);
        swift_storeEnumTagMultiPayload(v153, v155, 1);
      }
      else
      {
        memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
      }
      v157 = v40[9];
      v158 = (char *)a1 + v157;
      v159 = (char *)a2 + v157;
      v160 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v159, 1, v160))
      {
        v161 = sub_1000BA294(&qword_100BC3350);
        memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
      }
      else
      {
        v164 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v159, 1, v164))
        {
          v165 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v158, v159, v164);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v158, 0, 1, v164);
        }
        v184 = *(int *)(v160 + 20);
        v185 = &v158[v184];
        v186 = &v159[v184];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v186, 1, v164))
        {
          v187 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v185, v186, v164);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v185, 0, 1, v164);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v158, 0, 1, v160);
      }
      v7 = a1;
      v8 = a3;
      v9 = 6;
      goto LABEL_77;
    case 7u:
      v46 = type metadata accessor for ArticleModel(0);
      if (swift_getEnumCaseMultiPayload(a2) == 1)
      {
        v47 = a2[1];
        *a1 = *a2;
        a1[1] = v47;
        v48 = (int *)type metadata accessor for NewsArticle(0);
        v49 = v48[6];
        v50 = (char *)a1 + v49;
        v51 = (char *)a2 + v49;
        v52 = type metadata accessor for URL(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v51, 1, v52))
        {
          v53 = sub_1000BA294(&qword_100BD4280);
          memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v50, 0, 1, v52);
        }
        v166 = v48[7];
        v167 = (char *)a1 + v166;
        v168 = (char *)a2 + v166;
        v169 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 32))(v167, v168, v169);
        v170 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32);
        v170((char *)a1 + v48[8], (char *)a2 + v48[8], v52);
        v171 = v48[9];
        v172 = (_OWORD *)((char *)a1 + v171);
        v173 = (char *)a2 + v171;
        v174 = *(_OWORD *)((char *)a2 + v171 + 16);
        *v172 = *(_OWORD *)((char *)a2 + v171);
        v172[1] = v174;
        v175 = *(int *)(type metadata accessor for NewsChannel(0) + 24);
        v176 = (char *)v172 + v175;
        v177 = &v173[v175];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v177, 1, v52))
        {
          v178 = sub_1000BA294(&qword_100BD4280);
          memcpy(v176, v177, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
        }
        else
        {
          v170(v176, v177, v52);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v176, 0, 1, v52);
        }
        *(_QWORD *)((char *)a1 + v48[10]) = *(_QWORD *)((char *)a2 + v48[10]);
        *(_QWORD *)((char *)a1 + v48[11]) = *(_QWORD *)((char *)a2 + v48[11]);
        *(_QWORD *)((char *)a1 + v48[12]) = *(_QWORD *)((char *)a2 + v48[12]);
        v101 = a1;
        v102 = v46;
        v103 = 1;
      }
      else
      {
        v100 = type metadata accessor for Article(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(a1, a2, v100);
        v101 = a1;
        v102 = v46;
        v103 = 0;
      }
      swift_storeEnumTagMultiPayload(v101, v102, v103);
      v179 = type metadata accessor for NewsArticleComponent(0);
      *((_BYTE *)a1 + *(int *)(v179 + 20)) = *((_BYTE *)a2 + *(int *)(v179 + 20));
      v7 = a1;
      v8 = a3;
      v9 = 7;
      goto LABEL_77;
    case 8u:
      v54 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(a1, a2, v54);
      HourPrecipitationComponent = type metadata accessor for NextHourPrecipitationComponent(0);
      v56 = *(int *)(HourPrecipitationComponent + 20);
      v57 = (char *)a1 + v56;
      v58 = (char *)a2 + v56;
      v59 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v57, v58, v59);
      v60 = *(int *)(HourPrecipitationComponent + 24);
      v61 = (char *)a1 + v60;
      v62 = (char *)a2 + v60;
      v63 = sub_1000BA294(&qword_100BCE378);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v61, v62, v63);
      v7 = a1;
      v8 = a3;
      v9 = 8;
      goto LABEL_77;
    case 9u:
      v64 = type metadata accessor for Location(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(a1, a2, v64);
      v7 = a1;
      v8 = a3;
      v9 = 9;
      goto LABEL_77;
    case 0xAu:
      v65 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(a1, a2, v65);
      v66 = *(int *)(type metadata accessor for PressureComponent(0) + 20);
      v67 = (char *)a1 + v66;
      v68 = (char *)a2 + v66;
      v69 = type metadata accessor for PressureTrend(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
      v70 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
      *(_OWORD *)&v67[v70[5]] = *(_OWORD *)&v68[v70[5]];
      *(_OWORD *)&v67[v70[6]] = *(_OWORD *)&v68[v70[6]];
      *(_OWORD *)&v67[v70[7]] = *(_OWORD *)&v68[v70[7]];
      *(_QWORD *)&v67[v70[8]] = *(_QWORD *)&v68[v70[8]];
      *(_OWORD *)&v67[v70[9]] = *(_OWORD *)&v68[v70[9]];
      v7 = a1;
      v8 = a3;
      v9 = 10;
      goto LABEL_77;
    case 0xDu:
      *a1 = *a2;
      v71 = *(int *)(type metadata accessor for SevereAlertComponent(0) + 24);
      v72 = (char *)a1 + v71;
      v73 = (char *)a2 + v71;
      v74 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
      v7 = a1;
      v8 = a3;
      v9 = 13;
      goto LABEL_77;
    case 0xEu:
      v75 = type metadata accessor for SunriseSunsetModel(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(a1, a2, v75);
      v7 = a1;
      v8 = a3;
      v9 = 14;
      goto LABEL_77;
    case 0xFu:
      v76 = type metadata accessor for HistoricalComparisons(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v76))
      {
        v77 = sub_1000BA294(&qword_100BCB328);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(a1, a2, v76);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v76);
      }
      v7 = a1;
      v8 = a3;
      v9 = 15;
      goto LABEL_77;
    case 0x10u:
      v78 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(a1, a2, v78);
      v79 = (int *)type metadata accessor for UVIndexComponent(0);
      v80 = v79[5];
      v81 = (char *)a1 + v80;
      v82 = (char *)a2 + v80;
      v83 = type metadata accessor for WeatherDescription(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v81, v82, v83);
      v84 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
      *(_OWORD *)&v81[*(int *)(v84 + 20)] = *(_OWORD *)&v82[*(int *)(v84 + 20)];
      v85 = v79[6];
      v86 = (char *)a1 + v85;
      v87 = (char *)a2 + v85;
      v88 = sub_1000BA294(&qword_100BCB130);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v86, v87, v88);
      v89 = v79[7];
      v90 = (char *)a1 + v89;
      v91 = (char *)a2 + v89;
      v92 = sub_1000BA294(&qword_100BCB9F8);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32))(v90, v91, v92);
      v7 = a1;
      v8 = a3;
      v9 = 16;
      goto LABEL_77;
    case 0x11u:
      v93 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(a1, a2, v93);
      v94 = *(int *)(type metadata accessor for VisibilityComponent(0) + 20);
      v95 = (_OWORD *)((char *)a1 + v94);
      v96 = (_OWORD *)((char *)a2 + v94);
      v97 = v96[1];
      *v95 = *v96;
      v95[1] = v97;
      v95[2] = v96[2];
      v7 = a1;
      v8 = a3;
      v9 = 17;
      goto LABEL_77;
    case 0x12u:
      v98 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v98 - 8) + 32))(a1, a2, v98);
      v99 = type metadata accessor for WindComponent(0);
      memcpy((char *)a1 + *(int *)(v99 + 20), (char *)a2 + *(int *)(v99 + 20), 0xE8uLL);
      v7 = a1;
      v8 = a3;
      v9 = 18;
LABEL_77:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_OWORD *sub_1005C0A84(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t HourPrecipitationComponent;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  void (*v170)(char *, char *, uint64_t);
  uint64_t v171;
  _OWORD *v172;
  char *v173;
  __int128 v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;

  if (a1 != a2)
  {
    sub_1000979AC((uint64_t)a1, type metadata accessor for LocationViewComponent);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v6 = type metadata accessor for AirQuality(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_78;
      case 1u:
        v10 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v11 = type metadata accessor for DailyForecastComponent(0);
        *(_QWORD *)((char *)a1 + *(int *)(v11 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v11 + 20));
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_78;
      case 2u:
        v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        a1[2] = a2[2];
        v13 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
        v14 = *(int *)(v13 + 28);
        v15 = (_OWORD *)((char *)a1 + v14);
        v16 = (_OWORD *)((char *)a2 + v14);
        v17 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17))
        {
          v18 = sub_1000BA294(&qword_100BC3360);
          memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        }
        else
        {
          *v15 = *v16;
          v104 = *(int *)(v17 + 20);
          v105 = (char *)v15 + v104;
          v106 = (char *)v16 + v104;
          v107 = type metadata accessor for TemperatureScaleConfiguration(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 32))(v105, v106, v107);
          v108 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
          *(_QWORD *)&v105[v108[5]] = *(_QWORD *)&v106[v108[5]];
          *(_QWORD *)&v105[v108[6]] = *(_QWORD *)&v106[v108[6]];
          *(_QWORD *)&v105[v108[7]] = *(_QWORD *)&v106[v108[7]];
          *(_OWORD *)&v105[v108[8]] = *(_OWORD *)&v106[v108[8]];
          v105[v108[9]] = v106[v108[9]];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v17);
        }
        *(_OWORD *)((char *)a1 + *(int *)(v13 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 32));
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_78;
      case 3u:
        v19 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a1, a2, v19);
        v20 = (int *)type metadata accessor for HourlyForecastComponent(0);
        v21 = v20[5];
        v22 = (char *)a1 + v21;
        v23 = (char *)a2 + v21;
        *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
        v24 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
        v25 = &v22[v24];
        v26 = &v23[v24];
        v27 = type metadata accessor for WeatherDescription(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v26, 1, v27))
        {
          v28 = sub_1000BA294(&qword_100BC3368);
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v25, 0, 1, v27);
        }
        v109 = v20[6];
        v110 = (char *)a1 + v109;
        v111 = (char *)a2 + v109;
        v112 = sub_1000BA294(&qword_100BCB9F8);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 32))(v110, v111, v112);
        v113 = v20[7];
        v114 = (char *)a1 + v113;
        v115 = (char *)a2 + v113;
        v116 = sub_1000BA294(&qword_100BCB130);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 32))(v114, v115, v116);
        v117 = v20[8];
        v118 = (char *)a1 + v117;
        v119 = (char *)a2 + v117;
        v120 = type metadata accessor for WeatherChanges(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v119, 1, v120))
        {
          v121 = sub_1000BA294(&qword_100BCCC48);
          memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 32))(v118, v119, v120);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v118, 0, 1, v120);
        }
        *((_BYTE *)a1 + v20[9]) = *((_BYTE *)a2 + v20[9]);
        *((_BYTE *)a1 + v20[10]) = *((_BYTE *)a2 + v20[10]);
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_78;
      case 4u:
        v29 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(a1, a2, v29);
        v7 = a1;
        v8 = a3;
        v9 = 4;
        goto LABEL_78;
      case 5u:
        v30 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(a1, a2, v30);
        v31 = *(int *)(type metadata accessor for MapComponent(0) + 20);
        v32 = (char *)a1 + v31;
        v33 = (char *)a2 + v31;
        *(_OWORD *)((char *)a1 + v31) = *(_OWORD *)((char *)a2 + v31);
        v34 = (int *)type metadata accessor for WeatherData(0);
        v35 = v34[5];
        v36 = &v32[v35];
        v37 = &v33[v35];
        v38 = type metadata accessor for Locale(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v38))
        {
          v39 = sub_1000BA294(&qword_100BC3340);
          memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, v38);
        }
        v122 = v34[6];
        v123 = &v32[v122];
        v124 = &v33[v122];
        v125 = type metadata accessor for WeatherDataModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v123, v124, v125);
        v126 = v34[7];
        v127 = &v32[v126];
        v128 = &v33[v126];
        v129 = sub_1000BA294(&qword_100BC3348);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v128, 1, v129))
        {
          v130 = type metadata accessor for WeatherData.CachingState(0);
          memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
        }
        else
        {
          v140 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 32))(v127, v128, v140);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v127, 0, 1, v129);
        }
        v141 = v34[8];
        v142 = &v32[v141];
        v143 = &v33[v141];
        v144 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
        if (swift_getEnumCaseMultiPayload(v143) == 1)
        {
          v145 = type metadata accessor for WeatherStatisticsModel(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v142, v143, v145);
          swift_storeEnumTagMultiPayload(v142, v144, 1);
        }
        else
        {
          memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
        }
        v146 = v34[9];
        v147 = &v32[v146];
        v148 = &v33[v146];
        v149 = type metadata accessor for WeatherDataOverrides(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v148, 1, v149))
        {
          v150 = sub_1000BA294(&qword_100BC3350);
          memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
        }
        else
        {
          v162 = type metadata accessor for Date(0);
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v148, 1, v162))
          {
            v163 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v162 - 8) + 32))(v147, v148, v162);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v147, 0, 1, v162);
          }
          v180 = *(int *)(v149 + 20);
          v181 = &v147[v180];
          v182 = &v148[v180];
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v182, 1, v162))
          {
            v183 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v162 - 8) + 32))(v181, v182, v162);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v181, 0, 1, v162);
          }
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v147, 0, 1, v149);
        }
        v7 = a1;
        v8 = a3;
        v9 = 5;
        goto LABEL_78;
      case 6u:
        *a1 = *a2;
        v40 = (int *)type metadata accessor for WeatherData(0);
        v41 = v40[5];
        v42 = (char *)a1 + v41;
        v43 = (char *)a2 + v41;
        v44 = type metadata accessor for Locale(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44))
        {
          v45 = sub_1000BA294(&qword_100BC3340);
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v44);
        }
        v131 = v40[6];
        v132 = (char *)a1 + v131;
        v133 = (char *)a2 + v131;
        v134 = type metadata accessor for WeatherDataModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 32))(v132, v133, v134);
        v135 = v40[7];
        v136 = (char *)a1 + v135;
        v137 = (char *)a2 + v135;
        v138 = sub_1000BA294(&qword_100BC3348);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v137, 1, v138))
        {
          v139 = type metadata accessor for WeatherData.CachingState(0);
          memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
        }
        else
        {
          v151 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 32))(v136, v137, v151);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v136, 0, 1, v138);
        }
        v152 = v40[8];
        v153 = (char *)a1 + v152;
        v154 = (char *)a2 + v152;
        v155 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
        if (swift_getEnumCaseMultiPayload(v154) == 1)
        {
          v156 = type metadata accessor for WeatherStatisticsModel(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v156 - 8) + 32))(v153, v154, v156);
          swift_storeEnumTagMultiPayload(v153, v155, 1);
        }
        else
        {
          memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
        }
        v157 = v40[9];
        v158 = (char *)a1 + v157;
        v159 = (char *)a2 + v157;
        v160 = type metadata accessor for WeatherDataOverrides(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v159, 1, v160))
        {
          v161 = sub_1000BA294(&qword_100BC3350);
          memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
        }
        else
        {
          v164 = type metadata accessor for Date(0);
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v159, 1, v164))
          {
            v165 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v158, v159, v164);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v158, 0, 1, v164);
          }
          v184 = *(int *)(v160 + 20);
          v185 = &v158[v184];
          v186 = &v159[v184];
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v186, 1, v164))
          {
            v187 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v185, v186, v164);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v185, 0, 1, v164);
          }
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v158, 0, 1, v160);
        }
        v7 = a1;
        v8 = a3;
        v9 = 6;
        goto LABEL_78;
      case 7u:
        v46 = type metadata accessor for ArticleModel(0);
        if (swift_getEnumCaseMultiPayload(a2) == 1)
        {
          v47 = a2[1];
          *a1 = *a2;
          a1[1] = v47;
          v48 = (int *)type metadata accessor for NewsArticle(0);
          v49 = v48[6];
          v50 = (char *)a1 + v49;
          v51 = (char *)a2 + v49;
          v52 = type metadata accessor for URL(0);
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v51, 1, v52))
          {
            v53 = sub_1000BA294(&qword_100BD4280);
            memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v50, 0, 1, v52);
          }
          v166 = v48[7];
          v167 = (char *)a1 + v166;
          v168 = (char *)a2 + v166;
          v169 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 32))(v167, v168, v169);
          v170 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32);
          v170((char *)a1 + v48[8], (char *)a2 + v48[8], v52);
          v171 = v48[9];
          v172 = (_OWORD *)((char *)a1 + v171);
          v173 = (char *)a2 + v171;
          v174 = *(_OWORD *)((char *)a2 + v171 + 16);
          *v172 = *(_OWORD *)((char *)a2 + v171);
          v172[1] = v174;
          v175 = *(int *)(type metadata accessor for NewsChannel(0) + 24);
          v176 = (char *)v172 + v175;
          v177 = &v173[v175];
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v177, 1, v52))
          {
            v178 = sub_1000BA294(&qword_100BD4280);
            memcpy(v176, v177, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
          }
          else
          {
            v170(v176, v177, v52);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v176, 0, 1, v52);
          }
          *(_QWORD *)((char *)a1 + v48[10]) = *(_QWORD *)((char *)a2 + v48[10]);
          *(_QWORD *)((char *)a1 + v48[11]) = *(_QWORD *)((char *)a2 + v48[11]);
          *(_QWORD *)((char *)a1 + v48[12]) = *(_QWORD *)((char *)a2 + v48[12]);
          v101 = a1;
          v102 = v46;
          v103 = 1;
        }
        else
        {
          v100 = type metadata accessor for Article(0);
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(a1, a2, v100);
          v101 = a1;
          v102 = v46;
          v103 = 0;
        }
        swift_storeEnumTagMultiPayload(v101, v102, v103);
        v179 = type metadata accessor for NewsArticleComponent(0);
        *((_BYTE *)a1 + *(int *)(v179 + 20)) = *((_BYTE *)a2 + *(int *)(v179 + 20));
        v7 = a1;
        v8 = a3;
        v9 = 7;
        goto LABEL_78;
      case 8u:
        v54 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(a1, a2, v54);
        HourPrecipitationComponent = type metadata accessor for NextHourPrecipitationComponent(0);
        v56 = *(int *)(HourPrecipitationComponent + 20);
        v57 = (char *)a1 + v56;
        v58 = (char *)a2 + v56;
        v59 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v57, v58, v59);
        v60 = *(int *)(HourPrecipitationComponent + 24);
        v61 = (char *)a1 + v60;
        v62 = (char *)a2 + v60;
        v63 = sub_1000BA294(&qword_100BCE378);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v61, v62, v63);
        v7 = a1;
        v8 = a3;
        v9 = 8;
        goto LABEL_78;
      case 9u:
        v64 = type metadata accessor for Location(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(a1, a2, v64);
        v7 = a1;
        v8 = a3;
        v9 = 9;
        goto LABEL_78;
      case 0xAu:
        v65 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(a1, a2, v65);
        v66 = *(int *)(type metadata accessor for PressureComponent(0) + 20);
        v67 = (char *)a1 + v66;
        v68 = (char *)a2 + v66;
        v69 = type metadata accessor for PressureTrend(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
        v70 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
        *(_OWORD *)&v67[v70[5]] = *(_OWORD *)&v68[v70[5]];
        *(_OWORD *)&v67[v70[6]] = *(_OWORD *)&v68[v70[6]];
        *(_OWORD *)&v67[v70[7]] = *(_OWORD *)&v68[v70[7]];
        *(_QWORD *)&v67[v70[8]] = *(_QWORD *)&v68[v70[8]];
        *(_OWORD *)&v67[v70[9]] = *(_OWORD *)&v68[v70[9]];
        v7 = a1;
        v8 = a3;
        v9 = 10;
        goto LABEL_78;
      case 0xDu:
        *a1 = *a2;
        v71 = *(int *)(type metadata accessor for SevereAlertComponent(0) + 24);
        v72 = (char *)a1 + v71;
        v73 = (char *)a2 + v71;
        v74 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
        v7 = a1;
        v8 = a3;
        v9 = 13;
        goto LABEL_78;
      case 0xEu:
        v75 = type metadata accessor for SunriseSunsetModel(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(a1, a2, v75);
        v7 = a1;
        v8 = a3;
        v9 = 14;
        goto LABEL_78;
      case 0xFu:
        v76 = type metadata accessor for HistoricalComparisons(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v76))
        {
          v77 = sub_1000BA294(&qword_100BCB328);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(a1, a2, v76);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v76);
        }
        v7 = a1;
        v8 = a3;
        v9 = 15;
        goto LABEL_78;
      case 0x10u:
        v78 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(a1, a2, v78);
        v79 = (int *)type metadata accessor for UVIndexComponent(0);
        v80 = v79[5];
        v81 = (char *)a1 + v80;
        v82 = (char *)a2 + v80;
        v83 = type metadata accessor for WeatherDescription(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v81, v82, v83);
        v84 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
        *(_OWORD *)&v81[*(int *)(v84 + 20)] = *(_OWORD *)&v82[*(int *)(v84 + 20)];
        v85 = v79[6];
        v86 = (char *)a1 + v85;
        v87 = (char *)a2 + v85;
        v88 = sub_1000BA294(&qword_100BCB130);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v86, v87, v88);
        v89 = v79[7];
        v90 = (char *)a1 + v89;
        v91 = (char *)a2 + v89;
        v92 = sub_1000BA294(&qword_100BCB9F8);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32))(v90, v91, v92);
        v7 = a1;
        v8 = a3;
        v9 = 16;
        goto LABEL_78;
      case 0x11u:
        v93 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(a1, a2, v93);
        v94 = *(int *)(type metadata accessor for VisibilityComponent(0) + 20);
        v95 = (_OWORD *)((char *)a1 + v94);
        v96 = (_OWORD *)((char *)a2 + v94);
        v97 = v96[1];
        *v95 = *v96;
        v95[1] = v97;
        v95[2] = v96[2];
        v7 = a1;
        v8 = a3;
        v9 = 17;
        goto LABEL_78;
      case 0x12u:
        v98 = type metadata accessor for CurrentWeather(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v98 - 8) + 32))(a1, a2, v98);
        v99 = type metadata accessor for WindComponent(0);
        memcpy((char *)a1 + *(int *)(v99 + 20), (char *)a2 + *(int *)(v99 + 20), 0xE8uLL);
        v7 = a1;
        v8 = a3;
        v9 = 18;
LABEL_78:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void sub_1005C1ADC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BF3B48)
  {
    v2 = type metadata accessor for HistoricalComparisons(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BF3B48);
  }
}

void sub_1005C1B30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  _QWORD v91[41];
  uint64_t v92;
  uint64_t v93;

  v92 = a2;
  v93 = a1;
  v91[6] = type metadata accessor for WindComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v91[23] = v3;
  v4 = sub_10009876C();
  v91[5] = type metadata accessor for VisibilityComponent(v4);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v91[39] = v6;
  v7 = sub_10009876C();
  v91[9] = type metadata accessor for UVIndexComponent(v7);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v91[24] = v9;
  v10 = sub_10009876C();
  type metadata accessor for AveragesComponent(v10);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v91[22] = v12;
  v13 = sub_10009876C();
  v14 = type metadata accessor for SunriseSunsetModel(v13);
  v91[25] = *(_QWORD *)(v14 - 8);
  v91[26] = v14;
  __chkstk_darwin(v14);
  sub_100088FDC();
  v91[20] = v15;
  v16 = sub_10009876C();
  v91[0] = type metadata accessor for SevereAlertComponent(v16);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v91[21] = v18;
  v19 = sub_10009876C();
  v91[4] = type metadata accessor for PressureComponent(v19);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100088FDC();
  v91[18] = v21;
  v22 = sub_10009876C();
  type metadata accessor for NotificationsOptInComponent(v22);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v91[17] = v24;
  v25 = sub_10009876C();
  v91[8] = type metadata accessor for NextHourPrecipitationComponent(v25);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_100088FDC();
  v91[19] = v27;
  v28 = sub_10009876C();
  v91[3] = type metadata accessor for NewsArticleComponent(v28);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_100088FDC();
  v91[16] = v30;
  v31 = sub_10009876C();
  type metadata accessor for MoonComponent(v31);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  sub_100088FDC();
  v91[14] = v33;
  v34 = sub_10009876C();
  v91[2] = type metadata accessor for MapComponent(v34);
  sub_1000B42B0();
  __chkstk_darwin(v35);
  sub_100088FDC();
  v91[15] = v36;
  v37 = sub_10009876C();
  type metadata accessor for HumidityComponent(v37);
  sub_1000B42B0();
  __chkstk_darwin(v38);
  sub_100088FDC();
  v91[13] = v39;
  v40 = sub_10009876C();
  type metadata accessor for HourlyForecastComponent(v40);
  sub_1000B42B0();
  __chkstk_darwin(v41);
  sub_100088FDC();
  v91[12] = v42;
  v43 = sub_10009876C();
  type metadata accessor for FeelsLikeComponent(v43);
  sub_1000B42B0();
  __chkstk_darwin(v44);
  sub_100088FDC();
  v91[10] = v45;
  v46 = sub_10009876C();
  v91[1] = type metadata accessor for DailyForecastComponent(v46);
  sub_1000B42B0();
  __chkstk_darwin(v47);
  sub_100088FDC();
  v91[11] = v48;
  v49 = sub_10009876C();
  type metadata accessor for AirQualityComponent(v49);
  sub_1000B42B0();
  __chkstk_darwin(v50);
  sub_100088FDC();
  v91[7] = v51;
  v52 = sub_10009876C();
  type metadata accessor for LocationViewComponent(v52);
  sub_1000B42B0();
  __chkstk_darwin(v53);
  sub_1000986FC();
  v91[37] = v54;
  sub_10009D2A4();
  __chkstk_darwin(v55);
  sub_1000860D0();
  v91[40] = v56;
  sub_10009D2A4();
  __chkstk_darwin(v57);
  sub_1000860D0();
  v91[38] = v58;
  sub_10009D2A4();
  __chkstk_darwin(v59);
  sub_1000860D0();
  v91[34] = v60;
  sub_10009D2A4();
  __chkstk_darwin(v61);
  sub_1000860D0();
  v91[33] = v62;
  sub_10009D2A4();
  __chkstk_darwin(v63);
  sub_1000860D0();
  v91[35] = v64;
  sub_10009D2A4();
  __chkstk_darwin(v65);
  sub_1000860D0();
  v91[30] = v66;
  sub_10009D2A4();
  __chkstk_darwin(v67);
  sub_1000860D0();
  v91[27] = v68;
  sub_10009D2A4();
  __chkstk_darwin(v69);
  sub_1000860D0();
  v91[32] = v70;
  sub_10009D2A4();
  __chkstk_darwin(v71);
  sub_1000860D0();
  v91[29] = v72;
  sub_10009D2A4();
  __chkstk_darwin(v73);
  sub_1000860D0();
  v91[36] = v74;
  sub_10009D2A4();
  __chkstk_darwin(v75);
  sub_1000860D0();
  v91[31] = v76;
  sub_10009D2A4();
  __chkstk_darwin(v77);
  sub_1000C0E4C();
  __chkstk_darwin(v78);
  sub_1000860D0();
  v91[28] = v79;
  sub_10009D2A4();
  __chkstk_darwin(v80);
  sub_10008616C();
  __chkstk_darwin(v81);
  sub_100099338();
  __chkstk_darwin(v82);
  __chkstk_darwin(v83);
  __chkstk_darwin(v84);
  sub_1000BA294(&qword_100BF3B88);
  sub_1000B42B0();
  __chkstk_darwin(v85);
  v87 = (char *)v91 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = (uint64_t)&v87[*(int *)(v88 + 48)];
  sub_1000C0AD8(v93);
  v93 = v89;
  sub_1001009A4(v92, v89);
  v90 = (char *)sub_1005C1FE8 + 4 * word_1009B1DEE[sub_10009D644((uint64_t)v87)];
  __asm { BR              X10 }
}

uint64_t sub_1005C1FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  sub_100099BB8(v3);
  if (sub_1000BC634())
  {
    sub_1000979AC(v2, type metadata accessor for AirQualityComponent);
    sub_1005C37C0(v3);
    v6 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 56);
    sub_1000D1918(v1);
    v6 = ((uint64_t (*)(uint64_t, uint64_t))static AirQuality.== infix(_:_:))(v2, v4);
    sub_1000D9FBC();
    sub_1000979AC(v2, type metadata accessor for AirQualityComponent);
    sub_1000CFE48(v5, type metadata accessor for LocationViewComponent);
  }
  return v6 & 1;
}

void sub_1005C2A98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001009A4(v0, (uint64_t)v3);
  v4 = (char *)sub_1005C2B14 + 4 * byte_1009B1E16[swift_getEnumCaseMultiPayload(v3)];
  __asm { BR              X10 }
}

uint64_t sub_1005C2B14(uint64_t a1)
{
  sub_10009C968(a1, type metadata accessor for LocationViewComponent);
  return 0;
}

uint64_t sub_1005C2C94(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100B5ABB8, a1, a2, &unk_100BC2898);
  sub_10009DED8();
  if (v2 >= 0x14)
    return 20;
  else
    return v2;
}

BOOL sub_1005C2CDC(Swift::String string)
{
  uint64_t v1;
  void *object;
  Swift::String v3;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5ADB8, v3);
  sub_10009DED8();
  return v1 != 0;
}

void sub_1005C2D20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  sub_10068ACC0(*a1, *a2);
}

void sub_1005C2D2C()
{
  unsigned __int8 *v0;

  sub_1004A76B8(*v0);
}

double sub_1005C2D34(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1001D8784(a1, *v1);
}

void sub_1005C2D3C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001D9FF8(a1, *v1);
}

uint64_t sub_1005C2D44@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1005C2C94(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1005C2D70@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100103744(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1005C2D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1005C38BC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

BOOL sub_1005C2DF4@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_1005C2CDC(*a1);
  *a2 = result;
  return result;
}

void sub_1005C2E28(_QWORD *a1@<X8>)
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1005C2E3C@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  uint64_t result;

  result = sub_1005C2D18(a1);
  *a2 = result != 0;
  return result;
}

uint64_t sub_1005C2E68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005C3800();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005C2E90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005C3800();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005C2EB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD v40[23];
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v45;

  v40[15] = a2;
  v41 = sub_1000BA294(&qword_100BF3B90);
  v40[17] = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  sub_100088FDC();
  v45 = v6;
  v7 = sub_10009876C();
  v40[16] = type metadata accessor for LocationViewComponent(v7);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v9);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v10);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v11);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v12);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v13);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v14);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v15);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v16);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v17);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v18);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v19);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v20);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v21);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v22);
  sub_1000C0E4C();
  __chkstk_darwin(v23);
  sub_10008616C();
  __chkstk_darwin(v24);
  v26 = (char *)v40 - v25;
  __chkstk_darwin(v27);
  sub_100099338();
  __chkstk_darwin(v28);
  v30 = (char *)v40 - v29;
  __chkstk_darwin(v31);
  v33 = (char *)v40 - v32;
  v35 = a1[3];
  v34 = a1[4];
  v42 = a1;
  sub_1000DB418(a1, v35);
  v36 = sub_1005C3800();
  v37 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LocationViewComponent.CodingKeys, &type metadata for LocationViewComponent.CodingKeys, v36, v35, v34);
  if (!v37)
  {
    v40[1] = v30;
    v40[2] = v3;
    v40[3] = v26;
    v40[4] = v4;
    v40[5] = v2;
    v43 = v33;
    sub_1005C383C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for LocationViewComponent.ComponentType, v38, v41);
    __asm { BR              X10 }
  }
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v42);
}

void sub_1005C3250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000C4BD8();
  sub_1000C56B4();
  sub_1003881D4(v3, v4);
  sub_1000BB1A0();
  if (!v1)
  {
    v5 = sub_1000DF794();
    swift_storeEnumTagMultiPayload(v5, v6, 0);
    v7 = v0;
    v8 = *(_QWORD *)(v2 - 248);
    sub_1000A15B4(v7, v8, type metadata accessor for LocationViewComponent);
    sub_1000A15B4(v8, *(_QWORD *)(v2 - 328), type metadata accessor for LocationViewComponent);
  }
  JUMPOUT(0x1005C31F8);
}

uint64_t sub_1005C364C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005C2EB8(a1, a2);
}

uint64_t sub_1005C3660@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t inited;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v2, &v8);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  sub_1005C2A98();
  *(_QWORD *)(inited + 72) = &type metadata for LocationViewComponent.ComponentType;
  *(_BYTE *)(inited + 48) = v4;
  v5 = Dictionary.init(dictionaryLiteral:)(inited);
  a1[3] = sub_1000BA294(&qword_100BF3BA8);
  a1[4] = sub_1005C3878();
  sub_10005F164(a1);
  v6 = type metadata accessor for LocationViewComponent(0);
  return ShortDescription.init(name:_:)(0xD000000000000015, 0x80000001009B1E50, v5, v6);
}

uint64_t sub_1005C3754(uint64_t a1)
{
  uint64_t v2;

  sub_100086DA4(&qword_100BF3BB8, type metadata accessor for LocationViewComponent, (uint64_t)&unk_1009B1FD0);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_1005C3794()
{
  sub_100086DA4(&qword_100BF3B80, type metadata accessor for LocationViewComponent, (uint64_t)&unk_1009B1FA8);
}

uint64_t sub_1005C37C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BF3B88);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1005C3800()
{
  unint64_t result;

  result = qword_100BF3B98;
  if (!qword_100BF3B98)
  {
    result = swift_getWitnessTable(&unk_1009B2124, &type metadata for LocationViewComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF3B98);
  }
  return result;
}

unint64_t sub_1005C383C()
{
  unint64_t result;

  result = qword_100BF3BA0;
  if (!qword_100BF3BA0)
  {
    result = swift_getWitnessTable(&unk_1009B1EE0, &type metadata for LocationViewComponent.ComponentType);
    atomic_store(result, (unint64_t *)&qword_100BF3BA0);
  }
  return result;
}

unint64_t sub_1005C3878()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF3BB0;
  if (!qword_100BF3BB0)
  {
    v1 = sub_100075EB0(&qword_100BF3BA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF3BB0);
  }
  return result;
}

unint64_t sub_1005C38BC()
{
  unint64_t result;

  result = qword_100BF3BC0;
  if (!qword_100BF3BC0)
  {
    result = swift_getWitnessTable(&unk_1009B1F08, &type metadata for LocationViewComponent.ComponentType);
    atomic_store(result, (unint64_t *)&qword_100BF3BC0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LocationViewComponent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1005C3938 + 4 * byte_1009B1E52[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1005C3958 + 4 * byte_1009B1E57[v4]))();
}

_BYTE *sub_1005C3938(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1005C3958(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1005C3960(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1005C3968(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1005C3970(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1005C3978(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LocationViewComponent.CodingKeys()
{
  return &type metadata for LocationViewComponent.CodingKeys;
}

unint64_t sub_1005C3998()
{
  unint64_t result;

  result = qword_100BF3BC8;
  if (!qword_100BF3BC8)
  {
    result = swift_getWitnessTable(&unk_1009B20FC, &type metadata for LocationViewComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF3BC8);
  }
  return result;
}

unint64_t sub_1005C39D8()
{
  unint64_t result;

  result = qword_100BF3BD0;
  if (!qword_100BF3BD0)
  {
    result = swift_getWitnessTable(&unk_1009B2034, &type metadata for LocationViewComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF3BD0);
  }
  return result;
}

unint64_t sub_1005C3A18()
{
  unint64_t result;

  result = qword_100BF3BD8;
  if (!qword_100BF3BD8)
  {
    result = swift_getWitnessTable(&unk_1009B205C, &type metadata for LocationViewComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF3BD8);
  }
  return result;
}

double destroy for AirQualityComponentViewModel(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[13]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for AirQualityComponentViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v4;
  v6 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v5;
  v8 = *(_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v7;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v9;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for AirQualityComponentViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for AirQualityComponentViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  v12 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirQualityComponentViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 112))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirQualityComponentViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1005C3D68()
{
  return 8;
}

uint64_t sub_1005C3D74(_QWORD *a1)
{
  return swift_release(*a1);
}

double sub_1005C3D7C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

_QWORD *sub_1005C3D90(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1005C3D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t HourPrecipitationChartPlacement;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t HourPrecipitationComponent;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  unint64_t *v40;
  uint64_t v41;
  int *v42;
  uint64_t *v43;
  uint64_t HourPrecipitationComponentViewModel;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char v64;
  char v65;
  Swift::String v66;

  v55 = a3;
  v56 = a1;
  v58 = *v3;
  v5 = type metadata accessor for TimeZone(0);
  v51 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  __chkstk_darwin(v5);
  sub_100088FDC();
  v50 = v6;
  v7 = type metadata accessor for Date(0);
  v60 = *(_QWORD *)(v7 - 8);
  v61 = v7;
  __chkstk_darwin(v7);
  sub_100088FDC();
  v59 = v8;
  HourPrecipitationChartPlacement = type metadata accessor for NextHourPrecipitationChartPlacement(0);
  v10 = *(_QWORD *)(HourPrecipitationChartPlacement - 8);
  __chkstk_darwin(HourPrecipitationChartPlacement);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v63 = *(_QWORD *)(HourPrecipitationChartViewModel - 8);
  __chkstk_darwin(HourPrecipitationChartViewModel);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v3[5];
  v54 = v3[6];
  sub_1000DB418(v3 + 2, v15);
  HourPrecipitationComponent = type metadata accessor for NextHourPrecipitationComponent(0);
  v17 = a2 + *(int *)(HourPrecipitationComponent + 24);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for NextHourPrecipitationChartPlacement.component(_:), HourPrecipitationChartPlacement);
  v18 = a2 + *(int *)(HourPrecipitationComponent + 20);
  v62 = v14;
  v57 = v17;
  dispatch thunk of NextHourPrecipitationChartViewModelFactoryType.makeViewModel(for:precipitation:placement:currentTime:)(v56, v17, v12, v18, v15, v54);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, HourPrecipitationChartPlacement);
  if (qword_100BC26A8 != -1)
    swift_once(&qword_100BC26A8, sub_10015A570);
  v19 = qword_100CAF510;
  v20 = sub_1005C4220();
  v21 = v58;
  v22 = Configurable.setting<A>(_:)(v19, v58, v20);
  if ((v65 & 1) != 0)
  {
    v23 = 0x8000000100A0C660;
    v24 = 0xD000000000000015;
  }
  else
  {
    v25 = v59;
    Date.init()(v22);
    v26 = NextHourPrecipitationStringBuilder.buildShortString(from:referenceDate:)(v57, v25);
    v23 = v27;
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v25, v61);
    if (v23)
    {
      v24 = v26;
    }
    else
    {
      v24 = 0;
      v23 = 0xE000000000000000;
    }
  }
  v28 = Configurable.setting<A>(_:)(qword_100CAF510, v21, v20);
  if ((v64 & 1) != 0)
  {
    v29 = 0xD00000000000002DLL;
    v30 = 0x8000000100A0C630;
  }
  else
  {
    v31 = v50;
    Location.timeZone.getter(v28);
    v32 = v59;
    Date.init()(v33);
    v29 = NextHourPrecipitationStringBuilder.buildLongString(from:timeZone:referenceDate:)(v57, v31, v32);
    v30 = v34;
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v32, v61);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v31, v52);
    if (!v30)
    {
      v29 = 0;
      v30 = 0xE000000000000000;
    }
  }
  v35 = HourPrecipitationChartViewModel;
  v36 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v37._countAndFlagsBits = 0xD000000000000017;
  v66._countAndFlagsBits = 0xD00000000000002BLL;
  v66._object = (void *)0x8000000100A0C600;
  v37._object = (void *)0x8000000100A06230;
  v38._countAndFlagsBits = 0;
  v38._object = (void *)0xE000000000000000;
  v39 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, (Swift::String_optional)0, (NSBundle)v36, v38, v66);

  v40 = v55;
  *v55 = v24;
  v40[1] = v23;
  v40[2] = 0;
  v40[3] = 0;
  *((Swift::String *)v40 + 2) = v39;
  strcpy((char *)v40 + 48, "umbrella.fill");
  *((_WORD *)v40 + 31) = -4864;
  *((_BYTE *)v40 + 64) = 0;
  v41 = type metadata accessor for LocationComponentHeaderViewModel(0);
  v40[9] = 0;
  v40[10] = 0;
  *((_BYTE *)v40 + 88) = 0;
  swift_storeEnumTagMultiPayload(v40, v41, 1);
  v42 = (int *)type metadata accessor for LocationComponentContainerViewModel(0);
  v43 = (uint64_t *)((char *)v40 + v42[5]);
  *v43 = v29;
  v43[1] = v30;
  HourPrecipitationComponentViewModel = type metadata accessor for NextHourPrecipitationComponentViewModel(0);
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))((char *)v43 + *(int *)(HourPrecipitationComponentViewModel + 20), v62, v35);
  v45 = type metadata accessor for LocationComponentViewModel(0);
  swift_storeEnumTagMultiPayload(v43, v45, 8);
  v46 = (uint64_t)v40 + v42[7];
  v47 = type metadata accessor for LocationComponentAction(0);
  swift_storeEnumTagMultiPayload(v46, v47, 5);
  result = _s7Weather24LocationCompositionStateOwst_0(v46, 0, 1, v47);
  *(_WORD *)((char *)v40 + v42[6]) = 256;
  return result;
}

unint64_t sub_1005C4220()
{
  unint64_t result;
  uint64_t HourPrecipitationComponentViewModelFactory;

  result = qword_100BF3C88;
  if (!qword_100BF3C88)
  {
    HourPrecipitationComponentViewModelFactory = type metadata accessor for NextHourPrecipitationComponentViewModelFactory();
    result = swift_getWitnessTable(&unk_1009B22C0, HourPrecipitationComponentViewModelFactory);
    atomic_store(result, (unint64_t *)&qword_100BF3C88);
  }
  return result;
}

uint64_t sub_1005C425C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[3];
  uint64_t v20;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF3DD8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v20)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BC4718);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (result)
    {
      v11 = result;
      v12 = sub_100068EB4((uint64_t)v19, v20);
      v13 = __chkstk_darwin(v12);
      v15 = (_QWORD *)((char *)&v19[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v16 + 16))(v15, v13);
      v17 = sub_1005C4AB8(*v15, v11);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v19);
      result = type metadata accessor for SearchModule();
      a2[3] = result;
      a2[4] = (uint64_t)&off_100B6ABA0;
      *a2 = v17;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_1005C4394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v0 = sub_1000BA294(&qword_100BF3DD0);
  v1 = RegistrationContainer.register<A>(_:name:factory:)(v0, 0, 0, sub_1005C445C, 0, v0);
  swift_release(v1);
  v2 = sub_1000BA294(&qword_100BF3DD8);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_1005C44C8, 0, v2);
  swift_release(v3);
  v4 = sub_1000BA294(&qword_100BC4718);
  v5 = RegistrationContainer.register<A>(_:name:factory:)(v4, 0, 0, sub_1005C46EC, 0, v4);
  swift_release(v5);
  v6 = sub_1000BA294(&qword_100BF3DE0);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_1005C4938, 0, v6);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

uint64_t sub_1005C445C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = type metadata accessor for Tracker(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    a2[3] = (uint64_t)&type metadata for SearchTracker;
    a2[4] = (uint64_t)&off_100B8C960;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005C44C8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[5];
  _QWORD v32[3];
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  v8 = v36;
  if (!v36)
  {
    __break(1u);
    goto LABEL_6;
  }
  v9 = v37;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BDC588);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v35)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = a1[3];
  v14 = a1[4];
  sub_1000DB418(a1, v13);
  v15 = sub_1000BA294(&qword_100BF3DD0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v15, v15, v13, v14);
  if (v33)
  {
    v16 = sub_100068EB4((uint64_t)v32, v33);
    v17 = __chkstk_darwin(v16);
    v19 = (_QWORD *)((char *)&v31[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v20 + 16))(v19, v17);
    v21 = *v19;
    v31[3] = &type metadata for SearchTracker;
    v31[4] = &off_100B8C960;
    v31[0] = v21;
    v22 = type metadata accessor for SearchInteractor();
    v23 = (_QWORD *)swift_allocObject(v22, 112, 7);
    v24 = sub_100068EB4((uint64_t)v31, (uint64_t)&type metadata for SearchTracker);
    v25 = __chkstk_darwin(v24);
    v27 = (_QWORD *)((char *)&v31[-1] - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v28 + 16))(v27, v25);
    v29 = *v27;
    v23[12] = &type metadata for SearchTracker;
    v23[13] = &off_100B8C960;
    v23[9] = v29;
    v23[2] = v8;
    v23[3] = v9;
    sub_10003C800(&v34, (uint64_t)(v23 + 4));
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v31);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v32);
    a2[3] = v22;
    a2[4] = &off_100B81950;
    *a2 = v23;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1005C46EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17[2];
  _QWORD v18[5];
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v21;
  if (v21)
  {
    v8 = v23;
    v7 = v24;
    v9 = v22;
    v10 = a1[3];
    v11 = a1[4];
    sub_1000DB418(a1, v10);
    v12 = sub_1000BA294(&qword_100BF3DE0);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
    if (v20)
    {
      v13 = *sub_1000DB418(v19, v20);
      v18[3] = type metadata accessor for SearchViewModelFactory();
      v18[4] = &off_100B9E3F0;
      v18[0] = v13;
      sub_100043CA8((uint64_t)v18, (uint64_t)v17);
      v14 = swift_allocObject(&unk_100B82698, 56, 7);
      sub_10003C800(v17, v14 + 16);
      swift_retain();
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v18);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v19);
      v15 = swift_allocObject(&unk_100B826C0, 32, 7);
      *(_QWORD *)(v15 + 16) = sub_1005C4970;
      *(_QWORD *)(v15 + 24) = v14;
      v16 = sub_1000BA294(&qword_100BC4718);
      swift_allocObject(v16, 122, 7);
      return sub_100183EEC(v6, v9, v8, v7, sub_100182F48, 0, sub_1002D9B18, 0, sub_1005C499C, v15);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1005C489C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v6[13];

  sub_1000DB418(a2, a2[3]);
  sub_10096037C(a1, v6);
  return sub_1005C4B88((uint64_t)v6, a3);
}

uint64_t sub_1005C48F8@<X0>(_QWORD *a1@<X0>, void (*a2)(_QWORD *__return_ptr, _QWORD)@<X1>, uint64_t a3@<X8>)
{
  _QWORD v5[13];

  a2(v5, *a1);
  return sub_1005C4B88((uint64_t)v5, a3);
}

uint64_t sub_1005C4938@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for SearchViewModelFactory, (uint64_t)&off_100B9E3F0, a1);
}

uint64_t sub_1005C494C()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1005C4970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1005C489C(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1005C4978()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005C499C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1005C48F8(a1, *(void (**)(_QWORD *__return_ptr, _QWORD))(v2 + 16), a2);
}

uint64_t sub_1005C49A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  __int128 v12;
  uint64_t v13;
  _UNKNOWN **v14;

  v13 = type metadata accessor for SearchInteractor();
  v14 = &off_100B81950;
  *(_QWORD *)&v12 = a1;
  if (qword_100BC23F8 != -1)
    swift_once(&qword_100BC23F8, sub_1006F3784);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_1000AECD4(v6, (uint64_t)qword_100CAEFE0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Initializing Search module", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  sub_10003C800(&v12, a3 + 16);
  *(_QWORD *)(a3 + 56) = a2;
  return a3;
}

uint64_t sub_1005C4AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[3];
  uint64_t v15;
  _UNKNOWN **v16;

  v15 = type metadata accessor for SearchInteractor();
  v16 = &off_100B81950;
  v14[0] = a1;
  v4 = type metadata accessor for SearchModule();
  v5 = swift_allocObject(v4, 64, 7);
  v6 = sub_100068EB4((uint64_t)v14, v15);
  v7 = __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)&v14[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v10 + 16))(v9, v7);
  v11 = sub_1005C49A4(*v9, a2, v5);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v14);
  return v11;
}

uint64_t sub_1005C4B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BF3DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005C4BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    *(_OWORD *)(v0 + 16) = xmmword_1009B23B0;
    swift_bridgeObjectRelease(0);
    v1 = 0;
    v2 = 0x6D65442034323032;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

void sub_1005C4C34(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  _BYTE v26[24];

  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100099234();
  sub_1000BA294(&qword_100BCCC50);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100098694();
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v12 = &v25[-v11];
  v13 = v1 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___currentLocation;
  sub_10009922C(v1 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___currentLocation, (uint64_t)v26, 0);
  sub_100037768(v13, (uint64_t)v12, &qword_100BC35F8);
  v14 = sub_1000992C4();
  sub_100088FC8((uint64_t)v12, 1, v14);
  if (!v15)
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, v12, v14);
LABEL_5:
    sub_100098640();
    return;
  }
  sub_100021AA4((uint64_t)v12, &qword_100BC35F8);
  v17 = static Location.currentLocationID.getter(v16);
  v19 = v18;
  TimeZone.init(identifier:)(0xD000000000000013, 0x8000000100A0C840);
  v20 = type metadata accessor for TimeZone(0);
  sub_100088FC8(v2, 1, v20);
  if (!v15)
  {
    v21 = sub_100098778();
    _s7Weather24LocationCompositionStateOwst_0(v3, 1, 1, v21);
    sub_1000CD89C(v17, v19, 0x6E69747265707543, 0xE90000000000006FLL, v2, v3);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v9, a1, v14);
    sub_100099444();
    _s7Weather24LocationCompositionStateOwst_0(v22, v23, v24, v14);
    sub_10009922C(v13, (uint64_t)v25, 33);
    sub_1000A3908((uint64_t)v9, v13, &qword_100BC35F8);
    swift_endAccess(v25);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_1005C4E74(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  _BYTE v25[24];
  _BYTE v26[24];

  v24[3] = a1;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_1000C60C0();
  sub_1000CF828();
  __chkstk_darwin(v8);
  sub_100098694();
  sub_1000BA294(&qword_100BCCC50);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009E540();
  sub_100099328();
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_1000C24A0();
  __chkstk_darwin(v11);
  v13 = (char *)v24 - v12;
  v14 = v2 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___egilsstadirLocation;
  sub_10009922C(v2 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___egilsstadirLocation, (uint64_t)v26, 0);
  sub_1000BD588();
  v15 = sub_1000992C4();
  sub_100088FC8((uint64_t)v13, 1, v15);
  if (!v16)
  {
    sub_1000D9758();
LABEL_5:
    sub_10009990C();
    return;
  }
  v24[2] = v5;
  sub_100021AA4((uint64_t)v13, &qword_100BC35F8);
  sub_1000C1750();
  sub_100088FC8(v6, 1, v3);
  if (!v16)
  {
    v17 = sub_1000DAFC0();
    sub_1000C4BF0(v17, v18);
    v19 = sub_100098778();
    _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, v19);
    sub_1000DD0A4();
    sub_1000CD89C(v20, v21, 0x6563492074736145, 0xEC000000646E616CLL, (uint64_t)v13, v1);
    sub_100098EE0();
    sub_1000D9FC8();
    _s7Weather24LocationCompositionStateOwst_0(v4, 0, 1, v15);
    v22 = sub_10009922C(v14, (uint64_t)v25, 33);
    sub_10011034C(v22, v23, &qword_100BC35F8);
    swift_endAccess(v25);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_1005C5044(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  _BYTE v25[24];
  _BYTE v26[24];

  v24[3] = a1;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_1000C60C0();
  sub_1000CF828();
  __chkstk_darwin(v8);
  sub_100098694();
  sub_1000BA294(&qword_100BCCC50);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009E540();
  sub_100099328();
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_1000C24A0();
  __chkstk_darwin(v11);
  v13 = (char *)v24 - v12;
  v14 = v2 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___akureyriLocation;
  sub_10009922C(v2 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___akureyriLocation, (uint64_t)v26, 0);
  sub_1000BD588();
  v15 = sub_1000992C4();
  sub_100088FC8((uint64_t)v13, 1, v15);
  if (!v16)
  {
    sub_1000D9758();
LABEL_5:
    sub_10009990C();
    return;
  }
  v24[2] = v5;
  sub_100021AA4((uint64_t)v13, &qword_100BC35F8);
  sub_1000C1750();
  sub_100088FC8(v6, 1, v3);
  if (!v16)
  {
    v17 = sub_1000DAFC0();
    sub_1000C4BF0(v17, v18);
    v19 = sub_100098778();
    _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, v19);
    sub_1000DD0A4();
    sub_1000CD89C(v20, v21, 0x6972796572756B41, 0xE800000000000000, (uint64_t)v13, v1);
    sub_100098EE0();
    sub_1000D9FC8();
    _s7Weather24LocationCompositionStateOwst_0(v4, 0, 1, v15);
    v22 = sub_10009922C(v14, (uint64_t)v25, 33);
    sub_10011034C(v22, v23, &qword_100BC35F8);
    swift_endAccess(v25);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_1005C520C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[3];
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[24];
  char v59[24];

  sub_1000BA294((uint64_t *)&unk_100C0D170);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100099234();
  v6 = sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098694();
  sub_1000BA294(&qword_100BF3F28);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v52 - v12;
  v14 = v1 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___locations;
  sub_10009922C(v1 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___locations, (uint64_t)v59, 0);
  sub_100037768(v14, (uint64_t)v13, &qword_100BF3F28);
  sub_100088FC8((uint64_t)v13, 1, v6);
  if (v15)
  {
    sub_100021AA4((uint64_t)v13, &qword_100BF3F28);
    sub_1005C4C34(v3);
    v16 = type metadata accessor for CurrentLocation(0);
    sub_10009D6D8();
    sub_100099444();
    _s7Weather24LocationCompositionStateOwst_0(v17, v18, v19, v16);
    v20 = sub_1000BA294(&qword_100BF3F30);
    v21 = *(_QWORD *)(type metadata accessor for SavedLocation(0) - 8);
    v57 = a1;
    v22 = *(_QWORD *)(v21 + 72);
    v23 = *(unsigned __int8 *)(v21 + 80);
    v55 = v2;
    v24 = (v23 + 32) & ~v23;
    v25 = swift_allocObject(v20, v24 + 2 * v22, v23 | 7);
    v54 = v25;
    *(_OWORD *)(v25 + 16) = xmmword_10097DA20;
    v26 = v25 + v24;
    sub_1005C4E74(v25 + v24);
    sub_1000B4B88(v26);
    v27 = v26 + v22;
    sub_1005C5044(v27);
    sub_1000B4B88(v27);
    v28 = sub_1000BA294(&qword_100BF1FB0);
    v56 = v14;
    v29 = v28;
    v30 = type metadata accessor for LocationModel(0);
    v31 = *(_QWORD *)(v30 - 8);
    v53 = v10;
    v32 = *(_QWORD *)(v31 + 72);
    v33 = *(unsigned __int8 *)(v31 + 80);
    v34 = (v33 + 32) & ~v33;
    v35 = swift_allocObject(v29, v34 + 3 * v32, v33 | 7);
    v52[1] = v3;
    v52[2] = v35;
    *(_OWORD *)(v35 + 16) = xmmword_10098B610;
    v36 = v35 + v34;
    v37 = v35 + v34 + *(int *)(sub_1000BA294(&qword_100BC3488) + 48);
    sub_1005C4C34(v36);
    sub_10009D6D8();
    type metadata accessor for LocationOfInterest(0);
    sub_1000C4470(v37);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v31 + 104))(v36, enum case for LocationModel.current(_:), v30);
    v38 = sub_1000BA294(&qword_100BC3480);
    v39 = *(int *)(v38 + 48);
    v52[0] = v6;
    v40 = v36 + v32 + v39;
    sub_1005C4E74(v36 + v32);
    sub_1000B4B88(v36 + v32);
    sub_1000C4470(v40);
    sub_1000DA660();
    v41 = v36 + 2 * v32 + *(int *)(v38 + 48);
    sub_1005C5044(v36 + 2 * v32);
    sub_1000B4B88(v36 + 2 * v32);
    v42 = v41;
    a1 = v57;
    sub_1000C4470(v42);
    sub_1000DA660();
    type metadata accessor for LocationDisplayContext(0);
    Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
    v43 = v55;
    sub_1006EA08C();
    v44 = type metadata accessor for LocationsState(0);
    sub_100098974(v43, v45, v46, v44);
    v13 = (char *)v43;
    v47 = (uint64_t)v53;
    sub_100037768(v43, (uint64_t)v53, &qword_100BC5FA0);
    sub_100099444();
    _s7Weather24LocationCompositionStateOwst_0(v48, v49, v50, v52[0]);
    v51 = v56;
    sub_10009922C(v56, (uint64_t)v58, 33);
    sub_1000A3908(v47, v51, &qword_100BF3F28);
    swift_endAccess(v58);
  }
  sub_1000787D4((uint64_t)v13, a1, &qword_100BC5FA0);
  sub_100098640();
}

void sub_1005C55C0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE v21[24];

  v5 = sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_10009E540();
  sub_100099328();
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_1000C24A0();
  __chkstk_darwin(v8);
  v10 = &v20[-v9];
  v11 = v1 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___timeState;
  sub_10009922C(v1 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___timeState, (uint64_t)v21, 0);
  sub_100037768(v11, (uint64_t)v10, &qword_100BF3F20);
  sub_100088FC8((uint64_t)v10, 1, v5);
  if (v12)
  {
    sub_100021AA4((uint64_t)v10, &qword_100BF3F20);
    Date.init(timeIntervalSinceReferenceDate:)(v13);
    v14 = type metadata accessor for TimeState(0);
    sub_100098974(v3, v15, v16, v14);
    sub_100037768(v3, v2, &qword_100BC5F90);
    sub_100099444();
    _s7Weather24LocationCompositionStateOwst_0(v17, v18, v19, v5);
    sub_10009922C(v11, (uint64_t)v20, 33);
    sub_1000A3908(v2, v11, &qword_100BF3F20);
    swift_endAccess(v20);
    v10 = (_BYTE *)v3;
  }
  sub_1000787D4((uint64_t)v10, a1, &qword_100BC5F90);
}

uint64_t sub_1005C5734()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___weatherDataState);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___weatherDataState);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___weatherDataState + 8);
  v4 = v2;
  v6 = v1[2];
  v5 = v1[3];
  if (v3 == 1)
  {
    v4 = sub_1005C5828(0x2D6F6D65642D6763, 0xEE00746573657270);
    v7 = v1[1];
    v13 = v1[2];
    v14 = *v1;
    v12 = v1[3];
    *v1 = v4;
    v1[1] = v8;
    v1[2] = v9;
    v1[3] = v10;
    sub_1000E3434(v4, v8, v9, v10);
    sub_10014D7F8(v14, v7, v13, v12);
  }
  sub_1005C6080(v2, v3, v6, v5);
  return v4;
}

uint64_t sub_1005C5828(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for DemoDataProvider(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  DemoDataProvider.init()();
  v5 = DemoDataProvider.demoData(named:subdirectory:)(a1, a2, 0, 0);
  v7 = v6;
  swift_release();
  if (v7 >> 60 == 15)
  {
    if (qword_100BC2420 != -1)
      swift_once(&qword_100BC2420, sub_10015967C);
    v8 = type metadata accessor for Logger(0);
    sub_1000AECD4(v8, (uint64_t)qword_100CAF058);
    v9 = swift_bridgeObjectRetain_n(a2, 2);
    v10 = Logger.logObject.getter(v9);
    v12 = static os_log_type_t.error.getter(v10, v11);
    if (os_log_type_enabled(v10, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v18 = v14;
      *(_DWORD *)v13 = 136446210;
      swift_bridgeObjectRetain();
      v19 = sub_1000CE1C8(a1, a2, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v10, v12, "Could not load preset data with name = %{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    return 0;
  }
  else
  {
    v15 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    JSONDecoder.init()();
    v16 = sub_1001F5E70();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for WeatherDataState, v5, v7, &type metadata for WeatherDataState, v16);
    sub_1002BD0D4(v5, v7);
    swift_release();
    return v18;
  }
}

void sub_1005C5CD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___preset);
  if (v1 == 1)
  {
    *(_QWORD *)(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___preset) = 0;
    sub_10015A450(1);
  }
  sub_1005C6034(v1);
  sub_100079F70();
}

void sub_1005C5D1C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1000C2428(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___currentLocation);
  sub_1000C2428(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___egilsstadirLocation);
  sub_1000C2428(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___akureyriLocation);
  sub_100021AA4(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___locations, &qword_100BF3F28);
  sub_100021AA4(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___timeState, &qword_100BF3F20);
  sub_10014D7F8(*(_QWORD *)(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___weatherDataState), *(_QWORD *)(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___weatherDataState + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___weatherDataState + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___weatherDataState + 24));
  sub_10015A450(*(_QWORD *)(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___preset));
  sub_10004A298();
}

uint64_t sub_1005C5DCC()
{
  uint64_t v0;

  sub_1005C5D1C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1005C5DF0()
{
  return _s5DemosO8Fall2024CMa(0);
}

uint64_t _s5DemosO8Fall2024CMa(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF3E50;
  if (!qword_100BF3E50)
    return swift_getSingletonMetadata(a1, &_s5DemosO8Fall2024CMn);
  return result;
}

void sub_1005C5E30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v8 = &unk_1009B2410;
  sub_10015A0BC(319);
  if (v3 <= 0x3F)
  {
    v9 = *(_QWORD *)(v2 - 8) + 64;
    v10 = v9;
    v11 = v9;
    sub_1001474A0(319, &qword_100BF3E60, &qword_100BC5FA0);
    if (v5 <= 0x3F)
    {
      v12 = *(_QWORD *)(v4 - 8) + 64;
      sub_1001474A0(319, (unint64_t *)&unk_100BF3E68, &qword_100BC5F90);
      if (v7 <= 0x3F)
      {
        v13 = *(_QWORD *)(v6 - 8) + 64;
        v14 = &unk_1009B2428;
        v15 = &unk_1009B2440;
        swift_updateClassMetadata2(a1, 256, 8, &v8, a1 + 80);
      }
    }
  }
}

void sub_1005C5F14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  v1 = v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___currentLocation;
  sub_1000992C4();
  sub_1000DBBA0(v1);
  sub_1000DBBA0(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___egilsstadirLocation);
  sub_1000DBBA0(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___akureyriLocation);
  v2 = sub_1000BA294(&qword_100BC5FA0);
  sub_1000C132C(v2);
  v3 = sub_1000BA294(&qword_100BC5F90);
  sub_1000C132C(v3);
  v4 = v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___weatherDataState;
  *(_OWORD *)v4 = xmmword_100995EC0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCOO7Weather10DemoPreset5Demos8Fall2024____lazy_storage___preset) = 1;
  sub_100079F70();
}

void sub_1005C5FD4(uint64_t a1@<X8>)
{
  sub_1005C520C(a1);
}

void sub_1005C5FF4(uint64_t a1@<X8>)
{
  sub_1005C55C0(a1);
}

uint64_t sub_1005C6014()
{
  return sub_1005C5734();
}

double sub_1005C6034(uint64_t a1)
{
  double result;

  if (a1 != 1)
    *(_QWORD *)&result = swift_retain(a1).n128_u64[0];
  return result;
}

double sub_1005C6044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  return result;
}

uint64_t sub_1005C6080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != 1)
    return sub_1000E3434(a1, a2, a3, a4);
  return a1;
}

uint64_t Settings.TappableModulesTipStore.set<A>(setting:value:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  v6 = sub_100088020(&qword_100BF3FE0, (uint64_t)&protocol conformance descriptor for Settings.TappableModulesTipStore);
  return Updatable.save<A>(setting:value:)(a1, a2, v5, v6);
}

uint64_t type metadata accessor for Settings.TappableModulesTipStore()
{
  return objc_opt_self(_TtCE7WeatherC11TeaSettings8Settings23TappableModulesTipStore);
}

uint64_t sub_1005C6154()
{
  return sub_100088020(&qword_100BF3FE8, (uint64_t)&protocol conformance descriptor for Settings.TappableModulesTipStore);
}

uint64_t sub_1005C6178(uint64_t a1)
{
  return sub_1000BB1D8(a1, 62, 0x8000000100A0CAC0, &qword_100CAEDA8);
}

uint64_t sub_1005C6198(uint64_t a1)
{
  return sub_1000BB1D8(a1, 65, 0x8000000100A0CA70, &qword_100CAEDB0);
}

uint64_t sub_1005C61B8(uint64_t a1)
{
  return sub_1000BB1D8(a1, 55, 0x8000000100A0CA30, &qword_100CAEDB8);
}

uint64_t sub_1005C61D8(uint64_t a1)
{
  return sub_1000BB1D8(a1, 59, 0x8000000100A0C9F0, &qword_100CAEDC0);
}

uint64_t sub_1005C61F8(uint64_t a1)
{
  return sub_1000BB1D8(a1, 59, 0x8000000100A0C970, &qword_100CAEDC8);
}

uint64_t sub_1005C6218(uint64_t a1)
{
  return sub_1000BB1D8(a1, 56, 0x8000000100A0C9B0, &qword_100CAEDD0);
}

uint64_t sub_1005C6238()
{
  return _s18TappableModulesTipV13TipsOverridesCMa(0);
}

uint64_t _s18TappableModulesTipV11TipsFiltersCMa(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BF40D8, (uint64_t)&_s18TappableModulesTipV11TipsFiltersCMn);
}

uint64_t sub_1005C6254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10015AF90(a1, a2, a3, qword_100CAEE48);
}

uint64_t sub_1005C6260()
{
  uint64_t v0;

  v0 = SettingGroup.deinit();
  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_1005C627C()
{
  return _s18TappableModulesTipV11TipsFiltersCMa(0);
}

uint64_t sub_1005C6284(uint64_t a1)
{
  return sub_1000BB1D8(a1, 46, 0x8000000100A0CD40, &qword_100CAEE20);
}

uint64_t sub_1005C62A4(uint64_t a1)
{
  return sub_10015AED0(a1, (void (*)(_QWORD))_s18TappableModulesTipV11TipsFiltersCMa, sub_10015AFE8, &qword_100CAEE30);
}

uint64_t *sub_1005C62C4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t, __n128);
  __n128 v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t, __n128);
  __n128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t, __n128);
  __n128 v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  _OWORD *v106;
  __int128 v107;
  uint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  __n128 v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  void (*v135)(char *, char *, uint64_t, __n128);
  int *v136;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = (int *)type metadata accessor for ChartViewModel(0);
    v9 = v8[5];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for ChartKind(0);
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    v14 = swift_bridgeObjectRetain();
    v13(v10, v11, v12, v14);
    *(uint64_t *)((char *)v4 + v8[6]) = *(uint64_t *)((char *)a2 + v8[6]);
    v15 = v8[7];
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for DetailChartExtrema(0);
    v19 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v18 - 8) + 16);
    v20 = swift_bridgeObjectRetain();
    v19(v16, v17, v18, v20);
    *(uint64_t *)((char *)v4 + v8[8]) = *(uint64_t *)((char *)a2 + v8[8]);
    *(uint64_t *)((char *)v4 + v8[9]) = *(uint64_t *)((char *)a2 + v8[9]);
    *(_OWORD *)((char *)v4 + v8[10]) = *(_OWORD *)((char *)a2 + v8[10]);
    v21 = v8[11];
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    v24 = *(void **)v23;
    v25 = (void *)*((_QWORD *)v23 + 1);
    v26 = *((_QWORD *)v23 + 2);
    v27 = v23[24];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001A41A0(v24, v25, v26, v27);
    *(_QWORD *)v22 = v24;
    *((_QWORD *)v22 + 1) = v25;
    *((_QWORD *)v22 + 2) = v26;
    v22[24] = v27;
    v28 = v8[12];
    v29 = (char *)v4 + v28;
    v30 = (char *)a2 + v28;
    *(uint64_t *)((char *)v4 + v28) = *(uint64_t *)((char *)a2 + v28);
    v31 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
    v32 = &v29[v31];
    v33 = &v30[v31];
    v34 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v34))
    {
      v35 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 0, 1, v34);
    }
    v37 = v8[13];
    v38 = (char *)v4 + v37;
    v39 = (char *)a2 + v37;
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    v40 = v8[14];
    v41 = (uint64_t *)((char *)v4 + v40);
    v42 = (uint64_t *)((char *)a2 + v40);
    v43 = sub_1000BA294(&qword_100BCB988);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v43))
    {
      v44 = type metadata accessor for ChartViewModel.Background(0);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      *v41 = *v42;
      v45 = *(int *)(v43 + 48);
      v46 = (char *)v41 + v45;
      v47 = (char *)v42 + v45;
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v47, 1, v34))
      {
        v48 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v46, v47, v34);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v46, 0, 1, v34);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v43);
    }
    *(uint64_t *)((char *)v4 + v8[15]) = *(uint64_t *)((char *)a2 + v8[15]);
    v49 = v8[16];
    v50 = (char *)v4 + v49;
    v51 = (char *)a2 + v49;
    v52 = type metadata accessor for ChartDarkeningScrim(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
    *(uint64_t *)((char *)v4 + v8[17]) = *(uint64_t *)((char *)a2 + v8[17]);
    v53 = v8[18];
    v54 = (char *)v4 + v53;
    v55 = (char *)a2 + v53;
    v56 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v34 - 8) + 16);
    v57 = swift_bridgeObjectRetain();
    v56(v54, v55, v34, v57);
    ((void (*)(char *, char *, uint64_t))v56)((char *)v4 + v8[19], (char *)a2 + v8[19], v34);
    ((void (*)(char *, char *, uint64_t))v56)((char *)v4 + v8[20], (char *)a2 + v8[20], v34);
    v58 = v8[21];
    v59 = (char *)v4 + v58;
    v60 = (char *)a2 + v58;
    v61 = type metadata accessor for DetailChartDataElement(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v60, 1, v61))
    {
      v62 = sub_1000BA294(&qword_100BCB0A0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v59, 0, 1, v61);
    }
    *(uint64_t *)((char *)v4 + v8[22]) = *(uint64_t *)((char *)a2 + v8[22]);
    v63 = v8[23];
    v64 = (char *)v4 + v63;
    v65 = (char *)a2 + v63;
    v66 = type metadata accessor for ChartPeakMarkStyle(0);
    v67 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v66 - 8) + 16);
    v68 = swift_bridgeObjectRetain();
    v67(v64, v65, v66, v68);
    *(uint64_t *)((char *)v4 + v8[24]) = *(uint64_t *)((char *)a2 + v8[24]);
    *(uint64_t *)((char *)v4 + v8[25]) = *(uint64_t *)((char *)a2 + v8[25]);
    v69 = v8[26];
    v70 = (char *)v4 + v69;
    v71 = (char *)a2 + v69;
    v72 = type metadata accessor for ChartViewModelInterpolationMode(0);
    v73 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v72 - 8) + 16);
    v74 = swift_bridgeObjectRetain();
    v73(v70, v71, v72, v74);
    v75 = v8[27];
    v76 = (char *)v4 + v75;
    v77 = (char *)a2 + v75;
    v78 = type metadata accessor for ChartPastDataTreatment(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v76, v77, v78);
    v79 = v8[28];
    v80 = (uint64_t *)((char *)v4 + v79);
    v81 = (uint64_t *)((char *)a2 + v79);
    v82 = v81[1];
    *v80 = *v81;
    v80[1] = v82;
    v83 = v8[29];
    v84 = (uint64_t *)((char *)v4 + v83);
    v85 = (uint64_t *)((char *)a2 + v83);
    v86 = v85[1];
    *v84 = *v85;
    v84[1] = v86;
    v87 = v8[30];
    v88 = (uint64_t *)((char *)v4 + v87);
    v89 = (uint64_t *)((char *)a2 + v87);
    v90 = v89[1];
    *v88 = *v89;
    v88[1] = v90;
    v91 = v8[31];
    v92 = (uint64_t *)((char *)v4 + v91);
    v93 = (uint64_t *)((char *)a2 + v91);
    v94 = v93[1];
    *v92 = *v93;
    v92[1] = v94;
    v95 = v8[32];
    v96 = (uint64_t *)((char *)v4 + v95);
    v97 = (uint64_t *)((char *)a2 + v95);
    v98 = v97[1];
    *v96 = *v97;
    v96[1] = v98;
    v99 = v8[33];
    v100 = (uint64_t *)((char *)v4 + v99);
    v101 = (uint64_t *)((char *)a2 + v99);
    v102 = v101[1];
    *v100 = *v101;
    v100[1] = v102;
    v103 = a3[5];
    v104 = a3[6];
    v105 = (_OWORD *)((char *)v4 + v103);
    v106 = (_OWORD *)((char *)a2 + v103);
    v107 = v106[1];
    *v105 = *v106;
    v105[1] = v107;
    *(uint64_t *)((char *)v4 + v104) = *(uint64_t *)((char *)a2 + v104);
    v108 = a3[7];
    v109 = (char *)v4 + v108;
    v136 = a3;
    v110 = (char *)a2 + v108;
    v111 = *(_OWORD *)((char *)a2 + v108 + 24);
    *(_OWORD *)((char *)v4 + v108 + 24) = v111;
    v112 = v111;
    v135 = **(void (***)(char *, char *, uint64_t, __n128))(v111 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v113 = swift_retain();
    v135(v109, v110, v112, v113);
    v114 = v136[8];
    v115 = (char *)v4 + v114;
    v116 = (char *)a2 + v114;
    v117 = *(_QWORD *)v116;
    LOBYTE(v102) = v116[8];
    sub_10008D47C(*(_QWORD *)v116, v102);
    *(_QWORD *)v115 = v117;
    v115[8] = v102;
    v118 = v136[9];
    v119 = (uint64_t *)((char *)v4 + v118);
    v120 = (uint64_t *)((char *)a2 + v118);
    v121 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v120) == 1)
    {
      v122 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v119, v120, v122);
      v123 = 1;
    }
    else
    {
      *v119 = *v120;
      swift_retain();
      v123 = 0;
    }
    swift_storeEnumTagMultiPayload(v119, v121, v123);
    v124 = v136[10];
    v125 = (uint64_t *)((char *)v4 + v124);
    v126 = (uint64_t *)((char *)a2 + v124);
    v127 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v126) == 1)
    {
      v128 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v128 - 8) + 16))(v125, v126, v128);
      v129 = 1;
    }
    else
    {
      *v125 = *v126;
      swift_retain();
      v129 = 0;
    }
    swift_storeEnumTagMultiPayload(v125, v127, v129);
    v130 = v136[11];
    v131 = (char *)v4 + v130;
    v132 = (char *)a2 + v130;
    v133 = type metadata accessor for Text.Measurements(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 16))(v131, v132, v133);
  }
  return v4;
}

uint64_t sub_1005C69D8(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  void (*v18)(uint64_t, uint64_t, __n128);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for ChartViewModel(0);
  v5 = a1 + v4[5];
  v6 = type metadata accessor for ChartKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  v7 = a1 + v4[7];
  v8 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001A44FC(*(void **)(a1 + v4[11]), *(void **)(a1 + v4[11] + 8), *(_QWORD *)(a1 + v4[11] + 16), *(_BYTE *)(a1 + v4[11] + 24));
  v9 = a1 + v4[12];
  v10 = v9 + *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v11 = type metadata accessor for Date(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = a1 + v4[14];
  v13 = sub_1000BA294(&qword_100BCB988);
  if (!_s7Weather24LocationCompositionStateOwet_0(v12, 1, v13))
  {
    swift_release();
    v14 = v12 + *(int *)(v13 + 48);
    if (!_s7Weather24LocationCompositionStateOwet_0(v14, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v14, v11);
  }
  v15 = a1 + v4[16];
  v16 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = swift_bridgeObjectRelease();
  v18 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 8);
  v18(a1 + v4[18], v11, v17);
  ((void (*)(uint64_t, uint64_t))v18)(a1 + v4[19], v11);
  ((void (*)(uint64_t, uint64_t))v18)(a1 + v4[20], v11);
  v19 = a1 + v4[21];
  v20 = type metadata accessor for DetailChartDataElement(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v20))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  swift_bridgeObjectRelease();
  v21 = a1 + v4[23];
  v22 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  swift_bridgeObjectRelease();
  v23 = a1 + v4[26];
  v24 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  v25 = a1 + v4[27];
  v26 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + a2[7]));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[8]), *(_BYTE *)(a1 + a2[8] + 8));
  v27 = a1 + a2[9];
  sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v27) == 1)
  {
    v28 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  }
  else
  {
    swift_release();
  }
  v29 = a1 + a2[10];
  sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v29) == 1)
  {
    v30 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  }
  else
  {
    swift_release();
  }
  v31 = a1 + a2[11];
  v32 = type metadata accessor for Text.Measurements(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
}

_QWORD *sub_1005C6DBC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t, __n128);
  __n128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t, __n128);
  __n128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t, __n128);
  __n128 v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  _OWORD *v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  char *v108;
  __int128 v109;
  uint64_t v110;
  __n128 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  void (*v133)(char *, char *, uint64_t, __n128);
  int *v134;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for ChartViewModel(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ChartKind(0);
  v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
  v13 = swift_bridgeObjectRetain();
  v12(v9, v10, v11, v13);
  *(_QWORD *)((char *)a1 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
  v14 = v7[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for DetailChartExtrema(0);
  v18 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
  v19 = swift_bridgeObjectRetain();
  v18(v15, v16, v17, v19);
  *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
  *(_QWORD *)((char *)a1 + v7[9]) = *(_QWORD *)((char *)a2 + v7[9]);
  *(_OWORD *)((char *)a1 + v7[10]) = *(_OWORD *)((char *)a2 + v7[10]);
  v20 = v7[11];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(void **)v22;
  v24 = (void *)*((_QWORD *)v22 + 1);
  v25 = *((_QWORD *)v22 + 2);
  v26 = v22[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001A41A0(v23, v24, v25, v26);
  *(_QWORD *)v21 = v23;
  *((_QWORD *)v21 + 1) = v24;
  *((_QWORD *)v21 + 2) = v25;
  v21[24] = v26;
  v27 = v7[12];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  *(_QWORD *)((char *)a1 + v27) = *(_QWORD *)((char *)a2 + v27);
  v30 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v31 = &v28[v30];
  v32 = &v29[v30];
  v33 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
  {
    v34 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
  }
  v35 = v7[13];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v36[8] = v37[8];
  v38 = v7[14];
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (_QWORD *)((char *)a2 + v38);
  v41 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41))
  {
    v42 = type metadata accessor for ChartViewModel.Background(0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    *v39 = *v40;
    v43 = *(int *)(v41 + 48);
    v44 = (char *)v39 + v43;
    v45 = (char *)v40 + v43;
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v33))
    {
      v46 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v44, v45, v33);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v44, 0, 1, v33);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v41);
  }
  *(_QWORD *)((char *)a1 + v7[15]) = *(_QWORD *)((char *)a2 + v7[15]);
  v47 = v7[16];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  v50 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
  *(_QWORD *)((char *)a1 + v7[17]) = *(_QWORD *)((char *)a2 + v7[17]);
  v51 = v7[18];
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  v54 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v33 - 8) + 16);
  v55 = swift_bridgeObjectRetain();
  v54(v52, v53, v33, v55);
  ((void (*)(char *, char *, uint64_t))v54)((char *)a1 + v7[19], (char *)a2 + v7[19], v33);
  ((void (*)(char *, char *, uint64_t))v54)((char *)a1 + v7[20], (char *)a2 + v7[20], v33);
  v56 = v7[21];
  v57 = (char *)a1 + v56;
  v58 = (char *)a2 + v56;
  v59 = type metadata accessor for DetailChartDataElement(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v58, 1, v59))
  {
    v60 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v57, 0, 1, v59);
  }
  *(_QWORD *)((char *)a1 + v7[22]) = *(_QWORD *)((char *)a2 + v7[22]);
  v61 = v7[23];
  v62 = (char *)a1 + v61;
  v63 = (char *)a2 + v61;
  v64 = type metadata accessor for ChartPeakMarkStyle(0);
  v65 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v64 - 8) + 16);
  v66 = swift_bridgeObjectRetain();
  v65(v62, v63, v64, v66);
  *(_QWORD *)((char *)a1 + v7[24]) = *(_QWORD *)((char *)a2 + v7[24]);
  *(_QWORD *)((char *)a1 + v7[25]) = *(_QWORD *)((char *)a2 + v7[25]);
  v67 = v7[26];
  v68 = (char *)a1 + v67;
  v69 = (char *)a2 + v67;
  v70 = type metadata accessor for ChartViewModelInterpolationMode(0);
  v71 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v70 - 8) + 16);
  v72 = swift_bridgeObjectRetain();
  v71(v68, v69, v70, v72);
  v73 = v7[27];
  v74 = (char *)a1 + v73;
  v75 = (char *)a2 + v73;
  v76 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
  v77 = v7[28];
  v78 = (_QWORD *)((char *)a1 + v77);
  v79 = (_QWORD *)((char *)a2 + v77);
  v80 = v79[1];
  *v78 = *v79;
  v78[1] = v80;
  v81 = v7[29];
  v82 = (_QWORD *)((char *)a1 + v81);
  v83 = (_QWORD *)((char *)a2 + v81);
  v84 = v83[1];
  *v82 = *v83;
  v82[1] = v84;
  v85 = v7[30];
  v86 = (_QWORD *)((char *)a1 + v85);
  v87 = (_QWORD *)((char *)a2 + v85);
  v88 = v87[1];
  *v86 = *v87;
  v86[1] = v88;
  v89 = v7[31];
  v90 = (_QWORD *)((char *)a1 + v89);
  v91 = (_QWORD *)((char *)a2 + v89);
  v92 = v91[1];
  *v90 = *v91;
  v90[1] = v92;
  v93 = v7[32];
  v94 = (_QWORD *)((char *)a1 + v93);
  v95 = (_QWORD *)((char *)a2 + v93);
  v96 = v95[1];
  *v94 = *v95;
  v94[1] = v96;
  v97 = v7[33];
  v98 = (_QWORD *)((char *)a1 + v97);
  v99 = (_QWORD *)((char *)a2 + v97);
  v100 = v99[1];
  *v98 = *v99;
  v98[1] = v100;
  v101 = a3[5];
  v102 = a3[6];
  v103 = (_OWORD *)((char *)a1 + v101);
  v104 = (_OWORD *)((char *)a2 + v101);
  v105 = v104[1];
  *v103 = *v104;
  v103[1] = v105;
  *(_QWORD *)((char *)a1 + v102) = *(_QWORD *)((char *)a2 + v102);
  v106 = a3[7];
  v107 = (char *)a1 + v106;
  v134 = a3;
  v108 = (char *)a2 + v106;
  v109 = *(_OWORD *)((char *)a2 + v106 + 24);
  *(_OWORD *)((char *)a1 + v106 + 24) = v109;
  v110 = v109;
  v133 = **(void (***)(char *, char *, uint64_t, __n128))(v109 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v111 = swift_retain();
  v133(v107, v108, v110, v111);
  v112 = v134[8];
  v113 = (char *)a1 + v112;
  v114 = (char *)a2 + v112;
  v115 = *(_QWORD *)v114;
  LOBYTE(v100) = v114[8];
  sub_10008D47C(*(_QWORD *)v114, v100);
  *(_QWORD *)v113 = v115;
  v113[8] = v100;
  v116 = v134[9];
  v117 = (_QWORD *)((char *)a1 + v116);
  v118 = (_QWORD *)((char *)a2 + v116);
  v119 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v118) == 1)
  {
    v120 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v117, v118, v120);
    v121 = 1;
  }
  else
  {
    *v117 = *v118;
    swift_retain();
    v121 = 0;
  }
  swift_storeEnumTagMultiPayload(v117, v119, v121);
  v122 = v134[10];
  v123 = (_QWORD *)((char *)a1 + v122);
  v124 = (_QWORD *)((char *)a2 + v122);
  v125 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v124) == 1)
  {
    v126 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v123, v124, v126);
    v127 = 1;
  }
  else
  {
    *v123 = *v124;
    swift_retain();
    v127 = 0;
  }
  swift_storeEnumTagMultiPayload(v123, v125, v127);
  v128 = v134[11];
  v129 = (char *)a1 + v128;
  v130 = (char *)a2 + v128;
  v131 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
  return a1;
}

char *sub_1005C74A4(char *a1, char *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  id v21;
  void *v22;
  uint64_t v23;
  unsigned __int8 v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  size_t v54;
  void *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  __n128 v68;
  void (*v69)(char *, char *, uint64_t, __n128);
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v135;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for ChartViewModel(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for ChartKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)&a1[v6[6]] = *(_QWORD *)&a2[v6[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = v6[7];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *(_QWORD *)&a1[v6[8]] = *(_QWORD *)&a2[v6[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[v6[9]] = *(_QWORD *)&a2[v6[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = v6[10];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  v18 = v6[11];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(id *)v20;
  v22 = (void *)*((_QWORD *)v20 + 1);
  v23 = *((_QWORD *)v20 + 2);
  v24 = v20[24];
  sub_1001A41A0(*(id *)v20, v22, v23, v24);
  v25 = *(void **)v19;
  v26 = (void *)*((_QWORD *)v19 + 1);
  v27 = *((_QWORD *)v19 + 2);
  *(_QWORD *)v19 = v21;
  *((_QWORD *)v19 + 1) = v22;
  *((_QWORD *)v19 + 2) = v23;
  v28 = v19[24];
  v19[24] = v24;
  sub_1001A44FC(v25, v26, v27, v28);
  v29 = v6[12];
  v30 = &a1[v29];
  v31 = &a2[v29];
  *(_QWORD *)&a1[v29] = *(_QWORD *)&a2[v29];
  v32 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v33 = &v30[v32];
  v34 = &v31[v32];
  v35 = type metadata accessor for Date(0);
  v36 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v35);
  v37 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v35);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v33, 0, 1, v35);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v38 = *(_QWORD *)(v35 - 8);
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v33, v35);
LABEL_6:
    v39 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v33, v34, v35);
LABEL_7:
  v40 = v6[13];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v43 = *(_QWORD *)v42;
  v41[8] = v42[8];
  *(_QWORD *)v41 = v43;
  v44 = v6[14];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = sub_1000BA294(&qword_100BCB988);
  v48 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v47);
  v49 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v47);
  if (v48)
  {
    if (!v49)
    {
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v50 = *(int *)(v47 + 48);
      v51 = &v45[v50];
      v52 = &v46[v50];
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v52, 1, v35))
      {
        v53 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v51, v52, v35);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v51, 0, 1, v35);
      }
      v62 = (uint64_t)v45;
      v63 = v47;
      goto LABEL_21;
    }
    goto LABEL_13;
  }
  if (v49)
  {
    sub_100021A14((uint64_t)v45, &qword_100BCB988);
LABEL_13:
    v54 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for ChartViewModel.Background(0) - 8) + 64);
    v55 = v45;
    v56 = v46;
LABEL_14:
    memcpy(v55, v56, v54);
    goto LABEL_22;
  }
  *(_QWORD *)v45 = *(_QWORD *)v46;
  swift_retain();
  swift_release();
  v57 = *(int *)(v47 + 48);
  v58 = (uint64_t)&v45[v57];
  v59 = (uint64_t)&v46[v57];
  v60 = _s7Weather24LocationCompositionStateOwet_0(v58, 1, v35);
  v61 = _s7Weather24LocationCompositionStateOwet_0(v59, 1, v35);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v58, v59, v35);
      v62 = v58;
      v63 = v35;
LABEL_21:
      _s7Weather24LocationCompositionStateOwst_0(v62, 0, 1, v63);
      goto LABEL_22;
    }
    goto LABEL_40;
  }
  v135 = *(_QWORD *)(v35 - 8);
  if (v61)
  {
    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v58, v35);
LABEL_40:
    v54 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
    v55 = (void *)v58;
    v56 = (const void *)v59;
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 24))(v58, v59, v35);
LABEL_22:
  *(_QWORD *)&a1[v6[15]] = *(_QWORD *)&a2[v6[15]];
  v64 = v6[16];
  v65 = &a1[v64];
  v66 = &a2[v64];
  v67 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 24))(v65, v66, v67);
  *(_QWORD *)&a1[v6[17]] = *(_QWORD *)&a2[v6[17]];
  swift_bridgeObjectRetain();
  v68 = swift_bridgeObjectRelease();
  v69 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v35 - 8) + 24);
  v69(&a1[v6[18]], &a2[v6[18]], v35, v68);
  ((void (*)(char *, char *, uint64_t))v69)(&a1[v6[19]], &a2[v6[19]], v35);
  ((void (*)(char *, char *, uint64_t))v69)(&a1[v6[20]], &a2[v6[20]], v35);
  v70 = v6[21];
  v71 = &a1[v70];
  v72 = &a2[v70];
  v73 = type metadata accessor for DetailChartDataElement(0);
  v74 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v73);
  v75 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v72, 1, v73);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v71, 0, 1, v73);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  v76 = *(_QWORD *)(v73 - 8);
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v76 + 8))(v71, v73);
LABEL_27:
    v77 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v76 + 24))(v71, v72, v73);
LABEL_28:
  *(_QWORD *)&a1[v6[22]] = *(_QWORD *)&a2[v6[22]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v78 = v6[23];
  v79 = &a1[v78];
  v80 = &a2[v78];
  v81 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 24))(v79, v80, v81);
  *(_QWORD *)&a1[v6[24]] = *(_QWORD *)&a2[v6[24]];
  *(_QWORD *)&a1[v6[25]] = *(_QWORD *)&a2[v6[25]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v82 = v6[26];
  v83 = &a1[v82];
  v84 = &a2[v82];
  v85 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 24))(v83, v84, v85);
  v86 = v6[27];
  v87 = &a1[v86];
  v88 = &a2[v86];
  v89 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 24))(v87, v88, v89);
  v90 = v6[28];
  v91 = &a1[v90];
  v92 = &a2[v90];
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *((_QWORD *)v91 + 1) = *((_QWORD *)v92 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v93 = v6[29];
  v94 = &a1[v93];
  v95 = &a2[v93];
  *(_QWORD *)v94 = *(_QWORD *)v95;
  *((_QWORD *)v94 + 1) = *((_QWORD *)v95 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v96 = v6[30];
  v97 = &a1[v96];
  v98 = &a2[v96];
  *(_QWORD *)v97 = *(_QWORD *)v98;
  *((_QWORD *)v97 + 1) = *((_QWORD *)v98 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v99 = v6[31];
  v100 = &a1[v99];
  v101 = &a2[v99];
  *(_QWORD *)v100 = *(_QWORD *)v101;
  *((_QWORD *)v100 + 1) = *((_QWORD *)v101 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v102 = v6[32];
  v103 = &a1[v102];
  v104 = &a2[v102];
  *(_QWORD *)v103 = *(_QWORD *)v104;
  *((_QWORD *)v103 + 1) = *((_QWORD *)v104 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v105 = v6[33];
  v106 = &a1[v105];
  v107 = &a2[v105];
  v108 = *((_QWORD *)v107 + 1);
  *(_QWORD *)v106 = *(_QWORD *)v107;
  *((_QWORD *)v106 + 1) = v108;
  swift_retain();
  swift_release();
  v109 = a3[5];
  v110 = &a1[v109];
  v111 = &a2[v109];
  *(_QWORD *)v110 = *(_QWORD *)v111;
  *((_QWORD *)v110 + 1) = *((_QWORD *)v111 + 1);
  *((_QWORD *)v110 + 2) = *((_QWORD *)v111 + 2);
  *((_QWORD *)v110 + 3) = *((_QWORD *)v111 + 3);
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  sub_100094D04(&a1[a3[7]], &a2[a3[7]]);
  v112 = a3[8];
  v113 = &a1[v112];
  v114 = &a2[v112];
  v115 = *(_QWORD *)v114;
  LOBYTE(v87) = v114[8];
  sub_10008D47C(*(_QWORD *)v114, (char)v87);
  v116 = *(_QWORD *)v113;
  v117 = v113[8];
  *(_QWORD *)v113 = v115;
  v113[8] = (char)v87;
  sub_1000B15F8(v116, v117);
  if (a1 != a2)
  {
    v118 = a3[9];
    v119 = &a1[v118];
    v120 = &a2[v118];
    sub_100021A14((uint64_t)&a1[v118], &qword_100BC68C8);
    v121 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v120) == 1)
    {
      v122 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v119, v120, v122);
      v123 = 1;
    }
    else
    {
      *(_QWORD *)v119 = *(_QWORD *)v120;
      swift_retain();
      v123 = 0;
    }
    swift_storeEnumTagMultiPayload(v119, v121, v123);
    v124 = a3[10];
    v125 = &a1[v124];
    v126 = &a2[v124];
    sub_100021A14((uint64_t)&a1[v124], &qword_100BC2908);
    v127 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v126) == 1)
    {
      v128 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 16))(v125, v126, v128);
      v129 = 1;
    }
    else
    {
      *(_QWORD *)v125 = *(_QWORD *)v126;
      swift_retain();
      v129 = 0;
    }
    swift_storeEnumTagMultiPayload(v125, v127, v129);
  }
  v130 = a3[11];
  v131 = &a1[v130];
  v132 = &a2[v130];
  v133 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 24))(v131, v132, v133);
  return a1;
}

char *sub_1005C7DDC(char *a1, char *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  __int128 v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = (int *)type metadata accessor for ChartViewModel(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for ChartKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)&a1[v6[6]] = *(_QWORD *)&a2[v6[6]];
  v11 = v6[7];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_QWORD *)&a1[v6[8]] = *(_QWORD *)&a2[v6[8]];
  *(_QWORD *)&a1[v6[9]] = *(_QWORD *)&a2[v6[9]];
  *(_OWORD *)&a1[v6[10]] = *(_OWORD *)&a2[v6[10]];
  v15 = v6[11];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 9) = *(_OWORD *)(v17 + 9);
  v18 = v6[12];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  v21 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v22 = &v19[v21];
  v23 = &v20[v21];
  v24 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v24))
  {
    v25 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v24);
  }
  v26 = v6[13];
  v27 = &a1[v26];
  v28 = &a2[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  v29 = v6[14];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v31, 1, v32))
  {
    v33 = type metadata accessor for ChartViewModel.Background(0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v34 = *(int *)(v32 + 48);
    v35 = &v30[v34];
    v36 = &v31[v34];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v24))
    {
      v37 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v35, v36, v24);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v24);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v30, 0, 1, v32);
  }
  *(_QWORD *)&a1[v6[15]] = *(_QWORD *)&a2[v6[15]];
  v38 = v6[16];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
  *(_QWORD *)&a1[v6[17]] = *(_QWORD *)&a2[v6[17]];
  v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v42(&a1[v6[18]], &a2[v6[18]], v24);
  v42(&a1[v6[19]], &a2[v6[19]], v24);
  v42(&a1[v6[20]], &a2[v6[20]], v24);
  v43 = v6[21];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v46 = type metadata accessor for DetailChartDataElement(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v46))
  {
    v47 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v44, 0, 1, v46);
  }
  *(_QWORD *)&a1[v6[22]] = *(_QWORD *)&a2[v6[22]];
  v48 = v6[23];
  v49 = &a1[v48];
  v50 = &a2[v48];
  v51 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v49, v50, v51);
  *(_QWORD *)&a1[v6[24]] = *(_QWORD *)&a2[v6[24]];
  *(_QWORD *)&a1[v6[25]] = *(_QWORD *)&a2[v6[25]];
  v52 = v6[26];
  v53 = &a1[v52];
  v54 = &a2[v52];
  v55 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  v56 = v6[27];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v59 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v57, v58, v59);
  *(_OWORD *)&a1[v6[28]] = *(_OWORD *)&a2[v6[28]];
  *(_OWORD *)&a1[v6[29]] = *(_OWORD *)&a2[v6[29]];
  *(_OWORD *)&a1[v6[30]] = *(_OWORD *)&a2[v6[30]];
  *(_OWORD *)&a1[v6[31]] = *(_OWORD *)&a2[v6[31]];
  *(_OWORD *)&a1[v6[32]] = *(_OWORD *)&a2[v6[32]];
  *(_OWORD *)&a1[v6[33]] = *(_OWORD *)&a2[v6[33]];
  v60 = a3[5];
  v61 = a3[6];
  v62 = &a1[v60];
  v63 = &a2[v60];
  v64 = *((_OWORD *)v63 + 1);
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *((_OWORD *)v62 + 1) = v64;
  *(_QWORD *)&a1[v61] = *(_QWORD *)&a2[v61];
  v65 = a3[7];
  v66 = a3[8];
  v67 = &a1[v65];
  v68 = &a2[v65];
  v69 = *((_OWORD *)v68 + 1);
  *(_OWORD *)v67 = *(_OWORD *)v68;
  *((_OWORD *)v67 + 1) = v69;
  *((_QWORD *)v67 + 4) = *((_QWORD *)v68 + 4);
  v70 = &a1[v66];
  v71 = &a2[v66];
  v70[8] = v71[8];
  *(_QWORD *)v70 = *(_QWORD *)v71;
  v72 = a3[9];
  v73 = &a1[v72];
  v74 = &a2[v72];
  v75 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v74) == 1)
  {
    v76 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(v73, v74, v76);
    swift_storeEnumTagMultiPayload(v73, v75, 1);
  }
  else
  {
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  v77 = a3[10];
  v78 = &a1[v77];
  v79 = &a2[v77];
  v80 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v79) == 1)
  {
    v81 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v78, v79, v81);
    swift_storeEnumTagMultiPayload(v78, v80, 1);
  }
  else
  {
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  v82 = a3[11];
  v83 = &a1[v82];
  v84 = &a2[v82];
  v85 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v83, v84, v85);
  return a1;
}

char *sub_1005C83D0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v20;
  void *v21;
  void *v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  size_t v49;
  void *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  __n128 v63;
  void (*v64)(char *, char *, uint64_t, __n128);
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  __int128 v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v141;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = (int *)type metadata accessor for ChartViewModel(0);
  v8 = v7[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for ChartKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_QWORD *)&a1[v7[6]] = *(_QWORD *)&a2[v7[6]];
  swift_bridgeObjectRelease();
  v12 = v7[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_QWORD *)&a1[v7[8]] = *(_QWORD *)&a2[v7[8]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[v7[9]] = *(_QWORD *)&a2[v7[9]];
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[v7[10]] = *(_OWORD *)&a2[v7[10]];
  v16 = v7[11];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *((_QWORD *)v18 + 2);
  v20 = v18[24];
  v21 = *(void **)v17;
  v22 = (void *)*((_QWORD *)v17 + 1);
  v23 = *((_QWORD *)v17 + 2);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_QWORD *)v17 + 2) = v19;
  v24 = v17[24];
  v17[24] = v20;
  sub_1001A44FC(v21, v22, v23, v24);
  v25 = v7[12];
  v26 = &a1[v25];
  v27 = &a2[v25];
  *(_QWORD *)&a1[v25] = *(_QWORD *)&a2[v25];
  v28 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v29 = &v26[v28];
  v30 = &v27[v28];
  v31 = type metadata accessor for Date(0);
  v32 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v31);
  v33 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v30, 1, v31);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 0, 1, v31);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v34 = *(_QWORD *)(v31 - 8);
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v31);
LABEL_6:
    v35 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 40))(v29, v30, v31);
LABEL_7:
  v36 = v7[13];
  v37 = &a1[v36];
  v38 = &a2[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v38[8];
  v39 = v7[14];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = sub_1000BA294(&qword_100BCB988);
  v43 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v42);
  v44 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v42);
  if (v43)
  {
    if (!v44)
    {
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v45 = *(int *)(v42 + 48);
      v46 = &v40[v45];
      v47 = &v41[v45];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v47, 1, v31))
      {
        v48 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v46, v47, v31);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v46, 0, 1, v31);
      }
      v57 = (uint64_t)v40;
      v58 = v42;
      goto LABEL_21;
    }
    goto LABEL_13;
  }
  if (v44)
  {
    sub_100021A14((uint64_t)v40, &qword_100BCB988);
LABEL_13:
    v49 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for ChartViewModel.Background(0) - 8) + 64);
    v50 = v40;
    v51 = v41;
LABEL_14:
    memcpy(v50, v51, v49);
    goto LABEL_22;
  }
  *(_QWORD *)v40 = *(_QWORD *)v41;
  swift_release();
  v52 = *(int *)(v42 + 48);
  v53 = (uint64_t)&v40[v52];
  v54 = (uint64_t)&v41[v52];
  v55 = _s7Weather24LocationCompositionStateOwet_0(v53, 1, v31);
  v56 = _s7Weather24LocationCompositionStateOwet_0(v54, 1, v31);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v53, v54, v31);
      v57 = v53;
      v58 = v31;
LABEL_21:
      _s7Weather24LocationCompositionStateOwst_0(v57, 0, 1, v58);
      goto LABEL_22;
    }
    goto LABEL_39;
  }
  v141 = *(_QWORD *)(v31 - 8);
  if (v56)
  {
    (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v53, v31);
LABEL_39:
    v49 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
    v50 = (void *)v53;
    v51 = (const void *)v54;
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v141 + 40))(v53, v54, v31);
LABEL_22:
  *(_QWORD *)&a1[v7[15]] = *(_QWORD *)&a2[v7[15]];
  v59 = v7[16];
  v60 = &a1[v59];
  v61 = &a2[v59];
  v62 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 40))(v60, v61, v62);
  *(_QWORD *)&a1[v7[17]] = *(_QWORD *)&a2[v7[17]];
  v63 = swift_bridgeObjectRelease();
  v64 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v31 - 8) + 40);
  v64(&a1[v7[18]], &a2[v7[18]], v31, v63);
  ((void (*)(char *, char *, uint64_t))v64)(&a1[v7[19]], &a2[v7[19]], v31);
  ((void (*)(char *, char *, uint64_t))v64)(&a1[v7[20]], &a2[v7[20]], v31);
  v65 = v7[21];
  v66 = &a1[v65];
  v67 = &a2[v65];
  v68 = type metadata accessor for DetailChartDataElement(0);
  v69 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v66, 1, v68);
  v70 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v67, 1, v68);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v66, v67, v68);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, v68);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  v71 = *(_QWORD *)(v68 - 8);
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v66, v68);
LABEL_27:
    v72 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v71 + 40))(v66, v67, v68);
LABEL_28:
  *(_QWORD *)&a1[v7[22]] = *(_QWORD *)&a2[v7[22]];
  swift_bridgeObjectRelease();
  v73 = v7[23];
  v74 = &a1[v73];
  v75 = &a2[v73];
  v76 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 40))(v74, v75, v76);
  *(_QWORD *)&a1[v7[24]] = *(_QWORD *)&a2[v7[24]];
  *(_QWORD *)&a1[v7[25]] = *(_QWORD *)&a2[v7[25]];
  swift_bridgeObjectRelease();
  v77 = v7[26];
  v78 = &a1[v77];
  v79 = &a2[v77];
  v80 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 40))(v78, v79, v80);
  v81 = v7[27];
  v82 = &a1[v81];
  v83 = &a2[v81];
  v84 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 40))(v82, v83, v84);
  v85 = v7[28];
  v86 = &a1[v85];
  v87 = (uint64_t *)&a2[v85];
  v89 = *v87;
  v88 = v87[1];
  *(_QWORD *)v86 = v89;
  *((_QWORD *)v86 + 1) = v88;
  swift_bridgeObjectRelease();
  v90 = v7[29];
  v91 = &a1[v90];
  v92 = (uint64_t *)&a2[v90];
  v94 = *v92;
  v93 = v92[1];
  *(_QWORD *)v91 = v94;
  *((_QWORD *)v91 + 1) = v93;
  swift_bridgeObjectRelease();
  v95 = v7[30];
  v96 = &a1[v95];
  v97 = (uint64_t *)&a2[v95];
  v99 = *v97;
  v98 = v97[1];
  *(_QWORD *)v96 = v99;
  *((_QWORD *)v96 + 1) = v98;
  swift_bridgeObjectRelease();
  v100 = v7[31];
  v101 = &a1[v100];
  v102 = (uint64_t *)&a2[v100];
  v104 = *v102;
  v103 = v102[1];
  *(_QWORD *)v101 = v104;
  *((_QWORD *)v101 + 1) = v103;
  swift_bridgeObjectRelease();
  v105 = v7[32];
  v106 = &a1[v105];
  v107 = (uint64_t *)&a2[v105];
  v109 = *v107;
  v108 = v107[1];
  *(_QWORD *)v106 = v109;
  *((_QWORD *)v106 + 1) = v108;
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[v7[33]] = *(_OWORD *)&a2[v7[33]];
  swift_release();
  v110 = a3[5];
  v111 = a3[6];
  v112 = &a1[v110];
  v113 = &a2[v110];
  v114 = *((_OWORD *)v113 + 1);
  v115 = *(_QWORD *)&a2[v111];
  *(_OWORD *)v112 = *(_OWORD *)v113;
  *((_OWORD *)v112 + 1) = v114;
  *(_QWORD *)&a1[v111] = v115;
  v116 = a3[7];
  v117 = &a1[v116];
  v118 = &a2[v116];
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&a1[v116]);
  v119 = *((_OWORD *)v118 + 1);
  *(_OWORD *)v117 = *(_OWORD *)v118;
  *((_OWORD *)v117 + 1) = v119;
  *((_QWORD *)v117 + 4) = *((_QWORD *)v118 + 4);
  v120 = a3[8];
  v121 = &a1[v120];
  v122 = &a2[v120];
  v123 = *(_QWORD *)v122;
  LOBYTE(v122) = v122[8];
  v124 = *(_QWORD *)v121;
  v125 = v121[8];
  *(_QWORD *)v121 = v123;
  v121[8] = (char)v122;
  sub_1000B15F8(v124, v125);
  if (a1 != a2)
  {
    v126 = a3[9];
    v127 = &a1[v126];
    v128 = &a2[v126];
    sub_100021A14((uint64_t)&a1[v126], &qword_100BC68C8);
    v129 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v128) == 1)
    {
      v130 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v130 - 8) + 32))(v127, v128, v130);
      swift_storeEnumTagMultiPayload(v127, v129, 1);
    }
    else
    {
      memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
    }
    v131 = a3[10];
    v132 = &a1[v131];
    v133 = &a2[v131];
    sub_100021A14((uint64_t)&a1[v131], &qword_100BC2908);
    v134 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v133) == 1)
    {
      v135 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 32))(v132, v133, v135);
      swift_storeEnumTagMultiPayload(v132, v134, 1);
    }
    else
    {
      memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
    }
  }
  v136 = a3[11];
  v137 = &a1[v136];
  v138 = &a2[v136];
  v139 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v139 - 8) + 40))(v137, v138, v139);
  return a1;
}

uint64_t sub_1005C8C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005C8C3C);
}

uint64_t sub_1005C8C3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_1000995F0();
  sub_100088FF0();
  if (v13)
  {
    v7 = v6;
    v8 = a1;
    return sub_1000B250C(v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_1000BA294(&qword_100BCD380);
    sub_100088FF0();
    if (v13)
    {
      v7 = v11;
      v12 = a3[9];
    }
    else
    {
      sub_1000BA294(&qword_100BC3800);
      sub_100088FF0();
      if (v13)
      {
        v7 = v14;
        v12 = a3[10];
      }
      else
      {
        v7 = sub_1000BCF7C();
        v12 = a3[11];
      }
    }
    v8 = a1 + v12;
    return sub_1000B250C(v8, a2, v7);
  }
  v9 = *(_QWORD *)(a1 + a3[7] + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1005C8D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005C8D10);
}

void sub_1005C8D10(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_1000995F0();
  sub_10009D2E8();
  if (v13)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[7] + 24) = (a2 - 1);
      return;
    }
    sub_1000BA294(&qword_100BCD380);
    sub_10009D2E8();
    if (v13)
    {
      v9 = v11;
      v12 = a4[9];
    }
    else
    {
      sub_1000BA294(&qword_100BC3800);
      sub_10009D2E8();
      if (v13)
      {
        v9 = v14;
        v12 = a4[10];
      }
      else
      {
        v9 = sub_1000BCF7C();
        v12 = a4[11];
      }
    }
    v10 = a1 + v12;
  }
  sub_1000987C4(v10, a2, a2, v9);
}

uint64_t type metadata accessor for ChartView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF4180, (uint64_t)&nominal type descriptor for ChartView);
}

void sub_1005C8DE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];

  v2 = type metadata accessor for ChartViewModel(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = " ";
    v10[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v10[3] = &unk_1009B2630;
    v10[4] = &unk_1009B2648;
    sub_100158B48(319, (unint64_t *)&qword_100BCD3F8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
    if (v5 <= 0x3F)
    {
      v10[5] = *(_QWORD *)(v4 - 8) + 64;
      sub_100158B48(319, (unint64_t *)&qword_100BC3880, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
      if (v7 <= 0x3F)
      {
        v10[6] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for Text.Measurements(319);
        if (v9 <= 0x3F)
        {
          v10[7] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 8, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_1005C8EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  double v18;
  double v19;
  uint64_t v20;
  char v21;
  uint64_t v23;

  v4 = type metadata accessor for ChartView(0);
  sub_10009D98C();
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v23 - v15;
  v17 = sub_100559AD0(a1, a2);
  sub_1000D073C(a1, (uint64_t)v16);
  sub_1000D073C(a2, (uint64_t)v13);
  if ((v17 & 1) == 0)
  {
    sub_1000215BC((uint64_t)v13, type metadata accessor for ChartView);
    sub_1000215BC((uint64_t)v16, type metadata accessor for ChartView);
    sub_10000AB54(a1, (uint64_t)v10, type metadata accessor for ChartView);
    sub_10000AB54(a2, (uint64_t)v7, type metadata accessor for ChartView);
    goto LABEL_5;
  }
  v18 = *(double *)&v16[*(int *)(v4 + 24)];
  sub_1000215BC((uint64_t)v16, type metadata accessor for ChartView);
  v19 = *(double *)&v13[*(int *)(v4 + 24)];
  sub_1000215BC((uint64_t)v13, type metadata accessor for ChartView);
  sub_1000D073C(a1, (uint64_t)v10);
  sub_1000D073C(a2, (uint64_t)v7);
  if (v18 != v19)
  {
LABEL_5:
    v21 = 0;
    goto LABEL_6;
  }
  v20 = *(int *)(v4 + 20);
  v21 = static EdgeInsets.== infix(_:_:)(*(double *)&v10[v20], *(double *)&v10[v20 + 8], *(double *)&v10[v20 + 16], *(double *)&v10[v20 + 24], *(double *)&v7[v20], *(double *)&v7[v20 + 8], *(double *)&v7[v20 + 16], *(double *)&v7[v20 + 24]);
LABEL_6:
  sub_1000215BC((uint64_t)v7, type metadata accessor for ChartView);
  sub_1000215BC((uint64_t)v10, type metadata accessor for ChartView);
  return v21 & 1;
}

void sub_1005C90D0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t);
  uint64_t (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(uint64_t, _QWORD);
  void (*v149)(uint64_t, uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(uint64_t, uint64_t);
  uint64_t v154;
  Swift::String v155;
  uint64_t v156;
  uint64_t v157;
  Swift::String v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(uint64_t, uint64_t);
  uint64_t v184;
  uint64_t v185;
  __int16 v186;
  _QWORD v187[5];
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216[8];
  _QWORD v217[4];
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226[8];
  char v227[8];
  uint64_t v228;
  char v229[8];
  char v230[8];
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  char v240[8];
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;

  v2 = v1;
  v224 = a1;
  v3 = type metadata accessor for DynamicTypeSize(0);
  sub_1000B43A4(v3, (uint64_t)&v243);
  sub_1000BBFEC(v4);
  __chkstk_darwin(v5);
  sub_100088FDC();
  v7 = sub_1000987B4(v6);
  type metadata accessor for LocalizedStringKey.StringInterpolation(v7);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v10 = sub_1000987B4(v9);
  v218 = type metadata accessor for AutomationInfo(v10);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v13 = sub_1000987B4(v12);
  v14 = type metadata accessor for AccessibilityChildBehavior(v13);
  sub_1000B43A4(v14, (uint64_t)&v242);
  sub_1000BBFEC(v15);
  __chkstk_darwin(v16);
  sub_100088FDC();
  v18 = sub_1000987B4(v17);
  v19 = type metadata accessor for ChartView(v18);
  v20 = sub_1000B43A4(v19, (uint64_t)&v235);
  v203 = v21;
  __chkstk_darwin(v20);
  v204 = v22;
  v23 = sub_1000987B4((uint64_t)v187 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = type metadata accessor for PlotDimensionScaleRange(v23);
  sub_1000B43A4(v24, (uint64_t)v216);
  sub_1000BBFEC(v25);
  __chkstk_darwin(v26);
  sub_100088FDC();
  sub_10009511C(v27);
  sub_1000BA294(&qword_100BDCAB0);
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_100098728();
  v31 = v30 - v29;
  v32 = sub_1000BA294(&qword_100BF41D0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_100098728();
  v34 = sub_1000BA294(&qword_100BF41D8);
  sub_1000B43A4(v34, (uint64_t)&v215);
  sub_1000BBFEC(v35);
  __chkstk_darwin(v36);
  sub_100098728();
  v39 = v38 - v37;
  v40 = sub_1000BA294(&qword_100BF41E0);
  sub_1000B43A4(v40, (uint64_t)v217);
  sub_1000BBFEC(v41);
  __chkstk_darwin(v42);
  sub_100088FDC();
  sub_10009511C(v43);
  v44 = sub_1000BA294(&qword_100BF41E8);
  sub_1000B43A4(v44, (uint64_t)&v218);
  sub_1000BBFEC(v45);
  __chkstk_darwin(v46);
  sub_100088FDC();
  sub_10009511C(v47);
  v48 = sub_1000BA294(&qword_100BF41F0);
  sub_1000B43A4(v48, (uint64_t)&v221);
  sub_1000BBFEC(v49);
  __chkstk_darwin(v50);
  sub_100088FDC();
  sub_10009511C(v51);
  v198 = sub_1000BA294(&qword_100BF41F8);
  sub_10009D98C();
  __chkstk_darwin(v52);
  sub_100088FDC();
  sub_10009511C(v53);
  v54 = sub_1000BA294(&qword_100BF4200);
  sub_1000B43A4(v54, (uint64_t)v227);
  sub_1000BBFEC(v55);
  __chkstk_darwin(v56);
  sub_100088FDC();
  sub_10009511C(v57);
  v58 = sub_1000BA294(&qword_100BD9B68);
  sub_1000B43A4(v58, (uint64_t)v230);
  sub_1000BBFEC(v59);
  __chkstk_darwin(v60);
  sub_100088FDC();
  sub_10009511C(v61);
  v206 = sub_1000BA294(&qword_100BD9B70);
  sub_10009D98C();
  __chkstk_darwin(v62);
  sub_100088FDC();
  sub_10009511C(v63);
  v212 = sub_1000BA294(&qword_100BF4208);
  sub_10009D98C();
  __chkstk_darwin(v64);
  sub_100088FDC();
  sub_10009511C(v65);
  v66 = sub_1000BA294(&qword_100BF4210);
  sub_1000B43A4(v66, (uint64_t)&v241);
  sub_1000BBFEC(v67);
  __chkstk_darwin(v68);
  sub_100088FDC();
  sub_10009511C(v69);
  v70 = sub_1000BA294(&qword_100BF4218);
  sub_1000B43A4(v70, (uint64_t)v240);
  sub_1000BBFEC(v71);
  __chkstk_darwin(v72);
  sub_100088FDC();
  sub_10009511C(v73);
  v210 = sub_1000BA294(&qword_100BF4220);
  sub_10009D98C();
  __chkstk_darwin(v74);
  sub_100088FDC();
  sub_10009511C(v75);
  v228 = v1;
  v76 = sub_1000BA294(&qword_100BF4228);
  v77 = sub_1005CFD88();
  Chart.init(content:)(sub_1005CFD80, v226, v76, v77);
  v236 = sub_1005CAA80(v1);
  type metadata accessor for ScaleType(0);
  sub_1000E77F4();
  v78 = sub_1000BA294(&qword_100BC69E0);
  sub_10027248C((uint64_t)&unk_100BF42C0);
  v80 = v79;
  v81 = sub_1005D00E0((uint64_t)&unk_100BF42C8);
  v187[2] = v39;
  View.chartXScale<A>(domain:type:)(&v236, v31, v32, v78, v80, v81);
  sub_100021A14(v31, &qword_100BDCAB0);
  swift_bridgeObjectRelease();
  sub_1000BEF04(*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
  v82 = sub_1000BA294(&qword_100BCB140);
  v83 = swift_allocObject(v82, 48, 7);
  *(_OWORD *)(v83 + 16) = xmmword_10097DA20;
  v84 = sub_1000995F0();
  *(_OWORD *)(v83 + 32) = *(_OWORD *)(v2 + *(int *)(v84 + 40));
  v235 = v83;
  v196 = v84;
  v85 = *(int *)(v84 + 32);
  v225 = v2;
  if (*(_QWORD *)(v2 + v85))
  {
    if (qword_100BC20C0 != -1)
      swift_once(&qword_100BC20C0, sub_1004049E8);
    swift_beginAccess(&qword_100CAE968, v229, 0, 0);
    v86 = *(double *)&xmmword_100CAE988 + *((double *)&xmmword_100CAE988 + 1) + *((double *)&xmmword_100CAE988 + 1);
  }
  else
  {
    v86 = 0.0;
  }
  v87 = v187[3];
  static PositionScaleRange<>.plotDimension(startPadding:endPadding:)(0.0, v86);
  sub_1000E77F4();
  v88 = sub_1000BA294(&qword_100BF42D0);
  *(_QWORD *)&v237 = v32;
  *((_QWORD *)&v237 + 1) = v78;
  *(_QWORD *)&v238 = v80;
  *((_QWORD *)&v238 + 1) = v81;
  v89 = sub_10009885C((uint64_t)&v237, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>);
  v90 = sub_1005D00E0((uint64_t)&unk_100BF42D8);
  v91 = v187[1];
  v92 = v188;
  v93 = v189;
  View.chartYScale<A, B>(domain:range:type:)(&v235, v87, v31, v188, v88, v189, v89, v90, &protocol witness table for PlotDimensionScaleRange);
  sub_100021A14(v31, &qword_100BDCAB0);
  sub_1000988C4();
  sub_1000BDD1C(v87, v94);
  swift_bridgeObjectRelease();
  sub_1000988C4();
  v96 = sub_1000BEF04(v95);
  v191 = v187;
  __chkstk_darwin(v96);
  v97 = sub_1000BA294(&qword_100BF42E0);
  *(_QWORD *)&v237 = v92;
  *((_QWORD *)&v237 + 1) = v88;
  *(_QWORD *)&v238 = v93;
  *((_QWORD *)&v238 + 1) = v89;
  *(_QWORD *)&v239 = v90;
  *((_QWORD *)&v239 + 1) = &protocol witness table for PlotDimensionScaleRange;
  v98 = sub_10009885C((uint64_t)&v237, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartYScale<A, B>(domain:range:type:)>>);
  v99 = sub_100075EB0(&qword_100BF42E8);
  v100 = sub_100075EB0(&qword_100BF42F0);
  sub_10027248C((uint64_t)&unk_100BF42F8);
  v102 = v101;
  sub_1005D0168((uint64_t)&unk_100BF4300);
  *(_QWORD *)&v237 = v99;
  *((_QWORD *)&v237 + 1) = v100;
  *(_QWORD *)&v238 = v102;
  *((_QWORD *)&v238 + 1) = v103;
  v104 = sub_10009885C((uint64_t)&v237, (uint64_t)&opaque type descriptor for <<opaque return type of AxisContent.compositingLayer<A>(style:)>>);
  v105 = v192;
  v106 = v190;
  View.chartXAxis<A>(content:)(sub_1005D0128, &v187[-4], v190, v97, v98, v104);
  sub_1000988C4();
  v108 = v107(v91, v106);
  __chkstk_darwin(v108);
  v109 = v225;
  v185 = v225;
  v189 = sub_1000BA294(&qword_100BF4318);
  *(_QWORD *)&v237 = v106;
  *((_QWORD *)&v237 + 1) = v97;
  *(_QWORD *)&v238 = v98;
  *((_QWORD *)&v238 + 1) = v104;
  v110 = sub_10009885C((uint64_t)&v237, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>);
  v111 = sub_100075EB0(&qword_100BF4320);
  v112 = sub_100075EB0(&qword_100BF4328);
  sub_10027248C((uint64_t)&unk_100BF4330);
  v114 = v113;
  sub_1005D0168((uint64_t)&unk_100BF4338);
  *(_QWORD *)&v237 = v111;
  *((_QWORD *)&v237 + 1) = v112;
  *(_QWORD *)&v238 = v114;
  *((_QWORD *)&v238 + 1) = v115;
  v116 = sub_10009885C((uint64_t)&v237, (uint64_t)&opaque type descriptor for <<opaque return type of AxisContent.compositingLayer<A>(style:)>>);
  v117 = v194;
  v118 = v193;
  View.chartYAxis<A>(content:)(sub_1005D0148, &v187[-4], v193, v189, v110, v116);
  sub_1000988C4();
  v120 = v119(v105, v118);
  v121 = v209;
  v122 = *(_QWORD *)(v109 + *(int *)(v209 + 24));
  static Alignment.center.getter(v120);
  _FrameLayout.init(width:height:alignment:)(v122, 0, 0, 1);
  v123 = v197;
  sub_1000CDF80(v197, v117, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v195 + 16));
  v124 = v198;
  v125 = (_OWORD *)(v123 + *(int *)(v198 + 36));
  v126 = v238;
  *v125 = v237;
  v125[1] = v126;
  v125[2] = v239;
  sub_1000C1B3C();
  v127 = v205;
  sub_10000AB54(v109, v205, type metadata accessor for ChartView);
  v128 = *(unsigned __int8 *)(v203 + 80);
  v129 = (v128 + 16) & ~v128;
  v130 = swift_allocObject(&unk_100B827F8, v129 + v204, v128 | 7);
  v131 = sub_1005D01D0(v127, v130 + v129);
  v132 = static Alignment.center.getter(v131);
  v134 = v133;
  v135 = type metadata accessor for ChartBackgroundView(0);
  v136 = sub_1005D0234();
  sub_10007A100((uint64_t)&unk_100BF4358);
  v138 = v137;
  v139 = v199;
  View.chartBackground<A>(alignment:content:)(v132, v134, sub_1005D0214, v130, v124, v135, v136, v137);
  swift_release();
  sub_100021A14(v123, &qword_100BF41F8);
  v140 = v225 + *(int *)(v121 + 32);
  v141 = *(_QWORD *)v140;
  LOBYTE(v130) = *(_BYTE *)(v140 + 8);
  sub_10008D47C(*(_QWORD *)v140, v130);
  sub_100109B54();
  LOBYTE(v134) = v142;
  v143 = sub_1000B15F8(v141, v130);
  v144 = v217[1];
  if ((v134 & 1) != 0)
    static AccessibilityChildBehavior.contain.getter(v143);
  else
    static AccessibilityChildBehavior.ignore.getter(v143);
  v231 = v124;
  v232 = v135;
  v233 = v136;
  v234 = v138;
  v145 = sub_10009885C((uint64_t)&v231, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartBackground<A>(alignment:content:)>>);
  v146 = v201;
  v147 = v200;
  View.accessibilityElement(children:)(v144, v200, v145);
  sub_1000988C4();
  v148(v144, v217[3]);
  sub_1000988C4();
  v149(v139, v147);
  v150 = type metadata accessor for AutomationCellInfo(0);
  v151 = v219;
  swift_storeEnumTagMultiPayload(v219, v150, 23);
  swift_storeEnumTagMultiPayload(v151, v218, 1);
  v152 = v207;
  sub_100335488();
  sub_1000215BC(v151, type metadata accessor for AutomationInfo);
  sub_1000988C4();
  v153(v146, v202);
  v154 = v220;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(7, 1);
  v155._countAndFlagsBits = 0x203A7472616843;
  v155._object = (void *)0xE700000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v155);
  v156 = v196;
  v157 = v225;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v225 + *(int *)(v196 + 112)));
  v158._countAndFlagsBits = 0;
  v158._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v158);
  v159 = LocalizedStringKey.init(stringInterpolation:)(v154);
  v186 = 256;
  v185 = 0;
  v163 = Text.init(_:tableName:bundle:comment:)(v159, v161, v160 & 1, v162, 0, 0, 0, 0);
  v165 = v164;
  v167 = v166;
  v169 = v168 & 1;
  v170 = sub_1005D0E60();
  v171 = v208;
  View.accessibilityLabel(_:)(v163, v165, v169, v167, v206, v170);
  sub_1000D31B4(v163, v165, v169);
  swift_bridgeObjectRelease();
  sub_100021A14(v152, &qword_100BD9B70);
  v172 = sub_1005D0F78();
  sub_10007A100((uint64_t)&unk_100BF4370);
  v174 = v173;
  v175 = v214;
  v176 = v212;
  View.accessibilityChartDescriptor<A>(_:)(v157, v212, v156, v172, v173);
  sub_100021A14(v171, &qword_100BF4208);
  v177 = v222;
  v178 = v221;
  v179 = v223;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v222 + 104))(v221, enum case for DynamicTypeSize.large(_:), v223);
  v231 = v176;
  v232 = v156;
  v233 = v172;
  v234 = v174;
  v180 = sub_10009885C((uint64_t)&v231, (uint64_t)&opaque type descriptor for <<opaque return type of View.accessibilityChartDescriptor<A>(_:)>>);
  v181 = v213;
  v182 = v217[0];
  View.dynamicTypeSize(_:)(v178, v217[0], v180);
  (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v178, v179);
  sub_1000988C4();
  v183(v175, v182);
  v184 = v211;
  sub_1000CDF80(v211, v181, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v215 + 16));
  *(_WORD *)(v184 + *(int *)(v210 + 36)) = 0;
  sub_1000C1B3C();
  sub_1000F111C(v184, v224, &qword_100BF4220);
}

void sub_1005C9ED8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t OpaqueTypeConformance2;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t KeyPath;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  void (**v116)(char *, char *, char *);
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  int *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;

  v138 = a2;
  v3 = sub_1000BA294(&qword_100BF4298);
  __chkstk_darwin(v3);
  v137 = (uint64_t)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v136 = (char *)&v111 - v6;
  v7 = sub_1000BA294(&qword_100BF4260);
  __chkstk_darwin(v7);
  v132 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for ChartPeakMarkStyle(0);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v114 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BF4280);
  __chkstk_darwin(v10);
  v130 = (uint64_t)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v131 = (char *)&v111 - v13;
  v129 = type metadata accessor for ChartViewModelInterpolationMode(0);
  v127 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v126 = (char *)&v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for Date(0);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v118 = (uint64_t)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_1000BA294(&qword_100BF4268);
  v124 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v123 = (char *)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_1000BA294(&qword_100BF4408);
  v133 = *(int **)(v125 - 8);
  __chkstk_darwin(v125);
  v122 = (char *)&v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v121 = (char *)&v111 - v19;
  v20 = sub_1000BA294(&qword_100BCB940);
  __chkstk_darwin(v20);
  v22 = (char *)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v111 - v24;
  v117 = (char *)sub_1000BA294(&qword_100BF4250);
  v116 = (void (**)(char *, char *, char *))*((_QWORD *)v117 - 1);
  __chkstk_darwin(v117);
  v27 = (char *)&v111 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = (uint64_t *)type metadata accessor for DetailChartGradientModel(0);
  v28 = *(v115 - 1);
  __chkstk_darwin(v115);
  v30 = (char *)&v111 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for ChartKind(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)&v111 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_1000BA294(&qword_100BF4240);
  __chkstk_darwin(v35);
  v135 = (uint64_t)&v111 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v134 = (char *)&v111 - v38;
  v39 = (int *)type metadata accessor for ChartViewModel(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, a1 + v39[5], v31);
  v40 = (*(uint64_t (**)(char *, uint64_t))(v32 + 88))(v34, v31);
  if (v40 == enum case for ChartKind.line(_:))
  {
    (*(void (**)(char *, uint64_t))(v32 + 96))(v34, v31);
    v41 = (uint64_t)&v34[*(int *)(sub_1000BA294(&qword_100BCB970) + 48)];
    sub_1000F111C((uint64_t)v34, (uint64_t)v25, &qword_100BCB940);
    sub_1000F111C(v41, (uint64_t)v22, &qword_100BCB940);
    v42 = v118;
    v43 = a1;
    v44 = sub_1005CE65C((uint64_t)v25, (uint64_t)v22, a1, v118);
    v115 = &v111;
    __chkstk_darwin(v44);
    v117 = v22;
    *(&v111 - 4) = (uint64_t)v22;
    *(&v111 - 3) = a1;
    v109 = v42;
    v110 = v25;
    v116 = (void (**)(char *, char *, char *))v25;
    v45 = sub_1000BA294(&qword_100BF4410);
    v46 = sub_1005D1734();
    v47 = v123;
    Plot.init(content:)(sub_1005D1728, &v111 - 6, v45, v46);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v42, v120);
    v48 = v126;
    (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v126, v43 + v39[26], v129);
    v49 = InterpolationMethod.init(_:)(v48);
    v51 = v50;
    sub_10027248C((uint64_t)&unk_100BF4270);
    v53 = v52;
    v54 = v122;
    v55 = v49;
    v56 = v128;
    ChartContent.interpolationMethod(_:)(v55, v51, v128, v53);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v47, v56);
    v57 = v133;
    v58 = v121;
    v59 = v125;
    (*((void (**)(char *, char *, uint64_t))v133 + 4))(v121, v54, v125);
    v60 = *(_QWORD *)(v43 + v39[22]);
    v61 = *(_QWORD *)(v60 + 16);
    v62 = v43;
    v63 = v39;
    v64 = (uint64_t)v54;
    v111 = v62;
    if (v61)
    {
      v65 = v114;
      (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v114, v62 + v39[23], v113);
      v66 = qword_100BC20C0;
      swift_bridgeObjectRetain();
      v67 = (uint64_t)v134;
      v68 = (uint64_t)v131;
      if (v66 != -1)
        swift_once(&qword_100BC20C0, sub_1004049E8);
      swift_beginAccess(&qword_100CAE968, &v139, 33, 0);
      v69 = sub_100404754();
      v70 = sub_10040459C();
      sub_100404670();
      v72 = v71;
      swift_endAccess(&v139);
      ChartPointMarkSeries.init(markers:markStyle:symbolSize:labelFont:fallbackLabelColor:)(v60, v65, v70, v72, v69);
      v73 = 0;
      v57 = v133;
    }
    else
    {
      v73 = 1;
      v67 = (uint64_t)v134;
      v68 = (uint64_t)v131;
    }
    v86 = type metadata accessor for ChartPointMarkSeries(0);
    _s7Weather24LocationCompositionStateOwst_0(v68, v73, 1, v86);
    (*((void (**)(uint64_t, char *, uint64_t))v57 + 2))(v64, v58, v59);
    v139 = v64;
    v87 = v130;
    sub_100037794(v68, v130, &qword_100BF4280);
    v140 = (_QWORD *)v87;
    v88 = (uint64_t)v132;
    sub_10073BB2C();
    sub_100021A14(v87, &qword_100BF4280);
    v89 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v57 + 1);
    v89(v64, v59);
    sub_100037794(v88, v67, &qword_100BF4260);
    v90 = sub_1000BA294(&qword_100BF4460);
    swift_storeEnumTagMultiPayload(v67, v90, 1);
    sub_100021A14(v88, &qword_100BF4260);
    sub_100021A14(v68, &qword_100BF4280);
    v89((uint64_t)v58, v59);
    sub_100021A14((uint64_t)v117, &qword_100BCB940);
    sub_100021A14((uint64_t)v116, &qword_100BCB940);
    v76 = v111;
  }
  else
  {
    v133 = v39;
    if (v40 != enum case for ChartKind.bar(_:))
    {
      _diagnoseUnexpectedEnumCase<A>(type:)(v31, v31);
      __break(1u);
      return;
    }
    (*(void (**)(char *, uint64_t))(v32 + 96))(v34, v31);
    v74 = v115;
    v75 = (*(uint64_t (**)(char *, char *, uint64_t *))(v28 + 32))(v30, v34, v115);
    __chkstk_darwin(v75);
    v76 = a1;
    v109 = a1;
    v110 = v30;
    v77 = sub_1000BA294(&qword_100BF4478);
    v78 = sub_100075EB0(&qword_100BF4480);
    v79 = type metadata accessor for RectangleMark(255);
    v80 = sub_1005D1918();
    v139 = v78;
    v140 = (_QWORD *)v79;
    v141 = v80;
    v142 = &protocol witness table for RectangleMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v139, &opaque type descriptor for <<opaque return type of ChartContent.mask<A>(content:)>>, 1);
    Plot.init(content:)(sub_1005D1910, &v111 - 4, v77, OpaqueTypeConformance2);
    v82 = (uint64_t)v116;
    v67 = (uint64_t)v134;
    v83 = (uint64_t)v117;
    v116[2](v134, v27, v117);
    v84 = sub_1000BA294(&qword_100BF4460);
    v85 = swift_storeEnumTagMultiPayload(v67, v84, 0);
    (*(void (**)(char *, uint64_t, __n128))(v82 + 8))(v27, v83, v85);
    (*(void (**)(char *, uint64_t *))(v28 + 8))(v30, v74);
    v63 = v133;
  }
  v91 = v63[8];
  if (*(_QWORD *)(v76 + v91))
  {
    v143 = *(_QWORD *)(v76 + v91);
    KeyPath = swift_getKeyPath(&unk_1009B2710);
    swift_bridgeObjectRetain();
    v93 = sub_1000BA294(&qword_100BDCD30);
    v94 = sub_1000BA294(&qword_100BF4468);
    sub_10027248C((uint64_t)&unk_100BDCD40);
    v96 = v95;
    sub_10007A100((uint64_t)&unk_100BF4470);
    v98 = v97;
    v99 = sub_100075EB0(&qword_100BF42B0);
    v100 = sub_100075EB0(&qword_100BF42B8);
    v139 = type metadata accessor for PointMark(255);
    v140 = &protocol witness table for PointMark;
    v101 = swift_getOpaqueTypeConformance2(&v139, &opaque type descriptor for <<opaque return type of ChartContent.symbolSize(_:)>>, 1);
    v139 = v100;
    v140 = &type metadata for Color;
    v141 = v101;
    v142 = &protocol witness table for Color;
    v102 = swift_getOpaqueTypeConformance2(&v139, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v139 = v99;
    v140 = &type metadata for Text;
    v141 = v102;
    v142 = &protocol witness table for Text;
    v103 = swift_getOpaqueTypeConformance2(&v139, &opaque type descriptor for <<opaque return type of ChartContent.annotation<A>(position:alignment:spacing:overflowResolution:content:)>>, 1);
    v104 = (uint64_t)v136;
    ForEach<>.init(_:id:content:)(&v143, KeyPath, sub_1005CD35C, 0, v93, v94, v96, v98, v103);
    v105 = 0;
  }
  else
  {
    v105 = 1;
    v104 = (uint64_t)v136;
  }
  v106 = sub_1000BA294(&qword_100BF42A8);
  _s7Weather24LocationCompositionStateOwst_0(v104, v105, 1, v106);
  v107 = v135;
  sub_100037794(v67, v135, &qword_100BF4240);
  v139 = v107;
  v108 = v137;
  sub_100037794(v104, v137, &qword_100BF4298);
  v140 = (_QWORD *)v108;
  sub_10073BBE8();
  sub_100021A14(v104, &qword_100BF4298);
  sub_100021A14(v67, &qword_100BF4240);
  sub_100021A14(v108, &qword_100BF4298);
  sub_100021A14(v107, &qword_100BF4240);
}

uint64_t sub_1005CAA80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);
  uint64_t v31;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ChartDateStep(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - v13;
  v15 = (int *)type metadata accessor for ChartViewModel(0);
  sub_10000AB54(a1 + v15[12], (uint64_t)v8, type metadata accessor for ChartDateStep);
  v16 = sub_1000BA294(&qword_100BCB978);
  sub_1000F111C((uint64_t)&v8[*(int *)(v16 + 48)], (uint64_t)v14, (uint64_t *)&unk_100BD35A0);
  sub_100037794((uint64_t)v14, (uint64_t)v11, (uint64_t *)&unk_100BD35A0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v2) == 1)
  {
    sub_100021A14((uint64_t)v14, (uint64_t *)&unk_100BD35A0);
    sub_100021A14((uint64_t)v11, (uint64_t *)&unk_100BD35A0);
    v17 = sub_1000BA294(&qword_100BCB0F0);
    v18 = *(_QWORD *)(v3 + 72);
    v19 = *(unsigned __int8 *)(v3 + 80);
    v20 = (v19 + 32) & ~v19;
    v21 = swift_allocObject(v17, v20 + 2 * v18, v19 | 7);
    *(_OWORD *)(v21 + 16) = xmmword_10097DA20;
    v22 = v21 + v20;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v23(v22, a1 + v15[19], v2);
    v23(v22 + v18, a1 + v15[20], v2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v11, v2);
    v24 = sub_1000BA294(&qword_100BCB0F0);
    v25 = *(_QWORD *)(v3 + 72);
    v26 = *(unsigned __int8 *)(v3 + 80);
    v27 = (v26 + 32) & ~v26;
    v21 = swift_allocObject(v24, v27 + 2 * v25, v26 | 7);
    *(_OWORD *)(v21 + 16) = xmmword_10097DA20;
    v28 = v21 + v27;
    v29 = *(void (**)(uint64_t, char *, uint64_t))(v3 + 16);
    v29(v28, v5, v2);
    v29(v28 + v25, (char *)(a1 + v15[20]), v2);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_100021A14((uint64_t)v14, (uint64_t *)&unk_100BD35A0);
  }
  return v21;
}

uint64_t sub_1005CAD1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[24];
  _OWORD v50[2];
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;

  v2 = v1;
  v48 = a1;
  v3 = type metadata accessor for ChartView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v3);
  v7 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AxisMarkValues(0, v6);
  __chkstk_darwin(v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AxisMarkPosition(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AxisMarkPreset(0, v12);
  __chkstk_darwin(v15);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000BA294(&qword_100BF42E8);
  v46 = *(_QWORD *)(v18 - 8);
  v47 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ChartViewModel(0);
  v22 = &qword_100BC2000;
  if (*(_QWORD *)(v2 + *(int *)(v21 + 32)))
  {
    if (qword_100BC20C0 != -1)
      swift_once(&qword_100BC20C0, sub_1004049E8);
    swift_beginAccess(&qword_100CAE968, v49, 0, 0);
    v23 = *(double *)&xmmword_100CAE988 + *((double *)&xmmword_100CAE988 + 1) + *((double *)&xmmword_100CAE988 + 1);
    v22 = &qword_100BC2000;
  }
  else
  {
    v23 = 0.0;
  }
  if (v22[24] != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v50, 0, 0, 1.0, 10.0, 0.0);
  v24 = sub_1000BA294(&qword_100BCB968);
  v25 = swift_allocObject(v24, 48, 7);
  __asm { FMOV            V1.2D, #2.0 }
  *(_OWORD *)(v25 + 16) = xmmword_10097DA20;
  *(_OWORD *)(v25 + 32) = _Q1;
  v31 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v52, 0, 0, 1.0, 10.0, 0.0);
  v32 = static AxisMarkPreset.extended.getter(v31);
  static AxisMarkPosition.bottom.getter(v32);
  sub_1005CB4A4();
  sub_10000AB54(v2, (uint64_t)v7, type metadata accessor for ChartView);
  v33 = *(unsigned __int8 *)(v4 + 80);
  v34 = (v33 + 104) & ~v33;
  v35 = swift_allocObject(&unk_100B82848, v34 + v5, v33 | 7);
  v36 = v50[1];
  *(_OWORD *)(v35 + 16) = v50[0];
  *(_OWORD *)(v35 + 32) = v36;
  v37 = v52[1];
  *(_OWORD *)(v35 + 56) = v52[0];
  *(_QWORD *)(v35 + 48) = v51;
  *(_OWORD *)(v35 + 72) = v37;
  *(_QWORD *)(v35 + 88) = v53;
  *(double *)(v35 + 96) = v23;
  sub_1005D01D0((uint64_t)v7, v35 + v34);
  v38 = sub_1000BA294(&qword_100BF43C0);
  v39 = sub_1005D14B4();
  AxisMarks.init(preset:position:values:content:)(v17, v14, v10, sub_1005D1470, v35, v38, v39);
  v40 = sub_1000BA294(&qword_100BF42F0);
  sub_10027248C((uint64_t)&unk_100BF42F8);
  v42 = v41;
  sub_1005D0168((uint64_t)&unk_100BF4300);
  v43 = v47;
  AxisContent.compositingLayer<A>(style:)(sub_1005CC6CC, 0, v47, v40, v42, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v20, v43);
}

uint64_t sub_1005CB108@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];

  v2 = v1;
  v34[1] = a1;
  v3 = type metadata accessor for ChartView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v3);
  v7 = type metadata accessor for AxisMarkValues(0, v6);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for AxisMarkPosition(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AxisMarkPreset(0, v11);
  __chkstk_darwin(v14);
  v16 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BF4320);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = static AxisMarkPreset.aligned.getter(v19);
  static AxisMarkPosition.trailing.getter(v22);
  v23 = type metadata accessor for ChartViewModel(0);
  sub_1005CC6E0(*(_QWORD *)(v2 + *(int *)(v23 + 52)), *(_BYTE *)(v2 + *(int *)(v23 + 52) + 8), v9);
  sub_10000AB54(v2, (uint64_t)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ChartView);
  v24 = *(unsigned __int8 *)(v4 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = swift_allocObject(&unk_100B82820, v25 + v5, v24 | 7);
  sub_1005D01D0((uint64_t)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v26 + v25);
  v27 = sub_1000BA294(&qword_100BF4378);
  sub_1005D17C0((uint64_t)&unk_100BF4380);
  AxisMarks.init(preset:position:values:content:)(v16, v13, v9, sub_1005D1008, v26, v27, v28);
  v29 = sub_1000BA294(&qword_100BF4328);
  sub_10027248C((uint64_t)&unk_100BF4330);
  v31 = v30;
  sub_1005D0168((uint64_t)&unk_100BF4338);
  AxisContent.compositingLayer<A>(style:)(sub_1005CD26C, 0, v17, v29, v31, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
}

double sub_1005CB3B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  double result;

  v6 = type metadata accessor for ChartViewModel(0);
  sub_10000AB54(a2 + *(int *)(v6 + 56), a3, type metadata accessor for ChartViewModel.Background);
  v7 = (int *)type metadata accessor for ChartBackgroundView(0);
  v8 = a3 + v7[5];
  v9 = type metadata accessor for ChartProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, a1, v9);
  v10 = a2 + *(int *)(v6 + 76);
  v11 = a3 + v7[6];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v11, v10, v12);
  v13 = (_QWORD *)(a3 + v7[7]);
  *v13 = swift_getKeyPath(&unk_1009B26D8);
  v14 = sub_1000BA294(&qword_100BC2908);
  *(_QWORD *)&result = swift_storeEnumTagMultiPayload(v13, v14, 0).n128_u64[0];
  return result;
}

void sub_1005CB4A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = sub_1000BA294(&qword_100BDCCB0);
  __chkstk_darwin(v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar.Component(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ChartDateStep(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000AB54(v0, (uint64_t)v10, v11);
  v12 = *v10;
  v13 = (uint64_t)v10 + *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Calendar.Component.hour(_:), v4);
  v14 = type metadata accessor for Calendar(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v3, 1, 1, v14);
  static AxisMarkValues.stride(by:count:roundLowerBound:roundUpperBound:calendar:)(v7, v12, 2, 2, v3);
  sub_100021A14((uint64_t)v3, &qword_100BDCCB0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100021A14(v13, (uint64_t *)&unk_100BD35A0);
}

void sub_1005CB634(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  char v74;
  uint64_t OpaqueTypeConformance2;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(char *, uint64_t, uint64_t, __n128);
  __n128 v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  char v128;
  __n128 v129;
  __n128 v130;
  uint64_t v131;
  uint64_t v132;
  __n128 v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  void (*v142)(char *, char *, uint64_t);
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t *v149;
  _QWORD *v150;
  void *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  void *v204;
  void *v205;
  _QWORD v206[5];

  v185 = a4;
  v195 = a5;
  v8 = *(double *)a2;
  v184 = *(_DWORD *)(a2 + 8);
  v183 = *(_DWORD *)(a2 + 12);
  v9 = *(double *)(a2 + 16);
  v10 = *(double *)(a2 + 32);
  v182 = *(_QWORD *)(a2 + 24);
  v11 = *(double *)a3;
  v181 = *(_DWORD *)(a3 + 8);
  v180 = *(_DWORD *)(a3 + 12);
  v12 = *(double *)(a3 + 16);
  v13 = *(double *)(a3 + 32);
  v179 = *(_QWORD *)(a3 + 24);
  v14 = type metadata accessor for AxisValueLabelOrientation(0);
  v15 = __chkstk_darwin(v14);
  v156 = (char *)&v152 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AxisValueLabelCollisionResolution(0, v15);
  __chkstk_darwin(v17);
  v155 = (char *)&v152 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_1000BA294(&qword_100BF43A8);
  v161 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v159 = (char *)&v152 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_1000BA294(&qword_100BF43B8);
  v160 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v158 = (char *)&v152 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v157 = (char *)&v152 - v22;
  v154 = type metadata accessor for TimeStyle(0);
  v153 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v152 = (char *)&v152 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000BA294(&qword_100BCB0A0);
  __chkstk_darwin(v24);
  v163 = (char *)&v152 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = type metadata accessor for DetailChartDataElement(0);
  v198 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v27 = (char *)&v152 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v186 = (char *)&v152 - v29;
  v30 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v30);
  v191 = (char *)&v152 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Date(0);
  v200 = *(_QWORD *)(v32 - 8);
  v201 = v32;
  __chkstk_darwin(v32);
  v34 = (char *)&v152 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v199 = (char *)&v152 - v36;
  v37 = sub_1000BA294(&qword_100BF43F8);
  __chkstk_darwin(v37);
  v193 = (uint64_t)&v152 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v39);
  v192 = (char *)&v152 - v41;
  v42 = type metadata accessor for AxisTick.Length(0, v40);
  __chkstk_darwin(v42);
  v170 = (char *)&v152 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = type metadata accessor for AxisTick(0);
  v173 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v172 = (char *)&v152 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_1000BA294(&qword_100BDCD08);
  v176 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v177 = (char *)&v152 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v175 = (char *)&v152 - v47;
  v166 = type metadata accessor for AxisGridLine(0);
  v165 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v49 = (char *)&v152 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_1000BA294(&qword_100BDCC88);
  v167 = *(_QWORD *)(v168 - 8);
  __chkstk_darwin(v168);
  v51 = (char *)&v152 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_1000BA294(&qword_100BF4400);
  v189 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v169 = (char *)&v152 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v164 = (char *)&v152 - v54;
  __chkstk_darwin(v55);
  v188 = (char *)&v152 - v56;
  v57 = sub_1000BA294(&qword_100BF43D8);
  __chkstk_darwin(v57);
  v197 = (uint64_t)&v152 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __chkstk_darwin(v59);
  v62 = (char *)&v152 - v61;
  v63 = AxisValue.isFirst.getter(v60);
  v187 = a1;
  v196 = v62;
  if ((v63 & 1) != 0)
  {
    v64 = sub_1000BA294(&qword_100BF43E8);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v62, 1, 1, v64);
  }
  else
  {
    v65 = AxisValue.isLast.getter(v63);
    if ((v65 & 1) != 0)
    {
      v66 = v184;
    }
    else
    {
      v8 = v11;
      v66 = v181;
    }
    if ((v65 & 1) != 0)
      v67 = v183;
    else
      v67 = v180;
    if ((v65 & 1) != 0)
    {
      v68 = v182;
    }
    else
    {
      v9 = v12;
      v68 = v179;
    }
    if ((v65 & 1) == 0)
      v10 = v13;
    swift_bridgeObjectRetain();
    *(double *)v206 = v8;
    v206[1] = v66 | (v67 << 32);
    *(double *)&v206[2] = v9;
    v206[3] = v68;
    *(double *)&v206[4] = v10;
    swift_bridgeObjectRetain();
    AxisGridLine.init(centered:stroke:)(2, v206);
    if (qword_100BC20C0 != -1)
      swift_once(&qword_100BC20C0, sub_1004049E8);
    swift_beginAccess(&qword_100CAE968, &v202, 33, 0);
    sub_10040441C();
    v70 = v69;
    swift_endAccess(&v202);
    v202 = v70;
    v71 = v166;
    AxisMark.foregroundStyle<A>(_:)(&v202, v166, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
    v72 = swift_release();
    v73 = (*(uint64_t (**)(char *, uint64_t, __n128))(v165 + 8))(v49, v71, v72);
    v74 = AxisValue.isLast.getter(v73);
    v202 = v71;
    v203 = &type metadata for Color;
    if ((v74 & 1) != 0)
      a6 = 0.0;
    v204 = &protocol witness table for AxisGridLine;
    v205 = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v202, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    v76 = v164;
    v77 = v168;
    AxisMark.offset(x:y:)(v168, OpaqueTypeConformance2, 0.0, a6);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v51, v77);
    v78 = v189;
    v79 = v171;
    v80 = (*(uint64_t (**)(char *, char *, uint64_t))(v189 + 32))(v188, v76, v171);
    v81 = v170;
    static AxisTick.Length.automatic.getter(v80);
    v82 = v172;
    AxisTick.init(centered:length:stroke:)(2, v81, v206);
    swift_beginAccess(&qword_100CAE968, &v202, 33, 0);
    sub_10040441C();
    v84 = v83;
    swift_endAccess(&v202);
    v202 = v84;
    v85 = v177;
    v86 = v174;
    AxisMark.foregroundStyle<A>(_:)(&v202, v174, &type metadata for Color, &protocol witness table for AxisTick, &protocol witness table for Color);
    v87 = swift_release();
    (*(void (**)(char *, uint64_t, __n128))(v173 + 8))(v82, v86, v87);
    v88 = v176;
    v89 = v175;
    v90 = v178;
    (*(void (**)(char *, char *, uint64_t))(v176 + 32))(v175, v85, v178);
    v91 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
    v92 = v169;
    v93 = v188;
    v91(v169, v188, v79);
    v202 = (uint64_t)v92;
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v85, v89, v90);
    v203 = v85;
    v94 = v197;
    sub_10073C424();
    v95 = *(void (**)(char *, uint64_t))(v88 + 8);
    v95(v89, v90);
    v96 = *(void (**)(char *, uint64_t))(v189 + 8);
    v96(v93, v79);
    v95(v85, v90);
    v96(v92, v79);
    v97 = sub_1000BA294(&qword_100BF43E8);
    _s7Weather24LocationCompositionStateOwst_0(v94, 0, 1, v97);
    v62 = v196;
    sub_1000F111C(v94, (uint64_t)v196, &qword_100BF43D8);
  }
  v98 = (uint64_t)v191;
  v99 = v201;
  AxisValue.as<A>(_:)(v201, v201, &protocol witness table for Date);
  v100 = _s7Weather24LocationCompositionStateOwet_0(v98, 1, v99);
  v101 = v190;
  if (v100 == 1)
  {
    v102 = (uint64_t *)&unk_100BD35A0;
    v103 = v98;
LABEL_31:
    sub_100021A14(v103, v102);
    v116 = (uint64_t)v192;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v192, 1, 1, v194);
    goto LABEL_38;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v200 + 32))(v199, v98, v99);
  v104 = type metadata accessor for ChartViewModel(0);
  v105 = *(_QWORD *)(v185 + *(int *)(v104 + 24));
  v106 = *(_QWORD *)(v105 + 16);
  if (v106)
  {
    v107 = v105 + ((*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80));
    v108 = *(_QWORD *)(v198 + 72);
    v109 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v198 + 16);
    v110 = swift_bridgeObjectRetain();
    while (1)
    {
      v111 = v109(v27, v107, v101, v110);
      DetailChartDataElement.date.getter(v111);
      v112 = static Date.== infix(_:_:)(v34, v199);
      (*(void (**)(char *, uint64_t))(v200 + 8))(v34, v201);
      if ((v112 & 1) != 0)
        break;
      v113 = v198;
      (*(void (**)(char *, uint64_t))(v198 + 8))(v27, v101);
      v107 += v108;
      if (!--v106)
      {
        v114 = 1;
        v62 = v196;
        goto LABEL_27;
      }
    }
    v113 = v198;
    v115 = (uint64_t)v163;
    (*(void (**)(char *, char *, uint64_t))(v198 + 32))(v163, v27, v101);
    v114 = 0;
    v62 = v196;
  }
  else
  {
    swift_bridgeObjectRetain();
    v114 = 1;
    v113 = v198;
LABEL_27:
    v115 = (uint64_t)v163;
  }
  _s7Weather24LocationCompositionStateOwst_0(v115, v114, 1, v101);
  swift_bridgeObjectRelease();
  if (_s7Weather24LocationCompositionStateOwet_0(v115, 1, v101) == 1)
  {
    (*(void (**)(char *, uint64_t))(v200 + 8))(v199, v201);
    v102 = &qword_100BCB0A0;
    v103 = v115;
    goto LABEL_31;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v113 + 32))(v186, v115, v101);
  type metadata accessor for Style(0);
  v117 = v152;
  v118 = static Style.componentTime.getter();
  v119 = DetailChartDataElement.dateLabel.getter(v118);
  v121 = v120;
  v122 = *(_QWORD *)(v185 + *(int *)(v104 + 68));
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, &v202, 33, 0);
  v123 = sub_10040459C();
  swift_endAccess(&v202);
  v124 = TimeStyle.formatTime(_:periodSymbols:font:)(v119, v121, v122, v123);
  v126 = v125;
  v128 = v127;
  swift_bridgeObjectRelease();
  v129 = swift_release();
  v130.n128_f64[0] = (*(double (**)(char *, uint64_t, __n128))(v153 + 8))(v117, v154, v129);
  v131 = AxisValue.isFirst.getter(v130);
  if ((v131 & 1) != 0)
    v132 = 0x4010000000000000;
  else
    v132 = 0x4008000000000000;
  v133 = __chkstk_darwin(v131);
  v134 = v155;
  v135 = static AxisValueLabelCollisionResolution.automatic.getter(v133);
  v136 = v156;
  static AxisValueLabelOrientation.automatic.getter(v135);
  v150 = &type metadata for Text;
  v151 = &protocol witness table for Text;
  v149 = &v147;
  LOBYTE(v148) = 0;
  v137 = v159;
  ((void (*)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, char *, char, char *, uint64_t, _BYTE, uint64_t, int, uint64_t (*)()))AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:))(2, 0, 0, 1, 0, 0, 1, v134, 2, v136, v132, 0, 0x4024000000000000, v148, sub_1005D1700);
  sub_10027248C((uint64_t)&unk_100BF43B0);
  v138 = v158;
  v139 = v162;
  AxisMark.offset(x:y:)(v162, v140, 0.0, -5.0);
  sub_1000D31B4(v124, v126, v128 & 1);
  v141 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v161 + 8))(v137, v139, v141);
  (*(void (**)(char *, uint64_t))(v198 + 8))(v186, v101);
  v142 = *(void (**)(char *, char *, uint64_t))(v160 + 32);
  v143 = v157;
  v144 = v194;
  v142(v157, v138, v194);
  v116 = (uint64_t)v192;
  v142(v192, v143, v144);
  _s7Weather24LocationCompositionStateOwst_0(v116, 0, 1, v144);
  (*(void (**)(char *, uint64_t))(v200 + 8))(v199, v201);
  v62 = v196;
LABEL_38:
  v145 = v197;
  sub_100037794((uint64_t)v62, v197, &qword_100BF43D8);
  v202 = v145;
  v146 = v193;
  sub_100037794(v116, v193, &qword_100BF43F8);
  v203 = (void *)v146;
  sub_10073C504();
  sub_100021A14(v116, &qword_100BF43F8);
  sub_100021A14((uint64_t)v62, &qword_100BF43D8);
  sub_100021A14(v146, &qword_100BF43F8);
  sub_100021A14(v145, &qword_100BF43D8);
}

void sub_1005CC5F4(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, v19, 33, 0);
  sub_100404670();
  v11 = v10;
  swift_endAccess(v19);
  v12 = Text.foregroundColor(_:)(v11, a1, a2, a3 & 1, a4);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  swift_release();
  *(_QWORD *)a5 = v12;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = v16 & 1;
  *(_QWORD *)(a5 + 24) = v18;
}

uint64_t sub_1005CC6CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005CD280(a1, &qword_100BF42F0, &qword_100BF4310, a2);
}

_QWORD *sub_1005CC6E0@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v5;

  if ((a2 & 1) != 0)
    return static AxisMarkValues.automatic(desiredCount:roundLowerBound:roundUpperBound:)(a3, a1, 0, 2, 2);
  v5 = a1;
  v3 = sub_10010D1D0();
  return (_QWORD *)static AxisMarkValues.stride<A>(by:roundLowerBound:roundUpperBound:)(&v5, 2, 2, &type metadata for Double, v3);
}

void sub_1005CC750(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  __n128 v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  uint64_t v81;
  double v82;
  __n128 v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  double v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __n128 v99;
  void (*v100)(char *, uint64_t, __n128);
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t *v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  _QWORD v133[2];
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  _OWORD v137[2];
  uint64_t v138;

  v129 = a2;
  v130 = a3;
  v4 = sub_1000BA294(&qword_100BF4378);
  __chkstk_darwin(v4);
  v6 = (char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AxisValueLabelOrientation(0);
  v8 = __chkstk_darwin(v7);
  v126 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AxisValueLabelCollisionResolution(0, v8);
  __chkstk_darwin(v10);
  v125 = (char *)&v107 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BF43A8);
  v128 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v127 = (char *)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BF43B8);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v107 - v19;
  v21 = sub_1000BA294(&qword_100BC39D0);
  __chkstk_darwin(v21);
  v122 = (uint64_t)&v107 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for AxisGridLine(0);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v115 = (char *)&v107 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_1000BA294(&qword_100BDCC88);
  v114 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v113 = (char *)&v107 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for ChartView(0);
  v25 = __chkstk_darwin(v121);
  *(_QWORD *)&v119 = (char *)&v107 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for AxisValue(0, v25);
  v27 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v29 = (char *)&v107 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000BA294(&qword_100BF43A0);
  __chkstk_darwin(v30);
  v124 = (uint64_t)&v107 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  *(_QWORD *)&v123 = (char *)&v107 - v33;
  AxisValue.as<A>(_:)(&type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  if ((BYTE8(v137[0]) & 1) != 0)
    goto LABEL_5;
  v107 = v12;
  v108 = v20;
  v109 = v15;
  v110 = v17;
  v111 = v14;
  v112 = v6;
  v34 = *(double *)v137;
  v35 = (int *)type metadata accessor for ChartViewModel(0);
  v36 = v129;
  v37 = v129 + v35[11];
  v39 = *(_QWORD *)v37;
  v38 = *(_QWORD *)(v37 + 8);
  v40 = *(_QWORD *)(v37 + 16);
  v41 = *(unsigned __int8 *)(v37 + 24);
  v43 = AxisValue.isFirst.getter(v42);
  v44 = v43;
  v45 = AxisValue.isLast.getter(v43);
  v46 = sub_1005F7604(v44 & 1, v45 & 1, v39, v38, v40, v41, v34);
  if (!v47)
  {
LABEL_5:
    v55 = sub_1000BA294(&qword_100BF4390);
    _s7Weather24LocationCompositionStateOwst_0(v130, 1, 1, v55);
    return;
  }
  v48 = v46;
  v49 = v47;
  v50 = *(_QWORD *)(v36 + v35[8]);
  v51 = v118;
  v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, a1, v118);
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v51);
    v53 = v119;
    sub_10000AB54(v36, v119, type metadata accessor for ChartView);
    v54 = v123;
LABEL_9:
    sub_1000215BC(v53, type metadata accessor for ChartView);
    goto LABEL_10;
  }
  v56 = AxisValue.isLast.getter(v52);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v51);
  v53 = v119;
  sub_10000AB54(v36, v119, type metadata accessor for ChartView);
  v54 = v123;
  if ((v56 & 1) == 0)
    goto LABEL_9;
  v57 = *(double *)(v53 + v35[10] + 8);
  sub_1000215BC(v53, type metadata accessor for ChartView);
  if (v57 > v34)
  {
LABEL_10:
    v60 = v49;
    if (qword_100BC20C0 != -1)
      swift_once(&qword_100BC20C0, sub_1004049E8);
    swift_beginAccess(&qword_100CAE968, v137, 33, 0);
    sub_100404780();
    v123 = v134;
    v119 = v135;
    v61 = v136;
    swift_endAccess(v137);
    v137[0] = v123;
    v137[1] = v119;
    v138 = v61;
    v62 = v115;
    AxisGridLine.init(centered:stroke:)(2, v137);
    swift_beginAccess(&qword_100CAE968, v133, 33, 0);
    sub_10040441C();
    v64 = v63;
    swift_endAccess(v133);
    v133[0] = v64;
    v65 = v113;
    v66 = v117;
    AxisMark.foregroundStyle<A>(_:)(v133, v117, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
    v67 = swift_release();
    (*(void (**)(char *, uint64_t, __n128))(v116 + 8))(v62, v66, v67);
    v59 = v120;
    (*(void (**)(uint64_t, char *, uint64_t))(v114 + 32))(v54, v65, v120);
    v58 = 0;
    v49 = v60;
    goto LABEL_13;
  }
  v58 = 1;
  v59 = v120;
LABEL_13:
  _s7Weather24LocationCompositionStateOwst_0(v54, v58, 1, v59);
  v133[0] = v48;
  v133[1] = v49;
  v68 = sub_100114EF8();
  v69 = Text.init<A>(_:)(v133, &type metadata for String, v68);
  v71 = v70;
  v73 = v72;
  v75 = v74;
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  v76 = type metadata accessor for Text.WritingMode(0);
  v77 = v122;
  _s7Weather24LocationCompositionStateOwst_0(v122, 1, 1, v76);
  v78 = v73 & 1;
  v79 = Text.Measurements.size(of:in:writingMode:)(v69, v71, v78, v75, v77, INFINITY, INFINITY);
  sub_100021A14(v77, &qword_100BC39D0);
  v80 = 40.0 - v79;
  v81 = swift_beginAccess(&qword_100CAE968, v133, 0, 0);
  v82 = v80 + *(double *)&xmmword_100CAEB40 + *(double *)&xmmword_100CAEB40;
  v83 = __chkstk_darwin(v81);
  v129 = v75;
  v84 = v125;
  v85 = static AxisValueLabelCollisionResolution.automatic.getter(v83);
  *(_QWORD *)&v123 = v71;
  v86 = v126;
  static AxisValueLabelOrientation.automatic.getter(v85);
  v105 = &type metadata for Text;
  v106 = &protocol witness table for Text;
  v104 = &v102;
  LOBYTE(v103) = 1;
  v87 = v127;
  ((void (*)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, char *, char, char *, _QWORD, _BYTE, _QWORD, int, uint64_t (*)()))AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:))(2, 0, 0, 1, 0, 0, 1, v84, 2, v86, *(_QWORD *)&v82, 0, 0, v103, sub_1005D11B4);
  v88 = -v80 - *(double *)&xmmword_100CAEB40;
  sub_10027248C((uint64_t)&unk_100BF43B0);
  v89 = v110;
  v90 = v107;
  AxisMark.offset(x:y:)(v107, v91, v88, 0.0);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v87, v90);
  v92 = v109;
  v93 = v108;
  v94 = v111;
  (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v108, v89, v111);
  v95 = v54;
  v96 = v54;
  v97 = v124;
  sub_100037794(v95, v124, &qword_100BF43A0);
  v131 = v97;
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v89, v93, v94);
  v132 = v89;
  v98 = (uint64_t)v112;
  sub_10073C598();
  sub_1000D31B4(v69, v123, v78);
  v99 = swift_bridgeObjectRelease();
  v100 = *(void (**)(char *, uint64_t, __n128))(v92 + 8);
  v100(v93, v94, v99);
  sub_100021A14(v96, &qword_100BF43A0);
  ((void (*)(char *, uint64_t))v100)(v89, v94);
  sub_100021A14(v97, &qword_100BF43A0);
  v101 = sub_1000BA294(&qword_100BF4390);
  _s7Weather24LocationCompositionStateOwst_0(v98, 0, 1, v101);
  sub_1000F111C(v98, v130, &qword_100BF4378);
}

void sub_1005CD114(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];

  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, v28, 33, 0);
  sub_100404670();
  v11 = v10;
  swift_endAccess(v28);
  v12 = Text.foregroundColor(_:)(v11, a1, a2, a3 & 1, a4);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  swift_release();
  v19 = v16 & 1;
  swift_beginAccess(&qword_100CAE968, v28, 33, 0);
  v20 = sub_10040459C();
  swift_endAccess(v28);
  v21 = Text.font(_:)(v20, v12, v14, v19, v18);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  swift_release();
  sub_1000D31B4(v12, v14, v19);
  swift_bridgeObjectRelease();
  *(_QWORD *)a5 = v21;
  *(_QWORD *)(a5 + 8) = v23;
  *(_BYTE *)(a5 + 16) = v25 & 1;
  *(_QWORD *)(a5 + 24) = v27;
}

uint64_t sub_1005CD26C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005CD280(a1, &qword_100BF4328, &qword_100BF4348, a2);
}

uint64_t sub_1005CD280@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = type metadata accessor for BlendMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100098728();
  v12 = v11 - v10;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v11 - v10, enum case for BlendMode.plusLighter(_:), v8);
  v13 = sub_1000BA294(a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a4 + *(int *)(v13 + 36), v12, v8);
  v14 = sub_1000BA294(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a4, a1, v14);
  return sub_1000BDD1C(v12, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
}

uint64_t sub_1005CD35C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  char *v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[4];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  char v71[32];

  v63 = a2;
  v3 = type metadata accessor for AnnotationOverflowResolution(0);
  v64 = *(_QWORD *)(v3 - 8);
  v65 = v3;
  v4 = __chkstk_darwin(v3);
  v62 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AnnotationPosition(0, v4);
  v60 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  __chkstk_darwin(v6);
  v59 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for Date(0);
  v51 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BD78D8);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PointMark(0);
  v52 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BF42B8);
  v53 = *(_QWORD *)(v16 - 8);
  v54 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000BA294(&qword_100BF42B0);
  v56 = *(_QWORD *)(v19 - 8);
  v57 = v19;
  __chkstk_darwin(v19);
  v55 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = LocalizedStringKey.init(stringLiteral:)(1702125892, 0xE400000000000000);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v58 = a1;
  DetailChartDataElement.date.getter(v21);
  v28 = v25 & 1;
  v29 = v12;
  v30 = v50;
  static PlottableValue.value(_:_:)(v21, v23, v28, v27, v9, v50, &protocol witness table for Date);
  swift_bridgeObjectRelease();
  v31 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v51 + 8))(v9, v30, v31);
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, v71, 0, 0);
  PointMark.init<A>(x:y:)(v29, *((_QWORD *)&xmmword_100CAE988 + 1), 0, v30, &protocol witness table for Date);
  ChartContent.symbolSize(_:)(v13, &protocol witness table for PointMark, 0.0);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v15, v13);
  v70 = static Color.clear.getter(v32);
  v66 = v13;
  v67 = &protocol witness table for PointMark;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v66, &opaque type descriptor for <<opaque return type of ChartContent.symbolSize(_:)>>, 1);
  v34 = v54;
  v35 = v55;
  ChartContent.foregroundStyle<A>(_:)(&v70, v54, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  v36 = swift_release();
  v37 = (*(uint64_t (**)(char *, uint64_t, __n128))(v53 + 8))(v18, v34, v36);
  v38 = v59;
  v39 = static AnnotationPosition.bottom.getter(v37);
  v40 = v62;
  v41 = static AnnotationOverflowResolution.automatic.getter(v39);
  __chkstk_darwin(v41);
  v43 = static Alignment.center.getter(v42);
  v45 = v44;
  v66 = v34;
  v67 = &type metadata for Color;
  v68 = OpaqueTypeConformance2;
  v69 = &protocol witness table for Color;
  v48[2] = swift_getOpaqueTypeConformance2(&v66, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v48[3] = &protocol witness table for Text;
  v48[1] = &type metadata for Text;
  v46 = v57;
  v48[0] = v57;
  ((void (*)(char *, uint64_t, uint64_t, _QWORD, uint64_t, char *, void (*)(uint64_t@<X8>), _QWORD *))ChartContent.annotation<A>(position:alignment:spacing:overflowResolution:content:))(v38, v43, v45, 0, 1, v40, sub_1005D1E1C, v48);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v40, v65);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v38, v61);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v35, v46);
}

void sub_1005CD7F0(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  DetailChartDataElement.valueLabel.getter(v4);
  v7 = static ChartValueLabel.with(label:)(v6);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v15 = static Font.footnote.getter(v14);
  v16 = Text.font(_:)(v15, v7, v9, v13, v11);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  swift_release();
  sub_1000D31B4(v7, v9, v13);
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = v20 & 1;
  *(_QWORD *)(a1 + 24) = v22;
}

uint64_t sub_1005CD8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[16];
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;

  v39 = a2;
  v44 = a3;
  v4 = type metadata accessor for DetailChartGradientModel(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ChartView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BF4480);
  v13 = *(_QWORD *)(v12 - 8);
  v42 = v12;
  v43 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(int *)(type metadata accessor for ChartViewModel(0) + 24);
  v41 = a1;
  v51 = *(_QWORD *)(a1 + v16);
  KeyPath = swift_getKeyPath(&unk_1009B2710);
  sub_10000AB54(a1, (uint64_t)v11, type metadata accessor for ChartView);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v39, v4);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = *(unsigned __int8 *)(v5 + 80);
  v20 = (v10 + v19 + v18) & ~v19;
  v21 = swift_allocObject(&unk_100B82870, v20 + v6, v17 | v19 | 7);
  sub_1005D01D0((uint64_t)v11, v21 + v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v21 + v20, v7, v4);
  swift_bridgeObjectRetain();
  v22 = sub_1000BA294(&qword_100BDCD30);
  v39 = sub_1000BA294(&qword_100BF44A8);
  sub_10027248C((uint64_t)&unk_100BDCD40);
  v24 = v23;
  sub_10007A100((uint64_t)&unk_100BF4470);
  v26 = v25;
  v27 = sub_100075EB0(&qword_100BF4490);
  v28 = sub_100075EB0(&qword_100BF4498);
  v29 = sub_100075EB0(&qword_100BF44A0);
  v47 = type metadata accessor for BarMark(255);
  v48 = &protocol witness table for BarMark;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of ChartContent.cornerRadius(_:style:)>>, 1);
  v47 = v29;
  v48 = &type metadata for AnyShapeStyle;
  v49 = OpaqueTypeConformance2;
  v50 = &protocol witness table for AnyShapeStyle;
  v31 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v32 = sub_100114EF8();
  v47 = v28;
  v48 = &type metadata for String;
  v49 = v31;
  v50 = (void *)v32;
  v33 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of ChartContent.accessibilityLabel<A>(_:)>>, 1);
  v47 = v27;
  v48 = &type metadata for String;
  v49 = v33;
  v50 = (void *)v32;
  v34 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of ChartContent.accessibilityValue<A>(_:)>>, 1);
  ForEach<>.init(_:id:content:)(&v51, KeyPath, sub_1005D1D9C, v21, v22, v39, v24, v26, v34);
  v46 = v41;
  v35 = type metadata accessor for RectangleMark(0);
  v36 = sub_1005D1918();
  v37 = v42;
  ChartContent.mask<A>(content:)(sub_1005D1E14, v45, v42, v35, v36, &protocol witness table for RectangleMark);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v15, v37);
}

uint64_t sub_1005CDC5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __n128 v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  double v49;
  uint64_t OpaqueTypeConformance2;
  char *v51;
  double v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  double v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  double v90;
  _QWORD *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;

  v86 = a3;
  v87 = a2;
  v88 = a4;
  v5 = type metadata accessor for RoundedCornerStyle(0);
  v83 = *(_QWORD *)(v5 - 8);
  v84 = v5;
  __chkstk_darwin(v5);
  v81 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BD78B8);
  __chkstk_darwin(v7);
  v75 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BDCCB0);
  __chkstk_darwin(v9);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for Calendar.Component(0);
  v12 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for Date(0);
  v68 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BD78D8);
  __chkstk_darwin(v17);
  v89 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for BarMark(0);
  v74 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v70 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_1000BA294(&qword_100BF44A0);
  v78 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v71 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000BA294(&qword_100BF4498);
  v22 = *(_QWORD *)(v21 - 8);
  v79 = v21;
  v80 = v22;
  __chkstk_darwin(v21);
  v72 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_1000BA294(&qword_100BF4490);
  v85 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v77 = (char *)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = LocalizedStringKey.init(stringLiteral:)(1702125892, 0xE400000000000000);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  DetailChartDataElement.date.getter(v25);
  v32 = v67;
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for Calendar.Component.hour(_:), v67);
  v33 = type metadata accessor for Calendar(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 1, 1, v33);
  static PlottableValue.value<>(_:_:unit:calendar:)(v25, v27, v29 & 1, v31, v16, v14, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100021A14((uint64_t)v11, &qword_100BDCCB0);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v32);
  v34 = v69;
  (*(void (**)(char *, uint64_t))(v68 + 8))(v16, v69);
  v35 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x80000001009F44F0);
  v37 = v36;
  LOBYTE(v25) = v38;
  v40 = v39;
  v41 = a1;
  v90 = DetailChartDataElement.value.getter(v35);
  v42 = v75;
  static PlottableValue.value(_:_:)(v35, v37, v25 & 1, v40, &v90, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease();
  v43 = swift_bridgeObjectRelease();
  v44 = v70;
  BarMark.init<A, B>(x:y:width:height:stacking:)(v89, v42, 0x3FE3333333333333, 1, 0, 3, 0, v34, v43, &type metadata for Double, &protocol witness table for Date, &protocol witness table for Double);
  v46 = v83;
  v45 = v84;
  v47 = v81;
  (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v81, enum case for RoundedCornerStyle.continuous(_:), v84);
  v48 = v71;
  v49 = *(double *)&v73;
  ChartContent.cornerRadius(_:style:)(v47, v73, &protocol witness table for BarMark, 2.0);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v45);
  (*(void (**)(char *, double))(v74 + 8))(v44, COERCE_DOUBLE(*(_QWORD *)&v49));
  v94 = sub_1005CE2DC(v41, v86);
  v90 = v49;
  v91 = &protocol witness table for BarMark;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v90, &opaque type descriptor for <<opaque return type of ChartContent.cornerRadius(_:style:)>>, 1);
  v51 = v72;
  v52 = *(double *)&v76;
  ChartContent.foregroundStyle<A>(_:)(&v94, v76, &type metadata for AnyShapeStyle, OpaqueTypeConformance2, &protocol witness table for AnyShapeStyle);
  v53 = swift_release();
  v54 = (*(uint64_t (**)(char *, double, __n128))(v78 + 8))(v48, COERCE_DOUBLE(*(_QWORD *)&v52), v53);
  v94 = DetailChartDataElement.accessibilityDateString.getter(v54);
  v95 = v55;
  v90 = v52;
  v91 = &type metadata for AnyShapeStyle;
  v92 = OpaqueTypeConformance2;
  v93 = &protocol witness table for AnyShapeStyle;
  v56 = swift_getOpaqueTypeConformance2(&v90, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v57 = sub_100114EF8();
  v58 = v77;
  v59 = *(double *)&v79;
  ChartContent.accessibilityLabel<A>(_:)(&v94, v79, &type metadata for String, v56, v57);
  v60 = swift_bridgeObjectRelease();
  v61 = (*(uint64_t (**)(char *, double, __n128))(v80 + 8))(v51, COERCE_DOUBLE(*(_QWORD *)&v59), v60);
  v94 = DetailChartDataElement.accessibilityValueDescription.getter(v61);
  v95 = v62;
  v90 = v59;
  v91 = &type metadata for String;
  v92 = v56;
  v93 = (void *)v57;
  v63 = swift_getOpaqueTypeConformance2(&v90, &opaque type descriptor for <<opaque return type of ChartContent.accessibilityLabel<A>(_:)>>, 1);
  v64 = v82;
  ChartContent.accessibilityValue<A>(_:)(&v94, v82, &type metadata for String, v63, v57);
  v65 = swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v85 + 8))(v58, v64, v65);
}

uint64_t sub_1005CE2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD v13[5];

  v3 = type metadata accessor for DetailChartGradientModel(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = DetailChartDataElement.color.getter(v5);
  if (v8)
  {
    v13[0] = v8;
    v9 = &type metadata for Color;
    v10 = &protocol witness table for Color;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a2, v3);
    LinearGradient.init(_:)(v13, v7);
    v9 = &type metadata for LinearGradient;
    v10 = &protocol witness table for LinearGradient;
  }
  return AnyShapeStyle.init<A>(_:)(v13, v9, v10);
}

uint64_t sub_1005CE3A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  v42 = a2;
  v3 = sub_1000BA294(&qword_100BD78B8);
  __chkstk_darwin(v3);
  v41 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v40 = (char *)&v40 - v6;
  v7 = sub_1000BA294(&qword_100BD78D8);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - v11;
  v13 = LocalizedStringKey.init(stringLiteral:)(0x65746144206E694DLL, 0xE800000000000000);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = (int *)type metadata accessor for ChartViewModel(0);
  v21 = a1 + v20[19];
  v22 = type metadata accessor for Date(0);
  static PlottableValue.value(_:_:)(v13, v15, v17 & 1, v19, v21, v22, &protocol witness table for Date);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = LocalizedStringKey.init(stringLiteral:)(0x657461442078614DLL, 0xE800000000000000);
  static PlottableValue.value(_:_:)(v23, v25, v24 & 1, v26, a1 + v20[20], v22, &protocol witness table for Date);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = LocalizedStringKey.init(stringLiteral:)(0x756C6156206E694DLL, 0xE900000000000065);
  v28 = (uint64_t *)(a1 + v20[10]);
  v43 = *v28;
  v30 = v40;
  static PlottableValue.value(_:_:)(v27, v31, v29 & 1, v32, &v43, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = LocalizedStringKey.init(stringLiteral:)(0x756C61562078614DLL, 0xE900000000000065);
  v43 = v28[1];
  v35 = v41;
  static PlottableValue.value(_:_:)(v33, v36, v34 & 1, v37, &v43, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease();
  v38 = swift_bridgeObjectRelease();
  return RectangleMark.init<A, B>(xStart:xEnd:yStart:yEnd:)(v12, v9, v30, v35, v22, &type metadata for Double, &protocol witness table for Date, &protocol witness table for Double, v38);
}

uint64_t sub_1005CE65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a3;
  v35 = a4;
  v6 = type metadata accessor for ChartLineStrokeStyle(0);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BCB940);
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v32 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - v16;
  v18 = type metadata accessor for ChartLineStyle(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037794(a1, (uint64_t)v14, &qword_100BCB940);
  sub_100037794(a2, (uint64_t)v11, &qword_100BCB940);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v18) == 1)
  {
    sub_1000F111C((uint64_t)v11, (uint64_t)v17, &qword_100BCB940);
    sub_100021A14((uint64_t)v14, &qword_100BCB940);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v18) == 1)
    {
      sub_100021A14((uint64_t)v17, &qword_100BCB940);
      goto LABEL_12;
    }
    v22 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  }
  else
  {
    sub_100021A14((uint64_t)v11, &qword_100BCB940);
    v22 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v22(v17, v14, v18);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v18);
  }
  v23 = ((uint64_t (*)(char *, char *, uint64_t))v22)(v21, v17, v18);
  ChartLineStyle.strokeStyle.getter(v23);
  v25 = v32;
  v24 = v33;
  v26 = (*(uint64_t (**)(char *, uint64_t))(v32 + 88))(v8, v33);
  if (v26 == enum case for ChartLineStrokeStyle.dashed(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    (*(void (**)(char *, uint64_t))(v25 + 96))(v8, v24);
    v27 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v8, v27);
  }
  else
  {
    if (v26 == enum case for ChartLineStrokeStyle.solidFrom(_:))
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      (*(void (**)(char *, uint64_t))(v25 + 96))(v8, v24);
      v28 = type metadata accessor for Date(0);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v35, v8, v28);
    }
    if (v26 != enum case for ChartLineStrokeStyle.solid(_:))
    {
      result = _diagnoseUnexpectedEnumCase<A>(type:)(v24, v24);
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
LABEL_12:
  v30 = v34 + *(int *)(type metadata accessor for ChartViewModel(0) + 76);
  v31 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v35, v30, v31);
}

void sub_1005CE984(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  int *v79;
  void (*v80)(char *, uint64_t, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  char *v90;
  char *v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  double *v96;
  double v97;
  double v98;
  int *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  char *v105;
  char *v106;
  int *v107;
  char *v108;
  void (*v109)(char *, uint64_t, uint64_t);
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  _QWORD *v117;
  void (*v118)(char *, char *, uint64_t);
  char *v119;
  char *v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  double *v128;
  double v129;
  double v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t);
  uint64_t v142;
  uint64_t v143;
  int v144;
  int *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  int *v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(char *, uint64_t, uint64_t);
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  void (*v169)(char *, char *, uint64_t);
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  void (*v174)(char *, uint64_t);
  char *v175;
  uint64_t v176;
  uint64_t v177;
  double *v178;
  double v179;
  double v180;
  int *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  char *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  char *v191;
  int *v192;
  _QWORD *v193;
  void (*v194)(char *, uint64_t, uint64_t);
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  _QWORD *v203;
  void (*v204)(char *, char *, uint64_t);
  char *v205;
  char *v206;
  uint64_t v207;
  void (*v208)(char *, uint64_t);
  char *v209;
  uint64_t v210;
  uint64_t v211;
  double *v212;
  double v213;
  double v214;
  char *v215;
  char *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  void (*v227)(char *, uint64_t);
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int *v232;
  char *v233;
  char *v234;
  char *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  char *v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  int *v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  _QWORD *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;

  v256 = a4;
  v238 = a3;
  v273 = a2;
  v276 = a1;
  v266 = a5;
  v5 = type metadata accessor for ShadowModel(0);
  __chkstk_darwin(v5);
  v245 = (char *)&v232 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorSchemeContrast(0);
  __chkstk_darwin(v7);
  v242 = (char *)&v232 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = type metadata accessor for ChartLineMark(0);
  v244 = *(_QWORD *)(v247 - 8);
  __chkstk_darwin(v247);
  v246 = (char *)&v232 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v232 - v11;
  v264 = sub_1000BA294(&qword_100BF44B0);
  __chkstk_darwin(v264);
  v261 = (char *)&v232 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v262 = (char *)&v232 - v15;
  v16 = type metadata accessor for Date(0);
  v274 = *(_QWORD **)(v16 - 8);
  __chkstk_darwin(v16);
  v272 = (char *)&v232 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v269 = (char *)&v232 - v19;
  v259 = sub_1000BA294(&qword_100BF44B8);
  __chkstk_darwin(v259);
  v260 = (char *)&v232 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v263 = (uint64_t)&v232 - v22;
  v23 = type metadata accessor for DetailChartExtrema(0);
  v267 = *(_QWORD *)(v23 - 8);
  v268 = v23;
  v24 = __chkstk_darwin(v23);
  v275 = (char *)&v232 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = type metadata accessor for ChartAreaSeries(0, v24);
  v236 = *(_QWORD *)(v253 - 8);
  __chkstk_darwin(v253);
  v235 = (char *)&v232 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1000BA294(&qword_100BCB950);
  __chkstk_darwin(v27);
  v254 = (uint64_t)&v232 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (char *)&v232 - v30;
  v32 = type metadata accessor for ChartAreaStyle(0);
  v270 = *(int **)(v32 - 8);
  __chkstk_darwin(v32);
  v258 = (char *)&v232 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v234 = (char *)&v232 - v35;
  __chkstk_darwin(v36);
  v237 = (char *)&v232 - v37;
  v38 = sub_1000BA294(&qword_100BF4448);
  __chkstk_darwin(v38);
  v248 = (uint64_t)&v232 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v241 = (uint64_t)&v232 - v41;
  __chkstk_darwin(v42);
  v252 = (uint64_t)&v232 - v43;
  v44 = sub_1000BA294(&qword_100BCB940);
  __chkstk_darwin(v44);
  v255 = (uint64_t)&v232 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v48 = (char *)&v232 - v47;
  v49 = type metadata accessor for ChartLineStyle(0);
  v50 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v257 = (char *)&v232 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v239 = (char *)&v232 - v53;
  __chkstk_darwin(v54);
  v56 = (char *)&v232 - v55;
  v57 = sub_1000BA294(&qword_100BF4428);
  __chkstk_darwin(v57);
  v250 = (uint64_t)&v232 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v59);
  v249 = (uint64_t)&v232 - v60;
  __chkstk_darwin(v61);
  v265 = (char *)&v232 - v62;
  __chkstk_darwin(v63);
  v65 = (char *)&v232 - v64;
  sub_100037794(v276, (uint64_t)v48, &qword_100BCB940);
  v276 = v49;
  v66 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v49);
  v271 = v50;
  v243 = v12;
  v240 = v65;
  v251 = v32;
  if (v66 == 1)
  {
    sub_100021A14((uint64_t)v48, &qword_100BCB940);
    v67 = sub_1000BA294(&qword_100BF4438);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v65, 1, 1, v67);
    v68 = (uint64_t)v265;
  }
  else
  {
    v69 = (*(uint64_t (**)(char *, char *, uint64_t))(v50 + 32))(v56, v48, v276);
    ChartLineStyle.areaStyle.getter(v69);
    v70 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v31, 1, v32);
    v233 = v56;
    if (v70 == 1)
    {
      sub_100021A14((uint64_t)v31, &qword_100BCB950);
      v71 = 1;
      v73 = v273;
      v72 = v274;
      v74 = v269;
      v75 = v253;
      v76 = v252;
    }
    else
    {
      (*((void (**)(char *, char *, uint64_t))v270 + 4))(v237, v31, v32);
      v77 = (int *)type metadata accessor for ChartViewModel(0);
      v78 = v273;
      v79 = *(int **)(v273 + v77[6]);
      (*(void (**)(char *, uint64_t, uint64_t))(v267 + 16))(v275, v273 + v77[7], v268);
      v80 = (void (*)(char *, uint64_t, uint64_t))v274[2];
      v81 = v269;
      v80(v269, v78 + v77[20], v16);
      sub_10007A100((uint64_t)&qword_100BCB0E0);
      v83 = v82;
      v232 = v79;
      swift_bridgeObjectRetain();
      v84 = v238;
      if ((dispatch thunk of static Comparable.<= infix(_:_:)(v238, v81, v16, v83) & 1) == 0)
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      v85 = v264;
      v86 = v262;
      v87 = &v262[*(int *)(v264 + 48)];
      v80(v262, v84, v16);
      v88 = (void (*)(char *, char *, uint64_t))v274[4];
      v88(v87, v81, v16);
      v89 = v261;
      v90 = &v261[*(int *)(v85 + 48)];
      v80(v261, (uint64_t)v86, v16);
      v80(v90, (uint64_t)v87, v16);
      v91 = v260;
      v88(v260, v89, v16);
      v92 = (void (*)(char *, uint64_t))v274[1];
      v92(v90, v16);
      v93 = &v89[*(int *)(v85 + 48)];
      v88(v89, v86, v16);
      v88(v93, v87, v16);
      v88(&v91[*(int *)(v259 + 36)], v93, v16);
      v72 = v274;
      v92(v89, v16);
      v94 = (uint64_t)v91;
      v74 = v269;
      v95 = v263;
      sub_1000F111C(v94, v263, &qword_100BF44B8);
      v73 = v273;
      v96 = (double *)(v273 + v77[10]);
      v97 = *v96;
      v98 = v96[1];
      v99 = v270;
      v100 = v234;
      v101 = v237;
      v102 = v251;
      v103 = (*((uint64_t (**)(char *, char *, uint64_t))v270 + 2))(v234, v237, v251);
      v104 = ChartLineStyle.halfLineWidth.getter(v103);
      v105 = v235;
      ChartAreaSeries.init(chartData:dateExtrema:visibleDateRange:yAxisRange:areaStyle:halfLineWidth:useSecondValue:)(v232, v275, v95, v100, 1, v97, v98, v104);
      (*((void (**)(char *, uint64_t))v99 + 1))(v101, v102);
      v76 = v252;
      v106 = v105;
      v75 = v253;
      (*(void (**)(uint64_t, char *, uint64_t))(v236 + 32))(v252, v106, v253);
      v71 = 0;
    }
    _s7Weather24LocationCompositionStateOwst_0(v76, v71, 1, v75);
    v107 = (int *)type metadata accessor for ChartViewModel(0);
    v108 = *(char **)(v73 + v107[6]);
    (*(void (**)(char *, uint64_t, uint64_t))(v267 + 16))(v275, v73 + v107[7], v268);
    v109 = (void (*)(char *, uint64_t, uint64_t))v72[2];
    v109(v74, v73 + v107[19], v16);
    v232 = v107;
    v110 = v73 + v107[20];
    v111 = v272;
    v109(v272, v110, v16);
    sub_10007A100((uint64_t)&qword_100BCB0E0);
    v113 = v112;
    v237 = v108;
    swift_bridgeObjectRetain();
    if ((dispatch thunk of static Comparable.<= infix(_:_:)(v74, v111, v16, v113) & 1) == 0)
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    v114 = v264;
    v115 = v262;
    v116 = &v262[*(int *)(v264 + 48)];
    v117 = v72;
    v118 = (void (*)(char *, char *, uint64_t))v72[4];
    v118(v262, v74, v16);
    v118(v116, v272, v16);
    v119 = v261;
    v120 = &v261[*(int *)(v114 + 48)];
    v109(v261, (uint64_t)v115, v16);
    v109(v120, (uint64_t)v116, v16);
    v121 = (uint64_t)v260;
    v118(v260, v119, v16);
    v122 = (void (*)(char *, uint64_t))v117[1];
    v122(v120, v16);
    v123 = *(int *)(v114 + 48);
    v124 = v265;
    v125 = v263;
    v126 = &v119[v123];
    v118(v119, v115, v16);
    v118(v126, v116, v16);
    v118((char *)(v121 + *(int *)(v259 + 36)), v126, v16);
    v127 = v119;
    v68 = (uint64_t)v124;
    v122(v127, v16);
    sub_1000F111C(v121, v125, &qword_100BF44B8);
    v128 = (double *)(v273 + v232[10]);
    v129 = *v128;
    v130 = v128[1];
    v131 = v239;
    v132 = v233;
    (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v239, v233, v276);
    type metadata accessor for ChartView(0);
    v133 = v242;
    sub_100114A94();
    v134 = v245;
    static ShadowModel.clear.getter();
    v135 = v243;
    ChartLineMark.init(chartData:dateExtrema:xAxisRange:yAxisRange:lineStyle:colorSchemeContrast:shadow:useSecondValue:showAccessibilityLabels:)(v237, v275, v125, v131, v133, v134, 1, 0, v129, v130);
    v136 = v252;
    v137 = v241;
    sub_100037794(v252, v241, &qword_100BF4448);
    v277 = v137;
    v138 = v244;
    v139 = v246;
    v140 = v247;
    (*(void (**)(char *, char *, uint64_t))(v244 + 16))(v246, v135, v247);
    v278 = (uint64_t)v139;
    sub_10073BC8C();
    v141 = *(void (**)(char *, uint64_t))(v138 + 8);
    v141(v135, v140);
    sub_100021A14(v136, &qword_100BF4448);
    (*(void (**)(char *, uint64_t))(v271 + 8))(v132, v276);
    v141(v139, v140);
    sub_100021A14(v137, &qword_100BF4448);
    v142 = sub_1000BA294(&qword_100BF4438);
    _s7Weather24LocationCompositionStateOwst_0(v68, 0, 1, v142);
    v65 = v240;
    sub_1000F111C(v68, (uint64_t)v240, &qword_100BF4428);
  }
  v143 = v255;
  sub_100037794(v256, v255, &qword_100BCB940);
  v144 = _s7Weather24LocationCompositionStateOwet_0(v143, 1, v276);
  v145 = v270;
  v146 = v258;
  if (v144 == 1)
  {
    sub_100021A14(v143, &qword_100BCB940);
    v147 = sub_1000BA294(&qword_100BF4438);
    v148 = v249;
    _s7Weather24LocationCompositionStateOwst_0(v249, 1, 1, v147);
LABEL_17:
    sub_100037794((uint64_t)v65, v68, &qword_100BF4428);
    v277 = v68;
    v231 = v250;
    sub_100037794(v148, v250, &qword_100BF4428);
    v278 = v231;
    sub_10073BD4C();
    sub_100021A14(v148, &qword_100BF4428);
    sub_100021A14((uint64_t)v65, &qword_100BF4428);
    sub_100021A14(v231, &qword_100BF4428);
    sub_100021A14(v68, &qword_100BF4428);
    return;
  }
  v149 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v271 + 32))(v257, v143, v276);
  v150 = v254;
  ChartLineStyle.areaStyle.getter(v149);
  v151 = v251;
  if (_s7Weather24LocationCompositionStateOwet_0(v150, 1, v251) == 1)
  {
    sub_100021A14(v254, &qword_100BCB950);
    v152 = 1;
    v154 = v273;
    v153 = v274;
    v155 = v248;
    v156 = v269;
    v157 = v253;
    goto LABEL_15;
  }
  (*((void (**)(char *, uint64_t, uint64_t))v145 + 4))(v146, v254, v151);
  v158 = (int *)type metadata accessor for ChartViewModel(0);
  v159 = v273;
  v160 = *(_QWORD *)(v273 + v158[6]);
  (*(void (**)(char *, uint64_t, uint64_t))(v267 + 16))(v275, v273 + v158[7], v268);
  v161 = (void (*)(char *, uint64_t, uint64_t))v274[2];
  v162 = v269;
  v161(v269, v159 + v158[20], v16);
  sub_10007A100((uint64_t)&qword_100BCB0E0);
  v164 = v163;
  v256 = v160;
  swift_bridgeObjectRetain();
  v165 = v238;
  if ((dispatch thunk of static Comparable.<= infix(_:_:)(v238, v162, v16, v164) & 1) != 0)
  {
    v166 = v264;
    v167 = v262;
    v168 = &v262[*(int *)(v264 + 48)];
    v161(v262, v165, v16);
    v169 = (void (*)(char *, char *, uint64_t))v274[4];
    v169(v168, v162, v16);
    v170 = v261;
    v171 = &v261[*(int *)(v166 + 48)];
    v161(v261, (uint64_t)v167, v16);
    v161(v171, (uint64_t)v168, v16);
    v172 = v16;
    v173 = v260;
    v169(v260, v170, v172);
    v174 = (void (*)(char *, uint64_t))v274[1];
    v174(v171, v172);
    v175 = &v170[*(int *)(v166 + 48)];
    v169(v170, v167, v172);
    v169(v175, v168, v172);
    v169(&v173[*(int *)(v259 + 36)], v175, v172);
    v174(v170, v172);
    v176 = (uint64_t)v173;
    v16 = v172;
    v156 = v269;
    v177 = v263;
    sub_1000F111C(v176, v263, &qword_100BF44B8);
    v154 = v273;
    v178 = (double *)(v273 + v158[10]);
    v179 = *v178;
    v180 = v178[1];
    v181 = v270;
    v182 = v234;
    v183 = v258;
    v184 = v251;
    v185 = (*((uint64_t (**)(char *, char *, uint64_t))v270 + 2))(v234, v258, v251);
    v186 = ChartLineStyle.halfLineWidth.getter(v185);
    v187 = v235;
    v188 = v177;
    v189 = v274;
    ChartAreaSeries.init(chartData:dateExtrema:visibleDateRange:yAxisRange:areaStyle:halfLineWidth:useSecondValue:)(v256, v275, v188, v182, 0, v179, v180, v186);
    v190 = v184;
    v153 = v189;
    (*((void (**)(char *, uint64_t))v181 + 1))(v183, v190);
    v155 = v248;
    v191 = v187;
    v157 = v253;
    (*(void (**)(uint64_t, char *, uint64_t))(v236 + 32))(v248, v191, v253);
    v152 = 0;
LABEL_15:
    _s7Weather24LocationCompositionStateOwst_0(v155, v152, 1, v157);
    v192 = (int *)type metadata accessor for ChartViewModel(0);
    v193 = *(_QWORD **)(v154 + v192[6]);
    (*(void (**)(char *, uint64_t, uint64_t))(v267 + 16))(v275, v154 + v192[7], v268);
    v194 = (void (*)(char *, uint64_t, uint64_t))v153[2];
    v194(v156, v154 + v192[19], v16);
    v195 = v272;
    v194(v272, v154 + v192[20], v16);
    sub_10007A100((uint64_t)&qword_100BCB0E0);
    v197 = v196;
    swift_bridgeObjectRetain();
    if ((dispatch thunk of static Comparable.<= infix(_:_:)(v156, v195, v16, v197) & 1) != 0)
    {
      v198 = v264;
      v199 = *(int *)(v264 + 48);
      v270 = v192;
      v200 = v262;
      v201 = &v262[v199];
      v202 = v156;
      v203 = v153;
      v204 = (void (*)(char *, char *, uint64_t))v153[4];
      v204(v262, v202, v16);
      v204(v201, v272, v16);
      v205 = v261;
      v206 = &v261[*(int *)(v198 + 48)];
      v194(v261, (uint64_t)v200, v16);
      v194(v206, (uint64_t)v201, v16);
      v274 = v193;
      v207 = (uint64_t)v260;
      v204(v260, v205, v16);
      v208 = (void (*)(char *, uint64_t))v203[1];
      v208(v206, v16);
      v209 = &v205[*(int *)(v198 + 48)];
      v204(v205, v200, v16);
      v204(v209, v201, v16);
      v204((char *)(v207 + *(int *)(v259 + 36)), v209, v16);
      v208(v205, v16);
      v210 = v263;
      sub_1000F111C(v207, v263, &qword_100BF44B8);
      v211 = v271;
      v212 = (double *)(v273 + v270[10]);
      v213 = *v212;
      v214 = v212[1];
      v215 = v239;
      v216 = v257;
      v217 = v276;
      (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v239, v257, v276);
      type metadata accessor for ChartView(0);
      v218 = v242;
      sub_100114A94();
      v219 = v245;
      static ShadowModel.clear.getter();
      v220 = v243;
      ChartLineMark.init(chartData:dateExtrema:xAxisRange:yAxisRange:lineStyle:colorSchemeContrast:shadow:useSecondValue:showAccessibilityLabels:)(v274, v275, v210, v215, v218, v219, 0, 1, v213, v214);
      v221 = v248;
      v222 = v241;
      sub_100037794(v248, v241, &qword_100BF4448);
      v277 = v222;
      v223 = v244;
      v224 = v246;
      v225 = v247;
      (*(void (**)(char *, char *, uint64_t))(v244 + 16))(v246, v220, v247);
      v278 = (uint64_t)v224;
      v226 = (uint64_t)v265;
      sub_10073BC8C();
      v227 = *(void (**)(char *, uint64_t))(v223 + 8);
      v227(v220, v225);
      sub_100021A14(v221, &qword_100BF4448);
      v228 = v216;
      v68 = v226;
      v229 = v217;
      v65 = v240;
      (*(void (**)(char *, uint64_t))(v211 + 8))(v228, v229);
      v227(v224, v225);
      sub_100021A14(v222, &qword_100BF4448);
      v230 = sub_1000BA294(&qword_100BF4438);
      _s7Weather24LocationCompositionStateOwst_0(v226, 0, 1, v230);
      v148 = v249;
      sub_1000F111C(v226, v249, &qword_100BF4428);
      goto LABEL_17;
    }
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
}

uint64_t sub_1005CFD70(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABA644, 1);
}

void sub_1005CFD80(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1005C9ED8(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1005CFD88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4230;
  if (!qword_100BF4230)
  {
    v1 = sub_100075EB0(&qword_100BF4228);
    sub_1005CFE1C();
    sub_1005D17C0((uint64_t)&unk_100BF4290);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4230);
  }
  return result;
}

unint64_t sub_1005CFE1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4238;
  if (!qword_100BF4238)
  {
    v1 = sub_100075EB0(&qword_100BF4240);
    sub_10027248C((uint64_t)&unk_100BF4248);
    sub_1005CFEA0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> BuilderConditional<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4238);
  }
  return result;
}

unint64_t sub_1005CFEA0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;

  result = qword_100BF4258;
  if (!qword_100BF4258)
  {
    v1 = sub_100075EB0(&qword_100BF4260);
    v2 = sub_100075EB0(&qword_100BF4268);
    sub_10027248C((uint64_t)&unk_100BF4270);
    OpaqueTypeConformance2 = v2;
    v5 = v3;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&OpaqueTypeConformance2, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
    v5 = sub_1005CFF5C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4258);
  }
  return result;
}

unint64_t sub_1005CFF5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4278;
  if (!qword_100BF4278)
  {
    v1 = sub_100075EB0(&qword_100BF4280);
    sub_10007A100((uint64_t)&unk_100BF4288);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4278);
  }
  return result;
}

unint64_t sub_1005CFFD8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;

  result = qword_100BF42A0;
  if (!qword_100BF42A0)
  {
    v1 = sub_100075EB0(&qword_100BF42A8);
    v2 = sub_100075EB0(&qword_100BF42B0);
    v3 = sub_100075EB0(&qword_100BF42B8);
    v6 = type metadata accessor for PointMark(255);
    v7 = &protocol witness table for PointMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of ChartContent.symbolSize(_:)>>, 1);
    v6 = v3;
    v7 = &type metadata for Color;
    v8 = OpaqueTypeConformance2;
    v9 = &protocol witness table for Color;
    v5 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v6 = v2;
    v7 = &type metadata for Text;
    v8 = v5;
    v9 = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of ChartContent.annotation<A>(position:alignment:spacing:overflowResolution:content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF42A0);
  }
  return result;
}

unint64_t sub_1005D00E0(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;
  uint64_t *v3;
  uint64_t v4;

  result = sub_10009987C(a1);
  if (!result)
  {
    v4 = sub_1000B4444(0, v3);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v4);
    atomic_store(result, v1);
  }
  return result;
}

uint64_t sub_1005D0128@<X0>(uint64_t a1@<X8>)
{
  return sub_1005CAD1C(a1);
}

uint64_t sub_1005D0148@<X0>(uint64_t a1@<X8>)
{
  return sub_1005CB108(a1);
}

void sub_1005D0168(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (!sub_10009987C(a1))
  {
    v4 = sub_1000AE8E8(0, v3);
    sub_10027248C(v2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4), v1);
  }
  sub_100099960();
}

uint64_t sub_1005D01D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ChartView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005D0214(uint64_t a1)
{
  return sub_1005D1014(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1005CB3B8);
}

uint64_t type metadata accessor for ChartBackgroundView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF4518, (uint64_t)&nominal type descriptor for ChartBackgroundView);
}

unint64_t sub_1005D0234()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeConformance2;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;

  result = qword_100BF4350;
  if (!qword_100BF4350)
  {
    v27 = sub_100075EB0(&qword_100BF41F8);
    v26 = sub_100075EB0(&qword_100BF41E8);
    v25 = sub_100075EB0(&qword_100BF4318);
    v1 = sub_100075EB0(&qword_100BF41E0);
    v2 = sub_100075EB0(&qword_100BF42E0);
    v3 = sub_100075EB0(&qword_100BF41D8);
    v4 = sub_100075EB0(&qword_100BF42D0);
    v5 = type metadata accessor for PlotDimensionScaleRange(255);
    v6 = sub_100075EB0(&qword_100BF41D0);
    v7 = sub_100075EB0(&qword_100BC69E0);
    sub_10027248C((uint64_t)&unk_100BF42C0);
    v28 = v6;
    v29 = v7;
    v30 = v8;
    v31 = sub_1005D00E0((uint64_t)&unk_100BF42C8);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
    v10 = sub_1005D00E0((uint64_t)&unk_100BF42D8);
    v28 = v3;
    v29 = v4;
    v30 = v5;
    v31 = OpaqueTypeConformance2;
    v32 = v10;
    v33 = &protocol witness table for PlotDimensionScaleRange;
    v11 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.chartYScale<A, B>(domain:range:type:)>>, 1);
    v12 = sub_100075EB0(&qword_100BF42E8);
    v13 = sub_100075EB0(&qword_100BF42F0);
    sub_10027248C((uint64_t)&unk_100BF42F8);
    v15 = v14;
    sub_1005D0168((uint64_t)&unk_100BF4300);
    v28 = v12;
    v29 = v13;
    v30 = v15;
    v31 = v16;
    v17 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of AxisContent.compositingLayer<A>(style:)>>, 1);
    v28 = v1;
    v29 = v2;
    v30 = v11;
    v31 = v17;
    v18 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
    v19 = sub_100075EB0(&qword_100BF4320);
    v20 = sub_100075EB0(&qword_100BF4328);
    sub_10027248C((uint64_t)&unk_100BF4330);
    v22 = v21;
    sub_1005D0168((uint64_t)&unk_100BF4338);
    v28 = v19;
    v29 = v20;
    v30 = v22;
    v31 = v23;
    v24 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of AxisContent.compositingLayer<A>(style:)>>, 1);
    v28 = v26;
    v29 = v25;
    v30 = v18;
    v31 = v24;
    swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
    atomic_store(result, (unint64_t *)&qword_100BF4350);
  }
  return result;
}

double sub_1005D0530@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[2];
  char v27;

  v10 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v10);
  v12 = (_OWORD *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = (char *)v12 + *(int *)(v13 + 20);
  v15 = enum case for RoundedCornerStyle.continuous(_:);
  v16 = type metadata accessor for RoundedCornerStyle(0);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  __asm { FMOV            V0.2D, #8.0 }
  *v12 = _Q0;
  RoundedRectangle.path(in:)(v26, v17, a2, a3, a4, a5);
  sub_1000215BC((uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  result = *(double *)v26;
  v24 = v26[1];
  *(_OWORD *)a1 = v26[0];
  *(_OWORD *)(a1 + 16) = v24;
  *(_BYTE *)(a1 + 32) = v27;
  return result;
}

double sub_1005D0634@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  sub_1005D0530((uint64_t)v8, a2, a3, a4, a5);
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

uint64_t sub_1005D067C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1005D33A4();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1005D06CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1005D33A4();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1005D071C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005D33A4();
  return Shape.body.getter(a1, v2);
}

void *sub_1005D0754@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE __src[216];

  v3 = static Alignment.center.getter(a1);
  v5 = v4;
  sub_1005D07AC((uint64_t)__src);
  *a2 = v3;
  a2[1] = v5;
  return memcpy(a2 + 2, __src, 0xD0uLL);
}

uint64_t sub_1005D07AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE __dst[130];
  _QWORD v15[5];
  _BYTE __src[136];
  _BYTE v17[136];
  _BYTE v18[136];

  sub_1005D0914(__src);
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, v18, 33, 0);
  sub_10040441C();
  v3 = v2;
  swift_endAccess(v18);
  v4 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v15, 0, 0, 1.0, 10.0, 0.0);
  v5 = v15[0];
  v6 = v15[2];
  v7 = v15[3];
  v8 = v15[4];
  v9 = static Alignment.center.getter(v4);
  v11 = v10;
  memcpy(__dst, __src, sizeof(__dst));
  memcpy(v17, __src, 0x82uLL);
  memcpy((void *)a1, __src, 0x82uLL);
  v12 = v15[1];
  *(_QWORD *)(a1 + 136) = v5;
  *(_QWORD *)(a1 + 144) = v12;
  *(_QWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 168) = v8;
  *(_QWORD *)(a1 + 176) = v3;
  *(_WORD *)(a1 + 184) = 256;
  *(_QWORD *)(a1 + 192) = v9;
  *(_QWORD *)(a1 + 200) = v11;
  sub_1005D2F70((uint64_t)v17);
  memcpy(v18, __dst, 0x82uLL);
  return sub_1005D2F70((uint64_t)v18);
}

void *sub_1005D0914@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE v23[136];
  _BYTE v24[129];
  _BYTE v25[136];
  _OWORD __dst[9];

  v2 = v1;
  v4 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v4);
  v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for ChartViewModel.Background(0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)&v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000AB54(v2, (uint64_t)v9, v10);
  v11 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v11) == 1)
  {
    sub_1005D32B4((uint64_t)v25);
    sub_1000F111C((uint64_t)v25, (uint64_t)v23, &qword_100BF4570);
    v12 = sub_1000BA294(&qword_100BF4578);
    v13 = sub_1005D3170();
    _ConditionalContent<>.init(storage:)(v23, &type metadata for EmptyView, v12, &protocol witness table for EmptyView, v13);
  }
  else
  {
    v14 = *v9;
    sub_1000F111C((uint64_t)v9 + *(int *)(v11 + 48), (uint64_t)v6, (uint64_t *)&unk_100BD35A0);
    swift_retain();
    v16 = static Alignment.center.getter(v15);
    v18 = v17;
    sub_1005D0B80((uint64_t)v6, v2, (uint64_t)__dst);
    *(_QWORD *)v24 = v14;
    *(_WORD *)&v24[8] = 256;
    *(_QWORD *)&v24[16] = v16;
    *(_QWORD *)&v24[24] = v18;
    *(_OWORD *)&v24[32] = __dst[0];
    *(_OWORD *)&v24[48] = __dst[1];
    *(_OWORD *)&v24[64] = __dst[2];
    *(_OWORD *)&v24[80] = __dst[3];
    *(_OWORD *)&v24[96] = __dst[4];
    *(_OWORD *)&v24[112] = __dst[5];
    v24[128] = __dst[6];
    memcpy(v25, v24, 0x81uLL);
    sub_1005D30BC((uint64_t)v25);
    sub_1000F111C((uint64_t)v25, (uint64_t)__dst, &qword_100BF4570);
    sub_1005D30C8((uint64_t)v24);
    v19 = sub_1000BA294(&qword_100BF4578);
    v20 = sub_1005D3170();
    _ConditionalContent<>.init(storage:)(__dst, &type metadata for EmptyView, v19, &protocol witness table for EmptyView, v20);
    swift_release();
    sub_1005D320C((uint64_t)v24);
    sub_100021A14((uint64_t)v6, (uint64_t *)&unk_100BD35A0);
    memcpy(__dst, v23, 0x82uLL);
  }
  return memcpy(a1, __dst, 0x82uLL);
}

double sub_1005D0B80@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;

  v6 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037794(a1, (uint64_t)v8, (uint64_t *)&unk_100BD35A0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9) == 1)
  {
    sub_100021A14((uint64_t)v8, (uint64_t *)&unk_100BD35A0);
LABEL_7:
    v38 = static Color.white.getter(v13);
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0;
    v45 = 1;
    v26 = sub_1000BA294(&qword_100BF45A8);
    sub_10027248C((uint64_t)&unk_100BF45B0);
    _ConditionalContent<>.init(storage:)(&v38, v26, &type metadata for Color, v27, &protocol witness table for Color);
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  v14 = type metadata accessor for ChartBackgroundView(0);
  if ((static Date.> infix(_:_:)(v12, a2 + *(int *)(v14 + 24)) & 1) == 0
    || (v15 = ChartProxy.position<A>(forX:)(v12, v9, &protocol witness table for Date), (v16 & 1) != 0))
  {
    v13 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_7;
  }
  v17 = v15;
  v37 = static VerticalAlignment.center.getter(v15);
  static Alignment.center.getter(v37);
  v18 = _FrameLayout.init(width:height:alignment:)(v17, 0, 0, 1);
  v35 = v54;
  v36 = v53;
  v19 = v55;
  v20 = v56;
  v21 = v57;
  v22 = v58;
  v23 = static Color.white.getter(v18);
  v38 = v37;
  v39 = xmmword_100995EC0;
  v40 = xmmword_100995EC0;
  *(_QWORD *)&v41 = v36;
  *((_QWORD *)&v41 + 1) = v35;
  *(_QWORD *)&v42 = v19;
  *((_QWORD *)&v42 + 1) = v20;
  *(_QWORD *)&v43 = v21;
  *((_QWORD *)&v43 + 1) = v22;
  v44 = v23;
  v45 = 0;
  v24 = sub_1000BA294(&qword_100BF45A8);
  sub_10027248C((uint64_t)&unk_100BF45B0);
  _ConditionalContent<>.init(storage:)(&v38, v24, &type metadata for Color, v25, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
LABEL_8:
  result = *(double *)&v46;
  v29 = v47;
  v30 = v48;
  v31 = v49;
  v32 = v50;
  v33 = v51;
  v34 = v52;
  *(_OWORD *)a3 = v46;
  *(_OWORD *)(a3 + 16) = v29;
  *(_OWORD *)(a3 + 32) = v30;
  *(_OWORD *)(a3 + 48) = v31;
  *(_OWORD *)(a3 + 64) = v32;
  *(_OWORD *)(a3 + 80) = v33;
  *(_BYTE *)(a3 + 96) = v34;
  return result;
}

unint64_t sub_1005D0E60()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = qword_100BF4360;
  if (!qword_100BF4360)
  {
    v1 = sub_100075EB0(&qword_100BD9B70);
    v2 = sub_100075EB0(&qword_100BF4200);
    v3 = sub_100075EB0(&qword_100BF41F8);
    v4 = type metadata accessor for ChartBackgroundView(255);
    v5 = sub_1005D0234();
    sub_10007A100((uint64_t)&unk_100BF4358);
    v8 = v3;
    v9 = v4;
    v10 = v5;
    v11 = v6;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.chartBackground<A>(alignment:content:)>>, 1);
    v8 = v2;
    v9 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10007A100((uint64_t)&qword_100BC6768);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4360);
  }
  return result;
}

unint64_t sub_1005D0F78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4368;
  if (!qword_100BF4368)
  {
    v1 = sub_100075EB0(&qword_100BF4208);
    sub_1005D0E60();
    sub_10007A100((uint64_t)&qword_100BC4E48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4368);
  }
  return result;
}

uint64_t sub_1005D1008(uint64_t a1)
{
  return sub_1005D1014(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1005CC750);
}

uint64_t sub_1005D1014(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000EB048();
  return a2(v2, v3 + ((v4 + 16) & ~v4));
}

unint64_t sub_1005D105C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_100BF4388;
  if (!qword_100BF4388)
  {
    v1 = sub_100075EB0(&qword_100BF4390);
    v4[2] = sub_1005D1118();
    v2 = sub_100075EB0(&qword_100BF43A8);
    sub_10027248C((uint64_t)&unk_100BF43B0);
    v4[0] = v2;
    v4[1] = v3;
    v4[3] = swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of AxisMark.offset(x:y:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4388);
  }
  return result;
}

unint64_t sub_1005D1118()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100BF4398;
  if (!qword_100BF4398)
  {
    v1 = sub_100075EB0(&qword_100BF43A0);
    v2[0] = type metadata accessor for AxisGridLine(255);
    v2[1] = &type metadata for Color;
    v2[2] = &protocol witness table for AxisGridLine;
    v2[3] = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4398);
  }
  return result;
}

uint64_t sub_1005D11B4()
{
  return sub_1005D170C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1005CD114);
}

uint64_t sub_1005D11C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = type metadata accessor for ChartView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 104) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v0 + v4;
  swift_bridgeObjectRelease();
  v7 = (int *)sub_1000995F0();
  v8 = sub_1000DAAA4();
  v9 = type metadata accessor for ChartKind(v8);
  sub_1000B2568(v9);
  sub_1000BD578(v7[6]);
  v10 = sub_1000DAAA4();
  v11 = type metadata accessor for DetailChartExtrema(v10);
  sub_1000B2568(v11);
  sub_1000BD578(v7[8]);
  sub_1000BD578(v7[9]);
  sub_1000D1254(v0 + v4 + v7[11]);
  sub_1000BA294(&qword_100BCB978);
  v12 = sub_100098778();
  if (!sub_1000B4674())
    sub_1000B4684();
  v13 = sub_1000BA294(&qword_100BCB988);
  if (!sub_1000C24F4(v13))
  {
    swift_release();
    if (!sub_1000B4674())
      sub_1000B4684();
  }
  v14 = sub_1000CF8BC();
  sub_1000989A0(v14);
  sub_1000BD578(v7[17]);
  sub_1000BC644(v6 + v7[18]);
  sub_1000BC644(v6 + v7[19]);
  sub_1000BC644(v6 + v7[20]);
  v15 = sub_1000DAAA4();
  v16 = type metadata accessor for DetailChartDataElement(v15);
  if (!sub_10007A06C(v12))
    sub_1000BDD1C(v12, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8));
  sub_1000BD578(v7[22]);
  v17 = sub_1000DAAA4();
  v18 = type metadata accessor for ChartPeakMarkStyle(v17);
  sub_1000B2568(v18);
  sub_1000BD578(v7[25]);
  v19 = sub_1000DAAA4();
  v20 = type metadata accessor for ChartViewModelInterpolationMode(v19);
  sub_1000B2568(v20);
  v21 = sub_1000DAAA4();
  v22 = type metadata accessor for ChartPastDataTreatment(v21);
  sub_1000B2568(v22);
  sub_1000BA548(v6 + v7[28]);
  sub_1000BA548(v6 + v7[29]);
  sub_1000BA548(v6 + v7[30]);
  sub_1000BA548(v6 + v7[31]);
  sub_1000BA548(v6 + v7[32]);
  sub_10009DAA8(v6 + v7[33]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v6 + *(int *)(v1 + 28)));
  sub_1000B15F8(*(_QWORD *)(v6 + *(int *)(v1 + 32)), *(_BYTE *)(v6 + *(int *)(v1 + 32) + 8));
  v23 = sub_1000BA294(&qword_100BC68C8);
  if (sub_100098814(v23) == 1)
  {
    v24 = sub_1000BF1F0();
    sub_1000987E0(v24);
  }
  else
  {
    sub_1000B4394();
  }
  v25 = sub_1000BA294(&qword_100BC2908);
  if (sub_100098814(v25) == 1)
  {
    v26 = sub_1000E7C40();
    sub_1000987E0(v26);
  }
  else
  {
    sub_1000B4394();
  }
  v27 = sub_1000BCF7C();
  sub_10003BC44(v27);
  return sub_1000BBBC0(v0, v4 + v5, v3 | 7);
}

void sub_1005D1470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000EB048();
  sub_1005CB634(v0, v1 + 16, v1 + 56, v1 + ((v3 + 104) & ~v3), v2, *(double *)(v1 + 96));
}

unint64_t sub_1005D14B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF43C8;
  if (!qword_100BF43C8)
  {
    v1 = sub_100075EB0(&qword_100BF43C0);
    sub_1005D17C0((uint64_t)&unk_100BF43D0);
    sub_1005D1654();
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF43C8);
  }
  return result;
}

unint64_t sub_1005D1548()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_100BF43E0;
  if (!qword_100BF43E0)
  {
    v1 = sub_100075EB0(&qword_100BF43E8);
    v2 = sub_100075EB0(&qword_100BDCC88);
    v4 = type metadata accessor for AxisGridLine(255);
    v5 = &type metadata for Color;
    v6 = &protocol witness table for AxisGridLine;
    v7 = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    v4 = v2;
    v5 = (void *)OpaqueTypeConformance2;
    v8 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of AxisMark.offset(x:y:)>>, 1);
    v4 = type metadata accessor for AxisTick(255);
    v5 = &type metadata for Color;
    v6 = &protocol witness table for AxisTick;
    v7 = &protocol witness table for Color;
    v9 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF43E0);
  }
  return result;
}

unint64_t sub_1005D1654()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100BF43F0;
  if (!qword_100BF43F0)
  {
    v1 = sub_100075EB0(&qword_100BF43F8);
    v2 = sub_100075EB0(&qword_100BF43A8);
    sub_10027248C((uint64_t)&unk_100BF43B0);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of AxisMark.offset(x:y:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BF43F0);
  }
  return result;
}

uint64_t sub_1005D1700()
{
  return sub_1005D170C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1005CC5F4);
}

uint64_t sub_1005D170C(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

void sub_1005D1728(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_1005CE984(v1[2], v1[3], v1[4], v1[5], a1);
}

unint64_t sub_1005D1734()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4418;
  if (!qword_100BF4418)
  {
    v1 = sub_100075EB0(&qword_100BF4410);
    sub_1005D17C0((uint64_t)&unk_100BF4420);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4418);
  }
  return result;
}

void sub_1005D17C0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  void (*v3)(void);
  uint64_t *v4;
  uint64_t v5;

  if (!sub_10009987C(a1))
  {
    v5 = sub_1000AE8E8(0, v4);
    v3();
    atomic_store(swift_getWitnessTable(v2, v5), v1);
  }
  sub_100099960();
}

unint64_t sub_1005D1808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4430;
  if (!qword_100BF4430)
  {
    v1 = sub_100075EB0(&qword_100BF4438);
    sub_1005D1894();
    sub_10007A100((uint64_t)&unk_100BF4458);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4430);
  }
  return result;
}

unint64_t sub_1005D1894()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4440;
  if (!qword_100BF4440)
  {
    v1 = sub_100075EB0(&qword_100BF4448);
    sub_10007A100((uint64_t)&unk_100BF4450);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4440);
  }
  return result;
}

uint64_t sub_1005D1910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1005CD8FC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1005D1918()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;

  result = qword_100BF4488;
  if (!qword_100BF4488)
  {
    v1 = sub_100075EB0(&qword_100BF4480);
    v2 = sub_100075EB0(&qword_100BF4490);
    v3 = sub_100075EB0(&qword_100BF4498);
    v4 = sub_100075EB0(&qword_100BF44A0);
    v9 = type metadata accessor for BarMark(255);
    v10 = &protocol witness table for BarMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of ChartContent.cornerRadius(_:style:)>>, 1);
    v9 = v4;
    v10 = &type metadata for AnyShapeStyle;
    v11 = OpaqueTypeConformance2;
    v12 = &protocol witness table for AnyShapeStyle;
    v6 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v7 = sub_100114EF8();
    v9 = v3;
    v10 = &type metadata for String;
    v11 = v6;
    v12 = (void *)v7;
    v8 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of ChartContent.accessibilityLabel<A>(_:)>>, 1);
    v9 = v2;
    v10 = &type metadata for String;
    v11 = v8;
    v12 = (void *)v7;
    swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of ChartContent.accessibilityValue<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4488);
  }
  return result;
}

uint64_t sub_1005D1A58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  void (*v21)(uint64_t, uint64_t, double);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = type metadata accessor for ChartView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v38 = *(_QWORD *)(v2 + 64);
  v39 = type metadata accessor for DetailChartGradientModel(0);
  v4 = *(_QWORD *)(v39 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v37 = *(_QWORD *)(v4 + 64);
  v6 = v0 + ((v3 + 16) & ~v3);
  swift_bridgeObjectRelease();
  v7 = (int *)sub_1000995F0();
  v8 = sub_1000C1F28();
  v9 = type metadata accessor for ChartKind(v8);
  sub_1000989A0(v9);
  sub_10009D420(v7[6]);
  v10 = sub_1000C1F28();
  v11 = type metadata accessor for DetailChartExtrema(v10);
  sub_1000989A0(v11);
  sub_10009D420(v7[8]);
  sub_10009D420(v7[9]);
  sub_1000D1254(v6 + v7[11]);
  v12 = v7[12];
  v13 = v6 + v12 + *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v14 = sub_100098778();
  if (!sub_10007A06C(v13))
    sub_1000BDD1C(v13, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8));
  v15 = v6 + v7[14];
  v16 = sub_1000BA294(&qword_100BCB988);
  if (!_s7Weather24LocationCompositionStateOwet_0(v15, 1, v16))
  {
    swift_release();
    v17 = v15 + *(int *)(v16 + 48);
    if (!sub_10007A06C(v17))
      sub_1000BDD1C(v17, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8));
  }
  v18 = v6 + v7[16];
  v19 = sub_1000CF8BC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = sub_10009D420(v7[17]);
  v21 = *(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)(v14 - 8) + 8);
  v21(v6 + v7[18], v14, v20);
  sub_1000CDD38(v7[19]);
  sub_1000CDD38(v7[20]);
  v22 = sub_1000C1F28();
  v23 = type metadata accessor for DetailChartDataElement(v22);
  if (!sub_1000C24F4(v23))
    (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, double)))(*((_QWORD *)v21 - 1) + 8))(v14, v21);
  sub_10009D420(v7[22]);
  v24 = sub_1000C1F28();
  v25 = type metadata accessor for ChartPeakMarkStyle(v24);
  sub_1000989A0(v25);
  sub_10009D420(v7[25]);
  v26 = sub_1000C1F28();
  v27 = type metadata accessor for ChartViewModelInterpolationMode(v26);
  sub_1000989A0(v27);
  v28 = sub_1000C1F28();
  v29 = type metadata accessor for ChartPastDataTreatment(v28);
  sub_1000989A0(v29);
  sub_1000BA548(v6 + v7[28]);
  sub_1000BA548(v6 + v7[29]);
  sub_1000BA548(v6 + v7[30]);
  sub_1000BA548(v6 + v7[31]);
  sub_1000BA548(v6 + v7[32]);
  sub_10009DAA8(v6 + v7[33]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v6 + *(int *)(v1 + 28)));
  sub_1000B15F8(*(_QWORD *)(v6 + *(int *)(v1 + 32)), *(_BYTE *)(v6 + *(int *)(v1 + 32) + 8));
  v30 = sub_1000BA294(&qword_100BC68C8);
  if (sub_1000952AC(v30) == 1)
  {
    v31 = sub_1000BF1F0();
    sub_1000B2568(v31);
  }
  else
  {
    swift_release();
  }
  v32 = sub_1000BA294(&qword_100BC2908);
  if (sub_1000952AC(v32) == 1)
  {
    v33 = sub_1000E7C40();
    sub_1000B2568(v33);
  }
  else
  {
    swift_release();
  }
  v34 = (((v3 + 16) & ~v3) + v38 + v5) & ~v5;
  v35 = sub_1000BCF7C();
  sub_1000987E0(v35);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v34, v39);
  return swift_deallocObject(v0, v34 + v37, v3 | v5 | 7);
}

uint64_t sub_1005D1D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for ChartView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DetailChartGradientModel(0) - 8) + 80);
  return sub_1005CDC5C(a1, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

uint64_t sub_1005D1E14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1005CE3A4(*(_QWORD *)(v1 + 16), a1);
}

void sub_1005D1E1C(uint64_t a1@<X8>)
{
  sub_1005CD7F0(a1);
}

uint64_t *sub_1005D1E24(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BCB988);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      v8 = type metadata accessor for ChartViewModel.Background(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v10 = *(int *)(v7 + 48);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for Date(0);
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
      {
        v14 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
    v15 = a3[5];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for ChartProxy(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[6];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = a3[7];
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v25) == 1)
    {
      v27 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = v24;
      v29 = v26;
      v30 = 1;
    }
    else
    {
      *v24 = *v25;
      swift_retain();
      v28 = v24;
      v29 = v26;
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v29, v30);
  }
  return a1;
}

double sub_1005D2048(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v4 = sub_1000BA294(&qword_100BCB988);
  if (!_s7Weather24LocationCompositionStateOwet_0(a1, 1, v4))
  {
    swift_release();
    v5 = a1 + *(int *)(v4 + 48);
    v6 = type metadata accessor for Date(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  v7 = a1 + a2[5];
  v8 = type metadata accessor for ChartProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[6];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[7];
  sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v11) == 1)
  {
    v12 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

_QWORD *sub_1005D2174(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = type metadata accessor for ChartViewModel.Background(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v8 = *(int *)(v6 + 48);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
    {
      v12 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v13 = a3[5];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for ChartProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = a3[7];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v23) == 1)
  {
    v25 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
    v26 = v22;
    v27 = v24;
    v28 = 1;
  }
  else
  {
    *v22 = *v23;
    swift_retain();
    v26 = v22;
    v27 = v24;
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v26, v27, v28);
  return a1;
}

_QWORD *sub_1005D236C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;

  v6 = sub_1000BA294(&qword_100BCB988);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      *a1 = *a2;
      v9 = *(int *)(v6 + 48);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for Date(0);
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
      {
        v13 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
      }
      v23 = (uint64_t)a1;
      v24 = v6;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_100021A14((uint64_t)a1, &qword_100BCB988);
LABEL_7:
    v14 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for ChartViewModel.Background(0) - 8) + 64);
    v15 = a1;
    v16 = a2;
LABEL_8:
    memcpy(v15, v16, v14);
    goto LABEL_15;
  }
  *a1 = *a2;
  swift_retain();
  swift_release();
  v17 = *(int *)(v6 + 48);
  v18 = (uint64_t)a1 + v17;
  v19 = (uint64_t)a2 + v17;
  v20 = type metadata accessor for Date(0);
  v21 = _s7Weather24LocationCompositionStateOwet_0(v18, 1, v20);
  v22 = _s7Weather24LocationCompositionStateOwet_0(v19, 1, v20);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      v23 = v18;
      v24 = v20;
LABEL_14:
      _s7Weather24LocationCompositionStateOwst_0(v23, 0, 1, v24);
      goto LABEL_15;
    }
    goto LABEL_23;
  }
  v42 = *(_QWORD *)(v20 - 8);
  if (v22)
  {
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v18, v20);
LABEL_23:
    v14 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
    v15 = (void *)v18;
    v16 = (const void *)v19;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 24))(v18, v19, v20);
LABEL_15:
  v25 = a3[5];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for ChartProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 24))(v26, v27, v28);
  v29 = a3[6];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 24))(v30, v31, v32);
  if (a1 != a2)
  {
    v33 = a3[7];
    v34 = (_QWORD *)((char *)a1 + v33);
    v35 = (_QWORD *)((char *)a2 + v33);
    sub_100021A14((uint64_t)a1 + v33, &qword_100BC2908);
    v36 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v35) == 1)
    {
      v37 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
      v38 = v34;
      v39 = v36;
      v40 = 1;
    }
    else
    {
      *v34 = *v35;
      swift_retain();
      v38 = v34;
      v39 = v36;
      v40 = 0;
    }
    swift_storeEnumTagMultiPayload(v38, v39, v40);
  }
  return a1;
}

_QWORD *sub_1005D2680(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = type metadata accessor for ChartViewModel.Background(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v8 = *(int *)(v6 + 48);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
    {
      v12 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v13 = a3[5];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for ChartProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  v21 = a3[7];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v23) == 1)
  {
    v25 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
    swift_storeEnumTagMultiPayload(v22, v24, 1);
  }
  else
  {
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_1005D286C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  v6 = sub_1000BA294(&qword_100BCB988);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      *a1 = *a2;
      v9 = *(int *)(v6 + 48);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
      {
        v13 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
      }
      v23 = (uint64_t)a1;
      v24 = v6;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_100021A14((uint64_t)a1, &qword_100BCB988);
LABEL_7:
    v14 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for ChartViewModel.Background(0) - 8) + 64);
    v15 = a1;
    v16 = a2;
LABEL_8:
    memcpy(v15, v16, v14);
    goto LABEL_15;
  }
  *a1 = *a2;
  swift_release();
  v17 = *(int *)(v6 + 48);
  v18 = (uint64_t)a1 + v17;
  v19 = (uint64_t)a2 + v17;
  v20 = type metadata accessor for Date(0);
  v21 = _s7Weather24LocationCompositionStateOwet_0(v18, 1, v20);
  v22 = _s7Weather24LocationCompositionStateOwet_0(v19, 1, v20);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      v23 = v18;
      v24 = v20;
LABEL_14:
      _s7Weather24LocationCompositionStateOwst_0(v23, 0, 1, v24);
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  v39 = *(_QWORD *)(v20 - 8);
  if (v22)
  {
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v18, v20);
LABEL_22:
    v14 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
    v15 = (void *)v18;
    v16 = (const void *)v19;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40))(v18, v19, v20);
LABEL_15:
  v25 = a3[5];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for ChartProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
  v29 = a3[6];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 40))(v30, v31, v32);
  if (a1 != a2)
  {
    v33 = a3[7];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    sub_100021A14((uint64_t)a1 + v33, &qword_100BC2908);
    v36 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v35) == 1)
    {
      v37 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v34, v35, v37);
      swift_storeEnumTagMultiPayload(v34, v36, 1);
    }
    else
    {
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1005D2B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005D2B78);
}

uint64_t sub_1005D2B78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  sub_1000C2284();
  sub_100088FF0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    type metadata accessor for ChartProxy(0);
    sub_100088FF0();
    if (v9)
    {
      v7 = v10;
      v11 = a3[5];
    }
    else
    {
      sub_100098778();
      sub_100088FF0();
      if (v12)
      {
        v7 = v13;
        v11 = a3[6];
      }
      else
      {
        v7 = sub_1000BA294(&qword_100BC3800);
        v11 = a3[7];
      }
    }
    v8 = v4 + v11;
  }
  return sub_1000B250C(v8, v3, v7);
}

uint64_t sub_1005D2BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005D2C08);
}

uint64_t sub_1005D2C08(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_1000C2284();
  sub_10009D2E8();
  if (v10)
  {
    v8 = v7;
    v9 = v5;
  }
  else
  {
    type metadata accessor for ChartProxy(0);
    sub_10009D2E8();
    if (v10)
    {
      v8 = v11;
      v12 = a4[5];
    }
    else
    {
      sub_100098778();
      sub_10009D2E8();
      if (v13)
      {
        v8 = v14;
        v12 = a4[6];
      }
      else
      {
        v8 = sub_1000BA294(&qword_100BC3800);
        v12 = a4[7];
      }
    }
    v9 = v5 + v12;
  }
  return sub_1000987C4(v9, v4, v4, v8);
}

void sub_1005D2C94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  v2 = type metadata accessor for ChartViewModel.Background(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ChartProxy(319);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for Date(319);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100158B48(319, (unint64_t *)&qword_100BC3880, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

unint64_t sub_1005D2D64()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = qword_100BF4558;
  if (!qword_100BF4558)
  {
    v1 = sub_100075EB0(&qword_100BF4220);
    v2 = sub_100075EB0(&qword_100BF4210);
    v3 = sub_100075EB0(&qword_100BF4208);
    v4 = type metadata accessor for ChartViewModel(255);
    v5 = sub_1005D0F78();
    sub_10007A100((uint64_t)&unk_100BF4370);
    v8 = v3;
    v9 = v4;
    v10 = v5;
    v11 = v6;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.accessibilityChartDescriptor<A>(_:)>>, 1);
    v8 = v2;
    v9 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    sub_10027248C((uint64_t)&unk_100BF4560);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4558);
  }
  return result;
}

uint64_t sub_1005D2E7C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABA690, 1);
}

double sub_1005D2E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, char a18)
{
  double result;

  if ((a18 & 1) != 0)
  {
    swift_retain();
    return sub_1005D2F5C(a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17 & 1);
  }
  return result;
}

double sub_1005D2F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  double result;

  if ((a13 & 1) == 0)
    a1 = a12;
  *(_QWORD *)&result = swift_retain(a1).n128_u64[0];
  return result;
}

uint64_t sub_1005D2F70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD);

  v2 = sub_10009987C(a1);
  v3(v2, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_WORD *)(v1 + 128));
  return v1;
}

uint64_t sub_1005D2FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, char a18)
{
  uint64_t result;

  if ((a18 & 1) != 0)
  {
    swift_release();
    return sub_1005D30A8(a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17 & 1);
  }
  return result;
}

uint64_t sub_1005D30A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if ((a13 & 1) == 0)
    a1 = a12;
  return swift_release(a1);
}

uint64_t sub_1005D30BC(uint64_t result)
{
  *(_BYTE *)(result + 129) = 1;
  return result;
}

uint64_t sub_1005D30C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v12 = *(_OWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v10 = *(_BYTE *)(a1 + 128);
  swift_retain();
  sub_1005D2F5C(v14, v13, v2, v3, v4, v5, v6, v7, v12, *((uint64_t *)&v12 + 1), v9, v8, v10);
  return a1;
}

unint64_t sub_1005D3170()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4580;
  if (!qword_100BF4580)
  {
    v1 = sub_100075EB0(&qword_100BF4578);
    sub_10027248C((uint64_t)&unk_100BF4588);
    sub_10027248C((uint64_t)&unk_100BF4598);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4580);
  }
  return result;
}

uint64_t sub_1005D320C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v12 = *(_OWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v10 = *(_BYTE *)(a1 + 128);
  swift_release();
  sub_1005D30A8(v14, v13, v2, v3, v4, v5, v6, v7, v12, *((uint64_t *)&v12 + 1), v9, v8, v10);
  return a1;
}

uint64_t sub_1005D32B4(uint64_t result)
{
  *(_BYTE *)(result + 129) = 0;
  return result;
}

ValueMetadata *type metadata accessor for ChartBackgroundShape()
{
  return &type metadata for ChartBackgroundShape;
}

void sub_1005D32CC()
{
  sub_10027248C((uint64_t)&unk_100BF45B8);
}

void sub_1005D32F8()
{
  sub_10027248C((uint64_t)&unk_100BF45C8);
}

unint64_t sub_1005D3328()
{
  unint64_t result;

  result = qword_100BF45D8;
  if (!qword_100BF45D8)
  {
    result = swift_getWitnessTable(&unk_1009B2808, &type metadata for ChartBackgroundShape);
    atomic_store(result, (unint64_t *)&qword_100BF45D8);
  }
  return result;
}

unint64_t sub_1005D3368()
{
  unint64_t result;

  result = qword_100BF45E0;
  if (!qword_100BF45E0)
  {
    result = swift_getWitnessTable(&unk_1009B27B8, &type metadata for ChartBackgroundShape);
    atomic_store(result, (unint64_t *)&qword_100BF45E0);
  }
  return result;
}

unint64_t sub_1005D33A4()
{
  unint64_t result;

  result = qword_100BF45E8;
  if (!qword_100BF45E8)
  {
    result = swift_getWitnessTable(&unk_1009B2858, &type metadata for ChartBackgroundShape);
    atomic_store(result, (unint64_t *)&qword_100BF45E8);
  }
  return result;
}

_QWORD *sub_1005D33E0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for ScrubberDay(0);
    *(_QWORD *)((char *)a1 + v8[5]) = *(_QWORD *)((char *)a2 + v8[5]);
    v9 = v8[6];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *((_BYTE *)a1 + v8[7]) = *((_BYTE *)a2 + v8[7]);
    v13 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
    v14 = a3[7];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v16) == 1)
    {
      v18 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      *v15 = *v16;
      swift_retain();
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
  }
  return a1;
}

double sub_1005D3538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for ScrubberDay(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 28);
  sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v5) == 1)
  {
    v6 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_1005D35F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for ScrubberDay(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v12 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v15) == 1)
  {
    v17 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
    v18 = 1;
  }
  else
  {
    *v14 = *v15;
    swift_retain();
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v18);
  return a1;
}

uint64_t sub_1005D371C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for ScrubberDay(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = v7[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  if (a1 != a2)
  {
    v11 = a3[7];
    v12 = (_QWORD *)(a1 + v11);
    v13 = (_QWORD *)(a2 + v11);
    sub_100021A14(a1 + v11, &qword_100BC2908);
    v14 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v13) == 1)
    {
      v15 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      *v12 = *v13;
      swift_retain();
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
  }
  return a1;
}

uint64_t sub_1005D3878(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for ScrubberDay(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v8 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[7];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v11) == 1)
  {
    v13 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
    swift_storeEnumTagMultiPayload(v10, v12, 1);
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1005D3980(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for ScrubberDay(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  swift_bridgeObjectRelease();
  v8 = v7[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v13 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  if (a1 != a2)
  {
    v14 = a3[7];
    v15 = (void *)(a1 + v14);
    v16 = (const void *)(a2 + v14);
    sub_100021A14(a1 + v14, &qword_100BC2908);
    v17 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v16) == 1)
    {
      v18 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1005D3ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005D3AC8);
}

uint64_t sub_1005D3AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1000BB1E0();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BC3800);
    v8 = a1 + *(int *)(a3 + 28);
  }
  return _s7Weather24LocationCompositionStateOwet_0(v8, a2, v7);
}

uint64_t sub_1005D3B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005D3B3C);
}

uint64_t sub_1005D3B3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_1000BB1E0();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = sub_1000BA294(&qword_100BC3800);
    v10 = a1 + *(int *)(a4 + 28);
  }
  return _s7Weather24LocationCompositionStateOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for ScrubberDayView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF4648;
  if (!qword_100BF4648)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ScrubberDayView);
  return result;
}

void sub_1005D3BE4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for ScrubberDay(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_100158C28(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_1005D3C78(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABA6E0, 1);
}

uint64_t sub_1005D3C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v2 = type metadata accessor for LayoutDirection(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100079FBC();
  sub_1000C2D10();
  sub_1001591C8();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  if (v4 == enum case for LayoutDirection.leftToRight(_:))
  {
    v5 = *(_QWORD *)(v0 + *(int *)(sub_1000BB1E0() + 20));
    sub_1000989F8();
  }
  else
  {
    v6 = v4;
    v7 = enum case for LayoutDirection.rightToLeft(_:);
    v5 = *(_QWORD *)(v0 + *(int *)(sub_1000BB1E0() + 20));
    if (v6 == v7)
    {
      v8 = sub_1000989F8();
      sub_1002029E0(v8);
      return v9;
    }
    else
    {
      v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      sub_1000989F8();
      v10(v1, v2);
    }
  }
  return v5;
}

uint64_t sub_1005D3D80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a1;
  v3 = type metadata accessor for ColorRenderingMode(0);
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000C2D10();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = sub_1000BA294(&qword_100BDF7F0);
  v25 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100079FBC();
  v10 = sub_1000BA294(&qword_100BF4688);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(sub_1005D3C88() + 16);
  swift_bridgeObjectRelease();
  if (v13)
  {
    sub_100080C0C(v1, (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ScrubberDayView);
    v14 = *(unsigned __int8 *)(v7 + 80);
    v15 = (v14 + 16) & ~v14;
    v16 = swift_allocObject(&unk_100B82978, v15 + v8, v14 | 7);
    sub_10007802C((uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, type metadata accessor for ScrubberDayView);
    (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v5, enum case for ColorRenderingMode.nonLinear(_:), v24);
    Canvas<>.init(opaque:colorMode:rendersAsynchronously:renderer:)(0, v5, 1, sub_1005D4980, v16);
    v17 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v12, v2, v9);
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v18 = sub_1005D49D0();
    sub_1000C4C28(v18, (uint64_t)&type metadata for EmptyView, v19, (uint64_t)&protocol witness table for EmptyView, v18);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v2, v9);
  }
  else
  {
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v21 = sub_1005D49D0();
    return sub_1000C4C28(v21, (uint64_t)&type metadata for EmptyView, v22, (uint64_t)&protocol witness table for EmptyView, v21);
  }
}

void sub_1005D3FB4(uint64_t *a1, char *a2, double a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  int v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  char *v51;
  int v52;
  uint64_t v53;
  int v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  char *v63;
  int v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  __n128 v72;
  char *v73;
  __n128 v74;
  int v75;
  uint64_t v76;
  __n128 v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  char *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[6];

  v94 = a1;
  v6 = type metadata accessor for GraphicsContext.Shading(0);
  v92 = *(_QWORD *)(v6 - 8);
  v93 = v6;
  __chkstk_darwin(v6);
  v91 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BDF348);
  __chkstk_darwin(v8);
  v81 = (uint64_t)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v78 - v11;
  v13 = type metadata accessor for LayoutDirection(0);
  v98 = *(_QWORD *)(v13 - 8);
  v99 = v13;
  __chkstk_darwin(v13);
  v78 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v79 = (char *)&v78 - v16;
  __chkstk_darwin(v17);
  v84 = (char *)&v78 - v18;
  __chkstk_darwin(v19);
  v95 = (char *)&v78 - v20;
  v90 = sub_1000BA294(&qword_100BF4690);
  __chkstk_darwin(v90);
  v22 = (uint64_t *)((char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v23);
  v89 = (char *)&v78 - v24;
  __chkstk_darwin(v25);
  v87 = (char **)((char *)&v78 - v26);
  v80 = sub_1005D3C88();
  v88 = *(_QWORD *)(v80 + 16);
  if (v88)
  {
    v27 = 0;
    v96 = type metadata accessor for ScrubberHour(0);
    v28 = *(_QWORD *)(v96 - 8);
    v29 = *(_QWORD *)(v28 + 72);
    v82 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    v30 = v80 + v82;
    v97 = enum case for LayoutDirection.leftToRight(_:);
    v86 = enum case for LayoutDirection.rightToLeft(_:);
    v83 = v12;
    v85 = v29;
    do
    {
      v31 = v90;
      v32 = (uint64_t)&v89[*(int *)(v90 + 48)];
      sub_100080C0C(v30, v32, type metadata accessor for ScrubberHour);
      v33 = (uint64_t)v87;
      v34 = (uint64_t)v87 + *(int *)(v31 + 48);
      *v87 = v27;
      sub_10007802C(v32, v34, type metadata accessor for ScrubberHour);
      sub_1005D4A14(v33, (uint64_t)v22);
      v35 = *v22;
      v100 = *(int *)(v31 + 48);
      v101 = v35;
      type metadata accessor for ScrubberDayView(0);
      v36 = v95;
      sub_1001591C8();
      v37 = *(uint64_t (**)(char *, uint64_t))(v98 + 88);
      v38 = v37(v36, v99);
      if ((_DWORD)v38 != v97)
      {
        if ((_DWORD)v38 == v86)
        {
          v39 = v84;
          sub_1001591C8();
          v40 = v37(v39, v99);
          if (v40 == v97)
          {
            v41 = *(_QWORD *)&a2[*(int *)(type metadata accessor for ScrubberDay(0) + 20)];
            swift_bridgeObjectRetain();
          }
          else
          {
            v42 = v40;
            v41 = *(_QWORD *)&a2[*(int *)(type metadata accessor for ScrubberDay(0) + 20)];
            v43 = swift_bridgeObjectRetain();
            if (v42 == v86)
            {
              sub_1002029E0(v41);
              v41 = v44;
            }
            else
            {
              (*(void (**)(char *, uint64_t, __n128))(v98 + 8))(v84, v99, v43);
            }
          }
          v45 = (uint64_t)v83;
          if (*(_QWORD *)(v41 + 16))
          {
            sub_100080C0C(v41 + v82, (uint64_t)v83, type metadata accessor for ScrubberHour);
            v46 = 0;
          }
          else
          {
            v46 = 1;
          }
          v47 = v96;
          _s7Weather24LocationCompositionStateOwst_0(v45, v46, 1, v96);
          swift_bridgeObjectRelease();
          v48 = _s7Weather24LocationCompositionStateOwet_0(v45, 1, v47);
          v49 = v45;
          if (v48 != 1)
          {
            v50 = *(unsigned __int8 *)(v45 + *(int *)(v47 + 20));
            v38 = sub_1005D4A6C(v45);
            v29 = v85;
            if (v50 != 1)
              goto LABEL_29;
            v51 = v79;
            sub_1001591C8();
            v52 = v37(v51, v99);
            if (v52 == v97)
            {
              v53 = *(_QWORD *)&a2[*(int *)(type metadata accessor for ScrubberDay(0) + 20)];
              swift_bridgeObjectRetain();
            }
            else
            {
              v54 = v52;
              v53 = *(_QWORD *)&a2[*(int *)(type metadata accessor for ScrubberDay(0) + 20)];
              v55 = swift_bridgeObjectRetain();
              if (v54 == v86)
              {
                sub_1002029E0(v53);
                v53 = v56;
              }
              else
              {
                (*(void (**)(char *, uint64_t, __n128))(v98 + 8))(v79, v99, v55);
              }
            }
            v57 = *(_QWORD *)(v53 + 16);
            if (v57)
            {
              v58 = v81;
              sub_100080C0C(v53 + v82 + (v57 - 1) * v85, v81, type metadata accessor for ScrubberHour);
              v59 = 0;
            }
            else
            {
              v59 = 1;
              v58 = v81;
            }
            v60 = v96;
            _s7Weather24LocationCompositionStateOwst_0(v58, v59, 1, v96);
            swift_bridgeObjectRelease();
            v61 = _s7Weather24LocationCompositionStateOwet_0(v58, 1, v60);
            v49 = v58;
            if (v61 != 1)
            {
              v62 = *(unsigned __int8 *)(v81 + *(int *)(v60 + 20));
              v38 = sub_1005D4A6C(v81);
              v29 = v85;
              if (v62 == 1)
              {
                v63 = v78;
                sub_1001591C8();
                v64 = v37(v63, v99);
                if (v64 == v97)
                {
                  v38 = type metadata accessor for ScrubberDay(0);
                }
                else
                {
                  v75 = v64;
                  v76 = *(_QWORD *)&a2[*(int *)(type metadata accessor for ScrubberDay(0) + 20)];
                  v77 = swift_bridgeObjectRetain();
                  if (v75 == v86)
                    sub_1002029E0(v76);
                  else
                    (*(void (**)(char *, uint64_t, __n128))(v98 + 8))(v78, v99, v77);
                  swift_bridgeObjectRelease();
                }
              }
              goto LABEL_29;
            }
          }
          sub_100021A14(v49, &qword_100BDF348);
          v29 = v85;
        }
        else
        {
          v38 = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v95, v99);
        }
      }
LABEL_29:
      v65 = (char *)v22 + v100;
      v66 = __chkstk_darwin(v38).n128_u64[0];
      *(&v78 - 6) = v67;
      *(&v78 - 5) = 0;
      *(&v78 - 4) = (char *)v66;
      *((double *)&v78 - 3) = a4;
      *(&v78 - 2) = a2;
      Path.init(_:)(v102, sub_1005D4A5C, &v78 - 8);
      v68 = *v94;
      LODWORD(v65) = v65[*(int *)(v96 + 20)];
      v70 = swift_retain();
      if ((_DWORD)v65 == 1)
      {
        v71 = static Color.white.getter(v69);
      }
      else
      {
        static Color.gray.getter(v70);
        v71 = Color.opacity(_:)(0.5);
        v72 = swift_release();
      }
      ++v27;
      v73 = v91;
      static GraphicsContext.Shading.color(_:)(v71, v72);
      v74 = swift_release();
      GraphicsContext.fill(_:with:style:)(v102, v73, 256, v68, v74);
      swift_release();
      sub_100154604((uint64_t)v102);
      (*(void (**)(char *, uint64_t))(v92 + 8))(v73, v93);
      sub_100021A14((uint64_t)v22, &qword_100BF4690);
      v30 += v29;
    }
    while (v88 != v27);
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_1005D4790(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  _QWORD v17[6];

  v11 = type metadata accessor for RoundedCornerStyle(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(double *)(a6 + *(int *)(type metadata accessor for ScrubberDayView(0) + 20)) * 0.5;
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for RoundedCornerStyle.continuous(_:), v11);
  v17[0] = 0x3FF0000000000000;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = 0x3FF0000000000000;
  v17[4] = 0;
  v17[5] = 0;
  Path.addRoundedRect(in:cornerSize:style:transform:)(v14, v17, a1, a2, a3, a4, v15, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1005D48A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_1000C2D10();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  sub_1000BB1E0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v0 + v4 + *(int *)(v1 + 28);
  sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v7) == 1)
  {
    v8 = type metadata accessor for LayoutDirection(0);
    sub_10003BC44(v8);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_1005D4980(uint64_t *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000C2D10() - 8) + 80);
  sub_1005D3FB4(a1, (char *)(v3 + ((v7 + 16) & ~v7)), a2, a3);
}

unint64_t sub_1005D49D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDF818;
  if (!qword_100BDF818)
  {
    v1 = sub_100075EB0(&qword_100BDF7F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for Canvas<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BDF818);
  }
  return result;
}

uint64_t sub_1005D4A14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BF4690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005D4A5C(uint64_t a1)
{
  uint64_t v1;

  return sub_1005D4790(*(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), a1, *(_QWORD *)(v1 + 48));
}

uint64_t sub_1005D4A6C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ScrubberHour(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1005D4AAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4698;
  if (!qword_100BF4698)
  {
    v1 = sub_100075EB0(&qword_100BF46A0);
    sub_1005D49D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4698);
  }
  return result;
}

uint64_t sub_1005D4B18(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  void (*v79)(char *, char *, uint64_t, __n128);
  __n128 v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  char *v94;
  char *v95;
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  void (*v98)(char *, uint64_t, uint64_t, __n128);
  uint64_t v99;
  uint64_t v100;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v57 = *a2;
    *(_QWORD *)a1 = *a2;
    v47 = v57 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a3[7];
    v10 = (char *)(a1 + v9);
    v11 = (uint64_t)a2 + v9;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    v97 = v12;
    v98 = v13;
    swift_bridgeObjectRetain();
    v14 = swift_bridgeObjectRetain();
    v13(v10, v11, v12, v14);
    v15 = a3[8];
    v16 = a1 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[9];
    v20 = a1 + v19;
    v21 = (uint64_t)a2 + v19;
    v22 = type metadata accessor for AttributedString(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = a3[11];
    *(_QWORD *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    v24 = (_QWORD *)(a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = a3[12];
    v100 = a1;
    v28 = (_QWORD *)(a1 + v27);
    v29 = (uint64_t)a2 + v27;
    *v28 = *(uint64_t *)((char *)a2 + v27);
    v30 = (int *)_s14ChartViewModelVMa(0);
    v31 = v30[5];
    v93 = v29 + v31;
    v95 = (char *)v28 + v31;
    v32 = type metadata accessor for DetailChartDataElement(0);
    v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v32 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v34 = swift_bridgeObjectRetain();
    v33(v95, v93, v32, v34);
    v35 = v30[6];
    v36 = (char *)v28 + v35;
    v37 = v29 + v35;
    v38 = type metadata accessor for Location(0);
    v96 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
    v96(v36, v37, v38);
    v39 = v30[7];
    v40 = (_QWORD *)((char *)v28 + v39);
    v41 = (uint64_t *)(v29 + v39);
    v42 = *v41;
    v43 = v41[1];
    *v40 = v42;
    v40[1] = v43;
    *(_QWORD *)((char *)v28 + v30[8]) = *(_QWORD *)(v29 + v30[8]);
    *(_QWORD *)((char *)v28 + v30[9]) = *(_QWORD *)(v29 + v30[9]);
    *(_QWORD *)((char *)v28 + v30[10]) = *(_QWORD *)(v29 + v30[10]);
    v44 = v30[11];
    v94 = (char *)v28 + v44;
    v45 = v29 + v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46 = swift_bridgeObjectRetain();
    v98(v94, v45, v97, v46);
    *(_QWORD *)((char *)v28 + v30[12]) = *(_QWORD *)(v29 + v30[12]);
    v47 = v100;
    v48 = a3[13];
    v49 = v100 + v48;
    v50 = (uint64_t)a2 + v48;
    v51 = swift_bridgeObjectRetain();
    ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v96)(v49, v50, v38, v51);
    v52 = a3[16];
    *(_QWORD *)(v100 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
    v53 = (_QWORD *)(v100 + v52);
    v54 = (uint64_t *)((char *)a2 + v52);
    v55 = type metadata accessor for DetailComponentContainerViewModel(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v54, 1, v55))
    {
      v56 = sub_1000BA294(&qword_100BC68A0);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      v58 = v54[1];
      if (v58)
      {
        *v53 = *v54;
        v53[1] = v58;
        v59 = v54[3];
        v53[2] = v54[2];
        v53[3] = v59;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v60 = *((_OWORD *)v54 + 1);
        *(_OWORD *)v53 = *(_OWORD *)v54;
        *((_OWORD *)v53 + 1) = v60;
      }
      v61 = *(int *)(v55 + 20);
      v62 = (_QWORD *)((char *)v53 + v61);
      v63 = (_QWORD *)((char *)v54 + v61);
      v64 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v63) == 1)
      {
        v99 = v64;
        v65 = v63[1];
        *v62 = *v63;
        v62[1] = v65;
        v66 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v67 = v66[5];
        v68 = (char *)v62 + v67;
        v69 = (char *)v63 + v67;
        v70 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v70))
        {
          v71 = sub_1000BA294(&qword_100BD4280);
          memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v68, 0, 1, v70);
        }
        v72 = v66[6];
        v73 = (_QWORD *)((char *)v62 + v72);
        v74 = (_QWORD *)((char *)v63 + v72);
        v75 = v74[1];
        *v73 = *v74;
        v73[1] = v75;
        v76 = v66[7];
        v77 = (char *)v62 + v76;
        v78 = (char *)v63 + v76;
        v79 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v70 - 8) + 16);
        v80 = swift_bridgeObjectRetain();
        v79(v77, v78, v70, v80);
        v81 = v66[8];
        v82 = (char *)v62 + v81;
        v83 = (char *)v63 + v81;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v63 + v81, 1, v70))
        {
          v84 = sub_1000BA294(&qword_100BD4280);
          memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v79)(v82, v83, v70);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v82, 0, 1, v70);
        }
        v47 = v100;
        *((_BYTE *)v62 + v66[9]) = *((_BYTE *)v63 + v66[9]);
        swift_storeEnumTagMultiPayload(v62, v99, 1);
      }
      else
      {
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      v85 = *(int *)(v55 + 24);
      v86 = (char *)v53 + v85;
      v87 = (char *)v54 + v85;
      v88 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v87, 1, v88))
      {
        v89 = sub_1000BA294(&qword_100BD3100);
        memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
      }
      else
      {
        v90 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v86, v87, v90);
        v91 = sub_1000BA294(&qword_100BC5FE8);
        v86[*(int *)(v91 + 48)] = v87[*(int *)(v91 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v86, 0, 1, v88);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v53, 0, 1, v55);
    }
  }
  return v47;
}

uint64_t sub_1005D5090(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  void (*v28)(uint64_t, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[7];
  v5 = type metadata accessor for Date(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[8];
  v8 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[9];
  v10 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = a1 + a2[12];
  swift_bridgeObjectRelease();
  v12 = (int *)_s14ChartViewModelVMa(0);
  v13 = v11 + v12[5];
  v14 = type metadata accessor for DetailChartDataElement(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v11 + v12[6];
  v16 = type metadata accessor for Location(0);
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
  v17(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t, __n128))v6)(v11 + v12[11], v5, v18);
  v19 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t, __n128))v17)(a1 + a2[13], v16, v19);
  swift_bridgeObjectRelease();
  v20 = a1 + a2[16];
  v21 = type metadata accessor for DetailComponentContainerViewModel(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v20, 1, v21);
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(v20 + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v23 = v20 + *(int *)(v21 + 20);
    type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v23) == 1)
    {
      swift_bridgeObjectRelease();
      v24 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v25 = v23 + v24[5];
      v26 = type metadata accessor for URL(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v25, 1, v26))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
      v27 = swift_bridgeObjectRelease();
      v28 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v26 - 8) + 8);
      v28(v23 + v24[7], v26, v27);
      v29 = v23 + v24[8];
      if (!_s7Weather24LocationCompositionStateOwet_0(v29, 1, v26))
        ((void (*)(uint64_t, uint64_t))v28)(v29, v26);
    }
    v30 = v20 + *(int *)(v21 + 24);
    v31 = type metadata accessor for DetailComponentAction(0);
    result = _s7Weather24LocationCompositionStateOwet_0(v30, 1, v31);
    if (!(_DWORD)result)
    {
      v32 = type metadata accessor for URL(0);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v30, v32);
    }
  }
  return result;
}

uint64_t sub_1005D5394(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, void *, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t, __n128);
  __n128 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  int *v95;
  void *__dsta;
  char *__dst;
  void (*v98)(uint64_t, uint64_t, void *, __n128);
  uint64_t v99;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(uint64_t, uint64_t, void *, __n128))(*(_QWORD *)(v11 - 8) + 16);
  __dsta = (void *)v11;
  v98 = v12;
  swift_bridgeObjectRetain();
  v13 = swift_bridgeObjectRetain();
  v12(v9, v10, (void *)v11, v13);
  v14 = a3[8];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  v95 = a3;
  v22 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = a3[12];
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_QWORD *)(a1 + v26) = *(_QWORD *)(a2 + v26);
  v29 = (int *)_s14ChartViewModelVMa(0);
  v30 = v29[5];
  v91 = v28 + v30;
  v93 = v27 + v30;
  v31 = type metadata accessor for DetailChartDataElement(0);
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v31 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33 = swift_bridgeObjectRetain();
  v32(v93, v91, v31, v33);
  v34 = v29[6];
  v35 = v27 + v34;
  v36 = v28 + v34;
  v37 = type metadata accessor for Location(0);
  v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
  v94(v35, v36, v37);
  v38 = v29[7];
  v39 = (_QWORD *)(v27 + v38);
  v40 = (uint64_t *)(v28 + v38);
  v41 = *v40;
  v42 = v40[1];
  *v39 = v41;
  v39[1] = v42;
  *(_QWORD *)(v27 + v29[8]) = *(_QWORD *)(v28 + v29[8]);
  *(_QWORD *)(v27 + v29[9]) = *(_QWORD *)(v28 + v29[9]);
  *(_QWORD *)(v27 + v29[10]) = *(_QWORD *)(v28 + v29[10]);
  v43 = v29[11];
  v92 = v27 + v43;
  v44 = v28 + v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v45 = swift_bridgeObjectRetain();
  v98(v92, v44, __dsta, v45);
  *(_QWORD *)(v27 + v29[12]) = *(_QWORD *)(v28 + v29[12]);
  v46 = a1;
  v47 = v95[13];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v94)(v48, v49, v37, v50);
  v51 = v95[16];
  *(_QWORD *)(a1 + v95[15]) = *(_QWORD *)(a2 + v95[15]);
  v52 = (_QWORD *)(a1 + v51);
  v53 = (_QWORD *)(a2 + v51);
  v54 = type metadata accessor for DetailComponentContainerViewModel(0);
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v54))
  {
    v55 = sub_1000BA294(&qword_100BC68A0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v56 = v53[1];
    if (v56)
    {
      *v52 = *v53;
      v52[1] = v56;
      v57 = v53[3];
      v52[2] = v53[2];
      v52[3] = v57;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v58 = *((_OWORD *)v53 + 1);
      *(_OWORD *)v52 = *(_OWORD *)v53;
      *((_OWORD *)v52 + 1) = v58;
    }
    v59 = *(int *)(v54 + 20);
    v60 = (_QWORD *)((char *)v52 + v59);
    v61 = (_QWORD *)((char *)v53 + v59);
    v62 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v61) == 1)
    {
      v99 = v62;
      v63 = v61[1];
      *v60 = *v61;
      v60[1] = v63;
      v64 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v65 = v64[5];
      __dst = (char *)v60 + v65;
      v66 = (char *)v61 + v65;
      v67 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      v90 = v46;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v66, 1, v67))
      {
        v68 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dst, v66, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(__dst, v66, v67);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v67);
      }
      v69 = v64[6];
      v70 = (_QWORD *)((char *)v60 + v69);
      v71 = (_QWORD *)((char *)v61 + v69);
      v72 = v71[1];
      *v70 = *v71;
      v70[1] = v72;
      v73 = v64[7];
      v74 = (char *)v60 + v73;
      v75 = (char *)v61 + v73;
      v76 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v67 - 8) + 16);
      v77 = swift_bridgeObjectRetain();
      v76(v74, v75, v67, v77);
      v78 = v64[8];
      v79 = (char *)v60 + v78;
      v80 = (char *)v61 + v78;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v61 + v78, 1, v67))
      {
        v81 = sub_1000BA294(&qword_100BD4280);
        memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v76)(v79, v80, v67);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v79, 0, 1, v67);
      }
      v46 = v90;
      *((_BYTE *)v60 + v64[9]) = *((_BYTE *)v61 + v64[9]);
      swift_storeEnumTagMultiPayload(v60, v99, 1);
    }
    else
    {
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    v82 = *(int *)(v54 + 24);
    v83 = (char *)v52 + v82;
    v84 = (char *)v53 + v82;
    v85 = type metadata accessor for DetailComponentAction(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v84, 1, v85))
    {
      v86 = sub_1000BA294(&qword_100BD3100);
      memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    }
    else
    {
      v87 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v83, v84, v87);
      v88 = sub_1000BA294(&qword_100BC5FE8);
      v83[*(int *)(v88 + 48)] = v84[*(int *)(v88 + 48)];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v83, 0, 1, v85);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v54);
  }
  return v46;
}

_QWORD *sub_1005D58F0(_QWORD *a1, uint64_t a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  size_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t, __n128);
  __n128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  void (*v96)(char *, char *, uint64_t, __n128);
  __n128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  void (*v114)(char *, uint64_t, uint64_t);
  void (*__dstb)(char *, uint64_t, uint64_t);
  char *__dst;
  char *__dsta;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v5 = a1;
  *a1 = *(_QWORD *)a2;
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[2] = *(_QWORD *)(a2 + 16);
  v5[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v5 + 32) = *(_BYTE *)(a2 + 32);
  v6 = a3[7];
  v7 = (char *)v5 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  __dstb = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v118 = v9;
  __dstb(v7, v8, v9);
  v10 = a3[8];
  v11 = (char *)v5 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[9];
  v15 = (char *)v5 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  *(_QWORD *)((char *)v5 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[11];
  v19 = (_QWORD *)((char *)v5 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = a3[12];
  v22 = (char *)v5 + v21;
  v23 = a2 + v21;
  *(_QWORD *)((char *)v5 + v21) = *(_QWORD *)(a2 + v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = (int *)_s14ChartViewModelVMa(0);
  v25 = v24[5];
  v26 = &v22[v25];
  v27 = v23 + v25;
  v28 = type metadata accessor for DetailChartDataElement(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 24))(v26, v27, v28);
  v29 = v24[6];
  v30 = &v22[v29];
  v31 = v23 + v29;
  v32 = type metadata accessor for Location(0);
  v114 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 24);
  v114(v30, v31, v32);
  v33 = v24[7];
  v34 = &v22[v33];
  v35 = v23 + v33;
  *(_QWORD *)&v22[v33] = *(_QWORD *)(v23 + v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v34 + 1) = *(_QWORD *)(v35 + 8);
  *(_QWORD *)&v22[v24[8]] = *(_QWORD *)(v23 + v24[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v22[v24[9]] = *(_QWORD *)(v23 + v24[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v22[v24[10]] = *(_QWORD *)(v23 + v24[10]);
  swift_bridgeObjectRetain();
  v36 = swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, uint64_t, __n128))__dstb)(&v22[v24[11]], v23 + v24[11], v118, v36);
  *(_QWORD *)&v22[v24[12]] = *(_QWORD *)(v23 + v24[12]);
  swift_bridgeObjectRetain();
  v37 = swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, uint64_t, __n128))v114)((char *)v5 + a3[13], a2 + a3[13], v32, v37);
  *(_QWORD *)((char *)v5 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = a3[16];
  v39 = (_QWORD *)((char *)v5 + v38);
  v40 = (_QWORD *)(a2 + v38);
  v41 = type metadata accessor for DetailComponentContainerViewModel(0);
  LODWORD(v32) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v41);
  v42 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41);
  if ((_DWORD)v32)
  {
    if (!v42)
    {
      if (v40[1])
      {
        *v39 = *v40;
        v39[1] = v40[1];
        v39[2] = v40[2];
        v39[3] = v40[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v47 = *((_OWORD *)v40 + 1);
        *(_OWORD *)v39 = *(_OWORD *)v40;
        *((_OWORD *)v39 + 1) = v47;
      }
      v48 = *(int *)(v41 + 20);
      v49 = (_QWORD *)((char *)v39 + v48);
      v50 = (_QWORD *)((char *)v40 + v48);
      v51 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v50) == 1)
      {
        v119 = v51;
        *v49 = *v50;
        v49[1] = v50[1];
        v52 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v53 = v52[5];
        __dst = (char *)v49 + v53;
        v54 = (char *)v50 + v53;
        v55 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain();
        v112 = v5;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v54, 1, v55))
        {
          v56 = sub_1000BA294(&qword_100BD4280);
          memcpy(__dst, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(__dst, v54, v55);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v55);
        }
        v57 = v52[6];
        v58 = (_QWORD *)((char *)v49 + v57);
        v59 = (_QWORD *)((char *)v50 + v57);
        *v58 = *v59;
        v58[1] = v59[1];
        v60 = v52[7];
        v61 = (char *)v49 + v60;
        v62 = (char *)v50 + v60;
        v63 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v55 - 8) + 16);
        v64 = swift_bridgeObjectRetain();
        v63(v61, v62, v55, v64);
        v65 = v52[8];
        v66 = (char *)v49 + v65;
        v67 = (char *)v50 + v65;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v50 + v65, 1, v55))
        {
          v68 = sub_1000BA294(&qword_100BD4280);
          memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v63)(v66, v67, v55);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, v55);
        }
        v5 = v112;
        *((_BYTE *)v49 + v52[9]) = *((_BYTE *)v50 + v52[9]);
        swift_storeEnumTagMultiPayload(v49, v119, 1);
      }
      else
      {
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      v69 = *(int *)(v41 + 24);
      v70 = (char *)v39 + v69;
      v71 = (char *)v40 + v69;
      v72 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v72))
      {
        v73 = sub_1000BA294(&qword_100BD3100);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        v74 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v70, v71, v74);
        v75 = sub_1000BA294(&qword_100BC5FE8);
        v70[*(int *)(v75 + 48)] = v71[*(int *)(v75 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v72);
      }
      v76 = (uint64_t)v39;
      v77 = v41;
      goto LABEL_28;
    }
    goto LABEL_7;
  }
  if (v42)
  {
    sub_1000215BC((uint64_t)v39, type metadata accessor for DetailComponentContainerViewModel);
LABEL_7:
    v43 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC68A0) - 8) + 64);
    v44 = v39;
    v45 = v40;
    goto LABEL_8;
  }
  v46 = v40[1];
  if (v39[1])
  {
    if (v46)
    {
      *v39 = *v40;
      v39[1] = v40[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v39[2] = v40[2];
      v39[3] = v40[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10035C44C((uint64_t)v39);
      v79 = *((_OWORD *)v40 + 1);
      *(_OWORD *)v39 = *(_OWORD *)v40;
      *((_OWORD *)v39 + 1) = v79;
    }
  }
  else if (v46)
  {
    *v39 = *v40;
    v39[1] = v40[1];
    v39[2] = v40[2];
    v39[3] = v40[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v80 = *((_OWORD *)v40 + 1);
    *(_OWORD *)v39 = *(_OWORD *)v40;
    *((_OWORD *)v39 + 1) = v80;
  }
  if (v5 != (_QWORD *)a2)
  {
    v81 = *(int *)(v41 + 20);
    v82 = (_QWORD *)((char *)v39 + v81);
    v83 = (_QWORD *)((char *)v40 + v81);
    sub_1000215BC((uint64_t)v39 + v81, type metadata accessor for NewsArticleComponentViewModel);
    v84 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v83) == 1)
    {
      v120 = v84;
      *v82 = *v83;
      v82[1] = v83[1];
      v85 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v86 = v85[5];
      __dsta = (char *)v82 + v86;
      v87 = (char *)v83 + v86;
      v88 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      v113 = v5;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v87, 1, v88))
      {
        v89 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dsta, v87, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(__dsta, v87, v88);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dsta, 0, 1, v88);
      }
      v90 = v85[6];
      v91 = (_QWORD *)((char *)v82 + v90);
      v92 = (_QWORD *)((char *)v83 + v90);
      *v91 = *v92;
      v91[1] = v92[1];
      v93 = v85[7];
      v94 = (char *)v82 + v93;
      v95 = (char *)v83 + v93;
      v96 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v88 - 8) + 16);
      v97 = swift_bridgeObjectRetain();
      v96(v94, v95, v88, v97);
      v98 = v85[8];
      v99 = (char *)v82 + v98;
      v100 = (char *)v83 + v98;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v83 + v98, 1, v88))
      {
        v101 = sub_1000BA294(&qword_100BD4280);
        memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v96)(v99, v100, v88);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v99, 0, 1, v88);
      }
      v5 = v113;
      *((_BYTE *)v82 + v85[9]) = *((_BYTE *)v83 + v85[9]);
      swift_storeEnumTagMultiPayload(v82, v120, 1);
    }
    else
    {
      memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    }
  }
  v102 = *(int *)(v41 + 24);
  v103 = (uint64_t)v39 + v102;
  v104 = (uint64_t)v40 + v102;
  v105 = type metadata accessor for DetailComponentAction(0);
  v106 = _s7Weather24LocationCompositionStateOwet_0(v103, 1, v105);
  v107 = _s7Weather24LocationCompositionStateOwet_0(v104, 1, v105);
  if (v106)
  {
    if (!v107)
    {
      v108 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 16))(v103, v104, v108);
      v109 = sub_1000BA294(&qword_100BC5FE8);
      *(_BYTE *)(v103 + *(int *)(v109 + 48)) = *(_BYTE *)(v104 + *(int *)(v109 + 48));
      v76 = v103;
      v77 = v105;
LABEL_28:
      _s7Weather24LocationCompositionStateOwst_0(v76, 0, 1, v77);
      return v5;
    }
  }
  else
  {
    if (!v107)
    {
      v110 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 24))(v103, v104, v110);
      v111 = sub_1000BA294(&qword_100BC5FE8);
      *(_BYTE *)(v103 + *(int *)(v111 + 48)) = *(_BYTE *)(v104 + *(int *)(v111 + 48));
      return v5;
    }
    sub_1000215BC(v103, type metadata accessor for DetailComponentAction);
  }
  v43 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD3100) - 8) + 64);
  v44 = (void *)v103;
  v45 = (const void *)v104;
LABEL_8:
  memcpy(v44, v45, v43);
  return v5;
}

uint64_t sub_1005D6270(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v65 = v10;
  v63(v8, v9, v10);
  v11 = a3[8];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  v20 = a3[12];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  v23 = (int *)_s14ChartViewModelVMa(0);
  v24 = v23[5];
  v25 = v21 + v24;
  v26 = v22 + v24;
  v27 = type metadata accessor for DetailChartDataElement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  v28 = v23[6];
  v29 = v21 + v28;
  v30 = v22 + v28;
  v31 = type metadata accessor for Location(0);
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32);
  v32(v29, v30, v31);
  *(_OWORD *)(v21 + v23[7]) = *(_OWORD *)(v22 + v23[7]);
  *(_QWORD *)(v21 + v23[8]) = *(_QWORD *)(v22 + v23[8]);
  *(_QWORD *)(v21 + v23[9]) = *(_QWORD *)(v22 + v23[9]);
  *(_QWORD *)(v21 + v23[10]) = *(_QWORD *)(v22 + v23[10]);
  v63(v21 + v23[11], v22 + v23[11], v65);
  *(_QWORD *)(v21 + v23[12]) = *(_QWORD *)(v22 + v23[12]);
  v32(a1 + a3[13], a2 + a3[13], v31);
  v33 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  v34 = (_OWORD *)(a1 + v33);
  v35 = (_OWORD *)(a2 + v33);
  v36 = type metadata accessor for DetailComponentContainerViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v35, 1, v36))
  {
    v37 = sub_1000BA294(&qword_100BC68A0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v38 = v35[1];
    *v34 = *v35;
    v34[1] = v38;
    v39 = *(int *)(v36 + 20);
    v40 = (char *)v34 + v39;
    v41 = (char *)v35 + v39;
    v42 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v41) == 1)
    {
      v66 = v42;
      *(_OWORD *)v40 = *(_OWORD *)v41;
      v43 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v44 = v43[5];
      v45 = &v40[v44];
      v46 = &v41[v44];
      v47 = type metadata accessor for URL(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v47))
      {
        v48 = sub_1000BA294(&qword_100BD4280);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32);
      }
      else
      {
        v50 = v46;
        v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32);
        v49(v45, v50, v47);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v47);
      }
      *(_OWORD *)&v40[v43[6]] = *(_OWORD *)&v41[v43[6]];
      v64 = v49;
      v49(&v40[v43[7]], &v41[v43[7]], v47);
      v51 = v43[8];
      v52 = &v40[v51];
      v53 = &v41[v51];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v41[v51], 1, v47))
      {
        v54 = sub_1000BA294(&qword_100BD4280);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        v64(v52, v53, v47);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v47);
      }
      v40[v43[9]] = v41[v43[9]];
      swift_storeEnumTagMultiPayload(v40, v66, 1);
    }
    else
    {
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    v55 = *(int *)(v36 + 24);
    v56 = (char *)v34 + v55;
    v57 = (char *)v35 + v55;
    v58 = type metadata accessor for DetailComponentAction(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v57, 1, v58))
    {
      v59 = sub_1000BA294(&qword_100BD3100);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      v60 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v56, v57, v60);
      v61 = sub_1000BA294(&qword_100BC5FE8);
      v56[*(int *)(v61 + 48)] = v57[*(int *)(v61 + 48)];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v56, 0, 1, v58);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 0, 1, v36);
  }
  return a1;
}

_QWORD *sub_1005D66EC(_QWORD *a1, uint64_t a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __n128 v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  size_t v60;
  void *v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;

  v5 = a1;
  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  v5[2] = *(_QWORD *)(a2 + 16);
  v5[3] = v7;
  swift_bridgeObjectRelease();
  *((_BYTE *)v5 + 32) = *(_BYTE *)(a2 + 32);
  v8 = a3[7];
  v9 = (char *)v5 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  v105 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v108 = v11;
  v105(v9, v10, v11);
  v12 = a3[8];
  v13 = (char *)v5 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[9];
  v17 = (char *)v5 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  *(_QWORD *)((char *)v5 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  v20 = a3[11];
  v21 = (_QWORD *)((char *)v5 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[12];
  v26 = (char *)v5 + v25;
  v27 = a2 + v25;
  *(_QWORD *)((char *)v5 + v25) = *(_QWORD *)(a2 + v25);
  swift_bridgeObjectRelease();
  v28 = (int *)_s14ChartViewModelVMa(0);
  v29 = v28[5];
  v30 = &v26[v29];
  v31 = v27 + v29;
  v32 = type metadata accessor for DetailChartDataElement(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 40))(v30, v31, v32);
  v33 = v28[6];
  v34 = &v26[v33];
  v35 = v27 + v33;
  v36 = type metadata accessor for Location(0);
  v37 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 40);
  v37(v34, v35, v36);
  v38 = v28[7];
  v39 = &v26[v38];
  v40 = v27 + v38;
  *(_QWORD *)&v26[v38] = *(_QWORD *)(v27 + v38);
  swift_bridgeObjectRelease();
  *((_QWORD *)v39 + 1) = *(_QWORD *)(v40 + 8);
  *(_QWORD *)&v26[v28[8]] = *(_QWORD *)(v27 + v28[8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v26[v28[9]] = *(_QWORD *)(v27 + v28[9]);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v26[v28[10]] = *(_QWORD *)(v27 + v28[10]);
  v41 = swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, uint64_t, __n128))v105)(&v26[v28[11]], v27 + v28[11], v108, v41);
  *(_QWORD *)&v26[v28[12]] = *(_QWORD *)(v27 + v28[12]);
  v42 = swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, uint64_t, __n128))v37)((char *)v5 + a3[13], a2 + a3[13], v36, v42);
  *(_QWORD *)((char *)v5 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  swift_bridgeObjectRelease();
  v43 = a3[16];
  v44 = (uint64_t)v5 + v43;
  v45 = a2 + v43;
  v46 = type metadata accessor for DetailComponentContainerViewModel(0);
  LODWORD(v36) = _s7Weather24LocationCompositionStateOwet_0(v44, 1, v46);
  v47 = _s7Weather24LocationCompositionStateOwet_0(v45, 1, v46);
  if ((_DWORD)v36)
  {
    if (!v47)
    {
      v48 = *(_OWORD *)(v45 + 16);
      *(_OWORD *)v44 = *(_OWORD *)v45;
      *(_OWORD *)(v44 + 16) = v48;
      v49 = *(int *)(v46 + 20);
      v50 = (char *)(v44 + v49);
      v51 = (char *)(v45 + v49);
      v52 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v51) == 1)
      {
        v106 = v52;
        v109 = v5;
        *(_OWORD *)v50 = *(_OWORD *)v51;
        v53 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v54 = v53[5];
        v55 = &v50[v54];
        v56 = &v51[v54];
        v57 = type metadata accessor for URL(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v56, 1, v57))
        {
          v58 = sub_1000BA294(&qword_100BD4280);
          memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
          v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32);
        }
        else
        {
          v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32);
          v59(v55, v56, v57);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v55, 0, 1, v57);
        }
        *(_OWORD *)&v50[v53[6]] = *(_OWORD *)&v51[v53[6]];
        v59(&v50[v53[7]], &v51[v53[7]], v57);
        v65 = v53[8];
        v66 = &v50[v65];
        v67 = &v51[v65];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v51[v65], 1, v57))
        {
          v68 = sub_1000BA294(&qword_100BD4280);
          memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        }
        else
        {
          v59(v66, v67, v57);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, v57);
        }
        v5 = v109;
        v50[v53[9]] = v51[v53[9]];
        swift_storeEnumTagMultiPayload(v50, v106, 1);
      }
      else
      {
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      v69 = *(int *)(v46 + 24);
      v70 = (void *)(v44 + v69);
      v71 = (const void *)(v45 + v69);
      v72 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v72))
      {
        v73 = sub_1000BA294(&qword_100BD3100);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        v74 = type metadata accessor for URL(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v70, v71, v74);
        v75 = sub_1000BA294(&qword_100BC5FE8);
        *((_BYTE *)v70 + *(int *)(v75 + 48)) = *((_BYTE *)v71 + *(int *)(v75 + 48));
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v72);
      }
      v76 = v44;
      v77 = v46;
      goto LABEL_23;
    }
    goto LABEL_8;
  }
  if (v47)
  {
    sub_1000215BC(v44, type metadata accessor for DetailComponentContainerViewModel);
LABEL_8:
    v60 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC68A0) - 8) + 64);
    v61 = (void *)v44;
    v62 = (const void *)v45;
    goto LABEL_9;
  }
  if (!*(_QWORD *)(v44 + 8))
    goto LABEL_26;
  v63 = *(_QWORD *)(v45 + 8);
  if (!v63)
  {
    sub_10035C44C(v44);
LABEL_26:
    v79 = *(_OWORD *)(v45 + 16);
    *(_OWORD *)v44 = *(_OWORD *)v45;
    *(_OWORD *)(v44 + 16) = v79;
    goto LABEL_27;
  }
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = v63;
  swift_bridgeObjectRelease();
  v64 = *(_QWORD *)(v45 + 24);
  *(_QWORD *)(v44 + 16) = *(_QWORD *)(v45 + 16);
  *(_QWORD *)(v44 + 24) = v64;
  swift_bridgeObjectRelease();
LABEL_27:
  if (v5 != (_QWORD *)a2)
  {
    v80 = *(int *)(v46 + 20);
    v81 = (char *)(v44 + v80);
    v82 = (char *)(v45 + v80);
    sub_1000215BC(v44 + v80, type metadata accessor for NewsArticleComponentViewModel);
    v83 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v82) == 1)
    {
      v107 = v83;
      v110 = v5;
      *(_OWORD *)v81 = *(_OWORD *)v82;
      v84 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v85 = v84[5];
      v86 = &v81[v85];
      v87 = &v82[v85];
      v88 = type metadata accessor for URL(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v87, 1, v88))
      {
        v89 = sub_1000BA294(&qword_100BD4280);
        memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
        v90 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32);
      }
      else
      {
        v90 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32);
        v90(v86, v87, v88);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v86, 0, 1, v88);
      }
      *(_OWORD *)&v81[v84[6]] = *(_OWORD *)&v82[v84[6]];
      v90(&v81[v84[7]], &v82[v84[7]], v88);
      v91 = v84[8];
      v92 = &v81[v91];
      v93 = &v82[v91];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v82[v91], 1, v88))
      {
        v94 = sub_1000BA294(&qword_100BD4280);
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        v90(v92, v93, v88);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v92, 0, 1, v88);
      }
      v5 = v110;
      v81[v84[9]] = v82[v84[9]];
      swift_storeEnumTagMultiPayload(v81, v107, 1);
    }
    else
    {
      memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    }
  }
  v95 = *(int *)(v46 + 24);
  v96 = v44 + v95;
  v97 = v45 + v95;
  v98 = type metadata accessor for DetailComponentAction(0);
  v99 = _s7Weather24LocationCompositionStateOwet_0(v96, 1, v98);
  v100 = _s7Weather24LocationCompositionStateOwet_0(v97, 1, v98);
  if (v99)
  {
    if (!v100)
    {
      v101 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v96, v97, v101);
      v102 = sub_1000BA294(&qword_100BC5FE8);
      *(_BYTE *)(v96 + *(int *)(v102 + 48)) = *(_BYTE *)(v97 + *(int *)(v102 + 48));
      v76 = v96;
      v77 = v98;
LABEL_23:
      _s7Weather24LocationCompositionStateOwst_0(v76, 0, 1, v77);
      return v5;
    }
  }
  else
  {
    if (!v100)
    {
      v103 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 40))(v96, v97, v103);
      v104 = sub_1000BA294(&qword_100BC5FE8);
      *(_BYTE *)(v96 + *(int *)(v104 + 48)) = *(_BYTE *)(v97 + *(int *)(v104 + 48));
      return v5;
    }
    sub_1000215BC(v96, type metadata accessor for DetailComponentAction);
  }
  v60 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD3100) - 8) + 64);
  v61 = (void *)v96;
  v62 = (const void *)v97;
LABEL_9:
  memcpy(v61, v62, v60);
  return v5;
}

uint64_t sub_1005D6EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005D6EF0);
}

uint64_t sub_1005D6EF0(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_100098778();
    sub_100088FF0();
    if (v11)
    {
      v9 = v8;
      v10 = a3[7];
    }
    else
    {
      sub_100099928();
      sub_100088FF0();
      if (v11)
      {
        v9 = v12;
        v10 = a3[8];
      }
      else
      {
        sub_1000B4928();
        sub_100088FF0();
        if (v13)
        {
          v9 = v14;
          v10 = a3[9];
        }
        else
        {
          _s14ChartViewModelVMa(0);
          sub_100088FF0();
          if (v15)
          {
            v9 = v16;
            v10 = a3[12];
          }
          else
          {
            sub_1000992C4();
            sub_100088FF0();
            if (v17)
            {
              v9 = v18;
              v10 = a3[13];
            }
            else
            {
              v9 = sub_1000BA294(&qword_100BC68A0);
              v10 = a3[16];
            }
          }
        }
      }
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t sub_1005D6FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005D6FF0);
}

uint64_t sub_1005D6FF0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_100098778();
    sub_10009D2E8();
    if (v10)
    {
      v8 = v7;
      v9 = a4[7];
    }
    else
    {
      sub_100099928();
      sub_10009D2E8();
      if (v10)
      {
        v8 = v11;
        v9 = a4[8];
      }
      else
      {
        sub_1000B4928();
        sub_10009D2E8();
        if (v12)
        {
          v8 = v13;
          v9 = a4[9];
        }
        else
        {
          _s14ChartViewModelVMa(0);
          sub_10009D2E8();
          if (v14)
          {
            v8 = v15;
            v9 = a4[12];
          }
          else
          {
            sub_1000992C4();
            sub_10009D2E8();
            if (v16)
            {
              v8 = v17;
              v9 = a4[13];
            }
            else
            {
              v8 = sub_1000BA294(&qword_100BC68A0);
              v9 = a4[16];
            }
          }
        }
      }
    }
    return _s7Weather24LocationCompositionStateOwst_0(v5 + v9, a2, a2, v8);
  }
  return result;
}

uint64_t _s10PolarModelVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF4700;
  if (!qword_100BF4700)
    return swift_getSingletonMetadata(a1, &_s10PolarModelVMn);
  return result;
}

void sub_1005D7118(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[13];

  v14[0] = &unk_1009B2918;
  v14[1] = &unk_1009B2918;
  v14[2] = &unk_1009B2930;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v14[3] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for TimeZone(319);
    if (v5 <= 0x3F)
    {
      v14[4] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for AttributedString(319);
      if (v7 <= 0x3F)
      {
        v14[5] = *(_QWORD *)(v6 - 8) + 64;
        v14[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v14[7] = &unk_1009B2918;
        v8 = _s14ChartViewModelVMa(319);
        if (v9 <= 0x3F)
        {
          v14[8] = *(_QWORD *)(v8 - 8) + 64;
          v10 = type metadata accessor for Location(319);
          if (v11 <= 0x3F)
          {
            v14[9] = *(_QWORD *)(v10 - 8) + 64;
            v14[10] = (char *)&value witness table for () + 64;
            v14[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
            sub_10047C038(319);
            if (v13 <= 0x3F)
            {
              v14[12] = *(_QWORD *)(v12 - 8) + 64;
              swift_initStructMetadata(a1, 256, 13, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1005D7250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  _QWORD *v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_BYTE *)(a9 + 32) = a5 & 1;
  v20 = (int *)_s10PolarModelVMa(0);
  v21 = a9 + v20[7];
  sub_100098778();
  sub_1000C2D18();
  v22(v21, a6);
  v23 = a9 + v20[8];
  sub_100099928();
  sub_1000C2D18();
  v24(v23, a7);
  v25 = (_QWORD *)(a9 + v20[11]);
  *v25 = a8;
  v25[1] = a10;
  v26 = a9 + v20[9];
  sub_1000B4928();
  sub_1000C2D18();
  v27(v26, a11);
  *(_QWORD *)(a9 + v20[10]) = a12;
  sub_1005D76FC(a14, a9 + v20[12], (void (*)(_QWORD))_s14ChartViewModelVMa);
  v28 = a9 + v20[13];
  sub_1000992C4();
  sub_1000C2D18();
  v29(v28, a13);
  *(_QWORD *)(a9 + v20[15]) = a15;
  return sub_10047C954(a16, a9 + v20[16]);
}

BOOL sub_1005D738C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  _BOOL8 result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;

  type metadata accessor for DetailComponentContainerViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1000BA294(&qword_100BCA048);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BC68A0);
  sub_1000B42B0();
  v12 = __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v55 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v55 - v18;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a2 + 8);
  v22 = *(_QWORD *)a1 == *(_QWORD *)a2 && v20 == v21;
  if (v22 || (v23 = sub_100099264(*(_QWORD *)a1, v20, *(_QWORD *)a2, v21), result = 0, (v23 & 1) != 0))
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_QWORD *)(a1 + 24);
    v27 = *(_QWORD *)(a2 + 16);
    v28 = *(_QWORD *)(a2 + 24);
    v29 = v25 == v27 && v26 == v28;
    if (v29 || (v30 = sub_100099264(v25, v26, v27, v28), result = 0, (v30 & 1) != 0))
    {
      if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
        return 0;
      v31 = (int *)_s10PolarModelVMa(0);
      v32 = sub_1000B4BA4(v31[7]);
      if ((static Date.== infix(_:_:)(v32, v33) & 1) == 0)
        return 0;
      v34 = sub_1000B4BA4(v31[8]);
      if ((static TimeZone.== infix(_:_:)(v34, v35) & 1) == 0)
        return 0;
      v36 = sub_1000B4BA4(v31[9]);
      if ((static AttributedString.== infix(_:_:)(v36, v37) & 1) == 0)
        return 0;
      sub_10009B4AC(*(_QWORD **)(a1 + v31[10]), *(_QWORD **)(a2 + v31[10]));
      if ((v38 & 1) == 0)
        return 0;
      v39 = v31[11];
      v40 = *(_QWORD *)(a1 + v39);
      v41 = *(_QWORD *)(a1 + v39 + 8);
      v42 = (uint64_t *)(a2 + v39);
      v43 = v42[1];
      v44 = v40 == *v42 && v41 == v43;
      if (v44 || (v45 = sub_100099264(v40, v41, *v42, v43), result = 0, (v45 & 1) != 0))
      {
        v46 = sub_1000B4BA4(v31[12]);
        sub_1004B50E0(v46, v47);
        if ((v48 & 1) != 0)
        {
          v49 = sub_1000B4BA4(v31[13]);
          if ((static Location.== infix(_:_:)(v49, v50) & 1) != 0)
          {
            sub_100947318();
            if ((v51 & 1) != 0)
            {
              sub_10047C8B0(a1 + v31[16], (uint64_t)v19);
              sub_10047C8B0(a2 + v31[16], (uint64_t)v17);
              v52 = (uint64_t)&v10[*(int *)(v7 + 48)];
              sub_10047C8B0((uint64_t)v19, (uint64_t)v10);
              sub_10047C8B0((uint64_t)v17, v52);
              sub_100098750((uint64_t)v10);
              if (v22)
              {
                sub_10009E47C((uint64_t)v17);
                sub_10009E47C((uint64_t)v19);
                sub_100098750(v52);
                if (v22)
                {
                  sub_100021A14((uint64_t)v10, &qword_100BC68A0);
                  return 1;
                }
              }
              else
              {
                sub_10047C8B0((uint64_t)v10, (uint64_t)v14);
                sub_100098750(v52);
                if (!v53)
                {
                  sub_1005D76FC(v52, (uint64_t)v6, (void (*)(_QWORD))type metadata accessor for DetailComponentContainerViewModel);
                  v54 = sub_10035CD60(v14, v6);
                  sub_1000215BC((uint64_t)v6, type metadata accessor for DetailComponentContainerViewModel);
                  sub_10009E47C((uint64_t)v17);
                  sub_10009E47C((uint64_t)v19);
                  sub_1000215BC((uint64_t)v14, type metadata accessor for DetailComponentContainerViewModel);
                  sub_10009E47C((uint64_t)v10);
                  return (v54 & 1) != 0;
                }
                sub_100021A14((uint64_t)v17, &qword_100BC68A0);
                sub_100021A14((uint64_t)v19, &qword_100BC68A0);
                sub_1000215BC((uint64_t)v14, type metadata accessor for DetailComponentContainerViewModel);
              }
              sub_100021A14((uint64_t)v10, &qword_100BCA048);
            }
          }
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_1005D76FC(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  void (*v5)(uint64_t, uint64_t);

  a3(0);
  sub_1000C2D18();
  v5(a2, a1);
  sub_10004A298();
}

_QWORD *assignWithCopy for LocationView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v4 = a2[3];
  v5 = a2[4];
  v6 = a1[3];
  a1[3] = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[4] = v5;
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  sub_100094D04(a1 + 7, a2 + 7);
  sub_100094D04(a1 + 12, a2 + 12);
  return a1;
}

void *initializeWithTake for LocationView(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x88uLL);
}

uint64_t assignWithTake for LocationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 96));
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 136))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1005D7940()
{
  uint64_t result;

  sub_1000BA294(&qword_100BEF018);
  result = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  qword_100CAEE58 = result;
  return result;
}

uint64_t *sub_1005D7984()
{
  if (qword_100BC22B8 != -1)
    swift_once(&qword_100BC22B8, sub_1005D7940);
  return &qword_100CAEE58;
}

double sub_1005D79C4(_QWORD *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  double result;
  uint64_t v6;

  a2(&v6);
  v3 = v6;
  if (qword_100BC22B8 != -1)
    swift_once(&qword_100BC22B8, sub_1005D7940);
  sub_1001F5194();
  if ((v4 & 1) == 0)
    return sub_1005D7B24(v3, (uint64_t)sub_1005D8358, 0, a1);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_1005D7A70@<D0>(_QWORD *a1@<X8>)
{
  double result;

  sub_1005D7984();
  *a1 = qword_100CAEE58;
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_1005D7AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a3, v8);
  return sub_10055547C(a4, a2);
}

uint64_t sub_1005D7AF8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a3;
  swift_bridgeObjectRetain(a3);
  return a2;
}

double sub_1005D7B24(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  char isUniquelyReferenced_nonNull_native;
  double result;
  uint64_t v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
  v10 = *a4;
  *a4 = 0x8000000000000000;
  sub_1005D7BAC(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v10);
  *a4 = v10;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_1005D7BAC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;

  sub_1005D7E9C(a1, a2, a3, &v37);
  v36 = v37;
  swift_bridgeObjectRetain();
  swift_retain();
  v7 = sub_1005D81E8();
  if (v8)
  {
    v9 = v7;
    v10 = v8;
    while (1)
    {
      v11 = (_QWORD *)*a5;
      v13 = sub_1000BFD34(v9);
      v14 = v11[2];
      v15 = (v12 & 1) == 0;
      v16 = v14 + v15;
      if (__OFADD__(v14, v15))
        break;
      v17 = v12;
      if (v11[3] >= v16)
      {
        if ((a4 & 1) == 0)
        {
          sub_1000BA294(&qword_100BF4778);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        sub_100554904(v16, a4 & 1);
        v18 = sub_1000BFD34(v9);
        if ((v17 & 1) != (v19 & 1))
          goto LABEL_36;
        v13 = v18;
      }
      v20 = (_QWORD *)*a5;
      if ((v17 & 1) != 0)
      {
        v21 = *(_QWORD *)(v20[7] + 8 * v13);
        v22 = *(_QWORD *)(v10 + 16);
        v23 = *(_QWORD *)(v21 + 16);
        if (__OFADD__(v23, v22))
          goto LABEL_31;
        swift_bridgeObjectRetain();
        if (!swift_isUniquelyReferenced_nonNull_native(v24) || v23 + v22 > *(_QWORD *)(v21 + 24) >> 1)
        {
          sub_1005FF3CC();
          v21 = v25;
        }
        if (*(_QWORD *)(v10 + 16))
        {
          v26 = *(_QWORD *)(v21 + 16);
          if ((*(_QWORD *)(v21 + 24) >> 1) - v26 < v22)
            goto LABEL_34;
          v27 = (void *)(v21 + 16 * v26 + 32);
          if (v10 + 32 < (unint64_t)v27 + 16 * v22 && (unint64_t)v27 < v10 + 32 + 16 * v22)
            goto LABEL_37;
          memcpy(v27, (const void *)(v10 + 32), 16 * v22);
          if (v22)
          {
            v29 = *(_QWORD *)(v21 + 16);
            v30 = __OFADD__(v29, v22);
            v31 = v29 + v22;
            if (v30)
              goto LABEL_35;
            *(_QWORD *)(v21 + 16) = v31;
          }
        }
        else if (v22)
        {
          goto LABEL_33;
        }
        swift_bridgeObjectRelease();
        v34 = v20[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v34 + 8 * v13) = v21;
      }
      else
      {
        v20[(v13 >> 6) + 8] |= 1 << v13;
        *(_QWORD *)(v20[6] + 8 * v13) = v9;
        *(_QWORD *)(v20[7] + 8 * v13) = v10;
        v32 = v20[2];
        v30 = __OFADD__(v32, 1);
        v33 = v32 + 1;
        if (v30)
          goto LABEL_32;
        v20[2] = v33;
      }
      v9 = sub_1005D81E8();
      v10 = v35;
      a4 = 1;
      if (!v35)
        goto LABEL_29;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
    __break(1u);
LABEL_37:
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else
  {
LABEL_29:
    swift_bridgeObjectRelease();
    swift_release();
    sub_100163978(v36);
    swift_release();
  }
}

uint64_t sub_1005D7E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = -1 << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64)
    v8 = ~(-1 << -(char)v4);
  else
    v8 = -1;
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_1005D7ED8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v3 = sub_1000BA294(&qword_100BC5318);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BF4780);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - v11;
  v14 = *v1;
  v13 = v1[1];
  v15 = v1[2];
  v16 = v1[3];
  v17 = v1[4];
  v37 = v6;
  v38 = v15;
  v39 = v13;
  if (v17)
  {
    v6 = (char *)a1;
    v18 = (v17 - 1) & v17;
    v19 = __clz(__rbit64(v17)) | (v16 << 6);
LABEL_3:
    v20 = *(_QWORD *)(v14 + 48);
    v21 = type metadata accessor for Date(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v12, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v19, v21);
    v22 = *(_QWORD *)(v14 + 56);
    v23 = type metadata accessor for ElevationData(0);
    sub_10055547C(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v19, (uint64_t)&v12[*(int *)(v3 + 48)]);
    v24 = 0;
LABEL_4:
    a1 = (uint64_t)v6;
    goto LABEL_5;
  }
  v31 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  v32 = (unint64_t)(v15 + 64) >> 6;
  if (v31 >= v32)
  {
    v18 = 0;
    v24 = 1;
    goto LABEL_5;
  }
  v33 = *(_QWORD *)(v13 + 8 * v31);
  if (v33)
  {
    v6 = (char *)a1;
LABEL_12:
    v18 = (v33 - 1) & v33;
    v19 = __clz(__rbit64(v33)) + (v31 << 6);
    v16 = v31;
    goto LABEL_3;
  }
  v34 = v16 + 2;
  if (v16 + 2 >= v32)
  {
    v18 = 0;
    v24 = 1;
    ++v16;
    goto LABEL_5;
  }
  v33 = *(_QWORD *)(v13 + 8 * v34);
  if (v33)
  {
LABEL_16:
    v6 = (char *)a1;
    v31 = v34;
    goto LABEL_12;
  }
  if (v16 + 3 >= v32)
    goto LABEL_29;
  v33 = *(_QWORD *)(v13 + 8 * (v16 + 3));
  if (v33)
  {
    v6 = (char *)a1;
    v31 = v16 + 3;
    goto LABEL_12;
  }
  v34 = v16 + 4;
  if (v16 + 4 < v32)
  {
    v33 = *(_QWORD *)(v13 + 8 * v34);
    if (v33)
      goto LABEL_16;
    v31 = v16 + 5;
    if (v16 + 5 < v32)
    {
      v6 = (char *)a1;
      v33 = *(_QWORD *)(v13 + 8 * v31);
      if (v33)
        goto LABEL_12;
      v31 = v32 - 1;
      v35 = v16 + 6;
      while (v35 < v32)
      {
        v33 = *(_QWORD *)(v13 + 8 * v35++);
        if (v33)
        {
          v31 = v35 - 1;
          goto LABEL_12;
        }
      }
LABEL_32:
      v18 = 0;
      v24 = 1;
      v16 = v31;
      goto LABEL_4;
    }
LABEL_29:
    v18 = 0;
    v24 = 1;
    v16 = v34;
    goto LABEL_5;
  }
  v18 = 0;
  v24 = 1;
  v16 += 3;
LABEL_5:
  v25 = 1;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, v24, 1, v3);
  v26 = v39;
  *v1 = v14;
  v1[1] = v26;
  v1[2] = v38;
  v1[3] = v16;
  v1[4] = v18;
  v27 = (void (*)(uint64_t))v1[5];
  sub_1005D8390((uint64_t)v12, (uint64_t)v9, &qword_100BF4780);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v3) != 1)
  {
    v28 = (uint64_t)v37;
    sub_1005D8390((uint64_t)v9, (uint64_t)v37, &qword_100BC5318);
    v27(v28);
    sub_1005D83D4(v28);
    v25 = 0;
  }
  v29 = sub_1000BA294(&qword_100BC53E0);
  return _s7Weather24LocationCompositionStateOwst_0(a1, v25, 1, v29);
}

uint64_t sub_1005D81E8()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v6);
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v9 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v18[0] = v7;
    v18[1] = v8;
    swift_bridgeObjectRetain(v8);
    v9(&v17, v18);
    swift_bridgeObjectRelease(v8);
    return v17;
  }
  v11 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v12 = (unint64_t)(v0[2] + 64) >> 6;
    if (v11 < v12)
    {
      v13 = v0[1];
      v14 = *(_QWORD *)(v13 + 8 * v11);
      if (v14)
      {
LABEL_7:
        v5 = (v14 - 1) & v14;
        v6 = __clz(__rbit64(v14)) + (v11 << 6);
        v4 = v11;
        goto LABEL_3;
      }
      v15 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v12)
      {
        v14 = *(_QWORD *)(v13 + 8 * v15);
        if (v14)
        {
LABEL_10:
          v11 = v15;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v12)
        {
          v14 = *(_QWORD *)(v13 + 8 * (v3 + 3));
          if (v14)
          {
            v11 = v3 + 3;
            goto LABEL_7;
          }
          v15 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v12)
          {
            v14 = *(_QWORD *)(v13 + 8 * v15);
            if (v14)
              goto LABEL_10;
            v11 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v12)
            {
              v14 = *(_QWORD *)(v13 + 8 * v11);
              if (v14)
                goto LABEL_7;
              v4 = v12 - 1;
              v16 = v3 + 6;
              while (v16 < v12)
              {
                v14 = *(_QWORD *)(v13 + 8 * v16++);
                if (v14)
                {
                  v11 = v16 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_1005D8358@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = sub_1005D7AF8(&v5, *a1, a1[1]);
  v4 = v5;
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1005D8390(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000BA294(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1005D83D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BC5318);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1005D8414()
{
  static AirPollutant.read(from:)();
}

void sub_1005D8428()
{
  AirPollutant.write(to:)();
}

void sub_1005D843C(uint64_t a1)
{
  static AirPollutantCategory.read(from:)(a1);
}

void sub_1005D8450()
{
  AirPollutantCategory.write(to:)();
}

void sub_1005D8464(uint64_t a1)
{
  static AirPollutantKind.read(from:)(a1);
}

void sub_1005D8478()
{
  AirPollutantKind.write(to:)();
}

void sub_1005D848C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  static AirPollutantUnit.read(from:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1005D84A0()
{
  AirPollutantUnit.write(to:)();
}

void sub_1005D84B4()
{
  static AirPollutantMeasurement.read(from:)();
}

void sub_1005D84C8()
{
  AirPollutantMeasurement.write(to:)();
}

void sub_1005D84DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  static AirQuality.read(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_1005D84F0()
{
  AirQuality.write(to:)();
}

uint64_t sub_1005D8504()
{
  return static AirQualityData.read(from:)();
}

#error "1005D8520: call analysis failed (funcsize=5)"

void sub_1005D852C(uint64_t a1)
{
  static AirQualityPreviousDayComparison.read(from:)(a1);
}

void sub_1005D8540()
{
  AirQualityPreviousDayComparison.write(to:)();
}

void sub_1005D8554()
{
  static AirQualityScale.read(from:)();
}

void sub_1005D8568()
{
  AirQualityScale.write(to:)();
}

void sub_1005D857C(uint64_t a1)
{
  static AirQualityScaleCategory.read(from:)(a1);
}

void sub_1005D8590()
{
  AirQualityScaleCategory.write(to:)();
}

void sub_1005D85A4()
{
  static AirQualityScaleGradient.read(from:)();
}

void sub_1005D85B8()
{
  AirQualityScaleGradient.write(to:)();
}

uint64_t sub_1005D85CC()
{
  return static AirQualityScaleGradientStop.read(from:)();
}

void sub_1005D85E0()
{
  AirQualityScaleGradientStop.write(to:)();
}

void sub_1005D85F4()
{
  static AirQualitySource.read(from:)();
}

void sub_1005D8608()
{
  AirQualitySource.write(to:)();
}

void sub_1005D861C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  static AirQualitySourceKind.read(from:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1005D8630(uint64_t a1)
{
  return AirQualitySourceKind.write(to:)(a1);
}

void sub_1005D8644(uint64_t a1)
{
  static AvailableDataSets.read(from:)(a1);
}

void sub_1005D8658()
{
  AvailableDataSets.write(to:)();
}

unint64_t sub_1005D8670()
{
  unint64_t result;

  result = qword_100BF4788;
  if (!qword_100BF4788)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100BF4788);
  }
  return result;
}

unint64_t sub_1005D86B0()
{
  unint64_t result;

  result = qword_100BF4790;
  if (!qword_100BF4790)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100BF4790);
  }
  return result;
}

uint64_t sub_1005D86EC(uint64_t a1)
{
  sub_1005D9854();
  return FixedSizeTypeBinaryCodable.write(to:)(a1);
}

uint64_t sub_1005D8730(uint64_t a1)
{
  sub_1005D9854();
  return static FixedSizeTypeBinaryCodable.read(from:)(a1);
}

uint64_t sub_1005D877C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static CurrentWeather.read(from:)(a1, a2);
}

#error "1005D8798: call analysis failed (funcsize=5)"

uint64_t sub_1005D87A4(uint64_t a1)
{
  return static CloudCoverByAltitude.read(from:)(a1);
}

void sub_1005D87B8()
{
  CloudCoverByAltitude.write(to:)();
}

void sub_1005D87CC()
{
  sub_10069B75C();
}

void sub_1005D87E0()
{
  sub_10069BD54();
}

void sub_1005D87F4(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_10069BFE0();
  if (!v1)
    *a1 = v3;
}

void sub_1005D881C()
{
  sub_10069C054();
}

uint64_t sub_1005D8834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static DayWeather.read(from:)(a1, a2);
}

#error "1005D8850: call analysis failed (funcsize=5)"

uint64_t sub_1005D885C()
{
  return static Elevation.read(from:)();
}

void sub_1005D8870()
{
  Elevation.write(to:)();
}

void sub_1005D8884()
{
  sub_10069DC88();
}

void sub_1005D8898()
{
  sub_10069DE50();
}

void sub_1005D88AC()
{
  sub_10069DF58();
}

void sub_1005D88C0(uint64_t a1)
{
  sub_10069E000(a1);
}

void sub_1005D88D4()
{
  sub_10069E044();
}

void sub_1005D88E8()
{
  sub_10069E1D0();
}

void sub_1005D88FC()
{
  sub_10069E2C0();
}

void sub_1005D8910()
{
  sub_10069E3E8();
}

void sub_1005D8924(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_10069E4D8();
  if (!v1)
    *a1 = v3;
}

void sub_1005D894C()
{
  sub_10069E54C();
}

void sub_1005D8964()
{
  sub_10069E5B4();
}

#error "1005D8980: call analysis failed (funcsize=5)"

void sub_1005D898C()
{
  sub_10069E9E8();
}

void sub_1005D89A0(uint64_t a1)
{
  sub_10069EB60(a1);
}

void sub_1005D89B4()
{
  sub_10069EC14();
}

void sub_1005D89C8()
{
  sub_10069EFCC();
}

uint64_t sub_1005D89DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static HourWeather.read(from:)(a1, a2);
}

void sub_1005D89F0()
{
  HourWeather.write(to:)();
}

void sub_1005D8A04(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _BYTE v4[112];

  sub_1006A05B4(a1);
  if (!v2)
    memcpy(a2, v4, 0x70uLL);
}

void sub_1005D8A4C(uint64_t a1)
{
  const void *v1;
  _BYTE v3[112];

  memcpy(v3, v1, sizeof(v3));
  sub_1006A0748(a1);
}

void sub_1005D8A9C()
{
  sub_1006A0854();
}

void sub_1005D8AB0()
{
  sub_1006A09D0();
}

void sub_1005D8AC4()
{
  static MinuteCondition.read(from:)();
}

void sub_1005D8AD8()
{
  MinuteCondition.write(to:)();
}

void sub_1005D8AEC()
{
  static MinuteSummary.read(from:)();
}

void sub_1005D8B00()
{
  MinuteSummary.write(to:)();
}

#error "1005D8B1C: call analysis failed (funcsize=5)"

void sub_1005D8B28()
{
  MinuteWeather.write(to:)();
}

void sub_1005D8B3C()
{
  static Article.read(from:)();
}

void sub_1005D8B50()
{
  Article.write(to:)();
}

void sub_1005D8B64(uint64_t a1)
{
  static ArticlePlacementLocation.read(from:)(a1);
}

void sub_1005D8B78()
{
  ArticlePlacementLocation.write(to:)();
}

void sub_1005D8B8C()
{
  static News.read(from:)();
}

void sub_1005D8BA0()
{
  News.write(to:)();
}

void sub_1005D8BB4()
{
  static ArticlePlacement.read(from:)();
}

void sub_1005D8BC8()
{
  ArticlePlacement.write(to:)();
}

void sub_1005D8BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1006A20D0(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

uint64_t sub_1005D8BF0()
{
  return sub_1006A2280();
}

void sub_1005D8C04()
{
  static NextHourCondition.read(from:)();
}

void sub_1005D8C18()
{
  NextHourCondition.write(to:)();
}

void sub_1005D8C2C()
{
  static NextHourData.read(from:)();
}

#error "1005D8C48: call analysis failed (funcsize=5)"

#error "1005D8C5C: call analysis failed (funcsize=5)"

void sub_1005D8C68()
{
  NextHourMinute.write(to:)();
}

void sub_1005D8C7C(uint64_t a1)
{
  static NextHourPerceivedIntensity.read(from:)(a1);
}

void sub_1005D8C90()
{
  NextHourPerceivedIntensity.write(to:)();
}

void sub_1005D8CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  static NextHourPerceivedIntensityScale.read(from:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1005D8CB8()
{
  return NextHourPerceivedIntensityScale.write(to:)();
}

void sub_1005D8CCC()
{
  static NextHourPrecipitation.read(from:)();
}

void sub_1005D8CE0()
{
  NextHourPrecipitation.write(to:)();
}

void sub_1005D8CF4()
{
  static NextHourSummary.read(from:)();
}

void sub_1005D8D08()
{
  NextHourSummary.write(to:)();
}

void sub_1005D8D1C(uint64_t a1)
{
  static NextHourToken.read(from:)(a1);
}

void sub_1005D8D30()
{
  NextHourToken.write(to:)();
}

void sub_1005D8D44()
{
  static MoonEvents.read(from:)();
}

void sub_1005D8D58()
{
  MoonEvents.write(to:)();
}

void sub_1005D8D6C(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v4;

  sub_1006A4D00(a1);
  if (!v2)
    *a2 = v4;
}

void sub_1005D8D94(uint64_t a1)
{
  char *v1;

  sub_1006A4DCC(a1, *v1);
}

void sub_1005D8DAC(uint64_t a1)
{
  static Precipitation.read(from:)(a1);
}

void sub_1005D8DC0()
{
  Precipitation.write(to:)();
}

void sub_1005D8DD4()
{
  static PrecipitationAmount.read(from:)();
}

void sub_1005D8DE8()
{
  PrecipitationAmount.write(to:)();
}

void sub_1005D8DFC()
{
  static PrecipitationAmountByType.read(from:)();
}

void sub_1005D8E10()
{
  PrecipitationAmountByType.write(to:)();
}

void sub_1005D8E24()
{
  static SnowfallAmount.read(from:)();
}

void sub_1005D8E38()
{
  SnowfallAmount.write(to:)();
}

#error "1005D8E54: call analysis failed (funcsize=5)"

void sub_1005D8E60()
{
  PrecipitationShift.write(to:)();
}

void sub_1005D8E74(uint64_t a1)
{
  static PrecipitationShift.Kind.read(from:)(a1);
}

void sub_1005D8E88()
{
  PrecipitationShift.Kind.write(to:)();
}

void sub_1005D8E9C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[14];

  sub_1006A6FE4(a1, v4);
  if (!v2)
    memcpy(a2, v4, 0x70uLL);
}

void sub_1005D8EE4(uint64_t a1)
{
  const void *v1;
  _BYTE v3[112];

  memcpy(v3, v1, sizeof(v3));
  sub_1006A70C4(a1);
}

void sub_1005D8F34(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _BYTE v4[96];

  sub_1006A718C(a1);
  if (!v2)
    memcpy(a2, v4, 0x60uLL);
}

uint64_t sub_1005D8F7C(uint64_t a1)
{
  const void *v1;
  _BYTE v4[96];

  memcpy(v4, v1, sizeof(v4));
  return sub_1006A72C8(a1);
}

void sub_1005D8FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  static PressureTrend.read(from:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1005D8FE0(uint64_t a1)
{
  return PressureTrend.write(to:)(a1);
}

void sub_1005D8FF4(uint64_t a1)
{
  static ProviderAttribution.read(from:)(a1);
}

void sub_1005D9008(uint64_t a1)
{
  ProviderAttribution.write(to:)(a1);
}

void sub_1005D901C()
{
  static SunEvents.read(from:)();
}

void sub_1005D9030()
{
  SunEvents.write(to:)();
}

void sub_1005D9044(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  sub_1006A7D04(a1);
  if (!v2)
    *a2 = v4;
}

void sub_1005D906C()
{
  sub_1006A7D48();
}

void sub_1005D9084(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_1006A7D8C(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
}

uint64_t sub_1005D90B0(uint64_t a1)
{
  return sub_1006A7E5C(a1);
}

double sub_1005D90CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1006A7F10(a1, (double *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

void sub_1005D9110(uint64_t a1)
{
  sub_1006A7F90(a1);
}

void sub_1005D9148()
{
  static UVIndex.read(from:)();
}

void sub_1005D915C()
{
  UVIndex.write(to:)();
}

void sub_1005D9170()
{
  static Wind.read(from:)();
}

void sub_1005D9184()
{
  Wind.write(to:)();
}

void sub_1005D9198(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v4;

  static Wind.CompassDirection.read(from:)(a1);
  if (!v2)
    *a2 = v4;
}

void sub_1005D91C0(uint64_t a1)
{
  char *v1;

  Wind.CompassDirection.write(to:)(a1, *v1);
}

#error "1005D91E0: call analysis failed (funcsize=5)"

void sub_1005D91EC()
{
  WeatherAlert.write(to:)();
}

uint64_t sub_1005D9200()
{
  return static WeatherChanges.read(from:)();
}

void sub_1005D9214()
{
  WeatherChanges.write(to:)();
}

void sub_1005D9228()
{
  static WeatherChange.read(from:)();
}

void sub_1005D923C()
{
  WeatherChange.write(to:)();
}

void sub_1005D9250(uint64_t a1)
{
  static WeatherCondition.read(from:)(a1);
}

void sub_1005D9264()
{
  WeatherCondition.write(to:)();
}

#error "1005D9280: call analysis failed (funcsize=5)"

void sub_1005D928C()
{
  WeatherMetadata.write(to:)();
}

void sub_1005D92A0(uint64_t a1)
{
  static WeatherSeverity.read(from:)(a1);
}

void sub_1005D92B4()
{
  WeatherSeverity.write(to:)();
}

void sub_1005D92C8(uint64_t a1)
{
  static WeatherSeverityKind.read(from:)(a1);
}

void sub_1005D92DC()
{
  WeatherSeverityKind.write(to:)();
}

void sub_1005D92F0()
{
  sub_1006AA400();
}

void sub_1005D9304()
{
  sub_1006AAC54();
}

void sub_1005D9318(uint64_t a1)
{
  static ApparentPrecipitationIntensity.read(from:)(a1);
}

void sub_1005D932C()
{
  ApparentPrecipitationIntensity.write(to:)();
}

void sub_1005D9340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  static ApparentPrecipitationIntensityCategory.read(from:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1005D9354()
{
  return ApparentPrecipitationIntensityCategory.write(to:)();
}

void sub_1005D9368()
{
  static WeatherAvailability.read(from:)();
}

void sub_1005D937C()
{
  WeatherAvailability.write(to:)();
}

void sub_1005D9390(uint64_t a1)
{
  static WeatherAvailability.AvailabilityKind.read(from:)(a1);
}

void sub_1005D93A4()
{
  WeatherAvailability.AvailabilityKind.write(to:)();
}

void sub_1005D93B8()
{
  sub_1006AB6A0();
}

uint64_t sub_1005D93CC(uint64_t a1)
{
  return sub_1006AB778(a1);
}

double sub_1005D93E0@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  sub_1006AB7F0();
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    result = *(double *)&v6;
    a1[2] = v6;
  }
  return result;
}

uint64_t sub_1005D9420(uint64_t a1)
{
  return sub_1006AB86C(a1);
}

void sub_1005D9458()
{
  sub_1006AB8A0();
}

void sub_1005D946C()
{
  sub_1006ABA34();
}

void sub_1005D9480(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t __src[29];

  sub_1006ABAF4(a1, __src);
  if (!v2)
    memcpy(a2, __src, 0xE8uLL);
}

void sub_1005D94D0(uint64_t a1)
{
  const void *v1;
  _BYTE __dst[232];

  memcpy(__dst, v1, sizeof(__dst));
  sub_1006ABEDC(a1);
}

uint64_t sub_1005D9520()
{
  return sub_1006ABFBC();
}

void sub_1005D9534()
{
  sub_1006ABFE0();
}

void sub_1005D9548()
{
  sub_1006ABFF4();
}

void sub_1005D955C()
{
  sub_1006AC058();
}

void sub_1005D9570()
{
  sub_1006AC14C();
}

void sub_1005D9584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  static WeatherImportance.read(from:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1005D9598()
{
  return WeatherImportance.write(to:)();
}

uint64_t sub_1005D95AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static DayPartForecast.read(from:)(a1, a2);
}

void sub_1005D95C0()
{
  DayPartForecast.write(to:)();
}

uint64_t sub_1005D95D4()
{
  return static HistoricalComparisons.read(from:)();
}

void sub_1005D95E8()
{
  HistoricalComparisons.write(to:)();
}

void sub_1005D95FC()
{
  static HistoricalComparison.read(from:)();
}

void sub_1005D9610()
{
  HistoricalComparison.write(to:)();
}

void sub_1005D9624(uint64_t a1)
{
  static Deviation.read(from:)(a1);
}

void sub_1005D9638()
{
  Deviation.write(to:)();
}

void sub_1005D964C()
{
  static HistoricalFacts.read(from:)();
}

void sub_1005D9660()
{
  HistoricalFacts.write(to:)();
}

void sub_1005D9674()
{
  static HistoricalFact.read(from:)();
}

void sub_1005D9688()
{
  HistoricalFact.write(to:)();
}

void sub_1005D969C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  static HistoricalFact.Period.read(from:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1005D96B0(uint64_t a1)
{
  return HistoricalFact.Period.write(to:)(a1);
}

void sub_1005D96C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  static HistoricalFact.Condition.read(from:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1005D96D8()
{
  HistoricalFact.Condition.write(to:)();
}

void sub_1005D96EC()
{
  static HistoricalFact.Argument.read(from:)();
}

void sub_1005D9700()
{
  HistoricalFact.Argument.write(to:)();
}

void sub_1005D9714()
{
  static WeatherStatisticsModel.read(from:)();
}

void sub_1005D9728()
{
  WeatherStatisticsModel.write(to:)();
}

uint64_t sub_1005D973C()
{
  return static DayPrecipitationStatistics.read(from:)();
}

void sub_1005D9750()
{
  DayPrecipitationStatistics.write(to:)();
}

void sub_1005D9764()
{
  static DayTemperatureStatistics.read(from:)();
}

void sub_1005D9778()
{
  DayTemperatureStatistics.write(to:)();
}

void sub_1005D978C()
{
  static DayPrecipitationSummary.read(from:)();
}

void sub_1005D97A0()
{
  DayPrecipitationSummary.write(to:)();
}

void sub_1005D97B4()
{
  static DayTemperatureSummary.read(from:)();
}

void sub_1005D97C8()
{
  DayTemperatureSummary.write(to:)();
}

void sub_1005D97DC()
{
  static HourTemperatureStatistics.read(from:)();
}

void sub_1005D97F0()
{
  HourTemperatureStatistics.write(to:)();
}

uint64_t sub_1005D9804()
{
  return static MonthPrecipitationStatistics.read(from:)();
}

void sub_1005D9818()
{
  MonthPrecipitationStatistics.write(to:)();
}

void sub_1005D982C()
{
  static MonthTemperatureStatistics.read(from:)();
}

void sub_1005D9840()
{
  MonthTemperatureStatistics.write(to:)();
}

unint64_t sub_1005D9854()
{
  unint64_t result;

  result = qword_100BF4798;
  if (!qword_100BF4798)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100BF4798);
  }
  return result;
}

uint64_t sub_1005D9890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL *v32;
  void *v33;
  uint64_t v34;
  __n128 v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v73;
  _QWORD v74[2];
  _QWORD v75[2];
  __int128 v76;
  char v77[40];
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;

  v63 = a1;
  v68 = a2;
  v59 = type metadata accessor for Locale.Language(0);
  v58 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v57 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Locale(0);
  v55 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v54 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for WindComponentCompassViewStyle(0);
  v73 = *(_QWORD *)(v61 - 8);
  v4 = __chkstk_darwin(v61);
  v62 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v60 = (BOOL *)&v54 - v6;
  v7 = (void *)objc_opt_self(NSBundle);
  v8 = objc_msgSend(v7, "mainBundle");
  v78._object = (void *)0x8000000100A0D850;
  v9._countAndFlagsBits = 87;
  v9._object = (void *)0xE100000000000000;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v78._countAndFlagsBits = 0xD000000000000024;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v78);

  v12 = objc_msgSend(v7, "mainBundle");
  v79._object = (void *)0x8000000100A0D880;
  v13._countAndFlagsBits = 69;
  v13._object = (void *)0xE100000000000000;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v79._countAndFlagsBits = 0xD000000000000024;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v79);

  v16 = objc_msgSend(v7, "mainBundle");
  v80._object = (void *)0x8000000100A0D8B0;
  v17._countAndFlagsBits = 78;
  v17._object = (void *)0xE100000000000000;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v80._countAndFlagsBits = 0xD000000000000025;
  v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v80);

  v20 = objc_msgSend(v7, "mainBundle");
  v81._object = (void *)0x8000000100A0D8E0;
  v21._countAndFlagsBits = 83;
  v21._object = (void *)0xE100000000000000;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v81._countAndFlagsBits = 0xD000000000000025;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v81);

  v24 = sub_1000BA294(&qword_100BC6A10);
  inited = swift_initStackObject(v24, v77);
  *(_OWORD *)(inited + 16) = xmmword_1009891D0;
  *(Swift::String *)(inited + 32) = v11;
  *(Swift::String *)(inited + 48) = v15;
  countAndFlagsBits = v19._countAndFlagsBits;
  *(Swift::String *)(inited + 64) = v19;
  v70 = v23._countAndFlagsBits;
  *(Swift::String *)(inited + 80) = v23;
  swift_bridgeObjectRetain_n(v11._object, 2);
  swift_bridgeObjectRetain(v15._object);
  object = v19._object;
  swift_bridgeObjectRetain(v19._object);
  v69 = v23._object;
  swift_bridgeObjectRetain(v23._object);
  v26 = String.count.getter(v11._countAndFlagsBits, v11._object);
  v66 = v11._object;
  swift_bridgeObjectRelease(v11._object);
  v65 = v15._countAndFlagsBits;
  if (v26 == 1
    && (swift_bridgeObjectRetain(v15._object),
        v27 = String.count.getter(v15._countAndFlagsBits, v15._object),
        swift_bridgeObjectRelease(v15._object),
        v27 == 1))
  {
    v28 = object;
    swift_bridgeObjectRetain(object);
    v29 = String.count.getter(countAndFlagsBits, v28);
    swift_bridgeObjectRelease(v28);
    v30 = v63;
    v31 = v61;
    v32 = v60;
    if (v29 == 1)
    {
      v33 = v69;
      swift_bridgeObjectRetain(v69);
      v34 = String.count.getter(v70, v33);
      swift_release(inited);
      v35 = swift_bridgeObjectRelease(v33);
      v36 = v34 == 1;
    }
    else
    {
      v35 = swift_release(inited);
      v36 = 0;
    }
  }
  else
  {
    v35 = swift_release(inited);
    v36 = 0;
    v30 = v63;
    v31 = v61;
    v32 = v60;
  }
  *v32 = v36;
  v37 = (*(uint64_t (**)(BOOL *, _QWORD, uint64_t, __n128))(v73 + 104))(v32, enum case for WindComponentCompassViewStyle.cardinalDirectionsInline(_:), v31, v35);
  v38 = WindComponentCompassViewStyle.canPrimaryLabelShowWindDirection.getter(v37);
  v67 = v11._countAndFlagsBits;
  v64 = v15._object;
  if ((v38 & 1) == 0)
  {
    v44 = v62;
    v45 = v31;
    v46 = *(_QWORD *)(v30 + 16);
    v48 = *(_QWORD *)(v30 + 24);
    v49 = *(_QWORD *)(v30 + 32);
    v50 = *(_QWORD *)(v30 + 40);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v50);
LABEL_11:
    v51 = 1;
    goto LABEL_12;
  }
  v39 = v54;
  v40 = static Locale.current.getter(v38);
  v41 = v57;
  Locale.language.getter(v40);
  v42 = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v39, v56);
  v43 = Locale.Language.isHebrew.getter(v42);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v41, v59);
  if ((v43 & 1) == 0)
  {
    v44 = v62;
    v45 = v31;
    v46 = *(_QWORD *)(v30 + 192);
    v48 = *(_QWORD *)(v30 + 200);
    swift_bridgeObjectRetain(v48);
    v49 = 0;
    v50 = 0;
    goto LABEL_11;
  }
  v44 = v62;
  v45 = v31;
  v76 = *(_OWORD *)(v30 + 192);
  v75[0] = 47;
  v75[1] = 0xE100000000000000;
  v74[0] = 10;
  v74[1] = 0xE100000000000000;
  sub_100114EF8();
  v46 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v75, v74, 0, 0, 0, 1, &type metadata for String, &type metadata for String);
  v48 = v47;
  v49 = 0;
  v50 = 0;
  v51 = 2;
LABEL_12:
  v52 = v73;
  (*(void (**)(char *, BOOL *, uint64_t))(v73 + 16))(v44, v32, v45);
  WindComponentCompassViewModel.init(style:angle:primaryLabel:secondaryLabel:primaryLabelLineLimit:northString:eastString:southString:westString:)(v44, v46, v48, v49, v50, v51, countAndFlagsBits, object, *(double *)(v30 + 208), v65, v64, v70, v69, v67, v66);
  return (*(uint64_t (**)(BOOL *, uint64_t))(v52 + 8))(v32, v45);
}

unint64_t sub_1005D9F30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4860;
  if (!qword_100BF4860)
  {
    v1 = objc_opt_self(NSUnitAngle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BF4860);
  }
  return result;
}

unint64_t sub_1005D9F6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4868;
  if (!qword_100BF4868)
  {
    v1 = sub_100075EB0(&qword_100BF4850);
    result = swift_getWitnessTable(&protocol conformance descriptor for Measurement<A><>.FormatStyle, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4868);
  }
  return result;
}

_QWORD *assignWithCopy for MainViewModelEnvironmentModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

_QWORD *assignWithTake for MainViewModelEnvironmentModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release(v4);
  return a1;
}

uint64_t sub_1005DA020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = type metadata accessor for WeatherMapPresentationState(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainViewModel(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_1001226F8();
  swift_release(a3);
  sub_10000AB54((uint64_t)&v9[*(int *)(v7 + 36)], (uint64_t)v6, type metadata accessor for WeatherMapPresentationState);
  sub_1000215BC((uint64_t)v9, type metadata accessor for MainViewModel);
  LODWORD(a3) = v6[*(int *)(v4 + 36)];
  sub_1000215BC((uint64_t)v6, type metadata accessor for WeatherMapPresentationState);
  if ((_DWORD)a3 == 1)
  {
    if (qword_100BC1F90 != -1)
      swift_once(&qword_100BC1F90, sub_10032E3BC);
    swift_retain();
  }
  else
  {
    v10 = static Animation.easeInOut.getter();
  }
  return Transaction.animation.setter(v10);
}

void sub_1005DA18C()
{
  _BYTE *v0;

  *v0 = sub_1000E7250() & 1;
  sub_10004A298();
}

void sub_1005DA1AC(char *a1)
{
  sub_1000D9770(a1);
  sub_10004A298();
}

uint64_t sub_1005DA1C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005DA1E8(uint64_t a1)
{
  uint64_t v1;

  return sub_1005DA020(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_1005DA1F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF48B0;
  if (!qword_100BF48B0)
  {
    v1 = sub_100075EB0(&qword_100BF48A8);
    sub_1005DA278();
    sub_10003D310(&qword_100BF48E8, &qword_100BF48F0, (uint64_t)&protocol conformance descriptor for _ValueTransactionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF48B0);
  }
  return result;
}

unint64_t sub_1005DA278()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF48B8;
  if (!qword_100BF48B8)
  {
    v1 = sub_100075EB0(&qword_100BF4890);
    sub_100155F54();
    sub_10003D310((unint64_t *)&unk_100C0A590, &qword_100BD0658, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF48B8);
  }
  return result;
}

BOOL sub_1005DA2FC(char *a1, char *a2)
{
  return sub_10009F07C(*a1, *a2);
}

uint64_t sub_1005DA308(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v9[2];
  _BYTE v10[2];

  v3 = sub_1000BA294(&qword_100BF4900);
  __chkstk_darwin(v3);
  sub_100098728();
  v4 = a1[3];
  v5 = a1[4];
  v6 = (uint64_t)sub_1000DB418(a1, v4);
  v7 = sub_1005DA944();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NetworkState.CodingKeys, &type metadata for NetworkState.CodingKeys, v7, v4, v5);
  if (!v1)
  {
    v10[0] = 0;
    sub_1005DA980();
    sub_1000BC64C((uint64_t)&type metadata for NetworkState.CodingType, (uint64_t)v10);
    if ((v10[1] & 1) != 0)
    {
      sub_1000BAE28();
      v6 = 4;
    }
    else
    {
      v9[0] = 1;
      sub_1005DA9BC();
      sub_1000BC64C((uint64_t)&type metadata for NetworkInterface, (uint64_t)v9);
      sub_1000BAE28();
      v6 = v9[1];
    }
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  return v6;
}

uint64_t sub_1005DA450(_QWORD *a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  ValueMetadata *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char v22;
  unsigned __int8 v23;
  __int16 v24;
  char v25;
  char v26;

  v5 = a2;
  v6 = sub_1000BA294(&qword_100BF4920);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098728();
  v10 = v9 - v8;
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1005DA944();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NetworkState.CodingKeys, &type metadata for NetworkState.CodingKeys, v13, v11, v12);
  if (v5 == 4)
  {
    v26 = 1;
    v25 = 0;
    v15 = sub_1005DA9F8();
    v16 = &type metadata for NetworkState.CodingType;
    v17 = &v26;
    v18 = &v25;
LABEL_5:
    sub_1000C3D60((uint64_t)v17, (uint64_t)v18, v14, (uint64_t)v16, v15);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  v24 = 0;
  v19 = sub_1005DA9F8();
  sub_1000C3D60((uint64_t)&v24 + 1, (uint64_t)&v24, v20, (uint64_t)&type metadata for NetworkState.CodingType, v19);
  if (!v2)
  {
    v23 = a2;
    v22 = 1;
    v15 = sub_1005DAA34();
    v16 = &type metadata for NetworkInterface;
    v17 = (char *)&v23;
    v18 = &v22;
    goto LABEL_5;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1005DA5A0(Swift::String a1)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_100B5AE18;
  return sub_1005DA5F0(a1, v1);
}

uint64_t sub_1005DA5BC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6361667265746E69;
  else
    return 1701869940;
}

uint64_t sub_1005DA5F0(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  unsigned int v6;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (v5)
    return v6;
  else
    return 0;
}

uint64_t sub_1005DA63C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656E696C66666FLL;
  else
    return 0x6C62616863616572;
}

void sub_1005DA678(char *a1, unsigned __int8 *a2)
{
  sub_10068BCD4(*a1, *a2);
}

void sub_1005DA684()
{
  sub_1004A75BC();
}

double sub_1005DA68C(uint64_t a1)
{
  char *v1;

  return sub_1001D9020(a1, *v1);
}

void sub_1005DA694(uint64_t a1)
{
  sub_1001D9BE8(a1);
}

uint64_t sub_1005DA69C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  uint64_t result;

  v3._rawValue = &off_100B5AE18;
  result = sub_1005DA5F0(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1005DA6D0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1005DA5BC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1005DA6F8()
{
  char *v0;

  return sub_1005DA5BC(*v0);
}

uint64_t sub_1005DA700@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1005DA5A0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005DA724(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005DA944();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005DA74C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005DA944();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1005DA774(char *a1, unsigned __int8 *a2)
{
  sub_10068BC50(*a1, *a2);
}

void sub_1005DA780()
{
  sub_1004A75C8();
}

double sub_1005DA788(uint64_t a1)
{
  char *v1;

  return sub_1001D8FCC(a1, *v1);
}

void sub_1005DA790(uint64_t a1)
{
  sub_1001D9C44(a1);
}

uint64_t sub_1005DA798@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  uint64_t result;

  v3._rawValue = &off_100B5AE68;
  result = sub_1005DA5F0(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1005DA7CC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1005DA63C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1005DA7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1005DADF4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1005DA850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1005DADF4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1005DA89C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1005DA308(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1005DA8C4(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_1005DA450(a1, *v1);
}

uint64_t sub_1005DA8DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005DAA70();
  return ShortDescribable.description.getter(a1, v2);
}

void sub_1005DA904(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v4;

  sub_1006AF894(a1);
  if (!v2)
    *a2 = v4;
}

void sub_1005DA92C(uint64_t a1)
{
  char *v1;

  sub_1006AF944(a1, *v1);
}

unint64_t sub_1005DA944()
{
  unint64_t result;

  result = qword_100BF4908;
  if (!qword_100BF4908)
  {
    result = swift_getWitnessTable(&unk_1009B5468, &type metadata for NetworkState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF4908);
  }
  return result;
}

unint64_t sub_1005DA980()
{
  unint64_t result;

  result = qword_100BF4910;
  if (!qword_100BF4910)
  {
    result = swift_getWitnessTable(&unk_1009B5440, &type metadata for NetworkState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100BF4910);
  }
  return result;
}

unint64_t sub_1005DA9BC()
{
  unint64_t result;

  result = qword_100BF4918;
  if (!qword_100BF4918)
  {
    result = swift_getWitnessTable(&unk_100990420, &type metadata for NetworkInterface);
    atomic_store(result, (unint64_t *)&qword_100BF4918);
  }
  return result;
}

unint64_t sub_1005DA9F8()
{
  unint64_t result;

  result = qword_100BF4928;
  if (!qword_100BF4928)
  {
    result = swift_getWitnessTable(&unk_1009B5418, &type metadata for NetworkState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100BF4928);
  }
  return result;
}

unint64_t sub_1005DAA34()
{
  unint64_t result;

  result = qword_100BF4930;
  if (!qword_100BF4930)
  {
    result = swift_getWitnessTable(&unk_1009903F8, &type metadata for NetworkInterface);
    atomic_store(result, (unint64_t *)&qword_100BF4930);
  }
  return result;
}

unint64_t sub_1005DAA70()
{
  unint64_t result;

  result = qword_100BF4938;
  if (!qword_100BF4938)
  {
    result = swift_getWitnessTable(&unk_1009B51BC, &type metadata for NetworkState);
    atomic_store(result, (unint64_t *)&qword_100BF4938);
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkState.CodingType()
{
  return &type metadata for NetworkState.CodingType;
}

uint64_t _s7Weather12NetworkStateO10CodingTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1005DAB0C + 4 * byte_1009B512D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005DAB40 + 4 * byte_1009B5128[v4]))();
}

uint64_t sub_1005DAB40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005DAB48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005DAB50);
  return result;
}

uint64_t sub_1005DAB5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005DAB64);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1005DAB68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005DAB70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NetworkState.CodingKeys()
{
  return &type metadata for NetworkState.CodingKeys;
}

uint64_t getEnumTagSinglePayload for NetworkState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
  {
    v6 = *a1;
    v7 = v6 >= 4;
    v8 = v6 - 4;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1005DABDC + 4 * byte_1009B5132[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for NetworkState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFC)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1005DAC84 + 4 * byte_1009B513C[v5]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1005DACB8 + 4 * byte_1009B5137[v5]))();
}

uint64_t sub_1005DACB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005DACC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005DACC8);
  return result;
}

uint64_t sub_1005DACD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005DACDCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1005DACE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005DACE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_1005DACF8()
{
  unint64_t result;

  result = qword_100BF4940;
  if (!qword_100BF4940)
  {
    result = swift_getWitnessTable(&unk_1009B5350, &type metadata for NetworkState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF4940);
  }
  return result;
}

unint64_t sub_1005DAD38()
{
  unint64_t result;

  result = qword_100BF4948;
  if (!qword_100BF4948)
  {
    result = swift_getWitnessTable(&unk_1009B53F0, &type metadata for NetworkState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100BF4948);
  }
  return result;
}

unint64_t sub_1005DAD78()
{
  unint64_t result;

  result = qword_100BF4950;
  if (!qword_100BF4950)
  {
    result = swift_getWitnessTable(&unk_1009B5288, &type metadata for NetworkState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF4950);
  }
  return result;
}

unint64_t sub_1005DADB8()
{
  unint64_t result;

  result = qword_100BF4958;
  if (!qword_100BF4958)
  {
    result = swift_getWitnessTable(&unk_1009B52B0, &type metadata for NetworkState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF4958);
  }
  return result;
}

unint64_t sub_1005DADF4()
{
  unint64_t result;

  result = qword_100BF4960;
  if (!qword_100BF4960)
  {
    result = swift_getWitnessTable(&unk_1009B5378, &type metadata for NetworkState.CodingType);
    atomic_store(result, (unint64_t *)&qword_100BF4960);
  }
  return result;
}

void sub_1005DAE30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v114 = a1;
  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_100088FDC();
  v107 = v2;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v111 = v4;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v113 = v6;
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v106 = v8;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v110 = v10;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v112 = v12;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v109 = v14;
  v108 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  sub_100098728();
  v18 = v17 - v16;
  v19 = type metadata accessor for ModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  v22 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v98 - v24;
  sub_1000BA294(&qword_100BD0F98);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_100098728();
  v29 = v28 - v27;
  v30 = type metadata accessor for PresentedLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  sub_100098728();
  v34 = v33 - v32;
  v35 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v36 = objc_msgSend(v35, "userInterfaceIdiom");

  if (!v36)
  {
    v37 = (uint64_t)v25;
    v103 = v18;
    v104 = v15;
    v105 = v19;
    v39 = v113;
    v38 = v114;
    sub_1008C3EC4();
    if (_s7Weather24LocationCompositionStateOwet_0(v29, 1, v30) == 1)
    {
      sub_100021A14(v29, &qword_100BD0F98);
    }
    else
    {
      v40 = v34;
      sub_10007802C(v29, v34, type metadata accessor for PresentedLocation);
      sub_100080C0C(v38 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView, v37, type metadata accessor for ModalViewState);
      swift_storeEnumTagMultiPayload(v22, v105, 6);
      sub_1000EF360();
      v42 = v41;
      sub_1000215BC((uint64_t)v22, type metadata accessor for ModalViewState);
      sub_1000215BC(v37, type metadata accessor for ModalViewState);
      if ((v42 & 1) != 0)
      {
        if (qword_100BC2430 != -1)
          swift_once(&qword_100BC2430, sub_1006F37D4);
        v43 = type metadata accessor for Logger(0);
        v44 = sub_1000AECD4(v43, (uint64_t)qword_100CAF088);
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.default.getter(v45);
        v47 = os_log_type_enabled(v45, v46);
        v48 = v106;
        if (v47)
        {
          v49 = (uint8_t *)sub_10009D340();
          *(_WORD *)v49 = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "Found presentedLocationIdentifier. Remove none-presented locations weather data.", v49, 2u);
          sub_1000986F0((uint64_t)v49);
        }

        v50 = v38 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData;
        v51 = *(_QWORD *)(v38 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
        __chkstk_darwin(v52);
        v97 = v34;
        swift_bridgeObjectRetain();
        sub_1005DB648((uint64_t)sub_1005DB61C, (uint64_t)&v96, v51);
        v101 = v53;
        swift_bridgeObjectRelease();
        v102 = v34;
        v54 = *(_QWORD *)(v50 + 24);
        __chkstk_darwin(v55);
        v97 = v56;
        swift_bridgeObjectRetain();
        sub_1005DB648((uint64_t)sub_1005DB778, (uint64_t)&v96, v54);
        v100 = v57;
        swift_bridgeObjectRelease();
        v58 = v103;
        v60 = UUID.init()(v59);
        v99 = UUID.uuidString.getter(v60);
        v62 = v61;
        (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v58, v108);
        v63 = type metadata accessor for AppConfigurationState(0);
        v64 = v109;
        v67 = sub_1000BA2E8(v109, v65, v66, v63);
        v68 = type metadata accessor for EnvironmentState(v67);
        v69 = v112;
        v72 = sub_1000BA2E8(v112, v70, v71, v68);
        v73 = type metadata accessor for LocationsState(v72);
        v74 = v110;
        v77 = sub_1000BA2E8(v110, v75, v76, v73);
        v78 = type metadata accessor for NotificationsOptInState(v77);
        v81 = sub_1000BA2E8(v48, v79, v80, v78);
        v82 = type metadata accessor for TimeState(v81);
        v85 = sub_1000BA2E8(v39, v83, v84, v82);
        v86 = type metadata accessor for ViewState(v85);
        v87 = v39;
        v88 = v38;
        v89 = v111;
        _s7Weather24LocationCompositionStateOwst_0(v111, 1, 1, v86);
        v90 = v107;
        _s7Weather24LocationCompositionStateOwst_0(v107, 1, 1, v105);
        sub_1000DEBAC(0, 3, v64, v69, v74, 0, 0, 0, v48, v87, v89, v90, v99, v62, v101, v100, 0, 0, 0,
          v88);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        sub_100021A14(v90, &qword_100BC5F60);
        sub_100021A14(v89, &qword_100BC5F88);
        sub_100021A14(v87, &qword_100BC5F90);
        sub_100021A14(v48, &qword_100BC5F98);
        sub_100021A14(v74, &qword_100BC5FA0);
        sub_100021A14(v112, &qword_100BC5FA8);
        sub_100021A14(v64, &qword_100BC5FB0);
        sub_1000215BC(v102, type metadata accessor for PresentedLocation);
      }
      else
      {
        if (qword_100BC2430 != -1)
          swift_once(&qword_100BC2430, sub_1006F37D4);
        v91 = type metadata accessor for Logger(0);
        v92 = sub_1000AECD4(v91, (uint64_t)qword_100CAF088);
        v93 = Logger.logObject.getter(v92);
        v94 = static os_log_type_t.default.getter(v93);
        if (os_log_type_enabled(v93, v94))
        {
          v95 = (uint8_t *)sub_10009D340();
          *(_WORD *)v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v93, v94, "DiscardNonePresentedLocationDataStateProcessor: A modal view is presented. Skip cleaning up state", v95, 2u);
          sub_1000986F0((uint64_t)v95);
        }

        sub_1000215BC(v40, type metadata accessor for PresentedLocation);
      }
    }
  }
  sub_100098640();
}

uint64_t sub_1005DB52C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;

  sub_1000BA294(a4);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = (_QWORD *)(v11 - v10);
  v14 = *a1;
  v13 = a1[1];
  *v12 = v14;
  v12[1] = v13;
  sub_100080C0C(a2, v11 - v10 + *(int *)(v15 + 48), a5);
  swift_bridgeObjectRetain();
  v17 = Location.Identifier.id.getter(v16);
  if (v14 == v17 && v13 == v18)
    v20 = 1;
  else
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v13, v17);
  swift_bridgeObjectRelease();
  sub_100021A14((uint64_t)v12, a4);
  return v20 & 1;
}

uint64_t sub_1005DB61C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1005DB52C(a1, a2, *(_QWORD *)(v2 + 16), &qword_100BC9EF8, type metadata accessor for LocationWeatherDataState) & 1;
}

void sub_1005DB648(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_BYTE *)(a3 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    sub_1000E725C();
    sub_1000C4C40();
    if (v3)
      swift_willThrow(v8, v9);
  }
  else
  {
    v10 = swift_slowAlloc(v7, -1);
    sub_1000E725C();
    sub_1000C4C40();
    swift_slowDealloc(v10, -1, -1);
  }
  sub_1000B44B0();
}

uint64_t sub_1005DB778(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1005DB52C(a1, a2, *(_QWORD *)(v2 + 16), &qword_100BC9EE0, type metadata accessor for LocationAvailableDataSetState) & 1;
}

void sub_1005DB7A4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, char *, __n128), uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __n128 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t (*v39)(_QWORD *, char *, __n128);

  v31 = a2;
  v32 = a7;
  v39 = a4;
  v33 = a1;
  v10 = a6(0);
  v37 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - v11;
  v13 = 0;
  v14 = *(_QWORD *)(a3 + 64);
  v34 = 0;
  v35 = a3 + 64;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v36 = (unint64_t)(v15 + 63) >> 6;
  while (v17)
  {
    v18 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    v19 = v18 | (v13 << 6);
LABEL_17:
    v25 = *(_QWORD *)(a3 + 56);
    v26 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v19);
    v27 = v26[1];
    v38[0] = *v26;
    v38[1] = v27;
    sub_100080C0C(v25 + *(_QWORD *)(v37 + 72) * v19, (uint64_t)v12, a6);
    v28 = swift_bridgeObjectRetain();
    v29 = v39(v38, v12, v28);
    sub_1000215BC((uint64_t)v12, a6);
    swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_28;
    if ((v29 & 1) != 0)
    {
      *(unint64_t *)((char *)v33 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = __OFADD__(v34++, 1);
      if (v20)
        goto LABEL_31;
    }
  }
  v20 = __OFADD__(v13++, 1);
  if (v20)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v13 >= v36)
    goto LABEL_27;
  if (*(_QWORD *)(v35 + 8 * v13))
  {
LABEL_16:
    sub_1000DF470();
    v17 = v23 & v22;
    v19 = v24 + (v13 << 6);
    goto LABEL_17;
  }
  v21 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_27;
  if (*(_QWORD *)(v35 + 8 * v21))
    goto LABEL_15;
  v21 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_27;
  if (*(_QWORD *)(v35 + 8 * v21))
    goto LABEL_15;
  v21 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_27:
    sub_1005DBA24(v33, v31, v34, (_QWORD *)a3, a6, v32);
LABEL_28:
    sub_1000B44B0();
    return;
  }
  if (*(_QWORD *)(v35 + 8 * v21))
  {
LABEL_15:
    v13 = v21;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v13 >= v36)
      goto LABEL_27;
    ++v21;
    if (*(_QWORD *)(v35 + 8 * v13))
      goto LABEL_16;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
}

void sub_1005DB9E8(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  sub_1005DBD54(a1, a2, a3, a4, type metadata accessor for CalendarMoonPhaseData, &qword_100BF4978);
}

void sub_1005DB9FC(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  sub_1005DBA24(a1, a2, a3, a4, type metadata accessor for LocationAvailableDataSetState, &qword_100BF4968);
}

void sub_1005DBA10(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  sub_1005DBA24(a1, a2, a3, a4, type metadata accessor for LocationWeatherDataState, &qword_100BF4970);
}

void sub_1005DBA24(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD), uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD);
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(_QWORD);
  _QWORD v55[9];

  v54 = a5;
  v11 = a5(0);
  v51 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1000986FC();
  v53 = v12;
  __chkstk_darwin(v13);
  v50 = (char *)&v48 - v14;
  if (!a3)
    goto LABEL_35;
  if (a4[2] == a3)
  {
    swift_retain();
LABEL_35:
    sub_100098640();
    return;
  }
  sub_1000BA294(a6);
  v15 = sub_100098F14();
  v16 = (_QWORD *)v15;
  v48 = a1;
  v49 = a2;
  if (a2 < 1)
    v17 = 0;
  else
    v17 = *a1;
  v18 = 0;
  v19 = v15 + 64;
  v20 = (uint64_t)v50;
  while (1)
  {
    if (v17)
    {
      v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v52 = v18;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
      goto LABEL_38;
    if (v23 >= v49)
      goto LABEL_35;
    if (!v48[v23])
    {
      if (v18 + 2 >= v49)
        goto LABEL_35;
      if (!v48[v18 + 2])
      {
        if (v18 + 3 >= v49)
          goto LABEL_35;
        if (!v48[v18 + 3])
        {
          v24 = v18 + 4;
          if (v18 + 4 >= v49)
            goto LABEL_35;
          if (!v48[v24])
            break;
        }
      }
    }
LABEL_23:
    sub_1000DF470();
    v17 = v27 & v26;
    v52 = v28;
    v22 = v29 + (v28 << 6);
LABEL_24:
    v30 = a4[7];
    v31 = a4;
    v32 = (uint64_t *)(a4[6] + 16 * v22);
    v33 = *v32;
    v34 = v32[1];
    v35 = *(_QWORD *)(v51 + 72);
    v36 = v54;
    sub_100080C0C(v30 + v35 * v22, v20, v54);
    sub_10007802C(v20, v53, v36);
    Hasher.init(_seed:)(v55);
    swift_bridgeObjectRetain();
    String.hash(into:)(v55, v33, v34);
    Hasher._finalize()();
    sub_1000DD0E4();
    if (v39)
    {
      sub_1000C567C();
      while (++v42 != v43 || (v41 & 1) == 0)
      {
        v44 = v42 == v43;
        if (v42 == v43)
          v42 = 0;
        v41 |= v44;
        v45 = *(_QWORD *)(v19 + 8 * v42);
        if (v45 != -1)
        {
          v40 = __clz(__rbit64(~v45)) + (v42 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v40 = __clz(__rbit64(v38)) | v37 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v19 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
    v46 = (_QWORD *)(v16[6] + 16 * v40);
    *v46 = v33;
    v46[1] = v34;
    sub_10007802C(v53, v16[7] + v40 * v35, v54);
    ++v16[2];
    if (__OFSUB__(a3--, 1))
      goto LABEL_37;
    a4 = v31;
    v18 = v52;
    if (!a3)
      goto LABEL_35;
  }
  while (1)
  {
    v25 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v25 >= v49)
      goto LABEL_35;
    ++v24;
    if (v48[v25])
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
}

unint64_t sub_1005DBD00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC3588;
  if (!qword_100BC3588)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_100BC3588);
  }
  return result;
}

void sub_1005DBD40(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  sub_1005DBD54(a1, a2, a3, a4, type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity, &qword_100BF4980);
}

void sub_1005DBD54(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD), uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD);
  void (*v40)(uint64_t, char *, uint64_t);
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t (*v67)(_QWORD);

  v67 = a5;
  v11 = a5(0);
  v62 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1000986FC();
  v66 = v12;
  __chkstk_darwin(v13);
  v61 = (char *)&v54 - v14;
  v15 = type metadata accessor for Date(0);
  v60 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_1000986FC();
  v65 = v16;
  __chkstk_darwin(v17);
  v59 = (char *)&v54 - v18;
  if (!a3)
    goto LABEL_35;
  if (a4[2] == a3)
  {
    swift_retain();
LABEL_35:
    sub_100098640();
    return;
  }
  sub_1000BA294(a6);
  v19 = sub_100098F14();
  v55 = a1;
  v56 = a2;
  if (a2 < 1)
    v20 = 0;
  else
    v20 = *a1;
  v21 = 0;
  v22 = v19 + 64;
  v57 = a4;
  v58 = (_QWORD *)v19;
  v23 = (uint64_t)v61;
  v24 = v65;
  while (1)
  {
    if (v20)
    {
      v63 = (v20 - 1) & v20;
      v64 = v21;
      v25 = __clz(__rbit64(v20)) | (v21 << 6);
      goto LABEL_24;
    }
    v26 = v21 + 1;
    if (__OFADD__(v21, 1))
      goto LABEL_38;
    if (v26 >= v56)
      goto LABEL_35;
    if (!v55[v26])
    {
      if (v21 + 2 >= v56)
        goto LABEL_35;
      if (!v55[v21 + 2])
      {
        if (v21 + 3 >= v56)
          goto LABEL_35;
        if (!v55[v21 + 3])
        {
          v27 = v21 + 4;
          if (v21 + 4 >= v56)
            goto LABEL_35;
          if (!v55[v27])
            break;
        }
      }
    }
LABEL_23:
    sub_1000DF470();
    v63 = v30 & v29;
    v64 = v31;
    v25 = v32 + (v31 << 6);
LABEL_24:
    v33 = v59;
    v34 = v60;
    v35 = *(_QWORD *)(v60 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v60 + 16))(v59, a4[6] + v35 * v25, v15);
    v36 = a4[7];
    v37 = *(_QWORD *)(v62 + 72);
    v38 = v36 + v37 * v25;
    v39 = v67;
    sub_100080C0C(v38, v23, v67);
    v40 = *(void (**)(uint64_t, char *, uint64_t))(v34 + 32);
    v40((uint64_t)v24, v33, v15);
    sub_10007802C(v23, v66, v39);
    v41 = v58;
    v42 = v58[5];
    v43 = sub_1005DBD00();
    dispatch thunk of Hashable._rawHashValue(seed:)(v42, v15, v43);
    sub_1000DD0E4();
    if (v46)
    {
      sub_1000C567C();
      while (++v49 != v50 || (v48 & 1) == 0)
      {
        v51 = v49 == v50;
        if (v49 == v50)
          v49 = 0;
        v48 |= v51;
        v52 = *(_QWORD *)(v22 + 8 * v49);
        if (v52 != -1)
        {
          v47 = __clz(__rbit64(~v52)) + (v49 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v47 = __clz(__rbit64(v45)) | v44 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v22 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
    v40(v41[6] + v47 * v35, v65, v15);
    sub_10007802C(v66, v41[7] + v47 * v37, v67);
    ++v41[2];
    if (__OFSUB__(a3--, 1))
      goto LABEL_37;
    a4 = v57;
    v20 = v63;
    v21 = v64;
    if (!a3)
      goto LABEL_35;
  }
  while (1)
  {
    v28 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v28 >= v56)
      goto LABEL_35;
    ++v27;
    if (v55[v28])
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
}

uint64_t sub_1005DC0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  BOOL v9;

  v4 = static Location.currentLocationID.getter(a1);
  if (v4 == a1 && v5 == a2)
  {
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = v5;
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v4, v5, 0);
    swift_bridgeObjectRelease(v7);
    if ((v8 & 1) == 0)
    {
      if (qword_100BC2600 != -1)
        swift_once(&qword_100BC2600, sub_1007C7998);
      v9 = static WeatherLocation.currentLocationID == a1 && unk_100CAF430 == a2;
      if (!v9
        && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, static WeatherLocation.currentLocationID, unk_100CAF430, 0) & 1) == 0&& (a1 != 0x69436C61636F6C5FLL || a2 != 0xEB000000005F7974))
      {
        return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x69436C61636F6C5FLL, 0xEB000000005F7974, 0);
      }
    }
  }
  return 1;
}

ValueMetadata *type metadata accessor for ChartOverlayLollipopViewModel()
{
  return &type metadata for ChartOverlayLollipopViewModel;
}

uint64_t *sub_1005DC1E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for CurrentWeather(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_1000BA294(&qword_100BCE378);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_1005DC2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_1000BA294(&qword_100BCE378);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t sub_1005DC350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_1000BA294(&qword_100BCE378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t sub_1005DC404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_1000BA294(&qword_100BCE378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_1005DC4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_1000BA294(&qword_100BCE378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t sub_1005DC56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_1000BA294(&qword_100BCE378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_1005DC620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005DC62C);
}

uint64_t sub_1005DC62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1000BC660();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    v9 = type metadata accessor for Date(0);
    if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
    {
      v7 = v9;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      v7 = sub_1000BA294(&qword_100BCE378);
      v10 = *(int *)(a3 + 24);
    }
    v8 = v4 + v10;
  }
  return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
}

uint64_t sub_1005DC6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005DC6BC);
}

uint64_t sub_1005DC6BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_1000BC660();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    v11 = type metadata accessor for Date(0);
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v12 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = sub_1000BA294(&qword_100BCE378);
      v12 = *(int *)(a4 + 24);
    }
    v10 = v5 + v12;
  }
  return _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

uint64_t sub_1005DC748(uint64_t a1, uint64_t a2)
{
  uint64_t HourPrecipitationComponent;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((static CurrentWeather.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  HourPrecipitationComponent = type metadata accessor for NextHourPrecipitationComponent(0);
  if ((static Date.== infix(_:_:)(a1 + *(int *)(HourPrecipitationComponent + 20), a2 + *(int *)(HourPrecipitationComponent + 20)) & 1) == 0)return 0;
  v5 = *(int *)(HourPrecipitationComponent + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for MinuteWeather(0);
  v9 = sub_1000DDCF8(&qword_100BD2000);
  v10 = sub_1000DDCF8(&qword_100BD2008);
  v11 = sub_1000DDCF8((unint64_t *)&unk_100BD2010);
  return static Forecast.== infix(_:_:)(v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1005DC834@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t HourPrecipitationComponent;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;

  v3 = sub_1000BA294(&qword_100BCE378);
  v17 = *(_QWORD *)(v3 - 8);
  v18 = v3;
  __chkstk_darwin(v3);
  sub_100088FDC();
  v19 = v4;
  v22 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  sub_100088FDC();
  v21 = v5;
  v23 = type metadata accessor for CurrentWeather(0);
  v6 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_100088FDC();
  v24 = v7;
  v25 = sub_1000BA294(&qword_100BF4A20);
  __chkstk_darwin(v25);
  sub_100098728();
  HourPrecipitationComponent = type metadata accessor for NextHourPrecipitationComponent(0);
  __chkstk_darwin(HourPrecipitationComponent);
  sub_100098728();
  v11 = v10 - v9;
  v13 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v13);
  v14 = sub_1005DD048();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NextHourPrecipitationComponent.CodingKeys, &type metadata for NextHourPrecipitationComponent.CodingKeys, v14, v13, v12);
  if (v26)
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  v29 = 0;
  sub_1000FC98C(&qword_100BDC658, (uint64_t (*)(uint64_t))&type metadata accessor for CurrentWeather);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v23, &v29, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v11, v24, v23);
  v28 = 1;
  sub_1000FC98C(&qword_100BC3558, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v22, &v28, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v11 + *(int *)(HourPrecipitationComponent + 20), v21, v22);
  v27 = 2;
  sub_1005DD104(&qword_100BF4A30);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v18, &v27, v25);
  sub_1000BC2FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v11 + *(int *)(HourPrecipitationComponent + 24), v19, v18);
  sub_1005DD084(v11, a2);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  return sub_1005DD0C8(v11);
}

uint64_t sub_1005DCBB8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 0x57746E6572727563 && a2 == 0xEE00726568746165)
  {
    v5 = 0xEE00726568746165;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x57746E6572727563, 0xEE00726568746165, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x54746E6572727563 && a2 == 0xEB00000000656D69)
  {
    v8 = 0xEB00000000656D69;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54746E6572727563, 0xEB00000000656D69, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x7469706963657270 && a2 == 0xED00006E6F697461)
  {
    swift_bridgeObjectRelease(0xED00006E6F697461);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7469706963657270, 0xED00006E6F697461, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1005DCD64(char a1)
{
  if (!a1)
    return 0x57746E6572727563;
  if (a1 == 1)
    return 0x54746E6572727563;
  return 0x7469706963657270;
}

uint64_t sub_1005DCDDC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t HourPrecipitationComponent;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  char v24;
  char v25;

  v3 = v1;
  v5 = sub_1000BA294(&qword_100BF4A38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1005DD048();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NextHourPrecipitationComponent.CodingKeys, &type metadata for NextHourPrecipitationComponent.CodingKeys, v12, v10, v11);
  v25 = 0;
  v13 = type metadata accessor for CurrentWeather(0);
  v14 = sub_1000FC98C(&qword_100BDC670, (uint64_t (*)(uint64_t))&type metadata accessor for CurrentWeather);
  sub_1000C26D4(v3, (uint64_t)&v25, v5, v13, v14);
  if (!v2)
  {
    HourPrecipitationComponent = type metadata accessor for NextHourPrecipitationComponent(0);
    v16 = v3 + *(int *)(HourPrecipitationComponent + 20);
    v24 = 1;
    v17 = type metadata accessor for Date(0);
    v18 = sub_1000FC98C(&qword_100BC3578, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    sub_1000C26D4(v16, (uint64_t)&v24, v5, v17, v18);
    v19 = v3 + *(int *)(HourPrecipitationComponent + 24);
    v23 = 2;
    v20 = sub_1000BA294(&qword_100BCE378);
    v21 = sub_1005DD104(&qword_100BF4A40);
    sub_1000C26D4(v19, (uint64_t)&v23, v5, v20, v21);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1005DCFA0()
{
  char *v0;

  return sub_1005DCD64(*v0);
}

uint64_t sub_1005DCFA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1005DCBB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005DCFCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005DD048();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005DCFF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005DD048();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005DD01C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005DC834(a1, a2);
}

uint64_t sub_1005DD030(_QWORD *a1)
{
  return sub_1005DCDDC(a1);
}

unint64_t sub_1005DD048()
{
  unint64_t result;

  result = qword_100BF4A28;
  if (!qword_100BF4A28)
  {
    result = swift_getWitnessTable(&unk_1009B567C, &type metadata for NextHourPrecipitationComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF4A28);
  }
  return result;
}

uint64_t sub_1005DD084(uint64_t a1, uint64_t a2)
{
  uint64_t HourPrecipitationComponent;

  HourPrecipitationComponent = type metadata accessor for NextHourPrecipitationComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationComponent - 8) + 16))(a2, a1, HourPrecipitationComponent);
  return a2;
}

uint64_t sub_1005DD0C8(uint64_t a1)
{
  uint64_t HourPrecipitationComponent;

  HourPrecipitationComponent = type metadata accessor for NextHourPrecipitationComponent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationComponent - 8) + 8))(a1, HourPrecipitationComponent);
  return a1;
}

uint64_t sub_1005DD104(unint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  result = *a1;
  if (!result)
  {
    v3 = sub_100075EB0(&qword_100BCE378);
    result = sub_10003BC38(v3);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NextHourPrecipitationComponent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1005DD18C + 4 * byte_1009B5515[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1005DD1C0 + 4 * asc_1009B5510[v4]))();
}

uint64_t sub_1005DD1C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005DD1C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005DD1D0);
  return result;
}

uint64_t sub_1005DD1DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005DD1E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1005DD1E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005DD1F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NextHourPrecipitationComponent.CodingKeys()
{
  return &type metadata for NextHourPrecipitationComponent.CodingKeys;
}

unint64_t sub_1005DD210()
{
  unint64_t result;

  result = qword_100BF4A48;
  if (!qword_100BF4A48)
  {
    result = swift_getWitnessTable(&unk_1009B5654, &type metadata for NextHourPrecipitationComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF4A48);
  }
  return result;
}

unint64_t sub_1005DD250()
{
  unint64_t result;

  result = qword_100BF4A50;
  if (!qword_100BF4A50)
  {
    result = swift_getWitnessTable(&unk_1009B55C4, &type metadata for NextHourPrecipitationComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF4A50);
  }
  return result;
}

unint64_t sub_1005DD290()
{
  unint64_t result;

  result = qword_100BF4A58;
  if (!qword_100BF4A58)
  {
    result = swift_getWitnessTable(&unk_1009B55EC, &type metadata for NextHourPrecipitationComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF4A58);
  }
  return result;
}

uint64_t sub_1005DD2CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = type metadata accessor for Font.Leading(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100099864();
  v4 = type metadata accessor for Font.TextStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v0 + 48))
  {
    v9 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v10 = (*(uint64_t (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for Font.TextStyle.title2(_:), v4, v6);
    static Font.Weight.medium.getter(v10);
    v11 = static Font.system(_:weight:)(v8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_1000BC0D4(enum case for Font.Leading.tight(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104));
    v9 = Font.leading(_:)(v1, v11);
    swift_release(v11);
    sub_1000BD208(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    v12 = *(_QWORD *)(v0 + 48);
    swift_retain();
    swift_release(v12);
    *(_QWORD *)(v0 + 48) = v9;
  }
  swift_retain();
  return v9;
}

double sub_1005DD404()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 40) & 1) == 0)
    return *(double *)(v0 + 32);
  *(_QWORD *)(v0 + 32) = 0x4000000000000000;
  *(_BYTE *)(v0 + 40) = 0;
  return 2.0;
}

uint64_t sub_1005DD428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for Font.TextStyle(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100099864();
  if (*(_QWORD *)(v0 + 56))
  {
    v4 = *(_QWORD *)(v0 + 56);
  }
  else
  {
    v5 = sub_1000BC0D4(enum case for Font.TextStyle.subheadline(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104));
    static Font.Weight.medium.getter(v5);
    v4 = static Font.system(_:weight:)(v1);
    sub_1000BD208(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    v6 = *(_QWORD *)(v0 + 56);
    swift_retain();
    swift_release(v6);
    *(_QWORD *)(v0 + 56) = v4;
  }
  swift_retain();
  return v4;
}

double sub_1005DD4DC()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
    return *(double *)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0x4024000000000000;
  *(_BYTE *)(v0 + 24) = 0;
  return 10.0;
}

double sub_1005DD500()
{
  _BYTE *v0;

  if ((v0[8] & 1) == 0)
    return *(double *)v0;
  *(_QWORD *)v0 = 0x4053800000000000;
  v0[8] = 0;
  return 78.0;
}

void sub_1005DD52C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10021A5A0();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_1005DEA84(v6);
  *a1 = v3;
}

void sub_1005DD5AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v0 = type metadata accessor for URL.DirectoryHint(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100098728();
  v4 = v3 - v2;
  v5 = (id)WDWeatherLibraryDirectory();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  sub_1005DFDDC(v6);
  if (v7)
  {
    v8 = v7;
    sub_1000C56D0();
    sub_100114EF8();
    sub_1000D1930();
    sub_100098820(v4, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    swift_bridgeObjectRelease(v8);
  }
  sub_1000C56D0();
  sub_100114EF8();
  sub_1000D1930();
  sub_100098820(v4, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_bridgeObjectRelease(0xEC00000073746573);
  sub_10009D300();
}

void sub_1005DD6E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSURL *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100098728();
  v4 = v3 - v2;
  v5 = (void *)objc_opt_self(NSBundle);
  sub_1005DD5AC();
  URL._bridgeToObjectiveC()(v6);
  v8 = v7;
  sub_100098820(v4, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v9 = sub_1005DFE48(7496033, 0xE300000000000000, 0, (uint64_t)v8, v5);

  if (v9)
  {
    v10 = v9;
    swift_bridgeObjectRetain(v9);
    sub_1005DD52C(&v10);
    swift_bridgeObjectRelease(v9);
  }
  sub_10004A2A0();
}

void sub_1005DD7CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___preset;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___preset);
  if (v2 == 1)
  {
    v3 = type metadata accessor for Preset(0);
    swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    v4 = Preset.init(extends:apply:)(_swiftEmptyArrayStorage, sub_1005DE4A0, 0);
    v5 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    swift_retain();
    sub_10015A450(v5);
  }
  sub_1005C6034(v2);
  sub_10004A2A0();
}

void sub_1005DD858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v32;
  _QWORD *v33;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10009883C();
  v32 = v2 - v3;
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - v5;
  sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = v9 - v8;
  sub_1005DD6E4();
  v12 = *(_QWORD *)(v11 + 16);
  v28 = v11;
  if (v12)
  {
    v13 = v11 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v1 + 16);
    v30 = *(_QWORD *)(v1 + 72);
    v31 = v14;
    v15 = swift_bridgeObjectRetain(v11);
    v33 = _swiftEmptyArrayStorage;
    v29 = v1;
    v16 = v32;
    while (1)
    {
      v31(v10, v13, v0, v15);
      sub_1000BA9D4(v10, 0);
      if (_s7Weather24LocationCompositionStateOwet_0(v10, 1, v0) == 1)
        break;
      v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 32))(v6, v10, v0);
      v18 = URL.deletingPathExtension()(v17);
      v19 = URL.lastPathComponent.getter(v18);
      v21 = v20;
      sub_1000D977C(v16);
      v22 = HIBYTE(v21) & 0xF;
      if ((v21 & 0x2000000000000000) == 0)
        v22 = v19 & 0xFFFFFFFFFFFFLL;
      if (v22)
      {
        sub_1000D977C((uint64_t)v6);
        if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
        {
          sub_1000B2E08();
          v33 = v26;
        }
        v23 = v33[2];
        if (v23 >= v33[3] >> 1)
        {
          sub_1000B2E08();
          v33 = v27;
        }
        v24 = v33;
        v33[2] = v23 + 1;
        v25 = &v24[2 * v23];
        v25[4] = v19;
        v25[5] = v21;
        v1 = v29;
      }
      else
      {
        swift_bridgeObjectRelease(v21);
        sub_1000D977C((uint64_t)v6);
      }
      v13 += v30;
      if (!--v12)
        goto LABEL_16;
    }
  }
  else
  {
    swift_bridgeObjectRetain(v11);
    v33 = _swiftEmptyArrayStorage;
LABEL_16:
    sub_1000BA9D4(v10, 1);
  }
  swift_bridgeObjectRelease_n(v28, 2);
  sub_100098640();
}

void sub_1005DDA98(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *v2;
  v6 = sub_1000BA294(&qword_100BC5FA0);
  sub_1000C2D38(v6, v7, v8, v6);
  v9 = sub_1000BA294(&qword_100BC5F90);
  sub_1000C2D38(v9, v10, v11, v9);
  v12 = (char *)v2 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___weatherDataState;
  *(_OWORD *)v12 = xmmword_100995EC0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = 0;
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___preset) = 1;
  v13 = sub_1000BA294(&qword_100BD23E0);
  sub_1000C2D38(v13, v14, v15, v13);
  v16 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v16 = a1 & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    v2[2] = a1;
    v2[3] = a2;
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    sub_100021AA4((uint64_t)v2 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___locations, &qword_100BF3F28);
    sub_100021AA4((uint64_t)v2 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___timeState, &qword_100BF3F20);
    sub_1000DF7A8(OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___weatherDataState);
    sub_10015A450(*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___preset));
    sub_100021AA4((uint64_t)v2 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___loadedData, &qword_100BF4BB0);
    swift_deallocPartialClassInstance(v2, v5, *(unsigned int *)(*v2 + 48), *(unsigned __int16 *)(*v2 + 52));
  }
  sub_100098640();
}

void sub_1005DDBE8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];

  sub_1000BA294(&qword_100BF3F28);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_10009883C();
  v6 = v4 - v5;
  __chkstk_darwin(v7);
  v9 = &v12[-v8];
  v10 = v1 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___locations;
  sub_10009922C(v1 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___locations, (uint64_t)v13, 0);
  sub_100037768(v10, (uint64_t)v9, &qword_100BF3F28);
  v11 = sub_1000BA294(&qword_100BC5FA0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v11) == 1)
  {
    sub_100021AA4((uint64_t)v9, &qword_100BF3F28);
    sub_1005DDD38(a1);
    sub_100037768(a1, v6, &qword_100BC5FA0);
    _s7Weather24LocationCompositionStateOwst_0(v6, 0, 1, v11);
    sub_10009922C(v10, (uint64_t)v12, 33);
    sub_1000A3908(v6, v10, &qword_100BF3F28);
    swift_endAccess(v12);
  }
  else
  {
    sub_1000787D4((uint64_t)v9, a1, &qword_100BC5FA0);
  }
  sub_10009D300();
}

uint64_t sub_1005DDD38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = type metadata accessor for PresetAppState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BD23E0);
  __chkstk_darwin(v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005DDE74((uint64_t)v7);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v2))
  {
    sub_100021AA4((uint64_t)v7, &qword_100BD23E0);
    v8 = 1;
  }
  else
  {
    sub_1002234B0((uint64_t)v7, (uint64_t)v4, type metadata accessor for PresetAppState);
    sub_100021AA4((uint64_t)v7, &qword_100BD23E0);
    sub_1002234B0((uint64_t)&v4[*(int *)(v2 + 20)], a1, type metadata accessor for LocationsState);
    sub_100298610((uint64_t)v4);
    v8 = 0;
  }
  v9 = type metadata accessor for LocationsState(0);
  return _s7Weather24LocationCompositionStateOwst_0(a1, v8, 1, v9);
}

void sub_1005DDE74(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE v12[24];

  v3 = sub_1000BA294(&qword_100BF4BB0);
  __chkstk_darwin(v3);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v8 = &v11[-v7];
  v9 = v1 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___loadedData;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___loadedData, v12, 0, 0);
  sub_100037768(v9, (uint64_t)v8, &qword_100BF4BB0);
  v10 = sub_1000BA294(&qword_100BD23E0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10) == 1)
  {
    sub_100021AA4((uint64_t)v8, &qword_100BF4BB0);
    sub_1005DE650(v1, a1);
    sub_100037768(a1, (uint64_t)v5, &qword_100BD23E0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v5, 0, 1, v10);
    swift_beginAccess(v9, v11, 33, 0);
    sub_1000A3908((uint64_t)v5, v9, &qword_100BF4BB0);
    swift_endAccess(v11);
  }
  else
  {
    sub_1000787D4((uint64_t)v8, a1, &qword_100BD23E0);
  }
}

void sub_1005DDFF4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[24];
  char v43[24];

  v41 = a1;
  v38 = type metadata accessor for PresetAppState(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v37 = v4 - v3;
  sub_1000BA294(&qword_100BD23E0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  v9 = type metadata accessor for Date(0);
  v39 = *(_QWORD *)(v9 - 8);
  v40 = v9;
  __chkstk_darwin(v9);
  sub_10009883C();
  v12 = v10 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v36 - v14;
  v16 = sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_100098728();
  v20 = v19 - v18;
  sub_1000BA294(&qword_100BF3F20);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_10009883C();
  v24 = v22 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v36 - v26;
  v28 = v1 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___timeState;
  sub_10009922C(v1 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___timeState, (uint64_t)v43, 0);
  sub_100037768(v28, (uint64_t)v27, &qword_100BF3F20);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v16) == 1)
  {
    sub_100021AA4((uint64_t)v27, &qword_100BF3F20);
    sub_1005DDE74(v8);
    if (_s7Weather24LocationCompositionStateOwet_0(v8, 1, v38))
    {
      sub_100021AA4(v8, &qword_100BD23E0);
      v30 = Date.init()(v29);
      Date.timeIntervalSince1970.getter(v30);
      v32 = v39;
      v31 = v40;
      v33 = sub_100098820(v12, *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
    }
    else
    {
      v34 = v37;
      sub_1002234B0(v8, v37, type metadata accessor for PresetAppState);
      sub_100021AA4(v8, &qword_100BD23E0);
      v33 = sub_100298610(v34);
      v32 = v39;
      v31 = v40;
    }
    Date.init(timeIntervalSinceReferenceDate:)(v33);
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v20, v15, v31);
    v35 = type metadata accessor for TimeState(0);
    _s7Weather24LocationCompositionStateOwst_0(v20, 0, 1, v35);
    sub_100037768(v20, v24, &qword_100BC5F90);
    _s7Weather24LocationCompositionStateOwst_0(v24, 0, 1, v16);
    sub_10009922C(v28, (uint64_t)v42, 33);
    sub_1000A3908(v24, v28, &qword_100BF3F20);
    swift_endAccess(v42);
  }
  else
  {
    v20 = (uint64_t)v27;
  }
  sub_1000787D4(v20, v41, &qword_100BC5F90);
}

uint64_t sub_1005DE2E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___weatherDataState);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___weatherDataState);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___weatherDataState + 8);
  v4 = v2;
  v6 = v1[2];
  v5 = v1[3];
  if (v3 == 1)
  {
    v4 = sub_1005DE3B8();
    v7 = v1[1];
    v13 = v1[2];
    v14 = *v1;
    v12 = v1[3];
    *v1 = v4;
    v1[1] = v8;
    v1[2] = v9;
    v1[3] = v10;
    sub_1000E3434(v4, v8, v9, v10);
    sub_10014D7F8(v14, v7, v13, v12);
  }
  sub_1005C6080(v2, v3, v6, v5);
  return v4;
}

uint64_t sub_1005DE3B8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_1000BA294(&qword_100BD23E0);
  __chkstk_darwin(v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005DDE74((uint64_t)v2);
  v3 = type metadata accessor for PresetAppState(0);
  v4 = 0;
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v2, 1, v3))
  {
    v4 = *(_QWORD *)&v2[*(int *)(v3 + 24)];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  sub_100021AA4((uint64_t)v2, &qword_100BD23E0);
  return v4;
}

uint64_t sub_1005DE4A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;

  v2 = type metadata accessor for WeatherMapOverlayServiceSource(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = static Settings.Maps.source.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for WeatherMapOverlayServiceSource.staging(_:), v2);
  v9 = sub_1005DEA44();
  dispatch thunk of PresetApplicatorType.set<A>(_:to:)(v8, v5, v2, v9, v6, v7);
  v10 = swift_release(v8);
  (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v10);
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = static Settings.Maps.showDebugConsole.getter();
  v21 = 0;
  dispatch thunk of PresetApplicatorType.set<A>(_:to:)(v13, &v21, &type metadata for Bool, &protocol witness table for Bool, v11, v12);
  swift_release(v13);
  v15 = static Settings.Maps.overrides.getter(v14);
  dispatch thunk of SettingGroup.setEnabled(_:)(0);
  swift_release(v15);
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  if (qword_100BC2288 != -1)
    swift_once(&qword_100BC2288, sub_10015AE90);
  v20 = 1;
  return dispatch thunk of PresetApplicatorType.set<A>(_:to:)(qword_100CAEE08, &v20, &type metadata for Bool, &protocol witness table for Bool, v16, v17);
}

uint64_t sub_1005DE650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  void (*v21)(char *, uint64_t, __n128);
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v24 = a2;
  v3 = type metadata accessor for URL.DirectoryHint(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v23 - v15;
  sub_1005DD5AC();
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 24);
  v25[0] = v17;
  v25[1] = v18;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for URL.DirectoryHint.inferFromPath(_:), v3);
  v19 = sub_100114EF8();
  swift_bridgeObjectRetain();
  URL.appending<A>(path:directoryHint:)(v25, v6, &type metadata for String, v19);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v20 = swift_bridgeObjectRelease();
  v21 = *(void (**)(char *, uint64_t, __n128))(v8 + 8);
  v21(v10, v7, v20);
  URL.appendingPathExtension(_:)(7496033, 0xE300000000000000);
  ((void (*)(char *, uint64_t))v21)(v13, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v16, v7);
  sub_10048EDC0((uint64_t)v13, v24);
  return ((uint64_t (*)(char *, uint64_t))v21)(v16, v7);
}

uint64_t sub_1005DE810()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_100021AA4(v0 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___locations, &qword_100BF3F28);
  sub_100021AA4(v0 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___timeState, &qword_100BF3F20);
  sub_1000DF7A8(OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___weatherDataState);
  sub_10015A450(*(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___preset));
  sub_100021AA4(v0 + OBJC_IVAR____TtC7Weather11LocalPreset____lazy_storage___loadedData, &qword_100BF4BB0);
  return v0;
}

uint64_t sub_1005DE890()
{
  uint64_t v0;

  sub_1005DE810();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1005DE8B4()
{
  return type metadata accessor for LocalPreset(0);
}

uint64_t type metadata accessor for LocalPreset(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF4AF0;
  if (!qword_100BF4AF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocalPreset);
  return result;
}

void sub_1005DE8F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  v8[0] = &unk_1009B56E8;
  sub_1001474A0(319, &qword_100BF3E60, &qword_100BC5FA0);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001474A0(319, (unint64_t *)&unk_100BF3E68, &qword_100BC5F90);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = &unk_1009B5700;
      v8[4] = &unk_1009B5718;
      sub_1001474A0(319, (unint64_t *)&unk_100BF4B00, &qword_100BD23E0);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 6, v8, a1 + 80);
      }
    }
  }
}

void sub_1005DE9E4(uint64_t a1@<X8>)
{
  sub_1005DDBE8(a1);
}

void sub_1005DEA04(uint64_t a1@<X8>)
{
  sub_1005DDFF4(a1);
}

uint64_t sub_1005DEA24()
{
  return sub_1005DE2E0();
}

unint64_t sub_1005DEA44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4BA8;
  if (!qword_100BF4BA8)
  {
    v1 = type metadata accessor for WeatherMapOverlayServiceSource(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WeatherMapOverlayServiceSource, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4BA8);
  }
  return result;
}

void sub_1005DEA84(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  void (*v47)(char *, uint64_t, __n128);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  int v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  char v91;
  __n128 v92;
  void (*v93)(char *, uint64_t, __n128);
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  char *v99;
  void (*v100)(char *, uint64_t);
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  char v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  Swift::Int v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t (*v178)(char *, uint64_t, uint64_t);
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  _QWORD *v188;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v188 = *(_QWORD **)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v172 = (char *)&v163 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v184 = (char *)&v163 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v163 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v163 - v13;
  v15 = __chkstk_darwin(v12);
  v176 = (char *)&v163 - v16;
  v17 = __chkstk_darwin(v15);
  v175 = (char *)&v163 - v18;
  v19 = __chkstk_darwin(v17);
  v169 = (char *)&v163 - v20;
  __chkstk_darwin(v19);
  v168 = (char *)&v163 - v21;
  v187 = a1;
  v22 = a1[1];
  v23 = _minimumMergeRunLength(_:)(v22);
  if (v23 >= v22)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      if (v22)
        sub_1005DF5E8(0, v22, 1, v187);
      return;
    }
    goto LABEL_158;
  }
  v24 = v23;
  sub_10087B6F0(v22 / 2);
  v165 = v25;
  v166 = v22;
  v174 = v26;
  if (v22 <= 0)
  {
LABEL_122:
    v28 = (char *)_swiftEmptyArrayStorage;
    v103 = _swiftEmptyArrayStorage[2];
LABEL_123:
    if (v103 < 2)
    {
LABEL_134:
      swift_bridgeObjectRelease(v28);
      if (v166 >= -1)
        goto LABEL_135;
      goto LABEL_162;
    }
    v154 = *v187;
    v155 = v174;
    while (1)
    {
      v156 = v103 - 2;
      if (v103 < 2)
        break;
      if (!v154)
        goto LABEL_166;
      v147 = v28;
      v157 = v28 + 32;
      v158 = *(_QWORD *)&v28[16 * v156 + 32];
      v159 = *(_QWORD *)&v28[16 * v103 + 24];
      sub_1005DF8BC(v154 + v188[9] * v158, v154 + v188[9] * *(_QWORD *)&v157[16 * v103 - 16], v154 + v188[9] * v159, v155);
      if (v2)
        goto LABEL_120;
      if (v159 < v158)
        goto LABEL_153;
      if ((swift_isUniquelyReferenced_nonNull_native(v147) & 1) == 0)
        v147 = sub_10021A488();
      if (v156 >= *((_QWORD *)v147 + 2))
        goto LABEL_154;
      v160 = &v147[16 * v156 + 32];
      *(_QWORD *)v160 = v158;
      *((_QWORD *)v160 + 1) = v159;
      v161 = *((_QWORD *)v147 + 2);
      if (v103 > v161)
        goto LABEL_155;
      v28 = v147;
      memmove(&v147[16 * v103 + 16], &v147[16 * v103 + 32], 16 * (v161 - v103));
      *((_QWORD *)v147 + 2) = v161 - 1;
      v103 = v161 - 1;
      if (v161 <= 2)
        goto LABEL_134;
    }
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
    return;
  }
  v164 = v24;
  v179 = v11;
  v182 = v4;
  v27 = 0;
  v28 = (char *)_swiftEmptyArrayStorage;
  v29 = v22;
  v170 = v14;
  while (1)
  {
    v30 = (uint64_t)v27;
    v31 = v27 + 1;
    v173 = v27;
    if ((uint64_t)(v27 + 1) >= v29)
    {
      v44 = (uint64_t)(v27 + 1);
      v45 = v182;
    }
    else
    {
      v185 = v29;
      v167 = v28;
      v32 = *v187;
      v33 = v188[9];
      v34 = (void (*)(char *, uint64_t, uint64_t))v188[2];
      v35 = v182;
      v34(v168, *v187 + v33 * (_QWORD)v31, v182);
      v180 = v32;
      v186 = v33;
      v36 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v169, v32 + v33 * v30, v35);
      v37 = URL.lastPathComponent.getter(v36);
      v39 = v38;
      v40 = URL.lastPathComponent.getter(v37);
      if (v37 == v40 && v39 == v41)
      {
        LODWORD(v183) = 0;
        v43 = v39;
      }
      else
      {
        v43 = v41;
        LODWORD(v183) = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v40, v41, 1);
      }
      swift_bridgeObjectRelease(v39);
      v46 = swift_bridgeObjectRelease(v43);
      v47 = (void (*)(char *, uint64_t, __n128))v188[1];
      v45 = v182;
      v47(v169, v182, v46);
      ((void (*)(char *, uint64_t))v47)(v168, v45);
      v30 = (uint64_t)v173;
      v44 = (uint64_t)(v173 + 2);
      if ((uint64_t)(v173 + 2) < v185)
      {
        v177 = v2;
        v181 = v186 * (_QWORD)v31;
        v48 = v180;
        v49 = v186 * v44;
        while (1)
        {
          v50 = v44;
          v34(v175, v48 + v49, v45);
          v51 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v176, v48 + v181, v45);
          v52 = URL.lastPathComponent.getter(v51);
          v54 = v53;
          v55 = URL.lastPathComponent.getter(v52);
          if (v52 == v55 && v54 == v56)
          {
            v59 = 0;
            v58 = v54;
          }
          else
          {
            v58 = v56;
            v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v54, v55, v56, 1);
          }
          swift_bridgeObjectRelease(v54);
          v60 = swift_bridgeObjectRelease(v58);
          v45 = v182;
          v47(v176, v182, v60);
          ((void (*)(char *, uint64_t))v47)(v175, v45);
          if (((v183 ^ v59) & 1) != 0)
            break;
          ++v44;
          v48 += v186;
          if (v50 + 1 >= v185)
          {
            v29 = v185;
            v44 = v185;
            v2 = v177;
            v14 = v170;
            v30 = (uint64_t)v173;
            goto LABEL_25;
          }
        }
        v2 = v177;
        v14 = v170;
        v30 = (uint64_t)v173;
      }
      v29 = v185;
LABEL_25:
      v28 = v167;
      if ((v183 & 1) != 0)
      {
        if (v44 < v30)
          goto LABEL_159;
        if (v30 < v44)
        {
          v177 = v2;
          v61 = 0;
          v62 = v186 * (v44 - 1);
          v63 = v30;
          v64 = v44 * v186;
          v65 = v63;
          v66 = v63 * v186;
          do
          {
            if (v65 != v44 + v61 - 1)
            {
              v67 = v180;
              if (!v180)
                goto LABEL_165;
              v68 = v180 + v66;
              v181 = v180 + v62;
              v45 = v182;
              v183 = (char *)v188[4];
              ((void (*)(char *, uint64_t, uint64_t))v183)(v172, v180 + v66, v182);
              if (v66 < v62 || v68 >= v67 + v64)
              {
                v70 = v67 + v66;
                v71 = v181;
                swift_arrayInitWithTakeFrontToBack(v70, v181, 1, v45);
              }
              else
              {
                v71 = v181;
                if (v66 != v62)
                  swift_arrayInitWithTakeBackToFront(v68, v181, 1, v45);
              }
              ((void (*)(uint64_t, char *, uint64_t))v183)(v71, v172, v45);
              v14 = v170;
            }
            ++v65;
            --v61;
            v62 -= v186;
            v64 -= v186;
            v66 += v186;
          }
          while (v65 < v44 + v61);
          v28 = v167;
          v2 = v177;
          v30 = (uint64_t)v173;
          v29 = v185;
        }
      }
    }
    if (v44 < v29)
    {
      if (__OFSUB__(v44, v30))
        goto LABEL_157;
      if (v44 - v30 < v164)
      {
        if (__OFADD__(v30, v164))
          goto LABEL_160;
        if (v30 + v164 >= v29)
          v72 = v29;
        else
          v72 = v30 + v164;
        if (v72 < v30)
          goto LABEL_161;
        if (v44 != v72)
        {
          v167 = v28;
          v73 = v188[9];
          v74 = (uint64_t (*)(char *, uint64_t, uint64_t))v188[2];
          v177 = v2;
          v178 = v74;
          v75 = v73 * (v44 - 1);
          v180 = v73;
          v186 = v44 * v73;
          v171 = v72;
          do
          {
            v76 = 0;
            v183 = (char *)v44;
            v181 = v75;
            while (1)
            {
              v185 = v30;
              v77 = *v187;
              v78 = v178;
              v178(v14, v186 + v76 + *v187, v45);
              v79 = v75 + v76 + v77;
              v80 = v14;
              v81 = v179;
              v82 = v78(v179, v79, v45);
              v83 = v45;
              v84 = URL.lastPathComponent.getter(v82);
              v86 = v85;
              v87 = URL.lastPathComponent.getter(v84);
              if (v84 == v87 && v86 == v88)
              {
                swift_bridgeObjectRelease_n(v86, 2);
                v100 = (void (*)(char *, uint64_t))v188[1];
                v100(v81, v45);
                v100(v80, v45);
                v14 = v80;
                goto LABEL_63;
              }
              v90 = v88;
              v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v84, v86, v87, v88, 1);
              swift_bridgeObjectRelease(v86);
              v92 = swift_bridgeObjectRelease(v90);
              v93 = (void (*)(char *, uint64_t, __n128))v188[1];
              v93(v81, v83, v92);
              ((void (*)(char *, uint64_t))v93)(v80, v83);
              v14 = v80;
              if ((v91 & 1) == 0)
                break;
              v94 = *v187;
              v75 = v181;
              if (!*v187)
                goto LABEL_163;
              v95 = v94 + v186 + v76;
              v96 = (char *)(v94 + v181 + v76);
              v97 = (void (*)(char *, uint64_t, uint64_t))v188[4];
              v98 = v182;
              v97(v184, v95, v182);
              swift_arrayInitWithTakeFrontToBack(v95, v96, 1, v98);
              v97(v96, (uint64_t)v184, v98);
              v76 -= v180;
              v30 = v185 + 1;
              v99 = v183;
              v45 = v98;
              if (v183 == (char *)(v185 + 1))
                goto LABEL_64;
            }
            v45 = v83;
LABEL_63:
            v99 = v183;
            v75 = v181;
LABEL_64:
            v44 = (uint64_t)(v99 + 1);
            v75 += v180;
            v186 += v180;
            v30 = (uint64_t)v173;
          }
          while (v44 != v171);
          v44 = v171;
          v2 = v177;
          v28 = v167;
        }
      }
    }
    if (v44 < v30)
      goto LABEL_156;
    if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      v28 = sub_10021A398(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v102 = *((_QWORD *)v28 + 2);
    v101 = *((_QWORD *)v28 + 3);
    v103 = v102 + 1;
    v177 = v2;
    v183 = (char *)v44;
    if (v102 >= v101 >> 1)
      v28 = sub_10021A398((char *)(v101 > 1), v102 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v103;
    v104 = v28 + 32;
    v105 = &v28[16 * v102 + 32];
    v106 = v183;
    *(_QWORD *)v105 = v30;
    *((_QWORD *)v105 + 1) = v106;
    if (v102)
      break;
    v103 = 1;
LABEL_114:
    v29 = v187[1];
    v27 = v183;
    v2 = v177;
    if ((uint64_t)v183 >= v29)
      goto LABEL_123;
  }
  while (1)
  {
    v107 = v103 - 1;
    if (v103 >= 4)
    {
      v112 = &v104[16 * v103];
      v113 = *((_QWORD *)v112 - 8);
      v114 = *((_QWORD *)v112 - 7);
      v118 = __OFSUB__(v114, v113);
      v115 = v114 - v113;
      if (v118)
        goto LABEL_141;
      v117 = *((_QWORD *)v112 - 6);
      v116 = *((_QWORD *)v112 - 5);
      v118 = __OFSUB__(v116, v117);
      v110 = v116 - v117;
      v111 = v118;
      if (v118)
        goto LABEL_142;
      v119 = v103 - 2;
      v120 = &v104[16 * v103 - 32];
      v122 = *(_QWORD *)v120;
      v121 = *((_QWORD *)v120 + 1);
      v118 = __OFSUB__(v121, v122);
      v123 = v121 - v122;
      if (v118)
        goto LABEL_143;
      v118 = __OFADD__(v110, v123);
      v124 = v110 + v123;
      if (v118)
        goto LABEL_145;
      if (v124 >= v115)
      {
        v142 = &v104[16 * v107];
        v144 = *(_QWORD *)v142;
        v143 = *((_QWORD *)v142 + 1);
        v118 = __OFSUB__(v143, v144);
        v145 = v143 - v144;
        if (v118)
          goto LABEL_151;
        v135 = v110 < v145;
        goto LABEL_103;
      }
    }
    else
    {
      if (v103 != 3)
      {
        v136 = *((_QWORD *)v28 + 4);
        v137 = *((_QWORD *)v28 + 5);
        v118 = __OFSUB__(v137, v136);
        v129 = v137 - v136;
        v130 = v118;
        goto LABEL_97;
      }
      v109 = *((_QWORD *)v28 + 4);
      v108 = *((_QWORD *)v28 + 5);
      v118 = __OFSUB__(v108, v109);
      v110 = v108 - v109;
      v111 = v118;
    }
    if ((v111 & 1) != 0)
      goto LABEL_144;
    v119 = v103 - 2;
    v125 = &v104[16 * v103 - 32];
    v127 = *(_QWORD *)v125;
    v126 = *((_QWORD *)v125 + 1);
    v128 = __OFSUB__(v126, v127);
    v129 = v126 - v127;
    v130 = v128;
    if (v128)
      goto LABEL_146;
    v131 = &v104[16 * v107];
    v133 = *(_QWORD *)v131;
    v132 = *((_QWORD *)v131 + 1);
    v118 = __OFSUB__(v132, v133);
    v134 = v132 - v133;
    if (v118)
      goto LABEL_148;
    if (__OFADD__(v129, v134))
      goto LABEL_150;
    if (v129 + v134 >= v110)
    {
      v135 = v110 < v134;
LABEL_103:
      if (v135)
        v107 = v119;
      goto LABEL_105;
    }
LABEL_97:
    if ((v130 & 1) != 0)
      goto LABEL_147;
    v138 = &v104[16 * v107];
    v140 = *(_QWORD *)v138;
    v139 = *((_QWORD *)v138 + 1);
    v118 = __OFSUB__(v139, v140);
    v141 = v139 - v140;
    if (v118)
      goto LABEL_149;
    if (v141 < v129)
      goto LABEL_114;
LABEL_105:
    v146 = v107 - 1;
    if (v107 - 1 >= v103)
    {
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
    if (!*v187)
      goto LABEL_164;
    v147 = v28;
    v148 = &v104[16 * v146];
    v149 = *(_QWORD *)v148;
    v150 = &v104[16 * v107];
    v151 = *((_QWORD *)v150 + 1);
    v152 = v177;
    sub_1005DF8BC(*v187 + v188[9] * *(_QWORD *)v148, *v187 + v188[9] * *(_QWORD *)v150, *v187 + v188[9] * v151, v174);
    v177 = v152;
    if (v152)
      break;
    if (v151 < v149)
      goto LABEL_138;
    if (v107 > *((_QWORD *)v147 + 2))
      goto LABEL_139;
    *(_QWORD *)v148 = v149;
    *(_QWORD *)&v104[16 * v146 + 8] = v151;
    v153 = *((_QWORD *)v147 + 2);
    if (v107 >= v153)
      goto LABEL_140;
    v28 = v147;
    v103 = v153 - 1;
    memmove(&v104[16 * v107], v150 + 16, 16 * (v153 - 1 - v107));
    *((_QWORD *)v147 + 2) = v153 - 1;
    if (v153 <= 2)
      goto LABEL_114;
  }
  v2 = v177;
LABEL_120:
  swift_bridgeObjectRelease(v147);
  if (v166 < -1)
  {
    __break(1u);
    goto LABEL_122;
  }
LABEL_135:
  v162 = v165;
  *(_QWORD *)(v165 + 16) = 0;
  swift_bridgeObjectRelease(v162);
}

uint64_t sub_1005DF5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  __n128 v30;
  void (*v31)(char *, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;

  v46 = a4;
  v39 = a1;
  v42 = type metadata accessor for URL(0);
  v47 = *(_QWORD **)(v42 - 8);
  v6 = __chkstk_darwin(v42);
  v44 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v37 - v9;
  result = __chkstk_darwin(v8);
  v13 = (char *)&v37 - v12;
  v43 = a3;
  v38 = a2;
  if (a3 != a2)
  {
    v14 = v47[9];
    v40 = (uint64_t (*)(char *, uint64_t, uint64_t))v47[2];
    v41 = v14;
    v49 = v14 * (v43 - 1);
    v48 = v14 * v43;
    while (2)
    {
      v15 = 0;
      v16 = v39;
      v17 = v42;
      while (1)
      {
        v18 = *v46;
        v45 = v48 + v15;
        v19 = v40;
        v40(v13, v48 + v15 + v18, v17);
        v20 = v19(v10, v49 + v15 + v18, v17);
        v21 = URL.lastPathComponent.getter(v20);
        v22 = v10;
        v24 = v23;
        v25 = URL.lastPathComponent.getter(v21);
        if (v21 == v25 && v24 == v26)
          break;
        v28 = v26;
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v24, v25, v26, 1);
        swift_bridgeObjectRelease(v24);
        v30 = swift_bridgeObjectRelease(v28);
        v31 = (void (*)(char *, uint64_t, __n128))v47[1];
        v31(v22, v17, v30);
        result = ((uint64_t (*)(char *, uint64_t))v31)(v13, v17);
        v10 = v22;
        if ((v29 & 1) != 0)
        {
          v32 = *v46;
          if (!*v46)
          {
            __break(1u);
            return result;
          }
          v33 = v32 + v48 + v15;
          v34 = v32 + v49 + v15;
          v35 = (void (*)(char *, uint64_t, uint64_t))v47[4];
          v17 = v42;
          v35(v44, v33, v42);
          swift_arrayInitWithTakeFrontToBack(v33, v34, 1, v17);
          result = ((uint64_t (*)(uint64_t, char *, uint64_t))v35)(v34, v44, v17);
          v15 -= v41;
          ++v16;
          v10 = v22;
          if (v43 != v16)
            continue;
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRelease_n(v24, 2);
      v36 = (void (*)(char *, uint64_t))v47[1];
      v36(v22, v17);
      result = ((uint64_t (*)(char *, uint64_t))v36)(v13, v17);
      v10 = v22;
LABEL_13:
      v49 += v41;
      v48 += v41;
      if (++v43 != v38)
        continue;
      break;
    }
  }
  return result;
}

void sub_1005DF8BC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v28;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  __n128 v44;
  void (*v45)(uint64_t, uint64_t, __n128);
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  BOOL v50;
  BOOL v51;
  uint64_t (*v52)(char *, unint64_t, uint64_t);
  unint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, unint64_t, uint64_t);
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  char v67;
  __n128 v68;
  void (*v69)(char *, uint64_t, __n128);
  unint64_t v70;
  BOOL v71;
  BOOL v72;
  unint64_t v73;
  uint64_t v75;
  unint64_t v76;
  uint64_t (*v77)(char *, unint64_t, uint64_t);
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, unint64_t, uint64_t);
  char *v83;
  uint64_t v84;
  unint64_t v85;

  v8 = type metadata accessor for URL(0);
  v9 = __chkstk_darwin(v8);
  v83 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v82 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))((char *)&v75 - v12);
  v13 = __chkstk_darwin(v11);
  __chkstk_darwin(v13);
  v16 = (char *)&v75 - v15;
  v84 = v17;
  v18 = *(_QWORD *)(v17 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v19 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v18 == -1)
    goto LABEL_91;
  v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v18 == -1)
    goto LABEL_92;
  v80 = v14;
  v81 = v18;
  v23 = v19 / v18;
  v24 = v21 / v18;
  if (v19 / v18 >= v21 / v18)
  {
    sub_100600540(a2, v21 / v18);
    v25 = a4 + v24 * v18;
    if (v24 * v18 < 1 || a1 >= a2)
      goto LABEL_22;
    v80 = -v18;
    v52 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v84 + 16);
    v76 = a4;
    v77 = v52;
    v78 = a1;
    while (1)
    {
      v53 = a3;
      v85 = v25;
      v54 = v80;
      v79 = v25 + v80;
      v55 = v77;
      ((void (*)(uint64_t (*)(uint64_t, unint64_t, uint64_t)))v77)(v82);
      v56 = a2 + v54;
      v57 = a2 + v54;
      v58 = v8;
      v59 = v55(v83, v57, v8);
      v60 = URL.lastPathComponent.getter(v59);
      v62 = v61;
      v64 = URL.lastPathComponent.getter(v60);
      if (v60 == v64 && v62 == v63)
      {
        v67 = 0;
        v66 = v62;
      }
      else
      {
        v66 = v63;
        v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v62, v64, v63, 1);
      }
      swift_bridgeObjectRelease(v62);
      v68 = swift_bridgeObjectRelease(v66);
      a3 = v53 + v80;
      v69 = *(void (**)(char *, uint64_t, __n128))(v84 + 8);
      v8 = v58;
      v69(v83, v58, v68);
      ((void (*)(uint64_t (*)(uint64_t, unint64_t, uint64_t), uint64_t))v69)(v82, v58);
      v70 = v78;
      if ((v67 & 1) != 0)
      {
        v71 = v53 < a2 || a3 >= a2;
        v18 = v81;
        if (v71)
        {
          swift_arrayInitWithTakeFrontToBack(a3, v56, 1, v8);
        }
        else if (v53 != a2)
        {
          swift_arrayInitWithTakeBackToFront(a3, v56, 1, v8);
        }
        a2 = v56;
        a4 = v76;
        v25 = v85;
        goto LABEL_84;
      }
      v72 = v53 < v85 || a3 >= v85;
      v18 = v81;
      if (v72)
      {
        v73 = v79;
        swift_arrayInitWithTakeFrontToBack(a3, v79, 1, v8);
      }
      else
      {
        if (v53 == v85)
        {
          v25 = v79;
          goto LABEL_83;
        }
        v73 = v79;
        swift_arrayInitWithTakeBackToFront(a3, v79, 1, v8);
      }
      v25 = v73;
LABEL_83:
      a4 = v76;
LABEL_84:
      if (v25 <= a4 || a2 <= v70)
        goto LABEL_22;
    }
  }
  sub_100600540(a1, v19 / v18);
  v25 = a4 + v23 * v18;
  if (v23 * v18 >= 1 && a2 < a3)
  {
    v82 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v84 + 16);
    v83 = v16;
    v30 = v80;
    v85 = a4 + v23 * v18;
    v79 = a3;
    while (1)
    {
      v31 = v82;
      v82((uint64_t)v16, a2, v8);
      v32 = v31(v30, a4, v8);
      v33 = v8;
      v34 = URL.lastPathComponent.getter(v32);
      v36 = v35;
      v37 = URL.lastPathComponent.getter(v34);
      if (v34 == v37 && v36 == v38)
        break;
      v40 = v38;
      v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v37, v38, 1);
      v42 = v30;
      v43 = v41;
      swift_bridgeObjectRelease(v36);
      v44 = swift_bridgeObjectRelease(v40);
      v45 = *(void (**)(uint64_t, uint64_t, __n128))(v84 + 8);
      v45(v42, v33, v44);
      ((void (*)(char *, uint64_t))v45)(v16, v33);
      v8 = v33;
      if ((v43 & 1) == 0)
        goto LABEL_39;
      v18 = v81;
      v46 = a2 + v81;
      v47 = a1 < a2 || a1 >= v46;
      v48 = v79;
      if (!v47)
      {
        v30 = v80;
        if (a1 != a2)
          swift_arrayInitWithTakeBackToFront(a1, a2, 1, v8);
        v25 = v85;
        goto LABEL_49;
      }
      swift_arrayInitWithTakeFrontToBack(a1, a2, 1, v8);
LABEL_48:
      v25 = v85;
      v30 = v80;
LABEL_49:
      a1 += v18;
      v51 = a4 >= v25 || v46 >= v48;
      a2 = v46;
      if (v51)
        goto LABEL_22;
    }
    swift_bridgeObjectRelease_n(v36, 2);
    v49 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
    v49(v30, v33);
    v49((uint64_t)v16, v33);
    v8 = v33;
LABEL_39:
    v18 = v81;
    v50 = a1 < a4 || a1 >= a4 + v81;
    v48 = v79;
    if (v50)
    {
      swift_arrayInitWithTakeFrontToBack(a1, a4, 1, v8);
    }
    else if (a1 != a4)
    {
      swift_arrayInitWithTakeBackToFront(a1, a4, 1, v8);
    }
    v46 = a2;
    a4 += v18;
    goto LABEL_48;
  }
LABEL_22:
  v28 = v25 - a4;
  if (v18 != -1 || v28 != 0x8000000000000000)
  {
    sub_100600540(a4, v28 / v18);
    return;
  }
LABEL_93:
  __break(1u);
}

uint64_t sub_1005DFDDC(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "bundleIdentifier");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_1005DFE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(a5, "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:", v9, a3, a4, swift_bridgeObjectRelease(a2).n128_f64[0]);

  if (!v10)
    return 0;
  v11 = type metadata accessor for URL(0);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  return v12;
}

double sub_1005DFEE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  double result;
  _OWORD v10[2];
  uint64_t v11;

  v3 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v3);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(uint64_t (**)(uint64_t))(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  sub_1005BA1E0(a1, (uint64_t)v5);
  v8 = type metadata accessor for MoonDetailViewAction(0);
  swift_storeEnumTagMultiPayload(v5, v8, 0);
  swift_storeEnumTagMultiPayload(v5, v3, 13);
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  swift_retain();
  sub_1000A5EBC((uint64_t)v5, (uint64_t)v10, v7);
  sub_100159C94((uint64_t)v10);
  sub_1000A0AA4((uint64_t)v5);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for MoonDetailInteractor()
{
  return objc_opt_self(_TtC7Weather20MoonDetailInteractor);
}

double sub_1005DFFEC@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  sub_10005E6A8();
  *a1 = v3;
  a1[1] = v4;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

double sub_1005E0030@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  _OWORD v5[2];
  __int128 v6;

  result = sub_1005DFFEC(v5);
  if (!v1)
  {
    v4 = v5[1];
    *a1 = v5[0];
    a1[1] = v4;
    result = *(double *)&v6;
    a1[2] = v6;
  }
  return result;
}

void sub_1005E0070(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = type metadata accessor for WeatherMetadata(0);
  v18 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BCB9F8);
  v6 = Forecast.forecast.getter(v5);
  v7 = type metadata accessor for HourWeather(0);
  sub_100086DA4(&qword_100BF4D80, (uint64_t (*)(uint64_t))&type metadata accessor for HourWeather, (uint64_t)&protocol conformance descriptor for HourWeather);
  v9 = v8;
  sub_100086DA4(&qword_100BF4D88, (uint64_t (*)(uint64_t))&type metadata accessor for HourWeather, (uint64_t)&protocol conformance descriptor for HourWeather);
  Array<A>.write(to:)(a1, v6, v7, v9, v10);
  swift_bridgeObjectRelease();
  if (!v1)
  {
    v19 = Forecast.minuteSummary.getter(v5);
    v20 = v11;
    v12 = sub_1000BA294(&qword_100BC5AA8);
    Optional<A>.write(to:)(a1, v12, &protocol witness table for String);
    swift_bridgeObjectRelease();
    v19 = Forecast.minuteConditions.getter(v5);
    v13 = sub_1000BA294(&qword_100BF4C60);
    v14 = sub_1005E06B0();
    sub_1005E0754();
    Optional<A>.write(to:)(a1, v13, v14);
    swift_bridgeObjectRelease();
    v19 = Forecast.minuteSummaries.getter(v5);
    v15 = sub_1000BA294(&qword_100BF4C90);
    v16 = sub_1005E07F8();
    sub_1005E089C();
    Optional<A>.write(to:)(a1, v15, v16);
    swift_bridgeObjectRelease();
    Forecast.metadata.getter(v5);
    WeatherMetadata.write(to:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v21);
  }
}

void sub_1005E02CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = type metadata accessor for WeatherMetadata(0);
  v18 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BCB130);
  v6 = Forecast.forecast.getter(v5);
  v7 = type metadata accessor for DayWeather(0);
  sub_100086DA4(&qword_100BF4D70, (uint64_t (*)(uint64_t))&type metadata accessor for DayWeather, (uint64_t)&protocol conformance descriptor for DayWeather);
  v9 = v8;
  sub_100086DA4(&qword_100BF4D78, (uint64_t (*)(uint64_t))&type metadata accessor for DayWeather, (uint64_t)&protocol conformance descriptor for DayWeather);
  Array<A>.write(to:)(a1, v6, v7, v9, v10);
  swift_bridgeObjectRelease();
  if (!v1)
  {
    v19 = Forecast.minuteSummary.getter(v5);
    v20 = v11;
    v12 = sub_1000BA294(&qword_100BC5AA8);
    Optional<A>.write(to:)(a1, v12, &protocol witness table for String);
    swift_bridgeObjectRelease();
    v19 = Forecast.minuteConditions.getter(v5);
    v13 = sub_1000BA294(&qword_100BF4C60);
    v14 = sub_1005E06B0();
    sub_1005E0754();
    Optional<A>.write(to:)(a1, v13, v14);
    swift_bridgeObjectRelease();
    v19 = Forecast.minuteSummaries.getter(v5);
    v15 = sub_1000BA294(&qword_100BF4C90);
    v16 = sub_1005E07F8();
    sub_1005E089C();
    Optional<A>.write(to:)(a1, v15, v16);
    swift_bridgeObjectRelease();
    Forecast.metadata.getter(v5);
    WeatherMetadata.write(to:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v21);
  }
}

void Forecast<>.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_100099310();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v18 = sub_1000D0A5C();
  v10 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v11 = sub_1000DB2E8();
  v12 = Forecast.forecast.getter(v11);
  Array<A>.write(to:)(v9, v12, *(_QWORD *)(v7 + 16), v5, v3);
  sub_1000986C4();
  if (!v0)
  {
    v13 = sub_1000ED460();
    Forecast.minuteSummary.getter(v13);
    v14 = sub_1000BA294(&qword_100BC5AA8);
    Optional<A>.write(to:)(v9, v14, &protocol witness table for String);
    sub_100098964();
    v15 = sub_1000ED460();
    Forecast.minuteConditions.getter(v15);
    sub_1000BA294(&qword_100BF4C60);
    sub_1005E06B0();
    sub_1005E0754();
    sub_1000D0DBC();
    sub_100098964();
    v16 = sub_1000ED460();
    Forecast.minuteSummaries.getter(v16);
    sub_1000BA294(&qword_100BF4C90);
    sub_1005E07F8();
    sub_1005E089C();
    sub_1000D0DBC();
    sub_100098964();
    v17 = sub_1000ED460();
    Forecast.metadata.getter(v17);
    WeatherMetadata.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v18);
  }
  sub_1000B44B0();
}

unint64_t sub_1005E06B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4C68;
  if (!qword_100BF4C68)
  {
    v1 = sub_100075EB0(&qword_100BF4C70);
    sub_100086DA4(&qword_100BF4C78, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteCondition, (uint64_t)&protocol conformance descriptor for MinuteCondition);
    sub_100086DA4(&qword_100BF4C80, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteCondition, (uint64_t)&protocol conformance descriptor for MinuteCondition);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BF4C68);
  }
  return result;
}

unint64_t sub_1005E0754()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4C88;
  if (!qword_100BF4C88)
  {
    v1 = sub_100075EB0(&qword_100BF4C70);
    sub_100086DA4(&qword_100BF4C78, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteCondition, (uint64_t)&protocol conformance descriptor for MinuteCondition);
    sub_100086DA4(&qword_100BF4C80, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteCondition, (uint64_t)&protocol conformance descriptor for MinuteCondition);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BF4C88);
  }
  return result;
}

unint64_t sub_1005E07F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4C98;
  if (!qword_100BF4C98)
  {
    v1 = sub_100075EB0(&qword_100BF4CA0);
    sub_100086DA4(&qword_100BF4CA8, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteSummary, (uint64_t)&protocol conformance descriptor for MinuteSummary);
    sub_100086DA4(&qword_100BF4CB0, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteSummary, (uint64_t)&protocol conformance descriptor for MinuteSummary);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BF4C98);
  }
  return result;
}

unint64_t sub_1005E089C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4CB8;
  if (!qword_100BF4CB8)
  {
    v1 = sub_100075EB0(&qword_100BF4CA0);
    sub_100086DA4(&qword_100BF4CA8, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteSummary, (uint64_t)&protocol conformance descriptor for MinuteSummary);
    sub_100086DA4(&qword_100BF4CB0, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteSummary, (uint64_t)&protocol conformance descriptor for MinuteSummary);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BF4CB8);
  }
  return result;
}

void sub_1005E0940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;

  v3 = type metadata accessor for WeatherMetadata(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HourWeather(0);
  sub_100086DA4(&qword_100BF4D80, (uint64_t (*)(uint64_t))&type metadata accessor for HourWeather, (uint64_t)&protocol conformance descriptor for HourWeather);
  v8 = v7;
  sub_100086DA4(&qword_100BF4D88, (uint64_t (*)(uint64_t))&type metadata accessor for HourWeather, (uint64_t)&protocol conformance descriptor for HourWeather);
  v10 = static Array<A>.read(from:)(a1, v6, v8, v9);
  if (!v1)
  {
    v11 = v10;
    static Optional<A>.read(from:)(a1, &type metadata for String);
    v12 = v37;
    v34 = v36;
    v13 = sub_1000BA294(&qword_100BF4C70);
    sub_1005E06B0();
    sub_1005E0754();
    static Optional<A>.read(from:)(a1, v13);
    v33 = v12;
    v14 = v38;
    v15 = sub_1000BA294(&qword_100BF4CA0);
    sub_1005E07F8();
    sub_1005E089C();
    static Optional<A>.read(from:)(a1, v15);
    v16 = v14;
    v17 = v35;
    static WeatherMetadata.read(from:)(v18, v19, v20, v21, v22, v23, v24, v25, v32, v33, v34, v35);
    v26 = v33;
    sub_100086DA4(&qword_100BD0C50, (uint64_t (*)(uint64_t))&type metadata accessor for HourWeather, (uint64_t)&protocol conformance descriptor for HourWeather);
    v32 = v27;
    sub_100086DA4(&qword_100BD0C58, (uint64_t (*)(uint64_t))&type metadata accessor for HourWeather, (uint64_t)&protocol conformance descriptor for HourWeather);
    v28 = v17;
    v30 = v29;
    sub_100086DA4(&qword_100BD0C60, (uint64_t (*)(uint64_t))&type metadata accessor for HourWeather, (uint64_t)&protocol conformance descriptor for HourWeather);
    Forecast.init(_:minuteSummary:minuteConditions:minuteSummaries:metadata:)(v11, *(_QWORD *)&v34, *(_QWORD *)&v26, v16, *(_QWORD *)&v28, v5, v6, *(_QWORD *)&v32, v30, v31);
  }
}

void sub_1005E0BF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;

  v3 = type metadata accessor for WeatherMetadata(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DayWeather(0);
  sub_100086DA4(&qword_100BF4D70, (uint64_t (*)(uint64_t))&type metadata accessor for DayWeather, (uint64_t)&protocol conformance descriptor for DayWeather);
  v8 = v7;
  sub_100086DA4(&qword_100BF4D78, (uint64_t (*)(uint64_t))&type metadata accessor for DayWeather, (uint64_t)&protocol conformance descriptor for DayWeather);
  v10 = static Array<A>.read(from:)(a1, v6, v8, v9);
  if (!v1)
  {
    v11 = v10;
    static Optional<A>.read(from:)(a1, &type metadata for String);
    v12 = v37;
    v34 = v36;
    v13 = sub_1000BA294(&qword_100BF4C70);
    sub_1005E06B0();
    sub_1005E0754();
    static Optional<A>.read(from:)(a1, v13);
    v33 = v12;
    v14 = v38;
    v15 = sub_1000BA294(&qword_100BF4CA0);
    sub_1005E07F8();
    sub_1005E089C();
    static Optional<A>.read(from:)(a1, v15);
    v16 = v14;
    v17 = v35;
    static WeatherMetadata.read(from:)(v18, v19, v20, v21, v22, v23, v24, v25, v32, v33, v34, v35);
    v26 = v33;
    sub_100086DA4(&qword_100BD0C78, (uint64_t (*)(uint64_t))&type metadata accessor for DayWeather, (uint64_t)&protocol conformance descriptor for DayWeather);
    v32 = v27;
    sub_100086DA4(&qword_100BD0C80, (uint64_t (*)(uint64_t))&type metadata accessor for DayWeather, (uint64_t)&protocol conformance descriptor for DayWeather);
    v28 = v17;
    v30 = v29;
    sub_100086DA4(&qword_100BD0C88, (uint64_t (*)(uint64_t))&type metadata accessor for DayWeather, (uint64_t)&protocol conformance descriptor for DayWeather);
    Forecast.init(_:minuteSummary:minuteConditions:minuteSummaries:metadata:)(v11, *(_QWORD *)&v34, *(_QWORD *)&v26, v16, *(_QWORD *)&v28, v5, v6, *(_QWORD *)&v32, v30, v31);
  }
}

void static Forecast<>.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;

  sub_100099310();
  v13 = v12;
  v15 = v14;
  v43 = v16;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v26 = v25;
  sub_1000D0A5C();
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_100098694();
  v28 = static Array<A>.read(from:)(v24, *(_QWORD *)&v22, v15, v13);
  if (!v10)
  {
    v29 = v28;
    sub_1000CDD44(v24, (uint64_t)&type metadata for String);
    v30 = sub_1000BA294(&qword_100BF4C70);
    sub_1005E06B0();
    sub_1005E0754();
    sub_1000CDD44(v24, v30);
    v31 = sub_1000BA294(&qword_100BF4CA0);
    sub_1005E07F8();
    sub_1005E089C();
    sub_1000CDD44(v24, v31);
    static WeatherMetadata.read(from:)(v32, v33, v34, v35, v36, v37, v38, v39, v45, v20, v22, v26);
    Forecast.init(_:minuteSummary:minuteConditions:minuteSummaries:metadata:)(v29, v40, v46, a10, v44, v11, v42, v41, v18, v43);
  }
  sub_1000B44B0();
}

uint64_t sub_1005E1084(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_1005E1B00(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static Forecast<>.read(from:));
}

void sub_1005E10A0()
{
  Forecast<>.write(to:)();
}

void Trend<>.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  sub_100099310();
  v2 = v0;
  v36 = v4;
  v37 = v3;
  v6 = v5;
  v8 = v7;
  v9 = type metadata accessor for Deviation(0);
  v29 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_10009DE08(v11, v28);
  v12 = *(_QWORD *)(v6 + 16);
  v35 = type metadata accessor for Measurement(0);
  v13 = *(_QWORD *)(v35 - 8);
  sub_100098F2C();
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v28 - v16;
  v18 = type metadata accessor for TrendBaseline(0, v12, v15);
  v19 = *(_QWORD *)(v18 - 8);
  sub_100098F2C();
  __chkstk_darwin(v20);
  v22 = (char *)&v28 - v21;
  v32 = v6;
  v33 = v2;
  v23 = v6;
  v24 = v36;
  Trend.baseline.getter(v23);
  v34 = v8;
  TrendBaseline<>.write(to:)();
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  }
  else
  {
    v25 = v31;
    sub_1000BDD1C((uint64_t)v22, *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
    v26 = v32;
    Trend.currentValue.getter(v32);
    Measurement<>.write(to:)(v34, v35, v27, v24);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v35);
    Trend.deviation.getter(v26);
    Deviation.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v25, v30);
  }
  sub_1000B44B0();
}

void TrendBaseline<>.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_100099310();
  v26 = v2;
  v4 = v3;
  v6 = v5;
  v7 = sub_100098778();
  v23 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v4 + 16);
  v25 = sub_10011DB90();
  v12 = *(_QWORD *)(v25 - 8);
  sub_100098F2C();
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - v14;
  v16 = type metadata accessor for TrendBaseline.Kind(0, v11);
  v17 = *(_QWORD *)(v16 - 8);
  sub_100098F2C();
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v23 - v20;
  v27 = v0;
  v28 = v4;
  TrendBaseline.kind.getter(v4, v19);
  TrendBaseline.Kind<>.write(to:)(v6, v16);
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
  }
  else
  {
    sub_1000C1D6C(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
    TrendBaseline.value.getter(v28);
    Measurement<>.write(to:)(v6, v25, v22, v26);
    sub_100098820((uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
    TrendBaseline.startDate.getter(v28);
    Date.write(to:)(v6);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
  }
  sub_1000B44B0();
}

void Measurement<>.write(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v8;

  Measurement.value.getter(a2);
  FixedSizeTypeBinaryCodable.write(to:)(a1);
  if (!v4)
  {
    v8 = (void *)Measurement.unit.getter(a2);
    dispatch thunk of BinaryEncodable.write(to:)(a1, *(_QWORD *)(a2 + 16), a4);

  }
}

void static Trend<>.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  sub_100099310();
  v21 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v19[1] = v9;
  type metadata accessor for Deviation(0);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100088FDC();
  v19[0] = v11;
  v12 = sub_10011DB90();
  sub_100098F2C();
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v19 - v15;
  type metadata accessor for TrendBaseline(0, v6, v14);
  sub_100098F2C();
  __chkstk_darwin(v17);
  sub_1000C01B8();
  v20 = v8;
  static TrendBaseline<>.read(from:)();
  if (!v1)
  {
    v21 = v12;
    v18 = v19[0];
    static Measurement<>.read(from:)(v20, v6, v4);
    static Deviation.read(from:)(v20);
    Trend.init(baseline:currentValue:deviation:)(v0, v16, v18, v6);
  }
  sub_1000B44B0();
}

void static TrendBaseline<>.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  sub_100099310();
  v18 = v2;
  v4 = v3;
  v6 = v5;
  v16[1] = v7;
  sub_100098778();
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v17 = v9;
  type metadata accessor for Measurement(0);
  sub_100098F2C();
  __chkstk_darwin(v10);
  v12 = (char *)v16 - v11;
  v13 = *(_QWORD *)(type metadata accessor for TrendBaseline.Kind(0, v4) - 8);
  sub_100098F2C();
  __chkstk_darwin(v14);
  sub_1000C01B8();
  static TrendBaseline.Kind<>.read(from:)(v6, v4);
  if (!v1)
  {
    v16[0] = v13;
    v15 = v17;
    static Measurement<>.read(from:)(v6, v4, v18);
    static Date.read(from:)(v6);
    TrendBaseline.init(kind:value:startDate:)(v0, v12, v15, v4);
  }
  sub_1000B44B0();
}

void static Measurement<>.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  sub_1000C1780(a1);
  if (!v3)
  {
    dispatch thunk of static BinaryDecodable.read(from:)(&v7, a1, a2, a3);
    Measurement.init(value:unit:)(v7, a2);
  }
  sub_1000F4100();
}

void sub_1005E1808()
{
  static Trend<>.read(from:)();
}

void sub_1005E1828()
{
  Trend<>.write(to:)();
}

void TrendBaseline.Kind<>.write(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)(a2 - 8);
  v5 = __chkstk_darwin(a1);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))(v7, v8, a2, v5);
  if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v7, a2) == enum case for TrendBaseline.Kind.mean<A>(_:))
  {
    v15 = 1;
    FixedSizeTypeBinaryCodable.write(to:)(a1);
  }
  else
  {
    v9 = sub_1000C56E0();
    sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
    swift_allocError(v9, v10, 0, 0);
    v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v11, enum case for BinaryDecoder.Error.valueNotSupported(_:), v9);
    swift_willThrow(v12, v13);
    sub_100098820((uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }
  sub_1000FDBD8();
}

uint64_t static TrendBaseline.Kind<>.read(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_1000E726C(a1);
  if (!v2)
  {
    sub_100094FFC();
    if (v5)
    {
      v6 = type metadata accessor for TrendBaseline.Kind(0, a2);
      return sub_1000C229C(v6);
    }
    else
    {
      sub_1000C56E0();
      sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
      v8 = sub_1000BC670(v7);
      v10 = sub_1000D0A50(v8, v9);
      sub_1000C3D70(v10, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      return sub_1000C2294();
    }
  }
  return result;
}

void sub_1005E1A34()
{
  static TrendBaseline<>.read(from:)();
}

void sub_1005E1A54()
{
  TrendBaseline<>.write(to:)();
}

uint64_t sub_1005E1A70(uint64_t a1, uint64_t a2)
{
  return static TrendBaseline.Kind<>.read(from:)(a1, *(_QWORD *)(a2 + 16));
}

void sub_1005E1A88(uint64_t a1, uint64_t a2)
{
  TrendBaseline.Kind<>.write(to:)(a1, a2);
}

void DailyWeatherStatistics<>.write(to:)()
{
  sub_1005E1DAC();
}

void static DailyWeatherStatistics<>.read(from:)()
{
  sub_1005E1EF4();
}

uint64_t sub_1005E1AE4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_1005E1B00(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static DailyWeatherStatistics<>.read(from:));
}

uint64_t sub_1005E1B00(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a4(a1, a2[2], a2[3], a2[4], a2[5], *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

void sub_1005E1B28()
{
  DailyWeatherStatistics<>.write(to:)();
}

void DailyWeatherSummary<>.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;

  sub_100099310();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  sub_1000D0A5C();
  sub_100098CE0();
  __chkstk_darwin(v10);
  v11 = sub_1000DB2E8();
  v12 = DailyWeatherSummary.days.getter(v11);
  Array<A>.write(to:)(v9, v12, *(_QWORD *)(v7 + 16), v5, v3);
  v13 = swift_bridgeObjectRelease();
  if (!v0)
  {
    DailyWeatherSummary.metadata.getter(v7, v13);
    WeatherMetadata.write(to:)();
    sub_1000C1D6C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }
  sub_1000B44B0();
}

#error "1005E1C80: call analysis failed (funcsize=52)"

uint64_t sub_1005E1CC8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_1005E1B00(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static DailyWeatherSummary<>.read(from:));
}

void sub_1005E1CE4()
{
  DailyWeatherSummary<>.write(to:)();
}

void HourlyWeatherStatistics<>.write(to:)()
{
  sub_1005E1DAC();
}

void static HourlyWeatherStatistics<>.read(from:)()
{
  sub_1005E1EF4();
}

uint64_t sub_1005E1D48(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_1005E1B00(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static HourlyWeatherStatistics<>.read(from:));
}

void sub_1005E1D64()
{
  HourlyWeatherStatistics<>.write(to:)();
}

void MonthlyWeatherStatistics<>.write(to:)()
{
  sub_1005E1DAC();
}

void sub_1005E1DAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, double);
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  void (*v21)(uint64_t);
  void (*v22)(uint64_t, double);
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;

  sub_100099310();
  v21 = v7;
  v22 = v6;
  v23 = v9;
  v24 = v8;
  v25 = v10;
  v12 = v11;
  v14 = v13;
  v15 = sub_1000D0A5C();
  sub_1000BD980();
  __chkstk_darwin(v16);
  v17 = sub_10008909C();
  type metadata accessor for Date(v17);
  sub_1000F3E58();
  __chkstk_darwin(v18);
  sub_10007A130();
  v19 = v23(v12);
  Array<A>.write(to:)(v14, v19, *(_QWORD *)(v12 + 16), v24, v25);
  v20 = sub_1000986C4();
  if (!v0)
  {
    v22(v12, v20);
    Date.write(to:)(v14);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v2);
    v21(v12);
    WeatherMetadata.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v15);
  }
  sub_1000B44B0();
}

void static MonthlyWeatherStatistics<>.read(from:)()
{
  sub_1005E1EF4();
}

void sub_1005E1EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_100099310();
  v31 = v3;
  v33 = v4;
  v6 = v5;
  v8 = v7;
  v27 = v9;
  v29 = v10;
  v12 = v11;
  v14 = v13;
  sub_1000D0A5C();
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100099234();
  sub_100098778();
  sub_10009D5D4();
  __chkstk_darwin(v16);
  sub_1000BCED8();
  v17 = static Array<A>.read(from:)(v14, v12, v8, v6);
  if (!v1)
  {
    v18 = v17;
    static Date.read(from:)(v14);
    static WeatherMetadata.read(from:)(v19, v20, v21, v22, v23, v24, v25, v26, v27, v29, v31, v33);
    v34(v18, v0, v2, v12, v28, v30, v32);
  }
  sub_1000B44B0();
}

uint64_t sub_1005E2000(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_1005E1B00(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static MonthlyWeatherStatistics<>.read(from:));
}

void sub_1005E201C()
{
  MonthlyWeatherStatistics<>.write(to:)();
}

void Percentiles<>.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;

  sub_100099310();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = type metadata accessor for Measurement(0);
  sub_10009D5D4();
  __chkstk_darwin(v12);
  sub_100094F2C();
  __chkstk_darwin(v13);
  sub_1000B2688();
  __chkstk_darwin(v14);
  v16 = (char *)&v24 - v15;
  v27 = v8;
  v25 = v0;
  Percentiles.p10.getter(v8);
  v26 = v10;
  v17 = v10;
  v18 = v6;
  Measurement<>.write(to:)(v17, v11, v19, v6);
  if (v1)
  {
    sub_1000C1D6C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  else
  {
    v28 = v3;
    v20 = *(void (**)(char *, uint64_t))(v2 + 8);
    v20(v16, v11);
    Percentiles.p50.getter(v27);
    v21 = v26;
    Measurement<>.write(to:)(v26, v11, v22, v18);
    v20(v4, v11);
    Percentiles.p90.getter(v27);
    Measurement<>.write(to:)(v21, v11, v23, v18);
    v20(v28, v11);
  }
  sub_1000B44B0();
}

void static Percentiles<>.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  sub_100099310();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  a10 = v26;
  type metadata accessor for Measurement(0);
  sub_1000BD980();
  __chkstk_darwin(v27);
  v29 = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  sub_1000B2688();
  __chkstk_darwin(v31);
  v33 = (char *)&a9 - v32;
  sub_10009D6FC();
  if (!v20)
  {
    sub_10009D6FC();
    sub_10009D6FC();
    Percentiles.init(p10:p50:p90:)(v33, v21, v29, v25);
  }
  sub_1000B44B0();
}

#error "1005E22B4: call analysis failed (funcsize=7)"

void sub_1005E22C0()
{
  Percentiles<>.write(to:)();
}

void sub_1005E22D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *v1;
  swift_retain();
  FixedSizeTypeBinaryCodable.write(to:)(a1);
  if (v2)
  {
    swift_release(v4);
  }
  else
  {
    sub_10068FEAC();
    swift_release(v4);
    type metadata accessor for ViewState(0);
    sub_1000BEF10();
    sub_1006B1DCC();
    v5 = sub_1000BEF10();
    ListSessionTrigger.write(to:)(v5);
    sub_10076B570();
    v6 = sub_1000BEF10();
    ListSessionTrigger.write(to:)(v6);
    v7 = sub_1000BA294(&qword_100BC5F78);
    sub_1000D94F8(&qword_100BF4D60, v8, (uint64_t)&unk_10098CBB8);
    v10 = v9;
    sub_1000D94F8(&qword_100BF4D68, v11, (uint64_t)&unk_10098CB90);
    Optional<A>.write(to:)(a1, v7, v10);
    v12 = sub_1000BEF10();
    sub_1006B1EE8(v12);
    v13 = sub_1000BEF10();
    sub_100692984(v13);
    v14 = sub_1000BEF10();
    FixedSizeTypeBinaryCodable.write(to:)(v14);
  }
  sub_1000F4100();
}

void sub_1005E249C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;

  sub_100099310();
  v80 = v14;
  v19 = v18;
  v78 = v20;
  type metadata accessor for WeatherMapPresentationState(0);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  v23 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10003BC60();
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  sub_1000BCED8();
  v26 = type metadata accessor for DisplayMetrics(0);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_100098694();
  sub_1000BA294(&qword_100BC5F78);
  sub_1000B42B0();
  __chkstk_darwin(v28);
  sub_10007A130();
  type metadata accessor for ViewState.SecondaryViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_100094EC4();
  v79 = v19;
  v30 = v80;
  sub_1006B1F84(v19);
  if (!v30)
  {
    v75 = v15;
    v76 = v13;
    v72 = v25;
    v73 = v24;
    v80 = v31;
    v77 = v17;
    v74 = v23;
    v33 = v78;
    v32 = v79;
    sub_1000DAFE4();
    sub_1006B202C();
    v34 = sub_1000DAFE4();
    static ListSessionTrigger.read(from:)(v34);
    v36 = v35;
    v37 = sub_1000DAFE4();
    static ListSessionTrigger.read(from:)(v37);
    v39 = v38;
    v40 = type metadata accessor for SearchViewState(0);
    sub_1000D94F8(&qword_100BF4D60, v41, (uint64_t)&unk_10098CBB8);
    v71 = v42;
    sub_1000D94F8(&qword_100BF4D68, v43, (uint64_t)&unk_10098CB90);
    static Optional<A>.read(from:)(v32, v40);
    v44 = sub_1000DAFE4();
    static UIInterfaceOrientation.read(from:)(v44);
    v46 = v45;
    v47 = sub_1000DAFE4();
    static UIUserInterfaceSizeClass.read(from:)(v47);
    v71 = v48;
    v49 = sub_1000DAFE4();
    static NotificationAuthorizationState.read(from:)(v49);
    v81 = v50;
    v51 = sub_1000DAFE4();
    static ListSessionTrigger.read(from:)(v51);
    v70 = v52;
    v53 = sub_1000DAFE4();
    static WeatherChange.Direction.read(from:)(v53);
    v69 = v54;
    v55 = sub_1000DAFE4();
    static DynamicTypeSize.read(from:)(v55);
    v56 = v70 & 1;
    v58 = v75;
    v57 = v76;
    v59 = v71;
    *v75 = v46;
    v58[1] = v59;
    *((_BYTE *)v58 + 16) = v81;
    *((_BYTE *)v58 + 17) = v56;
    *((_BYTE *)v58 + 18) = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))((char *)v58 + *(int *)(v26 + 36), v57, v73);
    sub_1006927D4(v79, v60, v61, v62, v63, v64, v65, v66, v68, v69, v70, SBYTE2(v70), SHIBYTE(v70));
    static FixedSizeTypeBinaryCodable.read(from:)(v79);
    *v33 = v80;
    v67 = (int *)type metadata accessor for ViewState(0);
    sub_1000A15B4(v16, (uint64_t)v33 + v67[5], type metadata accessor for ViewState.SecondaryViewState);
    *((_BYTE *)v33 + v67[6]) = v36 & 1;
    *((_BYTE *)v33 + v67[7]) = v39 & 1;
    sub_100145174(v77, (uint64_t)v33 + v67[8]);
    sub_1000A15B4((uint64_t)v75, (uint64_t)v33 + v67[9], type metadata accessor for DisplayMetrics);
    sub_1000A15B4((uint64_t)v74, (uint64_t)v33 + v67[10], type metadata accessor for WeatherMapPresentationState);
    *((_BYTE *)v33 + v67[11]) = a13;
  }
  sub_1000B44B0();
}

void sub_1005E2858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1005E249C(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_1005E286C(uint64_t a1)
{
  sub_1005E22D8(a1);
}

void static WeatherAttribution.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  sub_100099310();
  v4 = v3;
  v6 = v5;
  type metadata accessor for URL(0);
  sub_100098CE0();
  __chkstk_darwin(v7);
  sub_100094F2C();
  __chkstk_darwin(v8);
  sub_10008616C();
  __chkstk_darwin(v9);
  v11 = (char *)v17 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)v17 - v13;
  v15 = static String.read(from:)(v4);
  if (!v0)
  {
    v17[0] = v15;
    v17[1] = v6;
    v18 = v16;
    sub_1000C6BD0();
    sub_1000C6BD0();
    sub_1000C6BD0();
    sub_1000C6BD0();
    WeatherAttribution.init(serviceName:legalPageURL:squareMarkURL:combinedMarkDarkURL:combinedMarkLightURL:)(v17[0], v18, v14, v11, v1, v2);
  }
  sub_1000B44B0();
}

void WeatherAttribution.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  sub_100099310();
  v4 = v3;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  sub_10008616C();
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - v11;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v25 - v15;
  v28 = v0;
  v17 = WeatherAttribution.serviceName.getter(v14);
  String.write(to:)(v4, v17, v18);
  if (v1)
  {
    sub_1000986C4();
  }
  else
  {
    v26 = v8;
    v27 = v2;
    v19 = sub_1000986C4();
    WeatherAttribution.legalPageURL.getter(v19);
    sub_1000F44DC();
    v20 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v16, v5);
    WeatherAttribution.squareMarkURL.getter(v20);
    sub_1000F44DC();
    v21 = sub_1000B3174((uint64_t)v12);
    v22 = v27;
    WeatherAttribution.combinedMarkDarkURL.getter(v21);
    sub_1000F44DC();
    v23 = sub_1000B3174(v22);
    v24 = (uint64_t)v26;
    WeatherAttribution.combinedMarkLightURL.getter(v23);
    sub_1000F44DC();
    sub_1000B3174(v24);
  }
  sub_1000B44B0();
}

void sub_1005E2B80()
{
  static WeatherAttribution.read(from:)();
}

void sub_1005E2B94()
{
  WeatherAttribution.write(to:)();
}

void static WeatherDataModel.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  sub_100099310();
  v65 = v10;
  v66 = v15;
  v56 = v16;
  sub_1000BA294(&qword_100BCB318);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_10009DA80(v18, v49);
  sub_1000BA294(&qword_100BCB328);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_10009DE08(v20, v49);
  v21 = type metadata accessor for WeatherAvailability(0);
  v58 = *(_QWORD *)(v21 - 8);
  v59 = v21;
  sub_10009D98C();
  __chkstk_darwin(v22);
  sub_100088FDC();
  v61 = v23;
  sub_1000BA294(&qword_100BCCC48);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_100088FDC();
  v62 = v25;
  sub_1000BA294(&qword_100BE7C80);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_1000DC160(v27, v49);
  v63 = sub_1000BA294(&qword_100BCB130);
  v28 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v30 = (char *)&v49 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1000BA294(&qword_100BCB9F8);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  sub_100099234();
  sub_1000BA294(&qword_100BCE370);
  sub_1000B42B0();
  __chkstk_darwin(v33);
  sub_100098694();
  type metadata accessor for CurrentWeather(0);
  sub_1000F3E58();
  __chkstk_darwin(v34);
  v36 = (char *)&v49 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v65;
  static CurrentWeather.read(from:)(v66, (uint64_t)v36);
  if (!v37)
  {
    v51 = v28;
    v52 = v31;
    v53 = v32;
    v54 = v36;
    v55 = v13;
    v65 = v12;
    sub_1000BA294(&qword_100BCE378);
    sub_1005E3134();
    sub_1005E31D8();
    v38 = v66;
    sub_1000D9144(v66);
    sub_1005E0940(v38);
    sub_1005E0BF8(v38);
    type metadata accessor for AirQuality(0);
    sub_1000C672C(&qword_100BF4CE8, v39, (uint64_t)&protocol conformance descriptor for AirQuality);
    sub_1000C672C(&qword_100BF4CF0, v40, (uint64_t)&protocol conformance descriptor for AirQuality);
    sub_1000D9144(v38);
    type metadata accessor for WeatherChanges(0);
    sub_1000C672C(&qword_100BF4CF8, v41, (uint64_t)&protocol conformance descriptor for WeatherChanges);
    sub_1000C672C(&qword_100BF4D00, v42, (uint64_t)&protocol conformance descriptor for WeatherChanges);
    sub_1000D9144(v38);
    sub_1000BA294(&qword_100BD4FC0);
    sub_1005E327C();
    sub_1005E3320();
    sub_1000D9144(v66);
    static WeatherAvailability.read(from:)();
    v50 = a10;
    type metadata accessor for HistoricalComparisons(0);
    sub_1000C672C(&qword_100BF4D28, v43, (uint64_t)&protocol conformance descriptor for HistoricalComparisons);
    sub_1000C672C(&qword_100BF4D30, v44, (uint64_t)&protocol conformance descriptor for HistoricalComparisons);
    sub_1000D9144(v66);
    v49 = type metadata accessor for HistoricalFacts(0);
    sub_1000C672C(&qword_100BF4D38, v45, (uint64_t)&protocol conformance descriptor for HistoricalFacts);
    sub_1000C672C(&qword_100BF4D40, v46, (uint64_t)&protocol conformance descriptor for HistoricalFacts);
    v47 = v57;
    sub_1000CDD44(v66, v49);
    WeatherDataModel.init(currentWeather:minuteForecast:hourlyForecast:dailyForecast:airQuality:weatherChanges:weatherAlerts:availability:historicalComparisons:historicalFacts:)(v54, v11, v14, v30, v64, v62, v50, v61, v48, v60, v47);
  }
  sub_1000B44B0();
}

unint64_t sub_1005E3134()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4CC8;
  if (!qword_100BF4CC8)
  {
    v1 = sub_100075EB0(&qword_100BCE378);
    sub_100086DA4(&qword_100BF4CD0, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteWeather, (uint64_t)&protocol conformance descriptor for MinuteWeather);
    sub_100086DA4(&qword_100BF4CD8, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteWeather, (uint64_t)&protocol conformance descriptor for MinuteWeather);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Forecast<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4CC8);
  }
  return result;
}

unint64_t sub_1005E31D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4CE0;
  if (!qword_100BF4CE0)
  {
    v1 = sub_100075EB0(&qword_100BCE378);
    sub_100086DA4(&qword_100BF4CD0, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteWeather, (uint64_t)&protocol conformance descriptor for MinuteWeather);
    sub_100086DA4(&qword_100BF4CD8, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteWeather, (uint64_t)&protocol conformance descriptor for MinuteWeather);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Forecast<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4CE0);
  }
  return result;
}

unint64_t sub_1005E327C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4D08;
  if (!qword_100BF4D08)
  {
    v1 = sub_100075EB0(&qword_100BD4FC0);
    sub_100086DA4(&qword_100BF4D10, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherAlert, (uint64_t)&protocol conformance descriptor for WeatherAlert);
    sub_100086DA4(&qword_100BF4D18, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherAlert, (uint64_t)&protocol conformance descriptor for WeatherAlert);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BF4D08);
  }
  return result;
}

unint64_t sub_1005E3320()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4D20;
  if (!qword_100BF4D20)
  {
    v1 = sub_100075EB0(&qword_100BD4FC0);
    sub_100086DA4(&qword_100BF4D10, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherAlert, (uint64_t)&protocol conformance descriptor for WeatherAlert);
    sub_100086DA4(&qword_100BF4D18, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherAlert, (uint64_t)&protocol conformance descriptor for WeatherAlert);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BF4D20);
  }
  return result;
}

void WeatherDataModel.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  sub_100099310();
  v90 = v4;
  v66 = sub_1000BA294(&qword_100BCB318);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v64 = v6;
  v70 = sub_1000BA294(&qword_100BCB328);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v68 = v8;
  v9 = type metadata accessor for WeatherAvailability(0);
  v72 = *(_QWORD *)(v9 - 8);
  v74 = v9;
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_1000DC160(v11, v60);
  v76 = sub_1000BA294(&qword_100BCCC48);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_10009DA80(v13, v61);
  v80 = sub_1000BA294(&qword_100BE7C80);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v82 = v15;
  v16 = sub_1000BA294(&qword_100BCB130);
  v86 = *(_QWORD *)(v16 - 8);
  v87 = v16;
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_10009DE08(v18, v62);
  v19 = sub_1000BA294(&qword_100BCB9F8);
  __chkstk_darwin(v19);
  sub_100099234();
  v88 = sub_1000BA294(&qword_100BCE370);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  v21 = sub_10008909C();
  v22 = type metadata accessor for CurrentWeather(v21);
  sub_1000BD980();
  __chkstk_darwin(v23);
  sub_10007A130();
  WeatherDataModel.currentWeather.getter(v24);
  CurrentWeather.write(to:)(v90, v25, v26, v27, v28, v29, v30, v31, v63, v64, v66, v68, v70, v72, v74, v76, v78, v80, v82,
    v84);
  if (v0)
  {
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v22);
  }
  else
  {
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v3, v22);
    WeatherDataModel.minuteForecast.getter(v32);
    v33 = sub_1005E3134();
    sub_1005E31D8();
    Optional<A>.write(to:)(v90, v88, v33);
    sub_1005E5ABC(v2, (uint64_t)&qword_100BCE370);
    WeatherDataModel.hourlyForecast.getter(v34);
    sub_1005E0070(v90);
    v35 = sub_1000AE980();
    v37 = v36(v35);
    WeatherDataModel.dailyForecast.getter(v37);
    sub_1005E02CC(v90);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v87);
    WeatherDataModel.airQuality.getter(v38);
    sub_1000C1960(&qword_100BF4CE8, v39, (uint64_t)&protocol conformance descriptor for AirQuality);
    sub_1000C1960(&qword_100BF4CF0, v40, (uint64_t)&protocol conformance descriptor for AirQuality);
    v41 = sub_10009BD44();
    sub_10009BFF4(v41, v81);
    sub_1005E5ABC(v83, (uint64_t)&qword_100BE7C80);
    WeatherDataModel.weatherChanges.getter(v42);
    sub_1000C1960(&qword_100BF4CF8, v43, (uint64_t)&protocol conformance descriptor for WeatherChanges);
    sub_1000C1960(&qword_100BF4D00, v44, (uint64_t)&protocol conformance descriptor for WeatherChanges);
    v45 = sub_10009BD44();
    sub_10009BFF4(v45, v77);
    sub_1005E5ABC(v79, (uint64_t)&qword_100BCCC48);
    WeatherDataModel.weatherAlerts.getter(v46);
    v47 = sub_1000BA294(&qword_100BF4D48);
    v48 = sub_1005E327C();
    sub_1005E3320();
    Optional<A>.write(to:)(v90, v47, v48);
    swift_bridgeObjectRelease();
    WeatherDataModel.availability.getter(v49);
    WeatherAvailability.write(to:)();
    v50.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v73 + 8))(v89, v75);
    WeatherDataModel.historicalComparisons.getter(v50);
    sub_1000C1960(&qword_100BF4D28, v51, (uint64_t)&protocol conformance descriptor for HistoricalComparisons);
    v53 = v52;
    sub_1000C1960(&qword_100BF4D30, v54, (uint64_t)&protocol conformance descriptor for HistoricalComparisons);
    v55 = sub_10009BD44();
    Optional<A>.write(to:)(v55, v71, v53);
    sub_1005E5ABC(v69, (uint64_t)&qword_100BCB328);
    WeatherDataModel.historicalFacts.getter(v56);
    sub_100086DA4(&qword_100BF4D38, (uint64_t (*)(uint64_t))&type metadata accessor for HistoricalFacts, (uint64_t)&protocol conformance descriptor for HistoricalFacts);
    v58 = v57;
    sub_100086DA4(&qword_100BF4D40, (uint64_t (*)(uint64_t))&type metadata accessor for HistoricalFacts, (uint64_t)&protocol conformance descriptor for HistoricalFacts);
    v59 = sub_10009BD44();
    Optional<A>.write(to:)(v59, v67, v58);
    sub_1005E5ABC(v65, (uint64_t)&qword_100BCB318);
  }
  sub_1000B44B0();
}

void sub_1005E38E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  static WeatherDataModel.read(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_1005E38F8()
{
  WeatherDataModel.write(to:)();
}

uint64_t DynamicTypeSize.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = sub_10003BC60();
  sub_10009D5D4();
  __chkstk_darwin(v4);
  sub_100094EC4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v5 == enum case for DynamicTypeSize.xSmall(_:)
    || v5 == enum case for DynamicTypeSize.small(_:)
    || v5 == enum case for DynamicTypeSize.medium(_:)
    || v5 == enum case for DynamicTypeSize.large(_:)
    || v5 == enum case for DynamicTypeSize.xLarge(_:)
    || v5 == enum case for DynamicTypeSize.xxLarge(_:)
    || v5 == enum case for DynamicTypeSize.xxxLarge(_:)
    || v5 == enum case for DynamicTypeSize.accessibility1(_:)
    || v5 == enum case for DynamicTypeSize.accessibility2(_:)
    || v5 == enum case for DynamicTypeSize.accessibility3(_:)
    || v5 == enum case for DynamicTypeSize.accessibility4(_:)
    || v5 == enum case for DynamicTypeSize.accessibility5(_:))
  {
    return sub_100098F20();
  }
  sub_100098F20();
  return sub_1000BDD1C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
}

uint64_t static DynamicTypeSize.read(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1000E726C(a1);
  if (!v1)
  {
    sub_1000C6EC8();
    switch(v3)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
        v8 = sub_10003BC60();
        result = sub_1000C229C(v8);
        break;
      default:
        sub_1000C56E0();
        sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
        v5 = sub_1000BC670(v4);
        v7 = sub_1000D0A50(v5, v6);
        sub_1000C3D70(v7, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        result = sub_1000C2294();
        break;
    }
  }
  return result;
}

uint64_t sub_1005E3D74(uint64_t a1)
{
  return static DynamicTypeSize.read(from:)(a1);
}

uint64_t sub_1005E3D88()
{
  return DynamicTypeSize.write(to:)();
}

void sub_1005E3D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static Measurement<>.read(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

void sub_1005E3DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Measurement<>.write(to:)(a1, a2, a3, *(_QWORD *)(a3 - 16));
}

void NSUnitAngle.write(to:)()
{
  char v0;
  id v1;
  char v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1000CFE64();
  v1 = objc_msgSend((id)sub_1000D0744(), "degrees");
  v2 = sub_1000D1F1C((uint64_t)v1, (unint64_t *)&qword_100BF4860);
  sub_1000C4C64((uint64_t)v1);
  sub_1000DD104();
  if ((v0 & 1) != 0)
    goto LABEL_3;
  v4 = sub_1000B4A40(v3, "arcMinutes");
  sub_1000C2D48((uint64_t)v4);
  sub_1000DD104();
  v6 = sub_1000B4A40(v5, "arcSeconds");
  sub_1000C2D48((uint64_t)v6);
  sub_1000DD104();
  v8 = sub_1000B4A40(v7, "radians");
  sub_1000C2D48((uint64_t)v8);
  sub_1000DD104();
  v10 = sub_1000B4A40(v9, "gradians");
  sub_1000C2D48((uint64_t)v10);
  sub_1000DD104();
  v12 = sub_1000B4A40(v11, "revolutions");
  sub_1000C4C64((uint64_t)v12);
  sub_1000C0AE0();
  if ((v2 & 1) != 0)
  {
LABEL_3:
    sub_100098F20();
  }
  else
  {
    sub_1000C56E0();
    sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
    v14 = sub_1000BC670(v13);
    v16 = sub_1000D0A50(v14, v15);
    sub_1000C3D70(v16, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_1000C60F8();
}

void static NSUnitAngle.read(from:)(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000E726C(a1);
  if (!v1)
  {
    sub_1000C6EC8();
    if (v2 >= 6)
    {
      sub_1000C56E0();
      sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
      v6 = sub_1000BC670(v5);
      v8 = sub_1000D0A50(v6, v7);
      sub_1000C3D70(v8, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
    else
    {
      v3 = (void *)sub_1000BD598();
      v4 = sub_1000CDD4C(v3);
      sub_1000C60E4((uint64_t)v4);
    }
  }
  sub_1000C1348();
}

void sub_1005E409C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  static NSUnitAngle.read(from:)(a1);
  if (!v2)
    *a2 = v4;
  sub_1000DAAB0();
}

void sub_1005E40C0()
{
  NSUnitAngle.write(to:)();
  sub_10009ED00();
}

void NSUnitSpeed.write(to:)()
{
  void *v0;
  char v1;
  id v2;
  char v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1000CFE64();
  v2 = objc_msgSend((id)sub_1000D0744(), "metersPerSecond");
  v3 = sub_1000D1F1C((uint64_t)v2, (unint64_t *)&qword_100BCB990);
  sub_1000C4C64((uint64_t)v2);
  sub_1000DD104();
  if ((v1 & 1) != 0)
    goto LABEL_10;
  v5 = sub_1000B4A40(v4, "kilometersPerHour");
  sub_1000C2D48((uint64_t)v5);
  sub_1000DD104();
  v7 = sub_1000B4A40(v6, "milesPerHour");
  sub_1000C2D48((uint64_t)v7);
  sub_1000DD104();
  v9 = sub_1000B4A40(v8, "knots");
  sub_1000C4C64((uint64_t)v9);
  sub_1000C0AE0();
  if ((v3 & 1) != 0)
    goto LABEL_10;
  v10 = objc_msgSend(v0, "symbol");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  if (v11 == 1747938669 && v13 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, 1747938669);
  sub_1000986C4();
  if ((v15 & 1) != 0)
  {
LABEL_10:
    sub_100098F20();
    goto LABEL_11;
  }
  sub_1000C56E0();
  sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
  v17 = sub_1000BC670(v16);
  v19 = sub_1000D0A50(v17, v18);
  sub_1000C3D70(v19, enum case for BinaryDecoder.Error.valueNotSupported(_:));
  sub_1000C2294();
LABEL_11:
  sub_1000C60F8();
}

void static NSUnitSpeed.read(from:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;

  sub_1000E726C(a1);
  if (!v1)
  {
    sub_1000C6EC8();
    switch(v2)
    {
      case 0:
        v3 = objc_msgSend((id)sub_1000BD598(), "metersPerSecond");
        goto LABEL_8;
      case 1:
        v3 = objc_msgSend((id)sub_1000BD598(), "kilometersPerHour");
        goto LABEL_8;
      case 2:
        v3 = objc_msgSend((id)sub_1000BD598(), "milesPerHour");
        goto LABEL_8;
      case 3:
        v3 = objc_msgSend((id)sub_1000BD598(), "knots");
LABEL_8:
        v8 = v3;
        goto LABEL_10;
      case 4:
        v9 = objc_msgSend(objc_allocWithZone((Class)NSUnitConverterLinear), "initWithCoefficient:", 0.00000027777);
        v10 = objc_allocWithZone((Class)NSUnitSpeed);
        v8 = sub_1005E5A5C(1747938669, 0xE400000000000000, v9);
LABEL_10:
        sub_1000C60E4((uint64_t)v8);
        break;
      default:
        sub_1000C56E0();
        sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
        v5 = sub_1000BC670(v4);
        v7 = sub_1000D0A50(v5, v6);
        sub_1000C3D70(v7, enum case for BinaryDecoder.Error.valueNotSupported(_:));
        sub_1000C2294();
        break;
    }
  }
  sub_1000C1348();
}

void sub_1005E447C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  static NSUnitSpeed.read(from:)(a1);
  if (!v2)
    *a2 = v4;
  sub_1000DAAB0();
}

void sub_1005E44A0()
{
  NSUnitSpeed.write(to:)();
  sub_10009ED00();
}

void NSUnitTemperature.write(to:)()
{
  char v0;
  id v1;
  char v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000CFE64();
  v1 = objc_msgSend((id)sub_1000D0744(), "celsius");
  v2 = sub_1000D1F1C((uint64_t)v1, (unint64_t *)&qword_100BC5658);
  sub_1000C4C64((uint64_t)v1);
  sub_1000DD104();
  if ((v0 & 1) != 0
    || (v4 = sub_1000B4A40(v3, "fahrenheit"),
        sub_1000C2D48((uint64_t)v4),
        sub_1000DD104(),
        v6 = sub_1000B4A40(v5, "kelvin"),
        sub_1000C4C64((uint64_t)v6),
        sub_1000C0AE0(),
        (v2 & 1) != 0))
  {
    sub_100098F20();
  }
  else
  {
    sub_1000C56E0();
    sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
    v8 = sub_1000BC670(v7);
    v10 = sub_1000D0A50(v8, v9);
    sub_1000C3D70(v10, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_1000C60F8();
}

void static NSUnitTemperature.read(from:)(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000E726C(a1);
  if (!v1)
  {
    sub_1000C6EC8();
    if (v2 >= 3)
    {
      sub_1000C56E0();
      sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
      v6 = sub_1000BC670(v5);
      v8 = sub_1000D0A50(v6, v7);
      sub_1000C3D70(v8, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
    else
    {
      v3 = (void *)sub_1000BD598();
      v4 = sub_1000CDD4C(v3);
      sub_1000C60E4((uint64_t)v4);
    }
  }
  sub_1000C1348();
}

void sub_1005E46C8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  static NSUnitTemperature.read(from:)(a1);
  if (!v2)
    *a2 = v4;
  sub_1000DAAB0();
}

void sub_1005E46EC()
{
  NSUnitTemperature.write(to:)();
  sub_10009ED00();
}

void NSUnitLength.write(to:)()
{
  char v0;
  id v1;
  char v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  sub_1000CFE64();
  v1 = objc_msgSend((id)sub_1000D0744(), "megameters");
  v2 = sub_1000D1F1C((uint64_t)v1, (unint64_t *)&qword_100BCB0D8);
  sub_1000C4C64((uint64_t)v1);
  sub_1000DD104();
  if ((v0 & 1) != 0)
    goto LABEL_3;
  v4 = sub_1000B4A40(v3, "kilometers");
  sub_1000C2D48((uint64_t)v4);
  sub_1000DD104();
  v6 = sub_1000B4A40(v5, "hectometers");
  sub_1000C2D48((uint64_t)v6);
  sub_1000DD104();
  v8 = sub_1000B4A40(v7, "decameters");
  sub_1000C2D48((uint64_t)v8);
  sub_1000DD104();
  v10 = sub_1000B4A40(v9, "meters");
  sub_1000C2D48((uint64_t)v10);
  sub_1000DD104();
  v12 = sub_1000B4A40(v11, "decimeters");
  sub_1000C2D48((uint64_t)v12);
  sub_1000DD104();
  v14 = sub_1000B4A40(v13, "centimeters");
  sub_1000C2D48((uint64_t)v14);
  sub_1000DD104();
  v16 = sub_1000B4A40(v15, "millimeters");
  sub_1000C2D48((uint64_t)v16);
  sub_1000DD104();
  v18 = sub_1000B4A40(v17, "micrometers");
  sub_1000C2D48((uint64_t)v18);
  sub_1000DD104();
  v20 = sub_1000B4A40(v19, "nanometers");
  sub_1000C2D48((uint64_t)v20);
  sub_1000DD104();
  v22 = sub_1000B4A40(v21, "picometers");
  sub_1000C2D48((uint64_t)v22);
  sub_1000DD104();
  v24 = sub_1000B4A40(v23, "inches");
  sub_1000C2D48((uint64_t)v24);
  sub_1000DD104();
  v26 = sub_1000B4A40(v25, "feet");
  sub_1000C2D48((uint64_t)v26);
  sub_1000DD104();
  v28 = sub_1000B4A40(v27, "yards");
  sub_1000C2D48((uint64_t)v28);
  sub_1000DD104();
  v30 = sub_1000B4A40(v29, "miles");
  sub_1000C2D48((uint64_t)v30);
  sub_1000DD104();
  v32 = sub_1000B4A40(v31, "scandinavianMiles");
  sub_1000C2D48((uint64_t)v32);
  sub_1000DD104();
  v34 = sub_1000B4A40(v33, "lightyears");
  sub_1000C2D48((uint64_t)v34);
  sub_1000DD104();
  v36 = sub_1000B4A40(v35, "nauticalMiles");
  sub_1000C2D48((uint64_t)v36);
  sub_1000DD104();
  v38 = sub_1000B4A40(v37, "fathoms");
  sub_1000C2D48((uint64_t)v38);
  sub_1000DD104();
  v40 = sub_1000B4A40(v39, "furlongs");
  sub_1000C2D48((uint64_t)v40);
  sub_1000DD104();
  v42 = sub_1000B4A40(v41, "astronomicalUnits");
  sub_1000C2D48((uint64_t)v42);
  sub_1000DD104();
  v44 = sub_1000B4A40(v43, "parsecs");
  sub_1000C4C64((uint64_t)v44);
  sub_1000C0AE0();
  if ((v2 & 1) != 0)
  {
LABEL_3:
    sub_100098F20();
  }
  else
  {
    sub_1000C56E0();
    sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
    v46 = sub_1000BC670(v45);
    v48 = sub_1000D0A50(v46, v47);
    sub_1000C3D70(v48, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_1000C60F8();
}

void static NSUnitLength.read(from:)(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000E726C(a1);
  if (!v1)
  {
    sub_1000C6EC8();
    if (v2 >= 0x16)
    {
      sub_1000C56E0();
      sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
      v6 = sub_1000BC670(v5);
      v8 = sub_1000D0A50(v6, v7);
      sub_1000C3D70(v8, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
    else
    {
      v3 = (void *)sub_1000BD598();
      v4 = sub_1000CDD4C(v3);
      sub_1000C60E4((uint64_t)v4);
    }
  }
  sub_1000C1348();
}

void sub_1005E4BDC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  static NSUnitLength.read(from:)(a1);
  if (!v2)
    *a2 = v4;
  sub_1000DAAB0();
}

void sub_1005E4C00()
{
  NSUnitLength.write(to:)();
  sub_10009ED00();
}

void NSUnitPressure.write(to:)()
{
  char v0;
  id v1;
  char v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1000CFE64();
  v1 = objc_msgSend((id)sub_1000D0744(), "newtonsPerMetersSquared");
  v2 = sub_1000D1F1C((uint64_t)v1, &qword_100BCB9A8);
  sub_1000C4C64((uint64_t)v1);
  sub_1000DD104();
  if ((v0 & 1) != 0)
    goto LABEL_3;
  v4 = sub_1000B4A40(v3, "gigapascals");
  sub_1000C2D48((uint64_t)v4);
  sub_1000DD104();
  v6 = sub_1000B4A40(v5, "megapascals");
  sub_1000C2D48((uint64_t)v6);
  sub_1000DD104();
  v8 = sub_1000B4A40(v7, "kilopascals");
  sub_1000C2D48((uint64_t)v8);
  sub_1000DD104();
  v10 = sub_1000B4A40(v9, "hectopascals");
  sub_1000C2D48((uint64_t)v10);
  sub_1000DD104();
  v12 = sub_1000B4A40(v11, "inchesOfMercury");
  sub_1000C2D48((uint64_t)v12);
  sub_1000DD104();
  v14 = sub_1000B4A40(v13, "bars");
  sub_1000C2D48((uint64_t)v14);
  sub_1000DD104();
  v16 = sub_1000B4A40(v15, "millibars");
  sub_1000C2D48((uint64_t)v16);
  sub_1000DD104();
  v18 = sub_1000B4A40(v17, "millimetersOfMercury");
  sub_1000C2D48((uint64_t)v18);
  sub_1000DD104();
  v20 = sub_1000B4A40(v19, "poundsForcePerSquareInch");
  sub_1000C4C64((uint64_t)v20);
  sub_1000C0AE0();
  if ((v2 & 1) != 0)
  {
LABEL_3:
    sub_100098F20();
  }
  else
  {
    sub_1000C56E0();
    sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
    v22 = sub_1000BC670(v21);
    v24 = sub_1000D0A50(v22, v23);
    sub_1000C3D70(v24, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_1000F4100();
}

void static NSUnitPressure.read(from:)(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000E726C(a1);
  if (!v1)
  {
    sub_1000C6EC8();
    if (v2 >= 0xA)
    {
      sub_1000C56E0();
      sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
      v6 = sub_1000BC670(v5);
      v8 = sub_1000D0A50(v6, v7);
      sub_1000C3D70(v8, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
    else
    {
      v3 = (void *)sub_1000BD598();
      v4 = sub_1000CDD4C(v3);
      sub_1000C60E4((uint64_t)v4);
    }
  }
  sub_1000C1348();
}

void sub_1005E4FFC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  static NSUnitPressure.read(from:)(a1);
  if (!v2)
    *a2 = v4;
  sub_1000DAAB0();
}

void sub_1005E5020()
{
  NSUnitPressure.write(to:)();
  sub_10009ED00();
}

void NSUnitDispersion.write(to:)()
{
  uint64_t v0;
  id v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = objc_msgSend((id)objc_opt_self(NSUnitDispersion), "partsPerMillion");
  v2 = sub_1000A0794(0, &qword_100BF4D50, NSUnitDispersion_ptr);
  v3 = v0;
  v4 = v2;
  static NSObject.== infix(_:_:)(v1, v3);
  sub_1000C0AE0();
  if ((v4 & 1) != 0)
  {
    sub_100098F20();
  }
  else
  {
    sub_1000C56E0();
    sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
    v6 = sub_1000BC670(v5);
    v8 = sub_1000D0A50(v6, v7);
    sub_1000C3D70(v8, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_1000FDBD8();
}

void static NSUnitDispersion.read(from:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000E726C(a1);
  if (!v1)
  {
    sub_100094FFC();
    if (v2)
    {
      v3 = objc_msgSend((id)sub_1000BD598(), "partsPerMillion");
      sub_1000C60E4((uint64_t)v3);
    }
    else
    {
      sub_1000C56E0();
      sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
      v5 = sub_1000BC670(v4);
      v7 = sub_1000D0A50(v5, v6);
      sub_1000C3D70(v7, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_1000C1348();
}

void sub_1005E51C8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  static NSUnitDispersion.read(from:)(a1);
  if (!v2)
    *a2 = v4;
  sub_1000DAAB0();
}

void sub_1005E51EC()
{
  NSUnitDispersion.write(to:)();
  sub_10009ED00();
}

void NSUnitConcentrationMass.write(to:)()
{
  char v0;
  id v1;
  char v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000CFE64();
  v1 = objc_msgSend((id)sub_1000D0744(), "gramsPerLiter");
  v2 = sub_1000D1F1C((uint64_t)v1, &qword_100BF4D58);
  sub_1000C4C64((uint64_t)v1);
  sub_1000DD104();
  if ((v0 & 1) != 0
    || (v4 = sub_1000B4A40(v3, "milligramsPerDeciliter"),
        sub_1000C4C64((uint64_t)v4),
        sub_1000C0AE0(),
        (v2 & 1) != 0))
  {
    sub_100098F20();
  }
  else
  {
    sub_1000C56E0();
    sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
    v6 = sub_1000BC670(v5);
    v8 = sub_1000D0A50(v6, v7);
    sub_1000C3D70(v8, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_1000C60F8();
}

void static NSUnitConcentrationMass.read(from:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000E726C(a1);
  if (!v1)
  {
    sub_100094FFC();
    if (v3 || v2 == 2)
    {
      v4 = (void *)sub_1000BD598();
      v5 = sub_1000CDD4C(v4);
      sub_1000C60E4((uint64_t)v5);
    }
    else
    {
      sub_1000C56E0();
      sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
      v7 = sub_1000BC670(v6);
      v9 = sub_1000D0A50(v7, v8);
      sub_1000C3D70(v9, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_1000C1348();
}

void sub_1005E53E0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  static NSUnitConcentrationMass.read(from:)(a1);
  if (!v2)
    *a2 = v4;
  sub_1000DAAB0();
}

void sub_1005E5404()
{
  NSUnitConcentrationMass.write(to:)();
  sub_10009ED00();
}

void UIInterfaceOrientation.write(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  switch(a2)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      FixedSizeTypeBinaryCodable.write(to:)(a1);
      break;
    default:
      sub_1000C56E0();
      sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
      v3 = sub_1000BC670(v2);
      v5 = sub_1000D0A50(v3, v4);
      sub_1000C3D70(v5, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
      break;
  }
  sub_100089028();
}

void static UIInterfaceOrientation.read(from:)(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000E726C(a1);
  if (!v1)
  {
    sub_1000C6EC8();
    if (v2 >= 4u)
    {
      sub_1000C56E0();
      sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
      v4 = sub_1000BC670(v3);
      v6 = sub_1000D0A50(v4, v5);
      sub_1000C3D70(v6, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_100089028();
}

void sub_1005E55C4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  static UIInterfaceOrientation.read(from:)(a1);
  if (!v2)
    *a2 = v4;
}

void sub_1005E55EC(uint64_t a1)
{
  uint64_t *v1;

  UIInterfaceOrientation.write(to:)(a1, *v1);
}

void UIUserInterfaceSizeClass.write(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 == 1 || a2 == 2)
  {
    FixedSizeTypeBinaryCodable.write(to:)(a1);
  }
  else
  {
    sub_1000C56E0();
    sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
    v3 = sub_1000BC670(v2);
    v5 = sub_1000D0A50(v3, v4);
    sub_1000C3D70(v5, enum case for BinaryDecoder.Error.valueNotSupported(_:));
    sub_1000C2294();
  }
  sub_100089028();
}

void static UIUserInterfaceSizeClass.read(from:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000E726C(a1);
  if (!v1)
  {
    sub_100094FFC();
    if (!v3 && v2 != 2)
    {
      sub_1000C56E0();
      sub_100086DA4(&qword_100BF4CC0, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecoder.Error, (uint64_t)&protocol conformance descriptor for BinaryDecoder.Error);
      v5 = sub_1000BC670(v4);
      v7 = sub_1000D0A50(v5, v6);
      sub_1000C3D70(v7, enum case for BinaryDecoder.Error.valueNotSupported(_:));
      sub_1000C2294();
    }
  }
  sub_100089028();
}

void sub_1005E5754(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  static UIUserInterfaceSizeClass.read(from:)(a1);
  if (!v2)
    *a2 = v4;
}

void sub_1005E577C(uint64_t a1)
{
  uint64_t *v1;

  UIUserInterfaceSizeClass.write(to:)(a1, *v1);
}

double static CGSize.read(from:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v5;

  sub_1000C1780(a1);
  if (!v1)
  {
    v2 = v5;
    sub_1000C1780(a1);
  }
  return v2;
}

uint64_t CGSize.write(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = FixedSizeTypeBinaryCodable.write(to:)(a1);
  if (!v1)
    return sub_1000CF8F8();
  return result;
}

void sub_1005E5864(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;

  v4 = static CGSize.read(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
  }
}

uint64_t sub_1005E588C(uint64_t a1)
{
  return CGSize.write(to:)(a1);
}

double static CGRect.read(from:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v5;

  sub_1000C1780(a1);
  if (!v1)
  {
    v2 = v5;
    sub_1000C1780(a1);
    sub_1000C1780(a1);
    sub_1000C1780(a1);
  }
  return v2;
}

uint64_t CGRect.write(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = FixedSizeTypeBinaryCodable.write(to:)(a1);
  if (!v1)
  {
    sub_1000CF8F8();
    sub_1000CF8F8();
    return sub_1000CF8F8();
  }
  return result;
}

void sub_1005E5A14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = static CGRect.read(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
}

uint64_t sub_1005E5A40(uint64_t a1)
{
  return CGRect.write(to:)(a1);
}

id sub_1005E5A5C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v6;
  id v7;

  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v3, "initWithSymbol:converter:", v6, a3, swift_bridgeObjectRelease(a2).n128_f64[0]);

  return v7;
}

void sub_1005E5ABC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)sub_1000D0A50(a1, a2);
  v3 = sub_1000BA294(v2);
  sub_10003BC44(v3);
  sub_10004A298();
}

void sub_1005E5AE0(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[32];

  v102 = a3;
  v101 = type metadata accessor for TipPriorityQueue.GridEntry(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000986FC();
  v100 = v5;
  sub_10009D2A4();
  __chkstk_darwin(v6);
  v99 = (uint64_t)&v81 - v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  v98 = (uint64_t)&v81 - v9;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v83 = (uint64_t)&v81 - v18;
  sub_1000BA294(&qword_100BCC760);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_1000986FC();
  v97 = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  v96 = (uint64_t)&v81 - v22;
  sub_10009D2A4();
  __chkstk_darwin(v23);
  __chkstk_darwin(v24);
  v94 = v26;
  v95 = (uint64_t)&v81 - v25;
  if (a1)
  {
    v27 = v13;
    sub_1000DB83C();
    v37 = v28 + 46;
    v38 = v28 + 47;
    v39 = v28 + 48;
    v40 = v28 + 53;
    v41 = v28 + 54;
    v42 = v28 + 55;
    v43 = v28 + 56;
    v44 = (char *)(v28 + 20);
  }
  else
  {
    sub_1000DB83C();
    v37 = v28 + 46;
    v38 = v28 + 47;
    v39 = v28 + 48;
    v40 = v28 + 53;
    v41 = v28 + 54;
    v42 = v28 + 55;
    v43 = v28 + 56;
    v44 = (char *)(v28 + 20);
    v27 = v13;
  }
  v45 = *v44;
  v46 = *v28;
  v47 = *v29;
  v85 = *v30;
  v84 = *v31;
  v48 = *v32;
  v49 = *v33;
  v50 = *v34;
  v51 = *v35;
  v52 = *v36;
  v88 = *v37;
  v89 = v52;
  v53 = *v38;
  v86 = *v39;
  v87 = v53;
  v54 = *v40;
  v92 = *v41;
  v93 = v54;
  v55 = *v42;
  v90 = *v43;
  v91 = v55;
  v56 = v102 + OBJC_IVAR____TtCV7Weather22NoAqiSevereNewsContent8_Storage_map;
  sub_1000992EC(v102 + OBJC_IVAR____TtCV7Weather22NoAqiSevereNewsContent8_Storage_map, (uint64_t)v103);
  sub_10003773C(v56, v27, &qword_100BC4A98);
  v57 = sub_1000878BC();
  if (_s7Weather24LocationCompositionStateOwet_0(v27, 1, v57) == 1)
  {
    sub_100021A14(v27, &qword_100BC4A98);
    v58 = 1;
    v59 = v94;
  }
  else
  {
    v82 = v51;
    sub_10009D3BC(v27 + *(int *)(v57 + 20), (uint64_t)v16);
    sub_1000215BC(v27, type metadata accessor for LocationComponentContainerViewModel);
    v60 = v83;
    sub_10007C77C((uint64_t)v16, v83, type metadata accessor for LocationComponentViewModel);
    if ((v45 & 1) != 0)
    {
      sub_1000215BC(v60, type metadata accessor for LocationComponentViewModel);
      v58 = 1;
      v59 = v94;
    }
    else
    {
      v59 = v94;
      sub_10007C77C(v60, v94, type metadata accessor for LocationComponentViewModel);
      v58 = 0;
      v61 = (_QWORD *)(v59 + *(int *)(v101 + 20));
      *v61 = v48;
      v61[1] = v49;
      v62 = v82;
      v61[2] = v50;
      v61[3] = v62;
    }
  }
  v63 = v101;
  _s7Weather24LocationCompositionStateOwst_0(v59, v58, 1, v101);
  v64 = v95;
  sub_1002228F0(v59, v95);
  v65 = v96;
  _s7Weather24LocationCompositionStateOwst_0(v96, 1, 1, v63);
  v66 = sub_1000CD630(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast);
  v67 = v98;
  sub_100098A1C(v66, v98);
  v68 = (_QWORD *)(v67 + *(int *)(v63 + 20));
  *v68 = v46;
  v68[1] = v47;
  v69 = v84;
  v68[2] = v85;
  v68[3] = v69;
  v70 = v97;
  sub_10003773C(v64, v97, &qword_100BCC760);
  v71 = sub_1000CD630(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
  v72 = v99;
  sub_100098A1C(v71, v99);
  v73 = (_QWORD *)(v72 + *(int *)(v63 + 20));
  v74 = v88;
  *v73 = v89;
  v73[1] = v74;
  v75 = v86;
  v73[2] = v87;
  v73[3] = v75;
  v76 = sub_1000CD630(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
  v77 = v100;
  sub_100098A1C(v76, v100);
  v78 = (_QWORD *)(v77 + *(int *)(v63 + 20));
  v79 = v92;
  *v78 = v93;
  v78[1] = v79;
  v80 = v90;
  v78[2] = v91;
  v78[3] = v80;
  sub_10087CED0(v65, v67, v70, v72, v77);
  sub_100021A14(v64, &qword_100BCC760);
  sub_100098640();
}

void sub_1005E5FD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 *v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  uint64_t v43;
  uint64_t v44;
  __n128 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  __n128 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  _BYTE v107[24];

  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  v6 = v5 - v4;
  v7 = sub_1000878BC();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10009E540();
  v9 = a1;
  v10 = a1 + OBJC_IVAR____TtCV7Weather22NoAqiSevereNewsContent8_Storage_map;
  sub_1000992EC(a1 + OBJC_IVAR____TtCV7Weather22NoAqiSevereNewsContent8_Storage_map, (uint64_t)v107);
  sub_10003773C(v10, v6, &qword_100BC4A98);
  if (_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7) == 1)
  {
    sub_100021A14(v6, &qword_100BC4A98);
    v11 = sub_1000BA294(&qword_100BCC750);
    v12 = swift_allocObject(v11, 248, 7);
    *(_OWORD *)(v12 + 16) = xmmword_10098E040;
    v13 = sub_1000BA294(&qword_100BCC758);
    v14 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v15 = *(_QWORD *)(v8 + 72);
    v16 = v13;
    v17 = (__n128 *)sub_1000BA6B8(v13);
    v18 = sub_100099954(v17, (__n128)xmmword_10097CA50);
    sub_10009F7F4(a1 + OBJC_IVAR____TtCV7Weather22NoAqiSevereNewsContent8_Storage_severeAlert, (uint64_t)v18 + v14);
    *(_QWORD *)(v12 + 32) = sub_1000B4580();
    *(_QWORD *)(v12 + 40) = v19;
    *(_QWORD *)(v12 + 48) = v20;
    v21 = sub_1000BA6B8(v16);
    *(_OWORD *)(v21 + 16) = v106;
    sub_10009F7F4(a1 + OBJC_IVAR____TtCV7Weather22NoAqiSevereNewsContent8_Storage_newsArticle, v21 + v14);
    *(_QWORD *)(v12 + 56) = sub_1000B4580();
    *(_QWORD *)(v12 + 64) = v22;
    *(_QWORD *)(v12 + 72) = v23;
    v24 = (__n128 *)sub_1000BA6B8(v16);
    sub_10009D458(v24);
    sub_10009F7F4(v25 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v26);
    *(_QWORD *)(v12 + 80) = sub_1000B4580();
    *(_QWORD *)(v12 + 88) = v27;
    *(_QWORD *)(v12 + 96) = v28;
    v29 = (__n128 *)sub_1000BA6B8(v16);
    sub_10009D458(v29);
    sub_10009F7F4(v30 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v31);
    *(_QWORD *)(v12 + 104) = sub_100080C44((uint64_t)v29);
    *(_QWORD *)(v12 + 112) = v32;
    *(_QWORD *)(v12 + 120) = v33;
    v34 = (__n128 *)sub_1000C2514(v16, v14 + 2 * v15);
    v35 = (char *)sub_100099954(v34, (__n128)xmmword_10097DA20) + v14;
    v36 = *(_QWORD *)(a1 + 16);
    sub_10009F7F4(v36 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v35);
    sub_10009F7F4(v36 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 128) = sub_1000B4580();
    *(_QWORD *)(v12 + 136) = v37;
    *(_QWORD *)(v12 + 144) = v38;
    v39 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v39);
    sub_100095B78(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v35, type metadata accessor for LocationComponentContainerViewModel);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 152) = sub_1000B4580();
    *(_QWORD *)(v12 + 160) = v40;
    *(_QWORD *)(v12 + 168) = v41;
    v42 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v42);
    sub_100098A1C(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v35);
    sub_100098A1C(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 176) = sub_1000B4580();
    *(_QWORD *)(v12 + 184) = v43;
    *(_QWORD *)(v12 + 192) = v44;
    v45 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v45);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v35);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 200) = sub_1000B4580();
    *(_QWORD *)(v12 + 208) = v46;
    *(_QWORD *)(v12 + 216) = v47;
    v48 = sub_1000BA6B8(v16);
    *(_OWORD *)(v48 + 16) = v106;
    v49 = *(_QWORD *)(a1 + 16);
    sub_10009D3BC(v49 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v48 + v14);
    sub_10009D3BC(v49 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v48 + v14 + v15);
    *(_QWORD *)(v12 + 224) = sub_100080C44(v48);
    *(_QWORD *)(v12 + 232) = v50;
    *(_QWORD *)(v12 + 240) = v51;
  }
  else
  {
    sub_10007C77C(v6, v1, type metadata accessor for LocationComponentContainerViewModel);
    v52 = sub_1000BA294(&qword_100BCC750);
    v53 = swift_allocObject(v52, 272, 7);
    *(_OWORD *)(v53 + 16) = xmmword_10097FA60;
    v54 = sub_1000BA294(&qword_100BCC758);
    v55 = *(_QWORD *)(v8 + 72);
    v56 = *(unsigned __int8 *)(v8 + 80);
    v57 = (v56 + 32) & ~v56;
    v105 = v1;
    v58 = v56 | 7;
    v59 = v54;
    v60 = (__n128 *)swift_allocObject(v54, v57 + v55, v56 | 7);
    v61 = sub_100099954(v60, (__n128)xmmword_10097CA50);
    sub_1000B4590(v9 + OBJC_IVAR____TtCV7Weather22NoAqiSevereNewsContent8_Storage_severeAlert, (uint64_t)v61 + v57);
    *(_QWORD *)(v53 + 32) = sub_1000B4588();
    *(_QWORD *)(v53 + 40) = v62;
    *(_QWORD *)(v53 + 48) = v63;
    v64 = sub_1000BA5D8();
    *(_OWORD *)(v64 + 16) = v106;
    sub_1000B4590(v9 + OBJC_IVAR____TtCV7Weather22NoAqiSevereNewsContent8_Storage_newsArticle, v64 + v57);
    *(_QWORD *)(v53 + 56) = sub_1000B4588();
    *(_QWORD *)(v53 + 64) = v65;
    *(_QWORD *)(v53 + 72) = v66;
    v67 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v67);
    sub_1000B4590(v68 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v69);
    *(_QWORD *)(v53 + 80) = sub_1000B4588();
    *(_QWORD *)(v53 + 88) = v70;
    *(_QWORD *)(v53 + 96) = v71;
    v72 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v72);
    sub_1000B4590(v73 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v74);
    *(_QWORD *)(v53 + 104) = sub_1000B4588();
    *(_QWORD *)(v53 + 112) = v75;
    *(_QWORD *)(v53 + 120) = v76;
    v77 = sub_1000BA5D8();
    *(_OWORD *)(v77 + 16) = v106;
    sub_1000B4590(v1, v77 + v57);
    *(_QWORD *)(v53 + 128) = sub_1000B4580();
    *(_QWORD *)(v53 + 136) = v78;
    *(_QWORD *)(v53 + 144) = v79;
    v80 = v9;
    v81 = (__n128 *)swift_allocObject(v59, v57 + 2 * v55, v58);
    v82 = (char *)sub_100099954(v81, (__n128)xmmword_10097DA20) + v57;
    v83 = *(_QWORD *)(v80 + 16);
    v103 = v80;
    sub_1000B4590(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v82);
    v104 = v55;
    sub_1000B4590(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v82[v55]);
    *(_QWORD *)(v53 + 152) = sub_1000B4588();
    *(_QWORD *)(v53 + 160) = v84;
    *(_QWORD *)(v53 + 168) = v85;
    v86 = (__n128 *)sub_1000C2514(v59, v57 + 2 * v55);
    sub_1000C52D8(v86);
    v87 = *(_QWORD *)(v80 + 16);
    sub_1000B4590(v87 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v82);
    sub_1000B4590(v87 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v82[v55]);
    *(_QWORD *)(v53 + 176) = sub_1000B4588();
    *(_QWORD *)(v53 + 184) = v88;
    *(_QWORD *)(v53 + 192) = v89;
    v90 = v57 + 2 * v55;
    v91 = (__n128 *)sub_1000C2514(v59, v90);
    sub_1000C52D8(v91);
    v92 = *(_QWORD *)(v103 + 16);
    sub_1000B4590(v92 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v82);
    sub_100098A1C(v92 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v82[v55]);
    *(_QWORD *)(v53 + 200) = sub_1000B4588();
    *(_QWORD *)(v53 + 208) = v93;
    *(_QWORD *)(v53 + 216) = v94;
    v95 = (__n128 *)sub_1000C2514(v59, v90);
    sub_1000C52D8(v95);
    v96 = *(_QWORD *)(v103 + 16);
    sub_100095B78(v96 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v82, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v96 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v82[v55], type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v53 + 224) = sub_1000B4588();
    *(_QWORD *)(v53 + 232) = v97;
    *(_QWORD *)(v53 + 240) = v98;
    v99 = swift_allocObject(v59, v90, v58);
    *(_OWORD *)(v99 + 16) = v106;
    v100 = *(_QWORD *)(v103 + 16);
    sub_100098B48(v100 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v99 + v57);
    sub_100098B48(v100 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v99 + v57 + v104);
    *(_QWORD *)(v53 + 248) = sub_100080C44(v99);
    *(_QWORD *)(v53 + 256) = v101;
    *(_QWORD *)(v53 + 264) = v102;
    sub_1000215BC(v105, type metadata accessor for LocationComponentContainerViewModel);
  }
  sub_100098640();
}

void sub_1005E671C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = sub_1000878BC();
  sub_1000B42B0();
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v17 - v8;
  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_10009E540();
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  v15 = *(_QWORD *)(a1 + 16);
  swift_retain();
  sub_100520630();
  v18 = v16;
  swift_release(v15);
  sub_100098A1C(a1 + OBJC_IVAR____TtCV7Weather36LocationNoAqiSevereNewsConfiguration8_Storage_map, v1);
  sub_1000C661C();
  sub_100098B50();
  _s7Weather24LocationCompositionStateOwst_0(v14, 0, 1, v3);
  sub_100098A1C(a1 + OBJC_IVAR____TtCV7Weather36LocationNoAqiSevereNewsConfiguration8_Storage_newsArticle, v1);
  sub_1000C661C();
  sub_100098B50();
  sub_100098A1C(a1 + OBJC_IVAR____TtCV7Weather36LocationNoAqiSevereNewsConfiguration8_Storage_severeAlert, v1);
  sub_1000C661C();
  sub_100098B50();
  sub_1001ECB18(v18, v14, (uint64_t)v9, (uint64_t)v7);
  sub_100098640();
}

uint64_t sub_1005E68A0()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1 != (id)1 || (DeviceIsSlow() & 1) != 0)
    return 0;
  type metadata accessor for MapsExperiments(0);
  return static MapsExperiments.isPinnedMapEnabledOnIpad.getter() & 1;
}

uint64_t sub_1005E691C(uint64_t a1)
{
  return sub_1000BB1E8(a1, (unsigned int *)&enum case for FeatureState.default(_:), 32, 0x8000000100A0D9D0, &qword_100CAEE68);
}

uint64_t sub_1005E6944(uint64_t a1)
{
  return sub_1000BB1E8(a1, &enum case for FeatureState.enabled(_:), 29, 0x8000000100A0D9B0, &qword_100CAEE70);
}

uint64_t sub_1005E696C()
{
  char v0;
  uint64_t result;
  char v2;
  _QWORD v3[5];

  type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter();
  if (qword_100BC22D0 != -1)
    swift_once(&qword_100BC22D0, sub_1005E6944);
  SettingReader.isEnabled(_:with:)(qword_100CAEE70, 2);
  result = sub_1000BC684();
  if ((v0 & 1) != 0)
  {
    v3[3] = &type metadata for UIKitFlags;
    v3[4] = sub_1005E6B3C();
    v2 = isFeatureEnabled(_:)(v3);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v3);
  }
  else
  {
    v2 = 0;
  }
  byte_100CAEE78 = v2 & 1;
  return result;
}

uint64_t sub_1005E6A1C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t *v18;

  v18 = a5;
  v8 = type metadata accessor for Access(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FeatureState(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BE94D0);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *a2, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Access.protected(_:), v8);
  result = Setting<>.init(_:defaultValue:access:)(a3, a4, v15, v11);
  *v18 = result;
  return result;
}

unint64_t sub_1005E6B3C()
{
  unint64_t result;

  result = qword_100BF5718;
  if (!qword_100BF5718)
  {
    result = swift_getWitnessTable(&unk_1009B63C8, &type metadata for UIKitFlags);
    atomic_store(result, (unint64_t *)&qword_100BF5718);
  }
  return result;
}

const char *sub_1005E6B78()
{
  return "UIKit";
}

const char *sub_1005E6B8C()
{
  return "uip_fluid_transitions";
}

const char *sub_1005E6BA8()
{
  return "AppleAccount";
}

const char *sub_1005E6BBC()
{
  return "AABranding";
}

ValueMetadata *type metadata accessor for UIKitFlags()
{
  return &type metadata for UIKitFlags;
}

unint64_t sub_1005E6BE8()
{
  unint64_t result;

  result = qword_100BF5720;
  if (!qword_100BF5720)
  {
    result = swift_getWitnessTable(&unk_1009B63A0, &type metadata for UIKitFlags);
    atomic_store(result, (unint64_t *)&qword_100BF5720);
  }
  return result;
}

uint64_t _s7Weather10UIKitFlagsOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1005E6C64 + 4 * byte_1009B6340[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1005E6C84 + 4 * byte_1009B6345[v4]))();
}

_BYTE *sub_1005E6C64(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1005E6C84(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1005E6C8C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1005E6C94(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1005E6C9C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1005E6CA4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AppleAccountFlags()
{
  return &type metadata for AppleAccountFlags;
}

unint64_t sub_1005E6CC4()
{
  unint64_t result;

  result = qword_100BF5728;
  if (!qword_100BF5728)
  {
    result = swift_getWitnessTable(&unk_1009B6454, &type metadata for AppleAccountFlags);
    atomic_store(result, (unint64_t *)&qword_100BF5728);
  }
  return result;
}

uint64_t *sub_1005E6D00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
    {
      v11 = sub_1000BA294(&qword_100BD4280);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t sub_1005E6DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for URL(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

_QWORD *sub_1005E6E6C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000BA294(&qword_100BD4280);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  }
  return a1;
}

_QWORD *sub_1005E6F38(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = sub_1000BA294(&qword_100BD4280);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  return a1;
}

_OWORD *sub_1005E7074(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for URL(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v8))
  {
    v9 = sub_1000BA294(&qword_100BD4280);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *sub_1005E7120(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v11);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11);
  if (!v12)
  {
    v14 = *(_QWORD *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v15 = sub_1000BA294(&qword_100BD4280);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
  return a1;
}

uint64_t sub_1005E723C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005E7248);
}

uint64_t sub_1005E7248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BD4280);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1005E72C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005E72CC);
}

uint64_t sub_1005E72CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BD4280);
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1005E733C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x4C52556F676F6CLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4C52556F676F6CLL, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1005E7460(char a1)
{
  if (!a1)
    return 25705;
  if (a1 == 1)
    return 1701667182;
  return 0x4C52556F676F6CLL;
}

uint64_t sub_1005E74A4()
{
  char *v0;

  return sub_1005E7460(*v0);
}

uint64_t sub_1005E74AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1005E733C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005E74D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005E7BB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005E74F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005E7BB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1005E7520()
{
  sub_1006B23C0();
}

void sub_1005E7534(uint64_t a1)
{
  sub_1006B24B0(a1);
}

uint64_t sub_1005E7548(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = sub_1000BA294(&qword_100BF5870);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1005E7BB8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NewsChannel.CodingKeys, &type metadata for NewsChannel.CodingKeys, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  v23 = 0;
  sub_1000BC254(v13, v14, (uint64_t)&v23);
  if (!v2)
  {
    v15 = v3[2];
    v16 = v3[3];
    v22 = 1;
    sub_1000BC254(v15, v16, (uint64_t)&v22);
    v17 = (char *)v3 + *(int *)(type metadata accessor for NewsChannel(0) + 24);
    v21 = 2;
    v18 = type metadata accessor for URL(0);
    v19 = sub_1005E7C74(&qword_100BCA0B8, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, &v21, v5, v18, v19);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void sub_1005E769C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = v6 - v5;
  v20 = sub_1000BA294(&qword_100BF5860);
  __chkstk_darwin(v20);
  sub_100098728();
  v8 = type metadata accessor for NewsChannel(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = (uint64_t *)(v11 - v10);
  v13 = a1[3];
  v14 = a1[4];
  sub_1000DB418(a1, v13);
  v15 = sub_1005E7BB8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NewsChannel.CodingKeys, &type metadata for NewsChannel.CodingKeys, v15, v13, v14);
  if (v2)
  {
    sub_1000CC7B4();
  }
  else
  {
    v23 = 0;
    *v12 = sub_1000C4C6C((uint64_t)&v23);
    v12[1] = v16;
    v22 = 1;
    v12[2] = sub_1000C4C6C((uint64_t)&v22);
    v12[3] = v17;
    v18 = type metadata accessor for URL(0);
    v21 = 2;
    sub_1005E7C74(&qword_100BCA1E8, (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, &v21, v20, v18);
    sub_1000BC690();
    sub_10015BBC0(v7, (uint64_t)v12 + *(int *)(v8 + 24));
    sub_1005E7BF4((uint64_t)v12, a2);
    sub_1000CC7B4();
    sub_1005E7C38((uint64_t)v12);
  }
}

BOOL sub_1005E78B4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  _BOOL8 result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = v7 - v6;
  v9 = sub_1000BA294(&qword_100BCCFF0);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v41 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v41 - v21;
  v23 = a1[1];
  v24 = a2[1];
  v25 = *a1 == *a2 && v23 == v24;
  if (v25 || (v26 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v23, *a2, v24, 0), result = 0, (v26 & 1) != 0))
  {
    v28 = a1[2];
    v29 = a1[3];
    v30 = a2[2];
    v31 = a2[3];
    v32 = v28 == v30 && v29 == v31;
    if (v32
      || (v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v30, v31, 0), result = 0, (v33 & 1) != 0))
    {
      v42 = v5;
      v34 = type metadata accessor for NewsChannel(0);
      sub_100038D20((uint64_t)a1 + *(int *)(v34 + 24), (uint64_t)v22);
      sub_100038D20((uint64_t)a2 + *(int *)(v34 + 24), (uint64_t)v20);
      v35 = v13 + *(int *)(v9 + 48);
      sub_100038D20((uint64_t)v22, v13);
      sub_100038D20((uint64_t)v20, v35);
      sub_100098750(v13);
      if (v25)
      {
        sub_1000BBB54((uint64_t)v20);
        sub_1000BBB54((uint64_t)v22);
        sub_100098750(v35);
        if (v25)
        {
          sub_100021A68(v13, &qword_100BD4280);
          return 1;
        }
      }
      else
      {
        sub_100038D20(v13, (uint64_t)v17);
        sub_100098750(v35);
        if (!v36)
        {
          v37 = v42;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v8, v35, v4);
          v38 = sub_1005E7C74(qword_100BCCE60, (uint64_t)&protocol conformance descriptor for URL);
          v39 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v8, v4, v38);
          v40 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
          v40(v8, v4);
          sub_1000BBB54((uint64_t)v20);
          sub_1000BBB54((uint64_t)v22);
          v40((uint64_t)v17, v4);
          sub_1000BBB54(v13);
          return (v39 & 1) != 0;
        }
        sub_1000BBB54((uint64_t)v20);
        sub_1000BBB54((uint64_t)v22);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v4);
      }
      sub_100021A68(v13, &qword_100BCCFF0);
      return 0;
    }
  }
  return result;
}

void sub_1005E7B8C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1005E769C(a1, a2);
}

uint64_t sub_1005E7BA0(_QWORD *a1)
{
  return sub_1005E7548(a1);
}

unint64_t sub_1005E7BB8()
{
  unint64_t result;

  result = qword_100BF5868;
  if (!qword_100BF5868)
  {
    result = swift_getWitnessTable(&unk_1009B6694, &type metadata for NewsChannel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5868);
  }
  return result;
}

uint64_t sub_1005E7BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NewsChannel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005E7C38(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NewsChannel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1005E7C74(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NewsChannel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1005E7D00 + 4 * byte_1009B64DD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1005E7D34 + 4 * byte_1009B64D8[v4]))();
}

uint64_t sub_1005E7D34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E7D3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005E7D44);
  return result;
}

uint64_t sub_1005E7D50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005E7D58);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1005E7D5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E7D64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NewsChannel.CodingKeys()
{
  return &type metadata for NewsChannel.CodingKeys;
}

unint64_t sub_1005E7D84()
{
  unint64_t result;

  result = qword_100BF5878;
  if (!qword_100BF5878)
  {
    result = swift_getWitnessTable(&unk_1009B666C, &type metadata for NewsChannel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5878);
  }
  return result;
}

unint64_t sub_1005E7DC4()
{
  unint64_t result;

  result = qword_100BF5880;
  if (!qword_100BF5880)
  {
    result = swift_getWitnessTable(&unk_1009B65DC, &type metadata for NewsChannel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5880);
  }
  return result;
}

unint64_t sub_1005E7E04()
{
  unint64_t result;

  result = qword_100BF5888;
  if (!qword_100BF5888)
  {
    result = swift_getWitnessTable(&unk_1009B6604, &type metadata for NewsChannel.CodingKeys);
    atomic_store(result, &qword_100BF5888);
  }
  return result;
}

ValueMetadata *type metadata accessor for SunriseSunsetMonthlyViewModelFactory()
{
  return &type metadata for SunriseSunsetMonthlyViewModelFactory;
}

void sub_1005E7E50(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v2 = *(_QWORD *)(sub_1000BA294(&qword_100BCF320) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10021A570();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_1005EA284(v6);
  *a1 = v3;
}

uint64_t sub_1005E7ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v5 = sub_1000BA294(&qword_100BCF320);
  v4[8] = v5;
  v4[9] = *(_QWORD *)(v5 - 8);
  v4[10] = sub_1000BA410();
  v4[11] = sub_1000BA410();
  v6 = type metadata accessor for WeatherDescription(0);
  v4[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[13] = v7;
  v4[14] = sub_1000BA400(v7);
  v8 = type metadata accessor for EdgeSunEvents(0);
  v4[15] = v8;
  v4[16] = sub_1000BA400(*(_QWORD *)(v8 - 8));
  v9 = type metadata accessor for MaxDaylight(0);
  v4[17] = v9;
  v4[18] = sub_1000BA400(*(_QWORD *)(v9 - 8));
  v10 = type metadata accessor for DaylightData(0);
  v4[19] = v10;
  v4[20] = sub_1000BA400(*(_QWORD *)(v10 - 8));
  v11 = sub_100098778();
  v4[21] = v11;
  v4[22] = *(_QWORD *)(v11 - 8);
  v4[23] = sub_1000BA410();
  v4[24] = sub_1000BA410();
  v4[25] = sub_1000BA410();
  v4[26] = sub_1000BA410();
  v4[27] = sub_1000BA410();
  v4[28] = sub_1000BA410();
  v4[29] = sub_1000BA410();
  v4[30] = sub_1000BA410();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  v4[31] = sub_1000BA410();
  v4[32] = sub_1000BA410();
  v4[33] = sub_1000BA410();
  v4[34] = sub_1000BA410();
  v4[35] = sub_1000BA410();
  v12 = type metadata accessor for DateComponents(0);
  v4[36] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[37] = v13;
  v4[38] = sub_1000BA400(v13);
  v14 = type metadata accessor for Calendar(0);
  v4[39] = v14;
  v4[40] = *(_QWORD *)(v14 - 8);
  v4[41] = sub_1000BA410();
  v4[42] = sub_1000BA410();
  v15 = sub_100099928();
  v4[43] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[44] = v16;
  v4[45] = sub_1000BA400(v16);
  return sub_1000BA3F4();
}

void sub_1005E80A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD, _QWORD, _QWORD);
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(_QWORD, _QWORD, _QWORD);
  double v79;
  double v80;
  void *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(_QWORD, _QWORD, _QWORD);
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void (*v127)(_QWORD, _QWORD);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  uint64_t v138;
  os_log_type_t v139;
  uint8_t *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = type metadata accessor for SunriseSunsetProportionCalculator();
  v7 = swift_allocObject(v6, 16, 7);
  *(_QWORD *)(v0 + 368) = v7;
  Location.timeZone.getter(v7);
  static Calendar.currentCalendar(with:)(v1);
  sub_1009558FC(v1);
  Calendar.date(from:)(v2, v8);
  sub_100037768(v3, v4, (uint64_t *)&unk_100BD35A0);
  v9 = _s7Weather24LocationCompositionStateOwet_0(v4, 1, v5);
  v255 = v7;
  if ((_DWORD)v9 == 1)
  {
    sub_100021A14(*(_QWORD *)(v0 + 264), (uint64_t *)&unk_100BD35A0);
    v10 = 1;
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 320);
    v12 = *(_QWORD *)(v0 + 328);
    v13 = *(_QWORD *)(v0 + 312);
    v14 = *(_QWORD *)(v0 + 264);
    v15 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 176);
    static Calendar.current.getter(v9);
    Date.wc_addDays(_:calendar:)(1, v12);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    v10 = 0;
  }
  v17 = *(_QWORD *)(v0 + 360);
  v18 = *(_QWORD *)(v0 + 280);
  v19 = *(_QWORD *)(v0 + 256);
  v20 = *(_QWORD *)(v0 + 168);
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v0 + 272), v10, 1, v20);
  sub_1000B375C();
  v21 = static NSDateFormatter.shortMonthNameFormatter(with:)(v17);
  *(_QWORD *)(v0 + 376) = v21;
  v249 = (void *)static NSDateFormatter.longMonthNameFormatter(with:)(v17);
  *(_QWORD *)(v0 + 384) = v249;
  sub_100037768(v18, v19, (uint64_t *)&unk_100BD35A0);
  v253 = (void *)v21;
  if (_s7Weather24LocationCompositionStateOwet_0(v19, 1, v20) == 1)
  {
    v22 = (uint64_t *)(v0 + 256);
LABEL_8:
    sub_100021A14(*v22, (uint64_t *)&unk_100BD35A0);
    if (qword_100BC2450 != -1)
      swift_once(&qword_100BC2450, sub_1006F3844);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_1000AECD4(v27, (uint64_t)qword_100CAF0E8);
    v29 = Logger.logObject.getter(v28);
    v31 = static os_log_type_t.error.getter(v29, v30);
    if (os_log_type_enabled(v29, v31))
    {
      v32 = (uint8_t *)sub_100098710(2);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v31, "Failed to generate midnight", v32, 2u);
      sub_1000986F0((uint64_t)v32);
    }
    sub_1000C610C();
    v34 = *(_QWORD *)(v0 + 296);
    v33 = *(_QWORD *)(v0 + 304);
    v35 = *(_QWORD *)(v0 + 280);
    v36 = *(_QWORD *)(v0 + 288);
    v37 = *(_QWORD *)(v0 + 272);
    v38 = *(void **)(v0 + 112);
    v208 = *(_QWORD *)(v0 + 104);
    v215 = *(_QWORD *)(v0 + 96);
    v224 = v39;
    v40 = *(_QWORD **)(v0 + 32);

    sub_1000C1B4C();
    swift_release(v255);
    sub_1000CDF8C(v41, v42, v43, v44, v45, v46, v47, v48, v178, v184, v190, v196, v202, v208, v215, v224, v233, v241, v249);
    sub_1000EB06C(v49, v50, v51, v52, v53, v54, v55, v56, v179, v185, v191, v197, v203, v209, v216, v225, v234, v242, v250,
      v253);
    v57 = &unk_100BD35A0;
    sub_100021A14(v37, (uint64_t *)&unk_100BD35A0);
    sub_100021A14(v35, (uint64_t *)&unk_100BD35A0);
    v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v36);
    sub_1000C6ED4(v58, v59, v60, v61, v62, v63, v64, v65, v180, v186, v192, v198, v204);
    *v40 = _swiftEmptyArrayStorage;
    v66 = (char *)v40 + *(int *)(sub_1000C22B4() + 20);
    (*(void (**)(char *, void *, uint64_t))(v210 + 32))(v66, v38, v217);
LABEL_33:
    (*(void (**)(uint64_t, uint64_t))(v226 + 8))(v243, v235);
    v175 = sub_1000DDD00();
    v183 = v177;
    v189 = v176;
    v195 = *(_QWORD *)(v0 + 216);
    v201 = *(_QWORD *)(v0 + 208);
    v207 = *(_QWORD *)(v0 + 200);
    v214 = *(_QWORD *)(v0 + 192);
    v223 = *(_QWORD *)(v0 + 184);
    v232 = *(_QWORD *)(v0 + 160);
    v240 = *(_QWORD *)(v0 + 144);
    v248 = *(_QWORD *)(v0 + 128);
    v252 = *(_QWORD *)(v0 + 112);
    v254 = *(_QWORD *)(v0 + 88);
    v256 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(v175);
    sub_1000992D4();
    sub_1000CFFF0();
    sub_1000D0544();
    swift_task_dealloc(v38);
    swift_task_dealloc(v57);
    sub_1000DC684();
    sub_1000DAE14();
    sub_1000B30A8();
    sub_1000992CC();
    swift_task_dealloc(v183);
    swift_task_dealloc(v189);
    swift_task_dealloc(v195);
    swift_task_dealloc(v201);
    swift_task_dealloc(v207);
    swift_task_dealloc(v214);
    swift_task_dealloc(v223);
    swift_task_dealloc(v232);
    swift_task_dealloc(v240);
    swift_task_dealloc(v248);
    swift_task_dealloc(v252);
    swift_task_dealloc(v254);
    swift_task_dealloc(v256);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v22 = (uint64_t *)(v0 + 248);
  v23 = *(_QWORD *)(v0 + 248);
  v24 = *(_QWORD *)(v0 + 272);
  v25 = *(_QWORD *)(v0 + 168);
  v26 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 32);
  sub_1000D1388(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 256));
  sub_100037768(v24, v23, (uint64_t *)&unk_100BD35A0);
  if (_s7Weather24LocationCompositionStateOwet_0(v23, 1, v25) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 168));
    goto LABEL_8;
  }
  v67 = *(uint64_t **)(v0 + 160);
  v68 = *(_QWORD *)(v0 + 48);
  v69 = *(_QWORD *)(v0 + 56);
  v70 = *(_QWORD *)(v0 + 40);
  v26(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 168));
  sub_1000DB418((_QWORD *)(v69 + 40), *(_QWORD *)(v69 + 64));
  sub_10077F574(v70, v68, v67);
  *(_QWORD *)(v0 + 392) = 0;
  v71 = *(_QWORD *)(v0 + 144);
  sub_100080C0C(*(_QWORD *)(v0 + 160) + *(int *)(*(_QWORD *)(v0 + 152) + 20), v71, type metadata accessor for MaxDaylight);
  if (swift_getEnumCaseMultiPayload(v71) != 1)
  {
    v95 = *(_QWORD *)(v0 + 216);
    v228 = *(_QWORD *)(v0 + 208);
    v237 = *(_QWORD *)(v0 + 200);
    v245 = *(_QWORD *)(v0 + 336);
    v96 = *(_QWORD *)(v0 + 144);
    v97 = *(_QWORD *)(v0 + 128);
    v98 = (int *)sub_1000BA294(&qword_100BF58B8);
    v99 = v96 + v98[12];
    v100 = v96 + v98[16];
    v218 = v96 + v98[20];
    sub_10009E64C(v95, v96);
    sub_10009E64C(v228, v99);
    sub_10009E64C(v237, v100);
    sub_10007802C(v218, v97, type metadata accessor for EdgeSunEvents);
    v101 = Date.secondsSinceMidnight(calendar:)(v245);
    v102 = Date.secondsSinceMidnight(calendar:)(v245);
    v103 = v101 - v102;
    if (!__OFSUB__(v101, v102))
    {
      v104 = *(_QWORD *)(v0 + 360);
      v75 = *(_QWORD *)(v0 + 216);
      v105 = *(_QWORD *)(v0 + 208);
      v106 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 16);
      v106(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 168));
      v107 = Date.timeIntervalSince(_:)(v105);
      v108 = Date.formattedShortMonthAndDay(timeZone:)(v104);
      v90 = v109;
      v244 = sub_1004DB80C(v107);
      if (v110)
      {
        v75 = v110;
        v111 = *(_QWORD *)(v0 + 208);
        v238 = *(_QWORD *)(v0 + 216);
        v112 = v108;
        v113 = *(_QWORD *)(v0 + 200);
        v114 = *(_QWORD *)(v0 + 176);
        sub_1000215BC(*(_QWORD *)(v0 + 128), type metadata accessor for EdgeSunEvents);
        v93 = *(_QWORD *)(v114 + 8);
        sub_10009C92C(v113);
        v115 = v111;
        v91 = v103;
        v89 = v112;
        v78 = v106;
        sub_10009C92C(v115);
        v94 = v238;
        goto LABEL_23;
      }
      v122 = *(_QWORD *)(v0 + 224);
      v229 = *(_QWORD *)(v0 + 216);
      v236 = *(_QWORD *)(v0 + 232);
      v123 = *(_QWORD *)(v0 + 200);
      v219 = *(_QWORD *)(v0 + 208);
      v124 = *(_QWORD *)(v0 + 176);
      v246 = *(_QWORD *)(v0 + 160);
      v125 = *(_QWORD *)(v0 + 128);
      sub_1000986C4();
      v126 = sub_1005EA160();
      sub_10009D46C((uint64_t)&type metadata for SunriseSunsetMonthlyViewModelFactory.FactoryError, v126);
      sub_1000D0DD8();
      sub_1000215BC(v125, type metadata accessor for EdgeSunEvents);
      v127 = *(void (**)(_QWORD, _QWORD))(v124 + 8);
      sub_1000C4C7C(v123);
      sub_1000C4C7C(v219);
      sub_1000C4C7C(v229);
      sub_1000C4C7C(v236);
      sub_1000C4C7C(v122);
      v128 = v246;
LABEL_27:
      sub_1000215BC(v128, type metadata accessor for DaylightData);
      v127(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 168));
      if (qword_100BC2450 != -1)
        swift_once(&qword_100BC2450, sub_1006F3844);
      v135 = type metadata accessor for Logger(0);
      sub_1000AECD4(v135, (uint64_t)qword_100CAF0E8);
      sub_1001099E0();
      v136 = sub_1001099E0();
      v137 = Logger.logObject.getter(v136);
      v139 = static os_log_type_t.error.getter(v137, v138);
      if (os_log_type_enabled(v137, v139))
      {
        v140 = (uint8_t *)sub_100098710(12);
        v141 = (_QWORD *)sub_100098710(8);
        *(_DWORD *)v140 = 138412290;
        sub_1001099E0();
        v142 = _swift_stdlib_bridgeErrorToNSError(v75);
        *(_QWORD *)(v0 + 16) = v142;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
        *v141 = v142;
        sub_100098F38();
        sub_100098F38();
        _os_log_impl((void *)&_mh_execute_header, v137, v139, "Failed to generate SunriseSunsetMonthlyViewModel error:%@", v140, 0xCu);
        sub_1000BA294(&qword_100C0B820);
        swift_arrayDestroy(v141, 1);
        sub_1000986F0((uint64_t)v141);
        sub_1000986F0((uint64_t)v140);
      }
      else
      {
        sub_100098F38();
        sub_100098F38();
      }

      sub_1000C610C();
      v143 = *(_QWORD *)(v0 + 296);
      v144 = *(_QWORD *)(v0 + 304);
      v145 = *(_QWORD *)(v0 + 280);
      v146 = *(_QWORD *)(v0 + 288);
      v147 = *(_QWORD *)(v0 + 272);
      v57 = *(void **)(v0 + 112);
      v211 = *(_QWORD *)(v0 + 104);
      v220 = *(_QWORD *)(v0 + 96);
      v230 = v148;
      v149 = *(_QWORD **)(v0 + 32);
      sub_1000C1B4C();
      swift_release(v255);
      sub_1000CDF8C(v150, v151, v152, v153, v154, v155, v156, v157, v178, v184, v190, v196, v202, v211, v220, v230, v236, v246, v249);
      sub_1000EB06C(v158, v159, v160, v161, v162, v163, v164, v165, v181, v187, v193, v199, v205, v212, v221, v231, v239, v247, v251,
        v253);
      sub_100098F38();
      v38 = &unk_100BD35A0;
      sub_100021A14(v147, (uint64_t *)&unk_100BD35A0);
      sub_100021A14(v145, (uint64_t *)&unk_100BD35A0);
      v166 = (*(uint64_t (**)(uint64_t, uint64_t))(v143 + 8))(v144, v146);
      sub_1000C6ED4(v166, v167, v168, v169, v170, v171, v172, v173, v182, v188, v194, v200, v206);
      *v149 = _swiftEmptyArrayStorage;
      v174 = (char *)v149 + *(int *)(sub_1000C22B4() + 20);
      (*(void (**)(char *, void *, uint64_t))(v213 + 32))(v174, v57, v222);
      goto LABEL_33;
    }
    goto LABEL_36;
  }
  v72 = *(_QWORD *)(v0 + 240);
  v236 = *(_QWORD *)(v0 + 224);
  v73 = *(_QWORD *)(v0 + 192);
  v227 = *(_QWORD *)(v0 + 184);
  v75 = *(_QWORD *)(v0 + 168);
  v74 = *(_QWORD *)(v0 + 176);
  v76 = *(_QWORD *)(v0 + 144);
  v77 = v76 + *(int *)(sub_1000BA294(&qword_100BF5898) + 48);
  sub_1000D1388(v73, v76);
  sub_1000D1388(v227, v77);
  v78 = *(void (**)(_QWORD, _QWORD, _QWORD))(v74 + 16);
  sub_1000D1388(v236, v72);
  v79 = Date.timeIntervalSince(_:)(v72);
  if ((~*(_QWORD *)&v79 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v79 <= -9.22337204e18)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v79 < 9.22337204e18)
  {
    v80 = Date.timeIntervalSince(_:)(*(_QWORD *)(v0 + 240));
    v81 = (void *)static NSDateFormatter.timeDurationWithZeroPaddingFormatter.getter();
    v82 = objc_msgSend(v81, "stringFromTimeInterval:", v80);

    if (v82)
    {
      v83 = *(_QWORD *)(v0 + 360);
      v85 = *(_QWORD *)(v0 + 184);
      v84 = *(_QWORD *)(v0 + 192);
      v244 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
      v75 = v86;

      v87 = static Date.formattedShortMonthAndDayRange(date1:date2:timeZone:)(v84, v85, v83);
      if (v88)
      {
        v89 = v87;
        v90 = v88;
        v91 = (uint64_t)v79;
        v92 = *(_QWORD *)(v0 + 192);
        v93 = *(_QWORD *)(*(_QWORD *)(v0 + 176) + 8);
        sub_10009C92C(*(_QWORD *)(v0 + 184));
        v94 = v92;
LABEL_23:
        sub_10009C92C(v94);
        *(_QWORD *)(v0 + 432) = v89;
        *(_QWORD *)(v0 + 440) = v90;
        *(_QWORD *)(v0 + 416) = v244;
        *(_QWORD *)(v0 + 424) = v75;
        *(_QWORD *)(v0 + 400) = v93;
        *(_QWORD *)(v0 + 408) = v78;
        v116 = *(_QWORD *)(v0 + 360);
        v117 = *(_QWORD *)(v0 + 240);
        v118 = *(_QWORD *)(v0 + 224);
        v119 = *(_QWORD *)(v0 + 160);
        sub_1005DBD00();
        *(_QWORD *)(v0 + 24) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
        sub_1000BA294(&qword_100BC5360);
        v120 = (_QWORD *)swift_task_alloc(96);
        *(_QWORD *)(v0 + 448) = v120;
        v120[2] = v119;
        v120[3] = v255;
        v120[4] = v116;
        v120[5] = v91;
        v120[6] = v118;
        v120[7] = v249;
        v120[8] = v253;
        v120[9] = v117;
        v120[10] = v0 + 24;
        v121 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
        *(_QWORD *)(v0 + 456) = v121;
        *v121 = v0;
        v121[1] = sub_1005E8BD8;
        sub_1000C3D88();
        withTaskGroup<A, B>(of:returning:isolation:body:)();
        return;
      }
      swift_bridgeObjectRelease();
    }
    v129 = *(_QWORD *)(v0 + 232);
    v246 = *(_QWORD *)(v0 + 224);
    v131 = *(_QWORD *)(v0 + 184);
    v130 = *(_QWORD *)(v0 + 192);
    v132 = *(_QWORD *)(v0 + 176);
    v133 = *(_QWORD *)(v0 + 160);
    v134 = sub_1005EA160();
    sub_10009D46C((uint64_t)&type metadata for SunriseSunsetMonthlyViewModelFactory.FactoryError, v134);
    sub_1000D0DD8();
    v127 = *(void (**)(_QWORD, _QWORD))(v132 + 8);
    sub_1000C4C7C(v131);
    sub_1000C4C7C(v130);
    sub_1000C4C7C(v129);
    sub_1000C4C7C(v246);
    v128 = v133;
    goto LABEL_27;
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_1005E8BD8()
{
  uint64_t v0;

  sub_1000B43D4();
  sub_10009E3B0(*(_QWORD *)(v0 + 456));
  sub_1000B30A8();
  return sub_1000BA3F4();
}

void sub_1005E8C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  id v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  double (*v43)(void);
  uint64_t *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, __n128);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  Swift::String v132;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 392);
  swift_bridgeObjectRetain_n(v1, 2);
  v3 = sub_1006ED044(v1);
  sub_1000986C4();
  v131 = v3;
  sub_1005E7E50(&v131);
  if (v2)
  {
    swift_release(v131);
  }
  else
  {
    sub_1000986C4();
    v4 = v131;
    v5 = v131[2];
    if (v5)
    {
      v6 = *(_QWORD *)(v0 + 72);
      v112 = *(_QWORD *)(v0 + 64);
      v131 = _swiftEmptyArrayStorage;
      sub_100605C60(0, v5, 0);
      v7 = (uint64_t)v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      v106 = v4;
      v109 = *(_QWORD *)(v6 + 72);
      v115 = v0;
      do
      {
        v128 = v5;
        v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
        v116 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 400);
        v9 = *(_QWORD *)(v0 + 168);
        v11 = *(_QWORD *)(v0 + 80);
        v10 = *(_QWORD *)(v0 + 88);
        sub_100037768(v7, v10, &qword_100BCF320);
        v12 = *(int *)(v112 + 48);
        v13 = (_QWORD *)(v11 + v12);
        v14 = (uint64_t *)(v10 + v12);
        v8(v11, v10, v9);
        v15 = v14[1];
        v16 = v14[2];
        v17 = v14[3];
        v18 = v14[4];
        v19 = v14[5];
        v20 = v14[6];
        v21 = v14[7];
        v22 = v14[8];
        v23 = v14[9];
        v24 = *v14;
        *v13 = v24;
        v13[1] = v15;
        v122 = v18;
        v125 = v16;
        v13[2] = v16;
        v13[3] = v17;
        v13[4] = v18;
        v13[5] = v19;
        v119 = v20;
        v13[6] = v20;
        v13[7] = v21;
        v13[8] = v22;
        v13[9] = v23;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v19);
        v25 = swift_bridgeObjectRetain(v21);
        v116(v11, v9, v25);
        sub_100021A14(v10, &qword_100BCF320);
        v26 = v131;
        if ((swift_isUniquelyReferenced_nonNull_native(v131) & 1) == 0)
        {
          sub_100605C60(0, v26[2] + 1, 1);
          v26 = v131;
        }
        v28 = v26[2];
        v27 = v26[3];
        if (v28 >= v27 >> 1)
        {
          sub_100605C60((char *)(v27 > 1), v28 + 1, 1);
          v26 = v131;
        }
        v26[2] = v28 + 1;
        v29 = &v26[10 * v28];
        v29[4] = v24;
        v29[5] = v15;
        v29[6] = v125;
        v29[7] = v17;
        v29[8] = v122;
        v29[9] = v19;
        v29[10] = v119;
        v29[11] = v21;
        v29[12] = v22;
        v29[13] = v23;
        v7 += v109;
        v5 = v128 - 1;
        v0 = v115;
      }
      while (v128 != 1);
      swift_release(v106);
    }
    else
    {
      swift_release(v131);
      v26 = _swiftEmptyArrayStorage;
    }
    v77 = *(_QWORD *)(v0 + 432);
    v79 = *(_QWORD *)(v0 + 440);
    v75 = *(_QWORD *)(v0 + 424);
    v71 = *(_QWORD *)(v0 + 416);
    v93 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
    v89 = *(void **)(v0 + 384);
    v91 = *(void **)(v0 + 376);
    v84 = *(_QWORD *)(v0 + 368);
    v123 = *(_QWORD *)(v0 + 352);
    v126 = *(_QWORD *)(v0 + 344);
    v129 = *(_QWORD *)(v0 + 360);
    v104 = *(_QWORD *)(v0 + 312);
    v107 = *(_QWORD *)(v0 + 336);
    v98 = *(_QWORD *)(v0 + 304);
    v100 = *(_QWORD *)(v0 + 320);
    v95 = *(_QWORD *)(v0 + 296);
    v96 = *(_QWORD *)(v0 + 288);
    v92 = *(_QWORD *)(v0 + 280);
    v86 = *(_QWORD *)(v0 + 272);
    v120 = *(_QWORD *)(v0 + 240);
    v81 = *(_QWORD *)(v0 + 232);
    v113 = *(_QWORD *)(v0 + 224);
    v30 = *(_QWORD *)(v0 + 168);
    v117 = *(_QWORD *)(v0 + 160);
    v73 = *(_QWORD *)(v0 + 112);
    v102 = *(_QWORD *)(v0 + 104);
    v110 = *(_QWORD *)(v0 + 96);
    v94 = *(char **)(v0 + 32);
    v31 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v32._countAndFlagsBits = 0xD000000000000030;
    v132._countAndFlagsBits = 0xD000000000000102;
    v132._object = (void *)0x8000000100A0DAC0;
    v32._object = (void *)0x8000000100A0DA60;
    v33._object = (void *)0x8000000100A0DAA0;
    v33._countAndFlagsBits = 0xD00000000000001BLL;
    v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)0, (NSBundle)v31, v33, v132);

    v35 = sub_1000BA294(&qword_100BCE380);
    v36 = type metadata accessor for WeatherDescription.Argument(0);
    v37 = *(_QWORD *)(v36 - 8);
    v38 = *(_QWORD *)(v37 + 72);
    v39 = *(unsigned __int8 *)(v37 + 80);
    v40 = (v39 + 32) & ~v39;
    v41 = swift_allocObject(v35, v40 + 2 * v38, v39 | 7);
    *(_OWORD *)(v41 + 16) = xmmword_10097DA20;
    v42 = (uint64_t *)(v41 + v40);
    *v42 = v71;
    v42[1] = v75;
    v43 = *(double (**)(void))(v37 + 104);
    ((void (*)(uint64_t *, _QWORD, uint64_t))v43)(v42, enum case for WeatherDescription.Argument.time(_:), v36);
    v44 = (uint64_t *)((char *)v42 + v38);
    *v44 = v77;
    v44[1] = v79;
    v45.n128_f64[0] = v43();
    v46 = v73;
    WeatherDescription.init(format:_:)(v34._countAndFlagsBits, v34._object, v41, v45);
    swift_release(v84);
    sub_1000CDF8C(v47, v48, v49, v50, v51, v52, v53, v54, v67, v69, v71, v73, v75, v77, v79, v81, v84, v86, v89);
    sub_1000EB06C(v55, v56, v57, v58, v59, v60, v61, v62, v68, v70, v72, v74, v76, v78, v80, v82, v85, v87, v90, v91);
    v93(v83, v30);
    sub_100021A14(v88, (uint64_t *)&unk_100BD35A0);
    sub_100021A14(v92, (uint64_t *)&unk_100BD35A0);
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v98, v96);
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v107, v104);
    *(_QWORD *)v94 = v26;
    v63 = sub_1000C22B4();
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 32))(&v94[*(int *)(v63 + 20)], v46, v110);
    v93(v113, v30);
    sub_1000215BC(v117, type metadata accessor for DaylightData);
    v93(v120, v30);
    (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v129, v126);
    swift_bridgeObjectRelease();
    v64 = sub_1000DDD00();
    v97 = v66;
    v99 = v65;
    v101 = *(_QWORD *)(v0 + 216);
    v103 = *(_QWORD *)(v0 + 208);
    v105 = *(_QWORD *)(v0 + 200);
    v108 = *(_QWORD *)(v0 + 192);
    v111 = *(_QWORD *)(v0 + 184);
    v114 = *(_QWORD *)(v0 + 160);
    v118 = *(_QWORD *)(v0 + 144);
    v121 = *(_QWORD *)(v0 + 128);
    v124 = *(_QWORD *)(v0 + 112);
    v127 = *(_QWORD *)(v0 + 88);
    v130 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(v64);
    sub_1000992D4();
    sub_1000CFFF0();
    sub_1000D0544();
    swift_task_dealloc(v34._object);
    swift_task_dealloc(v41);
    sub_1000DC684();
    sub_1000DAE14();
    sub_1000B30A8();
    sub_1000992CC();
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v105);
    swift_task_dealloc(v108);
    swift_task_dealloc(v111);
    swift_task_dealloc(v114);
    swift_task_dealloc(v118);
    swift_task_dealloc(v121);
    swift_task_dealloc(v124);
    swift_task_dealloc(v127);
    swift_task_dealloc(v130);
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1005E9244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 96) = v16;
  *(_OWORD *)(v8 + 80) = v15;
  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 72) = a8;
  *(_QWORD *)(v8 + 48) = a5;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = sub_1000BA294(&qword_100BC5360);
  *(_QWORD *)(v8 + 104) = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 112) = swift_task_alloc(v10);
  *(_QWORD *)(v8 + 120) = swift_task_alloc(v10);
  *(_QWORD *)(v8 + 128) = swift_task_alloc(v10);
  v11 = sub_1000BA294(&qword_100BF58C0);
  *(_QWORD *)(v8 + 136) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BF58C8);
  *(_QWORD *)(v8 + 144) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 152) = v13;
  *(_QWORD *)(v8 + 160) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005E932C, 0, 0);
}

uint64_t sub_1005E932C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD **)(v0 + 24);
  v4 = **(_QWORD **)(v0 + 32);
  v5 = swift_task_alloc(80);
  v6 = *(_OWORD *)(v0 + 40);
  v7 = *(_OWORD *)(v0 + 64);
  v8 = *(_OWORD *)(v0 + 80);
  *(_QWORD *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 40) = v2;
  *(_OWORD *)(v5 + 48) = v7;
  *(_OWORD *)(v5 + 64) = v8;
  swift_bridgeObjectRetain();
  sub_100222BA8((void (*)(char *))sub_1005EB1E4, v5, v4);
  swift_bridgeObjectRelease();
  sub_1000D0544();
  TaskGroup.makeAsyncIterator()(*v3, v1);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
  v10 = sub_1000C56E8(v9);
  return TaskGroup.Iterator.next(isolation:)(v10);
}

uint64_t sub_1005E93FC()
{
  uint64_t v0;

  sub_1000B43D4();
  sub_10009E3B0(*(_QWORD *)(v0 + 168));
  return sub_1000BA3F4();
}

void sub_1005E9434()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void (*v15)(void);
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  _BOOL8 v22;
  Swift::Int v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(void);
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = v0[17];
  v2 = v0[13];
  if (_s7Weather24LocationCompositionStateOwet_0(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[19] + 8))(v0[20], v0[18]);
    sub_1000B30A8();
    sub_1000DAE14();
    sub_1000992CC();
    sub_1000992D4();
    sub_1000CFFF0();
    sub_1000C3D88();
    __asm { BR              X0 }
  }
  v4 = v0[16];
  v41 = v0[14];
  v43 = (_QWORD *)v0[12];
  v5 = *(int *)(v2 + 48);
  v7 = *(_QWORD *)(v1 + v5);
  v6 = *(_QWORD *)(v1 + v5 + 8);
  v47 = v0[15];
  v8 = *(_QWORD *)(v1 + v5 + 24);
  v48 = *(_QWORD *)(v1 + v5 + 16);
  v49 = *(_QWORD *)(v1 + v5 + 32);
  v50 = *(_QWORD *)(v1 + v5 + 40);
  v45 = v8;
  v46 = *(_QWORD *)(v1 + v5 + 48);
  v40 = *(_QWORD *)(v1 + v5 + 56);
  v9 = (_QWORD *)(v4 + v5);
  v11 = *(_QWORD *)(v1 + v5 + 64);
  v10 = *(_QWORD *)(v1 + v5 + 72);
  v12 = sub_100098778();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v4, v1, v12);
  v44 = v7;
  *v9 = v7;
  v9[1] = v6;
  v9[2] = v48;
  v9[3] = v8;
  v9[4] = v49;
  v9[5] = v50;
  v9[6] = v46;
  v9[7] = v40;
  v9[8] = v11;
  v9[9] = v10;
  v14 = (_QWORD *)(v47 + *(int *)(v2 + 48));
  v15 = *(void (**)(void))(v13 + 16);
  v15();
  *v14 = v7;
  v14[1] = v6;
  v14[2] = v48;
  v14[3] = v8;
  v14[4] = v49;
  v14[5] = v50;
  v14[6] = v46;
  v14[7] = v40;
  v14[8] = v11;
  v14[9] = v10;
  v16 = (_QWORD *)(v41 + *(int *)(v2 + 48));
  v42 = v15;
  v15();
  *v16 = v7;
  v16[1] = v6;
  v16[2] = v48;
  v16[3] = v8;
  v16[4] = v49;
  v16[5] = v50;
  v16[6] = v46;
  v16[7] = v40;
  v16[8] = v11;
  v16[9] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v43);
  v18 = *v43;
  v0[2] = *v43;
  *v43 = 0x8000000000000000;
  sub_10016C6BC();
  v21 = *(_QWORD *)(v18 + 16);
  v22 = (v20 & 1) == 0;
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
  }
  else
  {
    v24 = v19;
    v25 = v20;
    sub_1000BA294(&qword_100BF58D0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v23))
    {
      sub_10016C6BC();
      if ((v25 & 1) != (v27 & 1))
      {
        sub_1000C3D88();
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
        return;
      }
      v24 = v26;
    }
    v29 = (_QWORD *)v0[2];
    if ((v25 & 1) != 0)
    {
      v30 = (_QWORD *)(v29[7] + 80 * v24);
      swift_bridgeObjectRelease();
      sub_1000986C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v30 = v44;
      v30[1] = v6;
      v30[2] = v48;
      v30[3] = v45;
      v30[4] = v49;
      v30[5] = v50;
      v30[6] = v46;
      v30[7] = v40;
      v30[8] = v11;
      v30[9] = v10;
LABEL_12:
      v37 = v0[15];
      v36 = v0[16];
      v38 = v0[14];
      *(_QWORD *)v0[12] = v29;
      swift_bridgeObjectRelease();
      sub_1000DD10C(v37);
      sub_100021A14(v36, &qword_100BC5360);
      sub_1000DD10C(v38);
      v39 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
      sub_1000C56E8(v39);
      sub_1000C3D88();
      TaskGroup.Iterator.next(isolation:)();
      return;
    }
    v31 = v0[15];
    v29[(v24 >> 6) + 8] |= 1 << v24;
    ((void (*)(unint64_t, uint64_t, uint64_t))v42)(v29[6] + *(_QWORD *)(v13 + 72) * v24, v31, v12);
    v32 = (_QWORD *)(v29[7] + 80 * v24);
    *v32 = v44;
    v32[1] = v6;
    v32[2] = v48;
    v32[3] = v45;
    v32[4] = v49;
    v32[5] = v50;
    v32[6] = v46;
    v32[7] = v40;
    v32[8] = v11;
    v32[9] = v10;
    v33 = v29[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (!v34)
    {
      v29[2] = v35;
      goto LABEL_12;
    }
  }
  __break(1u);
}

void sub_1005E9824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void *a7, void *a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, char *, uint64_t);
  void *v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;

  v65 = a2;
  v63 = a7;
  v64 = a8;
  v61 = a3;
  v62 = a5;
  v55 = a1;
  v56 = a4;
  v57 = a9;
  v58 = a6;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = v9;
  v59 = *(_QWORD *)(v10 + 64);
  v12 = v10;
  __chkstk_darwin(v9);
  v68 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v67 = (char *)&v48 - v15;
  v16 = type metadata accessor for TimeZone(0);
  v66 = *(_QWORD *)(v16 - 8);
  v51 = v16;
  v17 = *(_QWORD *)(v66 + 64);
  __chkstk_darwin(v16);
  v52 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000BA294(&qword_100BCC810);
  v54 = *(_QWORD *)(v18 - 8);
  v19 = *(_QWORD *)(v54 + 64);
  __chkstk_darwin(v18);
  v20 = sub_1000BA294(&qword_100BC30C8);
  __chkstk_darwin(v20);
  v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v22;
  v23 = type metadata accessor for TaskPriority(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 1, 1, v23);
  v24 = *(int *)(v18 + 48);
  v53 = (uint64_t)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v53 + v24;
  v26 = v55 + v24;
  v27 = *(void (**)(uint64_t))(v12 + 16);
  v49 = v12;
  v50 = v11;
  v27(v53);
  sub_100080C0C(v26, v25, type metadata accessor for MonthSunAverage);
  v28 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))((char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v56, v16);
  ((void (*)(char *, unint64_t, uint64_t))v27)(v67, v58, v11);
  ((void (*)(char *, uint64_t, uint64_t))v27)(v68, v57, v11);
  v29 = *(unsigned __int8 *)(v54 + 80);
  v30 = (v29 + 32) & ~v29;
  v31 = (v19 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = *(unsigned __int8 *)(v28 + 80);
  v33 = (v32 + v31 + 8) & ~v32;
  v58 = (v17 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(unsigned __int8 *)(v12 + 80);
  v35 = (v34 + 8 + v58) & ~v34;
  v36 = (v59 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  v38 = (v34 + 8 + v37) & ~v34;
  v39 = swift_allocObject(&unk_100B83660, v38 + v59, v29 | v32 | v34 | 7);
  *(_QWORD *)(v39 + 16) = 0;
  *(_QWORD *)(v39 + 24) = 0;
  sub_1000787D4(v53, v39 + v30, &qword_100BCC810);
  *(_QWORD *)(v39 + v31) = v61;
  (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v39 + v33, v52, v51);
  *(_QWORD *)(v39 + v58) = v62;
  v40 = v39 + v35;
  v41 = v50;
  v42 = *(void (**)(uint64_t, char *, uint64_t))(v49 + 32);
  v42(v40, v67, v50);
  v43 = v63;
  *(_QWORD *)(v39 + v36) = v63;
  v44 = v64;
  *(_QWORD *)(v39 + v37) = v64;
  v42(v39 + v38, v68, v41);
  swift_retain();
  v45 = v43;
  v46 = v44;
  v47 = (uint64_t)v60;
  sub_1001B02C4((uint64_t)v60, (uint64_t)&unk_100BF58E8, v39);
  sub_100021A14(v47, &qword_100BC30C8);
}

uint64_t sub_1005E9B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v16;
  uint64_t v17;

  *(_QWORD *)(v8 + 80) = v17;
  *(_OWORD *)(v8 + 64) = v16;
  *(_QWORD *)(v8 + 48) = a7;
  *(_QWORD *)(v8 + 56) = a8;
  *(_QWORD *)(v8 + 32) = a5;
  *(_QWORD *)(v8 + 40) = a6;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a4;
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 88) = swift_task_alloc(v9);
  *(_QWORD *)(v8 + 96) = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for MonthSunAverage(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 104) = swift_task_alloc(v10);
  *(_QWORD *)(v8 + 112) = swift_task_alloc(v10);
  v11 = sub_1000BA294(&qword_100BCC810);
  *(_QWORD *)(v8 + 120) = v11;
  *(_QWORD *)(v8 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  *(_QWORD *)(v8 + 136) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 144) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 152) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 160) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 168) = swift_task_alloc(v14);
  return swift_task_switch(sub_1005E9C94, 0, 0);
}

uint64_t sub_1005E9C94()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSDate v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSDate v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  double v30;
  uint64_t v31;
  Class isa;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSDate v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  NSDate v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  void (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);

  v78 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD **)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  v69 = *(_QWORD *)(v0 + 112);
  v71 = *(id *)(v0 + 104);
  v5 = *(void **)(v0 + 24);
  v6 = *(int *)(v3 + 48);
  v7 = v4 + v6;
  v8 = (uint64_t)v5 + v6;
  v9 = (void (*)(uint64_t, uint64_t, uint64_t))v2[2];
  v9(v4, (uint64_t)v5, v1);
  sub_100080C0C(v8, v7, type metadata accessor for MonthSunAverage);
  v77 = (void (*)(uint64_t, uint64_t, uint64_t))v2[4];
  v77(v78, v4, v1);
  sub_1000215BC(v7, type metadata accessor for MonthSunAverage);
  v74 = v3;
  v10 = v4 + *(int *)(v3 + 48);
  v79 = v9;
  v9(v4, (uint64_t)v5, v1);
  v75 = v8;
  sub_100110184(v8, v10);
  sub_10007802C(v10, v69, type metadata accessor for MonthSunAverage);
  v76 = (void (*)(uint64_t, uint64_t))v2[1];
  v76(v4, v1);
  sub_100110184(v69, (uint64_t)v71);
  v11 = sub_1000BA294(&qword_100BF58E0);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 2, v11);
  if (v12)
  {
    if (v12 == 1)
    {
      v13.super.isa = sub_1000DF7B8().super.isa;
      v14 = sub_1000DBBCC((uint64_t)v13.super.isa);

      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v70 = v16;
      v72 = (id)v15;

      v17.super.isa = Date._bridgeToObjectiveC()().super.isa;
      v18 = sub_1000CD8B0((uint64_t)v17.super.isa);
      sub_1000BEF1C();
      sub_1000D9154();
      sub_1000C0F7C();
      sub_1000CF904();
      v19 = sub_1000C6734();
      v62 = v20;
      v63 = v19;
      v21 = 0.0;
      v22 = 0;
    }
    else
    {
      v41.super.isa = sub_1000DF7B8().super.isa;
      v42 = sub_1000DBBCC((uint64_t)v41.super.isa);

      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v70 = v44;
      v72 = (id)v43;

      v45.super.isa = Date._bridgeToObjectiveC()().super.isa;
      v46 = sub_1000CD8B0((uint64_t)v45.super.isa);
      sub_1000BEF1C();
      sub_1000D9154();
      sub_1000C0F7C();
      sub_1000CF904();
      v47 = sub_1000C6734();
      v62 = v48;
      v63 = v47;
      v22 = 0;
      v21 = 1.0;
    }
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 136);
    v26 = *(_QWORD *)(v0 + 96);
    v27 = *(_QWORD *)(v0 + 88);
    v67 = *(_QWORD *)(v0 + 168);
    v68 = *(id *)(v0 + 72);
    v73 = *(id *)(v0 + 64);
    v28 = *(_QWORD *)(v0 + 104) + *(int *)(v11 + 48);
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 40);
    v66 = *(_QWORD *)(v0 + 48);
    ((void (*)(uint64_t))v77)(v23);
    sub_100099BD4(v24, v28);
    v79(v26, v23, v25);
    sub_1000C1788();
    sub_100099BD4(v27, v24);
    _s7Weather24LocationCompositionStateOwst_0(v27, 0, 1, v25);
    sub_10021A9D4(v26, v27, v29, v66);
    v21 = v30;
    sub_1000987A0(v27);
    sub_1000987A0(v26);
    sub_100099BD4(v26, v23);
    sub_1000C1788();
    sub_10021B060(v26, (uint64_t)v29);
    v22 = v31;
    sub_1000987A0(v26);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v33 = objc_msgSend(v73, "stringFromDate:", isa);

    v34 = sub_1000D9154();
    v70 = v35;
    v72 = (id)v34;

    v36 = objc_msgSend(v68, "stringFromDate:", Date._bridgeToObjectiveC()().super.isa);
    sub_1000BEF1C();
    sub_1000D9154();
    sub_1000C0F7C();
    v37 = Date.formattedTime(timeZone:)(v29);
    v64 = v38;
    v65 = v37;
    v39 = Date.formattedTime(timeZone:)(v29);
    v62 = v40;
    v63 = v39;
    v76(v24, v25);
    v76(v23, v25);
  }
  v49 = *(_QWORD *)(v0 + 168);
  v57 = *(_QWORD *)(v0 + 160);
  v58 = *(_QWORD *)(v0 + 152);
  v51 = *(_QWORD *)(v0 + 128);
  v50 = *(_QWORD *)(v0 + 136);
  v59 = *(_QWORD *)(v0 + 104);
  v60 = *(_QWORD *)(v0 + 96);
  v61 = *(_QWORD *)(v0 + 88);
  v53 = *(_QWORD *)(v0 + 16);
  v52 = *(_QWORD *)(v0 + 24);
  sub_1000215BC(*(_QWORD *)(v0 + 112), type metadata accessor for MonthSunAverage);
  v76(v49, v50);
  v54 = (double *)(v53 + *(int *)(sub_1000BA294(&qword_100BC5360) + 48));
  v55 = v51 + *(int *)(v74 + 48);
  v79(v51, v52, v50);
  sub_100110184(v75, v55);
  v77(v53, v51, v50);
  *(_QWORD *)v54 = v72;
  *((_QWORD *)v54 + 1) = v70;
  *((_QWORD *)v54 + 2) = v68;
  *((_QWORD *)v54 + 3) = v67;
  *((_QWORD *)v54 + 4) = v65;
  *((_QWORD *)v54 + 5) = v64;
  *((_QWORD *)v54 + 6) = v63;
  *((_QWORD *)v54 + 7) = v62;
  v54[8] = v21;
  *((_QWORD *)v54 + 9) = v22;
  sub_1000215BC(v55, type metadata accessor for MonthSunAverage);
  sub_1000B30A8();
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  sub_1000DAE14();
  sub_1000DC684();
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1005EA160()
{
  unint64_t result;

  result = qword_100BF58A0;
  if (!qword_100BF58A0)
  {
    result = swift_getWitnessTable(&unk_1009B67E0, &type metadata for SunriseSunsetMonthlyViewModelFactory.FactoryError);
    atomic_store(result, &qword_100BF58A0);
  }
  return result;
}

uint64_t sub_1005EA19C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = v2[7];
  v12 = (_QWORD *)swift_task_alloc(dword_100BF58AC);
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_1005EA250;
  return sub_1005E9244(a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1005EA250()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000B43D4();
  sub_10009E3B0(*(_QWORD *)(v1 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1005EA284(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  int64_t *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  Swift::Int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;

  v2 = v1;
  v134 = sub_1000BA294(&qword_100BCF320);
  v4 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v130 = (uint64_t)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v140 = (uint64_t)&v123 - v7;
  __chkstk_darwin(v8);
  v137 = (uint64_t)&v123 - v9;
  __chkstk_darwin(v10);
  v136 = (uint64_t)&v123 - v11;
  v12 = (int64_t)a1;
  v13 = a1[1];
  v14 = _minimumMergeRunLength(_:)(v13);
  if (v14 >= v13)
  {
    if ((v13 & 0x8000000000000000) == 0)
    {
      if (v13)
        sub_1005EABF4(0, v13, 1, (_QWORD *)v12);
      return;
    }
    goto LABEL_141;
  }
  v15 = v14;
  sub_10087B5CC(v13 / 2);
  v126 = v16;
  v127 = v13;
  v132 = v17;
  v133 = v4;
  if (v13 <= 0)
  {
LABEL_105:
    v19 = (char *)_swiftEmptyArrayStorage;
    v67 = _swiftEmptyArrayStorage[2];
    v21 = (uint64_t *)v12;
LABEL_106:
    if (v67 < 2)
    {
LABEL_117:
      swift_bridgeObjectRelease();
      if (v127 >= -1)
        goto LABEL_118;
      goto LABEL_145;
    }
    v117 = *v21;
    while (1)
    {
      v12 = v67 - 2;
      if (v67 < 2)
        break;
      if (!v117)
        goto LABEL_149;
      v118 = v19;
      v119 = *(_QWORD *)&v19[16 * v12 + 32];
      v120 = *(_QWORD *)&v19[16 * v67 + 24];
      sub_1005EAE1C(v117 + *(_QWORD *)(v133 + 72) * v119, v117 + *(_QWORD *)(v133 + 72) * *(_QWORD *)&v19[16 * v67 + 16], v117 + *(_QWORD *)(v133 + 72) * v120, v132);
      if (v2)
        goto LABEL_103;
      if (v120 < v119)
        goto LABEL_136;
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        v118 = sub_10021A488();
      if ((unint64_t)v12 >= *((_QWORD *)v118 + 2))
        goto LABEL_137;
      v121 = &v118[16 * v12 + 32];
      *(_QWORD *)v121 = v119;
      *((_QWORD *)v121 + 1) = v120;
      v122 = *((_QWORD *)v118 + 2);
      if (v67 > v122)
        goto LABEL_138;
      memmove(&v118[16 * v67 + 16], &v118[16 * v67 + 32], 16 * (v122 - v67));
      *((_QWORD *)v118 + 2) = v122 - 1;
      v67 = v122 - 1;
      v19 = v118;
      if (v122 <= 2)
        goto LABEL_117;
    }
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    return;
  }
  v125 = v15;
  v18 = 0;
  v19 = (char *)_swiftEmptyArrayStorage;
  v20 = v13;
  v21 = (uint64_t *)v12;
  v139 = (uint64_t *)v12;
  while (1)
  {
    v22 = v18;
    v23 = v18 + 1;
    v131 = v18;
    if (v18 + 1 >= v20)
    {
      v40 = v18 + 1;
    }
    else
    {
      v24 = *v21;
      v25 = *(_QWORD *)(v4 + 72);
      v26 = *v21 + v25 * v23;
      v135 = v20;
      v27 = v136;
      sub_100037768(v26, v136, &qword_100BCF320);
      v28 = v24 + v25 * v22;
      v29 = v137;
      sub_100037768(v28, v137, &qword_100BCF320);
      LODWORD(v138) = static Date.< infix(_:_:)(v27, v29);
      v30 = v29;
      v22 = v131;
      sub_100021A14(v30, &qword_100BCF320);
      v31 = v27;
      v20 = v135;
      sub_100021A14(v31, &qword_100BCF320);
      v32 = v22 + 2;
      v129 = v24;
      v141 = v25;
      if (v22 + 2 >= v20)
      {
        v35 = v22 + 2;
        v21 = v139;
      }
      else
      {
        v128 = v2;
        v33 = v25 * v23;
        v34 = v24;
        v35 = v32;
        v36 = v25 * v32;
        while (1)
        {
          v37 = v136;
          sub_100037768(v34 + v36, v136, &qword_100BCF320);
          v38 = v137;
          sub_100037768(v34 + v33, v137, &qword_100BCF320);
          v39 = static Date.< infix(_:_:)(v37, v38);
          sub_100021A14(v38, &qword_100BCF320);
          sub_100021A14(v37, &qword_100BCF320);
          if (((v138 ^ v39) & 1) != 0)
            break;
          v34 += v141;
          if (++v35 >= v135)
          {
            v20 = v135;
            v35 = v135;
            v21 = v139;
            v4 = v133;
            v2 = v128;
            v22 = v131;
            goto LABEL_13;
          }
        }
        v21 = v139;
        v4 = v133;
        v2 = v128;
        v22 = v131;
        v20 = v135;
      }
LABEL_13:
      if ((v138 & 1) != 0)
      {
        if (v35 < v22)
          goto LABEL_142;
        v40 = v35;
        if (v22 < v35)
        {
          v128 = v2;
          v41 = 0;
          v42 = v141;
          v43 = v141 * (v35 - 1);
          v44 = v35 * v141;
          v45 = v22 * v141;
          do
          {
            if (v22 != v40 + v41 - 1)
            {
              v46 = v129;
              if (!v129)
                goto LABEL_148;
              v47 = v129 + v45;
              v138 = v129 + v43;
              sub_1000787D4(v129 + v45, v130, &qword_100BCF320);
              if (v45 < v43 || v47 >= v46 + v44)
              {
                swift_arrayInitWithTakeFrontToBack(v46 + v45, v138, 1, v134);
                v42 = v141;
              }
              else
              {
                v42 = v141;
                if (v45 != v43)
                  swift_arrayInitWithTakeBackToFront(v47, v138, 1, v134);
              }
              sub_1000787D4(v130, v138, &qword_100BCF320);
              v21 = v139;
              v40 = v35;
            }
            ++v22;
            --v41;
            v43 -= v42;
            v44 -= v42;
            v45 += v42;
          }
          while (v22 < v40 + v41);
          v4 = v133;
          v2 = v128;
          v22 = v131;
          v20 = v135;
        }
      }
      else
      {
        v40 = v35;
      }
    }
    if (v40 < v20)
    {
      if (__OFSUB__(v40, v22))
        goto LABEL_140;
      if (v40 - v22 < v125)
      {
        if (__OFADD__(v22, v125))
          goto LABEL_143;
        if (v22 + v125 >= v20)
          v49 = v20;
        else
          v49 = v22 + v125;
        if (v49 < v22)
          goto LABEL_144;
        if (v40 != v49)
        {
          v124 = v19;
          v128 = v2;
          v129 = v49;
          v50 = *(_QWORD *)(v4 + 72);
          v141 = v50 * (v40 - 1);
          v135 = v50;
          v51 = v40 * v50;
          do
          {
            v52 = 0;
            v138 = v40;
            while (1)
            {
              v53 = *v21;
              v54 = v51;
              v55 = v51 + v52;
              v56 = v21;
              v57 = v136;
              sub_100037768(v55 + *v21, v136, &qword_100BCF320);
              v58 = v137;
              sub_100037768(v141 + v52 + v53, v137, &qword_100BCF320);
              LOBYTE(v53) = static Date.< infix(_:_:)(v57, v58);
              sub_100021A14(v58, &qword_100BCF320);
              sub_100021A14(v57, &qword_100BCF320);
              if ((v53 & 1) == 0)
                break;
              v59 = *v56;
              if (!*v56)
                goto LABEL_146;
              v51 = v54;
              v60 = v59 + v54 + v52;
              v61 = v59 + v141 + v52;
              sub_1000787D4(v60, v140, &qword_100BCF320);
              swift_arrayInitWithTakeFrontToBack(v60, v61, 1, v134);
              sub_1000787D4(v140, v61, &qword_100BCF320);
              v52 -= v135;
              ++v22;
              v62 = v138;
              v21 = v139;
              if (v138 == v22)
                goto LABEL_47;
            }
            v62 = v138;
            v21 = v56;
            v51 = v54;
LABEL_47:
            v40 = v62 + 1;
            v141 += v135;
            v51 += v135;
            v22 = v131;
          }
          while (v40 != v129);
          v40 = v129;
          v2 = v128;
          v19 = v124;
        }
      }
    }
    if (v40 < v22)
      goto LABEL_139;
    v63 = v21;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    v138 = v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v19 = sub_10021A398(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v66 = *((_QWORD *)v19 + 2);
    v65 = *((_QWORD *)v19 + 3);
    v67 = v66 + 1;
    if (v66 >= v65 >> 1)
      v19 = sub_10021A398((char *)(v65 > 1), v66 + 1, 1, v19);
    v21 = v63;
    v68 = v2;
    *((_QWORD *)v19 + 2) = v67;
    v69 = v19 + 32;
    v70 = &v19[16 * v66 + 32];
    v71 = v138;
    *(_QWORD *)v70 = v131;
    *((_QWORD *)v70 + 1) = v71;
    if (v66)
      break;
    v67 = 1;
LABEL_97:
    v20 = v21[1];
    v18 = v138;
    v2 = v68;
    v4 = v133;
    if (v138 >= v20)
      goto LABEL_106;
  }
  while (1)
  {
    v72 = v67 - 1;
    if (v67 >= 4)
    {
      v77 = &v69[16 * v67];
      v78 = *((_QWORD *)v77 - 8);
      v79 = *((_QWORD *)v77 - 7);
      v83 = __OFSUB__(v79, v78);
      v80 = v79 - v78;
      if (v83)
        goto LABEL_124;
      v82 = *((_QWORD *)v77 - 6);
      v81 = *((_QWORD *)v77 - 5);
      v83 = __OFSUB__(v81, v82);
      v75 = v81 - v82;
      v76 = v83;
      if (v83)
        goto LABEL_125;
      v84 = v67 - 2;
      v85 = &v69[16 * v67 - 32];
      v87 = *(_QWORD *)v85;
      v86 = *((_QWORD *)v85 + 1);
      v83 = __OFSUB__(v86, v87);
      v88 = v86 - v87;
      if (v83)
        goto LABEL_126;
      v83 = __OFADD__(v75, v88);
      v89 = v75 + v88;
      if (v83)
        goto LABEL_128;
      if (v89 >= v80)
      {
        v107 = &v69[16 * v72];
        v109 = *(_QWORD *)v107;
        v108 = *((_QWORD *)v107 + 1);
        v83 = __OFSUB__(v108, v109);
        v110 = v108 - v109;
        if (v83)
          goto LABEL_134;
        v100 = v75 < v110;
        goto LABEL_86;
      }
    }
    else
    {
      if (v67 != 3)
      {
        v101 = *((_QWORD *)v19 + 4);
        v102 = *((_QWORD *)v19 + 5);
        v83 = __OFSUB__(v102, v101);
        v94 = v102 - v101;
        v95 = v83;
        goto LABEL_80;
      }
      v74 = *((_QWORD *)v19 + 4);
      v73 = *((_QWORD *)v19 + 5);
      v83 = __OFSUB__(v73, v74);
      v75 = v73 - v74;
      v76 = v83;
    }
    if ((v76 & 1) != 0)
      goto LABEL_127;
    v84 = v67 - 2;
    v90 = &v69[16 * v67 - 32];
    v92 = *(_QWORD *)v90;
    v91 = *((_QWORD *)v90 + 1);
    v93 = __OFSUB__(v91, v92);
    v94 = v91 - v92;
    v95 = v93;
    if (v93)
      goto LABEL_129;
    v96 = &v69[16 * v72];
    v98 = *(_QWORD *)v96;
    v97 = *((_QWORD *)v96 + 1);
    v83 = __OFSUB__(v97, v98);
    v99 = v97 - v98;
    if (v83)
      goto LABEL_131;
    if (__OFADD__(v94, v99))
      goto LABEL_133;
    if (v94 + v99 >= v75)
    {
      v100 = v75 < v99;
LABEL_86:
      if (v100)
        v72 = v84;
      goto LABEL_88;
    }
LABEL_80:
    if ((v95 & 1) != 0)
      goto LABEL_130;
    v103 = &v69[16 * v72];
    v105 = *(_QWORD *)v103;
    v104 = *((_QWORD *)v103 + 1);
    v83 = __OFSUB__(v104, v105);
    v106 = v104 - v105;
    if (v83)
      goto LABEL_132;
    if (v106 < v94)
      goto LABEL_97;
LABEL_88:
    v111 = v72 - 1;
    if (v72 - 1 >= v67)
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    if (!*v21)
      goto LABEL_147;
    v112 = v19;
    v113 = (int64_t *)&v69[16 * v111];
    v12 = *v113;
    v114 = &v69[16 * v72];
    v115 = *((_QWORD *)v114 + 1);
    sub_1005EAE1C(*v21 + *(_QWORD *)(v133 + 72) * *v113, *v21 + *(_QWORD *)(v133 + 72) * *(_QWORD *)v114, *v21 + *(_QWORD *)(v133 + 72) * v115, v132);
    if (v68)
      break;
    if (v115 < v12)
      goto LABEL_121;
    if (v72 > *((_QWORD *)v112 + 2))
      goto LABEL_122;
    *v113 = v12;
    *(_QWORD *)&v69[16 * v111 + 8] = v115;
    v116 = *((_QWORD *)v112 + 2);
    if (v72 >= v116)
      goto LABEL_123;
    v19 = v112;
    v67 = v116 - 1;
    memmove(&v69[16 * v72], v114 + 16, 16 * (v116 - 1 - v72));
    *((_QWORD *)v112 + 2) = v116 - 1;
    v21 = v139;
    if (v116 <= 2)
      goto LABEL_97;
  }
  v2 = v68;
LABEL_103:
  swift_bridgeObjectRelease();
  if (v127 < -1)
  {
    __break(1u);
    goto LABEL_105;
  }
LABEL_118:
  *(_QWORD *)(v126 + 16) = 0;
  swift_bridgeObjectRelease();
}

void sub_1005EABF4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v25 = a1;
  v26 = sub_1000BA294(&qword_100BCF320);
  __chkstk_darwin(v26);
  v30 = (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v27 = (uint64_t)&v23 - v9;
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - v12;
  v29 = a3;
  v24 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v11 + 72);
    v32 = v14 * (v29 - 1);
    v28 = v14;
    v31 = v14 * v29;
    while (2)
    {
      v15 = 0;
      v16 = v25;
      do
      {
        v17 = *a4;
        sub_100037768(v31 + v15 + *a4, (uint64_t)v13, &qword_100BCF320);
        v18 = v27;
        sub_100037768(v32 + v15 + v17, v27, &qword_100BCF320);
        LOBYTE(v17) = static Date.< infix(_:_:)(v13, v18);
        sub_100021A14(v18, &qword_100BCF320);
        sub_100021A14((uint64_t)v13, &qword_100BCF320);
        if ((v17 & 1) == 0)
          break;
        v19 = *a4;
        if (!*a4)
        {
          __break(1u);
          return;
        }
        v20 = a4;
        v21 = v19 + v31 + v15;
        v22 = v19 + v32 + v15;
        sub_1000787D4(v21, v30, &qword_100BCF320);
        swift_arrayInitWithTakeFrontToBack(v21, v22, 1, v26);
        sub_1000787D4(v30, v22, &qword_100BCF320);
        v15 -= v28;
        ++v16;
        a4 = v20;
      }
      while (v29 != v16);
      v32 += v28;
      v31 += v28;
      if (++v29 != v24)
        continue;
      break;
    }
  }
}

void sub_1005EAE1C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  int64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v26;
  BOOL v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v41;
  int64_t v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = sub_1000BA294(&qword_100BCF320);
  __chkstk_darwin(v51);
  v52 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v45 - v11;
  v13 = *(_QWORD *)(v10 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v14 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_75;
  v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_76;
  v18 = v14 / v13;
  v19 = v16 / v13;
  v46 = *(_QWORD *)(v10 + 72);
  if (v14 / v13 >= v16 / v13)
  {
    sub_100600274(a2, v16 / v13);
    v20 = a4 + v19 * v13;
    if (v19 * v13 < 1 || a1 >= a2)
      goto LABEL_69;
    v48 = a1;
    v49 = -v13;
    v47 = a4;
    while (1)
    {
      v30 = a3;
      v31 = v49;
      a3 += v49;
      v50 = v20 + v49;
      v32 = v20;
      sub_100037768(v20 + v49, (uint64_t)v12, &qword_100BCF320);
      v33 = a2 + v31;
      v34 = a2 + v31;
      v35 = (uint64_t)v12;
      v36 = v52;
      sub_100037768(v34, v52, &qword_100BCF320);
      v37 = static Date.< infix(_:_:)(v35, v36);
      v38 = v36;
      v12 = (char *)v35;
      sub_100021A14(v38, &qword_100BCF320);
      sub_100021A14(v35, &qword_100BCF320);
      if ((v37 & 1) != 0)
      {
        v20 = v32;
        if (v30 >= a2 && a3 < a2)
        {
          v41 = v48;
          if (v30 != a2)
            swift_arrayInitWithTakeBackToFront(a3, v33, 1, v51);
          a2 = v33;
          a4 = v47;
          goto LABEL_64;
        }
        swift_arrayInitWithTakeFrontToBack(a3, v33, 1, v51);
        a2 = v33;
      }
      else if (v30 < v32 || a3 >= v32)
      {
        v20 = v50;
        swift_arrayInitWithTakeFrontToBack(a3, v50, 1, v51);
      }
      else
      {
        v20 = v50;
        if (v30 != v32)
          swift_arrayInitWithTakeBackToFront(a3, v50, 1, v51);
      }
      a4 = v47;
      v41 = v48;
LABEL_64:
      if (v20 <= a4 || a2 <= v41)
      {
        v13 = v46;
        goto LABEL_69;
      }
    }
  }
  sub_100600274(a1, v14 / v13);
  v20 = a4 + v18 * v13;
  v50 = a3;
  if (v18 * v13 >= 1 && a2 < a3)
  {
    v22 = v52;
    do
    {
      sub_100037768(a2, (uint64_t)v12, &qword_100BCF320);
      sub_100037768(a4, v22, &qword_100BCF320);
      v23 = static Date.< infix(_:_:)(v12, v22);
      sub_100021A14(v22, &qword_100BCF320);
      sub_100021A14((uint64_t)v12, &qword_100BCF320);
      if ((v23 & 1) != 0)
      {
        v24 = a2 + v13;
        if (a1 < a2 || a1 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack(a1, a2, 1, v51);
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront(a1, a2, 1, v51);
        }
      }
      else
      {
        v26 = a4 + v13;
        if (a1 < a4 || a1 >= v26)
        {
          swift_arrayInitWithTakeFrontToBack(a1, a4, 1, v51);
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront(a1, a4, 1, v51);
        }
        v24 = a2;
        a4 = v26;
        v13 = v46;
      }
      a1 += v13;
      v28 = a4 >= v20 || v24 >= v50;
      a2 = v24;
    }
    while (!v28);
  }
LABEL_69:
  v43 = v20 - a4;
  if (v13 != -1 || v43 != 0x8000000000000000)
  {
    sub_100600274(a4, v43 / v13);
    return;
  }
LABEL_77:
  __break(1u);
}

void sub_1005EB1E4(uint64_t a1)
{
  uint64_t v1;

  sub_1005E9824(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_1005EB214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = sub_1000BA294(&qword_100BCC810);
  v2 = *(_QWORD *)(v1 - 8);
  v23 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v23 + 32) & ~v23;
  v20 = *(_QWORD *)(v2 + 64);
  v24 = sub_100099928();
  v4 = *(_QWORD *)(v24 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v22 = v4;
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_100098778() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_1000DD10C(v0 + v3);
  v10 = v0 + v3 + *(int *)(v1 + 48);
  v11 = sub_1000BA294(&qword_100BF58E0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v10, 2, v11))
  {
    sub_1000DD10C(v10);
    sub_1000DD10C(v10 + *(int *)(v11 + 48));
  }
  v12 = (((v20 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + v5 + 8) & ~v5;
  v13 = (v8 + 8 + ((v6 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  v14 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = v9;
  v17 = (v8 + 8 + v15) & ~v8;
  v21 = v17 + v16;
  v18 = swift_release();
  (*(void (**)(unint64_t, uint64_t, __n128))(v22 + 8))(v0 + v12, v24, v18);
  sub_1000DD10C(v0 + v13);

  sub_1000DD10C(v0 + v17);
  return swift_deallocObject(v0, v21, v23 | v5 | v8 | 7);
}

uint64_t sub_1005EB3B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v3 = *(_QWORD *)(sub_1000BA294(&qword_100BCC810) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(sub_100099928() - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(sub_100098778() - 8) + 80);
  v10 = (v9 + 8 + v8) & ~v9;
  v11 = *(_QWORD *)(v1 + 24);
  v17 = *(_QWORD *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + v5);
  v13 = *(_QWORD *)(v1 + v8);
  v14 = v1 + v10;
  v15 = (_QWORD *)swift_task_alloc(dword_100BF58DC);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_1005EB5DC;
  return sub_1005E9B74(a1, v17, v11, v1 + v4, v12, v1 + v7, v13, v14);
}

uint64_t storeEnumTagSinglePayload for SunriseSunsetMonthlyViewModelFactory.FactoryError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1005EB540 + 4 * byte_1009B66F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1005EB560 + 4 * byte_1009B66F5[v4]))();
}

_BYTE *sub_1005EB540(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1005EB560(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1005EB568(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1005EB570(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1005EB578(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1005EB580(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SunriseSunsetMonthlyViewModelFactory.FactoryError()
{
  return &type metadata for SunriseSunsetMonthlyViewModelFactory.FactoryError;
}

unint64_t sub_1005EB5A0()
{
  unint64_t result;

  result = qword_100BF58F0;
  if (!qword_100BF58F0)
  {
    result = swift_getWitnessTable(&unk_1009B67B8, &type metadata for SunriseSunsetMonthlyViewModelFactory.FactoryError);
    atomic_store(result, (unint64_t *)&qword_100BF58F0);
  }
  return result;
}

uint64_t sub_1005EB5E0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  _QWORD v26[3];
  uint64_t v27;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF59A0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v27)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BC4748);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (result)
    {
      v11 = result;
      v12 = sub_100068EB4((uint64_t)v26, v27);
      __chkstk_darwin(v12);
      v14 = (_QWORD *)((char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v15 + 16))(v14);
      v16 = *v14;
      v17 = type metadata accessor for NotificationsOptInInteractor();
      v25[3] = v17;
      v25[4] = &off_100B6A4A0;
      v25[0] = v16;
      v18 = type metadata accessor for NotificationsOptInModule();
      v19 = (_QWORD *)swift_allocObject(v18, 64, 7);
      v20 = sub_100068EB4((uint64_t)v25, v17);
      __chkstk_darwin(v20);
      v22 = (_QWORD *)((char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v23 + 16))(v22);
      v24 = *v22;
      v19[5] = v17;
      v19[6] = &off_100B6A4A0;
      v19[2] = v24;
      v19[7] = v11;
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
      result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
      a2[3] = v18;
      a2[4] = &off_100B9D320;
      *a2 = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1005EB7B8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for NotificationsOptInStatusFactory, (uint64_t)&off_100B786E8, a1);
}

uint64_t sub_1005EB7CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for StubNotificationsOptInStatusFactory();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B786D0;
  *a1 = result;
  return result;
}

double sub_1005EB810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v0 = sub_1000BA294(&qword_100BF59A0);
  v1 = RegistrationContainer.register<A>(_:name:factory:)(v0, 0, 0, sub_1005EB8AC, 0, v0);
  swift_release(v1);
  v2 = sub_1000BA294(&qword_100BF59A8);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_1005EBA50, 0, v2);
  swift_release(v3);
  v4 = sub_1000BA294(&qword_100BC4748);
  v5 = RegistrationContainer.register<A>(_:name:factory:)(v4, 0, 0, sub_1005EBA64, 0, v4);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

void sub_1005EB8AC(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BC43B0);
  dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v24)
  {
    __break(1u);
    goto LABEL_7;
  }
  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = sub_1000BA294(&qword_100BC43F0);
  dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
  if (!v22)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v11 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v11);
  v12 = sub_1000BA294(&qword_100BD1408);
  dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v11, v10);
  if (!v21)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v13 = a1[3];
  v14 = a1[4];
  sub_1000DB418(a1, v13);
  v15 = sub_1000BA294(&qword_100BF59B0);
  dispatch thunk of ResolverType.resolve<A>(_:)(v15, v15, v13, v14);
  if (v19)
  {
    v16 = type metadata accessor for NotificationsOptInInteractor();
    swift_allocObject(v16, 144, 7);
    sub_1002B8090(v24, v25, v26, v27, v22, v23, &v20, &v18);
    a2[3] = v16;
    a2[4] = &off_100B6A4A0;
    *a2 = v17;
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_1005EBA50@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for NotificationsOptInInputFactory, (uint64_t)&off_100B7F840, a1);
}

uint64_t sub_1005EBA64(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24[2];
  _QWORD v25[3];
  uint64_t v26;
  _UNKNOWN **v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v30;
  if (!v30)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = v32;
  v7 = v33;
  v9 = v31;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BF59A8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v29)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = *sub_1000DB418(v28, v29);
  v26 = type metadata accessor for NotificationsOptInInputFactory();
  v27 = &off_100B7F840;
  v25[0] = v13;
  sub_100043CA8((uint64_t)v25, (uint64_t)v24);
  v14 = swift_allocObject(&unk_100B83780, 56, 7);
  sub_10003C800(v24, v14 + 16);
  swift_retain();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
  v15 = swift_allocObject(&unk_100B837A8, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1005EBDAC;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100BED538);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (v29)
  {
    v19 = *sub_1000DB418(v28, v29);
    v26 = type metadata accessor for NotificationsOptInViewModelFactory();
    v27 = &off_100B88480;
    v25[0] = v19;
    sub_100043CA8((uint64_t)v25, (uint64_t)v24);
    v20 = swift_allocObject(&unk_100B837D0, 56, 7);
    sub_10003C800(v24, v20 + 16);
    swift_retain();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
    v21 = swift_allocObject(&unk_100B837F8, 32, 7);
    *(_QWORD *)(v21 + 16) = sub_1005EBDB4;
    *(_QWORD *)(v21 + 24) = v20;
    v22 = swift_allocObject(&unk_100B83820, 32, 7);
    *(_QWORD *)(v22 + 16) = sub_1005EBDBC;
    *(_QWORD *)(v22 + 24) = v21;
    v23 = sub_1000BA294(&qword_100BC4748);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    return sub_100184018(v6, v9, v8, v7, sub_100182F48, 0, sub_1000A22C0, v15, sub_1005EBE04, v22);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1005EBD04@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DB418(a2, a2[3]);
  return sub_10054F324(a1, a3);
}

uint64_t sub_1005EBD4C(uint64_t a1, _QWORD *a2)
{
  sub_1000DB418(a2, a2[3]);
  return sub_10067DEB4(a1) & 0xFF01FFFFLL;
}

uint64_t sub_1005EBD88()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1005EBDAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1005EBD04(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1005EBDB4(uint64_t a1)
{
  uint64_t v1;

  return sub_1005EBD4C(a1, (_QWORD *)(v1 + 16));
}

uint64_t sub_1005EBDBC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 0xFF01FFFFLL;
}

uint64_t sub_1005EBDE0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005EBE04@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

void sub_1005EBE38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v5 = type metadata accessor for SavedLocation(0);
  v21 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v22 = (uint64_t)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - v8;
  v10 = _swiftEmptyArrayStorage;
  v23 = _swiftEmptyArrayStorage;
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
  {
    v19 = v2;
    v11 = 0;
    while (v11 < *(_QWORD *)(a1 + 16))
    {
      v12 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      v13 = *(_QWORD *)(v21 + 72);
      v14 = a1;
      sub_100095B78(a1 + v12 + v13 * v11, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      v15 = *(_QWORD *)(a2 + 16);
      if (v15)
      {
        v16 = a2 + v12;
        v17 = swift_bridgeObjectRetain(a2);
        while ((static SavedLocation.== infix(_:_:)(v16, v9, v17) & 1) == 0)
        {
          v16 += v13;
          if (!--v15)
          {
            swift_bridgeObjectRelease(a2);
            goto LABEL_9;
          }
        }
        swift_bridgeObjectRelease(a2);
        sub_1000215BC((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      }
      else
      {
LABEL_9:
        sub_10007C77C((uint64_t)v9, v22, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          sub_10011ED3C();
        v10 = v23;
        v18 = v23[2];
        if (v18 >= v23[3] >> 1)
        {
          sub_10011ED3C();
          v10 = v23;
        }
        v10[2] = v18 + 1;
        sub_10007C77C(v22, (uint64_t)v10 + v12 + v18 * v13, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      }
      ++v11;
      a1 = v14;
      if (v11 == v20)
        goto LABEL_16;
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
  }
}

void sub_1005EC060(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  char *v21;
  uint64_t v22[7];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  type metadata accessor for SearchLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100099B54(v4, v22[0]);
  type metadata accessor for Location.Identifier(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v22[3] = v6;
  v7 = sub_10009876C();
  v8 = type metadata accessor for LocationModel(v7);
  v22[5] = *(_QWORD *)(v8 - 8);
  v22[6] = v8;
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v22[4] = v10;
  v23 = sub_1000DACF4();
  v22[1] = *(_QWORD *)(v23 - 8);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_1000BA294(&qword_100BC3118);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  v13 = sub_1000C4668();
  v14 = type metadata accessor for Location(v13);
  __chkstk_darwin(v14);
  sub_10009883C();
  __chkstk_darwin(v15);
  type metadata accessor for PreviewLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_10009883C();
  __chkstk_darwin(v17);
  v24 = a1;
  sub_100095B78(a1, (uint64_t)v22 - v18, v19);
  v20 = sub_1000DF7CC();
  v21 = (char *)sub_1005EC208 + 4 * byte_1009B6864[swift_getEnumCaseMultiPayload(v20)];
  __asm { BR              X10 }
}

void sub_1005EC208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10009C94C(v0, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
  sub_10009C94C(v1, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  sub_1000C5708(v5);
  LocationModel.init(location:locationOfInterest:)(v1, v5);
  sub_1000215BC(*(_QWORD *)(v6 - 96), type metadata accessor for PreviewLocation);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v3);
  sub_100098640();
}

void LocationModel.locationCompositionState.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void (*v86)(uint64_t, uint64_t, __n128);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  void (*v152)(uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t *, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(uint64_t, uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t (*v186)(uint64_t);
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(uint64_t, uint64_t, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  void (*v235)(uint64_t);
  uint64_t v236;

  v233 = a1;
  sub_1000E7CC0();
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v228 = v8;
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_1000986FC();
  v221 = v10;
  sub_10009D2A4();
  __chkstk_darwin(v11);
  sub_1000860D0();
  v220 = v12;
  sub_10009D2A4();
  __chkstk_darwin(v13);
  sub_1000860D0();
  v219 = v14;
  sub_10009D2A4();
  __chkstk_darwin(v15);
  v224 = (char *)&v212 - v16;
  sub_10009D2A4();
  __chkstk_darwin(v17);
  sub_100079F7C();
  v225 = v18;
  v234 = sub_1000DACF4();
  v232 = *(_QWORD *)(v234 - 8);
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_1000986FC();
  v218 = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  sub_1000860D0();
  v213 = v22;
  sub_10009D2A4();
  __chkstk_darwin(v23);
  sub_1000860D0();
  v223 = v24;
  sub_10009D2A4();
  __chkstk_darwin(v25);
  sub_1000860D0();
  v214 = v26;
  sub_10009D2A4();
  __chkstk_darwin(v27);
  sub_100079F7C();
  v216 = v28;
  v29 = sub_10009876C();
  v231 = type metadata accessor for Location(v29);
  v236 = *(_QWORD *)(v231 - 8);
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_100099B54(v31, v212);
  sub_1000BA294(&qword_100BC3118);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  sub_1000986FC();
  v217 = v33;
  sub_10009D2A4();
  __chkstk_darwin(v34);
  sub_1000860D0();
  v215 = v35;
  sub_10009D2A4();
  __chkstk_darwin(v36);
  sub_1000860D0();
  v227 = (uint64_t *)v37;
  sub_10009D2A4();
  __chkstk_darwin(v38);
  sub_1000860D0();
  v226 = v39;
  sub_10009D2A4();
  __chkstk_darwin(v40);
  sub_1000860D0();
  v229 = v41;
  sub_10009D2A4();
  __chkstk_darwin(v42);
  sub_1000860D0();
  v222 = v43;
  sub_10009D2A4();
  __chkstk_darwin(v44);
  sub_1000C0E4C();
  __chkstk_darwin(v45);
  sub_100099338();
  v47 = __chkstk_darwin(v46);
  v49 = (char *)&v212 - v48;
  v50 = __chkstk_darwin(v47);
  v52 = (char *)&v212 - v51;
  v53 = __chkstk_darwin(v50);
  v55 = (char *)&v212 - v54;
  __chkstk_darwin(v53);
  v57 = (char *)&v212 - v56;
  type metadata accessor for CurrentLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v58);
  v59 = sub_1000C4668();
  type metadata accessor for LocationModel(v59);
  sub_1000BD5A0();
  __chkstk_darwin(v60);
  sub_10004A2E8();
  sub_10009C94C(v4, (uint64_t)v235, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v4, v2);
  if (v61 == enum case for LocationModel.current(_:))
  {
    v227 = (uint64_t *)v49;
    v228 = v52;
    v229 = v3;
    v226 = v1;
    sub_1000D0DB0(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 96));
    v62 = v4 + *(int *)(sub_1000BA294(&qword_100BC3488) + 48);
    v235 = (void (*)(uint64_t))v5;
    sub_10007C77C(v4, v5, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
    sub_1005ED214(v62, (uint64_t)v57);
    sub_1000C20F4((uint64_t)v57, v63, &qword_100BC3118);
    v64 = v234;
    v65 = sub_100088FC8((uint64_t)v55, 1, v234);
    v66 = (uint64_t)v57;
    if (v92)
    {
      sub_10009518C(v65, &qword_100BC3118);
      v79 = v232;
    }
    else
    {
      v78 = v230;
      sub_1000DC9B8();
      v79 = v232;
      v80 = sub_10009D710((uint64_t)v55);
      v81 = Location.name.getter(v80);
      v83 = v82;
      v62 = v84;
      v85 = v57;
      v86 = *(void (**)(uint64_t, uint64_t, __n128))(v236 + 8);
      v87 = v231;
      v86(v78, v231, v81);
      v88 = (uint64_t)v85;
      v89 = (uint64_t)v85;
      v90 = (uint64_t)v228;
      sub_1000C20F4(v89, v91, &qword_100BC3118);
      sub_100088FC8(v90, 1, v64);
      if (v92)
      {
        sub_1000986E8();
        sub_10009518C(v93, &qword_100BC3118);
        v66 = v88;
LABEL_14:
        v94 = v225;
        v95 = v229;
        sub_1000C20F4(v66, v67, &qword_100BC3118);
        sub_100088FC8(v95, 1, v64);
        if (v92)
        {
          v96 = &qword_100BC3118;
          v97 = v95;
        }
        else
        {
          sub_1000DC9B8();
          v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 8))(v95, v64);
          Location.name.getter(v102);
          v78 = v103;
          sub_1000C1F48();
          v105 = sub_100099A8C(v104);
          CurrentLocation.location.getter(v105);
          sub_100088FC8((uint64_t)v94, 1, v87);
          if (v106)
          {
            sub_1000986E8();
            v96 = &qword_100BC35F8;
            v97 = (uint64_t)v94;
          }
          else
          {
            v121 = sub_1001099E8();
            v123 = v122;
            sub_100099A8C((uint64_t)v94);
            if (!v123)
            {
              sub_1000986E8();
LABEL_33:
              v129 = v223;
              v130 = (uint64_t)v224;
              v131 = v235;
              CurrentLocation.location.getter(v128);
              v132 = sub_1000BCF40();
              v134 = sub_100088FC8(v132, v133, v87);
              if (v92)
              {
                sub_100021A14(v130, &qword_100BC35F8);
              }
              else
              {
                v131 = (void (*)(uint64_t))v130;
                v78 = Location.sanitizedSecondaryName.getter(v134);
                v136 = v135;
                v137 = (*(uint64_t (**)(uint64_t, uint64_t))(v236 + 8))(v130, v87);
                if (v136)
                {
                  v138 = sub_100088FC8(v66, 1, v64);
                  if (v92)
                  {
                    sub_1000BA294(&qword_100BE55A0);
                    sub_1000DA678();
                    v139 = CurrentLocation.name.getter();
                    v141 = v140;
                    sub_1000998D4(v139, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
                    sub_100094EEC(v142, &qword_100BC3118);
                    *v94 = v78;
                    v94[1] = v136;
                    v94[2] = v139;
                    v94[3] = v141;
                    v162 = v129;
                    v163 = 1;
                    goto LABEL_50;
                  }
                  sub_1000998D4(v138, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
                  sub_1000986E8();
LABEL_41:
                  v143 = v222;
                  sub_1005ED214(v66, v222);
                  sub_100088FC8(v143, 1, v64);
                  if (v92)
                  {
                    sub_100021A14(v143, &qword_100BC3118);
                    sub_1000BA294(&qword_100BE55A0);
                    sub_1000DDD24();
                    v169 = sub_1000C4C84(v144, v145, v146, v64);
                    v170 = (uint64_t *)v143;
                  }
                  else
                  {
                    v147 = sub_1000D074C();
                    v131(v147);
                    v148 = sub_1000BA294(&qword_100BE55A0);
                    v149 = sub_1000E7278(v148);
                    v131((uint64_t)v149);
                    v169 = sub_1000C4C84(v143, 0, 1, v64);
                    v170 = (uint64_t *)v78;
                  }
                  goto LABEL_51;
                }
              }
              sub_1000998D4(v137, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
              goto LABEL_41;
            }
            v125 = v226;
            sub_1000CDD54(v66, v124, &qword_100BC3118);
            v126 = sub_1000BCF40();
            sub_100088FC8(v126, v127, v64);
            if (!v92)
            {
              sub_1000215BC((uint64_t)v235, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
              v164 = *(void (**)(uint64_t, uint64_t, uint64_t))(v232 + 32);
              v165 = v214;
              v164(v214, v125, v64);
              v166 = sub_1000BA294(&qword_100BE55A0);
              v167 = v233;
              v168 = (uint64_t)v233 + *(int *)(v166 + 48);
              sub_100094EEC(v166, &qword_100BC3118);
              *v167 = v121;
              v167[1] = v123;
              v167[2] = v78;
              v167[3] = v62;
              v164(v168, v165, v64);
              v169 = sub_1000C4C84(v168, 0, 1, v64);
              v170 = v167;
LABEL_51:
              v171 = 0;
LABEL_75:
              swift_storeEnumTagMultiPayload(v170, v169, v171);
              goto LABEL_76;
            }
            sub_1000986E8();
            sub_1000986C4();
            v96 = &qword_100BC3118;
            v97 = v125;
          }
        }
        sub_100021A14(v97, v96);
        goto LABEL_33;
      }
      sub_1000DC9B8();
      v114 = sub_10009D710(v90);
      v115 = Location.sanitizedSecondaryName.getter(v114);
      v116 = v78;
      v117 = v115;
      v119 = v118;
      ((void (*)(uint64_t, uint64_t))v86)(v116, v87);
      if (!v119)
      {
        sub_1000986E8();
        v87 = v231;
        v66 = v88;
        goto LABEL_6;
      }
      v66 = v88;
      v120 = v88;
      v94 = v227;
      sub_10003773C(v120, (uint64_t)v227, &qword_100BC3118);
      sub_100088FC8((uint64_t)v94, 1, v64);
      if (!v92)
      {
        sub_1000215BC((uint64_t)v235, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
        v159 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v79 + 32);
        v159(v216, v94, v64);
        sub_1000BA294(&qword_100BE55A0);
        sub_1000DA678();
        sub_100094EEC(v160, &qword_100BC3118);
        *v94 = v117;
        v94[1] = v119;
        v94[2] = v83;
        v94[3] = v62;
        v161 = sub_1000DF7CC();
        ((void (*)(uint64_t))v159)(v161);
        v162 = v79;
        v163 = 0;
LABEL_50:
        v169 = sub_1000C4C84(v162, v163, 1, v64);
        v170 = v94;
        goto LABEL_51;
      }
      sub_1000986E8();
      sub_1000986C4();
      sub_100021A14((uint64_t)v94, &qword_100BC3118);
    }
    v87 = v231;
LABEL_6:
    v78 = v230;
    goto LABEL_14;
  }
  v69 = v226;
  v68 = (uint64_t)v227;
  v70 = (uint64_t)v228;
  v71 = v234;
  if (v61 == enum case for LocationModel.saved(_:))
  {
    sub_1000D0DB0(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 96));
    v72 = v4 + *(int *)(sub_1000BA294(&qword_100BC3480) + 48);
    sub_10007C77C(v4, v70, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
    v73 = v229;
    sub_1005ED214(v72, v229);
    v74 = (void (*)(uint64_t))v69;
    sub_10003773C(v73, v69, &qword_100BC3118);
    v75 = v71;
    v76 = sub_100088FC8(v69, 1, v71);
    if (v92)
    {
      sub_10009518C(v76, &qword_100BC3118);
      v77 = v231;
    }
    else
    {
      v107 = v230;
      LocationOfInterest.location.getter(v76);
      v108 = sub_1000C0AE8();
      Location.name.getter(v108);
      v235 = (void (*)(uint64_t))v109;
      sub_1000C1F48();
      v110 = v231;
      sub_10009D710(v107);
      v74 = (void (*)(uint64_t))v68;
      sub_10003773C(v73, v68, &qword_100BC3118);
      v112 = sub_100088FC8(v68, 1, v75);
      if (v111)
      {
        sub_1000986E8();
        sub_10009518C(v113, &qword_100BC3118);
        v77 = v110;
      }
      else
      {
        v150 = v49;
        LocationOfInterest.location.getter(v112);
        sub_1000C0AE8();
        v151 = sub_1001099E8();
        v74 = v152;
        sub_10009D710(v107);
        v77 = v110;
        if (v74)
        {
          v154 = v229;
          v155 = v215;
          sub_1000CDD54(v229, v153, &qword_100BC3118);
          v156 = sub_1000BCF40();
          v158 = sub_100088FC8(v156, v157, v75);
          if (!v92)
          {
            sub_100098A8C(v158, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
            v206 = *(void (**)(uint64_t, uint64_t, uint64_t))(v232 + 32);
            v207 = v151;
            v208 = v213;
            v206(v213, v155, v75);
            v209 = sub_1000BA294(&qword_100BE55A0);
            v210 = v233;
            v211 = (uint64_t)v233 + *(int *)(v209 + 48);
            sub_100021A14(v154, &qword_100BC3118);
            *v210 = v207;
            v210[1] = (uint64_t)v74;
            v210[2] = (uint64_t)v235;
            v210[3] = (uint64_t)v150;
            v206(v211, v208, v75);
            v169 = sub_1000C4C84(v211, 0, 1, v75);
            v170 = v210;
LABEL_74:
            v171 = 1;
            goto LABEL_75;
          }
          swift_bridgeObjectRelease(v150);
          sub_1000986C4();
          sub_100021A14(v155, &qword_100BC3118);
        }
        else
        {
          swift_bridgeObjectRelease(v150);
        }
      }
    }
    v173 = v220;
    v172 = v221;
    v174 = v219;
    sub_1000C1B58();
    v175 = sub_100088FC8(v174, 1, v77);
    if (v92)
    {
      v176 = v174;
    }
    else
    {
      v74 = (void (*)(uint64_t))v174;
      Location.name.getter(v175);
      v178 = v177;
      sub_1000C1F48();
      sub_100099A8C(v179);
      sub_1000C1B58();
      sub_100088FC8((uint64_t)v173, 1, v77);
      if (!v180)
      {
        v74 = (void (*)(uint64_t))sub_1001099E8();
        v202 = v201;
        v203 = sub_100099A8C((uint64_t)v173);
        if (v202)
        {
          sub_100098A8C(v203, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
          v204 = sub_1000BA294(&qword_100BE55A0);
          v173 = v233;
          v205 = (uint64_t)v233 + *(int *)(v204 + 48);
          sub_100021A14(v229, &qword_100BC3118);
          *v173 = (uint64_t)v74;
          v173[1] = v202;
          v173[2] = v178;
          v173[3] = v174;
          v193 = v205;
          goto LABEL_73;
        }
        sub_1000986E8();
        v172 = v221;
LABEL_60:
        sub_1000C1B58();
        v181 = sub_100088FC8(v172, 1, v77);
        if (v92)
        {
          sub_100021A14(v172, &qword_100BC35F8);
        }
        else
        {
          v74 = (void (*)(uint64_t))v172;
          v182 = Location.sanitizedSecondaryName.getter(v181);
          v184 = v183;
          v185 = sub_1000DF7CC();
          v187 = v186(v185);
          if (v184)
          {
            v188 = v229;
            v189 = sub_100088FC8(v229, 1, v75);
            if (v92)
            {
              sub_1000BA294(&qword_100BE55A0);
              sub_1000DA678();
              v190 = SavedLocation.name.getter();
              v192 = v191;
              sub_100098A8C(v190, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
              sub_100021A14(v188, &qword_100BC3118);
              *v173 = v182;
              v173[1] = v184;
              v173[2] = v190;
              v173[3] = v192;
              v193 = v172;
LABEL_73:
              v169 = sub_1000C4C84(v193, 1, 1, v75);
              v170 = v173;
              goto LABEL_74;
            }
            sub_100098A8C(v189, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
            sub_1000986E8();
LABEL_68:
            v194 = v217;
            sub_1005ED214(v188, v217);
            sub_100088FC8(v194, 1, v75);
            if (v92)
            {
              sub_100021A14(v194, &qword_100BC3118);
              sub_1000BA294(&qword_100BE55A0);
              sub_1000DDD24();
              v169 = sub_1000C4C84(v195, v196, v197, v75);
              v170 = (uint64_t *)v194;
            }
            else
            {
              v198 = sub_1000D074C();
              v74(v198);
              v199 = sub_1000BA294(&qword_100BE55A0);
              v200 = sub_1000E7278(v199);
              v74((uint64_t)v200);
              v169 = sub_1000C4C84(v194, 0, 1, v75);
              v170 = (uint64_t *)v188;
            }
            goto LABEL_74;
          }
        }
        sub_100098A8C(v187, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        v188 = v229;
        goto LABEL_68;
      }
      sub_1000986E8();
      v176 = (uint64_t)v173;
    }
    sub_100021A14(v176, &qword_100BC35F8);
    goto LABEL_60;
  }
  sub_1000BA294(&qword_100BE55A0);
  sub_1000DDD24();
  v101 = sub_1000C4C84(v98, v99, v100, v71);
  sub_10009525C((uint64_t)v49, v101);
  sub_1000D0DB0(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
LABEL_76:
  sub_100098640();
}

uint64_t sub_1005ED214(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC3118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1005ED25C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void (*v4)(char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(void (*)(char *, uint64_t), unint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a2;
  v8 = type metadata accessor for LocationModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100099234();
  sub_1000BA294(&qword_100C0B8D0);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_10009883C();
  v13 = v11 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v30 - v15;
  v17 = *(_QWORD *)(a3 + 16);
  if (v17)
  {
    v31 = (char *)&v30 - v15;
    v32 = v13;
    v33 = a4;
    v18 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v19 = *(_QWORD *)(v9 + 72);
    v20 = *(void (**)(void (*)(char *, uint64_t), unint64_t, uint64_t, __n128))(v9 + 16);
    v21 = swift_bridgeObjectRetain(a3);
    while (1)
    {
      v20(v4, v18, v8, v21);
      if ((sub_1005ED468(v4, a1, a3, v34) & 1) != 0)
        break;
      sub_100110358();
      v18 += v19;
      if (!--v17)
      {
        sub_10009934C();
        v22 = 1;
        v13 = v32;
        a4 = v33;
        v16 = v31;
        goto LABEL_8;
      }
    }
    v23 = sub_10009934C();
    v16 = v31;
    (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t, double))(v9 + 32))(v31, v4, v8, v23);
    v22 = 0;
    v13 = v32;
    a4 = v33;
  }
  else
  {
    v22 = 1;
  }
LABEL_8:
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, v22, 1, v8);
  sub_1000CDD54((uint64_t)v16, v24, &qword_100C0B8D0);
  v25 = sub_1000BCF40();
  v27 = sub_100088FC8(v25, v26, v8);
  if (v28)
  {
    sub_100021A14((uint64_t)v16, &qword_100C0B8D0);
    sub_100021A14(v13, &qword_100C0B8D0);
    v29 = type metadata accessor for LocationOfInterest(0);
    _s7Weather24LocationCompositionStateOwst_0(a4, 1, 1, v29);
  }
  else
  {
    LocationModel.locationOfInterest.getter(v27);
    sub_100021A14((uint64_t)v16, &qword_100C0B8D0);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v8);
  }
  sub_100098640();
}

uint64_t sub_1005ED468(void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  _QWORD *v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(char *, uint64_t);
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, void (*)(char *, uint64_t), uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  v116 = a4;
  v117 = a2;
  v118 = a3;
  sub_1000BA294(&qword_100BC61F0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100099234();
  sub_1000BA294(&qword_100BC3118);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_10004A2E8();
  v125 = type metadata accessor for Location(0);
  v113 = *(_QWORD *)(v125 - 8);
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v110 = v14;
  v114 = sub_1000BA294(&qword_100BCE968);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100088FDC();
  v120 = v16;
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_1000986FC();
  v112 = v18;
  sub_10009D2A4();
  __chkstk_darwin(v19);
  sub_1000860D0();
  v115 = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  sub_100079F7C();
  v127 = v22;
  v23 = sub_10009876C();
  v130 = type metadata accessor for SavedLocation(v23);
  v123 = *(_QWORD *)(v130 - 8);
  sub_10009D98C();
  __chkstk_darwin(v24);
  sub_1000986FC();
  v129 = v25;
  sub_10009D2A4();
  __chkstk_darwin(v26);
  sub_1000860D0();
  v122 = v27;
  sub_10009D2A4();
  __chkstk_darwin(v28);
  v121 = (uint64_t)&v110 - v29;
  sub_10009D2A4();
  __chkstk_darwin(v30);
  sub_100079F7C();
  v126 = v31;
  v32 = sub_10009876C();
  type metadata accessor for LocationModel(v32);
  sub_1000BD5A0();
  __chkstk_darwin(v33);
  sub_1000986FC();
  v111 = v34;
  sub_10009D2A4();
  __chkstk_darwin(v35);
  sub_100099338();
  __chkstk_darwin(v36);
  sub_1000C0E4C();
  __chkstk_darwin(v37);
  sub_1000860D0();
  v132 = v38;
  sub_10009D2A4();
  __chkstk_darwin(v39);
  v41 = (char *)&v110 - v40;
  v131 = *(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v9 + 16);
  v131((char *)&v110 - v40, a1, v5);
  v128 = *(uint64_t (**)(char *, uint64_t))(v9 + 88);
  v42 = v128(v41, v5);
  v124 = v9;
  v119 = v41;
  if (v42 == enum case for LocationModel.current(_:))
  {
    v120 = *(void (**)(char *, uint64_t))(v9 + 96);
    v120(v41, v5);
    v43 = (uint64_t)&v41[*(int *)(sub_1000BA294(&qword_100BC3488) + 48)];
    v115 = v7;
    sub_1005ED214(v43, v7);
    v44 = *(_QWORD *)(v118 + 16);
    if (v44)
    {
      v45 = v118 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      v127 = *(_QWORD *)(v9 + 72);
      LODWORD(v126) = enum case for LocationModel.saved(_:);
      v46 = swift_bridgeObjectRetain(v118);
      v47 = _swiftEmptyArrayStorage;
      do
      {
        v48 = (void (*)(uint64_t))v131;
        ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v131)(v132, v45, v5, v46);
        v49 = sub_1000DF7CC();
        v48(v49);
        v50 = sub_1000DC74C();
        v51 = ((uint64_t (*)(uint64_t))v128)(v50);
        if (v51 == (_DWORD)v126)
        {
          v52 = sub_1000DC74C();
          ((void (*)(uint64_t))v120)(v52);
          v53 = v4 + *(int *)(sub_1000BA294(&qword_100BC3480) + 48);
          v54 = v4;
          v125 = v44;
          v55 = v4;
          v56 = v47;
          v57 = v9;
          v58 = v5;
          v59 = v122;
          v60 = (uint64_t)v8;
          v8 = &type metadata accessor for SavedLocation;
          sub_1000CFE74(v54, v122);
          sub_100021A14(v53, &qword_100BC3118);
          v61 = v59;
          v5 = v58;
          v9 = v57;
          v47 = v56;
          v4 = v55;
          v44 = v125;
          sub_1000CFE74(v61, v60);
          sub_1000C6EE0(v60, 0, 1);
          (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v132, v5);
        }
        else
        {
          v62 = *(void (**)(uint64_t))(v9 + 8);
          v63 = sub_1000DC74C();
          v62(v63);
          v60 = (uint64_t)v8;
          sub_1000C6EE0((uint64_t)v8, 1, 1);
          ((void (*)(uint64_t, uint64_t))v62)(v132, v5);
        }
        if (_s7Weather24LocationCompositionStateOwet_0(v60, 1, (uint64_t)v8) == 1)
        {
          sub_100021A14(v60, &qword_100BC61F0);
          v8 = (void *)v60;
        }
        else
        {
          v64 = v121;
          sub_1000CFE74(v60, v121);
          sub_1000CFE74(v64, v129);
          v8 = (void *)v60;
          if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          {
            sub_1000BF204();
            v47 = v66;
          }
          v65 = v47[2];
          if (v65 >= v47[3] >> 1)
          {
            sub_1000BF204();
            v47 = v67;
          }
          v47[2] = v65 + 1;
          sub_10007C77C(v129, (uint64_t)v47+ ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80))+ *(_QWORD *)(v123 + 72) * v65, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
          v9 = v124;
        }
        v45 += v127;
        --v44;
      }
      while (v44);
      swift_bridgeObjectRelease(v118);
    }
    else
    {
      v47 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRetain(v116);
    sub_1005EBE38(v90, (uint64_t)v47);
    v92 = v91;
    v93 = *(_QWORD *)(v91 + 16);
    v94 = v115;
    if (v93)
    {
      v95 = v91 + ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80));
      v96 = *(_QWORD *)(v123 + 72);
      v97 = v93 - 1;
      do
      {
        v98 = v97;
        v99 = sub_1000DF7CC();
        v78 = static SavedLocation.== infix(_:_:)(v99, v100, v101);
        if ((v78 & 1) != 0)
          break;
        v97 = v98 - 1;
        v95 += v96;
      }
      while (v98);
    }
    else
    {
      v78 = 0;
    }
    sub_100021A14(v94, &qword_100BC3118);
    swift_bridgeObjectRelease(v92);
    sub_1000215BC((uint64_t)v119, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  }
  else if (v42 == enum case for LocationModel.saved(_:))
  {
    (*(void (**)(char *, uint64_t))(v124 + 96))(v41, v5);
    v68 = v126;
    sub_10007C77C((uint64_t)v41, v126, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
    v69 = v127;
    v71 = SavedLocation.location.getter(v70);
    v72 = v115;
    SavedLocation.location.getter(v71);
    v73 = (uint64_t)v120;
    v74 = (uint64_t)v120 + *(int *)(v114 + 48);
    v75 = sub_1000DF7CC();
    sub_10003773C(v75, v76, &qword_100BC35F8);
    sub_10003773C(v72, v74, &qword_100BC35F8);
    v77 = v125;
    if (_s7Weather24LocationCompositionStateOwet_0(v73, 1, v125) == 1)
    {
      sub_100099298(v72);
      sub_100099298(v69);
      sub_1000215BC(v68, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      if (_s7Weather24LocationCompositionStateOwet_0(v74, 1, v77) == 1)
        v78 = -1;
      else
        v78 = 0;
    }
    else
    {
      v102 = v112;
      sub_10003773C(v73, v112, &qword_100BC35F8);
      if (_s7Weather24LocationCompositionStateOwet_0(v74, 1, v77) == 1)
      {
        sub_100021A14(v72, &qword_100BC35F8);
        sub_100021A14(v69, &qword_100BC35F8);
        sub_1000215BC(v68, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v102, v77);
        v78 = 0;
      }
      else
      {
        v103 = v113;
        v104 = v72;
        v105 = v110;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 32))(v110, v74, v77);
        v106 = sub_1000FEBD8();
        v78 = dispatch thunk of static Equatable.== infix(_:_:)(v102, v105, v77, v106);
        v107 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
        v107(v105, v77);
        sub_100099298(v104);
        sub_100099298(v127);
        sub_1000215BC(v126, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        v107(v102, v77);
      }
    }
    sub_100099298(v73);
    v108 = sub_1000BA294(&qword_100BC3480);
    sub_100021A14((uint64_t)&v119[*(int *)(v108 + 48)], &qword_100BC3118);
  }
  else
  {
    if (qword_100BC2418 != -1)
      swift_once(&qword_100BC2418, sub_1006F3798);
    v79 = type metadata accessor for Logger(0);
    sub_1000AECD4(v79, (uint64_t)qword_100CAF040);
    v80 = (void (*)(uint64_t, uint64_t, uint64_t))v131;
    v81 = ((uint64_t (*)(uint64_t, void (*)(char *, uint64_t), uint64_t))v131)(v6, a1, v5);
    v82 = Logger.logObject.getter(v81);
    v84 = static os_log_type_t.error.getter(v82, v83);
    if (os_log_type_enabled(v82, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(12, -1);
      v132 = swift_slowAlloc(32, -1);
      v135 = v132;
      *(_DWORD *)v85 = 136446210;
      v130 = (uint64_t)(v85 + 4);
      v86 = v111;
      v80(v111, v6, v5);
      v87 = String.init<A>(describing:)(v86);
      a1 = (void (*)(char *, uint64_t))v88;
      v133 = sub_1000CE1C8(v87, v88, &v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134);
      swift_bridgeObjectRelease(a1);
      sub_1000D915C();
      _os_log_impl((void *)&_mh_execute_header, v82, v84, "Failed find matched savedLocation with unknown type=%{public}s", v85, 0xCu);
      v89 = v132;
      swift_arrayDestroy(v132, 1);
      sub_1000986F0(v89);
      sub_1000986F0((uint64_t)v85);
    }
    else
    {
      sub_1000D915C();
    }

    a1(v119, v5);
    v78 = 0;
  }
  return v78 & 1;
}

BOOL sub_1005EDDC0()
{
  return sub_100130F10();
}

uint64_t sub_1005EDDE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v5 = sub_1008C0B60(a1, a2);
  v7 = v2[5];
  v6 = v2[6];
  sub_1000DB418(v2 + 2, v7);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v7, v6);
  v9 = sub_1000BA294(&qword_100BCB640);
  v10 = sub_100098740(v9, 48);
  *(_OWORD *)(v10 + 16) = xmmword_1009890E0;
  *(_QWORD *)(v10 + 32) = v5;
  *(_QWORD *)(v10 + 40) = v8;
  v14 = v10;
  specialized Array._endMutation()(v10);
  v11 = sub_100098740((uint64_t)&unk_100B83878, 24);
  *(_QWORD *)(v11 + 16) = v14;
  v12 = type metadata accessor for WireframeInterestToken();
  result = sub_100098740(v12, 33);
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = sub_1005EE038;
  *(_QWORD *)(result + 24) = v11;
  return result;
}

void sub_1005EDEC8(uint64_t a1, uint64_t a2)
{
  sub_1008C100C(a1, a2);
}

BOOL sub_1005EDEE8()
{
  return sub_1005EDDC0();
}

uint64_t sub_1005EDF0C(uint64_t a1, uint64_t a2)
{
  return sub_1005EDDE4(a1, a2);
}

void sub_1005EDF2C(uint64_t a1, uint64_t a2)
{
  sub_1005EDEC8(a1, a2);
}

void sub_1005EDF4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;

  if (!((unint64_t)a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v2)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 < 0)
    v5 = a1;
  else
    v5 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v2 = _CocoaArrayWrapper.endIndex.getter(v5);
  if (!v2)
    goto LABEL_9;
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }
      else
      {
        v4 = *(_QWORD *)(a1 + 8 * i + 32);
        swift_retain();
      }
      sub_1008C1194();
      swift_release(v4);
    }
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t sub_1005EE014()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1005EE038()
{
  uint64_t v0;

  sub_1005EDF4C(*(_QWORD *)(v0 + 16));
}

void sub_1005EE040(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100079F58();
  sub_1000BA294(&qword_100BCCC50);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000DD114();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_1000C2D54();
  v6 = sub_100099928();
  sub_1000CCFB4(v6);
  if (v7)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(a1, "coordinate");
    v8 = sub_100098778();
    _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, v8);
    v9 = sub_1000BC6A0();
    sub_1000B4BE0(v9, v10, v11, v12, v13);
    v14 = sub_1000BA294(&qword_100BF5B10);
    sub_1000860C4(v14);
    sub_1000C4C98();
    sub_1000C612C();
  }
}

uint64_t sub_1005EE120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_100079F58();
  sub_1000BA294(&qword_100BCCC50);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Location.Identifier(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Location(0);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  SavedLocation.Placeholder.identifier.getter(v11);
  TimeZone.init(abbreviation:)(5524807, 0xE300000000000000);
  v12 = sub_100099928();
  result = sub_1000CCFB4(v12);
  if (v14)
  {
    __break(1u);
  }
  else
  {
    v15 = sub_100098778();
    _s7Weather24LocationCompositionStateOwst_0(v0, 1, 1, v15);
    Location.init(identifier:timeZone:lastRefreshDate:searchTitle:searchSubtitle:preciseName:)(v7, v4, v0, 0, 0, 0, 0, 0, 0);
    v16 = sub_1000BA294(&qword_100BF5B10);
    sub_1000860C4(v16);
    return Promise.init(value:)(v10);
  }
  return result;
}

uint64_t sub_1005EE288(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for Location(0);
  v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v6 = sub_1000BA294(&qword_100BF5B10);
  sub_1000860C4(v6);
  return sub_1000C4C98();
}

void sub_1005EE304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_100079F58();
  sub_1000BA294(&qword_100BCCC50);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_1000DD114();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000C2D54();
  v4 = sub_100099928();
  sub_1000CCFB4(v4);
  if (v5)
  {
    __break(1u);
  }
  else
  {
    v6 = sub_100098778();
    _s7Weather24LocationCompositionStateOwst_0(v0, 1, 1, v6);
    v7 = sub_1000BC6A0();
    sub_1000B4BE0(v7, v8, v9, v10, v11);
    v12 = sub_1000BA294(&qword_100BF5B10);
    sub_1000860C4(v12);
    sub_1000C4C98();
    sub_1000C612C();
  }
}

uint64_t type metadata accessor for StubGeocodeManager()
{
  return objc_opt_self(_TtC7Weather18StubGeocodeManager);
}

void sub_1005EE3F0(void *a1)
{
  sub_1005EE040(a1);
}

void sub_1005EE408()
{
  sub_1005EE304();
}

uint64_t sub_1005EE420()
{
  return sub_1005EE120();
}

uint64_t sub_1005EE43C(uint64_t a1)
{
  return sub_1005EE288(a1);
}

uint64_t sub_1005EE458(double a1, double a2)
{
  return static Gradient.== infix(_:_:)() & (a1 == a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for SunriseSunsetChartBackground(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

double destroy for SunriseSunsetChartBackground(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*a1).n128_u64[0];
  return result;
}

uint64_t *assignWithCopy for SunriseSunsetChartBackground(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for SunriseSunsetChartBackground(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for SunriseSunsetChartBackground()
{
  return &type metadata for SunriseSunsetChartBackground;
}

uint64_t sub_1005EE554(uint64_t a1, uint64_t a2)
{
  return sub_1005EE458(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

uint64_t *sub_1005EE574(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    a1[1] = a2[1];
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
    {
      v11 = sub_1000BA294(&qword_100BD4280);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
    }
    v13 = a3[7];
    v14 = a3[8];
    v15 = (uint64_t *)((char *)v4 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    *(uint64_t *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1005EE698(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for URL(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = sub_1000BA294(&qword_100BD4280);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  v14 = a3[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1005EE804(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for URL(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000BA294(&qword_100BD4280);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_1005EE8DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for URL(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = sub_1000BA294(&qword_100BD4280);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  v14 = a3[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t sub_1005EEA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BD4280);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1005EEAA0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BD4280);
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

id sub_1005EEB10()
{
  _BYTE *v0;
  _BOOL4 v1;
  void *v2;
  __n128 v4;
  uint64_t v5;
  _BOOL4 v6;

  if (*v0)
  {
    if (*v0 == 1)
    {
      v1 = UIAccessibilityDarkerSystemColorsEnabled();
      v2 = (void *)objc_opt_self(UIColor);
      if (v1)
        return sub_1000BB1F0(objc_msgSend(v2, "labelColor"));
      return sub_1000BB1F0(objc_msgSend(v2, "secondaryLabelColor"));
    }
    else
    {
      v6 = UIAccessibilityDarkerSystemColorsEnabled();
      v2 = (void *)objc_opt_self(UIColor);
      if (v6)
        return sub_1000BB1F0(objc_msgSend(v2, "labelColor"));
      return sub_1000BB1F0(objc_msgSend(v2, "tertiaryLabelColor"));
    }
  }
  else
  {
    sub_1000ADFCC();
    v5 = static Color.primary.getter(v4);
    return (id)UIColor.init(_:)(v5);
  }
}

id sub_1005EEBD0()
{
  _BYTE *v0;
  void *v1;
  const UIFontTextStyle *v2;
  id v3;
  id v4;

  if (*v0)
  {
    if (*v0 == 1)
    {
      v1 = (void *)objc_opt_self(UIFont);
      v2 = &UIFontTextStyleCaption2;
    }
    else
    {
      v3 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
      v4 = objc_msgSend(v3, "userInterfaceIdiom");

      v1 = (void *)objc_opt_self(UIFont);
      if (v4)
        v2 = &UIFontTextStyleFootnote;
      else
        v2 = &UIFontTextStyleCaption2;
    }
  }
  else
  {
    v1 = (void *)objc_opt_self(UIFont);
    v2 = &UIFontTextStyleFootnote;
  }
  return sub_1000BB1F0(objc_msgSend(v1, "preferredFontForTextStyle:", *v2));
}

uint64_t storeEnumTagSinglePayload for LearnMoreAttributorViewModel.PresentationContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1005EECF0 + 4 * byte_1009B6975[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1005EED24 + 4 * byte_1009B6970[v4]))();
}

uint64_t sub_1005EED24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005EED2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005EED34);
  return result;
}

uint64_t sub_1005EED40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005EED48);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1005EED4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005EED54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LearnMoreAttributorViewModel.PresentationContext()
{
  return &type metadata for LearnMoreAttributorViewModel.PresentationContext;
}

unint64_t sub_1005EED74()
{
  unint64_t result;

  result = qword_100BF5BC0;
  if (!qword_100BF5BC0)
  {
    result = swift_getWitnessTable(&unk_1009B6A64, &type metadata for LearnMoreAttributorViewModel.PresentationContext);
    atomic_store(result, (unint64_t *)&qword_100BF5BC0);
  }
  return result;
}

uint64_t *sub_1005EEDB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v30 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for CurrentWeather(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PressureTrend(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
    v13 = v12[5];
    v14 = &v9[v13];
    v15 = &v10[v13];
    v17 = *(_QWORD *)v15;
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = v17;
    *((_QWORD *)v14 + 1) = v16;
    v18 = v12[6];
    v19 = &v9[v18];
    v20 = &v10[v18];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    v22 = v12[7];
    v23 = &v9[v22];
    v24 = &v10[v22];
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = v25;
    *(_QWORD *)&v9[v12[8]] = *(_QWORD *)&v10[v12[8]];
    v26 = v12[9];
    v27 = &v9[v26];
    v28 = &v10[v26];
    v29 = *((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1005EEEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v6 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
  v12 = v11[5];
  v13 = (_QWORD *)(v8 + v12);
  v14 = (uint64_t *)(v9 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  v17 = v11[6];
  v18 = (_QWORD *)(v8 + v17);
  v19 = (_QWORD *)(v9 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = v11[7];
  v22 = (_QWORD *)(v8 + v21);
  v23 = (_QWORD *)(v9 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  *(_QWORD *)(v8 + v11[8]) = *(_QWORD *)(v9 + v11[8]);
  v25 = v11[9];
  v26 = (_QWORD *)(v8 + v25);
  v27 = (_QWORD *)(v9 + v25);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1005EEFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v6 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
  v12 = v11[5];
  v13 = (_QWORD *)(v8 + v12);
  v14 = (_QWORD *)(v9 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = v11[6];
  v16 = (_QWORD *)(v8 + v15);
  v17 = (_QWORD *)(v9 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = v11[7];
  v19 = (_QWORD *)(v8 + v18);
  v20 = (_QWORD *)(v9 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + v11[8]) = *(_QWORD *)(v9 + v11[8]);
  v21 = v11[9];
  v22 = (_QWORD *)(v8 + v21);
  v23 = (_QWORD *)(v9 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1005EF138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;

  v6 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
  *(_OWORD *)(v8 + v11[5]) = *(_OWORD *)(v9 + v11[5]);
  *(_OWORD *)(v8 + v11[6]) = *(_OWORD *)(v9 + v11[6]);
  *(_OWORD *)(v8 + v11[7]) = *(_OWORD *)(v9 + v11[7]);
  *(_QWORD *)(v8 + v11[8]) = *(_QWORD *)(v9 + v11[8]);
  *(_OWORD *)(v8 + v11[9]) = *(_OWORD *)(v9 + v11[9]);
  return a1;
}

uint64_t sub_1005EF1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
  v12 = v11[5];
  v13 = (_QWORD *)(v8 + v12);
  v14 = (uint64_t *)(v9 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = v11[6];
  v18 = (_QWORD *)(v8 + v17);
  v19 = (uint64_t *)(v9 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = v11[7];
  v23 = (_QWORD *)(v8 + v22);
  v24 = (uint64_t *)(v9 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + v11[8]) = *(_QWORD *)(v9 + v11[8]);
  v27 = v11[9];
  v28 = (_QWORD *)(v8 + v27);
  v29 = (uint64_t *)(v9 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1005EF2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005EF308);
}

uint64_t sub_1005EF308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1000BC660();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    v7 = type metadata accessor for PressureComponentPreprocessedDataModel(0);
    v8 = v4 + *(int *)(a3 + 20);
  }
  return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
}

uint64_t sub_1005EF364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005EF370);
}

uint64_t sub_1005EF370(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_1000BC660();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    v9 = type metadata accessor for PressureComponentPreprocessedDataModel(0);
    v10 = v5 + *(int *)(a4 + 20);
  }
  return _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

void sub_1005EF3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static CurrentWeather.== infix(_:_:)(a1, a2) & 1) != 0)
  {
    v4 = *(int *)(type metadata accessor for PressureComponent(0) + 20);
    sub_1000879A4(a1 + v4, a2 + v4);
  }
}

uint64_t sub_1005EF420@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  v15 = type metadata accessor for PressureComponentPreprocessedDataModel(0);
  __chkstk_darwin(v15);
  sub_100088FDC();
  v17 = v4;
  v19 = type metadata accessor for CurrentWeather(0);
  v16 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_100088FDC();
  v18 = v5;
  v20 = sub_1000BA294(&qword_100BF5C58);
  __chkstk_darwin(v20);
  sub_100098728();
  v6 = type metadata accessor for PressureComponent(0);
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1005EF878();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PressureComponent.CodingKeys, &type metadata for PressureComponent.CodingKeys, v12, v10, v11);
  if (v2)
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  v22 = 0;
  sub_100051B90(&qword_100BDC658, (uint64_t (*)(uint64_t))&type metadata accessor for CurrentWeather, (uint64_t)&protocol conformance descriptor for CurrentWeather);
  sub_1000DD130(v19, (uint64_t)&v22, v20, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v9, v18, v19);
  v21 = 1;
  sub_100051B90(&qword_100BF5C68, type metadata accessor for PressureComponentPreprocessedDataModel, (uint64_t)&unk_100992050);
  sub_1000DD130(v15, (uint64_t)&v21, v20, v15);
  sub_1000BB1F8();
  sub_1005EF8B4(v17, v9 + *(int *)(v6 + 20));
  sub_1005EF8F8(v9, a2);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  return sub_1005EF93C(v9);
}

uint64_t sub_1005EF690(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_1000BA294(&qword_100BF5C70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1005EF878();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PressureComponent.CodingKeys, &type metadata for PressureComponent.CodingKeys, v12, v10, v11);
  v20 = 0;
  v13 = type metadata accessor for CurrentWeather(0);
  v14 = sub_100051B90(&qword_100BDC670, (uint64_t (*)(uint64_t))&type metadata accessor for CurrentWeather, (uint64_t)&protocol conformance descriptor for CurrentWeather);
  sub_1000C26D4(v3, (uint64_t)&v20, v5, v13, v14);
  if (!v2)
  {
    v15 = v3 + *(int *)(type metadata accessor for PressureComponent(0) + 20);
    v19 = 1;
    v16 = type metadata accessor for PressureComponentPreprocessedDataModel(0);
    v17 = sub_100051B90(&qword_100BF5C78, type metadata accessor for PressureComponentPreprocessedDataModel, (uint64_t)&unk_100992028);
    sub_1000C26D4(v15, (uint64_t)&v19, v5, v16, v17);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1005EF7FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005EF878();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005EF824(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005EF878();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005EF84C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005EF420(a1, a2);
}

uint64_t sub_1005EF860(_QWORD *a1)
{
  return sub_1005EF690(a1);
}

unint64_t sub_1005EF878()
{
  unint64_t result;

  result = qword_100BF5C60;
  if (!qword_100BF5C60)
  {
    result = swift_getWitnessTable(&unk_1009B6BF0, &type metadata for PressureComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5C60);
  }
  return result;
}

uint64_t sub_1005EF8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PressureComponentPreprocessedDataModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005EF8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PressureComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005EF93C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PressureComponent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for PressureComponent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1005EF9C4 + 4 * byte_1009B6A95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005EF9F8 + 4 * byte_1009B6A90[v4]))();
}

uint64_t sub_1005EF9F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005EFA00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005EFA08);
  return result;
}

uint64_t sub_1005EFA14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005EFA1CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1005EFA20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005EFA28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PressureComponent.CodingKeys()
{
  return &type metadata for PressureComponent.CodingKeys;
}

unint64_t sub_1005EFA48()
{
  unint64_t result;

  result = qword_100BF5C80;
  if (!qword_100BF5C80)
  {
    result = swift_getWitnessTable(&unk_1009B6BC8, &type metadata for PressureComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5C80);
  }
  return result;
}

unint64_t sub_1005EFA88()
{
  unint64_t result;

  result = qword_100BF5C88;
  if (!qword_100BF5C88)
  {
    result = swift_getWitnessTable(&unk_1009B6B38, &type metadata for PressureComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5C88);
  }
  return result;
}

unint64_t sub_1005EFAC8()
{
  unint64_t result;

  result = qword_100BF5C90;
  if (!qword_100BF5C90)
  {
    result = swift_getWitnessTable(&unk_1009B6B60, &type metadata for PressureComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5C90);
  }
  return result;
}

_QWORD *sub_1005EFB04(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  double *v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[3];
  _QWORD *v22;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v22 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    v5 = (double *)(a1 + 48);
    do
    {
      v6 = *(v5 - 2);
      v7 = *(v5 - 1);
      v8 = *v5;
      v5 += 3;
      v9 = a2[6];
      v10 = a2[7];
      sub_1000DB418(a2 + 3, v9);
      v11 = dispatch thunk of GeocodeManagerType.reverseGeocode(coordinate:)(v9, v10, v6, v7);
      *(double *)v21 = v6;
      *(double *)&v21[1] = v7;
      *(double *)&v21[2] = v8;
      v12 = sub_1000BA294(&qword_100BF5DE8);
      swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
      v13 = Promise.init(value:)(v21);
      v14 = (void *)zalgo.getter(v13);
      v15 = when2<A, B>(on:_:_:)(v14, v11, v13);
      swift_release(v11);
      swift_release(v13);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      v17 = v22[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
      v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
      specialized ContiguousArray._endMutation()(v18);
      --v3;
    }
    while (v3);
    v19 = v22;
    swift_release(a2);
  }
  else
  {
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }
  return v19;
}

_QWORD *sub_1005EFC88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v19 = type metadata accessor for DebugLocationManager.DebugLocation(0);
  v3 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v16[1] = v1;
    v20 = _swiftEmptyArrayStorage;
    sub_100606258();
    v7 = v20;
    v8 = sub_1000BA294(&qword_100BF5DE0);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v17 = *(_QWORD *)(v9 + 72);
    v18 = v8;
    v11 = type metadata accessor for Location(0);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    do
    {
      v13 = *(_QWORD *)(v10 + *(int *)(v18 + 48) + 16);
      v12(&v5[*(int *)(v19 + 20)], v10, v11);
      *(_QWORD *)v5 = v13;
      v20 = v7;
      v14 = v7[2];
      if (v14 >= v7[3] >> 1)
      {
        sub_100606258();
        v7 = v20;
      }
      v7[2] = v14 + 1;
      sub_1005F0F10((uint64_t)v5, (uint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v14);
      v10 += v17;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_1005EFE20(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065)
  {
    v8 = 0xE900000000000065;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x7469736E65746E69 && a2 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease(0xE900000000000079);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7469736E65746E69, 0xE900000000000079, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1005EFF7C(char a1)
{
  if (!a1)
    return 0x656475746974616CLL;
  if (a1 == 1)
    return 0x64757469676E6F6CLL;
  return 0x7469736E65746E69;
}

uint64_t sub_1005EFFD8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  char v13;
  char v14;

  v3 = sub_1000BA294(&qword_100BF5E00);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = sub_1005F0F74();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DebugLocationManager.InterestingStorms.Storm.CodingKeys, &type metadata for DebugLocationManager.InterestingStorms.Storm.CodingKeys, v9, v7, v8);
  v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v14, v3);
  if (!v1)
  {
    v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v13, v3);
    v12 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v12, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

double sub_1005F012C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v2 = sub_1000BA294(&qword_100BF5DF0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = sub_1005F0F74();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DebugLocationManager.InterestingStorms.Storm.CodingKeys, &type metadata for DebugLocationManager.InterestingStorms.Storm.CodingKeys, v8, v6, v7);
  v15 = 0;
  KeyedDecodingContainer.decode(_:forKey:)(&v15, v2);
  v10 = v9;
  v14 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v14, v2);
  v13 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v13, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  return v10;
}

uint64_t sub_1005F02B0(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x736D726F7473 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736D726F7473, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_1005F032C()
{
  return 0x736D726F7473;
}

uint64_t sub_1005F0340(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_1000BA294(&qword_100BF5E30);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1005F0FB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DebugLocationManager.InterestingStorms.CodingKeys, &type metadata for DebugLocationManager.InterestingStorms.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_1000BA294(&qword_100BF5E18);
  sub_1005F1028(&qword_100BF5E38, (void (*)(void))sub_1005F1084, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_QWORD *sub_1005F045C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v3 = sub_1000BA294(&qword_100BF5E08);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_1000DB418(a1, v7);
  v10 = sub_1005F0FB0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DebugLocationManager.InterestingStorms.CodingKeys, &type metadata for DebugLocationManager.InterestingStorms.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  }
  else
  {
    v11 = sub_1000BA294(&qword_100BF5E18);
    sub_1005F1028(&qword_100BF5E20, (void (*)(void))sub_1005F0FEC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, v12, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = (_QWORD *)v14[1];
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  }
  return v9;
}

uint64_t sub_1005F05A0()
{
  char *v0;

  return sub_1005EFF7C(*v0);
}

uint64_t sub_1005F05A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1005EFE20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005F05CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005F0F74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005F05F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005F0F74();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1005F061C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1005F012C(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
}

uint64_t sub_1005F0648(_QWORD *a1)
{
  return sub_1005EFFD8(a1);
}

uint64_t sub_1005F0668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1005F02B0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1005F0690(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005F0FB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005F06B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005F0FB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_1005F06E0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1005F045C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1005F0708(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1005F0340(a1, *v1);
}

void sub_1005F0720(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;

  v4 = _swiftEmptyArrayStorage;
  v3 = sub_1000BA294(&qword_100BF5DD0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v1 + 16) = AsyncObservable.init(value:)(&v4);
  sub_100043CA8((uint64_t)a1, v1 + 24);
  sub_1005F0798();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  sub_100099960();
}

void sub_1005F0798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NetworkProxy(0, v3);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)(0xD00000000000003BLL, 0x8000000100A0DCB0);
  v13 = type metadata accessor for URL(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13) == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1000BA294(&qword_100BF5DD8);
    v14 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
    v15 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for NetworkProxy.none(_:), v6);
    Date.init()(v15);
    v16 = (void *)NetworkOperation.__allocating_init(endpoint:parameters:headers:networkProxy:earliestBeginDate:)(v12, _swiftEmptyArrayStorage, v14, v9, v5);
    v17 = swift_allocObject(&unk_100B83B80, 24, 7);
    swift_weakInit(v17 + 16, v1);
    dispatch thunk of AsyncOperation.completion.setter(sub_1005F0ED8, v17);
    objc_msgSend(v16, "start");

  }
}

double sub_1005F0984(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t Strong;
  double result;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE v16[24];

  v2 = *(_QWORD *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v7 = (_QWORD *)Strong;
    if ((v3 & 1) == 0)
    {
      swift_retain();
      sub_1005F0EE0(v2, 0);
      v8 = sub_1005EFB04(v2, v7);
      sub_1005F0EEC(v2, 0);
      v10 = (void *)zalgo.getter(v9);
      v11 = sub_1000BA294(&qword_100BF5DE0);
      v12 = when<A>(on:_:)(v10, v8, v11);

      swift_bridgeObjectRelease(v8);
      swift_retain();
      v14 = (void *)zalgo.getter(v13);
      v15 = Promise.then<A>(on:closure:)(v14, sub_1005F0EF8, v7, &type metadata for () + 1);
      swift_release(v15);
      swift_release(v12);

      swift_release(v7);
    }
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

double sub_1005F0A9C(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  __n128 v5;
  double result;
  _QWORD *v7;

  v3 = sub_1005EFC88(*a1);
  v4 = *(_QWORD *)(a2 + 16);
  v7 = v3;
  v5 = swift_retain();
  AsyncObservable.next(value:quiet:)(&v7, 0, v5);
  swift_bridgeObjectRelease(v3);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

uint64_t sub_1005F0B0C()
{
  uint64_t v0;

  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for DebugLocationManager()
{
  return objc_opt_self(_TtC7Weather20DebugLocationManager);
}

uint64_t *sub_1005F0B58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_1005F0BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for Location(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *sub_1005F0C18(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1005F0C74(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1005F0CD0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1005F0D2C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1005F0D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005F0D94);
}

uint64_t sub_1005F0D94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = sub_1000BC6E0();
  return _s7Weather24LocationCompositionStateOwet_0(v2, a2, v4);
}

uint64_t sub_1005F0DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005F0DD0);
}

uint64_t sub_1005F0DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = sub_1000BC6E0();
  return _s7Weather24LocationCompositionStateOwst_0(v2, a2, a2, v4);
}

uint64_t type metadata accessor for DebugLocationManager.DebugLocation(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF5D98;
  if (!qword_100BF5D98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DebugLocationManager.DebugLocation);
  return result;
}

uint64_t sub_1005F0E3C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1005F0EB4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1005F0ED8(uint64_t a1)
{
  uint64_t v1;

  return sub_1005F0984(a1, v1);
}

uint64_t sub_1005F0EE0(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(a1);
  else
    return swift_bridgeObjectRetain(a1);
}

double sub_1005F0EEC(uint64_t a1, char a2)
{
  double result;

  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else
    *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

double sub_1005F0EF8(uint64_t *a1)
{
  uint64_t v1;

  return sub_1005F0A9C(a1, v1);
}

uint64_t sub_1005F0F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DebugLocationManager.DebugLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for DebugLocationManager.InterestingStorms.Storm()
{
  return &type metadata for DebugLocationManager.InterestingStorms.Storm;
}

ValueMetadata *type metadata accessor for DebugLocationManager.InterestingStorms()
{
  return &type metadata for DebugLocationManager.InterestingStorms;
}

unint64_t sub_1005F0F74()
{
  unint64_t result;

  result = qword_100BF5DF8;
  if (!qword_100BF5DF8)
  {
    result = swift_getWitnessTable(&unk_1009B6F20, &type metadata for DebugLocationManager.InterestingStorms.Storm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5DF8);
  }
  return result;
}

unint64_t sub_1005F0FB0()
{
  unint64_t result;

  result = qword_100BF5E10;
  if (!qword_100BF5E10)
  {
    result = swift_getWitnessTable(&unk_1009B6ED0, &type metadata for DebugLocationManager.InterestingStorms.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5E10);
  }
  return result;
}

unint64_t sub_1005F0FEC()
{
  unint64_t result;

  result = qword_100BF5E28;
  if (!qword_100BF5E28)
  {
    result = swift_getWitnessTable(&unk_1009B6D2C, &type metadata for DebugLocationManager.InterestingStorms.Storm);
    atomic_store(result, (unint64_t *)&qword_100BF5E28);
  }
  return result;
}

void sub_1005F1028(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = sub_100075EB0(&qword_100BF5E18);
    a2();
    atomic_store(swift_getWitnessTable(a3, v6), a1);
  }
  sub_100099960();
}

unint64_t sub_1005F1084()
{
  unint64_t result;

  result = qword_100BF5E40;
  if (!qword_100BF5E40)
  {
    result = swift_getWitnessTable(&unk_1009B6D04, &type metadata for DebugLocationManager.InterestingStorms.Storm);
    atomic_store(result, (unint64_t *)&qword_100BF5E40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DebugLocationManager.InterestingStorms.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1005F1100 + 4 * byte_1009B6C40[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1005F1120 + 4 * byte_1009B6C45[v4]))();
}

_BYTE *sub_1005F1100(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1005F1120(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1005F1128(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1005F1130(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1005F1138(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1005F1140(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DebugLocationManager.InterestingStorms.CodingKeys()
{
  return &type metadata for DebugLocationManager.InterestingStorms.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DebugLocationManager.InterestingStorms.Storm.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1005F11A8 + 4 * byte_1009B6C4F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1005F11DC + 4 * byte_1009B6C4A[v4]))();
}

uint64_t sub_1005F11DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F11E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005F11ECLL);
  return result;
}

uint64_t sub_1005F11F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005F1200);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1005F1204(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F120C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DebugLocationManager.InterestingStorms.Storm.CodingKeys()
{
  return &type metadata for DebugLocationManager.InterestingStorms.Storm.CodingKeys;
}

unint64_t sub_1005F122C()
{
  unint64_t result;

  result = qword_100BF5E48;
  if (!qword_100BF5E48)
  {
    result = swift_getWitnessTable(&unk_1009B6DF0, &type metadata for DebugLocationManager.InterestingStorms.Storm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5E48);
  }
  return result;
}

unint64_t sub_1005F126C()
{
  unint64_t result;

  result = qword_100BF5E50;
  if (!qword_100BF5E50)
  {
    result = swift_getWitnessTable(&unk_1009B6EA8, &type metadata for DebugLocationManager.InterestingStorms.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5E50);
  }
  return result;
}

unint64_t sub_1005F12AC()
{
  unint64_t result;

  result = qword_100BF5E58;
  if (!qword_100BF5E58)
  {
    result = swift_getWitnessTable(&unk_1009B6E18, &type metadata for DebugLocationManager.InterestingStorms.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5E58);
  }
  return result;
}

unint64_t sub_1005F12EC()
{
  unint64_t result;

  result = qword_100BF5E60;
  if (!qword_100BF5E60)
  {
    result = swift_getWitnessTable(&unk_1009B6E40, &type metadata for DebugLocationManager.InterestingStorms.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5E60);
  }
  return result;
}

unint64_t sub_1005F132C()
{
  unint64_t result;

  result = qword_100BF5E68;
  if (!qword_100BF5E68)
  {
    result = swift_getWitnessTable(&unk_1009B6D60, &type metadata for DebugLocationManager.InterestingStorms.Storm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5E68);
  }
  return result;
}

unint64_t sub_1005F136C()
{
  unint64_t result;

  result = qword_100BF5E70;
  if (!qword_100BF5E70)
  {
    result = swift_getWitnessTable(&unk_1009B6D88, &type metadata for DebugLocationManager.InterestingStorms.Storm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF5E70);
  }
  return result;
}

uint64_t *sub_1005F13A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v13);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v14 = type metadata accessor for Location.Identifier(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v10 = a1;
      v11 = a3;
      v12 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v15 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
      }
      v9 = type metadata accessor for LocationModel(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

void *sub_1005F14C8(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1005F15D0((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for Location.Identifier(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = a3;
      v10 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v12 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = type metadata accessor for LocationModel(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_1005F15D0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocationViewerViewAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1005F160C(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v11 = type metadata accessor for Location.Identifier(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    v8 = a1;
    v9 = a3;
    v10 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v12 = type metadata accessor for WeatherMapOverlayKind(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
    v8 = a1;
    v9 = a3;
    v10 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = type metadata accessor for LocationModel(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

void *sub_1005F1704(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1005F15D0((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for Location.Identifier(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v8 = a1;
      v9 = a3;
      v10 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v12 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = type metadata accessor for LocationModel(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

void sub_1005F180C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for Location.Identifier(0);
  __chkstk_darwin(v1);
  sub_100098728();
  v2 = type metadata accessor for WeatherMapOverlayKind(0);
  __chkstk_darwin(v2);
  sub_100098728();
  v3 = type metadata accessor for LocationViewerViewAction(0);
  __chkstk_darwin(v3);
  sub_100098728();
  v6 = v5 - v4;
  v8 = sub_1000BA294(&qword_100BF5F28);
  __chkstk_darwin(v8);
  sub_100098728();
  sub_1005F1DA8(v0, v6);
  v7 = (char *)sub_1005F1938 + 4 * byte_1009B6F70[swift_getEnumCaseMultiPayload(v6)];
  __asm { BR              X10 }
}

uint64_t sub_1005F1938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  sub_1000BB20C();
  ShortDescription.init(name:_:)(v4 - 2, 0x8000000100A0DD50, v5, v1);
  sub_1005F15D0(v2);
  v6 = *(_QWORD **)(v3 - 256);
  v7 = *(_QWORD *)(v3 - 264);
  v6[3] = v7;
  v6[4] = sub_1005F1DEC();
  v8 = sub_10005F164(v6);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 272) + 32))(v8, v0, v7);
}

uint64_t sub_1005F1D4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1005F1E30(&qword_100BF5F38, (uint64_t)&unk_1009B6FC4);
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_1005F1D84()
{
  return sub_1005F1E30(&qword_100BF5F20, (uint64_t)&unk_1009B6F9C);
}

uint64_t sub_1005F1DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationViewerViewAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1005F1DEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF5F30;
  if (!qword_100BF5F30)
  {
    v1 = sub_100075EB0(&qword_100BF5F28);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF5F30);
  }
  return result;
}

uint64_t sub_1005F1E30(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LocationViewerViewAction(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1005F1E70(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t, __n128);
  __n128 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  int *v43;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10008D47C(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_BYTE *)(a2 + 24);
    sub_10008D47C(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v10;
    v11 = a3[6];
    v12 = (_QWORD *)(a1 + v11);
    v13 = (_QWORD *)(a2 + v11);
    v14 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v13) == 1)
    {
      v15 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      *v12 = *v13;
      swift_retain();
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
    v18 = a3[7];
    v19 = (_QWORD *)(a1 + v18);
    v20 = (_QWORD *)(a2 + v18);
    v21 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v20) == 1)
    {
      v42 = v21;
      v22 = v20[1];
      *v19 = *v20;
      v19[1] = v22;
      v43 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v23 = v43[5];
      v24 = (char *)v19 + v23;
      v25 = (char *)v20 + v23;
      v26 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v26))
      {
        v27 = sub_1000BA294(&qword_100BD4280);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v26);
      }
      v28 = v43[6];
      v29 = (_QWORD *)((char *)v19 + v28);
      v30 = (_QWORD *)((char *)v20 + v28);
      v31 = v30[1];
      *v29 = *v30;
      v29[1] = v31;
      v32 = v43[7];
      v33 = (char *)v19 + v32;
      v34 = (char *)v20 + v32;
      v35 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v26 - 8) + 16);
      v36 = swift_bridgeObjectRetain();
      v35(v33, v34, v26, v36);
      v37 = v43[8];
      v38 = (char *)v19 + v37;
      v39 = (char *)v20 + v37;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20 + v37, 1, v26))
      {
        v40 = sub_1000BA294(&qword_100BD4280);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v35)(v38, v39, v26);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, v26);
      }
      *((_BYTE *)v19 + v43[9]) = *((_BYTE *)v20 + v43[9]);
      swift_storeEnumTagMultiPayload(v19, v42, 1);
    }
    else
    {
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  }
  return a1;
}

uint64_t sub_1005F2148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);

  sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v6 = a1 + *(int *)(a2 + 28);
  type metadata accessor for NewsArticleComponentViewModel(0);
  result = swift_getEnumCaseMultiPayload(v6);
  if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease();
    v8 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v9 = v6 + v8[5];
    v10 = type metadata accessor for URL(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    v11 = swift_bridgeObjectRelease();
    v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    ((void (*)(uint64_t, uint64_t, __n128))v13)(v6 + v8[7], v10, v11);
    v12 = v6 + v8[8];
    result = _s7Weather24LocationCompositionStateOwet_0(v12, 1, v10);
    if (!(_DWORD)result)
      return v13(v12, v10);
  }
  return result;
}

uint64_t sub_1005F22BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  int *v42;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  sub_10008D47C(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v12) == 1)
  {
    v14 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    v15 = 1;
  }
  else
  {
    *v11 = *v12;
    swift_retain();
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v13, v15);
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = type metadata accessor for NewsArticleComponentViewModel(0);
  if (swift_getEnumCaseMultiPayload(v18) == 1)
  {
    v42 = a3;
    v20 = v18[1];
    *v17 = *v18;
    v17[1] = v20;
    v21 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v22 = v21[5];
    v23 = (char *)v17 + v22;
    v24 = (char *)v18 + v22;
    v25 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain();
    v41 = v19;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v25))
    {
      v26 = sub_1000BA294(&qword_100BD4280);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v25);
    }
    v27 = v21[6];
    v28 = (_QWORD *)((char *)v17 + v27);
    v29 = (_QWORD *)((char *)v18 + v27);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = v21[7];
    v32 = (char *)v17 + v31;
    v33 = (char *)v18 + v31;
    v34 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v25 - 8) + 16);
    v35 = swift_bridgeObjectRetain();
    v34(v32, v33, v25, v35);
    v36 = v21[8];
    v37 = (char *)v17 + v36;
    v38 = (char *)v18 + v36;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18 + v36, 1, v25))
    {
      v39 = sub_1000BA294(&qword_100BD4280);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v34)(v37, v38, v25);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, v25);
    }
    a3 = v42;
    *((_BYTE *)v17 + v21[9]) = *((_BYTE *)v18 + v21[9]);
    swift_storeEnumTagMultiPayload(v17, v41, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1005F2568(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  int *v44;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_BYTE *)(a2 + 24);
  sub_10008D47C(v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 24) = v11;
  sub_1000B15F8(v12, v13);
  if (a1 != a2)
  {
    v14 = a3[6];
    v15 = (_QWORD *)(a1 + v14);
    v16 = (_QWORD *)(a2 + v14);
    sub_100021A14(a1 + v14, &qword_100BC37D8);
    v17 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v16) == 1)
    {
      v18 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      *v15 = *v16;
      swift_retain();
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
    v20 = a3[7];
    v21 = (_QWORD *)(a1 + v20);
    v22 = (_QWORD *)(a2 + v20);
    sub_1000215BC(a1 + v20, type metadata accessor for NewsArticleComponentViewModel);
    v23 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v22) == 1)
    {
      v43 = v23;
      *v21 = *v22;
      v21[1] = v22[1];
      v24 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v25 = v24[5];
      v26 = (char *)v21 + v25;
      v27 = (char *)v22 + v25;
      v28 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      v44 = a3;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v28))
      {
        v29 = sub_1000BA294(&qword_100BD4280);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v28);
      }
      v30 = v24[6];
      v31 = (_QWORD *)((char *)v21 + v30);
      v32 = (_QWORD *)((char *)v22 + v30);
      *v31 = *v32;
      v31[1] = v32[1];
      v33 = v24[7];
      v34 = (char *)v21 + v33;
      v35 = (char *)v22 + v33;
      v36 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
      v37 = swift_bridgeObjectRetain();
      v36(v34, v35, v28, v37);
      v38 = v24[8];
      v39 = (char *)v21 + v38;
      v40 = (char *)v22 + v38;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22 + v38, 1, v28))
      {
        v41 = sub_1000BA294(&qword_100BD4280);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v36)(v39, v40, v28);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v28);
      }
      a3 = v44;
      *((_BYTE *)v21 + v24[9]) = *((_BYTE *)v22 + v24[9]);
      swift_storeEnumTagMultiPayload(v21, v43, 1);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
  }
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1005F2864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;

  v3 = a3;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = *(int *)(v3 + 28);
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = type metadata accessor for NewsArticleComponentViewModel(0);
  if (swift_getEnumCaseMultiPayload(v13) == 1)
  {
    v27 = v3;
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v15 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
    v16 = v15[5];
    v17 = &v12[v16];
    v18 = &v13[v16];
    v19 = type metadata accessor for URL(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19))
    {
      v20 = sub_1000BA294(&qword_100BD4280);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
    }
    else
    {
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
      v21(v17, v18, v19);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v19);
    }
    *(_OWORD *)&v12[v15[6]] = *(_OWORD *)&v13[v15[6]];
    v21(&v12[v15[7]], &v13[v15[7]], v19);
    v22 = v15[8];
    v23 = &v12[v22];
    v24 = &v13[v22];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v13[v22], 1, v19))
    {
      v25 = sub_1000BA294(&qword_100BD4280);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v21(v23, v24, v19);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v19);
    }
    v3 = v27;
    v12[v15[9]] = v13[v15[9]];
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  *(_BYTE *)(a1 + *(int *)(v3 + 32)) = *(_BYTE *)(a2 + *(int *)(v3 + 32));
  return a1;
}

uint64_t sub_1005F2AE0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v35)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  v10 = *((_BYTE *)a2 + 24);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v10;
  sub_1000B15F8(v11, v12);
  if ((uint64_t *)a1 != a2)
  {
    v13 = a3[6];
    v14 = (void *)(a1 + v13);
    v15 = (char *)a2 + v13;
    sub_100021A14(a1 + v13, &qword_100BC37D8);
    v16 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v15) == 1)
    {
      v17 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    v18 = a3[7];
    v19 = (char *)(a1 + v18);
    v20 = (char *)a2 + v18;
    sub_1000215BC(a1 + v18, type metadata accessor for NewsArticleComponentViewModel);
    v21 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v20) == 1)
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v22 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v23 = v22[5];
      v24 = &v19[v23];
      v25 = &v20[v23];
      v26 = type metadata accessor for URL(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v26))
      {
        v27 = sub_1000BA294(&qword_100BD4280);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
      }
      else
      {
        v29 = v25;
        v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
        v28(v24, v29, v26);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v26);
      }
      *(_OWORD *)&v19[v22[6]] = *(_OWORD *)&v20[v22[6]];
      v35 = v28;
      v28(&v19[v22[7]], &v20[v22[7]], v26);
      v30 = v22[8];
      v31 = &v19[v30];
      v32 = &v20[v30];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v20[v30], 1, v26))
      {
        v33 = sub_1000BA294(&qword_100BD4280);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        v35(v31, v32, v26);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v26);
      }
      v19[v22[9]] = v20[v22[9]];
      swift_storeEnumTagMultiPayload(v19, v21, 1);
    }
    else
    {
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
  }
  *(_BYTE *)(a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t sub_1005F2DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005F2DAC);
}

uint64_t sub_1005F2DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 24);
    }
    else
    {
      v9 = sub_1000C21E4();
      v10 = *(int *)(a3 + 28);
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t sub_1005F2E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005F2E48);
}

void sub_1005F2E48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 254)
  {
    *(_BYTE *)(a1 + 8) = -(char)a2;
    sub_100079F70();
  }
  else
  {
    v8 = sub_1000BA294((uint64_t *)&unk_100C09CA0);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 24);
    }
    else
    {
      v9 = sub_1000C21E4();
      v10 = *(int *)(a4 + 28);
    }
    _s7Weather24LocationCompositionStateOwst_0(a1 + v10, a2, a2, v9);
  }
}

uint64_t sub_1005F2ED0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABADDC, 1);
}

void sub_1005F2EE0(unint64_t a1, void (*a2)(_QWORD *__return_ptr), uint64_t a3, void (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _QWORD v27[2];
  __int128 v28;
  char v29;
  char v30;

  v7 = sub_1000BA294(&qword_100BF6100);
  __chkstk_darwin(v7);
  v9 = (char *)&v27[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BF6150);
  __chkstk_darwin(v10);
  v12 = (char *)&v27[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  WeatherAsyncImagePhase.image.getter(a1);
  if (v13)
  {
    a2(v27);
    v14 = v27[0];
    v15 = v27[1];
    v16 = v29;
    v17 = v30;
    v18 = v28;
    v26 = v28;
    *(_QWORD *)v12 = v27[0];
    *((_QWORD *)v12 + 1) = v15;
    *((_OWORD *)v12 + 1) = v18;
    v12[32] = v16;
    v12[33] = v17;
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v19 = v26;
    swift_retain_n(v26, 2);
    swift_retain_n(v14, 2);
    swift_retain_n(v15, 2);
    v20 = sub_1000BA294(&qword_100BF6158);
    v21 = sub_100372A3C(&qword_100BF6160, &qword_100BF6158, (void (*)(void))sub_1002377CC);
    v22 = sub_100372A3C(&qword_100BF6138, &qword_100BF6100, (void (*)(void))sub_1005F7340);
    _ConditionalContent<>.init(storage:)(v12, v20, v7, v21, v22);
    swift_release_n(v19, 2);
    swift_release_n(v15, 2);
    swift_release_n(v14, 2);
    swift_release();
  }
  else
  {
    a4();
    sub_100037794((uint64_t)v9, (uint64_t)v12, &qword_100BF6100);
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v23 = sub_1000BA294(&qword_100BF6158);
    v24 = sub_100372A3C(&qword_100BF6160, &qword_100BF6158, (void (*)(void))sub_1002377CC);
    v25 = sub_100372A3C(&qword_100BF6138, &qword_100BF6100, (void (*)(void))sub_1005F7340);
    _ConditionalContent<>.init(storage:)(v12, v23, v7, v24, v25);
    sub_100021A14((uint64_t)v9, &qword_100BF6100);
  }
}

void sub_1005F3184(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v50[2];

  sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = v6 - v5;
  v47 = type metadata accessor for AutomationInfo(0);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = (uint64_t *)(v10 - v9);
  v48 = type metadata accessor for AccessibilityChildBehavior(0);
  v42 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  sub_100098728();
  v14 = v13 - v12;
  v15 = sub_1000BA294(&qword_100BF5FE0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100098694();
  v17 = sub_1000BA294(&qword_100BD9A98);
  v44 = *(_QWORD *)(v17 - 8);
  v45 = v17;
  __chkstk_darwin(v17);
  sub_100079F58();
  v46 = sub_1000BA294(&qword_100BD9AA0);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100098728();
  v21 = v20 - v19;
  sub_1000BA294(&qword_100BF5FE8);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_100088FDC();
  v43 = v23;
  *(_QWORD *)v3 = static VerticalAlignment.center.getter(v24);
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 16) = 1;
  v25 = sub_1000BA294(&qword_100BF5FF0);
  sub_1005F34D0(v2, v3 + *(int *)(v25 + 44));
  static AccessibilityChildBehavior.combine.getter(v26);
  sub_10003D2DC(&qword_100BF5FF8, &qword_100BF5FE0);
  View.accessibilityElement(children:)(v14, v15, v27);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v14, v48);
  sub_100021A14(v3, &qword_100BF5FE0);
  sub_1000D9FFC();
  sub_100255A1C(v7);
  v28 = type metadata accessor for URL(0);
  v29 = _s7Weather24LocationCompositionStateOwet_0(v7, 1, v28);
  if ((_DWORD)v29 == 1)
  {
    sub_100021A14(v7, &qword_100BD4280);
    v30 = 0;
    v31 = 0;
  }
  else
  {
    v30 = URL.lastPathComponent.getter(v29);
    v31 = v32;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v7, v28);
  }
  v33 = sub_100255BC8();
  v35 = v34;
  v36 = sub_100255B0C();
  *v11 = v30;
  v11[1] = v31;
  v11[2] = v33;
  v11[3] = v35;
  v11[4] = v36;
  v11[5] = v37;
  v38 = type metadata accessor for AutomationCellInfo(0);
  swift_storeEnumTagMultiPayload(v11, v38, 8);
  swift_storeEnumTagMultiPayload(v11, v47, 1);
  sub_10033549C();
  sub_1000215BC((uint64_t)v11, type metadata accessor for AutomationInfo);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v1, v45);
  v50[0] = sub_1005F5FA0();
  v50[1] = v39;
  v40 = sub_1005F705C();
  v41 = sub_100114EF8();
  View.accessibilityLabel<A>(_:)(v50, v46, &type metadata for String, v40, v41);
  swift_bridgeObjectRelease();
  sub_100021A14(v21, &qword_100BD9AA0);
  sub_1000F111C(v43, a1, &qword_100BF5FE8);
  sub_100098640();
}

void sub_1005F34D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD v82[2];
  uint64_t v83;

  v81 = a2;
  v3 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v3);
  v5 = (__int128 *)((char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_1000BA294(&qword_100BF6008);
  __chkstk_darwin(v6);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BF6010);
  __chkstk_darwin(v9);
  v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BF6018);
  __chkstk_darwin(v12);
  v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_1000BA294(&qword_100BF6020);
  __chkstk_darwin(v74);
  v73 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_1000BA294(&qword_100BF6028);
  __chkstk_darwin(v78);
  v76 = (uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_1000BA294(&qword_100BF6030);
  __chkstk_darwin(v80);
  v75 = (uint64_t)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v79 = (uint64_t)&v71 - v19;
  v20 = sub_1000BA294(&qword_100BF6038);
  __chkstk_darwin(v20);
  v77 = (uint64_t)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v71 - v23;
  *(_QWORD *)v24 = static HorizontalAlignment.leading.getter(v25);
  *((_QWORD *)v24 + 1) = 0;
  v24[16] = 1;
  v26 = sub_1000BA294(&qword_100BF6040);
  sub_1005F3B20(a1, (uint64_t)&v24[*(int *)(v26 + 44)]);
  sub_1005F5C10((uint64_t)v8);
  static Alignment.center.getter(v27);
  sub_100946548();
  sub_100021A14((uint64_t)v8, &qword_100BF6008);
  v28 = (char *)v5 + *(int *)(v3 + 20);
  v29 = enum case for RoundedCornerStyle.continuous(_:);
  v30 = type metadata accessor for RoundedCornerStyle(0);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104);
  v31(v28, v29, v30);
  __asm { FMOV            V0.2D, #8.0 }
  v71 = _Q0;
  *v5 = _Q0;
  v37 = (uint64_t)&v14[*(int *)(v12 + 36)];
  sub_10000AB54((uint64_t)v5, v37, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v37 + *(int *)(sub_1000BA294(&qword_100BD3DA8) + 36)) = 256;
  sub_100037794((uint64_t)v11, (uint64_t)v14, &qword_100BF6010);
  sub_1000215BC((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100021A14((uint64_t)v11, &qword_100BF6010);
  v39 = static Alignment.center.getter(v38);
  v72 = v40;
  v41 = (uint64_t)v73;
  v42 = (uint64_t)&v73[*(int *)(v74 + 36)];
  v43 = ((uint64_t (*)(char *, uint64_t, uint64_t))v31)((char *)v5 + *(int *)(v3 + 20), v29, v30);
  *v5 = v71;
  static Color.white.getter(v43);
  v44 = Color.opacity(_:)(0.1);
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v82, 0, 0, 0.25, 10.0, 0.0);
  sub_10000AB54((uint64_t)v5, v42, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v45 = v42 + *(int *)(sub_1000BA294(&qword_100BDCBF8) + 36);
  v46 = v82[1];
  *(_OWORD *)v45 = v82[0];
  *(_OWORD *)(v45 + 16) = v46;
  *(_QWORD *)(v45 + 32) = v83;
  v47 = sub_1000BA294(&qword_100BDCC00);
  *(_QWORD *)(v42 + *(int *)(v47 + 52)) = v44;
  *(_WORD *)(v42 + *(int *)(v47 + 56)) = 256;
  v48 = static Alignment.center.getter(v47);
  v50 = v49;
  v51 = (uint64_t *)(v42 + *(int *)(sub_1000BA294(&qword_100BDCC08) + 36));
  *v51 = v48;
  v51[1] = v50;
  sub_1000215BC((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v52 = (uint64_t *)(v42 + *(int *)(sub_1000BA294(&qword_100BE33D0) + 36));
  v53 = v72;
  *v52 = v39;
  v52[1] = v53;
  sub_1000F111C((uint64_t)v14, v41, &qword_100BF6018);
  v54 = v76;
  sub_100037794(v41, v76, &qword_100BF6020);
  v55 = v54 + *(int *)(v78 + 36);
  *(_QWORD *)v55 = 0x3FF0000000000000;
  *(_WORD *)(v55 + 8) = 0;
  sub_100021A14(v41, &qword_100BF6020);
  LOBYTE(v41) = static Edge.Set.top.getter(v56);
  v57 = EdgeInsets.init(_all:)(4.0);
  v59 = v58;
  v61 = v60;
  v63 = v62;
  v64 = v75;
  sub_100037794(v54, v75, &qword_100BF6028);
  v65 = v64 + *(int *)(v80 + 36);
  *(_BYTE *)v65 = v41;
  *(double *)(v65 + 8) = v57;
  *(_QWORD *)(v65 + 16) = v59;
  *(_QWORD *)(v65 + 24) = v61;
  *(_QWORD *)(v65 + 32) = v63;
  *(_BYTE *)(v65 + 40) = 0;
  sub_100021A14(v54, &qword_100BF6028);
  v66 = v79;
  sub_1000F111C(v64, v79, &qword_100BF6030);
  v67 = v77;
  sub_100037794((uint64_t)v24, v77, &qword_100BF6038);
  sub_100037794(v66, v64, &qword_100BF6030);
  v68 = v81;
  sub_100037794(v67, v81, &qword_100BF6038);
  v69 = sub_1000BA294(&qword_100BF6048);
  v70 = v68 + *(int *)(v69 + 48);
  *(_QWORD *)v70 = 0x4030000000000000;
  *(_BYTE *)(v70 + 8) = 0;
  sub_100037794(v64, v68 + *(int *)(v69 + 64), &qword_100BF6030);
  sub_100021A14(v66, &qword_100BF6030);
  sub_100021A14((uint64_t)v24, &qword_100BF6038);
  sub_100021A14(v64, &qword_100BF6030);
  sub_100021A14(v67, &qword_100BF6038);
}

void sub_1005F3B20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t KeyPath;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  char *v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char *v139;
  unsigned __int8 v140;
  uint64_t v141;
  uint64_t v142;

  v107 = a2;
  v3 = sub_1000BA294(&qword_100BDB020);
  __chkstk_darwin(v3);
  v108 = (uint64_t)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v106 = (uint64_t)&v93 - v6;
  v101 = sub_1000BA294((uint64_t *)&unk_100C0A510);
  __chkstk_darwin(v101);
  v113 = (uint64_t)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BF6070);
  __chkstk_darwin(v8);
  v110 = (uint64_t)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_1000BA294(&qword_100BF6078);
  __chkstk_darwin(v111);
  v112 = (uint64_t)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1000BA294(&qword_100BDB018);
  v103 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v104 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v99 = (char *)&v93 - v13;
  __chkstk_darwin(v14);
  v102 = (char *)&v93 - v15;
  v16 = sub_1000BA294(&qword_100BF6080);
  __chkstk_darwin(v16);
  v18 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000BA294(&qword_100BDB010);
  __chkstk_darwin(v19);
  v100 = (uint64_t)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v93 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)&v93 - v25;
  v27 = type metadata accessor for Font.TextStyle(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v93 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v31);
  v33 = (char *)&v93 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for NewsArticleComponentView(0);
  v116 = 0;
  v115 = 0;
  v35 = 0;
  v114 = 0;
  v109 = *(int *)(v34 + 32);
  if (*(_BYTE *)(a1 + v109) == 1)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1);
    v36._countAndFlagsBits = 0;
    v36._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v36);
    Image.init(_internalSystemName:)(1937204590, 0xE400000000000000);
    v98 = a1;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release();
    v37._countAndFlagsBits = 0x7377654E20;
    v37._object = (void *)0xE500000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v37);
    v38 = LocalizedStringKey.init(stringInterpolation:)(v33);
    v42 = Text.init(_:tableName:bundle:comment:)(v38, v40, v39 & 1, v41, 0, 0, 0, "The News icon, followed by News", 31, 2);
    v44 = v43;
    v96 = v23;
    v46 = v45;
    v97 = v26;
    v48 = v47 & 1;
    v49 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v28 + 104))(v30, enum case for Font.TextStyle.title3(_:), v27);
    static Font.Weight.semibold.getter(v49);
    v50 = v18;
    v51 = v19;
    v52 = static Font.system(_:weight:)(v30);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    v116 = Text.font(_:)(v52, v42, v44, v48, v46);
    v115 = v53;
    v55 = v54;
    v114 = v56;
    v19 = v51;
    v18 = v50;
    swift_release();
    v35 = v55 & 1;
    v57 = v44;
    a1 = v98;
    v58 = v48;
    v26 = v97;
    sub_1000D31B4(v42, v57, v58);
    v23 = v96;
    swift_bridgeObjectRelease();
  }
  v98 = v35;
  sub_1005F4418((uint64_t)v18);
  v60 = static Edge.Set.top.getter(v59);
  v61 = 10.0;
  if (*(_BYTE *)(a1 + v109))
    v61 = 0.0;
  v62 = EdgeInsets.init(_all:)(v61);
  v64 = v63;
  v66 = v65;
  v68 = v67;
  sub_100037794((uint64_t)v18, (uint64_t)v23, &qword_100BF6080);
  v69 = &v23[*(int *)(v19 + 36)];
  *v69 = v60;
  *((double *)v69 + 1) = v62;
  *((_QWORD *)v69 + 2) = v64;
  *((_QWORD *)v69 + 3) = v66;
  *((_QWORD *)v69 + 4) = v68;
  v69[40] = 0;
  sub_100021A14((uint64_t)v18, &qword_100BF6080);
  sub_1000F111C((uint64_t)v23, (uint64_t)v26, &qword_100BDB010);
  static Alignment.center.getter(v70);
  _FrameLayout.init(width:height:alignment:)(0, 1, 0x4018000000000000, 0);
  v109 = v137;
  v71 = v138;
  v97 = v139;
  LODWORD(v96) = v140;
  v95 = v141;
  v94 = v142;
  v72 = v110;
  sub_1005F47A0(v110);
  if ((sub_1005F4FD4() & 1) != 0)
    v73 = 2;
  else
    v73 = 3;
  KeyPath = swift_getKeyPath(&unk_1009B70A0);
  v75 = v112;
  sub_100037794(v72, v112, &qword_100BF6070);
  v76 = (uint64_t)v26;
  v77 = v111;
  v78 = v75 + *(int *)(v111 + 36);
  *(_QWORD *)v78 = KeyPath;
  *(_QWORD *)(v78 + 8) = v73;
  *(_BYTE *)(v78 + 16) = 0;
  sub_100021A14(v72, &qword_100BF6070);
  v79 = v113;
  sub_1005F5204(v113);
  v80 = type metadata accessor for DynamicTypeSize(0);
  sub_10000F1C8(&qword_100C0A550, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v79, v79, v80, v81) & 1) != 0)
  {
    v82 = sub_1005F7130();
    sub_10003D2DC(&qword_100BC4E30, (uint64_t *)&unk_100C0A510);
    v83 = v99;
    View.dynamicTypeSize<A>(_:)(v79, v77, v101, v82, v84);
    sub_100021A14(v79, (uint64_t *)&unk_100C0A510);
    sub_100021A14(v75, &qword_100BF6078);
    v85 = v103;
    v86 = v102;
    v87 = v105;
    (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v102, v83, v105);
    v88 = v106;
    sub_1005F5548(v106);
    v127 = v116;
    v128 = v115;
    v129 = v98;
    v130 = v114;
    v131 = &v127;
    v89 = v100;
    sub_100037794(v76, v100, &qword_100BDB010);
    v119 = 0;
    v120 = 1;
    v121 = v109;
    v122 = v71;
    v123 = v97;
    v124 = (char)v96;
    v125 = v95;
    v126 = v94;
    v132 = v89;
    v133 = &v119;
    v90 = v104;
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v104, v86, v87);
    v117 = 0;
    v118 = 1;
    v134 = v90;
    v135 = &v117;
    v91 = v108;
    sub_100037794(v88, v108, &qword_100BDB020);
    v136 = v91;
    sub_10035E524();
    sub_100021A14(v88, &qword_100BDB020);
    v92 = *(void (**)(char *, uint64_t))(v85 + 8);
    v92(v86, v87);
    sub_100021A14(v76, &qword_100BDB010);
    sub_100021A14(v91, &qword_100BDB020);
    v92(v90, v87);
    sub_100021A14(v89, &qword_100BDB010);
    sub_10010F9B0(v127, v128, v129, v130);
  }
  else
  {
    __break(1u);
  }
}

void sub_1005F4418(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v45 = a1;
  v1 = sub_1000BA294(&qword_100BF60F0);
  __chkstk_darwin(v1);
  v41 = (uint64_t)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_1000BA294(&qword_100BF6080);
  __chkstk_darwin(v44);
  v42 = (uint64_t)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000BA294(&qword_100BD3DA8);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v7);
  v9 = (_OWORD *)((char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1000BA294(&qword_100BF60F8);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_1000BA294(&qword_100BF6100);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Color.white.getter(v16);
  v17 = Color.opacity(_:)(0.08);
  swift_release();
  v18 = (char *)v9 + *(int *)(v7 + 20);
  v19 = enum case for RoundedCornerStyle.continuous(_:);
  v20 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v18, v19, v20);
  __asm { FMOV            V0.2D, #4.0 }
  *v9 = _Q0;
  sub_10000AB54((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v6[*(int *)(v4 + 36)] = 256;
  sub_100037794((uint64_t)v6, (uint64_t)v12 + *(int *)(v10 + 36), &qword_100BD3DA8);
  *v12 = v17;
  swift_retain();
  sub_100021A14((uint64_t)v6, &qword_100BD3DA8);
  sub_1000215BC((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v26 = swift_release();
  LOBYTE(v6) = static Edge.Set.trailing.getter(v26);
  v27 = EdgeInsets.init(_all:)(100.0);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  sub_100037794((uint64_t)v12, (uint64_t)v15, &qword_100BF60F8);
  v34 = &v15[*(int *)(v13 + 36)];
  *v34 = (char)v6;
  *((double *)v34 + 1) = v27;
  *((_QWORD *)v34 + 2) = v29;
  *((_QWORD *)v34 + 3) = v31;
  *((_QWORD *)v34 + 4) = v33;
  v34[40] = 0;
  sub_100021A14((uint64_t)v12, &qword_100BF60F8);
  v35 = v41;
  sub_1005F65B4(v43, (uint64_t)v15, v41);
  static Alignment.leading.getter(v36);
  _FrameLayout.init(width:height:alignment:)(0, 1, 0x402C000000000000, 0);
  v37 = v42;
  sub_100037794(v35, v42, &qword_100BF60F0);
  v38 = (_OWORD *)(v37 + *(int *)(v44 + 36));
  v39 = v47;
  *v38 = v46;
  v38[1] = v39;
  v38[2] = v48;
  sub_100021A14(v35, &qword_100BF60F0);
  sub_1000F111C(v37, v45, &qword_100BF6080);
  sub_100021A14((uint64_t)v15, &qword_100BF6100);
}

void sub_1005F47A0(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t EnumCaseMultiPayload;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 v110;
  uint64_t v111;
  uint64_t v112;

  v103 = a1;
  v95 = type metadata accessor for Font.Leading(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v2 = (char *)&v91 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for NewsArticleComponentContentViewModel(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v104 = sub_1000BA294(&qword_100BF60D0);
  __chkstk_darwin(v104);
  v106 = (uint64_t *)((char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v105 = sub_1000BA294(&qword_100BF60A0);
  __chkstk_darwin(v105);
  v8 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_1000BA294(&qword_100BF60D8);
  __chkstk_darwin(v98);
  v99 = (uint64_t)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v101 = (uint64_t)&v91 - v11;
  v93 = sub_1000BA294(&qword_100BD3DA8);
  __chkstk_darwin(v93);
  v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v14);
  v16 = (_OWORD *)((char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v92 = sub_1000BA294(&qword_100BF60E0);
  __chkstk_darwin(v92);
  v97 = (uint64_t)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v96 = (uint64_t)&v91 - v19;
  __chkstk_darwin(v20);
  v100 = (uint64_t)&v91 - v21;
  __chkstk_darwin(v22);
  v24 = (char *)&v91 - v23;
  v25 = type metadata accessor for NewsArticleComponentViewModel(0);
  __chkstk_darwin(v25);
  v27 = (char *)&v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for NewsArticleComponentView(0);
  sub_10000AB54((uint64_t)&v102[*(int *)(v28 + 28)], (uint64_t)v27, type metadata accessor for NewsArticleComponentViewModel);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v27);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    sub_100256708((uint64_t)v27, (uint64_t)v5);
    v30 = v5[1];
    v107 = *v5;
    v108 = v30;
    v31 = sub_100114EF8();
    swift_bridgeObjectRetain();
    v32 = Text.init<A>(_:)(&v107, &type metadata for String, v31);
    v34 = v33;
    v36 = v35;
    v38 = v37 & 1;
    v39 = static Font.subheadline.getter(v32);
    v40 = v94;
    v41 = v95;
    (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v2, enum case for Font.Leading.tight(_:), v95);
    v42 = Font.leading(_:)(v2, v39);
    v43 = swift_release();
    (*(void (**)(char *, uint64_t, __n128))(v40 + 8))(v2, v41, v43);
    v44 = Text.font(_:)(v42, v32, v34, v38, v36);
    v46 = v45;
    LOBYTE(v41) = v47;
    v49 = v48;
    swift_release();
    sub_1000D31B4(v32, v34, v38);
    swift_bridgeObjectRelease();
    KeyPath = swift_getKeyPath(&unk_1009B70D0);
    v51 = v106;
    *v106 = v44;
    v51[1] = v46;
    *((_BYTE *)v51 + 16) = v41 & 1;
    v51[3] = v49;
    v51[4] = KeyPath;
    *((_WORD *)v51 + 20) = 0;
    *((_BYTE *)v51 + 42) = 1;
    swift_storeEnumTagMultiPayload(v51, v104, 1);
    v52 = sub_1000BA294(&qword_100BD76B8);
    sub_10003D2DC(&qword_100BF6098, &qword_100BF60A0);
    v54 = v53;
    v55 = sub_100372A3C(&qword_100BD76B0, &qword_100BD76B8, (void (*)(void))sub_1003213A4);
    _ConditionalContent<>.init(storage:)(v51, v105, v52, v54, v55);
    sub_1000215BC((uint64_t)v5, type metadata accessor for NewsArticleComponentContentViewModel);
  }
  else
  {
    static Color.white.getter(EnumCaseMultiPayload);
    v56 = Color.opacity(_:)(0.08);
    swift_release();
    static Alignment.center.getter(v57);
    _FrameLayout.init(width:height:alignment:)(0, 1, 0x402C000000000000, 0);
    v58 = v107;
    v102 = v8;
    v59 = v108;
    v60 = v109;
    LODWORD(v95) = v110;
    v94 = v111;
    v91 = v112;
    v61 = (char *)v16 + *(int *)(v14 + 20);
    v62 = enum case for RoundedCornerStyle.continuous(_:);
    v63 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 104))(v61, v62, v63);
    __asm { FMOV            V0.2D, #4.0 }
    *v16 = _Q0;
    sub_10000AB54((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(_WORD *)&v13[*(int *)(v93 + 36)] = 256;
    sub_100037794((uint64_t)v13, (uint64_t)&v24[*(int *)(v92 + 36)], &qword_100BD3DA8);
    *(_QWORD *)v24 = v56;
    *((_QWORD *)v24 + 1) = v58;
    v24[16] = v59;
    *((_QWORD *)v24 + 3) = v60;
    v24[32] = v95;
    v69 = v91;
    *((_QWORD *)v24 + 5) = v94;
    *((_QWORD *)v24 + 6) = v69;
    swift_retain();
    sub_100021A14((uint64_t)v13, &qword_100BD3DA8);
    sub_1000215BC((uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    swift_release();
    v70 = v100;
    sub_100037794((uint64_t)v24, v100, &qword_100BF60E0);
    LOBYTE(v62) = static Edge.Set.trailing.getter(v71);
    v72 = EdgeInsets.init(_all:)(60.0);
    v74 = v73;
    v76 = v75;
    v78 = v77;
    v79 = v101;
    sub_100037794((uint64_t)v24, v101, &qword_100BF60E0);
    v80 = v79 + *(int *)(v98 + 36);
    *(_BYTE *)v80 = v62;
    *(double *)(v80 + 8) = v72;
    *(_QWORD *)(v80 + 16) = v74;
    *(_QWORD *)(v80 + 24) = v76;
    *(_QWORD *)(v80 + 32) = v78;
    *(_BYTE *)(v80 + 40) = 0;
    v81 = v96;
    sub_100037794((uint64_t)v24, v96, &qword_100BF60E0);
    v82 = v97;
    sub_100037794(v70, v97, &qword_100BF60E0);
    v83 = v99;
    sub_100037794(v79, v99, &qword_100BF60D8);
    v84 = (uint64_t)v102;
    sub_100037794(v81, (uint64_t)v102, &qword_100BF60E0);
    v85 = sub_1000BA294(&qword_100BF60E8);
    sub_100037794(v82, v84 + *(int *)(v85 + 48), &qword_100BF60E0);
    sub_100037794(v83, v84 + *(int *)(v85 + 64), &qword_100BF60D8);
    sub_100021A14(v83, &qword_100BF60D8);
    sub_100021A14(v82, &qword_100BF60E0);
    sub_100021A14(v81, &qword_100BF60E0);
    v86 = v106;
    sub_100037794(v84, (uint64_t)v106, &qword_100BF60A0);
    swift_storeEnumTagMultiPayload(v86, v104, 0);
    v87 = sub_1000BA294(&qword_100BD76B8);
    sub_10003D2DC(&qword_100BF6098, &qword_100BF60A0);
    v89 = v88;
    v90 = sub_100372A3C(&qword_100BD76B0, &qword_100BD76B8, (void (*)(void))sub_1003213A4);
    _ConditionalContent<>.init(storage:)(v86, v105, v87, v89, v90);
    sub_100021A14(v84, &qword_100BF60A0);
    sub_100021A14(v79, &qword_100BF60D8);
    sub_100021A14(v70, &qword_100BF60E0);
    sub_100021A14((uint64_t)v24, &qword_100BF60E0);
  }
}

uint64_t sub_1005F4FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for ContentSizeCategory(0);
  v27 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - v6;
  v8 = type metadata accessor for NewsArticleComponentView(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - v12;
  v14 = *(_QWORD *)(v1 + 16);
  v15 = *(_BYTE *)(v1 + 24);
  sub_10008D47C(v14, v15);
  sub_1007A5B80();
  v17 = v16;
  sub_1000B15F8(v14, v15);
  sub_10000AB54(v1, (uint64_t)v13, type metadata accessor for NewsArticleComponentView);
  if (v17 != 1)
  {
    sub_1000215BC((uint64_t)v13, type metadata accessor for NewsArticleComponentView);
    sub_10000AB54(v1, (uint64_t)v10, type metadata accessor for NewsArticleComponentView);
    goto LABEL_5;
  }
  sub_100109D64();
  v18 = v27;
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v4, enum case for ContentSizeCategory.medium(_:), v2);
  v19 = sub_1005F622C((uint64_t)v7, (uint64_t)v4);
  v20 = *(void (**)(char *, uint64_t))(v18 + 8);
  v20(v4, v2);
  v20(v7, v2);
  sub_1000215BC((uint64_t)v13, type metadata accessor for NewsArticleComponentView);
  sub_10000AB54(v1, (uint64_t)v10, type metadata accessor for NewsArticleComponentView);
  if (!v19)
  {
LABEL_5:
    v24 = 0;
    goto LABEL_6;
  }
  v21 = *(_QWORD *)v10;
  v22 = v10[8];
  sub_10008D47C(*(_QWORD *)v10, v22);
  sub_100109B54();
  v24 = v23;
  sub_1000B15F8(v21, v22);
LABEL_6:
  sub_1000215BC((uint64_t)v10, type metadata accessor for NewsArticleComponentView);
  return v24 & 1;
}

uint64_t sub_1005F5204@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  unsigned __int8 v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  char v29;
  unsigned __int8 v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = v1;
  v46 = a1;
  v3 = type metadata accessor for ContentSizeCategory(0);
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - v7;
  v9 = type metadata accessor for NewsArticleComponentView(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v43 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v43 - v16;
  v18 = *(_QWORD *)(v2 + 16);
  v19 = *(_BYTE *)(v2 + 24);
  sub_10008D47C(v18, v19);
  sub_1007A5B80();
  v21 = v20;
  sub_1000B15F8(v18, v19);
  sub_10000AB54(v2, (uint64_t)v17, type metadata accessor for NewsArticleComponentView);
  if (v21 != 1)
  {
    sub_1000215BC((uint64_t)v17, type metadata accessor for NewsArticleComponentView);
    v26 = v46;
LABEL_5:
    v28 = *(_QWORD *)(v2 + 16);
    v29 = *(_BYTE *)(v2 + 24);
    sub_10008D47C(v28, v29);
    sub_1007A5B80();
    v31 = v30;
    sub_1000B15F8(v28, v29);
    sub_10000AB54(v2, (uint64_t)v14, type metadata accessor for NewsArticleComponentView);
    if (v31 >= 2)
    {
      sub_100109D64();
      v32 = v44;
      v33 = v45;
      (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v5, enum case for ContentSizeCategory.extraExtraLarge(_:), v45);
      v34 = sub_1005F622C((uint64_t)v8, (uint64_t)v5);
      v35 = *(void (**)(char *, uint64_t))(v32 + 8);
      v35(v5, v33);
      v35(v8, v33);
      sub_1000215BC((uint64_t)v14, type metadata accessor for NewsArticleComponentView);
      sub_10000AB54(v2, (uint64_t)v11, type metadata accessor for NewsArticleComponentView);
      if (v34)
      {
        v36 = *(_QWORD *)v11;
        v37 = v11[8];
        sub_10008D47C(*(_QWORD *)v11, v37);
        sub_100109B54();
        v39 = v38;
        sub_1000B15F8(v36, v37);
        sub_1000215BC((uint64_t)v11, type metadata accessor for NewsArticleComponentView);
        if ((v39 & 1) != 0)
        {
          v27 = (unsigned int *)&enum case for DynamicTypeSize.xxLarge(_:);
          goto LABEL_12;
        }
LABEL_11:
        v27 = (unsigned int *)&enum case for DynamicTypeSize.accessibility5(_:);
        goto LABEL_12;
      }
    }
    else
    {
      sub_1000215BC((uint64_t)v14, type metadata accessor for NewsArticleComponentView);
      sub_10000AB54(v2, (uint64_t)v11, type metadata accessor for NewsArticleComponentView);
    }
    sub_1000215BC((uint64_t)v11, type metadata accessor for NewsArticleComponentView);
    goto LABEL_11;
  }
  v22 = *(_QWORD *)v17;
  v23 = v17[8];
  sub_10008D47C(*(_QWORD *)v17, v23);
  sub_100109B54();
  v25 = v24;
  sub_1000B15F8(v22, v23);
  sub_1000215BC((uint64_t)v17, type metadata accessor for NewsArticleComponentView);
  v26 = v46;
  if ((v25 & 1) == 0)
    goto LABEL_5;
  v27 = (unsigned int *)&enum case for DynamicTypeSize.large(_:);
LABEL_12:
  v40 = *v27;
  v41 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v26, v40, v41);
}

void sub_1005F5548(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;

  v2 = v1;
  v88 = a1;
  v3 = type metadata accessor for BlendMode(0);
  v82 = *(_QWORD *)(v3 - 8);
  v83 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_1000BA294((uint64_t *)&unk_100C0A510);
  __chkstk_darwin(v80);
  v87 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.Leading(0);
  v84 = *(_QWORD *)(v7 - 8);
  v85 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_1000BA294(&qword_100BE59C0);
  v75 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v74 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_1000BA294(&qword_100BF60A8);
  __chkstk_darwin(v73);
  v79 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BF60B0);
  __chkstk_darwin(v15);
  v76 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v81 = (uint64_t)&v69 - v18;
  v19 = sub_1000BA294(&qword_100BF60B8);
  __chkstk_darwin(v19);
  v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for NewsArticleComponentViewModel(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(int *)(type metadata accessor for NewsArticleComponentView(0) + 28);
  v86 = v2;
  sub_10000AB54(v2 + v25, (uint64_t)v24, type metadata accessor for NewsArticleComponentViewModel);
  v78 = v24;
  if (swift_getEnumCaseMultiPayload(v24) == 1)
  {
    v69 = v19;
    v70 = v21;
    v71 = v15;
    v72 = v5;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1);
    v26._countAndFlagsBits = 0x206E69206E65704FLL;
    v26._object = (void *)0xED0000207377654ELL;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v26);
    Image.init(systemName:)(0xD000000000000010, 0x8000000100A0DE50);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release();
    v27._countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v27);
    v28 = LocalizedStringKey.init(stringInterpolation:)(v12);
    v32 = Text.init(_:tableName:bundle:comment:)(v28, v30, v29 & 1, v31, 0, 0, 0, "Call to Action to open the article in the News app, where %@ is a RTL-respecting arrow (ex: Opens In News (arrow.up.forward))", 125, 2);
    v34 = v33;
    v36 = v35;
    v38 = v37 & 1;
    v39 = static Font.caption.getter(v32);
    v41 = v84;
    v40 = v85;
    (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v9, enum case for Font.Leading.tight(_:), v85);
    v42 = Font.leading(_:)(v9, v39);
    v43 = swift_release();
    (*(void (**)(char *, uint64_t, __n128))(v41 + 8))(v9, v40, v43);
    v44 = Text.font(_:)(v42, v32, v34, v38, v36);
    v46 = v45;
    LOBYTE(v41) = v47;
    v49 = v48;
    swift_release();
    sub_1000D31B4(v32, v34, v38);
    swift_bridgeObjectRelease();
    v89 = v44;
    v90 = v46;
    v91 = v41 & 1;
    v92 = v49;
    v50 = v87;
    sub_1005F5204(v87);
    v51 = type metadata accessor for DynamicTypeSize(0);
    sub_10000F1C8(&qword_100C0A550, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v50, v50, v51, v52) & 1) != 0)
    {
      sub_10003D2DC(&qword_100BC4E30, (uint64_t *)&unk_100C0A510);
      v53 = v74;
      View.dynamicTypeSize<A>(_:)(v50, &type metadata for Text, v80, &protocol witness table for Text, v54);
      sub_100021A14(v50, (uint64_t *)&unk_100C0A510);
      sub_1000D31B4(v89, v90, v91);
      swift_bridgeObjectRelease();
      v56 = static HierarchicalShapeStyle.tertiary.getter(v55);
      v57 = v75;
      v58 = (uint64_t)v79;
      v59 = v77;
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v79, v53, v77);
      *(_DWORD *)(v58 + *(int *)(v73 + 36)) = v56;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v53, v59);
      v61 = v82;
      v60 = v83;
      v62 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v72, enum case for BlendMode.plusLighter(_:), v83);
      v63 = v71;
      v64 = (uint64_t)v76;
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(&v76[*(int *)(v71 + 36)], v62, v60);
      sub_100037794(v58, v64, &qword_100BF60A8);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
      sub_100021A14(v58, &qword_100BF60A8);
      v65 = v81;
      sub_1000F111C(v64, v81, &qword_100BF60B0);
      v66 = (uint64_t)v70;
      sub_100037794(v65, (uint64_t)v70, &qword_100BF60B0);
      swift_storeEnumTagMultiPayload(v66, v69, 1);
      v67 = sub_100372A3C(&qword_100BF60C0, &qword_100BF60B0, (void (*)(void))sub_1005F7258);
      _ConditionalContent<>.init(storage:)(v66, &type metadata for EmptyView, v63, &protocol witness table for EmptyView, v67);
      sub_100021A14(v65, &qword_100BF60B0);
      sub_1000215BC((uint64_t)v78, type metadata accessor for NewsArticleComponentViewModel);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_storeEnumTagMultiPayload(v21, v19, 0);
    v68 = sub_100372A3C(&qword_100BF60C0, &qword_100BF60B0, (void (*)(void))sub_1005F7258);
    _ConditionalContent<>.init(storage:)(v21, &type metadata for EmptyView, v15, &protocol witness table for EmptyView, v68);
  }
}

void sub_1005F5C10(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *(**v30)@<X0>(unint64_t@<X0>, void *@<X8>, __n128@<Q0>);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a1;
  v40 = sub_1000BA294(&qword_100BF6050);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000986FC();
  v39 = v4;
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v37 - v6);
  sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_1000986FC();
  v38 = v9;
  __chkstk_darwin(v10);
  v12 = (char *)&v37 - v11;
  v13 = (int *)sub_1000BA294(&qword_100BF6058);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v41 = (uint64_t)&v37 - v18;
  v19 = type metadata accessor for NewsArticleComponentContentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100088FDC();
  v22 = v21;
  v43 = sub_1000BA294(&qword_100BF6060);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100098694();
  sub_1000C21E4();
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_100079F58();
  v25 = sub_1000D9FFC();
  sub_10000AB54(v42 + *(int *)(v25 + 28), v1, type metadata accessor for NewsArticleComponentViewModel);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v37 = v22;
    sub_100256708(v1, v22);
    sub_1000C5F5C(v22 + *(int *)(v19 + 20), (uint64_t)v12);
    v27 = v38;
    sub_1000C5F5C((uint64_t)v12, v38);
    type metadata accessor for URL(0);
    sub_1000C20AC((uint64_t)v16);
    *v7 = 0;
    v28 = v40;
    sub_1000C20AC((uint64_t)v7 + *(int *)(v40 + 36));
    *(_QWORD *)((char *)v7 + *(int *)(v28 + 40)) = 0x8000000000000000;
    v29 = v39;
    sub_1000C5F5C((uint64_t)v7, v39);
    State.init(wrappedValue:)(v29, v28);
    sub_100021A14((uint64_t)v7, &qword_100BF6050);
    sub_100230A10(v27, (uint64_t)v16);
    *(_QWORD *)&v16[v13[9]] = 0x3FF0000000000000;
    *(_QWORD *)&v16[v13[10]] = 0;
    v30 = (void *(**)@<X0>(unint64_t@<X0>, void *@<X8>, __n128@<Q0>))&v16[v13[11]];
    *v30 = sub_10022E644;
    v30[1] = 0;
    sub_100021A14((uint64_t)v12, &qword_100BD4280);
    v31 = v41;
    sub_1000F111C((uint64_t)v16, v41, &qword_100BF6058);
    sub_1000C5F5C(v31, (uint64_t)v2);
    swift_storeEnumTagMultiPayload(v2, v43, 1);
    sub_10003D2DC(&qword_100BF6068, &qword_100BF6058);
    sub_1000CCFD4(v32, (uint64_t)&type metadata for Color, v33, (uint64_t)&protocol witness table for Color, v32);
    sub_100021A14(v31, &qword_100BF6058);
    sub_1000215BC(v37, type metadata accessor for NewsArticleComponentContentViewModel);
  }
  else
  {
    static Color.white.getter(EnumCaseMultiPayload);
    v34 = Color.opacity(_:)(0.08);
    swift_release();
    *v2 = v34;
    swift_storeEnumTagMultiPayload(v2, v43, 0);
    sub_10003D2DC(&qword_100BF6068, &qword_100BF6058);
    sub_1000CCFD4(v35, (uint64_t)&type metadata for Color, v36, (uint64_t)&protocol witness table for Color, v35);
  }
  sub_100098640();
}

uint64_t sub_1005F5FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  Swift::String v26;

  sub_1000D9FFC();
  v0 = sub_100255BC8();
  v2 = v1;
  v3 = sub_100255B0C();
  v5 = v4;
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v26._object = (void *)0x8000000100A0DDB0;
  v7._countAndFlagsBits = 0x206E69206E65704FLL;
  v7._object = (void *)0xEC0000007377654ELL;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v26._countAndFlagsBits = 0xD000000000000071;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v26);

  if (!v2)
  {
    v11 = _swiftEmptyArrayStorage;
    if (!v5)
      goto LABEL_12;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  sub_1000B2E08();
  v11 = v10;
  v12 = v10[2];
  if (v12 >= v10[3] >> 1)
  {
    sub_1000BC708();
    v11 = v23;
  }
  v11[2] = v12 + 1;
  v13 = &v11[2 * v12];
  v13[4] = v0;
  v13[5] = v2;
  if (v5)
  {
LABEL_7:
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
    {
      sub_1000BC708();
      v11 = v24;
    }
    v14 = v11[2];
    if (v14 >= v11[3] >> 1)
    {
      sub_1000BC708();
      v11 = v25;
    }
    v11[2] = v14 + 1;
    v15 = &v11[2 * v14];
    v15[4] = v3;
    v15[5] = v5;
  }
LABEL_12:
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
  {
    sub_1000BC708();
    v11 = v21;
  }
  v16 = v11[2];
  if (v16 >= v11[3] >> 1)
  {
    sub_1000BC708();
    v11 = v22;
  }
  v11[2] = v16 + 1;
  *(Swift::String *)&v11[2 * v16 + 4] = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = sub_1000BA294(&qword_100BF1280);
  sub_10003D2DC((unint64_t *)&qword_100BD35B0, &qword_100BF1280);
  v19 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v17, v18);
  swift_bridgeObjectRelease();
  return v19;
}

BOOL sub_1005F622C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v19 - v9, a1, v4);
  v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  v13 = v12(v10, v4);
  v14 = 0;
  v15 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v13 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v13 == enum case for ContentSizeCategory.small(_:))
    {
      v14 = 1;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.medium(_:))
    {
      v14 = 2;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.large(_:))
      goto LABEL_7;
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      v14 = 4;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      v14 = 5;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      v14 = 6;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      v14 = 7;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      v14 = 8;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      v14 = 9;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      v14 = 10;
    }
    else
    {
      if (v13 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_7:
        v14 = 3;
        goto LABEL_24;
      }
      v14 = 11;
    }
  }
LABEL_24:
  v11(v8, a2, v4);
  v16 = v12(v8, v4);
  if (v16 == v15)
  {
    v17 = 0;
  }
  else if (v16 == enum case for ContentSizeCategory.small(_:))
  {
    v17 = 1;
  }
  else if (v16 == enum case for ContentSizeCategory.medium(_:))
  {
    v17 = 2;
  }
  else
  {
    if (v16 != enum case for ContentSizeCategory.large(_:))
    {
      if (v16 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        v17 = 4;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        v17 = 5;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        v17 = 6;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        v17 = 7;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        v17 = 8;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        v17 = 9;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        v17 = 10;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        v17 = 11;
        return v14 >= v17;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v17 = 3;
  }
  return v14 >= v17;
}

void sub_1005F65B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(unint64_t);
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (**v77)(unint64_t);
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD v114[3];

  v109 = a2;
  v111 = (char *)a1;
  v113 = a3;
  v98 = sub_1000BA294(&qword_100BF6108);
  __chkstk_darwin(v98);
  v96 = (uint64_t)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v95 = (uint64_t *)((char *)&v88 - v5);
  v106 = sub_1000BA294(&qword_100BF6110);
  __chkstk_darwin(v106);
  v97 = (uint64_t)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v99 = (uint64_t)&v88 - v8;
  v103 = sub_1000BA294(&qword_100BF6118);
  __chkstk_darwin(v103);
  v105 = (uint64_t *)((char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v93 = type metadata accessor for Font.Leading(0);
  v92 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v91 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v11);
  v94 = (uint64_t)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v102 = (uint64_t)&v88 - v14;
  __chkstk_darwin(v15);
  v101 = (char *)&v88 - v16;
  v110 = type metadata accessor for URL(0);
  v108 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v107 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_1000BA294(&qword_100BF6120);
  __chkstk_darwin(v112);
  v104 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for NewsArticleComponentContentViewModel(0);
  __chkstk_darwin(v100);
  v20 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000BA294(&qword_100BF6128);
  __chkstk_darwin(v21);
  v23 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000BA294(&qword_100BF6100);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_QWORD *)(v25 + 64);
  __chkstk_darwin(v24);
  v27 = type metadata accessor for NewsArticleComponentViewModel(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for NewsArticleComponentView(0);
  sub_10000AB54((uint64_t)&v111[*(int *)(v30 + 28)], (uint64_t)v29, type metadata accessor for NewsArticleComponentViewModel);
  if (swift_getEnumCaseMultiPayload(v29) == 1)
  {
    v88 = v25;
    v32 = v107;
    v31 = v108;
    v89 = v21;
    v90 = v24;
    v111 = v23;
    sub_100256708((uint64_t)v29, (uint64_t)v20);
    v34 = v100;
    v33 = (uint64_t)v101;
    sub_100037794((uint64_t)&v20[*(int *)(v100 + 32)], (uint64_t)v101, &qword_100BD4280);
    if (_s7Weather24LocationCompositionStateOwet_0(v33, 1, v110) == 1)
    {
      sub_100021A14(v33, &qword_100BD4280);
      v35 = &v20[*(int *)(v34 + 24)];
      v36 = *((_QWORD *)v35 + 1);
      v114[0] = *(_QWORD *)v35;
      v114[1] = v36;
      v37 = sub_100114EF8();
      swift_bridgeObjectRetain();
      v38 = Text.init<A>(_:)(v114, &type metadata for String, v37);
      v40 = v39;
      v42 = v41;
      v44 = v43 & 1;
      v45 = static Font.headline.getter(v38);
      v46 = v92;
      v47 = v91;
      v48 = v93;
      (*(void (**)(char *, _QWORD, uint64_t))(v92 + 104))(v91, enum case for Font.Leading.tight(_:), v93);
      v49 = Font.leading(_:)(v47, v45);
      v50 = swift_release();
      (*(void (**)(char *, uint64_t, __n128))(v46 + 8))(v47, v48, v50);
      v51 = Text.font(_:)(v49, v38, v40, v44, v42);
      v52 = v20;
      v54 = v53;
      LOBYTE(v46) = v55;
      v57 = v56;
      swift_release();
      sub_1000D31B4(v38, v40, v44);
      swift_bridgeObjectRelease();
      v58 = v105;
      *v105 = v51;
      v58[1] = v54;
      v59 = (uint64_t)v52;
      *((_BYTE *)v58 + 16) = v46 & 1;
      v58[3] = v57;
      swift_storeEnumTagMultiPayload(v58, v103, 1);
      sub_10003D2DC(&qword_100BF6130, &qword_100BF6110);
      v60 = (uint64_t)v104;
      _ConditionalContent<>.init(storage:)(v58, v106, &type metadata for Text, v61, &protocol witness table for Text);
    }
    else
    {
      v64 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 32);
      v101 = v20;
      v65 = v110;
      v64(v32, v33, v110);
      v66 = v102;
      (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v102, v32, v65);
      _s7Weather24LocationCompositionStateOwst_0(v66, 0, 1, v65);
      sub_100037794(v109, (uint64_t)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100BF6100);
      v67 = *(unsigned __int8 *)(v88 + 80);
      v68 = (v67 + 16) & ~v67;
      v69 = swift_allocObject(&unk_100B83E50, v68 + v26, v67 | 7);
      sub_1000F111C((uint64_t)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v69 + v68, &qword_100BF6100);
      v70 = v94;
      sub_100037794(v66, v94, &qword_100BD4280);
      v71 = (void (*)(unint64_t))swift_allocObject(&unk_100B83E78, 48, 7);
      *((_QWORD *)v71 + 2) = sub_1005F6ED0;
      *((_QWORD *)v71 + 3) = 0;
      *((_QWORD *)v71 + 4) = sub_1005F74F0;
      *((_QWORD *)v71 + 5) = v69;
      v72 = v97;
      _s7Weather24LocationCompositionStateOwst_0(v97, 1, 1, v65);
      v73 = (int *)v106;
      v74 = (uint64_t)v95;
      *v95 = 0;
      v75 = v98;
      _s7Weather24LocationCompositionStateOwst_0(v74 + *(int *)(v98 + 36), 1, 1, v65);
      *(_QWORD *)(v74 + *(int *)(v75 + 40)) = 0x8000000000000000;
      v76 = v96;
      sub_100037794(v74, v96, &qword_100BF6108);
      State.init(wrappedValue:)(v76, v75);
      sub_100021A14(v74, &qword_100BF6108);
      sub_100230A10(v70, v72);
      *(_QWORD *)(v72 + v73[9]) = 0x3FF0000000000000;
      *(_QWORD *)(v72 + v73[10]) = 0;
      v77 = (void (**)(unint64_t))(v72 + v73[11]);
      *v77 = sub_1005F7568;
      v77[1] = v71;
      sub_100021A14(v102, &qword_100BD4280);
      v78 = v99;
      sub_1000F111C(v72, v99, &qword_100BF6110);
      v79 = v105;
      sub_100037794(v78, (uint64_t)v105, &qword_100BF6110);
      swift_storeEnumTagMultiPayload(v79, v103, 0);
      sub_10003D2DC(&qword_100BF6130, &qword_100BF6110);
      v60 = (uint64_t)v104;
      _ConditionalContent<>.init(storage:)(v79, v73, &type metadata for Text, v80, &protocol witness table for Text);
      sub_100021A14(v78, &qword_100BF6110);
      v81 = v65;
      v59 = (uint64_t)v101;
      (*(void (**)(char *, uint64_t))(v108 + 8))(v107, v81);
    }
    v82 = v112;
    v83 = (uint64_t)v111;
    v84 = v90;
    v85 = v89;
    sub_100037794(v60, (uint64_t)v111, &qword_100BF6120);
    swift_storeEnumTagMultiPayload(v83, v85, 1);
    v86 = sub_100372A3C(&qword_100BF6138, &qword_100BF6100, (void (*)(void))sub_1005F7340);
    v87 = sub_1005F73C4();
    _ConditionalContent<>.init(storage:)(v83, v84, v82, v86, v87);
    sub_100021A14(v60, &qword_100BF6120);
    sub_1000215BC(v59, type metadata accessor for NewsArticleComponentContentViewModel);
  }
  else
  {
    sub_100037794(v109, (uint64_t)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100BF6100);
    sub_100037794((uint64_t)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v23, &qword_100BF6100);
    swift_storeEnumTagMultiPayload(v23, v21, 0);
    v62 = sub_100372A3C(&qword_100BF6138, &qword_100BF6100, (void (*)(void))sub_1005F7340);
    v63 = sub_1005F73C4();
    _ConditionalContent<>.init(storage:)(v23, v24, v112, v62, v63);
    sub_100021A14((uint64_t)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100BF6100);
  }
}

uint64_t sub_1005F6ED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v4 = sub_1000BA294(&qword_100BDD818);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Image.ResizingMode(0, v5);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v9 + 104))(v12, enum case for Image.ResizingMode.stretch(_:), v8, v10);
  v13 = Image.resizable(capInsets:resizingMode:)(v12, a1, 0.0, 0.0, 0.0, 0.0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v14 = enum case for Image.TemplateRenderingMode.template(_:);
  v15 = type metadata accessor for Image.TemplateRenderingMode(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v7, v14, v15);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v15);
  v16 = Image.renderingMode(_:)(v7, v13);
  swift_release();
  sub_100021A14((uint64_t)v7, &qword_100BDD818);
  v18 = static Color.white.getter(v17);
  result = swift_getKeyPath(&unk_1009B7100);
  *(_QWORD *)a2 = v16;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 32) = 1;
  return result;
}

unint64_t sub_1005F705C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100BF6000;
  if (!qword_100BF6000)
  {
    v1 = sub_100075EB0(&qword_100BD9AA0);
    v2 = sub_100075EB0(&qword_100BF5FE0);
    sub_10003D2DC(&qword_100BF5FF8, &qword_100BF5FE0);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000F1C8((unint64_t *)&qword_100BC6768, type metadata accessor for AutomationInfoViewModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF6000);
  }
  return result;
}

unint64_t sub_1005F7130()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF6088;
  if (!qword_100BF6088)
  {
    v1 = sub_100075EB0(&qword_100BF6078);
    sub_1005F71B4();
    sub_10003D2DC(&qword_100BCD8A0, &qword_100BCD8A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF6088);
  }
  return result;
}

unint64_t sub_1005F71B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF6090;
  if (!qword_100BF6090)
  {
    v1 = sub_100075EB0(&qword_100BF6070);
    sub_10003D2DC(&qword_100BF6098, &qword_100BF60A0);
    sub_100372A3C(&qword_100BD76B0, &qword_100BD76B8, (void (*)(void))sub_1003213A4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF6090);
  }
  return result;
}

unint64_t sub_1005F7258()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_100BF60C8;
  if (!qword_100BF60C8)
  {
    v1 = sub_100075EB0(&qword_100BF60A8);
    v2 = sub_100075EB0((uint64_t *)&unk_100C0A510);
    sub_10003D2DC(&qword_100BC4E30, (uint64_t *)&unk_100C0A510);
    v4[0] = &type metadata for Text;
    v4[1] = v2;
    v4[2] = &protocol witness table for Text;
    v4[3] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_10003D2DC(&qword_100BC3AE0, &qword_100BC3AE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF60C8);
  }
  return result;
}

unint64_t sub_1005F7340()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF6140;
  if (!qword_100BF6140)
  {
    v1 = sub_100075EB0(&qword_100BF60F8);
    sub_10003D2DC(&qword_100BD9910, &qword_100BD3DA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF6140);
  }
  return result;
}

unint64_t sub_1005F73C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF6148;
  if (!qword_100BF6148)
  {
    v1 = sub_100075EB0(&qword_100BF6120);
    sub_10003D2DC(&qword_100BF6130, &qword_100BF6110);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF6148);
  }
  return result;
}

uint64_t sub_1005F7448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(sub_1000BA294(&qword_100BF6100) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  swift_release();
  v7 = *(int *)(sub_1000BA294(&qword_100BF60F8) + 36);
  v8 = v6 + v7 + *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v4, v5);
}

void sub_1005F74F0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000BA294(&qword_100BF6100) - 8) + 80);
  sub_100037794(v1 + ((v3 + 16) & ~v3), a1, &qword_100BF6100);
  sub_100079F70();
}

uint64_t sub_1005F753C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1005F7568(unint64_t a1)
{
  uint64_t v1;

  sub_1005F2EE0(a1, *(void (**)(_QWORD *__return_ptr))(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(void))(v1 + 32));
}

unint64_t sub_1005F7580()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF6168;
  if (!qword_100BF6168)
  {
    v1 = sub_100075EB0(&qword_100BF5FE8);
    sub_1005F705C();
    sub_10000F1C8((unint64_t *)&qword_100BC4E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF6168);
  }
  return result;
}

uint64_t sub_1005F7604(int a1, int a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  id v45;
  id v46;
  id v47;
  double v48;
  id v49;
  id v50;
  id v51;
  char *v52;
  _QWORD v54[7];
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v72 = a4;
  v73 = a6;
  v70 = a5;
  v71 = a3;
  v59 = a2;
  v69 = a1;
  v57 = sub_1000BA294(&qword_100BDD4A8);
  v55 = *(_QWORD *)(v57 - 8);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_1000986FC();
  v58 = v9;
  __chkstk_darwin(v10);
  v56 = (char *)v54 - v11;
  v12 = type metadata accessor for NumberFormatStyleConfiguration.Precision(0);
  v64 = *(_QWORD *)(v12 - 8);
  v65 = v12;
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v63 = v14;
  type metadata accessor for Locale(0);
  sub_10009D98C();
  __chkstk_darwin(v15);
  sub_100088FDC();
  v67 = v16;
  v62 = sub_1000BA294(&qword_100BCE798);
  v60 = *(_QWORD *)(v62 - 8);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_1000986FC();
  v66 = v18;
  __chkstk_darwin(v19);
  v61 = (char *)v54 - v20;
  v68 = type metadata accessor for WeatherFormatPlaceholder(0);
  v21 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v23 = (char *)v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)v54 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)v54 - v29;
  v31 = sub_1000BA294(&qword_100BC4E68);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v33 = sub_1000BA294(&qword_100BF6218);
  __chkstk_darwin(v33);
  __chkstk_darwin(v34);
  v36 = (char *)v54 - v35;
  __chkstk_darwin(v37);
  if (!(v73 >> 6))
  {
    v57 = (uint64_t)v30;
    v58 = v25;
    v54[0] = v32;
    v54[1] = v31;
    v54[6] = v27;
    v54[2] = v24;
    v54[3] = v23;
    v54[4] = v21;
    v54[5] = v41;
    v55 = v40;
    v56 = (char *)v38;
    v43 = (void *)v72;
    if (v72)
    {
      v44 = (char *)v54 - v39;
      sub_100079FE8(v38, &qword_100BF6208, NSDimension_ptr);
      v45 = v43;
      v46 = (id)v71;
      v47 = v45;
      if ((static NSObject.== infix(_:_:)(v46, v47) & 1) != 0)
      {

      }
      else
      {
        v50 = v47;
        sub_1000C4CA8((uint64_t)v50);
        v51 = v46;
        v52 = v56;
        Measurement<>.converted(to:)(v51, v56);
        sub_1000BA58C((uint64_t)v36);
        Measurement.value.getter(v52);

        sub_1000BA58C((uint64_t)v44);
      }
    }
    else
    {
      v49 = (id)v71;
    }
    __asm { BR              X10 }
  }
  if (v73 >> 6 != 1)
  {
    v42 = 0;
    if (v70 | v72 | v71 || v73 != 128)
      return v42;
    v48 = round(a7);
    if ((~*(_QWORD *)&v48 & 0x7FF0000000000000) != 0)
    {
      if (v48 > -9.22337204e18)
      {
        if (v48 < 9.22337204e18)
        {
          v74 = (uint64_t)v48;
          sub_100121D48();
          return BinaryInteger.formatted()()._countAndFlagsBits;
        }
LABEL_21:
        __break(1u);
        JUMPOUT(0x1005F806CLL);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }
  if (a7 <= 1.0)
    __asm { BR              X10 }
  return 0;
}

BOOL sub_1005F80A4(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 a4, unint64_t a5, unint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  int v14;
  int v15;
  _BOOL8 result;
  id v17;
  id v18;
  id v19;
  char v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  char v25;
  BOOL v26;
  id v27;

  v14 = a4;
  v15 = a8;
  if (a4 >> 6)
  {
    if (a4 >> 6 != 1)
    {
      if (a3 | a2 | a1 || a4 != 128)
      {
        if ((a8 & 0xC0) != 0x80)
          return 0;
        v26 = a8 == 128 && a5 == 1;
        if (!v26 || a7 | a6)
          return 0;
      }
      else if ((a8 & 0xC0) != 0x80 || a7 | a6 | a5 || a8 != 128)
      {
        return 0;
      }
      return 1;
    }
    if ((a8 & 0xC0) == 0x40)
      return a1 == a5 && a6 == a2;
    return 0;
  }
  if (a8 >= 0x40u)
    return 0;
  sub_100079FE8(a1, (unint64_t *)&qword_100BC4D48, NSObject_ptr);
  v27 = (id)a6;
  v17 = (id)a1;
  v18 = (id)a5;
  v19 = (id)a2;
  v20 = static NSObject.== infix(_:_:)(v17, v18);

  if ((v20 & 1) == 0)
  {

    v22 = v27;
    goto LABEL_29;
  }
  v22 = v27;
  if (!a2)
  {
    if (!a6)
    {
      if (a3 != a7)
        return 0;
      return v14 == v15;
    }
LABEL_29:

    return 0;
  }
  if (!a6)
  {

    return 0;
  }
  sub_100079FE8(v21, &qword_100BF6208, NSDimension_ptr);
  v23 = v19;
  v24 = v27;
  v25 = static NSObject.== infix(_:_:)(v23, v24);

  result = 0;
  if ((v25 & 1) != 0 && a3 == a7)
    return v14 == v15;
  return result;
}

BOOL sub_1005F8294(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BOOL4 v4;

  v4 = *(double *)&a1 == *(double *)&a3;
  if ((a4 & 1) != 0)
    v4 = 0;
  if ((a2 & 1) != 0)
    return a4 & (a1 == a3);
  else
    return v4;
}

BOOL sub_1005F82C8(uint64_t a1, uint64_t a2)
{
  return sub_1005F8294(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

BOOL sub_1005F82E4(uint64_t a1, uint64_t a2)
{
  return sub_1005F80A4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t sub_1005F8308(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1005F8310(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

void type metadata accessor for ChartTickValueKind()
{
  sub_100098884();
}

void sub_1005F8328(uint64_t a1)
{
  sub_1001A44FC(*(void **)a1, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_1005F833C(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1001A41A0(*(id *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t sub_1005F8398(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1001A41A0(*(id *)a2, v4, v5, v6);
  v7 = *(void **)a1;
  v8 = *(void **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_1001A44FC(v7, v8, v9, v10);
  return a1;
}

uint64_t sub_1005F8404(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1001A44FC(v5, v7, v6, v8);
  return a1;
}

uint64_t sub_1005F8450(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x1E && *(_BYTE *)(a1 + 25))
    {
      v2 = *(_DWORD *)a1 + 29;
    }
    else
    {
      v2 = ((*(unsigned __int8 *)(a1 + 24) >> 1) & 0x1C | (*(unsigned __int8 *)(a1 + 24) >> 6)) ^ 0x1F;
      if (v2 >= 0x1D)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t sub_1005F849C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1D)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 30;
    if (a3 >= 0x1E)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x1E)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 8 * (((-a2 >> 2) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t sub_1005F84F8(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 24);
  v2 = (char)v1;
  v3 = v1 >> 6;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1005F8518(uint64_t result)
{
  *(_BYTE *)(result + 24) &= 0x3Fu;
  return result;
}

uint64_t sub_1005F8528(uint64_t result, unsigned int a2)
{
  char v2;

  if (a2 < 2)
  {
    v2 = *(_BYTE *)(result + 24) & 7 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 2;
    v2 = 0x80;
  }
  *(_BYTE *)(result + 24) = v2;
  return result;
}

void type metadata accessor for ChartAxisLabelFormatter()
{
  sub_100098884();
}

uint64_t sub_1005F8560(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1005F85AC + 4 * byte_1009B7185[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1005F85E0 + 4 * byte_1009B7180[v4]))();
}

uint64_t sub_1005F85E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F85E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005F85F0);
  return result;
}

uint64_t sub_1005F85FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005F8604);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1005F8608(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F8610(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ChartAxisUnitVisibility()
{
  sub_100098884();
}

unint64_t sub_1005F862C()
{
  unint64_t result;

  result = qword_100BF6210;
  if (!qword_100BF6210)
  {
    result = swift_getWitnessTable(&unk_1009B7278, &unk_100B84090);
    atomic_store(result, (unint64_t *)&qword_100BF6210);
  }
  return result;
}

char *sub_1005F8668(char *a1, char *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (char *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    swift_bridgeObjectRetain();
    v11 = sub_1000BA294(&qword_100BC4E68);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    v12(&a1[a3[6]], &a2[a3[6]], v11);
    v12(&a1[a3[7]], &a2[a3[7]], v11);
    v13 = a3[8];
    v14 = a3[9];
    v15 = &a1[v13];
    v16 = &a2[v13];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = &a1[v14];
    v19 = &a2[v14];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

char *sub_1005F8764(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1000BA294(&qword_100BC4E68);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v10(&a1[a3[7]], &a2[a3[7]], v9);
  v11 = a3[8];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[9];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1005F8870(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1000BA294(&qword_100BC4E68);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v10(&a1[a3[7]], &a2[a3[7]], v9);
  v11 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  return a1;
}

char *sub_1005F8928(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1000BA294(&qword_100BC4E68);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v10(&a1[a3[7]], &a2[a3[7]], v9);
  v11 = a3[8];
  v12 = &a1[v11];
  v13 = (uint64_t *)&a2[v11];
  v15 = *v13;
  v14 = v13[1];
  *(_QWORD *)v12 = v15;
  *((_QWORD *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  v16 = a3[9];
  v17 = &a1[v16];
  v18 = (uint64_t *)&a2[v16];
  v20 = *v18;
  v19 = v18[1];
  *(_QWORD *)v17 = v20;
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1005F8A0C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10003BCA4(*a1);
    sub_100079F70();
  }
  else
  {
    v6 = sub_1000BA294(&qword_100BC4E68);
    sub_1000B250C((uint64_t)a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t sub_1005F8A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005F8A74);
}

void sub_1005F8A74(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    sub_100079F70();
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BC4E68);
    sub_1000987C4((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t sub_1005F8AD4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v13;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v25;
  unint64_t v27;
  unint64_t v29;
  unint64_t v30;
  char v31;

  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C6562614C796164 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6562614C796164, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100A0DF80)
  {
    v9 = 0x8000000100A0DF80;
LABEL_22:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100A0DF80, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000)
  {
    v11 = 0xE800000000000000;
    goto LABEL_30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E6F5A656D6974, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_30:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0x706D6554776F6CLL && a2 == 0xE700000000000000)
  {
    v13 = 0xE700000000000000;
    goto LABEL_38;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x706D6554776F6CLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_38:
    swift_bridgeObjectRelease(v13);
    return 4;
  }
  if (a1 == 0x706D655468676968 && a2 == 0xE800000000000000)
  {
    v15 = 0xE800000000000000;
    goto LABEL_46;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x706D655468676968, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_46:
    swift_bridgeObjectRelease(v15);
    return 5;
  }
  if (a1 == 0x6F697469646E6F63 && a2 == 0xED00006E6F63496ELL)
  {
    v17 = 0xED00006E6F63496ELL;
    goto LABEL_54;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63, 0xED00006E6F63496ELL, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_54:
    swift_bridgeObjectRelease(v17);
    return 6;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100A09D40)
  {
    v18 = 0x8000000100A09D40;
LABEL_60:
    swift_bridgeObjectRelease(v18);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100A09D40, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_60;
  }
  if (a1 == 0xD000000000000013)
  {
    v19 = 0x8000000100A09D60;
    if (a2 == 0x8000000100A09D60)
      goto LABEL_65;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100A09D60, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
LABEL_65:
    swift_bridgeObjectRelease(v19);
    return 8;
  }
  if (a1 == 0xD00000000000001DLL && a2 == 0x8000000100A0DFA0)
  {
    v20 = 0x8000000100A0DFA0;
LABEL_71:
    swift_bridgeObjectRelease(v20);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100A0DFA0, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_71;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x8000000100A0DFC0)
  {
    v21 = 0x8000000100A0DFC0;
LABEL_77:
    swift_bridgeObjectRelease(v21);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100A0DFC0, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_77;
  }
  if (a1 == 0x7469706963657270 && a2 == 0xED00006E6F697461)
  {
    v23 = 0xED00006E6F697461;
    goto LABEL_85;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7469706963657270, 0xED00006E6F697461, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
LABEL_85:
    swift_bridgeObjectRelease(v23);
    return 11;
  }
  if (a1 == 0x67696C7961447369 && a2 == 0xEA00000000007468)
  {
    v25 = 0xEA00000000007468;
    goto LABEL_93;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x67696C7961447369, 0xEA00000000007468, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
LABEL_93:
    swift_bridgeObjectRelease(v25);
    return 12;
  }
  if (a1 == 0x54706D6554776F6CLL && a2 == 0xEB00000000747865)
  {
    v27 = 0xEB00000000747865;
    goto LABEL_101;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54706D6554776F6CLL, 0xEB00000000747865, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
LABEL_101:
    swift_bridgeObjectRelease(v27);
    return 13;
  }
  if (a1 == 0x706D655468676968 && a2 == 0xEC00000074786554)
  {
    v29 = 0xEC00000074786554;
    goto LABEL_109;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x706D655468676968, 0xEC00000074786554, a1, a2, 0) & 1) != 0)
  {
    v29 = a2;
LABEL_109:
    swift_bridgeObjectRelease(v29);
    return 14;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x80000001009F8F60)
  {
    v30 = 0x80000001009F8F60;
LABEL_115:
    swift_bridgeObjectRelease(v30);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001009F8F60, a1, a2, 0) & 1) != 0)
  {
    v30 = a2;
    goto LABEL_115;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100A0DFE0)
  {
    swift_bridgeObjectRelease(0x8000000100A0DFE0);
    return 16;
  }
  else
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100A0DFE0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v31 & 1) != 0)
      return 16;
    else
      return 17;
  }
}

uint64_t sub_1005F9198(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005F91C4 + 4 * byte_1009B72A0[a1]))(1702125924, 0xE400000000000000);
}

uint64_t sub_1005F91C4()
{
  return 0x6C6562614C796164;
}

unint64_t sub_1005F91DC()
{
  return 0xD000000000000012;
}

void sub_1005F9360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;

  sub_100099310();
  a19 = v25;
  a20 = v26;
  v27 = v21;
  v29 = v28;
  sub_1000BA294(&qword_100BF6430);
  sub_1000BEAF8();
  __chkstk_darwin(v30);
  sub_100098694();
  sub_1000DB418(v29, v29[3]);
  v31 = sub_1005FBAF4();
  sub_1000B44E8((uint64_t)&type metadata for DailyForecastComponentViewModel.DayForecastViewModel.CodingKeys, v32, v31);
  LOBYTE(a10) = 0;
  v33 = type metadata accessor for Date(0);
  sub_10000F1C8(&qword_100BC3578, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  sub_10009BD50();
  sub_1000C1704(v27, v34, v20, v33, v35);
  if (!v22)
  {
    v36 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
    v37 = sub_1000D1390(v36[5]);
    sub_1000BB09C(v37, v38, 1);
    v39 = sub_1000D1390(v36[6]);
    sub_1000BB09C(v39, v40, 2);
    v41 = v27 + v36[7];
    LOBYTE(a10) = 3;
    v42 = type metadata accessor for TimeZone(0);
    sub_10000F1C8(&qword_100BEED98, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone);
    sub_1000C1704(v41, (uint64_t)&a10, v20, v42, v43);
    v44 = v27 + v36[8];
    LOBYTE(a10) = 4;
    v45 = sub_1000BA294(&qword_100BC4E68);
    sub_1005FAD94(&qword_100BF6320);
    v47 = v46;
    sub_1000C1704(v44, (uint64_t)&a10, v20, v45, v46);
    v48 = v27 + v36[9];
    LOBYTE(a10) = 5;
    sub_1000C1704(v48, (uint64_t)&a10, v20, v45, v47);
    v49 = sub_1000D1390(v36[10]);
    sub_10009D718(v49, v50, 6);
    v51 = sub_1000D1390(v36[11]);
    sub_10009D718(v51, v52, 7);
    LOBYTE(a10) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(&a10, v20);
    sub_1000BAFCC(*(unsigned __int8 *)(v27 + v36[13]), 9);
    v53 = sub_1000D1390(v36[14]);
    sub_1000BB09C(v53, v54, 10);
    v55 = v27 + v36[15];
    LOBYTE(a10) = 11;
    v56 = type metadata accessor for Precipitation(0);
    sub_10000F1C8(&qword_100BEEDC8, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v55, &a10, v20, v56, v57);
    sub_1000BAFCC(*(unsigned __int8 *)(v27 + v36[16]), 12);
    v58 = sub_1000D1390(v36[17]);
    sub_1000BB09C(v58, v59, 13);
    v60 = sub_1000D1390(v36[18]);
    sub_1000BB09C(v60, v61, 14);
    v62 = sub_1000D1390(v36[19]);
    sub_1000BB09C(v62, v63, 15);
    a10 = *(_QWORD *)(v27 + v36[20]);
    v65 = 16;
    v64 = sub_1005FBB6C();
    sub_1000C1704((uint64_t)&a10, (uint64_t)&v65, v20, (uint64_t)&unk_100B8D628, v64);
  }
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v20);
  sub_1000B44B0();
}

uint64_t sub_1005F96D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v34;
  int *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t result;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;

  v34 = sub_100098778();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(a9, a1, v34);
  v35 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  v36 = (_QWORD *)(a9 + v35[5]);
  *v36 = a2;
  v36[1] = a3;
  v37 = (_QWORD *)(a9 + v35[6]);
  *v37 = a4;
  v37[1] = a5;
  v38 = a9 + v35[7];
  v39 = sub_100099928();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v38, a6, v39);
  v40 = a9 + v35[8];
  v41 = sub_1000BA294(&qword_100BC4E68);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 32);
  v42(v40, a7, v41);
  v42(a9 + v35[9], a8, v41);
  v43 = (_QWORD *)(a9 + v35[10]);
  *v43 = a11;
  v43[1] = a12;
  v44 = (_QWORD *)(a9 + v35[11]);
  *v44 = a13;
  v44[1] = a14;
  *(double *)(a9 + v35[12]) = a10;
  *(_BYTE *)(a9 + v35[13]) = a15;
  v45 = (_QWORD *)(a9 + v35[14]);
  *v45 = a16;
  v45[1] = a17;
  result = sub_1005FAC8C(a18, a9 + v35[15]);
  *(_BYTE *)(a9 + v35[16]) = a19;
  v47 = (_QWORD *)(a9 + v35[17]);
  *v47 = a20;
  v47[1] = a21;
  v48 = (_QWORD *)(a9 + v35[18]);
  *v48 = a22;
  v48[1] = a23;
  v49 = (_QWORD *)(a9 + v35[19]);
  *v49 = a24;
  v49[1] = a25;
  *(_QWORD *)(a9 + v35[20]) = a26;
  return result;
}

void sub_1005F9904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  __n128 v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int *v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  void (*v89)(uint64_t, char *, uint64_t);
  char *v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[2];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  int *v138;
  char v139;

  sub_100099310();
  a19 = v22;
  a20 = v23;
  v136 = v20;
  v25 = v24;
  v124 = v26;
  sub_1000BA294(&qword_100BCB338);
  sub_10009D98C();
  __chkstk_darwin(v27);
  sub_100088FDC();
  v131 = v28;
  v29 = sub_1000BA294(&qword_100BC4E68);
  v129 = *(_QWORD *)(v29 - 8);
  v130 = v29;
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_1000986FC();
  v135 = v31;
  sub_10009D2A4();
  __chkstk_darwin(v32);
  v34 = (char *)v123 - v33;
  v35 = type metadata accessor for TimeZone(0);
  v126 = *(_QWORD *)(v35 - 8);
  v127 = v35;
  sub_10009D98C();
  __chkstk_darwin(v36);
  v37 = sub_100099574();
  v38 = type metadata accessor for Date(v37);
  v128 = *(_QWORD *)(v38 - 8);
  sub_10009D98C();
  __chkstk_darwin(v39);
  sub_100098728();
  v42 = v41 - v40;
  v132 = sub_1000BA294(&qword_100BF6418);
  v43 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  sub_100098728();
  v46 = v45 - v44;
  v138 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  sub_10009D98C();
  __chkstk_darwin(v47);
  sub_100088FDC();
  v137 = v48;
  v49 = v25[3];
  v50 = v25[4];
  v133 = v25;
  sub_1000DB418(v25, v49);
  v51 = sub_1005FBAF4();
  v134 = v46;
  v52 = v136;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DailyForecastComponentViewModel.DayForecastViewModel.CodingKeys, &type metadata for DailyForecastComponentViewModel.DayForecastViewModel.CodingKeys, v51, v49, v50);
  v125 = v38;
  if (v52)
  {
    v136 = v52;
    LODWORD(v134) = 0;
    v58 = 0;
  }
  else
  {
    v53 = v21;
    v54 = v34;
    v55 = v135;
    v123[1] = v43;
    LOBYTE(a10) = 0;
    sub_10000F1C8(&qword_100BC3558, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    sub_10009BD50();
    v56 = v132;
    sub_1000C0F84(v38, v57, v132, v38);
    v72 = v137;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 32))(v137, v42, v38);
    v73 = sub_10009DBB8(1);
    v75 = KeyedDecodingContainer.decode(_:forKey:)(v73, v74);
    v76 = v138;
    v77 = (uint64_t *)(v72 + v138[5]);
    *v77 = v75;
    v77[1] = v78;
    v79 = sub_10009DBB8(2);
    v81 = KeyedDecodingContainer.decode(_:forKey:)(v79, v80);
    v82 = (uint64_t *)(v72 + v76[6]);
    *v82 = v81;
    v82[1] = v83;
    LOBYTE(a10) = 3;
    sub_10000F1C8(&qword_100BEED80, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone);
    sub_10009BD50();
    v84 = v127;
    sub_1000C0F84(v127, v85, v56, v127);
    v86 = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 32))(v72 + v138[7], v53, v84);
    LOBYTE(a10) = 4;
    sub_1005FAD94(&qword_100BF6300);
    v87 = v130;
    sub_1000C0F84(v130, (uint64_t)&a10, v56, v130);
    v88 = v54;
    v89 = *(void (**)(uint64_t, char *, uint64_t))(v129 + 32);
    v89(v86 + v138[8], v88, v87);
    LOBYTE(a10) = 5;
    v90 = v55;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v87, &a10, v56);
    v91 = v138;
    v89(v86 + v138[9], v90, v87);
    v92 = sub_1000DA688(6);
    v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v92, v93);
    v95 = (uint64_t *)(v86 + v91[10]);
    *v95 = v94;
    v95[1] = v96;
    v97 = sub_1000DA688(7);
    v99 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v97, v98);
    v100 = (uint64_t *)(v86 + v91[11]);
    *v100 = v99;
    v100[1] = v101;
    v102 = sub_1000DA688(8);
    v104 = KeyedDecodingContainer.decode(_:forKey:)(v102, v103);
    *(double *)(v86 + v138[12]) = v104;
    v105 = sub_10009DBB8(9);
    v107 = KeyedDecodingContainer.decode(_:forKey:)(v105, v106);
    v136 = 0;
    *(_BYTE *)(v137 + v138[13]) = v107 & 1;
    v108 = sub_1000CCFE4(10);
    v136 = 0;
    sub_1000FDBE8(v108, v109, v138[14]);
    v110 = type metadata accessor for Precipitation(0);
    LOBYTE(a10) = 11;
    sub_10000F1C8(&qword_100BEEDB8, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation);
    sub_10009BD50();
    v111 = v136;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v110, v112, v132, v110);
    v136 = v111;
    if (v111)
    {
      sub_1000BC714();
      LODWORD(v134) = 0;
      v58 = 1279;
    }
    else
    {
      sub_1005FAC8C(v131, v137 + v138[15]);
      LOBYTE(a10) = 12;
      v113 = v136;
      v114 = KeyedDecodingContainer.decode(_:forKey:)(&a10, v132);
      v136 = v113;
      if (!v113)
      {
        *(_BYTE *)(v137 + v138[16]) = v114 & 1;
        v115 = sub_1000CCFE4(13);
        LODWORD(v135) = 1;
        v136 = 0;
        sub_1000FDBE8(v115, v116, v138[17]);
        v117 = sub_1000CCFE4(14);
        v136 = 0;
        sub_1000FDBE8(v117, v118, v138[18]);
        v119 = sub_1000CCFE4(15);
        v136 = 0;
        sub_1000FDBE8(v119, v120, v138[19]);
        v139 = 16;
        sub_1005FBB30();
        v121 = v136;
        KeyedDecodingContainer.decode<A>(_:forKey:)(&unk_100B8D628, &v139, v132);
        v136 = v121;
        if (!v121)
        {
          sub_1000BC714();
          v122 = v137;
          *(_QWORD *)(v137 + v138[20]) = a10;
          sub_100084050(v122, v124, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
          _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v133);
          sub_1000215BC(v122, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
          goto LABEL_34;
        }
        sub_1000BC714();
        LODWORD(v131) = 1;
        LODWORD(v132) = 1;
        _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v133);
        LOBYTE(v71) = 1;
        v61 = 1;
        v62 = 1;
        v63 = 1;
        v64 = 1;
        v65 = 1;
        v66 = 1;
        v67 = 1;
        LODWORD(v134) = 1;
        v59 = v137;
        goto LABEL_12;
      }
      sub_1000BC714();
      v58 = 3327;
      LODWORD(v134) = 1;
    }
  }
  v59 = v137;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v133);
  v61 = (v58 >> 2) & 1;
  v62 = (v58 >> 3) & 1;
  v63 = (v58 >> 4) & 1;
  v64 = (v58 >> 5) & 1;
  v65 = (v58 >> 6) & 1;
  v66 = (v58 >> 7) & 1;
  v67 = (v58 >> 10) & 1;
  if ((v58 & 1) == 0)
  {
    LODWORD(v132) = 0;
    LODWORD(v131) = 0;
    LODWORD(v135) = 0;
    if ((v58 & 2) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
  LODWORD(v135) = 0;
  LODWORD(v131) = 0;
  LODWORD(v132) = 0;
  v71 = (v58 >> 1) & 1;
LABEL_12:
  (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v59, v125);
  if ((v71 & 1) == 0)
  {
LABEL_6:
    v68 = v138;
    if (v61)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  v68 = v138;
  v60.n128_f64[0] = sub_1000C613C(v138[5]);
  if ((v61 & 1) != 0)
  {
LABEL_7:
    v60.n128_f64[0] = sub_1000C613C(v68[6]);
    if ((v62 & 1) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  if (!v62)
  {
LABEL_8:
    if (v63)
      goto LABEL_9;
LABEL_16:
    if (!v64)
      goto LABEL_26;
    v69 = v130;
    v70 = *(void (**)(uint64_t, uint64_t))(v129 + 8);
LABEL_18:
    v70(v59 + v68[9], v69);
    if ((v65 & 1) != 0)
      goto LABEL_27;
LABEL_19:
    if (!v66)
      goto LABEL_28;
LABEL_20:
    sub_1000C613C(v68[11]);
    if ((v67 & 1) != 0)
      goto LABEL_29;
LABEL_21:
    if (!(_DWORD)v134)
      goto LABEL_30;
LABEL_22:
    sub_100021A14(v59 + v68[15], &qword_100BCB338);
    if ((v135 & 1) != 0)
      goto LABEL_31;
LABEL_23:
    if (!(_DWORD)v131)
      goto LABEL_32;
LABEL_24:
    sub_1000C613C(v68[18]);
    if ((v132 & 1) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
LABEL_15:
  (*(void (**)(uint64_t, uint64_t, __n128))(v126 + 8))(v59 + v68[7], v127, v60);
  if ((v63 & 1) == 0)
    goto LABEL_16;
LABEL_9:
  v69 = v130;
  v70 = *(void (**)(uint64_t, uint64_t))(v129 + 8);
  ((void (*)(uint64_t, uint64_t, __n128))v70)(v59 + v68[8], v130, v60);
  if ((v64 & 1) != 0)
    goto LABEL_18;
LABEL_26:
  if (!v65)
    goto LABEL_19;
LABEL_27:
  sub_1000C613C(v68[10]);
  if ((v66 & 1) != 0)
    goto LABEL_20;
LABEL_28:
  if (!v67)
    goto LABEL_21;
LABEL_29:
  sub_1000C613C(v68[14]);
  if ((v134 & 1) != 0)
    goto LABEL_22;
LABEL_30:
  if (!(_DWORD)v135)
    goto LABEL_23;
LABEL_31:
  sub_1000C613C(v68[17]);
  if ((v131 & 1) != 0)
    goto LABEL_24;
LABEL_32:
  if ((_DWORD)v132)
LABEL_33:
    sub_1000C613C(v68[19]);
LABEL_34:
  sub_1000B44B0();
}

uint64_t sub_1005FA1BC()
{
  unsigned __int8 *v0;

  return sub_1005F9198(*v0);
}

uint64_t sub_1005FA1C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1005F8AD4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005FA1E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005FBAF4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FA210(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005FBAF4();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "1005FA240: call analysis failed (funcsize=5)"

#error "1005FA254: call analysis failed (funcsize=5)"

uint64_t sub_1005FA260(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  char v16;

  if (a1 == 0x6365726F46796164 && a2 == 0xEC00000073747361)
  {
    v5 = 0xEC00000073747361;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6365726F46796164, 0xEC00000073747361, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x54746E6572727563 && a2 == 0xEB00000000706D65)
  {
    v8 = 0xEB00000000706D65;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54746E6572727563, 0xEB00000000706D65, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x5478614D6B656577 && a2 == 0xEB00000000706D65)
  {
    v10 = 0xEB00000000706D65;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5478614D6B656577, 0xEB00000000706D65, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x546E694D6B656577 && a2 == 0xEB00000000706D65)
  {
    v12 = 0xEB00000000706D65;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x546E694D6B656577, 0xEB00000000706D65, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x48747365676E6F6CLL && a2 == 0xEF706D6554686769)
  {
    v14 = 0xEF706D6554686769;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x48747365676E6F6CLL, 0xEF706D6554686769, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4;
  }
  if (a1 == 0x4C747365676E6F6CLL && a2 == 0xEE00706D6554776FLL)
  {
    swift_bridgeObjectRelease(0xEE00706D6554776FLL);
    return 5;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4C747365676E6F6CLL, 0xEE00706D6554776FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1005FA564(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005FA5A0 + 4 * byte_1009B72B1[a1]))(0x6365726F46796164, 0xEC00000073747361);
}

uint64_t sub_1005FA5A0()
{
  return 0x54746E6572727563;
}

uint64_t sub_1005FA5E8()
{
  return 0x48747365676E6F6CLL;
}

uint64_t sub_1005FA60C()
{
  return 0x4C747365676E6F6CLL;
}

void sub_1005FA630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;

  sub_100099310();
  a19 = v24;
  a20 = v25;
  v26 = v21;
  v28 = v27;
  sub_1000BA294(&qword_100BF6308);
  sub_1000BEAF8();
  __chkstk_darwin(v29);
  sub_100098728();
  v32 = v31 - v30;
  sub_1000DB418(v28, v28[3]);
  v33 = sub_1005FACD4();
  sub_1000B44E8((uint64_t)&type metadata for DailyForecastComponentViewModel.CodingKeys, v34, v33);
  a10 = *v26;
  v52 = 0;
  v35 = sub_1000BA294(&qword_100BF62E8);
  v36 = sub_1005FAD10(&qword_100BF6310, &qword_100BF6318, (uint64_t)&unk_1009B74B8, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&a10, &v52, v20, v35, v36);
  if (!v22)
  {
    v37 = (int *)type metadata accessor for DailyForecastComponentViewModel(0);
    v38 = (uint64_t)v26 + v37[5];
    v51 = 1;
    sub_1000BA294(&qword_100BC4E68);
    sub_1005FAD94(&qword_100BF6320);
    sub_1000DA004(v38, (uint64_t)&v51);
    v39 = (uint64_t)v26 + v37[6];
    v50 = 2;
    sub_1000DA004(v39, (uint64_t)&v50);
    v40 = (uint64_t)v26 + v37[7];
    v49 = 3;
    sub_1000DA004(v40, (uint64_t)&v49);
    v41 = (uint64_t *)((char *)v26 + v37[8]);
    v42 = *v41;
    v43 = v41[1];
    v48 = 4;
    sub_1000BA804(v42, v43, (uint64_t)&v48);
    v44 = (uint64_t *)((char *)v26 + v37[9]);
    v45 = *v44;
    v46 = v44[1];
    v47 = 5;
    sub_1000BA804(v45, v46, (uint64_t)&v47);
  }
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v32, v20);
  sub_1000B44B0();
}

void sub_1005FA80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  int *v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;

  sub_100099310();
  v13 = v12;
  v46 = v14;
  v15 = sub_1000BA294(&qword_100BC4E68);
  v48 = *(_QWORD *)(v15 - 8);
  v49 = v15;
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_100089068();
  __chkstk_darwin(v17);
  sub_10009E3CC();
  __chkstk_darwin(v18);
  v20 = (char *)&v42 - v19;
  v47 = sub_1000BA294(&qword_100BF62D8);
  v21 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v22 = sub_100099574();
  v52 = (int *)type metadata accessor for DailyForecastComponentViewModel(v22);
  sub_10009D98C();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v50 = v24;
  v51 = v13;
  v26 = v13[3];
  v25 = v13[4];
  sub_1000DB418(v13, v26);
  v27 = sub_1005FACD4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DailyForecastComponentViewModel.CodingKeys, &type metadata for DailyForecastComponentViewModel.CodingKeys, v27, v26, v25);
  if (v10)
  {
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v51);
  }
  else
  {
    v44 = v11;
    v45 = v21;
    v28 = sub_1000BA294(&qword_100BF62E8);
    v58 = 0;
    sub_1005FAD10(&qword_100BF62F0, &qword_100BF62F8, (uint64_t)&unk_1009B74E0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v28, &v58, v47);
    v29 = (uint64_t)v50;
    *v50 = a10;
    v57 = 1;
    sub_1005FAD94(&qword_100BF6300);
    v30 = v49;
    sub_1000DF7D8(v31, (uint64_t)&v57);
    v32 = v29 + v52[5];
    v43 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v48 + 32);
    v33 = v43(v32, v20, v30);
    v56 = 2;
    sub_1000DF7D8(v33, (uint64_t)&v56);
    v34 = sub_100099BDC(v52[6]);
    v55 = 3;
    sub_1000DF7D8(v34, (uint64_t)&v55);
    sub_100099BDC(v52[7]);
    v54 = 4;
    v35 = sub_1000CDF94((uint64_t)&v54);
    v36 = (uint64_t *)(v29 + v52[8]);
    *v36 = v35;
    v36[1] = v37;
    v53 = 5;
    v38 = sub_1000CDF94((uint64_t)&v53);
    v40 = v39;
    sub_1000DC9C0(v45);
    v41 = (uint64_t *)(v29 + v52[9]);
    *v41 = v38;
    v41[1] = v40;
    sub_100084050(v29, v46, type metadata accessor for DailyForecastComponentViewModel);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v51);
    sub_1000215BC(v29, type metadata accessor for DailyForecastComponentViewModel);
  }
  sub_1000B44B0();
}

uint64_t sub_1005FABE8()
{
  unsigned __int8 *v0;

  return sub_1005FA564(*v0);
}

uint64_t sub_1005FABF0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1005FA260(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005FAC14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005FACD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FAC3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005FACD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1005FAC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1005FA80C(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

#error "1005FAC80: call analysis failed (funcsize=5)"

uint64_t sub_1005FAC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCB338);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1005FACD4()
{
  unint64_t result;

  result = qword_100BF62E0;
  if (!qword_100BF62E0)
  {
    result = swift_getWitnessTable(&unk_1009B7508, &type metadata for DailyForecastComponentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF62E0);
  }
  return result;
}

uint64_t sub_1005FAD10(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100075EB0(&qword_100BF62E8);
    sub_10000F1C8(a2, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1005FAD94(unint64_t *a1)
{
  uint64_t v2;

  if (!*a1)
  {
    v2 = sub_100075EB0(&qword_100BC4E68);
    atomic_store(sub_10003BC38(v2), a1);
  }
  sub_10004A298();
}

uint64_t storeEnumTagSinglePayload for DailyForecastComponentViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1005FAE18 + 4 * byte_1009B72BC[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1005FAE4C + 4 * byte_1009B72B7[v4]))();
}

uint64_t sub_1005FAE4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005FAE54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005FAE5CLL);
  return result;
}

uint64_t sub_1005FAE68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005FAE70);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1005FAE74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005FAE7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DailyForecastComponentViewModel.CodingKeys()
{
  return &type metadata for DailyForecastComponentViewModel.CodingKeys;
}

char *sub_1005FAE98(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v45 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v45 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = &a1[v8];
    v11 = &a2[v8];
    v12 = *((_QWORD *)v11 + 1);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *((_QWORD *)v10 + 1) = v12;
    v13 = &a1[v9];
    v14 = &a2[v9];
    v15 = *((_QWORD *)v14 + 1);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *((_QWORD *)v13 + 1) = v15;
    v16 = a3[7];
    v17 = &a1[v16];
    v18 = &a2[v16];
    v19 = type metadata accessor for TimeZone(0);
    v20 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    v21 = swift_bridgeObjectRetain();
    v20(v17, v18, v19, v21);
    v22 = a3[8];
    v23 = &a1[v22];
    v24 = &a2[v22];
    v25 = sub_1000BA294(&qword_100BC4E68);
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v26(v23, v24, v25);
    v26(&a1[a3[9]], &a2[a3[9]], v25);
    v27 = a3[10];
    v28 = a3[11];
    v29 = &a1[v27];
    v30 = &a2[v27];
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    v32 = &a1[v28];
    v33 = &a2[v28];
    v34 = *((_QWORD *)v33 + 1);
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *((_QWORD *)v32 + 1) = v34;
    v35 = a3[13];
    *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
    a1[v35] = a2[v35];
    v36 = a3[14];
    v37 = a3[15];
    v38 = &a1[v36];
    v39 = &a2[v36];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v41 = &a1[v37];
    v42 = &a2[v37];
    v43 = type metadata accessor for Precipitation(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v43))
    {
      v44 = sub_1000BA294(&qword_100BCB338);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v43);
    }
    v46 = a3[17];
    a1[a3[16]] = a2[a3[16]];
    v47 = &a1[v46];
    v48 = &a2[v46];
    v49 = *((_QWORD *)v48 + 1);
    *(_QWORD *)v47 = *(_QWORD *)v48;
    *((_QWORD *)v47 + 1) = v49;
    v50 = a3[18];
    v51 = a3[19];
    v52 = &a1[v50];
    v53 = &a2[v50];
    v54 = *((_QWORD *)v53 + 1);
    *(_QWORD *)v52 = *(_QWORD *)v53;
    *((_QWORD *)v52 + 1) = v54;
    v55 = &a1[v51];
    v56 = &a2[v51];
    v57 = *((_QWORD *)v56 + 1);
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *((_QWORD *)v55 + 1) = v57;
    *(_QWORD *)&a1[a3[20]] = *(_QWORD *)&a2[a3[20]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1005FB11C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_1000BA294(&qword_100BC4E68);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24);
  v21(v18, v19, v20);
  v21(a1 + a3[9], a2 + a3[9], v20);
  v22 = a3[10];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = a3[11];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v28 = a3[14];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = a3[15];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  v34 = type metadata accessor for Precipitation(0);
  LODWORD(v21) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v34);
  v35 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v34);
  if (!(_DWORD)v21)
  {
    v36 = *(_QWORD *)(v34 - 8);
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v36 + 24))(v32, v33, v34);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v36 + 8))(v32, v34);
    goto LABEL_6;
  }
  if (v35)
  {
LABEL_6:
    v37 = sub_1000BA294(&qword_100BCB338);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 0, 1, v34);
LABEL_7:
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  v38 = a3[17];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (_QWORD *)(a2 + v38);
  *v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = a3[18];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (_QWORD *)(a2 + v41);
  *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = a3[19];
  v45 = (_QWORD *)(a1 + v44);
  v46 = (_QWORD *)(a2 + v44);
  *v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1005FB454(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_1000BA294(&qword_100BC4E68);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  v16(a1 + a3[9], a2 + a3[9], v15);
  v17 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v18 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  v22 = type metadata accessor for Precipitation(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v22))
  {
    v23 = sub_1000BA294(&qword_100BCB338);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 0, 1, v22);
  }
  v24 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  v25 = a3[19];
  *(_OWORD *)(a1 + a3[18]) = *(_OWORD *)(a2 + a3[18]);
  *(_OWORD *)(a1 + v25) = *(_OWORD *)(a2 + v25);
  *(_QWORD *)(a1 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  return a1;
}

uint64_t sub_1005FB61C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  v21 = a3[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = sub_1000BA294(&qword_100BC4E68);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40);
  v25(v22, v23, v24);
  v25(a1 + a3[9], a2 + a3[9], v24);
  v26 = a3[10];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  v31 = a3[11];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  v36 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v36) = *(_BYTE *)(a2 + v36);
  v37 = a3[14];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  v42 = a3[15];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  v45 = type metadata accessor for Precipitation(0);
  LODWORD(v25) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v45);
  v46 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v44, 1, v45);
  if (!(_DWORD)v25)
  {
    v47 = *(_QWORD *)(v45 - 8);
    if (!v46)
    {
      (*(void (**)(void *, const void *, uint64_t))(v47 + 40))(v43, v44, v45);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v47 + 8))(v43, v45);
    goto LABEL_6;
  }
  if (v46)
  {
LABEL_6:
    v48 = sub_1000BA294(&qword_100BCB338);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v43, 0, 1, v45);
LABEL_7:
  v49 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  v50 = (_QWORD *)(a1 + v49);
  v51 = (uint64_t *)(a2 + v49);
  v53 = *v51;
  v52 = v51[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease();
  v54 = a3[18];
  v55 = (_QWORD *)(a1 + v54);
  v56 = (uint64_t *)(a2 + v54);
  v58 = *v56;
  v57 = v56[1];
  *v55 = v58;
  v55[1] = v57;
  swift_bridgeObjectRelease();
  v59 = a3[19];
  v60 = (_QWORD *)(a1 + v59);
  v61 = (uint64_t *)(a2 + v59);
  v63 = *v61;
  v62 = v61[1];
  *v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1005FB8C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  sub_100098778();
  sub_100088FF0();
  if (v11)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    if ((_DWORD)a2 == 0x7FFFFFFF)
    {
      sub_10003BCA4(*(_QWORD *)(a1 + a3[5] + 8));
      sub_100079F70();
      return;
    }
    sub_100099928();
    sub_100088FF0();
    if (v11)
    {
      v7 = v9;
      v10 = a3[7];
    }
    else
    {
      sub_1000BA294(&qword_100BC4E68);
      sub_100088FF0();
      if (v11)
      {
        v7 = v12;
        v10 = a3[8];
      }
      else
      {
        v7 = sub_1000BA294(&qword_100BCB338);
        v10 = a3[15];
      }
    }
    v8 = a1 + v10;
  }
  sub_1000B250C(v8, a2, v7);
}

void sub_1005FB978(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_100098778();
  sub_10009D2E8();
  if (v13)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5] + 8) = (a2 - 1);
      sub_100079F70();
      return;
    }
    sub_100099928();
    sub_10009D2E8();
    if (v13)
    {
      v9 = v11;
      v12 = a4[7];
    }
    else
    {
      sub_1000BA294(&qword_100BC4E68);
      sub_10009D2E8();
      if (v13)
      {
        v9 = v14;
        v12 = a4[8];
      }
      else
      {
        v9 = sub_1000BA294(&qword_100BCB338);
        v12 = a4[15];
      }
    }
    v10 = a1 + v12;
  }
  sub_1000987C4(v10, a2, a2, v9);
}

unint64_t sub_1005FBA38()
{
  unint64_t result;

  result = qword_100BF6400;
  if (!qword_100BF6400)
  {
    result = swift_getWitnessTable(&unk_1009B7490, &type metadata for DailyForecastComponentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF6400);
  }
  return result;
}

unint64_t sub_1005FBA78()
{
  unint64_t result;

  result = qword_100BF6408;
  if (!qword_100BF6408)
  {
    result = swift_getWitnessTable(&unk_1009B7400, &type metadata for DailyForecastComponentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF6408);
  }
  return result;
}

unint64_t sub_1005FBAB8()
{
  unint64_t result;

  result = qword_100BF6410;
  if (!qword_100BF6410)
  {
    result = swift_getWitnessTable(&unk_1009B7428, &type metadata for DailyForecastComponentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF6410);
  }
  return result;
}

unint64_t sub_1005FBAF4()
{
  unint64_t result;

  result = qword_100BF6420;
  if (!qword_100BF6420)
  {
    result = swift_getWitnessTable(&unk_1009B7610, &type metadata for DailyForecastComponentViewModel.DayForecastViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF6420);
  }
  return result;
}

unint64_t sub_1005FBB30()
{
  unint64_t result;

  result = qword_100BF6428;
  if (!qword_100BF6428)
  {
    result = swift_getWitnessTable(&unk_1009C4FB0, &unk_100B8D628);
    atomic_store(result, (unint64_t *)&qword_100BF6428);
  }
  return result;
}

unint64_t sub_1005FBB6C()
{
  unint64_t result;

  result = qword_100BF6438;
  if (!qword_100BF6438)
  {
    result = swift_getWitnessTable(&unk_1009C4F88, &unk_100B8D628);
    atomic_store(result, (unint64_t *)&qword_100BF6438);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DailyForecastComponentViewModel.DayForecastViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1005FBBF4 + 4 * byte_1009B72C6[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1005FBC28 + 4 * byte_1009B72C1[v4]))();
}

uint64_t sub_1005FBC28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005FBC30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005FBC38);
  return result;
}

uint64_t sub_1005FBC44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005FBC4CLL);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1005FBC50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005FBC58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel.CodingKeys()
{
  return &type metadata for DailyForecastComponentViewModel.DayForecastViewModel.CodingKeys;
}

unint64_t sub_1005FBC78()
{
  unint64_t result;

  result = qword_100BF6440;
  if (!qword_100BF6440)
  {
    result = swift_getWitnessTable(&unk_1009B75E8, &type metadata for DailyForecastComponentViewModel.DayForecastViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF6440);
  }
  return result;
}

unint64_t sub_1005FBCB8()
{
  unint64_t result;

  result = qword_100BF6448;
  if (!qword_100BF6448)
  {
    result = swift_getWitnessTable(&unk_1009B7558, &type metadata for DailyForecastComponentViewModel.DayForecastViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF6448);
  }
  return result;
}

unint64_t sub_1005FBCF8()
{
  unint64_t result;

  result = qword_100BF6450;
  if (!qword_100BF6450)
  {
    result = swift_getWitnessTable(&unk_1009B7580, &type metadata for DailyForecastComponentViewModel.DayForecastViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF6450);
  }
  return result;
}

void sub_1005FBD34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[4];
  char v28;
  char v29[8];
  uint64_t v30;
  int64_t v31;

  v26 = a1 + 56;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 56);
  v31 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v5 = 0;
  v25 = _swiftEmptyArrayStorage;
  while (v4)
  {
    v6 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    v7 = v6 | (v5 << 6);
LABEL_22:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v7);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    static LocationSearchEntity.makeFromIdentifier(_:)(v12, v13, (uint64_t)v27);
    v15 = v27[0];
    v14 = v27[1];
    v16 = v27[2];
    v17 = v27[3];
    v18 = v28;
    swift_bridgeObjectRelease();
    sub_100237EF8((uint64_t)v27, (uint64_t)v29);
    if (v30)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
      {
        sub_10008148C(0, v25[2] + 1, 1, (uint64_t)v25, &qword_100BF6468, (uint64_t)&type metadata for LocationSearchEntity, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))sub_10011F040, (void (*)(uint64_t, uint64_t, _QWORD *))sub_10011FDD8);
        v25 = v23;
      }
      v20 = v25[2];
      v19 = v25[3];
      v21 = v20 + 1;
      if (v20 >= v19 >> 1)
      {
        sub_10008148C(v19 > 1, v20 + 1, 1, (uint64_t)v25, &qword_100BF6468, (uint64_t)&type metadata for LocationSearchEntity, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))sub_10011F040, (void (*)(uint64_t, uint64_t, _QWORD *))sub_10011FDD8);
        v21 = v20 + 1;
        v25 = v24;
      }
      v25[2] = v21;
      v22 = &v25[5 * v20];
      v22[4] = v15;
      v22[5] = v14;
      v22[6] = v16;
      v22[7] = v17;
      *((_BYTE *)v22 + 64) = v18 & 1;
    }
  }
  v8 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v8 >= v31)
    goto LABEL_28;
  v9 = *(_QWORD *)(v26 + 8 * v8);
  ++v5;
  if (v9)
    goto LABEL_21;
  v5 = v8 + 1;
  if (v8 + 1 >= v31)
    goto LABEL_28;
  v9 = *(_QWORD *)(v26 + 8 * v5);
  if (v9)
    goto LABEL_21;
  v5 = v8 + 2;
  if (v8 + 2 >= v31)
    goto LABEL_28;
  v9 = *(_QWORD *)(v26 + 8 * v5);
  if (v9)
    goto LABEL_21;
  v5 = v8 + 3;
  if (v8 + 3 >= v31)
    goto LABEL_28;
  v9 = *(_QWORD *)(v26 + 8 * v5);
  if (v9)
  {
LABEL_21:
    v4 = (v9 - 1) & v9;
    v7 = __clz(__rbit64(v9)) + (v5 << 6);
    goto LABEL_22;
  }
  v10 = v8 + 4;
  if (v10 >= v31)
  {
LABEL_28:
    swift_release();
    return;
  }
  v9 = *(_QWORD *)(v26 + 8 * v10);
  if (v9)
  {
    v5 = v10;
    goto LABEL_21;
  }
  while (1)
  {
    v5 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v5 >= v31)
      goto LABEL_28;
    v9 = *(_QWORD *)(v26 + 8 * v5);
    ++v10;
    if (v9)
      goto LABEL_21;
  }
LABEL_30:
  __break(1u);
}

void sub_1005FBFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  __n128 v21;
  void (*v22)(char *, char *, uint64_t, __n128);
  _QWORD *v23;
  unint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;

  v5 = type metadata accessor for LocationEntity(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v30 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v25 - v10;
  v32 = _swiftEmptyArrayStorage;
  v29 = *(_QWORD *)(a1 + 16);
  if (v29)
  {
    v25[1] = v2;
    v26 = v5;
    v12 = 0;
    v27 = a2;
    v28 = a1;
    while (v12 < *(_QWORD *)(a1 + 16))
    {
      v13 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v31 = *(_QWORD *)(v6 + 72);
      v14 = (*(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16))(v11, a1 + v13 + v31 * v12, v5, v9);
      v15 = LocationEntity.id.getter(v14);
      v16 = a2;
      sub_100120D14(v15, v17, a2);
      v18 = v5;
      v20 = v19;
      v21 = swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
        v22 = *(void (**)(char *, char *, uint64_t, __n128))(v6 + 32);
        v22(v30, v11, v18, v21);
        v23 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
        {
          sub_1006062A8();
          v23 = v32;
        }
        v24 = v23[2];
        if (v24 >= v23[3] >> 1)
        {
          sub_1006062A8();
          v23 = v32;
        }
        v23[2] = v24 + 1;
        v5 = v26;
        ((void (*)(char *, char *, uint64_t))v22)((char *)v23 + v13 + v24 * v31, v30, v26);
        v32 = v23;
        a2 = v27;
        a1 = v28;
      }
      else
      {
        (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v11, v18, v21);
        v5 = v18;
        a2 = v16;
      }
      if (v29 == ++v12)
        goto LABEL_12;
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1005FC1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  __n128 v21;
  void (*v22)(char *, char *, uint64_t, __n128);
  _QWORD *v23;
  unint64_t v24;
  _QWORD v25[2];
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];
  _QWORD *v35;

  v31 = a2;
  v32 = a3;
  v28 = type metadata accessor for LocationEntity(0);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v30 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v10 = (char *)v25 - v8;
  v35 = _swiftEmptyArrayStorage;
  v29 = *(_QWORD *)(a1 + 16);
  if (v29)
  {
    v25[1] = v3;
    v26 = (char *)v25 - v8;
    v11 = 0;
    v27 = a1;
    v12 = v28;
    while (v11 < *(_QWORD *)(a1 + 16))
    {
      v13 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v14 = a1;
      v33 = *(_QWORD *)(v5 + 72);
      v15 = (*(double (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v10, a1 + v13 + v33 * v11, v12, v9);
      v34[2] = LocationEntity.name.getter(v15);
      v34[3] = v16;
      v34[0] = v31;
      v34[1] = v32;
      v17 = v10;
      v18 = sub_1001C8F34();
      v19 = sub_1001C8F70();
      v20 = BidirectionalCollection<>.starts<A>(with:)(v34, &type metadata for String, &type metadata for String, v18, v19);
      v21 = swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
        v22 = *(void (**)(char *, char *, uint64_t, __n128))(v5 + 32);
        v22(v30, v17, v12, v21);
        v23 = v35;
        if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
        {
          sub_1006062A8();
          v23 = v35;
        }
        v24 = v23[2];
        if (v24 >= v23[3] >> 1)
        {
          sub_1006062A8();
          v23 = v35;
        }
        v23[2] = v24 + 1;
        v12 = v28;
        ((void (*)(char *, char *, uint64_t))v22)((char *)v23 + v13 + v24 * v33, v30, v28);
        v35 = v23;
        v10 = v26;
        a1 = v27;
      }
      else
      {
        (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v17, v12, v21);
        v10 = v17;
        a1 = v14;
      }
      if (v29 == ++v11)
        goto LABEL_12;
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1005FC448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  _QWORD *v26;

  v22 = type metadata accessor for LocationEntity(0);
  v5 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v20 - v9;
  v26 = _swiftEmptyArrayStorage;
  v24 = *(_QWORD *)(a1 + 16);
  if (v24)
  {
    v11 = 0;
    v20 = a1;
    v21 = a2;
    v12 = v22;
    while (v11 < *(_QWORD *)(a1 + 16))
    {
      v13 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v14 = *(_QWORD *)(v5 + 72);
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v10, a1 + v13 + v14 * v11, v12, v8);
      v15 = sub_1005FE4F8((uint64_t)v10, a2);
      if (v2)
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      if ((v15 & 1) != 0)
      {
        v23 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
        v23(v25, v10, v12);
        v16 = v26;
        if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
        {
          sub_1006062A8();
          v16 = v26;
        }
        v17 = v16[2];
        if (v17 >= v16[3] >> 1)
        {
          sub_1006062A8();
          v16 = v26;
        }
        v16[2] = v17 + 1;
        v18 = (unint64_t)v16 + v13 + v17 * v14;
        v19 = v22;
        v23((char *)v18, v25, v22);
        v26 = v16;
        v12 = v19;
        a1 = v20;
        a2 = v21;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v12);
      }
      if (v24 == ++v11)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1005FC674()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62[9];

  sub_1000986AC();
  v1 = sub_10011E6F0();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v53 - v6);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v53 - v9);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v53 - v12);
  v14 = *(_QWORD *)(v0 + 16);
  v16 = sub_100051B90(&qword_100BF6738, v15, (uint64_t)&unk_10097D9C8);
  v60 = v1;
  v17 = (_QWORD *)Set.init(minimumCapacity:)(v14, v1, v16);
  v56 = *(_QWORD *)(v0 + 16);
  if (!v56)
  {
LABEL_30:
    sub_1000986C4();
    sub_100098640();
    return;
  }
  v18 = 0;
  sub_100098AC8();
  v54 = v0;
  v55 = v0 + v19;
  v53 = v2;
  while (1)
  {
    if (v18 >= *(_QWORD *)(v0 + 16))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v20 = *(_QWORD *)(v2 + 72);
    v59 = v18;
    sub_100606FF0(v55 + v20 * v18, (uint64_t)v13);
    sub_10009E434();
    v21 = v13[1];
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v21);
    sub_100095204();
    sub_1000986C4();
    sub_10011DF80();
    v23 = (char *)v13 + v22;
    v24 = sub_1006071AC();
    v57 = sub_100051B90(&qword_100BC3120, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType, (uint64_t)&protocol conformance descriptor for LocationOfInterestType);
    v58 = v24;
    dispatch thunk of Hashable.hash(into:)(v62, v24, v57);
    sub_100607144();
    sub_1000BCFD0();
    if ((v25 & 1) != 0)
    {
      while (1)
      {
        sub_100606FF0(v17[6] + v2 * v20, (uint64_t)v4);
        v26 = v4[1];
        v27 = v13[1];
        v28 = *v4 == *v13 && v26 == v27;
        if (v28 || (sub_100099264(*v4, v26, *v13, v27) & 1) != 0)
        {
          sub_10011DF80();
          if ((static LocationOfInterestType.== infix(_:_:)((char *)v4 + v29, v23) & 1) != 0)
            break;
        }
        sub_100607034((uint64_t)v4);
        sub_10003BDA4();
        if ((v30 & 1) == 0)
          goto LABEL_12;
      }
      sub_100607034((uint64_t)v4);
      v40 = (unint64_t)v17;
      goto LABEL_29;
    }
LABEL_12:
    swift_bridgeObjectRelease(v17);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    v32 = sub_100606FF0((uint64_t)v13, (uint64_t)v10);
    v61 = v17;
    if (v17[3] <= v17[2])
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1006044F8(v32, v33, v34, v35, v36, v37, v38, v39, v53, v54, v55, v56, v57, v58, v59, v60, (uint64_t)v61, v62[0], v62[1],
        v62[2]);
LABEL_27:
    v17 = v61;
    *(_QWORD *)((char *)v61 + ((v2 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v2;
    sub_100163844((uint64_t)v10, v17[6] + v2 * v20);
    v50 = v17[2];
    v51 = __OFADD__(v50, 1);
    v52 = v50 + 1;
    if (v51)
      goto LABEL_32;
    v17[2] = v52;
    v40 = 0x8000000000000000;
LABEL_29:
    swift_bridgeObjectRelease(v40);
    v18 = v59 + 1;
    sub_100607034((uint64_t)v13);
    v2 = v53;
    v0 = v54;
    if (v18 == v56)
      goto LABEL_30;
  }
  if (isUniquelyReferenced_nonNull_native)
    sub_1006015E0();
  else
    sub_1006049AC();
  v41 = (uint64_t)v61;
  sub_10009E434();
  swift_bridgeObjectRetain(v10[1]);
  sub_100095204();
  sub_1000986C4();
  sub_10011DF80();
  v43 = (char *)v10 + v42;
  dispatch thunk of Hashable.hash(into:)(v62, v58, v57);
  sub_100607144();
  sub_1000BCFD0();
  if ((v44 & 1) == 0)
    goto LABEL_27;
  while (1)
  {
    sub_100606FF0(*(_QWORD *)(v41 + 48) + v2 * v20, (uint64_t)v7);
    v45 = v7[1];
    v46 = v10[1];
    v47 = *v7 == *v10 && v45 == v46;
    if (v47 || (sub_100099264(*v7, v45, *v10, v46) & 1) != 0)
    {
      sub_10011DF80();
      if ((static LocationOfInterestType.== infix(_:_:)((char *)v7 + v48, v43) & 1) != 0)
        break;
    }
    sub_100607034((uint64_t)v7);
    sub_10003BDA4();
    if ((v49 & 1) == 0)
      goto LABEL_27;
  }
LABEL_33:
  sub_100607034((uint64_t)v7);
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v60);
  __break(1u);
}

void sub_1005FC9F8()
{
  sub_1005FCA40();
}

void sub_1005FCA1C()
{
  sub_1005FCA40();
}

void sub_1005FCA40()
{
  void (*v0)(char *, char *);
  void (*v1)(char *, char *);
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  _QWORD v24[2];

  sub_1000986AC();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v6(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)v24 - v15;
  v17 = *(_QWORD *)(v9 + 16);
  v18 = sub_100051B90(v5, v7, v3);
  v24[1] = Set.init(minimumCapacity:)(v17, v10, v18);
  v19 = *(_QWORD *)(v9 + 16);
  if (v19)
  {
    sub_100098AC8();
    v24[0] = v9;
    v21 = v9 + v20;
    v22 = *(_QWORD *)(v11 + 72);
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    do
    {
      v23(v14, v21, v10);
      v1(v16, v14);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      v21 += v22;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease(v24[0]);
  }
  else
  {
    sub_1000986E8();
  }
  sub_100098640();
}

void sub_1005FCB6C()
{
  sub_1005FCA40();
}

uint64_t LocationSearchEntityQuery.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  sub_1000BA294(&qword_100BC2950);
  v0 = type metadata accessor for AppDependencyManager(0);
  v15 = 0u;
  v16 = 0u;
  v17 = 0;
  v5 = static AppDependencyManager.shared.getter(v0, v1, v2, v3, v4);
  v6 = AppDependency.__allocating_init(key:manager:)(&v15, v5);
  v7 = sub_1000BA294(&qword_100BC2958);
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v12 = static AppDependencyManager.shared.getter(v7, v8, v9, v10, v11);
  AppDependency.__allocating_init(key:manager:)(&v15, v12);
  v13 = type metadata accessor for LocationSearcher();
  *(_QWORD *)(sub_100098740(v13, 24) + 16) = 0;
  return v6;
}

uint64_t LocationSearchEntityQuery.entities(for:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[30] = a1;
  v2[31] = a2;
  v3 = sub_10011E38C();
  v2[32] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[33] = v4;
  v2[34] = sub_1000BA400(v4);
  sub_10003BC90();
  return sub_1000BA3F4();
}

void sub_1005FCC98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  swift_bridgeObjectRetain();
  sub_100120C2C(v2);
  v4 = v3;
  v1[29] = _swiftEmptyArrayStorage;
  v1[35] = v3;
  v5 = v3 + 56;
  v6 = -1;
  v7 = -1 << *(_BYTE *)(v3 + 32);
  if (-v7 < 64)
    v6 = ~(-1 << -(char)v7);
  v8 = v6 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(63 - v7) >> 6;
  swift_bridgeObjectRetain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_24;
    }
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if ((uint64_t)v15 >= v9)
      goto LABEL_33;
    ++v12;
    if (!*(_QWORD *)(v5 + 8 * v15))
    {
      v12 = v15 + 1;
      if ((uint64_t)(v15 + 1) >= v9)
        goto LABEL_33;
      if (!*(_QWORD *)(v5 + 8 * v12))
      {
        v12 = v15 + 2;
        if ((uint64_t)(v15 + 2) >= v9)
          goto LABEL_33;
        if (!*(_QWORD *)(v5 + 8 * v12))
        {
          v12 = v15 + 3;
          if ((uint64_t)(v15 + 3) >= v9)
            goto LABEL_33;
          if (!*(_QWORD *)(v5 + 8 * v12))
          {
            v12 = v15 + 4;
            if ((uint64_t)(v15 + 4) >= v9)
              goto LABEL_33;
            if (!*(_QWORD *)(v5 + 8 * v12))
              break;
          }
        }
      }
    }
LABEL_23:
    sub_1000DAFF0();
    v8 = v18 & v17;
    v14 = v19 + (v12 << 6);
LABEL_24:
    v20 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v22 = *v20;
    v21 = v20[1];
    v23 = static Location.currentLocationID.getter(v10);
    if (v22 == v23 && v21 == v24)
    {
      sub_10003BC58();
LABEL_31:
      sub_10009925C();
      v0 = (uint64_t)(v1 + 12);
      static LocationSearchEntity.makeCurrentLocation()((uint64_t)(v1 + 12));
      sub_10008148C(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage, &qword_100BF6468, (uint64_t)&type metadata for LocationSearchEntity, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))sub_10011F040, (void (*)(uint64_t, uint64_t, _QWORD *))sub_10011FDD8);
      v11 = v26;
      v8 = *(_QWORD *)(v26 + 16);
      v15 = *(_QWORD *)(v26 + 24);
      v4 = v8 + 1;
      if (v8 < v15 >> 1)
      {
LABEL_32:
        *(_QWORD *)(v11 + 16) = v4;
        v27 = v11 + 40 * v8;
        v28 = *(_OWORD *)v0;
        v29 = *(_OWORD *)(v0 + 16);
        *(_BYTE *)(v27 + 64) = *(_BYTE *)(v0 + 32);
        *(_OWORD *)(v27 + 32) = v28;
        *(_OWORD *)(v27 + 48) = v29;
        v1[29] = v11;
LABEL_34:
        sub_10009DF2C();
        sub_1000B269C();
        v30 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of LocationEntityManagerType.savedLocations.getter[1]);
        v1[36] = v30;
        v31 = sub_1000C6EEC(v30, (uint64_t)sub_1005FCF54);
        dispatch thunk of LocationEntityManagerType.savedLocations.getter(v31);
        return;
      }
LABEL_36:
      sub_10008148C(v15 > 1, v4, 1, v11, &qword_100BF6468, (uint64_t)&type metadata for LocationSearchEntity, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))sub_10011F040, (void (*)(uint64_t, uint64_t, _QWORD *))sub_10011FDD8);
      v11 = v32;
      goto LABEL_32;
    }
    v0 = sub_100099264(v22, v21, v23, v24);
    sub_100075DF4();
    if ((v0 & 1) != 0)
      goto LABEL_31;
  }
  v16 = v15 + 5;
  if (v16 >= v9)
  {
LABEL_33:
    sub_10009925C();
    goto LABEL_34;
  }
  if (*(_QWORD *)(v5 + 8 * v16))
  {
    v12 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    ++v16;
    if (*(_QWORD *)(v5 + 8 * v12))
      goto LABEL_23;
  }
  __break(1u);
}

uint64_t sub_1005FCF54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000C01CC();
  sub_1000F3FC8();
  *(_QWORD *)(v1 + 296) = v0;
  sub_1000DC07C(v2);
  sub_10003BC90();
  return sub_1000BA3F4();
}

uint64_t sub_1005FCF90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  __int128 *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 280);
  sub_1000860DC();
  sub_1005FBFE4(v1, v2);
  sub_100607168();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = (__int128 *)(v0 + 56);
    v5 = *(_QWORD *)(v0 + 264);
    v6 = (char *)sub_10011E550((uint64_t)_swiftEmptyArrayStorage);
    sub_10009C9B4(v6, v3);
    sub_100098AC8();
    v8 = v1 + v7;
    v61 = *(_QWORD *)(v5 + 72);
    v62 = v5;
    v60 = *(uint64_t (**)(uint64_t))(v5 + 16);
    do
    {
      v65 = v3;
      v9 = *(_QWORD *)(v0 + 272);
      v63 = *(_QWORD *)(v0 + 256);
      v64 = v8;
      v10 = v60(v9);
      v11 = LocationEntity.id.getter(v10);
      sub_10011ABDC(v11, v12);
      *(_QWORD *)(v0 + 168) = v14;
      *(_QWORD *)(v0 + 176) = v13;
      sub_100114EF8();
      sub_1001173C0();
      v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v15, v16, v17, v18, v19, v20, v21, v22);
      v25 = v24;
      sub_10009D2E0();
      v26._countAndFlagsBits = v23;
      v26._object = v25;
      String.append(_:)(v26);
      sub_10009934C();
      sub_100094EDC();
      sub_1000C6584();
      v27 = sub_10009934C();
      v28 = LocationEntity.name.getter(v27);
      sub_1000ED2D0(v28, v29);
      sub_1001173C0();
      v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v30, v31, v32, v33, v34, v35, v36, v37);
      v40 = v39;
      sub_10009D2E0();
      sub_100094EDC();
      v41._countAndFlagsBits = v38;
      v41._object = v40;
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42 = sub_10009934C();
      v43 = LocationEntity.name.getter(v42);
      v45 = v44;
      v48 = (void *)LocationEntity.placemark.getter(v43, v44, v46, v47);
      LocationSearchEntity.init(id:name:placemark:isLocal:)(0x6E6F697461636F4CLL, 0xEB000000003A4449, v43, v45, v48, 0, (uint64_t)v4);
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v9, v63);
      v49 = v66;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000BF218(*(_QWORD *)(v66 + 16));
        v49 = v66;
      }
      v51 = *(_QWORD *)(v49 + 16);
      v50 = *(_QWORD *)(v49 + 24);
      if (v51 >= v50 >> 1)
      {
        sub_1000BDD74((char *)(v50 > 1), v51 + 1);
        v49 = v66;
      }
      *(_QWORD *)(v49 + 16) = v51 + 1;
      v52 = v49 + 40 * v51;
      v53 = *v4;
      v54 = *(_OWORD *)(v0 + 72);
      *(_BYTE *)(v52 + 64) = *(_BYTE *)(v0 + 88);
      *(_OWORD *)(v52 + 32) = v53;
      *(_OWORD *)(v52 + 48) = v54;
      v8 = v64 + v61;
      --v3;
    }
    while (v65 != 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000986E8();
  }
  v56 = *(_QWORD *)(v0 + 272);
  v55 = *(_QWORD *)(v0 + 280);
  sub_10025E2D8();
  sub_1005FBD34(v55);
  sub_1000986E8();
  sub_10025E2D8();
  swift_task_dealloc(v56);
  v57 = sub_1000BEB18();
  return v58(v57);
}

uint64_t LocationSearchEntityQuery.suggestedEntities()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[29] = a1;
  v2 = sub_10011E38C();
  v1[30] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[31] = v3;
  v1[32] = sub_1000BA400(v3);
  sub_10003BC90();
  return sub_1000BA3F4();
}

uint64_t sub_1005FD2E0()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10009DF2C();
  sub_1000B269C();
  v1 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of LocationEntityManagerType.savedLocations.getter[1]);
  *(_QWORD *)(v0 + 264) = v1;
  sub_1000C6EEC(v1, (uint64_t)sub_1005FD334);
  return sub_1000CFE7C();
}

uint64_t sub_1005FD334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000C01CC();
  sub_1000F3FC8();
  *(_QWORD *)(v1 + 272) = v0;
  sub_1000DC07C(v2);
  sub_10003BC90();
  return sub_1000BA3F4();
}

uint64_t sub_1005FD370()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  __int128 *v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    sub_1000DB304();
    v3 = *(_QWORD *)(v0 + 248);
    sub_10009C9B4(0, v2);
    sub_100098AC8();
    v5 = v1 + v4;
    v57 = *(_QWORD *)(v3 + 72);
    v58 = v3;
    v55 = (__int128 *)(v0 + 96);
    v56 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
    do
    {
      v60 = v2;
      v6 = *(_QWORD *)(v0 + 256);
      v59 = *(_QWORD *)(v0 + 240);
      v7 = v56(v6, v5);
      *(_QWORD *)(v0 + 136) = LocationEntity.id.getter(v7);
      *(_QWORD *)(v0 + 144) = v8;
      *(_QWORD *)(v0 + 152) = 44;
      *(_QWORD *)(v0 + 160) = 0xE100000000000000;
      *(_QWORD *)(v0 + 168) = 58;
      *(_QWORD *)(v0 + 176) = 0xE100000000000000;
      sub_100114EF8();
      sub_1000861E8();
      v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v9, v10, v11, v12, v13, v14, v15, v16);
      v19 = v18;
      sub_100098738();
      v20._countAndFlagsBits = v17;
      v20._object = v19;
      String.append(_:)(v20);
      sub_10003BC58();
      sub_1000860DC();
      sub_1000C6584();
      v21 = sub_10003BC58();
      v22 = LocationEntity.name.getter(v21);
      sub_1000ED2D0(v22, v23);
      sub_1000861E8();
      v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v24, v25, v26, v27, v28, v29, v30, v31);
      v34 = v33;
      sub_10009934C();
      sub_1000860DC();
      v35._countAndFlagsBits = v32;
      v35._object = v34;
      String.append(_:)(v35);
      sub_100098738();
      v36 = sub_10003BC58();
      v37 = LocationEntity.name.getter(v36);
      v39 = v38;
      v42 = (void *)LocationEntity.placemark.getter(v37, v38, v40, v41);
      LocationSearchEntity.init(id:name:placemark:isLocal:)(0x6E6F697461636F4CLL, 0xEB000000003A4449, v37, v39, v42, 0, (uint64_t)v55);
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v6, v59);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_1000BDD74(0, _swiftEmptyArrayStorage[2] + 1);
      v44 = _swiftEmptyArrayStorage[2];
      v43 = _swiftEmptyArrayStorage[3];
      if (v44 >= v43 >> 1)
        sub_1000BDD74((char *)(v43 > 1), v44 + 1);
      _swiftEmptyArrayStorage[2] = v44 + 1;
      v45 = &_swiftEmptyArrayStorage[5 * v44];
      v46 = *v55;
      v47 = *(_OWORD *)(v0 + 112);
      *((_BYTE *)v45 + 64) = *(_BYTE *)(v0 + 128);
      *((_OWORD *)v45 + 2) = v46;
      *((_OWORD *)v45 + 3) = v47;
      v5 += v57;
      v2 = v60 - 1;
    }
    while (v60 != 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100075DF4();
  }
  v48 = *(_QWORD *)(v0 + 256);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  v49 = sub_1000BA294(&qword_100BF6468);
  v50 = sub_100098740(v49, 72);
  *(_OWORD *)(v50 + 16) = xmmword_10097CA50;
  static LocationSearchEntity.makeCurrentLocation()(v0 + 56);
  v51 = *(_OWORD *)(v0 + 72);
  *(_OWORD *)(v50 + 32) = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v50 + 48) = v51;
  *(_BYTE *)(v50 + 64) = *(_BYTE *)(v0 + 88);
  sub_10025E2D8();
  swift_task_dealloc(v48);
  v52 = sub_1000BEB18();
  return v53(v52);
}

uint64_t LocationSearchEntityQuery.entities(matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[32] = a4;
  v5[33] = a5;
  v5[30] = a2;
  v5[31] = a3;
  v5[29] = a1;
  v6 = sub_10011E38C();
  v5[34] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[35] = v7;
  v5[36] = sub_1000BA400(v7);
  sub_10003BC90();
  return sub_1000BA3F4();
}

uint64_t sub_1005FD6D4()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10009DF2C();
  sub_1000B269C();
  v1 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of LocationEntityManagerType.savedLocations.getter[1]);
  *(_QWORD *)(v0 + 296) = v1;
  sub_1000C6EEC(v1, (uint64_t)sub_1005FD728);
  return sub_1000CFE7C();
}

uint64_t sub_1005FD728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000C01CC();
  sub_1000F3FC8();
  *(_QWORD *)(v1 + 304) = v0;
  sub_1000DC07C(v2);
  sub_10003BC90();
  return sub_1000BA3F4();
}

uint64_t sub_1005FD764()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(void);
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  char *v75;
  uint64_t v76;

  v1 = v0[38];
  v3 = v0[29];
  v2 = v0[30];
  sub_1000860DC();
  sub_1005FC1F8(v1, v3, v2);
  v5 = v4;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 7);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    sub_1000DB304();
    v7 = v0[35];
    v8 = (char *)sub_10011E550((uint64_t)_swiftEmptyArrayStorage);
    sub_10009C9B4(v8, v6);
    sub_100098AC8();
    v16 = v5 + v15;
    v65 = *(_QWORD *)(v7 + 72);
    v66 = v7;
    v61 = v5;
    v63 = *(uint64_t (**)(uint64_t))(v7 + 16);
    do
    {
      v74 = v6;
      v17 = sub_1000952F4(v9, v16, v0[34], v10, v11, v12, v13, v14, v57, v58, v59, v60, v61, v63);
      v18 = LocationEntity.id.getter(v17);
      sub_10011ABDC(v18, v19);
      v0[27] = v21;
      v0[28] = v20;
      v22 = sub_100114EF8();
      sub_1000CD8C4();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v23, v24, v25, v26, v27, v28, v29, v30);
      sub_1000986E8();
      sub_1000D9170();
      sub_100075DF4();
      sub_10009EF94();
      sub_1000C6584();
      sub_1000986E8();
      v0[21] = sub_100607124();
      v0[22] = v31;
      v0[23] = 58;
      v0[24] = 0xE100000000000000;
      v0[25] = 0;
      v0[26] = 0xE000000000000000;
      sub_1000CD8C4();
      v32 = v70;
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v33, v34, v35, v36, v37, v38, v39, v40);
      sub_100075DF4();
      sub_10009EF94();
      sub_100607104();
      sub_100098738();
      sub_1000986E8();
      sub_10009EDA8();
      v41 = (void *)sub_10011E308();
      sub_10009DBC8(v41);
      sub_10009C168(v42, v43, v44, v45, v46, v47, v48, v49, (uint64_t)&type metadata for String, v22, v22, v22, v62, v64, v65, v66, v67, v68, v69,
        v70,
        v71,
        v72,
        v73);
      if ((sub_1000D0228() & 1) == 0)
      {
        sub_1000BF218(*(_QWORD *)(v32 + 16));
        v32 = v76;
      }
      v51 = *(_QWORD *)(v32 + 16);
      v50 = *(_QWORD *)(v32 + 24);
      if (v51 >= v50 >> 1)
        sub_1000BDD74((char *)(v50 > 1), v51 + 1);
      sub_1000D0778();
      v6 = v74 - 1;
    }
    while (v74 != 1);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v0[36]);
    v52 = sub_1000BEB18();
    return sub_100099628(v52, v53);
  }
  else
  {
    sub_100075DF4();
    sub_10009DF2C();
    v55 = *sub_1000DB418(v0 + 2, v0[5]);
    v75 = (char *)&dword_100BF6478 + dword_100BF6478;
    v56 = (_QWORD *)swift_task_alloc(unk_100BF647C);
    v0[39] = v56;
    *v56 = v0;
    v56[1] = sub_1005FD9D4;
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))v75)(v0[29], v0[30], v55, v0[33]);
  }
}

uint64_t sub_1005FD9D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  v5 = *v0;
  v1 = v5;
  sub_100089168(&v5);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v1 + 16));
  swift_task_dealloc(*(_QWORD *)(v1 + 288));
  v2 = sub_1000BEB18();
  return v3(v2);
}

uint64_t sub_1005FDA34()
{
  uint64_t v0;
  unint64_t v1;

  v0 = sub_1000BA294(&qword_100BF6480);
  sub_10004037C(v0, static LocationSearchEntityQuery.properties);
  sub_1000AECD4(v0, (uint64_t)static LocationSearchEntityQuery.properties);
  v1 = sub_10015C43C();
  return EntityQueryProperties.init(properties:)(sub_1005FDAA8, 0, &type metadata for LocationSearchEntity, &type metadata for LocationSearchEntityQuery.ComparatorMappingType, v1);
}

uint64_t sub_1005FDAA8()
{
  uint64_t KeyPath;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v9;

  sub_1000BA294(&qword_100BF6768);
  KeyPath = swift_getKeyPath(&unk_1009B7868);
  v1 = EntityQueryProperty.__allocating_init<>(_:comparators:)(KeyPath, sub_1005FDB94, 0);
  v2 = sub_10015C43C();
  v3 = static EntityQueryPropertiesBuilder.buildExpression(_:)(v1, v2);
  swift_release();
  v4 = sub_1000BA294(&qword_100BCB640);
  v5 = swift_allocObject(v4, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1009898A0;
  *(_QWORD *)(v5 + 32) = v3;
  v9 = v5;
  specialized Array._endMutation()(v5);
  v6 = swift_retain();
  v7 = static EntityQueryPropertiesBuilder.buildBlock(_:)(v9, &type metadata for LocationSearchEntity, &type metadata for LocationSearchEntityQuery.ComparatorMappingType, v2, v6);
  swift_bridgeObjectRelease();
  swift_release();
  return v7;
}

uint64_t sub_1005FDB94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v16;

  v0 = sub_1000BA294(&qword_100BF6770);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000BA294(&qword_100BF6778);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = ContainsComparator.init<>(mappingTransform:)(sub_1005FDD1C, 0);
  v6 = sub_10015C43C();
  static EntityQueryComparatorsBuilder.buildExpression(_:)(v5, &type metadata for LocationSearchEntity, &type metadata for LocationSearchEntity, v6, v6);
  swift_release();
  v7 = sub_1000BA294(&qword_100BF6780);
  v8 = *(unsigned __int8 *)(v1 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(v7, v9 + *(_QWORD *)(v1 + 72), v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_10097CA50;
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 16))(v10 + v9, v3, v0);
  v11 = sub_1000BA294(&qword_100BC28D0);
  v12 = sub_100237E6C();
  v13 = static EntityQueryComparatorsBuilder.buildBlock(_:)(v10, &type metadata for LocationSearchEntity, &type metadata for LocationSearchEntity, v11, &type metadata for String, &type metadata for LocationSearchEntityQuery.ComparatorMappingType, v6, v6, v12);
  v14 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v14);
  return v13;
}

uint64_t sub_1005FDD1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain(a2);
}

uint64_t LocationSearchEntityQuery.properties.unsafeMutableAddressor()
{
  return sub_1005FDFFC(&qword_100BC22F0, (uint64_t)&qword_100BF6480, (uint64_t)static LocationSearchEntityQuery.properties, (uint64_t)sub_1005FDA34);
}

void static LocationSearchEntityQuery.properties.getter(uint64_t a1@<X8>)
{
  sub_1005FE060(&qword_100BC22F0, (uint64_t)static LocationSearchEntityQuery.properties, (uint64_t)sub_1005FDA34, a1);
}

void static LocationSearchEntityQuery.properties.setter(uint64_t a1)
{
  sub_1005FE0F8(a1, &qword_100BC22F0, (uint64_t)&qword_100BF6480, (uint64_t)static LocationSearchEntityQuery.properties, (uint64_t)sub_1005FDA34);
}

__n128 (*static LocationSearchEntityQuery.properties.modify(uint64_t a1))(_QWORD)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100BC22F0 != -1)
    swift_once(&qword_100BC22F0, sub_1005FDA34);
  v2 = sub_1000BA294(&qword_100BF6480);
  v3 = sub_1000AECD4(v2, (uint64_t)static LocationSearchEntityQuery.properties);
  sub_10009922C(v3, a1, 33);
  return j__swift_endAccess_0;
}

uint64_t sub_1005FDE0C()
{
  uint64_t v0;
  unint64_t v1;

  v0 = sub_1000BA294(&qword_100BF6488);
  sub_10004037C(v0, static LocationSearchEntityQuery.sortingOptions);
  sub_1000AECD4(v0, (uint64_t)static LocationSearchEntityQuery.sortingOptions);
  v1 = sub_10015C43C();
  return EntityQuerySortingOptions.init(content:)(sub_1005FDE78, 0, &type metadata for LocationSearchEntity, v1);
}

uint64_t sub_1005FDE78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t KeyPath;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v18;

  v0 = sub_1000BA294(&qword_100BF6750);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - v5;
  KeyPath = swift_getKeyPath(&unk_1009B7868);
  v8 = sub_10015C43C();
  v9 = sub_1006070B0();
  EntityQuerySortableByProperty.init<A>(_:)(KeyPath, v8, v9);
  static EntityQuerySortingOptionsBuilder.buildExpression(_:)(v3, &type metadata for LocationSearchEntity, v8);
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v3, v0);
  v11 = sub_1000BA294(&qword_100BF6760);
  v12 = *(unsigned __int8 *)(v1 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(v11, v13 + *(_QWORD *)(v1 + 72), v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_10097CA50;
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 16))(v14 + v13, v6, v0);
  v15 = static EntityQuerySortingOptionsBuilder.buildBlock(_:)(v14, &type metadata for LocationSearchEntity, v8);
  v16 = swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, __n128))v10)(v6, v0, v16);
  return v15;
}

uint64_t LocationSearchEntityQuery.sortingOptions.unsafeMutableAddressor()
{
  return sub_1005FDFFC(&qword_100BC22F8, (uint64_t)&qword_100BF6488, (uint64_t)static LocationSearchEntityQuery.sortingOptions, (uint64_t)sub_1005FDE0C);
}

uint64_t sub_1005FDFFC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  if (*a1 != -1)
    swift_once(a1, a4);
  v5 = sub_100098B10();
  return sub_1000AECD4(v5, a3);
}

void static LocationSearchEntityQuery.sortingOptions.getter(uint64_t a1@<X8>)
{
  sub_1005FE060(&qword_100BC22F8, (uint64_t)static LocationSearchEntityQuery.sortingOptions, (uint64_t)sub_1005FDE0C, a1);
}

void sub_1005FE060(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = sub_100079FD4();
  v7 = sub_1000AECD4(v6, a2);
  sub_10009922C(v7, (uint64_t)v8, 0);
  sub_100089084(a4, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16));
  sub_10003BCFC();
}

void static LocationSearchEntityQuery.sortingOptions.setter(uint64_t a1)
{
  sub_1005FE0F8(a1, &qword_100BC22F8, (uint64_t)&qword_100BF6488, (uint64_t)static LocationSearchEntityQuery.sortingOptions, (uint64_t)sub_1005FDE0C);
}

void sub_1005FE0F8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  _BYTE v11[24];

  if (*a2 != -1)
    swift_once(a2, a5);
  v7 = sub_100079FD4();
  v8 = sub_1000AECD4(v7, a4);
  sub_10009922C(v8, (uint64_t)v11, 33);
  v9 = *(_QWORD *)(v7 - 8);
  sub_100089084(v8, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24));
  v10 = swift_endAccess(v11);
  (*(void (**)(uint64_t, uint64_t, __n128))(v9 + 8))(a1, v7, v10);
  sub_10003BCFC();
}

__n128 (*static LocationSearchEntityQuery.sortingOptions.modify(uint64_t a1))(_QWORD)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100BC22F8 != -1)
    swift_once(&qword_100BC22F8, sub_1005FDE0C);
  v2 = sub_1000BA294(&qword_100BF6488);
  v3 = sub_1000AECD4(v2, (uint64_t)static LocationSearchEntityQuery.sortingOptions);
  sub_10009922C(v3, a1, 33);
  return j_j__swift_endAccess_0;
}

uint64_t LocationSearchEntityQuery.entities(matching:mode:sortedBy:limit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[24] = a1;
  v6[25] = a6;
  v7 = sub_10011E38C();
  v6[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[27] = v8;
  v6[28] = sub_1000BA400(v8);
  sub_10003BC90();
  return sub_1000BA3F4();
}

uint64_t sub_1005FE244()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10009DF2C();
  sub_1000B269C();
  v1 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of LocationEntityManagerType.savedLocations.getter[1]);
  *(_QWORD *)(v0 + 232) = v1;
  sub_1000C6EEC(v1, (uint64_t)sub_1005FE298);
  return sub_1000CFE7C();
}

uint64_t sub_1005FE298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000C01CC();
  sub_1000F3FC8();
  *(_QWORD *)(v1 + 240) = v0;
  sub_1000DC07C(v2);
  sub_10003BC90();
  return sub_1000BA3F4();
}

uint64_t sub_1005FE2D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(void);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;

  v1 = v0[30];
  v2 = v0[24];
  sub_1000860DC();
  sub_1005FC448(v1, v2);
  sub_100607168();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v63 = (uint64_t)(v0 + 14);
    v64 = (uint64_t)(v0 + 12);
    v61 = (uint64_t)(v0 + 18);
    v62 = (uint64_t)(v0 + 16);
    v59 = (uint64_t)(v0 + 22);
    v60 = (uint64_t)(v0 + 20);
    v4 = v0[27];
    v5 = (char *)sub_10011E550((uint64_t)_swiftEmptyArrayStorage);
    sub_10009C9B4(v5, v3);
    sub_100098AC8();
    v13 = v1 + v12;
    v57 = *(_QWORD *)(v4 + 72);
    v58 = v4;
    v53 = v1;
    v55 = *(uint64_t (**)(uint64_t))(v4 + 16);
    do
    {
      v66 = v3;
      v14 = sub_1000952F4(v6, v13, v0[26], v7, v8, v9, v10, v11, v49, v50, v51, v52, v53, v55);
      v0[12] = LocationEntity.id.getter(v14);
      v0[13] = v15;
      v0[14] = 44;
      v0[15] = 0xE100000000000000;
      v0[16] = 58;
      v0[17] = 0xE100000000000000;
      v16 = sub_100114EF8();
      sub_1000CD8C4();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v17, v18, v19, v20, v21, v22, v23, v24);
      sub_1000986E8();
      sub_1000D9170();
      sub_100075DF4();
      sub_10009EF94();
      sub_1000C6584();
      sub_1000986E8();
      v0[18] = sub_100607124();
      v0[19] = v25;
      v0[20] = 58;
      v0[21] = 0xE100000000000000;
      v0[22] = 0;
      v0[23] = 0xE000000000000000;
      sub_1000CD8C4();
      v26 = v61;
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v27, v28, v29, v30, v31, v32, v33, v34);
      sub_100075DF4();
      sub_10009EF94();
      sub_100607104();
      sub_100098738();
      sub_1000986E8();
      sub_10009EDA8();
      v35 = (void *)sub_10011E308();
      sub_10009DBC8(v35);
      sub_10009C168(v36, v37, v38, v39, v40, v41, v42, v43, (uint64_t)&type metadata for String, v16, v16, v16, v54, v56, v57, v58, v59, v60, v61,
        v62,
        v63,
        v64,
        v65);
      if ((sub_1000D0228() & 1) == 0)
      {
        sub_1000BF218(*(_QWORD *)(v26 + 16));
        v26 = v67;
      }
      v45 = *(_QWORD *)(v26 + 16);
      v44 = *(_QWORD *)(v26 + 24);
      if (v45 >= v44 >> 1)
        sub_1000BDD74((char *)(v44 > 1), v45 + 1);
      sub_1000D0778();
      --v3;
    }
    while (v66 != 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000986E8();
  }
  swift_task_dealloc(v0[28]);
  v46 = sub_1000BEB18();
  return sub_100099628(v46, v47);
}

uint64_t sub_1005FE4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = v2 - 1;
    v5 = (unint64_t *)(a2 + 40);
    do
    {
      v43 = v4;
      v33 = *v5;
      v34 = *(v5 - 1);
      swift_bridgeObjectRetain();
      v39 = LocationEntity.id.getter(v6);
      v40 = v7;
      v37 = 44;
      v38 = 0xE100000000000000;
      v35 = 58;
      v36 = 0xE100000000000000;
      v8 = sub_100114EF8();
      v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v37, &v35, 0, 0, 0, 1, &type metadata for String, &type metadata for String);
      v11 = v10;
      swift_bridgeObjectRelease();
      v39 = 0x6E6F697461636F4CLL;
      v40 = 0xEB000000003A4449;
      v12._countAndFlagsBits = v9;
      v12._object = v11;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v13._countAndFlagsBits = 58;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
      v16 = v39;
      v15 = v40;
      v39 = LocationEntity.name.getter(v14);
      v40 = v17;
      v37 = 58;
      v38 = 0xE100000000000000;
      v35 = 0;
      v36 = 0xE000000000000000;
      v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v37, &v35, 0, 0, 0, 1, &type metadata for String, &type metadata for String);
      v20 = v19;
      swift_bridgeObjectRelease();
      v39 = v16;
      v40 = v15;
      swift_bridgeObjectRetain();
      v21._countAndFlagsBits = v18;
      v21._object = v20;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
      v23 = v39;
      v24 = v40;
      v25 = LocationEntity.name.getter(v22);
      v27 = v26;
      v30 = (void *)LocationEntity.placemark.getter(v25, v26, v28, v29);
      LocationSearchEntity.init(id:name:placemark:isLocal:)(v23, v24, v25, v27, v30, 0, (uint64_t)&v41);
      EntityProperty.wrappedValue.getter(&v39);
      v37 = v34;
      v38 = v33;
      v31 = StringProtocol.contains<A>(_:)(&v37, &type metadata for String, &type metadata for String, v8, v8);
      swift_bridgeObjectRelease();
      v42 = v41;
      sub_100121AA8((uint64_t)&v42);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v4 = v43 - 1;
      if ((v31 & 1) == 0)
        break;
      v5 += 2;
    }
    while (v43);
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = 1;
  }
  return v31 & 1;
}

uint64_t sub_1005FE7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = *v3;
  v8 = v3[1];
  v9 = v3[2];
  v10 = (_QWORD *)swift_task_alloc(dword_100BF6474);
  *(_QWORD *)(v4 + 24) = v10;
  *v10 = v4;
  v10[1] = sub_1005FE848;
  return LocationSearchEntityQuery.entities(matching:)(a2, a3, v7, v8, v9);
}

uint64_t sub_1005FE848(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v7 = *v2;
  v5 = *v2;
  sub_100089168(&v7);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

void sub_1005FE8A0(uint64_t a1@<X8>)
{
  sub_1005FE8C8(LocationSearchEntityQuery.properties.unsafeMutableAddressor, &qword_100BF6480, a1);
}

void sub_1005FE8B4(uint64_t a1@<X8>)
{
  sub_1005FE8C8(LocationSearchEntityQuery.sortingOptions.unsafeMutableAddressor, &qword_100BF6488, a1);
}

void sub_1005FE8C8(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v5 = a1();
  sub_10009922C(v5, (uint64_t)v7, 0);
  v6 = sub_1000BA294(a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
  sub_10003BCFC();
}

uint64_t sub_1005FE924(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v3 + 16) = a1;
  v5 = *v2;
  v6 = (_QWORD *)swift_task_alloc(dword_100BF6494);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_100607100;
  return LocationSearchEntityQuery.entities(matching:mode:sortedBy:limit:)(a2, v7, v8, v9, v10, v5);
}

uint64_t sub_1005FE97C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = LocationSearchEntityQuery.init()();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_1005FE9A4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_100BF645C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1005FE9F8;
  return LocationSearchEntityQuery.entities(for:)(a1, v4);
}

uint64_t sub_1005FE9F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = sub_100098D14();
  if (!v1)
    v4 = a1;
  return (*(uint64_t (**)(uint64_t))(v2 + 8))(v4);
}

uint64_t sub_1005FEA30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *v1;
  v4 = (_QWORD *)swift_task_alloc(dword_100BF6464);
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_100607100;
  return LocationSearchEntityQuery.suggestedEntities()(v3);
}

uint64_t sub_1005FEA80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1001FD13C();
  *v5 = v2;
  v5[1] = sub_100445EA4;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_1005FEAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100445EA4;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

void sub_1005FEB60()
{
  sub_1005FEB88();
}

void sub_1005FEB74()
{
  sub_1005FEB88();
}

void sub_1005FEB88()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD);
  uint64_t v24;
  const char *v25;
  uint64_t v26;

  sub_1000F44F0();
  if ((v6 & 1) != 0)
  {
    sub_1000DD15C();
    if (v10 != v11)
    {
      sub_1000C572C();
      if (v10)
      {
        __break(1u);
LABEL_22:
        sub_1000BA698();
        v25 = "Division by zero";
        v26 = 16;
LABEL_24:
        sub_1000B3010((uint64_t)"Fatal error", 11, 2, (uint64_t)v25, v26, v24, (uint64_t)"Swift/IntegerTypes.swift");
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  else
  {
    v9 = v5;
  }
  v12 = *(_QWORD *)(v0 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(v0 + 16);
  else
    v13 = v9;
  if (!v13)
    goto LABEL_17;
  sub_1000DBBEC(v4, v5, v6, v7, v8);
  v14 = v1(0);
  v15 = (const void *)sub_1000E7CC8(v14);
  sub_10011E0AC(v15);
  if (!v3)
    goto LABEL_22;
  sub_10011E044();
  v17 = v17 && v3 == -1;
  if (v17)
  {
    sub_1000BA698();
    v25 = "Division results in an overflow";
    v26 = 31;
    goto LABEL_24;
  }
  sub_1000B32B8(v16);
LABEL_17:
  v1(0);
  sub_10009EFD0();
  if ((v2 & 1) != 0)
  {
    sub_100600708(v0 + v18, v12);
    *(_QWORD *)(v0 + 16) = 0;
    sub_1000986E8();
  }
  else
  {
    v19 = sub_100095008();
    sub_1005FFFF8(v19, v20, v21, v22, v23);
  }
  sub_1000CF910();
}

void sub_1005FECBC()
{
  sub_1005FEDB8();
}

void sub_1005FECD8()
{
  sub_1005FEB88();
}

void sub_1005FECEC()
{
  sub_1005FEB88();
}

void sub_1005FED00()
{
  sub_10001F148();
}

void sub_1005FED1C()
{
  sub_1005FEB88();
}

void sub_1005FED30()
{
  sub_1005FEB88();
}

void sub_1005FED44()
{
  sub_1005FEF9C();
}

void sub_1005FED58()
{
  sub_1005FEB88();
}

void sub_1005FED6C()
{
  sub_1000D0444();
}

void sub_1005FED88()
{
  sub_1005FEB88();
}

void sub_1005FED9C()
{
  sub_1005FEDB8();
}

void sub_1005FEDB8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;

  sub_1000C1B60();
  if ((v3 & 1) != 0)
  {
    sub_1000DD15C();
    if (v4 != v5)
    {
      sub_1000C572C();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  sub_1000C179C();
  if (v2)
  {
    v11 = sub_1000DBBEC(v6, v7, v8, v9, v10);
    v12 = (_QWORD *)sub_100098740(v11, 40 * v2 + 32);
    v13 = j__malloc_size(v12);
    sub_1000C22C4((uint64_t)(v13 - 32) / 40);
  }
  else
  {
    v12 = _swiftEmptyArrayStorage;
  }
  if ((v1 & 1) != 0)
  {
    sub_1000EFA14();
    *(_QWORD *)(v0 + 16) = 0;
    sub_1000986E8();
  }
  else
  {
    sub_100099BF0(v6, v7, (uint64_t)(v12 + 4));
  }
  sub_10009D300();
}

void sub_1005FEE5C()
{
  sub_1005FF32C();
}

void sub_1005FEE78()
{
  sub_1005FEB88();
}

void sub_1005FEE8C()
{
  sub_1005FEB88();
}

void sub_1005FEEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10008148C(a1, a2, a3, a4, &qword_100BCED98, (uint64_t)&qword_100BCF2C8, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))sub_100081588, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100600314);
}

void sub_1005FEEC4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  sub_10009E2DC();
  if ((v4 & 1) != 0)
  {
    sub_1000DD15C();
    if (v5 != v6)
    {
      sub_1000C572C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  sub_1000F3E6C();
  if (v3)
  {
    v12 = sub_1000DBBEC(v7, v8, v9, v10, v11);
    v13 = (_QWORD *)sub_100098740(v12, 16 * v3 + 32);
    j__malloc_size(v13);
    sub_10011E0FC();
    v13[2] = v2;
    v13[3] = v14;
  }
  if ((v1 & 1) != 0)
  {
    v15 = (char *)sub_10011E158();
    sub_10011FEB8(v15, v16, v17);
    *(_QWORD *)(v0 + 16) = 0;
    sub_1000986E8();
  }
  else
  {
    v18 = sub_1000FC674();
    sub_1005FFF50(v18, v19);
  }
  sub_100079F70();
}

void sub_1005FEF60()
{
  sub_1005FEB88();
}

void sub_1005FEF74()
{
  sub_1005FEB88();
}

void sub_1005FEF88()
{
  sub_1005FEF9C();
}

void sub_1005FEF9C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;

  sub_1000F44F0();
  if ((v5 & 1) != 0)
  {
    sub_1000DD15C();
    if (v9 != v10)
    {
      sub_1000C572C();
      if (v9)
      {
        __break(1u);
LABEL_22:
        sub_1000BA698();
        v24 = "Division by zero";
        v25 = 16;
LABEL_24:
        sub_1000B3010((uint64_t)"Fatal error", 11, 2, (uint64_t)v24, v25, v23, (uint64_t)"Swift/IntegerTypes.swift");
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  else
  {
    v8 = v4;
  }
  v11 = *(_QWORD *)(v0 + 16);
  if (v8 <= v11)
    v12 = *(_QWORD *)(v0 + 16);
  else
    v12 = v8;
  if (!v12)
    goto LABEL_17;
  sub_1000DBBEC(v3, v4, v5, v6, v7);
  v13 = sub_100098B10();
  v14 = (const void *)sub_1000E7CC8(v13);
  sub_10011E0AC(v14);
  if (!v2)
    goto LABEL_22;
  sub_10011E044();
  v16 = v16 && v2 == -1;
  if (v16)
  {
    sub_1000BA698();
    v24 = "Division results in an overflow";
    v25 = 31;
    goto LABEL_24;
  }
  sub_1000B32B8(v15);
LABEL_17:
  sub_100098B10();
  sub_10009EFD0();
  if ((v1 & 1) != 0)
  {
    sub_10011FF9C(v0 + v17, v11);
    *(_QWORD *)(v0 + 16) = 0;
    sub_1000986E8();
  }
  else
  {
    v18 = sub_100095008();
    sub_1006000A4(v18, v19, v20, v21, v22);
  }
  sub_1000CF910();
}

void sub_1005FF0C8()
{
  sub_1005FEF9C();
}

void sub_1005FF0DC()
{
  sub_1005FEB88();
}

void sub_1005FF0F0()
{
  sub_1005FEB88();
}

void sub_1005FF104()
{
  sub_1005FEB88();
}

void sub_1005FF118()
{
  sub_1005FEB88();
}

void sub_1005FF12C()
{
  sub_1005FEDB8();
}

void sub_1005FF148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10008148C(a1, a2, a3, a4, &qword_100BF6680, (uint64_t)&type metadata for DebugOfflineViewController.Row, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))sub_10011F040, (void (*)(uint64_t, uint64_t, _QWORD *))sub_10011FDD8);
}

void sub_1005FF16C()
{
  sub_1005FF32C();
}

void sub_1005FF188()
{
  sub_1005FEB88();
}

void sub_1005FF19C()
{
  sub_1005FEB88();
}

void sub_1005FF1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10008148C(a1, a2, a3, a4, &qword_100BF65D0, (uint64_t)&unk_100BF65D8, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))sub_100081588, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100600314);
}

void sub_1005FF1D4()
{
  sub_1005FEB88();
}

void sub_1005FF1E8()
{
  sub_1005FEB88();
}

void sub_1005FF1FC()
{
  sub_1005FEB88();
}

void sub_1005FF210()
{
  sub_1005FEB88();
}

void sub_1005FF224()
{
  sub_1005FEB88();
}

void sub_1005FF238()
{
  sub_1005FEB88();
}

void sub_1005FF24C()
{
  sub_1005FEB88();
}

void sub_1005FF260()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  sub_10009E2DC();
  if ((v4 & 1) != 0)
  {
    sub_1000DD15C();
    if (v5 != v6)
    {
      sub_1000C572C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  sub_1000F3E6C();
  if (v3)
  {
    v7 = sub_1000BA294(&qword_100BF6800);
    v8 = (_QWORD *)sub_100098740(v7, 4 * v3 + 32);
    v9 = j__malloc_size(v8);
    v8[2] = v2;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 4);
  }
  if ((v1 & 1) != 0)
  {
    v10 = (char *)sub_10011E158();
    sub_100600678(v10, v11, v12);
    *(_QWORD *)(v0 + 16) = 0;
    sub_1000986E8();
  }
  else
  {
    v13 = sub_1000FC674();
    sub_1005FFB8C(v13, v14, v15, v16);
  }
  sub_100079F70();
}

void sub_1005FF310()
{
  sub_1005FF32C();
}

void sub_1005FF32C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;

  sub_1000C1B60();
  if ((v3 & 1) != 0)
  {
    sub_1000DD15C();
    if (v4 != v5)
    {
      sub_1000C572C();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  sub_1000C179C();
  if (v2)
  {
    v11 = sub_1000DBBEC(v6, v7, v8, v9, v10);
    v12 = (_QWORD *)sub_100098740(v11, 32 * v2 + 32);
    v13 = j__malloc_size(v12);
    sub_1000C22C4((uint64_t)(v13 - 32) / 32);
  }
  else
  {
    v12 = _swiftEmptyArrayStorage;
  }
  if ((v1 & 1) != 0)
  {
    sub_1000EFA14();
    *(_QWORD *)(v0 + 16) = 0;
    sub_1000986E8();
  }
  else
  {
    sub_100099BF0(v6, v7, (uint64_t)(v12 + 4));
  }
  sub_10004A2A0();
}

void sub_1005FF3CC()
{
  sub_1000D0444();
}

void sub_1005FF3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10008148C(a1, a2, a3, a4, &qword_100BF6468, (uint64_t)&type metadata for LocationSearchEntity, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))sub_10011F040, (void (*)(uint64_t, uint64_t, _QWORD *))sub_10011FDD8);
}

void sub_1005FF40C()
{
  sub_1005FEB88();
}

void sub_1005FF420()
{
  sub_10001F148();
}

void sub_1005FF43C()
{
  sub_1005FEB88();
}

void sub_1005FF450()
{
  sub_1005FEEC4();
}

void sub_1005FF45C()
{
  sub_1005FEB88();
}

void sub_1005FF470()
{
  sub_1005FEF9C();
}

void sub_1005FF484()
{
  sub_1005FEB88();
}

void sub_1005FF498()
{
  sub_1005FEB88();
}

void sub_1005FF4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10008148C(a1, a2, a3, a4, &qword_100BF66F0, (uint64_t)&type metadata for NotificationSettingsLocationViewModel, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))sub_10011F040, (void (*)(uint64_t, uint64_t, _QWORD *))sub_10011FDD8);
}

uint64_t sub_1005FF4D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

char *sub_1005FF5CC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  char *result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = (char *)(a4 + 8 * a1 + 32);
  v7 = &__dst[8 * v4];
  if (v6 >= v7 || &v6[8 * v4] <= __dst)
  {
    memcpy(__dst, v6, 8 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_1005FF6BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

char *sub_1005FF7B0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  uint64_t v7;
  char *v8;
  char *result;
  const char *v11;
  uint64_t v12;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v11 = "UnsafeMutablePointer.initialize with negative count";
    v12 = 51;
    goto LABEL_11;
  }
  v6 = (char *)(a4 + 40 * a1 + 32);
  v7 = 5 * v4;
  v8 = &__dst[8 * v7];
  if (v6 >= v8 || &v6[8 * v7] <= __dst)
  {
    memcpy(__dst, v6, 8 * v7);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  v11 = "UnsafeMutablePointer.initialize overlapping range";
  v12 = 49;
LABEL_11:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v11, v12, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_1005FF8A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_1005FF99C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_1005FFA98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

char *sub_1005FFB8C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  char *result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = (char *)(a4 + 4 * a1 + 32);
  v7 = &__dst[4 * v4];
  if (v6 >= v7 || &v6[4 * v4] <= __dst)
  {
    memcpy(__dst, v6, 4 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_1005FFC7C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

char *sub_1005FFD74(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  char *result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = (char *)(a4 + 16 * a1 + 32);
  v7 = &__dst[16 * v4];
  if (v6 >= v7 || &v6[16 * v4] <= __dst)
  {
    memcpy(__dst, v6, 16 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

char *sub_1005FFE64(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v6;
  char *v7;
  char *result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = (char *)(a4 + a1 + 32);
  v7 = &__dst[v4];
  if (v6 >= &__dst[v4] || &v6[v4] <= __dst)
  {
    memcpy(__dst, v6, v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

void sub_1005FFF50(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_1000BA698();
    sub_1000C36A8();
    goto LABEL_11;
  }
  sub_10011DB9C();
  if (v4)
    v5 = 0;
  else
    v5 = v3 > v2;
  if (!v5)
  {
    sub_1000BA294(&qword_100BF65F8);
    sub_1000DAD00();
    sub_1000986E8();
    sub_1000BBF54();
    return;
  }
  sub_1000BA698();
  sub_1000C25D8();
LABEL_11:
  sub_1000BBE5C(v6, v7, v8, v9, v10, v11, v12);
  __break(1u);
}

void sub_1005FFFF8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  unint64_t v6;
  char v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_1000BA698();
    sub_1000C36A8();
    goto LABEL_11;
  }
  a5(0);
  sub_1000E7824();
  if (v7)
    v8 = 0;
  else
    v8 = v6 > a3;
  if (!v8)
  {
    sub_1001104B4();
    sub_1000986E8();
    sub_10003BCFC();
    return;
  }
  sub_1000BA698();
  sub_1000C25D8();
LABEL_11:
  sub_1000BBE5C(v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
}

void sub_1006000A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v6;
  char v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_1000BA698();
    sub_1000C36A8();
    goto LABEL_11;
  }
  sub_1000DBBEC(a1, a2, a3, a4, a5);
  sub_1000E7824();
  if (v7)
    v8 = 0;
  else
    v8 = v6 > a3;
  if (!v8)
  {
    sub_1001104B4();
    sub_1000986E8();
    sub_10003BCFC();
    return;
  }
  sub_1000BA698();
  sub_1000C25D8();
LABEL_11:
  sub_1000BBE5C(v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
}

char *sub_10060014C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

void sub_1006001DC(uint64_t a1, uint64_t a2)
{
  sub_10011FF9C(a1, a2);
}

char *sub_1006001E8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[80 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 80 * a2);
  }
  return __src;
}

void sub_100600274(uint64_t a1, uint64_t a2)
{
  sub_10011FF9C(a1, a2);
}

char *sub_100600280(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

void sub_100600308(uint64_t a1, uint64_t a2)
{
  sub_100600708(a1, a2);
}

char *sub_100600314(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0)
  {
    sub_1000BA698();
    result = (char *)sub_1000BC728((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_1000C2D8C(a3, result);
  }
  return result;
}

char *sub_100600374(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0)
  {
    sub_1000BA698();
    result = (char *)sub_1000BC728((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_1000C2D8C(a3, result);
  }
  return result;
}

char *sub_1006003CC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[120 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 120 * a2);
  }
  return __src;
}

char *sub_100600454(char *__src, size_t __len, char *__dst)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((__len & 0x8000000000000000) != 0)
  {
    sub_1000BA698();
    __src = (char *)sub_1000BC728((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *sub_1006004B4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[88 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 88 * a2);
  }
  return __src;
}

void sub_100600540(uint64_t a1, uint64_t a2)
{
  sub_100600708(a1, a2);
}

char *sub_10060054C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

void sub_1006005D0(uint64_t a1, uint64_t a2)
{
  sub_100600708(a1, a2);
}

void sub_1006005DC(uint64_t a1, uint64_t a2)
{
  sub_100600708(a1, a2);
}

void sub_1006005E8(uint64_t a1, uint64_t a2)
{
  sub_100600708(a1, a2);
}

void sub_1006005F4(uint64_t a1, uint64_t a2)
{
  sub_100600708(a1, a2);
}

void sub_100600600(uint64_t a1, uint64_t a2)
{
  sub_100600708(a1, a2);
}

void sub_10060060C(uint64_t a1, uint64_t a2)
{
  sub_100600708(a1, a2);
}

char *sub_100600618(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0)
  {
    sub_1000BA698();
    result = (char *)sub_1000BC728((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_1000C2D8C(a3, result);
  }
  return result;
}

char *sub_100600678(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[4 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 4 * a2);
  }
  return __src;
}

void sub_1006006FC(uint64_t a1, uint64_t a2)
{
  sub_100600708(a1, a2);
}

void sub_100600708(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD);
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 < 0)
  {
    sub_1000BA698();
    sub_1000BC728((uint64_t)"Fatal error", v11, v12, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v13, v14, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else
  {
    sub_10009E354();
    if (v5 && (v4(0), sub_10009DE24(), !v6 & v5))
    {
      if (v3 == v2)
      {
        sub_10003BCFC();
      }
      else
      {
        sub_1000EB084();
        sub_1000B317C();
      }
    }
    else
    {
      v4(0);
      v7 = sub_1000EB084();
      sub_1000F425C(v7, v8, v9, v10);
    }
  }
}

char *sub_100600790(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0)
  {
    sub_1000BA698();
    result = (char *)sub_1000BC728((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_1000C2D8C(a3, result);
  }
  return result;
}

uint64_t sub_1006007E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __n128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v6 = type metadata accessor for LocationOfInterestType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100051B90(&qword_100BC3120, v12, (uint64_t)&protocol conformance descriptor for LocationOfInterestType);
  swift_bridgeObjectRetain(v10);
  v37 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v33 = v3;
    v34 = a1;
    v35 = ~v15;
    v36 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100051B90(&qword_100BC3140, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType, (uint64_t)&protocol conformance descriptor for LocationOfInterestType);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v37, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v36 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v35;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v33;
        a1 = v34;
        v26 = v36;
        goto LABEL_7;
      }
    }
    v32 = swift_bridgeObjectRelease(v21);
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v37, v6, v32);
    v22(v34, *(_QWORD *)(*v33 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v37;
    v20(v9, v37, v6);
    v38 = *v3;
    *v3 = 0x8000000000000000;
    sub_100603308((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v38;
    v30 = swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v30);
    return 1;
  }
}

#error "100600BDC: call analysis failed (funcsize=57)"

uint64_t sub_100600C4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __n128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v6 = type metadata accessor for Location(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100051B90(&qword_100BC35B0, v12, (uint64_t)&protocol conformance descriptor for Location);
  swift_bridgeObjectRetain(v10);
  v37 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v33 = v3;
    v34 = a1;
    v35 = ~v15;
    v36 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100051B90((unint64_t *)&qword_100BC35B8, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v37, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v36 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v35;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v33;
        a1 = v34;
        v26 = v36;
        goto LABEL_7;
      }
    }
    v32 = swift_bridgeObjectRelease(v21);
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v37, v6, v32);
    v22(v34, *(_QWORD *)(*v33 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v37;
    v20(v9, v37, v6);
    v38 = *v3;
    *v3 = 0x8000000000000000;
    sub_100603814((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v38;
    v30 = swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v30);
    return 1;
  }
}

uint64_t sub_100600EA8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __n128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v6 = type metadata accessor for DetailChartCondition(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100051B90(&qword_100BC3598, v12, (uint64_t)&protocol conformance descriptor for DetailChartCondition);
  swift_bridgeObjectRetain(v10);
  v37 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v33 = v3;
    v34 = a1;
    v35 = ~v15;
    v36 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100051B90((unint64_t *)&qword_100BC35A0, (uint64_t (*)(uint64_t))&type metadata accessor for DetailChartCondition, (uint64_t)&protocol conformance descriptor for DetailChartCondition);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v37, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v36 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v35;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v33;
        a1 = v34;
        v26 = v36;
        goto LABEL_7;
      }
    }
    v32 = swift_bridgeObjectRelease(v21);
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v37, v6, v32);
    v22(v34, *(_QWORD *)(*v33 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v37;
    v20(v9, v37, v6);
    v38 = *v3;
    *v3 = 0x8000000000000000;
    sub_100603B08((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v38;
    v30 = swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v30);
    return 1;
  }
}

uint64_t sub_100601104(unsigned __int8 *a1, unsigned __int8 a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *v2;
  sub_10009E564(*(_QWORD *)(*v2 + 40));
  Hasher._combine(_:)(a2);
  v6 = sub_10007A148();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native(*v2);
    sub_1000B3BB4();
    sub_100603D5C(a2, v8, v12);
    sub_100607114(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  a2 = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

#error "100601380: call analysis failed (funcsize=38)"

#error "100601598: call analysis failed (funcsize=38)"

void sub_1006015E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _BYTE v41[72];

  sub_1000986AC();
  v1 = v0;
  v2 = sub_10011E6F0();
  v3 = sub_10011DEDC(v2);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *v0;
  sub_100607174();
  sub_1000BA294(&qword_100BF6730);
  v7 = sub_10009E67C(v6);
  if (*(_QWORD *)(v6 + 16))
  {
    sub_1000AE994();
    v9 = *(_QWORD *)(v6 + 56);
    v39 = (_QWORD *)(v6 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    sub_1000FDBF4();
    v37 = v0;
    v38 = v12;
    v13 = v7 + 56;
    swift_retain();
    v14 = 0;
    if (!v11)
      goto LABEL_7;
LABEL_6:
    v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v15 | (v14 << 6); ; i = v21 + (v14 << 6))
    {
      v22 = *(_QWORD *)(v40 + 72);
      sub_100163844(*(_QWORD *)(v6 + 48) + v22 * i, (uint64_t)v5);
      sub_10009E434();
      v24 = *v5;
      v23 = v5[1];
      sub_10009EF94();
      String.hash(into:)(v41, v24, v23);
      sub_1000986E8();
      v25 = sub_1006071AC();
      v26 = sub_100051B90(&qword_100BC3120, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType, (uint64_t)&protocol conformance descriptor for LocationOfInterestType);
      dispatch thunk of Hashable.hash(into:)(v41, v25, v26);
      v27 = sub_100607144() & ~(-1 << *(_BYTE *)(v7 + 32));
      if (((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6))) == 0)
      {
        sub_1000C567C();
        while (1)
        {
          sub_10060715C();
          if (v32)
          {
            if ((v29 & 1) != 0)
              break;
          }
          if (v30 == v31)
            v30 = 0;
          if (*(_QWORD *)(v13 + 8 * v30) != -1)
          {
            sub_1000C0AF4();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      sub_1001099F0();
LABEL_31:
      sub_1000DC22C(v28);
      sub_100163844((uint64_t)v5, v34 + v33 * v22);
      ++*(_QWORD *)(v7 + 16);
      if (v11)
        goto LABEL_6;
LABEL_7:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_39;
      if (v17 >= v38)
        goto LABEL_33;
      ++v14;
      if (!v39[v17])
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v38)
          goto LABEL_33;
        if (!v39[v14])
        {
          v14 = v17 + 2;
          if (v17 + 2 >= v38)
            goto LABEL_33;
          if (!v39[v14])
          {
            v18 = v17 + 3;
            if (v18 >= v38)
            {
LABEL_33:
              sub_100089020();
              v1 = v37;
              v35 = 1 << *(_BYTE *)(v6 + 32);
              if (v35 > 63)
              {
                sub_100605B40(0, (unint64_t)(v35 + 63) >> 6, v39);
              }
              else
              {
                sub_100095174();
                *v39 = v36;
              }
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            if (!v39[v18])
            {
              while (1)
              {
                v14 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_40;
                if (v14 >= v38)
                  goto LABEL_33;
                ++v18;
                if (v39[v14])
                  goto LABEL_20;
              }
            }
            v14 = v18;
          }
        }
      }
LABEL_20:
      sub_1000DAFF0();
      v11 = v20 & v19;
    }
  }
  sub_100089020();
  *v1 = v7;
  sub_100098640();
}

uint64_t sub_1006018C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  uint64_t v19[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000BA294(&qword_100BF65E0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v18 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v3 + 64);
    v13 = 1;
    if (v12)
      goto LABEL_22;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (v12)
        goto LABEL_22;
      v13 = 3;
      if (v10 > 3)
      {
        v12 = *(_QWORD *)(v3 + 80);
        if (!v12)
        {
          v14 = 4;
          if (v10 > 4)
          {
            v12 = *(_QWORD *)(v3 + 88);
            if (v12)
            {
              v13 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
                JUMPOUT(0x100601BFCLL);
              }
              if (v13 >= v10)
                break;
              v12 = v7[v13];
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v19);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v2 = v18;
  v16 = 1 << *(_BYTE *)(v3 + 32);
  if (v16 > 63)
    sub_100605B40(0, (unint64_t)(v16 + 63) >> 6, (_QWORD *)(v3 + 56));
  else
    *v7 = -1 << v16;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  result = swift_release(v3);
  *v2 = v5;
  return result;
}

void sub_100601C0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000BA294(&qword_100BCCB90);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain();
    v12 = 0;
    if (!v9)
      goto LABEL_10;
LABEL_9:
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
      v19 = *v18;
      v20 = v18[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v19, v20);
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
      *v30 = v19;
      v30[1] = v20;
      ++*(_QWORD *)(v6 + 16);
      if (v9)
        goto LABEL_9;
LABEL_10:
      v15 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_41;
      if (v15 >= v10)
        goto LABEL_35;
      v16 = v33[v15];
      ++v12;
      if (!v16)
      {
        v12 = v15 + 1;
        if (v15 + 1 >= v10)
          goto LABEL_35;
        v16 = v33[v12];
        if (!v16)
        {
          v12 = v15 + 2;
          if (v15 + 2 >= v10)
            goto LABEL_35;
          v16 = v33[v12];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v10)
            {
LABEL_35:
              swift_release(v3);
              v2 = v32;
              v31 = 1 << *(_BYTE *)(v3 + 32);
              if (v31 > 63)
                sub_100605B40(0, (unint64_t)(v31 + 63) >> 6, v33);
              else
                *v33 = -1 << v31;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v16 = v33[v17];
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_42;
                if (v12 >= v10)
                  goto LABEL_35;
                v16 = v33[v12];
                ++v17;
                if (v16)
                  goto LABEL_23;
              }
            }
            v12 = v17;
          }
        }
      }
LABEL_23:
      v9 = (v16 - 1) & v16;
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100601EE4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t, __n128);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  sub_1000986AC();
  v50 = v1;
  v51 = v2;
  v3 = v0;
  v6 = sub_10060714C(v4, v5);
  v49 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - v7;
  v9 = *v0;
  sub_100607174();
  sub_1000878AC();
  v10 = sub_10009E67C(v9);
  if (*(_QWORD *)(v9 + 16))
  {
    sub_1000AE994();
    v48 = (_QWORD *)(v9 + 56);
    sub_10009E52C();
    v13 = v12 & v11;
    sub_1000FDBF4();
    v46 = v0;
    v47 = v14;
    v15 = v10 + 56;
    v16 = swift_retain();
    v17 = 0;
    if (!v13)
      goto LABEL_4;
LABEL_3:
    v18 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    for (i = v18 | (v17 << 6); ; i = v26 + (v17 << 6))
    {
      v27 = v9;
      v28 = *(_QWORD *)(v9 + 48);
      v29 = *(_QWORD *)(v49 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v49 + 32);
      v30(v8, v28 + v29 * i, v6, v16);
      v31 = *(_QWORD *)(v10 + 40);
      v32 = sub_100607194();
      dispatch thunk of Hashable._rawHashValue(seed:)(v31, v6, v32);
      sub_100607180();
      if (((v35 << v34) & ~*(_QWORD *)(v15 + 8 * v33)) == 0)
      {
        sub_1000C567C();
        while (1)
        {
          sub_10060715C();
          if (v40)
          {
            if ((v37 & 1) != 0)
              break;
          }
          if (v38 == v39)
            v38 = 0;
          if (*(_QWORD *)(v15 + 8 * v38) != -1)
          {
            sub_1000C0AF4();
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      sub_1001099F0();
LABEL_28:
      sub_1000DC22C(v36);
      ((void (*)(uint64_t, char *, uint64_t))v30)(v42 + v41 * v29, v8, v6);
      ++*(_QWORD *)(v10 + 16);
      v9 = v27;
      if (v13)
        goto LABEL_3;
LABEL_4:
      if (__OFADD__(v17, 1))
        goto LABEL_36;
      if (v17 + 1 >= v47)
        goto LABEL_30;
      sub_1006071A0();
      v17 = v20;
      if (!v21)
      {
        v17 = v20 + 1;
        if (v20 + 1 >= v47)
          goto LABEL_30;
        if (!v48[v17])
        {
          v17 = v20 + 2;
          if (v20 + 2 >= v47)
            goto LABEL_30;
          if (!v48[v17])
          {
            if (v20 + 3 >= v47)
            {
LABEL_30:
              swift_release(v9);
              v3 = v46;
              v43 = 1 << *(_BYTE *)(v9 + 32);
              if (v43 > 63)
              {
                sub_100605B40(0, (unint64_t)(v43 + 63) >> 6, v48);
              }
              else
              {
                sub_100095174();
                *v48 = v44;
              }
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            sub_1006071A0();
            if (!v23)
            {
              while (1)
              {
                v17 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_37;
                if (v17 >= v47)
                  goto LABEL_30;
                ++v22;
                if (v48[v17])
                  goto LABEL_17;
              }
            }
            v17 = v22;
          }
        }
      }
LABEL_17:
      sub_1000DAFF0();
      v13 = v25 & v24;
    }
  }
  swift_release(v9);
  *v3 = v10;
  sub_100098640();
}

void sub_100602184(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000BA294(&qword_100BF6538);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v3 + 64);
    v13 = 1;
    if (v12)
      goto LABEL_22;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (v12)
        goto LABEL_22;
      v13 = 3;
      if (v10 > 3)
      {
        v12 = *(_QWORD *)(v3 + 80);
        if (!v12)
        {
          v14 = 4;
          if (v10 > 4)
          {
            v12 = *(_QWORD *)(v3 + 88);
            if (v12)
            {
              v13 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
                JUMPOUT(0x10060267CLL);
              }
              if (v13 >= v10)
                break;
              v12 = v7[v13];
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v17);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v16 = 1 << *(_BYTE *)(v3 + 32);
  if (v16 > 63)
    sub_100605B40(0, (unint64_t)(v16 + 63) >> 6, (_QWORD *)(v3 + 56));
  else
    *v7 = -1 << v16;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  swift_release(v3);
  *v2 = v5;
}

void sub_1006026CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000BA294(&qword_100BF67D0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v5 + 56;
    if (!v11)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v14 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
    {
      v19 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + i);
      Hasher.init(_seed:)(v31);
      Hasher._combine(_:)(v19);
      v20 = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = v20 & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) == 0)
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          v27 = v23 == v26;
          if (v23 == v26)
            v23 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v23);
          if (v28 != -1)
          {
            v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v24) = v19;
      ++*(_QWORD *)(v6 + 16);
      if (v11)
        goto LABEL_9;
LABEL_10:
      v16 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_41;
      if (v16 >= v12)
        goto LABEL_35;
      v17 = v8[v16];
      ++v7;
      if (!v17)
      {
        v7 = v16 + 1;
        if (v16 + 1 >= v12)
          goto LABEL_35;
        v17 = v8[v7];
        if (!v17)
        {
          v7 = v16 + 2;
          if (v16 + 2 >= v12)
            goto LABEL_35;
          v17 = v8[v7];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v12)
            {
LABEL_35:
              v29 = 1 << *(_BYTE *)(v3 + 32);
              if (v29 > 63)
                sub_100605B40(0, (unint64_t)(v29 + 63) >> 6, (_QWORD *)(v3 + 56));
              else
                *v8 = -1 << v29;
              v2 = v30;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v7 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v7 >= v12)
                  goto LABEL_35;
                v17 = v8[v7];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v7 = v18;
          }
        }
      }
LABEL_23:
      v11 = (v17 - 1) & v17;
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100602970(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000BA294(&qword_100BF67E0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v17 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v3 + 64);
    v13 = 1;
    if (v12)
      goto LABEL_22;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (v12)
        goto LABEL_22;
      v13 = 3;
      if (v10 > 3)
      {
        v12 = *(_QWORD *)(v3 + 80);
        if (!v12)
        {
          v14 = 4;
          if (v10 > 4)
          {
            v12 = *(_QWORD *)(v3 + 88);
            if (v12)
            {
              v13 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
                JUMPOUT(0x100602CB4);
              }
              if (v13 >= v10)
                break;
              v12 = v7[v13];
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v18);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v2 = v17;
  v16 = 1 << *(_BYTE *)(v3 + 32);
  if (v16 > 63)
    sub_100605B40(0, (unint64_t)(v16 + 63) >> 6, (_QWORD *)(v3 + 56));
  else
    *v7 = -1 << v16;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  swift_release(v3);
  *v2 = v5;
}

void sub_100602CCC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000BA294(&qword_100BF67D8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v17 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v3 + 64);
    v13 = 1;
    if (v12)
      goto LABEL_22;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (v12)
        goto LABEL_22;
      v13 = 3;
      if (v10 > 3)
      {
        v12 = *(_QWORD *)(v3 + 80);
        if (!v12)
        {
          v14 = 4;
          if (v10 > 4)
          {
            v12 = *(_QWORD *)(v3 + 88);
            if (v12)
            {
              v13 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
                JUMPOUT(0x100603034);
              }
              if (v13 >= v10)
                break;
              v12 = v7[v13];
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v18);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v2 = v17;
  v16 = 1 << *(_BYTE *)(v3 + 32);
  if (v16 > 63)
    sub_100605B40(0, (unint64_t)(v16 + 63) >> 6, (_QWORD *)(v3 + 56));
  else
    *v7 = -1 << v16;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  swift_release(v3);
  *v2 = v5;
}

void sub_100603054(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000BA294(&qword_100BF67F0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    swift_retain();
    v13 = 0;
    if (!v10)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * i);
      Hasher.init(_seed:)(v31);
      Namespace.ID.hash(into:)(v31, v19);
      v20 = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = v20 & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) == 0)
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          v27 = v23 == v26;
          if (v23 == v26)
            v23 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v23);
          if (v28 != -1)
          {
            v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v24) = v19;
      ++*(_QWORD *)(v6 + 16);
      if (v10)
        goto LABEL_9;
LABEL_10:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_41;
      if (v16 >= v11)
        goto LABEL_35;
      v17 = v8[v16];
      ++v13;
      if (!v17)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v11)
          goto LABEL_35;
        v17 = v8[v13];
        if (!v17)
        {
          v13 = v16 + 2;
          if (v16 + 2 >= v11)
            goto LABEL_35;
          v17 = v8[v13];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v11)
            {
LABEL_35:
              swift_release(v3);
              v2 = v30;
              v29 = 1 << *(_BYTE *)(v3 + 32);
              if (v29 > 63)
                sub_100605B40(0, (unint64_t)(v29 + 63) >> 6, (_QWORD *)(v3 + 56));
              else
                *v8 = -1 << v29;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v13 >= v11)
                  goto LABEL_35;
                v17 = v8[v13];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v13 = v18;
          }
        }
      }
LABEL_23:
      v10 = (v17 - 1) & v17;
    }
  }
  swift_release(v3);
  *v2 = v6;
}

uint64_t sub_100603308(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for LocationOfInterestType(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_100601EE4();
  }
  else
  {
    if (v12 > v11)
    {
      sub_1006046D4();
      goto LABEL_12;
    }
    sub_100604F84();
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100051B90(&qword_100BC3120, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType, (uint64_t)&protocol conformance descriptor for LocationOfInterestType);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v10, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100051B90(&qword_100BC3140, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType, (uint64_t)&protocol conformance descriptor for LocationOfInterestType);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6, v8);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_10060355C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  _QWORD v15[9];

  v5 = *(_QWORD *)(*v3 + 16);
  v6 = *(_QWORD *)(*v3 + 24);
  if (v6 <= v5 || (a3 & 1) == 0)
  {
    v7 = v5 + 1;
    if ((a3 & 1) != 0)
    {
      sub_1006018C0(v7);
    }
    else
    {
      if (v6 > v5)
      {
        sub_100103F50(&qword_100BF65E0);
        goto LABEL_10;
      }
      sub_100604C6C(v7);
    }
    v8 = *v3;
    Hasher.init(_seed:)(v15);
    sub_1001D854C();
    a2 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v8 + 32));
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v9 = *v13;
  *(_QWORD *)(*v13 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v9 + 48) + a2) = v14;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x1006037D8);
  }
  *(_QWORD *)(v9 + 16) = v12;
}

uint64_t sub_100603814(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for Location(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v12 <= v11 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_100601EE4();
    }
    else
    {
      if (v12 > v11)
      {
        sub_1006046D4();
        goto LABEL_12;
      }
      sub_100604F84();
    }
    v13 = *v3;
    v14 = *(_QWORD *)(*v3 + 40);
    v15 = sub_100051B90(&qword_100BC35B0, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
    v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
    v17 = -1 << *(_BYTE *)(v13 + 32);
    a2 = v16 & ~v17;
    if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v18 = ~v17;
      v19 = *(_QWORD *)(v7 + 72);
      v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
      while (1)
      {
        v20(v10, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
        v21 = sub_100051B90((unint64_t *)&qword_100BC35B8, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
        v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v30, v6, v21);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        if ((v22 & 1) != 0)
          break;
        a2 = (a2 + 1) & v18;
        if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_12;
      }
LABEL_15:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
      __break(1u);
      JUMPOUT(0x100603A68);
    }
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6, v8);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)(v24 + 16) = v28;
  return result;
}

uint64_t sub_100603B08(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for DetailChartCondition(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_100601EE4();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1006046D4();
      goto LABEL_12;
    }
    sub_100604F84();
  }
  v12 = *v3;
  v13 = *(_QWORD *)(*v3 + 40);
  v14 = sub_100051B90(&qword_100BC3598, (uint64_t (*)(uint64_t))&type metadata accessor for DetailChartCondition, (uint64_t)&protocol conformance descriptor for DetailChartCondition);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  v16 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = ~v16;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(_QWORD *)(v12 + 48) + v18 * a2, v6);
      v20 = sub_100051B90((unint64_t *)&qword_100BC35A0, (uint64_t (*)(uint64_t))&type metadata accessor for DetailChartCondition, (uint64_t)&protocol conformance descriptor for DetailChartCondition);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_100603D5C(unsigned __int8 a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v5 = a1;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1006026CC(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100103F50(&qword_100BF67D0);
      goto LABEL_14;
    }
    sub_100605250(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v18);
  Hasher._combine(_:)(v5);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&unk_100B9AA58);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v14 + 48) + a2) = v5;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
}

void sub_100603EB8(unsigned __int8 a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  _QWORD v18[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100602970(v8);
    }
    else
    {
      if (v7 > v6)
      {
        sub_100103F50(&qword_100BF67E0);
        goto LABEL_10;
      }
      sub_1006054C4(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(v18);
    v10 = sub_1004A8B18(a1);
    String.hash(into:)(v18, v10, v11);
    swift_bridgeObjectRelease();
    a2 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v12 = *v16;
  *(_QWORD *)(*v16 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v17;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x100604160);
  }
  *(_QWORD *)(v12 + 16) = v15;
}

void sub_1006041AC(unsigned __int8 a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  _QWORD v18[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100602CCC(v8);
    }
    else
    {
      if (v7 > v6)
      {
        sub_100103F50(&qword_100BF67D8);
        goto LABEL_10;
      }
      sub_1006057EC(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(v18);
    v10 = sub_1004A8BE0(a1);
    String.hash(into:)(v18, v10, v11);
    swift_bridgeObjectRelease();
    a2 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v12 = *v16;
  *(_QWORD *)(*v16 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v17;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x10060449CLL);
  }
  *(_QWORD *)(v12 + 16) = v15;
}

void sub_1006044F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t i;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  sub_1000986AC();
  a19 = v22;
  a20 = v23;
  v24 = v20;
  v25 = type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BF6730);
  v29 = sub_1000F4108();
  if (!v21[2])
  {
LABEL_26:
    sub_100089020();
    *v24 = v29;
    sub_100098640();
    return;
  }
  sub_1000AE994();
  v30 = v21 + 7;
  sub_1000FDBF4();
  if ((_QWORD *)v29 != v21 || v31 >= &v21[v32 + 7])
    memmove(v31, v21 + 7, 8 * v32);
  v34 = 0;
  *(_QWORD *)(v29 + 16) = v21[2];
  sub_1000AE994();
  sub_10009C8F0();
  v37 = v36 & v35;
  v39 = (unint64_t)(v38 + 63) >> 6;
  if ((v36 & v35) == 0)
    goto LABEL_10;
LABEL_9:
  v40 = __clz(__rbit64(v37));
  v37 &= v37 - 1;
  for (i = v40 | (v34 << 6); ; i = v46 + (v34 << 6))
  {
    v47 = *(_QWORD *)(v26 + 72) * i;
    sub_100606FF0(v21[6] + v47, (uint64_t)v28);
    sub_100163844((uint64_t)v28, *(_QWORD *)(v29 + 48) + v47);
    if (v37)
      goto LABEL_9;
LABEL_10:
    v42 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v42 >= v39)
      goto LABEL_26;
    ++v34;
    if (!v30[v42])
    {
      v34 = v42 + 1;
      if (v42 + 1 >= v39)
        goto LABEL_26;
      if (!v30[v34])
      {
        v34 = v42 + 2;
        if (v42 + 2 >= v39)
          goto LABEL_26;
        if (!v30[v34])
          break;
      }
    }
LABEL_23:
    sub_1000DAFF0();
    v37 = v45 & v44;
  }
  v43 = v42 + 3;
  if (v43 >= v39)
    goto LABEL_26;
  if (v30[v43])
  {
    v34 = v43;
    goto LABEL_23;
  }
  while (1)
  {
    v34 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v34 >= v39)
      goto LABEL_26;
    ++v43;
    if (v30[v34])
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

void sub_1006046A8()
{
  sub_100103F50(&qword_100BF67E0);
}

void sub_1006046B4()
{
  sub_100103F50(&qword_100BF67D8);
}

void sub_1006046C0()
{
  sub_1006046D4();
}

void sub_1006046D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  sub_1000986AC();
  v1 = v0;
  v3 = v2(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v27 - v5;
  sub_1000878AC();
  v7 = (_QWORD *)*v0;
  v8 = static _SetStorage.copy(original:)(*v0);
  if (!v7[2])
  {
    sub_1000B439C();
LABEL_28:
    *v1 = v8;
    sub_100098640();
    return;
  }
  v28 = v1;
  sub_1000AE994();
  v9 = v7 + 7;
  sub_1000FDBF4();
  if ((_QWORD *)v8 != v7 || v10 >= &v7[v11 + 7])
    memmove(v10, v7 + 7, 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = v7[2];
  sub_1000AE994();
  sub_10009C8F0();
  v16 = v15 & v14;
  v18 = (unint64_t)(v17 + 63) >> 6;
  if ((v15 & v14) == 0)
    goto LABEL_10;
LABEL_9:
  v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v19 | (v13 << 6); ; i = v25 + (v13 << 6))
  {
    v26 = *(_QWORD *)(v4 + 72) * i;
    sub_100089084((uint64_t)v6, v7[6] + v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
    sub_100089084(*(_QWORD *)(v8 + 48) + v26, (uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    if (v16)
      goto LABEL_9;
LABEL_10:
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v18)
      goto LABEL_26;
    ++v13;
    if (!v9[v21])
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v18)
        goto LABEL_26;
      if (!v9[v13])
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v18)
          goto LABEL_26;
        if (!v9[v13])
          break;
      }
    }
LABEL_23:
    sub_1000DAFF0();
    v16 = v24 & v23;
  }
  v22 = v21 + 3;
  if (v22 >= v18)
  {
LABEL_26:
    sub_1000B439C();
    v1 = v28;
    goto LABEL_28;
  }
  if (v9[v22])
  {
    v13 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v18)
      goto LABEL_26;
    ++v22;
    if (v9[v13])
      goto LABEL_23;
  }
LABEL_30:
  __break(1u);
}

void sub_1006048AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = v0;
  sub_1000BA294(&qword_100BF67F0);
  v4 = sub_1000F4108();
  if (*(_QWORD *)(v1 + 16))
  {
    v5 = (void *)sub_1000BDADC();
    if (v8)
      v9 = (unint64_t)v5 >= v7;
    else
      v9 = 1;
    if (v9)
      sub_10011DF30(v5, v6);
    sub_1000BD5B4();
    if (!v12)
      goto LABEL_10;
LABEL_9:
    sub_100075E34();
    while (1)
    {
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14) = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
      if (v13)
        goto LABEL_9;
LABEL_10:
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v15 >= v10)
        goto LABEL_25;
      if (!*(_QWORD *)(v2 + 8 * v15))
      {
        if (v11 + 2 >= v10)
          goto LABEL_25;
        if (!*(_QWORD *)(v2 + 8 * (v11 + 2)))
        {
          if (v11 + 3 >= v10)
            goto LABEL_25;
          if (!*(_QWORD *)(v2 + 8 * (v11 + 3)))
          {
            v16 = v11 + 4;
            if (v11 + 4 >= v10)
              goto LABEL_25;
            if (!*(_QWORD *)(v2 + 8 * v16))
              break;
          }
        }
      }
LABEL_22:
      sub_10011E494();
    }
    while (1)
    {
      v17 = v16 + 1;
      if (__OFADD__(v16, 1))
        break;
      if (v17 >= v10)
        goto LABEL_25;
      ++v16;
      if (*(_QWORD *)(v2 + 8 * v17))
        goto LABEL_22;
    }
LABEL_27:
    __break(1u);
  }
  else
  {
LABEL_25:
    sub_100089020();
    *v3 = v4;
    sub_100079F70();
  }
}

void sub_1006049AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[72];

  sub_1000986AC();
  v2 = v0;
  v3 = sub_10011E6F0();
  v4 = sub_10011DEDC(v3);
  __chkstk_darwin(v4);
  sub_100094EC4();
  v5 = (_QWORD *)*v0;
  sub_100607174();
  sub_1000BA294(&qword_100BF6730);
  v6 = sub_1000B2F48((uint64_t)v5);
  if (!v5[2])
  {
    sub_1000B439C();
LABEL_35:
    *v2 = v6;
    sub_100098640();
    return;
  }
  sub_1000AE994();
  v31 = v0;
  v32 = v5 + 7;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & v5[7];
  sub_1000FDBF4();
  v33 = v10;
  v11 = v6 + 56;
  swift_retain();
  v12 = 0;
  if (!v9)
    goto LABEL_7;
LABEL_6:
  v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v13 | (v12 << 6); ; i = v19 + (v12 << 6))
  {
    v20 = *(_QWORD *)(v34 + 72);
    sub_100606FF0(v5[6] + v20 * i, (uint64_t)v1);
    sub_10009E434();
    v21 = *v1;
    v22 = v1[1];
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v35, v21, v22);
    sub_100098738();
    v23 = sub_1006071AC();
    v24 = sub_100051B90(&qword_100BC3120, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType, (uint64_t)&protocol conformance descriptor for LocationOfInterestType);
    dispatch thunk of Hashable.hash(into:)(v35, v23, v24);
    v25 = sub_100607144() & ~(-1 << *(_BYTE *)(v6 + 32));
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      sub_1000C567C();
      while (1)
      {
        sub_10060715C();
        if (v30)
        {
          if ((v27 & 1) != 0)
            break;
        }
        if (v28 == v29)
          v28 = 0;
        if (*(_QWORD *)(v11 + 8 * v28) != -1)
        {
          sub_1000C0AF4();
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    sub_1001099F0();
LABEL_31:
    *(_QWORD *)(v11 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    sub_100163844((uint64_t)v1, *(_QWORD *)(v6 + 48) + v26 * v20);
    ++*(_QWORD *)(v6 + 16);
    if (v9)
      goto LABEL_6;
LABEL_7:
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_37;
    if (v15 >= v33)
      goto LABEL_33;
    ++v12;
    if (!v32[v15])
    {
      v12 = v15 + 1;
      if (v15 + 1 >= v33)
        goto LABEL_33;
      if (!v32[v12])
      {
        v12 = v15 + 2;
        if (v15 + 2 >= v33)
          goto LABEL_33;
        if (!v32[v12])
          break;
      }
    }
LABEL_20:
    sub_1000DAFF0();
    v9 = v18 & v17;
  }
  v16 = v15 + 3;
  if (v16 >= v33)
  {
LABEL_33:
    swift_release_n(v5, 2);
    v2 = v31;
    goto LABEL_35;
  }
  if (v32[v16])
  {
    v12 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v12 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v12 >= v33)
      goto LABEL_33;
    ++v16;
    if (v32[v12])
      goto LABEL_20;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_100604C6C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000BA294(&qword_100BF65E0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
    goto LABEL_26;
  }
  v16 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v9 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v9 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v9 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x100604F74);
              }
              if (v12 >= v9)
                break;
              v11 = *(_QWORD *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v17);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  result = swift_release_n(v3, 2);
  v2 = v16;
LABEL_26:
  *v2 = v5;
  return result;
}

void sub_100604F84()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  sub_1000986AC();
  v42 = v1;
  v43 = v2;
  v3 = v0;
  v6 = sub_10060714C(v4, v5);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v39 - v8;
  v10 = *v0;
  sub_100607174();
  sub_100079FD4();
  v11 = (_QWORD *)sub_1000B2F48(v10);
  if (*(_QWORD *)(v10 + 16))
  {
    sub_1000AE994();
    v39 = v0;
    v40 = v10 + 56;
    sub_10009E52C();
    v14 = v13 & v12;
    sub_1000FDBF4();
    v41 = v15;
    v16 = v11 + 7;
    v17 = swift_retain();
    v18 = 0;
    if (!v14)
      goto LABEL_4;
    while (2)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v18 << 6);
LABEL_18:
      v28 = *(_QWORD *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, *(_QWORD *)(v10 + 48) + v28 * v20, v6, v17);
      v29 = v11[5];
      v30 = sub_100607194();
      dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
      sub_100607180();
      if (((v33 << v32) & ~v16[v31]) != 0)
      {
        sub_1001099F0();
        goto LABEL_28;
      }
      sub_1000C567C();
      do
      {
        sub_10060715C();
        if (v38 && (v35 & 1) != 0)
        {
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        if (v36 == v37)
          v36 = 0;
      }
      while (v16[v36] == -1);
      sub_1000C0AF4();
LABEL_28:
      *(_QWORD *)((char *)v16 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11[6] + v34 * v28, v9, v6);
      ++v11[2];
      if (v14)
        continue;
      break;
    }
LABEL_4:
    if (__OFADD__(v18, 1))
      goto LABEL_34;
    if (v18 + 1 < v41)
    {
      sub_1006071A0();
      v18 = v21;
      if (v22)
        goto LABEL_17;
      v18 = v21 + 1;
      if (v21 + 1 < v41)
      {
        if (*(_QWORD *)(v40 + 8 * v18))
          goto LABEL_17;
        v18 = v21 + 2;
        if (v21 + 2 < v41)
        {
          if (*(_QWORD *)(v40 + 8 * v18))
            goto LABEL_17;
          if (v21 + 3 < v41)
          {
            sub_1006071A0();
            if (v24)
            {
              v18 = v23;
LABEL_17:
              sub_1000DAFF0();
              v14 = v26 & v25;
              v20 = v27 + (v18 << 6);
              goto LABEL_18;
            }
            while (1)
            {
              v18 = v23 + 1;
              if (__OFADD__(v23, 1))
                break;
              if (v18 >= v41)
                goto LABEL_30;
              ++v23;
              if (*(_QWORD *)(v40 + 8 * v18))
                goto LABEL_17;
            }
LABEL_35:
            __break(1u);
            JUMPOUT(0x100605200);
          }
        }
      }
    }
LABEL_30:
    swift_release_n(v10, 2);
    v3 = v39;
  }
  else
  {
    swift_release(v10);
  }
  *v3 = (uint64_t)v11;
  sub_100098640();
}

void sub_100605250(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000BA294(&qword_100BF67D0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_37:
    *v2 = v6;
    return;
  }
  v29 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v5 + 56;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    v19 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + i);
    Hasher.init(_seed:)(v30);
    Hasher._combine(_:)(v19);
    v20 = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) == 0)
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      while (++v23 != v26 || (v25 & 1) == 0)
      {
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v23);
        if (v28 != -1)
        {
          v24 = __clz(__rbit64(~v28)) + (v23 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v24) = v19;
    ++*(_QWORD *)(v6 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_39;
    if (v16 >= v12)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v12)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v12)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v7);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_35:
    swift_release(v3);
    v2 = v29;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v12)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
}

void sub_1006054C4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000BA294(&qword_100BF67E0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
    goto LABEL_26;
  }
  v15 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v9 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v9 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v9 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x1006057D4);
              }
              if (v12 >= v9)
                break;
              v11 = *(_QWORD *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v16);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release_n(v3, 2);
  v2 = v15;
LABEL_26:
  *v2 = v5;
}

void sub_1006057EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000BA294(&qword_100BF67D8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
    goto LABEL_26;
  }
  v15 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v9 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v9 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v9 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x100605B20);
              }
              if (v12 >= v9)
                break;
              v11 = *(_QWORD *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v16);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release_n(v3, 2);
  v2 = v15;
LABEL_26:
  *v2 = v5;
}

uint64_t sub_100605B40(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void sub_100605B5C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605B90()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605BC4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605BF8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605C2C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

char *sub_100605C60(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100606494(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_100605C7C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605CB0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10001B80C();
  *v0 = v1;
}

void sub_100605CE4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605D18()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605D4C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605D80()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605DB4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10003709C();
  *v0 = v1;
}

void sub_100605DE8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000AD084();
  *v0 = v1;
}

void sub_100605E14()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

char *sub_100605E48(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_1006065D0(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_100605E64(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_1006066B8(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_100605E80(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100606798(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_100605E9C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605ED0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605F04()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605F38()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605F6C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100605FA0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10003709C();
  *v0 = v1;
}

void sub_100605FD4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100606008()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006068F0();
  *v0 = v1;
}

void sub_100606034()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006068F0();
  *v0 = v1;
}

void sub_100606060()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100606094()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_1006060C8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006068F0();
  *v0 = v1;
}

void sub_1006060F4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006068F0();
  *v0 = v1;
}

void sub_100606120()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10009AAE4();
  *v0 = v1;
}

void sub_100606154()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100606188()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10003709C();
  *v0 = v1;
}

void sub_1006061BC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10003709C();
  *v0 = v1;
}

void sub_1006061F0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100606A20();
  *v0 = v1;
}

void sub_100606224()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100606258()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

char *sub_10060628C(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100606ADC(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_1006062A8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_1006062DC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100606310()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100606344()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_100606378()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_1006063AC()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(_QWORD);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1000986AC();
  sub_1000D1950();
  if ((v7 & 1) != 0)
  {
    sub_1000DD15C();
    if (v11 != v12)
    {
      sub_1000C572C();
      if (v11)
      {
LABEL_23:
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  else
  {
    v10 = v6;
  }
  if (v10 <= *(_QWORD *)(v0 + 16))
    v13 = *(_QWORD *)(v0 + 16);
  else
    v13 = v10;
  if (!v13)
    goto LABEL_17;
  sub_1000DBBEC(v5, v6, v7, v8, v9);
  v14 = v2(0);
  v15 = (const void *)sub_1000DC490(v14);
  j__malloc_size(v15);
  if (!v4)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sub_10011E044();
  v17 = v17 && v4 == -1;
  if (v17)
    goto LABEL_22;
  sub_1000C22C4(v16 / v4);
LABEL_17:
  v18 = v2(0);
  v19 = sub_10009EEB0(v18);
  if ((v3 & 1) != 0)
  {
    sub_100600708(v19, v20);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v19);
  }
  sub_10009925C();
  sub_100098640();
}

void sub_100606478()
{
  sub_10003709C();
}

char *sub_100606494(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000BA294(&qword_100BF6810);
    v11 = (char *)swift_allocObject(v10, 80 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 80);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    sub_1006001E8((char *)(a4 + 32), v8, v11 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10025E3E4();
  }
  swift_release(a4);
  return v11;
}

void sub_10060657C()
{
  sub_10003709C();
}

void sub_100606598()
{
  sub_1000ADEA8();
}

void sub_1006065B4()
{
  sub_100606A20();
}

char *sub_1006065D0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000BA294(&qword_100BF66A0);
    v11 = (char *)swift_allocObject(v10, 120 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 120);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    sub_1006003CC((char *)(a4 + 32), v8, v11 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10025E6F0();
  }
  swift_release(a4);
  return v11;
}

char *sub_1006066B8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000BA294(&qword_100BCB968);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10011FE34(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10025E78C((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release(a4);
  return v11;
}

char *sub_100606798(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000BA294(&qword_100BF6568);
    v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    sub_1006004B4((char *)(a4 + 32), v8, v11 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10025E81C();
  }
  swift_release(a4);
  return v11;
}

void sub_100606880()
{
  sub_1006063AC();
}

void sub_10060689C()
{
  sub_1006063AC();
}

void sub_1006068B8()
{
  sub_1006063AC();
}

void sub_1006068D4()
{
  sub_10003709C();
}

void sub_1006068F0()
{
  uint64_t v0;
  void (*v1)(char *, uint64_t, char *);
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;

  sub_1000F44F0();
  if ((v5 & 1) != 0)
  {
    sub_1000DD15C();
    if (v6 != v7)
    {
      sub_1000C572C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  sub_100607134();
  if (v4)
  {
    v13 = sub_1000DBBEC(v8, v9, v10, v11, v12);
    v14 = (char *)sub_100098740(v13, 24 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_1000B32B8(v15 - 32);
  }
  else
  {
    v14 = (char *)_swiftEmptyArrayStorage;
  }
  v16 = v14 + 32;
  v17 = (char *)(v0 + 32);
  if ((v2 & 1) != 0)
  {
    sub_100600618(v17, v3, v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v17, v3, v16);
  }
  sub_10009925C();
  sub_10004A2A0();
}

void sub_100606994()
{
  sub_1006063AC();
}

void sub_1006069B0()
{
  sub_1006063AC();
}

void sub_1006069CC()
{
  sub_1006063AC();
}

void sub_1006069E8()
{
  sub_1006063AC();
}

void sub_100606A04()
{
  sub_1006063AC();
}

void sub_100606A20()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;

  sub_1000D1950();
  if ((v5 & 1) != 0)
  {
    sub_1000DD15C();
    if (v6 != v7)
    {
      sub_1000C572C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  sub_1000C179C();
  if (v4)
  {
    v13 = sub_1000DBBEC(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_100098740(v13, 32 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_1000C22C4((uint64_t)(v15 - 32) / 32);
  }
  v16 = sub_1000FC4F8();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  sub_10009925C();
  sub_10004A2A0();
}

void sub_100606AC0()
{
  sub_1006063AC();
}

char *sub_100606ADC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000BA294(&qword_100BF6468);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    sub_10011FDD8((char *)(a4 + 32), v8, v11 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10025EC38();
  }
  swift_release();
  return v11;
}

uint64_t sub_100606BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[9] = a2;
  v4[10] = a4;
  v4[8] = a1;
  v4[5] = type metadata accessor for LocalSearchRequestManager();
  v4[6] = &off_100B8B840;
  v4[2] = a3;
  swift_retain();
  return swift_task_switch(sub_100606C24, 0, 0);
}

uint64_t sub_100606C24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[8];
  v4 = (_QWORD *)swift_task_alloc(48);
  v0[11] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  v4[5] = v0 + 2;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[12] = v5;
  sub_1000BA294(qword_100BF64D8);
  *v5 = v0;
  v5[1] = sub_100606CE4;
  sub_10003BC90();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_100606CE4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *v0;
  v1 = *(_QWORD *)(v3 + 88);
  sub_100089168(&v3);
  swift_task_dealloc(v1);
  sub_10003BC90();
  return sub_1000BA3F4();
}

uint64_t sub_100606D30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

unint64_t sub_100606D6C()
{
  unint64_t result;

  result = qword_100BF64A8;
  if (!qword_100BF64A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntityQuery, &type metadata for LocationSearchEntityQuery);
    atomic_store(result, (unint64_t *)&qword_100BF64A8);
  }
  return result;
}

unint64_t sub_100606DAC()
{
  unint64_t result;

  result = qword_100BF64B0[0];
  if (!qword_100BF64B0[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntityQuery, &type metadata for LocationSearchEntityQuery);
    atomic_store(result, qword_100BF64B0);
  }
  return result;
}

unint64_t sub_100606DF0()
{
  unint64_t result;

  result = qword_100BF64C8;
  if (!qword_100BF64C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntityQuery, &type metadata for LocationSearchEntityQuery);
    atomic_store(result, (unint64_t *)&qword_100BF64C8);
  }
  return result;
}

unint64_t sub_100606E30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF64D0;
  if (!qword_100BF64D0)
  {
    v1 = sub_100075EB0(qword_100BF64D8);
    sub_1001FD248();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BF64D0);
  }
  return result;
}

void sub_100606E98(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100079F70();
}

uint64_t *assignWithCopy for LocationSearchEntityQuery(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationViewRowViewModel(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationViewRowViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationSearchEntityQuery()
{
  return &type metadata for LocationSearchEntityQuery;
}

ValueMetadata *type metadata accessor for LocationSearchEntityQuery.ComparatorMappingType()
{
  return &type metadata for LocationSearchEntityQuery.ComparatorMappingType;
}

uint64_t sub_100606FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100607034(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100607070@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = LocationSearchEntity.$name.getter();
  *a1 = result;
  return result;
}

unint64_t sub_1006070B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF6758;
  if (!qword_100BF6758)
  {
    v1 = sub_100075EB0(&qword_100BC28D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for EntityProperty<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF6758);
  }
  return result;
}

double sub_1006070F4(uint64_t a1)
{
  uint64_t v1;

  return sub_10066768C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40));
}

void sub_100607104()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

double sub_100607114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;
  double result;

  v11 = *v10;
  *v10 = a10;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  return result;
}

uint64_t sub_100607124()
{
  return LocationEntity.name.getter();
}

Swift::Int sub_100607144()
{
  return Hasher._finalize()();
}

uint64_t sub_10060714C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a2;
  return a2(0);
}

uint64_t sub_100607168()
{
  _QWORD *v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0);
}

uint64_t sub_100607194()
{
  uint64_t v0;

  return sub_100051B90(*(unint64_t **)(v0 - 96), *(uint64_t (**)(uint64_t))(v0 - 104), *(_QWORD *)(v0 - 88));
}

uint64_t sub_1006071AC()
{
  return type metadata accessor for LocationOfInterestType(0);
}

void sub_1006071B4(char a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[32];

  v93 = a3;
  v5 = type metadata accessor for TipPriorityQueue.GridEntry(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v92 = v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  v91 = (uint64_t)&v68 - v9;
  sub_10009D2A4();
  __chkstk_darwin(v10);
  v90 = (uint64_t)&v68 - v11;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v68 - v20;
  sub_1000BA294(&qword_100BCC760);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000986FC();
  v89 = v23;
  sub_10009D2A4();
  __chkstk_darwin(v24);
  v26 = (char *)&v68 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v68 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v68 - v31;
  if (a1)
  {
    if (a1 == 1)
    {
      if ((a2 & 1) != 0)
      {
        v33 = &qword_100BF6C50;
        goto LABEL_11;
      }
    }
    else if ((a2 & 1) != 0)
    {
      v33 = &qword_100BF7060;
      goto LABEL_11;
    }
    v33 = &qword_100BF6E58;
  }
  else if ((a2 & 1) != 0)
  {
    v33 = &qword_100BF6840;
  }
  else
  {
    v33 = &qword_100BF6A48;
  }
LABEL_11:
  v34 = *((_BYTE *)v33 + 224);
  v76 = *v33;
  v75 = v33[1];
  v74 = v33[2];
  v73 = v33[3];
  v35 = v33[8];
  v79 = v33[9];
  v80 = v35;
  v36 = v33[10];
  v77 = v33[11];
  v78 = v36;
  v37 = v33[24];
  v72 = v33[25];
  v71 = v33[26];
  v70 = v33[27];
  v38 = v33[53];
  v83 = v33[54];
  v84 = v38;
  v39 = v33[55];
  v81 = v33[56];
  v82 = v39;
  v40 = v33[61];
  v87 = v33[62];
  v88 = v40;
  v41 = v93 + OBJC_IVAR____TtCV7Weather20NhpMinorAlertContent8_Storage_map;
  v43 = v33[63];
  v42 = v33[64];
  v85 = v43;
  v86 = v42;
  sub_1000992EC(v93 + OBJC_IVAR____TtCV7Weather20NhpMinorAlertContent8_Storage_map, (uint64_t)v94);
  sub_10003773C(v41, v15, &qword_100BC4A98);
  v44 = sub_1000878BC();
  if (_s7Weather24LocationCompositionStateOwet_0(v15, 1, v44) == 1)
  {
    sub_100021A14(v15, &qword_100BC4A98);
LABEL_16:
    v45 = 1;
    goto LABEL_17;
  }
  v69 = v37;
  sub_10009D3BC(v15 + *(int *)(v44 + 20), (uint64_t)v18);
  sub_1000215BC(v15, type metadata accessor for LocationComponentContainerViewModel);
  sub_10007C77C((uint64_t)v18, (uint64_t)v21, type metadata accessor for LocationComponentViewModel);
  if ((v34 & 1) != 0)
  {
    sub_1000215BC((uint64_t)v21, type metadata accessor for LocationComponentViewModel);
    goto LABEL_16;
  }
  sub_10007C77C((uint64_t)v21, (uint64_t)v29, type metadata accessor for LocationComponentViewModel);
  v45 = 0;
  v46 = &v29[*(int *)(v5 + 20)];
  v47 = v72;
  *(_QWORD *)v46 = v69;
  *((_QWORD *)v46 + 1) = v47;
  v48 = v70;
  *((_QWORD *)v46 + 2) = v71;
  *((_QWORD *)v46 + 3) = v48;
LABEL_17:
  sub_1000988B8((uint64_t)v29, v45);
  sub_1002228F0((uint64_t)v29, (uint64_t)v32);
  sub_10009D3BC(v93 + *(int *)(v44 + 20) + OBJC_IVAR____TtCV7Weather20NhpMinorAlertContent8_Storage_airQuality, (uint64_t)v26);
  v49 = &v26[*(int *)(v5 + 20)];
  v50 = v75;
  *(_QWORD *)v49 = v76;
  *((_QWORD *)v49 + 1) = v50;
  v51 = v73;
  *((_QWORD *)v49 + 2) = v74;
  *((_QWORD *)v49 + 3) = v51;
  sub_1000988B8((uint64_t)v26, 0);
  v52 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast);
  v53 = v90;
  sub_10009D3BC(v52, v90);
  v54 = (uint64_t *)(v53 + *(int *)(v5 + 20));
  v55 = v79;
  *v54 = v80;
  v54[1] = v55;
  v56 = v77;
  v54[2] = v78;
  v54[3] = v56;
  v57 = v89;
  sub_10003773C((uint64_t)v32, v89, &qword_100BCC760);
  v58 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
  v59 = v91;
  sub_10009D3BC(v58, v91);
  v60 = (uint64_t *)(v59 + *(int *)(v5 + 20));
  v61 = v83;
  *v60 = v84;
  v60[1] = v61;
  v62 = v81;
  v60[2] = v82;
  v60[3] = v62;
  v63 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
  v64 = v92;
  sub_10009D3BC(v63, v92);
  v65 = (uint64_t *)(v64 + *(int *)(v5 + 20));
  v66 = v87;
  *v65 = v88;
  v65[1] = v66;
  v67 = v86;
  v65[2] = v85;
  v65[3] = v67;
  sub_10087CED0((uint64_t)v26, v53, v57, v59, v64);
  sub_100021A14((uint64_t)v32, &qword_100BCC760);
  sub_100098640();
}

void sub_1006076A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  __n128 *v79;
  uint64_t v80;
  uint64_t v81;
  __n128 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __n128 *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __n128 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __n128 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  _BYTE v137[24];

  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v6 = sub_1000878BC();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098728();
  v10 = v9 - v8;
  v11 = a1;
  v12 = a1 + OBJC_IVAR____TtCV7Weather20NhpMinorAlertContent8_Storage_map;
  sub_1000992EC(a1 + OBJC_IVAR____TtCV7Weather20NhpMinorAlertContent8_Storage_map, (uint64_t)v137);
  sub_10003773C(v12, v5, &qword_100BC4A98);
  if (_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6) == 1)
  {
    sub_100021A14(v5, &qword_100BC4A98);
    v13 = sub_1000BA294(&qword_100BCC750);
    v14 = swift_allocObject(v13, 272, 7);
    *(_OWORD *)(v14 + 16) = xmmword_10097FA60;
    v15 = sub_1000BA294(&qword_100BCC758);
    v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v17 = v16 + *(_QWORD *)(v7 + 72);
    v18 = *(_QWORD *)(v7 + 72);
    v19 = v15;
    v20 = (__n128 *)sub_1000C2514(v15, v17);
    v21 = sub_100099954(v20, (__n128)xmmword_10097CA50);
    v22 = v11;
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather20NhpMinorAlertContent8_Storage_nextHourPrecipitation, (uint64_t)v21 + v16);
    *(_QWORD *)(v14 + 32) = sub_1000B4580();
    *(_QWORD *)(v14 + 40) = v23;
    *(_QWORD *)(v14 + 48) = v24;
    v25 = (__n128 *)sub_1000C2514(v19, v17);
    sub_1000BD314(v25);
    sub_10009D3BC(v26 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v27);
    *(_QWORD *)(v14 + 56) = sub_1000B4580();
    *(_QWORD *)(v14 + 64) = v28;
    *(_QWORD *)(v14 + 72) = v29;
    v30 = (__n128 *)sub_1000C2514(v19, v17);
    sub_1000BD314(v30);
    sub_10009D3BC(v31 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v32);
    *(_QWORD *)(v14 + 80) = sub_1000B4580();
    *(_QWORD *)(v14 + 88) = v33;
    *(_QWORD *)(v14 + 96) = v34;
    v35 = sub_1000C2514(v19, v17);
    *(_OWORD *)(v35 + 16) = v136;
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather20NhpMinorAlertContent8_Storage_airQuality, v35 + v16);
    *(_QWORD *)(v14 + 104) = sub_1000B4580();
    *(_QWORD *)(v14 + 112) = v36;
    *(_QWORD *)(v14 + 120) = v37;
    v38 = sub_1000C2514(v19, v17);
    *(_OWORD *)(v38 + 16) = v136;
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather20NhpMinorAlertContent8_Storage_severeAlert, v38 + v16);
    *(_QWORD *)(v14 + 128) = sub_100080C44(v38);
    *(_QWORD *)(v14 + 136) = v39;
    *(_QWORD *)(v14 + 144) = v40;
    v41 = v18;
    v133 = v16 + 2 * v18;
    v42 = (__n128 *)sub_1000C2514(v19, v133);
    v43 = (char *)sub_100099954(v42, (__n128)xmmword_10097DA20) + v16;
    v44 = *(_QWORD *)(v11 + 16);
    v45 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
    sub_1000C3608(v45, v46);
    sub_1000C3608(v44 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v43[v41]);
    *(_QWORD *)(v14 + 152) = sub_1000B4580();
    *(_QWORD *)(v14 + 160) = v47;
    *(_QWORD *)(v14 + 168) = v48;
    v49 = (__n128 *)sub_1000C2514(v19, v133);
    sub_100098A24(v49);
    v132 = v22;
    v50 = *(_QWORD *)(v22 + 16);
    v51 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
    sub_10008611C(v51, v52);
    sub_10008611C(v50 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v43[v41]);
    *(_QWORD *)(v14 + 176) = sub_1000B4580();
    *(_QWORD *)(v14 + 184) = v53;
    *(_QWORD *)(v14 + 192) = v54;
    v55 = (__n128 *)sub_1000C2514(v19, v133);
    sub_100098A24(v55);
    v56 = *(_QWORD *)(v22 + 16);
    v57 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike);
    sub_1000C3608(v57, v58);
    sub_100095B78(v56 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v43[v41], type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v14 + 200) = sub_1000B4580();
    *(_QWORD *)(v14 + 208) = v59;
    *(_QWORD *)(v14 + 216) = v60;
    v61 = (__n128 *)sub_1000C2514(v19, v133);
    sub_100098A24(v61);
    v62 = *(_QWORD *)(v22 + 16);
    v63 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility);
    sub_100098A1C(v63, v64);
    sub_100098A1C(v62 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v43[v41]);
    *(_QWORD *)(v14 + 224) = sub_1000B4580();
    *(_QWORD *)(v14 + 232) = v65;
    *(_QWORD *)(v14 + 240) = v66;
    v67 = sub_1000C2514(v19, v133);
    *(_OWORD *)(v67 + 16) = v136;
    v68 = *(_QWORD *)(v132 + 16);
    sub_100098A1C(v68 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v67 + v16);
    sub_100098A1C(v68 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v67 + v16 + v41);
    *(_QWORD *)(v14 + 248) = sub_100080C44(v67);
    *(_QWORD *)(v14 + 256) = v69;
    *(_QWORD *)(v14 + 264) = v70;
  }
  else
  {
    sub_10007C77C(v5, v10, type metadata accessor for LocationComponentContainerViewModel);
    v71 = sub_1000BA294(&qword_100BCC750);
    v72 = swift_allocObject(v71, 296, 7);
    *(_OWORD *)(v72 + 16) = xmmword_100989890;
    v73 = sub_1000BA294(&qword_100BCC758);
    v135 = *(_QWORD *)(v7 + 72);
    v74 = *(unsigned __int8 *)(v7 + 80);
    v75 = (v74 + 32) & ~v74;
    v76 = v74 | 7;
    v77 = v73;
    v78 = (__n128 *)sub_1000C3600(v73, v75 + v135);
    v79 = sub_100099954(v78, (__n128)xmmword_10097CA50);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather20NhpMinorAlertContent8_Storage_nextHourPrecipitation, (uint64_t)v79 + v75);
    *(_QWORD *)(v72 + 32) = sub_1000B4588();
    *(_QWORD *)(v72 + 40) = v80;
    *(_QWORD *)(v72 + 48) = v81;
    v82 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v82);
    sub_1000B4590(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v84);
    *(_QWORD *)(v72 + 56) = sub_1000B4588();
    *(_QWORD *)(v72 + 64) = v85;
    *(_QWORD *)(v72 + 72) = v86;
    v87 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v87);
    sub_1000B4590(v88 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v89);
    *(_QWORD *)(v72 + 80) = sub_1000B4588();
    *(_QWORD *)(v72 + 88) = v90;
    *(_QWORD *)(v72 + 96) = v91;
    v92 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v92);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather20NhpMinorAlertContent8_Storage_airQuality, v93);
    *(_QWORD *)(v72 + 104) = sub_1000B4588();
    *(_QWORD *)(v72 + 112) = v94;
    *(_QWORD *)(v72 + 120) = v95;
    v96 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v96);
    sub_1000B4590(v10, v97);
    *(_QWORD *)(v72 + 128) = sub_1000B4588();
    *(_QWORD *)(v72 + 136) = v98;
    *(_QWORD *)(v72 + 144) = v99;
    v100 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v100);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather20NhpMinorAlertContent8_Storage_severeAlert, v101);
    *(_QWORD *)(v72 + 152) = sub_1000B4580();
    *(_QWORD *)(v72 + 160) = v102;
    *(_QWORD *)(v72 + 168) = v103;
    v134 = v75 + 2 * v135;
    v104 = (__n128 *)swift_allocObject(v77, v134, v76);
    v105 = (char *)sub_100099954(v104, (__n128)xmmword_10097DA20) + v75;
    v106 = *(_QWORD *)(a1 + 16);
    v107 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
    sub_1000C3608(v107, v108);
    sub_1000C3608(v106 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v105[v135]);
    *(_QWORD *)(v72 + 176) = sub_1000B4588();
    *(_QWORD *)(v72 + 184) = v109;
    *(_QWORD *)(v72 + 192) = v110;
    v111 = (__n128 *)sub_1000C3600(v77, v134);
    sub_1000C0D34(v111);
    v112 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
    sub_100098A1C(v112, v113);
    sub_100098A1C(v106 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v105[v135]);
    *(_QWORD *)(v72 + 200) = sub_1000B4588();
    *(_QWORD *)(v72 + 208) = v114;
    *(_QWORD *)(v72 + 216) = v115;
    v116 = (__n128 *)sub_1000C3600(v77, v134);
    sub_1000C0D34(v116);
    v117 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike);
    sub_1000C3608(v117, v118);
    sub_1000C3608(v106 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v105[v135]);
    *(_QWORD *)(v72 + 224) = sub_1000B4588();
    *(_QWORD *)(v72 + 232) = v119;
    *(_QWORD *)(v72 + 240) = v120;
    v121 = sub_1000C3600(v77, v134);
    *(_OWORD *)(v121 + 16) = v136;
    v122 = v121 + v75;
    v123 = *(_QWORD *)(a1 + 16);
    v124 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility);
    sub_10008611C(v124, v125);
    sub_10008611C(v123 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, v122 + v135);
    *(_QWORD *)(v72 + 248) = sub_1000B4588();
    *(_QWORD *)(v72 + 256) = v126;
    *(_QWORD *)(v72 + 264) = v127;
    v128 = sub_1000C3600(v77, v134);
    *(_OWORD *)(v128 + 16) = v136;
    v129 = *(_QWORD *)(a1 + 16);
    sub_100095B78(v129 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v128 + v75, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v129 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v128 + v75 + v135, type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v72 + 272) = sub_100080C44(v128);
    *(_QWORD *)(v72 + 280) = v130;
    *(_QWORD *)(v72 + 288) = v131;
    sub_1000215BC(v10, type metadata accessor for LocationComponentContainerViewModel);
  }
  sub_100098640();
}

void sub_100607E7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_1000878BC();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000986FC();
  v20 = v4;
  sub_10009D2A4();
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v19 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100098728();
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  v16 = *(_QWORD *)(a1 + 16);
  swift_retain();
  sub_100520630();
  v19 = v17;
  swift_release(v16);
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather34LocationNhpMinorAlertConfiguration8_Storage_map);
  sub_1000BD32C();
  sub_1000C5218();
  _s7Weather24LocationCompositionStateOwst_0(v15, 0, 1, v2);
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather34LocationNhpMinorAlertConfiguration8_Storage_airQuality);
  sub_1000BD32C();
  sub_1000C5218();
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather34LocationNhpMinorAlertConfiguration8_Storage_nextHourPrecipitation);
  sub_1000BD32C();
  sub_1000C5218();
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather34LocationNhpMinorAlertConfiguration8_Storage_severeAlert);
  v18 = v20;
  sub_1000BD32C();
  sub_1000C5218();
  sub_1001EBBC0(v19, v15, v10, v8, v18);
  sub_100098640();
}

uint64_t sub_100608024(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t *v3;
  int v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, char *, uint64_t, __n128);
  __n128 v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  void *v99;
  const void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  uint64_t *v137;

  v3 = a2;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    v13 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v7 = a3[8];
    v8 = (char *)(a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = (int *)type metadata accessor for ListLocationViewModel(0);
    v136 = v6;
    v137 = v3;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, (uint64_t)v10))
    {
      v11 = sub_1000BA294(&qword_100BE5568);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v14 = type metadata accessor for LocationModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v8, v9, v14);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      v21 = *((_QWORD *)v20 + 1);
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *((_QWORD *)v19 + 1) = v21;
      v22 = v10[7];
      v23 = &v8[v22];
      v24 = &v9[v22];
      v25 = type metadata accessor for ListLocationRowPrimaryText(0);
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload(v24) == 1)
      {
        v26 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v26))
        {
          v27 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
          v28 = 1;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
          v28 = 1;
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v26);
        }
      }
      else
      {
        v29 = *((_QWORD *)v24 + 1);
        *(_QWORD *)v23 = *(_QWORD *)v24;
        *((_QWORD *)v23 + 1) = v29;
        swift_bridgeObjectRetain();
        v28 = 0;
      }
      swift_storeEnumTagMultiPayload(v23, v25, v28);
      v30 = v10[8];
      v31 = &v8[v30];
      v32 = &v9[v30];
      v33 = *(_QWORD *)v32;
      v34 = *((_QWORD *)v32 + 1);
      v35 = *((_QWORD *)v32 + 2);
      v36 = *((_QWORD *)v32 + 3);
      v37 = (uint64_t)v8;
      v38 = v32[32];
      sub_100176D88(*(_QWORD *)v32, v34, v35, v36, v38);
      *(_QWORD *)v31 = v33;
      *((_QWORD *)v31 + 1) = v34;
      *((_QWORD *)v31 + 2) = v35;
      *((_QWORD *)v31 + 3) = v36;
      v31[32] = v38;
      *(_BYTE *)(v37 + v10[9]) = v9[v10[9]];
      v39 = v10[10];
      v40 = (void *)(v37 + v39);
      v41 = &v9[v39];
      v42 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v42))
      {
        v43 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v40, 0, 1, v42);
      }
      v44 = v10[11];
      v45 = (void *)(v37 + v44);
      v46 = &v9[v44];
      v47 = type metadata accessor for TimeZone(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v47))
      {
        v48 = sub_1000BA294(&qword_100BCCC50);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v47);
      }
      v49 = v10[12];
      v50 = (_QWORD *)(v37 + v49);
      v51 = &v9[v49];
      v134 = *((_QWORD *)v51 + 1);
      *v50 = *(_QWORD *)v51;
      v50[1] = v134;
      v52 = v10[13];
      v53 = (_QWORD *)(v37 + v52);
      v54 = &v9[v52];
      v133 = *((_QWORD *)v54 + 1);
      *v53 = *(_QWORD *)v54;
      v53[1] = v133;
      *(_BYTE *)(v37 + v10[14]) = v9[v10[14]];
      v55 = v10[15];
      v56 = (_QWORD *)(v37 + v55);
      v57 = &v9[v55];
      v132 = *((_QWORD *)v57 + 1);
      *v56 = *(_QWORD *)v57;
      v56[1] = v132;
      v58 = v10[16];
      v59 = (_QWORD *)(v37 + v58);
      v60 = &v9[v58];
      v131 = *((_QWORD *)v60 + 1);
      *v59 = *(_QWORD *)v60;
      v59[1] = v131;
      v61 = v10[17];
      v62 = (_QWORD *)(v37 + v61);
      v63 = &v9[v61];
      v64 = *((_QWORD *)v63 + 1);
      *v62 = *(_QWORD *)v63;
      v62[1] = v64;
      v65 = v10[18];
      v66 = (_QWORD *)(v37 + v65);
      v67 = &v9[v65];
      v68 = *((_QWORD *)v67 + 1);
      *v66 = *(_QWORD *)v67;
      v66[1] = v68;
      v69 = v10[19];
      v70 = (_QWORD *)(v37 + v69);
      v71 = &v9[v69];
      v72 = *((_QWORD *)v71 + 1);
      *v70 = *(_QWORD *)v71;
      v70[1] = v72;
      v73 = v10[20];
      v74 = (_QWORD *)(v37 + v73);
      v75 = &v9[v73];
      v76 = *((_QWORD *)v75 + 1);
      *v74 = *(_QWORD *)v75;
      v74[1] = v76;
      *(_BYTE *)(v37 + v10[21]) = v9[v10[21]];
      v77 = v10[22];
      v129 = &v9[v77];
      v130 = v37 + v77;
      v78 = type metadata accessor for WeatherConditionBackgroundModel(0);
      v79 = *(void (**)(uint64_t, char *, uint64_t, __n128))(*(_QWORD *)(v78 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v80 = swift_bridgeObjectRetain();
      v79(v130, v129, v78, v80);
      *(_BYTE *)(v37 + v10[23]) = v9[v10[23]];
      *(_BYTE *)(v37 + v10[24]) = v9[v10[24]];
      v81 = v10[25];
      v82 = (_QWORD *)(v37 + v81);
      v83 = &v9[v81];
      v84 = *((_QWORD *)v83 + 1);
      *v82 = *(_QWORD *)v83;
      v82[1] = v84;
      *(_QWORD *)(v37 + v10[26]) = *(_QWORD *)&v9[v10[26]];
      swift_bridgeObjectRetain();
      _s7Weather24LocationCompositionStateOwst_0(v37, 0, 1, (uint64_t)v10);
      v6 = v136;
      v3 = v137;
    }
    v85 = v6[10];
    *(_QWORD *)(a1 + v6[9]) = *(uint64_t *)((char *)v3 + v6[9]);
    v86 = (_QWORD *)(a1 + v85);
    v87 = (uint64_t *)((char *)v3 + v85);
    v88 = v87[1];
    *v86 = *v87;
    v86[1] = v88;
    v89 = v6[11];
    v90 = v6[12];
    v91 = (_QWORD *)(a1 + v89);
    v92 = (uint64_t *)((char *)v3 + v89);
    v93 = v92[1];
    *v91 = *v92;
    v91[1] = v93;
    *(_BYTE *)(a1 + v90) = *((_BYTE *)v3 + v90);
    v94 = v6[13];
    v135 = a1;
    v95 = a1 + v94;
    v96 = (uint64_t)v3 + v94;
    *(_BYTE *)v95 = *(_BYTE *)v96;
    *(_QWORD *)(v95 + 8) = *(_QWORD *)(v96 + 8);
    v97 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v98 = v97[6];
    v99 = (void *)(v95 + v98);
    v100 = (const void *)(v96 + v98);
    v101 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v100, 1, v101))
    {
      v102 = sub_1000BA294(&qword_100BD4280);
      memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v99, v100, v101);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v99, 0, 1, v101);
    }
    v103 = v97[7];
    v104 = (_QWORD *)(v95 + v103);
    v105 = (_QWORD *)(v96 + v103);
    v106 = v105[1];
    *v104 = *v105;
    v104[1] = v106;
    *(_QWORD *)(v95 + v97[8]) = *(_QWORD *)(v96 + v97[8]);
    v107 = v136[15];
    v13 = v135;
    *(_QWORD *)(v135 + v136[14]) = *(uint64_t *)((char *)v137 + v136[14]);
    *(_BYTE *)(v135 + v107) = *((_BYTE *)v137 + v107);
    v108 = v136[16];
    v109 = v136[17];
    v110 = (_QWORD *)(v135 + v108);
    v111 = (uint64_t *)((char *)v137 + v108);
    v112 = v111[1];
    *v110 = *v111;
    v110[1] = v112;
    *(_BYTE *)(v135 + v109) = *((_BYTE *)v137 + v109);
    v113 = v136[19];
    *(_BYTE *)(v135 + v136[18]) = *((_BYTE *)v137 + v136[18]);
    v114 = (_QWORD *)(v135 + v113);
    v115 = (uint64_t *)((char *)v137 + v113);
    v116 = type metadata accessor for ContentStatusBanner(0);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v115, 1, v116))
    {
      v117 = sub_1000BA294(&qword_100BC3620);
      memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    }
    else
    {
      *(_BYTE *)v114 = *(_BYTE *)v115;
      v118 = v115 + 1;
      v119 = v115[2];
      if (v119 >= 2)
      {
        v114[1] = *v118;
        v114[2] = v119;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v114 + 1) = *(_OWORD *)v118;
      }
      v120 = *(int *)(v116 + 24);
      v121 = (char *)v114 + v120;
      v122 = (char *)v115 + v120;
      v123 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v122, 1, v123))
      {
        v124 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 16))(v121, v122, v123);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v121, 0, 1, v123);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v114, 0, 1, v116);
    }
    v125 = v136[21];
    *(_BYTE *)(v135 + v136[20]) = *((_BYTE *)v137 + v136[20]);
    v126 = v135 + v125;
    v127 = (uint64_t)v137 + v125;
    *(_WORD *)v126 = *(_WORD *)v127;
    *(_BYTE *)(v126 + 2) = *(_BYTE *)(v127 + 2);
  }
  return v13;
}

uint64_t sub_1006087AC(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v4 = a1 + a2[8];
  v5 = (int *)type metadata accessor for ListLocationViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, (uint64_t)v5))
  {
    v6 = type metadata accessor for LocationModel(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    swift_bridgeObjectRelease();
    v7 = v4 + v5[7];
    type metadata accessor for ListLocationRowPrimaryText(0);
    if (swift_getEnumCaseMultiPayload(v7) == 1)
    {
      v8 = type metadata accessor for Date(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v9 = v4 + v5[8];
    sub_100176DD4(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(_BYTE *)(v9 + 32));
    v10 = v4 + v5[10];
    v11 = type metadata accessor for Date(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v10, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    v12 = v4 + v5[11];
    v13 = type metadata accessor for TimeZone(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v12, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v4 + v5[22];
    v15 = type metadata accessor for WeatherConditionBackgroundModel(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = a1 + a2[13];
  swift_bridgeObjectRelease();
  v17 = v16 + *(int *)(type metadata accessor for LearnMoreAttributorViewModel(0) + 24);
  v18 = type metadata accessor for URL(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v17, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = a1 + a2[19];
  v20 = type metadata accessor for ContentStatusBanner(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v19, 1, v20);
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(v19 + 16) >= 2uLL)
      swift_bridgeObjectRelease();
    v22 = v19 + *(int *)(v20 + 24);
    v23 = type metadata accessor for Date(0);
    result = _s7Weather24LocationCompositionStateOwet_0(v22, 1, v23);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  }
  return result;
}

uint64_t sub_100608B18(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t, __n128);
  __n128 v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  void *v95;
  const void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;

  v3 = a3;
  v4 = a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = a3[8];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for ListLocationViewModel(0);
  v132 = v3;
  v133 = v4;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, (uint64_t)v9))
  {
    v10 = sub_1000BA294(&qword_100BE5568);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for LocationModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
    v12 = v9[5];
    v13 = &v7[v12];
    v14 = &v8[v12];
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    v15 = v9[6];
    v16 = &v7[v15];
    v17 = &v8[v15];
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    v19 = v9[7];
    v20 = &v7[v19];
    v21 = &v8[v19];
    v22 = type metadata accessor for ListLocationRowPrimaryText(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload(v21) == 1)
    {
      v23 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v23))
      {
        v24 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        v25 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
        v25 = 1;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 0, 1, v23);
      }
    }
    else
    {
      v26 = *((_QWORD *)v21 + 1);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_QWORD *)v20 + 1) = v26;
      swift_bridgeObjectRetain();
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v25);
    v27 = v9[8];
    v28 = &v7[v27];
    v29 = &v8[v27];
    v30 = *(_QWORD *)v29;
    v31 = *((_QWORD *)v29 + 1);
    v32 = *((_QWORD *)v29 + 2);
    v33 = *((_QWORD *)v29 + 3);
    v34 = v29[32];
    sub_100176D88(*(_QWORD *)v29, v31, v32, v33, v34);
    *(_QWORD *)v28 = v30;
    *((_QWORD *)v28 + 1) = v31;
    *((_QWORD *)v28 + 2) = v32;
    *((_QWORD *)v28 + 3) = v33;
    v28[32] = v34;
    v7[v9[9]] = v8[v9[9]];
    v35 = v9[10];
    v36 = &v7[v35];
    v37 = &v8[v35];
    v38 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v38))
    {
      v39 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, v38);
    }
    v40 = v9[11];
    v41 = &v7[v40];
    v42 = &v8[v40];
    v43 = type metadata accessor for TimeZone(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v43))
    {
      v44 = sub_1000BA294(&qword_100BCCC50);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v43);
    }
    v45 = v9[12];
    v46 = &v7[v45];
    v47 = &v8[v45];
    v130 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v130;
    v48 = v9[13];
    v49 = &v7[v48];
    v50 = &v8[v48];
    v129 = *((_QWORD *)v50 + 1);
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *((_QWORD *)v49 + 1) = v129;
    v7[v9[14]] = v8[v9[14]];
    v51 = v9[15];
    v52 = &v7[v51];
    v53 = &v8[v51];
    v128 = *((_QWORD *)v53 + 1);
    *(_QWORD *)v52 = *(_QWORD *)v53;
    *((_QWORD *)v52 + 1) = v128;
    v54 = v9[16];
    v55 = &v7[v54];
    v56 = &v8[v54];
    v127 = *((_QWORD *)v56 + 1);
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *((_QWORD *)v55 + 1) = v127;
    v57 = v9[17];
    v58 = &v7[v57];
    v59 = &v8[v57];
    v60 = *((_QWORD *)v59 + 1);
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *((_QWORD *)v58 + 1) = v60;
    v61 = v9[18];
    v62 = &v7[v61];
    v63 = &v8[v61];
    v64 = *((_QWORD *)v63 + 1);
    *(_QWORD *)v62 = *(_QWORD *)v63;
    *((_QWORD *)v62 + 1) = v64;
    v65 = v9[19];
    v66 = &v7[v65];
    v67 = &v8[v65];
    v68 = *((_QWORD *)v67 + 1);
    *(_QWORD *)v66 = *(_QWORD *)v67;
    *((_QWORD *)v66 + 1) = v68;
    v69 = v9[20];
    v70 = &v7[v69];
    v71 = &v8[v69];
    v72 = *((_QWORD *)v71 + 1);
    *(_QWORD *)v70 = *(_QWORD *)v71;
    *((_QWORD *)v70 + 1) = v72;
    v7[v9[21]] = v8[v9[21]];
    v73 = v9[22];
    v125 = &v8[v73];
    v126 = &v7[v73];
    v74 = type metadata accessor for WeatherConditionBackgroundModel(0);
    v75 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v74 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v76 = swift_bridgeObjectRetain();
    v75(v126, v125, v74, v76);
    v7[v9[23]] = v8[v9[23]];
    v7[v9[24]] = v8[v9[24]];
    v77 = v9[25];
    v78 = &v7[v77];
    v79 = &v8[v77];
    v80 = *((_QWORD *)v79 + 1);
    *(_QWORD *)v78 = *(_QWORD *)v79;
    *((_QWORD *)v78 + 1) = v80;
    *(_QWORD *)&v7[v9[26]] = *(_QWORD *)&v8[v9[26]];
    swift_bridgeObjectRetain();
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, (uint64_t)v9);
    v3 = v132;
    v4 = v133;
  }
  v81 = v3[10];
  *(_QWORD *)(a1 + v3[9]) = *(_QWORD *)(v4 + v3[9]);
  v82 = (_QWORD *)(a1 + v81);
  v83 = (_QWORD *)(v4 + v81);
  v84 = v83[1];
  *v82 = *v83;
  v82[1] = v84;
  v85 = v3[11];
  v86 = v3[12];
  v87 = (_QWORD *)(a1 + v85);
  v88 = (_QWORD *)(v4 + v85);
  v89 = v88[1];
  *v87 = *v88;
  v87[1] = v89;
  *(_BYTE *)(a1 + v86) = *(_BYTE *)(v4 + v86);
  v90 = v3[13];
  v131 = a1;
  v91 = a1 + v90;
  v92 = v4 + v90;
  *(_BYTE *)v91 = *(_BYTE *)v92;
  *(_QWORD *)(v91 + 8) = *(_QWORD *)(v92 + 8);
  v93 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
  v94 = v93[6];
  v95 = (void *)(v91 + v94);
  v96 = (const void *)(v92 + v94);
  v97 = type metadata accessor for URL(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v96, 1, v97))
  {
    v98 = sub_1000BA294(&qword_100BD4280);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v95, v96, v97);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v95, 0, 1, v97);
  }
  v99 = v93[7];
  v100 = (_QWORD *)(v91 + v99);
  v101 = (_QWORD *)(v92 + v99);
  v102 = v101[1];
  *v100 = *v101;
  v100[1] = v102;
  *(_QWORD *)(v91 + v93[8]) = *(_QWORD *)(v92 + v93[8]);
  v103 = v132[15];
  *(_QWORD *)(v131 + v132[14]) = *(_QWORD *)(v133 + v132[14]);
  *(_BYTE *)(v131 + v103) = *(_BYTE *)(v133 + v103);
  v104 = v132[16];
  v105 = v132[17];
  v106 = (_QWORD *)(v131 + v104);
  v107 = (_QWORD *)(v133 + v104);
  v108 = v107[1];
  *v106 = *v107;
  v106[1] = v108;
  *(_BYTE *)(v131 + v105) = *(_BYTE *)(v133 + v105);
  v109 = v132[19];
  *(_BYTE *)(v131 + v132[18]) = *(_BYTE *)(v133 + v132[18]);
  v110 = (_QWORD *)(v131 + v109);
  v111 = (_QWORD *)(v133 + v109);
  v112 = type metadata accessor for ContentStatusBanner(0);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v111, 1, v112))
  {
    v113 = sub_1000BA294(&qword_100BC3620);
    memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
  }
  else
  {
    *(_BYTE *)v110 = *(_BYTE *)v111;
    v114 = v111 + 1;
    v115 = v111[2];
    if (v115 >= 2)
    {
      v110[1] = *v114;
      v110[2] = v115;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v110 + 1) = *(_OWORD *)v114;
    }
    v116 = *(int *)(v112 + 24);
    v117 = (char *)v110 + v116;
    v118 = (char *)v111 + v116;
    v119 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v118, 1, v119))
    {
      v120 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 16))(v117, v118, v119);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v117, 0, 1, v119);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v110, 0, 1, v112);
  }
  v121 = v132[21];
  *(_BYTE *)(v131 + v132[20]) = *(_BYTE *)(v133 + v132[20]);
  v122 = v131 + v121;
  v123 = v133 + v121;
  *(_WORD *)v122 = *(_WORD *)v123;
  *(_BYTE *)(v122 + 2) = *(_BYTE *)(v123 + 2);
  return v131;
}

uint64_t sub_100609270(uint64_t a1, uint64_t *a2, int *a3)
{
  int *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  void *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, _BYTE *, uint64_t, __n128);
  __n128 v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  uint64_t v164;
  void *v165;
  const void *v166;
  uint64_t v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  size_t v184;
  void *v185;
  const void *v186;
  unint64_t v187;
  uint64_t v188;
  void *v189;
  const void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _BYTE *v196;
  _BYTE *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  int v204;
  uint64_t v205;
  _BYTE *v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  int *v210;
  int *v211;

  v3 = a3;
  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  *(_BYTE *)(a1 + 10) = *((_BYTE *)a2 + 10);
  *(_BYTE *)(a1 + 11) = *((_BYTE *)a2 + 11);
  v7 = a3[8];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for ListLocationViewModel(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, (uint64_t)v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, (uint64_t)v10);
  if (!v11)
  {
    if (v12)
    {
      sub_1000215BC((uint64_t)v8, type metadata accessor for ListLocationViewModel);
      goto LABEL_8;
    }
    v30 = type metadata accessor for LocationModel(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v8, v9, v30);
    v31 = v10[5];
    v32 = &v8[v31];
    v33 = &v9[v31];
    v34 = v33[8];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v34;
    v35 = v10[6];
    v36 = &v8[v35];
    v37 = &v9[v35];
    *v36 = *v37;
    v36[1] = v37[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((uint64_t *)a1 != a2)
    {
      v38 = v10[7];
      v39 = &v8[v38];
      v40 = &v9[v38];
      sub_1000215BC((uint64_t)&v8[v38], type metadata accessor for ListLocationRowPrimaryText);
      v41 = type metadata accessor for ListLocationRowPrimaryText(0);
      if (swift_getEnumCaseMultiPayload(v40) == 1)
      {
        v42 = v3;
        v43 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v43))
        {
          v44 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
          v45 = 1;
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v39, v40, v43);
          v45 = 1;
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v43);
        }
        v3 = v42;
      }
      else
      {
        *v39 = *v40;
        v39[1] = v40[1];
        swift_bridgeObjectRetain();
        v45 = 0;
      }
      swift_storeEnumTagMultiPayload(v39, v41, v45);
    }
    v211 = v3;
    v96 = v10[8];
    v97 = &v8[v96];
    v98 = &v9[v96];
    v99 = *(_QWORD *)v98;
    v100 = *((_QWORD *)v98 + 1);
    v101 = *((_QWORD *)v98 + 2);
    v102 = *((_QWORD *)v98 + 3);
    v209 = v98[32];
    sub_100176D88(*(_QWORD *)v98, v100, v101, v102, v209);
    v103 = *(_QWORD *)v97;
    v104 = *((_QWORD *)v97 + 1);
    v105 = *((_QWORD *)v97 + 2);
    v106 = *((_QWORD *)v97 + 3);
    *(_QWORD *)v97 = v99;
    *((_QWORD *)v97 + 1) = v100;
    *((_QWORD *)v97 + 2) = v101;
    *((_QWORD *)v97 + 3) = v102;
    v107 = v97[32];
    v97[32] = v209;
    sub_100176DD4(v103, v104, v105, v106, v107);
    v8[v10[9]] = v9[v10[9]];
    v108 = v10[10];
    v109 = &v8[v108];
    v110 = &v9[v108];
    v111 = type metadata accessor for Date(0);
    LODWORD(v97) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v109, 1, v111);
    v112 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v110, 1, v111);
    if ((_DWORD)v97)
    {
      if (!v112)
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(v109, v110, v111);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v109, 0, 1, v111);
        goto LABEL_32;
      }
    }
    else
    {
      v113 = *(_QWORD *)(v111 - 8);
      if (!v112)
      {
        (*(void (**)(char *, char *, uint64_t))(v113 + 24))(v109, v110, v111);
LABEL_32:
        v3 = v211;
        v115 = v10[11];
        v116 = &v8[v115];
        v117 = &v9[v115];
        v118 = type metadata accessor for TimeZone(0);
        v119 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v116, 1, v118);
        v120 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v117, 1, v118);
        if (v119)
        {
          if (!v120)
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v118 - 8) + 16))(v116, v117, v118);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v116, 0, 1, v118);
LABEL_38:
            v123 = v10[12];
            v124 = &v8[v123];
            v125 = &v9[v123];
            *v124 = *v125;
            v124[1] = v125[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v126 = v10[13];
            v127 = &v8[v126];
            v128 = &v9[v126];
            *v127 = *v128;
            v127[1] = v128[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v8[v10[14]] = v9[v10[14]];
            v129 = v10[15];
            v130 = &v8[v129];
            v131 = &v9[v129];
            *v130 = *v131;
            v130[1] = v131[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v132 = v10[16];
            v133 = &v8[v132];
            v134 = &v9[v132];
            *v133 = *v134;
            v133[1] = v134[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v135 = v10[17];
            v136 = &v8[v135];
            v137 = &v9[v135];
            *v136 = *v137;
            v136[1] = v137[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v138 = v10[18];
            v139 = &v8[v138];
            v140 = &v9[v138];
            *v139 = *v140;
            v139[1] = v140[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v141 = v10[19];
            v142 = &v8[v141];
            v143 = &v9[v141];
            *v142 = *v143;
            v142[1] = v143[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v144 = v10[20];
            v145 = &v8[v144];
            v146 = &v9[v144];
            *v145 = *v146;
            v145[1] = v146[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v8[v10[21]] = v9[v10[21]];
            v147 = v10[22];
            v148 = &v8[v147];
            v149 = &v9[v147];
            v150 = type metadata accessor for WeatherConditionBackgroundModel(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 24))(v148, v149, v150);
            v8[v10[23]] = v9[v10[23]];
            v8[v10[24]] = v9[v10[24]];
            v151 = v10[25];
            v152 = &v8[v151];
            v153 = &v9[v151];
            *v152 = *v153;
            v152[1] = v153[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v8[v10[26]] = *(_QWORD *)&v9[v10[26]];
            goto LABEL_39;
          }
        }
        else
        {
          v121 = *(_QWORD *)(v118 - 8);
          if (!v120)
          {
            (*(void (**)(char *, char *, uint64_t))(v121 + 24))(v116, v117, v118);
            goto LABEL_38;
          }
          (*(void (**)(char *, uint64_t))(v121 + 8))(v116, v118);
        }
        v122 = sub_1000BA294(&qword_100BCCC50);
        memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
        goto LABEL_38;
      }
      (*(void (**)(char *, uint64_t))(v113 + 8))(v109, v111);
    }
    v114 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
    goto LABEL_32;
  }
  if (v12)
  {
LABEL_8:
    v29 = sub_1000BA294(&qword_100BE5568);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_39;
  }
  v13 = type metadata accessor for LocationModel(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v8, v9, v13);
  v14 = v10[5];
  v15 = &v8[v14];
  v16 = &v9[v14];
  v17 = v16[8];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v17;
  v18 = v10[6];
  v19 = &v8[v18];
  v20 = &v9[v18];
  *v19 = *v20;
  v19[1] = v20[1];
  v21 = v10[7];
  v22 = &v8[v21];
  v23 = &v9[v21];
  v24 = type metadata accessor for ListLocationRowPrimaryText(0);
  swift_bridgeObjectRetain();
  v210 = v3;
  v25 = v9;
  if (swift_getEnumCaseMultiPayload(v23) == 1)
  {
    v26 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v26))
    {
      v27 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      v28 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v22, v23, v26);
      v28 = 1;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v26);
    }
  }
  else
  {
    *v22 = *v23;
    v22[1] = v23[1];
    swift_bridgeObjectRetain();
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v22, v24, v28);
  v46 = v10[8];
  v47 = &v8[v46];
  v208 = (uint64_t)v8;
  v48 = v25;
  v49 = &v25[v46];
  v50 = *(_QWORD *)v49;
  v51 = *((_QWORD *)v49 + 1);
  v52 = *((_QWORD *)v49 + 2);
  v53 = *((_QWORD *)v49 + 3);
  v54 = v49[32];
  sub_100176D88(*(_QWORD *)v49, v51, v52, v53, v54);
  *(_QWORD *)v47 = v50;
  *((_QWORD *)v47 + 1) = v51;
  *((_QWORD *)v47 + 2) = v52;
  *((_QWORD *)v47 + 3) = v53;
  v47[32] = v54;
  *(_BYTE *)(v208 + v10[9]) = v48[v10[9]];
  v55 = v10[10];
  v56 = (void *)(v208 + v55);
  v57 = &v48[v55];
  v58 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v57, 1, v58))
  {
    v59 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v56, 0, 1, v58);
  }
  v60 = v10[11];
  v61 = (void *)(v208 + v60);
  v62 = &v48[v60];
  v63 = type metadata accessor for TimeZone(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v62, 1, v63))
  {
    v64 = sub_1000BA294(&qword_100BCCC50);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v61, 0, 1, v63);
  }
  v65 = v10[12];
  v66 = (_QWORD *)(v208 + v65);
  v67 = &v48[v65];
  *v66 = *v67;
  v66[1] = v67[1];
  v68 = v10[13];
  v69 = (_QWORD *)(v208 + v68);
  v70 = &v48[v68];
  *v69 = *v70;
  v69[1] = v70[1];
  *(_BYTE *)(v208 + v10[14]) = v48[v10[14]];
  v71 = v10[15];
  v72 = (_QWORD *)(v208 + v71);
  v73 = &v48[v71];
  *v72 = *v73;
  v72[1] = v73[1];
  v74 = v10[16];
  v75 = (_QWORD *)(v208 + v74);
  v76 = &v48[v74];
  *v75 = *v76;
  v75[1] = v76[1];
  v77 = v10[17];
  v78 = (_QWORD *)(v208 + v77);
  v79 = &v48[v77];
  *v78 = *v79;
  v78[1] = v79[1];
  v80 = v10[18];
  v81 = (_QWORD *)(v208 + v80);
  v82 = &v48[v80];
  *v81 = *v82;
  v81[1] = v82[1];
  v83 = v10[19];
  v84 = (_QWORD *)(v208 + v83);
  v85 = &v48[v83];
  *v84 = *v85;
  v84[1] = v85[1];
  v86 = v10[20];
  v87 = (_QWORD *)(v208 + v86);
  v88 = &v48[v86];
  *v87 = *v88;
  v87[1] = v88[1];
  *(_BYTE *)(v208 + v10[21]) = v48[v10[21]];
  v89 = v10[22];
  v206 = &v48[v89];
  v207 = v208 + v89;
  v90 = type metadata accessor for WeatherConditionBackgroundModel(0);
  v91 = *(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(*(_QWORD *)(v90 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v92 = swift_bridgeObjectRetain();
  v91(v207, v206, v90, v92);
  *(_BYTE *)(v208 + v10[23]) = v48[v10[23]];
  *(_BYTE *)(v208 + v10[24]) = v48[v10[24]];
  v93 = v10[25];
  v94 = (_QWORD *)(v208 + v93);
  v95 = &v48[v93];
  *v94 = *v95;
  v94[1] = v95[1];
  *(_QWORD *)(v208 + v10[26]) = *(_QWORD *)&v48[v10[26]];
  swift_bridgeObjectRetain();
  _s7Weather24LocationCompositionStateOwst_0(v208, 0, 1, (uint64_t)v10);
  v3 = v210;
LABEL_39:
  *(_QWORD *)(a1 + v3[9]) = *(uint64_t *)((char *)a2 + v3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v154 = v3[10];
  v155 = (_QWORD *)(a1 + v154);
  v156 = (uint64_t *)((char *)a2 + v154);
  *v155 = *v156;
  v155[1] = v156[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v157 = v3[11];
  v158 = (_QWORD *)(a1 + v157);
  v159 = (uint64_t *)((char *)a2 + v157);
  *v158 = *v159;
  v158[1] = v159[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v3[12]) = *((_BYTE *)a2 + v3[12]);
  v160 = v3[13];
  v161 = a1 + v160;
  v162 = (uint64_t)a2 + v160;
  *(_BYTE *)v161 = *((_BYTE *)a2 + v160);
  *(_QWORD *)(v161 + 8) = *(uint64_t *)((char *)a2 + v160 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v163 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
  v164 = v163[6];
  v165 = (void *)(v161 + v164);
  v166 = (const void *)(v162 + v164);
  v167 = type metadata accessor for URL(0);
  v168 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v165, 1, v167);
  v169 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v166, 1, v167);
  if (v168)
  {
    if (!v169)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v167 - 8) + 16))(v165, v166, v167);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v165, 0, 1, v167);
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  v170 = *(_QWORD *)(v167 - 8);
  if (v169)
  {
    (*(void (**)(void *, uint64_t))(v170 + 8))(v165, v167);
LABEL_44:
    v171 = sub_1000BA294(&qword_100BD4280);
    memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
    goto LABEL_45;
  }
  (*(void (**)(void *, const void *, uint64_t))(v170 + 24))(v165, v166, v167);
LABEL_45:
  v172 = v163[7];
  v173 = (_QWORD *)(v161 + v172);
  v174 = (_QWORD *)(v162 + v172);
  *v173 = *v174;
  v173[1] = v174[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v161 + v163[8]) = *(_QWORD *)(v162 + v163[8]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + v3[14]) = *(uint64_t *)((char *)a2 + v3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v3[15]) = *((_BYTE *)a2 + v3[15]);
  v175 = v3[16];
  v176 = (_QWORD *)(a1 + v175);
  v177 = (uint64_t *)((char *)a2 + v175);
  *v176 = *v177;
  v176[1] = v177[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v3[17]) = *((_BYTE *)a2 + v3[17]);
  *(_BYTE *)(a1 + v3[18]) = *((_BYTE *)a2 + v3[18]);
  v178 = v3[19];
  v179 = a1 + v178;
  v180 = (uint64_t)a2 + v178;
  v181 = type metadata accessor for ContentStatusBanner(0);
  v182 = _s7Weather24LocationCompositionStateOwet_0(v179, 1, v181);
  v183 = _s7Weather24LocationCompositionStateOwet_0(v180, 1, v181);
  if (v182)
  {
    if (!v183)
    {
      *(_BYTE *)v179 = *(_BYTE *)v180;
      if (*(_QWORD *)(v180 + 16) >= 2uLL)
      {
        *(_QWORD *)(v179 + 8) = *(_QWORD *)(v180 + 8);
        *(_QWORD *)(v179 + 16) = *(_QWORD *)(v180 + 16);
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v179 + 8) = *(_OWORD *)(v180 + 8);
      }
      v188 = *(int *)(v181 + 24);
      v189 = (void *)(v179 + v188);
      v190 = (const void *)(v180 + v188);
      v191 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v190, 1, v191))
      {
        v192 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v191 - 8) + 16))(v189, v190, v191);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v189, 0, 1, v191);
      }
      v193 = v179;
      v194 = v181;
      goto LABEL_62;
    }
    goto LABEL_51;
  }
  if (v183)
  {
    sub_1000215BC(v179, type metadata accessor for ContentStatusBanner);
LABEL_51:
    v184 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3620) - 8) + 64);
    v185 = (void *)v179;
    v186 = (const void *)v180;
    goto LABEL_52;
  }
  *(_BYTE *)v179 = *(_BYTE *)v180;
  v187 = *(_QWORD *)(v180 + 16);
  if (*(_QWORD *)(v179 + 16) >= 2uLL)
  {
    if (v187 >= 2)
    {
      *(_QWORD *)(v179 + 8) = *(_QWORD *)(v180 + 8);
      *(_QWORD *)(v179 + 16) = *(_QWORD *)(v180 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_68;
    }
    sub_1001A27B4(v179 + 8);
    goto LABEL_66;
  }
  if (v187 < 2)
  {
LABEL_66:
    *(_OWORD *)(v179 + 8) = *(_OWORD *)(v180 + 8);
    goto LABEL_68;
  }
  *(_QWORD *)(v179 + 8) = *(_QWORD *)(v180 + 8);
  *(_QWORD *)(v179 + 16) = *(_QWORD *)(v180 + 16);
  swift_bridgeObjectRetain();
LABEL_68:
  v199 = *(int *)(v181 + 24);
  v200 = v179 + v199;
  v201 = v180 + v199;
  v202 = type metadata accessor for Date(0);
  v203 = _s7Weather24LocationCompositionStateOwet_0(v200, 1, v202);
  v204 = _s7Weather24LocationCompositionStateOwet_0(v201, 1, v202);
  if (v203)
  {
    if (!v204)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v202 - 8) + 16))(v200, v201, v202);
      v193 = v200;
      v194 = v202;
LABEL_62:
      _s7Weather24LocationCompositionStateOwst_0(v193, 0, 1, v194);
      goto LABEL_63;
    }
  }
  else
  {
    v205 = *(_QWORD *)(v202 - 8);
    if (!v204)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v205 + 24))(v200, v201, v202);
      goto LABEL_63;
    }
    (*(void (**)(uint64_t, uint64_t))(v205 + 8))(v200, v202);
  }
  v184 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v185 = (void *)v200;
  v186 = (const void *)v201;
LABEL_52:
  memcpy(v185, v186, v184);
LABEL_63:
  *(_BYTE *)(a1 + v3[20]) = *((_BYTE *)a2 + v3[20]);
  v195 = v3[21];
  v196 = (_BYTE *)(a1 + v195);
  v197 = (char *)a2 + v195;
  *v196 = *v197;
  v196[1] = v197[1];
  v196[2] = v197[2];
  return a1;
}

uint64_t sub_10060A1E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = a3[8];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for ListLocationViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, (uint64_t)v9))
  {
    v10 = sub_1000BA294(&qword_100BE5568);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for LocationModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
    v12 = v9[5];
    v13 = &v7[v12];
    v14 = &v8[v12];
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    *(_OWORD *)&v7[v9[6]] = *(_OWORD *)&v8[v9[6]];
    v15 = v9[7];
    v16 = &v7[v15];
    v17 = &v8[v15];
    v18 = type metadata accessor for ListLocationRowPrimaryText(0);
    if (swift_getEnumCaseMultiPayload(v17) == 1)
    {
      v19 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v19))
      {
        v20 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, v19);
      }
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    v21 = v9[8];
    v22 = &v7[v21];
    v23 = &v8[v21];
    v24 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v24;
    v22[32] = v23[32];
    v7[v9[9]] = v8[v9[9]];
    v25 = v9[10];
    v26 = &v7[v25];
    v27 = &v8[v25];
    v28 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v28))
    {
      v29 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v28);
    }
    v30 = v9[11];
    v31 = &v7[v30];
    v32 = &v8[v30];
    v33 = type metadata accessor for TimeZone(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
    {
      v34 = sub_1000BA294(&qword_100BCCC50);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
    }
    *(_OWORD *)&v7[v9[12]] = *(_OWORD *)&v8[v9[12]];
    *(_OWORD *)&v7[v9[13]] = *(_OWORD *)&v8[v9[13]];
    v7[v9[14]] = v8[v9[14]];
    *(_OWORD *)&v7[v9[15]] = *(_OWORD *)&v8[v9[15]];
    *(_OWORD *)&v7[v9[16]] = *(_OWORD *)&v8[v9[16]];
    *(_OWORD *)&v7[v9[17]] = *(_OWORD *)&v8[v9[17]];
    *(_OWORD *)&v7[v9[18]] = *(_OWORD *)&v8[v9[18]];
    *(_OWORD *)&v7[v9[19]] = *(_OWORD *)&v8[v9[19]];
    *(_OWORD *)&v7[v9[20]] = *(_OWORD *)&v8[v9[20]];
    v7[v9[21]] = v8[v9[21]];
    v35 = v9[22];
    v36 = &v7[v35];
    v37 = &v8[v35];
    v38 = type metadata accessor for WeatherConditionBackgroundModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
    v7[v9[23]] = v8[v9[23]];
    v7[v9[24]] = v8[v9[24]];
    *(_OWORD *)&v7[v9[25]] = *(_OWORD *)&v8[v9[25]];
    *(_QWORD *)&v7[v9[26]] = *(_QWORD *)&v8[v9[26]];
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, (uint64_t)v9);
  }
  v39 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v39) = *(_OWORD *)(a2 + v39);
  v40 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v40) = *(_BYTE *)(a2 + v40);
  v41 = a3[13];
  v42 = a1 + v41;
  v43 = a2 + v41;
  *(_BYTE *)v42 = *(_BYTE *)(a2 + v41);
  *(_QWORD *)(v42 + 8) = *(_QWORD *)(a2 + v41 + 8);
  v44 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
  v45 = v44[6];
  v46 = (void *)(v42 + v45);
  v47 = (const void *)(v43 + v45);
  v48 = type metadata accessor for URL(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v47, 1, v48))
  {
    v49 = sub_1000BA294(&qword_100BD4280);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v46, v47, v48);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v46, 0, 1, v48);
  }
  *(_OWORD *)(v42 + v44[7]) = *(_OWORD *)(v43 + v44[7]);
  *(_QWORD *)(v42 + v44[8]) = *(_QWORD *)(v43 + v44[8]);
  v50 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v50) = *(_BYTE *)(a2 + v50);
  v51 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v51) = *(_BYTE *)(a2 + v51);
  v52 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  v53 = (_BYTE *)(a1 + v52);
  v54 = (_BYTE *)(a2 + v52);
  v55 = type metadata accessor for ContentStatusBanner(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v54, 1, v55))
  {
    v56 = sub_1000BA294(&qword_100BC3620);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    *v53 = *v54;
    *(_OWORD *)(v53 + 8) = *(_OWORD *)(v54 + 8);
    v57 = *(int *)(v55 + 24);
    v58 = &v53[v57];
    v59 = &v54[v57];
    v60 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v60))
    {
      v61 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v58, v59, v60);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v60);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v53, 0, 1, v55);
  }
  v62 = a3[21];
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  v63 = a1 + v62;
  v64 = a2 + v62;
  *(_WORD *)v63 = *(_WORD *)v64;
  *(_BYTE *)(v63 + 2) = *(_BYTE *)(v64 + 2);
  return a1;
}

uint64_t sub_10060A7C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  char v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;
  void *v146;
  const void *v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  uint64_t v170;
  void *v171;
  const void *v172;
  uint64_t v173;
  uint64_t v174;
  size_t v175;
  void *v176;
  const void *v177;
  _QWORD *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  _BYTE *v184;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  uint64_t v192;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  v6 = a3[8];
  v7 = (_BYTE *)(a1 + v6);
  v8 = (_BYTE *)(a2 + v6);
  v9 = (int *)type metadata accessor for ListLocationViewModel(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, (uint64_t)v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, (uint64_t)v9);
  if (!v10)
  {
    if (v11)
    {
      sub_1000215BC((uint64_t)v7, type metadata accessor for ListLocationViewModel);
      goto LABEL_8;
    }
    v23 = type metadata accessor for LocationModel(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v7, v8, v23);
    v24 = v9[5];
    v25 = &v7[v24];
    v26 = &v8[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    v27 = v9[6];
    v28 = &v7[v27];
    v29 = (uint64_t *)&v8[v27];
    v31 = *v29;
    v30 = v29[1];
    *v28 = v31;
    v28[1] = v30;
    swift_bridgeObjectRelease();
    if (a1 != a2)
    {
      v32 = v9[7];
      v33 = &v7[v32];
      v34 = &v8[v32];
      sub_1000215BC((uint64_t)&v7[v32], type metadata accessor for ListLocationRowPrimaryText);
      v35 = type metadata accessor for ListLocationRowPrimaryText(0);
      if (swift_getEnumCaseMultiPayload(v34) == 1)
      {
        v36 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v36))
        {
          v37 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v33, v34, v36);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v33, 0, 1, v36);
        }
        swift_storeEnumTagMultiPayload(v33, v35, 1);
      }
      else
      {
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
    }
    v56 = v9[8];
    v57 = &v7[v56];
    v58 = &v8[v56];
    v59 = v58[32];
    v60 = *(_QWORD *)v57;
    v61 = *((_QWORD *)v57 + 1);
    v62 = *((_QWORD *)v57 + 2);
    v63 = *((_QWORD *)v57 + 3);
    v64 = *((_OWORD *)v58 + 1);
    *(_OWORD *)v57 = *(_OWORD *)v58;
    *((_OWORD *)v57 + 1) = v64;
    v65 = v57[32];
    v57[32] = v59;
    sub_100176DD4(v60, v61, v62, v63, v65);
    v7[v9[9]] = v8[v9[9]];
    v66 = v9[10];
    v67 = &v7[v66];
    v68 = &v8[v66];
    v69 = type metadata accessor for Date(0);
    v70 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v67, 1, v69);
    v71 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v68, 1, v69);
    if (v70)
    {
      if (!v71)
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v67, 0, 1, v69);
        goto LABEL_32;
      }
    }
    else
    {
      v72 = *(_QWORD *)(v69 - 8);
      if (!v71)
      {
        (*(void (**)(char *, char *, uint64_t))(v72 + 40))(v67, v68, v69);
LABEL_32:
        v74 = v9[11];
        v75 = &v7[v74];
        v76 = &v8[v74];
        v77 = type metadata accessor for TimeZone(0);
        v78 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v75, 1, v77);
        v79 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v76, 1, v77);
        if (v78)
        {
          if (!v79)
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v75, 0, 1, v77);
LABEL_38:
            v82 = v9[12];
            v83 = &v7[v82];
            v84 = (uint64_t *)&v8[v82];
            v86 = *v84;
            v85 = v84[1];
            *v83 = v86;
            v83[1] = v85;
            swift_bridgeObjectRelease();
            v87 = v9[13];
            v88 = &v7[v87];
            v89 = (uint64_t *)&v8[v87];
            v91 = *v89;
            v90 = v89[1];
            *v88 = v91;
            v88[1] = v90;
            swift_bridgeObjectRelease();
            v7[v9[14]] = v8[v9[14]];
            v92 = v9[15];
            v93 = &v7[v92];
            v94 = (uint64_t *)&v8[v92];
            v96 = *v94;
            v95 = v94[1];
            *v93 = v96;
            v93[1] = v95;
            swift_bridgeObjectRelease();
            v97 = v9[16];
            v98 = &v7[v97];
            v99 = (uint64_t *)&v8[v97];
            v101 = *v99;
            v100 = v99[1];
            *v98 = v101;
            v98[1] = v100;
            swift_bridgeObjectRelease();
            v102 = v9[17];
            v103 = &v7[v102];
            v104 = (uint64_t *)&v8[v102];
            v106 = *v104;
            v105 = v104[1];
            *v103 = v106;
            v103[1] = v105;
            swift_bridgeObjectRelease();
            v107 = v9[18];
            v108 = &v7[v107];
            v109 = (uint64_t *)&v8[v107];
            v111 = *v109;
            v110 = v109[1];
            *v108 = v111;
            v108[1] = v110;
            swift_bridgeObjectRelease();
            v112 = v9[19];
            v113 = &v7[v112];
            v114 = (uint64_t *)&v8[v112];
            v116 = *v114;
            v115 = v114[1];
            *v113 = v116;
            v113[1] = v115;
            swift_bridgeObjectRelease();
            v117 = v9[20];
            v118 = &v7[v117];
            v119 = (uint64_t *)&v8[v117];
            v121 = *v119;
            v120 = v119[1];
            *v118 = v121;
            v118[1] = v120;
            swift_bridgeObjectRelease();
            v7[v9[21]] = v8[v9[21]];
            v122 = v9[22];
            v123 = &v7[v122];
            v124 = &v8[v122];
            v125 = type metadata accessor for WeatherConditionBackgroundModel(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 40))(v123, v124, v125);
            v7[v9[23]] = v8[v9[23]];
            v7[v9[24]] = v8[v9[24]];
            v126 = v9[25];
            v127 = &v7[v126];
            v128 = (uint64_t *)&v8[v126];
            v130 = *v128;
            v129 = v128[1];
            *v127 = v130;
            v127[1] = v129;
            swift_bridgeObjectRelease();
            *(_QWORD *)&v7[v9[26]] = *(_QWORD *)&v8[v9[26]];
            goto LABEL_39;
          }
        }
        else
        {
          v80 = *(_QWORD *)(v77 - 8);
          if (!v79)
          {
            (*(void (**)(char *, char *, uint64_t))(v80 + 40))(v75, v76, v77);
            goto LABEL_38;
          }
          (*(void (**)(char *, uint64_t))(v80 + 8))(v75, v77);
        }
        v81 = sub_1000BA294(&qword_100BCCC50);
        memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
        goto LABEL_38;
      }
      (*(void (**)(char *, uint64_t))(v72 + 8))(v67, v69);
    }
    v73 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    goto LABEL_32;
  }
  if (v11)
  {
LABEL_8:
    v22 = sub_1000BA294(&qword_100BE5568);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_39;
  }
  v12 = type metadata accessor for LocationModel(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
  v13 = v9[5];
  v14 = &v7[v13];
  v15 = &v8[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  *(_OWORD *)&v7[v9[6]] = *(_OWORD *)&v8[v9[6]];
  v16 = v9[7];
  v17 = &v7[v16];
  v18 = &v8[v16];
  v19 = type metadata accessor for ListLocationRowPrimaryText(0);
  if (swift_getEnumCaseMultiPayload(v18) == 1)
  {
    v20 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v20))
    {
      v21 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v20);
    }
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v38 = v9[8];
  v39 = &v7[v38];
  v40 = &v8[v38];
  v41 = *((_OWORD *)v40 + 1);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *((_OWORD *)v39 + 1) = v41;
  v39[32] = v40[32];
  v7[v9[9]] = v8[v9[9]];
  v42 = v9[10];
  v43 = &v7[v42];
  v44 = &v8[v42];
  v45 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v44, 1, v45))
  {
    v46 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v43, 0, 1, v45);
  }
  v47 = v9[11];
  v48 = &v7[v47];
  v49 = &v8[v47];
  v50 = type metadata accessor for TimeZone(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50))
  {
    v51 = sub_1000BA294(&qword_100BCCC50);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
  }
  *(_OWORD *)&v7[v9[12]] = *(_OWORD *)&v8[v9[12]];
  *(_OWORD *)&v7[v9[13]] = *(_OWORD *)&v8[v9[13]];
  v7[v9[14]] = v8[v9[14]];
  *(_OWORD *)&v7[v9[15]] = *(_OWORD *)&v8[v9[15]];
  *(_OWORD *)&v7[v9[16]] = *(_OWORD *)&v8[v9[16]];
  *(_OWORD *)&v7[v9[17]] = *(_OWORD *)&v8[v9[17]];
  *(_OWORD *)&v7[v9[18]] = *(_OWORD *)&v8[v9[18]];
  *(_OWORD *)&v7[v9[19]] = *(_OWORD *)&v8[v9[19]];
  *(_OWORD *)&v7[v9[20]] = *(_OWORD *)&v8[v9[20]];
  v7[v9[21]] = v8[v9[21]];
  v52 = v9[22];
  v53 = &v7[v52];
  v54 = &v8[v52];
  v55 = type metadata accessor for WeatherConditionBackgroundModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  v7[v9[23]] = v8[v9[23]];
  v7[v9[24]] = v8[v9[24]];
  *(_OWORD *)&v7[v9[25]] = *(_OWORD *)&v8[v9[25]];
  *(_QWORD *)&v7[v9[26]] = *(_QWORD *)&v8[v9[26]];
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, (uint64_t)v9);
LABEL_39:
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  v131 = a3[10];
  v132 = (_QWORD *)(a1 + v131);
  v133 = (uint64_t *)(a2 + v131);
  v135 = *v133;
  v134 = v133[1];
  *v132 = v135;
  v132[1] = v134;
  swift_bridgeObjectRelease();
  v136 = a3[11];
  v137 = (_QWORD *)(a1 + v136);
  v138 = (uint64_t *)(a2 + v136);
  v140 = *v138;
  v139 = v138[1];
  *v137 = v140;
  v137[1] = v139;
  swift_bridgeObjectRelease();
  v141 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v142 = a1 + v141;
  v143 = a2 + v141;
  *(_BYTE *)v142 = *(_BYTE *)(a2 + v141);
  *(_QWORD *)(v142 + 8) = *(_QWORD *)(a2 + v141 + 8);
  swift_bridgeObjectRelease();
  v144 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
  v145 = v144[6];
  v146 = (void *)(v142 + v145);
  v147 = (const void *)(v143 + v145);
  v148 = type metadata accessor for URL(0);
  v149 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v146, 1, v148);
  v150 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v147, 1, v148);
  if (v149)
  {
    if (!v150)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v148 - 8) + 32))(v146, v147, v148);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v146, 0, 1, v148);
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  v151 = *(_QWORD *)(v148 - 8);
  if (v150)
  {
    (*(void (**)(void *, uint64_t))(v151 + 8))(v146, v148);
LABEL_44:
    v152 = sub_1000BA294(&qword_100BD4280);
    memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
    goto LABEL_45;
  }
  (*(void (**)(void *, const void *, uint64_t))(v151 + 40))(v146, v147, v148);
LABEL_45:
  v153 = v144[7];
  v154 = (_QWORD *)(v142 + v153);
  v155 = (uint64_t *)(v143 + v153);
  v157 = *v155;
  v156 = v155[1];
  *v154 = v157;
  v154[1] = v156;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v142 + v144[8]) = *(_QWORD *)(v143 + v144[8]);
  swift_release();
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  v158 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v159 = (_QWORD *)(a1 + v158);
  v160 = (uint64_t *)(a2 + v158);
  v162 = *v160;
  v161 = v160[1];
  *v159 = v162;
  v159[1] = v161;
  swift_bridgeObjectRelease();
  v163 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + v163) = *(_BYTE *)(a2 + v163);
  v164 = a3[19];
  v165 = a1 + v164;
  v166 = a2 + v164;
  v167 = type metadata accessor for ContentStatusBanner(0);
  v168 = _s7Weather24LocationCompositionStateOwet_0(v165, 1, v167);
  v169 = _s7Weather24LocationCompositionStateOwet_0(v166, 1, v167);
  if (v168)
  {
    if (!v169)
    {
      *(_BYTE *)v165 = *(_BYTE *)v166;
      *(_OWORD *)(v165 + 8) = *(_OWORD *)(v166 + 8);
      v170 = *(int *)(v167 + 24);
      v171 = (void *)(v165 + v170);
      v172 = (const void *)(v166 + v170);
      v173 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v172, 1, v173))
      {
        v174 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v171, v172, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v173 - 8) + 32))(v171, v172, v173);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v171, 0, 1, v173);
      }
      v180 = v165;
      v181 = v167;
      goto LABEL_60;
    }
    goto LABEL_51;
  }
  if (v169)
  {
    sub_1000215BC(v165, type metadata accessor for ContentStatusBanner);
LABEL_51:
    v175 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3620) - 8) + 64);
    v176 = (void *)v165;
    v177 = (const void *)v166;
    goto LABEL_52;
  }
  *(_BYTE *)v165 = *(_BYTE *)v166;
  v178 = (_QWORD *)(v166 + 8);
  if (*(_QWORD *)(v165 + 16) >= 2uLL)
  {
    v179 = *(_QWORD *)(v166 + 16);
    if (v179 >= 2)
    {
      *(_QWORD *)(v165 + 8) = *v178;
      *(_QWORD *)(v165 + 16) = v179;
      swift_bridgeObjectRelease();
      goto LABEL_63;
    }
    sub_1001A27B4(v165 + 8);
  }
  *(_OWORD *)(v165 + 8) = *(_OWORD *)v178;
LABEL_63:
  v186 = *(int *)(v167 + 24);
  v187 = v165 + v186;
  v188 = v166 + v186;
  v189 = type metadata accessor for Date(0);
  v190 = _s7Weather24LocationCompositionStateOwet_0(v187, 1, v189);
  v191 = _s7Weather24LocationCompositionStateOwet_0(v188, 1, v189);
  if (v190)
  {
    if (!v191)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v189 - 8) + 32))(v187, v188, v189);
      v180 = v187;
      v181 = v189;
LABEL_60:
      _s7Weather24LocationCompositionStateOwst_0(v180, 0, 1, v181);
      goto LABEL_61;
    }
  }
  else
  {
    v192 = *(_QWORD *)(v189 - 8);
    if (!v191)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v192 + 40))(v187, v188, v189);
      goto LABEL_61;
    }
    (*(void (**)(uint64_t, uint64_t))(v192 + 8))(v187, v189);
  }
  v175 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v176 = (void *)v187;
  v177 = (const void *)v188;
LABEL_52:
  memcpy(v176, v177, v175);
LABEL_61:
  v182 = a3[21];
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  v183 = (_BYTE *)(a1 + v182);
  v184 = (_BYTE *)(a2 + v182);
  *v183 = *v184;
  v183[1] = v184[1];
  v183[2] = v184[2];
  return a1;
}

uint64_t sub_10060B42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10060B438);
}

uint64_t sub_10060B438(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v6 = sub_1000BA294(&qword_100BE5568);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a3[8];
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v11 = type metadata accessor for LearnMoreAttributorViewModel(0);
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == (_DWORD)a2)
    {
      v7 = v11;
      v8 = a3[13];
    }
    else
    {
      v7 = sub_1000BA294(&qword_100BC3620);
      v8 = a3[19];
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v8, a2, v7);
  }
  v9 = *(_QWORD *)(a1 + a3[9]);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10060B500(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1000BA294(&qword_100BE5568);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = a4[8];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[9]) = (a2 - 1);
      return result;
    }
    v11 = type metadata accessor for LearnMoreAttributorViewModel(0);
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v10 = a4[13];
    }
    else
    {
      v9 = sub_1000BA294(&qword_100BC3620);
      v10 = a4[19];
    }
  }
  return _s7Weather24LocationCompositionStateOwst_0(a1 + v10, a2, a2, v9);
}

_QWORD *sub_10060B5C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v2 = type metadata accessor for ListLocationViewModel(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BE5568);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100079FBC();
  v7 = sub_1000D9784();
  sub_100033A34(v0 + *(int *)(v7 + 32), v1, &qword_100BE5568);
  sub_100088FC8(v1, 1, v2);
  if (v8)
  {
    v12 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_1000DB674(v1, (uint64_t)v5, type metadata accessor for ListLocationViewModel);
    v9 = sub_1000BA294(&qword_100BF6640);
    v10 = *(unsigned __int8 *)(v3 + 80);
    v11 = (v10 + 32) & ~v10;
    v12 = (_QWORD *)swift_allocObject(v9, v11 + *(_QWORD *)(v3 + 72), v10 | 7);
    *((_OWORD *)v12 + 1) = xmmword_10097CA50;
    sub_1000DB674((uint64_t)v5, (uint64_t)v12 + v11, type metadata accessor for ListLocationViewModel);
  }
  v16 = v12;
  swift_bridgeObjectRetain();
  sub_10025E370(v13);
  return v16;
}

uint64_t sub_10060B710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  char v44;
  int *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  char v60;
  char v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  char v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  BOOL v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  unsigned __int8 *v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v104 = type metadata accessor for ContentStatusBanner(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v100 = (unsigned __int8 *)v6;
  v7 = sub_1000BA294(&qword_100BC4B48);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v105 = v9;
  sub_1000BA294(&qword_100BC3620);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  v101 = (unsigned __int8 *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v102 = (uint64_t)&v98 - v13;
  __chkstk_darwin(v14);
  v103 = (uint64_t)&v98 - v15;
  v16 = type metadata accessor for ListLocationViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_100079FBC();
  v18 = sub_1000BA294(&qword_100BF7348);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  v21 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BE5568);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  v24 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v98 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v98 - v29;
  v31 = *(_BYTE *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      goto LABEL_41;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v31 = 1;
    if ((v31 & 1) != 0)
      goto LABEL_41;
  }
  if (*(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9)
    || *(unsigned __int8 *)(a1 + 10) != *(unsigned __int8 *)(a2 + 10)
    || (sub_10009B654(*(_BYTE *)(a1 + 11), *(_BYTE *)(a2 + 11)) & 1) == 0)
  {
    goto LABEL_41;
  }
  v98 = v7;
  v32 = (int *)sub_1000D9784();
  sub_100033A34(a1 + v32[8], (uint64_t)v30, &qword_100BE5568);
  v99 = v32;
  sub_1000DF7F4(a2 + v32[8], (uint64_t)v27);
  v33 = (uint64_t)&v21[*(int *)(v18 + 48)];
  sub_1000DF7F4((uint64_t)v30, (uint64_t)v21);
  sub_1000DF7F4((uint64_t)v27, v33);
  sub_100088FC8((uint64_t)v21, 1, v16);
  if (v40)
  {
    sub_100098854((uint64_t)v27);
    sub_100098854((uint64_t)v30);
    sub_100088FC8(v33, 1, v16);
    if (v40)
    {
      sub_100021A14((uint64_t)v21, &qword_100BE5568);
      goto LABEL_21;
    }
LABEL_18:
    v41 = &qword_100BF7348;
    v42 = (uint64_t)v21;
LABEL_19:
    sub_100021A14(v42, v41);
LABEL_41:
    v54 = 0;
    return v54 & 1;
  }
  sub_100033A34((uint64_t)v21, (uint64_t)v24, &qword_100BE5568);
  sub_100088FC8(v33, 1, v16);
  if (v40)
  {
    sub_100075DD0((uint64_t)v27);
    sub_100075DD0((uint64_t)v30);
    sub_1000215BC((uint64_t)v24, type metadata accessor for ListLocationViewModel);
    goto LABEL_18;
  }
  sub_1000DB674(v33, v2, type metadata accessor for ListLocationViewModel);
  sub_1008FA550();
  v44 = v43;
  sub_1000215BC(v2, type metadata accessor for ListLocationViewModel);
  sub_100098854((uint64_t)v27);
  sub_100098854((uint64_t)v30);
  sub_1000215BC((uint64_t)v24, type metadata accessor for ListLocationViewModel);
  sub_100098854((uint64_t)v21);
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_21:
  v45 = v99;
  sub_10094A2A0(*(_QWORD *)(a1 + v99[9]), *(_QWORD *)(a2 + v99[9]), v34, v35, v36, v37, v38, v39, v98, (uint64_t)v99, (uint64_t)v100, (uint64_t)v101, v102, v103, v104, v105, v106, v107, v108,
    v109);
  if ((v46 & 1) == 0)
    goto LABEL_41;
  v47 = v45[10];
  v48 = *(_QWORD *)(a1 + v47);
  v49 = *(_QWORD *)(a1 + v47 + 8);
  v50 = (uint64_t *)(a2 + v47);
  v51 = v50[1];
  if (v48 != *v50 || v49 != v51)
  {
    v53 = sub_100099264(v48, v49, *v50, v51);
    v54 = 0;
    if ((v53 & 1) == 0)
      return v54 & 1;
  }
  sub_1000C2898();
  if (v55)
  {
    if (!v56)
      goto LABEL_41;
    if (*v57 != *v58 || v55 != v56)
    {
      v60 = sub_100099264(*v57, v55, *v58, v56);
      v54 = 0;
      if ((v60 & 1) == 0)
        return v54 & 1;
    }
  }
  else if (v56)
  {
    goto LABEL_41;
  }
  sub_1000BA538();
  if (!v40)
    goto LABEL_41;
  if ((sub_1000389AC((unsigned __int8 *)(a1 + v45[13]), (unsigned __int8 *)(a2 + v45[13])) & 1) == 0)
    goto LABEL_41;
  sub_1001F4DA4();
  if ((v61 & 1) == 0)
    goto LABEL_41;
  sub_1000BA538();
  if (!v40)
    goto LABEL_41;
  sub_1000C2898();
  if (v63)
  {
    if (!v64)
      goto LABEL_41;
    if (*v65 != *v66 || v63 != v64)
    {
      v68 = sub_100099264(*v65, v63, *v66, v64);
      v54 = 0;
      if ((v68 & 1) == 0)
        return v54 & 1;
    }
  }
  else if (v64)
  {
    goto LABEL_41;
  }
  v69 = v45[17];
  v70 = *(_BYTE *)(a2 + v69);
  v71 = LocationAuthorizationState.rawValue.getter(*(_BYTE *)(a1 + v69));
  v73 = v72;
  v74 = LocationAuthorizationState.rawValue.getter(v70);
  if (v71 == v74 && v73 == v75)
  {
    swift_bridgeObjectRelease_n(v73, 2);
  }
  else
  {
    v77 = sub_100099264(v71, v73, v74, v75);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v54 = 0;
    if ((v77 & 1) == 0)
      return v54 & 1;
  }
  sub_1000BA538();
  if (!v40)
    goto LABEL_41;
  v78 = v99;
  v79 = v103;
  sub_1000C6148(a1 + v99[19], v103);
  v80 = v102;
  sub_1000C6148(a2 + v78[19], v102);
  v81 = v105;
  v82 = v105 + *(int *)(v98 + 48);
  sub_1000C6148(v79, v105);
  sub_1000C6148(v80, v82);
  sub_100088FC8(v81, 1, v104);
  if (!v40)
  {
    sub_100033A34(v105, (uint64_t)v101, &qword_100BC3620);
    sub_100088FC8(v82, 1, v104);
    if (!v83)
    {
      v84 = v100;
      sub_1000DB674(v82, (uint64_t)v100, type metadata accessor for ContentStatusBanner);
      v85 = v101;
      v86 = sub_10007BDA4(v101, v84);
      sub_1000215BC((uint64_t)v84, type metadata accessor for ContentStatusBanner);
      sub_1000987A0(v102);
      sub_1000987A0(v103);
      sub_1000215BC((uint64_t)v85, type metadata accessor for ContentStatusBanner);
      sub_1000987A0(v105);
      if (!v86)
        goto LABEL_41;
      goto LABEL_71;
    }
    sub_100075DD0(v102);
    sub_100075DD0(v103);
    sub_1000215BC((uint64_t)v101, type metadata accessor for ContentStatusBanner);
    goto LABEL_69;
  }
  sub_100098854(v102);
  sub_100098854(v103);
  sub_100088FC8(v82, 1, v104);
  if (!v40)
  {
LABEL_69:
    v41 = &qword_100BC4B48;
    v42 = v105;
    goto LABEL_19;
  }
  sub_100021A14(v105, &qword_100BC3620);
LABEL_71:
  sub_1000BA538();
  if (!v40)
    goto LABEL_41;
  v87 = v99[21];
  v88 = *(unsigned __int8 *)(a1 + v87);
  v89 = *(unsigned __int8 *)(a1 + v87 + 1);
  v90 = *(unsigned __int8 *)(a1 + v87 + 2);
  v91 = (unsigned __int8 *)(a2 + v87);
  v92 = *v91;
  v93 = v91[1];
  v94 = v91[2];
  if (v89)
    v95 = 256;
  else
    v95 = 0;
  v96 = v95 | (v90 << 16) | v88;
  if (v93)
    v97 = 256;
  else
    v97 = 0;
  v54 = sub_100330920(v96, v97 | (v94 << 16) | v92);
  return v54 & 1;
}

uint64_t sub_10060BE14@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v3 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v3, &v23);
  *(_OWORD *)(inited + 16) = xmmword_10098BCC0;
  sub_1000C0AA4();
  *(_QWORD *)(v5 + 32) = 0xD000000000000013;
  *(_QWORD *)(v5 + 40) = v6;
  v7 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)v1;
  *(_BYTE *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 72) = &unk_100B80420;
  *(_QWORD *)(v5 + 80) = 0xD000000000000018;
  sub_1000C0AA4();
  *(_QWORD *)(v8 + 88) = v9;
  *(_BYTE *)(v8 + 96) = *(_BYTE *)(v1 + 9);
  *(_QWORD *)(v8 + 120) = &type metadata for Bool;
  *(_QWORD *)(v8 + 128) = 0xD00000000000001CLL;
  sub_1000C0AA4();
  *(_QWORD *)(v10 + 136) = v11;
  if (*(_BYTE *)(v1 + 10))
  {
    if (*(_BYTE *)(v1 + 10) == 1)
    {
      v12 = 0xEE006465696E6544;
      v13 = 0x6E6F697461636F6CLL;
    }
    else
    {
      sub_1000C0AA4();
      v13 = 0xD000000000000013;
    }
  }
  else
  {
    v12 = 0xE600000000000000;
    v13 = 0x6E6564646968;
  }
  *(_QWORD *)(inited + 144) = v13;
  *(_QWORD *)(inited + 152) = v12;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 176) = 0x6863726165537369;
  *(_QWORD *)(inited + 184) = 0xEB00000000676E69;
  v14 = (int *)sub_1000D9784();
  *(_BYTE *)(inited + 192) = *(_BYTE *)(v1 + v14[12]);
  *(_QWORD *)(inited + 216) = &type metadata for Bool;
  *(_QWORD *)(inited + 224) = 0x72656767697274;
  *(_QWORD *)(inited + 232) = 0xE700000000000000;
  *(_BYTE *)(inited + 240) = *(_BYTE *)(v1 + v14[15]);
  *(_QWORD *)(inited + 264) = &type metadata for ListSessionTrigger;
  *(_QWORD *)(inited + 272) = 0x697469736E617274;
  *(_QWORD *)(inited + 280) = 0xEF6449676E696E6FLL;
  v15 = (uint64_t *)(v1 + v14[16]);
  v16 = v15[1];
  if (v16)
    v17 = *v15;
  else
    v17 = 0;
  v18 = 0xE000000000000000;
  if (v16)
    v18 = v16;
  *(_QWORD *)(inited + 288) = v17;
  *(_QWORD *)(inited + 296) = v18;
  *(_QWORD *)(inited + 312) = &type metadata for String;
  *(_QWORD *)(inited + 320) = 0xD000000000000016;
  sub_1000C0AA4();
  *(_QWORD *)(inited + 328) = v19;
  *(_BYTE *)(inited + 336) = *(_BYTE *)(v1 + v14[17]);
  *(_QWORD *)(inited + 360) = &type metadata for LocationAuthorizationState;
  *(_QWORD *)(inited + 368) = 0xD00000000000001FLL;
  sub_1000C0AA4();
  *(_QWORD *)(inited + 376) = v20;
  LOBYTE(v20) = *(_BYTE *)(v1 + v14[18]);
  *(_QWORD *)(inited + 408) = &type metadata for Bool;
  *(_BYTE *)(inited + 384) = v20;
  swift_bridgeObjectRetain();
  v21 = Dictionary.init(dictionaryLiteral:)(inited);
  a1[3] = sub_1000BA294(&qword_100BF7350);
  a1[4] = sub_10060C128();
  sub_10005F164(a1);
  return ShortDescription.init(name:_:)(0x776569567473694CLL, 0xED00006C65646F4DLL, v21, v14);
}

uint64_t sub_10060C0CC(uint64_t a1)
{
  uint64_t v2;

  sub_10060C16C(&qword_100BF7360, (uint64_t)&unk_1009B7988);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_10060C104()
{
  sub_10060C16C(&qword_100BF7340, (uint64_t)&unk_1009B7960);
}

unint64_t sub_10060C128()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF7358;
  if (!qword_100BF7358)
  {
    v1 = sub_100075EB0(&qword_100BF7350);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF7358);
  }
  return result;
}

void sub_10060C16C(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for ListViewModel(255);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }
  sub_10004A298();
}

uint64_t sub_10060C1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t active;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  __n128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;

  v62 = a2;
  v3 = type metadata accessor for SavedLocation(0);
  v60 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Location.Identifier(0);
  v63 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  __chkstk_darwin(v6);
  v61 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v56 - v9;
  active = type metadata accessor for LocationViewerActiveLocationState(0);
  __chkstk_darwin(active);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v56 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v56 - v18;
  v20 = a1 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState;
  sub_100080C0C(a1 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, (uint64_t)&v56 - v18, type metadata accessor for LocationViewerActiveLocationState);
  sub_10008B21C();
  v22 = v21;
  v24 = v23;
  sub_1000215BC((uint64_t)v19, type metadata accessor for LocationViewerActiveLocationState);
  v26 = static Location.currentLocationID.getter(v25);
  if (v22 == v26 && v24 == v27)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v29 = v61;
  v57 = v13;
  v58 = v16;
  v59 = v10;
  v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v26, v27, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0)
  {
    if ((static Settings.Features.homeAndWorkEnabled.getter(v31) & 1) == 0)
      return 0;
    sub_1006EB2E8();
    v35 = v34;
    v36 = *(_QWORD *)(v34 + 16);
    if (v36)
    {
      v65 = _swiftEmptyArrayStorage;
      sub_100605C7C();
      v37 = *(unsigned __int8 *)(v60 + 80);
      v56 = v35;
      v38 = v35 + ((v37 + 32) & ~v37);
      v62 = *(_QWORD *)(v60 + 72);
      v39 = v65;
      do
      {
        sub_100080C0C(v38, (uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        SavedLocation.identifier.getter(v40);
        sub_1000215BC((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
        {
          sub_100605C7C();
          v39 = v65;
        }
        v41 = v39[2];
        if (v41 >= v39[3] >> 1)
        {
          sub_100605C7C();
          v39 = v65;
        }
        v39[2] = v41 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v63 + 32))((unint64_t)v39+ ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))+ *(_QWORD *)(v63 + 72) * v41, v29, v64);
        v65 = v39;
        v38 += v62;
        --v36;
      }
      while (v36);
      v42 = v20;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v39 = _swiftEmptyArrayStorage;
      v42 = v20;
    }
    v43 = v42;
    v44 = (uint64_t)v58;
    sub_100080C0C(v43, (uint64_t)v58, type metadata accessor for LocationViewerActiveLocationState);
    v45 = (uint64_t)v57;
    sub_100080C0C(v44, (uint64_t)v57, type metadata accessor for LocationViewerActiveLocationState);
    v46 = v64;
    v47 = _s7Weather24LocationCompositionStateOwet_0(v45, 1, v64);
    v48 = v59;
    v49 = v63;
    if ((_DWORD)v47 == 1)
      static CurrentLocation.placeholderIdentifier.getter(v47);
    else
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v59, v45, v46);
    sub_1000215BC(v44, type metadata accessor for LocationViewerActiveLocationState);
    v51 = v39[2];
    if (!v51)
    {
LABEL_30:
      (*(void (**)(char *, uint64_t, __n128))(v49 + 8))(v48, v46, v50);
      v32 = 0;
      goto LABEL_9;
    }
    v52 = (char *)v39 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
    v53 = *(_QWORD *)(v49 + 72);
    v54 = sub_100062598();
    swift_bridgeObjectRetain(v39);
    while ((dispatch thunk of static Equatable.== infix(_:_:)(v52, v48, v46, v54) & 1) == 0)
    {
      v52 += v53;
      if (!--v51)
      {
        v50 = swift_bridgeObjectRelease();
        goto LABEL_30;
      }
    }
    v55 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v49 + 8))(v48, v46, v55);
LABEL_8:
    v32 = 1;
LABEL_9:
    swift_bridgeObjectRelease();
    return v32;
  }
  return 1;
}

uint64_t sub_10060C624(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SavedLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10060C668(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = sub_100075EB0(&qword_100BF7410);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }
  sub_10004A298();
}

uint64_t sub_10060C6A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004AB030(a1, a2);
}

uint64_t sub_10060C6C8(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void (*v10)(unint64_t *__return_ptr, unint64_t *, uint64_t, __n128);
  __n128 v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  char v16[24];

  sub_10009922C(v2 + 16, (uint64_t)v16, 0);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    swift_retain();
    swift_bridgeObjectRetain(v5);
    v7 = v5 + 40;
    v8 = v6 - 1;
    v9 = 1;
    while (1)
    {
      v10 = *(void (**)(unint64_t *__return_ptr, unint64_t *, uint64_t, __n128))(v7 - 8);
      v14 = a1;
      v11 = swift_retain();
      v10(&v15, &v14, a2, v11);
      sub_10009880C();
      v12 = v15;
      if (v15 != 1)
      {
        if (!v15)
        {
          swift_release(a1);
          swift_bridgeObjectRelease(v5);
          sub_100614B1C(v9);
          return 0;
        }
        swift_release(a1);
        sub_100614B1C(v9);
        a1 = v12;
        v9 = v12;
      }
      sub_100614B0C(v12);
      if (!v8)
      {
        swift_release(a1);
        swift_bridgeObjectRelease(v5);
        return v9;
      }
      v7 += 16;
      --v8;
    }
  }
  return 1;
}

void sub_10060C7DC()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  NSURL *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  id v37;
  uint64_t v38;

  v0 = type metadata accessor for URL(0);
  __chkstk_darwin(v0);
  sub_100098694();
  UnfairLock.lock()();
  v1 = (void *)objc_opt_self(NSFileManager);
  v2 = objc_msgSend(v1, "defaultManager");
  sub_1000D0234();
  URL.path.getter(v3);
  v5 = v4;
  sub_10009D730();
  v6 = String._bridgeToObjectiveC()();
  LODWORD(v5) = objc_msgSend(v2, "fileExistsAtPath:", v6, swift_bridgeObjectRelease(v5).n128_f64[0]);

  if ((_DWORD)v5)
  {
    v7 = objc_msgSend(v1, "defaultManager");
    sub_1000D0234();
    URL._bridgeToObjectiveC()(v8);
    v10 = v9;
    sub_10009D730();
    v37 = 0;
    v11 = objc_msgSend(v7, "removeItemAtURL:error:", v10, &v37);

    v12 = v37;
    if (v11)
    {
      if (qword_100BC2430 != -1)
        swift_once(&qword_100BC2430, sub_1006F37D4);
      v13 = type metadata accessor for Logger(0);
      v14 = sub_1000AECD4(v13, (uint64_t)qword_100CAF088);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)sub_100098710(2);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Removed state file", v17, 2u);
        sub_1000986F0((uint64_t)v17);
      }

    }
    else
    {
      v18 = v12;
      v19 = (void *)_convertNSErrorToError(_:)(v12);

      swift_willThrow();
      v37 = v19;
      v20 = sub_1000BA294(&qword_100BD7910);
      v21 = sub_1000A0794(0, &qword_100BF76C8, NSError_ptr);
      swift_dynamicCast(v36, &v37, v20, v21, 0);
      v22 = (void *)v36[0];
      if (qword_100BC2430 != -1)
        swift_once(&qword_100BC2430, sub_1006F37D4);
      v23 = type metadata accessor for Logger(0);
      sub_1000AECD4(v23, (uint64_t)qword_100CAF088);
      v24 = v22;
      v25 = Logger.logObject.getter(v24);
      v27 = static os_log_type_t.error.getter(v25, v26);
      if (os_log_type_enabled(v25, v27))
      {
        v28 = (uint8_t *)sub_100098710(12);
        v29 = sub_100098710(32);
        v38 = v29;
        *(_DWORD *)v28 = 136446210;
        v30 = v24;
        v31 = objc_msgSend(v30, "description");
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v34 = v33;

        v35 = sub_1000CE1C8(v32, v34, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36);

        swift_bridgeObjectRelease(v34);
        _os_log_impl((void *)&_mh_execute_header, v25, v27, "Failed to delete state file with error: %{public}s", v28, 0xCu);
        swift_arrayDestroy(v29, 1);
        sub_1000986F0(v29);
        sub_1000986F0((uint64_t)v28);

      }
      else
      {

      }
      swift_errorRelease(v37);
    }
  }
  UnfairLock.unlock()();
  sub_100098640();
}

double sub_10060CBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  double result;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD *v35;
  _QWORD aBlock[5];
  uint64_t v37;
  char v38[24];
  char v39[24];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2 + 16;
  v12 = sub_100081FF8();
  swift_beginAccess(a2 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(a2 + 16);
  if (Strong)
  {
    v14 = Strong;
    v34 = *(id *)(Strong + 80);
    swift_release(v14);
    v15 = swift_allocObject(&unk_100B84760, 24, 7);
    v33 = v4;
    v16 = v15;
    v17 = v15 + 16;
    swift_beginAccess(v11, v38, 0, 0);
    v18 = swift_weakLoadStrong(v11);
    swift_weakInit(v17);
    swift_release(v18);
    v19 = swift_allocObject(&unk_100B847B0, 32, 7);
    *(_QWORD *)(v19 + 16) = v16;
    *(_QWORD *)(v19 + 24) = v12;
    aBlock[4] = sub_100614B00;
    v37 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100088F7C;
    aBlock[3] = &unk_100B847C8;
    v20 = _Block_copy(aBlock);
    swift_retain();
    v21 = swift_retain();
    static DispatchQoS.unspecified.getter(v21);
    v35 = _swiftEmptyArrayStorage;
    sub_1000A1C54((unint64_t *)&qword_100BFFA20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    v23 = v22;
    v24 = sub_1000BA294(&qword_100BD4F10);
    v32 = v12;
    v25 = v7;
    v26 = v24;
    sub_10003D2DC((unint64_t *)&qword_100BFFA30, &qword_100BD4F10);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v26, v27, v3, v23);
    v28 = v34;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v25);
    swift_release(v32);
    v29 = v37;
    swift_release(v16);
    v30 = v29;
  }
  else
  {
    v30 = v12;
  }
  *(_QWORD *)&result = swift_release(v30).n128_u64[0];
  return result;
}

void sub_10060CE9C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(__n128);
  __n128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[24];

  v4 = sub_1000BA294(&qword_100BF76B8);
  __chkstk_darwin(v4);
  v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_1000BA294(&qword_100BF76C0);
  __chkstk_darwin(v7);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for MainStateProcessingContext(0);
  __chkstk_darwin(v10);
  v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v24, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v14 = Strong;
    v16 = *(void (**)(__n128))(Strong + 40);
    v15 = *(_QWORD *)(Strong + 48);
    v17 = swift_retain();
    v16(v17);
    swift_release(v15);
    sub_1000DF3CC();
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v10);
    v18 = sub_10060C6C8(a2, (uint64_t)v9);
    sub_100021A14((uint64_t)v9, &qword_100BF76C0);
    if (v18 == 1)
    {
      v19 = *(_QWORD *)(v14 + 64);
      v20 = *(_QWORD *)(v14 + 72);
      sub_1000DF3CC();
      v6[1] = v20;
      v6[2] = a2;
      *v6 = v19;
      swift_retain();
      swift_bridgeObjectRetain(v20);
      sub_10061352C((uint64_t)v6);
      swift_release(v14);
      sub_100021A14((uint64_t)v6, &qword_100BF76B8);
    }
    else if (v18)
    {
      v21 = *(_QWORD *)(v14 + 64);
      v22 = *(_QWORD *)(v14 + 72);
      sub_1000DF3CC();
      v6[1] = v22;
      v6[2] = v18;
      *v6 = v21;
      sub_100614B0C(v18);
      sub_100614B0C(v18);
      swift_bridgeObjectRetain(v22);
      sub_10061352C((uint64_t)v6);
      swift_release(v14);
      sub_100021A14((uint64_t)v6, &qword_100BF76B8);
      sub_100614B1C(v18);
      sub_100614B1C(v18);
    }
    else
    {
      sub_10060C7DC();
      swift_release(v14);
    }
    sub_10006BCFC((uint64_t)v12, type metadata accessor for MainStateProcessingContext);
  }
}

void sub_10060D11C(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = type metadata accessor for SettingReader(0);
  v3 = static SettingReader.shared.getter(v2);
  if (qword_100BC2148 != -1)
    swift_once(&qword_100BC2148, sub_1004EBB18);
  v4 = SettingReader.isEnabled(_:with:)(qword_100CAEC68, 2);
  swift_release(v3);
  *(_QWORD *)(a1 + 24) = &type metadata for AutomationInfoSetting;
  *(_QWORD *)(a1 + 32) = &off_100B88E50;
  *(_BYTE *)a1 = v4 & 1;
}

uint64_t sub_10060D1B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[3];
  v4 = a2[4];
  sub_1000DB418(a2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(a1, v3, v4);
}

double sub_10060D200(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *sub_1000DB418(a2, a2[3]);
  return sub_1000A3B64(a1, v3);
}

double sub_10060D234(uint64_t a1)
{
  return sub_100376460(*(_QWORD *)(a1 + 64));
}

uint64_t sub_10060D258@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v18)
  {
    v9 = v20;
    v8 = v21;
    v10 = v19;
    v11 = a1[3];
    v12 = a1[4];
    sub_1000DB418(a1, v11);
    v13 = sub_1000BA294(&qword_100BF7508);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
    if (v17)
    {
      v14 = type metadata accessor for LocationFinder();
      v15 = (_QWORD *)swift_allocObject(v14, 88, 7);
      v15[2] = v18;
      v15[3] = v10;
      v15[4] = v9;
      v15[5] = v8;
      result = sub_10003C800(&v16, (uint64_t)(v15 + 6));
      a2[3] = v14;
      a2[4] = &off_100B788B0;
      *a2 = v15;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10060D364(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10060D380(a1, (uint64_t (*)(_QWORD))&type metadata accessor for LocationMatchHelper, (uint64_t (*)(void))&LocationMatchHelper.init(), (uint64_t)&protocol witness table for LocationMatchHelper, a2);
}

void sub_10060D380(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;

  v9 = sub_1000BE9A8(a1, a2);
  sub_1000C17AC(v9);
  v10 = a3();
  a5[3] = v5;
  a5[4] = a4;
  *a5 = v10;
  sub_10004A2A0();
}

_QWORD *sub_10060D3C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[24];
  uint64_t v37;
  _BYTE v38[24];
  uint64_t v39;
  _QWORD v40[4];
  _QWORD v41[3];
  uint64_t v42;
  _QWORD v43[4];
  _QWORD v44[3];
  uint64_t v45;

  v2 = type metadata accessor for WeatherServiceCaching(0);
  __chkstk_darwin(v2);
  v4 = &v36[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_1000BA294(&qword_100BF7630);
  v6 = __chkstk_darwin(v5);
  v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for WeatherAQIScaleCacheManager(0, v6);
  v9 = static WeatherAQIScaleCacheManager.shared.getter();
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = type metadata accessor for WDSEndpoint(0);
  dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  result = (_QWORD *)_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v12);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_1000DB418(a1, v14);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v44, &type metadata for Bool, 0xD000000000000014, 0x8000000100A0E160, &type metadata for Bool, v14, v15);
  if (LOBYTE(v44[0]) == 2)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((v44[0] & 1) != 0)
    static WeatherServiceCaching.disabled.getter(result);
  else
    static WeatherServiceCaching.enabled.getter(result);
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100BF7648);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  v19 = v45;
  if (!v45)
    goto LABEL_13;
  v20 = sub_1000DB418(v44, v45);
  v43[3] = v19;
  v21 = sub_10005F164(v43);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v21, v20, v19);
  v22 = a1[3];
  v23 = a1[4];
  sub_1000DB418(a1, v22);
  v24 = sub_1000BA294(&qword_100BF75D8);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v24, v24, v22, v23);
  v25 = v42;
  if (!v42)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v26 = sub_1000DB418(v41, v42);
  v40[3] = v25;
  v27 = sub_10005F164(v40);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v27, v26, v25);
  v28 = a1[3];
  v29 = a1[4];
  sub_1000DB418(a1, v28);
  v30 = sub_1000BA294(&qword_100BF75C8);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v30, v30, v28, v29);
  if (!v39)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v31 = a1[3];
  v32 = a1[4];
  sub_1000DB418(a1, v31);
  v33 = sub_1000BA294(&qword_100BF7650);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v33, v33, v31, v32);
  if (v37)
  {
    v34 = type metadata accessor for WeatherService(0);
    swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    v35 = WeatherService.init(scaleCacheManager:endpoint:caching:networkMonitor:authenticator:fetchOptionsProvider:serviceConfigurationProvider:)(v9, v8, v4, v43, v40, v38, v36);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v41);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v44);
    return (_QWORD *)v35;
  }
LABEL_16:
  __break(1u);
  return result;
}

void sub_10060D6F8(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = type metadata accessor for WeatherService(0);
  v7 = dispatch thunk of ResolverType.resolve<A>(_:name:)(v6, 0x5372656874616577, 0xEE00656369767265, v6, v4, v5);
  if (!v7)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1000BA294(&qword_100BF7500);
  dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (!v26)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_1000BA294(&qword_100BD1408);
  dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (!v24)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v15 = a1[3];
  v16 = a1[4];
  sub_1000DB418(a1, v15);
  v17 = sub_1000BA294(&qword_100BCF678);
  dispatch thunk of ResolverType.resolve<A>(_:)(v17, v17, v15, v16);
  if (v22)
  {
    v18 = type metadata accessor for GeocodeWeatherService();
    swift_allocObject(v18, 144, 7);
    v19 = sub_100152A40(v8, &v25, &v23, &v21);
    a2[3] = v18;
    sub_1000A1C54(&qword_100BF7678, 255, (uint64_t (*)(uint64_t))type metadata accessor for GeocodeWeatherService);
    a2[4] = v20;
    *a2 = v19;
    return;
  }
LABEL_9:
  __break(1u);
}

char *sub_10060D8A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD v13[5];
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = (char *)dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!v16)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = sub_1000BA294(&qword_100BC43F0);
  result = (char *)dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
  if (!v14)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1000BA294(&qword_100BD1408);
  result = (char *)dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (v13[3])
  {
    v12 = objc_allocWithZone((Class)type metadata accessor for DebugOfflineViewController());
    return sub_1002C56E0(v16, v17, v18, v19, v14, v15, v13);
  }
LABEL_7:
  __break(1u);
  return result;
}

double sub_10060D9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  __n128 v32;
  void (*v33)(char *, uint64_t, __n128);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __n128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __n128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __n128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, uint64_t, uint64_t);
  uint64_t v147;
  __n128 v148;
  void (*v149)(char *, uint64_t, __n128);
  uint64_t v150;
  uint64_t v151;
  __n128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double result;
  uint64_t v162;
  uint64_t v163;

  v162 = a2;
  v2 = type metadata accessor for Container.TestSuite(0);
  v163 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v162 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Scope(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v162 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294((uint64_t *)&unk_100C0A200);
  v10 = RegistrationContainer.register<A>(_:name:factory:)(v9, 0, 0, sub_10060E828, 0, v9);
  swift_release(v10);
  v11 = sub_1000BA294(&qword_100BED428);
  v12 = RegistrationContainer.register<A>(_:name:factory:)(v11, 0, 0, sub_10060EACC, 0, v11);
  swift_release(v12);
  v13 = sub_1000BA294(&qword_100BED430);
  v14 = RegistrationContainer.register<A>(_:name:factory:)(v13, 0, 0, sub_10060EAE0, 0, v13);
  swift_release(v14);
  v15 = sub_1000BA294(&qword_100BF7518);
  v16 = RegistrationContainer.register<A>(_:name:factory:)(v15, 0, 0, sub_10060EAF4, 0, v15);
  swift_release(v16);
  v17 = sub_1000BA294(&qword_100BF7520);
  v18 = RegistrationContainer.register<A>(_:name:factory:)(v17, 0, 0, sub_10060EB78, 0, v17);
  swift_release(v18);
  v19 = sub_1000BA294(&qword_100BC4770);
  v20 = RegistrationContainer.register<A>(_:name:factory:)(v19, 0, 0, sub_10060EDCC, 0, v19);
  swift_release(v20);
  v21 = sub_1000BA294(&qword_100BF7528);
  v22 = RegistrationContainer.register<A>(_:name:factory:)(v21, 0, 0, sub_10060EF9C, 0, v21);
  swift_release(v22);
  v23 = type metadata accessor for MainReducer();
  v24 = RegistrationContainer.register<A>(_:name:factory:)(v23, 0, 0, sub_10060EFB0, 0, v23);
  swift_release(v24);
  v25 = sub_1000BA294(&qword_100BF7530);
  v26 = RegistrationContainer.register<A>(_:name:factory:)(v25, 0, 0, sub_10060FD08, 0, v25);
  swift_release(v26);
  v27 = sub_1000BA294(&qword_100BF7538);
  v28 = RegistrationContainer.register<A>(_:name:factory:)(v27, 0, 0, sub_10060FE64, 0, v27);
  v29 = enum case for Scope.singleton(_:);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v30(v8, enum case for Scope.singleton(_:), v5);
  v31 = Definition.inScope(_:)(v8);
  swift_release(v31);
  v32 = swift_release(v28);
  v33 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
  v33(v8, v5, v32);
  v34 = sub_1000BA294(&qword_100BF7540);
  v35 = RegistrationContainer.register<A>(_:name:factory:)(v34, 0xD000000000000010, 0x8000000100A0E120, sub_10060FFC8, 0, v34);
  swift_release(v35);
  v36 = RegistrationContainer.register<A>(_:name:factory:)(v34, 0x6574736973726550, 0xEB0000000065636ELL, sub_100610118, 0, v34);
  swift_release(v36);
  v37 = sub_1000BA294(&qword_100BF7548);
  v38 = RegistrationContainer.register<A>(_:name:factory:)(v37, 0, 0, sub_10061018C, 0, v37);
  swift_release(v38);
  v39 = RegistrationContainer.register<A>(_:name:factory:)(&type metadata for DiscardStateProcessor, 0, 0, sub_10061019C, 0, &type metadata for DiscardStateProcessor);
  swift_release(v39);
  v40 = sub_1000BA294(&qword_100BF7550);
  v41 = RegistrationContainer.register<A>(_:name:factory:)(v40, 0, 0, sub_1006101A8, 0, v40);
  swift_release(v41);
  v42 = sub_1000BA294(&qword_100BF7558);
  v43 = RegistrationContainer.register<A>(_:name:factory:)(v42, 0, 0, sub_1006101BC, 0, v42);
  swift_release(v43);
  v44 = sub_1000BA294(&qword_100BF7560);
  v45 = RegistrationContainer.register<A>(_:name:factory:)(v44, 0, 0, sub_1006101D0, 0, v44);
  swift_release(v45);
  v46 = type metadata accessor for LocationAuthorizationReducer();
  v47 = RegistrationContainer.register<A>(_:name:factory:)(v46, 0, 0, sub_1006104C8, 0, v46);
  swift_release(v47);
  v48 = sub_1000BA294(&qword_100BF7568);
  v49 = RegistrationContainer.register<A>(_:name:factory:)(v48, 0, 0, sub_1006104E4, 0, v48);
  swift_release(v49);
  v50 = sub_1000BA294(&qword_100BF7570);
  v51 = RegistrationContainer.register<A>(_:name:factory:)(v50, 0, 0, sub_100610584, 0, v50);
  swift_release(v51);
  v52 = sub_1000BA294(&qword_100BF7578);
  v53 = RegistrationContainer.register<A>(_:name:factory:)(v52, 0, 0, sub_100610598, 0, v52);
  swift_release(v53);
  v54 = sub_1000BA294(&qword_100BF7580);
  v55 = RegistrationContainer.register<A>(_:name:factory:)(v54, 0, 0, sub_1006105AC, 0, v54);
  swift_release(v55);
  v56 = sub_1000BA294(&qword_100BF7588);
  v57 = RegistrationContainer.register<A>(_:name:factory:)(v56, 0, 0, sub_1006105C0, 0, v56);
  swift_release(v57);
  v58 = sub_1000BA294(&qword_100BF7590);
  v59 = RegistrationContainer.register<A>(_:name:factory:)(v58, 0, 0, sub_1006105D4, 0, v58);
  swift_release(v59);
  v60 = sub_1000BA294(&qword_100BF7598);
  v61 = RegistrationContainer.register<A>(_:name:factory:)(v60, 0, 0, sub_1006108C8, 0, v60);
  swift_release(v61);
  v62 = sub_1000BA294(&qword_100BF75A0);
  v63 = RegistrationContainer.register<A>(_:name:factory:)(v62, 0, 0, sub_100610BBC, 0, v62);
  swift_release(v63);
  v64 = sub_1000BA294(&qword_100BF75A8);
  v65 = RegistrationContainer.register<A>(_:name:factory:)(v64, 0, 0, sub_100610BD0, 0, v64);
  swift_release(v65);
  v66 = sub_1000BA294(&qword_100BF75B0);
  v67 = RegistrationContainer.register<A>(_:name:factory:)(v66, 0, 0, sub_100610BE4, 0, v66);
  swift_release(v67);
  v68 = sub_1000BA294(&qword_100BF75B8);
  v69 = RegistrationContainer.register<A>(_:name:factory:)(v68, 0, 0, sub_100610BF8, 0, v68);
  swift_release(v69);
  v70 = type metadata accessor for WeatherService(0);
  v71 = RegistrationContainer.register<A>(_:name:factory:)(v70, 0x5372656874616577, 0xEE00656369767265, sub_100610C0C, 0, v70);
  v72 = enum case for Scope.containerSingleton(_:);
  v30(v8, enum case for Scope.containerSingleton(_:), v5);
  v73 = Definition.inScope(_:)(v8);
  swift_release(v73);
  v74 = swift_release(v71);
  v33(v8, v5, v74);
  v75 = sub_1000BA294(&qword_100BF75C0);
  v76 = RegistrationContainer.register<A>(_:name:factory:)(v75, 0, 0, sub_100610FA4, 0, v75);
  v30(v8, v29, v5);
  v77 = Definition.inScope(_:)(v8);
  swift_release(v77);
  v78 = swift_release(v76);
  v33(v8, v5, v78);
  v79 = type metadata accessor for WDSEndpoint(0);
  v80 = RegistrationContainer.register<A>(_:name:factory:)(v79, 0, 0, sub_1006117E0, 0, v79);
  v30(v8, v72, v5);
  v81 = Definition.inScope(_:)(v8);
  swift_release(v81);
  v82 = swift_release(v80);
  v33(v8, v5, v82);
  v83 = sub_1000BA294(&qword_100BF75C8);
  v84 = RegistrationContainer.register<A>(_:name:factory:)(v83, 0, 0, sub_100611CF8, 0, v83);
  swift_release(v84);
  v85 = sub_1000BA294(&qword_100BF75D0);
  v86 = RegistrationContainer.register<A>(_:name:factory:)(v85, 0, 0, sub_100611DDC, 0, v85);
  swift_release(v86);
  v87 = sub_1000BA294(&qword_100BF75D8);
  v88 = RegistrationContainer.register<A>(_:name:factory:)(v87, 0, 0, sub_100611E00, 0, v87);
  v30(v8, v29, v5);
  v89 = Definition.inScope(_:)(v8);
  swift_release(v89);
  v90 = swift_release(v88);
  v33(v8, v5, v90);
  v91 = sub_1000BA294(&qword_100BF75E0);
  v92 = RegistrationContainer.register<A>(_:name:factory:)(v91, 0, 0, sub_100612048, 0, v91);
  v30(v8, v29, v5);
  v93 = Definition.inScope(_:)(v8);
  swift_release(v93);
  v94 = swift_release(v92);
  v33(v8, v5, v94);
  v95 = type metadata accessor for NotificationsStoreObserver();
  v96 = RegistrationContainer.register<A>(_:name:factory:)(v95, 0, 0, sub_1006120B4, 0, v95);
  v30(v8, v72, v5);
  v97 = Definition.inScope(_:)(v8);
  swift_release(v97);
  v98 = swift_release(v96);
  v33(v8, v5, v98);
  v99 = type metadata accessor for NotificationsOptInStoreObserver();
  v100 = RegistrationContainer.register<A>(_:name:factory:)(v99, 0, 0, sub_1006121C4, 0, v99);
  v30(v8, v72, v5);
  v101 = Definition.inScope(_:)(v8);
  swift_release(v101);
  v102 = swift_release(v100);
  v33(v8, v5, v102);
  v103 = type metadata accessor for ReverseGeocodingStoreObserver();
  v104 = RegistrationContainer.register<A>(_:name:factory:)(v103, 0, 0, sub_100612324, 0, v103);
  swift_release(v104);
  v105 = type metadata accessor for SavedLocationsStoreObserver();
  v106 = RegistrationContainer.register<A>(_:name:factory:)(v105, 0, 0, sub_1006124BC, 0, v105);
  v30(v8, v72, v5);
  v107 = Definition.inScope(_:)(v8);
  swift_release(v107);
  v108 = swift_release(v106);
  v33(v8, v5, v108);
  v109 = type metadata accessor for WeatherDataStoreObserver();
  v110 = RegistrationContainer.register<A>(_:name:factory:)(v109, 0, 0, sub_100612688, 0, v109);
  v30(v8, v72, v5);
  v111 = Definition.inScope(_:)(v8);
  swift_release(v111);
  v112 = swift_release(v110);
  v33(v8, v5, v112);
  v113 = type metadata accessor for WeatherMapOverlayDataStoreObserver();
  v114 = RegistrationContainer.register<A>(_:name:factory:)(v113, 0, 0, sub_1006127E8, 0, v113);
  v30(v8, v72, v5);
  v115 = Definition.inScope(_:)(v8);
  swift_release(v115);
  v116 = swift_release(v114);
  v33(v8, v5, v116);
  v117 = type metadata accessor for WidgetReloadStoreObserver();
  v118 = RegistrationContainer.register<A>(_:name:factory:)(v117, 0, 0, sub_1006128A4, 0, v117);
  v30(v8, v72, v5);
  v119 = Definition.inScope(_:)(v8);
  swift_release(v119);
  v120 = swift_release(v118);
  v33(v8, v5, v120);
  v121 = type metadata accessor for LocationViewerStoreObserver(0);
  v122 = RegistrationContainer.register<A>(_:name:factory:)(v121, 0, 0, sub_100612940, 0, v121);
  v30(v8, v72, v5);
  v123 = Definition.inScope(_:)(v8);
  swift_release(v123);
  v124 = swift_release(v122);
  v33(v8, v5, v124);
  v125 = type metadata accessor for OpenL2HandlerObserver();
  v126 = RegistrationContainer.register<A>(_:name:factory:)(v125, 0, 0, sub_1006129DC, 0, v125);
  v30(v8, v72, v5);
  v127 = Definition.inScope(_:)(v8);
  swift_release(v127);
  v128 = swift_release(v126);
  v33(v8, v5, v128);
  v129 = type metadata accessor for InteractionDonationStoreObserver();
  v130 = RegistrationContainer.register<A>(_:name:factory:)(v129, 0, 0, sub_100612CA4, 0, v129);
  v30(v8, v72, v5);
  v131 = Definition.inScope(_:)(v8);
  swift_release(v131);
  v132 = swift_release(v130);
  v33(v8, v5, v132);
  v133 = type metadata accessor for WeatherConditionBackgroundStoreObserver(0);
  v134 = RegistrationContainer.register<A>(_:name:factory:)(v133, 0, 0, sub_100612E10, 0, v133);
  v30(v8, v72, v5);
  v135 = Definition.inScope(_:)(v8);
  swift_release(v135);
  v136 = swift_release(v134);
  v33(v8, v5, v136);
  v137 = type metadata accessor for TimeStoreObserver();
  v138 = RegistrationContainer.register<A>(_:name:factory:)(v137, 0, 0, sub_100613004, 0, v137);
  v30(v8, v72, v5);
  v139 = Definition.inScope(_:)(v8);
  swift_release(v139);
  v140 = swift_release(v138);
  v33(v8, v5, v140);
  v141 = v162;
  swift_retain();
  v142 = RegistrationContainer.register<A>(_:name:factory:)(&type metadata for Bool, 0xD000000000000017, 0x8000000100A0E140, sub_1006132F4, v141, &type metadata for Bool);
  v143 = swift_release(v141);
  v144 = enum case for Container.TestSuite.performance(_:);
  v145 = v163;
  v146 = *(void (**)(char *, uint64_t, uint64_t))(v163 + 104);
  ((void (*)(char *, _QWORD, uint64_t, __n128))v146)(v4, enum case for Container.TestSuite.performance(_:), v2, v143);
  v147 = Definition.whenTesting(_:_:)(v4, sub_100123C10, 0);
  swift_release(v147);
  v148 = swift_release(v142);
  v149 = *(void (**)(char *, uint64_t, __n128))(v145 + 8);
  v149(v4, v2, v148);
  v150 = RegistrationContainer.register<A>(_:name:factory:)(&type metadata for Bool, 0xD000000000000014, 0x8000000100A0E160, sub_100123C10, 0, &type metadata for Bool);
  v146(v4, v144, v2);
  v151 = Definition.whenTesting(_:_:)(v4, sub_1001B8DD4, 0);
  swift_release(v151);
  v152 = swift_release(v150);
  v149(v4, v2, v152);
  v153 = type metadata accessor for WeatherDataDebounceMiddleware(0);
  v154 = RegistrationContainer.register<A>(_:name:factory:)(v153, 0, 0, sub_100613144, 0, v153);
  swift_release(v154);
  v155 = type metadata accessor for ShortcutItemMiddleware();
  v156 = RegistrationContainer.register<A>(_:name:factory:)(v155, 0, 0, sub_1006131D4, 0, v155);
  swift_release(v156);
  v157 = type metadata accessor for ShortcutItemUpdater();
  v158 = RegistrationContainer.register<A>(_:name:factory:)(v157, 0, 0, sub_100613240, 0, v157);
  swift_release(v158);
  v159 = type metadata accessor for UnitManagerMiddleware();
  v160 = RegistrationContainer.register<A>(_:name:factory:)(v159, 0, 0, sub_1006132CC, 0, v159);
  *(_QWORD *)&result = swift_release(v160).n128_u64[0];
  return result;
}

uint64_t sub_10060E828(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24[2];
  _QWORD v25[3];
  uint64_t active;
  _UNKNOWN **v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v30;
  if (!v30)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = v32;
  v7 = v33;
  v9 = v31;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BED428);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v29)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = *sub_1000DB418(v28, v29);
  active = type metadata accessor for ActiveLocationInputFactory();
  v27 = &off_100B66978;
  v25[0] = v13;
  sub_10003B59C((uint64_t)v25, (uint64_t)v24);
  v14 = swift_allocObject(&unk_100B845D0, 56, 7);
  sub_10003C800(v24, v14 + 16);
  swift_retain();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
  v15 = swift_allocObject(&unk_100B845F8, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1000A2334;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = swift_allocObject(&unk_100B84620, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_1000A22E4;
  *(_QWORD *)(v16 + 24) = v15;
  v17 = a1[3];
  v18 = a1[4];
  sub_1000DB418(a1, v17);
  v19 = sub_1000BA294(&qword_100BED430);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v19, v19, v17, v18);
  if (v29)
  {
    v20 = *sub_1000DB418(v28, v29);
    active = type metadata accessor for ActiveLocationModelFactory();
    v27 = &off_100B66968;
    v25[0] = v20;
    sub_10003B59C((uint64_t)v25, (uint64_t)v24);
    v21 = swift_allocObject(&unk_100B84648, 56, 7);
    sub_10003C800(v24, v21 + 16);
    swift_retain();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
    v22 = swift_allocObject(&unk_100B84670, 32, 7);
    *(_QWORD *)(v22 + 16) = sub_10014352C;
    *(_QWORD *)(v22 + 24) = v21;
    v23 = sub_1000BA294((uint64_t *)&unk_100C0A200);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    return sub_10004EB7C(v6, v9, v8, v7, sub_10055D2D4, 0, sub_1000EBF68, v16, sub_10013DB04, v22);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_10060EACC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for ActiveLocationInputFactory, (uint64_t)&off_100B66978, a2);
}

void sub_10060EAE0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for ActiveLocationModelFactory, (uint64_t)&off_100B66968, a2);
}

uint64_t sub_10060EAF4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = type metadata accessor for Tracker(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    v7 = result;
    v8 = type metadata accessor for MainTracker();
    result = swift_allocObject(v8, 24, 7);
    *(_QWORD *)(result + 16) = v7;
    a2[3] = v8;
    a2[4] = (uint64_t)&off_100B9A218;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10060EB78@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  v8 = v42;
  if (!v42)
  {
    __break(1u);
    goto LABEL_7;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1000BA294(&qword_100BF7518);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (!v41)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v33 = v43;
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  v15 = v36;
  if (!v36)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v16 = v38;
  v32 = v39;
  v17 = v37;
  v19 = a1[3];
  v18 = a1[4];
  sub_1000DB418(a1, v19);
  v20 = sub_1000BA294(&qword_100BDC598);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v20, v20, v19, v18);
  if (v35)
  {
    v21 = sub_100068EB4((uint64_t)v40, v41);
    v22 = __chkstk_darwin(v21);
    v24 = (uint64_t *)((char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v25 + 16))(v24, v22);
    v26 = sub_100068EB4((uint64_t)v34, v35);
    v27 = __chkstk_darwin(v26);
    v29 = (uint64_t **)((char *)&v32 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v30 + 16))(v29, v27);
    v31 = sub_100147308(v8, v33, *v24, v15, v17, v16, v32, *v29);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v34);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v40);
    result = type metadata accessor for MainInteractor();
    a2[3] = result;
    a2[4] = &off_100B77A00;
    *a2 = v31;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10060EDCC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18[2];
  _QWORD v19[5];
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v22;
  if (v22)
  {
    v8 = v24;
    v7 = v25;
    v9 = v23;
    v10 = a1[3];
    v11 = a1[4];
    sub_1000DB418(a1, v10);
    v12 = sub_1000BA294(&qword_100BF7528);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
    if (v21)
    {
      v13 = *sub_1000DB418(v20, v21);
      v19[3] = type metadata accessor for MainViewModelFactory();
      v19[4] = &off_100B82750;
      v19[0] = v13;
      sub_10003B59C((uint64_t)v19, (uint64_t)v18);
      v14 = swift_allocObject(&unk_100B84558, 56, 7);
      sub_10003C800(v18, v14 + 16);
      swift_retain();
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v19);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v20);
      v15 = swift_allocObject(&unk_100B84580, 32, 7);
      *(_QWORD *)(v15 + 16) = sub_1006149FC;
      *(_QWORD *)(v15 + 24) = v14;
      v16 = swift_allocObject(&unk_100B845A8, 32, 7);
      *(_QWORD *)(v16 + 16) = sub_1000A2A88;
      *(_QWORD *)(v16 + 24) = v15;
      v17 = sub_1000BA294(&qword_100BC4770);
      swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
      return sub_10002F9EC(v6, v9, v8, v7, sub_1001434BC, 0, sub_1000A2ACC, 0, sub_1000A2A68, v16);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10060EF9C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for MainViewModelFactory, (uint64_t)&off_100B82750, a2);
}

uint64_t sub_10060EFB0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 v109;
  uint64_t v110;
  uint64_t **v111;
  uint64_t v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  uint64_t **v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  uint64_t v120;
  uint64_t **v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  uint64_t v125;
  uint64_t **v126;
  uint64_t v127;
  uint64_t v128;
  __n128 v129;
  uint64_t v130;
  uint64_t **v131;
  uint64_t v132;
  uint64_t v133;
  __n128 v134;
  uint64_t v135;
  _QWORD **v136;
  uint64_t v137;
  uint64_t v138;
  __n128 v139;
  uint64_t v140;
  uint64_t **v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD v144[4];
  uint64_t **v145;
  _QWORD *v146;
  uint64_t **v147;
  uint64_t **v148;
  _QWORD *v149;
  uint64_t *v150;
  _QWORD *v151;
  uint64_t **v152;
  _QWORD *v153;
  uint64_t *v154;
  _QWORD *v155;
  uint64_t *v156;
  uint64_t *v157;
  _QWORD *v158;
  uint64_t *v159;
  _QWORD *v160;
  uint64_t *v161;
  _QWORD *v162;
  uint64_t *v163;
  _QWORD *v164;
  uint64_t *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD v171[3];
  uint64_t v172;
  _QWORD v173[3];
  uint64_t v174;
  _QWORD v175[3];
  uint64_t v176;
  _QWORD v177[3];
  uint64_t v178;
  _QWORD v179[3];
  uint64_t v180;
  _QWORD v181[3];
  uint64_t v182;
  _QWORD v183[3];
  uint64_t v184;
  _QWORD v185[3];
  uint64_t v186;
  _QWORD v187[3];
  uint64_t v188;
  _QWORD v189[3];
  uint64_t v190;
  _QWORD v191[3];
  uint64_t v192;
  _QWORD v193[3];
  uint64_t v194;
  _QWORD v195[3];
  uint64_t v196;
  _QWORD v197[3];
  uint64_t v198;
  _QWORD v199[3];
  uint64_t v200;
  _QWORD v201[3];
  uint64_t v202;
  _QWORD v203[3];
  uint64_t v204;
  _QWORD v205[3];
  uint64_t v206;
  _QWORD v207[3];
  uint64_t v208;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BF7660);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!v208)
  {
    __break(1u);
    goto LABEL_22;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = sub_1000BA294(&qword_100BF7550);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
  if (!v206)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1000BA294(&qword_100BF7558);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (!v204)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_1000BA294(&qword_100BF7560);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (!v202)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v15 = a1[3];
  v16 = a1[4];
  sub_1000DB418(a1, v15);
  v17 = sub_1000BA294(&qword_100BF7568);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v17, v17, v15, v16);
  if (!v200)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = a1[3];
  v19 = a1[4];
  sub_1000DB418(a1, v18);
  v20 = sub_1000BA294(&qword_100BF7588);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v20, v20, v18, v19);
  if (!v198)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v21 = a1[3];
  v22 = a1[4];
  sub_1000DB418(a1, v21);
  v23 = sub_1000BA294(&qword_100BF7590);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v23, v23, v21, v22);
  if (!v196)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v24 = a1[3];
  v25 = a1[4];
  sub_1000DB418(a1, v24);
  v26 = sub_1000BA294(&qword_100BF7598);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v26, v26, v24, v25);
  if (!v194)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v27 = a1[3];
  v28 = a1[4];
  sub_1000DB418(a1, v27);
  v29 = sub_1000BA294(&qword_100BED390);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v29, v29, v27, v28);
  if (!v192)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v30 = a1[3];
  v31 = a1[4];
  sub_1000DB418(a1, v30);
  v32 = sub_1000BA294(&qword_100BF75B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v32, v32, v30, v31);
  if (!v190)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v33 = a1[3];
  v34 = a1[4];
  sub_1000DB418(a1, v33);
  v35 = sub_1000BA294(&qword_100BE7B18);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v35, v35, v33, v34);
  if (!v188)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v36 = a1[3];
  v37 = a1[4];
  sub_1000DB418(a1, v36);
  v38 = sub_1000BA294(&qword_100BF75B8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v38, v38, v36, v37);
  if (!v186)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v39 = a1[3];
  v40 = a1[4];
  sub_1000DB418(a1, v39);
  v41 = sub_1000BA294(&qword_100BF7570);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v41, v41, v39, v40);
  if (!v184)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v42 = a1[3];
  v43 = a1[4];
  sub_1000DB418(a1, v42);
  v44 = sub_1000BA294(&qword_100BF7578);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v44, v44, v42, v43);
  if (!v182)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v45 = a1[3];
  v46 = a1[4];
  sub_1000DB418(a1, v45);
  v47 = sub_1000BA294(&qword_100BD2140);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v47, v47, v45, v46);
  if (!v180)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v48 = a1[3];
  v49 = a1[4];
  sub_1000DB418(a1, v48);
  v50 = sub_1000BA294(&qword_100BF7668);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v50, v50, v48, v49);
  if (!v178)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v51 = a1[3];
  v52 = a1[4];
  sub_1000DB418(a1, v51);
  v53 = sub_1000BA294(&qword_100BCC980);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v53, v53, v51, v52);
  if (!v176)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v54 = a1[3];
  v55 = a1[4];
  sub_1000DB418(a1, v54);
  v56 = sub_1000BA294(&qword_100BF7670);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v56, v56, v54, v55);
  if (!v174)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v57 = a1[3];
  v58 = a1[4];
  sub_1000DB418(a1, v57);
  v59 = sub_1000BA294(&qword_100BD22B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v59, v59, v57, v58);
  if (v172)
  {
    v60 = sub_100068EB4((uint64_t)v207, v208);
    v170 = v144;
    v61 = __chkstk_darwin(v60);
    v165 = (_QWORD *)((char *)v144 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v63 + 16))(v61);
    v64 = sub_100068EB4((uint64_t)v205, v206);
    v169 = v144;
    v65 = __chkstk_darwin(v64);
    v163 = (_QWORD *)((char *)v144 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v67 + 16))(v65);
    v68 = sub_100068EB4((uint64_t)v203, v204);
    v168 = v144;
    v69 = __chkstk_darwin(v68);
    v161 = (_QWORD *)((char *)v144 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v71 + 16))(v69);
    v72 = sub_100068EB4((uint64_t)v201, v202);
    v167 = v144;
    v73 = __chkstk_darwin(v72);
    v159 = (_QWORD *)((char *)v144 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v75 + 16))(v73);
    v76 = sub_100068EB4((uint64_t)v199, v200);
    v166 = v144;
    v77 = __chkstk_darwin(v76);
    v157 = (_QWORD *)((char *)v144 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v79 + 16))(v77);
    v80 = sub_100068EB4((uint64_t)v197, v198);
    v164 = v144;
    v81 = __chkstk_darwin(v80);
    v156 = (_QWORD *)((char *)v144 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v83 + 16))(v81);
    v84 = sub_100068EB4((uint64_t)v195, v196);
    v162 = v144;
    v85 = __chkstk_darwin(v84);
    v154 = (_QWORD *)((char *)v144 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v87 + 16))(v85);
    v88 = sub_100068EB4((uint64_t)v193, v194);
    v160 = v144;
    v89 = __chkstk_darwin(v88);
    v152 = (uint64_t **)((char *)v144 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v91 + 16))(v89);
    v92 = sub_100068EB4((uint64_t)v191, v192);
    v158 = v144;
    v93 = __chkstk_darwin(v92);
    v150 = (_QWORD *)((char *)v144 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v95 + 16))(v93);
    v96 = sub_100068EB4((uint64_t)v189, v190);
    v155 = v144;
    v97 = __chkstk_darwin(v96);
    v148 = (uint64_t **)((char *)v144 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v99 + 16))(v97);
    v100 = sub_100068EB4((uint64_t)v187, v188);
    v153 = v144;
    v101 = __chkstk_darwin(v100);
    v147 = (uint64_t **)((char *)v144 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v103 + 16))(v101);
    v104 = sub_100068EB4((uint64_t)v185, v186);
    v151 = v144;
    v105 = __chkstk_darwin(v104);
    v145 = (uint64_t **)((char *)v144 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v107 + 16))(v105);
    v108 = sub_100068EB4((uint64_t)v183, v184);
    v149 = v144;
    v109 = __chkstk_darwin(v108);
    v111 = (uint64_t **)((char *)v144 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v112 + 16))(v111, v109);
    v113 = sub_100068EB4((uint64_t)v181, v182);
    v146 = v144;
    v114 = __chkstk_darwin(v113);
    v116 = (uint64_t **)((char *)v144 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v117 + 16))(v116, v114);
    v118 = sub_100068EB4((uint64_t)v179, v180);
    v144[3] = v144;
    v119 = __chkstk_darwin(v118);
    v121 = (uint64_t **)((char *)v144 - ((v120 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v122 + 16))(v121, v119);
    v123 = sub_100068EB4((uint64_t)v177, v178);
    v144[2] = v144;
    v124 = __chkstk_darwin(v123);
    v126 = (uint64_t **)((char *)v144 - ((v125 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v127 + 16))(v126, v124);
    v128 = sub_100068EB4((uint64_t)v175, v176);
    v144[1] = v144;
    v129 = __chkstk_darwin(v128);
    v131 = (uint64_t **)((char *)v144 - ((v130 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v132 + 16))(v131, v129);
    v133 = sub_100068EB4((uint64_t)v173, v174);
    v144[0] = v144;
    v134 = __chkstk_darwin(v133);
    v136 = (_QWORD **)((char *)v144 - ((v135 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(_QWORD **, __n128))(v137 + 16))(v136, v134);
    v138 = sub_100068EB4((uint64_t)v171, v172);
    v139 = __chkstk_darwin(v138);
    v141 = (uint64_t **)((char *)v144 - ((v140 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v142 + 16))(v141, v139);
    v143 = sub_100067688(*v165, *v163, *v161, *v159, *v157, *v156, *v154, *v152, *v150, *v148, *v147, *v145, *v111, *v116, *v121, *v126, *v131, *v136, *v141);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v171);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v173);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v175);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v177);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v179);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v181);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v183);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v185);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v187);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v189);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v191);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v193);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v195);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v197);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v199);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v201);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v203);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v205);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v207);
    return (uint64_t)v143;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10060FD08(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = type metadata accessor for MainReducer();
  v7 = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v7)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  v8 = v7;
  swift_retain();
  sub_10011EF4C();
  v10 = v9;
  v11 = *(_QWORD *)(v9 + 16);
  if (v11 >= *(_QWORD *)(v9 + 24) >> 1)
  {
    sub_10011EF4C();
    v10 = v17;
  }
  *(_QWORD *)(v10 + 16) = v11 + 1;
  v12 = v10 + 16 * v11;
  *(_QWORD *)(v12 + 32) = sub_1000A08C0;
  *(_QWORD *)(v12 + 40) = v8;
  swift_release(v8);
  v13 = a1[3];
  v14 = a1[4];
  sub_1000DB418(a1, v13);
  dispatch thunk of ResolverType.resolve<A>(_:)(&type metadata for ContentStatusBannerReducer, &type metadata for ContentStatusBannerReducer, v13, v14);
  if ((v19 & 1) != 0)
    goto LABEL_9;
  v15 = *(_QWORD *)(v10 + 16);
  if (v15 >= *(_QWORD *)(v10 + 24) >> 1)
  {
    sub_10011EF4C();
    v10 = v18;
  }
  *(_QWORD *)(v10 + 16) = v15 + 1;
  v16 = v10 + 16 * v15;
  *(_QWORD *)(v16 + 32) = sub_1000A0930;
  *(_QWORD *)(v16 + 40) = 0;
  *a2 = v10;
}

uint64_t sub_10060FE64(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294((uint64_t *)&unk_100BCEF20);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = result;
  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = sub_1000BA294(&qword_100BF7540);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v9, 0x6574736973726550, 0xEB0000000065636ELL, v9, v7, v8);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v10 = result;
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BF7548);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (v17)
  {
    v14 = qword_100BCDA38;
    v15 = off_100BCDA40;
    v16 = sub_1000BA294(&qword_100BF7538);
    swift_allocObject(v16, 88, 7);
    swift_bridgeObjectRetain(v15);
    return sub_100132C9C(v6, v10, v17, v18, v14, (uint64_t)v15, 1.0);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10060FFC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = sub_1000BA294(&qword_100BF7540);
  v3 = swift_allocObject(v2, 24, 7);
  *(_QWORD *)(v3 + 16) = _swiftEmptyArrayStorage;
  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&type metadata for DiscardStateProcessor, &type metadata for DiscardStateProcessor, v4, v5);
  if ((v9 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = swift_allocObject(&unk_100B84530, 24, 7);
    *(_QWORD *)(v7 + 16) = v8;
    sub_100036FA8((uint64_t)sub_1006148D0, v7);
    swift_release(v7);
    sub_100036FA8((uint64_t)sub_1006148D8, 0);
    sub_100036FA8((uint64_t)sub_1006148F8, 0);
    sub_100036FA8((uint64_t)sub_100614918, 0);
    sub_100036FA8((uint64_t)sub_100614938, 0);
    sub_100036FA8((uint64_t)sub_100614958, 0);
    sub_100036FA8((uint64_t)sub_100614978, 0);
    sub_100036FA8((uint64_t)sub_100614998, 0);
    sub_100036FA8((uint64_t)sub_1006149B8, 0);
    return v3;
  }
  return result;
}

uint64_t sub_100610118()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1000BA294(&qword_100BF7540);
  v1 = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(v1 + 16) = _swiftEmptyArrayStorage;
  sub_100036FA8((uint64_t)sub_100614860, 0);
  sub_100036FA8((uint64_t)sub_100614880, 0);
  sub_100036FA8((uint64_t)sub_1006148A0, 0);
  return v1;
}

void sub_10061018C(_QWORD *a1@<X8>)
{
  *a1 = sub_10061485C;
  a1[1] = 0;
}

void sub_10061019C(_QWORD *a1@<X8>)
{
  *a1 = 7200;
}

void sub_1006101A8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for AppLifecycleReducer, (uint64_t)&off_100B95850, a2);
}

void sub_1006101BC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for AppConfigurationReducer, (uint64_t)&off_100B85FC8, a2);
}

uint64_t sub_1006101D0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD v39[3];
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  _QWORD v45[6];

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = type metadata accessor for LocationAuthorizationReducer();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v45[3] = v6;
  v45[4] = &off_100B6C4D8;
  v45[0] = result;
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BF7580);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v44)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BF75A0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!v42)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_1000DB418(a1, v14);
  v16 = sub_1000BA294(&qword_100BF75A8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (v40)
  {
    v17 = sub_100068EB4((uint64_t)v45, v6);
    v18 = __chkstk_darwin(v17);
    v20 = (_QWORD *)((char *)&v39[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v21 + 16))(v20, v18);
    v22 = sub_100068EB4((uint64_t)v43, v44);
    v23 = __chkstk_darwin(v22);
    v25 = (_QWORD *)((char *)&v39[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v26 + 16))(v25, v23);
    v27 = sub_100068EB4((uint64_t)v41, v42);
    v28 = __chkstk_darwin(v27);
    v30 = (_QWORD *)((char *)&v39[-1] - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v31 + 16))(v30, v28);
    v32 = sub_100068EB4((uint64_t)v39, v40);
    v33 = __chkstk_darwin(v32);
    v35 = (uint64_t **)((char *)&v39[-1] - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v36 + 16))(v35, v33);
    v37 = sub_10013EC74(*v20, *v25, *v30, *v35);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v39);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v41);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v43);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v45);
    result = type metadata accessor for EnvironmentReducer();
    a2[3] = result;
    a2[4] = &off_100B88B30;
    *a2 = v37;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1006104C8(_QWORD *a1)
{
  return sub_100612804(a1, &qword_100BDC5A0, (uint64_t (*)(_QWORD))type metadata accessor for LocationAuthorizationReducer, (void (*)(_BYTE *, uint64_t))sub_10003C800);
}

uint64_t sub_1006104E4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BDC5A0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v10)
  {
    v7 = type metadata accessor for LocationsReducer();
    v8 = swift_allocObject(v7, 56, 7);
    result = sub_10003C800(&v9, v8 + 16);
    a2[3] = v7;
    a2[4] = (uint64_t)&off_100B844E8;
    *a2 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100610584(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for NotificationsReducer, (uint64_t)&off_100B68AE0, a2);
}

void sub_100610598(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for NotificationsOptInReducer, (uint64_t)&off_100B6D878, a2);
}

void sub_1006105AC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for NetworkReducer, (uint64_t)&off_100B8E370, a2);
}

void sub_1006105C0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for TimeReducer, (uint64_t)&off_100B83450, a2);
}

uint64_t sub_1006105D4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD v39[3];
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF02F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v46)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BEFE70);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v44)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BD4CF8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!v42)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_1000DB418(a1, v14);
  v16 = sub_1000BA294(&qword_100BF3DC8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (v40)
  {
    v17 = sub_100068EB4((uint64_t)v45, v46);
    v18 = __chkstk_darwin(v17);
    v20 = (_QWORD *)((char *)&v39[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v21 + 16))(v20, v18);
    v22 = sub_100068EB4((uint64_t)v43, v44);
    v23 = __chkstk_darwin(v22);
    v25 = (_QWORD *)((char *)&v39[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v26 + 16))(v25, v23);
    v27 = sub_100068EB4((uint64_t)v41, v42);
    v28 = __chkstk_darwin(v27);
    v30 = (_QWORD *)((char *)&v39[-1] - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v31 + 16))(v30, v28);
    v32 = sub_100068EB4((uint64_t)v39, v40);
    v33 = __chkstk_darwin(v32);
    v35 = (uint64_t **)((char *)&v39[-1] - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v36 + 16))(v35, v33);
    v37 = sub_10014200C(*v20, *v25, *v30, *v35);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v39);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v41);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v43);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v45);
    result = type metadata accessor for ViewStateReducer();
    a2[3] = result;
    a2[4] = &off_100B75790;
    *a2 = v37;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1006108C8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD v39[3];
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BDC568);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v46)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BF7658);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v44)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BF5998);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!v42)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_1000DB418(a1, v14);
  v16 = sub_1000BA294(&qword_100BD13A8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (v40)
  {
    v17 = sub_100068EB4((uint64_t)v45, v46);
    v18 = __chkstk_darwin(v17);
    v20 = (_QWORD *)((char *)&v39[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v21 + 16))(v20, v18);
    v22 = sub_100068EB4((uint64_t)v43, v44);
    v23 = __chkstk_darwin(v22);
    v25 = (_QWORD *)((char *)&v39[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v26 + 16))(v25, v23);
    v27 = sub_100068EB4((uint64_t)v41, v42);
    v28 = __chkstk_darwin(v27);
    v30 = (_QWORD *)((char *)&v39[-1] - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v31 + 16))(v30, v28);
    v32 = sub_100068EB4((uint64_t)v39, v40);
    v33 = __chkstk_darwin(v32);
    v35 = (uint64_t **)((char *)&v39[-1] - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v36 + 16))(v35, v33);
    v37 = sub_100136960(*v20, *v25, *v30, *v35);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v39);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v41);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v43);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v45);
    result = type metadata accessor for ModalViewStateReducer();
    a2[3] = result;
    a2[4] = &off_100B95EB8;
    *a2 = v37;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

void sub_100610BBC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for ActivityActionReducer, (uint64_t)&off_100B88490, a2);
}

void sub_100610BD0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for LinkReducer, (uint64_t)&off_100B65998, a2);
}

void sub_100610BE4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for WeatherDataReducer, (uint64_t)&off_100B95E70, a2);
}

void sub_100610BF8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for DebugReducer, (uint64_t)&off_100B680B0, a2);
}

_QWORD *sub_100610C0C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[24];
  uint64_t v43;
  _BYTE v44[24];
  uint64_t v45;
  _QWORD v46[4];
  _QWORD v47[3];
  uint64_t v48;
  _QWORD v49[4];
  _QWORD v50[3];
  uint64_t v51;

  v2 = type metadata accessor for WeatherServiceCaching(0);
  __chkstk_darwin(v2);
  v4 = &v42[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_1000BA294(&qword_100BF7630);
  __chkstk_darwin(v5);
  v7 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BF7640);
  dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  v12 = v50[0];
  if (v50[0] >= 2uLL)
  {
    v13 = v50[1];
    ObjectType = swift_getObjectType(v50[0]);
    dispatch thunk of AutomationWeatherDataManagerType.setupStubData()(ObjectType, v13);
    sub_10015A440(v12);
  }
  type metadata accessor for WeatherAQIScaleCacheManager(0, v11);
  v15 = static WeatherAQIScaleCacheManager.shared.getter();
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = type metadata accessor for WDSEndpoint(0);
  dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  result = (_QWORD *)_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v18);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = a1[3];
  v21 = a1[4];
  sub_1000DB418(a1, v20);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v50, &type metadata for Bool, 0xD000000000000014, 0x8000000100A0E160, &type metadata for Bool, v20, v21);
  if (LOBYTE(v50[0]) == 2)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((v50[0] & 1) != 0)
    static WeatherServiceCaching.disabled.getter(result);
  else
    static WeatherServiceCaching.enabled.getter(result);
  v22 = a1[3];
  v23 = a1[4];
  sub_1000DB418(a1, v22);
  v24 = sub_1000BA294(&qword_100BF7648);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v24, v24, v22, v23);
  v25 = v51;
  if (!v51)
    goto LABEL_15;
  v26 = sub_1000DB418(v50, v51);
  v49[3] = v25;
  v27 = sub_10005F164(v49);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v27, v26, v25);
  v28 = a1[3];
  v29 = a1[4];
  sub_1000DB418(a1, v28);
  v30 = sub_1000BA294(&qword_100BF75D8);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v30, v30, v28, v29);
  v31 = v48;
  if (!v48)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v32 = sub_1000DB418(v47, v48);
  v46[3] = v31;
  v33 = sub_10005F164(v46);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v33, v32, v31);
  v34 = a1[3];
  v35 = a1[4];
  sub_1000DB418(a1, v34);
  v36 = sub_1000BA294(&qword_100BF75C8);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v36, v36, v34, v35);
  if (!v45)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v37 = a1[3];
  v38 = a1[4];
  sub_1000DB418(a1, v37);
  v39 = sub_1000BA294(&qword_100BF7650);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v39, v39, v37, v38);
  if (v43)
  {
    v40 = type metadata accessor for WeatherService(0);
    swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
    v41 = WeatherService.init(scaleCacheManager:endpoint:caching:networkMonitor:authenticator:fetchOptionsProvider:serviceConfigurationProvider:)(v15, v7, v4, v49, v46, v44, v42);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v47);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v50);
    return (_QWORD *)v41;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100610FA4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t **v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  uint64_t **v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  _QWORD **v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t ***v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD v94[5];
  uint64_t *v95;
  _QWORD *v96;
  uint64_t *v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD v108[3];
  uint64_t v109;
  _QWORD v110[3];
  uint64_t v111;
  _QWORD v112[3];
  uint64_t v113;
  _QWORD v114[3];
  uint64_t v115;
  _QWORD v116[3];
  uint64_t v117;
  _QWORD v118[3];
  uint64_t v119;
  _QWORD v120[3];
  uint64_t v121;
  _QWORD v122[3];
  uint64_t v123;
  _QWORD v124[3];
  uint64_t v125;
  _QWORD v126[3];
  uint64_t v127;
  _QWORD v128[3];
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF75F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v130)
  {
    __break(1u);
    goto LABEL_15;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BED3C0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v129)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BED3C8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!v127)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_1000DB418(a1, v14);
  v16 = sub_1000BA294(&qword_100BED3D0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (!v125)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v17 = a1[3];
  v18 = a1[4];
  sub_1000DB418(a1, v17);
  v19 = sub_1000BA294(&qword_100BF02F8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v19, v19, v17, v18);
  if (!v123)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v20 = a1[3];
  v21 = a1[4];
  sub_1000DB418(a1, v20);
  v22 = sub_1000BA294(&qword_100BED3D8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v22, v22, v20, v21);
  if (!v121)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v23 = a1[3];
  v24 = a1[4];
  sub_1000DB418(a1, v23);
  v25 = sub_1000BA294(&qword_100BED3E0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v25, v25, v23, v24);
  if (!v119)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v26 = a1[3];
  v27 = a1[4];
  sub_1000DB418(a1, v26);
  v28 = sub_1000BA294(&qword_100BED3E8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v28, v28, v26, v27);
  if (!v117)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v29 = a1[3];
  v30 = a1[4];
  sub_1000DB418(a1, v29);
  v31 = sub_1000BA294(&qword_100BED3F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v31, v31, v29, v30);
  if (!v115)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v32 = a1[3];
  v33 = a1[4];
  sub_1000DB418(a1, v32);
  v34 = sub_1000BA294(&qword_100BED3F8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v34, v34, v32, v33);
  if (!v113)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v35 = a1[3];
  v36 = a1[4];
  sub_1000DB418(a1, v35);
  v37 = sub_1000BA294(&qword_100BEFE78);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v37, v37, v35, v36);
  if (!v111)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v105 = v131;
  v106 = v130;
  v107 = a2;
  v38 = a1[3];
  v39 = a1[4];
  sub_1000DB418(a1, v38);
  v40 = sub_1000BA294(&qword_100BED400);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v40, v40, v38, v39);
  if (v109)
  {
    v41 = sub_100068EB4((uint64_t)v128, v129);
    v104 = v94;
    v42 = __chkstk_darwin(v41);
    v100 = (_QWORD *)((char *)v94 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v44 + 16))(v42);
    v45 = sub_100068EB4((uint64_t)v126, v127);
    v103 = v94;
    v46 = __chkstk_darwin(v45);
    v99 = (_QWORD *)((char *)v94 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v48 + 16))(v46);
    v49 = sub_100068EB4((uint64_t)v124, v125);
    v102 = v94;
    v50 = __chkstk_darwin(v49);
    v97 = (_QWORD *)((char *)v94 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v52 + 16))(v50);
    v53 = sub_100068EB4((uint64_t)v122, v123);
    v101 = v94;
    v54 = __chkstk_darwin(v53);
    v95 = (_QWORD *)((char *)v94 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__n128))(v56 + 16))(v54);
    v57 = sub_100068EB4((uint64_t)v120, v121);
    v98 = v94;
    v58 = __chkstk_darwin(v57);
    v60 = (_QWORD *)((char *)v94 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v61 + 16))(v60, v58);
    v62 = sub_100068EB4((uint64_t)v118, v119);
    v96 = v94;
    v63 = __chkstk_darwin(v62);
    v65 = (_QWORD *)((char *)v94 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v66 + 16))(v65, v63);
    v67 = sub_100068EB4((uint64_t)v116, v117);
    v94[4] = v94;
    v68 = __chkstk_darwin(v67);
    v70 = (_QWORD *)((char *)v94 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v71 + 16))(v70, v68);
    v72 = sub_100068EB4((uint64_t)v114, v115);
    v94[3] = v94;
    v73 = __chkstk_darwin(v72);
    v75 = (uint64_t **)((char *)v94 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v76 + 16))(v75, v73);
    v77 = sub_100068EB4((uint64_t)v112, v113);
    v94[2] = v94;
    v78 = __chkstk_darwin(v77);
    v80 = (uint64_t **)((char *)v94 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v81 + 16))(v80, v78);
    v82 = sub_100068EB4((uint64_t)v110, v111);
    v94[1] = v94;
    v83 = __chkstk_darwin(v82);
    v85 = (_QWORD **)((char *)v94 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(_QWORD **, __n128))(v86 + 16))(v85, v83);
    v87 = sub_100068EB4((uint64_t)v108, v109);
    v88 = __chkstk_darwin(v87);
    v90 = (uint64_t ***)((char *)v94 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t ***, __n128))(v91 + 16))(v90, v88);
    v92 = sub_100018B48(v106, v105, *v100, *v99, *v97, *v95, *v60, *v65, *v70, *v75, *v80, *v85, *v90);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v108);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v110);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v112);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v114);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v116);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v118);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v120);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v122);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v124);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v126);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v128);
    result = type metadata accessor for WeatherDataPreprocessor();
    v93 = v107;
    v107[3] = result;
    v93[4] = &off_100B88A10;
    *v93 = v92;
    return result;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1006117E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __n128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;

  v37 = a2;
  v3 = type metadata accessor for URL(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for EndpointConfiguration(0);
  v6 = *(_QWORD *)(v36 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v36);
  v33 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - v9;
  v11 = type metadata accessor for AppConfiguration(0);
  v34 = *(_QWORD *)(v11 - 8);
  v35 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v14);
  static Settings.WeatherEnvironment.contentEnvironment.getter();
  SettingReader.read<A>(_:)(v40);
  swift_release();
  swift_release();
  v15 = LOBYTE(v40[0]);
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100BCF678);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (v39)
  {
    sub_10003C800(&v38, (uint64_t)v40);
    v20 = v41;
    v21 = v42;
    sub_1000DB418(v40, v41);
    dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v20, v21);
    v22 = AppConfiguration.endpointConfig(for:)(v15);
    v23 = EndpointConfiguration.useDynamicPortForWeatherData.getter(v22);
    EndpointConfiguration.weatherDataURL.getter(v24);
    if ((v23 & 1) != 0)
    {
      v25 = v33;
      v26 = v36;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v33, v10, v36);
      v27 = *(unsigned __int8 *)(v6 + 80);
      v28 = (v27 + 16) & ~v27;
      v29 = swift_allocObject(&unk_100B84508, v28 + v7, v27 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v29 + v28, v25, v26);
      WDSEndpoint.init(url:portOverrideProvider:)(v5, sub_100614830, v29);
    }
    else
    {
      WDSEndpoint.init(url:)(v5);
      v26 = v36;
    }
    v31 = v34;
    v30 = v35;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v26);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v30);
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v40);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100611A6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v31;
  uint64_t v32;

  v31 = a1;
  v32 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BD66D8);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - v12;
  v14 = type metadata accessor for MockServer(0);
  v15 = static MockServer.shared.getter(v14);
  v16 = MockServer.listeningPort.getter(v15);
  v18 = v17;
  v19 = swift_release();
  if ((v18 & 1) != 0)
  {
    EndpointConfiguration.weatherDataURL.getter(v19);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v7, 1);
    v20 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v21 = static Logger.automation.getter(v20);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to get port from mock server", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v32);
    sub_10003773C((uint64_t)v13, (uint64_t)v10, &qword_100BD66D8);
    v26 = type metadata accessor for URLComponents(0, v25);
    v27 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v26);
    if ((_DWORD)v27 == 1)
    {
      sub_100021A14((uint64_t)v13, &qword_100BD66D8);
      sub_100021A14((uint64_t)v10, &qword_100BD66D8);
      return 0;
    }
    else
    {
      v16 = URLComponents.port.getter(v27);
      v29 = v28;
      sub_100021A14((uint64_t)v13, &qword_100BD66D8);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v10, v26);
      if ((v29 & 1) != 0)
        return 0;
    }
  }
  return v16;
}

uint64_t sub_100611CF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OptionsProvider;
  uint64_t result;

  v2 = type metadata accessor for GeocodeService(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = GeocodeService.init()();
  v4 = type metadata accessor for GeocodeManager(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = GeocodeManager.init(service:store:)(v3, sub_100611DA8, 0);
  OptionsProvider = type metadata accessor for WeatherServiceFetchOptionsProvider(0);
  swift_allocObject(OptionsProvider, *(unsigned int *)(OptionsProvider + 48), *(unsigned __int16 *)(OptionsProvider + 52));
  result = WeatherServiceFetchOptionsProvider.init(geocodeManager:)(v5);
  a1[3] = OptionsProvider;
  a1[4] = (uint64_t)&protocol witness table for WeatherServiceFetchOptionsProvider;
  *a1 = result;
  return result;
}

uint64_t sub_100611DA8()
{
  uint64_t v0;

  v0 = type metadata accessor for GeocodeStore(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return GeocodeStore.init()();
}

uint64_t sub_100611DDC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10014A6E8(a1, &qword_100BF7638, (uint64_t (*)(_QWORD))&type metadata accessor for WDSAuthenticatorFactory, (uint64_t (*)(char *))&WDSAuthenticatorFactory.init(clientConfigurationProvider:), (uint64_t)&protocol witness table for WDSAuthenticatorFactory, a2);
}

uint64_t sub_100611E00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v32 = a2;
  v3 = type metadata accessor for URL(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WDSEndpoint(0, v4);
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BF7630);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for WDSEndpoint(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v18);
  v19 = sub_1000BA294(&qword_100BF75D0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v19, v19, v18, v17);
  if (v34)
  {
    sub_10003C800(&v33, (uint64_t)v35);
    v21 = a1[3];
    v22 = a1[4];
    sub_1000DB418(a1, v21);
    dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v21, v22);
    result = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13);
    if ((_DWORD)result != 1)
    {
      v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
      v24 = WDSEndpoint.url.getter(v23);
      v25 = WDSEndpoint.portOverrideProvider.getter(v24);
      WDSEndpoint.init(url:portOverrideProvider:)(v6, v25, v26);
      v27 = v36;
      v28 = v37;
      sub_1000DB418(v35, v36);
      dispatch thunk of WDSAuthenticatorFactoryType.makeAuthenticator(for:)(v9, v27, v28);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v35);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100612048()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1000BA294(&qword_100BF75E0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  Logger.init(subsystem:category:)(0xD000000000000011, 0x80000001009F0D20, 5395265, 0xE300000000000000);
  return v1;
}

uint64_t sub_1006120B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BEFD58);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!v18)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = sub_1000BA294(&qword_100BEFD50);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
  if (!v16)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1000BA294(&qword_100BD1408);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (v14)
  {
    v12 = type metadata accessor for NotificationsStoreObserver();
    swift_allocObject(v12, 152, 7);
    return sub_10012E704(&v17, &v15, &v13);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1006121C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BDBAA8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!v24)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = sub_1000BA294(&qword_100BF7620);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
  if (!v22)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1000BA294(&qword_100BF59B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (v20)
  {
    v12 = sub_100068EB4((uint64_t)v23, v24);
    v13 = __chkstk_darwin(v12);
    v15 = (uint64_t *)((char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v16 + 16))(v15, v13);
    v17 = sub_100127D38(*v15, &v21, &v19);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
    return (uint64_t)v17;
  }
LABEL_7:
  __break(1u);
  return result;
}

_QWORD *sub_100612324(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD v20[5];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v23;
  if (!v23)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = v25;
  v7 = v26;
  v9 = v24;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BDC588);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v22)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v13 = a1[3];
  v14 = a1[4];
  sub_1000DB418(a1, v13);
  v15 = sub_1000BA294(&qword_100BF7618);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v15, v15, v13, v14);
  if (!*(_QWORD *)((char *)&v20[3] + 1))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v20, &type metadata for Bool, 0xD000000000000014, 0x8000000100A0E160, &type metadata for Bool, v16, v17);
  if (LOBYTE(v20[0]) != 2)
  {
    v18 = v20[0] & 1;
    v19 = type metadata accessor for ReverseGeocodingStoreObserver();
    swift_allocObject(v19, 152, 7);
    return (_QWORD *)sub_100129588(v6, v9, v8, v7, &v21, (__int128 *)((char *)v20 + 1), v18);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1006124BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[5];
  __int128 v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BF7610);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (v29)
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_1000DB418(a1, v6);
    v8 = sub_1000BA294(&qword_100BE00E8);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
    if (v27)
    {
      v9 = sub_100068EB4((uint64_t)v28, v29);
      v10 = __chkstk_darwin(v9);
      v12 = (_QWORD *)((char *)&v25[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v13 + 16))(v12, v10);
      v14 = *v12;
      v15 = type metadata accessor for AppStoreReviewManager();
      v25[3] = v15;
      v25[4] = &off_100B73020;
      v25[0] = v14;
      v16 = type metadata accessor for SavedLocationsStoreObserver();
      v17 = swift_allocObject(v16, 113, 7);
      v18 = sub_100068EB4((uint64_t)v25, v15);
      v19 = __chkstk_darwin(v18);
      v21 = (_QWORD *)((char *)&v25[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v22 + 16))(v21, v19);
      v23 = *v21;
      *(_QWORD *)(v17 + 56) = v15;
      *(_QWORD *)(v17 + 64) = &off_100B73020;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = v23;
      *(_QWORD *)(v17 + 16) = 0;
      *(_BYTE *)(v17 + 112) = 2;
      sub_10003C800(&v26, v17 + 72);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
      return v17;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100612688(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = type metadata accessor for WeatherDataUpdater();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = result;
  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = sub_1000BA294(&qword_100BDC598);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
  if (!v22)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BF7608);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (v20)
  {
    v13 = sub_100068EB4((uint64_t)v21, v22);
    v14 = __chkstk_darwin(v13);
    v16 = (uint64_t *)((char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v17 + 16))(v16, v14);
    v18 = sub_100152068(v6, *v16, &v19);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v21);
    return v18;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1006127E8(_QWORD *a1)
{
  return sub_100612804(a1, &qword_100BF7600, (uint64_t (*)(_QWORD))type metadata accessor for WeatherMapOverlayDataStoreObserver, (void (*)(_BYTE *, uint64_t))sub_10003C800);
}

uint64_t sub_100612804(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(_QWORD), void (*a4)(_BYTE *, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;

  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = sub_1000BA294(a2);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
  if (v14)
  {
    v11 = a3(0);
    v12 = swift_allocObject(v11, 56, 7);
    a4(v13, v12 + 16);
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006128A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  void (*v6)(double *__return_ptr);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (v6)
  {
    v5 = type metadata accessor for WidgetReloadStoreObserver();
    swift_allocObject(v5, 24, 7);
    return sub_100019DC0(v6, v7, v8, v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100612940(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = type metadata accessor for TipCoordinator(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (result)
  {
    v5 = result;
    v6 = type metadata accessor for LocationViewerStoreObserver(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = v7 + OBJC_IVAR____TtC7Weather27LocationViewerStoreObserver_lastViewedLocationIdentifier;
    v9 = type metadata accessor for Location.Identifier(0);
    _s7Weather24LocationCompositionStateOwst_0(v8, 1, 1, v9);
    *(_QWORD *)(v7 + 16) = v5;
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006129DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  _QWORD v38[3];
  uint64_t v39;
  _UNKNOWN **v40;
  _QWORD v41[5];
  _QWORD v42[3];
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BF75F8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (v45)
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_1000DB418(a1, v6);
    v8 = sub_1000BA294(&qword_100BDBAB8);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
    if (v43)
    {
      v9 = sub_100068EB4((uint64_t)v44, v45);
      v37[2] = v37;
      v10 = __chkstk_darwin(v9);
      v12 = (_QWORD *)((char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v13 + 16))(v12, v10);
      v14 = sub_100068EB4((uint64_t)v42, v43);
      v37[1] = v37;
      v15 = __chkstk_darwin(v14);
      v17 = (_QWORD *)((char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v18 + 16))(v17, v15);
      v19 = *v12;
      v20 = *v17;
      v21 = type metadata accessor for AppContinuationBridge(0);
      v41[3] = v21;
      v41[4] = &off_100B67678;
      v41[0] = v19;
      v22 = type metadata accessor for LocationFinder();
      v39 = v22;
      v40 = &off_100B788B0;
      v38[0] = v20;
      v23 = type metadata accessor for OpenL2HandlerObserver();
      v24 = (_QWORD *)swift_allocObject(v23, 96, 7);
      v25 = sub_100068EB4((uint64_t)v41, v21);
      v26 = __chkstk_darwin(v25);
      v28 = (_QWORD *)((char *)v37 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v29 + 16))(v28, v26);
      v30 = sub_100068EB4((uint64_t)v38, v39);
      v31 = __chkstk_darwin(v30);
      v33 = (_QWORD *)((char *)v37 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v34 + 16))(v33, v31);
      v35 = *v28;
      v36 = *v33;
      v24[5] = v21;
      v24[6] = &off_100B67678;
      v24[2] = v35;
      v24[10] = v22;
      v24[11] = &off_100B788B0;
      v24[7] = v36;
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v38);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v41);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v42);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v44);
      return (uint64_t)v24;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100612CA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = sub_1000BA294(&qword_100BF0698);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (v22)
  {
    v5 = sub_100068EB4((uint64_t)v21, v22);
    v6 = __chkstk_darwin(v5);
    v8 = (_QWORD *)((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v9 + 16))(v8, v6);
    v10 = *v8;
    v11 = type metadata accessor for InteractionDonationManager(0);
    v20[3] = v11;
    v20[4] = &off_100B78750;
    v20[0] = v10;
    v12 = type metadata accessor for InteractionDonationStoreObserver();
    v13 = (_QWORD *)swift_allocObject(v12, 56, 7);
    v14 = sub_100068EB4((uint64_t)v20, v11);
    v15 = __chkstk_darwin(v14);
    v17 = (_QWORD *)((char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v18 + 16))(v17, v15);
    v19 = *v17;
    v13[5] = v11;
    v13[6] = &off_100B78750;
    v13[2] = v19;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v20);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v21);
    return (uint64_t)v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_100612E10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v26[3];
  uint64_t v27;
  _QWORD v28[3];
  _QWORD v29[3];

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BD4D20);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v29, v4, 0x746C7561666544, 0xE700000000000000, v4, v2, v3);
  v6 = v29[0];
  if (!v29[0])
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = v29[2];
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v28, v4, 0x75646F4D7473694CLL, 0xEA0000000000656CLL, v4, v8, v9);
  v10 = v28[0];
  if (!v28[0])
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = v28[2];
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_1000BA294(&qword_100BDC5B0);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (v27)
  {
    v15 = type metadata accessor for WeatherConditionBackgroundStoreObserver(0);
    ObjectType = swift_getObjectType(v6);
    v17 = swift_getObjectType(v10);
    v18 = sub_100068EB4((uint64_t)v26, v27);
    v19 = __chkstk_darwin(v18);
    v21 = (char *)&v26[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v22 + 16))(v21, v19);
    v23 = type metadata accessor for WeatherConditionBackgroundTimeDataFactory();
    v24 = sub_10048C674(v6, v10, (uint64_t)v21, v15, ObjectType, v23, v17, v7, (uint64_t)&off_100B70D90, v11);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
    return v24;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100613004(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = sub_1000BA294(&qword_100BF75F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (v6)
  {
    v5 = type metadata accessor for TimeStoreObserver();
    result = swift_allocObject(v5, 32, 7);
    *(_QWORD *)(result + 16) = v6;
    *(_QWORD *)(result + 24) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100613084@<X0>(uint64_t *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  id result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v3 = *a1;
  result = objc_msgSend((id)objc_opt_self(TFCapabilities), "isInternalBuild");
  if ((_DWORD)result)
  {
    if (qword_100BC20E0 != -1)
      swift_once(&qword_100BC20E0, sub_10042C040);
    v6 = qword_100CAEB70;
    sub_1000A1C54(&qword_100BF75E8, v5, (uint64_t (*)(uint64_t))type metadata accessor for MainAssembly);
    result = (id)Configurable.setting<A>(_:)(v6, v3, v7);
    v8 = v9;
  }
  else
  {
    v8 = 0;
  }
  *a2 = v8;
  return result;
}

uint64_t sub_100613144(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (v6)
  {
    v5 = type metadata accessor for WeatherDataDebounceMiddleware(0);
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    return sub_10003B5DC(v6, v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006131D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = type metadata accessor for ShortcutItemUpdater();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (result)
  {
    v5 = result;
    v6 = type metadata accessor for ShortcutItemMiddleware();
    result = swift_allocObject(v6, 24, 7);
    *(_QWORD *)(result + 16) = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100613240(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (v6)
  {
    v5 = type metadata accessor for ShortcutItemUpdater();
    result = swift_allocObject(v5, 48, 7);
    *(_QWORD *)(result + 16) = v6;
    *(_OWORD *)(result + 24) = v7;
    *(_QWORD *)(result + 40) = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006132CC()
{
  uint64_t v0;

  v0 = type metadata accessor for UnitManagerMiddleware();
  return swift_allocObject(v0, 16, 7);
}

double sub_1006132EC(uint64_t a1)
{
  uint64_t v1;

  return sub_10060D9E4(a1, v1);
}

id sub_1006132F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;

  return sub_100613084(v1, a1);
}

uint64_t sub_100613318(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 24) == 2)
    return 1;
  v1 = a1;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
  {
    sub_1001E9B58();
    v4 = v3;
    swift_release(v1);
    v1 = v4;
  }
  *(_BYTE *)(v1 + 24) = 2;
  return v1;
}

uint64_t sub_10061337C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
  {
    sub_1001E9B58();
    v4 = v3;
    swift_release(a1);
    a1 = v4;
  }
  *(_QWORD *)(a1 + 16) = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1006133D8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE v12[24];

  v3 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v3);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v8 = &v11[-v7];
  v9 = v1 + qword_100C10DF0;
  sub_10009922C(v1 + qword_100C10DF0, (uint64_t)v12, 0);
  sub_10003773C(v9, (uint64_t)v8, &qword_100BD4280);
  v10 = type metadata accessor for URL(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10) == 1)
  {
    sub_100021A14((uint64_t)v8, &qword_100BD4280);
    sub_1008C1368();
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v5, a1, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v5, 0, 1, v10);
    sub_10009922C(v9, (uint64_t)v11, 33);
    sub_100230A10((uint64_t)v5, v9);
    swift_endAccess(v11);
  }
  else
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, v8, v10);
  }
  sub_10004A2A0();
}

void sub_10061352C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, unint64_t, char *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  os_log_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  os_log_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[2];

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - v9;
  v11 = *(_QWORD *)(v1 + qword_100C10E10);
  UnfairLock.lock()();
  if (*(_BYTE *)(v2 + 16) == 1)
  {
    v42 = v11;
    *(_BYTE *)(v2 + qword_100C10E08) = 1;
    type metadata accessor for BinaryEncoder(0);
    v12 = sub_1000BA294(&qword_100BF76B8);
    sub_10003D2DC(&qword_100BF76D0, &qword_100BF76B8);
    v14 = v13;
    sub_10003D2DC(&qword_100BF76D8, &qword_100BF76B8);
    v16 = static BinaryEncoder.encode<A>(_:)(a1, v12, v14, v15);
    v41 = v7;
    v18 = v17;
    v19 = *(void (**)(uint64_t, unint64_t, char *))(v2 + qword_100C10E18);
    v20 = *(_QWORD *)(v2 + qword_100C10E18 + 8);
    v21 = v16;
    swift_retain();
    sub_1006133D8((uint64_t)v10);
    v19(v21, v18, v10);
    v40 = *(void (**)(char *, uint64_t))(v5 + 8);
    v40(v10, v4);
    swift_release(v20);
    if (qword_100BC2430 != -1)
      swift_once(&qword_100BC2430, sub_1006F37D4);
    v22 = type metadata accessor for Logger(0);
    sub_1000AECD4(v22, (uint64_t)qword_100CAF088);
    swift_retain_n(v2, 2);
    v23 = v18;
    sub_100614B2C(v21, v18);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(32, -1);
      v44[0] = v39;
      *(_DWORD *)v28 = 134349314;
      v38 = v25;
      v43 = Data.count.getter(v21, v23) / 1024;
      v37 = v27;
      v29 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44);
      sub_10021D04C(v21, v23);
      *(_WORD *)(v28 + 12) = 2082;
      v36 = v28 + 14;
      v30 = (uint64_t)v41;
      sub_1006133D8((uint64_t)v41);
      sub_1000A1C54(&qword_100BCCFF8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
      v31 = dispatch thunk of CustomStringConvertible.description.getter(v4);
      v33 = v32;
      v40((char *)v30, v4);
      v43 = sub_1000CE1C8(v31, v33, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v33);
      v34 = v38;
      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v37, "Save state to disk with size %{public}ld kb to file %{public}s", (uint8_t *)v28, 0x16u);
      v35 = v39;
      swift_arrayDestroy(v39, 1);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      sub_10021D04C(v29, v23);
    }
    else
    {
      sub_10021D04C(v21, v23);
      sub_10021D04C(v21, v23);

      swift_release_n(v2, 2);
    }
  }
  UnfairLock.unlock()();
}

_QWORD *sub_100613ACC(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  __int128 v23;
  uint64_t v24;
  _UNKNOWN **v25;
  __int128 v26;
  uint64_t v27;
  _UNKNOWN **v28;

  v27 = type metadata accessor for MainInteractor();
  v28 = &off_100B77A00;
  *(_QWORD *)&v26 = a1;
  v24 = type metadata accessor for EmptySidebarWidthStorage();
  v25 = &off_100B9B2A0;
  *(_QWORD *)&v23 = a8;
  if (qword_100BC2420 != -1)
    swift_once(&qword_100BC2420, sub_10015967C);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_1000AECD4(v17, (uint64_t)qword_100CAF058);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Initializing Main module", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  sub_10003C800(&v26, (uint64_t)(a9 + 2));
  a9[7] = a2;
  sub_10003C800(a3, (uint64_t)(a9 + 8));
  a9[13] = a4;
  a9[14] = a5;
  sub_10003C800(a6, (uint64_t)(a9 + 15));
  a9[20] = a7;
  sub_10003C800(&v23, (uint64_t)(a9 + 21));
  return a9;
}

_QWORD *sub_100613C4C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  _QWORD v34[3];
  uint64_t v35;
  _UNKNOWN **v36;

  v16 = *a8;
  v35 = type metadata accessor for MainInteractor();
  v36 = &off_100B77A00;
  v34[0] = a1;
  v32 = v16;
  v33 = &off_100B9B2A0;
  v31[0] = a8;
  v17 = type metadata accessor for MainModule();
  v18 = (_QWORD *)swift_allocObject(v17, 208, 7);
  v19 = sub_100068EB4((uint64_t)v34, v35);
  v20 = __chkstk_darwin(v19);
  v22 = (_QWORD *)((char *)v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v23 + 16))(v22, v20);
  v24 = sub_100068EB4((uint64_t)v31, v32);
  v25 = __chkstk_darwin(v24);
  v27 = (_QWORD *)((char *)v31 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v28 + 16))(v27, v25);
  v29 = sub_100613ACC(*v22, a2, a3, a4, a5, a6, a7, *v27, v18);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v31);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v34);
  return v29;
}

_QWORD *sub_100613DD4(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, __int128 *a7, _QWORD *a8)
{
  a8[6] = type metadata accessor for DemoPresetProvider();
  a8[7] = &off_100B964F8;
  a8[2] = a1;
  a8[3] = a2;
  sub_10003C800(a3, (uint64_t)(a8 + 8));
  sub_10003C800(a4, (uint64_t)(a8 + 13));
  sub_10003C800(a5, (uint64_t)(a8 + 18));
  sub_10003C800(a6, (uint64_t)(a8 + 23));
  sub_10003C800(a7, (uint64_t)(a8 + 28));
  return a8;
}

_QWORD *sub_100613E7C(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, __int128 *a7)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  v25 = type metadata accessor for DemoPresetProvider();
  v26 = &off_100B964F8;
  v24[0] = a2;
  v14 = type metadata accessor for MainInitialStateProvider();
  v15 = (_QWORD *)swift_allocObject(v14, 264, 7);
  v16 = sub_100068EB4((uint64_t)v24, v25);
  v17 = __chkstk_darwin(v16);
  v19 = (_QWORD *)((char *)&v24[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v20 + 16))(v19, v17);
  v21 = sub_100613DD4(a1, *v19, a3, a4, a5, a6, a7, v15);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v24);
  return v21;
}

void sub_100613F8C(uint64_t a1, unint64_t *a2)
{
  sub_10060CE9C(a1, *a2);
}

void sub_100613F94(uint64_t a1)
{
  uint64_t *v1;

  sub_1000DD16C(a1);
  *v1 = sub_100081FD8();
  sub_10004A298();
}

void sub_100613FB4(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sub_100147D88(a1, a2, a3, a4);
}

uint64_t sub_100613FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9, __int128 *a10, uint64_t a11, uint64_t a12, __int128 *a13, __int128 *a14, unsigned __int8 a15, uint64_t a16, __int128 *a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v49[12];
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  __int128 *v65;
  int v66;
  __int128 *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  _QWORD *v72;
  __int128 v73;
  uint64_t v74;
  _UNKNOWN **v75;
  __int128 v76;
  uint64_t v77;
  _UNKNOWN **v78;
  __int128 v79;
  uint64_t v80;
  _UNKNOWN **v81;

  v63 = a8;
  v62 = a7;
  v60 = a6;
  v59 = a5;
  v58 = a4;
  v57 = a3;
  v55 = a2;
  v54 = a1;
  v66 = a15;
  v65 = a14;
  v64 = a13;
  v61 = a10;
  v56 = a9;
  v67 = a17;
  v71 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v53 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v70 = &v49[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v19);
  v21 = &v49[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v22);
  v24 = &v49[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v25);
  v27 = &v49[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v80 = type metadata accessor for WeatherDataPreprocessor();
  v81 = &off_100B88A10;
  *(_QWORD *)&v79 = a11;
  v77 = type metadata accessor for NewsDataManager();
  v78 = &off_100B98388;
  *(_QWORD *)&v76 = a12;
  v74 = type metadata accessor for RemotelyConfiguredSlowLocationLoadingMonitor();
  v75 = &off_100B93FE0;
  *(_QWORD *)&v73 = a16;
  sub_1000A0794(0, (unint64_t *)&qword_100BC2998, OS_os_log_ptr);
  v28 = OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x80000001009F0D20, 0x4472656874616557, 0xEB00000000617461);
  *(_QWORD *)(a18 + 408) = v28;
  *(_QWORD *)(a18 + 416) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a18 + 424) = &_swiftEmptyDictionarySingleton;
  static UnfairLock.Options.dataSynchronization.getter(v28);
  v29 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  *(_QWORD *)(a18 + 432) = UnfairLock.init(options:)(v27);
  v69 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  static DispatchQoS.userInitiated.getter(v69);
  v72 = _swiftEmptyArrayStorage;
  sub_1000A1C54((unint64_t *)&qword_100BC29A8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  v31 = v30;
  v68 = v30;
  v32 = sub_1000BA294(&qword_100BC29B0);
  sub_10003D2DC((unint64_t *)&qword_100BC29B8, &qword_100BC29B0);
  v34 = v33;
  v51 = v33;
  v52 = v19;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v72, v32, v33, v19, v31);
  v35 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v36 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v53 + 104);
  v37 = v70;
  v50 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v38 = v71;
  v36(v70, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v71);
  v39 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000037, 0x8000000100A0E1D0, v24, v21, v37, 0);
  *(_QWORD *)(a18 + 440) = v39;
  static DispatchQoS.utility.getter(v39);
  v72 = _swiftEmptyArrayStorage;
  v40 = v34;
  v41 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v72, v32, v40, v52, v68);
  v42 = v70;
  v36(v70, v35, v38);
  v43 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000036, 0x8000000100A0E210, v24, v21, v42, 0);
  *(_QWORD *)(a18 + 448) = v43;
  static DispatchQoS.utility.getter(v43);
  v72 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v72, v32, v51, v41, v68);
  v36(v42, v50, v71);
  *(_QWORD *)(a18 + 456) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000036, 0x8000000100A0E210, v24, v21, v42, 0);
  v44 = v55;
  *(_QWORD *)(a18 + 16) = v54;
  *(_QWORD *)(a18 + 24) = v44;
  v45 = v58;
  *(_QWORD *)(a18 + 32) = v57;
  *(_QWORD *)(a18 + 40) = v45;
  v46 = v60;
  *(_QWORD *)(a18 + 48) = v59;
  *(_QWORD *)(a18 + 56) = v46;
  v47 = v63;
  *(_QWORD *)(a18 + 64) = v62;
  *(_QWORD *)(a18 + 72) = v47;
  sub_10003C800(v56, a18 + 80);
  sub_10003C800(v61, a18 + 120);
  sub_10003C800(&v79, a18 + 160);
  sub_10003C800(&v76, a18 + 200);
  sub_10003C800(v64, a18 + 240);
  sub_10003C800(v65, a18 + 280);
  *(_BYTE *)(a18 + 320) = v66;
  sub_10003C800(&v73, a18 + 328);
  sub_10003C800(v67, a18 + 368);
  return a18;
}

uint64_t sub_100614560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9, __int128 *a10, uint64_t a11, uint64_t a12, __int128 *a13, __int128 *a14, unsigned __int8 a15, uint64_t a16, __int128 *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  _UNKNOWN **v48;
  _QWORD v49[3];
  uint64_t v50;
  _UNKNOWN **v51;
  _QWORD v52[3];
  uint64_t v53;
  _UNKNOWN **v54;

  v44 = a7;
  v45 = a8;
  v42 = a5;
  v43 = a6;
  v40 = a3;
  v41 = a4;
  v39 = a2;
  v38 = a1;
  v37 = a9;
  v53 = type metadata accessor for WeatherDataPreprocessor();
  v54 = &off_100B88A10;
  v52[0] = a11;
  v50 = type metadata accessor for NewsDataManager();
  v51 = &off_100B98388;
  v49[0] = a12;
  v47 = type metadata accessor for RemotelyConfiguredSlowLocationLoadingMonitor();
  v48 = &off_100B93FE0;
  v46[0] = a16;
  v17 = type metadata accessor for WeatherDataUpdater();
  v18 = swift_allocObject(v17, 464, 7);
  v19 = sub_100068EB4((uint64_t)v52, v53);
  v20 = __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v23 + 16))(v22, v20);
  v24 = sub_100068EB4((uint64_t)v49, v50);
  v25 = __chkstk_darwin(v24);
  v27 = (uint64_t *)((char *)&v36 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v28 + 16))(v27, v25);
  v29 = sub_100068EB4((uint64_t)v46, v47);
  v30 = __chkstk_darwin(v29);
  v32 = (uint64_t *)((char *)&v36 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v33 + 16))(v32, v30);
  v34 = sub_100613FBC(v38, v39, v40, v41, v42, v43, v44, v45, v37, a10, *v22, *v27, a13, a14, a15, *v32, a17, v18);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v46);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v49);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v52);
  return v34;
}

uint64_t sub_1006147A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = sub_100613374(*a1, a2, *a3);
  *a4 = result;
  return result;
}

uint64_t sub_1006147D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for EndpointConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100614830()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EndpointConfiguration(0) - 8) + 80);
  return sub_100611A6C(v0 + ((v1 + 16) & ~v1));
}

void sub_100614860(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = sub_1000DD16C(a1);
  *v1 = sub_1006133D0(v2);
  sub_10004A298();
}

void sub_100614880(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = sub_1000DD16C(a1);
  *v1 = sub_10061337C(v2);
  sub_10004A298();
}

void sub_1006148A0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = sub_1000DD16C(a1);
  *v1 = sub_100613378(v2);
  sub_10004A298();
}

uint64_t sub_1006148C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006148D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1006147A4(a1, a2, (_QWORD *)(v3 + 16), a3);
}

void sub_1006148D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = sub_1000DD16C(a1);
  *v1 = sub_100613318(v2);
  sub_10004A298();
}

void sub_1006148F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = sub_1000DD16C(a1);
  *v1 = sub_100613314(v2);
  sub_10004A298();
}

void sub_100614918(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = sub_1000DD16C(a1);
  *v1 = sub_100613310(v2);
  sub_10004A298();
}

void sub_100614938(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = sub_1000DD16C(a1);
  *v1 = sub_10061330C(v2);
  sub_10004A298();
}

void sub_100614958(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = sub_1000DD16C(a1);
  *v1 = sub_100613308(v2);
  sub_10004A298();
}

void sub_100614978(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = sub_1000DD16C(a1);
  *v1 = sub_100613304(v2);
  sub_10004A298();
}

void sub_100614998(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = sub_1000DD16C(a1);
  *v1 = sub_100613300(v2);
  sub_10004A298();
}

void sub_1006149B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = sub_1000DD16C(a1);
  *v1 = sub_1006132FC(v2);
  sub_10004A298();
}

uint64_t sub_1006149D8()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1006149FC(uint64_t a1)
{
  uint64_t v1;

  sub_1000A2354(a1, (_QWORD *)(v1 + 16), (void (*)(uint64_t))sub_1000A40C8);
}

uint64_t sub_100614A1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100614A40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10060C6A8(a1, a2);
}

uint64_t sub_100614A50()
{
  return 24;
}

__n128 sub_100614A5C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_100614A70()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 48))
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, 96, 7);
}

double sub_100614ABC(uint64_t a1)
{
  uint64_t v1;

  return sub_10060D200(a1, (_QWORD *)(v1 + 16));
}

double sub_100614AC4(uint64_t a1)
{
  return sub_10060D234(a1);
}

uint64_t sub_100614ACC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_100614AF4()
{
  uint64_t v0;

  return sub_10060CBE4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100614B00()
{
  uint64_t v0;

  sub_100613F8C(*(_QWORD *)(v0 + 16), (unint64_t *)(v0 + 24));
}

double sub_100614B0C(unint64_t a1)
{
  double result;

  if (a1 >= 2)
    *(_QWORD *)&result = swift_retain(a1).n128_u64[0];
  return result;
}

unint64_t sub_100614B1C(unint64_t result)
{
  if (result >= 2)
    return swift_release(result);
  return result;
}

double sub_100614B2C(uint64_t a1, unint64_t a2)
{
  double result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(a1);
  }
  *(_QWORD *)&result = swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL).n128_u64[0];
  return result;
}

uint64_t sub_100614B70()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

double sub_100614BC0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  _BOOL4 v9;
  _BOOL4 v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  double result;
  unint64_t v32;
  unint64_t v33;

  v9 = (a1 & 0xFE) != 2;
  v10 = (a1 & 1) == 0;
  v12 = v9 && v10;
  v11 = !v9 || !v10;
  v13 = 0xD00000000000001DLL;
  if (!v11)
    v13 = 0xD00000000000001ELL;
  v33 = v13;
  v14 = 0x80000001009F19A0;
  if (!v11)
    v14 = 0x80000001009F19C0;
  v32 = v14;
  if (v11)
    v15 = 33.0;
  else
    v15 = 40.0;
  sub_100225618();
  v17 = v16;
  v19 = v18;
  sub_1002256A0(*(unsigned __int8 *)(v6 + 16), a1, v12);
  v21 = v20;
  v23 = v22;
  sub_1002257A0();
  v25 = v24;
  v27 = v26;
  v28 = *(_BYTE *)(v6 + 17);
  v29 = (_QWORD *)(a6 + *(int *)(type metadata accessor for TipView(0) + 32));
  *v29 = swift_getKeyPath(&unk_1009B7B98);
  v30 = sub_1000BA294(&qword_100BC2908);
  swift_storeEnumTagMultiPayload(v29, v30, 0);
  *(_QWORD *)(a6 + 32) = v33;
  *(_QWORD *)(a6 + 40) = v32;
  *(_BYTE *)(a6 + 48) = v12 & 1;
  *(_QWORD *)(a6 + 56) = v17;
  *(_QWORD *)(a6 + 64) = v19;
  *(_QWORD *)(a6 + 72) = v21;
  *(_QWORD *)(a6 + 80) = v23;
  *(_QWORD *)(a6 + 88) = v25;
  *(_QWORD *)(a6 + 96) = v27;
  *(_BYTE *)a6 = v28;
  *(double *)(a6 + 8) = v15;
  *(_QWORD *)(a6 + 16) = 0;
  *(_WORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 104) = a2;
  *(_QWORD *)(a6 + 112) = a3;
  *(_QWORD *)(a6 + 120) = a4;
  *(_QWORD *)(a6 + 128) = a5;
  swift_retain();
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

uint64_t sub_100614D40()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 18, 7);
}

uint64_t type metadata accessor for NotificationsOptInTipViewFactory()
{
  return objc_opt_self(_TtC7Weather32NotificationsOptInTipViewFactory);
}

uint64_t sub_100614D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

double sub_100614D94(uint64_t a1)
{
  double result;

  swift_bridgeObjectRetain();
  sub_1000BAD50(a1);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100614DD4(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x6156676E69727473 && a2 == 0xEB0000000065756CLL)
  {
    swift_bridgeObjectRelease(0xEB0000000065756CLL);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6156676E69727473, 0xEB0000000065756CLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_100614E70()
{
  return 0x6156676E69727473;
}

uint64_t sub_100614E90(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = sub_1000BA294(&qword_100BF77B0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1006152A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ConditionsChartID.CodingKeys, &type metadata for ConditionsChartID.CodingKeys, v12, v10, v11);
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, v13, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int sub_100614F80()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  swift_bridgeObjectRetain();
  sub_1000BAD50((uint64_t)v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

_QWORD *sub_100614FD4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_1000BA294(&qword_100BF77A0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_1000DB418(a1, v7);
  v10 = sub_1006152A4();
  v11 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ConditionsChartID.CodingKeys, &type metadata for ConditionsChartID.CodingKeys, v10, v7, v8);
  if (!v1)
  {
    v9 = (_QWORD *)KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  return v9;
}

uint64_t sub_1006150E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100614DD4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10061510C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006152A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100615134(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006152A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10061515C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1006B2524();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_100615184(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006B2538(a1, *v1, v1[1]);
}

_QWORD *sub_10061519C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_100614FD4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1006151C4(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100614E90(a1, *v1, v1[1]);
}

uint64_t sub_1006151DC(uint64_t *a1, uint64_t *a2)
{
  return sub_100614D78(*a1, a1[1], *a2, a2[1]);
}

Swift::Int sub_1006151F0()
{
  return sub_100614F80();
}

double sub_1006151F8(uint64_t a1)
{
  return sub_100614D94(a1);
}

ValueMetadata *type metadata accessor for ConditionsChartID()
{
  return &type metadata for ConditionsChartID;
}

unint64_t sub_100615214()
{
  unint64_t result;

  result = qword_100BF7798;
  if (!qword_100BF7798)
  {
    result = swift_getWitnessTable(&unk_1009B7C34, &type metadata for ConditionsChartID);
    atomic_store(result, (unint64_t *)&qword_100BF7798);
  }
  return result;
}

Swift::Int sub_100615250()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

unint64_t sub_1006152A4()
{
  unint64_t result;

  result = qword_100BF77A8;
  if (!qword_100BF77A8)
  {
    result = swift_getWitnessTable(&unk_1009B7DC0, &type metadata for ConditionsChartID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF77A8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ConditionsChartID.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100615320 + 4 * byte_1009B7BD0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100615340 + 4 * byte_1009B7BD5[v4]))();
}

_BYTE *sub_100615320(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100615340(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100615348(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100615350(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100615358(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100615360(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ConditionsChartID.CodingKeys()
{
  return &type metadata for ConditionsChartID.CodingKeys;
}

unint64_t sub_100615380()
{
  unint64_t result;

  result = qword_100BF77B8;
  if (!qword_100BF77B8)
  {
    result = swift_getWitnessTable(&unk_1009B7D98, &type metadata for ConditionsChartID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF77B8);
  }
  return result;
}

unint64_t sub_1006153C0()
{
  unint64_t result;

  result = qword_100BF77C0;
  if (!qword_100BF77C0)
  {
    result = swift_getWitnessTable(&unk_1009B7D08, &type metadata for ConditionsChartID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF77C0);
  }
  return result;
}

unint64_t sub_100615400()
{
  unint64_t result;

  result = qword_100BF77C8;
  if (!qword_100BF77C8)
  {
    result = swift_getWitnessTable(&unk_1009B7D30, &type metadata for ConditionsChartID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF77C8);
  }
  return result;
}

unint64_t sub_10061543C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC2BE8;
  if (!qword_100BC2BE8)
  {
    type metadata accessor for OpenExternalURLOptionsKey(255);
    result = swift_getWitnessTable(&unk_10097D0B4, v1);
    atomic_store(result, (unint64_t *)&qword_100BC2BE8);
  }
  return result;
}

uint64_t sub_10061547C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSURL *v10;
  void *v11;
  void *v12;
  Class isa;
  uint64_t v15;

  v2 = type metadata accessor for DetailComponentAction(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004123D8(a1, (uint64_t)v4);
  LOBYTE(a1) = v4[*(int *)(sub_1000BA294(&qword_100BC5FE8) + 48)];
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  if ((a1 & 1) == 0)
  {
    v9 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    URL._bridgeToObjectiveC()(v10);
    v12 = v11;
    type metadata accessor for OpenExternalURLOptionsKey(0);
    sub_10061543C();
    Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v9, "openURL:options:completionHandler:", v12, isa, 0, swift_bridgeObjectRelease().n128_f64[0]);

  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10061561C(uint64_t a1)
{
  return sub_10061547C(a1);
}

uint64_t sub_10061563C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((sub_10068A680(a1, a2) & 1) != 0
    && (v4 = type metadata accessor for DetailViewVisibilityTrackerModel(0),
        (static Location.== infix(_:_:)(a1 + *(int *)(v4 + 20), a2 + *(int *)(v4 + 20)) & 1) != 0))
  {
    return sub_10068A69C(a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24));
  }
  else
  {
    return 0;
  }
}

uint64_t *sub_1006156B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for DetailType(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for DetailViewOrigin(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_10061578C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for DetailType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for DetailViewOrigin(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t sub_100615814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for DetailType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DetailViewOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t sub_1006158C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for DetailType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DetailViewOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_100615974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for DetailType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DetailViewOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t sub_100615A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for DetailType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DetailViewOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_100615AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100615AE0);
}

uint64_t sub_100615AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1000BB21C();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    v9 = type metadata accessor for Location(0);
    if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
    {
      v7 = v9;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      v7 = type metadata accessor for DetailViewOrigin(0);
      v10 = *(int *)(a3 + 24);
    }
    v8 = v4 + v10;
  }
  return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
}

uint64_t sub_100615B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100615B6C);
}

uint64_t sub_100615B6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_1000BB21C();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    v11 = type metadata accessor for Location(0);
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v12 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = type metadata accessor for DetailViewOrigin(0);
      v12 = *(int *)(a4 + 24);
    }
    v10 = v5 + v12;
  }
  return _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

uint64_t type metadata accessor for DetailViewVisibilityTrackerModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF7828;
  if (!qword_100BF7828)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DetailViewVisibilityTrackerModel);
  return result;
}

uint64_t sub_100615C2C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  result = type metadata accessor for DetailType(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Location(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for DetailViewOrigin(319);
      if (v5 <= 0x3F)
      {
        v6[2] = *(_QWORD *)(result - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

void sub_100615CD0()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  _BYTE v5[48];

  sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100079F58();
  v3 = *(uint64_t (**)(uint64_t))(v1 + 16);
  *v0 = 0;
  swift_storeEnumTagMultiPayload(v0, v4, 15);
  sub_1000BA720();
  sub_1000B49C8((uint64_t)v0, (uint64_t)v5, v3);
  sub_100159C94((uint64_t)v5);
  sub_1000A0AA4((uint64_t)v0);
  sub_10009880C();
  sub_100079F70();
}

uint64_t sub_100615D48(uint64_t a1)
{
  return sub_100615D70(a1, &qword_100BD7130, (unsigned int *)&enum case for ConfiguredUnit.distance(_:));
}

uint64_t sub_100615D5C(uint64_t a1)
{
  return sub_100615D70(a1, &qword_100BD7138, (unsigned int *)&enum case for ConfiguredUnit.precipitation(_:));
}

uint64_t sub_100615D70(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, __n128);
  __n128 v18;
  _OWORD v20[2];
  uint64_t v21;

  v8 = type metadata accessor for ConfiguredUnit(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100079F58();
  v14 = *(uint64_t (**)(uint64_t))(v4 + 16);
  sub_10007EC08(a1, (uint64_t)v11, a2);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *a3, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v3, v11, v8);
  v15 = type metadata accessor for ConfiguredUnitsAction(0);
  swift_storeEnumTagMultiPayload(v3, v15, 0);
  v16 = type metadata accessor for EnvironmentAction(0);
  swift_storeEnumTagMultiPayload(v3, v16, 10);
  v17 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
  v18 = swift_retain();
  v17(v11, v8, v18);
  sub_1000BA718(v3, v12);
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  sub_1000B49C8(v3, (uint64_t)v20, v14);
  sub_100159C94((uint64_t)v20);
  sub_1000A0AA4(v3);
  return sub_10009880C();
}

uint64_t sub_100615ED0(uint64_t a1)
{
  return sub_100615D70(a1, &qword_100BD7140, (unsigned int *)&enum case for ConfiguredUnit.pressure(_:));
}

uint64_t sub_100615EE4(uint64_t a1)
{
  return sub_100615D70(a1, &qword_100BD7148, (unsigned int *)&enum case for ConfiguredUnit.temperature(_:));
}

uint64_t sub_100615EF8(uint64_t a1)
{
  return sub_100615D70(a1, qword_100BD7150, (unsigned int *)&enum case for ConfiguredUnit.windSpeed(_:));
}

void sub_100615F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[48];

  v1 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *(uint64_t (**)(uint64_t))(v0 + 16);
  v6 = type metadata accessor for ConfiguredUnitsAction(0);
  sub_1000BA718((uint64_t)v4, v6);
  v7 = type metadata accessor for EnvironmentAction(0);
  swift_storeEnumTagMultiPayload(v4, v7, 10);
  sub_1000BA718((uint64_t)v4, v1);
  sub_1000BA720();
  sub_1000B49C8((uint64_t)v4, (uint64_t)v8, v5);
  sub_100159C94((uint64_t)v8);
  sub_1000A0AA4((uint64_t)v4);
  sub_10009880C();
  sub_100079F70();
}

uint64_t type metadata accessor for UnitsConfigurationInteractor()
{
  return objc_opt_self(_TtC7Weather28UnitsConfigurationInteractor);
}

uint64_t sub_100615FDC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  _QWORD v26[3];
  uint64_t v27;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF79A8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v27)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BC47A0);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (result)
    {
      v11 = result;
      v12 = sub_100068EB4((uint64_t)v26, v27);
      __chkstk_darwin(v12);
      v14 = (_QWORD *)((char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v15 + 16))(v14);
      v16 = *v14;
      v17 = type metadata accessor for AveragesDetailInteractor();
      v25[3] = v17;
      v25[4] = &off_100B81550;
      v25[0] = v16;
      v18 = type metadata accessor for AveragesDetailModule();
      v19 = (_QWORD *)swift_allocObject(v18, 64, 7);
      v20 = sub_100068EB4((uint64_t)v25, v17);
      __chkstk_darwin(v20);
      v22 = (_QWORD *)((char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v23 + 16))(v22);
      v24 = *v22;
      v19[5] = v17;
      v19[6] = &off_100B81550;
      v19[2] = v24;
      v19[7] = v11;
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
      result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
      a2[3] = v18;
      a2[4] = &off_100B750A0;
      *a2 = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_1006161B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double result;

  v0 = sub_1000BA294(&qword_100BF79A0);
  v1 = RegistrationContainer.register<A>(_:name:factory:)(v0, 0, 0, sub_100616614, 0, v0);
  swift_release(v1);
  v2 = sub_1000BA294(&qword_100BF79A8);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_1006166FC, 0, v2);
  swift_release(v3);
  v4 = sub_1000BA294(&qword_100BF79B0);
  v5 = RegistrationContainer.register<A>(_:name:factory:)(v4, 0, 0, sub_10061691C, 0, v4);
  swift_release(v5);
  v6 = sub_1000BA294(&qword_100BF79B8);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_100616C94, 0, v6);
  swift_release(v7);
  v8 = sub_1000BA294(&qword_100BF79C0);
  v9 = RegistrationContainer.register<A>(_:name:factory:)(v8, 0, 0, sub_100616DDC, 0, v8);
  swift_release(v9);
  v10 = sub_1000BA294(&qword_100BF79C8);
  v11 = RegistrationContainer.register<A>(_:name:factory:)(v10, 0, 0, sub_100616DF4, 0, v10);
  swift_release(v11);
  v12 = sub_1000BA294(&qword_100BF79D0);
  v13 = RegistrationContainer.register<A>(_:name:factory:)(v12, 0, 0, sub_100616E0C, 0, v12);
  swift_release(v13);
  v14 = sub_1000BA294(&qword_100BF79D8);
  v15 = RegistrationContainer.register<A>(_:name:factory:)(v14, 0, 0, sub_100616E24, 0, v14);
  swift_release(v15);
  v16 = sub_1000BA294(&qword_100BF79E0);
  v17 = RegistrationContainer.register<A>(_:name:factory:)(v16, 0, 0, sub_100616F6C, 0, v16);
  swift_release(v17);
  v18 = RegistrationContainer.register<A>(_:name:factory:)(v10, 0, 0, sub_100617F94, 0, v10);
  swift_release(v18);
  v19 = sub_1000BA294(&qword_100BF79E8);
  v20 = RegistrationContainer.register<A>(_:name:factory:)(v19, 0, 0, sub_100616F84, 0, v19);
  swift_release(v20);
  v21 = sub_1000BA294(&qword_100BF79F0);
  v22 = RegistrationContainer.register<A>(_:name:factory:)(v21, 0, 0, sub_100616F9C, 0, v21);
  swift_release(v22);
  v23 = sub_1000BA294(&qword_100BF79F8);
  v24 = RegistrationContainer.register<A>(_:name:factory:)(v23, 0, 0, sub_100617314, 0, v23);
  swift_release(v24);
  v25 = sub_1000BA294(&qword_100BF7A00);
  v26 = RegistrationContainer.register<A>(_:name:factory:)(v25, 0, 0, sub_1006174F4, 0, v25);
  swift_release(v26);
  v27 = sub_1000BA294(&qword_100BF7A08);
  v28 = RegistrationContainer.register<A>(_:name:factory:)(v27, 0, 0, sub_10061752C, 0, v27);
  swift_release(v28);
  v29 = sub_1000BA294(&qword_100BF7A10);
  v30 = RegistrationContainer.register<A>(_:name:factory:)(v29, 0, 0, sub_100617640, 0, v29);
  swift_release(v30);
  v31 = sub_1000BA294(&qword_100BF7A18);
  v32 = RegistrationContainer.register<A>(_:name:factory:)(v31, 0, 0, sub_100617658, 0, v31);
  swift_release(v32);
  v33 = sub_1000BA294(&qword_100BF7A20);
  v34 = RegistrationContainer.register<A>(_:name:factory:)(v33, 0, 0, sub_1006176F8, 0, v33);
  swift_release(v34);
  v35 = sub_1000BA294(&qword_100BF7A28);
  v36 = RegistrationContainer.register<A>(_:name:factory:)(v35, 0, 0, sub_100617710, 0, v35);
  swift_release(v36);
  v37 = sub_1000BA294(&qword_100BF7A30);
  v38 = RegistrationContainer.register<A>(_:name:factory:)(v37, 0, 0, sub_1006178F0, 0, v37);
  swift_release(v38);
  v39 = sub_1000BA294(&qword_100BED4C8);
  v40 = RegistrationContainer.register<A>(_:name:factory:)(v39, 0, 0, sub_1005261F4, 0, v39);
  swift_release(v40);
  v41 = sub_1000BA294(&qword_100BF7A38);
  v42 = RegistrationContainer.register<A>(_:name:factory:)(v41, 0, 0, sub_100617A2C, 0, v41);
  swift_release(v42);
  v43 = sub_1000BA294(&qword_100BF7A40);
  v44 = RegistrationContainer.register<A>(_:name:factory:)(v43, 0, 0, sub_100617A44, 0, v43);
  swift_release(v44);
  v45 = sub_1000BA294(&qword_100BF7A48);
  v46 = RegistrationContainer.register<A>(_:name:factory:)(v45, 0, 0, sub_100617AE4, 0, v45);
  swift_release(v46);
  v47 = sub_1000BA294(&qword_100BC47A0);
  v48 = RegistrationContainer.register<A>(_:name:factory:)(v47, 0, 0, sub_100617AFC, 0, v47);
  *(_QWORD *)&result = swift_release(v48).n128_u64[0];
  return result;
}

uint64_t sub_100616614@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = type metadata accessor for Tracker(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (result)
  {
    v8 = result;
    v9 = a1[3];
    v10 = a1[4];
    sub_1000DB418(a1, v9);
    v11 = sub_1000BA294(&qword_100BC43F8);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
    if (v14)
    {
      a2[3] = (uint64_t)&type metadata for AveragesDetailTracker;
      a2[4] = (uint64_t)&off_100B80910;
      v12 = swift_allocObject(&unk_100B84C90, 64, 7);
      *a2 = v12;
      *(_QWORD *)(v12 + 16) = v8;
      return sub_10003C800(&v13, v12 + 24);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1006166FC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  ValueWitnessTable *v23;
  uint64_t *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  v8 = v32;
  if (v32)
  {
    v28 = v33;
    v9 = a1[3];
    v10 = a1[4];
    sub_1000DB418(a1, v9);
    v11 = sub_1000BA294(&qword_100BF79A0);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
    if (v31)
    {
      v12 = sub_100068EB4((uint64_t)v30, v31);
      __chkstk_darwin(v12);
      v14 = (_OWORD *)((char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(_OWORD *))(v15 + 16))(v14);
      v29[3] = &type metadata for AveragesDetailTracker;
      v29[4] = &off_100B80910;
      v16 = (_OWORD *)swift_allocObject(&unk_100B84C90, 64, 7);
      v29[0] = v16;
      v17 = v14[1];
      v16[1] = *v14;
      v16[2] = v17;
      v16[3] = v14[2];
      v18 = type metadata accessor for AveragesDetailInteractor();
      v19 = (_QWORD *)swift_allocObject(v18, 72, 7);
      v20 = sub_100068EB4((uint64_t)v29, (uint64_t)&type metadata for AveragesDetailTracker);
      __chkstk_darwin(v20);
      v22 = (_OWORD *)((char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
      ((void (*)(uint64_t, uint64_t *))v23->initializeWithCopy)((uint64_t)v22, v24);
      v19[7] = &type metadata for AveragesDetailTracker;
      v19[8] = &off_100B80910;
      v25 = (_OWORD *)swift_allocObject(&unk_100B84C90, 64, 7);
      v26 = v22[1];
      v25[1] = *v22;
      v25[2] = v26;
      v25[3] = v22[2];
      v19[2] = v8;
      v19[3] = v28;
      v19[4] = v25;
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v29);
      result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v30);
      a2[3] = v18;
      a2[4] = &off_100B81550;
      *a2 = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10061691C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  ValueWitnessTable *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  ValueWitnessTable *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  _QWORD v34[5];
  _QWORD v35[5];
  _QWORD v36[3];
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF79B8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v39)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BF79D8);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (v37)
    {
      v11 = sub_100068EB4((uint64_t)v38, v39);
      v33[2] = v33;
      __chkstk_darwin(v11);
      v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v14 + 16))(v13);
      v15 = sub_100068EB4((uint64_t)v36, v37);
      v33[1] = v33;
      __chkstk_darwin(v15);
      v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v18 + 16))(v17);
      v35[3] = &type metadata for PrecipitationAveragesDetailInputFactory;
      v35[4] = &off_100B66610;
      v35[0] = swift_allocObject(&unk_100B84C68, 136, 7);
      memcpy((void *)(v35[0] + 16), v13, 0x78uLL);
      v34[3] = &type metadata for TemperatureAveragesDetailInputFactory;
      v34[4] = &off_100B64908;
      v34[0] = swift_allocObject(&unk_100B84C40, 136, 7);
      memcpy((void *)(v34[0] + 16), v17, 0x78uLL);
      v19 = type metadata accessor for AveragesDetailInputFactory();
      v20 = (_QWORD *)swift_allocObject(v19, 96, 7);
      v21 = sub_100068EB4((uint64_t)v35, (uint64_t)&type metadata for PrecipitationAveragesDetailInputFactory);
      __chkstk_darwin(v21);
      v23 = (_OWORD *)((char *)v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
      ((void (*)(_OWORD *, _OWORD *))v24->initializeWithCopy)(v23, v25);
      v26 = sub_100068EB4((uint64_t)v34, (uint64_t)&type metadata for TemperatureAveragesDetailInputFactory);
      __chkstk_darwin(v26);
      v28 = (_OWORD *)((char *)v33 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
      ((void (*)(_OWORD *, _OWORD *))v29->initializeWithCopy)(v28, v30);
      v20[5] = &type metadata for PrecipitationAveragesDetailInputFactory;
      v20[6] = &off_100B66610;
      v31 = swift_allocObject(&unk_100B84C68, 136, 7);
      v20[2] = v31;
      memcpy((void *)(v31 + 16), v23, 0x78uLL);
      v20[10] = &type metadata for TemperatureAveragesDetailInputFactory;
      v20[11] = &off_100B64908;
      v32 = swift_allocObject(&unk_100B84C40, 136, 7);
      v20[7] = v32;
      memcpy((void *)(v32 + 16), v28, 0x78uLL);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v34);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v35);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v36);
      result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v38);
      a2[3] = v19;
      a2[4] = &off_100B706B0;
      *a2 = v20;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100616C94@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF79C0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v20)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BF79C8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BF79D0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (v16)
  {
    a2[3] = (uint64_t)&type metadata for PrecipitationAveragesDetailInputFactory;
    a2[4] = (uint64_t)&off_100B66610;
    v14 = swift_allocObject(&unk_100B84C68, 136, 7);
    *a2 = v14;
    sub_10003C800(&v19, v14 + 16);
    sub_10003C800(&v17, v14 + 56);
    return sub_10003C800(&v15, v14 + 96);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_100616DDC(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for PrecipitationAveragesHeroChartInputFactory;
  *(_QWORD *)(a1 + 32) = &off_100B68768;
}

void sub_100616DF4(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for MonthlyAveragesChartInputFactory;
  *(_QWORD *)(a1 + 32) = &off_100B95498;
}

void sub_100616E0C(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for HistoricalFactsPlatterInputFactory;
  *(_QWORD *)(a1 + 32) = &off_100B80DD0;
}

uint64_t sub_100616E24@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF79D0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v20)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BF79E0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BF79C8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (v16)
  {
    a2[3] = (uint64_t)&type metadata for TemperatureAveragesDetailInputFactory;
    a2[4] = (uint64_t)&off_100B64908;
    v14 = swift_allocObject(&unk_100B84C40, 136, 7);
    *a2 = v14;
    sub_10003C800(&v19, v14 + 16);
    sub_10003C800(&v17, v14 + 56);
    return sub_10003C800(&v15, v14 + 96);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_100616F6C(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for TemperatureAveragesHeroChartInputFactory;
  *(_QWORD *)(a1 + 32) = &off_100B68450;
}

void sub_100616F84(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for HistoricalFactsPlatterViewModelFactory;
  *(_QWORD *)(a1 + 32) = &off_100B91868;
}

uint64_t sub_100616F9C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  ValueWitnessTable *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  ValueWitnessTable *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  _QWORD v34[5];
  _QWORD v35[5];
  _QWORD v36[3];
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF79F8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v39)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BF7A28);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (v37)
    {
      v11 = sub_100068EB4((uint64_t)v38, v39);
      v33[2] = v33;
      __chkstk_darwin(v11);
      v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v14 + 16))(v13);
      v15 = sub_100068EB4((uint64_t)v36, v37);
      v33[1] = v33;
      __chkstk_darwin(v15);
      v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v18 + 16))(v17);
      v35[3] = &type metadata for PrecipitationAveragesDetailViewModelFactory;
      v35[4] = &off_100B890D8;
      v35[0] = swift_allocObject(&unk_100B84C18, 216, 7);
      memcpy((void *)(v35[0] + 16), v13, 0xC8uLL);
      v34[3] = &type metadata for TemperatureAveragesDetailViewModelFactory;
      v34[4] = &off_100B70A78;
      v34[0] = swift_allocObject(&unk_100B84BA0, 216, 7);
      memcpy((void *)(v34[0] + 16), v17, 0xC8uLL);
      v19 = type metadata accessor for AveragesDetailViewModelFactory();
      v20 = (_QWORD *)swift_allocObject(v19, 96, 7);
      v21 = sub_100068EB4((uint64_t)v35, (uint64_t)&type metadata for PrecipitationAveragesDetailViewModelFactory);
      __chkstk_darwin(v21);
      v23 = (_OWORD *)((char *)v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
      ((void (*)(_OWORD *, _OWORD *))v24->initializeWithCopy)(v23, v25);
      v26 = sub_100068EB4((uint64_t)v34, (uint64_t)&type metadata for TemperatureAveragesDetailViewModelFactory);
      __chkstk_darwin(v26);
      v28 = (_OWORD *)((char *)v33 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
      ((void (*)(_OWORD *, _OWORD *))v29->initializeWithCopy)(v28, v30);
      v20[5] = &type metadata for PrecipitationAveragesDetailViewModelFactory;
      v20[6] = &off_100B890D8;
      v31 = swift_allocObject(&unk_100B84C18, 216, 7);
      v20[2] = v31;
      memcpy((void *)(v31 + 16), v23, 0xC8uLL);
      v20[10] = &type metadata for TemperatureAveragesDetailViewModelFactory;
      v20[11] = &off_100B70A78;
      v32 = swift_allocObject(&unk_100B84BA0, 216, 7);
      v20[7] = v32;
      memcpy((void *)(v32 + 16), v28, 0xC8uLL);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v34);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v35);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v36);
      result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v38);
      a2[3] = v19;
      a2[4] = &off_100B8FC48;
      *a2 = v20;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100617314@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF79E8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v30)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BF7A08);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v28)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BF7A10);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!v26)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_1000DB418(a1, v14);
  v16 = sub_1000BA294(&qword_100BF7A18);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (!v24)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v17 = a1[3];
  v18 = a1[4];
  sub_1000DB418(a1, v17);
  v19 = sub_1000BA294(&qword_100BC43E8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v19, v19, v17, v18);
  if (v22)
  {
    a2[3] = (uint64_t)&type metadata for PrecipitationAveragesDetailViewModelFactory;
    a2[4] = (uint64_t)&off_100B890D8;
    v20 = swift_allocObject(&unk_100B84C18, 216, 7);
    *a2 = v20;
    sub_10003C800(&v29, v20 + 16);
    sub_10003C800(&v27, v20 + 56);
    sub_10003C800(&v25, v20 + 96);
    sub_10003C800(&v23, v20 + 136);
    return sub_10003C800(&v21, v20 + 176);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1006174F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for UnitManager(0);
  result = static UnitManager.standard.getter();
  *a1 = result;
  a1[1] = (uint64_t)&protocol witness table for UnitManager;
  return result;
}

uint64_t sub_10061752C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF7A00);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  v8 = v16;
  if (v16)
  {
    v9 = v17;
    v10 = a1[3];
    v11 = a1[4];
    sub_1000DB418(a1, v10);
    v12 = sub_1000BA294(&qword_100BED4C8);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
    if (v15)
    {
      a2[3] = &type metadata for PrecipitationAveragesHeroChartViewModelFactory;
      a2[4] = &off_100B647B8;
      v13 = (_QWORD *)swift_allocObject(&unk_100B84BF0, 80, 7);
      *a2 = v13;
      type metadata accessor for WeatherService(0);
      v13[9] = static WeatherService.statisticsPastDaysToFetch.getter();
      v13[2] = v8;
      v13[3] = v9;
      return sub_10003C800(&v14, (uint64_t)(v13 + 4));
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100617640(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for PrecipitationAveragesSummaryStringBuilder;
  *(_QWORD *)(a1 + 32) = &off_100B90BD0;
}

uint64_t sub_100617658@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BF7A20);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v9)
  {
    a2[3] = (uint64_t)&type metadata for PrecipitationMonthlyAveragesChartViewModelFactory;
    a2[4] = (uint64_t)&off_100B98508;
    v7 = swift_allocObject(&unk_100B84BC8, 56, 7);
    *a2 = v7;
    return sub_10003C800(&v8, v7 + 16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

