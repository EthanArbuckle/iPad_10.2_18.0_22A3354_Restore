uint64_t sub_1000EF0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = v7[6];
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  v14 = v7[17];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  swift_retain(v15);
  swift_release(v16);
  v17 = v7[18];
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  swift_retain(v18);
  swift_release(v19);
  v20 = v7[19];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_retain(v21);
  swift_release(v22);
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v23 = v7[22];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  v26 = sub_100005D40(&qword_1001BF090);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v26);
  v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v26);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v29 = *(_QWORD *)(v26 - 8);
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v29 + 8))(v24, v26);
LABEL_6:
    v30 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v29 + 24))(v24, v25, v26);
LABEL_7:
  v31 = v7[23];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  v34 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v31, 1, v26);
  v35 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v33, 1, v26);
  if (!v34)
  {
    v36 = *(_QWORD *)(v26 - 8);
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v36 + 24))(v32, v33, v26);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v36 + 8))(v32, v26);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v37 = sub_100005D40(&qword_1001BF098);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v32, v33, v26);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v32, 0, 1, v26);
LABEL_13:
  v38 = *(int *)(a3 + 20);
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = *(_QWORD *)(a1 + v38);
  v42 = *(_QWORD *)(a2 + v38);
  *(_QWORD *)(a1 + v38) = v42;
  swift_retain(v42);
  swift_release(v41);
  v43 = *(_QWORD *)(v40 + 8);
  v44 = *(_QWORD *)(v39 + 8);
  *(_QWORD *)(v39 + 8) = v43;
  swift_retain(v43);
  swift_release(v44);
  v45 = *(_QWORD *)(v40 + 16);
  v46 = *(_QWORD *)(v39 + 16);
  *(_QWORD *)(v39 + 16) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = *(int *)(a3 + 24);
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 24))(v48, v49, v50);
  return a1;
}

uint64_t sub_1000EF450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  *(_QWORD *)(a1 + v7[17]) = *(_QWORD *)(a2 + v7[17]);
  *(_QWORD *)(a1 + v7[18]) = *(_QWORD *)(a2 + v7[18]);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v8 = v7[22];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
  {
    v12 = sub_100005D40(&qword_1001BF098);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
  }
  v13 = v7[23];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v13, 1, v11))
  {
    v16 = sub_100005D40(&qword_1001BF098);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v14, v15, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
  }
  v17 = *(int *)(a3 + 20);
  v18 = *(int *)(a3 + 24);
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
  v21 = a1 + v18;
  v22 = a2 + v18;
  v23 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

uint64_t sub_1000EF6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  v10 = v7[17];
  v11 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  swift_release(v11);
  v12 = v7[18];
  v13 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_release(v13);
  v14 = v7[19];
  v15 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v15);
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v16 = v7[22];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_100005D40(&qword_1001BF090);
  v20 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v17, 1, v19);
  v21 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v19);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v22 = *(_QWORD *)(v19 - 8);
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v17, v19);
LABEL_6:
    v23 = sub_100005D40(&qword_1001BF098);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v22 + 40))(v17, v18, v19);
LABEL_7:
  v24 = v7[23];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v24, 1, v19);
  v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v19);
  if (!v27)
  {
    v29 = *(_QWORD *)(v19 - 8);
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 40))(v25, v26, v19);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v29 + 8))(v25, v19);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v30 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v25, v26, v19);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v19);
LABEL_13:
  v31 = *(int *)(a3 + 20);
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = *(_QWORD *)(a1 + v31);
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  swift_release(v34);
  v35 = *(_QWORD *)(v32 + 8);
  *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
  swift_release(v35);
  v36 = *(_QWORD *)(v32 + 16);
  *(_QWORD *)(v32 + 16) = *(_QWORD *)(v33 + 16);
  swift_bridgeObjectRelease(v36);
  v37 = *(int *)(a3 + 24);
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 40))(v38, v39, v40);
  return a1;
}

uint64_t sub_1000EF9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EFA08);
}

void sub_1000EFA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001C7FC();
  sub_10001C6C0();
  if (v7)
  {
    v8 = v6;
    v9 = a1;
  }
  else
  {
    if ((_DWORD)a2 == 0x7FFFFFFF)
    {
      sub_100044448(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8));
      sub_1000443A4();
      return;
    }
    v8 = sub_1000FA180();
    v9 = a1 + *(int *)(a3 + 24);
  }
  sub_100016B50(v9, a2, v8);
}

uint64_t sub_1000EFA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EFA88);
}

void sub_1000EFA88(uint64_t a1, uint64_t a2, int a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10001C7FC();
  sub_10001C6D0();
  if (!v4)
  {
    if (a3 == 0x7FFFFFFF)
    {
      sub_1000FA1E8();
      sub_1000443A4();
      return;
    }
    sub_1000FA180();
  }
  sub_1000A75F8();
  sub_100016B44(v5, v6, v7, v8);
}

uint64_t sub_1000EFAF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for DailyViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_1001803B8;
    result = type metadata accessor for Text.Measurements(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000EFB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F9EAC);
}

uint64_t sub_1000EFBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F9EA0);
}

_QWORD *sub_1000EFBB4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for DailyViewAttributes(0);
    v9 = v8[5];
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *(_WORD *)((char *)a1 + v8[6]) = *(_WORD *)((char *)a2 + v8[6]);
    *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
    *((_BYTE *)a1 + v8[8]) = *((_BYTE *)a2 + v8[8]);
    *((_BYTE *)a1 + v8[9]) = *((_BYTE *)a2 + v8[9]);
    *((_BYTE *)a1 + v8[10]) = *((_BYTE *)a2 + v8[10]);
    *(_QWORD *)((char *)a1 + v8[11]) = *(_QWORD *)((char *)a2 + v8[11]);
    *((_BYTE *)a1 + v8[12]) = *((_BYTE *)a2 + v8[12]);
    *((_BYTE *)a1 + v8[13]) = *((_BYTE *)a2 + v8[13]);
    *((_BYTE *)a1 + v8[14]) = *((_BYTE *)a2 + v8[14]);
    *((_BYTE *)a1 + v8[15]) = *((_BYTE *)a2 + v8[15]);
    *(_QWORD *)((char *)a1 + v8[16]) = *(_QWORD *)((char *)a2 + v8[16]);
    v11 = v8[17];
    v12 = *(_QWORD *)((char *)a2 + v11);
    *(_QWORD *)((char *)a1 + v11) = v12;
    v13 = v8[18];
    v14 = *(_QWORD *)((char *)a2 + v13);
    *(_QWORD *)((char *)a1 + v13) = v14;
    v15 = v8[19];
    v16 = *(_QWORD *)((char *)a2 + v15);
    *(_QWORD *)((char *)a1 + v15) = v16;
    *(_QWORD *)((char *)a1 + v8[20]) = *(_QWORD *)((char *)a2 + v8[20]);
    *(_QWORD *)((char *)a1 + v8[21]) = *(_QWORD *)((char *)a2 + v8[21]);
    v17 = v8[22];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    swift_bridgeObjectRetain(v10);
    swift_retain(v12);
    swift_retain(v14);
    swift_retain(v16);
    v20 = sub_100005D40(&qword_1001BF090);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v20))
    {
      v21 = sub_100005D40(&qword_1001BF098);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v18, 0, 1, v20);
    }
    v23 = v8[23];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v23, 1, v20))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v24, v25, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v20);
    }
    v27 = *(int *)(a3 + 20);
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for Text.Measurements(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  }
  return a1;
}

uint64_t sub_1000EFE58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for DailyViewAttributes(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[5]));
  swift_release(*(_QWORD *)(a1 + v5[17]));
  swift_release(*(_QWORD *)(a1 + v5[18]));
  swift_release(*(_QWORD *)(a1 + v5[19]));
  v6 = a1 + v5[22];
  v7 = sub_100005D40(&qword_1001BF090);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + v5[23];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v8, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v8, v7);
  v9 = a1 + *(int *)(a2 + 20);
  v10 = type metadata accessor for Text.Measurements(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t sub_1000EFF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  v10 = v7[17];
  v11 = *(_QWORD *)(a2 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  v12 = v7[18];
  v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  v14 = v7[19];
  v15 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v16 = v7[22];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  swift_bridgeObjectRetain(v9);
  swift_retain(v11);
  swift_retain(v13);
  swift_retain(v15);
  v19 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v19))
  {
    v20 = sub_100005D40(&qword_1001BF098);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v19);
  }
  v21 = v7[23];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v21, 1, v19))
  {
    v24 = sub_100005D40(&qword_1001BF098);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v22, v23, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v22, 0, 1, v19);
  }
  v25 = *(int *)(a3 + 20);
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
  return a1;
}

uint64_t sub_1000F01E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = v7[6];
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  v14 = v7[17];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  swift_retain(v15);
  swift_release(v16);
  v17 = v7[18];
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  swift_retain(v18);
  swift_release(v19);
  v20 = v7[19];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_retain(v21);
  swift_release(v22);
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v23 = v7[22];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  v26 = sub_100005D40(&qword_1001BF090);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v26);
  v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v26);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v29 = *(_QWORD *)(v26 - 8);
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v29 + 8))(v24, v26);
LABEL_6:
    v30 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v29 + 24))(v24, v25, v26);
LABEL_7:
  v31 = v7[23];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  v34 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v31, 1, v26);
  v35 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v33, 1, v26);
  if (!v34)
  {
    v36 = *(_QWORD *)(v26 - 8);
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v36 + 24))(v32, v33, v26);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v36 + 8))(v32, v26);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v37 = sub_100005D40(&qword_1001BF098);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v32, v33, v26);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v32, 0, 1, v26);
LABEL_13:
  v38 = *(int *)(a3 + 20);
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  return a1;
}

uint64_t sub_1000F051C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  *(_QWORD *)(a1 + v7[17]) = *(_QWORD *)(a2 + v7[17]);
  *(_QWORD *)(a1 + v7[18]) = *(_QWORD *)(a2 + v7[18]);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v8 = v7[22];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
  {
    v12 = sub_100005D40(&qword_1001BF098);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
  }
  v13 = v7[23];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v13, 1, v11))
  {
    v16 = sub_100005D40(&qword_1001BF098);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v14, v15, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
  }
  v17 = *(int *)(a3 + 20);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  return a1;
}

uint64_t sub_1000F0770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  v10 = v7[17];
  v11 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  swift_release(v11);
  v12 = v7[18];
  v13 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_release(v13);
  v14 = v7[19];
  v15 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v15);
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v16 = v7[22];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_100005D40(&qword_1001BF090);
  v20 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v17, 1, v19);
  v21 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v19);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v22 = *(_QWORD *)(v19 - 8);
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v17, v19);
LABEL_6:
    v23 = sub_100005D40(&qword_1001BF098);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v22 + 40))(v17, v18, v19);
LABEL_7:
  v24 = v7[23];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v24, 1, v19);
  v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v19);
  if (!v27)
  {
    v29 = *(_QWORD *)(v19 - 8);
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 40))(v25, v26, v19);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v29 + 8))(v25, v19);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v30 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v25, v26, v19);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v19);
LABEL_13:
  v31 = *(int *)(a3 + 20);
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  return a1;
}

uint64_t sub_1000F0A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F0A80);
}

uint64_t sub_1000F0A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001C7FC();
  sub_10001C6C0();
  if (v7)
  {
    v8 = v6;
    v9 = a1;
  }
  else
  {
    v8 = sub_1000FA180();
    v9 = a1 + *(int *)(a3 + 20);
  }
  return sub_100016B50(v9, a2, v8);
}

uint64_t sub_1000F0AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F0ADC);
}

uint64_t sub_1000F0ADC()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10001C7FC();
  sub_10001C6D0();
  if (!v0)
    sub_1000FA180();
  sub_1000A75F8();
  return sub_100016B44(v1, v2, v3, v4);
}

uint64_t sub_1000F0B30(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for DailyViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Text.Measurements(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

void sub_1000F0BB4()
{
  sub_100016A54(&qword_1001C3F80, &qword_1001C3F88);
}

uint64_t sub_1000F0BE0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A0310, 1);
}

uint64_t sub_1000F0BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  double v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  uint64_t v115;
  unint64_t v116;
  double v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(char *, uint64_t);
  uint64_t (*v174)(char *, uint64_t, uint64_t);
  void (*v175)(char *, uint64_t);
  void (*v176)(char *, uint64_t);
  uint64_t v177;
  unsigned int v178;
  uint64_t (*v179)(_QWORD, _QWORD, _QWORD);
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  unint64_t v192;
  unint64_t v193;

  v4 = type metadata accessor for LargeDailyView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D40(&qword_1001C3F98);
  __chkstk_darwin(v8);
  v10 = (char *)&v155 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = type metadata accessor for WeatherFormatPlaceholder(0);
  v171 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v183 = (char *)&v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v170 = *(_QWORD *)(v182 - 8);
  v12 = __chkstk_darwin(v182);
  v181 = (char *)&v155 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v180 = (char *)&v155 - v14;
  v190 = sub_100005D40(&qword_1001BF090);
  v172 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v189 = (char *)&v155 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DailyViewAttributes(0);
  v162 = *(int *)(v16 + 20);
  v188 = a1;
  v17 = *(_QWORD *)(a1 + v162);
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v156 = v5;
    v157 = v6;
    v158 = (char *)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v159 = a2;
    v19 = v16;
    v20 = v18;
    v168 = type metadata accessor for DailyForecastViewModel(0);
    v21 = *(_QWORD *)(v168 - 8);
    v22 = v17 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v161 = v4;
    v167 = v188 + *(int *)(v4 + 24);
    v166 = type metadata accessor for UnitManager(0);
    v160 = v19;
    v165 = *(int *)(v19 + 68);
    v164 = *(_QWORD *)(v21 + 72);
    v23 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v172 + 16);
    v24 = enum case for WeatherFormatPlaceholder.none(_:);
    v163 = v17;
    swift_bridgeObjectRetain(v17);
    v25 = 0.0;
    v191 = v10;
    v179 = v23;
    v178 = v24;
    do
    {
      v187 = v22;
      v26 = v24;
      v27 = v183;
      v28 = v184;
      v29 = v23(v189, v22 + *(int *)(v168 + 28), v190);
      v30 = v180;
      v31 = static WeatherFormatStyle<>.weather.getter(v29);
      v32 = v181;
      NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v31);
      v33 = *(void (**)(char *, uint64_t))(v170 + 8);
      v34 = v182;
      v33(v30, v182);
      v35 = v171;
      v174 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v171 + 104);
      v36 = v174(v27, v26, v28);
      v37 = static UnitManager.standard.getter(v36);
      sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
      v38 = v190;
      v177 = v39;
      v40 = v189;
      v41 = Measurement.formatted<A>(_:placeholder:unitManager:)(v32, v27, v37, &protocol witness table for UnitManager, v190, v34);
      v185 = v42;
      v186 = v41;
      swift_release(v37);
      v176 = *(void (**)(char *, uint64_t))(v35 + 8);
      v176(v27, v28);
      v173 = v33;
      v33(v32, v34);
      v175 = *(void (**)(char *, uint64_t))(v172 + 8);
      v175(v40, v38);
      v192 = v186;
      v193 = v185;
      v186 = sub_10001692C();
      v43 = Text.init<A>(_:)(&v192, &type metadata for String, v186);
      v45 = v44;
      v47 = v46;
      v49 = v48 & 1;
      v50 = *(_QWORD *)(v188 + v165);
      static Font.Weight.semibold.getter(v51);
      v52 = Font.weight(_:)(v50);
      v53 = Font.monospacedDigit()(v52);
      swift_release(v52);
      v54 = Text.font(_:)(v53, v43, v45, v49, v47);
      v55 = v20;
      v57 = v56;
      LOBYTE(v28) = v58;
      v60 = v59;
      swift_release(v53);
      v61 = v45;
      v62 = (uint64_t)v191;
      sub_100016868(v43, v61, v49);
      v63 = swift_bridgeObjectRelease(v47);
      v64 = type metadata accessor for Text.WritingMode(0, v63);
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v62, 1, 1, v64);
      v65 = Text.Measurements.size(of:in:writingMode:)(v54, v57, v28 & 1, v60, v62, INFINITY, INFINITY);
      v23 = v179;
      v66 = v65;
      v67 = v54;
      v24 = v178;
      v68 = v57;
      v69 = v55;
      v70 = v187;
      sub_100016868(v67, v68, v28 & 1);
      swift_bridgeObjectRelease(v60);
      sub_100016904(v62, &qword_1001C3F98);
      if (v25 <= v66)
        v25 = v66;
      v22 = v70 + v164;
      v20 = v69 - 1;
    }
    while (v20);
    swift_bridgeObjectRelease(v163);
    v17 = *(_QWORD *)(v188 + v162);
    if (*(_QWORD *)(v17 + 16))
    {
      v187 = *(_QWORD *)(v17 + 16);
      v71 = type metadata accessor for DailyForecastViewModel(0);
      v169 = v64;
      v171 = v71;
      v72 = *(_QWORD *)(v71 - 8);
      v166 = (*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
      v73 = v17 + v166;
      v170 = v188 + *(int *)(v161 + 24);
      v168 = type metadata accessor for UnitManager(0);
      v167 = *(int *)(v160 + 68);
      v74 = *(_QWORD *)(v72 + 72);
      v163 = v17;
      swift_bridgeObjectRetain(v17);
      v75 = 0.0;
      v172 = v74;
      do
      {
        v185 = v73;
        v76 = v189;
        v77 = v190;
        v78 = v23(v189, v73 + *(int *)(v171 + 24), v190);
        v79 = v180;
        v80 = static WeatherFormatStyle<>.weather.getter(v78);
        v81 = v181;
        NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v80);
        v82 = v182;
        v83 = v173;
        v173(v79, v182);
        v84 = v183;
        v85 = v184;
        v86 = v174(v183, v24, v184);
        v87 = static UnitManager.standard.getter(v86);
        v88 = Measurement.formatted<A>(_:placeholder:unitManager:)(v81, v84, v87, &protocol witness table for UnitManager, v77, v82);
        v90 = v89;
        swift_release(v87);
        v176(v84, v85);
        v91 = v81;
        v92 = v185;
        v83(v91, v82);
        v175(v76, v77);
        v192 = v88;
        v193 = v90;
        v93 = Text.init<A>(_:)(&v192, &type metadata for String, v186);
        v95 = v94;
        v97 = v96;
        v99 = v98 & 1;
        v100 = *(_QWORD *)(v188 + v167);
        static Font.Weight.semibold.getter(v101);
        v102 = Font.weight(_:)(v100);
        v103 = Font.monospacedDigit()(v102);
        swift_release(v102);
        v104 = Text.font(_:)(v103, v93, v95, v99, v97);
        v106 = v105;
        LOBYTE(v77) = v107;
        v109 = v108;
        swift_release(v103);
        v110 = v93;
        v111 = v172;
        sub_100016868(v110, v95, v99);
        v112 = v97;
        v24 = v178;
        swift_bridgeObjectRelease(v112);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v191, 1, 1, v169);
        v113 = Text.Measurements.size(of:in:writingMode:)(v104, v106, v77 & 1, v109, v191, INFINITY, INFINITY);
        v23 = v179;
        v114 = v113;
        sub_100016868(v104, v106, v77 & 1);
        swift_bridgeObjectRelease(v109);
        sub_100016904((uint64_t)v191, &qword_1001C3F98);
        if (v75 <= v114)
          v75 = v114;
        v73 = v92 + v111;
        --v187;
      }
      while (v187);
      swift_bridgeObjectRelease(v163);
      v17 = *(_QWORD *)(v188 + v162);
      v115 = *(_QWORD *)(v17 + 16);
      if (v115)
      {
        v116 = v17 + v166;
        v190 = *(int *)(v160 + 72);
        v189 = (char *)(v188 + *(int *)(v161 + 24));
        v187 = type metadata accessor for ConditionViewModel(0);
        v163 = v17;
        swift_bridgeObjectRetain(v17);
        v117 = 0.0;
        do
        {
          v118 = (uint64_t *)(v116 + *(int *)(v171 + 32) + (uint64_t)*(int *)(v187 + 24));
          v119 = *v118;
          v120 = v118[1];
          swift_bridgeObjectRetain(v120);
          v121 = Image.init(systemName:)(v119, v120);
          v122 = Text.init(_:)(v121);
          v124 = v123;
          v125 = v115;
          v127 = v126;
          v129 = v128 & 1;
          v130 = Text.font(_:)(*(_QWORD *)(v188 + v190), v122, v123, v129, v126);
          v132 = v131;
          v134 = v133;
          v136 = v135 & 1;
          v137 = v122;
          v138 = (uint64_t)v191;
          sub_100016868(v137, v124, v129);
          swift_bridgeObjectRelease(v127);
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v138, 1, 1, v169);
          v139 = Text.Measurements.size(of:in:writingMode:)(v130, v132, v136, v134, v138, INFINITY, INFINITY);
          sub_100016868(v130, v132, v136);
          swift_bridgeObjectRelease(v134);
          sub_100016904(v138, &qword_1001C3F98);
          if (v117 <= v139)
            v117 = v139;
          v116 += v172;
          v115 = v125 - 1;
        }
        while (v125 != 1);
        swift_bridgeObjectRelease(v163);
        v17 = *(_QWORD *)(v188 + v162);
        goto LABEL_20;
      }
    }
    else
    {
      v75 = 0.0;
    }
    v117 = 0.0;
LABEL_20:
    v7 = v158;
    v6 = v157;
    v5 = v156;
    goto LABEL_21;
  }
  v75 = 0.0;
  v25 = 0.0;
  v117 = 0.0;
LABEL_21:
  v192 = v17;
  sub_10000F7C4(v188, (uint64_t)v7, type metadata accessor for LargeDailyView);
  v140 = *(unsigned __int8 *)(v5 + 80);
  v141 = (v140 + 16) & ~v140;
  v142 = (v6 + v141 + 7) & 0xFFFFFFFFFFFFFFF8;
  v143 = (v142 + 15) & 0xFFFFFFFFFFFFFFF8;
  v144 = (v143 + 15) & 0xFFFFFFFFFFFFFFF8;
  v145 = swift_allocObject(&unk_1001B8418, v144 + 8, v140 | 7);
  sub_100011868((uint64_t)v7, v145 + v141, type metadata accessor for LargeDailyView);
  *(double *)(v145 + v142) = v25;
  *(double *)(v145 + v143) = v75;
  *(double *)(v145 + v144) = v117;
  swift_bridgeObjectRetain(v17);
  v146 = sub_100005D40(&qword_1001C1AD8);
  v147 = type metadata accessor for UUID(0);
  v148 = sub_100005D40(&qword_1001C4050);
  sub_100016A54(&qword_1001C3FA8, &qword_1001C1AD8);
  v150 = v149;
  sub_100016A54(&qword_1001C4058, &qword_1001C4050);
  v152 = v151;
  sub_100016878(&qword_1001C3FB8, type metadata accessor for DailyForecastViewModel);
  return ForEach<>.init(_:content:)(&v192, sub_1000F64F4, v145, v146, v147, v148, v150, v152, v153);
}

void sub_1000F178C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;

  v66 = a3;
  v67 = a1;
  v65 = sub_100005D40(&qword_1001C3FC0);
  __chkstk_darwin(v65);
  v62 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005D40(&qword_1001C1D90);
  v12 = __chkstk_darwin(v11);
  v56 = (uint64_t)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v63 = (char *)&v55 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v55 - v16;
  v18 = sub_100005D40(&qword_1001BF4B0);
  __chkstk_darwin(v18);
  v60 = (uint64_t *)((char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_100005D40(&qword_1001BF4A0);
  __chkstk_darwin(v20);
  v22 = (uint64_t *)((char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = type metadata accessor for DailyForecastViewModel(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for DailyViewAttributes(0);
  __chkstk_darwin(v64);
  v27 = (char *)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v27;
  v28 = (int *)type metadata accessor for ModernDailyForecastRowView(0);
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v55 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v33 = (char *)&v55 - v32;
  v61 = a2;
  sub_10000F7C4(a2, (uint64_t)v27, type metadata accessor for DailyViewAttributes);
  sub_10000F7C4(v67, (uint64_t)v25, type metadata accessor for DailyForecastViewModel);
  v34 = a2 + *(int *)(type metadata accessor for LargeDailyView(0) + 20);
  v68 = *(_QWORD *)v34;
  v69 = *(_OWORD *)(v34 + 8);
  v35 = sub_100005D40(&qword_1001BF600);
  Binding.projectedValue.getter(&v70, v35);
  v58 = v70;
  v57 = v71;
  *v22 = swift_getKeyPath(&unk_1001805F0);
  v36 = sub_100005D40(&qword_1001BF488);
  swift_storeEnumTagMultiPayload(v22, v36, 0);
  KeyPath = swift_getKeyPath(&unk_100180560);
  v38 = (uint64_t)v60;
  *v60 = KeyPath;
  v39 = sub_100005D40(&qword_1001BF3C0);
  swift_storeEnumTagMultiPayload(v38, v39, 0);
  v40 = (uint64_t)v22;
  v41 = (uint64_t)v33;
  v42 = (uint64_t)v62;
  sub_1000168AC(v40, (uint64_t)v31, &qword_1001BF4A0);
  v43 = &v31[v28[5]];
  *(_QWORD *)v43 = swift_getKeyPath(&unk_100180590);
  v43[8] = 0;
  v44 = &v31[v28[6]];
  *(_QWORD *)v44 = swift_getKeyPath(&unk_1001805C0);
  v45 = sub_100005D40(&qword_1001BF490);
  swift_storeEnumTagMultiPayload(v44, v45, 0);
  v46 = (uint64_t)v63;
  sub_1000168AC(v38, (uint64_t)&v31[v28[7]], &qword_1001BF4B0);
  v70 = 0x4010000000000000;
  v68 = 0x3FF0000000000000;
  v47 = sub_10001C0CC();
  ScaledValue.init(wrappedValue:step:)(&v70, &v68, &type metadata for Double, v47);
  sub_100011868((uint64_t)v59, (uint64_t)&v31[v28[9]], type metadata accessor for DailyViewAttributes);
  sub_100011868((uint64_t)v25, (uint64_t)&v31[v28[10]], type metadata accessor for DailyForecastViewModel);
  *(double *)&v31[v28[11]] = a4;
  *(double *)&v31[v28[12]] = a5;
  *(double *)&v31[v28[13]] = a6;
  v48 = &v31[v28[14]];
  *(_QWORD *)v48 = v58;
  *(_OWORD *)(v48 + 8) = v57;
  sub_100011868((uint64_t)v31, v41, type metadata accessor for ModernDailyForecastRowView);
  sub_10000F7C4(v67, (uint64_t)v17, type metadata accessor for DailyForecastViewModel);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v23);
  sub_1000EDCC0(*(_QWORD *)(v61 + *(int *)(v64 + 20)), v46);
  v49 = v42 + *(int *)(v65 + 48);
  sub_1000168D8((uint64_t)v17, v42, &qword_1001C1D90);
  sub_1000168D8(v46, v49, &qword_1001C1D90);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v42, 1, v23) != 1)
  {
    v50 = v56;
    sub_1000168D8(v42, v56, &qword_1001C1D90);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v49, 1, v23) != 1)
    {
      sub_100011868(v49, (uint64_t)v25, type metadata accessor for DailyForecastViewModel);
      v51 = sub_10013DB1C(v50, (uint64_t)v25);
      sub_100011894((uint64_t)v25, type metadata accessor for DailyForecastViewModel);
      sub_100016904(v46, &qword_1001C1D90);
      sub_100016904((uint64_t)v17, &qword_1001C1D90);
      sub_100011894(v50, type metadata accessor for DailyForecastViewModel);
      sub_100016904(v42, &qword_1001C1D90);
      if ((v51 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v52 = 0;
      goto LABEL_10;
    }
    sub_100016904(v46, &qword_1001C1D90);
    sub_100016904((uint64_t)v17, &qword_1001C1D90);
    sub_100011894(v50, type metadata accessor for DailyForecastViewModel);
LABEL_6:
    sub_100016904(v42, &qword_1001C3FC0);
    goto LABEL_9;
  }
  sub_100016904(v46, &qword_1001C1D90);
  sub_100016904((uint64_t)v17, &qword_1001C1D90);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v49, 1, v23) != 1)
    goto LABEL_6;
  sub_100016904(v42, &qword_1001C1D90);
LABEL_8:
  v52 = 1;
LABEL_10:
  sub_10000F7C4(v41, (uint64_t)v31, type metadata accessor for ModernDailyForecastRowView);
  v53 = v66;
  sub_10000F7C4((uint64_t)v31, v66, type metadata accessor for ModernDailyForecastRowView);
  v54 = v53 + *(int *)(sub_100005D40(&qword_1001C4060) + 48);
  *(_QWORD *)v54 = 0;
  *(_BYTE *)(v54 + 8) = 0;
  *(_BYTE *)(v54 + 9) = v52;
  sub_100011894(v41, type metadata accessor for ModernDailyForecastRowView);
  sub_100011894((uint64_t)v31, type metadata accessor for ModernDailyForecastRowView);
}

void sub_1000F1E20(uint64_t a1@<X8>)
{
  sub_1000F2D10(0, &qword_1001C4048, (void (*)(uint64_t))sub_1000F0BF0, a1);
}

uint64_t sub_1000F1E48(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A02E8, 1);
}

void sub_1000F1E58(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *a2 = static Axis.Set.horizontal.getter(a1);
  v4 = sub_100005D40(&qword_1001C3FD0);
  sub_1000F1E98(v2, (uint64_t)&a2[*(int *)(v4 + 44)]);
}

void sub_1000F1E98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = sub_100005D40(&qword_1001C3FD8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v20 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v20 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v20 - v15;
  *(_QWORD *)v16 = static VerticalAlignment.center.getter(v14);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 1;
  v17 = sub_100005D40(&qword_1001C3FE0);
  sub_1000F2040(a1, 0, (uint64_t)&v16[*(int *)(v17 + 44)]);
  *(_QWORD *)v13 = static VerticalAlignment.center.getter(v18);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  sub_1000F2040(a1, 1, (uint64_t)&v13[*(int *)(v17 + 44)]);
  sub_1000168D8((uint64_t)v16, (uint64_t)v10, &qword_1001C3FD8);
  sub_1000168D8((uint64_t)v13, (uint64_t)v7, &qword_1001C3FD8);
  sub_1000168D8((uint64_t)v10, a2, &qword_1001C3FD8);
  v19 = sub_100005D40(&qword_1001C3FE8);
  sub_1000168D8((uint64_t)v7, a2 + *(int *)(v19 + 48), &qword_1001C3FD8);
  sub_100016904((uint64_t)v13, &qword_1001C3FD8);
  sub_100016904((uint64_t)v16, &qword_1001C3FD8);
  sub_100016904((uint64_t)v7, &qword_1001C3FD8);
  sub_100016904((uint64_t)v10, &qword_1001C3FD8);
}

void sub_1000F2040(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t KeyPath;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131[6];
  uint64_t v132;
  char v133;
  uint64_t v134;
  unsigned __int8 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 v139;
  uint64_t v140;
  unsigned __int8 v141;
  uint64_t v142;
  uint64_t *v143;

  LODWORD(v106) = a2;
  v122 = a1;
  v118 = a3;
  v114 = type metadata accessor for HighTemperatureColumn(0);
  __chkstk_darwin(v114);
  v113 = (uint64_t)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005D40(&qword_1001C1550);
  v5 = __chkstk_darwin(v4);
  v117 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v116 = (uint64_t)&v92 - v7;
  v8 = (int *)type metadata accessor for DailyViewAttributes(0);
  __chkstk_darwin(v8);
  v102 = (uint64_t)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for LowTemperatureColumn(0);
  __chkstk_darwin(v104);
  v103 = (uint64_t *)((char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v111 = sub_100005D40(&qword_1001C3FF0);
  __chkstk_darwin(v111);
  v101 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001C1548);
  v13 = __chkstk_darwin(v12);
  v115 = (uint64_t)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v120 = (uint64_t)&v92 - v15;
  v105 = sub_100005D40(&qword_1001C3FF8);
  __chkstk_darwin(v105);
  v17 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100005D40(&qword_1001C4000);
  __chkstk_darwin(v107);
  v19 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for Color.RGBColorSpace(0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v95 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for PrecipitationColumn(0);
  __chkstk_darwin(v99);
  v98 = (char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100005D40(&qword_1001C4008);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v92 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v100 = (uint64_t)&v92 - v26;
  v27 = sub_100005D40(&qword_1001C1540);
  v28 = __chkstk_darwin(v27);
  v112 = (uint64_t)&v92 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v121 = (uint64_t)&v92 - v30;
  v31 = type metadata accessor for ConditionColumn(0);
  __chkstk_darwin(v31);
  v33 = (char *)&v92 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100005D40(&qword_1001C4010);
  __chkstk_darwin(v34);
  v36 = (char *)&v92 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100005D40(&qword_1001C1538);
  v38 = __chkstk_darwin(v37);
  v110 = (uint64_t)&v92 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v41 = (char *)&v92 - v40;
  v42 = type metadata accessor for WeekdayColumn(0);
  v43 = __chkstk_darwin(v42);
  v109 = (uint64_t)&v92 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v108 = (uint64_t)&v92 - v45;
  sub_10000F7C4(v122, (uint64_t)&v92 - v45, type metadata accessor for DailyViewAttributes);
  if ((v106 & 1) != 0)
  {
    v46 = 1;
  }
  else
  {
    sub_10000F7C4(v122, (uint64_t)v33, type metadata accessor for DailyViewAttributes);
    sub_100016878(&qword_1001C4018, type metadata accessor for ConditionColumn);
    View.accessibilityHidden(_:)(1, v31, v47);
    sub_100011894((uint64_t)v33, type metadata accessor for ConditionColumn);
    sub_1000168AC((uint64_t)v36, (uint64_t)v41, &qword_1001C4010);
    v46 = 0;
  }
  v48 = _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v41, v46, 1, v34);
  v49 = *(_BYTE *)(v122 + v8[8]) == 1;
  v119 = v41;
  if (v49)
  {
    v50 = static Alignment.center.getter(v48);
    _FrameLayout.init(width:height:alignment:)(&v132, 0x4000000000000000, 0, 0, 1, v50, v51);
    v52 = v132;
    v53 = v133;
    v106 = v134;
    v94 = v135;
    v93 = v136;
    v92 = v137;
    v54 = v95;
    v55 = v99;
    v56 = v98;
    sub_10000F7C4(v122, (uint64_t)&v98[*(int *)(v99 + 20)], type metadata accessor for DailyViewAttributes);
    (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v54, enum case for Color.RGBColorSpace.sRGB(_:), v97);
    *v56 = Color.init(_:red:green:blue:opacity:)(v54, 0.501960784, 0.866666667, 1.0, 1.0);
    sub_100016878(&qword_1001C4038, type metadata accessor for PrecipitationColumn);
    View.accessibilityHidden(_:)(1, v55, v57);
    sub_100011894((uint64_t)v56, type metadata accessor for PrecipitationColumn);
    v58 = v100;
    sub_1000168AC((uint64_t)v25, v100, &qword_1001C4008);
    sub_1000168D8(v58, (uint64_t)v25, &qword_1001C4008);
    *(_QWORD *)v19 = 0;
    v19[8] = 1;
    *((_QWORD *)v19 + 2) = v52;
    v19[24] = v53;
    *((_QWORD *)v19 + 4) = v106;
    v19[40] = v94;
    v59 = v92;
    *((_QWORD *)v19 + 6) = v93;
    *((_QWORD *)v19 + 7) = v59;
    v60 = sub_100005D40(&qword_1001C4040);
    sub_1000168D8((uint64_t)v25, (uint64_t)&v19[*(int *)(v60 + 48)], &qword_1001C4008);
    v61 = &v19[*(int *)(v60 + 64)];
    *(_QWORD *)v61 = 0x4000000000000000;
    v61[8] = 0;
    sub_100016904((uint64_t)v25, &qword_1001C4008);
    sub_1000168D8((uint64_t)v19, (uint64_t)v17, &qword_1001C4000);
    swift_storeEnumTagMultiPayload(v17, v105, 0);
    sub_100016A54(&qword_1001C4020, &qword_1001C4000);
    _ConditionalContent<>.init(storage:)(v17, v107, &type metadata for Spacer, v62, &protocol witness table for Spacer);
    sub_100016904((uint64_t)v19, &qword_1001C4000);
    v63 = v58;
    v41 = v119;
    sub_100016904(v63, &qword_1001C4008);
  }
  else
  {
    *(_QWORD *)v17 = 0;
    v17[8] = 0;
    swift_storeEnumTagMultiPayload(v17, v105, 1);
    sub_100016A54(&qword_1001C4020, &qword_1001C4000);
    _ConditionalContent<>.init(storage:)(v17, v107, &type metadata for Spacer, v64, &protocol witness table for Spacer);
  }
  v65 = 1;
  if (*(_BYTE *)(v122 + v8[9]) == 1)
  {
    v66 = v102;
    sub_10000F7C4(v122, v102, type metadata accessor for DailyViewAttributes);
    KeyPath = swift_getKeyPath(&unk_100180590);
    v68 = (uint64_t)v103;
    *v103 = KeyPath;
    *(_BYTE *)(v68 + 8) = 0;
    v69 = v104;
    v70 = (_QWORD *)(v68 + *(int *)(v104 + 20));
    *v70 = swift_getKeyPath(&unk_1001805C0);
    v71 = sub_100005D40(&qword_1001BF490);
    swift_storeEnumTagMultiPayload(v70, v71, 0);
    sub_100011868(v66, v68 + *(int *)(v69 + 24), type metadata accessor for DailyViewAttributes);
    sub_100016878(&qword_1001C4030, type metadata accessor for LowTemperatureColumn);
    v72 = (uint64_t)v101;
    View.accessibilityHidden(_:)(1, v69, v73);
    sub_100011894(v68, type metadata accessor for LowTemperatureColumn);
    sub_1000168AC(v72, v120, &qword_1001C3FF0);
    v65 = 0;
  }
  v74 = v120;
  v75 = _s13WeatherWidget20WeatherDataViewModelOwst_0(v120, v65, 1, v111);
  v76 = v122;
  v77 = (double)*(uint64_t *)(v122 + v8[16]);
  v78 = static Alignment.center.getter(v75);
  _FrameLayout.init(width:height:alignment:)(&v138, *(_QWORD *)&v77, 0, 0, 1, v78, v79);
  v111 = v138;
  LODWORD(v107) = v139;
  v106 = v140;
  LODWORD(v105) = v141;
  v104 = v142;
  v103 = v143;
  v80 = v113;
  sub_10000F7C4(v76, v113, type metadata accessor for DailyViewAttributes);
  sub_100016878(&qword_1001C4028, type metadata accessor for HighTemperatureColumn);
  v81 = (uint64_t)v117;
  View.accessibilityHidden(_:)(1, v114, v82);
  sub_100011894(v80, type metadata accessor for HighTemperatureColumn);
  v83 = v116;
  sub_1000168AC(v81, v116, &qword_1001C1550);
  v84 = v108;
  v85 = v109;
  sub_10000F7C4(v108, v109, type metadata accessor for WeekdayColumn);
  v131[0] = v85;
  v86 = v110;
  sub_1000168D8((uint64_t)v41, v110, &qword_1001C1538);
  v131[1] = v86;
  v87 = v121;
  v88 = v112;
  sub_1000168D8(v121, v112, &qword_1001C1540);
  v131[2] = v88;
  v89 = v74;
  v90 = v74;
  v91 = v115;
  sub_1000168D8(v89, v115, &qword_1001C1548);
  v123 = 0;
  v124 = 1;
  v125 = v111;
  v126 = v107;
  v127 = v106;
  v128 = v105;
  v129 = v104;
  v130 = v103;
  v131[3] = v91;
  v131[4] = (uint64_t)&v123;
  sub_1000168D8(v83, v81, &qword_1001C1550);
  v131[5] = v81;
  sub_100077740(v131, v118);
  sub_100016904(v83, &qword_1001C1550);
  sub_100016904(v90, &qword_1001C1548);
  sub_100016904(v87, &qword_1001C1540);
  sub_100016904((uint64_t)v119, &qword_1001C1538);
  sub_100011894(v84, type metadata accessor for WeekdayColumn);
  sub_100016904(v81, &qword_1001C1550);
  sub_100016904(v91, &qword_1001C1548);
  sub_100016904(v88, &qword_1001C1540);
  sub_100016904(v86, &qword_1001C1538);
  sub_100011894(v85, type metadata accessor for WeekdayColumn);
}

uint64_t sub_1000F2D00(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A02C0, 1);
}

void sub_1000F2D10(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v7;

  v7 = a1;
  *(_QWORD *)a4 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = v7;
  sub_100005D40(a2);
  a3(v4);
  sub_1000FA1C4();
}

uint64_t sub_1000F2D60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v61[2];
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[3];

  v4 = type metadata accessor for MediumTemperatureDailyView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D40(&qword_1001C3F98);
  __chkstk_darwin(v8);
  v10 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = *(int *)(type metadata accessor for DailyViewAttributes(0) + 20);
  v11 = *(_QWORD *)(a1 + v66);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v62 = v5;
    v63 = v6;
    v64 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v65 = a2;
    v13 = *(_QWORD *)(type metadata accessor for DailyForecastViewModel(0) - 8);
    v14 = v11;
    v15 = v11 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v61[1] = v4;
    v16 = *(_QWORD *)(v13 + 72);
    v67 = v14;
    v68 = v16;
    swift_bridgeObjectRetain(v14);
    v17 = 0.0;
    do
    {
      sub_100112D28(v15);
      v18 = a1;
      v20 = v19;
      v22 = v21;
      v24 = v23;
      v26 = v25 & 1;
      v28 = type metadata accessor for Text.WritingMode(0, v27);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 1, 1, v28);
      v29 = Text.Measurements.size(of:in:writingMode:)(v20, v22, v26, v24, v10, INFINITY, INFINITY);
      v30 = v20;
      a1 = v18;
      sub_100016868(v30, v22, v26);
      swift_bridgeObjectRelease(v24);
      sub_100016904((uint64_t)v10, &qword_1001C3F98);
      if (v17 <= v29)
        v17 = v29;
      v15 += v68;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease(v67);
    v11 = *(_QWORD *)(v18 + v66);
    v31 = *(_QWORD *)(v11 + 16);
    if (v31)
    {
      v32 = *(_QWORD *)(type metadata accessor for DailyForecastViewModel(0) - 8);
      v33 = v11;
      v34 = v11 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
      v35 = *(_QWORD *)(v32 + 72);
      v67 = v33;
      v68 = v35;
      swift_bridgeObjectRetain(v33);
      v36 = 0.0;
      do
      {
        sub_100112EC8(v34);
        v38 = v37;
        v40 = v39;
        v42 = v41;
        v44 = v43 & 1;
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 1, 1, v28);
        v45 = Text.Measurements.size(of:in:writingMode:)(v38, v40, v44, v42, v10, INFINITY, INFINITY);
        v46 = v38;
        a1 = v18;
        sub_100016868(v46, v40, v44);
        swift_bridgeObjectRelease(v42);
        sub_100016904((uint64_t)v10, &qword_1001C3F98);
        if (v36 <= v45)
          v36 = v45;
        v34 += v68;
        --v31;
      }
      while (v31);
      swift_bridgeObjectRelease(v67);
      v11 = *(_QWORD *)(v18 + v66);
    }
    else
    {
      v36 = 0.0;
    }
    v7 = v64;
    v5 = v62;
    v6 = v63;
  }
  else
  {
    v17 = 0.0;
    v36 = 0.0;
  }
  v69[0] = v11;
  sub_10000F7C4(a1, (uint64_t)v7, type metadata accessor for MediumTemperatureDailyView);
  v47 = *(unsigned __int8 *)(v5 + 80);
  v48 = (v47 + 16) & ~v47;
  v49 = (v6 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v50 = (v49 + 15) & 0xFFFFFFFFFFFFFFF8;
  v51 = swift_allocObject(&unk_1001B83F0, v50 + 8, v47 | 7);
  sub_100011868((uint64_t)v7, v51 + v48, type metadata accessor for MediumTemperatureDailyView);
  *(double *)(v51 + v49) = v17;
  *(double *)(v51 + v50) = v36;
  swift_bridgeObjectRetain(v11);
  v52 = sub_100005D40(&qword_1001C1AD8);
  v53 = type metadata accessor for UUID(0);
  v54 = sub_100005D40(&qword_1001C3FA0);
  sub_100016A54(&qword_1001C3FA8, &qword_1001C1AD8);
  v56 = v55;
  sub_100016A54(&qword_1001C3FB0, &qword_1001C3FA0);
  v58 = v57;
  sub_100016878(&qword_1001C3FB8, type metadata accessor for DailyForecastViewModel);
  return ForEach<>.init(_:content:)(v69, sub_1000F379C, v51, v52, v53, v54, v56, v58, v59);
}

void sub_1000F3180(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t KeyPath;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v49 = a2;
  v53 = a3;
  v52 = sub_100005D40(&qword_1001C3FC0);
  __chkstk_darwin(v52);
  v48 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001C1D90);
  v11 = __chkstk_darwin(v10);
  v47 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v51 = (char *)&v46 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v46 - v15;
  v17 = type metadata accessor for DailyForecastViewModel(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for DailyViewAttributes(0);
  __chkstk_darwin(v50);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for DailyTemperatureForecastRowView(0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v46 - v26;
  sub_10000F7C4(a2, (uint64_t)v21, type metadata accessor for DailyViewAttributes);
  sub_10000F7C4(a1, (uint64_t)v19, type metadata accessor for DailyForecastViewModel);
  KeyPath = swift_getKeyPath(&unk_100180560);
  v29 = (uint64_t *)&v25[v22[8]];
  *v29 = KeyPath;
  v30 = sub_100005D40(&qword_1001BF3C0);
  swift_storeEnumTagMultiPayload(v29, v30, 0);
  v31 = (uint64_t)v48;
  sub_100011868((uint64_t)v21, (uint64_t)v25, type metadata accessor for DailyViewAttributes);
  sub_100011868((uint64_t)v19, (uint64_t)&v25[v22[5]], type metadata accessor for DailyForecastViewModel);
  *(double *)&v25[v22[6]] = a4;
  *(double *)&v25[v22[7]] = a5;
  v32 = &v25[v22[9]];
  *(_QWORD *)v32 = swift_getKeyPath(&unk_100180590);
  v32[8] = 0;
  v33 = &v25[v22[10]];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_1001805C0);
  v34 = sub_100005D40(&qword_1001BF490);
  swift_storeEnumTagMultiPayload(v33, v34, 0);
  v35 = (uint64_t)v27;
  v54 = 0x3FF0000000000000;
  v55 = 0x4010000000000000;
  v36 = sub_10001C0CC();
  ScaledValue.init(wrappedValue:step:)(&v55, &v54, &type metadata for Double, v36);
  sub_100011868((uint64_t)v25, (uint64_t)v27, type metadata accessor for DailyTemperatureForecastRowView);
  v37 = a1;
  v38 = (uint64_t)v51;
  sub_10000F7C4(v37, (uint64_t)v16, type metadata accessor for DailyForecastViewModel);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v16, 0, 1, v17);
  sub_1000EDCC0(*(_QWORD *)(v49 + *(int *)(v50 + 20)), v38);
  v39 = v31 + *(int *)(v52 + 48);
  sub_1000168D8((uint64_t)v16, v31, &qword_1001C1D90);
  sub_1000168D8(v38, v39, &qword_1001C1D90);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v31, 1, v17) != 1)
  {
    v40 = v47;
    sub_1000168D8(v31, v47, &qword_1001C1D90);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v39, 1, v17) != 1)
    {
      sub_100011868(v39, (uint64_t)v19, type metadata accessor for DailyForecastViewModel);
      v41 = sub_10013DB1C(v40, (uint64_t)v19);
      sub_100011894((uint64_t)v19, type metadata accessor for DailyForecastViewModel);
      sub_100016904(v38, &qword_1001C1D90);
      sub_100016904((uint64_t)v16, &qword_1001C1D90);
      sub_100011894(v40, type metadata accessor for DailyForecastViewModel);
      sub_100016904(v31, &qword_1001C1D90);
      if ((v41 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v43 = 0;
      v42 = 1;
      goto LABEL_10;
    }
    sub_100016904(v38, &qword_1001C1D90);
    sub_100016904((uint64_t)v16, &qword_1001C1D90);
    sub_100011894(v40, type metadata accessor for DailyForecastViewModel);
LABEL_6:
    sub_100016904(v31, &qword_1001C3FC0);
    goto LABEL_9;
  }
  sub_100016904(v38, &qword_1001C1D90);
  sub_100016904((uint64_t)v16, &qword_1001C1D90);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v39, 1, v17) != 1)
    goto LABEL_6;
  sub_100016904(v31, &qword_1001C1D90);
LABEL_8:
  v42 = 0;
  v43 = 1;
LABEL_10:
  sub_10000F7C4(v35, (uint64_t)v25, type metadata accessor for DailyTemperatureForecastRowView);
  v44 = v53;
  sub_10000F7C4((uint64_t)v25, v53, type metadata accessor for DailyTemperatureForecastRowView);
  v45 = v44 + *(int *)(sub_100005D40(&qword_1001C3FC8) + 48);
  *(_QWORD *)v45 = 0;
  *(_BYTE *)(v45 + 8) = v42;
  *(_BYTE *)(v45 + 9) = v43;
  sub_100011894(v35, type metadata accessor for DailyTemperatureForecastRowView);
  sub_100011894((uint64_t)v25, type metadata accessor for DailyTemperatureForecastRowView);
}

void sub_1000F36C8(uint64_t a1@<X8>)
{
  sub_1000F2D10(1, &qword_1001C3F90, (void (*)(uint64_t))sub_1000F2D60, a1);
}

uint64_t sub_1000F36F0()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for MediumTemperatureDailyView(0);
  v3 = sub_1000FA074();
  sub_100083090(v3);
  v4 = sub_10001C7FC();
  sub_1000FA144(v4);
  sub_100016B34(v2[17]);
  sub_100016B34(v2[18]);
  sub_100016B34(v2[19]);
  v5 = v1 + v2[22];
  v6 = sub_100005D40(&qword_1001BF090);
  if (!sub_100016AB8(v5))
    sub_1000FA0B0();
  if (!sub_1000FA098())
    sub_100016C44();
  sub_1000FA198();
  v7 = sub_1000FA180();
  sub_100016A94(v7);
  return sub_1000CD190(v0, (uint64_t)v2, v6);
}

void sub_1000F379C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_1000FA188();
  type metadata accessor for MediumTemperatureDailyView(v3);
  sub_1000FA0F8();
  sub_1000F3180(v0, v1 + v6, v2, *(double *)(v1 + v5), *(double *)(v1 + (v4 & 0xFFFFFFFFFFFFF8)));
}

void sub_1000F37E0(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = type metadata accessor for WeekdayColumn(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = type metadata accessor for DailyViewAttributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F7C4(v1, (uint64_t)v8, type metadata accessor for DailyViewAttributes);
  v10 = static HorizontalAlignment.leading.getter(v9);
  sub_10000F7C4(v1, (uint64_t)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WeekdayColumn);
  v11 = *(unsigned __int8 *)(v4 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_1001B84E0, v12 + v5, v11 | 7);
  sub_100011868((uint64_t)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, type metadata accessor for WeekdayColumn);
  v14 = (_QWORD *)((char *)a1 + *(int *)(sub_100005D40(&qword_1001C4380) + 48));
  *v14 = swift_getKeyPath(&unk_100180838);
  v15 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  v16 = *(_QWORD *)&v8[*(int *)(v6 + 20)];
  *a1 = v16;
  v17 = *(_QWORD *)&v8[*(int *)(v6 + 68)];
  swift_bridgeObjectRetain(v16);
  swift_retain(v17);
  sub_100011894((uint64_t)v8, type metadata accessor for DailyViewAttributes);
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = sub_1000F9420;
  a1[4] = v13;
}

double sub_1000F3978(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  double result;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DailyForecastViewModel(0) + 56));
  v4 = v3[1];
  v55 = *v3;
  v56 = v4;
  v54 = sub_10001692C();
  swift_bridgeObjectRetain(v4);
  v5 = Text.init<A>(_:)(&v55, &type metadata for String, v54);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = static Color.white.getter(v5);
  v13 = Text.foregroundColor(_:)(v12, v5, v7, v11, v9);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  swift_release(v12);
  v20 = v17 & 1;
  sub_100016868(v5, v7, v11);
  swift_bridgeObjectRelease(v9);
  v21 = type metadata accessor for DailyViewAttributes(0);
  v22 = Text.font(_:)(*(_QWORD *)(a2 + *(int *)(v21 + 68)), v13, v15, v20, v19);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  sub_100016868(v13, v15, v20);
  v29 = swift_bridgeObjectRelease(v19);
  v30 = Text.monospacedDigit()(v22, v24, v28, v26, v29);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  sub_100016868(v22, v24, v28);
  swift_bridgeObjectRelease(v26);
  v37 = Text.fontWeight(_:)(*(_QWORD *)(a2 + *(int *)(v21 + 80)), 0, v30, v32, v36, v34);
  v39 = v38;
  v41 = v40;
  v43 = v42 & 1;
  sub_100016868(v30, v32, v36);
  swift_bridgeObjectRelease(v34);
  v44 = sub_10013D430();
  v46 = v45;
  v55 = v44;
  v56 = v45;
  v47 = Text.accessibilityLabel<A>(_:)(&v55, v37, v39, v43, v41, &type metadata for String, v54);
  v49 = v48;
  v51 = v50;
  LOBYTE(v28) = v52 & 1;
  sub_100016868(v37, v39, v43);
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v41);
  v55 = v47;
  v56 = v49;
  v57 = v28;
  v58 = v51;
  View.accessibilityRespondsToUserInteraction(_:)(0, &type metadata for Text, &protocol witness table for Text);
  sub_100016868(v47, v49, v28);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v51).n128_u64[0];
  return result;
}

void sub_1000F3BE4(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = type metadata accessor for ConditionColumn(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = type metadata accessor for DailyViewAttributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F7C4(v1, (uint64_t)v8, type metadata accessor for DailyViewAttributes);
  v10 = static HorizontalAlignment.center.getter(v9);
  sub_10000F7C4(v1, (uint64_t)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ConditionColumn);
  v11 = *(unsigned __int8 *)(v4 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_1001B8440, v12 + v5, v11 | 7);
  sub_100011868((uint64_t)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, type metadata accessor for ConditionColumn);
  v14 = (_QWORD *)((char *)a1 + *(int *)(sub_100005D40(&qword_1001C4370) + 48));
  *v14 = swift_getKeyPath(&unk_100180838);
  v15 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  v16 = *(_QWORD *)&v8[*(int *)(v6 + 20)];
  *a1 = v16;
  v17 = *(_QWORD *)&v8[*(int *)(v6 + 68)];
  swift_bridgeObjectRetain(v16);
  swift_retain(v17);
  sub_100011894((uint64_t)v8, type metadata accessor for DailyViewAttributes);
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = sub_1000F90E4;
  a1[4] = v13;
}

void sub_1000F3D7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];

  v37 = a2;
  v41 = a3;
  v42 = type metadata accessor for AccessibilityTraits(0);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v39 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ConditionImage(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100005D40(&qword_1001BF5E8);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100005D40(&qword_1001C4378);
  __chkstk_darwin(v38);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1 + *(int *)(type metadata accessor for DailyForecastViewModel(0) + 32);
  v14 = (int *)type metadata accessor for ConditionViewModel(0);
  v15 = (uint64_t *)(v13 + v14[6]);
  v17 = *v15;
  v16 = v15[1];
  v18 = *(_BYTE *)(v13 + v14[10]);
  *v7 = swift_getKeyPath(&unk_100180560);
  v19 = sub_100005D40(&qword_1001BF3C0);
  swift_storeEnumTagMultiPayload(v7, v19, 0);
  v20 = (_QWORD *)((char *)v7 + *(int *)(v5 + 20));
  *v20 = v17;
  v20[1] = v16;
  *((_BYTE *)v7 + *(int *)(v5 + 24)) = v18;
  v21 = *(_QWORD *)(v37 + *(int *)(type metadata accessor for DailyViewAttributes(0) + 72));
  KeyPath = swift_getKeyPath(&unk_100180868);
  sub_10000F7C4((uint64_t)v7, (uint64_t)v10, type metadata accessor for ConditionImage);
  v23 = (uint64_t *)&v10[*(int *)(v8 + 36)];
  *v23 = KeyPath;
  v23[1] = v21;
  swift_bridgeObjectRetain(v16);
  swift_retain(v21);
  sub_100011894((uint64_t)v7, type metadata accessor for ConditionImage);
  v24 = (_QWORD *)(v13 + v14[7]);
  v25 = v24[1];
  v43[0] = *v24;
  v43[1] = v25;
  v26 = sub_10001692C();
  swift_bridgeObjectRetain(v25);
  v27 = Text.init<A>(_:)(v43, &type metadata for String, v26);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = sub_100043FF4();
  View.accessibility(label:)(v27, v29, v33, v31, v8, v34);
  sub_100016868(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  sub_100016904((uint64_t)v10, &qword_1001BF5E8);
  v35 = v39;
  static AccessibilityTraits.isImage.getter();
  ModifiedContent<>.accessibility(removeTraits:)(v35, v38);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v35, v42);
  sub_100016904((uint64_t)v12, &qword_1001C4378);
}

void sub_1000F4064(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = type metadata accessor for PrecipitationColumn(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = type metadata accessor for DailyViewAttributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F7C4(v1 + *(int *)(v3 + 20), (uint64_t)v8, type metadata accessor for DailyViewAttributes);
  v10 = static HorizontalAlignment.leading.getter(v9);
  sub_10000F7C4(v1, (uint64_t)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PrecipitationColumn);
  v11 = *(unsigned __int8 *)(v4 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_1001B84B8, v12 + v5, v11 | 7);
  sub_100011868((uint64_t)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, type metadata accessor for PrecipitationColumn);
  v14 = (_QWORD *)((char *)a1 + *(int *)(sub_100005D40(qword_1001C43A0) + 48));
  *v14 = swift_getKeyPath(&unk_100180838);
  v15 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  v16 = *(_QWORD *)&v8[*(int *)(v6 + 20)];
  *a1 = v16;
  v17 = *(_QWORD *)&v8[*(int *)(v6 + 68)];
  swift_bridgeObjectRetain(v16);
  swift_retain(v17);
  sub_100011894((uint64_t)v8, type metadata accessor for DailyViewAttributes);
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = sub_1000F93E8;
  a1[4] = v13;
}

double sub_1000F4204@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  __n128 v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  double result;
  __int128 v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _OWORD v54[2];
  char v55;

  v5 = a1 + *(int *)(type metadata accessor for DailyForecastViewModel(0) + 32);
  if (*(_BYTE *)(v5 + *(int *)(type metadata accessor for ConditionViewModel(0) + 36)) == 1)
  {
    v54[0] = Double.formattedPercent(roundToNearestPercent:)(1);
    v6 = sub_10001692C();
    v7 = Text.init<A>(_:)(v54, &type metadata for String, v6);
    v9 = v8;
    v11 = v10;
    v13 = v12 & 1;
    v14 = Text.foregroundColor(_:)(*a2, v7, v8, v13, v10);
    v16 = v15;
    v18 = v17;
    v20 = v19 & 1;
    sub_100016868(v7, v9, v13);
    swift_bridgeObjectRelease(v11);
    v21 = (char *)a2 + *(int *)(type metadata accessor for PrecipitationColumn(0) + 20);
    v22 = type metadata accessor for DailyViewAttributes(0);
    v23 = Text.font(_:)(*(_QWORD *)&v21[*(int *)(v22 + 76)], v14, v16, v20, v18);
    v25 = v24;
    v27 = v26;
    v29 = v28 & 1;
    sub_100016868(v14, v16, v20);
    v30 = swift_bridgeObjectRelease(v18);
    v31 = Text.monospacedDigit()(v23, v25, v29, v27, v30);
    v33 = v32;
    v35 = v34;
    v37 = v36 & 1;
    sub_100016868(v23, v25, v29);
    v38 = swift_bridgeObjectRelease(v27);
    v39 = static Font.Weight.semibold.getter(v38);
    v40 = Text.fontWeight(_:)(*(_QWORD *)&v39, 0, v31, v33, v37, v35);
    v42 = v41;
    v44 = v43;
    v46 = v45 & 1;
    sub_100016868(v31, v33, v37);
    swift_bridgeObjectRelease(v35);
    *(_QWORD *)&v50 = v40;
    *((_QWORD *)&v50 + 1) = v42;
    v51 = v46;
    v52 = v44;
    v53 = 0;
  }
  else
  {
    v50 = xmmword_10017A630;
    v51 = 0;
    v52 = 0;
    v53 = 1;
  }
  _ConditionalContent<>.init(storage:)(&v50, &type metadata for Text, &type metadata for Spacer, &protocol witness table for Text, &protocol witness table for Spacer);
  result = *(double *)v54;
  v48 = v54[1];
  v49 = v55;
  *(_OWORD *)a3 = v54[0];
  *(_OWORD *)(a3 + 16) = v48;
  *(_BYTE *)(a3 + 32) = v49;
  return result;
}

void sub_1000F4440(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for HighTemperatureColumn(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = type metadata accessor for DailyViewAttributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F7C4(v1, (uint64_t)v8, type metadata accessor for DailyViewAttributes);
  v9 = static HorizontalAlignment.trailing.getter();
  sub_10000F7C4(v1, (uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for HighTemperatureColumn);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_1001B8468, v11 + v5, v10 | 7);
  sub_100011868((uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, type metadata accessor for HighTemperatureColumn);
  v13 = (_QWORD *)((char *)a1 + *(int *)(sub_100005D40(&qword_1001C4380) + 48));
  *v13 = swift_getKeyPath(&unk_100180838);
  v14 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v13, v14, 0);
  v15 = *(_QWORD *)&v8[*(int *)(v6 + 20)];
  *a1 = v15;
  v16 = *(_QWORD *)&v8[*(int *)(v6 + 68)];
  swift_bridgeObjectRetain(v15);
  swift_retain(v16);
  sub_100011894((uint64_t)v8, type metadata accessor for DailyViewAttributes);
  a1[1] = v16;
  a1[2] = v9;
  a1[3] = sub_1000F91FC;
  a1[4] = v12;
}

void sub_1000F45D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  __n128 v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[2];
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;

  v98 = a3;
  v95 = type metadata accessor for WeatherFormatPlaceholder(0);
  v92 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v91 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005D40(&qword_1001C08A8);
  __chkstk_darwin(v6);
  v8 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v90 - v14;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005D40(&qword_1001C4388);
  __chkstk_darwin(v20);
  v96 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(int *)(type metadata accessor for DailyForecastViewModel(0) + 24);
  v97 = a1;
  v23 = a1 + v22;
  v93 = v17;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v25 = v19;
  v26 = v16;
  v24(v19, v23, v16);
  v27 = type metadata accessor for DailyViewAttributes(0);
  v94 = v27;
  v28 = *(int *)(v27 + 52);
  v99 = a2;
  if (*(_BYTE *)(a2 + v28) == 1)
    v29 = static Set<>.full.getter(v27);
  else
    v29 = static Set<>.value.getter(v27);
  v30 = v29;
  v31 = type metadata accessor for Locale(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v8, 1, 1, v31);
  static WeatherFormatStyle<>.weather(_:locale:)(v30, v8);
  swift_bridgeObjectRelease(v30);
  sub_100016904((uint64_t)v8, &qword_1001C08A8);
  NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v32);
  v90 = *(void (**)(char *, uint64_t))(v10 + 8);
  v90(v15, v9);
  v33 = v9;
  v35 = v91;
  v34 = v92;
  v36 = v95;
  (*(void (**)(char *, _QWORD, unint64_t))(v92 + 104))(v91, enum case for WeatherFormatPlaceholder.none(_:), v95);
  v37 = type metadata accessor for UnitManager(0);
  v38 = static UnitManager.standard.getter(v37);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v39 = v25;
  v40 = Measurement.formatted<A>(_:placeholder:unitManager:)(v13, v35, v38, &protocol witness table for UnitManager, v26, v33);
  v42 = v41;
  swift_release(v38);
  (*(void (**)(char *, unint64_t))(v34 + 8))(v35, v36);
  v90(v13, v33);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v39, v26);
  v101 = v40;
  v102 = v42;
  v95 = sub_10001692C();
  v43 = Text.init<A>(_:)(&v101, &type metadata for String, v95);
  v45 = v44;
  v47 = v46;
  v49 = v48 & 1;
  v50 = static Color.white.getter(v43);
  v51 = Text.foregroundColor(_:)(v50, v43, v45, v49, v47);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  swift_release(v50);
  v58 = v55 & 1;
  sub_100016868(v43, v45, v49);
  swift_bridgeObjectRelease(v47);
  v59 = Text.font(_:)(*(_QWORD *)(v99 + *(int *)(v94 + 68)), v51, v53, v58, v57);
  v61 = v60;
  v63 = v62;
  v65 = v64 & 1;
  sub_100016868(v51, v53, v58);
  v66 = swift_bridgeObjectRelease(v57);
  v67 = Text.monospacedDigit()(v59, v61, v65, v63, v66);
  v69 = v68;
  v71 = v70;
  v73 = v72 & 1;
  sub_100016868(v59, v61, v65);
  v74 = swift_bridgeObjectRelease(v63);
  v75 = static Font.Weight.semibold.getter(v74);
  v76 = Text.fontWeight(_:)(*(_QWORD *)&v75, 0, v67, v69, v73, v71);
  v78 = v77;
  v80 = v79;
  LOBYTE(v51) = v81 & 1;
  sub_100016868(v67, v69, v73);
  swift_bridgeObjectRelease(v71);
  v101 = v76;
  v102 = v78;
  v103 = v51;
  v104 = v80;
  v100[0] = sub_1000F4AE8(v97);
  v100[1] = v82;
  v83 = Text.init<A>(_:)(v100, &type metadata for String, v95);
  v85 = v84;
  v87 = v86;
  LOBYTE(v69) = v88 & 1;
  v89 = (uint64_t)v96;
  View.accessibility(label:)(v83, v84, v88 & 1, v86, &type metadata for Text, &protocol witness table for Text);
  sub_100016868(v83, v85, v69);
  swift_bridgeObjectRelease(v87);
  sub_100016868(v76, v78, v51);
  swift_bridgeObjectRelease(v80);
  sub_1000168AC(v89, v98, &qword_1001C4388);
}

uint64_t sub_1000F4AE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v28;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v31;
  Swift::String v32;

  v2 = type metadata accessor for WeatherFormatPlaceholder(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v9 = (id)qword_1001DA1E8;
  v32._countAndFlagsBits = 0xD0000000000000D3;
  v32._object = (void *)0x8000000100188F00;
  v10._object = (void *)0x8000000100188EE0;
  v10._countAndFlagsBits = 0xD000000000000011;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v32);
  object = v12._object;
  countAndFlagsBits = v12._countAndFlagsBits;

  v13 = sub_100005D40(&qword_1001C1848);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10017BD00;
  v28 = type metadata accessor for DailyForecastViewModel(0);
  static WeatherFormatStyle<>.weather.getter(v28);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for WeatherFormatPlaceholder.none(_:), v2);
  v15 = type metadata accessor for UnitManager(0);
  v16 = static UnitManager.standard.getter(v15);
  v17 = sub_100005D40(&qword_1001BF090);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v18 = Measurement.formatted<A>(_:placeholder:unitManager:)(v8, v5, v16, &protocol witness table for UnitManager, v17, v6);
  v20 = v19;
  swift_release(v16);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v21 = sub_1000881BC();
  *(_QWORD *)(v14 + 64) = v21;
  *(_QWORD *)(v14 + 32) = v18;
  *(_QWORD *)(v14 + 40) = v20;
  v22 = (uint64_t *)(a1 + *(int *)(v28 + 48));
  v24 = *v22;
  v23 = v22[1];
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v21;
  *(_QWORD *)(v14 + 72) = v24;
  *(_QWORD *)(v14 + 80) = v23;
  swift_bridgeObjectRetain(v23);
  v25 = object;
  v26 = String.init(format:_:)(countAndFlagsBits, object, v14);
  swift_bridgeObjectRelease(v25);
  return v26;
}

void sub_1000F4D98(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for LowTemperatureColumn(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = type metadata accessor for DailyViewAttributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F7C4(v1 + *(int *)(v3 + 24), (uint64_t)v8, type metadata accessor for DailyViewAttributes);
  v9 = static HorizontalAlignment.trailing.getter();
  sub_10000F7C4(v1, (uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LowTemperatureColumn);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_1001B8490, v11 + v5, v10 | 7);
  sub_100011868((uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, type metadata accessor for LowTemperatureColumn);
  v13 = (_QWORD *)((char *)a1 + *(int *)(sub_100005D40(&qword_1001C4390) + 48));
  *v13 = swift_getKeyPath(&unk_100180838);
  v14 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v13, v14, 0);
  v15 = *(_QWORD *)&v8[*(int *)(v6 + 20)];
  *a1 = v15;
  v16 = *(_QWORD *)&v8[*(int *)(v6 + 68)];
  swift_bridgeObjectRetain(v15);
  swift_retain(v16);
  sub_100011894((uint64_t)v8, type metadata accessor for DailyViewAttributes);
  a1[1] = v16;
  a1[2] = v9;
  a1[3] = sub_1000F9314;
  a1[4] = v12;
}

void sub_1000F4F38(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char v83;
  void (*v84)(char *, uint64_t);
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[2];
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  double v122;

  v115 = a3;
  v116 = a2;
  v103 = type metadata accessor for ColorSchemeContrast(0);
  v102 = *(_QWORD *)(v103 - 8);
  v4 = __chkstk_darwin(v103);
  v101 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v100 = (char *)&v99 - v6;
  v7 = type metadata accessor for LowTemperatureColumn(0);
  __chkstk_darwin(v7);
  v113 = (uint64_t)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for WeatherFormatPlaceholder(0);
  v107 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v105 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001C08A8);
  __chkstk_darwin(v10);
  v12 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v99 - v18;
  v20 = sub_100005D40(&qword_1001BF090);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100005D40(&qword_1001C4398);
  __chkstk_darwin(v24);
  v112 = (char *)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(int *)(type metadata accessor for DailyForecastViewModel(0) + 28);
  v114 = a1;
  v27 = a1 + v26;
  v108 = v21;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v106 = v23;
  v29 = v20;
  v28(v23, v27, v20);
  v99 = v7;
  v30 = v116 + *(int *)(v7 + 24);
  v31 = type metadata accessor for DailyViewAttributes(0);
  v109 = v31;
  v110 = v30;
  if (*(_BYTE *)(v30 + *(int *)(v31 + 56)) == 1)
    v32 = static Set<>.value.getter(v31);
  else
    v32 = static Set<>.full.getter(v31);
  v33 = v32;
  v34 = type metadata accessor for Locale(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 1, 1, v34);
  static WeatherFormatStyle<>.weather(_:locale:)(v33, v12);
  swift_bridgeObjectRelease(v33);
  sub_100016904((uint64_t)v12, &qword_1001C08A8);
  NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v35);
  v104 = *(void (**)(char *, uint64_t))(v14 + 8);
  v104(v19, v13);
  v36 = v13;
  v37 = v107;
  v38 = v105;
  v39 = v111;
  (*(void (**)(char *, _QWORD, unint64_t))(v107 + 104))(v105, enum case for WeatherFormatPlaceholder.none(_:), v111);
  v40 = type metadata accessor for UnitManager(0);
  v41 = static UnitManager.standard.getter(v40);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v42 = v106;
  v43 = Measurement.formatted<A>(_:placeholder:unitManager:)(v17, v38, v41, &protocol witness table for UnitManager, v29, v36);
  v45 = v44;
  swift_release(v41);
  (*(void (**)(char *, unint64_t))(v37 + 8))(v38, v39);
  v104(v17, v36);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v42, v29);
  v118 = v43;
  v119 = v45;
  v111 = sub_10001692C();
  v46 = Text.init<A>(_:)(&v118, &type metadata for String, v111);
  v48 = v47;
  v50 = v49;
  v52 = v51 & 1;
  v53 = static Color.white.getter(v46);
  v54 = Text.foregroundColor(_:)(v53, v46, v48, v52, v50);
  v56 = v55;
  LOBYTE(v36) = v57;
  v59 = v58;
  swift_release(v53);
  LOBYTE(v53) = v36 & 1;
  sub_100016868(v46, v48, v52);
  swift_bridgeObjectRelease(v50);
  v60 = Font.monospacedDigit()(*(_QWORD *)(v110 + *(int *)(v109 + 68)));
  v61 = Text.font(_:)(v60, v54, v56, v36 & 1, v59);
  v63 = v62;
  LOBYTE(v50) = v64;
  v66 = v65;
  swift_release(v60);
  sub_100016868(v54, v56, v53);
  v67 = swift_bridgeObjectRelease(v59);
  v68 = static Font.Weight.semibold.getter(v67);
  v69 = Text.fontWeight(_:)(*(_QWORD *)&v68, 0, v61, v63, v50 & 1, v66);
  v71 = v70;
  v73 = v72;
  v110 = v74;
  sub_100016868(v61, v63, v50 & 1);
  swift_bridgeObjectRelease(v66);
  v75 = v116;
  v76 = *(_QWORD *)v116;
  LOBYTE(v61) = *(_BYTE *)(v116 + 8);
  sub_10001961C(*(_QWORD *)v116, v61);
  LOBYTE(v66) = sub_1000C5274(v76, v61);
  sub_100019A78(v76, v61);
  v77 = v113;
  sub_10000F7C4(v75, v113, type metadata accessor for LowTemperatureColumn);
  if ((v66 & 1) != 0)
  {
    sub_100011894(v77, type metadata accessor for LowTemperatureColumn);
    v78 = 1.0;
  }
  else
  {
    v79 = v100;
    sub_1000C548C(v100);
    v80 = v102;
    v81 = v101;
    v82 = v103;
    (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v101, enum case for ColorSchemeContrast.increased(_:), v103);
    v83 = static ColorSchemeContrast.== infix(_:_:)(v79, v81);
    v84 = *(void (**)(char *, uint64_t))(v80 + 8);
    v84(v81, v82);
    v84(v79, v82);
    sub_100011894(v77, type metadata accessor for LowTemperatureColumn);
    v78 = 0.6;
    if ((v83 & 1) != 0)
      v78 = 1.0;
  }
  v85 = v73 & 1;
  v118 = v69;
  v119 = v71;
  v120 = v73 & 1;
  v113 = v71;
  v86 = v69;
  v87 = v110;
  v121 = v110;
  v122 = v78;
  v117[0] = sub_1000F5624(v114);
  v117[1] = v88;
  v89 = Text.init<A>(_:)(v117, &type metadata for String, v111);
  v91 = v90;
  v93 = v92;
  v95 = v94 & 1;
  v96 = sub_100005D40(&qword_1001C0BD0);
  v97 = sub_1000673B8();
  v98 = (uint64_t)v112;
  View.accessibility(label:)(v89, v91, v95, v93, v96, v97);
  sub_100016868(v89, v91, v95);
  swift_bridgeObjectRelease(v93);
  sub_100016868(v86, v113, v85);
  swift_bridgeObjectRelease(v87);
  sub_1000168AC(v98, v115, &qword_1001C4398);
}

uint64_t sub_1000F5624(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v28;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v31;
  Swift::String v32;

  v2 = type metadata accessor for WeatherFormatPlaceholder(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v9 = (id)qword_1001DA1E8;
  v32._countAndFlagsBits = 0xD0000000000000D1;
  v32._object = (void *)0x8000000100189000;
  v10._object = (void *)0x8000000100188FE0;
  v10._countAndFlagsBits = 0xD000000000000010;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v32);
  object = v12._object;
  countAndFlagsBits = v12._countAndFlagsBits;

  v13 = sub_100005D40(&qword_1001C1848);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10017BD00;
  v28 = type metadata accessor for DailyForecastViewModel(0);
  static WeatherFormatStyle<>.weather.getter(v28);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for WeatherFormatPlaceholder.none(_:), v2);
  v15 = type metadata accessor for UnitManager(0);
  v16 = static UnitManager.standard.getter(v15);
  v17 = sub_100005D40(&qword_1001BF090);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v18 = Measurement.formatted<A>(_:placeholder:unitManager:)(v8, v5, v16, &protocol witness table for UnitManager, v17, v6);
  v20 = v19;
  swift_release(v16);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v21 = sub_1000881BC();
  *(_QWORD *)(v14 + 64) = v21;
  *(_QWORD *)(v14 + 32) = v18;
  *(_QWORD *)(v14 + 40) = v20;
  v22 = (uint64_t *)(a1 + *(int *)(v28 + 48));
  v24 = *v22;
  v23 = v22[1];
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v21;
  *(_QWORD *)(v14 + 72) = v24;
  *(_QWORD *)(v14 + 80) = v23;
  swift_bridgeObjectRetain(v23);
  v25 = object;
  v26 = String.init(format:_:)(countAndFlagsBits, object, v14);
  swift_bridgeObjectRelease(v25);
  return v26;
}

double sub_1000F58D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  uint64_t v8;

  v1 = type metadata accessor for Font.Context(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (_DWORD *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(_QWORD *)(v0 + 8);
  sub_1000C5030(v4);
  v6 = Font.capHeight(in:)(v4, v5);
  (*(void (**)(_DWORD *, uint64_t))(v2 + 8))(v4, v1);
  return v6;
}

uint64_t sub_1000F597C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_BYTE *, _BYTE *, uint64_t);
  void (*v27)(_BYTE *, uint64_t);
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t WitnessTable;
  _QWORD v34[5];

  v5 = sub_100005DC4(&qword_1001C1AD8);
  v6 = type metadata accessor for UUID(255);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = type metadata accessor for ModifiedContent(255, v7, &type metadata for _FlexFrameLayout);
  v9 = sub_100005DC4(&qword_1001C4448);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v8, v9, 0, 0);
  v11 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  sub_100016A54(&qword_1001C3FA8, &qword_1001C1AD8);
  v13 = v12;
  sub_100016878(&qword_1001BF760, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  v34[0] = v5;
  v34[1] = v6;
  v34[2] = v11;
  v34[3] = v13;
  v34[4] = v14;
  v15 = type metadata accessor for ForEach(255, v34);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v11);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v15);
  v17 = type metadata accessor for VStack(0, v15, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = &v29[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v23 = &v29[-v22];
  v24 = *(_QWORD *)(v2 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  v30 = v7;
  v31 = v25;
  v32 = v2;
  VStack.init(alignment:spacing:content:)(v24, 0, 0, sub_1000F9BB0, v29, v15, v16);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v17);
  v26 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 16);
  v26(v23, v21, v17);
  v27 = *(void (**)(_BYTE *, uint64_t))(v18 + 8);
  v27(v21, v17);
  v26(a2, v23, v17);
  return ((uint64_t (*)(_BYTE *, uint64_t))v27)(v23, v17);
}

uint64_t sub_1000F5B98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t WitnessTable;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD v51[5];

  v48 = a3;
  v49 = a5;
  v46 = a2;
  v47 = type metadata accessor for Column(0, a2, a3, a4);
  v7 = *(_QWORD *)(v47 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v47);
  v10 = (char *)&v42 - v9;
  v11 = sub_100005DC4(&qword_1001C1AD8);
  v45 = v11;
  v12 = type metadata accessor for UUID(255);
  v44 = v12;
  v13 = type metadata accessor for ModifiedContent(255, a2, &type metadata for _FlexFrameLayout);
  v14 = sub_100005DC4(&qword_1001C4448);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v13, v14, 0, 0);
  v16 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v42 = v16;
  sub_100016A54(&qword_1001C3FA8, &qword_1001C1AD8);
  v18 = v17;
  v43 = v17;
  sub_100016878(&qword_1001BF760, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  v51[0] = v11;
  v51[1] = v12;
  v51[2] = v16;
  v51[3] = v18;
  v51[4] = v19;
  v20 = type metadata accessor for ForEach(0, v51);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v42 - v25;
  v27 = a1;
  v28 = *a1;
  v51[0] = v28;
  v29 = v10;
  v30 = v10;
  v31 = v47;
  (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 16))(v30, v27, v47);
  v32 = *(unsigned __int8 *)(v7 + 80);
  v33 = (v32 + 32) & ~v32;
  v34 = swift_allocObject(&unk_1001B8560, v33 + v8, v32 | 7);
  v35 = v48;
  *(_QWORD *)(v34 + 16) = v46;
  *(_QWORD *)(v34 + 24) = v35;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v34 + v33, v29, v31);
  swift_bridgeObjectRetain(v28);
  v36 = v42;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v42);
  sub_100016878(&qword_1001C3FB8, type metadata accessor for DailyForecastViewModel);
  ForEach<>.init(_:content:)(v51, sub_1000F9C70, v34, v45, v44, v36, v43, WitnessTable, v38);
  v50 = WitnessTable;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v20);
  v39 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  v39(v26, v24, v20);
  v40 = *(void (**)(char *, uint64_t))(v21 + 8);
  v40(v24, v20);
  v39(v49, v26, v20);
  return ((uint64_t (*)(char *, uint64_t))v40)(v26, v20);
}

uint64_t sub_1000F5E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  uint64_t WitnessTable;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD v64[2];
  uint64_t v65;
  char v66;
  char v67;
  _QWORD v68[5];

  v59 = (char *)a4;
  v60 = a5;
  v61 = a1;
  v54 = type metadata accessor for DailyForecastViewModel(0);
  __chkstk_darwin(v54);
  v50 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100005D40(&qword_1001C3FC0);
  __chkstk_darwin(v55);
  v52 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001C1D90);
  v10 = __chkstk_darwin(v9);
  v51 = (uint64_t)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v53 = (uint64_t)&v49 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v49 - v15;
  WitnessTable = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v14);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ModifiedContent(0, a3, &type metadata for _FlexFrameLayout);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v49 - v24;
  (*(void (**)(uint64_t))(a2 + 24))(v61);
  v26 = (uint64_t)v59;
  type metadata accessor for Column(0, a3, (uint64_t)v59, v27);
  v28 = sub_1000F58D4();
  v30 = static Alignment.center.getter(v29);
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v28, 0, v30, v31, a3, v26);
  v32 = (uint64_t)v52;
  (*(void (**)(char *, uint64_t))(WitnessTable + 8))(v18, a3);
  v68[2] = v26;
  v68[3] = &protocol witness table for _FlexFrameLayout;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v59 = v25;
  v56 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v56(v25, v23, v19);
  v33 = *(void (**)(char *, uint64_t))(v20 + 8);
  v34 = v54;
  v57 = v23;
  v35 = v23;
  v36 = v19;
  v33(v35, v19);
  sub_10000F7C4(v61, (uint64_t)v16, type metadata accessor for DailyForecastViewModel);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v16, 0, 1, v34);
  v37 = *(_QWORD *)a2;
  v38 = v53;
  sub_1000EDCC0(v37, v53);
  v39 = v32 + *(int *)(v55 + 48);
  sub_1000168D8((uint64_t)v16, v32, &qword_1001C1D90);
  sub_1000168D8(v38, v39, &qword_1001C1D90);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v32, 1, v34) != 1)
  {
    v40 = v38;
    v41 = v51;
    sub_1000168D8(v32, v51, &qword_1001C1D90);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v39, 1, v34) != 1)
    {
      v42 = v50;
      sub_100011868(v39, v50, type metadata accessor for DailyForecastViewModel);
      v43 = sub_10013DB1C(v41, v42);
      sub_100011894(v42, type metadata accessor for DailyForecastViewModel);
      sub_100016904(v40, &qword_1001C1D90);
      sub_100016904((uint64_t)v16, &qword_1001C1D90);
      sub_100011894(v41, type metadata accessor for DailyForecastViewModel);
      sub_100016904(v32, &qword_1001C1D90);
      if ((v43 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v45 = 0;
      v44 = 0x4020000000000000;
      goto LABEL_10;
    }
    sub_100016904(v40, &qword_1001C1D90);
    sub_100016904((uint64_t)v16, &qword_1001C1D90);
    sub_100011894(v41, type metadata accessor for DailyForecastViewModel);
LABEL_6:
    sub_100016904(v32, &qword_1001C3FC0);
    goto LABEL_9;
  }
  sub_100016904(v38, &qword_1001C1D90);
  sub_100016904((uint64_t)v16, &qword_1001C1D90);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v39, 1, v34) != 1)
    goto LABEL_6;
  sub_100016904(v32, &qword_1001C1D90);
LABEL_8:
  v44 = 0;
  v45 = 1;
LABEL_10:
  v46 = v57;
  v47 = (uint64_t)v59;
  v56(v57, v59, v36);
  v65 = v44;
  v66 = 0;
  v67 = v45;
  v68[0] = v46;
  v68[1] = &v65;
  v64[0] = v36;
  v64[1] = sub_100005D40(&qword_1001C4448);
  v62 = WitnessTable;
  v63 = sub_1000F9CD8();
  sub_1000EDB84((uint64_t)v68, 2, (uint64_t)v64);
  v33((char *)v47, v36);
  return ((uint64_t (*)(char *, uint64_t))v33)(v46, v36);
}

uint64_t type metadata accessor for HighTemperatureColumn(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C40C0, (uint64_t)&nominal type descriptor for HighTemperatureColumn);
}

uint64_t type metadata accessor for LowTemperatureColumn(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C4150, (uint64_t)&nominal type descriptor for LowTemperatureColumn);
}

uint64_t type metadata accessor for PrecipitationColumn(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C41E8, (uint64_t)&nominal type descriptor for PrecipitationColumn);
}

uint64_t type metadata accessor for ConditionColumn(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C4278, (uint64_t)&nominal type descriptor for ConditionColumn);
}

uint64_t type metadata accessor for WeekdayColumn(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C4308, (uint64_t)&nominal type descriptor for WeekdayColumn);
}

uint64_t sub_1000F6420()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for LargeDailyView(0);
  v3 = sub_1000FA074();
  sub_100083090(v3);
  v4 = sub_10001C7FC();
  sub_1000FA144(v4);
  sub_100016B34(v2[17]);
  sub_100016B34(v2[18]);
  sub_100016B34(v2[19]);
  v5 = v1 + v2[22];
  v6 = sub_100005D40(&qword_1001BF090);
  if (!sub_100016AB8(v5))
    sub_1000FA0B0();
  if (!sub_1000FA098())
    sub_100016C44();
  sub_1000FA198();
  v8 = v1 + v7;
  swift_release(*(_QWORD *)(v1 + v7));
  swift_release(*(_QWORD *)(v8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 16));
  v9 = sub_1000FA180();
  sub_100016A94(v9);
  return sub_1000CD190(v0, (uint64_t)v2, v6);
}

void sub_1000F64F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_1000FA188();
  type metadata accessor for LargeDailyView(v3);
  sub_1000FA0F8();
  sub_1000F178C(v0, v1 + v5, v2, *(double *)(v1 + v6), *(double *)(v1 + (v4 & 0xFFFFFFFFFFFFFFF8)), *(double *)(v1 + (((v4 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000F654C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F6558);
}

uint64_t sub_1000F6558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001C7FC();
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, v4);
}

uint64_t sub_1000F6588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F6594);
}

uint64_t sub_1000F6594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001C7FC();
  sub_1000A75F8();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, v1, v2, v3);
}

unint64_t sub_1000F65C4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10001961C(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    v12 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v17 = *(int *)(a3 + 24);
    v18 = a1 + v17;
    v19 = a2 + v17;
    v20 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = (int *)type metadata accessor for DailyViewAttributes(0);
    v22 = v21[5];
    v23 = *(_QWORD *)(v19 + v22);
    *(_QWORD *)(v18 + v22) = v23;
    *(_WORD *)(v18 + v21[6]) = *(_WORD *)(v19 + v21[6]);
    *(_QWORD *)(v18 + v21[7]) = *(_QWORD *)(v19 + v21[7]);
    *(_BYTE *)(v18 + v21[8]) = *(_BYTE *)(v19 + v21[8]);
    *(_BYTE *)(v18 + v21[9]) = *(_BYTE *)(v19 + v21[9]);
    *(_BYTE *)(v18 + v21[10]) = *(_BYTE *)(v19 + v21[10]);
    *(_QWORD *)(v18 + v21[11]) = *(_QWORD *)(v19 + v21[11]);
    *(_BYTE *)(v18 + v21[12]) = *(_BYTE *)(v19 + v21[12]);
    *(_BYTE *)(v18 + v21[13]) = *(_BYTE *)(v19 + v21[13]);
    *(_BYTE *)(v18 + v21[14]) = *(_BYTE *)(v19 + v21[14]);
    *(_BYTE *)(v18 + v21[15]) = *(_BYTE *)(v19 + v21[15]);
    *(_QWORD *)(v18 + v21[16]) = *(_QWORD *)(v19 + v21[16]);
    v24 = v21[17];
    v25 = *(_QWORD *)(v19 + v24);
    *(_QWORD *)(v18 + v24) = v25;
    v26 = v21[18];
    v27 = *(_QWORD *)(v19 + v26);
    *(_QWORD *)(v18 + v26) = v27;
    v28 = v21[19];
    v29 = *(_QWORD *)(v19 + v28);
    *(_QWORD *)(v18 + v28) = v29;
    *(_QWORD *)(v18 + v21[20]) = *(_QWORD *)(v19 + v21[20]);
    *(_QWORD *)(v18 + v21[21]) = *(_QWORD *)(v19 + v21[21]);
    v30 = v21[22];
    v31 = (void *)(v18 + v30);
    v32 = (const void *)(v19 + v30);
    swift_bridgeObjectRetain(v23);
    swift_retain(v25);
    swift_retain(v27);
    swift_retain(v29);
    v33 = sub_100005D40(&qword_1001BF090);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v33))
    {
      v34 = sub_100005D40(&qword_1001BF098);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v33);
    }
    v35 = v21[23];
    v36 = (void *)(v18 + v35);
    v37 = (const void *)(v19 + v35);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v37, 1, v33))
    {
      v38 = sub_100005D40(&qword_1001BF098);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v36, v37, v33);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v36, 0, 1, v33);
    }
  }
  return a1;
}

uint64_t sub_1000F68D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  sub_100019A78(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (int *)type metadata accessor for DailyViewAttributes(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v9[5]));
  swift_release(*(_QWORD *)(v7 + v9[17]));
  swift_release(*(_QWORD *)(v7 + v9[18]));
  swift_release(*(_QWORD *)(v7 + v9[19]));
  v10 = v7 + v9[22];
  v11 = sub_100005D40(&qword_1001BF090);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v7 + v9[23];
  result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v12, 1, v11);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v12, v11);
  return result;
}

uint64_t sub_1000F6A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10001961C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = *(int *)(a3 + 24);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = (int *)type metadata accessor for DailyViewAttributes(0);
  v20 = v19[5];
  v21 = *(_QWORD *)(v17 + v20);
  *(_QWORD *)(v16 + v20) = v21;
  *(_WORD *)(v16 + v19[6]) = *(_WORD *)(v17 + v19[6]);
  *(_QWORD *)(v16 + v19[7]) = *(_QWORD *)(v17 + v19[7]);
  *(_BYTE *)(v16 + v19[8]) = *(_BYTE *)(v17 + v19[8]);
  *(_BYTE *)(v16 + v19[9]) = *(_BYTE *)(v17 + v19[9]);
  *(_BYTE *)(v16 + v19[10]) = *(_BYTE *)(v17 + v19[10]);
  *(_QWORD *)(v16 + v19[11]) = *(_QWORD *)(v17 + v19[11]);
  *(_BYTE *)(v16 + v19[12]) = *(_BYTE *)(v17 + v19[12]);
  *(_BYTE *)(v16 + v19[13]) = *(_BYTE *)(v17 + v19[13]);
  *(_BYTE *)(v16 + v19[14]) = *(_BYTE *)(v17 + v19[14]);
  *(_BYTE *)(v16 + v19[15]) = *(_BYTE *)(v17 + v19[15]);
  *(_QWORD *)(v16 + v19[16]) = *(_QWORD *)(v17 + v19[16]);
  v22 = v19[17];
  v23 = *(_QWORD *)(v17 + v22);
  *(_QWORD *)(v16 + v22) = v23;
  v24 = v19[18];
  v25 = *(_QWORD *)(v17 + v24);
  *(_QWORD *)(v16 + v24) = v25;
  v26 = v19[19];
  v27 = *(_QWORD *)(v17 + v26);
  *(_QWORD *)(v16 + v26) = v27;
  *(_QWORD *)(v16 + v19[20]) = *(_QWORD *)(v17 + v19[20]);
  *(_QWORD *)(v16 + v19[21]) = *(_QWORD *)(v17 + v19[21]);
  v28 = v19[22];
  v29 = (void *)(v16 + v28);
  v30 = (const void *)(v17 + v28);
  swift_bridgeObjectRetain(v21);
  swift_retain(v23);
  swift_retain(v25);
  swift_retain(v27);
  v31 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v31))
  {
    v32 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v31);
  }
  v33 = v19[23];
  v34 = (void *)(v16 + v33);
  v35 = (const void *)(v17 + v33);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 1, v31))
  {
    v36 = sub_100005D40(&qword_1001BF098);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v34, v35, v31);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v31);
  }
  return a1;
}

uint64_t sub_1000F6D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10001961C(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_100019A78(v8, v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_100016904(a1 + v10, &qword_1001BF490);
    v13 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  v17 = *(int *)(a3 + 24);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = (int *)type metadata accessor for DailyViewAttributes(0);
  v22 = v21[5];
  v23 = *(_QWORD *)(v19 + v22);
  v24 = *(_QWORD *)(v18 + v22);
  *(_QWORD *)(v18 + v22) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  v25 = v21[6];
  v26 = (_BYTE *)(v18 + v25);
  v27 = (_BYTE *)(v19 + v25);
  *v26 = *v27;
  v26[1] = v27[1];
  *(_QWORD *)(v18 + v21[7]) = *(_QWORD *)(v19 + v21[7]);
  *(_BYTE *)(v18 + v21[8]) = *(_BYTE *)(v19 + v21[8]);
  *(_BYTE *)(v18 + v21[9]) = *(_BYTE *)(v19 + v21[9]);
  *(_BYTE *)(v18 + v21[10]) = *(_BYTE *)(v19 + v21[10]);
  *(_QWORD *)(v18 + v21[11]) = *(_QWORD *)(v19 + v21[11]);
  *(_BYTE *)(v18 + v21[12]) = *(_BYTE *)(v19 + v21[12]);
  *(_BYTE *)(v18 + v21[13]) = *(_BYTE *)(v19 + v21[13]);
  *(_BYTE *)(v18 + v21[14]) = *(_BYTE *)(v19 + v21[14]);
  *(_BYTE *)(v18 + v21[15]) = *(_BYTE *)(v19 + v21[15]);
  *(_QWORD *)(v18 + v21[16]) = *(_QWORD *)(v19 + v21[16]);
  v28 = v21[17];
  v29 = *(_QWORD *)(v19 + v28);
  v30 = *(_QWORD *)(v18 + v28);
  *(_QWORD *)(v18 + v28) = v29;
  swift_retain(v29);
  swift_release(v30);
  v31 = v21[18];
  v32 = *(_QWORD *)(v19 + v31);
  v33 = *(_QWORD *)(v18 + v31);
  *(_QWORD *)(v18 + v31) = v32;
  swift_retain(v32);
  swift_release(v33);
  v34 = v21[19];
  v35 = *(_QWORD *)(v19 + v34);
  v36 = *(_QWORD *)(v18 + v34);
  *(_QWORD *)(v18 + v34) = v35;
  swift_retain(v35);
  swift_release(v36);
  *(_QWORD *)(v18 + v21[20]) = *(_QWORD *)(v19 + v21[20]);
  *(_QWORD *)(v18 + v21[21]) = *(_QWORD *)(v19 + v21[21]);
  v37 = v21[22];
  v38 = (void *)(v18 + v37);
  v39 = (const void *)(v19 + v37);
  v40 = sub_100005D40(&qword_1001BF090);
  v41 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v38, 1, v40);
  v42 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v39, 1, v40);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v38, 0, 1, v40);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  v43 = *(_QWORD *)(v40 - 8);
  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v43 + 8))(v38, v40);
LABEL_11:
    v44 = sub_100005D40(&qword_1001BF098);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, const void *, uint64_t))(v43 + 24))(v38, v39, v40);
LABEL_12:
  v45 = v21[23];
  v46 = (void *)(v18 + v45);
  v47 = (const void *)(v19 + v45);
  v48 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v46, 1, v40);
  v49 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v47, 1, v40);
  if (!v48)
  {
    v50 = *(_QWORD *)(v40 - 8);
    if (!v49)
    {
      (*(void (**)(void *, const void *, uint64_t))(v50 + 24))(v46, v47, v40);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v50 + 8))(v46, v40);
    goto LABEL_17;
  }
  if (v49)
  {
LABEL_17:
    v51 = sub_100005D40(&qword_1001BF098);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v46, v47, v40);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v46, 0, 1, v40);
  return a1;
}

uint64_t sub_1000F70E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = (int *)type metadata accessor for DailyViewAttributes(0);
  *(_QWORD *)(v12 + v15[5]) = *(_QWORD *)(v13 + v15[5]);
  *(_WORD *)(v12 + v15[6]) = *(_WORD *)(v13 + v15[6]);
  *(_QWORD *)(v12 + v15[7]) = *(_QWORD *)(v13 + v15[7]);
  *(_BYTE *)(v12 + v15[8]) = *(_BYTE *)(v13 + v15[8]);
  *(_BYTE *)(v12 + v15[9]) = *(_BYTE *)(v13 + v15[9]);
  *(_BYTE *)(v12 + v15[10]) = *(_BYTE *)(v13 + v15[10]);
  *(_QWORD *)(v12 + v15[11]) = *(_QWORD *)(v13 + v15[11]);
  *(_BYTE *)(v12 + v15[12]) = *(_BYTE *)(v13 + v15[12]);
  *(_BYTE *)(v12 + v15[13]) = *(_BYTE *)(v13 + v15[13]);
  *(_BYTE *)(v12 + v15[14]) = *(_BYTE *)(v13 + v15[14]);
  *(_BYTE *)(v12 + v15[15]) = *(_BYTE *)(v13 + v15[15]);
  *(_QWORD *)(v12 + v15[16]) = *(_QWORD *)(v13 + v15[16]);
  *(_QWORD *)(v12 + v15[17]) = *(_QWORD *)(v13 + v15[17]);
  *(_QWORD *)(v12 + v15[18]) = *(_QWORD *)(v13 + v15[18]);
  *(_QWORD *)(v12 + v15[19]) = *(_QWORD *)(v13 + v15[19]);
  *(_QWORD *)(v12 + v15[20]) = *(_QWORD *)(v13 + v15[20]);
  *(_QWORD *)(v12 + v15[21]) = *(_QWORD *)(v13 + v15[21]);
  v16 = v15[22];
  v17 = (void *)(v12 + v16);
  v18 = (const void *)(v13 + v16);
  v19 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v19))
  {
    v20 = sub_100005D40(&qword_1001BF098);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v19);
  }
  v21 = v15[23];
  v22 = (void *)(v12 + v21);
  v23 = (const void *)(v13 + v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v23, 1, v19))
  {
    v24 = sub_100005D40(&qword_1001BF098);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v22, v23, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v22, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_1000F73A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_100019A78(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_100016904(a1 + v10, &qword_1001BF490);
    v13 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = *(int *)(a3 + 24);
  v16 = a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v18 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = (int *)type metadata accessor for DailyViewAttributes(0);
  v20 = v19[5];
  v21 = *(_QWORD *)(v16 + v20);
  *(_QWORD *)(v16 + v20) = *(_QWORD *)(v17 + v20);
  swift_bridgeObjectRelease(v21);
  *(_WORD *)(v16 + v19[6]) = *(_WORD *)(v17 + v19[6]);
  *(_QWORD *)(v16 + v19[7]) = *(_QWORD *)(v17 + v19[7]);
  *(_BYTE *)(v16 + v19[8]) = *(_BYTE *)(v17 + v19[8]);
  *(_BYTE *)(v16 + v19[9]) = *(_BYTE *)(v17 + v19[9]);
  *(_BYTE *)(v16 + v19[10]) = *(_BYTE *)(v17 + v19[10]);
  *(_QWORD *)(v16 + v19[11]) = *(_QWORD *)(v17 + v19[11]);
  *(_BYTE *)(v16 + v19[12]) = *(_BYTE *)(v17 + v19[12]);
  *(_BYTE *)(v16 + v19[13]) = *(_BYTE *)(v17 + v19[13]);
  *(_BYTE *)(v16 + v19[14]) = *(_BYTE *)(v17 + v19[14]);
  *(_BYTE *)(v16 + v19[15]) = *(_BYTE *)(v17 + v19[15]);
  *(_QWORD *)(v16 + v19[16]) = *(_QWORD *)(v17 + v19[16]);
  v22 = v19[17];
  v23 = *(_QWORD *)(v16 + v22);
  *(_QWORD *)(v16 + v22) = *(_QWORD *)(v17 + v22);
  swift_release(v23);
  v24 = v19[18];
  v25 = *(_QWORD *)(v16 + v24);
  *(_QWORD *)(v16 + v24) = *(_QWORD *)(v17 + v24);
  swift_release(v25);
  v26 = v19[19];
  v27 = *(_QWORD *)(v16 + v26);
  *(_QWORD *)(v16 + v26) = *(_QWORD *)(v17 + v26);
  swift_release(v27);
  *(_QWORD *)(v16 + v19[20]) = *(_QWORD *)(v17 + v19[20]);
  *(_QWORD *)(v16 + v19[21]) = *(_QWORD *)(v17 + v19[21]);
  v28 = v19[22];
  v29 = (void *)(v16 + v28);
  v30 = (const void *)(v17 + v28);
  v31 = sub_100005D40(&qword_1001BF090);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, v31);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v31);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v31);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v34 = *(_QWORD *)(v31 - 8);
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v29, v31);
LABEL_10:
    v35 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(void *, const void *, uint64_t))(v34 + 40))(v29, v30, v31);
LABEL_11:
  v36 = v19[23];
  v37 = (void *)(v16 + v36);
  v38 = (const void *)(v17 + v36);
  v39 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v37, 1, v31);
  v40 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v38, 1, v31);
  if (!v39)
  {
    v41 = *(_QWORD *)(v31 - 8);
    if (!v40)
    {
      (*(void (**)(void *, const void *, uint64_t))(v41 + 40))(v37, v38, v31);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v41 + 8))(v37, v31);
    goto LABEL_16;
  }
  if (v40)
  {
LABEL_16:
    v42 = sub_100005D40(&qword_1001BF098);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v37, v38, v31);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v37, 0, 1, v31);
  return a1;
}

uint64_t sub_1000F7734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F7740);
}

void sub_1000F7740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a2 == 254)
  {
    sub_1000443A4();
  }
  else
  {
    sub_100005D40(&qword_1001BF4A8);
    sub_10001C6C0();
    if (v7)
    {
      v8 = v6;
      v9 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_10001C7FC();
      v9 = *(int *)(a3 + 24);
    }
    sub_100016B50(a1 + v9, a2, v8);
  }
}

uint64_t sub_1000F77B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F77C4);
}

void sub_1000F77C4(uint64_t a1, char a2, int a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3 == 254)
  {
    *(_BYTE *)(a1 + 8) = -a2;
    sub_1000443A4();
  }
  else
  {
    sub_100005D40(&qword_1001BF4A8);
    sub_10001C6D0();
    if (!v3)
      sub_10001C7FC();
    sub_1000A75F8();
    sub_100016B44(v4, v5, v6, v7);
  }
}

void sub_1000F7838(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = "\t";
  sub_10001C028(319, (unint64_t *)&qword_1001BF528, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for DailyViewAttributes(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t *sub_1000F78D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for WidgetFamily(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_retain(v4);
    v10(v7, v8, v9);
    v11 = (int *)type metadata accessor for DailyViewAttributes(0);
    v12 = v11[5];
    v13 = *(_QWORD *)&v8[v12];
    *(_QWORD *)&v7[v12] = v13;
    *(_WORD *)&v7[v11[6]] = *(_WORD *)&v8[v11[6]];
    *(_QWORD *)&v7[v11[7]] = *(_QWORD *)&v8[v11[7]];
    v7[v11[8]] = v8[v11[8]];
    v7[v11[9]] = v8[v11[9]];
    v7[v11[10]] = v8[v11[10]];
    *(_QWORD *)&v7[v11[11]] = *(_QWORD *)&v8[v11[11]];
    v7[v11[12]] = v8[v11[12]];
    v7[v11[13]] = v8[v11[13]];
    v7[v11[14]] = v8[v11[14]];
    v7[v11[15]] = v8[v11[15]];
    *(_QWORD *)&v7[v11[16]] = *(_QWORD *)&v8[v11[16]];
    v14 = v11[17];
    v15 = *(_QWORD *)&v8[v14];
    *(_QWORD *)&v7[v14] = v15;
    v16 = v11[18];
    v17 = *(_QWORD *)&v8[v16];
    *(_QWORD *)&v7[v16] = v17;
    v18 = v11[19];
    v19 = *(_QWORD *)&v8[v18];
    *(_QWORD *)&v7[v18] = v19;
    *(_QWORD *)&v7[v11[20]] = *(_QWORD *)&v8[v11[20]];
    *(_QWORD *)&v7[v11[21]] = *(_QWORD *)&v8[v11[21]];
    v20 = v11[22];
    v21 = &v7[v20];
    v22 = &v8[v20];
    swift_bridgeObjectRetain(v13);
    swift_retain(v15);
    swift_retain(v17);
    swift_retain(v19);
    v23 = sub_100005D40(&qword_1001BF090);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v22, 1, v23))
    {
      v24 = sub_100005D40(&qword_1001BF098);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v21, 0, 1, v23);
    }
    v25 = v11[23];
    v26 = &v7[v25];
    v27 = &v8[v25];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v27, 1, v23))
    {
      v28 = sub_100005D40(&qword_1001BF098);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v26, v27, v23);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v26, 0, 1, v23);
    }
  }
  return v5;
}

uint64_t sub_1000F7B64(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_release(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (int *)type metadata accessor for DailyViewAttributes(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v6[5]]);
  swift_release(*(_QWORD *)&v4[v6[17]]);
  swift_release(*(_QWORD *)&v4[v6[18]]);
  swift_release(*(_QWORD *)&v4[v6[19]]);
  v7 = (uint64_t)&v4[v6[22]];
  v8 = sub_100005D40(&qword_1001BF090);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (uint64_t)&v4[v6[23]];
  result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v9, v8);
  return result;
}

uint64_t *sub_1000F7C70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for WidgetFamily(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain(v4);
  v9(v6, v7, v8);
  v10 = (int *)type metadata accessor for DailyViewAttributes(0);
  v11 = v10[5];
  v12 = *(_QWORD *)&v7[v11];
  *(_QWORD *)&v6[v11] = v12;
  *(_WORD *)&v6[v10[6]] = *(_WORD *)&v7[v10[6]];
  *(_QWORD *)&v6[v10[7]] = *(_QWORD *)&v7[v10[7]];
  v6[v10[8]] = v7[v10[8]];
  v6[v10[9]] = v7[v10[9]];
  v6[v10[10]] = v7[v10[10]];
  *(_QWORD *)&v6[v10[11]] = *(_QWORD *)&v7[v10[11]];
  v6[v10[12]] = v7[v10[12]];
  v6[v10[13]] = v7[v10[13]];
  v6[v10[14]] = v7[v10[14]];
  v6[v10[15]] = v7[v10[15]];
  *(_QWORD *)&v6[v10[16]] = *(_QWORD *)&v7[v10[16]];
  v13 = v10[17];
  v14 = *(_QWORD *)&v7[v13];
  *(_QWORD *)&v6[v13] = v14;
  v15 = v10[18];
  v16 = *(_QWORD *)&v7[v15];
  *(_QWORD *)&v6[v15] = v16;
  v17 = v10[19];
  v18 = *(_QWORD *)&v7[v17];
  *(_QWORD *)&v6[v17] = v18;
  *(_QWORD *)&v6[v10[20]] = *(_QWORD *)&v7[v10[20]];
  *(_QWORD *)&v6[v10[21]] = *(_QWORD *)&v7[v10[21]];
  v19 = v10[22];
  v20 = &v6[v19];
  v21 = &v7[v19];
  swift_bridgeObjectRetain(v12);
  swift_retain(v14);
  swift_retain(v16);
  swift_retain(v18);
  v22 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v22))
  {
    v23 = sub_100005D40(&qword_1001BF098);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, v22);
  }
  v24 = v10[23];
  v25 = &v6[v24];
  v26 = &v7[v24];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v22))
  {
    v27 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v25, v26, v22);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v22);
  }
  return a1;
}

uint64_t *sub_1000F7ED4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = (int *)type metadata accessor for DailyViewAttributes(0);
  v13 = v12[5];
  v14 = *(_QWORD *)&v10[v13];
  v15 = *(_QWORD *)&v9[v13];
  *(_QWORD *)&v9[v13] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = v12[6];
  v17 = &v9[v16];
  v18 = &v10[v16];
  *v17 = *v18;
  v17[1] = v18[1];
  *(_QWORD *)&v9[v12[7]] = *(_QWORD *)&v10[v12[7]];
  v9[v12[8]] = v10[v12[8]];
  v9[v12[9]] = v10[v12[9]];
  v9[v12[10]] = v10[v12[10]];
  *(_QWORD *)&v9[v12[11]] = *(_QWORD *)&v10[v12[11]];
  v9[v12[12]] = v10[v12[12]];
  v9[v12[13]] = v10[v12[13]];
  v9[v12[14]] = v10[v12[14]];
  v9[v12[15]] = v10[v12[15]];
  *(_QWORD *)&v9[v12[16]] = *(_QWORD *)&v10[v12[16]];
  v19 = v12[17];
  v20 = *(_QWORD *)&v10[v19];
  v21 = *(_QWORD *)&v9[v19];
  *(_QWORD *)&v9[v19] = v20;
  swift_retain(v20);
  swift_release(v21);
  v22 = v12[18];
  v23 = *(_QWORD *)&v10[v22];
  v24 = *(_QWORD *)&v9[v22];
  *(_QWORD *)&v9[v22] = v23;
  swift_retain(v23);
  swift_release(v24);
  v25 = v12[19];
  v26 = *(_QWORD *)&v10[v25];
  v27 = *(_QWORD *)&v9[v25];
  *(_QWORD *)&v9[v25] = v26;
  swift_retain(v26);
  swift_release(v27);
  *(_QWORD *)&v9[v12[20]] = *(_QWORD *)&v10[v12[20]];
  *(_QWORD *)&v9[v12[21]] = *(_QWORD *)&v10[v12[21]];
  v28 = v12[22];
  v29 = &v9[v28];
  v30 = &v10[v28];
  v31 = sub_100005D40(&qword_1001BF090);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, v31);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v31);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v31);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v34 = *(_QWORD *)(v31 - 8);
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v31);
LABEL_6:
    v35 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 24))(v29, v30, v31);
LABEL_7:
  v36 = v12[23];
  v37 = &v9[v36];
  v38 = &v10[v36];
  v39 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v37, 1, v31);
  v40 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v38, 1, v31);
  if (!v39)
  {
    v41 = *(_QWORD *)(v31 - 8);
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 24))(v37, v38, v31);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v37, v31);
    goto LABEL_12;
  }
  if (v40)
  {
LABEL_12:
    v42 = sub_100005D40(&qword_1001BF098);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v37, v38, v31);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v37, 0, 1, v31);
  return a1;
}

_QWORD *sub_1000F8200(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  v8 = (int *)type metadata accessor for DailyViewAttributes(0);
  *(_QWORD *)&v5[v8[5]] = *(_QWORD *)&v6[v8[5]];
  *(_WORD *)&v5[v8[6]] = *(_WORD *)&v6[v8[6]];
  *(_QWORD *)&v5[v8[7]] = *(_QWORD *)&v6[v8[7]];
  v5[v8[8]] = v6[v8[8]];
  v5[v8[9]] = v6[v8[9]];
  v5[v8[10]] = v6[v8[10]];
  *(_QWORD *)&v5[v8[11]] = *(_QWORD *)&v6[v8[11]];
  v5[v8[12]] = v6[v8[12]];
  v5[v8[13]] = v6[v8[13]];
  v5[v8[14]] = v6[v8[14]];
  v5[v8[15]] = v6[v8[15]];
  *(_QWORD *)&v5[v8[16]] = *(_QWORD *)&v6[v8[16]];
  *(_QWORD *)&v5[v8[17]] = *(_QWORD *)&v6[v8[17]];
  *(_QWORD *)&v5[v8[18]] = *(_QWORD *)&v6[v8[18]];
  *(_QWORD *)&v5[v8[19]] = *(_QWORD *)&v6[v8[19]];
  *(_QWORD *)&v5[v8[20]] = *(_QWORD *)&v6[v8[20]];
  *(_QWORD *)&v5[v8[21]] = *(_QWORD *)&v6[v8[21]];
  v9 = v8[22];
  v10 = &v5[v9];
  v11 = &v6[v9];
  v12 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v11, 1, v12))
  {
    v13 = sub_100005D40(&qword_1001BF098);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 0, 1, v12);
  }
  v14 = v8[23];
  v15 = &v5[v14];
  v16 = &v6[v14];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v12))
  {
    v17 = sub_100005D40(&qword_1001BF098);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v15, v16, v12);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v15, 0, 1, v12);
  }
  return a1;
}

uint64_t *sub_1000F8434(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = (int *)type metadata accessor for DailyViewAttributes(0);
  v12 = v11[5];
  v13 = *(_QWORD *)&v8[v12];
  *(_QWORD *)&v8[v12] = *(_QWORD *)&v9[v12];
  swift_bridgeObjectRelease(v13);
  *(_WORD *)&v8[v11[6]] = *(_WORD *)&v9[v11[6]];
  *(_QWORD *)&v8[v11[7]] = *(_QWORD *)&v9[v11[7]];
  v8[v11[8]] = v9[v11[8]];
  v8[v11[9]] = v9[v11[9]];
  v8[v11[10]] = v9[v11[10]];
  *(_QWORD *)&v8[v11[11]] = *(_QWORD *)&v9[v11[11]];
  v8[v11[12]] = v9[v11[12]];
  v8[v11[13]] = v9[v11[13]];
  v8[v11[14]] = v9[v11[14]];
  v8[v11[15]] = v9[v11[15]];
  *(_QWORD *)&v8[v11[16]] = *(_QWORD *)&v9[v11[16]];
  v14 = v11[17];
  v15 = *(_QWORD *)&v8[v14];
  *(_QWORD *)&v8[v14] = *(_QWORD *)&v9[v14];
  swift_release(v15);
  v16 = v11[18];
  v17 = *(_QWORD *)&v8[v16];
  *(_QWORD *)&v8[v16] = *(_QWORD *)&v9[v16];
  swift_release(v17);
  v18 = v11[19];
  v19 = *(_QWORD *)&v8[v18];
  *(_QWORD *)&v8[v18] = *(_QWORD *)&v9[v18];
  swift_release(v19);
  *(_QWORD *)&v8[v11[20]] = *(_QWORD *)&v9[v11[20]];
  *(_QWORD *)&v8[v11[21]] = *(_QWORD *)&v9[v11[21]];
  v20 = v11[22];
  v21 = &v8[v20];
  v22 = &v9[v20];
  v23 = sub_100005D40(&qword_1001BF090);
  v24 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v23);
  v25 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v22, 1, v23);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v21, 0, 1, v23);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v26 = *(_QWORD *)(v23 - 8);
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v23);
LABEL_6:
    v27 = sub_100005D40(&qword_1001BF098);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v21, v22, v23);
LABEL_7:
  v28 = v11[23];
  v29 = &v8[v28];
  v30 = &v9[v28];
  v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, v23);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v23);
  if (!v31)
  {
    v33 = *(_QWORD *)(v23 - 8);
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 40))(v29, v30, v23);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v29, v23);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v34 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v29, v30, v23);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v23);
  return a1;
}

uint64_t sub_1000F8728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F8734);
}

void sub_1000F8734(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_100044448(*a1);
    sub_1000443A4();
  }
  else
  {
    v6 = sub_10001C7FC();
    sub_100016B50((uint64_t)a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t sub_1000F8788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F8794);
}

void sub_1000F8794()
{
  int v0;
  _QWORD *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100067508();
  if (v2)
  {
    *v1 = (v0 - 1);
    sub_1000443A4();
  }
  else
  {
    sub_10001C7FC();
    sub_1000A75F8();
    sub_100016B44(v3, v4, v5, v6);
  }
}

uint64_t sub_1000F87DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for DailyViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000F8854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F9EB0);
}

uint64_t sub_1000F8860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F9EA4);
}

void sub_1000F886C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1000FA1D4();
  v6 = v5;
  v8 = v7;
  v9 = sub_10001C7FC();
  if ((*(_DWORD *)(*(_QWORD *)(v9 - 8) + 80) & 0x20000) != 0)
  {
    v14 = *v6;
    *v8 = *v6;
    swift_retain(v14);
  }
  else
  {
    v10 = v9;
    v11 = sub_10008A8E8();
    sub_100016B28(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16));
    sub_1000F9EB8(*(int *)(v10 + 20));
    swift_retain(v0);
    swift_retain(v3);
    swift_retain(v4);
    v12 = sub_100005D40(&qword_1001BF090);
    if (sub_1000F9F90(v2))
    {
      v13 = sub_100005D40(&qword_1001BF098);
      sub_1000FA04C(v13);
    }
    else
    {
      sub_1000FA03C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16));
      sub_1000FA01C(v1);
    }
    v15 = *(int *)(v10 + 92);
    v16 = (uint64_t)v8 + v15;
    if (sub_1000F9F90((uint64_t)v6 + v15))
    {
      v17 = sub_100005D40(&qword_1001BF098);
      sub_1000FA060(v17);
    }
    else
    {
      sub_1000FA02C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16));
      sub_1000FA01C(v16);
    }
  }
  sub_100016BC0();
}

void sub_1000F8980(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_10008A8E8();
  sub_100016A94(v2);
  v3 = (int *)sub_10001C7FC();
  sub_1000FA138((uint64_t)v3);
  sub_100016B3C(v3[17]);
  sub_100016B3C(v3[18]);
  sub_100016B3C(v3[19]);
  v4 = a1 + v3[22];
  v5 = sub_100005D40(&qword_1001BF090);
  if (!sub_1000FA1FC(v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + v3[23];
  if (sub_1000FA1FC(v6))
    sub_1000443A4();
  else
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v6, v5);
}

void sub_1000F8A34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1000FA1D4();
  v6 = v5;
  v8 = v7;
  v9 = sub_10008A8E8();
  sub_100016B28(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16));
  v10 = sub_10001C7FC();
  sub_1000F9EB8(*(int *)(v10 + 20));
  swift_retain(v0);
  swift_retain(v3);
  swift_retain(v4);
  v11 = sub_100005D40(&qword_1001BF090);
  if (sub_1000F9F90(v2))
  {
    v12 = sub_100005D40(&qword_1001BF098);
    sub_1000FA04C(v12);
  }
  else
  {
    sub_1000FA03C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16));
    sub_1000FA01C(v1);
  }
  v13 = *(int *)(v10 + 92);
  v14 = v8 + v13;
  if (sub_1000F9F90(v6 + v13))
  {
    v15 = sub_100005D40(&qword_1001BF098);
    sub_1000FA060(v15);
  }
  else
  {
    sub_1000FA02C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16));
    sub_1000FA01C(v14);
  }
  sub_100016BC0();
}

void sub_1000F8B1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  sub_1000FA1D4();
  v3 = v2;
  v5 = v4;
  v6 = sub_10008A8E8();
  sub_100016B28(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24));
  v7 = (int *)sub_10001C7FC();
  v8 = v7[5];
  v9 = *(_QWORD *)(v3 + v8);
  v10 = *(_QWORD *)(v5 + v8);
  *(_QWORD *)(v5 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = v7[6];
  v12 = (_BYTE *)(v5 + v11);
  v13 = (_BYTE *)(v3 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  sub_1000F9F9C();
  sub_1000FA164(v14);
  sub_1000D6DA4();
  sub_1000FA164(v7[18]);
  sub_1000D6DA4();
  sub_1000FA164(v7[19]);
  sub_1000D6DA4();
  sub_1000FA0C4();
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v0, 1, v15);
  v17 = sub_1000F9F90(v1);
  if (v16)
  {
    if (!v17)
    {
      sub_1000FA03C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16));
      sub_1000FA01C(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v18 = *(_QWORD *)(v15 - 8);
  if (v17)
  {
    sub_10003C118(v18);
LABEL_6:
    v19 = sub_100005D40(&qword_1001BF098);
    sub_1000FA04C(v19);
    goto LABEL_7;
  }
  sub_1000FA03C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 24));
LABEL_7:
  v20 = v7[23];
  v21 = v5 + v20;
  v22 = v3 + v20;
  v23 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v5 + v20, 1, v15);
  v24 = sub_1000F9F90(v22);
  if (!v23)
  {
    v25 = *(_QWORD *)(v15 - 8);
    if (!v24)
    {
      sub_1000FA02C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 24));
      goto LABEL_13;
    }
    sub_100028858(v21, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    v26 = sub_100005D40(&qword_1001BF098);
    sub_1000FA060(v26);
    goto LABEL_13;
  }
  sub_1000FA02C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16));
  sub_1000FA01C(v21);
LABEL_13:
  sub_100016BC0();
}

uint64_t sub_1000F8CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = sub_10008A8E8();
  sub_100016B28(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  v5 = sub_10001C7FC();
  sub_1000FA0EC(*(int *)(v5 + 20));
  *(_WORD *)(a1 + *(int *)(v6 + 24)) = *(_WORD *)(a2 + *(int *)(v6 + 24));
  sub_1000FA0EC(*(int *)(v6 + 28));
  sub_1000FA174(*(int *)(v7 + 32));
  sub_1000FA174(*(int *)(v8 + 36));
  sub_1000FA174(*(int *)(v9 + 40));
  sub_1000FA0EC(*(int *)(v10 + 44));
  sub_1000FA174(*(int *)(v11 + 48));
  sub_1000FA174(*(int *)(v12 + 52));
  sub_1000FA174(*(int *)(v13 + 56));
  sub_1000FA174(*(int *)(v14 + 60));
  sub_1000FA0EC(*(int *)(v15 + 64));
  sub_1000FA0EC(*(int *)(v16 + 68));
  sub_1000FA0EC(*(int *)(v17 + 72));
  sub_1000FA0EC(*(int *)(v18 + 76));
  sub_1000FA0EC(*(int *)(v19 + 80));
  sub_1000FA0EC(*(int *)(v20 + 84));
  v22 = *(int *)(v21 + 88);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = sub_100005D40(&qword_1001BF090);
  if (sub_1000F9F90(v24))
  {
    v26 = sub_100005D40(&qword_1001BF098);
    sub_1000FA04C(v26);
  }
  else
  {
    sub_1000FA03C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32));
    sub_1000FA01C(v23);
  }
  v27 = *(int *)(v5 + 92);
  v28 = a1 + v27;
  if (sub_1000F9F90(a2 + v27))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    sub_1000FA060(v29);
  }
  else
  {
    sub_1000FA02C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32));
    sub_1000FA01C(v28);
  }
  return a1;
}

void sub_1000F8E18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  sub_1000FA1D4();
  v3 = v2;
  v5 = v4;
  v6 = sub_10008A8E8();
  sub_100016B28(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40));
  v7 = (int *)sub_10001C7FC();
  v8 = v7[5];
  v9 = *(_QWORD *)(v5 + v8);
  *(_QWORD *)(v5 + v8) = *(_QWORD *)(v3 + v8);
  swift_bridgeObjectRelease(v9);
  *(_WORD *)(v5 + v7[6]) = *(_WORD *)(v3 + v7[6]);
  sub_1000F9F9C();
  sub_1000FA154(v10);
  sub_1000FA154(v7[18]);
  sub_1000FA154(v7[19]);
  sub_1000FA0C4();
  v11 = sub_100005D40(&qword_1001BF090);
  v12 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v0, 1, v11);
  v13 = sub_1000F9F90(v1);
  if (v12)
  {
    if (!v13)
    {
      sub_1000FA03C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32));
      sub_1000FA01C(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v14 = *(_QWORD *)(v11 - 8);
  if (v13)
  {
    sub_10003C118(v14);
LABEL_6:
    v15 = sub_100005D40(&qword_1001BF098);
    sub_1000FA04C(v15);
    goto LABEL_7;
  }
  sub_1000FA03C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40));
LABEL_7:
  v16 = v7[23];
  v17 = v5 + v16;
  v18 = v3 + v16;
  v19 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v5 + v16, 1, v11);
  v20 = sub_1000F9F90(v18);
  if (!v19)
  {
    v21 = *(_QWORD *)(v11 - 8);
    if (!v20)
    {
      sub_1000FA02C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40));
      goto LABEL_13;
    }
    sub_100028858(v17, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v22 = sub_100005D40(&qword_1001BF098);
    sub_1000FA060(v22);
    goto LABEL_13;
  }
  sub_1000FA02C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32));
  sub_1000FA01C(v17);
LABEL_13:
  sub_100016BC0();
}

uint64_t sub_1000F8F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F9EB4);
}

uint64_t sub_1000F8F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F9EA8);
}

uint64_t sub_1000F8F9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for DailyViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_1000F9004()
{
  sub_100016A54(&qword_1001C4340, &qword_1001C4348);
}

void sub_1000F9030()
{
  sub_100016A54(&qword_1001C4350, &qword_1001C4358);
}

void sub_1000F905C()
{
  sub_100016A54(&qword_1001C4360, &qword_1001C4368);
}

uint64_t sub_1000F9088(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A0434, 1);
}

uint64_t sub_1000F9098(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A040C, 1);
}

uint64_t sub_1000F90A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A03E4, 1);
}

uint64_t sub_1000F90B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A03BC, 1);
}

uint64_t sub_1000F90C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A0394, 1);
}

uint64_t sub_1000F90D8()
{
  return sub_1000F914C();
}

uint64_t sub_1000F90E4(uint64_t a1)
{
  return sub_1000F90F8(a1, (uint64_t)type metadata accessor for ConditionColumn, (uint64_t (*)(uint64_t))sub_1000F3D7C);
}

uint64_t sub_1000F90F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v3 = sub_1000FA188();
  v4(v3);
  v5 = sub_100082ECC();
  return a3(v5);
}

uint64_t sub_1000F9140()
{
  return sub_1000F914C();
}

uint64_t sub_1000F914C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD);
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000FA1D4();
  v2(0);
  sub_1000FA120();
  v3 = sub_10008A8E8();
  sub_100016A94(v3);
  v4 = (int *)sub_10001C7FC();
  sub_1000FA138((uint64_t)v4);
  sub_100016B3C(v4[17]);
  sub_100016B3C(v4[18]);
  sub_100016B3C(v4[19]);
  v5 = v0 + v1 + v4[22];
  v6 = sub_100005D40(&qword_1001BF090);
  if (!sub_1000F9F90(v5))
    sub_10003C118(*(_QWORD *)(v6 - 8));
  v7 = v0 + v1 + v4[23];
  if (!sub_1000F9F90(v7))
    sub_100028858(v7, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8));
  v8 = sub_1000FA1B4();
  return sub_100070DD4(v8, v9, v10);
}

uint64_t sub_1000F91FC(uint64_t a1)
{
  return sub_1000F90F8(a1, (uint64_t)type metadata accessor for HighTemperatureColumn, (uint64_t (*)(uint64_t))sub_1000F45D8);
}

uint64_t sub_1000F9210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000FA1D4();
  v2 = type metadata accessor for LowTemperatureColumn(0);
  sub_1000FA120();
  sub_100019A78(*(_QWORD *)(v0 + v1), *(_BYTE *)(v0 + v1 + 8));
  v3 = (_QWORD *)(v0 + v1 + *(int *)(v2 + 20));
  v4 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v3, v4) == 1)
  {
    v5 = type metadata accessor for ColorSchemeContrast(0);
    sub_100083090(v5);
  }
  else
  {
    swift_release(*v3);
  }
  v6 = v0 + v1 + *(int *)(v2 + 24);
  v7 = sub_10008A8E8();
  sub_100016A94(v7);
  v8 = (int *)sub_10001C7FC();
  sub_1000FA138((uint64_t)v8);
  sub_100016B3C(v8[17]);
  sub_100016B3C(v8[18]);
  sub_100016B3C(v8[19]);
  v9 = v6 + v8[22];
  v10 = sub_100005D40(&qword_1001BF090);
  if (!sub_1000F9F90(v9))
    sub_10003C118(*(_QWORD *)(v10 - 8));
  v11 = v6 + v8[23];
  if (!sub_1000F9F90(v11))
    sub_100028858(v11, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8));
  v12 = sub_1000FA1B4();
  return sub_100070DD4(v12, v13, v14);
}

uint64_t sub_1000F9314(uint64_t a1)
{
  return sub_1000F90F8(a1, (uint64_t)type metadata accessor for LowTemperatureColumn, (uint64_t (*)(uint64_t))sub_1000F4F38);
}

uint64_t sub_1000F9328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000FA1D4();
  v2 = type metadata accessor for PrecipitationColumn(0);
  sub_1000FA120();
  swift_release(*(_QWORD *)(v0 + v1));
  v3 = v0 + v1 + *(int *)(v2 + 20);
  v4 = sub_10008A8E8();
  sub_100016A94(v4);
  v5 = (int *)sub_10001C7FC();
  sub_1000FA138((uint64_t)v5);
  sub_100016B3C(v5[17]);
  sub_100016B3C(v5[18]);
  sub_100016B3C(v5[19]);
  v6 = v3 + v5[22];
  v7 = sub_100005D40(&qword_1001BF090);
  if (!sub_1000F9F90(v6))
    sub_10003C118(*(_QWORD *)(v7 - 8));
  v8 = v3 + v5[23];
  if (!sub_1000F9F90(v8))
    sub_100028858(v8, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8));
  v9 = sub_1000FA1B4();
  return sub_100070DD4(v9, v10, v11);
}

double sub_1000F93E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v0 = sub_1000FA188();
  type metadata accessor for PrecipitationColumn(v0);
  v1 = sub_100082ECC();
  return sub_1000F4204(v1, v2, v3);
}

uint64_t sub_1000F9414()
{
  return sub_1000F914C();
}

uint64_t sub_1000F9420(uint64_t a1)
{
  return sub_1000F90F8(a1, (uint64_t)type metadata accessor for WeekdayColumn, (uint64_t (*)(uint64_t))sub_1000F3978);
}

uint64_t sub_1000F9434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void sub_1000F943C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for () + 64;
  sub_10001C028(319, (unint64_t *)&qword_1001BF140, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 0, 5, v4, a1 + 32);
  }
}

uint64_t *sub_1000F94EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v7 = a2[1];
    v6 = a2[2];
    a1[1] = v7;
    a1[2] = v6;
    v8 = a2[4];
    a1[3] = a2[3];
    a1[4] = v8;
    v9 = *(int *)(a3 + 48);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    swift_bridgeObjectRetain(v5);
    swift_retain(v7);
    swift_retain(v8);
    v12 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = v10;
      v15 = v12;
      v16 = 1;
    }
    else
    {
      v17 = *v11;
      *v10 = *v11;
      swift_retain(v17);
      v14 = v10;
      v15 = v12;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_1000F95E8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*a1);
  swift_release(a1[1]);
  swift_release(a1[4]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 48));
  v5 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for Font.Context(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t *sub_1000F9670(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  v7 = a2[4];
  a1[2] = a2[2];
  a1[3] = v6;
  a1[4] = v7;
  v8 = *(int *)(a3 + 48);
  v9 = (uint64_t *)((char *)a1 + v8);
  v10 = (uint64_t *)((char *)a2 + v8);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v7);
  v11 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  return a1;
}

uint64_t *sub_1000F9740(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[2] = a2[2];
  v10 = a2[4];
  v11 = a1[4];
  a1[3] = a2[3];
  a1[4] = v10;
  swift_retain(v10);
  swift_release(v11);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 48);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100016904((uint64_t)a1 + v12, &qword_1001BF0C8);
    v15 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v18 = *v14;
      *v13 = *v14;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
  }
  return a1;
}

uint64_t sub_1000F984C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 48);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for Font.Context(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_1000F9904(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  a1[2] = a2[2];
  v8 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  swift_release(v8);
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 48);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    sub_100016904((uint64_t)a1 + v9, &qword_1001BF0C8);
    v12 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for Font.Context(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000F99FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F9A08);
}

void sub_1000F9A08(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_100044448(*a1);
    sub_1000443A4();
  }
  else
  {
    v6 = sub_100005D40(&qword_1001BF0D0);
    sub_100016B50((uint64_t)a1 + *(int *)(a3 + 48), a2, v6);
  }
}

uint64_t sub_1000F9A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F9A70);
}

void sub_1000F9A70()
{
  int v0;
  _QWORD *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100067508();
  if (v2)
  {
    *v1 = (v0 - 1);
    sub_1000443A4();
  }
  else
  {
    sub_100005D40(&qword_1001BF0D0);
    sub_1000A75F8();
    sub_100016B44(v3, v4, v5, v6);
  }
}

uint64_t type metadata accessor for Column(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F9D34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Column);
}

void sub_1000F9ACC()
{
  sub_100016A54(&qword_1001C4428, &qword_1001C4370);
}

void sub_1000F9AF8()
{
  sub_100016A54(&qword_1001C4430, &qword_1001C4380);
}

void sub_1000F9B24()
{
  sub_100016A54(&qword_1001C4438, &qword_1001C4390);
}

void sub_1000F9B50()
{
  sub_100016A54(&qword_1001C4440, qword_1001C43A0);
}

uint64_t sub_1000F9B7C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1001A045C, 1);
}

uint64_t sub_1000F9BB0@<X0>(uint64_t a1@<X3>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_1000F5B98(*(_QWORD **)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_1000F9BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for Column(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8));
  swift_release(*(_QWORD *)(v4 + v8 + 8));
  swift_release(*(_QWORD *)(v4 + v8 + 32));
  v10 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 48));
  v11 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for Font.Context(0);
    sub_100016A94(v12);
  }
  else
  {
    swift_release(*v10);
  }
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_1000F9C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Column(0, v6, v7, a2) - 8) + 80);
  return sub_1000F5E6C(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_1000F9CD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C4450;
  if (!qword_1001C4450)
  {
    v1 = sub_100005DC4(&qword_1001C4448);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001C4450);
  }
  return result;
}

uint64_t sub_1000F9D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_1000F9D60(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  _QWORD v15[5];

  v1 = *a1;
  v2 = sub_100005DC4(&qword_1001C1AD8);
  v3 = type metadata accessor for UUID(255);
  v4 = type metadata accessor for ModifiedContent(255, v1, &type metadata for _FlexFrameLayout);
  v5 = sub_100005DC4(&qword_1001C4448);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v4, v5, 0, 0);
  v7 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  sub_100016A54(&qword_1001C3FA8, &qword_1001C1AD8);
  v9 = v8;
  sub_100016878(&qword_1001BF760, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  v15[0] = v2;
  v15[1] = v3;
  v15[2] = v7;
  v15[3] = v9;
  v15[4] = v10;
  v11 = type metadata accessor for ForEach(255, v15);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v11);
  v13 = type metadata accessor for VStack(255, v11, WitnessTable);
  return swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v13);
}

uint64_t sub_1000F9EB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + a1);
  *(_QWORD *)(v1 + a1) = v4;
  *(_WORD *)(v1 + v3[6]) = *(_WORD *)(v2 + v3[6]);
  *(_QWORD *)(v1 + v3[7]) = *(_QWORD *)(v2 + v3[7]);
  *(_BYTE *)(v1 + v3[8]) = *(_BYTE *)(v2 + v3[8]);
  *(_BYTE *)(v1 + v3[9]) = *(_BYTE *)(v2 + v3[9]);
  *(_BYTE *)(v1 + v3[10]) = *(_BYTE *)(v2 + v3[10]);
  *(_QWORD *)(v1 + v3[11]) = *(_QWORD *)(v2 + v3[11]);
  *(_BYTE *)(v1 + v3[12]) = *(_BYTE *)(v2 + v3[12]);
  *(_BYTE *)(v1 + v3[13]) = *(_BYTE *)(v2 + v3[13]);
  *(_BYTE *)(v1 + v3[14]) = *(_BYTE *)(v2 + v3[14]);
  *(_BYTE *)(v1 + v3[15]) = *(_BYTE *)(v2 + v3[15]);
  *(_QWORD *)(v1 + v3[16]) = *(_QWORD *)(v2 + v3[16]);
  *(_QWORD *)(v1 + v3[17]) = *(_QWORD *)(v2 + v3[17]);
  *(_QWORD *)(v1 + v3[18]) = *(_QWORD *)(v2 + v3[18]);
  *(_QWORD *)(v1 + v3[19]) = *(_QWORD *)(v2 + v3[19]);
  *(_QWORD *)(v1 + v3[20]) = *(_QWORD *)(v2 + v3[20]);
  *(_QWORD *)(v1 + v3[21]) = *(_QWORD *)(v2 + v3[21]);
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_1000F9F90(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

void sub_1000F9F9C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;

  *(_QWORD *)(v0 + v2[7]) = *(_QWORD *)(v1 + v2[7]);
  *(_BYTE *)(v0 + v2[8]) = *(_BYTE *)(v1 + v2[8]);
  *(_BYTE *)(v0 + v2[9]) = *(_BYTE *)(v1 + v2[9]);
  *(_BYTE *)(v0 + v2[10]) = *(_BYTE *)(v1 + v2[10]);
  *(_QWORD *)(v0 + v2[11]) = *(_QWORD *)(v1 + v2[11]);
  *(_BYTE *)(v0 + v2[12]) = *(_BYTE *)(v1 + v2[12]);
  *(_BYTE *)(v0 + v2[13]) = *(_BYTE *)(v1 + v2[13]);
  *(_BYTE *)(v0 + v2[14]) = *(_BYTE *)(v1 + v2[14]);
  *(_BYTE *)(v0 + v2[15]) = *(_BYTE *)(v1 + v2[15]);
  *(_QWORD *)(v0 + v2[16]) = *(_QWORD *)(v1 + v2[16]);
}

uint64_t sub_1000FA01C(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 0, 1, v1);
}

uint64_t sub_1000FA02C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v1, v3);
}

uint64_t sub_1000FA03C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v3, v1);
}

void *sub_1000FA04C(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

void *sub_1000FA060(uint64_t a1)
{
  const void *v1;
  void *v2;

  return memcpy(v2, v1, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

uint64_t sub_1000FA074()
{
  return type metadata accessor for WidgetFamily(0);
}

uint64_t sub_1000FA098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v0 + *(int *)(v1 + 92), 1, v2);
}

uint64_t sub_1000FA0B0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

double sub_1000FA0C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v3 = *(int *)(v2 + 80);
  result = *(double *)(v1 + v3);
  *(double *)(v0 + v3) = result;
  *(_QWORD *)(v0 + *(int *)(v2 + 84)) = *(_QWORD *)(v1 + *(int *)(v2 + 84));
  return result;
}

void sub_1000FA0EC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + a1) = *(_QWORD *)(v2 + a1);
}

uint64_t sub_1000FA138(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(a1 + 20)));
}

uint64_t sub_1000FA144(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(a1 + 20)));
}

uint64_t sub_1000FA154@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + a1);
  *(_QWORD *)(v1 + a1) = *(_QWORD *)(v2 + a1);
  return swift_release(v3);
}

uint64_t sub_1000FA164@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + a1);
  *(_QWORD *)(v1 + a1) = v3;
  return swift_retain(v3);
}

void sub_1000FA174(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + a1) = *(_BYTE *)(v2 + a1);
}

uint64_t sub_1000FA180()
{
  return type metadata accessor for Text.Measurements(0);
}

uint64_t sub_1000FA188()
{
  return 0;
}

uint64_t sub_1000FA1B4()
{
  uint64_t v0;

  return v0;
}

void sub_1000FA1E8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + *(int *)(v2 + 20) + 8) = (v0 - 1);
}

uint64_t sub_1000FA1FC(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_1000FA208(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x80000001001890E0;
    if (a2 == 0x80000001001890E0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001890E0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69)
  {
    v7 = 0xEB000000006E6F69;
    goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7470697263736564, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100189100)
  {
    v8 = 0x8000000100189100;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100189100, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100189120)
  {
    swift_bridgeObjectRelease(0x8000000100189120);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100189120, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1000FA3C0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000FA3F8 + 4 * byte_100180900[a1]))(0xD000000000000011, 0x80000001001890E0);
}

uint64_t sub_1000FA3F8()
{
  return 0x7470697263736564;
}

uint64_t sub_1000FA418(uint64_t a1)
{
  return a1 + 2;
}

void sub_1000FA440(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[3];
  char v29;

  v3 = v1;
  v5 = sub_100005D40(&qword_1001C4470);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002325C();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_100022330(a1, v10);
  v12 = sub_1000FA9B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RainInlineContentViewModel.CodingKeys, &type metadata for RainInlineContentViewModel.CodingKeys, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  v29 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v29, v5);
  if (!v2)
  {
    v15 = type metadata accessor for RainInlineContentViewModel(0);
    v28[2] = 1;
    type metadata accessor for AttributedString(0);
    sub_1000FAA70(&qword_1001C4478, (uint64_t)&protocol conformance descriptor for AttributedString);
    sub_1000FB4F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v17, v18, v19);
    v28[1] = 2;
    sub_1000FB4F0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, v21, v22, v23, v24);
    v25 = (uint64_t *)((char *)v3 + *(int *)(v15 + 28));
    v26 = *v25;
    v27 = v25[1];
    v28[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v27, v28, v5);
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  sub_100023114();
}

void sub_1000FA5C0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v3 = sub_100005D40(&qword_1001BF0B8);
  __chkstk_darwin(v3);
  sub_10002325C();
  v25 = v5 - v4;
  v6 = type metadata accessor for AttributedString(0);
  v26 = *(_QWORD *)(v6 - 8);
  v27 = v6;
  __chkstk_darwin(v6);
  sub_10002325C();
  v9 = v8 - v7;
  v28 = sub_100005D40(&qword_1001C4458);
  __chkstk_darwin(v28);
  sub_10002325C();
  v10 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  __chkstk_darwin(v10);
  sub_10002325C();
  v13 = (char *)(v12 - v11);
  v14 = a1[3];
  v15 = a1[4];
  sub_100022330(a1, v14);
  v16 = sub_1000FA9B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RainInlineContentViewModel.CodingKeys, &type metadata for RainInlineContentViewModel.CodingKeys, v16, v14, v15);
  if (v29)
  {
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
  }
  else
  {
    v33 = 0;
    v17 = (uint64_t)v13;
    *(_QWORD *)v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v28);
    *((_QWORD *)v13 + 1) = v18;
    v32 = 1;
    v23 = sub_1000FAA70(&qword_1001C4468, (uint64_t)&protocol conformance descriptor for AttributedString);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v27, &v32, v28, v27);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(&v13[v10[5]], v9, v27);
    v31 = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, &v31, v28, v27, v23);
    sub_1000DFF64(v25, (uint64_t)&v13[v10[6]]);
    v30 = 3;
    v19 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v28);
    v21 = v20;
    sub_1000FB4E0();
    v22 = (uint64_t *)(v17 + v10[7]);
    *v22 = v19;
    v22[1] = v21;
    sub_1000FAA2C(v17, a2);
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
    sub_1000E1258(v17);
  }
  sub_100023114();
}

uint64_t sub_1000FA8D4()
{
  unsigned __int8 *v0;

  return sub_1000FA3C0(*v0);
}

uint64_t sub_1000FA8DC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000FA208(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000FA900(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000FA9B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000FA928(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000FA9B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000FA950(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000FA5C0(a1, a2);
}

void sub_1000FA964(_QWORD *a1)
{
  sub_1000FA440(a1);
}

uint64_t type metadata accessor for RainInlineContentViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C44D8;
  if (!qword_1001C44D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RainInlineContentViewModel);
  return result;
}

unint64_t sub_1000FA9B0()
{
  unint64_t result;

  result = qword_1001C4460;
  if (!qword_1001C4460)
  {
    result = swift_getWitnessTable(&unk_100180A78, &type metadata for RainInlineContentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4460);
  }
  return result;
}

uint64_t sub_1000FA9EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001BF0B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000FAA2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RainInlineContentViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FAA70(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AttributedString(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RainInlineContentViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000FAAFC + 4 * byte_100180909[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000FAB30 + 4 * byte_100180904[v4]))();
}

uint64_t sub_1000FAB30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FAB38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FAB40);
  return result;
}

uint64_t sub_1000FAB4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FAB54);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000FAB58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FAB60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RainInlineContentViewModel.CodingKeys()
{
  return &type metadata for RainInlineContentViewModel.CodingKeys;
}

uint64_t *sub_1000FAB7C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for AttributedString(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v13, 1, v11))
    {
      v16 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
    }
    v18 = a3[7];
    v19 = (uint64_t *)((char *)v4 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain(v21);
  }
  return v4;
}

double sub_1000FACA8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for AttributedString(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[6];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v7, 1, v5))
    v6(v7, v5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8)).n128_u64[0];
  return result;
}

_QWORD *sub_1000FAD3C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v12, 1, v10))
  {
    v15 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v13, 0, 1, v10);
  }
  v16 = a3[7];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  return a1;
}

_QWORD *sub_1000FAE3C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for AttributedString(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 24);
  v13(v9, v10, v11);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a1 + v14, 1, v11);
  v18 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v11);
  if (!v17)
  {
    if (!v18)
    {
      v13(v15, v16, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v16, v11);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v15, 0, 1, v11);
LABEL_7:
  v20 = a3[7];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  *v21 = *v22;
  v23 = v22[1];
  v24 = v21[1];
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  return a1;
}

_OWORD *sub_1000FAFAC(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v11, 1, v9))
  {
    v14 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *sub_1000FB098(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for AttributedString(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a1 + v14, 1, v11);
  v18 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v11);
  if (!v17)
  {
    if (!v18)
    {
      v13(v15, v16, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v16, v11);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v15, 0, 1, v11);
LABEL_7:
  v20 = a3[7];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  return a1;
}

uint64_t sub_1000FB1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FB1F4);
}

uint64_t sub_1000FB1F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v6 = sub_1000FB508();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = a3[5];
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v4 + v8, v3, v7);
  }
  v9 = sub_100005D40(&qword_1001BF0B8);
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v9;
    v8 = a3[6];
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v4 + v8, v3, v7);
  }
  v11 = *(_QWORD *)(v4 + a3[7] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000FB290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FB29C);
}

uint64_t sub_1000FB29C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = sub_1000FB508();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a4[5];
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v5 + v10, v4, v4, v9);
  }
  result = sub_100005D40(&qword_1001BF0B8);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = a4[6];
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v5 + v10, v4, v4, v9);
  }
  *(_QWORD *)(v5 + a4[7] + 8) = (v4 - 1);
  return result;
}

void sub_1000FB334(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_100180990;
  v2 = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000FB3CC(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1001809A8;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

void sub_1000FB3CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001C44E8)
  {
    v2 = type metadata accessor for AttributedString(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001C44E8);
  }
}

unint64_t sub_1000FB424()
{
  unint64_t result;

  result = qword_1001C4520;
  if (!qword_1001C4520)
  {
    result = swift_getWitnessTable(&unk_100180A50, &type metadata for RainInlineContentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4520);
  }
  return result;
}

unint64_t sub_1000FB464()
{
  unint64_t result;

  result = qword_1001C4528;
  if (!qword_1001C4528)
  {
    result = swift_getWitnessTable(&unk_1001809C0, &type metadata for RainInlineContentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4528);
  }
  return result;
}

unint64_t sub_1000FB4A4()
{
  unint64_t result;

  result = qword_1001C4530;
  if (!qword_1001C4530)
  {
    result = swift_getWitnessTable(&unk_1001809E8, &type metadata for RainInlineContentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4530);
  }
  return result;
}

uint64_t sub_1000FB4E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 96), v1);
}

uint64_t sub_1000FB508()
{
  return type metadata accessor for AttributedString(0);
}

uint64_t sub_1000FB518@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v29;

  v3 = type metadata accessor for AggregateWeatherViewModel(0);
  sub_100029068();
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WeatherDataViewModel(0);
  sub_100029068();
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v29 - v12;
  v14 = type metadata accessor for ForecastEntry.Model(0);
  sub_100029068();
  __chkstk_darwin(v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ForecastEntry(0);
  sub_1000FB81C(v1 + *(int *)(v18 + 28), (uint64_t)v17, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v17, v14) == 1)
  {
    sub_1000FB84C((uint64_t)v17, (uint64_t)v13, type metadata accessor for WeatherDataViewModel);
    sub_1000FB81C((uint64_t)v13, (uint64_t)v11, type metadata accessor for WeatherDataViewModel);
    if (swift_getEnumCaseMultiPayload(v11, v7))
    {
      sub_10004BA10((uint64_t)v11);
      if (qword_1001BEE98 != -1)
        swift_once(&qword_1001BEE98, sub_100097BD0);
      v19 = type metadata accessor for Logger(0);
      sub_100025184(v19, (uint64_t)qword_1001D9FF0);
      v20 = Logger.logObject.getter();
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)sub_1000290AC();
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Expected aggregate weather but got instant or sunriseSunset", v22, 2u);
        sub_10002534C((uint64_t)v22);
      }

      sub_10004BA10((uint64_t)v13);
      v23 = 1;
    }
    else
    {
      sub_1000FB84C((uint64_t)v11, (uint64_t)v6, type metadata accessor for AggregateWeatherViewModel);
      if (qword_1001BEE98 != -1)
        swift_once(&qword_1001BEE98, sub_100097BD0);
      v24 = type metadata accessor for Logger(0);
      sub_100025184(v24, (uint64_t)qword_1001D9FF0);
      v25 = Logger.logObject.getter();
      v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)sub_1000290AC();
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Making AdaptiveConditions complication view model entry from aggregate weather", v27, 2u);
        sub_10002534C((uint64_t)v27);
      }

      sub_10004BA10((uint64_t)v13);
      sub_1000FB84C((uint64_t)v6, a1, type metadata accessor for AggregateWeatherViewModel);
      v23 = 0;
    }
  }
  else if (*v17)
  {
    v23 = 1;
  }
  else
  {
    v23 = 2;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, v23, 2, v3);
}

uint64_t sub_1000FB81C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  v4 = sub_100016C68(a1, a2, a3);
  sub_100016B28(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16));
  return v3;
}

uint64_t sub_1000FB84C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  v4 = sub_100016C68(a1, a2, a3);
  sub_100016B28(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  return v3;
}

_QWORD *sub_1000FB87C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  NSObject *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  void *v81;
  uint8_t *v82;
  unint64_t v83;
  id v84;
  char *v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t (*v108)(uint64_t, _QWORD);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  Swift::Bool v115;
  Swift::String_optional v116;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v119;
  int *v120;
  Swift::String v121;
  __n128 v122;
  char v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t (*v129)(char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  Swift::Double v136;
  Swift::String_optional v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(uint64_t, _QWORD);
  uint64_t v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  double v154;
  void (*v155)(uint64_t, uint64_t, uint64_t);
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t);
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  NSObject *v167;
  os_log_type_t v168;
  uint8_t *v169;
  uint64_t (*v170)(uint64_t, _QWORD);
  _QWORD v172[4];
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t (*v178)(char *);
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  int *v183;
  char *v184;
  uint64_t v185;
  int *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  void (*v199)(char *, uint64_t);
  id v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD v206[5];
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;

  v201 = a2;
  v176 = a1;
  v2 = type metadata accessor for TemperatureScaleConfiguration(0);
  sub_10002886C(v2, (uint64_t)&v224);
  v195 = v3;
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_1000230E0();
  v194 = v5;
  v6 = sub_100093378();
  v7 = type metadata accessor for AppConfiguration(v6);
  sub_10002886C(v7, (uint64_t)&v221);
  v193 = v8;
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_1000230E0();
  v192 = v10;
  v11 = sub_100005D40(&qword_1001BF090);
  sub_10002886C(v11, (uint64_t)&v218);
  v219 = v12;
  sub_1000230F4();
  __chkstk_darwin(v13);
  sub_100023150();
  v190 = v14;
  sub_100023164();
  __chkstk_darwin(v15);
  v189 = (char *)v172 - v16;
  sub_100023164();
  __chkstk_darwin(v17);
  sub_100023434();
  v218 = v18;
  v19 = sub_100093378();
  v20 = type metadata accessor for UUID(v19);
  sub_10002886C(v20, (uint64_t)&v215);
  v187 = v21;
  sub_1000230F4();
  __chkstk_darwin(v22);
  sub_1000230E0();
  v217 = v23;
  v24 = sub_100093378();
  v25 = type metadata accessor for DailyForecastViewModel(v24);
  sub_10002886C(v25, (uint64_t)&v213);
  v185 = v26;
  sub_1000230F4();
  v28 = __chkstk_darwin(v27);
  v30 = (char *)v172 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)v172 - v31;
  v33 = type metadata accessor for ConditionViewModel(0);
  sub_10002886C(v33, (uint64_t)&v210);
  sub_1000230F4();
  __chkstk_darwin(v34);
  sub_100023150();
  v182 = v35;
  sub_100023164();
  __chkstk_darwin(v36);
  sub_100023434();
  v216 = v37;
  v38 = sub_100093378();
  v215 = type metadata accessor for Precipitation(v38);
  v223 = *(_QWORD *)(v215 - 8);
  sub_1000230F4();
  __chkstk_darwin(v39);
  sub_100023150();
  v214 = v40;
  sub_100023164();
  __chkstk_darwin(v41);
  sub_100023434();
  v222 = v42;
  v43 = sub_100093378();
  v44 = type metadata accessor for WeatherCondition(v43);
  v212 = *(_QWORD *)(v44 - 8);
  v213 = v44;
  sub_1000230F4();
  __chkstk_darwin(v45);
  sub_1000230E0();
  v211 = v46;
  v47 = sub_100093378();
  v48 = type metadata accessor for CurrentWeather(v47);
  sub_10002886C(v48, (uint64_t)v206);
  v175 = v49;
  sub_1000230F4();
  __chkstk_darwin(v50);
  sub_1000230E0();
  v174 = v51;
  v52 = sub_100093378();
  v53 = type metadata accessor for DayWeather(v52);
  v198 = *(_QWORD *)(v53 - 8);
  sub_1000230F4();
  __chkstk_darwin(v54);
  v56 = (char *)v172 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = type metadata accessor for Date(0);
  v221 = *(_QWORD *)(v224 - 8);
  sub_1000230F4();
  v58 = __chkstk_darwin(v57);
  v60 = (char *)v172 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  v220 = (char *)v172 - v61;
  sub_100023164();
  __chkstk_darwin(v62);
  sub_100023434();
  v202 = v63;
  sub_100005D40(&qword_1001BF9D0);
  sub_1000230F4();
  __chkstk_darwin(v64);
  v66 = (char *)v172 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for Calendar(0);
  sub_10002886C(v67, (uint64_t)&v202);
  v172[2] = v68;
  sub_1000230F4();
  __chkstk_darwin(v69);
  sub_1000230E0();
  v173 = v70;
  v71 = sub_100093378();
  v72 = type metadata accessor for UnitManager(v71);
  v73 = static UnitManager.standard.getter(v72);
  v74 = (void *)UnitManager.temperature.getter();
  swift_release(v73);
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v75 = type metadata accessor for Logger(0);
  v76 = sub_100025184(v75, (uint64_t)qword_1001D9FF0);
  v77 = v74;
  v172[1] = v76;
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.default.getter(v78);
  v80 = os_log_type_enabled(v78, v79);
  v184 = v30;
  v200 = v77;
  if (v80)
  {
    v81 = v77;
    v82 = (uint8_t *)sub_100025358(12);
    v208 = sub_100025358(32);
    v225 = (uint64_t)v77;
    v226 = v208;
    v209 = v66;
    *(_DWORD *)v82 = 136446210;
    v207 = (uint64_t)(v82 + 4);
    v83 = sub_10001EB28();
    v84 = v81;
    v85 = v60;
    v86 = v84;
    v87 = String.init<A>(reflecting:)(&v225, v83);
    v89 = v88;
    v225 = sub_10016EC84(v87, v88, &v226);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226, v207);

    v60 = v85;
    swift_bridgeObjectRelease(v89);
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Building daily forecast model. - unit: %{public}s", v82, 0xCu);
    v90 = v208;
    swift_arrayDestroy(v208, 1);
    sub_10002534C(v90);
    sub_10002534C((uint64_t)v82);

  }
  else
  {

  }
  v91 = v173;
  v92 = v201;
  v93 = static Calendar.currentCalendar(with:)(v201);
  v94 = WeatherDataModel.dailyForecast.getter(v93);
  __chkstk_darwin(v94);
  v172[-2] = v91;
  v95 = sub_1001055F0((uint64_t (*)())sub_1000FC624);
  v96 = v220;
  static Date.now.getter(v95);
  Date.startOfDay(timeZone:)(v92);
  v199 = *(void (**)(char *, uint64_t))(v221 + 8);
  v199(v96, v224);
  v97 = v95[2];
  if (v97)
  {
    sub_1000FC7A8();
    v172[0] = v95;
    v99 = (char *)v95 + v98;
    v179 = *(_QWORD *)(v100 + 72);
    v178 = *(uint64_t (**)(char *))(v100 + 16);
    v101 = _swiftEmptyArrayStorage;
    v181 = v32;
    v180 = v53;
    v210 = v60;
    v177 = v56;
    do
    {
      v209 = v101;
      v208 = (uint64_t)v99;
      v102 = v178(v56);
      DayWeather.date.getter(v102);
      v103 = static Date.== infix(_:_:)(v202, v60);
      v104 = v103;
      v203 = v97;
      if ((v103 & 1) != 0)
      {
        v105 = v174;
        v106 = WeatherDataModel.currentWeather.getter(v103);
        v107 = CurrentWeather.isDaylight.getter(v106);
        sub_1000FC7C8();
        sub_100028948(v105, v108);
      }
      else
      {
        v107 = 1;
      }
      v109 = v201;
      v207 = Date.dayOfWeek(timeZone:context:)(v201, 2);
      v206[4] = v110;
      v206[3] = Date.shortDayOfWeek(timeZone:isStandalone:)(v109, 1);
      v206[2] = v111;
      v112 = v104 & 1;
      v113 = v211;
      DayWeather.conditionOfRelevance(isToday:)(v112);
      v114 = DayWeather.precipitationOfRelevance(isToday:)(v222, v112);
      v115 = v107 & 1;
      v116 = WeatherCondition.conditionIconName(isDaytime:)(v115);
      if (v116.value._object)
        countAndFlagsBits = v116.value._countAndFlagsBits;
      else
        countAndFlagsBits = 0x6E61636972727568;
      if (v116.value._object)
        object = v116.value._object;
      else
        object = (void *)0xE900000000000065;
      v119 = v216;
      UUID.init()(v116.value._countAndFlagsBits);
      v120 = v183;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v212 + 16))(v119 + v183[5], v113, v213);
      v121 = WeatherCondition.description(isDaylight:)(v115);
      v123 = WeatherCondition.isPrecipitation.getter(v122);
      v124 = WeatherCondition.iconHasRain.getter();
      v125 = (uint64_t *)(v119 + v120[6]);
      *v125 = countAndFlagsBits;
      v125[1] = (uint64_t)object;
      *(Swift::String *)(v119 + v120[7]) = v121;
      *(_BYTE *)(v119 + v120[8]) = v115;
      *(_BYTE *)(v119 + v120[9]) = v123 & 1;
      *(_BYTE *)(v119 + v120[10]) = v124 & 1;
      UUID.init()(v124);
      v126 = (*(uint64_t (**)(char *, char *, uint64_t))(v221 + 16))(v220, v210, v224);
      v127 = v189;
      v128 = v177;
      DayWeather.highTemperature.getter(v126);
      Measurement<>.converted(rounded:)(0);
      v129 = *(uint64_t (**)(char *, uint64_t))(v219 + 8);
      v130 = v191;
      v131 = v129(v127, v191);
      v132 = v190;
      DayWeather.lowTemperature.getter(v131);
      Measurement<>.converted(rounded:)(0);
      v129(v132, v130);
      v133 = v182;
      sub_10000F7C4(v119, v182, type metadata accessor for ConditionViewModel);
      v134 = v215;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v223 + 16))(v214, v222, v215);
      v135 = Double.roundedPrecipitationPercent.getter(v114);
      v136 = Double.roundedPrecipitationPercent.getter(v114);
      v137 = Precipitation.accessibilityDescription(with:)(v136);
      v206[1] = v137.value._countAndFlagsBits;
      v206[0] = v137.value._object;
      v205 = sub_100028958();
      v204 = v138;
      v140 = v197[3];
      v139 = v197[4];
      sub_100022330(v197, v140);
      v141 = v192;
      v142 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v140, v139);
      v143 = v194;
      AppConfiguration.temperatureScale.getter(v142);
      sub_1000FC7C8();
      v145 = sub_100028948(v141, v144);
      v146 = v186;
      v147 = (uint64_t)v181;
      DayWeather.sun.getter(v145);
      v148 = type metadata accessor for SunEvents(0);
      v149 = sub_1000FC784(v148);
      DayWeather.moon.getter(v149);
      v150 = type metadata accessor for MoonEvents(0);
      v151 = sub_1000FC784(v150);
      v152 = DayWeather.uvIndex.getter(v151);
      v153 = v128;
      v154 = DayWeather.humidity.getter(v152);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v187 + 32))(v147, v217, v188);
      (*(void (**)(uint64_t, char *, uint64_t))(v221 + 32))(v147 + v146[5], v220, v224);
      v155 = *(void (**)(uint64_t, uint64_t, uint64_t))(v219 + 32);
      v155(v147 + v146[6], v218, v130);
      v155(v147 + v146[7], (uint64_t)v127, v130);
      sub_100011868(v133, v147 + v146[8], type metadata accessor for ConditionViewModel);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v223 + 32))(v147 + v146[9], v214, v134);
      *(double *)(v147 + v146[10]) = v135;
      sub_1000FC7BC((_QWORD *)(v147 + v146[11]));
      sub_1000FC7BC((_QWORD *)(v147 + v146[12]));
      sub_1000FC7BC((_QWORD *)(v147 + v146[13]));
      sub_1000FC7BC((_QWORD *)(v147 + v146[14]));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v195 + 32))(v147 + v146[15], v143, v196);
      *(double *)(v147 + v146[19]) = v154;
      v156 = (uint64_t)v184;
      sub_10000F7C4(v147, (uint64_t)v184, type metadata accessor for DailyForecastViewModel);
      v101 = v209;
      if ((swift_isUniquelyReferenced_nonNull_native(v209) & 1) == 0)
      {
        sub_1000FC7D4(0, v101[2] + 1);
        v101 = v164;
      }
      v158 = v101[2];
      v157 = v101[3];
      v159 = v180;
      v56 = v153;
      v60 = v210;
      if (v158 >= v157 >> 1)
      {
        sub_1000FC7D4(v157 > 1, v158 + 1);
        v101 = v165;
      }
      v160 = v203;
      v101[2] = v158 + 1;
      sub_1000FC7A8();
      sub_100011868(v156, (uint64_t)v101 + v161 + *(_QWORD *)(v162 + 72) * v158, type metadata accessor for DailyForecastViewModel);
      sub_100029030(v147, type metadata accessor for DailyForecastViewModel);
      sub_100029030(v216, type metadata accessor for ConditionViewModel);
      (*(void (**)(uint64_t, uint64_t))(v223 + 8))(v222, v215);
      (*(void (**)(uint64_t, uint64_t))(v212 + 8))(v211, v213);
      sub_1000FC798((uint64_t)v60);
      sub_1000FC7C8();
      v163(v56, v159);
      v99 = (char *)(v208 + v179);
      v97 = v160 - 1;
    }
    while (v97);
    swift_bridgeObjectRelease(v172[0]);
  }
  else
  {
    swift_bridgeObjectRelease(v95);
    v101 = _swiftEmptyArrayStorage;
  }
  v167 = Logger.logObject.getter(v166);
  v168 = static os_log_type_t.default.getter(v167);
  if (os_log_type_enabled(v167, v168))
  {
    v169 = (uint8_t *)sub_100025358(2);
    *(_WORD *)v169 = 0;
    _os_log_impl((void *)&_mh_execute_header, v167, v168, "Built daily forecast model", v169, 2u);
    sub_10002534C((uint64_t)v169);
  }

  sub_1000FC798(v202);
  sub_1000FC7C8();
  sub_100028948(v173, v170);
  return v101;
}

BOOL sub_1000FC580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v7;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DayWeather.date.getter(v2);
  v5 = Calendar.isDateInYesterday(_:)(v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return (v5 & 1) == 0;
}

BOOL sub_1000FC624()
{
  return sub_1000FC580();
}

uint64_t initializeWithCopy for DailyForecastViewModelFactory(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

_QWORD *assignWithCopy for DailyForecastViewModelFactory(_QWORD *a1, _QWORD *a2)
{
  sub_1000A777C(a1, a2);
  return a1;
}

__n128 initializeWithTake for DailyForecastViewModelFactory(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DailyForecastViewModelFactory(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DailyForecastViewModelFactory(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DailyForecastViewModelFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DailyForecastViewModelFactory()
{
  return &type metadata for DailyForecastViewModelFactory;
}

uint64_t sub_1000FC784(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, a1);
}

uint64_t sub_1000FC798(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 368))(a1, *(_QWORD *)(v1 - 136));
}

void sub_1000FC7BC(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 256);
  *a1 = v2;
  a1[1] = v3;
}

void sub_1000FC7D4(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_10006FBF0(a1, a2, 1, v2);
}

_QWORD *sub_1000FC7E0(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  int *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  char *v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, char *, uint64_t);
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(char *, char *, uint64_t);
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  void (*v191)(char *, char *);
  uint64_t v192;
  int *v193;
  char *v194;
  void (*v195)(char *, char *);
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(char *, char *, uint64_t);
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v204;
  void (*v205)(char *, char *, uint64_t);
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  int *v210;
  _QWORD *v211;
  char *v212;
  uint64_t v213;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v28 = v27 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v27);
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v205 = v13;
    v208 = v12;
    v13(&a1[v8[6]], &a2[v8[6]], v12);
    v14 = v8[7];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = sub_100005D40(&qword_1001BF090);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v18(&a1[v8[8]], &a2[v8[8]], v17);
    v19 = v8[9];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = v8[10];
    v24 = &a1[v23];
    v25 = &a2[v23];
    swift_bridgeObjectRetain(v22);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v17))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v18(v24, v25, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v17);
    }
    v29 = v8[11];
    v30 = &a1[v29];
    v31 = &a2[v29];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v29], 1, v17))
    {
      v32 = sub_100005D40(&qword_1001BF098);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v18(v30, v31, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v17);
    }
    v33 = v8[12];
    v34 = &a1[v33];
    v35 = &a2[v33];
    v199 = v7;
    v201 = v6;
    v7(&a1[v33], &a2[v33], v6);
    v36 = (int *)type metadata accessor for ConditionViewModel(0);
    v37 = v36[5];
    v38 = &v34[v37];
    v212 = a2;
    v39 = &v35[v37];
    v40 = type metadata accessor for WeatherCondition(0);
    v191 = *(void (**)(char *, char *))(*(_QWORD *)(v40 - 8) + 16);
    v192 = v40;
    v191(v38, v39);
    v41 = v36[6];
    v42 = &v34[v41];
    v43 = &v35[v41];
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = v36[7];
    v46 = &v34[v45];
    v47 = &v35[v45];
    v48 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    v34[v36[8]] = v35[v36[8]];
    v34[v36[9]] = v35[v36[9]];
    v193 = v36;
    v34[v36[10]] = v35[v36[10]];
    *(_QWORD *)&a1[v8[13]] = *(_QWORD *)&a2[v8[13]];
    v49 = v8[14];
    v50 = &a1[v49];
    v51 = &a2[v49];
    v52 = type metadata accessor for CloudAltitudeKind(0);
    v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v48);
    v53(v50, v51, v52);
    v54 = v8[15];
    v55 = &a1[v54];
    v56 = &v212[v54];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v212[v54], 1, v208))
    {
      v57 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v205(v55, v56, v208);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v55, 0, 1, v208);
    }
    v58 = v8[16];
    v59 = &a1[v58];
    v60 = &v212[v58];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v212[v58], 1, v208))
    {
      v61 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      v205(v59, v60, v208);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v208);
    }
    v62 = v8[17];
    v63 = &a1[v62];
    v64 = &v212[v62];
    v65 = type metadata accessor for UVIndex(0);
    v195 = *(void (**)(char *, char *))(*(_QWORD *)(v65 - 8) + 16);
    v197 = v65;
    v195(v63, v64);
    v66 = v8[18];
    v67 = &a1[v66];
    v68 = &v212[v66];
    v69 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
    *(_QWORD *)&a1[v8[19]] = *(_QWORD *)&v212[v8[19]];
    v70 = v8[20];
    v71 = &a1[v70];
    v72 = &v212[v70];
    v73 = *((_QWORD *)v72 + 1);
    if (v73)
    {
      *(_QWORD *)v71 = *(_QWORD *)v72;
      *((_QWORD *)v71 + 1) = v73;
      v74 = *((_QWORD *)v72 + 2);
      v75 = *((_QWORD *)v72 + 3);
      v76 = v72[32];
      swift_bridgeObjectRetain(v73);
      sub_100006E58(v74, v75, v76);
      *((_QWORD *)v71 + 2) = v74;
      *((_QWORD *)v71 + 3) = v75;
      v71[32] = v76;
    }
    else
    {
      v77 = *((_OWORD *)v72 + 1);
      *(_OWORD *)v71 = *(_OWORD *)v72;
      *((_OWORD *)v71 + 1) = v77;
      v71[32] = v72[32];
    }
    v78 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
    v79 = v78[5];
    v211 = a1;
    v80 = &a1[v79];
    v81 = &v212[v79];
    v199(&a1[v79], &v212[v79], v201);
    v82 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v205(&v80[v82[5]], &v81[v82[5]], v208);
    v18(&v80[v82[6]], &v81[v82[6]], v17);
    v18(&v80[v82[7]], &v81[v82[7]], v17);
    v83 = v82[8];
    v84 = &v80[v83];
    v85 = &v81[v83];
    v199(&v80[v83], &v81[v83], v201);
    ((void (*)(char *, char *, uint64_t))v191)(&v84[v193[5]], &v85[v193[5]], v192);
    v86 = v193[6];
    v87 = &v84[v86];
    v88 = &v85[v86];
    v89 = *((_QWORD *)v88 + 1);
    *(_QWORD *)v87 = *(_QWORD *)v88;
    *((_QWORD *)v87 + 1) = v89;
    v90 = v193[7];
    v91 = &v84[v90];
    v92 = &v85[v90];
    v93 = *((_QWORD *)v92 + 1);
    *(_QWORD *)v91 = *(_QWORD *)v92;
    *((_QWORD *)v91 + 1) = v93;
    v84[v193[8]] = v85[v193[8]];
    v84[v193[9]] = v85[v193[9]];
    v84[v193[10]] = v85[v193[10]];
    v94 = v82[9];
    v95 = &v80[v94];
    v96 = &v81[v94];
    v97 = type metadata accessor for Precipitation(0);
    v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v93);
    v98(v95, v96, v97);
    *(_QWORD *)&v80[v82[10]] = *(_QWORD *)&v81[v82[10]];
    v99 = v82[11];
    v100 = &v80[v99];
    v101 = &v81[v99];
    v102 = *((_QWORD *)v101 + 1);
    *(_QWORD *)v100 = *(_QWORD *)v101;
    *((_QWORD *)v100 + 1) = v102;
    v103 = v82[12];
    v104 = &v80[v103];
    v105 = &v81[v103];
    v106 = *((_QWORD *)v105 + 1);
    *(_QWORD *)v104 = *(_QWORD *)v105;
    *((_QWORD *)v104 + 1) = v106;
    v107 = v82[13];
    v108 = &v80[v107];
    v109 = &v81[v107];
    v110 = *((_QWORD *)v109 + 1);
    *(_QWORD *)v108 = *(_QWORD *)v109;
    *((_QWORD *)v108 + 1) = v110;
    v111 = v82[14];
    v112 = &v80[v111];
    v113 = &v81[v111];
    v114 = *((_QWORD *)v113 + 1);
    *(_QWORD *)v112 = *(_QWORD *)v113;
    *((_QWORD *)v112 + 1) = v114;
    v115 = v82[15];
    v206 = &v81[v115];
    v209 = &v80[v115];
    v116 = type metadata accessor for TemperatureScaleConfiguration(0);
    v117 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 16);
    swift_bridgeObjectRetain(v102);
    swift_bridgeObjectRetain(v106);
    swift_bridgeObjectRetain(v110);
    swift_bridgeObjectRetain(v114);
    v117(v209, v206, v116);
    v118 = v82[16];
    v119 = &v80[v118];
    v120 = &v81[v118];
    v121 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v120, 1, v121))
    {
      v122 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v119, v120, v121);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v119, 0, 1, v121);
    }
    v123 = v82[17];
    v124 = &v80[v123];
    v125 = &v81[v123];
    v126 = type metadata accessor for MoonEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v125, 1, v126))
    {
      v127 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v124, v125, v126);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v124, 0, 1, v126);
    }
    ((void (*)(char *, char *, uint64_t))v195)(&v80[v82[18]], &v81[v82[18]], v197);
    *(_QWORD *)&v80[v82[19]] = *(_QWORD *)&v81[v82[19]];
    v128 = v78[6];
    v129 = (_QWORD *)((char *)v211 + v128);
    v130 = v212;
    v131 = &v212[v128];
    v132 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    v210 = v132;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v131, 1, (uint64_t)v132))
    {
      v133 = sub_100005D40(&qword_1001BF0C0);
      memcpy(v129, v131, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    }
    else
    {
      v134 = *((_QWORD *)v131 + 1);
      *v129 = *(_QWORD *)v131;
      v129[1] = v134;
      v135 = v132[5];
      v136 = (char *)v129 + v135;
      v137 = &v131[v135];
      v138 = type metadata accessor for AttributedString(0);
      v139 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 16);
      swift_bridgeObjectRetain(v134);
      v139(v136, v137, v138);
      v140 = v132[6];
      v141 = (char *)v129 + v140;
      v142 = &v131[v140];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v131[v140], 1, v138))
      {
        v143 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
      }
      else
      {
        v139(v141, v142, v138);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v141, 0, 1, v138);
      }
      v144 = v132[7];
      v145 = (_QWORD *)((char *)v129 + v144);
      v146 = &v131[v144];
      v147 = *((_QWORD *)v146 + 1);
      *v145 = *(_QWORD *)v146;
      v145[1] = v147;
      swift_bridgeObjectRetain(v147);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v129, 0, 1, (uint64_t)v132);
      v130 = v212;
    }
    v148 = v78[7];
    v149 = (char *)v211 + v148;
    v150 = (uint64_t)v130 + v148;
    v151 = type metadata accessor for Location(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 16))(v149, v150, v151);
    v152 = v78[8];
    v153 = (_QWORD *)((char *)v211 + v152);
    v154 = (_QWORD *)((char *)v130 + v152);
    v213 = v154[1];
    *v153 = *v154;
    v153[1] = v213;
    *((_BYTE *)v211 + v78[9]) = *((_BYTE *)v130 + v78[9]);
    *((_BYTE *)v211 + v78[10]) = *((_BYTE *)v130 + v78[10]);
    v155 = v78[11];
    v202 = *(_QWORD *)((char *)v130 + v155);
    *(_QWORD *)((char *)v211 + v155) = v202;
    v156 = v78[12];
    v157 = (_QWORD *)((char *)v211 + v156);
    v158 = (_QWORD *)((char *)v130 + v156);
    v159 = v158[1];
    *v157 = *v158;
    v157[1] = v159;
    v160 = v78[13];
    v161 = *(_QWORD *)((char *)v130 + v160);
    *(_QWORD *)((char *)v211 + v160) = v161;
    v162 = v78[14];
    v163 = *(_QWORD *)((char *)v130 + v162);
    *(_QWORD *)((char *)v211 + v162) = v163;
    v164 = v78[15];
    v200 = *(_QWORD *)((char *)v130 + v164);
    *(_QWORD *)((char *)v211 + v164) = v200;
    v165 = v78[16];
    v207 = *(_QWORD *)((char *)v130 + v165);
    *(_QWORD *)((char *)v211 + v165) = v207;
    *((_BYTE *)v211 + v78[17]) = *((_BYTE *)v130 + v78[17]);
    v166 = v78[18];
    v196 = *(_QWORD *)((char *)v130 + v166);
    *(_QWORD *)((char *)v211 + v166) = v196;
    v167 = v78[19];
    v198 = *(_QWORD *)((char *)v130 + v167);
    *(_QWORD *)((char *)v211 + v167) = v198;
    *(_QWORD *)((char *)v211 + v78[20]) = *(_QWORD *)((char *)v130 + v78[20]);
    *((_BYTE *)v211 + v78[21]) = *((_BYTE *)v130 + v78[21]);
    *((_BYTE *)v211 + v78[22]) = *((_BYTE *)v130 + v78[22]);
    *((_BYTE *)v211 + v78[23]) = *((_BYTE *)v130 + v78[23]);
    *((_BYTE *)v211 + v78[24]) = *((_BYTE *)v130 + v78[24]);
    v168 = v78[25];
    v169 = (_QWORD *)((char *)v211 + v168);
    v170 = (_QWORD *)((char *)v130 + v168);
    v171 = v170[1];
    *v169 = *v170;
    v169[1] = v171;
    *((_BYTE *)v211 + v78[26]) = *((_BYTE *)v130 + v78[26]);
    *(_QWORD *)((char *)v211 + v78[27]) = *(_QWORD *)((char *)v130 + v78[27]);
    *(_QWORD *)((char *)v211 + v78[28]) = *(_QWORD *)((char *)v130 + v78[28]);
    v172 = *(int *)(a3 + 20);
    v173 = *(int *)(a3 + 24);
    v174 = (char *)v211 + v172;
    v175 = (uint64_t)v130 + v172;
    *(_QWORD *)v174 = *(_QWORD *)v175;
    *((_WORD *)v174 + 4) = *(_WORD *)(v175 + 8);
    v176 = (_QWORD *)((char *)v211 + v173);
    v177 = (_QWORD *)((char *)v130 + v173);
    v178 = v177[1];
    *v176 = *v177;
    v176[1] = v178;
    v179 = v210[5];
    v204 = (char *)v211 + v173 + v179;
    v194 = (char *)v177 + v179;
    v180 = type metadata accessor for AttributedString(0);
    v181 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v180 - 8) + 16);
    swift_bridgeObjectRetain(v213);
    swift_retain(v202);
    swift_bridgeObjectRetain(v159);
    swift_retain(v161);
    swift_retain(v163);
    swift_retain(v200);
    swift_retain(v207);
    swift_retain(v196);
    swift_retain(v198);
    swift_bridgeObjectRetain(v171);
    swift_bridgeObjectRetain(v178);
    v181(v204, v194, v180);
    v182 = v210[6];
    v183 = (char *)v176 + v182;
    v184 = (char *)v177 + v182;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v177 + v182, 1, v180))
    {
      v185 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
    }
    else
    {
      v181(v183, v184, v180);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v183, 0, 1, v180);
    }
    v186 = v210[7];
    v187 = (_QWORD *)((char *)v176 + v186);
    v188 = (_QWORD *)((char *)v177 + v186);
    v189 = v188[1];
    *v187 = *v188;
    v187[1] = v189;
    swift_bridgeObjectRetain(v189);
    return v211;
  }
  return (_QWORD *)v28;
}

double sub_1000FD378(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  double result;
  void (*v54)(uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;

  v3 = type metadata accessor for UUID(0);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(a1, v3);
  v5 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v6 = a1 + v5[5];
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + v5[6], v7);
  v9 = a1 + v5[7];
  v10 = sub_100005D40(&qword_1001BF090);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(a1 + v5[8], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[9] + 8));
  v12 = a1 + v5[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v12, 1, v10))
    v11(v12, v10);
  v13 = a1 + v5[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v13, 1, v10))
    v11(v13, v10);
  v14 = a1 + v5[12];
  v58 = v4;
  v59 = v3;
  v4(v14, v3);
  v15 = (int *)type metadata accessor for ConditionViewModel(0);
  v16 = v14 + v15[5];
  v17 = type metadata accessor for WeatherCondition(0);
  v54 = *(void (**)(uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v55 = v17;
  v54(v16);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[7] + 8));
  v18 = a1 + v5[14];
  v19 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = a1 + v5[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v20, 1, v7))
    v8(v20, v7);
  v21 = a1 + v5[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v21, 1, v7))
    v8(v21, v7);
  v22 = a1 + v5[17];
  v23 = type metadata accessor for UVIndex(0);
  v56 = *(void (**)(uint64_t))(*(_QWORD *)(v23 - 8) + 8);
  v57 = v23;
  v56(v22);
  v24 = a1 + v5[18];
  v25 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = a1 + v5[20];
  v27 = *(_QWORD *)(v26 + 8);
  if (v27)
  {
    swift_bridgeObjectRelease(v27);
    sub_100007458(*(_QWORD *)(v26 + 16), *(_QWORD *)(v26 + 24), *(_BYTE *)(v26 + 32));
  }
  v28 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v29 = a1 + v28[5];
  v58(v29, v59);
  v30 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v8(v29 + v30[5], v7);
  v11(v29 + v30[6], v10);
  v11(v29 + v30[7], v10);
  v31 = v29 + v30[8];
  v58(v31, v59);
  ((void (*)(uint64_t, uint64_t))v54)(v31 + v15[5], v55);
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v15[7] + 8));
  v32 = v29 + v30[9];
  v33 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[14] + 8));
  v34 = v29 + v30[15];
  v35 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
  v36 = v29 + v30[16];
  v37 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v36, 1, v37))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
  v38 = v29 + v30[17];
  v39 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, v39))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  ((void (*)(uint64_t, uint64_t))v56)(v29 + v30[18], v57);
  v40 = a1 + v28[6];
  v41 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v40, 1, (uint64_t)v41))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + 8));
    v42 = v40 + v41[5];
    v43 = type metadata accessor for AttributedString(0);
    v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8);
    v44(v42, v43);
    v45 = v40 + v41[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v45, 1, v43))
      v44(v45, v43);
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + v41[7] + 8));
  }
  v46 = a1 + v28[7];
  v47 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[8] + 8));
  swift_release(*(_QWORD *)(a1 + v28[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[12] + 8));
  swift_release(*(_QWORD *)(a1 + v28[13]));
  swift_release(*(_QWORD *)(a1 + v28[14]));
  swift_release(*(_QWORD *)(a1 + v28[15]));
  swift_release(*(_QWORD *)(a1 + v28[16]));
  swift_release(*(_QWORD *)(a1 + v28[18]));
  swift_release(*(_QWORD *)(a1 + v28[19]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[25] + 8));
  v48 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v48 + 8));
  v49 = v48 + v41[5];
  v50 = type metadata accessor for AttributedString(0);
  v51 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8);
  v51(v49, v50);
  v52 = v48 + v41[6];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v52, 1, v50))
    v51(v52, v50);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v48 + v41[7] + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000FD970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  void *v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  const void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t, char *, uint64_t);
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  void (*v188)(uint64_t, uint64_t);
  uint64_t v189;
  int *v190;
  char *v191;
  void (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(uint64_t, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v201;
  void (*v202)(void *, const void *, uint64_t);
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v202 = v12;
  v205 = v11;
  v12((void *)(a1 + v7[6]), (const void *)(a2 + v7[6]), v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  v18 = v7[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v7[10];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  swift_bridgeObjectRetain(v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[11];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v26, 1, v16))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v27, (uint64_t)v28, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v16);
  }
  v30 = v7[12];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v196 = v6;
  v198 = v5;
  v6(a1 + v30, a2 + v30, v5);
  v33 = (int *)type metadata accessor for ConditionViewModel(0);
  v34 = v33[5];
  v35 = v31 + v34;
  v209 = a2;
  v36 = v32 + v34;
  v37 = type metadata accessor for WeatherCondition(0);
  v188 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
  v189 = v37;
  v188(v35, v36);
  v38 = v33[6];
  v39 = (_QWORD *)(v31 + v38);
  v40 = (_QWORD *)(v32 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = v33[7];
  v43 = (_QWORD *)(v31 + v42);
  v44 = (_QWORD *)(v32 + v42);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  *(_BYTE *)(v31 + v33[8]) = *(_BYTE *)(v32 + v33[8]);
  *(_BYTE *)(v31 + v33[9]) = *(_BYTE *)(v32 + v33[9]);
  v190 = v33;
  *(_BYTE *)(v31 + v33[10]) = *(_BYTE *)(v32 + v33[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v46 = v7[14];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for CloudAltitudeKind(0);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  v50(v47, v48, v49);
  v51 = v7[15];
  v52 = (void *)(a1 + v51);
  v53 = (const void *)(v209 + v51);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v209 + v51, 1, v205))
  {
    v54 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    v202(v52, v53, v205);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v52, 0, 1, v205);
  }
  v55 = v7[16];
  v56 = (void *)(a1 + v55);
  v57 = (const void *)(v209 + v55);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v209 + v55, 1, v205))
  {
    v58 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v202(v56, v57, v205);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v205);
  }
  v59 = v7[17];
  v60 = a1 + v59;
  v61 = v209 + v59;
  v62 = type metadata accessor for UVIndex(0);
  v192 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
  v194 = v62;
  v192(v60, v61);
  v63 = v7[18];
  v64 = a1 + v63;
  v65 = v209 + v63;
  v66 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(v209 + v7[19]);
  v67 = v7[20];
  v68 = a1 + v67;
  v69 = v209 + v67;
  v70 = *(_QWORD *)(v69 + 8);
  if (v70)
  {
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *(_QWORD *)(v68 + 8) = v70;
    v71 = *(_QWORD *)(v69 + 16);
    v72 = *(_QWORD *)(v69 + 24);
    v73 = *(_BYTE *)(v69 + 32);
    swift_bridgeObjectRetain(v70);
    sub_100006E58(v71, v72, v73);
    *(_QWORD *)(v68 + 16) = v71;
    *(_QWORD *)(v68 + 24) = v72;
    *(_BYTE *)(v68 + 32) = v73;
  }
  else
  {
    v74 = *(_OWORD *)(v69 + 16);
    *(_OWORD *)v68 = *(_OWORD *)v69;
    *(_OWORD *)(v68 + 16) = v74;
    *(_BYTE *)(v68 + 32) = *(_BYTE *)(v69 + 32);
  }
  v75 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v76 = v75[5];
  v208 = a1;
  v77 = a1 + v76;
  v78 = v209 + v76;
  v196(a1 + v76, v209 + v76, v198);
  v79 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v202((void *)(v77 + v79[5]), (const void *)(v78 + v79[5]), v205);
  v17(v77 + v79[6], v78 + v79[6], v16);
  v17(v77 + v79[7], v78 + v79[7], v16);
  v80 = v79[8];
  v81 = v77 + v80;
  v82 = v78 + v80;
  v196(v77 + v80, v78 + v80, v198);
  ((void (*)(uint64_t, uint64_t, uint64_t))v188)(v81 + v190[5], v82 + v190[5], v189);
  v83 = v190[6];
  v84 = (_QWORD *)(v81 + v83);
  v85 = (_QWORD *)(v82 + v83);
  v86 = v85[1];
  *v84 = *v85;
  v84[1] = v86;
  v87 = v190[7];
  v88 = (_QWORD *)(v81 + v87);
  v89 = (_QWORD *)(v82 + v87);
  v90 = v89[1];
  *v88 = *v89;
  v88[1] = v90;
  *(_BYTE *)(v81 + v190[8]) = *(_BYTE *)(v82 + v190[8]);
  *(_BYTE *)(v81 + v190[9]) = *(_BYTE *)(v82 + v190[9]);
  *(_BYTE *)(v81 + v190[10]) = *(_BYTE *)(v82 + v190[10]);
  v91 = v79[9];
  v92 = v77 + v91;
  v93 = v78 + v91;
  v94 = type metadata accessor for Precipitation(0);
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 16);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v90);
  v95(v92, v93, v94);
  *(_QWORD *)(v77 + v79[10]) = *(_QWORD *)(v78 + v79[10]);
  v96 = v79[11];
  v97 = (_QWORD *)(v77 + v96);
  v98 = (_QWORD *)(v78 + v96);
  v99 = v98[1];
  *v97 = *v98;
  v97[1] = v99;
  v100 = v79[12];
  v101 = (_QWORD *)(v77 + v100);
  v102 = (_QWORD *)(v78 + v100);
  v103 = v102[1];
  *v101 = *v102;
  v101[1] = v103;
  v104 = v79[13];
  v105 = (_QWORD *)(v77 + v104);
  v106 = (_QWORD *)(v78 + v104);
  v107 = v106[1];
  *v105 = *v106;
  v105[1] = v107;
  v108 = v79[14];
  v109 = (_QWORD *)(v77 + v108);
  v110 = (_QWORD *)(v78 + v108);
  v111 = v110[1];
  *v109 = *v110;
  v109[1] = v111;
  v112 = v79[15];
  v203 = v78 + v112;
  v206 = v77 + v112;
  v113 = type metadata accessor for TemperatureScaleConfiguration(0);
  v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 16);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v111);
  v114(v206, v203, v113);
  v115 = v79[16];
  v116 = (void *)(v77 + v115);
  v117 = (const void *)(v78 + v115);
  v118 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v117, 1, v118))
  {
    v119 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v118 - 8) + 16))(v116, v117, v118);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v116, 0, 1, v118);
  }
  v120 = v79[17];
  v121 = (void *)(v77 + v120);
  v122 = (const void *)(v78 + v120);
  v123 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v122, 1, v123))
  {
    v124 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v123 - 8) + 16))(v121, v122, v123);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v121, 0, 1, v123);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v192)(v77 + v79[18], v78 + v79[18], v194);
  *(_QWORD *)(v77 + v79[19]) = *(_QWORD *)(v78 + v79[19]);
  v125 = v75[6];
  v126 = (_QWORD *)(v208 + v125);
  v127 = v209;
  v128 = (_QWORD *)(v209 + v125);
  v129 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v207 = v129;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128, 1, (uint64_t)v129))
  {
    v130 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v126, v128, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
  }
  else
  {
    v131 = v128[1];
    *v126 = *v128;
    v126[1] = v131;
    v132 = v129[5];
    v133 = (char *)v126 + v132;
    v134 = (char *)v128 + v132;
    v135 = type metadata accessor for AttributedString(0);
    v136 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16);
    swift_bridgeObjectRetain(v131);
    v136(v133, v134, v135);
    v137 = v129[6];
    v138 = (char *)v126 + v137;
    v139 = (char *)v128 + v137;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128 + v137, 1, v135))
    {
      v140 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
    }
    else
    {
      v136(v138, v139, v135);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v138, 0, 1, v135);
    }
    v141 = v129[7];
    v142 = (_QWORD *)((char *)v126 + v141);
    v143 = (_QWORD *)((char *)v128 + v141);
    v144 = v143[1];
    *v142 = *v143;
    v142[1] = v144;
    swift_bridgeObjectRetain(v144);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v126, 0, 1, (uint64_t)v129);
    v127 = v209;
  }
  v145 = v75[7];
  v146 = v208 + v145;
  v147 = v127 + v145;
  v148 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 16))(v146, v147, v148);
  v149 = v75[8];
  v150 = (_QWORD *)(v208 + v149);
  v151 = (_QWORD *)(v127 + v149);
  v210 = v151[1];
  *v150 = *v151;
  v150[1] = v210;
  *(_BYTE *)(v208 + v75[9]) = *(_BYTE *)(v127 + v75[9]);
  *(_BYTE *)(v208 + v75[10]) = *(_BYTE *)(v127 + v75[10]);
  v152 = v75[11];
  v199 = *(_QWORD *)(v127 + v152);
  *(_QWORD *)(v208 + v152) = v199;
  v153 = v75[12];
  v154 = (_QWORD *)(v208 + v153);
  v155 = (_QWORD *)(v127 + v153);
  v156 = v155[1];
  *v154 = *v155;
  v154[1] = v156;
  v157 = v75[13];
  v158 = *(_QWORD *)(v127 + v157);
  *(_QWORD *)(v208 + v157) = v158;
  v159 = v75[14];
  v160 = *(_QWORD *)(v127 + v159);
  *(_QWORD *)(v208 + v159) = v160;
  v161 = v75[15];
  v197 = *(_QWORD *)(v127 + v161);
  *(_QWORD *)(v208 + v161) = v197;
  v162 = v75[16];
  v204 = *(_QWORD *)(v127 + v162);
  *(_QWORD *)(v208 + v162) = v204;
  *(_BYTE *)(v208 + v75[17]) = *(_BYTE *)(v127 + v75[17]);
  v163 = v75[18];
  v193 = *(_QWORD *)(v127 + v163);
  *(_QWORD *)(v208 + v163) = v193;
  v164 = v75[19];
  v195 = *(_QWORD *)(v127 + v164);
  *(_QWORD *)(v208 + v164) = v195;
  *(_QWORD *)(v208 + v75[20]) = *(_QWORD *)(v127 + v75[20]);
  *(_BYTE *)(v208 + v75[21]) = *(_BYTE *)(v127 + v75[21]);
  *(_BYTE *)(v208 + v75[22]) = *(_BYTE *)(v127 + v75[22]);
  *(_BYTE *)(v208 + v75[23]) = *(_BYTE *)(v127 + v75[23]);
  *(_BYTE *)(v208 + v75[24]) = *(_BYTE *)(v127 + v75[24]);
  v165 = v75[25];
  v166 = (_QWORD *)(v208 + v165);
  v167 = (_QWORD *)(v127 + v165);
  v168 = v167[1];
  *v166 = *v167;
  v166[1] = v168;
  *(_BYTE *)(v208 + v75[26]) = *(_BYTE *)(v127 + v75[26]);
  *(_QWORD *)(v208 + v75[27]) = *(_QWORD *)(v127 + v75[27]);
  *(_QWORD *)(v208 + v75[28]) = *(_QWORD *)(v127 + v75[28]);
  v169 = *(int *)(a3 + 20);
  v170 = *(int *)(a3 + 24);
  v171 = v208 + v169;
  v172 = v127 + v169;
  *(_QWORD *)v171 = *(_QWORD *)v172;
  *(_WORD *)(v171 + 8) = *(_WORD *)(v172 + 8);
  v173 = (_QWORD *)(v208 + v170);
  v174 = (_QWORD *)(v127 + v170);
  v175 = v174[1];
  *v173 = *v174;
  v173[1] = v175;
  v176 = v207[5];
  v201 = v208 + v170 + v176;
  v191 = (char *)v174 + v176;
  v177 = type metadata accessor for AttributedString(0);
  v178 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v177 - 8) + 16);
  swift_bridgeObjectRetain(v210);
  swift_retain(v199);
  swift_bridgeObjectRetain(v156);
  swift_retain(v158);
  swift_retain(v160);
  swift_retain(v197);
  swift_retain(v204);
  swift_retain(v193);
  swift_retain(v195);
  swift_bridgeObjectRetain(v168);
  swift_bridgeObjectRetain(v175);
  v178(v201, v191, v177);
  v179 = v207[6];
  v180 = (char *)v173 + v179;
  v181 = (char *)v174 + v179;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v174 + v179, 1, v177))
  {
    v182 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
  }
  else
  {
    v178((uint64_t)v180, v181, v177);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v180, 0, 1, v177);
  }
  v183 = v207[7];
  v184 = (_QWORD *)((char *)v173 + v183);
  v185 = (_QWORD *)((char *)v174 + v183);
  v186 = v185[1];
  *v184 = *v185;
  v184[1] = v186;
  swift_bridgeObjectRetain(v186);
  return v208;
}

uint64_t sub_1000FE4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const void *v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  int *v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  int v185;
  int v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  _BYTE *v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(char *, uint64_t, uint64_t);
  uint64_t v245;
  char *v246;
  const void *v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void (*v263)(uint64_t, uint64_t, uint64_t);
  uint64_t v264;
  uint64_t v265;
  int *v267;
  void (*v268)(uint64_t, uint64_t);
  uint64_t v269;
  void (*v270)(void *, const void *, uint64_t);
  void (*v271)(void *, const void *, uint64_t);
  void (*v272)(char *, char *, uint64_t);
  void (*v273)(uint64_t, uint64_t, uint64_t);
  uint64_t v274;
  uint64_t v275;

  v5 = type metadata accessor for UUID(0);
  v273 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24);
  v273(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v262 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 24);
  v11(v8, v9, v10);
  v271 = (void (*)(void *, const void *, uint64_t))v11;
  v11(a1 + v6[6], a2 + v6[6], v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  v270 = (void (*)(void *, const void *, uint64_t))v17;
  v17(a1 + v6[8], a2 + v6[8], v15);
  v18 = v6[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = v6[10];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  LODWORD(v17) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v23, 1, v15);
  v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v15);
  if ((_DWORD)v17)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v24, v25, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v24, v15);
LABEL_6:
    v27 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v270(v24, v25, v15);
LABEL_7:
  v28 = v6[11];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v28, 1, v15);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v15);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v29, v30, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v29, v15);
LABEL_12:
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  v270(v29, v30, v15);
LABEL_13:
  v34 = v6[12];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v264 = v5;
  v273(a1 + v34, a2 + v34, v5);
  v37 = (int *)type metadata accessor for ConditionViewModel(0);
  v38 = v37[5];
  v39 = v35 + v38;
  v40 = v36 + v38;
  v41 = type metadata accessor for WeatherCondition(0);
  v268 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24);
  v269 = v41;
  v268(v39, v40);
  v42 = v37[6];
  v43 = (_QWORD *)(v35 + v42);
  v44 = (_QWORD *)(v36 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = v37[7];
  v48 = (_QWORD *)(v35 + v47);
  v49 = (_QWORD *)(v36 + v47);
  *v48 = *v49;
  v50 = v49[1];
  v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  *(_BYTE *)(v35 + v37[8]) = *(_BYTE *)(v36 + v37[8]);
  *(_BYTE *)(v35 + v37[9]) = *(_BYTE *)(v36 + v37[9]);
  *(_BYTE *)(v35 + v37[10]) = *(_BYTE *)(v36 + v37[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v52 = v6[14];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 24))(v53, v54, v55);
  v56 = v6[15];
  v57 = (void *)(a1 + v56);
  v58 = (const void *)(a2 + v56);
  LODWORD(v51) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v56, 1, v10);
  v59 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v58, 1, v10);
  v267 = v37;
  if ((_DWORD)v51)
  {
    if (!v59)
    {
      (*(void (**)(void *, const void *, uint64_t))(v262 + 16))(v57, v58, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v57, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v59)
  {
    (*(void (**)(void *, uint64_t))(v262 + 8))(v57, v10);
LABEL_18:
    v60 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_19;
  }
  v271(v57, v58, v10);
LABEL_19:
  v61 = v264;
  v62 = v6[16];
  v63 = (void *)(a1 + v62);
  v64 = (const void *)(a2 + v62);
  v65 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v62, 1, v10);
  v66 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v64, 1, v10);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v262 + 16))(v63, v64, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v262 + 8))(v63, v10);
LABEL_24:
    v67 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_25;
  }
  v271(v63, v64, v10);
LABEL_25:
  v68 = v6[17];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = type metadata accessor for UVIndex(0);
  v263 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 24);
  v263(v69, v70, v71);
  v72 = v6[18];
  v73 = a1 + v72;
  v74 = a2 + v72;
  v75 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 24))(v73, v74, v75);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v76 = v6[20];
  v77 = a1 + v76;
  v78 = (__int128 *)(a2 + v76);
  v79 = *(_QWORD *)(a1 + v76 + 8);
  v80 = *(_QWORD *)(a2 + v76 + 8);
  v265 = v71;
  if (v79)
  {
    if (v80)
    {
      *(_QWORD *)v77 = *(_QWORD *)v78;
      v81 = *((_QWORD *)v78 + 1);
      *(_QWORD *)(v77 + 8) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v79);
      v82 = *((_QWORD *)v78 + 2);
      v83 = *((_QWORD *)v78 + 3);
      v84 = *((_BYTE *)v78 + 32);
      sub_100006E58(v82, v83, v84);
      v85 = *(_QWORD *)(v77 + 16);
      v86 = *(_QWORD *)(v77 + 24);
      v87 = *(_BYTE *)(v77 + 32);
      *(_QWORD *)(v77 + 16) = v82;
      *(_QWORD *)(v77 + 24) = v83;
      *(_BYTE *)(v77 + 32) = v84;
      sub_100007458(v85, v86, v87);
    }
    else
    {
      sub_100008EC4(v77);
      v92 = *((_BYTE *)v78 + 32);
      v93 = v78[1];
      *(_OWORD *)v77 = *v78;
      *(_OWORD *)(v77 + 16) = v93;
      *(_BYTE *)(v77 + 32) = v92;
    }
  }
  else if (v80)
  {
    *(_QWORD *)v77 = *(_QWORD *)v78;
    v88 = *((_QWORD *)v78 + 1);
    *(_QWORD *)(v77 + 8) = v88;
    v89 = *((_QWORD *)v78 + 2);
    v90 = *((_QWORD *)v78 + 3);
    v91 = *((_BYTE *)v78 + 32);
    swift_bridgeObjectRetain(v88);
    sub_100006E58(v89, v90, v91);
    *(_QWORD *)(v77 + 16) = v89;
    *(_QWORD *)(v77 + 24) = v90;
    *(_BYTE *)(v77 + 32) = v91;
  }
  else
  {
    v94 = *v78;
    v95 = v78[1];
    *(_BYTE *)(v77 + 32) = *((_BYTE *)v78 + 32);
    *(_OWORD *)v77 = v94;
    *(_OWORD *)(v77 + 16) = v95;
  }
  v96 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v97 = v96[5];
  v98 = a1 + v97;
  v99 = a2 + v97;
  v273(a1 + v97, a2 + v97, v61);
  v100 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v271((void *)(v98 + v100[5]), (const void *)(v99 + v100[5]), v10);
  v270((void *)(v98 + v100[6]), (const void *)(v99 + v100[6]), v15);
  v270((void *)(v98 + v100[7]), (const void *)(v99 + v100[7]), v15);
  v101 = v100[8];
  v102 = v98 + v101;
  v103 = v99 + v101;
  v273(v98 + v101, v99 + v101, v61);
  ((void (*)(uint64_t, uint64_t, uint64_t))v268)(v102 + v267[5], v103 + v267[5], v269);
  v104 = v267[6];
  v105 = (_QWORD *)(v102 + v104);
  v106 = (_QWORD *)(v103 + v104);
  *v105 = *v106;
  v107 = v106[1];
  v108 = v105[1];
  v105[1] = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108);
  v109 = v267[7];
  v110 = (_QWORD *)(v102 + v109);
  v111 = (_QWORD *)(v103 + v109);
  *v110 = *v111;
  v112 = v111[1];
  v113 = v110[1];
  v110[1] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease(v113);
  *(_BYTE *)(v102 + v267[8]) = *(_BYTE *)(v103 + v267[8]);
  *(_BYTE *)(v102 + v267[9]) = *(_BYTE *)(v103 + v267[9]);
  *(_BYTE *)(v102 + v267[10]) = *(_BYTE *)(v103 + v267[10]);
  v114 = v100[9];
  v115 = v98 + v114;
  v116 = v99 + v114;
  v117 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 24))(v115, v116, v117);
  *(_QWORD *)(v98 + v100[10]) = *(_QWORD *)(v99 + v100[10]);
  v118 = v100[11];
  v119 = (_QWORD *)(v98 + v118);
  v120 = (_QWORD *)(v99 + v118);
  *v119 = *v120;
  v121 = v120[1];
  v122 = v119[1];
  v119[1] = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  v123 = v100[12];
  v124 = (_QWORD *)(v98 + v123);
  v125 = (_QWORD *)(v99 + v123);
  *v124 = *v125;
  v126 = v125[1];
  v127 = v124[1];
  v124[1] = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  v128 = v100[13];
  v129 = (_QWORD *)(v98 + v128);
  v130 = (_QWORD *)(v99 + v128);
  *v129 = *v130;
  v131 = v130[1];
  v132 = v129[1];
  v129[1] = v131;
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRelease(v132);
  v133 = v100[14];
  v134 = (_QWORD *)(v98 + v133);
  v135 = (_QWORD *)(v99 + v133);
  *v134 = *v135;
  v136 = v135[1];
  v137 = v134[1];
  v134[1] = v136;
  swift_bridgeObjectRetain(v136);
  swift_bridgeObjectRelease(v137);
  v138 = v100[15];
  v139 = v98 + v138;
  v140 = v99 + v138;
  v141 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v100[16];
  v143 = (void *)(v98 + v142);
  v144 = (const void *)(v99 + v142);
  v145 = type metadata accessor for SunEvents(0);
  LODWORD(v113) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v145);
  v146 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145);
  if ((_DWORD)v113)
  {
    if (!v146)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v147 = *(_QWORD *)(v145 - 8);
  if (v146)
  {
    (*(void (**)(void *, uint64_t))(v147 + 8))(v143, v145);
LABEL_41:
    v148 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v147 + 24))(v143, v144, v145);
LABEL_42:
  v149 = v100[17];
  v150 = (void *)(v98 + v149);
  v151 = (const void *)(v99 + v149);
  v152 = type metadata accessor for MoonEvents(0);
  v153 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, v152);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v152);
  if (v153)
  {
    if (!v154)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v152 - 8) + 16))(v150, v151, v152);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v150, 0, 1, v152);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v155 = *(_QWORD *)(v152 - 8);
  if (v154)
  {
    (*(void (**)(void *, uint64_t))(v155 + 8))(v150, v152);
LABEL_47:
    v156 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v155 + 24))(v150, v151, v152);
LABEL_48:
  v263(v98 + v100[18], v99 + v100[18], v265);
  *(_QWORD *)(v98 + v100[19]) = *(_QWORD *)(v99 + v100[19]);
  v157 = v96[6];
  v158 = (_QWORD *)(a1 + v157);
  v159 = (_QWORD *)(a2 + v157);
  v160 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v161 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, (uint64_t)v160);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, (uint64_t)v160);
  if (!v161)
  {
    if (v162)
    {
      sub_1000E1258((uint64_t)v158);
      goto LABEL_54;
    }
    *v158 = *v159;
    v176 = v159[1];
    v177 = v158[1];
    v158[1] = v176;
    swift_bridgeObjectRetain(v176);
    swift_bridgeObjectRelease(v177);
    v178 = v160[5];
    v179 = (char *)v158 + v178;
    v180 = (char *)v159 + v178;
    v181 = type metadata accessor for AttributedString(0);
    v275 = *(_QWORD *)(v181 - 8);
    v272 = *(void (**)(char *, char *, uint64_t))(v275 + 24);
    v272(v179, v180, v181);
    v182 = v160[6];
    v183 = (char *)v158 + v182;
    v184 = (char *)v159 + v182;
    v185 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158 + v182, 1, v181);
    v186 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v184, 1, v181);
    if (v185)
    {
      if (!v186)
      {
        (*(void (**)(char *, char *, uint64_t))(v275 + 16))(v183, v184, v181);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v183, 0, 1, v181);
LABEL_74:
        v257 = v160[7];
        v258 = (_QWORD *)((char *)v158 + v257);
        v259 = (_QWORD *)((char *)v159 + v257);
        *v258 = *v259;
        v260 = v259[1];
        v261 = v258[1];
        v258[1] = v260;
        swift_bridgeObjectRetain(v260);
        swift_bridgeObjectRelease(v261);
        goto LABEL_55;
      }
    }
    else
    {
      if (!v186)
      {
        v272(v183, v184, v181);
        goto LABEL_74;
      }
      (*(void (**)(char *, uint64_t))(v275 + 8))(v183, v181);
    }
    v256 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v256 - 8) + 64));
    goto LABEL_74;
  }
  if (v162)
  {
LABEL_54:
    v174 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
LABEL_55:
    v175 = a3;
    goto LABEL_63;
  }
  *v158 = *v159;
  v163 = v159[1];
  v158[1] = v163;
  v164 = v160[5];
  v165 = (char *)v158 + v164;
  v274 = (uint64_t)v160;
  v166 = (char *)v159 + v164;
  v167 = type metadata accessor for AttributedString(0);
  v168 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 16);
  swift_bridgeObjectRetain(v163);
  v169 = v166;
  v160 = (int *)v274;
  v168(v165, v169, v167);
  v170 = *(int *)(v274 + 24);
  v171 = (char *)v158 + v170;
  v172 = (char *)v159 + v170;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159 + v170, 1, v167))
  {
    v173 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v171, v172, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
  }
  else
  {
    v168(v171, v172, v167);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v171, 0, 1, v167);
  }
  v175 = a3;
  v187 = *(int *)(v274 + 28);
  v188 = (_QWORD *)((char *)v158 + v187);
  v189 = (_QWORD *)((char *)v159 + v187);
  *v188 = *v189;
  v190 = v189[1];
  v188[1] = v190;
  swift_bridgeObjectRetain(v190);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v158, 0, 1, v274);
LABEL_63:
  v191 = v96[7];
  v192 = a1 + v191;
  v193 = a2 + v191;
  v194 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v194 - 8) + 24))(v192, v193, v194);
  v195 = v96[8];
  v196 = (_QWORD *)(a1 + v195);
  v197 = (_QWORD *)(a2 + v195);
  *v196 = *v197;
  v198 = v197[1];
  v199 = v196[1];
  v196[1] = v198;
  swift_bridgeObjectRetain(v198);
  swift_bridgeObjectRelease(v199);
  *(_BYTE *)(a1 + v96[9]) = *(_BYTE *)(a2 + v96[9]);
  *(_BYTE *)(a1 + v96[10]) = *(_BYTE *)(a2 + v96[10]);
  v200 = v96[11];
  v201 = *(_QWORD *)(a1 + v200);
  v202 = *(_QWORD *)(a2 + v200);
  *(_QWORD *)(a1 + v200) = v202;
  swift_retain(v202);
  swift_release(v201);
  v203 = v96[12];
  v204 = (_QWORD *)(a1 + v203);
  v205 = (_QWORD *)(a2 + v203);
  *v204 = *v205;
  v206 = v205[1];
  v207 = v204[1];
  v204[1] = v206;
  swift_bridgeObjectRetain(v206);
  swift_bridgeObjectRelease(v207);
  v208 = v96[13];
  v209 = *(_QWORD *)(a2 + v208);
  v210 = *(_QWORD *)(a1 + v208);
  *(_QWORD *)(a1 + v208) = v209;
  swift_retain(v209);
  swift_release(v210);
  v211 = v96[14];
  v212 = *(_QWORD *)(a2 + v211);
  v213 = *(_QWORD *)(a1 + v211);
  *(_QWORD *)(a1 + v211) = v212;
  swift_retain(v212);
  swift_release(v213);
  v214 = v96[15];
  v215 = *(_QWORD *)(a2 + v214);
  v216 = *(_QWORD *)(a1 + v214);
  *(_QWORD *)(a1 + v214) = v215;
  swift_retain(v215);
  swift_release(v216);
  v217 = v96[16];
  v218 = *(_QWORD *)(a2 + v217);
  v219 = *(_QWORD *)(a1 + v217);
  *(_QWORD *)(a1 + v217) = v218;
  swift_retain(v218);
  swift_release(v219);
  *(_BYTE *)(a1 + v96[17]) = *(_BYTE *)(a2 + v96[17]);
  v220 = v96[18];
  v221 = *(_QWORD *)(a2 + v220);
  v222 = *(_QWORD *)(a1 + v220);
  *(_QWORD *)(a1 + v220) = v221;
  swift_retain(v221);
  swift_release(v222);
  v223 = v96[19];
  v224 = *(_QWORD *)(a2 + v223);
  v225 = *(_QWORD *)(a1 + v223);
  *(_QWORD *)(a1 + v223) = v224;
  swift_retain(v224);
  swift_release(v225);
  *(_QWORD *)(a1 + v96[20]) = *(_QWORD *)(a2 + v96[20]);
  *(_BYTE *)(a1 + v96[21]) = *(_BYTE *)(a2 + v96[21]);
  *(_BYTE *)(a1 + v96[22]) = *(_BYTE *)(a2 + v96[22]);
  *(_BYTE *)(a1 + v96[23]) = *(_BYTE *)(a2 + v96[23]);
  *(_BYTE *)(a1 + v96[24]) = *(_BYTE *)(a2 + v96[24]);
  v226 = v96[25];
  v227 = (_QWORD *)(a1 + v226);
  v228 = (_QWORD *)(a2 + v226);
  *v227 = *v228;
  v229 = v228[1];
  v230 = v227[1];
  v227[1] = v229;
  swift_bridgeObjectRetain(v229);
  swift_bridgeObjectRelease(v230);
  *(_BYTE *)(a1 + v96[26]) = *(_BYTE *)(a2 + v96[26]);
  *(_QWORD *)(a1 + v96[27]) = *(_QWORD *)(a2 + v96[27]);
  *(_QWORD *)(a1 + v96[28]) = *(_QWORD *)(a2 + v96[28]);
  v231 = *(int *)(v175 + 20);
  v232 = (_BYTE *)(a1 + v231);
  v233 = (_BYTE *)(a2 + v231);
  *v232 = *v233;
  v232[1] = v233[1];
  v232[2] = v233[2];
  v232[3] = v233[3];
  v232[4] = v233[4];
  v232[5] = v233[5];
  v232[6] = v233[6];
  v232[7] = v233[7];
  v232[8] = v233[8];
  v232[9] = v233[9];
  v234 = *(int *)(v175 + 24);
  v235 = (_QWORD *)(a1 + v234);
  v236 = a2 + v234;
  *v235 = *(_QWORD *)(a2 + v234);
  v237 = *(_QWORD *)(a2 + v234 + 8);
  v238 = *(_QWORD *)(a1 + v234 + 8);
  v235[1] = v237;
  swift_bridgeObjectRetain(v237);
  swift_bridgeObjectRelease(v238);
  v239 = v160[5];
  v240 = (char *)v235 + v239;
  v241 = v236 + v239;
  v242 = type metadata accessor for AttributedString(0);
  v243 = *(_QWORD *)(v242 - 8);
  v244 = *(void (**)(char *, uint64_t, uint64_t))(v243 + 24);
  v244(v240, v241, v242);
  v245 = v160[6];
  v246 = (char *)v235 + v245;
  v247 = (const void *)(v236 + v245);
  LODWORD(v193) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v235 + v245, 1, v242);
  v248 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v247, 1, v242);
  if (!(_DWORD)v193)
  {
    if (!v248)
    {
      v244(v246, (uint64_t)v247, v242);
      goto LABEL_69;
    }
    (*(void (**)(char *, uint64_t))(v243 + 8))(v246, v242);
    goto LABEL_68;
  }
  if (v248)
  {
LABEL_68:
    v249 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v246, v247, *(_QWORD *)(*(_QWORD *)(v249 - 8) + 64));
    goto LABEL_69;
  }
  (*(void (**)(char *, const void *, uint64_t))(v243 + 16))(v246, v247, v242);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v246, 0, 1, v242);
LABEL_69:
  v250 = v160[7];
  v251 = (_QWORD *)((char *)v235 + v250);
  v252 = (_QWORD *)(v236 + v250);
  *v251 = *v252;
  v253 = v252[1];
  v254 = v251[1];
  v251[1] = v253;
  swift_bridgeObjectRetain(v253);
  swift_bridgeObjectRelease(v254);
  return a1;
}

uint64_t sub_1000FF564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  _OWORD *v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  void *v114;
  const void *v115;
  uint64_t v116;
  void (*v118)(uint64_t, uint64_t);
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t, uint64_t);
  uint64_t v126;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v126 = v11;
  v12(a1 + v7[6], a2 + v7[6], v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
  v18 = v7[10];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v18, 1, v16))
  {
    v21 = sub_100005D40(&qword_1001BF098);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v19, (uint64_t)v20, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v19, 0, 1, v16);
  }
  v22 = v7[11];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v122 = v17;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v22, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[12];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v123 = v5;
  v124 = v6;
  v6(a1 + v26, a2 + v26, v5);
  v29 = (int *)type metadata accessor for ConditionViewModel(0);
  v30 = v29[5];
  v31 = v27 + v30;
  v32 = v28 + v30;
  v33 = type metadata accessor for WeatherCondition(0);
  v118 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
  v119 = v33;
  v118(v31, v32);
  *(_OWORD *)(v27 + v29[6]) = *(_OWORD *)(v28 + v29[6]);
  *(_OWORD *)(v27 + v29[7]) = *(_OWORD *)(v28 + v29[7]);
  *(_BYTE *)(v27 + v29[8]) = *(_BYTE *)(v28 + v29[8]);
  *(_BYTE *)(v27 + v29[9]) = *(_BYTE *)(v28 + v29[9]);
  *(_BYTE *)(v27 + v29[10]) = *(_BYTE *)(v28 + v29[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v34 = v7[14];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  v38 = v7[15];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v38, 1, v126))
  {
    v41 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v39, (uint64_t)v40, v126);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v126);
  }
  v42 = v7[16];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v42, 1, v126))
  {
    v45 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v43, (uint64_t)v44, v126);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v43, 0, 1, v126);
  }
  v46 = v7[17];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for UVIndex(0);
  v120 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 32);
  v121 = v49;
  v120(v47, v48);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  v54 = v7[20];
  v55 = a1 + v54;
  v56 = a2 + v54;
  *(_BYTE *)(v55 + 32) = *(_BYTE *)(v56 + 32);
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  v58 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v59 = v58[5];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v124(a1 + v59, a2 + v59, v123);
  v62 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v12(v60 + v62[5], v61 + v62[5], v126);
  v122(v60 + v62[6], v61 + v62[6], v16);
  v122(v60 + v62[7], v61 + v62[7], v16);
  v63 = v62[8];
  v64 = v60 + v63;
  v65 = v61 + v63;
  v124(v60 + v63, v61 + v63, v123);
  ((void (*)(uint64_t, uint64_t, uint64_t))v118)(v64 + v29[5], v65 + v29[5], v119);
  *(_OWORD *)(v64 + v29[6]) = *(_OWORD *)(v65 + v29[6]);
  *(_OWORD *)(v64 + v29[7]) = *(_OWORD *)(v65 + v29[7]);
  *(_BYTE *)(v64 + v29[8]) = *(_BYTE *)(v65 + v29[8]);
  *(_BYTE *)(v64 + v29[9]) = *(_BYTE *)(v65 + v29[9]);
  *(_BYTE *)(v64 + v29[10]) = *(_BYTE *)(v65 + v29[10]);
  v66 = v62[9];
  v67 = v60 + v66;
  v68 = v61 + v66;
  v69 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
  *(_QWORD *)(v60 + v62[10]) = *(_QWORD *)(v61 + v62[10]);
  *(_OWORD *)(v60 + v62[11]) = *(_OWORD *)(v61 + v62[11]);
  *(_OWORD *)(v60 + v62[12]) = *(_OWORD *)(v61 + v62[12]);
  *(_OWORD *)(v60 + v62[13]) = *(_OWORD *)(v61 + v62[13]);
  *(_OWORD *)(v60 + v62[14]) = *(_OWORD *)(v61 + v62[14]);
  v70 = v62[15];
  v71 = v60 + v70;
  v72 = v61 + v70;
  v73 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
  v74 = v62[16];
  v75 = (void *)(v60 + v74);
  v76 = (const void *)(v61 + v74);
  v77 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v76, 1, v77))
  {
    v78 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v75, 0, 1, v77);
  }
  v79 = v62[17];
  v80 = (void *)(v60 + v79);
  v81 = (const void *)(v61 + v79);
  v82 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v81, 1, v82))
  {
    v83 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v80, v81, v82);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v80, 0, 1, v82);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v120)(v60 + v62[18], v61 + v62[18], v121);
  *(_QWORD *)(v60 + v62[19]) = *(_QWORD *)(v61 + v62[19]);
  v84 = v58[6];
  v85 = (_OWORD *)(a1 + v84);
  v86 = (_OWORD *)(a2 + v84);
  v87 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86, 1, (uint64_t)v87))
  {
    v88 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    *v85 = *v86;
    v89 = v87[5];
    v90 = (char *)v85 + v89;
    v91 = (char *)v86 + v89;
    v92 = type metadata accessor for AttributedString(0);
    v93 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32);
    v93(v90, v91, v92);
    v94 = v87[6];
    v95 = (char *)v85 + v94;
    v96 = (char *)v86 + v94;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86 + v94, 1, v92))
    {
      v97 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      v93(v95, v96, v92);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v92);
    }
    *(_OWORD *)((char *)v85 + v87[7]) = *(_OWORD *)((char *)v86 + v87[7]);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v85, 0, 1, (uint64_t)v87);
  }
  v98 = v58[7];
  v99 = a1 + v98;
  v100 = a2 + v98;
  v101 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v99, v100, v101);
  *(_OWORD *)(a1 + v58[8]) = *(_OWORD *)(a2 + v58[8]);
  *(_BYTE *)(a1 + v58[9]) = *(_BYTE *)(a2 + v58[9]);
  *(_BYTE *)(a1 + v58[10]) = *(_BYTE *)(a2 + v58[10]);
  *(_QWORD *)(a1 + v58[11]) = *(_QWORD *)(a2 + v58[11]);
  *(_OWORD *)(a1 + v58[12]) = *(_OWORD *)(a2 + v58[12]);
  *(_QWORD *)(a1 + v58[13]) = *(_QWORD *)(a2 + v58[13]);
  *(_QWORD *)(a1 + v58[14]) = *(_QWORD *)(a2 + v58[14]);
  *(_QWORD *)(a1 + v58[15]) = *(_QWORD *)(a2 + v58[15]);
  *(_QWORD *)(a1 + v58[16]) = *(_QWORD *)(a2 + v58[16]);
  *(_BYTE *)(a1 + v58[17]) = *(_BYTE *)(a2 + v58[17]);
  *(_QWORD *)(a1 + v58[18]) = *(_QWORD *)(a2 + v58[18]);
  *(_QWORD *)(a1 + v58[19]) = *(_QWORD *)(a2 + v58[19]);
  *(_QWORD *)(a1 + v58[20]) = *(_QWORD *)(a2 + v58[20]);
  *(_BYTE *)(a1 + v58[21]) = *(_BYTE *)(a2 + v58[21]);
  *(_BYTE *)(a1 + v58[22]) = *(_BYTE *)(a2 + v58[22]);
  *(_BYTE *)(a1 + v58[23]) = *(_BYTE *)(a2 + v58[23]);
  *(_BYTE *)(a1 + v58[24]) = *(_BYTE *)(a2 + v58[24]);
  *(_OWORD *)(a1 + v58[25]) = *(_OWORD *)(a2 + v58[25]);
  *(_BYTE *)(a1 + v58[26]) = *(_BYTE *)(a2 + v58[26]);
  *(_QWORD *)(a1 + v58[27]) = *(_QWORD *)(a2 + v58[27]);
  *(_QWORD *)(a1 + v58[28]) = *(_QWORD *)(a2 + v58[28]);
  v102 = *(int *)(a3 + 20);
  v103 = *(int *)(a3 + 24);
  v104 = a1 + v102;
  v105 = a2 + v102;
  *(_QWORD *)v104 = *(_QWORD *)v105;
  *(_WORD *)(v104 + 8) = *(_WORD *)(v105 + 8);
  v106 = a1 + v103;
  v107 = a2 + v103;
  *(_OWORD *)(a1 + v103) = *(_OWORD *)(a2 + v103);
  v108 = v87[5];
  v109 = a1 + v103 + v108;
  v110 = a2 + v103 + v108;
  v111 = type metadata accessor for AttributedString(0);
  v112 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 32);
  v112(v109, v110, v111);
  v113 = v87[6];
  v114 = (void *)(v106 + v113);
  v115 = (const void *)(v107 + v113);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v107 + v113, 1, v111))
  {
    v116 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
  }
  else
  {
    v112((uint64_t)v114, (uint64_t)v115, v111);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v114, 0, 1, v111);
  }
  *(_OWORD *)(v106 + v87[7]) = *(_OWORD *)(v107 + v87[7]);
  return a1;
}

uint64_t sub_1000FFF28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const void *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  int *v161;
  int v162;
  int v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void (*v236)(char *, uint64_t, uint64_t);
  uint64_t v237;
  char *v238;
  const void *v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void (*v257)(uint64_t, uint64_t, uint64_t);
  uint64_t v258;
  uint64_t v259;
  int *v261;
  void (*v262)(uint64_t, uint64_t);
  uint64_t v263;
  void (*v264)(void *, const void *, uint64_t);
  void (*v265)(void *, const void *, uint64_t);
  void (*v266)(char *, char *, uint64_t);
  void (*v267)(uint64_t, uint64_t, uint64_t);
  uint64_t v268;

  v5 = type metadata accessor for UUID(0);
  v267 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40);
  v267(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v256 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v256 + 40);
  v11(v8, v9, v10);
  v265 = (void (*)(void *, const void *, uint64_t))v11;
  v11(a1 + v6[6], a2 + v6[6], v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40);
  v17(v13, v14, v15);
  v264 = (void (*)(void *, const void *, uint64_t))v17;
  v17(a1 + v6[8], a2 + v6[8], v15);
  v18 = v6[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = v6[10];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  LODWORD(v17) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v24, 1, v15);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v15);
  if ((_DWORD)v17)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v25, v26, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v25, v15);
LABEL_6:
    v28 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  v264(v25, v26, v15);
LABEL_7:
  v29 = v6[11];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v29, 1, v15);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v15);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v30, v31, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v30, v15);
LABEL_12:
    v34 = sub_100005D40(&qword_1001BF098);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  v264(v30, v31, v15);
LABEL_13:
  v35 = v6[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v258 = v5;
  v267(a1 + v35, a2 + v35, v5);
  v38 = (int *)type metadata accessor for ConditionViewModel(0);
  v39 = v38[5];
  v40 = v36 + v39;
  v41 = v37 + v39;
  v42 = type metadata accessor for WeatherCondition(0);
  v262 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40);
  v263 = v42;
  v262(v40, v41);
  v43 = v38[6];
  v44 = (_QWORD *)(v36 + v43);
  v45 = (uint64_t *)(v37 + v43);
  v47 = *v45;
  v46 = v45[1];
  v48 = v44[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease(v48);
  v49 = v38[7];
  v50 = (_QWORD *)(v36 + v49);
  v51 = (uint64_t *)(v37 + v49);
  v53 = *v51;
  v52 = v51[1];
  v54 = v50[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease(v54);
  *(_BYTE *)(v36 + v38[8]) = *(_BYTE *)(v37 + v38[8]);
  *(_BYTE *)(v36 + v38[9]) = *(_BYTE *)(v37 + v38[9]);
  *(_BYTE *)(v36 + v38[10]) = *(_BYTE *)(v37 + v38[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v55 = v6[14];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  v59 = v6[15];
  v60 = (void *)(a1 + v59);
  v61 = (const void *)(a2 + v59);
  LODWORD(v40) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v59, 1, v10);
  v62 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v61, 1, v10);
  v261 = v38;
  if ((_DWORD)v40)
  {
    if (!v62)
    {
      (*(void (**)(void *, const void *, uint64_t))(v256 + 32))(v60, v61, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v60, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v62)
  {
    (*(void (**)(void *, uint64_t))(v256 + 8))(v60, v10);
LABEL_18:
    v63 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_19;
  }
  v265(v60, v61, v10);
LABEL_19:
  v64 = v258;
  v65 = v6[16];
  v66 = (void *)(a1 + v65);
  v67 = (const void *)(a2 + v65);
  v68 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v65, 1, v10);
  v69 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(void *, const void *, uint64_t))(v256 + 32))(v66, v67, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v69)
  {
    (*(void (**)(void *, uint64_t))(v256 + 8))(v66, v10);
LABEL_24:
    v70 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_25;
  }
  v265(v66, v67, v10);
LABEL_25:
  v71 = v6[17];
  v72 = a1 + v71;
  v73 = a2 + v71;
  v74 = type metadata accessor for UVIndex(0);
  v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 40);
  v75(v72, v73, v74);
  v76 = v6[18];
  v77 = a1 + v76;
  v78 = a2 + v76;
  v79 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 40))(v77, v78, v79);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v80 = v6[20];
  v81 = a1 + v80;
  v82 = a2 + v80;
  v83 = *(_QWORD *)(a1 + v80 + 8);
  v257 = v75;
  v259 = v74;
  if (v83)
  {
    v84 = *(_QWORD *)(v82 + 8);
    if (v84)
    {
      *(_QWORD *)v81 = *(_QWORD *)v82;
      *(_QWORD *)(v81 + 8) = v84;
      swift_bridgeObjectRelease(v83);
      v85 = *(_BYTE *)(v82 + 32);
      v86 = *(_QWORD *)(v81 + 16);
      v87 = *(_QWORD *)(v81 + 24);
      v88 = *(_BYTE *)(v81 + 32);
      *(_OWORD *)(v81 + 16) = *(_OWORD *)(v82 + 16);
      *(_BYTE *)(v81 + 32) = v85;
      sub_100007458(v86, v87, v88);
      goto LABEL_30;
    }
    sub_100008EC4(v81);
  }
  v89 = *(_OWORD *)(v82 + 16);
  *(_OWORD *)v81 = *(_OWORD *)v82;
  *(_OWORD *)(v81 + 16) = v89;
  *(_BYTE *)(v81 + 32) = *(_BYTE *)(v82 + 32);
LABEL_30:
  v90 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v91 = v90[5];
  v92 = a1 + v91;
  v93 = a2 + v91;
  v267(a1 + v91, a2 + v91, v64);
  v94 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v265((void *)(v92 + v94[5]), (const void *)(v93 + v94[5]), v10);
  v264((void *)(v92 + v94[6]), (const void *)(v93 + v94[6]), v15);
  v264((void *)(v92 + v94[7]), (const void *)(v93 + v94[7]), v15);
  v95 = v94[8];
  v96 = v92 + v95;
  v97 = v93 + v95;
  v267(v92 + v95, v93 + v95, v64);
  ((void (*)(uint64_t, uint64_t, uint64_t))v262)(v96 + v261[5], v97 + v261[5], v263);
  v98 = v261[6];
  v99 = (_QWORD *)(v96 + v98);
  v100 = (uint64_t *)(v97 + v98);
  v102 = *v100;
  v101 = v100[1];
  v103 = v99[1];
  *v99 = v102;
  v99[1] = v101;
  swift_bridgeObjectRelease(v103);
  v104 = v261[7];
  v105 = (_QWORD *)(v96 + v104);
  v106 = (uint64_t *)(v97 + v104);
  v108 = *v106;
  v107 = v106[1];
  v109 = v105[1];
  *v105 = v108;
  v105[1] = v107;
  swift_bridgeObjectRelease(v109);
  *(_BYTE *)(v96 + v261[8]) = *(_BYTE *)(v97 + v261[8]);
  *(_BYTE *)(v96 + v261[9]) = *(_BYTE *)(v97 + v261[9]);
  *(_BYTE *)(v96 + v261[10]) = *(_BYTE *)(v97 + v261[10]);
  v110 = v94[9];
  v111 = v92 + v110;
  v112 = v93 + v110;
  v113 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 40))(v111, v112, v113);
  *(_QWORD *)(v92 + v94[10]) = *(_QWORD *)(v93 + v94[10]);
  v114 = v94[11];
  v115 = (_QWORD *)(v92 + v114);
  v116 = (uint64_t *)(v93 + v114);
  v118 = *v116;
  v117 = v116[1];
  v119 = v115[1];
  *v115 = v118;
  v115[1] = v117;
  swift_bridgeObjectRelease(v119);
  v120 = v94[12];
  v121 = (_QWORD *)(v92 + v120);
  v122 = (uint64_t *)(v93 + v120);
  v124 = *v122;
  v123 = v122[1];
  v125 = v121[1];
  *v121 = v124;
  v121[1] = v123;
  swift_bridgeObjectRelease(v125);
  v126 = v94[13];
  v127 = (_QWORD *)(v92 + v126);
  v128 = (uint64_t *)(v93 + v126);
  v130 = *v128;
  v129 = v128[1];
  v131 = v127[1];
  *v127 = v130;
  v127[1] = v129;
  swift_bridgeObjectRelease(v131);
  v132 = v94[14];
  v133 = (_QWORD *)(v92 + v132);
  v134 = (uint64_t *)(v93 + v132);
  v136 = *v134;
  v135 = v134[1];
  v137 = v133[1];
  *v133 = v136;
  v133[1] = v135;
  swift_bridgeObjectRelease(v137);
  v138 = v94[15];
  v139 = v92 + v138;
  v140 = v93 + v138;
  v141 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 40))(v139, v140, v141);
  v142 = v94[16];
  v143 = (void *)(v92 + v142);
  v144 = (const void *)(v93 + v142);
  v145 = type metadata accessor for SunEvents(0);
  v146 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v145);
  v147 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145);
  if (v146)
  {
    if (!v147)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v148 = *(_QWORD *)(v145 - 8);
  if (v147)
  {
    (*(void (**)(void *, uint64_t))(v148 + 8))(v143, v145);
LABEL_35:
    v149 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(void *, const void *, uint64_t))(v148 + 40))(v143, v144, v145);
LABEL_36:
  v150 = v94[17];
  v151 = (void *)(v92 + v150);
  v152 = (const void *)(v93 + v150);
  v153 = type metadata accessor for MoonEvents(0);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v153);
  v155 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v152, 1, v153);
  if (v154)
  {
    if (!v155)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v153 - 8) + 32))(v151, v152, v153);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v151, 0, 1, v153);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v156 = *(_QWORD *)(v153 - 8);
  if (v155)
  {
    (*(void (**)(void *, uint64_t))(v156 + 8))(v151, v153);
LABEL_41:
    v157 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v156 + 40))(v151, v152, v153);
LABEL_42:
  v257(v92 + v94[18], v93 + v94[18], v259);
  *(_QWORD *)(v92 + v94[19]) = *(_QWORD *)(v93 + v94[19]);
  v158 = v90[6];
  v159 = (_QWORD *)(a1 + v158);
  v160 = (_QWORD *)(a2 + v158);
  v161 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, (uint64_t)v161);
  v163 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v160, 1, (uint64_t)v161);
  if (!v162)
  {
    if (v163)
    {
      sub_1000E1258((uint64_t)v159);
      goto LABEL_48;
    }
    v175 = v160[1];
    v176 = v159[1];
    *v159 = *v160;
    v159[1] = v175;
    swift_bridgeObjectRelease(v176);
    v177 = v161[5];
    v178 = (char *)v159 + v177;
    v179 = (char *)v160 + v177;
    v180 = type metadata accessor for AttributedString(0);
    v268 = *(_QWORD *)(v180 - 8);
    v266 = *(void (**)(char *, char *, uint64_t))(v268 + 40);
    v266(v178, v179, v180);
    v181 = v161[6];
    v182 = (char *)v159 + v181;
    v183 = (char *)v160 + v181;
    v184 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159 + v181, 1, v180);
    v185 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v183, 1, v180);
    if (v184)
    {
      if (!v185)
      {
        (*(void (**)(char *, char *, uint64_t))(v268 + 32))(v182, v183, v180);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v182, 0, 1, v180);
LABEL_72:
        v250 = v161[7];
        v251 = (_QWORD *)((char *)v159 + v250);
        v252 = (_QWORD *)((char *)v160 + v250);
        v254 = *v252;
        v253 = v252[1];
        v255 = v251[1];
        *v251 = v254;
        v251[1] = v253;
        swift_bridgeObjectRelease(v255);
        goto LABEL_49;
      }
    }
    else
    {
      if (!v185)
      {
        v266(v182, v183, v180);
        goto LABEL_72;
      }
      (*(void (**)(char *, uint64_t))(v268 + 8))(v182, v180);
    }
    v249 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v182, v183, *(_QWORD *)(*(_QWORD *)(v249 - 8) + 64));
    goto LABEL_72;
  }
  if (v163)
  {
LABEL_48:
    v173 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
LABEL_49:
    v174 = a3;
    goto LABEL_61;
  }
  *(_OWORD *)v159 = *(_OWORD *)v160;
  v164 = v161[5];
  v165 = (char *)v159 + v164;
  v166 = (char *)v160 + v164;
  v167 = type metadata accessor for AttributedString(0);
  v168 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 32);
  v168(v165, v166, v167);
  v169 = v161[6];
  v170 = (char *)v159 + v169;
  v171 = (char *)v160 + v169;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v160 + v169, 1, v167))
  {
    v172 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
  }
  else
  {
    v168(v170, v171, v167);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v170, 0, 1, v167);
  }
  v174 = a3;
  *(_OWORD *)((char *)v159 + v161[7]) = *(_OWORD *)((char *)v160 + v161[7]);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v159, 0, 1, (uint64_t)v161);
LABEL_61:
  v186 = v90[7];
  v187 = a1 + v186;
  v188 = a2 + v186;
  v189 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v189 - 8) + 40))(v187, v188, v189);
  v190 = v90[8];
  v191 = (_QWORD *)(a1 + v190);
  v192 = (uint64_t *)(a2 + v190);
  v194 = *v192;
  v193 = v192[1];
  v195 = v191[1];
  *v191 = v194;
  v191[1] = v193;
  swift_bridgeObjectRelease(v195);
  *(_BYTE *)(a1 + v90[9]) = *(_BYTE *)(a2 + v90[9]);
  *(_BYTE *)(a1 + v90[10]) = *(_BYTE *)(a2 + v90[10]);
  v196 = v90[11];
  v197 = *(_QWORD *)(a1 + v196);
  *(_QWORD *)(a1 + v196) = *(_QWORD *)(a2 + v196);
  swift_release(v197);
  v198 = v90[12];
  v199 = (_QWORD *)(a1 + v198);
  v200 = (uint64_t *)(a2 + v198);
  v202 = *v200;
  v201 = v200[1];
  v203 = v199[1];
  *v199 = v202;
  v199[1] = v201;
  swift_bridgeObjectRelease(v203);
  v204 = v90[13];
  v205 = *(_QWORD *)(a1 + v204);
  *(_QWORD *)(a1 + v204) = *(_QWORD *)(a2 + v204);
  swift_release(v205);
  v206 = v90[14];
  v207 = *(_QWORD *)(a1 + v206);
  *(_QWORD *)(a1 + v206) = *(_QWORD *)(a2 + v206);
  swift_release(v207);
  v208 = v90[15];
  v209 = *(_QWORD *)(a1 + v208);
  *(_QWORD *)(a1 + v208) = *(_QWORD *)(a2 + v208);
  swift_release(v209);
  v210 = v90[16];
  v211 = *(_QWORD *)(a1 + v210);
  *(_QWORD *)(a1 + v210) = *(_QWORD *)(a2 + v210);
  swift_release(v211);
  *(_BYTE *)(a1 + v90[17]) = *(_BYTE *)(a2 + v90[17]);
  v212 = v90[18];
  v213 = *(_QWORD *)(a1 + v212);
  *(_QWORD *)(a1 + v212) = *(_QWORD *)(a2 + v212);
  swift_release(v213);
  v214 = v90[19];
  v215 = *(_QWORD *)(a1 + v214);
  *(_QWORD *)(a1 + v214) = *(_QWORD *)(a2 + v214);
  swift_release(v215);
  *(_QWORD *)(a1 + v90[20]) = *(_QWORD *)(a2 + v90[20]);
  *(_BYTE *)(a1 + v90[21]) = *(_BYTE *)(a2 + v90[21]);
  *(_BYTE *)(a1 + v90[22]) = *(_BYTE *)(a2 + v90[22]);
  *(_BYTE *)(a1 + v90[23]) = *(_BYTE *)(a2 + v90[23]);
  *(_BYTE *)(a1 + v90[24]) = *(_BYTE *)(a2 + v90[24]);
  v216 = v90[25];
  v217 = (_QWORD *)(a1 + v216);
  v218 = (uint64_t *)(a2 + v216);
  v220 = *v218;
  v219 = v218[1];
  v221 = v217[1];
  *v217 = v220;
  v217[1] = v219;
  swift_bridgeObjectRelease(v221);
  *(_BYTE *)(a1 + v90[26]) = *(_BYTE *)(a2 + v90[26]);
  *(_QWORD *)(a1 + v90[27]) = *(_QWORD *)(a2 + v90[27]);
  *(_QWORD *)(a1 + v90[28]) = *(_QWORD *)(a2 + v90[28]);
  v222 = *(int *)(v174 + 20);
  v223 = *(int *)(v174 + 24);
  v224 = a1 + v222;
  v225 = a2 + v222;
  *(_QWORD *)v224 = *(_QWORD *)v225;
  *(_WORD *)(v224 + 8) = *(_WORD *)(v225 + 8);
  v226 = (_QWORD *)(a1 + v223);
  v227 = a2 + v223;
  v228 = *(_QWORD *)(a2 + v223);
  v229 = *(_QWORD *)(a2 + v223 + 8);
  v230 = v226[1];
  *v226 = v228;
  v226[1] = v229;
  swift_bridgeObjectRelease(v230);
  v231 = v161[5];
  v232 = (char *)v226 + v231;
  v233 = v227 + v231;
  v234 = type metadata accessor for AttributedString(0);
  v235 = *(_QWORD *)(v234 - 8);
  v236 = *(void (**)(char *, uint64_t, uint64_t))(v235 + 40);
  v236(v232, v233, v234);
  v237 = v161[6];
  v238 = (char *)v226 + v237;
  v239 = (const void *)(v227 + v237);
  LODWORD(v188) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v226 + v237, 1, v234);
  v240 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v239, 1, v234);
  if (!(_DWORD)v188)
  {
    if (!v240)
    {
      v236(v238, (uint64_t)v239, v234);
      goto LABEL_67;
    }
    (*(void (**)(char *, uint64_t))(v235 + 8))(v238, v234);
    goto LABEL_66;
  }
  if (v240)
  {
LABEL_66:
    v241 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v238, v239, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, const void *, uint64_t))(v235 + 32))(v238, v239, v234);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v238, 0, 1, v234);
LABEL_67:
  v242 = v161[7];
  v243 = (_QWORD *)((char *)v226 + v242);
  v244 = (uint64_t *)(v227 + v242);
  v246 = *v244;
  v245 = v244[1];
  v247 = v243[1];
  *v243 = v246;
  v243[1] = v245;
  swift_bridgeObjectRelease(v247);
  return a1;
}

uint64_t sub_100100D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100100DA4);
}

uint64_t sub_100100DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v6 = sub_100016AA8();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
  }
  if ((_DWORD)v3 != 251)
  {
    v7 = type metadata accessor for RainInlineContentViewModel(0);
    v8 = v4 + *(int *)(a3 + 24);
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
  }
  v9 = *(unsigned __int8 *)(v4 + *(int *)(a3 + 20));
  if (v9 >= 5)
    return v9 - 4;
  else
    return 0;
}

uint64_t sub_100100E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100100E38);
}

uint64_t sub_100100E38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = sub_100016AA8();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = v5;
  }
  else
  {
    if (a3 == 251)
    {
      *(_BYTE *)(v5 + *(int *)(a4 + 20)) = v4 + 4;
      return result;
    }
    v9 = type metadata accessor for RainInlineContentViewModel(0);
    v10 = v5 + *(int *)(a4 + 24);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, v4, v4, v9);
}

uint64_t type metadata accessor for DataDenseViewAttributes(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C4590;
  if (!qword_1001C4590)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DataDenseViewAttributes);
  return result;
}

uint64_t sub_100100EF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for CurrentObservationViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = "\n";
    result = type metadata accessor for RainInlineContentViewModel(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100100F84(uint64_t a1, __int128 *a2, void *a3, __int128 *a4)
{
  uint64_t v4;

  swift_unknownObjectWeakInit(v4 + 64, 0);
  *(_QWORD *)(v4 + 16) = a1;
  sub_100096428(a2, v4 + 24);
  swift_unknownObjectWeakAssign(v4 + 64, a3);

  sub_100096428(a4, v4 + 72);
  return v4;
}

_QWORD *sub_100100FFC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v0 + 3);
  swift_unknownObjectWeakDestroy(v0 + 8);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v0 + 9);
  return v0;
}

uint64_t sub_100101030()
{
  uint64_t v0;

  sub_100100FFC();
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for GeocodeWeatherService()
{
  return objc_opt_self(_TtC13WeatherWidget21GeocodeWeatherService);
}

uint64_t sub_100101070(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Options;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t Strong;
  void *v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;

  v77 = a2;
  v72 = type metadata accessor for WeatherServiceCaching.Options(0);
  sub_100029068();
  __chkstk_darwin(v3);
  sub_1000230E0();
  v73 = v4;
  sub_100005D40(&qword_1001C31F8);
  sub_100029068();
  __chkstk_darwin(v5);
  sub_1000230E0();
  v71 = v6;
  sub_100005D40(&qword_1001C3200);
  sub_100029068();
  __chkstk_darwin(v7);
  sub_1000230E0();
  v66 = v8;
  Options = type metadata accessor for WeatherServiceFetchOptions(0);
  v75 = *(_QWORD *)(Options - 8);
  v76 = Options;
  __chkstk_darwin(Options);
  sub_1000230E0();
  v74 = v10;
  sub_100005D40(&qword_1001C4688);
  sub_100029068();
  __chkstk_darwin(v11);
  sub_10002325C();
  v14 = v13 - v12;
  v68 = type metadata accessor for WeatherServiceLocationOptions(0);
  v15 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  sub_10002325C();
  v18 = v17 - v16;
  v19 = type metadata accessor for ProductRequirementsFactory.WidgetGeoRequiredProducts(0);
  v69 = *(_QWORD *)(v19 - 8);
  v70 = v19;
  __chkstk_darwin(v19);
  sub_10002325C();
  v22 = v21 - v20;
  sub_100005D40(&qword_1001C0F18);
  sub_100029068();
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v64 - v28;
  WeatherDataRequestOptions.timeZone.getter(v27);
  v78 = v2;
  v30 = v2[6];
  v31 = v2[7];
  sub_100022330(v2 + 3, v30);
  v67 = v22;
  v32 = dispatch thunk of ProductRequirementsFactoryType.widgetGeoRequiredProducts(for:)(v29, v30, v31);
  WeatherDataRequestOptions.locationOptions.getter(v32);
  v33 = type metadata accessor for WeatherRequestLocationOptions(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14, 1, v33) == 1)
  {
    sub_10002F014(v14, &qword_1001C4688);
    v34 = 0;
    v35 = 1;
  }
  else
  {
    v34 = WeatherRequestLocationOptions.decimalPrecision.getter();
    v35 = v36 & 1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v14, v33);
  }
  Strong = swift_unknownObjectWeakLoadStrong(v78 + 8);
  if (Strong)
  {
    v38 = (void *)Strong;
    v39 = sub_1000679DC();

    v40 = v39 & 1;
  }
  else
  {
    v40 = 2;
  }
  WeatherServiceLocationOptions.init(decimalPrecision:limitsPrecision:)(v34, v35, v40);
  sub_1000168D8((uint64_t)v29, (uint64_t)v26, &qword_1001C0F18);
  v41 = v18;
  v64 = v18;
  v65 = v15;
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v43 = v66;
  v44 = v68;
  v42(v66, v41, v68);
  v45 = _s13WeatherWidget20WeatherDataViewModelOwst_0(v43, 0, 1, v44);
  v46 = WeatherDataRequestOptions.treatmentIdentifiers.getter(v45);
  v47 = type metadata accessor for WeatherNetworkActivity(0);
  v48 = v71;
  v49 = _s13WeatherWidget20WeatherDataViewModelOwst_0(v71, 1, 1, v47);
  v50 = WeatherDataRequestOptions.needsTwilightData.getter(v49);
  v79 = &_swiftEmptyArrayStorage;
  v51 = sub_100102B6C();
  v52 = sub_100005D40(&qword_1001C3218);
  v53 = sub_1000CCE4C();
  v54 = v73;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v52, v53, v72, v51);
  LOBYTE(v62) = v50 & 1;
  v55 = v74;
  v56 = WeatherServiceFetchOptions.init(countryCode:timeZone:locationOptions:cachingOptions:treatmentIdentifiers:networkActivity:needsMarineData:needsTwilightData:)(0, 0, v26, v43, v54, v46, v48, 0, v62);
  __chkstk_darwin(v56);
  v57 = v77;
  *(&v64 - 4) = (uint64_t)v78;
  *(&v64 - 3) = v57;
  v58 = v67;
  v62 = v67;
  v63 = v55;
  v59 = sub_100005D40(&qword_1001C4690);
  swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
  v60 = Promise.init(resolver:)(sub_100102BAC, &v64 - 6);
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v44);
  sub_10002F014((uint64_t)v29, &qword_1001C0F18);
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v55, v76);
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v58, v70);
  return v60;
}

uint64_t sub_1001014D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v88 = a8;
  v69 = a5;
  v70 = a2;
  v71 = a4;
  v72 = a1;
  v73 = a3;
  v9 = sub_100005D40(&qword_1001C4698);
  v89 = *(_QWORD *)(v9 - 8);
  v90 = v9;
  __chkstk_darwin(v9);
  v62 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005D40(&qword_1001C31B8);
  v86 = *(_QWORD *)(v11 - 8);
  v87 = v11;
  __chkstk_darwin(v11);
  v63 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005D40(&qword_1001C31C0);
  v84 = *(_QWORD *)(v13 - 8);
  v85 = v13;
  __chkstk_darwin(v13);
  v64 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005D40(&qword_1001C31C8);
  v82 = *(_QWORD *)(v15 - 8);
  v83 = v15;
  __chkstk_darwin(v15);
  v65 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005D40(&qword_1001C31D0);
  v80 = *(_QWORD *)(v17 - 8);
  v81 = v17;
  __chkstk_darwin(v17);
  v66 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100005D40(&qword_1001C31F0);
  v78 = *(_QWORD *)(v19 - 8);
  v79 = v19;
  __chkstk_darwin(v19);
  v67 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100005D40(&qword_1001C31D8);
  v76 = *(_QWORD *)(v21 - 8);
  v77 = v21;
  __chkstk_darwin(v21);
  v68 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100005D40(&qword_1001C31E0);
  v74 = *(_QWORD *)(v23 - 8);
  v75 = v23;
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = *(_QWORD *)(v69 + 16);
  v27 = ProductRequirementsFactory.WidgetGeoRequiredProducts.current.getter(v24);
  v28 = ProductRequirementsFactory.WidgetGeoRequiredProducts.minutely.getter(v27);
  v29 = ProductRequirementsFactory.WidgetGeoRequiredProducts.hourly.getter(v28);
  v30 = ProductRequirementsFactory.WidgetGeoRequiredProducts.daily.getter(v29);
  v31 = ProductRequirementsFactory.WidgetGeoRequiredProducts.airQuality.getter(v30);
  v32 = ProductRequirementsFactory.WidgetGeoRequiredProducts.changes.getter(v31);
  v33 = ProductRequirementsFactory.WidgetGeoRequiredProducts.alerts.getter(v32);
  ProductRequirementsFactory.WidgetGeoRequiredProducts.locationInfo.getter(v33);
  v34 = (_QWORD *)swift_allocObject(&unk_1001B87B0, 56, 7);
  v36 = v71;
  v35 = v72;
  v34[2] = a6;
  v34[3] = v35;
  v37 = v70;
  v38 = v73;
  v34[4] = v70;
  v34[5] = v38;
  v34[6] = v36;
  v39 = type metadata accessor for CurrentWeather(0);
  v40 = a6;
  swift_retain(v37);
  swift_retain(v36);
  v41 = sub_100005D40(&qword_1001BF9E8);
  v42 = sub_100005D40(&qword_1001C2DF8);
  v43 = sub_100005D40(&qword_1001BF9D0);
  v44 = sub_100005D40(&qword_1001BFB60);
  v45 = sub_100005D40(&qword_1001BF9D8);
  v60 = sub_100005D40(&qword_1001C3228);
  v61 = type metadata accessor for LocationInfo(0);
  v58 = v44;
  v59 = v45;
  v56 = v42;
  v57 = v43;
  v55 = v41;
  v46 = v62;
  v47 = v40;
  v48 = v68;
  v49 = v67;
  v50 = v66;
  v51 = v65;
  v52 = v64;
  v53 = v63;
  WeatherService.fetchWeather<A, B, C, D, E, F, G, H>(for:including:_:_:_:_:_:_:_:options:completion:)(v47, v26, v68, v67, v66, v65, v64, v63, v62, v88, sub_100102BEC, v34, v39, v55, v56, v57, v58, v59, v60,
    v61);
  swift_release(v34);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v46, v90);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v53, v87);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v52, v85);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v51, v83);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v50, v81);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v49, v79);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v48, v77);
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v26, v75);
}

void sub_100101978(uint64_t a1, char *a2, void (*a3)(char *), uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (**v64)(char *, void (*)(void), uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  void (*v89)(char *, char *, uint64_t);
  void (*v90)(uint64_t, uint64_t);
  void (*v91)(char *, uint64_t);
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, void (*)(void), uint64_t);
  uint64_t v118;
  void (*v119)(char *, void (*)(void), uint64_t);
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __n128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (**v159)(char *, char *, uint64_t);
  uint64_t v160;
  void (*v161)(char *, uint64_t);
  uint64_t v162;
  void (*v163)(char *, uint64_t);
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  void (**v192)(char *, char *, uint64_t);
  void (*v193)(uint64_t, uint64_t);
  void (*v194)(char *, uint64_t);
  uint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  void (*v201)(char *);
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  void (*v211)(char *, void (*)(void), uint64_t);
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  void (*v219)(char *, char *, uint64_t);
  char *v220;
  void (**v221)(char *, void (*)(void), uint64_t);
  void (*v222)(uint64_t, char *, uint64_t);
  void (*v223)(void);
  char *v224;
  char *v225;
  char *v226;
  uint64_t v227;

  v204 = a4;
  v201 = a3;
  v197 = a2;
  v7 = sub_100005D40(&qword_1001C46A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001BF0A0);
  __chkstk_darwin(v10);
  v198 = (char *)&v165 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = type metadata accessor for Date(0);
  v12 = __chkstk_darwin(v195);
  v196 = (char *)&v165 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v206 = (char *)&v165 - v14;
  v15 = type metadata accessor for Metadata(0);
  __chkstk_darwin(v15);
  v207 = (char *)&v165 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = type metadata accessor for LocationInfo(0);
  v202 = *(_QWORD *)(v203 - 8);
  __chkstk_darwin(v203);
  v209 = (char *)&v165 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)sub_100005D40(&qword_1001C46A8);
  v19 = __chkstk_darwin(v18);
  v200 = (char *)&v165 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v165 - v22;
  v24 = __chkstk_darwin(v21);
  v208 = (char *)&v165 - v25;
  v26 = __chkstk_darwin(v24);
  v212 = (char *)&v165 - v27;
  v28 = __chkstk_darwin(v26);
  v210 = (char *)&v165 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v165 - v30;
  v32 = sub_100005D40(&qword_1001C46B0);
  __chkstk_darwin(v32);
  v34 = (char **)((char *)&v165 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000168D8(a1, (uint64_t)v34, &qword_1001C46B0);
  if (swift_getEnumCaseMultiPayload(v34, v32) == 1)
  {
    v35 = *v34;
    a5(*v34);
    swift_errorRelease(v35);
  }
  else
  {
    v36 = v18[12];
    v37 = (uint64_t)&v31[v36];
    v224 = &v31[v36];
    v38 = v18[16];
    v190 = v9;
    v39 = &v31[v38];
    v40 = v18[20];
    v41 = &v31[v40];
    v42 = v18[24];
    v225 = &v31[v42];
    v43 = v18[28];
    v226 = &v31[v43];
    v44 = v18[36];
    v215 = &v31[v40];
    v216 = &v31[v44];
    v45 = (uint64_t)v34 + v36;
    v46 = (char *)v34 + v38;
    v47 = v18[32];
    v220 = &v31[v38];
    v221 = (void (**)(char *, void (*)(void), uint64_t))((char *)v34 + v40);
    v199 = v23;
    v48 = (uint64_t)v34 + v42;
    v222 = (void (*)(uint64_t, char *, uint64_t))((char *)v34 + v43);
    v223 = (void (*)(void))((char *)v34 + v44);
    v227 = type metadata accessor for CurrentWeather(0);
    v194 = *(void (**)(char *, uint64_t))(v227 - 8);
    (*((void (**)(char *, _QWORD *, uint64_t))v194 + 4))(v31, v34, v227);
    sub_1000168AC(v45, v37, &qword_1001BF9E8);
    v49 = sub_100005D40(&qword_1001C2DF8);
    v193 = *(void (**)(uint64_t, uint64_t))(v49 - 8);
    v50 = (void (*)(char *, char *))*((_QWORD *)v193 + 4);
    v51 = v46;
    v52 = v49;
    v205 = v49;
    v50(v39, v51);
    v213 = sub_100005D40(&qword_1001BF9D0);
    v192 = *(void (***)(char *, char *, uint64_t))(v213 - 8);
    v192[4](v41, (char *)v221, v213);
    sub_1000168AC(v48, (uint64_t)v225, &qword_1001BFB60);
    sub_1000168AC((uint64_t)v222, (uint64_t)v226, &qword_1001BF9D8);
    v53 = *(_QWORD *)((char *)v34 + v47);
    v217 = v31;
    v218 = v53;
    *(_QWORD *)&v31[v47] = v53;
    v214 = type metadata accessor for LocationInfo(0);
    v221 = *(void (***)(char *, void (*)(void), uint64_t))(v214 - 8);
    v54 = v216;
    v221[4](v216, v223, v214);
    v55 = v210;
    v189 = &v210[v18[12]];
    v56 = (uint64_t)v189;
    v188 = &v210[v18[16]];
    v57 = (uint64_t)v188;
    v187 = &v210[v18[20]];
    v58 = (uint64_t)v187;
    v186 = &v210[v18[24]];
    v59 = (uint64_t)v186;
    v191 = (uint64_t)&v210[v18[28]];
    v211 = (void (*)(char *, void (*)(void), uint64_t))v18[32];
    v60 = &v210[v18[36]];
    v223 = (void (*)(void))*((_QWORD *)v194 + 2);
    ((void (*)(char *, char *, uint64_t))v223)(v210, v31, v227);
    sub_1000168D8((uint64_t)v224, v56, &qword_1001BF9E8);
    v222 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v193 + 2);
    v61 = v220;
    v222(v57, v220, v52);
    v219 = v192[2];
    v62 = v215;
    v219((char *)v58, v215, v213);
    sub_1000168D8((uint64_t)v225, v59, &qword_1001BFB60);
    sub_1000168D8((uint64_t)v226, v191, &qword_1001BF9D8);
    v63 = v218;
    *(_QWORD *)((char *)v211 + (_QWORD)v55) = v218;
    v64 = v221;
    v211 = v221[2];
    v65 = v214;
    v211(v60, (void (*)(void))v54, v214);
    v66 = swift_bridgeObjectRetain(v63);
    LocationInfo.date.getter(v66);
    v221 = (void (**)(char *, void (*)(void), uint64_t))v64[1];
    ((void (*)(char *, uint64_t))v221)(v60, v65);
    v185 = &v212[v18[12]];
    v67 = (uint64_t)v185;
    v184 = (uint64_t)&v212[v18[16]];
    v68 = v184;
    v183 = &v212[v18[20]];
    v69 = v183;
    v182 = &v212[v18[24]];
    v70 = (uint64_t)v182;
    v71 = (uint64_t)&v212[v18[28]];
    v181 = v18[32];
    v72 = &v212[v18[36]];
    v223();
    sub_1000168D8((uint64_t)v224, v67, &qword_1001BF9E8);
    v73 = v205;
    v222(v68, v61, v205);
    v74 = v62;
    v75 = v213;
    v219(v69, v74, v213);
    sub_1000168D8((uint64_t)v225, v70, &qword_1001BFB60);
    sub_1000168D8((uint64_t)v226, v71, &qword_1001BF9D8);
    v76 = v212;
    *(_QWORD *)&v212[v181] = v63;
    v77 = v214;
    v78 = ((uint64_t (*)(char *, char *, uint64_t))v211)(v72, v216, v214);
    v79 = (uint64_t)v196;
    LocationInfo.expiration.getter(v78);
    ((void (*)(char *, uint64_t))v221)(v72, v77);
    v80 = (uint64_t)v198;
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v198, 1, 1, v195);
    v81 = v197;
    objc_msgSend(v197, "coordinate");
    v83 = v82;
    objc_msgSend(v81, "coordinate");
    v85 = v84;
    v86 = type metadata accessor for Metadata.Units(0);
    v87 = (uint64_t)v190;
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v190, 1, 1, v86);
    Metadata.init(readTime:expireTime:reportedTime:version:latitude:longitude:language:providerName:providerLogo:temporarilyUnavailable:units:attributionURL:)(v206, v79, v80, 1, 0, 0, 0, 0, v83, v85, 0, 0, 0, v87, 0, 0);
    sub_10002F014(v71, &qword_1001BF9D8);
    sub_10002F014((uint64_t)v182, &qword_1001BFB60);
    v88 = v192[1];
    ((void (*)(char *, uint64_t))v88)(v183, v75);
    v89 = v88;
    v192 = (void (**)(char *, char *, uint64_t))v88;
    v90 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v193 + 1);
    v90(v184, v73);
    v91 = (void (*)(char *, uint64_t))v90;
    v193 = v90;
    sub_10002F014((uint64_t)v185, &qword_1001BF9E8);
    v92 = (void (*)(char *, uint64_t))*((_QWORD *)v194 + 1);
    v93 = v227;
    v92(v76, v227);
    v194 = v92;
    sub_10002F014(v191, &qword_1001BF9D8);
    sub_10002F014((uint64_t)v186, &qword_1001BFB60);
    ((void (*)(char *, uint64_t))v89)(v187, v75);
    v94 = v73;
    v91(v188, v73);
    sub_10002F014((uint64_t)v189, &qword_1001BF9E8);
    v95 = v210;
    v92(v210, v93);
    v96 = v95;
    v206 = &v95[v18[12]];
    v97 = (uint64_t)v206;
    v198 = &v95[v18[16]];
    v98 = (uint64_t)v198;
    v197 = &v95[v18[20]];
    v99 = v197;
    v196 = &v95[v18[24]];
    v100 = (uint64_t)v196;
    v101 = (uint64_t)&v95[v18[28]];
    v195 = v101;
    v191 = v18[32];
    v102 = &v96[v18[36]];
    v103 = v96;
    v223();
    sub_1000168D8((uint64_t)v224, v97, &qword_1001BF9E8);
    v222(v98, v220, v94);
    v219(v99, v215, v213);
    sub_1000168D8((uint64_t)v225, v100, &qword_1001BFB60);
    sub_1000168D8((uint64_t)v226, v101, &qword_1001BF9D8);
    *(_QWORD *)&v103[v191] = v218;
    v104 = v216;
    v105 = v214;
    v106 = ((uint64_t (*)(char *, char *, uint64_t))v211)(v102, v216, v214);
    v186 = (char *)LocationInfo.primaryName.getter(v106);
    v185 = (char *)v107;
    ((void (*)(char *, uint64_t))v221)(v102, v105);
    v108 = v212;
    v191 = (uint64_t)&v212[v18[12]];
    v109 = v191;
    v190 = &v212[v18[16]];
    v110 = (uint64_t)v190;
    v189 = &v212[v18[20]];
    v111 = (uint64_t)v189;
    v188 = &v212[v18[24]];
    v112 = (uint64_t)v188;
    v187 = &v212[v18[28]];
    v113 = (uint64_t)v187;
    v184 = v18[32];
    v114 = &v212[v18[36]];
    ((void (*)(char *, char *, uint64_t))v223)(v212, v217, v227);
    sub_1000168D8((uint64_t)v224, v109, &qword_1001BF9E8);
    v115 = v110;
    v116 = v205;
    v222(v115, v220, v205);
    v219((char *)v111, v215, v213);
    sub_1000168D8((uint64_t)v225, v112, &qword_1001BFB60);
    sub_1000168D8((uint64_t)v226, v113, &qword_1001BF9D8);
    *(_QWORD *)&v108[v184] = v218;
    v117 = v211;
    v118 = ((uint64_t (*)(char *, char *, uint64_t))v211)(v114, v104, v105);
    v119 = v117;
    v179 = LocationInfo.secondaryName.getter(v118);
    v178 = v120;
    ((void (*)(char *, uint64_t))v221)(v114, v105);
    v121 = v208;
    v184 = (uint64_t)&v208[v18[12]];
    v122 = v184;
    v183 = &v208[v18[16]];
    v123 = v183;
    v182 = &v208[v18[20]];
    v124 = (uint64_t)v182;
    v181 = (uint64_t)&v208[v18[24]];
    v125 = v181;
    v180 = &v208[v18[28]];
    v126 = (uint64_t)v180;
    v177 = v18[32];
    v127 = &v208[v18[36]];
    ((void (*)(char *, char *, uint64_t))v223)(v208, v217, v227);
    sub_1000168D8((uint64_t)v224, v122, &qword_1001BF9E8);
    v128 = v116;
    v222((uint64_t)v123, v220, v116);
    v219((char *)v124, v215, v213);
    sub_1000168D8((uint64_t)v225, v125, &qword_1001BFB60);
    sub_1000168D8((uint64_t)v226, v126, &qword_1001BF9D8);
    *(_QWORD *)&v121[v177] = v218;
    v129 = v214;
    v130 = ((uint64_t (*)(char *, char *, uint64_t))v119)(v127, v216, v214);
    v174 = LocationInfo.preciseName.getter(v130);
    v173 = v131;
    ((void (*)(char *, uint64_t))v221)(v127, v129);
    v132 = v199;
    v177 = (uint64_t)&v199[v18[12]];
    v133 = v177;
    v176 = &v199[v18[16]];
    v134 = v176;
    v175 = &v199[v18[20]];
    v135 = v175;
    v172 = &v199[v18[24]];
    v136 = (uint64_t)v172;
    v171 = &v199[v18[28]];
    v137 = (uint64_t)v171;
    v170 = v18[32];
    v138 = &v199[v18[36]];
    v139 = (uint64_t)v217;
    ((void (*)(char *, char *, uint64_t))v223)(v199, v217, v227);
    sub_1000168D8((uint64_t)v224, v133, &qword_1001BF9E8);
    v222((uint64_t)v134, v220, v128);
    v140 = v213;
    v219(v135, v215, v213);
    sub_1000168D8((uint64_t)v225, v136, &qword_1001BFB60);
    sub_1000168D8((uint64_t)v226, v137, &qword_1001BF9D8);
    *(_QWORD *)&v132[v170] = v218;
    v141 = v214;
    v142 = ((uint64_t (*)(char *, char *, uint64_t))v211)(v138, v216, v214);
    v170 = LocationInfo.countryCode.getter(v142);
    v168 = v143;
    ((void (*)(char *, uint64_t))v221)(v138, v141);
    v144 = v200;
    v169 = &v200[v18[12]];
    v145 = (uint64_t)v169;
    v167 = &v200[v18[16]];
    v146 = v167;
    v147 = &v200[v18[20]];
    v148 = (uint64_t)&v200[v18[24]];
    v165 = &v200[v18[28]];
    v166 = v18[32];
    v149 = &v200[v18[36]];
    ((void (*)(char *, uint64_t, uint64_t))v223)(v200, v139, v227);
    sub_1000168D8((uint64_t)v224, v145, &qword_1001BF9E8);
    v222((uint64_t)v146, v220, v128);
    v150 = v147;
    v219(v147, v215, v140);
    v151 = v148;
    sub_1000168D8((uint64_t)v225, v148, &qword_1001BFB60);
    v152 = (uint64_t)v165;
    sub_1000168D8((uint64_t)v226, (uint64_t)v165, &qword_1001BF9D8);
    v153 = v218;
    *(_QWORD *)&v144[v166] = v218;
    v154 = v214;
    v211(v149, (void (*)(void))v216, v214);
    v155 = swift_bridgeObjectRelease(v153);
    v156 = LocationInfo.timeZone.getter(v155);
    v158 = v157;
    ((void (*)(char *, uint64_t))v221)(v149, v154);
    LocationInfo.init(metadata:primaryName:secondaryName:preciseName:countryCode:timeZone:)(v207, v186, v185, v179, v178, v174, v173, v170, v168, v156, v158);
    sub_10002F014(v152, &qword_1001BF9D8);
    sub_10002F014(v151, &qword_1001BFB60);
    v159 = v192;
    ((void (*)(char *, uint64_t))v192)(v150, v140);
    v160 = v205;
    v161 = (void (*)(char *, uint64_t))v193;
    v193((uint64_t)v167, v205);
    sub_10002F014((uint64_t)v169, &qword_1001BF9E8);
    v162 = v227;
    v163 = v194;
    v194(v144, v227);
    sub_10002F014((uint64_t)v171, &qword_1001BF9D8);
    sub_10002F014((uint64_t)v172, &qword_1001BFB60);
    ((void (*)(char *, uint64_t))v159)(v175, v140);
    v161(v176, v160);
    sub_10002F014(v177, &qword_1001BF9E8);
    v163(v199, v162);
    sub_10002F014((uint64_t)v180, &qword_1001BF9D8);
    sub_10002F014(v181, &qword_1001BFB60);
    ((void (*)(char *, uint64_t))v159)(v182, v140);
    v161(v183, v160);
    sub_10002F014(v184, &qword_1001BF9E8);
    v163(v208, v162);
    sub_10002F014((uint64_t)v187, &qword_1001BF9D8);
    sub_10002F014((uint64_t)v188, &qword_1001BFB60);
    ((void (*)(char *, uint64_t))v159)(v189, v140);
    v161(v190, v160);
    sub_10002F014(v191, &qword_1001BF9E8);
    v163(v212, v162);
    sub_10002F014(v195, &qword_1001BF9D8);
    sub_10002F014((uint64_t)v196, &qword_1001BFB60);
    ((void (*)(char *, uint64_t))v159)(v197, v140);
    v161(v198, v160);
    sub_10002F014((uint64_t)v206, &qword_1001BF9E8);
    v163(v210, v162);
    v164 = v209;
    v201(v209);
    (*(void (**)(char *, uint64_t))(v202 + 8))(v164, v203);
    sub_10002F014((uint64_t)v217, &qword_1001C46A8);
  }
}

uint64_t sub_100102B4C(uint64_t a1, uint64_t a2)
{
  return sub_100101070(a1, a2);
}

unint64_t sub_100102B6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C3210;
  if (!qword_1001C3210)
  {
    v1 = type metadata accessor for WeatherServiceCaching.Options(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WeatherServiceCaching.Options, v1);
    atomic_store(result, (unint64_t *)&qword_1001C3210);
  }
  return result;
}

uint64_t sub_100102BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1001014D8(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(void **)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t sub_100102BB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100102BEC(uint64_t a1)
{
  uint64_t v1;

  sub_100101978(a1, *(char **)(v1 + 16), *(void (**)(char *))(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(_QWORD))(v1 + 40));
}

void sub_100102BFC(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  NSObject *v155;
  os_log_type_t v156;
  _BOOL4 v157;
  uint8_t *v158;
  void *v159;
  uint64_t v160;
  unint64_t v161;
  id v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(uint64_t, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t (*v174)(uint64_t, _QWORD);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint8_t *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  NSObject *v184;
  os_log_type_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  Swift::Bool v189;
  char v190;
  uint64_t v191;
  unint64_t v192;
  unsigned __int16 v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  int *v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  char v202;
  _QWORD *v203;
  unint64_t v204;
  uint64_t **v205;
  void (*v206)(uint64_t, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  Swift::Bool v217;
  char v218;
  uint64_t v219;
  unint64_t v220;
  unsigned __int16 v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  int *v225;
  uint64_t v226;
  void (*v227)(uint64_t, uint64_t, uint64_t);
  char v228;
  uint64_t *v229;
  char v230;
  uint64_t v231;
  int *v232;
  void (*v233)(uint64_t, uint64_t);
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  double v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int *v258;
  uint64_t (*v259)(uint64_t, uint64_t);
  uint64_t v260;
  uint64_t (*v261)(uint64_t, _QWORD);
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void (*v265)(uint64_t, _QWORD, uint64_t);
  uint64_t v266;
  uint64_t v267;
  uint64_t (*v268)(uint64_t, uint64_t, _QWORD);
  uint64_t v269;
  uint64_t (*v270)(uint64_t, uint64_t, _QWORD);
  uint64_t v271;
  uint64_t (*v272)(uint64_t, uint64_t, _QWORD);
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t (*v284)(uint64_t, uint64_t);
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t (*v290)(uint64_t, uint64_t);
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  double v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char v311;
  uint64_t (*v312)(uint64_t, uint64_t);
  uint64_t v313;
  int *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t (*v317)(uint64_t, uint64_t, _QWORD);
  uint64_t v318;
  uint64_t (*v319)(uint64_t, uint64_t, _QWORD);
  uint64_t v320;
  uint64_t (*v321)(uint64_t, uint64_t, _QWORD);
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char v329;
  Swift::Bool v330;
  uint64_t v331;
  char v332;
  uint64_t v333;
  uint64_t v334;
  unsigned __int16 v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int *v339;
  uint64_t v340;
  uint64_t v341;
  void (*v342)(uint64_t, uint64_t, uint64_t);
  Swift::String v343;
  __n128 v344;
  uint64_t v345;
  char v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  int *v350;
  uint64_t (*v351)(uint64_t, uint64_t);
  uint64_t v352;
  uint64_t v353;
  uint64_t (*v354)(uint64_t, _QWORD);
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  double v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t (*v380)(uint64_t, _QWORD);
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t (*v387)(uint64_t, _QWORD);
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  void (*v391)(uint64_t, uint64_t, uint64_t);
  uint64_t v392;
  void (*v393)(uint64_t, uint64_t, uint64_t);
  uint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t (*v398)(uint64_t, uint64_t, _QWORD);
  uint64_t v399;
  uint64_t (*v400)(uint64_t, uint64_t, _QWORD);
  uint64_t v401;
  uint64_t (*v402)(uint64_t, uint64_t, _QWORD);
  void *v403;
  os_log_type_t v404;
  _BOOL4 v405;
  uint64_t v406;
  uint64_t v407;
  _WORD *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411[10];
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  _QWORD v431[3];
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  _QWORD v439[5];
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444[3];
  uint64_t v445;
  uint64_t v446;
  char v447[8];
  uint64_t v448[2];
  _QWORD v449[13];
  uint64_t v450;
  uint64_t v451;
  int *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  _QWORD v456[4];
  uint64_t v457;
  uint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  char v461[8];
  uint64_t v462;
  uint64_t (*v463)(uint64_t, uint64_t);
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  _QWORD v467[3];
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  id v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  char v480[8];
  uint64_t v481;
  _QWORD v482[3];
  char v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;

  v464 = a3;
  v463 = a2;
  v474 = a1;
  v5 = type metadata accessor for HourWeather(0);
  sub_10002886C(v5, (uint64_t)v449);
  v432 = v6;
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_1000230E0();
  sub_100023440(v8);
  sub_100005D40(&qword_1001C2DF8);
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_1000230E0();
  sub_100023440(v10);
  sub_100005D40(&qword_1001BFB60);
  sub_1000230F4();
  __chkstk_darwin(v11);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v12);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v13);
  sub_100023434();
  v15 = sub_1000232E8(v14);
  v16 = type metadata accessor for Wind(v15);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v18);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v19);
  sub_100023434();
  v21 = sub_1000232E8(v20);
  v22 = type metadata accessor for UVIndex(v21);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v24);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v25);
  sub_100023434();
  v27 = sub_1000232E8(v26);
  v28 = type metadata accessor for SunEvents(v27);
  sub_10002886C(v28, (uint64_t)&v486);
  v467[0] = v29;
  sub_1000230F4();
  __chkstk_darwin(v30);
  sub_1000230E0();
  sub_100023440(v31);
  sub_100005D40(&qword_1001BF0A0);
  sub_1000230F4();
  __chkstk_darwin(v32);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v33);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v34);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v35);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v36);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v37);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v38);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v39);
  sub_100023434();
  v41 = sub_1000232E8(v40);
  v42 = type metadata accessor for CloudAltitudeKind(v41);
  v456[0] = *(_QWORD *)(v42 - 8);
  sub_1000230F4();
  __chkstk_darwin(v43);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v44);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v45);
  sub_100023434();
  sub_100023440(v46);
  sub_100005D40(&qword_1001BF098);
  sub_1000230F4();
  __chkstk_darwin(v47);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v48);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v49);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v50);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v51);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v52);
  sub_100023434();
  sub_100023440(v53);
  v470 = sub_100005D40(&qword_1001BF090);
  v451 = *(_QWORD *)(v470 - 8);
  sub_1000230F4();
  __chkstk_darwin(v54);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v55);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v56);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v57);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v58);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v59);
  sub_100023434();
  v61 = sub_1000232E8(v60);
  v62 = type metadata accessor for WeatherMetadata(v61);
  sub_10002886C(v62, (uint64_t)v482);
  v455 = v63;
  sub_1000230F4();
  __chkstk_darwin(v64);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v65);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v66);
  sub_100023434();
  v68 = sub_1000232E8(v67);
  v69 = type metadata accessor for UUID(v68);
  sub_10002886C(v69, (uint64_t)&v476);
  v450 = v70;
  sub_1000230F4();
  __chkstk_darwin(v71);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v72);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v73);
  sub_100023434();
  v75 = sub_1000232E8(v74);
  v76 = type metadata accessor for WeatherCondition(v75);
  sub_10002886C(v76, (uint64_t)v480);
  v453 = v77;
  sub_1000230F4();
  __chkstk_darwin(v78);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v79);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v80);
  sub_100023434();
  v82 = sub_1000232E8(v81);
  v83 = type metadata accessor for ConditionViewModel(v82);
  sub_10002886C(v83, (uint64_t)&v478);
  sub_1000230F4();
  __chkstk_darwin(v84);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v85);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v86);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v87);
  sub_1000232B4();
  v469 = v88;
  sub_100023164();
  __chkstk_darwin(v89);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v90);
  sub_100023434();
  v92 = sub_1000232E8(v91);
  v478 = type metadata accessor for Date(v92);
  v473 = *(_QWORD *)(v478 - 8);
  sub_1000230F4();
  __chkstk_darwin(v93);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v94);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v95);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v96);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v97);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v98);
  sub_1000232B4();
  v468 = v99;
  sub_100023164();
  __chkstk_darwin(v100);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v101);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v102);
  sub_100023434();
  sub_100023440(v103);
  v104 = sub_100005D40(&qword_1001BF9D0);
  sub_10002886C(v104, (uint64_t)&v484);
  v460 = v105;
  sub_1000230F4();
  __chkstk_darwin(v106);
  v108 = (uint64_t *)((char *)v411 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100005D40(&qword_1001C2E18);
  sub_1000230F4();
  __chkstk_darwin(v109);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v110);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v111);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v112);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v113);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v114);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v115);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v116);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v117);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v118);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v119);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v120);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v121);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v122);
  sub_1000232B4();
  sub_10002875C();
  v124 = __chkstk_darwin(v123);
  sub_100105EDC(v124, v125, v126, v127, v128, v129, v130, v131, v411[0]);
  v475 = type metadata accessor for CurrentWeather(0);
  v472 = *(_QWORD *)(v475 - 8);
  sub_1000230F4();
  __chkstk_darwin(v132);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v133);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v134);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v135);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v136);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v137);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v138);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v139);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v140);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v141);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v142);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v143);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v144);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v145);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v146);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v147);
  sub_100023434();
  v476 = v148;
  v149 = sub_100105F10();
  v150 = static UnitManager.standard.getter(v149);
  v151 = (void *)UnitManager.temperature.getter();
  swift_release(v150);
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v152 = type metadata accessor for Logger(0);
  v153 = sub_100025184(v152, (uint64_t)qword_1001D9FF0);
  v154 = v151;
  v467[2] = v153;
  v155 = Logger.logObject.getter(v154);
  v156 = static os_log_type_t.default.getter(v155);
  v157 = os_log_type_enabled(v155, v156);
  v459 = a4;
  v458 = v16;
  v457 = v17;
  v456[3] = v22;
  v456[2] = v23;
  v456[1] = v42;
  v471 = v154;
  if (v157)
  {
    v158 = (uint8_t *)sub_100025358(12);
    v159 = v154;
    v160 = sub_100025358(32);
    v481 = v160;
    *(_DWORD *)v158 = 136446210;
    v479 = (uint64_t)v159;
    v161 = sub_10001EB28();
    v162 = v159;
    a4 = &v479;
    v163 = String.init<A>(reflecting:)(&v479, v161);
    v165 = v164;
    v479 = sub_10016EC84(v163, v164, &v481);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v479, v480, v158 + 4);

    swift_bridgeObjectRelease(v165);
    _os_log_impl((void *)&_mh_execute_header, v155, v156, "Building current weather model from aggregate weather. - unit: %{public}s", v158, 0xCu);
    sub_100105DEC();
    sub_10002534C(v160);
    sub_10002534C((uint64_t)v158);

  }
  else
  {

  }
  v167 = v474;
  v168 = WeatherDataModel.currentWeather.getter(v166);
  WeatherDataModel.dailyForecast.getter(v168);
  v169 = v462;
  sub_100105F28();
  v170 = v477;
  Forecast<>.todaysWeather(today:timeZone:)(v169, v463);
  v171 = *(void (**)(uint64_t, uint64_t))(v473 + 8);
  v172 = v478;
  v171(v169, v478);
  v173 = sub_1000CD450();
  v175 = sub_100028948(v173, v174);
  v176 = v464;
  if (!v464)
  {
    v187 = v422;
    v188 = CurrentWeather.condition.getter(v175);
    v189 = CurrentWeather.isDaylight.getter(v188) & 1;
    WeatherCondition.conditionIconName(isDaytime:)(v189);
    sub_100105F1C();
    v194 = v193 | 0x6E61636972720000;
    if (v190)
      v195 = v194;
    else
      v195 = v191;
    v196 = 0xE900000000000065;
    if (!v190)
      v196 = v192;
    v468 = v196;
    v469 = v195;
    sub_100105DA8();
    UUID.init()(v197);
    v198 = v452;
    v199 = v453;
    v200 = v454;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v453 + 16))(v167 + v452[5], v187, v454);
    WeatherCondition.description(isDaylight:)(v189);
    v201 = sub_100105F90();
    v202 = WeatherCondition.iconHasRain.getter();
    v203 = (_QWORD *)(v167 + v198[6]);
    v204 = v468;
    *v203 = v469;
    v203[1] = v204;
    v205 = (uint64_t **)(v167 + v198[7]);
    *v205 = a4;
    v205[1] = v108;
    *(_BYTE *)(v167 + v198[8]) = v189;
    *(_BYTE *)(v167 + v198[9]) = v201 & 1;
    *(_BYTE *)(v167 + v198[10]) = v202 & 1;
    v206 = *(void (**)(uint64_t, uint64_t))(v199 + 8);
    v207 = v477;
    v206(v187, v200);
    sub_100105E90();
    v208 = v417;
    sub_100105D34();
    sub_100105E98();
    v209 = v208;
    v210 = v475;
    sub_100105CA0(v209);
    sub_100105F34();
    sub_100105D34();
    sub_100105E5C();
    sub_100105CA0((uint64_t)v108);
    sub_100105EB0();
    sub_100028948((uint64_t)a4, *(uint64_t (**)(uint64_t, _QWORD))(v455 + 8));
    v211 = v418;
    sub_100105D34();
    sub_100105EBC();
    sub_100105CA0(v211);
    v212 = v419;
    sub_100105D34();
    sub_100105EA4();
    sub_100105CA0(v212);
    v469 = sub_100105EFC();
    v214 = v213;
    sub_100105F04(v207, (uint64_t)v439);
    sub_100105F48();
    sub_10002312C(v167);
    if (v190)
    {
      sub_10002F014(v167, &qword_1001C2E18);
      v285 = 1;
      v286 = v470;
      v287 = v445;
      v283 = v444[2];
    }
    else
    {
      sub_100105DC4();
      v283 = v210;
      sub_100105EF0();
      sub_100028858(v167, v284);
      v285 = 0;
      v286 = v470;
      v287 = v445;
    }
    v288 = v421;
    sub_100105C94(v283, v285);
    sub_100105BF4(v207, v288);
    v289 = sub_10002312C(v288);
    if (v190)
    {
      sub_10002F014(v288, &qword_1001C2E18);
      v291 = 1;
    }
    else
    {
      DayWeather.lowTemperature.getter(v289);
      sub_100105EF0();
      sub_100028858(v288, v290);
      v291 = 0;
    }
    sub_100105C94(v287, v291);
    sub_100105F88(v465, (uint64_t)v456);
    v292 = v420;
    v293 = sub_100105D34();
    v294 = CurrentWeather.cloudCover.getter(v293);
    sub_100105CA0(v292);
    sub_100105DA8();
    sub_100105D34();
    sub_100105ED0();
    sub_100105CA0(v286);
    v295 = v423;
    sub_100105CA8(v207);
    v296 = sub_10002312C(v295);
    if (v190)
    {
      sub_100105CB0(v296, &qword_1001C2E18);
      sub_100105D80((uint64_t)&v460);
    }
    else
    {
      sub_100105D0C();
      v297 = sub_100105C58();
      SunEvents.sunrise.getter(v297);
      sub_100105C6C();
    }
    v298 = v424;
    sub_100105CA8(v207);
    v299 = sub_10002312C(v298);
    if (v190)
    {
      sub_100105CB0(v299, &qword_1001C2E18);
      v301 = sub_100105D80((uint64_t)v461);
    }
    else
    {
      sub_100105D0C();
      v300 = sub_100105C58();
      SunEvents.sunset.getter(v300);
      v301 = sub_100105C6C();
    }
    v302 = v425;
    CurrentWeather.uvIndex.getter(v301);
    v303 = sub_100105EC8();
    v304 = CurrentWeather.humidity.getter(v303);
    v306 = v305;
    WeatherDataModel.airQuality.getter(v304);
    sub_100105F40();
    sub_10002312C(v302);
    if (v190)
    {
      sub_100105E0C((uint64_t)&v485);
      sub_10002F014(v302, &qword_1001BFB60);
      v307 = 0;
      v308 = 0;
      v309 = 0;
      v310 = 0;
      v311 = 0;
    }
    else
    {
      sub_100105924((uint64_t)&v481);
      v307 = v481;
      v308 = v482[0];
      v309 = v482[1];
      v310 = v482[2];
      v311 = v483;
      sub_100105E0C((uint64_t)&v485);
      sub_100105EF0();
      sub_100028858(v302, v312);
    }
    v313 = (uint64_t)v459;
    sub_100028948((uint64_t)v459, *(uint64_t (**)(uint64_t, _QWORD))(v450 + 32));
    v314 = (int *)sub_1000A7264();
    sub_100105D3C(v313 + v314[5], v442);
    sub_100105D3C(v313 + v314[6], v443);
    sub_100105D3C(v313 + v314[7], v444[0]);
    sub_100105D3C(v313 + v314[8], v444[1]);
    v315 = (_QWORD *)(v313 + v314[9]);
    *v315 = v469;
    v315[1] = v214;
    sub_100105C4C(v313 + v314[10], (uint64_t)&v457);
    sub_100105C4C(v313 + v314[11], (uint64_t)&v458);
    sub_100105F50(v313 + v314[12], (uint64_t)v456);
    *(double *)(v313 + v314[13]) = v294;
    sub_100105CB8();
    sub_1000CD5C8(v316, v446, v317);
    sub_100105C4C(v313 + v314[15], (uint64_t)&v460);
    sub_100105C4C(v313 + v314[16], (uint64_t)v461);
    sub_100105CB8();
    sub_1000CD5C8(v318, v448[0], v319);
    sub_100105CB8();
    v322 = sub_1000CD5C8(v320, v448[1], v321);
    *(_QWORD *)(v313 + v314[19]) = v306;
    v323 = v313 + v314[20];
    *(_QWORD *)v323 = v307;
    *(_QWORD *)(v323 + 8) = v308;
    *(_QWORD *)(v323 + 16) = v309;
    *(_QWORD *)(v323 + 24) = v310;
    *(_BYTE *)(v323 + 32) = v311;
    goto LABEL_84;
  }
  v177 = v468;
  v178 = sub_100105F28();
  v179 = WeatherDataModel.hourlyForecast.getter(v178);
  v180 = (uint8_t *)v411;
  __chkstk_darwin(v179);
  v411[-2] = v177;
  v181 = 0;
  v182 = sub_10010522C((uint64_t (*)(char *))sub_100105BD8, (uint64_t)&v411[-4]);
  v183 = *((_QWORD *)v182 + 2);
  v463 = (uint64_t (*)(uint64_t, uint64_t))v171;
  if (v183)
  {
    if (v183 >= v176)
    {
      v275 = v176 - 1;
      if (__OFSUB__(v176, 1))
      {
        __break(1u);
      }
      else
      {
        v276 = v416;
        v277 = v415;
        v278 = v414;
        if (v275 < v183)
        {
          sub_1000CD5C8(v441, (uint64_t)&v182[((*(unsigned __int8 *)(v432 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v432 + 80))+ *(_QWORD *)(v432 + 72) * v275], *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v432 + 16));
          v279 = sub_1000287D8();
          v280 = HourWeather.condition.getter(v279);
          HourWeather.date.getter(v280);
          sub_100105BF4(v170, v278);
          v281 = sub_100105F48();
          v282 = sub_10002879C(v278, 1, v281);
          if (v190)
          {
            sub_10002F014(v278, &qword_1001C2E18);
            sub_100105E74(v276);
          }
          else
          {
            DayWeather.sun.getter(v282);
            v324 = sub_100105E6C(v278, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v281 - 8) + 8));
            SunEvents.sunrise.getter(v324);
            sub_100105C6C();
          }
          v325 = v411[1];
          sub_100105CA8(v170);
          v326 = sub_10002879C(v325, 1, v281);
          v464 = v281;
          if (v190)
          {
            sub_100105CB0(v326, &qword_1001C2E18);
            v328 = v412;
            sub_100105E74(v412);
          }
          else
          {
            sub_100105D0C();
            v327 = sub_100105E6C(v325, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v281 - 8) + 8));
            v328 = v412;
            SunEvents.sunset.getter(v327);
            sub_100105C6C();
          }
          v329 = Date.isDaytime(sunrise:sunset:)(v276, v328);
          sub_10002F014(v328, &qword_1001BF0A0);
          sub_10002F014(v276, &qword_1001BF0A0);
          v171(v277, v172);
          v330 = v329 & 1;
          v331 = v426;
          WeatherCondition.conditionIconName(isDaytime:)(v330);
          sub_100105F1C();
          v336 = v335 | 0x6E61636972720000;
          if (!v332)
            v336 = v333;
          v469 = v336;
          if (v332)
            v337 = 0xE900000000000065;
          else
            v337 = v334;
          v338 = v440;
          UUID.init()(v333);
          v339 = v452;
          v340 = sub_100105F58(v452[5]);
          v341 = v454;
          v342(v340, v331, v454);
          v343 = WeatherCondition.description(isDaylight:)(v330);
          v345 = WeatherCondition.isPrecipitation.getter(v344);
          v346 = WeatherCondition.iconHasRain.getter();
          v347 = (_QWORD *)(v338 + v339[6]);
          *v347 = v469;
          v347[1] = v337;
          *(Swift::String *)(v338 + v339[7]) = v343;
          *(_BYTE *)(v338 + v339[8]) = v330;
          *(_BYTE *)(v338 + v339[9]) = v345 & 1;
          *(_BYTE *)(v338 + v339[10]) = v346 & 1;
          (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v331, v341);
          v348 = sub_100105E90();
          v349 = v441;
          HourWeather.date.getter(v348);
          sub_100105DA8();
          v350 = (int *)v474;
          sub_100105F6C();
          sub_100105F34();
          CurrentWeather.metadata.getter();
          v351 = *(uint64_t (**)(uint64_t, uint64_t))(v472 + 8);
          v352 = v351(v345, v475);
          WeatherMetadata.expirationDate.getter(v352);
          v353 = sub_1000CD450();
          v355 = sub_100028948(v353, v354);
          v356 = HourWeather.temperature.getter(v355);
          HourWeather.apparentTemperature.getter(v356);
          v469 = sub_100105EFC();
          v465 = v357;
          v358 = v477;
          sub_100105F04(v477, (uint64_t)v431);
          v359 = v464;
          sub_10002879C(v345, 1, v464);
          if (v190)
          {
            sub_10002F014(v345, &qword_1001C2E18);
            sub_100105E2C();
            v360 = v431[0];
          }
          else
          {
            sub_100105DC4();
            v360 = v349;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v359 - 8) + 8))(v345, v359);
            sub_100105E2C();
          }
          v362 = v411[6];
          sub_100105C94(v360, v361);
          sub_100105BF4(v358, v362);
          v363 = sub_10002879C(v362, 1, v349);
          if (v190)
          {
            sub_10002F014(v362, &qword_1001C2E18);
            v364 = 1;
          }
          else
          {
            DayWeather.lowTemperature.getter(v363);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v349 - 8) + 8))(v362, v349);
            v364 = 0;
          }
          sub_100105C94(v337, v364);
          sub_100105F88(v440, (uint64_t)v444);
          sub_100105DA8();
          v365 = sub_100105F6C();
          v366 = CurrentWeather.cloudCover.getter(v365);
          v367 = v345;
          v368 = v475;
          v351(v367, v475);
          v369 = v411[5];
          v370 = sub_100105F6C();
          CurrentWeather.predominateCloudAltitudeKind.getter(v370);
          v351(v369, v368);
          v371 = v411[7];
          sub_100105CA8(v358);
          v372 = sub_10002879C(v371, 1, v349);
          if (v190)
          {
            sub_100105CB0(v372, &qword_1001C2E18);
            sub_100105D6C((uint64_t)v447);
          }
          else
          {
            v373 = v466;
            DayWeather.sun.getter(v372);
            v374 = sub_100070E74();
            SunEvents.sunrise.getter(v374);
            sub_100105C88(v373, *(uint64_t (**)(uint64_t, _QWORD))(v467[0] + 8));
          }
          v375 = v411[9];
          sub_100105CA8(v358);
          v376 = sub_10002879C(v375, 1, v349);
          if (v190)
          {
            sub_100105CB0(v376, &qword_1001C2E18);
            sub_100105D6C((uint64_t)v448);
          }
          else
          {
            sub_100105F34();
            DayWeather.sun.getter(v377);
            v378 = sub_100070E74();
            SunEvents.sunset.getter(v378);
            v379 = sub_1000CD450();
            sub_100105C88(v379, v380);
          }
          v381 = v413;
          sub_100105E84();
          v382 = sub_100105EC8();
          v383 = CurrentWeather.humidity.getter(v382);
          v384 = v350;
          WeatherDataModel.airQuality.getter(v383);
          v385 = sub_100105F40();
          sub_10002879C(v381, 1, v385);
          if (v190)
          {
            sub_100105E0C((uint64_t)&v452);
            sub_100028948(v441, *(uint64_t (**)(uint64_t, _QWORD))(v432 + 8));
            sub_10002F014(v381, &qword_1001BFB60);
            sub_100105DD4();
          }
          else
          {
            v384 = (int *)v381;
            sub_100105924((uint64_t)&v481);
            sub_100105E0C((uint64_t)&v452);
            sub_100028948(v441, *(uint64_t (**)(uint64_t, _QWORD))(v432 + 8));
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v385 - 8) + 8))(v381, v385);
          }
          v386 = sub_100105CC4();
          sub_100028948(v386, v387);
          v388 = sub_1000A7264();
          v389 = sub_100105F74(v388);
          v391 = *(void (**)(uint64_t, uint64_t, uint64_t))(v390 + 32);
          v392 = v478;
          v391(v389, v427, v478);
          v391(v369 + v384[6], v428, v392);
          v393 = *(void (**)(uint64_t, uint64_t, uint64_t))(v451 + 32);
          v394 = v470;
          v393(v369 + v384[7], v429, v470);
          v393(v369 + v384[8], v430, v394);
          v395 = (_QWORD *)(v369 + v384[9]);
          v396 = v465;
          *v395 = v469;
          v395[1] = v396;
          sub_100105C4C(v369 + v384[10], (uint64_t)&v445);
          sub_100105C4C(v369 + v384[11], (uint64_t)&v446);
          sub_100105F50(v369 + v384[12], (uint64_t)v444);
          *(double *)(v369 + v384[13]) = v366;
          sub_100105CB8();
          sub_1000CD5C8(v397, v431[2], v398);
          sub_100105C4C(v369 + v384[15], (uint64_t)v447);
          sub_100105C4C(v369 + v384[16], (uint64_t)v448);
          sub_100105CB8();
          sub_1000CD5C8(v399, v433, v400);
          sub_100105CB8();
          sub_1000CD5C8(v401, v434, v402);
          v273 = sub_100105CE8();
          v274 = v392;
          goto LABEL_83;
        }
      }
      __break(1u);
      return;
    }
    v184 = Logger.logObject.getter(v182);
    v185 = static os_log_type_t.error.getter();
    v181 = v185;
    if (os_log_type_enabled(v184, v185))
    {
      v180 = (uint8_t *)sub_100025358(2);
      *(_WORD *)v180 = 0;
      _os_log_impl((void *)&_mh_execute_header, v184, (os_log_type_t)v181, "Invalid hour entry - falling back to current conditions", v180, 2u);
      sub_10002534C((uint64_t)v180);
    }
    sub_1000287D8();

  }
  else
  {
    v186 = sub_1000287D8();
  }
  v215 = v439[3];
  v216 = CurrentWeather.condition.getter(v186);
  v217 = CurrentWeather.isDaylight.getter(v216) & 1;
  WeatherCondition.conditionIconName(isDaytime:)(v217);
  sub_100105F1C();
  v222 = v221 | 0x6E61636972720000;
  if (!v218)
    v222 = v219;
  v465 = v222;
  v223 = 0xE900000000000065;
  if (!v218)
    v223 = v220;
  v464 = v223;
  v224 = v469;
  UUID.init()(v219);
  v225 = v452;
  v226 = sub_100105F58(v452[5]);
  v227(v226, v215, v454);
  WeatherCondition.description(isDaylight:)(v217);
  v228 = sub_100105F90();
  WeatherCondition.iconHasRain.getter();
  sub_100105E14((_QWORD *)(v224 + v225[6]));
  v229 = (uint64_t *)(v224 + v225[7]);
  *v229 = v181;
  v229[1] = (uint64_t)v180;
  *(_BYTE *)(v224 + v225[8]) = v217;
  *(_BYTE *)(v224 + v225[9]) = v228 & 1;
  *(_BYTE *)(v224 + v225[10]) = v230 & 1;
  sub_100105E6C(v215, *(uint64_t (**)(uint64_t, uint64_t))(v172 + 8));
  sub_100105E90();
  v231 = v438;
  v232 = (int *)v474;
  sub_100105D2C();
  sub_100105E98();
  v233 = *(void (**)(uint64_t, uint64_t))(v472 + 8);
  sub_100105CA0(v231);
  sub_100105F34();
  sub_100105D2C();
  sub_100105E5C();
  sub_100105CA0((uint64_t)v180);
  sub_100105EB0();
  sub_100028948(v181, *(uint64_t (**)(uint64_t, _QWORD))(v455 + 8));
  sub_100105D1C();
  sub_100105EBC();
  sub_100105CA0(v181);
  sub_100105D1C();
  sub_100105EA4();
  sub_100105CA0(v181);
  v234 = sub_100105EFC();
  v236 = v235;
  v237 = v477;
  v238 = v439[0];
  sub_100105CA8(v477);
  sub_100105F48();
  v239 = sub_10002312C(v238);
  v465 = v234;
  v464 = v236;
  if (v190)
  {
    sub_100105CB0(v239, &qword_1001C2E18);
    sub_100105E44();
    v240 = v449[0];
  }
  else
  {
    v240 = v449[0];
    DayWeather.highTemperature.getter(v239);
    sub_100105C58();
    sub_100105E44();
  }
  v242 = v435;
  sub_100105C94(v240, v241);
  sub_100105CA8(v237);
  v243 = sub_10002312C(v242);
  if (v190)
  {
    sub_100105CB0(v243, &qword_1001C2E18);
    v244 = 1;
  }
  else
  {
    DayWeather.lowTemperature.getter(v243);
    sub_100105C58();
    v244 = 0;
  }
  sub_100105C94(v236, v244);
  sub_100105F88(v469, (uint64_t)&v469);
  v245 = sub_100105D1C();
  v246 = CurrentWeather.cloudCover.getter(v245);
  v247 = v236;
  v248 = v475;
  v233(v247, v475);
  sub_100105DA8();
  sub_100105D2C();
  sub_100105ED0();
  v233((uint64_t)v225, v248);
  v249 = v439[4];
  sub_100105CA8(v237);
  v250 = sub_10002312C(v249);
  if (v190)
  {
    sub_100105CB0(v250, &qword_1001C2E18);
    sub_100105D58((uint64_t)&v466);
  }
  else
  {
    sub_100105DFC();
    v251 = sub_100105C58();
    SunEvents.sunrise.getter(v251);
    sub_100105C88(v248, *(uint64_t (**)(uint64_t, _QWORD))(v467[0] + 8));
  }
  v252 = v436;
  sub_100105CA8(v237);
  v253 = sub_10002312C(v252);
  if (v190)
  {
    sub_100105CB0(v253, &qword_1001C2E18);
    sub_100105D58((uint64_t)v467);
  }
  else
  {
    sub_100105DFC();
    v254 = sub_100105C58();
    SunEvents.sunset.getter(v254);
    sub_100105C88(v248, *(uint64_t (**)(uint64_t, _QWORD))(v467[0] + 8));
  }
  v255 = v437;
  sub_100105E84();
  v256 = sub_100105EC8();
  v257 = CurrentWeather.humidity.getter(v256);
  v258 = v232;
  WeatherDataModel.airQuality.getter(v257);
  sub_100105F40();
  sub_10002312C(v255);
  if (v190)
  {
    sub_1000B86CC(v469);
    sub_10002F014(v255, &qword_1001BFB60);
    sub_100105DD4();
  }
  else
  {
    v258 = (int *)v255;
    sub_100105924((uint64_t)&v481);
    sub_1000B86CC(v469);
    sub_100105EF0();
    sub_100028858(v255, v259);
  }
  v260 = sub_100105CC4();
  sub_100028948(v260, v261);
  v262 = sub_1000A7264();
  v263 = sub_100105F74(v262);
  v265 = *(void (**)(uint64_t, _QWORD, uint64_t))(v264 + 32);
  v266 = v478;
  v265(v263, v449[4], v478);
  v265((uint64_t)v232 + v258[6], v449[5], v266);
  sub_100105D3C((uint64_t)v232 + v258[7], v449[8]);
  sub_100105D3C((uint64_t)v232 + v258[8], v449[9]);
  sub_100105E14((int *)((char *)v232 + v258[9]));
  sub_100105C4C((uint64_t)v232 + v258[10], (uint64_t)&v464);
  sub_100105C4C((uint64_t)v232 + v258[11], (uint64_t)&v465);
  sub_100105F50((uint64_t)v232 + v258[12], (uint64_t)&v469);
  *(double *)((char *)v232 + v258[13]) = v246;
  sub_100105CB8();
  sub_1000CD5C8(v267, v449[10], v268);
  sub_100105C4C((uint64_t)v232 + v258[15], (uint64_t)&v466);
  sub_100105C4C((uint64_t)v232 + v258[16], (uint64_t)v467);
  sub_100105CB8();
  sub_1000CD5C8(v269, v449[11], v270);
  sub_100105CB8();
  sub_1000CD5C8(v271, v449[12], v272);
  v273 = sub_100105CE8();
  v274 = v266;
LABEL_83:
  v322 = v463(v273, v274);
LABEL_84:
  v403 = (void *)Logger.logObject.getter(v322);
  v404 = static os_log_type_t.default.getter(v403);
  v405 = sub_100025374(v404);
  v407 = v476;
  v406 = v477;
  if (v405)
  {
    v408 = (_WORD *)sub_100025358(2);
    *v408 = 0;
    sub_100025360((void *)&_mh_execute_header, v409, v410, "Built current weather model from aggregate weather");
    sub_10002534C((uint64_t)v408);
  }

  sub_10002F014(v406, &qword_1001C2E18);
  (*(void (**)(uint64_t, uint64_t))(v472 + 8))(v407, v475);
  sub_1000CD1DC();
}

void sub_100104C94(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  Swift::Bool v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int16 v35;
  uint64_t v36;
  unint64_t v37;
  Swift::String v38;
  __n128 v39;
  char v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  void *v62;
  os_log_type_t v63;
  _WORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[2];

  v2 = type metadata accessor for WeatherMetadata(0);
  v74 = *(_QWORD *)(v2 - 8);
  v76 = v2;
  sub_1000230F4();
  __chkstk_darwin(v3);
  sub_1000230E0();
  v73 = v4;
  v84 = type metadata accessor for Date(0);
  v82 = *(_QWORD *)(v84 - 8);
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_100023150();
  v83 = v6;
  sub_100023164();
  __chkstk_darwin(v7);
  sub_100023434();
  v81 = v8;
  v9 = type metadata accessor for UUID(0);
  v79 = *(_QWORD *)(v9 - 8);
  v80 = v9;
  sub_1000230F4();
  __chkstk_darwin(v10);
  sub_1000230E0();
  v78 = v11;
  v12 = type metadata accessor for WeatherCondition(0);
  v70 = *(_QWORD *)(v12 - 8);
  v71 = v12;
  sub_1000230F4();
  __chkstk_darwin(v13);
  sub_1000935B0();
  v69 = (int *)type metadata accessor for ConditionViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v14);
  sub_1000230E0();
  v85 = v15;
  v16 = sub_100105F10();
  v17 = static UnitManager.standard.getter(v16);
  v18 = (void *)UnitManager.temperature.getter();
  swift_release(v17);
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v19 = type metadata accessor for Logger(0);
  sub_100025184(v19, (uint64_t)qword_1001D9FF0);
  v20 = v18;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)sub_100025358(12);
    v24 = sub_100025358(32);
    v86 = (uint64_t)v20;
    v87[0] = v24;
    *(_DWORD *)v23 = 136446210;
    v25 = sub_10001EB28();
    v26 = v20;
    v27 = String.init<A>(reflecting:)(&v86, v25);
    v29 = v28;
    v86 = sub_10016EC84(v27, v28, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v23 + 4);

    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Building current weather model from instant weather. - unit: %{public}s", v23, 0xCu);
    sub_100105DEC();
    sub_10002534C(v24);
    sub_10002534C((uint64_t)v23);

  }
  else
  {

  }
  v30 = InstantWeather.condition.getter();
  v31 = InstantWeather.isDaylight.getter(v30) & 1;
  WeatherCondition.conditionIconName(isDaytime:)(v31);
  sub_100105F1C();
  v36 = v35 | 0x6E61636972720000;
  if (!v32)
    v36 = v33;
  v68 = v36;
  v37 = 0xE900000000000065;
  if (!v32)
    v37 = v34;
  v67 = v37;
  UUID.init()(v33);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v85 + v69[5], v1, v71);
  v38 = WeatherCondition.description(isDaylight:)(v31);
  v40 = WeatherCondition.isPrecipitation.getter(v39);
  v41 = WeatherCondition.iconHasRain.getter();
  v42 = (uint64_t *)(v85 + v69[6]);
  *v42 = v68;
  v42[1] = v67;
  *(Swift::String *)(v85 + v69[7]) = v38;
  *(_BYTE *)(v85 + v69[8]) = v31;
  *(_BYTE *)(v85 + v69[9]) = v40 & 1;
  *(_BYTE *)(v85 + v69[10]) = v41 & 1;
  v43 = sub_100105E6C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v70 + 8));
  v44 = UUID.init()(v43);
  v45 = InstantWeather.date.getter(v44);
  v46 = InstantWeather.metadata.getter(v45);
  WeatherMetadata.expirationDate.getter(v46);
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v76);
  v47 = (int *)sub_1000A7264();
  v48 = InstantWeather.temperature.getter();
  InstantWeather.apparentTemperature.getter(v48);
  v49 = sub_100028958();
  v75 = v50;
  v77 = v49;
  InstantWeather.highTemperature.getter();
  sub_100005D40(&qword_1001BF090);
  v51 = sub_100105D44();
  InstantWeather.lowTemperature.getter(v51);
  sub_100105D44();
  v52 = sub_1000B8688(v85, a1 + v47[12]);
  v53 = InstantWeather.cloudCover.getter(v52);
  InstantWeather.predominateCloudAltitudeKind.getter();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(a1 + v47[15], 1, 1, v84);
  v54 = _s13WeatherWidget20WeatherDataViewModelOwst_0(a1 + v47[16], 1, 1, v84);
  v55 = InstantWeather.uvIndex.getter(v54);
  v56 = InstantWeather.wind.getter(v55);
  v57 = InstantWeather.humidity.getter(v56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 32))(a1, v78, v80);
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 32);
  v58(a1 + v47[5], v81, v84);
  v59 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v58)(a1 + v47[6], v83, v84);
  v60 = (uint64_t *)(a1 + v47[9]);
  *v60 = v77;
  v60[1] = v75;
  *(double *)(a1 + v47[13]) = v53;
  *(double *)(a1 + v47[19]) = v57;
  v61 = a1 + v47[20];
  *(_BYTE *)(v61 + 32) = 0;
  *(_OWORD *)v61 = 0u;
  *(_OWORD *)(v61 + 16) = 0u;
  v62 = (void *)Logger.logObject.getter(v59);
  v63 = static os_log_type_t.default.getter(v62);
  if (sub_100025374(v63))
  {
    v64 = (_WORD *)sub_100025358(2);
    *v64 = 0;
    sub_100025360((void *)&_mh_execute_header, v65, v66, "Built current weather model from instant weather");
    sub_10002534C((uint64_t)v64);
  }

  sub_1000B86CC(v85);
  sub_1000CD1DC();
}

char *sub_10010522C(uint64_t (*a1)(char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *, _QWORD);
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  char v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t (*v44)(char *);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[4];
  char *v49;

  v3 = v2;
  v44 = a1;
  v45 = a2;
  v4 = sub_100005D40(&qword_1001C2DF8);
  v43 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v42 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for HourWeather(0);
  v47 = *(_QWORD *)(v35 - 8);
  v6 = __chkstk_darwin(v35);
  v39 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v41 = (char *)&v34 - v9;
  __chkstk_darwin(v8);
  v40 = (char *)&v34 - v10;
  v11 = sub_100005D40(&qword_1001C2E20);
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (char *)_swiftEmptyArrayStorage;
  v49 = (char *)_swiftEmptyArrayStorage;
  sub_10004AFE0(&qword_1001C2E08, &qword_1001C2DF8, (uint64_t)&protocol conformance descriptor for Forecast<A>);
  dispatch thunk of Sequence.makeIterator()(v4, v15);
  v16 = &v13[*(int *)(v11 + 36)];
  sub_10004AFE0((unint64_t *)&qword_1001C2E28, &qword_1001C2DF8, (uint64_t)&protocol conformance descriptor for Forecast<A>);
  v18 = v17;
  v19 = *(_QWORD *)v16;
  dispatch thunk of Collection.endIndex.getter(v4, v17);
  if (v19 == v48[0])
  {
LABEL_14:
    sub_10002F014((uint64_t)v13, &qword_1001C2E20);
  }
  else
  {
    v20 = v35;
    v37 = v4;
    v38 = v13;
    v36 = v16;
    v14 = (char *)v47;
    while (1)
    {
      v46 = v3;
      v21 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v48, v16, v4, v18);
      v22 = v41;
      (*((void (**)(char *))v14 + 2))(v41);
      v21(v48, 0);
      v23 = v42;
      v24 = v43;
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v42, v13, v4);
      dispatch thunk of Collection.formIndex(after:)(v16, v4, v18);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v4);
      v25 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v14 + 4);
      v26 = v40;
      v25(v40, v22, v20);
      v27 = v46;
      v28 = v44(v26);
      v3 = v27;
      if (v27)
        break;
      if ((v28 & 1) != 0)
      {
        v25(v39, v26, v20);
        v29 = v49;
        if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
        {
          sub_1001228E0(0, *((_QWORD *)v29 + 2) + 1, 1);
          v29 = v49;
        }
        v31 = *((_QWORD *)v29 + 2);
        v30 = *((_QWORD *)v29 + 3);
        if (v31 >= v30 >> 1)
        {
          sub_1001228E0(v30 > 1, v31 + 1, 1);
          v29 = v49;
        }
        *((_QWORD *)v29 + 2) = v31 + 1;
        v20 = v35;
        v25(&v29[((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(_QWORD *)(v47 + 72) * v31], v39, v35);
        v49 = v29;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v26, v20);
      }
      v16 = v36;
      v4 = v37;
      v32 = *(_QWORD *)v36;
      v13 = v38;
      dispatch thunk of Collection.endIndex.getter(v37, v18);
      if (v32 == v48[0])
      {
        v14 = v49;
        goto LABEL_14;
      }
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v26, v20);
    sub_10002F014((uint64_t)v38, &qword_1001C2E20);
    swift_release(v49);
  }
  return v14;
}

_QWORD *sub_1001055F0(uint64_t (*a1)())
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *, _QWORD);
  char v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  _QWORD v45[4];
  _QWORD *v46;

  v3 = sub_100005D40(&qword_1001BF9D0);
  v42 = *(_QWORD *)(v3 - 8);
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_1000230E0();
  v41 = v5;
  v44 = *(_QWORD *)(type metadata accessor for DayWeather(0) - 8);
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_100023150();
  v38 = v7;
  sub_100023164();
  __chkstk_darwin(v8);
  sub_1000232B4();
  v40 = v9;
  sub_100023164();
  v11 = __chkstk_darwin(v10);
  sub_100105EDC(v11, v12, v13, v14, v15, v16, v17, v18, v34);
  v19 = sub_100005D40(&qword_1001C2E30);
  sub_1000230F4();
  __chkstk_darwin(v20);
  sub_1000935B0();
  v21 = _swiftEmptyArrayStorage;
  v46 = _swiftEmptyArrayStorage;
  sub_10004AFE0(&qword_1001C2E38, &qword_1001BF9D0, (uint64_t)&protocol conformance descriptor for Forecast<A>);
  dispatch thunk of Sequence.makeIterator()(v3, v22);
  v23 = (_QWORD *)(v2 + *(int *)(v19 + 36));
  sub_10004AFE0(&qword_1001C2E40, &qword_1001BF9D0, (uint64_t)&protocol conformance descriptor for Forecast<A>);
  v25 = v24;
  v26 = *v23;
  sub_100105DB4();
  if (v26 == v45[0])
  {
LABEL_14:
    sub_10002F014(v2, &qword_1001C2E30);
  }
  else
  {
    v36 = v3;
    v37 = v2;
    v35 = v23;
    v21 = (_QWORD *)v44;
    while (1)
    {
      v27 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v45, v23, v3, v25);
      (*(void (**)(uint64_t))(v44 + 16))(v40);
      v27(v45, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v41, v2, v3);
      dispatch thunk of Collection.formIndex(after:)(v23, v3, v25);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v3);
      sub_100105F9C(v39, v40);
      v28 = a1();
      if (v1)
        break;
      if ((v28 & 1) != 0)
      {
        sub_100105F9C(v38, v39);
        v29 = v46;
        if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
        {
          sub_100122914(0, v29[2] + 1, 1);
          v29 = v46;
        }
        v31 = v29[2];
        v30 = v29[3];
        if (v31 >= v30 >> 1)
        {
          sub_100122914(v30 > 1, v31 + 1, 1);
          v29 = v46;
        }
        v29[2] = v31 + 1;
        sub_100105F9C((uint64_t)v29+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(_QWORD *)(v44 + 72) * v31, v38);
        v46 = v29;
      }
      else
      {
        sub_100105D94();
      }
      v23 = v35;
      v3 = v36;
      v32 = *v35;
      v2 = v37;
      sub_100105DB4();
      if (v32 == v45[0])
      {
        v21 = v46;
        goto LABEL_14;
      }
    }
    sub_100105D94();
    sub_10002F014(v37, &qword_1001C2E30);
    swift_release(v46);
  }
  return v21;
}

uint64_t sub_100105924@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;

  v2 = v1;
  v4 = type metadata accessor for AirQuality(0);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v43 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AirQualityScaleCategory(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AirQualityScale(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v38 - v16;
  v18 = AirQuality.scale.getter(v15);
  v19 = AirQualityScale.isNumerical.getter(v18);
  v20 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  v21 = v20(v17, v10);
  v42 = v19;
  if ((v19 & 1) != 0)
  {
    v22 = AirQuality.index.getter(v21);
    v38 = 0;
    v39 = v22;
  }
  else
  {
    v23 = AirQuality.currentScaleCategory.getter(v21);
    v24 = AirQualityScaleCategory.description.getter(v23);
    v38 = v25;
    v39 = v24;
    v22 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v27 = v40;
  v26 = v41;
  v28 = AirQuality.scale.getter(v22);
  v29 = AirQualityScale.shortDisplayName.getter(v28);
  v31 = v30;
  v20(v14, v10);
  v32 = v43;
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 16))(v43, v2, v26);
  if (!v31)
  {
    v34 = AirQuality.scale.getter(v33);
    v29 = AirQualityScale.displayName.getter(v34);
    v31 = v35;
    v20(v17, v10);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v32, v26);
  *(_QWORD *)a1 = v29;
  *(_QWORD *)(a1 + 8) = v31;
  v37 = v38;
  *(_QWORD *)(a1 + 16) = v39;
  *(_QWORD *)(a1 + 24) = v37;
  *(_BYTE *)(a1 + 32) = (v42 & 1) == 0;
  return result;
}

uint64_t sub_100105B38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  HourWeather.date.getter(v5);
  v8 = static Date.> infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v8 & 1;
}

uint64_t sub_100105BD8(uint64_t a1)
{
  uint64_t v1;

  return sub_100105B38(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_100105BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001C2E18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for CurrentObservationViewModelFactory()
{
  return &type metadata for CurrentObservationViewModelFactory;
}

void sub_100105C4C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_100044F8C(*(_QWORD *)(a2 - 256), a1, v2);
}

uint64_t sub_100105C58()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_100105C6C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 272) + 8))(v0, *(_QWORD *)(v1 - 264));
}

uint64_t sub_100105C88@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 264));
}

uint64_t sub_100105C94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, 1, v2);
}

uint64_t sub_100105CA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_100105CA8(uint64_t a1)
{
  uint64_t v1;

  return sub_100105BF4(a1, v1);
}

void sub_100105CB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10002F014(v2, a2);
}

uint64_t sub_100105CC4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 336);
}

uint64_t sub_100105CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v3 + *(int *)(v0 + 76)) = v8;
  v9 = v3 + *(int *)(v0 + 80);
  *(_QWORD *)v9 = v1;
  *(_QWORD *)(v9 + 8) = v2;
  *(_QWORD *)(v9 + 16) = v4;
  *(_QWORD *)(v9 + 24) = v5;
  *(_BYTE *)(v9 + 32) = v6;
  return *(_QWORD *)(v7 - 248);
}

uint64_t sub_100105D0C()
{
  return DayWeather.sun.getter();
}

uint64_t sub_100105D1C()
{
  return WeatherDataModel.currentWeather.getter();
}

uint64_t sub_100105D2C()
{
  return WeatherDataModel.currentWeather.getter();
}

uint64_t sub_100105D34()
{
  return WeatherDataModel.currentWeather.getter();
}

uint64_t sub_100105D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_100105D44()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 0, 1, v1);
}

uint64_t sub_100105D58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(*(_QWORD *)(a1 - 256), 1, 1, v1);
}

uint64_t sub_100105D6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(*(_QWORD *)(a1 - 256), 1, 1, v1);
}

uint64_t sub_100105D80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(*(_QWORD *)(a1 - 256), 1, 1, v1);
}

uint64_t sub_100105D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 120) + 8))(v0, v1);
}

uint64_t sub_100105DB4()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Collection.endIndex.getter(v0, v1);
}

uint64_t sub_100105DC4()
{
  return DayWeather.highTemperature.getter();
}

uint64_t sub_100105DEC()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_100105DFC()
{
  return DayWeather.sun.getter();
}

uint64_t sub_100105E0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B86CC(*(_QWORD *)(a1 - 256));
}

void sub_100105E14(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 296);
  *a1 = *(_QWORD *)(v1 - 288);
  a1[1] = v2;
}

uint64_t sub_100105E5C()
{
  return CurrentWeather.metadata.getter();
}

uint64_t sub_100105E6C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100105E74(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 1, 1, v1);
}

uint64_t sub_100105E84()
{
  return CurrentWeather.uvIndex.getter();
}

uint64_t sub_100105E90()
{
  return UUID.init()();
}

uint64_t sub_100105E98()
{
  return CurrentWeather.date.getter();
}

uint64_t sub_100105EA4()
{
  return CurrentWeather.apparentTemperature.getter();
}

uint64_t sub_100105EB0()
{
  return WeatherMetadata.expirationDate.getter();
}

uint64_t sub_100105EBC()
{
  return CurrentWeather.temperature.getter();
}

uint64_t sub_100105EC8()
{
  return CurrentWeather.wind.getter();
}

uint64_t sub_100105ED0()
{
  return CurrentWeather.predominateCloudAltitudeKind.getter();
}

void sub_100105EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 176) = (char *)&a9 - v9;
}

uint64_t sub_100105EFC()
{
  return sub_100028958();
}

uint64_t sub_100105F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100105BF4(a1, *(_QWORD *)(a2 - 256));
}

uint64_t sub_100105F10()
{
  return type metadata accessor for UnitManager(0);
}

uint64_t sub_100105F28()
{
  return CurrentWeather.date.getter();
}

uint64_t sub_100105F40()
{
  return type metadata accessor for AirQuality(0);
}

uint64_t sub_100105F48()
{
  return type metadata accessor for DayWeather(0);
}

uint64_t sub_100105F50@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1000223EC(*(_QWORD *)(a2 - 256), a1);
}

uint64_t sub_100105F58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

uint64_t sub_100105F6C()
{
  return WeatherDataModel.currentWeather.getter();
}

uint64_t sub_100105F74(uint64_t a1)
{
  uint64_t v1;

  return v1 + *(int *)(a1 + 20);
}

uint64_t sub_100105F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B8688(a1, *(_QWORD *)(a2 - 256));
}

uint64_t sub_100105F90()
{
  return WeatherCondition.isPrecipitation.getter();
}

uint64_t sub_100105F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_100105FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, uint64_t);
  uint64_t v53;
  __n128 v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v4 = sub_100005D40(&qword_1001C46B8);
  v56 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10002325C();
  v7 = v6 - v5;
  v57 = sub_100005D40(&qword_1001C46C0);
  v58 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  sub_10002325C();
  v10 = v9 - v8;
  v59 = sub_100005D40(&qword_1001C46C8);
  v60 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  sub_10002325C();
  v13 = v12 - v11;
  v14 = type metadata accessor for WeatherTimelineProvider();
  swift_allocObject(v14, 248, 7);
  swift_bridgeObjectRetain_n(a2, 2);
  v61 = sub_100165A84(65, a1, a2);
  v15 = type metadata accessor for AdaptiveConditionsContentView(0);
  v16 = sub_1000061B0(&qword_1001C46D0, type metadata accessor for AdaptiveConditionsContentView, (uint64_t)&unk_10017BCA0);
  v17 = sub_1000061B0(&qword_1001C0640, (uint64_t (*)(uint64_t))type metadata accessor for WeatherTimelineProvider, (uint64_t)&unk_100185D00);
  StaticConfiguration.init<A>(kind:provider:content:)(a1, a2, &v61, sub_10010638C, 0, v15, v14, v16, v17);
  v18 = LocalizedStringKey.init(stringLiteral:)(0x6F697469646E6F43, 0xEA0000000000736ELL);
  v22 = sub_100045174(v18, v20, v19 & 1, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = sub_100106524();
  WidgetConfiguration.configurationDisplayName(_:)(v22, v24, v28, v26, v4, v29);
  sub_100016868(v22, v24, v28);
  v30 = swift_bridgeObjectRelease(v26);
  (*(void (**)(uint64_t, uint64_t, __n128))(v56 + 8))(v7, v4, v30);
  v31 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000035, 0x80000001001891D0);
  v35 = sub_100045174(v31, v33, v32 & 1, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v61 = v4;
  v62 = v29;
  v42 = sub_10004516C((uint64_t)&v61, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.description(_:)(v35, v37, v41, v39, v57, v42);
  sub_100016868(v35, v37, v41);
  v43 = swift_bridgeObjectRelease(v39);
  (*(void (**)(uint64_t, uint64_t, __n128))(v58 + 8))(v10, v57, v43);
  v44 = sub_100005D40(&qword_1001C0280);
  v45 = type metadata accessor for WidgetFamily(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(_QWORD *)(v46 + 72);
  v48 = *(unsigned __int8 *)(v46 + 80);
  v49 = (v48 + 32) & ~v48;
  v50 = swift_allocObject(v44, v49 + 2 * v47, v48 | 7);
  *(_OWORD *)(v50 + 16) = xmmword_10017BD00;
  v51 = v50 + v49;
  v52 = *(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104);
  v52(v51, enum case for WidgetFamily.accessoryRectangular(_:), v45);
  v52(v51 + v47, enum case for WidgetFamily.accessoryInline(_:), v45);
  v61 = v57;
  v62 = v42;
  v53 = sub_10004516C((uint64_t)&v61, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  WidgetConfiguration.supportedFamilies(_:)(v50, v59, v53);
  v54 = swift_bridgeObjectRelease(v50);
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v60 + 8))(v13, v59, v54);
}

uint64_t sub_10010638C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044F34(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath(&unk_100180C18);
  v7 = sub_100005D40(&qword_1001BFA18);
  swift_storeEnumTagMultiPayload(a2, v7, 0);
  v8 = type metadata accessor for AdaptiveConditionsContentView(0);
  return sub_100044FCC((uint64_t)v6, (uint64_t)a2 + *(int *)(v8 + 20));
}

uint64_t sub_10010643C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = type metadata accessor for WidgetNames(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10002325C();
  v4 = v3 - v2;
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v3 - v2, enum case for WidgetNames.AdaptiveConditionsComplication(_:), v0);
  v6 = WidgetNames.rawValue.getter(v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

ValueMetadata *type metadata accessor for AdaptiveConditionsComplicationWidget()
{
  return &type metadata for AdaptiveConditionsComplicationWidget;
}

uint64_t sub_1001064E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A0594, 1);
}

uint64_t sub_1001064F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10010643C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10010651C()
{
  uint64_t *v0;

  return sub_100105FA4(*v0, v0[1]);
}

unint64_t sub_100106524()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C46D8;
  if (!qword_1001C46D8)
  {
    v1 = sub_100005DC4(&qword_1001C46B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C46D8);
  }
  return result;
}

uint64_t sub_10010656C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v0 = sub_100005DC4(&qword_1001C46C8);
  v1 = sub_100005DC4(&qword_1001C46C0);
  v5 = sub_100005DC4(&qword_1001C46B8);
  v6 = sub_100106524();
  v2 = sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v5 = v1;
  v6 = v2;
  v3 = sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  v5 = v0;
  v6 = v3;
  return sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>);
}

uint64_t sub_100106604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, uint64_t);
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;

  v4 = sub_100005D40(&qword_1001C46E0);
  v57 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10002325C();
  v7 = v6 - v5;
  v58 = sub_100005D40(&qword_1001C46E8);
  v59 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  sub_10002325C();
  v10 = v9 - v8;
  v60 = sub_100005D40(&qword_1001C46F0);
  v61 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  sub_10002325C();
  v13 = v12 - v11;
  v14 = type metadata accessor for WeatherTimelineProvider();
  swift_allocObject(v14, 248, 7);
  swift_bridgeObjectRetain_n(a2, 2);
  v62 = sub_100165A84(64, a1, a2);
  v15 = type metadata accessor for MoonContentView(0);
  v16 = sub_1000061B0(&qword_1001C46F8, type metadata accessor for MoonContentView, (uint64_t)&unk_10017E3B4);
  v17 = sub_1000061B0(&qword_1001C0640, (uint64_t (*)(uint64_t))type metadata accessor for WeatherTimelineProvider, (uint64_t)&unk_100185D00);
  StaticConfiguration.init<A>(kind:provider:content:)(a1, a2, &v62, sub_1001069D8, 0, v15, v14, v16, v17);
  v18 = LocalizedStringKey.init(stringLiteral:)(1852796749, 0xE400000000000000);
  v22 = sub_100045174(v18, v20, v19 & 1, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = sub_100106AF8();
  WidgetConfiguration.configurationDisplayName(_:)(v22, v24, v28, v26, v4, v29);
  sub_100016868(v22, v24, v28);
  v30 = swift_bridgeObjectRelease(v26);
  (*(void (**)(uint64_t, uint64_t, __n128))(v57 + 8))(v7, v4, v30);
  v31 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000004ALL, 0x8000000100189300);
  v35 = sub_100045174(v31, v33, v32 & 1, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v62 = v4;
  v63 = v29;
  v42 = sub_100083814(v35, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.description(_:)(v35, v37, v41, v39, v58, v42);
  sub_100016868(v35, v37, v41);
  v43 = swift_bridgeObjectRelease(v39);
  (*(void (**)(uint64_t, uint64_t, __n128))(v59 + 8))(v10, v58, v43);
  v44 = sub_100005D40(&qword_1001C0280);
  v45 = type metadata accessor for WidgetFamily(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(_QWORD *)(v46 + 72);
  v48 = *(unsigned __int8 *)(v46 + 80);
  v49 = (v48 + 32) & ~v48;
  v50 = swift_allocObject(v44, v49 + 2 * v47, v48 | 7);
  *(_OWORD *)(v50 + 16) = xmmword_10017BD00;
  v51 = v50 + v49;
  v52 = *(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104);
  v52(v51, enum case for WidgetFamily.accessoryRectangular(_:), v45);
  v53 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v52)(v51 + v47, enum case for WidgetFamily.accessoryInline(_:), v45);
  v62 = v58;
  v63 = v42;
  v54 = sub_100083814(v53, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  WidgetConfiguration.supportedFamilies(_:)(v50, v60, v54);
  v55 = swift_bridgeObjectRelease(v50);
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v61 + 8))(v13, v60, v55);
}

uint64_t sub_1001069D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044F34(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath(&unk_100180CA8);
  v7 = sub_100005D40(&qword_1001BFA18);
  swift_storeEnumTagMultiPayload(a2, v7, 0);
  v8 = type metadata accessor for MoonContentView(0);
  return sub_100044FCC((uint64_t)v6, (uint64_t)a2 + *(int *)(v8 + 20));
}

unint64_t sub_100106A88()
{
  return 0xD000000000000029;
}

ValueMetadata *type metadata accessor for MoonComplicationWidget()
{
  return &type metadata for MoonComplicationWidget;
}

uint64_t sub_100106AB4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A05D8, 1);
}

unint64_t sub_100106AC4@<X0>(_QWORD *a1@<X8>)
{
  unint64_t result;
  uint64_t v3;

  result = sub_100106A88();
  *a1 = 0xD000000000000029;
  a1[1] = v3;
  return result;
}

uint64_t sub_100106AF0()
{
  uint64_t *v0;

  return sub_100106604(*v0, v0[1]);
}

unint64_t sub_100106AF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C4700;
  if (!qword_1001C4700)
  {
    v1 = sub_100005DC4(&qword_1001C46E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C4700);
  }
  return result;
}

uint64_t sub_100106B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v0 = sub_100005DC4(&qword_1001C46F0);
  v1 = sub_100005DC4(&qword_1001C46E8);
  v2 = sub_100005DC4(&qword_1001C46E0);
  v3 = sub_100106AF8();
  v10 = sub_100083808(v3, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, v4, v5, v6, v7, v8, v9, v2);
  v24 = sub_100083808(v10, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, v11, v12, v13, v14, v15, v16, v1);
  return sub_100083808(v24, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, v17, v18, v19, v20, v21, v22, v0);
}

uint64_t MKPlacemark.safeTitle.getter()
{
  return sub_100106BE4((SEL *)&selRef_title);
}

uint64_t MKPlacemark.safeSubtitle.getter()
{
  return sub_100106BE4((SEL *)&selRef_subtitle);
}

uint64_t sub_100106BE4(SEL *a1)
{
  void *v1;

  if (objc_msgSend(v1, "respondsToSelector:", *a1))
    return sub_100070830(v1, a1);
  else
    return 0;
}

uint64_t sub_100106C30(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_100106C44(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFC && a1[10])
    {
      v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      v3 = *a1;
      v4 = v3 >= 5;
      v2 = v3 - 5;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100106C80(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 4;
  }
  return result;
}

void type metadata accessor for DataDenseTableViewModel()
{
  sub_100044408();
}

BOOL sub_100106CD0(uint64_t a1, __int16 a2, uint64_t a3, __int16 a4)
{
  BOOL v5;

  v5 = a4 != a2 || a1 != a3 || (unsigned __int16)(a4 ^ a2) >= 0x100u;
  return !v5;
}

BOOL sub_100106CF0(int a1, int a2)
{
  return a1 == a2;
}

BOOL sub_100106CFC(int a1, int a2)
{
  return ((a2 ^ a1) & 0xFFFFFF) == 0;
}

uint64_t sub_100106D10(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v9;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x80000001001893B0;
    if (a2 == 0x80000001001893B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001893B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001001893D0)
  {
    v6 = 0x80000001001893D0;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001001893D0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x80000001001893F0;
    if (a2 == 0x80000001001893F0)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001893F0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0x6F43776F52656E6FLL && a2 == 0xEF6E6F697469646ELL)
  {
    swift_bridgeObjectRelease(0xEF6E6F697469646ELL);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43776F52656E6FLL, 0xEF6E6F697469646ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100106ED0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100106F0C + 4 * byte_100180CE0[a1]))(0xD000000000000011, 0x80000001001893B0);
}

uint64_t sub_100106F0C()
{
  uint64_t v0;

  return v0 + 2;
}

unint64_t sub_100106F24()
{
  return 0xD000000000000010;
}

uint64_t sub_100106F40()
{
  return 0x6F43776F52656E6FLL;
}

void sub_100106F64()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  sub_10002321C();
  v2 = v1;
  v3 = sub_100005D40(&qword_1001C4708);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100023344();
  v5 = v2[3];
  v6 = v2[4];
  sub_100022330(v2, v5);
  v7 = sub_100108B84();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DataDenseTableViewModel.CodingKeys, &type metadata for DataDenseTableViewModel.CodingKeys, v7, v5, v6);
  sub_100108BC0();
  sub_10003C1C4();
  if (!v0)
  {
    sub_100108BFC();
    sub_10003C1C4();
    sub_100108C38();
    sub_10003C1C4();
    sub_100108C74();
    sub_10003C1C4();
  }
  sub_100049D4C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_100023114();
}

uint64_t sub_1001070F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v15[3];
  _BYTE v16[12];
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  sub_10002321C();
  v19 = v1;
  v20 = v2;
  v3 = sub_100005D40(&qword_1001C4738);
  sub_1000B76F8();
  __chkstk_darwin(v4);
  sub_1000B7760();
  v5 = sub_100108B84();
  sub_1000B77A8((uint64_t)&type metadata for DataDenseTableViewModel.CodingKeys, (uint64_t)&type metadata for DataDenseTableViewModel.CodingKeys, v5);
  if (v0)
    return sub_1000B7708();
  v17 = 0;
  sub_100108CB0();
  sub_10010A650((uint64_t)&unk_1001B8D28, (uint64_t)&v17, v3, (uint64_t)&unk_1001B8D28);
  v6 = v18;
  v16[0] = 1;
  sub_100108CEC();
  sub_10010A650((uint64_t)&unk_1001B8C80, (uint64_t)v16, v3, (uint64_t)&unk_1001B8C80);
  v13 = v6;
  v7 = v16[9];
  v8 = v16[10];
  v9 = v16[11];
  v15[0] = 2;
  sub_100108D28();
  sub_10010A650((uint64_t)&unk_1001B8C00, (uint64_t)v15, v3, (uint64_t)&unk_1001B8C00);
  v12 = v8;
  v10 = v15[1];
  v14 = 3;
  sub_100108D64();
  sub_10010A650((uint64_t)&unk_1001B8B80, (uint64_t)&v14, v3, (uint64_t)&unk_1001B8B80);
  sub_1000B77F0();
  sub_1000B7708();
  return v13 | (v7 << 32) | (v12 << 40) | (v9 << 48) | (v10 << 56);
}

uint64_t sub_1001072C0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  char v14;

  if (a1 == 0x7469706963657270 && a2 == 0xED00006E6F697461)
  {
    v5 = 0xED00006E6F697461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7469706963657270, 0xED00006E6F697461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1684957559 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684957559, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x696C617551726961 && a2 == 0xEA00000000007974)
  {
    v10 = 0xEA00000000007974;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C617551726961, 0xEA00000000007974, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x6F69566172746C75 && a2 == 0xEB0000000074656CLL)
  {
    v12 = 0xEB0000000074656CLL;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69566172746C75, 0xEB0000000074656CLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x6B694C736C656566 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 4;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B694C736C656566, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100107510(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100107550 + 4 * byte_100180CE4[a1]))(0x7469706963657270, 0xED00006E6F697461);
}

uint64_t sub_100107550()
{
  return 1684957559;
}

uint64_t sub_100107560()
{
  return 0x696C617551726961;
}

uint64_t sub_10010757C()
{
  return 0x6F69566172746C75;
}

uint64_t sub_10010759C()
{
  return 0x6B694C736C656566;
}

void sub_1001075B8()
{
  char v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;

  sub_10002321C();
  v14 = v0;
  v2 = v1;
  sub_100005D40(&qword_1001C4850);
  sub_1000230F4();
  __chkstk_darwin(v3);
  sub_10010A69C(v4, v13);
  sub_100005D40(&qword_1001C4858);
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_1000230E0();
  sub_100005D40(&qword_1001C4860);
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_1000230E0();
  sub_100005D40(&qword_1001C4868);
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_10002325C();
  v8 = sub_100005D40(&qword_1001C4870);
  __chkstk_darwin(v8);
  sub_10002325C();
  sub_100005D40(&qword_1001C4878);
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_100023374();
  v11 = v2[3];
  v10 = v2[4];
  sub_100022330(v2, v11);
  v12 = sub_1001099A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DataDenseTable.Condition.CodingKeys, &type metadata for DataDenseTable.Condition.CodingKeys, v12, v11, v10);
  __asm { BR              X10 }
}

void sub_100107748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 69) = 0;
  sub_100109ACC();
  sub_10003C17C((uint64_t)&type metadata for DataDenseTable.Condition.PrecipitationCodingKeys, v3 - 69);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  sub_10010A6F4(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 88) + 8));
  sub_100023114();
}

void sub_100107840()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_10002321C();
  v3 = v2;
  sub_100005D40(&qword_1001C47F0);
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_1000230E0();
  sub_100005D40(&qword_1001C47F8);
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_1000230E0();
  sub_100005D40(&qword_1001C4800);
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_10010A69C(v7, v28);
  sub_100005D40(&qword_1001C4808);
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_1000230E0();
  v9 = sub_100005D40(&qword_1001C4810);
  __chkstk_darwin(v9);
  sub_10002325C();
  v10 = sub_100005D40(&qword_1001C4818);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100023344();
  v12 = v3[3];
  v13 = v3[4];
  sub_100022330(v3, v12);
  v14 = sub_1001099A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DataDenseTable.Condition.CodingKeys, &type metadata for DataDenseTable.Condition.CodingKeys, v14, v12, v13);
  if (!v0)
  {
    v30 = v11;
    v29 = v1;
    v15 = KeyedDecodingContainer.allKeys.getter(v10);
    v16 = v15;
    v17 = *(_QWORD *)(v15 + 16);
    if (v17)
    {
      v18 = *(unsigned __int8 *)(v15 + 32);
      sub_1000E5028(1, v17, v15, v15 + 32, 0, (2 * v17) | 1);
      v20 = v19;
      v22 = v21;
      swift_bridgeObjectRelease(v16);
      if (v20 == v22 >> 1)
        __asm { BR              X9 }
    }
    v23 = type metadata accessor for DecodingError(0);
    swift_allocError(v23, &protocol witness table for DecodingError, 0, 0);
    v25 = v24;
    sub_100005D40(&qword_1001BF898);
    *v25 = &unk_1001B8A78;
    v26 = KeyedDecodingContainer.codingPath.getter(v10);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD00000000000002BLL, 0x80000001001861A0, 0);
    v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, enum case for DecodingError.typeMismatch(_:), v23);
    swift_willThrow(v27);
    sub_100023214();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v10);
  }
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v3);
  sub_100023114();
}

void sub_100107B74()
{
  uint64_t v0;
  uint64_t v1;

  sub_10010A754();
  sub_10010A65C((uint64_t)&type metadata for DataDenseTable.Condition.WindCodingKeys, v1 - 68);
  if (v0)
  {
    sub_100023214();
    sub_10010A6D4();
    JUMPOUT(0x100107B5CLL);
  }
  JUMPOUT(0x100107C58);
}

void sub_100107BA4()
{
  uint64_t v0;
  uint64_t v1;

  sub_10010A748();
  sub_10010A65C((uint64_t)&type metadata for DataDenseTable.Condition.AirQualityCodingKeys, v1 - 67);
  if (!v0)
    JUMPOUT(0x100107BD0);
  sub_100023214();
  sub_10010A6D4();
  JUMPOUT(0x100107B5CLL);
}

void sub_100107BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10010A728();
  sub_10010A65C((uint64_t)&type metadata for DataDenseTable.Condition.UltraVioletCodingKeys, v2 - 66);
  if (!v0)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 160) + 8))(v1, *(_QWORD *)(v2 - 152));
    sub_100023214();
    sub_10010A6D4();
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(*(_QWORD **)(v2 - 96));
    JUMPOUT(0x100107B60);
  }
  sub_100023214();
  sub_10010A6D4();
  JUMPOUT(0x100107B5CLL);
}

void sub_100107C10()
{
  uint64_t v0;
  uint64_t v1;

  sub_10010A714();
  sub_10010A65C((uint64_t)&type metadata for DataDenseTable.Condition.FeelsLikeCodingKeys, v1 - 65);
  if (v0)
    JUMPOUT(0x100107C38);
  JUMPOUT(0x100107C58);
}

uint64_t sub_100107C74(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x8000000100189410;
    if (a2 == 0x8000000100189410)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100189410, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000012)
  {
    v6 = 0x8000000100189430;
    if (a2 == 0x8000000100189430)
      goto LABEL_10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100189430, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x8000000100189450;
    if (a2 == 0x8000000100189450)
      goto LABEL_15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100189450, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_15:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100189470)
  {
    swift_bridgeObjectRelease(0x8000000100189470);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100189470, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100107E00(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100107E38 + 4 * byte_100180CF3[a1]))(0xD000000000000011, 0x8000000100189410);
}

uint64_t sub_100107E38(uint64_t a1)
{
  return a1 + 1;
}

void sub_100107E6C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  _BYTE v12[6];

  sub_10010A734();
  sub_10010A6C4();
  sub_100005D40(&qword_1001C4780);
  sub_1000B76F8();
  __chkstk_darwin(v3);
  sub_1000B7780();
  v4 = sub_100109838();
  sub_1000232D0((uint64_t)&type metadata for DataDenseTable.FourRowConditions.CodingKeys, v5, v4);
  sub_10010A6B8();
  sub_1000C625C((uint64_t)&v12[5], (uint64_t)&v12[4], v6, (uint64_t)&unk_1001B8A78);
  if (!v0)
  {
    sub_10010A688();
    sub_1000C625C((uint64_t)&v12[3], (uint64_t)&v12[2], v7, (uint64_t)&unk_1001B8A78);
    sub_10010A700();
    sub_1000C625C((uint64_t)&v12[1], (uint64_t)v12, v8, (uint64_t)&unk_1001B8A78);
    v11 = HIBYTE(v1);
    v10 = 3;
    sub_1000C625C((uint64_t)&v11, (uint64_t)&v10, v9, (uint64_t)&unk_1001B8A78);
  }
  sub_100049D4C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1000B77B4();
}

void sub_100107F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;

  sub_10002321C();
  a25 = v27;
  a26 = v28;
  v30 = v29;
  sub_100005D40(&qword_1001C47C8);
  sub_1000B76F8();
  __chkstk_darwin(v31);
  sub_1000B7760();
  v32 = sub_100109838();
  sub_1000B77A8((uint64_t)&type metadata for DataDenseTable.FourRowConditions.CodingKeys, (uint64_t)&type metadata for DataDenseTable.FourRowConditions.CodingKeys, v32);
  if (v26)
  {
    sub_1000B7708();
  }
  else
  {
    sub_10010A720();
    sub_10010A638((uint64_t)&unk_1001B8A78, (uint64_t)&a16);
    sub_10010A6E4();
    sub_10010A638((uint64_t)&unk_1001B8A78, (uint64_t)&a14);
    a12 = 2;
    sub_10010A638((uint64_t)&unk_1001B8A78, (uint64_t)&a12);
    a10 = 3;
    sub_10010A638((uint64_t)&unk_1001B8A78, (uint64_t)&a10);
    sub_1000B77F0();
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v30);
  }
  sub_100023114();
}

uint64_t sub_1001080D0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x8000000100189410;
    if (a2 == 0x8000000100189410)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100189410, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100189430)
  {
    v6 = 0x8000000100189430;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100189430, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100189450)
  {
    swift_bridgeObjectRelease(0x8000000100189450);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100189450, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_100108210(char a1)
{
  unint64_t result;

  result = 0xD000000000000011;
  if (a1 == 1)
    return 0xD000000000000012;
  return result;
}

void sub_100108268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[6];

  sub_10010A734();
  sub_10010A6C4();
  sub_100005D40(&qword_1001C4798);
  sub_1000B76F8();
  __chkstk_darwin(v2);
  sub_1000B7780();
  v3 = sub_1001098B0();
  sub_1000232D0((uint64_t)&type metadata for DataDenseTable.ThreeRowConditions.CodingKeys, v4, v3);
  sub_10010A6B8();
  sub_1000C625C((uint64_t)&v8[5], (uint64_t)&v8[4], v5, (uint64_t)&unk_1001B8A78);
  if (!v0)
  {
    sub_10010A688();
    sub_1000C625C((uint64_t)&v8[3], (uint64_t)&v8[2], v6, (uint64_t)&unk_1001B8A78);
    sub_10010A700();
    sub_1000C625C((uint64_t)&v8[1], (uint64_t)v8, v7, (uint64_t)&unk_1001B8A78);
  }
  sub_100049D4C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000B77B4();
}

void sub_10010834C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  sub_10002321C();
  a24 = v26;
  a25 = v27;
  v29 = v28;
  sub_100005D40(&qword_1001C47D8);
  sub_1000B76F8();
  __chkstk_darwin(v30);
  sub_1000B7760();
  v31 = sub_1001098B0();
  sub_10010A670((uint64_t)&type metadata for DataDenseTable.ThreeRowConditions.CodingKeys, v32, v31);
  if (v25)
  {
    sub_1000B7708();
  }
  else
  {
    sub_10010A720();
    sub_1000C6244((uint64_t)&unk_1001B8A78, (uint64_t)&a15);
    sub_10010A6E4();
    sub_1000C6244((uint64_t)&unk_1001B8A78, (uint64_t)&a13);
    a11 = 2;
    sub_1000C6244((uint64_t)&unk_1001B8A78, (uint64_t)&a11);
    sub_1000B76E8();
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v29);
  }
  sub_100023114();
}

uint64_t sub_10010845C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x8000000100189410;
    if (a2 == 0x8000000100189410)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100189410, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100189430)
  {
    swift_bridgeObjectRelease(0x8000000100189430);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100189430, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_100108544(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000012;
  else
    return 0xD000000000000011;
}

void sub_10010857C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  sub_10010A734();
  sub_10010A6C4();
  sub_100005D40(&qword_1001C47A8);
  sub_1000B76F8();
  __chkstk_darwin(v2);
  sub_1000B7780();
  v3 = sub_1001098EC();
  sub_1000232D0((uint64_t)&type metadata for DataDenseTable.TwoRowConditions.CodingKeys, v4, v3);
  sub_10010A6B8();
  sub_1000C625C((uint64_t)&v7 + 3, (uint64_t)&v7 + 2, v5, (uint64_t)&unk_1001B8A78);
  if (!v0)
  {
    sub_10010A688();
    sub_1000C625C((uint64_t)&v7 + 1, (uint64_t)&v7, v6, (uint64_t)&unk_1001B8A78);
  }
  sub_100049D4C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000B77B4();
}

void sub_100108640()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;

  sub_10010A734();
  sub_100005D40(&qword_1001C47E0);
  sub_1000B76F8();
  __chkstk_darwin(v1);
  sub_1000B7760();
  v2 = sub_1001098EC();
  sub_10010A670((uint64_t)&type metadata for DataDenseTable.TwoRowConditions.CodingKeys, v3, v2);
  if (v0)
  {
    sub_1000B7708();
  }
  else
  {
    sub_10010A720();
    sub_1000C6244((uint64_t)&unk_1001B8A78, (uint64_t)&v4 + 2);
    sub_10010A6E4();
    sub_1000C6244((uint64_t)&unk_1001B8A78, (uint64_t)&v4);
    sub_1000B76E8();
    sub_1000B7708();
  }
  sub_1000B77B4();
}

uint64_t sub_100108728(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x6F697469646E6F63 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease(0xE90000000000006ELL);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63, 0xE90000000000006ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

Swift::Int sub_1001087B8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1001087F8()
{
  return 0x6F697469646E6F63;
}

void sub_100108814()
{
  char v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_10010A734();
  v1 = v0;
  v2 = sub_100005D40(&qword_1001C47B8);
  sub_1000B76F8();
  __chkstk_darwin(v3);
  sub_1000B7780();
  v4 = sub_100109928();
  sub_1000232D0((uint64_t)&type metadata for DataDenseTable.OneRowCondition.CodingKeys, v5, v4);
  v7 = v1;
  sub_100109874();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v7, v6, v2, &unk_1001B8A78);
  sub_1000B77F0();
  sub_1000B77B4();
}

void sub_1001088C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10010A734();
  v1 = sub_100005D40(&qword_1001C47E8);
  sub_1000B76F8();
  __chkstk_darwin(v2);
  sub_1000B7760();
  v3 = sub_100109928();
  sub_10010A670((uint64_t)&type metadata for DataDenseTable.OneRowCondition.CodingKeys, v4, v3);
  if (!v0)
  {
    sub_100109964();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&unk_1001B8A78, v5, v1, &unk_1001B8A78);
    sub_1000B76E8();
  }
  sub_1000B7708();
  sub_1000B77B4();
}

uint64_t sub_100108994(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = sub_100005D40(&qword_1001C4880);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100023374();
  v4 = a1[3];
  v5 = a1[4];
  sub_100022330(a1, v4);
  v6 = sub_100109B08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DataDenseTable.CodingKeys, &type metadata for DataDenseTable.CodingKeys, v6, v4, v5);
  return sub_10010A6F4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
}

uint64_t sub_100108A40(_QWORD *a1)
{
  return _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
}

uint64_t sub_100108A68()
{
  unsigned __int8 *v0;

  return sub_100106ED0(*v0);
}

uint64_t sub_100108A70@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100106D10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100108A94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100108B84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100108ABC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100108B84();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_100108AE4(uint64_t a1, uint64_t a2)
{
  return sub_100106CD0(*(_QWORD *)a1, *(_WORD *)(a1 + 8), *(_QWORD *)a2, *(_WORD *)(a2 + 8));
}

uint64_t sub_100108AFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  __int16 v4;

  result = sub_1001070F0();
  if (!v1)
  {
    *(_QWORD *)a1 = result;
    *(_WORD *)(a1 + 8) = v4;
  }
  return result;
}

void sub_100108B68()
{
  sub_100106F64();
}

unint64_t sub_100108B84()
{
  unint64_t result;

  result = qword_1001C4710;
  if (!qword_1001C4710)
  {
    result = swift_getWitnessTable(&unk_10018122C, &type metadata for DataDenseTableViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4710);
  }
  return result;
}

unint64_t sub_100108BC0()
{
  unint64_t result;

  result = qword_1001C4718;
  if (!qword_1001C4718)
  {
    result = swift_getWitnessTable(&unk_100181204, &unk_1001B8D28);
    atomic_store(result, (unint64_t *)&qword_1001C4718);
  }
  return result;
}

unint64_t sub_100108BFC()
{
  unint64_t result;

  result = qword_1001C4720;
  if (!qword_1001C4720)
  {
    result = swift_getWitnessTable(&unk_1001811DC, &unk_1001B8C80);
    atomic_store(result, (unint64_t *)&qword_1001C4720);
  }
  return result;
}

unint64_t sub_100108C38()
{
  unint64_t result;

  result = qword_1001C4728;
  if (!qword_1001C4728)
  {
    result = swift_getWitnessTable(&unk_1001811B4, &unk_1001B8C00);
    atomic_store(result, (unint64_t *)&qword_1001C4728);
  }
  return result;
}

unint64_t sub_100108C74()
{
  unint64_t result;

  result = qword_1001C4730;
  if (!qword_1001C4730)
  {
    result = swift_getWitnessTable(&unk_10018118C, &unk_1001B8B80);
    atomic_store(result, (unint64_t *)&qword_1001C4730);
  }
  return result;
}

unint64_t sub_100108CB0()
{
  unint64_t result;

  result = qword_1001C4740;
  if (!qword_1001C4740)
  {
    result = swift_getWitnessTable(&unk_100181164, &unk_1001B8D28);
    atomic_store(result, (unint64_t *)&qword_1001C4740);
  }
  return result;
}

unint64_t sub_100108CEC()
{
  unint64_t result;

  result = qword_1001C4748;
  if (!qword_1001C4748)
  {
    result = swift_getWitnessTable(&unk_10018113C, &unk_1001B8C80);
    atomic_store(result, (unint64_t *)&qword_1001C4748);
  }
  return result;
}

unint64_t sub_100108D28()
{
  unint64_t result;

  result = qword_1001C4750;
  if (!qword_1001C4750)
  {
    result = swift_getWitnessTable(&unk_100181114, &unk_1001B8C00);
    atomic_store(result, (unint64_t *)&qword_1001C4750);
  }
  return result;
}

unint64_t sub_100108D64()
{
  unint64_t result;

  result = qword_1001C4758;
  if (!qword_1001C4758)
  {
    result = swift_getWitnessTable(&unk_1001810EC, &unk_1001B8B80);
    atomic_store(result, (unint64_t *)&qword_1001C4758);
  }
  return result;
}

void type metadata accessor for DataDenseTable.Condition()
{
  sub_100044408();
}

ValueMetadata *type metadata accessor for DataDenseTableViewModel.CodingKeys()
{
  return &type metadata for DataDenseTableViewModel.CodingKeys;
}

void type metadata accessor for DataDenseTable.OneRowCondition()
{
  sub_100044408();
}

uint64_t sub_100108DD8(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 65284 <= 0xFFFEFFFF)
      v2 = 2;
    else
      v2 = 4;
    if (a2 + 65284 < 0xFF0000)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    else
    {
      v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((_BYTE *)a1 + 2))
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 16)) - 65285;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_100108E64(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65284 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65284 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100108EB0 + 4 * byte_100180CFC[v4]))();
  *a1 = a2 - 252;
  return ((uint64_t (*)(void))((char *)sub_100108EE4 + 4 * byte_100180CF7[v4]))();
}

uint64_t sub_100108EE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_100108EEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x100108EF4);
  return result;
}

uint64_t sub_100108F00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x100108F08);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100108F0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100108F14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

void type metadata accessor for DataDenseTable.TwoRowConditions()
{
  sub_100044408();
}

uint64_t sub_100108F2C(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t sub_100108F40(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  unsigned int v4;
  BOOL v5;

  if (!a2)
  {
    v3 = -1;
    return (v3 + 1);
  }
  if (a2 >= 0xFC)
  {
    if ((a2 + 33554180) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        goto LABEL_5;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
      {
LABEL_5:
        v3 = (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776965;
        return (v3 + 1);
      }
    }
  }
  v4 = *(unsigned __int8 *)a1;
  v5 = v4 >= 5;
  v3 = v4 - 5;
  if (!v5)
    v3 = -1;
  return (v3 + 1);
}

uint64_t sub_100108FA8(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554180) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFB)
    v3 = 0;
  if (a2 > 0xFB)
  {
    *(_WORD *)result = a2 - 252;
    *(_BYTE *)(result + 2) = (a2 - 252) >> 16;
    if (v3)
    {
      v4 = ((a2 - 252) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)result = a2 + 4;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

void type metadata accessor for DataDenseTable.ThreeRowConditions()
{
  sub_100044408();
}

void type metadata accessor for DataDenseTable()
{
  sub_100044408();
}

_DWORD *sub_10010904C(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_100109058(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFC && a1[4])
    {
      v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      v3 = *a1;
      v4 = v3 >= 5;
      v2 = v3 - 5;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100109094(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_DWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 4;
  }
  return result;
}

void type metadata accessor for DataDenseTable.FourRowConditions()
{
  sub_100044408();
}

uint64_t sub_1001090E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109A54();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100109108(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109A54();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100109130()
{
  unsigned __int8 *v0;

  return sub_100107510(*v0);
}

uint64_t sub_100109138@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001072C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10010915C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001099A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100109184(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001099A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001091AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001099DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001091D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001099DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001091FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109ACC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100109224(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109ACC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10010924C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109A18();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100109274(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109A18();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10010929C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109A90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001092C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109A90();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001092EC(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v3;

  sub_100107840();
  if (!v1)
    *a1 = v3;
}

void sub_100109314()
{
  sub_1001075B8();
}

BOOL sub_10010932C(char *a1, char *a2)
{
  return sub_100106D0C(*a1, *a2);
}

void sub_100109338()
{
  unsigned __int8 *v0;

  sub_1000D9C3C(*v0);
}

uint64_t sub_100109350()
{
  unsigned __int8 *v0;

  return sub_100107E00(*v0);
}

uint64_t sub_100109358@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100107C74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10010937C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109838();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001093A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109838();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "1001093DC: call analysis failed (funcsize=10)"

void sub_1001093F4()
{
  sub_100107E6C();
}

BOOL sub_10010940C(int *a1, int *a2)
{
  return sub_100106CF0(*a1, *a2);
}

unint64_t sub_100109418()
{
  char *v0;

  return sub_100108210(*v0);
}

uint64_t sub_100109420@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001080D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100109444(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001098B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10010946C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001098B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "1001094A4: call analysis failed (funcsize=14)"

void sub_1001094CC()
{
  sub_100108268();
}

BOOL sub_1001094EC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_100106CFC(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

unint64_t sub_100109508()
{
  char *v0;

  return sub_100108544(*v0);
}

uint64_t sub_100109510@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10010845C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100109534(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001098EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10010955C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001098EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100109584(_WORD *a1@<X8>)
{
  uint64_t v1;
  __int16 v3;

  sub_100108640();
  if (!v1)
    *a1 = v3;
}

void sub_1001095AC()
{
  sub_10010857C();
}

Swift::Int sub_1001095C8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_100109608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100108728(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100109630(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109928();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100109658(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109928();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100109680(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v3;

  sub_1001088C8();
  if (!v1)
    *a1 = v3;
}

void sub_1001096A8()
{
  sub_100108814();
}

uint64_t sub_1001096C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109B08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001096E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100109B08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100109710(_QWORD *a1)
{
  return sub_100108A40(a1);
}

uint64_t sub_100109724(_QWORD *a1)
{
  return sub_100108994(a1);
}

unint64_t sub_10010973C()
{
  unint64_t result;

  result = qword_1001C4760;
  if (!qword_1001C4760)
  {
    result = swift_getWitnessTable(&unk_10018100C, &type metadata for DataDenseTableViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4760);
  }
  return result;
}

unint64_t sub_10010977C()
{
  unint64_t result;

  result = qword_1001C4768;
  if (!qword_1001C4768)
  {
    result = swift_getWitnessTable(&unk_100181034, &unk_1001B8A78);
    atomic_store(result, (unint64_t *)&qword_1001C4768);
  }
  return result;
}

unint64_t sub_1001097BC()
{
  unint64_t result;

  result = qword_1001C4770;
  if (!qword_1001C4770)
  {
    result = swift_getWitnessTable(&unk_100180F7C, &type metadata for DataDenseTableViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4770);
  }
  return result;
}

unint64_t sub_1001097FC()
{
  unint64_t result;

  result = qword_1001C4778;
  if (!qword_1001C4778)
  {
    result = swift_getWitnessTable(&unk_100180FA4, &type metadata for DataDenseTableViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4778);
  }
  return result;
}

unint64_t sub_100109838()
{
  unint64_t result;

  result = qword_1001C4788;
  if (!qword_1001C4788)
  {
    result = swift_getWitnessTable(&unk_100181B9C, &type metadata for DataDenseTable.FourRowConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4788);
  }
  return result;
}

unint64_t sub_100109874()
{
  unint64_t result;

  result = qword_1001C4790;
  if (!qword_1001C4790)
  {
    result = swift_getWitnessTable(&unk_10018105C, &unk_1001B8A78);
    atomic_store(result, (unint64_t *)&qword_1001C4790);
  }
  return result;
}

unint64_t sub_1001098B0()
{
  unint64_t result;

  result = qword_1001C47A0;
  if (!qword_1001C47A0)
  {
    result = swift_getWitnessTable(&unk_100181B4C, &type metadata for DataDenseTable.ThreeRowConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C47A0);
  }
  return result;
}

unint64_t sub_1001098EC()
{
  unint64_t result;

  result = qword_1001C47B0;
  if (!qword_1001C47B0)
  {
    result = swift_getWitnessTable(&unk_100181AFC, &type metadata for DataDenseTable.TwoRowConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C47B0);
  }
  return result;
}

unint64_t sub_100109928()
{
  unint64_t result;

  result = qword_1001C47C0;
  if (!qword_1001C47C0)
  {
    result = swift_getWitnessTable(&unk_100181AAC, &type metadata for DataDenseTable.OneRowCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C47C0);
  }
  return result;
}

unint64_t sub_100109964()
{
  unint64_t result;

  result = qword_1001C47D0;
  if (!qword_1001C47D0)
  {
    result = swift_getWitnessTable(&unk_100181084, &unk_1001B8A78);
    atomic_store(result, (unint64_t *)&qword_1001C47D0);
  }
  return result;
}

unint64_t sub_1001099A0()
{
  unint64_t result;

  result = qword_1001C4820;
  if (!qword_1001C4820)
  {
    result = swift_getWitnessTable(&unk_100181A5C, &type metadata for DataDenseTable.Condition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4820);
  }
  return result;
}

unint64_t sub_1001099DC()
{
  unint64_t result;

  result = qword_1001C4828;
  if (!qword_1001C4828)
  {
    result = swift_getWitnessTable(&unk_100181A0C, &type metadata for DataDenseTable.Condition.FeelsLikeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4828);
  }
  return result;
}

unint64_t sub_100109A18()
{
  unint64_t result;

  result = qword_1001C4830;
  if (!qword_1001C4830)
  {
    result = swift_getWitnessTable(&unk_1001819BC, &type metadata for DataDenseTable.Condition.UltraVioletCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4830);
  }
  return result;
}

unint64_t sub_100109A54()
{
  unint64_t result;

  result = qword_1001C4838;
  if (!qword_1001C4838)
  {
    result = swift_getWitnessTable(&unk_10018196C, &type metadata for DataDenseTable.Condition.AirQualityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4838);
  }
  return result;
}

unint64_t sub_100109A90()
{
  unint64_t result;

  result = qword_1001C4840;
  if (!qword_1001C4840)
  {
    result = swift_getWitnessTable(&unk_10018191C, &type metadata for DataDenseTable.Condition.WindCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4840);
  }
  return result;
}

unint64_t sub_100109ACC()
{
  unint64_t result;

  result = qword_1001C4848;
  if (!qword_1001C4848)
  {
    result = swift_getWitnessTable(&unk_1001818CC, &type metadata for DataDenseTable.Condition.PrecipitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4848);
  }
  return result;
}

unint64_t sub_100109B08()
{
  unint64_t result;

  result = qword_1001C4888;
  if (!qword_1001C4888)
  {
    result = swift_getWitnessTable(&unk_10018187C, &type metadata for DataDenseTable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4888);
  }
  return result;
}

ValueMetadata *type metadata accessor for DataDenseTable.CodingKeys()
{
  return &type metadata for DataDenseTable.CodingKeys;
}

uint64_t _s13WeatherWidget14DataDenseTableV9ConditionO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100109BA0 + 4 * byte_100180D06[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100109BD4 + 4 * byte_100180D01[v4]))();
}

uint64_t sub_100109BD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100109BDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100109BE4);
  return result;
}

uint64_t sub_100109BF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100109BF8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100109BFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100109C04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DataDenseTable.Condition.CodingKeys()
{
  return &type metadata for DataDenseTable.Condition.CodingKeys;
}

ValueMetadata *type metadata accessor for DataDenseTable.Condition.PrecipitationCodingKeys()
{
  return &type metadata for DataDenseTable.Condition.PrecipitationCodingKeys;
}

ValueMetadata *type metadata accessor for DataDenseTable.Condition.WindCodingKeys()
{
  return &type metadata for DataDenseTable.Condition.WindCodingKeys;
}

ValueMetadata *type metadata accessor for DataDenseTable.Condition.AirQualityCodingKeys()
{
  return &type metadata for DataDenseTable.Condition.AirQualityCodingKeys;
}

ValueMetadata *type metadata accessor for DataDenseTable.Condition.UltraVioletCodingKeys()
{
  return &type metadata for DataDenseTable.Condition.UltraVioletCodingKeys;
}

ValueMetadata *type metadata accessor for DataDenseTable.Condition.FeelsLikeCodingKeys()
{
  return &type metadata for DataDenseTable.Condition.FeelsLikeCodingKeys;
}

uint64_t storeEnumTagSinglePayload for DataDenseTable.OneRowCondition.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100109CB0 + 4 * byte_100180D0B[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100109CD0 + 4 * byte_100180D10[v4]))();
}

_BYTE *sub_100109CB0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100109CD0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100109CD8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100109CE0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100109CE8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100109CF0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DataDenseTable.OneRowCondition.CodingKeys()
{
  return &type metadata for DataDenseTable.OneRowCondition.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DataDenseTable.TwoRowConditions.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100109D58 + 4 * byte_100180D1A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100109D8C + 4 * byte_100180D15[v4]))();
}

uint64_t sub_100109D8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100109D94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100109D9CLL);
  return result;
}

uint64_t sub_100109DA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100109DB0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100109DB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100109DBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DataDenseTable.TwoRowConditions.CodingKeys()
{
  return &type metadata for DataDenseTable.TwoRowConditions.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DataDenseTable.ThreeRowConditions.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100109E24 + 4 * byte_100180D24[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100109E58 + 4 * byte_100180D1F[v4]))();
}

uint64_t sub_100109E58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100109E60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100109E68);
  return result;
}

uint64_t sub_100109E74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100109E7CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100109E80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100109E88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DataDenseTable.ThreeRowConditions.CodingKeys()
{
  return &type metadata for DataDenseTable.ThreeRowConditions.CodingKeys;
}

uint64_t _s13WeatherWidget23DataDenseTableViewModelV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100109EF0 + 4 * byte_100180D2E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100109F24 + 4 * byte_100180D29[v4]))();
}

uint64_t sub_100109F24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100109F2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100109F34);
  return result;
}

uint64_t sub_100109F40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100109F48);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100109F4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100109F54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DataDenseTable.FourRowConditions.CodingKeys()
{
  return &type metadata for DataDenseTable.FourRowConditions.CodingKeys;
}

unint64_t sub_100109F74()
{
  unint64_t result;

  result = qword_1001C4890;
  if (!qword_1001C4890)
  {
    result = swift_getWitnessTable(&unk_100181394, &type metadata for DataDenseTable.FourRowConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4890);
  }
  return result;
}

unint64_t sub_100109FB4()
{
  unint64_t result;

  result = qword_1001C4898;
  if (!qword_1001C4898)
  {
    result = swift_getWitnessTable(&unk_10018144C, &type metadata for DataDenseTable.ThreeRowConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4898);
  }
  return result;
}

unint64_t sub_100109FF4()
{
  unint64_t result;

  result = qword_1001C48A0;
  if (!qword_1001C48A0)
  {
    result = swift_getWitnessTable(&unk_100181504, &type metadata for DataDenseTable.TwoRowConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C48A0);
  }
  return result;
}

unint64_t sub_10010A034()
{
  unint64_t result;

  result = qword_1001C48A8;
  if (!qword_1001C48A8)
  {
    result = swift_getWitnessTable(&unk_1001815BC, &type metadata for DataDenseTable.OneRowCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C48A8);
  }
  return result;
}

unint64_t sub_10010A074()
{
  unint64_t result;

  result = qword_1001C48B0;
  if (!qword_1001C48B0)
  {
    result = swift_getWitnessTable(&unk_100181804, &type metadata for DataDenseTable.Condition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C48B0);
  }
  return result;
}

unint64_t sub_10010A0B4()
{
  unint64_t result;

  result = qword_1001C48B8;
  if (!qword_1001C48B8)
  {
    result = swift_getWitnessTable(&unk_10018182C, &type metadata for DataDenseTable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C48B8);
  }
  return result;
}

unint64_t sub_10010A0F4()
{
  unint64_t result;

  result = qword_1001C48C0;
  if (!qword_1001C48C0)
  {
    result = swift_getWitnessTable(&unk_100181854, &type metadata for DataDenseTable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C48C0);
  }
  return result;
}

unint64_t sub_10010A134()
{
  unint64_t result;

  result = qword_1001C48C8;
  if (!qword_1001C48C8)
  {
    result = swift_getWitnessTable(&unk_100181724, &type metadata for DataDenseTable.Condition.PrecipitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C48C8);
  }
  return result;
}

unint64_t sub_10010A174()
{
  unint64_t result;

  result = qword_1001C48D0;
  if (!qword_1001C48D0)
  {
    result = swift_getWitnessTable(&unk_10018174C, &type metadata for DataDenseTable.Condition.PrecipitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C48D0);
  }
  return result;
}

unint64_t sub_10010A1B4()
{
  unint64_t result;

  result = qword_1001C48D8;
  if (!qword_1001C48D8)
  {
    result = swift_getWitnessTable(&unk_1001816D4, &type metadata for DataDenseTable.Condition.WindCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C48D8);
  }
  return result;
}

unint64_t sub_10010A1F4()
{
  unint64_t result;

  result = qword_1001C48E0;
  if (!qword_1001C48E0)
  {
    result = swift_getWitnessTable(&unk_1001816FC, &type metadata for DataDenseTable.Condition.WindCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C48E0);
  }
  return result;
}

unint64_t sub_10010A234()
{
  unint64_t result;

  result = qword_1001C48E8;
  if (!qword_1001C48E8)
  {
    result = swift_getWitnessTable(&unk_100181684, &type metadata for DataDenseTable.Condition.AirQualityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C48E8);
  }
  return result;
}

unint64_t sub_10010A274()
{
  unint64_t result;

  result = qword_1001C48F0;
  if (!qword_1001C48F0)
  {
    result = swift_getWitnessTable(&unk_1001816AC, &type metadata for DataDenseTable.Condition.AirQualityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C48F0);
  }
  return result;
}

unint64_t sub_10010A2B4()
{
  unint64_t result;

  result = qword_1001C48F8;
  if (!qword_1001C48F8)
  {
    result = swift_getWitnessTable(&unk_100181634, &type metadata for DataDenseTable.Condition.UltraVioletCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C48F8);
  }
  return result;
}

unint64_t sub_10010A2F4()
{
  unint64_t result;

  result = qword_1001C4900;
  if (!qword_1001C4900)
  {
    result = swift_getWitnessTable(&unk_10018165C, &type metadata for DataDenseTable.Condition.UltraVioletCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4900);
  }
  return result;
}

unint64_t sub_10010A334()
{
  unint64_t result;

  result = qword_1001C4908;
  if (!qword_1001C4908)
  {
    result = swift_getWitnessTable(&unk_1001815E4, &type metadata for DataDenseTable.Condition.FeelsLikeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4908);
  }
  return result;
}

unint64_t sub_10010A374()
{
  unint64_t result;

  result = qword_1001C4910;
  if (!qword_1001C4910)
  {
    result = swift_getWitnessTable(&unk_10018160C, &type metadata for DataDenseTable.Condition.FeelsLikeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4910);
  }
  return result;
}

unint64_t sub_10010A3B4()
{
  unint64_t result;

  result = qword_1001C4918;
  if (!qword_1001C4918)
  {
    result = swift_getWitnessTable(&unk_100181774, &type metadata for DataDenseTable.Condition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4918);
  }
  return result;
}

unint64_t sub_10010A3F4()
{
  unint64_t result;

  result = qword_1001C4920;
  if (!qword_1001C4920)
  {
    result = swift_getWitnessTable(&unk_10018179C, &type metadata for DataDenseTable.Condition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4920);
  }
  return result;
}

unint64_t sub_10010A434()
{
  unint64_t result;

  result = qword_1001C4928;
  if (!qword_1001C4928)
  {
    result = swift_getWitnessTable(&unk_10018152C, &type metadata for DataDenseTable.OneRowCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4928);
  }
  return result;
}

unint64_t sub_10010A474()
{
  unint64_t result;

  result = qword_1001C4930;
  if (!qword_1001C4930)
  {
    result = swift_getWitnessTable(&unk_100181554, &type metadata for DataDenseTable.OneRowCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4930);
  }
  return result;
}

unint64_t sub_10010A4B4()
{
  unint64_t result;

  result = qword_1001C4938;
  if (!qword_1001C4938)
  {
    result = swift_getWitnessTable(&unk_100181474, &type metadata for DataDenseTable.TwoRowConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4938);
  }
  return result;
}

unint64_t sub_10010A4F4()
{
  unint64_t result;

  result = qword_1001C4940;
  if (!qword_1001C4940)
  {
    result = swift_getWitnessTable(&unk_10018149C, &type metadata for DataDenseTable.TwoRowConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4940);
  }
  return result;
}

unint64_t sub_10010A534()
{
  unint64_t result;

  result = qword_1001C4948;
  if (!qword_1001C4948)
  {
    result = swift_getWitnessTable(&unk_1001813BC, &type metadata for DataDenseTable.ThreeRowConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4948);
  }
  return result;
}

unint64_t sub_10010A574()
{
  unint64_t result;

  result = qword_1001C4950;
  if (!qword_1001C4950)
  {
    result = swift_getWitnessTable(&unk_1001813E4, &type metadata for DataDenseTable.ThreeRowConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4950);
  }
  return result;
}

unint64_t sub_10010A5B4()
{
  unint64_t result;

  result = qword_1001C4958;
  if (!qword_1001C4958)
  {
    result = swift_getWitnessTable(&unk_100181304, &type metadata for DataDenseTable.FourRowConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4958);
  }
  return result;
}

unint64_t sub_10010A5F4()
{
  unint64_t result;

  result = qword_1001C4960;
  if (!qword_1001C4960)
  {
    result = swift_getWitnessTable(&unk_10018132C, &type metadata for DataDenseTable.FourRowConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4960);
  }
  return result;
}

uint64_t sub_10010A638(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_10010A650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_10010A65C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_10010A670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

void sub_10010A688()
{
  __int16 v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 67) = HIBYTE(v0);
  *(_BYTE *)(v1 - 68) = 1;
}

void sub_10010A69C(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

unint64_t sub_10010A6B8()
{
  char v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 65) = v0;
  *(_BYTE *)(v1 - 66) = 0;
  return sub_100109874();
}

uint64_t sub_10010A6D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void sub_10010A6E4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 68) = 1;
}

uint64_t sub_10010A6F4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

void sub_10010A700()
{
  int v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 69) = BYTE2(v0);
  *(_BYTE *)(v1 - 70) = 2;
}

unint64_t sub_10010A714()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 4;
  return sub_1001099DC();
}

unint64_t sub_10010A720()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 0;
  return sub_100109964();
}

unint64_t sub_10010A728()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 3;
  return sub_100109A18();
}

unint64_t sub_10010A748()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 2;
  return sub_100109A54();
}

unint64_t sub_10010A754()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 68) = 1;
  return sub_100109A90();
}

uint64_t sub_10010A760(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for LayoutSubviews(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v9 = sub_10010B6F8();
    sub_10010B750();
    sub_10010B760();
    dispatch thunk of Collection.index(_:offsetBy:limitedBy:)(&v11, &v14, a1, &v13, v4, v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v1, v4);
    if ((v12 & 1) != 0)
    {
      sub_10010B760();
      sub_10010B738();
    }
    else
    {
      v10 = v11;
      sub_10010B738();
      v14 = v10;
    }
    result = sub_10010B750();
    if (v14 >= v13)
    {
      v11 = v13;
      v12 = v14;
      dispatch thunk of Collection.subscript.getter(&v11, v4, v9);
      return ((uint64_t (*)(uint64_t, uint64_t))a1)(v2, v4);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10010A894(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_10010B6A8(0, result, *(_QWORD *)(a2 + 16), a2);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10010A900(uint64_t a1, uint64_t a2)
{
  return sub_10010A934(a1, a2, sub_10010B6A8, (void (*)(_QWORD))type metadata accessor for DailyForecastViewModel);
}

uint64_t sub_10010A914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_10010A9C8(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))sub_1000E5028);
}

uint64_t sub_10010A920(uint64_t a1, uint64_t a2)
{
  return sub_10010A934(a1, a2, sub_10010B6A8, (void (*)(_QWORD))type metadata accessor for HourlyForecastViewModel);
}

uint64_t sub_10010A934(uint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, _QWORD, uint64_t), void (*a4)(_QWORD))
{
  unint64_t v6;
  char v7;
  unint64_t v8;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(a2 + 16);
  result = a3(0, result, *(_QWORD *)(a2 + 16), a2);
  if ((v7 & 1) != 0)
    v8 = v6;
  else
    v8 = result;
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v6 >= v8)
  {
    a4(0);
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10010A9C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = a5 >> 1;
    result = sub_10010B6AC(a4, result, a5 >> 1);
    if ((v10 & 1) != 0)
      v11 = v9;
    else
      v11 = result;
    if (v11 >= a4)
    {
      v12 = a6(a4);
      swift_unknownObjectRelease(a2);
      return v12;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10010AA84(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v9 & 1) != 0)
      v10 = v7;
    else
      v10 = v8;
    v11 = String.subscript.getter(15, v10, a2, a3);
    swift_bridgeObjectRelease(a3);
    return v11;
  }
  return result;
}

uint64_t sub_10010AB40(uint64_t a1)
{
  char v2;
  char v3;
  int v4;
  int v5;
  unsigned __int8 v6;

  v2 = sub_10010ABB8(a1);
  v3 = sub_10010AC80(a1);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) != 0)
      v4 = 6;
    else
      v4 = 1;
    v5 = 2;
  }
  else if ((v3 & 1) != 0)
  {
    v4 = 1;
    v5 = 6;
  }
  else
  {
    v6 = sub_10010AD48(a1);
    if ((v6 & 0xFE) != 0)
      v5 = v6;
    else
      v5 = 1;
    v4 = 1;
  }
  return v5 | (v4 << 8);
}

uint64_t sub_10010ABB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v13;

  v2 = type metadata accessor for EventViewModel(0);
  __chkstk_darwin(v2);
  v5 = (unsigned __int8 *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v8 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(a1);
    v9 = v6 - 1;
    do
    {
      sub_10010B628(v7, (uint64_t)v5);
      v10 = *v5;
      sub_10010B66C((uint64_t)v5);
      v11 = v10 == 2;
      v6 = v10 == 2;
      v11 = v11 || v9-- == 0;
      v7 += v8;
    }
    while (!v11);
    swift_bridgeObjectRelease(a1);
  }
  return v6;
}

uint64_t sub_10010AC80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v13;

  v2 = type metadata accessor for EventViewModel(0);
  __chkstk_darwin(v2);
  v5 = (unsigned __int8 *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v8 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(a1);
    v9 = v6 - 1;
    do
    {
      sub_10010B628(v7, (uint64_t)v5);
      v10 = *v5;
      sub_10010B66C((uint64_t)v5);
      v11 = v10 == 6;
      v6 = v10 == 6;
      v11 = v11 || v9-- == 0;
      v7 += v8;
    }
    while (!v11);
    swift_bridgeObjectRelease(a1);
  }
  return v6;
}

uint64_t sub_10010AD48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  int v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  v47 = v2;
  v48 = v3;
  __chkstk_darwin(v2);
  v46 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar(0);
  v44 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  __chkstk_darwin(v5);
  v40 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v42 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  __chkstk_darwin(v7);
  v41 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EventViewModel(0);
  v10 = __chkstk_darwin(v9);
  v12 = (unsigned __int8 *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (unsigned __int8 *)&v37 - v14;
  __chkstk_darwin(v13);
  v18 = (unsigned __int8 *)&v37 - v17;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    v20 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v39 = enum case for Calendar.Component.hour(_:);
    v49 = *(_QWORD *)(v16 + 72);
    v38 = a1;
    swift_bridgeObjectRetain(a1);
    v21 = v40;
    v22 = v41;
    v24 = v46;
    v23 = v47;
    while (1)
    {
      sub_10010B628(v20, (uint64_t)v18);
      v25 = *v18;
      sub_10010B628((uint64_t)v18, (uint64_t)v15);
      if (v25 == 3)
      {
        sub_10010B66C((uint64_t)v15);
        sub_10010B628((uint64_t)v18, (uint64_t)v12);
      }
      else
      {
        v26 = *v15;
        sub_10010B66C((uint64_t)v15);
        sub_10010B628((uint64_t)v18, (uint64_t)v12);
        if (v26 != 4)
        {
          v34 = *v12;
          v27 = sub_10010B66C((uint64_t)v12);
          if (v34 != 5)
            goto LABEL_8;
          goto LABEL_7;
        }
      }
      v27 = sub_10010B66C((uint64_t)v12);
LABEL_7:
      v28 = Date.init()(v27);
      static Calendar.current.getter(v28);
      v29 = v19;
      v30 = v18;
      v31 = v12;
      v32 = v48;
      (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v24, v39, v23);
      v50 = Calendar.component(_:from:)(v24, v22);
      v33 = *(void (**)(char *, uint64_t))(v32 + 8);
      v12 = v31;
      v18 = v30;
      v19 = v29;
      v33(v24, v23);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v21, v45);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v22, v43);
      if (v50 >= 20)
      {
        swift_bridgeObjectRelease(v38);
        v35 = *v18;
        sub_10010B66C((uint64_t)v18);
        return v35;
      }
LABEL_8:
      sub_10010B66C((uint64_t)v18);
      v20 += v49;
      if (!--v19)
      {
        swift_bridgeObjectRelease(v38);
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_10010B03C(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for EventViewModel(0);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  if (!v8)
    return 0;
  v9 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v10 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain(a2);
  while (1)
  {
    sub_10010B628(v9, (uint64_t)v7);
    if (*v7 == a1)
      break;
    sub_10010B748();
    v9 += v10;
    if (!--v8)
    {
      swift_bridgeObjectRelease(a2);
      return 0;
    }
  }
  swift_bridgeObjectRelease(a2);
  v11 = sub_10010B134(v7);
  sub_10010B748();
  return v11;
}

uint64_t sub_10010B134(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t *v23;
  Swift::String v25;

  v2 = type metadata accessor for Locale.Language(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 == 2)
  {
    v11 = static Locale.current.getter(v8);
    Locale.language.getter(v11);
    v12 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v13 = Locale.Language.isEnglish.getter(v12);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v14 = (uint64_t *)&a1[*(int *)(type metadata accessor for EventViewModel(0) + 40)];
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain(v16);
    if ((v13 & 1) != 0)
    {
      swift_bridgeObjectRetain(v16);
      sub_10010AA84(1, v15, v16);
      v18 = v17;
      v19 = Substring.uppercased()();
      swift_bridgeObjectRelease(v18);
      sub_100160A70(1, v15, v16);
      v21 = v20;
      v22 = Substring.lowercased()();
      swift_bridgeObjectRelease(v21);
      v25 = v19;
      swift_bridgeObjectRetain(v19._object);
      String.append(_:)(v22);
      swift_bridgeObjectRelease(v19._object);
      swift_bridgeObjectRelease(v22._object);
      return v25._countAndFlagsBits;
    }
  }
  else
  {
    v23 = (uint64_t *)&a1[*(int *)(type metadata accessor for EventViewModel(0) + 40)];
    v15 = *v23;
    swift_bridgeObjectRetain(v23[1]);
  }
  return v15;
}

uint64_t sub_10010B2F8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for EventViewModel(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (unsigned __int8 *)&v19 - v9;
  v11 = *(_QWORD *)(a2 + 16);
  if (!v11)
    return 0;
  v12 = a1;
  v13 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v14 = *(_QWORD *)(v8 + 72);
  swift_bridgeObjectRetain(a2);
  while (1)
  {
    sub_10010B628(v13, (uint64_t)v10);
    if (*v10 == v12)
      break;
    sub_10010B748();
    v13 += v14;
    if (!--v11)
    {
      swift_bridgeObjectRelease(a2);
      return 0;
    }
  }
  swift_bridgeObjectRelease(a2);
  v16 = (uint64_t *)&v10[*(int *)(v4 + 44)];
  v15 = *v16;
  v17 = v16[1];
  sub_10010B628((uint64_t)v10, (uint64_t)v7);
  if (!v17)
    v15 = sub_10010B134(v7);
  swift_bridgeObjectRetain(v17);
  sub_10010B66C((uint64_t)v7);
  sub_10010B748();
  return v15;
}

uint64_t sub_10010B44C(__int16 a1, uint64_t a2)
{
  if (a1 == 1538)
    return sub_10010B464(a2);
  else
    return sub_10010B2F8(a1, a2);
}

uint64_t sub_10010B464(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v18;

  v2 = sub_10010B2F8(2u, a1);
  v4 = v3;
  v6 = sub_10010B2F8(6u, a1);
  v7 = v5;
  v8 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v8 = v2 & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    v9 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v9 = v6 & 0xFFFFFFFFFFFFLL;
    if (v9)
    {
      if (qword_1001BEF68 != -1)
        swift_once(&qword_1001BEF68, sub_100173D84);
      v10 = (id)qword_1001DA1E8;
      v18._object = (void *)0x80000001001894C0;
      v11._countAndFlagsBits = 0x4025202E4025;
      v11._object = (void *)0xE600000000000000;
      v12._countAndFlagsBits = 0;
      v12._object = (void *)0xE000000000000000;
      v18._countAndFlagsBits = 0xD000000000000079;
      v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v18);

      v14 = sub_100005D40(&qword_1001C1848);
      v15 = swift_allocObject(v14, 112, 7);
      *(_OWORD *)(v15 + 16) = xmmword_10017BD00;
      *(_QWORD *)(v15 + 56) = &type metadata for String;
      v16 = sub_1000881BC();
      *(_QWORD *)(v15 + 32) = v2;
      *(_QWORD *)(v15 + 40) = v4;
      *(_QWORD *)(v15 + 96) = &type metadata for String;
      *(_QWORD *)(v15 + 104) = v16;
      *(_QWORD *)(v15 + 64) = v16;
      *(_QWORD *)(v15 + 72) = v6;
      *(_QWORD *)(v15 + 80) = v7;
      v6 = static String.localizedStringWithFormat(_:_:)(v13._countAndFlagsBits, v13._object, v15);
      swift_bridgeObjectRelease(v13._object);
      v4 = v15;
    }
    else
    {
      v4 = v5;
      v6 = v2;
    }
  }
  swift_bridgeObjectRelease(v4);
  return v6;
}

uint64_t type metadata accessor for EventManager()
{
  return objc_opt_self(_TtC13WeatherWidget12EventManager);
}

uint64_t sub_10010B628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010B66C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EventViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10010B6AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

unint64_t sub_10010B6F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0218;
  if (!qword_1001C0218)
  {
    v1 = type metadata accessor for LayoutSubviews(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for LayoutSubviews, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0218);
  }
  return result;
}

uint64_t sub_10010B738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10010B748()
{
  uint64_t v0;

  return sub_10010B66C(v0);
}

uint64_t sub_10010B750()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Collection.startIndex.getter(v0, v1);
}

uint64_t sub_10010B760()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Collection.endIndex.getter(v0, v1);
}

uint64_t *sub_10010B76C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t EnumCaseMultiPayload;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int *v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int *v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  int *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  int *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  void (*v160)(char *, char *, uint64_t);
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  int *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  _BOOL8 v244;
  uint64_t v246;
  char *v247;
  void (*v248)(char *, char *, uint64_t);
  void (*v249)(char *, char *, uint64_t);
  int *v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(char *, char *, uint64_t);
  void (*v256)(char *, char *, uint64_t);
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t *v260;

  if (a1 != a2)
  {
    sub_10010C7D0((uint64_t)a1);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v254 = *(_QWORD *)(v15 - 8);
  v257 = v15;
  (*(void (**)(char *, char *))(v254 + 24))(v13, v14);
  v16 = type metadata accessor for ForecastEntry(0);
  v17 = *(int *)(v16 + 20);
  v18 = &v13[v17];
  v19 = &v14[v17];
  v20 = type metadata accessor for TimelineEntryRelevance(0);
  v21 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v20);
  v22 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v20);
  v260 = a1;
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v18, 0, 1, v20);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  v23 = *(_QWORD *)(v20 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v20);
LABEL_11:
    v24 = sub_100005D40(&qword_1001BFA20);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v18, v19, v20);
LABEL_12:
  v258 = v16;
  v25 = *(int *)(v16 + 24);
  v26 = &v13[v25];
  v27 = &v14[v25];
  *(_QWORD *)v26 = *(_QWORD *)&v14[v25];
  v28 = *(_QWORD *)&v14[v25 + 8];
  v29 = *(_QWORD *)&v13[v25 + 8];
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
  v30 = *((_QWORD *)v27 + 3);
  v31 = *((_QWORD *)v26 + 3);
  *((_QWORD *)v26 + 3) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
  v32 = *((_QWORD *)v27 + 5);
  v33 = *((_QWORD *)v26 + 5);
  *((_QWORD *)v26 + 5) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v26[48] = v27[48];
  v26[49] = v27[49];
  v26[50] = v27[50];
  v26[51] = v27[51];
  v34 = type metadata accessor for WidgetContext(0);
  v35 = *(int *)(v34 + 40);
  v36 = &v26[v35];
  v37 = &v27[v35];
  v38 = type metadata accessor for URL(0);
  v39 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v36, 1, v38);
  v40 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v37, 1, v38);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v36, 0, 1, v38);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v41 = *(_QWORD *)(v38 - 8);
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v38);
LABEL_17:
    v42 = sub_100005D40(&qword_1001BFA28);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 24))(v36, v37, v38);
LABEL_18:
  v43 = *(int *)(v34 + 44);
  v44 = &v26[v43];
  v45 = &v27[v43];
  v46 = *(_QWORD *)v45;
  v47 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v44[8] = v45[8];
  v48 = v260;
  if (v260 != a2)
  {
    v49 = *(int *)(v258 + 28);
    v50 = &v13[v49];
    v51 = &v14[v49];
    sub_10002C7E0((uint64_t)v50);
    v52 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v51, v52) == 1)
    {
      v53 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v51, v53);
      v55 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v81 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v50, v51, v81);
      }
      else
      {
        v259 = v50;
        v252 = v53;
        v253 = v52;
        v251 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v56 = type metadata accessor for UUID(0);
          v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
          v57(v50, v51, v56);
          v58 = type metadata accessor for InstantWeatherViewModel(0);
          v59 = *(int *)(v58 + 20);
          v60 = &v50[v59];
          v61 = &v51[v59];
          v62 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
          v63 = *(int *)(v58 + 24);
          v64 = &v50[v63];
          v65 = &v51[v63];
          v249 = v57;
          v57(&v50[v63], v65, v56);
          v66 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v67 = *(void (**)(char *, char *, uint64_t))(v254 + 16);
          v67(&v64[v66[5]], &v65[v66[5]], v257);
          v255 = v67;
          v67(&v64[v66[6]], &v65[v66[6]], v257);
          v68 = v66[7];
          v69 = &v64[v68];
          v70 = &v65[v68];
          v71 = sub_100005D40(&qword_1001BF090);
          v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
          v72(v69, v70, v71);
          v72(&v64[v66[8]], &v65[v66[8]], v71);
          v73 = v66[9];
          v74 = &v64[v73];
          v75 = &v65[v73];
          *(_QWORD *)v74 = *(_QWORD *)v75;
          v76 = *((_QWORD *)v75 + 1);
          *((_QWORD *)v74 + 1) = v76;
          v77 = v66[10];
          v78 = &v64[v77];
          v79 = &v65[v77];
          swift_bridgeObjectRetain(v76);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v79, 1, v71))
          {
            v80 = sub_100005D40(&qword_1001BF098);
            memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
          }
          else
          {
            v72(v78, v79, v71);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v78, 0, 1, v71);
          }
          v107 = v66[11];
          v108 = &v64[v107];
          v109 = &v65[v107];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v107], 1, v71))
          {
            v110 = sub_100005D40(&qword_1001BF098);
            memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
          }
          else
          {
            v72(v108, v109, v71);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v108, 0, 1, v71);
          }
          v50 = v259;
          v115 = v66[12];
          v116 = &v64[v115];
          v117 = &v65[v115];
          v249(&v64[v115], &v65[v115], v56);
          v118 = (int *)type metadata accessor for ConditionViewModel(0);
          v119 = v118[5];
          v120 = &v116[v119];
          v121 = &v117[v119];
          v122 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
          v123 = v118[6];
          v124 = &v116[v123];
          v125 = &v117[v123];
          *(_QWORD *)v124 = *(_QWORD *)v125;
          v126 = *((_QWORD *)v125 + 1);
          *((_QWORD *)v124 + 1) = v126;
          v127 = v118[7];
          v128 = &v116[v127];
          v129 = &v117[v127];
          *(_QWORD *)v128 = *(_QWORD *)v129;
          v130 = *((_QWORD *)v129 + 1);
          *((_QWORD *)v128 + 1) = v130;
          v116[v118[8]] = v117[v118[8]];
          v116[v118[9]] = v117[v118[9]];
          v116[v118[10]] = v117[v118[10]];
          *(_QWORD *)&v64[v66[13]] = *(_QWORD *)&v65[v66[13]];
          v131 = v66[14];
          v132 = &v64[v131];
          v133 = &v65[v131];
          v134 = type metadata accessor for CloudAltitudeKind(0);
          v135 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16);
          swift_bridgeObjectRetain(v126);
          swift_bridgeObjectRetain(v130);
          v135(v132, v133, v134);
          v136 = v66[15];
          v137 = &v64[v136];
          v138 = &v65[v136];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v136], 1, v257))
          {
            v139 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
          }
          else
          {
            v255(v137, v138, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v137, 0, 1, v257);
          }
          v165 = v66[16];
          v166 = &v64[v165];
          v167 = &v65[v165];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v165], 1, v257))
          {
            v168 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
          }
          else
          {
            v255(v166, v167, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v166, 0, 1, v257);
          }
          v173 = v66[17];
          v174 = &v64[v173];
          v175 = &v65[v173];
          v176 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v176 - 8) + 16))(v174, v175, v176);
          v177 = v66[18];
          v178 = &v64[v177];
          v179 = &v65[v177];
          v180 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v180 - 8) + 16))(v178, v179, v180);
          *(_QWORD *)&v64[v66[19]] = *(_QWORD *)&v65[v66[19]];
          v181 = v66[20];
          v182 = &v64[v181];
          v183 = &v65[v181];
          if (*((_QWORD *)v183 + 1))
          {
            *(_QWORD *)v182 = *(_QWORD *)v183;
            v184 = *((_QWORD *)v183 + 1);
            *((_QWORD *)v182 + 1) = v184;
            v185 = *((_QWORD *)v183 + 2);
            v186 = *((_QWORD *)v183 + 3);
            v187 = v183[32];
            swift_bridgeObjectRetain(v184);
            sub_100006E58(v185, v186, v187);
            *((_QWORD *)v182 + 2) = v185;
            *((_QWORD *)v182 + 3) = v186;
            v182[32] = v187;
          }
          else
          {
            v203 = *(_OWORD *)v183;
            v204 = *((_OWORD *)v183 + 1);
            v182[32] = v183[32];
            *(_OWORD *)v182 = v203;
            *((_OWORD *)v182 + 1) = v204;
          }
          v48 = v260;
          v53 = v252;
          v52 = v253;
        }
        else
        {
          v82 = type metadata accessor for UUID(0);
          v83 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16);
          v83(v50, v51, v82);
          v84 = type metadata accessor for AggregateWeatherViewModel(0);
          v85 = *(int *)(v84 + 20);
          v86 = &v50[v85];
          v87 = &v51[v85];
          v88 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v86, v87, v88);
          v248 = v83;
          v250 = (int *)v84;
          v89 = *(int *)(v84 + 24);
          v90 = &v50[v89];
          v247 = v51;
          v91 = &v51[v89];
          v83(&v50[v89], v91, v82);
          v92 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v93 = *(void (**)(char *, char *, uint64_t))(v254 + 16);
          v93(&v90[v92[5]], &v91[v92[5]], v257);
          v256 = v93;
          v93(&v90[v92[6]], &v91[v92[6]], v257);
          v94 = v92[7];
          v95 = &v90[v94];
          v96 = &v91[v94];
          v97 = sub_100005D40(&qword_1001BF090);
          v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
          v98(v95, v96, v97);
          v98(&v90[v92[8]], &v91[v92[8]], v97);
          v99 = v92[9];
          v100 = &v90[v99];
          v101 = &v91[v99];
          *(_QWORD *)v100 = *(_QWORD *)v101;
          v102 = *((_QWORD *)v101 + 1);
          *((_QWORD *)v100 + 1) = v102;
          v103 = v92[10];
          v104 = &v90[v103];
          v105 = &v91[v103];
          swift_bridgeObjectRetain(v102);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v105, 1, v97))
          {
            v106 = sub_100005D40(&qword_1001BF098);
            memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
          }
          else
          {
            v98(v104, v105, v97);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v104, 0, 1, v97);
          }
          v111 = v92[11];
          v112 = &v90[v111];
          v113 = &v91[v111];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v111], 1, v97))
          {
            v114 = sub_100005D40(&qword_1001BF098);
            memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
          }
          else
          {
            v98(v112, v113, v97);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v112, 0, 1, v97);
          }
          v140 = v92[12];
          v141 = &v90[v140];
          v142 = &v91[v140];
          v246 = v82;
          v248(&v90[v140], &v91[v140], v82);
          v143 = (int *)type metadata accessor for ConditionViewModel(0);
          v144 = v143[5];
          v145 = &v141[v144];
          v146 = &v142[v144];
          v147 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 16))(v145, v146, v147);
          v148 = v143[6];
          v149 = &v141[v148];
          v150 = &v142[v148];
          *(_QWORD *)v149 = *(_QWORD *)v150;
          v151 = *((_QWORD *)v150 + 1);
          *((_QWORD *)v149 + 1) = v151;
          v152 = v143[7];
          v153 = &v141[v152];
          v154 = &v142[v152];
          *(_QWORD *)v153 = *(_QWORD *)v154;
          v155 = *((_QWORD *)v154 + 1);
          *((_QWORD *)v153 + 1) = v155;
          v141[v143[8]] = v142[v143[8]];
          v141[v143[9]] = v142[v143[9]];
          v141[v143[10]] = v142[v143[10]];
          *(_QWORD *)&v90[v92[13]] = *(_QWORD *)&v91[v92[13]];
          v156 = v92[14];
          v157 = &v90[v156];
          v158 = &v91[v156];
          v159 = type metadata accessor for CloudAltitudeKind(0);
          v160 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 16);
          swift_bridgeObjectRetain(v151);
          swift_bridgeObjectRetain(v155);
          v160(v157, v158, v159);
          v161 = v92[15];
          v162 = &v90[v161];
          v163 = &v91[v161];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v161], 1, v257))
          {
            v164 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
          }
          else
          {
            v256(v162, v163, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v162, 0, 1, v257);
          }
          v169 = v92[16];
          v170 = &v90[v169];
          v171 = &v91[v169];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v169], 1, v257))
          {
            v172 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
          }
          else
          {
            v256(v170, v171, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v170, 0, 1, v257);
          }
          v188 = v92[17];
          v189 = &v90[v188];
          v190 = &v91[v188];
          v191 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v191 - 8) + 16))(v189, v190, v191);
          v192 = v92[18];
          v193 = &v90[v192];
          v194 = &v91[v192];
          v195 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v193, v194, v195);
          *(_QWORD *)&v90[v92[19]] = *(_QWORD *)&v91[v92[19]];
          v196 = v92[20];
          v197 = &v90[v196];
          v198 = &v91[v196];
          if (*((_QWORD *)v198 + 1))
          {
            *(_QWORD *)v197 = *(_QWORD *)v198;
            v199 = *((_QWORD *)v198 + 1);
            *((_QWORD *)v197 + 1) = v199;
            v200 = *((_QWORD *)v198 + 2);
            v201 = *((_QWORD *)v198 + 3);
            v202 = v198[32];
            swift_bridgeObjectRetain(v199);
            sub_100006E58(v200, v201, v202);
            *((_QWORD *)v197 + 2) = v200;
            *((_QWORD *)v197 + 3) = v201;
            v197[32] = v202;
          }
          else
          {
            v205 = *(_OWORD *)v198;
            v206 = *((_OWORD *)v198 + 1);
            v197[32] = v198[32];
            *(_OWORD *)v197 = v205;
            *((_OWORD *)v197 + 1) = v206;
          }
          v50 = v259;
          v207 = v250[7];
          v208 = *(_QWORD *)&v247[v207];
          *(_QWORD *)&v259[v207] = v208;
          v209 = v250[8];
          v210 = *(_QWORD *)&v247[v209];
          *(_QWORD *)&v259[v209] = v210;
          v211 = v250[9];
          v212 = &v259[v211];
          v213 = &v247[v211];
          v214 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v208);
          swift_bridgeObjectRetain(v210);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v213, 1, (uint64_t)v214))
          {
            v215 = sub_100005D40(&qword_1001BFA30);
            memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64));
          }
          else
          {
            v248(v212, v213, v246);
            v256(&v212[v214[5]], &v213[v214[5]], v257);
            *(_QWORD *)&v212[v214[6]] = *(_QWORD *)&v213[v214[6]];
            v216 = v214[7];
            v217 = &v212[v216];
            v218 = &v213[v216];
            v219 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v219 - 8) + 16))(v217, v218, v219);
            v220 = v214[8];
            v221 = &v212[v220];
            v222 = &v213[v220];
            v223 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v223 - 8) + 16))(v221, v222, v223);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v212, 0, 1, (uint64_t)v214);
          }
          v224 = v250[10];
          v225 = &v259[v224];
          v226 = &v247[v224];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          v52 = v253;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v226, 1, HourPrecipitationChartViewModel))
          {
            v228 = sub_100005D40(&qword_1001BFA38);
            memcpy(v225, v226, *(_QWORD *)(*(_QWORD *)(v228 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v225, v226, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v225, 0, 1, HourPrecipitationChartViewModel);
          }
          v53 = v252;
          v229 = v250[11];
          v230 = *(_QWORD *)&v247[v229];
          *(_QWORD *)&v259[v229] = v230;
          v231 = v250[12];
          v232 = &v259[v231];
          v233 = &v247[v231];
          v234 = *(_QWORD *)v233;
          *((_WORD *)v232 + 4) = *((_WORD *)v233 + 4);
          *(_QWORD *)v232 = v234;
          v235 = v250[13];
          v236 = &v259[v235];
          v237 = &v247[v235];
          swift_bridgeObjectRetain(v230);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v237, 1, v38))
          {
            v238 = sub_100005D40(&qword_1001BFA28);
            memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v236, v237, v38);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v236, 0, 1, v38);
          }
          v239 = v250[14];
          v240 = &v259[v239];
          v241 = &v247[v239];
          v242 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v241, 1, v242))
          {
            v243 = sub_100005D40(&qword_1001BFA40);
            memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v243 - 8) + 64));
          }
          else
          {
            v244 = swift_getEnumCaseMultiPayload(v241, v242) == 1;
            v256(v240, v241, v257);
            swift_storeEnumTagMultiPayload(v240, v242, v244);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v240, 0, 1, v242);
          }
          v48 = v260;
        }
        v55 = v251;
      }
      swift_storeEnumTagMultiPayload(v50, v53, v55);
      swift_storeEnumTagMultiPayload(v50, v52, 1);
    }
    else
    {
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
  }
  return v48;
}

uint64_t sub_10010C7D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001BFA18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_10010C810(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  int *v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  __int128 v165;
  int *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  int *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  _BOOL8 v198;
  void (*v200)(char *, char *, uint64_t);
  uint64_t v201;
  int *v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(char *, char *, uint64_t);
  void (*v208)(char *, char *, uint64_t);
  uint64_t v209;
  void (*v210)(char *, char *, uint64_t);
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;

  if (a1 != a2)
  {
    sub_10010C7D0((uint64_t)a1);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v214 = a1;
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v206 = *(_QWORD *)(v11 - 8);
  v211 = v11;
  (*(void (**)(char *, char *))(v206 + 40))(v9, v10);
  v12 = type metadata accessor for ForecastEntry(0);
  v13 = *(int *)(v12 + 20);
  v14 = &v9[v13];
  v15 = &v10[v13];
  v16 = type metadata accessor for TimelineEntryRelevance(0);
  v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v16);
  v18 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v16);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v16);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v19 = *(_QWORD *)(v16 - 8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v16);
LABEL_10:
    v20 = sub_100005D40(&qword_1001BFA20);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v14, v15, v16);
LABEL_11:
  v212 = v12;
  v21 = *(int *)(v12 + 24);
  v22 = &v9[v21];
  v23 = &v10[v21];
  v24 = *(_QWORD *)&v10[v21 + 8];
  v25 = *(_QWORD *)&v9[v21 + 8];
  *(_QWORD *)v22 = *(_QWORD *)&v10[v21];
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *((_QWORD *)v23 + 3);
  v27 = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
  *((_QWORD *)v22 + 3) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *((_QWORD *)v23 + 5);
  v29 = *((_QWORD *)v22 + 5);
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  *((_QWORD *)v22 + 5) = v28;
  swift_bridgeObjectRelease(v29);
  *((_WORD *)v22 + 24) = *((_WORD *)v23 + 24);
  v22[50] = v23[50];
  v22[51] = v23[51];
  v30 = type metadata accessor for WidgetContext(0);
  v31 = *(int *)(v30 + 40);
  v32 = &v22[v31];
  v33 = &v23[v31];
  v34 = type metadata accessor for URL(0);
  v35 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v34);
  v36 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v33, 1, v34);
  v209 = v34;
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v32, 0, 1, v34);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  v37 = *(_QWORD *)(v34 - 8);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v34);
LABEL_16:
    v38 = sub_100005D40(&qword_1001BFA28);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v32, v33, v34);
LABEL_17:
  v39 = *(int *)(v30 + 44);
  v40 = &v22[v39];
  v41 = &v23[v39];
  v42 = *(_QWORD *)v40;
  *(_QWORD *)v40 = *(_QWORD *)&v23[v39];
  swift_bridgeObjectRelease(v42);
  v40[8] = v41[8];
  v43 = v214;
  if (v214 != a2)
  {
    v44 = *(int *)(v212 + 28);
    v45 = &v9[v44];
    v46 = &v10[v44];
    sub_10002C7E0((uint64_t)&v9[v44]);
    v47 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v46, v47) == 1)
    {
      v48 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v46, v48);
      v50 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v72 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v45, v46, v72);
      }
      else
      {
        v213 = v45;
        v204 = v48;
        v205 = v47;
        v203 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v51 = type metadata accessor for UUID(0);
          v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32);
          v52(v45, v46, v51);
          v53 = type metadata accessor for InstantWeatherViewModel(0);
          v54 = *(int *)(v53 + 20);
          v55 = &v45[v54];
          v56 = &v46[v54];
          v57 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
          v58 = *(int *)(v53 + 24);
          v59 = &v45[v58];
          v60 = &v46[v58];
          v210 = v52;
          v52(&v45[v58], &v46[v58], v51);
          v61 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v62 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
          v62(&v59[v61[5]], &v60[v61[5]], v211);
          v207 = v62;
          v62(&v59[v61[6]], &v60[v61[6]], v211);
          v63 = v61[7];
          v64 = &v59[v63];
          v65 = &v60[v63];
          v66 = sub_100005D40(&qword_1001BF090);
          v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32);
          v67(v64, v65, v66);
          v67(&v59[v61[8]], &v60[v61[8]], v66);
          *(_OWORD *)&v59[v61[9]] = *(_OWORD *)&v60[v61[9]];
          v68 = v61[10];
          v69 = &v59[v68];
          v70 = &v60[v68];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v68], 1, v66))
          {
            v71 = sub_100005D40(&qword_1001BF098);
            memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
          }
          else
          {
            v67(v69, v70, v66);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v69, 0, 1, v66);
          }
          v94 = v61[11];
          v95 = &v59[v94];
          v96 = &v60[v94];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v94], 1, v66))
          {
            v97 = sub_100005D40(&qword_1001BF098);
            memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
          }
          else
          {
            v67(v95, v96, v66);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v66);
          }
          v45 = v213;
          v102 = v61[12];
          v103 = &v59[v102];
          v104 = &v60[v102];
          v210(&v59[v102], &v60[v102], v51);
          v105 = (int *)type metadata accessor for ConditionViewModel(0);
          v106 = v105[5];
          v107 = &v103[v106];
          v108 = &v104[v106];
          v109 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 32))(v107, v108, v109);
          *(_OWORD *)&v103[v105[6]] = *(_OWORD *)&v104[v105[6]];
          *(_OWORD *)&v103[v105[7]] = *(_OWORD *)&v104[v105[7]];
          v103[v105[8]] = v104[v105[8]];
          v103[v105[9]] = v104[v105[9]];
          v103[v105[10]] = v104[v105[10]];
          *(_QWORD *)&v59[v61[13]] = *(_QWORD *)&v60[v61[13]];
          v110 = v61[14];
          v111 = &v59[v110];
          v112 = &v60[v110];
          v113 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v113 - 8) + 32))(v111, v112, v113);
          v114 = v61[15];
          v115 = &v59[v114];
          v116 = &v60[v114];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v114], 1, v211))
          {
            v117 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            v207(v115, v116, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v211);
          }
          v134 = v61[16];
          v135 = &v59[v134];
          v136 = &v60[v134];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v134], 1, v211))
          {
            v137 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
          }
          else
          {
            v207(v135, v136, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v135, 0, 1, v211);
          }
          v142 = v61[17];
          v143 = &v59[v142];
          v144 = &v60[v142];
          v145 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
          v146 = v61[18];
          v147 = &v59[v146];
          v148 = &v60[v146];
          v149 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 32))(v147, v148, v149);
          *(_QWORD *)&v59[v61[19]] = *(_QWORD *)&v60[v61[19]];
          v150 = v61[20];
          v151 = &v59[v150];
          v152 = &v60[v150];
          v151[32] = v152[32];
          v153 = *((_OWORD *)v152 + 1);
          *(_OWORD *)v151 = *(_OWORD *)v152;
          *((_OWORD *)v151 + 1) = v153;
          v43 = v214;
          v48 = v204;
          v47 = v205;
        }
        else
        {
          v73 = type metadata accessor for UUID(0);
          v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32);
          v74(v45, v46, v73);
          v75 = type metadata accessor for AggregateWeatherViewModel(0);
          v76 = *(int *)(v75 + 20);
          v77 = &v45[v76];
          v78 = &v46[v76];
          v79 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
          v201 = v73;
          v202 = (int *)v75;
          v80 = *(int *)(v75 + 24);
          v81 = &v45[v80];
          v82 = &v46[v80];
          v200 = v74;
          v74(&v45[v80], &v46[v80], v73);
          v83 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v84 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
          v84(&v81[v83[5]], &v82[v83[5]], v211);
          v208 = v84;
          v84(&v81[v83[6]], &v82[v83[6]], v211);
          v85 = v83[7];
          v86 = &v81[v85];
          v87 = &v82[v85];
          v88 = sub_100005D40(&qword_1001BF090);
          v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32);
          v89(v86, v87, v88);
          v89(&v81[v83[8]], &v82[v83[8]], v88);
          *(_OWORD *)&v81[v83[9]] = *(_OWORD *)&v82[v83[9]];
          v90 = v83[10];
          v91 = &v81[v90];
          v92 = &v82[v90];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v90], 1, v88))
          {
            v93 = sub_100005D40(&qword_1001BF098);
            memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
          }
          else
          {
            v89(v91, v92, v88);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v91, 0, 1, v88);
          }
          v98 = v83[11];
          v99 = &v81[v98];
          v100 = &v82[v98];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v98], 1, v88))
          {
            v101 = sub_100005D40(&qword_1001BF098);
            memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
          }
          else
          {
            v89(v99, v100, v88);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v88);
          }
          v118 = v83[12];
          v119 = &v81[v118];
          v120 = &v82[v118];
          v200(&v81[v118], &v82[v118], v201);
          v121 = (int *)type metadata accessor for ConditionViewModel(0);
          v122 = v121[5];
          v123 = &v119[v122];
          v124 = &v120[v122];
          v125 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v123, v124, v125);
          *(_OWORD *)&v119[v121[6]] = *(_OWORD *)&v120[v121[6]];
          *(_OWORD *)&v119[v121[7]] = *(_OWORD *)&v120[v121[7]];
          v119[v121[8]] = v120[v121[8]];
          v119[v121[9]] = v120[v121[9]];
          v119[v121[10]] = v120[v121[10]];
          *(_QWORD *)&v81[v83[13]] = *(_QWORD *)&v82[v83[13]];
          v126 = v83[14];
          v127 = &v81[v126];
          v128 = &v82[v126];
          v129 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 32))(v127, v128, v129);
          v130 = v83[15];
          v131 = &v81[v130];
          v132 = &v82[v130];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v130], 1, v211))
          {
            v133 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
          }
          else
          {
            v208(v131, v132, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v131, 0, 1, v211);
          }
          v138 = v83[16];
          v139 = &v81[v138];
          v140 = &v82[v138];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v138], 1, v211))
          {
            v141 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
          }
          else
          {
            v208(v139, v140, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v139, 0, 1, v211);
          }
          v154 = v83[17];
          v155 = &v81[v154];
          v156 = &v82[v154];
          v157 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 32))(v155, v156, v157);
          v158 = v83[18];
          v159 = &v81[v158];
          v160 = &v82[v158];
          v161 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 32))(v159, v160, v161);
          *(_QWORD *)&v81[v83[19]] = *(_QWORD *)&v82[v83[19]];
          v162 = v83[20];
          v163 = &v81[v162];
          v164 = &v82[v162];
          v163[32] = v164[32];
          v165 = *((_OWORD *)v164 + 1);
          *(_OWORD *)v163 = *(_OWORD *)v164;
          *((_OWORD *)v163 + 1) = v165;
          v166 = v202;
          v45 = v213;
          *(_QWORD *)&v213[v202[7]] = *(_QWORD *)&v46[v202[7]];
          *(_QWORD *)&v213[v202[8]] = *(_QWORD *)&v46[v202[8]];
          v167 = v202[9];
          v168 = &v213[v167];
          v169 = &v46[v167];
          v170 = (int *)type metadata accessor for AirQualityViewModel(0);
          v48 = v204;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v169, 1, (uint64_t)v170))
          {
            v171 = sub_100005D40(&qword_1001BFA30);
            memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
          }
          else
          {
            v200(v168, v169, v201);
            v208(&v168[v170[5]], &v169[v170[5]], v211);
            *(_QWORD *)&v168[v170[6]] = *(_QWORD *)&v169[v170[6]];
            v172 = v170[7];
            v173 = &v168[v172];
            v174 = &v169[v172];
            v175 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v175 - 8) + 32))(v173, v174, v175);
            v176 = v170[8];
            v177 = &v168[v176];
            v178 = &v169[v176];
            v179 = type metadata accessor for AirQualityScaleCategory(0);
            v180 = v177;
            v166 = v202;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v179 - 8) + 32))(v180, v178, v179);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v168, 0, 1, (uint64_t)v170);
          }
          v181 = v166[10];
          v182 = &v213[v181];
          v183 = &v46[v181];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          v47 = v205;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v183, 1, HourPrecipitationChartViewModel))
          {
            v185 = sub_100005D40(&qword_1001BFA38);
            memcpy(v182, v183, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v182, v183, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v182, 0, 1, HourPrecipitationChartViewModel);
          }
          *(_QWORD *)&v213[v166[11]] = *(_QWORD *)&v46[v166[11]];
          v186 = v166[12];
          v187 = &v213[v186];
          v188 = &v46[v186];
          *(_QWORD *)v187 = *(_QWORD *)v188;
          *((_WORD *)v187 + 4) = *((_WORD *)v188 + 4);
          v189 = v166[13];
          v190 = &v213[v189];
          v191 = &v46[v189];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v46[v189], 1, v209))
          {
            v192 = sub_100005D40(&qword_1001BFA28);
            memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v209 - 8) + 32))(v190, v191, v209);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v190, 0, 1, v209);
          }
          v193 = v202[14];
          v194 = &v213[v193];
          v195 = &v46[v193];
          v196 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v195, 1, v196))
          {
            v197 = sub_100005D40(&qword_1001BFA40);
            memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
          }
          else
          {
            v198 = swift_getEnumCaseMultiPayload(v195, v196) == 1;
            v208(v194, v195, v211);
            swift_storeEnumTagMultiPayload(v194, v196, v198);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v194, 0, 1, v196);
          }
        }
        v50 = v203;
      }
      swift_storeEnumTagMultiPayload(v45, v48, v50);
      swift_storeEnumTagMultiPayload(v45, v47, 1);
    }
    else
    {
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
  }
  return v43;
}

uint64_t sub_10010D70C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010D718);
}

uint64_t sub_10010D718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = type metadata accessor for ForecastEntry(0);
    v8 = a1 + *(int *)(a3 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
}

uint64_t sub_10010D784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010D790);
}

uint64_t sub_10010D790(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = type metadata accessor for ForecastEntry(0);
    v10 = a1 + *(int *)(a4 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for TemperatureContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C4A58;
  if (!qword_1001C4A58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TemperatureContentView);
  return result;
}

uint64_t sub_10010D83C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A08D8, 1);
}

uint64_t sub_10010D84C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10010D854(v1, a1);
}

uint64_t sub_10010D854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  Swift::String v22;
  _DWORD *v23;
  uint64_t v24;
  Swift::String v25;
  void *object;
  __n128 v27;
  Swift::String v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v32 = a2;
  v3 = type metadata accessor for TemperatureContentView(0);
  __chkstk_darwin(v3);
  v30 = (uint64_t)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100005D40(&qword_1001C4A90);
  __chkstk_darwin(v31);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TemperatureComplicationDataStatus(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TemperatureCircularContentView(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for WidgetFamily(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v29 = (_DWORD *)((char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v19 = (char *)&v29 - v18;
  sub_1000C54B0((_DWORD **)((char *)&v29 - v18));
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 88))(v19, v14) == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_1000E3294((uint64_t)v9);
    TemperatureCircularContentView.init(status:)(v9);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v6, v13, v10);
    swift_storeEnumTagMultiPayload(v6, v31, 0);
    v20 = sub_1000061B0(&qword_1001C4A98, (uint64_t (*)(uint64_t))&type metadata accessor for TemperatureCircularContentView, (uint64_t)&protocol conformance descriptor for TemperatureCircularContentView);
    _ConditionalContent<>.init(storage:)(v6, v10, &type metadata for Never, v20, &protocol witness table for Never);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    sub_10010DBA0(a1, v30);
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v22._countAndFlagsBits = 0xD000000000000022;
    v22._object = (void *)0x80000001001862F0;
    String.append(_:)(v22);
    v23 = v29;
    sub_1000C54B0(v29);
    v24 = sub_1000061B0(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v24);
    object = v25._object;
    String.append(_:)(v25);
    v27 = swift_bridgeObjectRelease(object);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v15 + 8))(v23, v14, v27);
    v28._object = (void *)0x8000000100189570;
    v28._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v28);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v33, v34, "WeatherWidget/TemperatureContentView.swift", 42, 2);
    __break(1u);
  }
  return result;
}

uint64_t sub_10010DBA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TemperatureContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10010DBE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C4AA0;
  if (!qword_1001C4AA0)
  {
    v1 = sub_100005DC4(&qword_1001C4AA8);
    sub_10010DC4C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C4AA0);
  }
  return result;
}

unint64_t sub_10010DC4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C4AB0;
  if (!qword_1001C4AB0)
  {
    v1 = sub_100005DC4(&qword_1001C4AB8);
    sub_1000061B0(&qword_1001C4A98, (uint64_t (*)(uint64_t))&type metadata accessor for TemperatureCircularContentView, (uint64_t)&protocol conformance descriptor for TemperatureCircularContentView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C4AB0);
  }
  return result;
}

uint64_t sub_10010DCD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;

  v2 = v1;
  v4 = type metadata accessor for WidgetFamily(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for WidgetFamily.systemSmall(_:))
  {
    v9 = (unsigned int *)&enum case for WidgetFamily.systemSmall(_:);
LABEL_13:
    v11 = *v9;
    v12 = type metadata accessor for WidgetFamily(0);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104);
    v14 = a1;
    v15 = v11;
    return v13(v14, v15, v12);
  }
  v10 = v8;
  if (v8 == enum case for WidgetFamily.systemMedium(_:))
  {
    v9 = (unsigned int *)&enum case for WidgetFamily.systemMedium(_:);
    goto LABEL_13;
  }
  if (v8 == enum case for WidgetFamily.systemLarge(_:))
  {
    v9 = (unsigned int *)&enum case for WidgetFamily.systemLarge(_:);
    goto LABEL_13;
  }
  if (v8 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v9 = (unsigned int *)&enum case for WidgetFamily.systemExtraLarge(_:);
    goto LABEL_13;
  }
  if (v8 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    v9 = (unsigned int *)&enum case for WidgetFamily.accessoryCircular(_:);
    goto LABEL_13;
  }
  if (v8 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    v9 = (unsigned int *)&enum case for WidgetFamily.accessoryRectangular(_:);
    goto LABEL_13;
  }
  v17 = enum case for WidgetFamily.accessoryInline(_:);
  v12 = type metadata accessor for WidgetFamily(0);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104);
  if (v10 != v17)
  {
    v13(a1, enum case for WidgetFamily.unknown(_:), v12);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v15 = enum case for WidgetFamily.accessoryInline(_:);
  v14 = a1;
  return v13(v14, v15, v12);
}

void sub_10010DEA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  __n128 v34;
  _QWORD *v35;
  void *v36;
  char v37;
  uint64_t v38;

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10002325C();
  v5 = v4 - v3;
  type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_100093598();
  v7 = sub_100005D40(&qword_1001C3450);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10002325C();
  v11 = v10 - v9;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(4, 1);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v12);
  v13 = Image.init(systemName:)(0x616C6C6572626D75, 0xED00006C6C69662ELL);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  swift_release(v13);
  v14._countAndFlagsBits = 623717664;
  v14._object = (void *)0xE400000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v14);
  v15 = LocalizedStringKey.init(stringInterpolation:)(v0);
  v35 = (_QWORD *)sub_10010E4B8(v15, v16, v17, v18);
  v36 = v19;
  v37 = v20 & 1;
  v38 = v21;
  static AccessibilityChildBehavior.ignore.getter(v35);
  View.accessibilityElement(children:)(v5, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  sub_100016868((uint64_t)v35, (uint64_t)v36, v37);
  swift_bridgeObjectRelease(v38);
  v22 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001001875A0);
  v26 = sub_10010E4B8(v22, v23, v24, v25);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  v35 = &type metadata for Text;
  v36 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v35, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityLabel(_:)(v26, v28, v32, v30, v7, OpaqueTypeConformance2);
  sub_100016868(v26, v28, v32);
  v34 = swift_bridgeObjectRelease(v30);
  (*(void (**)(uint64_t, uint64_t, __n128))(v8 + 8))(v11, v7, v34);
  sub_10001C770();
}

uint64_t sub_10010E0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010E0DC);
}

uint64_t sub_10010E0DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000963A4();
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, v0, v2);
}

uint64_t sub_10010E104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010E110);
}

uint64_t sub_10010E110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000963A4();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, v0, v0, v2);
}

uint64_t type metadata accessor for RainInlineContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C4B18;
  if (!qword_1001C4B18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RainInlineContentView);
  return result;
}

uint64_t sub_10010E174(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A0928, 1);
}

void sub_10010E184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for RainInlineTruncateFallbackText(0);
  sub_100029068();
  __chkstk_darwin(v2);
  sub_100093598();
  sub_100005D40(&qword_1001C14E8);
  sub_100029068();
  __chkstk_darwin(v3);
  sub_10002325C();
  v6 = v5 - v4;
  sub_1000FAA2C(v0, v0);
  v7 = LocalizedStringKey.init(stringLiteral:)(0x7469706963657250, 0xED00006E6F697461);
  v11 = Text.init(_:tableName:bundle:comment:)(v7, v9, v8 & 1, v10, 0, 0, 0);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = sub_1000061B0(&qword_1001C34B0, type metadata accessor for RainInlineTruncateFallbackText, (uint64_t)&unk_10017FAE0);
  View.accessibilityLabel(_:)(v11, v13, v17, v15, v1, v18);
  sub_100016868(v11, v13, v17);
  swift_bridgeObjectRelease(v15);
  v19 = sub_10010E330(v0);
  static Alignment.center.getter(v19);
  sub_100077D68();
  sub_10010E36C(v6);
  sub_10001C770();
}

uint64_t sub_10010E330(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RainInlineTruncateFallbackText(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10010E36C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001C14E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10010E3B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C4B50;
  if (!qword_1001C4B50)
  {
    v1 = sub_100005DC4(&qword_1001C14F0);
    sub_10010E41C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C4B50);
  }
  return result;
}

unint64_t sub_10010E41C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C4B58;
  if (!qword_1001C4B58)
  {
    v1 = sub_100005DC4(&qword_1001C14E8);
    sub_1000061B0(&qword_1001C34B0, type metadata accessor for RainInlineTruncateFallbackText, (uint64_t)&unk_10017FAE0);
    sub_1000061B0((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C4B58);
  }
  return result;
}

uint64_t sub_10010E4B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return Text.init(_:tableName:bundle:comment:)(a1, a2, a3 & 1, a4, 0, 0, 0);
}

uint64_t sub_10010E4D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  os_log_type_t v71;
  _WORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  os_log_type_t v79;
  _WORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  os_log_type_t v89;
  _WORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  os_log_type_t v97;
  _WORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v104[2];
  uint64_t v105;
  uint64_t v106;
  char *v107;
  int *v108;
  uint64_t *v109;
  uint64_t v110;
  char *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t HourPrecipitationChartViewModel;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123[2];

  v5 = v2;
  v117 = a2;
  v7 = type metadata accessor for EventViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_10003C234();
  sub_100005D40(&qword_1001BF0C0);
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_100023150();
  v109 = v10;
  sub_100023164();
  __chkstk_darwin(v11);
  v112 = (uint64_t *)((char *)v104 - v12);
  v113 = type metadata accessor for RainInlineContentViewModel(0);
  sub_1000230F4();
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v110 = (uint64_t)v104 - v17;
  sub_100005D40(&qword_1001BFA38);
  sub_1000230F4();
  __chkstk_darwin(v18);
  v20 = sub_100111540(v19, v104[0]);
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(v20);
  v114 = *(_QWORD *)(HourPrecipitationChartViewModel - 8);
  sub_1000230F4();
  __chkstk_darwin(v21);
  sub_1000230E0();
  v119 = v22;
  sub_100005D40(&qword_1001C4BF8);
  sub_1000230F4();
  __chkstk_darwin(v23);
  sub_100023150();
  v115 = v24;
  sub_100023164();
  __chkstk_darwin(v25);
  v111 = (char *)v104 - v26;
  sub_100023164();
  __chkstk_darwin(v27);
  v29 = (int *)((char *)v104 - v28);
  v30 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v31);
  sub_100049C1C();
  if (qword_1001BEE78 != -1)
    swift_once(&qword_1001BEE78, sub_100097B30);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_100025184(v32, (uint64_t)qword_1001D9F90);
  v121 = (void (*)(uint64_t, uint64_t))a1;
  sub_10004D258(a1, v4, type metadata accessor for AggregateWeatherViewModel);
  v116 = v33;
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc(22, -1);
    v106 = v3;
    v38 = v37;
    v39 = swift_slowAlloc(32, -1);
    v107 = v16;
    v40 = v39;
    *(_DWORD *)v38 = 141558275;
    v122 = 1752392040;
    v123[0] = v39;
    v105 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123, v38 + 4);
    *(_WORD *)(v38 + 12) = 2081;
    v108 = v29;
    v104[1] = v5;
    v41 = v30;
    v42 = type metadata accessor for Location(0);
    sub_10002EF14(&qword_1001C31A0, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
    v44 = v43;
    v45 = v42;
    v30 = v41;
    v46 = dispatch thunk of CustomStringConvertible.description.getter(v45, v44);
    v48 = v47;
    v122 = sub_10016EC84(v46, v47, v123);
    v7 = v105;
    v29 = v108;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123, v38 + 14);
    swift_bridgeObjectRelease(v48);
    sub_100011894(v4, type metadata accessor for AggregateWeatherViewModel);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "About to evaluate conditions for location=%{private,mask.hash}s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy(v40, 1);
    v49 = v40;
    v16 = v107;
    sub_10002534C(v49);
    v50 = v38;
    v3 = v106;
    sub_10002534C(v50);
  }
  else
  {
    sub_100011894(v4, type metadata accessor for AggregateWeatherViewModel);
  }

  v51 = v121;
  sub_10010FDB8(*(_QWORD *)((char *)v121 + v30[11]), (uint64_t)v29);
  v52 = v118;
  sub_1001115A4((uint64_t)v51 + v30[10], v53, &qword_1001BFA38);
  v54 = HourPrecipitationChartViewModel;
  v55 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v52, 1, HourPrecipitationChartViewModel);
  if ((_DWORD)v55 == 1)
  {
    sub_1000CD564(v55, &qword_1001BFA38);
    v57 = v115;
  }
  else
  {
    v108 = v30;
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 32);
    v58(v119, v52, v54);
    v59 = (uint64_t)v111;
    sub_1001115A4((uint64_t)v29, v60, &qword_1001C4BF8);
    v61 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v59, 1, v7);
    if ((_DWORD)v61 == 1)
    {
      sub_1000CD564(v61, &qword_1001C4BF8);
      v62 = 0;
      v63 = 0;
    }
    else
    {
      v64 = (uint64_t *)(v59 + *(int *)(v7 + 40));
      v62 = *v64;
      v63 = v64[1];
      swift_bridgeObjectRetain(v63);
      sub_100011894(v59, type metadata accessor for EventViewModel);
    }
    v65 = v112;
    sub_1000D9CB8(v51, 0, v62, v63, v112);
    swift_bridgeObjectRelease(v63);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v65, 1, v113) != 1)
    {
      v88 = v110;
      sub_10004D278((uint64_t)v65, v110, type metadata accessor for RainInlineContentViewModel);
      sub_10011157C();
      v89 = sub_1000253F0();
      if (sub_100025374(v89))
      {
        v90 = (_WORD *)sub_1000290AC();
        sub_100025420(v90);
        sub_100025360((void *)&_mh_execute_header, v91, v92, "Detected precipitation. Returning .nextHourPrecipitation.");
        sub_10002534C((uint64_t)v51);
      }

      sub_100111574(v93, &qword_1001C4BF8);
      v94 = sub_100005D40(&qword_1001C3420);
      v95 = v117;
      v96 = (char *)v117 + *(int *)(v94 + 48);
      sub_10004D278(v88, (uint64_t)v117, type metadata accessor for RainInlineContentViewModel);
      v58((uint64_t)v96, v119, v54);
      v76 = sub_100111584();
      v77 = v95;
      v78 = 1;
      return swift_storeEnumTagMultiPayload(v77, v76, v78);
    }
    v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v114 + 8))(v119, v54);
    sub_1000CD564(v66, &qword_1001BF0C0);
    v57 = v115;
    v30 = v108;
  }
  sub_1001115A4((uint64_t)v29, v56, &qword_1001C4BF8);
  v67 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v57, 1, v7);
  if ((_DWORD)v67 == 1)
  {
    sub_1000CD564(v67, &qword_1001C4BF8);
    v68 = (char *)v51 + v30[6];
    v69 = (uint64_t *)&v68[*(int *)(type metadata accessor for CurrentObservationViewModel(0) + 48)];
    if ((*((_BYTE *)v69 + *(int *)(type metadata accessor for ConditionViewModel(0) + 36)) & 1) != 0)
    {
LABEL_17:
      sub_10011157C();
      v71 = sub_1000253F0();
      if (sub_100025374(v71))
      {
        v72 = (_WORD *)sub_1000290AC();
        sub_100025420(v72);
        sub_100025360((void *)&_mh_execute_header, v73, v74, "Detected no special condition. Returning .normal.");
        sub_10002534C((uint64_t)v51);
      }

      sub_100111574(v75, &qword_1001C4BF8);
      v76 = sub_100111584();
      v77 = v117;
      v78 = 3;
      return swift_storeEnumTagMultiPayload(v77, v76, v78);
    }
    v69 = v109;
    sub_1000D967C((uint64_t)v51, 1, 7, v109, 0.6);
    v70 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v69, 1, v113);
    if ((_DWORD)v70 == 1)
    {
      sub_1000CD564(v70, &qword_1001BF0C0);
      goto LABEL_17;
    }
    sub_10004D278((uint64_t)v69, (uint64_t)v16, type metadata accessor for RainInlineContentViewModel);
    sub_10011157C();
    v97 = sub_1000253F0();
    if (sub_100025374(v97))
    {
      v98 = (_WORD *)sub_1000290AC();
      sub_100025420(v98);
      sub_100025360((void *)&_mh_execute_header, v99, v100, "Detected precipitation within six hours. Returning .precipitationWithinSixHours.");
      sub_10002534C((uint64_t)v51);
    }

    sub_100111574(v101, &qword_1001C4BF8);
    v102 = v117;
    sub_10004D278((uint64_t)v16, (uint64_t)v117, type metadata accessor for RainInlineContentViewModel);
    v76 = sub_100111584();
    v77 = v102;
    v78 = 2;
  }
  else
  {
    sub_10004D278((uint64_t)v57, v3, type metadata accessor for EventViewModel);
    sub_10011157C();
    v79 = sub_1000253F0();
    if (sub_100025374(v79))
    {
      v80 = (_WORD *)sub_1000290AC();
      sub_100025420(v80);
      sub_100025360((void *)&_mh_execute_header, v81, v82, "Detected an alert. Returning .alert.");
      sub_10002534C((uint64_t)v51);
    }

    sub_100111574(v83, &qword_1001C4BF8);
    v84 = (uint64_t *)(v3 + *(int *)(v7 + 40));
    v86 = *v84;
    v85 = v84[1];
    swift_bridgeObjectRetain(v85);
    sub_100011894(v3, type metadata accessor for EventViewModel);
    v87 = v117;
    *v117 = v86;
    v87[1] = v85;
    v76 = sub_100111584();
    v77 = v87;
    v78 = 0;
  }
  return swift_storeEnumTagMultiPayload(v77, v76, v78);
}

uint64_t sub_10010ECA8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v10;

  if (a1 == 0x7472656C61 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7472656C61, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000015)
  {
    v7 = 0x8000000100187300;
    if (a2 == 0x8000000100187300)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100187300, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100189600)
  {
    v8 = 0x8000000100189600;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100189600, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x6C616D726F6ELL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 3;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C616D726F6ELL, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_10010EE40(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10010EE70 + 4 * byte_100181CE0[a1]))(0x7472656C61, 0xE500000000000000);
}

unint64_t sub_10010EE70()
{
  return 0xD000000000000015;
}

unint64_t sub_10010EE8C()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_10010EEAC()
{
  return 0x6C616D726F6ELL;
}

uint64_t sub_10010EEC0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease(0xE200000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(12639, 0xE200000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10010EF84(char a1)
{
  if ((a1 & 1) != 0)
    return 12639;
  else
    return 12383;
}

void sub_10010EF9C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28[11];
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = sub_100005D40(&qword_1001C4D00);
  v28[3] = *(_QWORD *)(v3 - 8);
  v28[4] = v3;
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_1000230E0();
  v28[2] = v5;
  v6 = sub_100005D40(&qword_1001C4D08);
  v28[6] = *(_QWORD *)(v6 - 8);
  v28[7] = v6;
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_1000230E0();
  v28[5] = v8;
  v30 = sub_100005D40(&qword_1001C4D10);
  v28[10] = *(_QWORD *)(v30 - 8);
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_1000230E0();
  v28[8] = v10;
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v28[9] = *(_QWORD *)(HourPrecipitationChartViewModel - 8);
  sub_1000230F4();
  __chkstk_darwin(v11);
  v13 = sub_100111540(v12, v28[0]);
  v32 = type metadata accessor for RainInlineContentViewModel(v13);
  sub_1000230F4();
  __chkstk_darwin(v14);
  sub_100023150();
  v28[1] = v15;
  sub_100023164();
  __chkstk_darwin(v16);
  v31 = (char *)v28 - v17;
  v18 = sub_100005D40(&qword_1001C4D18);
  __chkstk_darwin(v18);
  sub_10003C234();
  v19 = type metadata accessor for ConditionState(0);
  sub_1000230F4();
  __chkstk_darwin(v20);
  sub_100049C1C();
  v34 = sub_100005D40(&qword_1001C4D20);
  v35 = *(_QWORD *)(v34 - 8);
  sub_1000230F4();
  __chkstk_darwin(v21);
  v23 = (char *)v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1[3];
  v25 = a1[4];
  sub_100022330(a1, v24);
  v26 = sub_100110DF8();
  v33 = v23;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ConditionState.CodingKeys, &type metadata for ConditionState.CodingKeys, v26, v24, v25);
  sub_10004D258(v36, v1, type metadata accessor for ConditionState);
  v27 = (char *)sub_10010F1CC + 4 * byte_100181CE4[swift_getEnumCaseMultiPayload(v1, v19)];
  __asm { BR              X10 }
}

void sub_10010F1CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  void (*v11)(uint64_t, uint64_t);

  v5 = *v3;
  v6 = v3[1];
  *(_BYTE *)(v4 - 70) = 0;
  sub_100110EE8();
  v8 = *(_QWORD *)(v4 - 128);
  v7 = *(_QWORD *)(v4 - 120);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ConditionState.AlertCodingKeys, v4 - 70, v7, &type metadata for ConditionState.AlertCodingKeys);
  KeyedEncodingContainer.encode(_:forKey:)(v5, v6, v9, v0);
  v10 = swift_bridgeObjectRelease(v6);
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 8))(v2, v0, v10);
  sub_100111598();
  v11(v8, v7);
  sub_100023114();
}

void sub_10010F4BC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[16];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;

  v49[11] = a2;
  v3 = sub_100005D40(&qword_1001C4CA8);
  v49[6] = *(_QWORD *)(v3 - 8);
  v49[7] = v3;
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_1000230E0();
  v49[13] = v5;
  v6 = sub_100005D40(&qword_1001C4CB0);
  v49[8] = *(_QWORD *)(v6 - 8);
  v49[9] = v6;
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_1000230E0();
  v49[14] = v8;
  v51 = sub_100005D40(&qword_1001C4CB8);
  v49[10] = *(_QWORD *)(v51 - 8);
  sub_1000230F4();
  __chkstk_darwin(v9);
  v49[15] = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005D40(&qword_1001C4CC0);
  v49[4] = *(_QWORD *)(v11 - 8);
  v49[5] = v11;
  sub_1000230F4();
  __chkstk_darwin(v12);
  sub_1000230E0();
  v49[12] = v13;
  v52 = sub_100005D40(&qword_1001C4CC8);
  v50 = *(_QWORD *)(v52 - 8);
  sub_1000230F4();
  __chkstk_darwin(v14);
  v16 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ConditionState(0);
  sub_1000230F4();
  v19 = __chkstk_darwin(v18);
  v21 = (char *)v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)v49 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)v49 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)v49 - v28;
  v31 = a1[3];
  v30 = a1[4];
  v53 = a1;
  sub_100022330(a1, v31);
  v32 = sub_100110DF8();
  v33 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ConditionState.CodingKeys, &type metadata for ConditionState.CodingKeys, v32, v31, v30);
  if (!v33)
  {
    v49[1] = v27;
    v49[2] = v21;
    v49[3] = v24;
    v54 = v29;
    v34 = KeyedDecodingContainer.allKeys.getter(v52);
    v35 = v34;
    v36 = *(_QWORD *)(v34 + 16);
    if (v36)
    {
      v49[0] = 0;
      v37 = *(unsigned __int8 *)(v34 + 32);
      sub_1000E5028(1, v36, v34, v34 + 32, 0, (2 * v36) | 1);
      v39 = v38;
      v41 = v40;
      swift_bridgeObjectRelease(v35);
      if (v39 == v41 >> 1)
        __asm { BR              X9 }
    }
    v42 = v16;
    v43 = type metadata accessor for DecodingError(0);
    swift_allocError(v43, &protocol witness table for DecodingError, 0, 0);
    v45 = v44;
    sub_100005D40(&qword_1001BF898);
    *v45 = v17;
    v46 = v52;
    v47 = KeyedDecodingContainer.codingPath.getter(v52);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v47, 0xD00000000000002BLL, 0x80000001001861A0, 0);
    v48 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v45, enum case for DecodingError.typeMismatch(_:), v43);
    swift_willThrow(v48);
    sub_1000E9B5C();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v42, v46);
  }
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v53);
  sub_100023114();
}

uint64_t sub_10010FBA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110EE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10010FBD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110EE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10010FBF8()
{
  unsigned __int8 *v0;

  return sub_10010EE40(*v0);
}

uint64_t sub_10010FC00@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10010ECA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10010FC24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110DF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10010FC4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110DF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10010FC74()
{
  char *v0;

  return sub_10010EF84(*v0);
}

uint64_t sub_10010FC7C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10010EEC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10010FCA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110EAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10010FCC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110EAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10010FCF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110E34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10010FD18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110E34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10010FD40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110E70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10010FD68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110E70();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10010FD90(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10010F4BC(a1, a2);
}

void sub_10010FDA4(_QWORD *a1)
{
  sub_10010EF9C(a1);
}

uint64_t sub_10010FDB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for EventViewModel(0);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v10 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain(a1);
    while (1)
    {
      sub_10004D258(v9, (uint64_t)v7, type metadata accessor for EventViewModel);
      if (*v7 == 2)
        break;
      sub_100011894((uint64_t)v7, type metadata accessor for EventViewModel);
      v9 += v10;
      if (!--v8)
      {
        swift_bridgeObjectRelease(a1);
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease(a1);
    sub_10004D278((uint64_t)v7, a2, type metadata accessor for EventViewModel);
    v11 = 0;
  }
  else
  {
LABEL_6:
    v11 = 1;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a2, v11, 1, v4);
}

uint64_t type metadata accessor for ConditionsEvaluationManager()
{
  return objc_opt_self(_TtC13WeatherWidget27ConditionsEvaluationManager);
}

uint64_t type metadata accessor for ConditionState(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C4C70;
  if (!qword_1001C4C70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConditionState);
  return result;
}

uint64_t *sub_10010FF24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v13);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        v15 = (int *)type metadata accessor for RainInlineContentViewModel(0);
        v16 = v15[5];
        v17 = (char *)a1 + v16;
        v18 = (char *)a2 + v16;
        v19 = type metadata accessor for AttributedString(0);
        v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
        swift_bridgeObjectRetain(v14);
        v20(v17, v18, v19);
        v21 = v15[6];
        v22 = (char *)a1 + v21;
        v23 = (char *)a2 + v21;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v21, 1, v19))
        {
          v24 = sub_100005D40(&qword_1001BF0B8);
          memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          v20(v22, v23, v19);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v22, 0, 1, v19);
        }
        v44 = v15[7];
        v45 = (uint64_t *)((char *)a1 + v44);
        v46 = (uint64_t *)((char *)a2 + v44);
        v47 = v46[1];
        *v45 = *v46;
        v45[1] = v47;
        swift_bridgeObjectRetain(v47);
        v10 = a1;
        v11 = a3;
        v12 = 2;
        goto LABEL_16;
      case 1:
        v25 = a2[1];
        *a1 = *a2;
        a1[1] = v25;
        v26 = (int *)type metadata accessor for RainInlineContentViewModel(0);
        v27 = v26[5];
        v28 = (char *)a1 + v27;
        v29 = (char *)a2 + v27;
        v30 = type metadata accessor for AttributedString(0);
        v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
        swift_bridgeObjectRetain(v25);
        v31(v28, v29, v30);
        v32 = v26[6];
        v33 = (char *)a1 + v32;
        v34 = (char *)a2 + v32;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v32, 1, v30))
        {
          v35 = sub_100005D40(&qword_1001BF0B8);
          memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          v31(v33, v34, v30);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v33, 0, 1, v30);
        }
        v36 = v26[7];
        v37 = (uint64_t *)((char *)a1 + v36);
        v38 = (uint64_t *)((char *)a2 + v36);
        v39 = v38[1];
        *v37 = *v38;
        v37[1] = v39;
        swift_bridgeObjectRetain(v39);
        v40 = *(int *)(sub_100005D40(&qword_1001C3420) + 48);
        v41 = (char *)a1 + v40;
        v42 = (char *)a2 + v40;
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v41, v42, HourPrecipitationChartViewModel);
        v10 = a1;
        v11 = a3;
        v12 = 1;
        goto LABEL_16;
      case 0:
        v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        swift_bridgeObjectRetain(v9);
        v10 = a1;
        v11 = a3;
        v12 = 0;
LABEL_16:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

void sub_1001101D8(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t HourPrecipitationChartViewModel;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    v5 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    v6 = a1 + v5[5];
    v7 = type metadata accessor for AttributedString(0);
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v6, v7);
    v9 = a1 + v5[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v9, 1, v7))
      v8(v9, v7);
    v4 = *(_QWORD *)(a1 + v5[7] + 8);
LABEL_8:
    swift_bridgeObjectRelease(v4);
    return;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      return;
    v4 = *(_QWORD *)(a1 + 8);
    goto LABEL_8;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v10 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v11 = a1 + v10[5];
  v12 = type metadata accessor for AttributedString(0);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v14 = a1 + v10[6];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v14, 1, v12))
    v13(v14, v12);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v10[7] + 8));
  v15 = a1 + *(int *)(sub_100005D40(&qword_1001C3420) + 48);
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v15, HourPrecipitationChartViewModel);
}

_QWORD *sub_10011035C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t HourPrecipitationChartViewModel;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = (int *)type metadata accessor for RainInlineContentViewModel(0);
      v13 = v12[5];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for AttributedString(0);
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain(v11);
      v17(v14, v15, v16);
      v18 = v12[6];
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v18, 1, v16))
      {
        v21 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v17(v19, v20, v16);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v19, 0, 1, v16);
      }
      v33 = v12[7];
      v34 = (_QWORD *)((char *)a1 + v33);
      v35 = (_QWORD *)((char *)a2 + v33);
      v36 = v35[1];
      *v34 = *v35;
      v34[1] = v36;
      swift_bridgeObjectRetain(v36);
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_14;
    case 1:
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = (int *)type metadata accessor for RainInlineContentViewModel(0);
      v24 = v23[5];
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      v27 = type metadata accessor for AttributedString(0);
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      swift_bridgeObjectRetain(v22);
      v28(v25, v26, v27);
      v29 = v23[6];
      v30 = (char *)a1 + v29;
      v31 = (char *)a2 + v29;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v29, 1, v27))
      {
        v32 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        v28(v30, v31, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v27);
      }
      v37 = v23[7];
      v38 = (_QWORD *)((char *)a1 + v37);
      v39 = (_QWORD *)((char *)a2 + v37);
      v40 = v39[1];
      *v38 = *v39;
      v38[1] = v40;
      swift_bridgeObjectRetain(v40);
      v41 = *(int *)(sub_100005D40(&qword_1001C3420) + 48);
      v42 = (char *)a1 + v41;
      v43 = (char *)a2 + v41;
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v42, v43, HourPrecipitationChartViewModel);
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_14;
    case 0:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
LABEL_14:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *sub_1001105E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;

  if (a1 != a2)
  {
    sub_100011894((uint64_t)a1, type metadata accessor for ConditionState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *a1 = *a2;
        v11 = a2[1];
        a1[1] = v11;
        v12 = (int *)type metadata accessor for RainInlineContentViewModel(0);
        v13 = v12[5];
        v14 = (char *)a1 + v13;
        v15 = (char *)a2 + v13;
        v16 = type metadata accessor for AttributedString(0);
        v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
        swift_bridgeObjectRetain(v11);
        v17(v14, v15, v16);
        v18 = v12[6];
        v19 = (char *)a1 + v18;
        v20 = (char *)a2 + v18;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v18, 1, v16))
        {
          v21 = sub_100005D40(&qword_1001BF0B8);
          memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        }
        else
        {
          v17(v19, v20, v16);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v19, 0, 1, v16);
        }
        v41 = v12[7];
        v42 = (_QWORD *)((char *)a1 + v41);
        v43 = (_QWORD *)((char *)a2 + v41);
        *v42 = *v43;
        v44 = v43[1];
        v42[1] = v44;
        swift_bridgeObjectRetain(v44);
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_15;
      case 1:
        *a1 = *a2;
        v22 = a2[1];
        a1[1] = v22;
        v23 = (int *)type metadata accessor for RainInlineContentViewModel(0);
        v24 = v23[5];
        v25 = (char *)a1 + v24;
        v26 = (char *)a2 + v24;
        v27 = type metadata accessor for AttributedString(0);
        v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
        swift_bridgeObjectRetain(v22);
        v28(v25, v26, v27);
        v29 = v23[6];
        v30 = (char *)a1 + v29;
        v31 = (char *)a2 + v29;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v29, 1, v27))
        {
          v32 = sub_100005D40(&qword_1001BF0B8);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          v28(v30, v31, v27);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v27);
        }
        v33 = v23[7];
        v34 = (_QWORD *)((char *)a1 + v33);
        v35 = (_QWORD *)((char *)a2 + v33);
        *v34 = *v35;
        v36 = v35[1];
        v34[1] = v36;
        swift_bridgeObjectRetain(v36);
        v37 = *(int *)(sub_100005D40(&qword_1001C3420) + 48);
        v38 = (char *)a1 + v37;
        v39 = (char *)a2 + v37;
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v38, v39, HourPrecipitationChartViewModel);
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_15;
      case 0:
        *a1 = *a2;
        v7 = a2[1];
        a1[1] = v7;
        swift_bridgeObjectRetain(v7);
        v8 = a1;
        v9 = a3;
        v10 = 0;
LABEL_15:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_1001108B4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t HourPrecipitationChartViewModel;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    v17 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    v18 = v17[5];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for AttributedString(0);
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
    v22(v19, v20, v21);
    v23 = v17[6];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v23, 1, v21))
    {
      v26 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v22(v24, v25, v21);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v21);
    }
    *(_OWORD *)((char *)a1 + v17[7]) = *(_OWORD *)((char *)a2 + v17[7]);
    v31 = a1;
    v32 = a3;
    v33 = 2;
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v7 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    v8 = v7[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for AttributedString(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
    v12(v9, v10, v11);
    v13 = v7[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v13, 1, v11))
    {
      v16 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
    }
    *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
    v27 = *(int *)(sub_100005D40(&qword_1001C3420) + 48);
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v28, v29, HourPrecipitationChartViewModel);
    v31 = a1;
    v32 = a3;
    v33 = 1;
LABEL_12:
    swift_storeEnumTagMultiPayload(v31, v32, v33);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *sub_100110AF0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t HourPrecipitationChartViewModel;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;

  if (a1 != a2)
  {
    sub_100011894((uint64_t)a1, type metadata accessor for ConditionState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v17 = (int *)type metadata accessor for RainInlineContentViewModel(0);
      v18 = v17[5];
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for AttributedString(0);
      v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
      v22(v19, v20, v21);
      v23 = v17[6];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v23, 1, v21))
      {
        v26 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v22(v24, v25, v21);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v21);
      }
      *(_OWORD *)((char *)a1 + v17[7]) = *(_OWORD *)((char *)a2 + v17[7]);
      v31 = a1;
      v32 = a3;
      v33 = 2;
      goto LABEL_13;
    }
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v7 = (int *)type metadata accessor for RainInlineContentViewModel(0);
      v8 = v7[5];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for AttributedString(0);
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
      v12(v9, v10, v11);
      v13 = v7[6];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v13, 1, v11))
      {
        v16 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v12(v14, v15, v11);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
      }
      *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
      v27 = *(int *)(sub_100005D40(&qword_1001C3420) + 48);
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v28, v29, HourPrecipitationChartViewModel);
      v31 = a1;
      v32 = a3;
      v33 = 1;
LABEL_13:
      swift_storeEnumTagMultiPayload(v31, v32, v33);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100110D44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t HourPrecipitationChartViewModel;
  unint64_t v5;
  uint64_t v6;
  _BYTE v8[32];
  _QWORD v9[3];

  v9[0] = &unk_100181D70;
  v2 = type metadata accessor for RainInlineContentViewModel(319);
  if (v3 <= 0x3F)
  {
    HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(319);
    if (v5 > 0x3F)
    {
      return HourPrecipitationChartViewModel;
    }
    else
    {
      v6 = *(_QWORD *)(v2 - 8) + 64;
      swift_getTupleTypeLayout2(v8, v6, *(_QWORD *)(HourPrecipitationChartViewModel - 8) + 64);
      v9[1] = v8;
      v9[2] = v6;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v9);
      return 0;
    }
  }
  return v2;
}

unint64_t sub_100110DF8()
{
  unint64_t result;

  result = qword_1001C4CD0;
  if (!qword_1001C4CD0)
  {
    result = swift_getWitnessTable(&unk_1001822D4, &type metadata for ConditionState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4CD0);
  }
  return result;
}

unint64_t sub_100110E34()
{
  unint64_t result;

  result = qword_1001C4CD8;
  if (!qword_1001C4CD8)
  {
    result = swift_getWitnessTable(&unk_100182284, &type metadata for ConditionState.NormalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4CD8);
  }
  return result;
}

unint64_t sub_100110E70()
{
  unint64_t result;

  result = qword_1001C4CE0;
  if (!qword_1001C4CE0)
  {
    result = swift_getWitnessTable(&unk_100182234, &type metadata for ConditionState.PrecipitationWithinSixHoursCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4CE0);
  }
  return result;
}

unint64_t sub_100110EAC()
{
  unint64_t result;

  result = qword_1001C4CF0;
  if (!qword_1001C4CF0)
  {
    result = swift_getWitnessTable(&unk_1001821E4, &type metadata for ConditionState.NextHourPrecipitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4CF0);
  }
  return result;
}

unint64_t sub_100110EE8()
{
  unint64_t result;

  result = qword_1001C4CF8;
  if (!qword_1001C4CF8)
  {
    result = swift_getWitnessTable(&unk_100182194, &type metadata for ConditionState.AlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4CF8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ConditionState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100110F70 + 4 * byte_100181CF1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100110FA4 + 4 * byte_100181CEC[v4]))();
}

uint64_t sub_100110FA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100110FAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100110FB4);
  return result;
}

uint64_t sub_100110FC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100110FC8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100110FCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100110FD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConditionState.CodingKeys()
{
  return &type metadata for ConditionState.CodingKeys;
}

ValueMetadata *type metadata accessor for ConditionState.AlertCodingKeys()
{
  return &type metadata for ConditionState.AlertCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ConditionState.NextHourPrecipitationCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100111050 + 4 * byte_100181CFB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100111084 + 4 * byte_100181CF6[v4]))();
}

uint64_t sub_100111084(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011108C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100111094);
  return result;
}

uint64_t sub_1001110A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001110A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001110AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001110B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConditionState.NextHourPrecipitationCodingKeys()
{
  return &type metadata for ConditionState.NextHourPrecipitationCodingKeys;
}

uint64_t _s13WeatherWidget14ConditionStateO15AlertCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100111110 + 4 * byte_100181D00[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100111130 + 4 * byte_100181D05[v4]))();
}

_BYTE *sub_100111110(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100111130(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100111138(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100111140(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100111148(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100111150(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ConditionState.PrecipitationWithinSixHoursCodingKeys()
{
  return &type metadata for ConditionState.PrecipitationWithinSixHoursCodingKeys;
}

ValueMetadata *type metadata accessor for ConditionState.NormalCodingKeys()
{
  return &type metadata for ConditionState.NormalCodingKeys;
}

unint64_t sub_100111180()
{
  unint64_t result;

  result = qword_1001C4D30;
  if (!qword_1001C4D30)
  {
    result = swift_getWitnessTable(&unk_100181F44, &type metadata for ConditionState.PrecipitationWithinSixHoursCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D30);
  }
  return result;
}

unint64_t sub_1001111C0()
{
  unint64_t result;

  result = qword_1001C4D38;
  if (!qword_1001C4D38)
  {
    result = swift_getWitnessTable(&unk_100181FFC, &type metadata for ConditionState.NextHourPrecipitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D38);
  }
  return result;
}

unint64_t sub_100111200()
{
  unint64_t result;

  result = qword_1001C4D40;
  if (!qword_1001C4D40)
  {
    result = swift_getWitnessTable(&unk_1001820B4, &type metadata for ConditionState.AlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D40);
  }
  return result;
}

unint64_t sub_100111240()
{
  unint64_t result;

  result = qword_1001C4D48;
  if (!qword_1001C4D48)
  {
    result = swift_getWitnessTable(&unk_10018216C, &type metadata for ConditionState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D48);
  }
  return result;
}

unint64_t sub_100111280()
{
  unint64_t result;

  result = qword_1001C4D50;
  if (!qword_1001C4D50)
  {
    result = swift_getWitnessTable(&unk_100182024, &type metadata for ConditionState.AlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D50);
  }
  return result;
}

unint64_t sub_1001112C0()
{
  unint64_t result;

  result = qword_1001C4D58;
  if (!qword_1001C4D58)
  {
    result = swift_getWitnessTable(&unk_10018204C, &type metadata for ConditionState.AlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D58);
  }
  return result;
}

unint64_t sub_100111300()
{
  unint64_t result;

  result = qword_1001C4D60;
  if (!qword_1001C4D60)
  {
    result = swift_getWitnessTable(&unk_100181F6C, &type metadata for ConditionState.NextHourPrecipitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D60);
  }
  return result;
}

unint64_t sub_100111340()
{
  unint64_t result;

  result = qword_1001C4D68;
  if (!qword_1001C4D68)
  {
    result = swift_getWitnessTable(&unk_100181F94, &type metadata for ConditionState.NextHourPrecipitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D68);
  }
  return result;
}

unint64_t sub_100111380()
{
  unint64_t result;

  result = qword_1001C4D70;
  if (!qword_1001C4D70)
  {
    result = swift_getWitnessTable(&unk_100181EB4, &type metadata for ConditionState.PrecipitationWithinSixHoursCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D70);
  }
  return result;
}

unint64_t sub_1001113C0()
{
  unint64_t result;

  result = qword_1001C4D78;
  if (!qword_1001C4D78)
  {
    result = swift_getWitnessTable(&unk_100181EDC, &type metadata for ConditionState.PrecipitationWithinSixHoursCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D78);
  }
  return result;
}

unint64_t sub_100111400()
{
  unint64_t result;

  result = qword_1001C4D80;
  if (!qword_1001C4D80)
  {
    result = swift_getWitnessTable(&unk_100181E64, &type metadata for ConditionState.NormalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D80);
  }
  return result;
}

unint64_t sub_100111440()
{
  unint64_t result;

  result = qword_1001C4D88;
  if (!qword_1001C4D88)
  {
    result = swift_getWitnessTable(&unk_100181E8C, &type metadata for ConditionState.NormalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D88);
  }
  return result;
}

unint64_t sub_100111480()
{
  unint64_t result;

  result = qword_1001C4D90;
  if (!qword_1001C4D90)
  {
    result = swift_getWitnessTable(&unk_1001820DC, &type metadata for ConditionState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D90);
  }
  return result;
}

unint64_t sub_1001114C0()
{
  unint64_t result;

  result = qword_1001C4D98;
  if (!qword_1001C4D98)
  {
    result = swift_getWitnessTable(&unk_100182104, &type metadata for ConditionState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C4D98);
  }
  return result;
}

uint64_t sub_1001114FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v1, v0);
}

uint64_t sub_100111510(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_100111524@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_100111530@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_100111540@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_100111560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 176) + 8))(v1, v0);
}

void sub_100111574(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100016904(v2, a2);
}

uint64_t sub_10011157C()
{
  return Logger.logObject.getter();
}

uint64_t sub_100111584()
{
  return type metadata accessor for ConditionState(0);
}

unint64_t sub_10011158C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 1;
  return sub_100110EAC();
}

void sub_1001115A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_10003EB70(a1, v3, a3);
}

uint64_t sub_1001115AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

unint64_t sub_1001115B8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 3;
  return sub_100110E34();
}

unint64_t sub_1001115C4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 2;
  return sub_100110E70();
}

uint64_t sub_1001115D0@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1001123A0(a1), (v6 & 1) != 0))
  {
    v7 = v5;
    v8 = *(_QWORD *)(a2 + 56);
    v9 = type metadata accessor for String.LocalizationValue(0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a3, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v7, v9);
    v10 = a3;
    v11 = 0;
    v12 = v9;
  }
  else
  {
    v12 = type metadata accessor for String.LocalizationValue(0);
    v10 = a3;
    v11 = 1;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, v11, 1, v12);
}

uint64_t sub_100111664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = sub_1001122BC(a1, a2), (v5 & 1) != 0))
    return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v4));
  else
    return 0;
}

_QWORD *sub_1001116A4(__int128 *a1, __int128 *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v3;
  v8 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[13] = 0;
  v11 = sub_100005D40(&qword_1001C4E68);
  v4[14] = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for String, v11, &protocol witness table for String);
  static UnfairLock.Options.dataSynchronization.getter();
  v12 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v4[15] = UnfairLock.init(options:)(v10);
  sub_100096428(a1, (uint64_t)(v4 + 2));
  sub_100096428(a2, (uint64_t)(v4 + 7));
  v4[12] = a3;
  return v4;
}

id sub_100111798()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 104);
  if (v1)
  {
    v2 = *(id *)(v0 + 104);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
    objc_msgSend(v3, "setQualityOfService:", 25);
    v4 = *(void **)(v0 + 104);
    *(_QWORD *)(v0 + 104) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

double sub_100111814(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  id v24;
  double result;
  _DWORD v26[2];
  uint64_t v27;
  char v28[40];
  char v29[40];

  v5 = v4;
  v26[1] = a2;
  v8 = sub_100070DE8();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = Location.coordinate.getter(v11);
  v13 = CLLocationCoordinate2D.storeKey.getter(v12);
  v15 = v14;
  v27 = v13;
  if (sub_1001119F0(a3, a4, v13, v14))
  {
    sub_100112D18();
    v16 = *(_QWORD *)(v4 + 96);
    sub_100112134(v5 + 16, (uint64_t)v29);
    sub_100112134(v5 + 56, (uint64_t)v28);
    v17 = objc_allocWithZone((Class)type metadata accessor for WeatherDataOperation(0));
    swift_retain(v16);
    v18 = sub_1000C6348();
    v19 = swift_allocObject(&unk_1001B9528, 24, 7);
    swift_weakInit(v19 + 16, v5);
    sub_100112D18();
    v20 = *(unsigned __int8 *)(v9 + 80);
    v21 = (v20 + 40) & ~v20;
    v22 = (char *)swift_allocObject(&unk_1001B9550, v21 + v10, v20 | 7);
    v23 = v27;
    *((_QWORD *)v22 + 2) = v19;
    *((_QWORD *)v22 + 3) = v23;
    *((_QWORD *)v22 + 4) = v15;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v22[v21], (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    dispatch thunk of AsyncOperation.completion.setter(sub_100112214, v22);
    v24 = sub_100111798();
    objc_msgSend(v24, "addOperation:", v18);

  }
  else
  {
    *(_QWORD *)&result = swift_bridgeObjectRelease(v15).n128_u64[0];
  }
  return result;
}

BOOL sub_1001119F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];

  UnfairLock.lock()();
  v9 = (uint64_t *)(v4 + 112);
  swift_beginAccess(v9, v23, 32, 0);
  v10 = *v9;
  swift_bridgeObjectRetain(a4);
  v11 = sub_100111664(a3, a4, v10);
  swift_bridgeObjectRelease(a4);
  if (v11)
  {
    swift_endAccess(v23);
    v12 = swift_allocObject(&unk_1001B95A0, 32, 7);
    *(_QWORD *)(v12 + 16) = a1;
    *(_QWORD *)(v12 + 24) = a2;
    swift_retain(a2);
    v13 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
    {
      sub_10006FC04();
      v13 = v21;
    }
    v14 = *(_QWORD *)(v13 + 16);
    if (v14 >= *(_QWORD *)(v13 + 24) >> 1)
    {
      sub_10006FC04();
      v13 = v22;
    }
    *(_QWORD *)(v13 + 16) = v14 + 1;
    v15 = v13 + 16 * v14;
    *(_QWORD *)(v15 + 32) = sub_100112D14;
    *(_QWORD *)(v15 + 40) = v12;
    swift_beginAccess(v9, v23, 33, 0);
    swift_bridgeObjectRetain(a4);
    v16 = v13;
  }
  else
  {
    swift_endAccess(v23);
    v17 = sub_100005D40(&qword_1001C0F30);
    v18 = swift_allocObject(v17, 48, 7);
    *(_OWORD *)(v18 + 16) = xmmword_10017BD10;
    v19 = swift_allocObject(&unk_1001B9578, 32, 7);
    *(_QWORD *)(v19 + 16) = a1;
    *(_QWORD *)(v19 + 24) = a2;
    *(_QWORD *)(v18 + 32) = sub_1000EC494;
    *(_QWORD *)(v18 + 40) = v19;
    swift_beginAccess(v9, v23, 33, 0);
    swift_bridgeObjectRetain(a4);
    swift_retain(a2);
    v16 = v18;
  }
  sub_100112964(v16, a3, a4);
  swift_endAccess(v23);
  swift_bridgeObjectRelease(a4);
  UnfairLock.unlock()();
  return v11 == 0;
}

double sub_100111C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t Strong;
  double result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  os_log_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void (*v41)(uint64_t);
  os_log_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47[24];

  v10 = type metadata accessor for Location(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v42 - v15;
  a2 += 16;
  swift_beginAccess(a2, v47, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v19 = Strong;
    v20 = sub_100111F44(a3, a4);
    swift_release(v19);
    if (v20)
    {
      if (qword_1001BEE98 != -1)
        swift_once(&qword_1001BEE98, sub_100097BD0);
      v21 = type metadata accessor for Logger(0);
      sub_100025184(v21, (uint64_t)qword_1001D9FF0);
      v22 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
      v22(v16, a5, v10);
      v23 = swift_bridgeObjectRetain_n(v20, 2);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.default.getter(v24);
      v26 = v25;
      if (os_log_type_enabled(v24, v25))
      {
        v27 = swift_slowAlloc(32, -1);
        v43 = v26;
        v28 = v27;
        v29 = swift_slowAlloc(32, -1);
        v44 = v29;
        *(_DWORD *)v28 = 141558531;
        v45 = 1752392040;
        v46 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v28 + 4);
        *(_WORD *)(v28 + 12) = 2081;
        v42 = v24;
        v22(v14, (uint64_t)v16, v10);
        v30 = String.init<A>(reflecting:)(v14, v10);
        v32 = v31;
        v45 = sub_10016EC84(v30, v31, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v28 + 14);
        v33 = swift_bridgeObjectRelease(v32);
        (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v16, v10, v33);
        *(_WORD *)(v28 + 22) = 2048;
        v34 = *(_QWORD *)(v20 + 16);
        swift_bridgeObjectRelease(v20);
        v45 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v28 + 24);
        swift_bridgeObjectRelease(v20);
        v35 = v42;
        _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v43, "Data operation completion: %{private,mask.hash}s, requests: %ld", (uint8_t *)v28, 0x20u);
        v36 = v44;
        swift_arrayDestroy(v44, 1);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v28, -1, -1);

      }
      else
      {
        v37 = swift_bridgeObjectRelease(v20);
        (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v16, v10, v37);

        swift_bridgeObjectRelease(v20);
      }
      v38 = *(_QWORD *)(v20 + 16);
      if (v38)
      {
        swift_bridgeObjectRetain(v20);
        v39 = (_QWORD *)(v20 + 40);
        do
        {
          v41 = (void (*)(uint64_t))*(v39 - 1);
          v40 = *v39;
          swift_retain(*v39);
          v41(a1);
          swift_release(v40);
          v39 += 2;
          --v38;
        }
        while (v38);
        swift_bridgeObjectRelease(v20);
      }
      *(_QWORD *)&result = swift_bridgeObjectRelease(v20).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_100111F44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(v2 + 120);
  v6[3] = a1;
  v6[4] = a2;
  v3 = type metadata accessor for UnfairLock(0);
  swift_retain(v7);
  v4 = sub_100005D40(&qword_1001C4E70);
  Lock.sync<A>(_:)(&v8, sub_1001126B0, v6, v3, v4, &protocol witness table for UnfairLock);
  swift_release(v7);
  return v8;
}

void sub_100111FD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[5];
  uint64_t v17[9];

  v3 = sub_100070DE8();
  __chkstk_darwin(v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v6 = *(_QWORD *)(v1 + 96);
  sub_100112134(v1 + 16, (uint64_t)v17);
  sub_100112134(v1 + 56, (uint64_t)v16);
  v7 = objc_allocWithZone((Class)type metadata accessor for WeatherDataOperation(0));
  swift_retain(v6);
  v8 = sub_1000C6348();
  sub_1000C9A50(a1, v9, v10, v11, v12, v13, v14, v15, v16[0], v16[1], v16[2], v16[3], v16[4], v17[0], v17[1], v17[2], v17[3], v17[4], v17[5],
    v17[6],
    v17[7],
    v17[8]);

}

uint64_t sub_1001120B0()
{
  uint64_t v0;

  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 96));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));
  return v0;
}

uint64_t sub_1001120F4()
{
  uint64_t v0;

  sub_1001120B0();
  return swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for WeatherDataService()
{
  return objc_opt_self(_TtC13WeatherWidget18WeatherDataService);
}

uint64_t sub_100112134(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100112178()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10011219C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = sub_100070DE8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

double sub_100112214(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_100070DE8() - 8) + 80);
  return sub_100111C00(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_100112254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _BYTE v8[24];

  swift_beginAccess(a1 + 112, v8, 33, 0);
  *a4 = sub_1001127EC(a2, a3);
  return swift_endAccess(v8);
}

unint64_t sub_1001122BC(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_1001123F8(a1, a2, v4);
}

unint64_t sub_100112320(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  type metadata accessor for CFString(0);
  v3 = v2;
  v4 = sub_100112CD0(&qword_1001C4E88, (uint64_t)&unk_10017A5A4);
  _CFObject.hash(into:)(v7, v3, v4);
  v5 = Hasher._finalize()();
  return sub_1001124D8(a1, v5);
}

unint64_t sub_1001123A0(unsigned __int8 a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_100112610(a1, v2);
}

unint64_t sub_1001123F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1001124D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    type metadata accessor for CFString(0);
    v9 = v8;
    v10 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * i);
    v11 = sub_100112CD0(&qword_1001C4E88, (uint64_t)&unk_10017A5A4);
    v12 = v10;
    v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      v14 = ~v4;
      for (i = (i + 1) & v14; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v14)
      {
        v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * i);
        v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_100112610(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1001126B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_100112254(v1[2], v1[3], v1[4], a1);
}

double sub_1001126BC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100112320(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v17 = *v3;
    v10 = *v3;
    *v3 = 0x8000000000000000;
    v11 = *(_QWORD *)(v10 + 24);
    sub_100005D40(&qword_1001C4E80);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);

    sub_10004B648((_OWORD *)(*(_QWORD *)(v17 + 56) + 32 * v7), a2);
    type metadata accessor for CFString(0);
    v13 = v12;
    v14 = sub_100112CD0((unint64_t *)&qword_1001BEFA8, (uint64_t)&unk_10017A5D0);
    _NativeDictionary._delete(at:)(v7, v17, v13, (char *)&type metadata for Any + 8, v14);
    v15 = *v3;
    *v3 = v17;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v15).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1001127EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_1001122BC(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v16 = *v3;
  v10 = *v3;
  *v3 = 0x8000000000000000;
  v11 = *(_QWORD *)(v10 + 24);
  sub_100005D40(&qword_1001C4E78);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 16 * v7 + 8));
  v12 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v7);
  v13 = sub_100005D40(&qword_1001C4E68);
  _NativeDictionary._delete(at:)(v7, v16, &type metadata for String, v13, &protocol witness table for String);
  v14 = *v3;
  *v3 = v16;
  swift_bridgeObjectRelease(v14);
  return v12;
}

double sub_1001128F8(_OWORD *a1, void *a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  double result;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  *v2 = 0x8000000000000000;
  sub_100112A04(a1, a2, isUniquelyReferenced_nonNull_native);
  v6 = *v2;
  *v2 = v8;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

double sub_100112964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  double result;
  uint64_t v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  *v3 = 0x8000000000000000;
  sub_100112B10(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  v8 = *v3;
  *v3 = v10;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
  return result;
}

uint64_t sub_1001129E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_OWORD *sub_100112A04(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _BOOL8 v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  _OWORD *result;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v8 = sub_100112320((uint64_t)a2);
  v10 = v7[2];
  v11 = (v9 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = v8;
  v14 = v9;
  sub_100005D40(&qword_1001C4E80);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12))
    goto LABEL_5;
  v15 = sub_100112320((uint64_t)a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    type metadata accessor for CFString(0);
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v13 = v15;
LABEL_5:
  v17 = *v4;
  if ((v14 & 1) != 0)
  {
    v18 = (_QWORD *)(v17[7] + 32 * v13);
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v18);
    return sub_10004B648(a1, v18);
  }
  else
  {
    sub_100112C24(v13, (uint64_t)a2, a1, v17);
    return a2;
  }
}

void sub_100112B10(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1001122BC(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_100005D40(&qword_1001C4E78);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_1001122BC(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = v20[7];
    swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v16));
    *(_QWORD *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_100112C88(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }
}

_OWORD *sub_100112C24(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_10004B648(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t sub_100112C88(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_100112CD0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100112D18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

void sub_100112D28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[2];

  v5 = sub_100118264(a1);
  v6 = sub_10011823C(v5);
  __chkstk_darwin(v6);
  sub_100118200();
  v7 = sub_100005D40(&qword_1001C08A8);
  __chkstk_darwin(v7);
  sub_100118170();
  sub_1001182F8();
  __chkstk_darwin(v8);
  sub_10001C85C();
  __chkstk_darwin(v9);
  v11 = (char *)v26 - v10 + 64;
  sub_100005D40(&qword_1001BF090);
  sub_1001182D8();
  __chkstk_darwin(v12);
  v13 = sub_10011818C();
  sub_1001180E8(*(int *)(v13 + 28));
  v14 = sub_10001C7FC();
  v15 = sub_10011828C(v14);
  if (v16)
    static Set<>.full.getter(v15);
  else
    static Set<>.value.getter(v15);
  v17 = sub_1001182EC();
  sub_100118128(v17);
  swift_bridgeObjectRelease(v1);
  sub_100016904(v2, &qword_1001C08A8);
  sub_10001C970();
  v18 = sub_1001181EC();
  sub_100118154(v18, enum case for WeatherFormatPlaceholder.none(_:));
  v19 = type metadata accessor for UnitManager(0);
  static UnitManager.standard.getter(v19);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  sub_10011810C(v20, v21, v22, (uint64_t)&protocol witness table for UnitManager);
  sub_1001182B4();
  sub_1001182A4();
  sub_100118254();
  sub_1001181D8();
  v26[0] = v4;
  v26[1] = v11;
  v23 = sub_10001692C();
  Text.init<A>(_:)(v26, &type metadata for String, v23);
  sub_1001180C4();
  v24 = Font.weight(_:)(v3);
  Font.monospacedDigit()(v24);
  sub_1001182C4();
  sub_1001181C0();
  sub_1001181A8();
  sub_10011821C();
  sub_100118274();
  sub_10001C770();
}

void sub_100112EC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[2];

  v5 = sub_100118264(a1);
  v6 = sub_10011823C(v5);
  __chkstk_darwin(v6);
  sub_100118200();
  v7 = sub_100005D40(&qword_1001C08A8);
  __chkstk_darwin(v7);
  sub_100118170();
  sub_1001182F8();
  __chkstk_darwin(v8);
  sub_10001C85C();
  __chkstk_darwin(v9);
  v11 = (char *)v26 - v10 + 64;
  sub_100005D40(&qword_1001BF090);
  sub_1001182D8();
  __chkstk_darwin(v12);
  v13 = sub_10011818C();
  sub_1001180E8(*(int *)(v13 + 24));
  v14 = sub_10001C7FC();
  v15 = sub_10011828C(v14);
  if (v16)
    static Set<>.full.getter(v15);
  else
    static Set<>.value.getter(v15);
  v17 = sub_1001182EC();
  sub_100118128(v17);
  swift_bridgeObjectRelease(v1);
  sub_100016904(v2, &qword_1001C08A8);
  sub_10001C970();
  v18 = sub_1001181EC();
  sub_100118154(v18, enum case for WeatherFormatPlaceholder.none(_:));
  v19 = type metadata accessor for UnitManager(0);
  static UnitManager.standard.getter(v19);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  sub_10011810C(v20, v21, v22, (uint64_t)&protocol witness table for UnitManager);
  sub_1001182B4();
  sub_1001182A4();
  sub_100118254();
  sub_1001181D8();
  v26[0] = v4;
  v26[1] = v11;
  v23 = sub_10001692C();
  Text.init<A>(_:)(v26, &type metadata for String, v23);
  sub_1001180C4();
  v24 = Font.weight(_:)(v3);
  Font.monospacedDigit()(v24);
  sub_1001182C4();
  sub_1001181C0();
  sub_1001181A8();
  sub_10011821C();
  sub_100118274();
  sub_10001C770();
}

_QWORD *sub_100113068(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v117;
  char *v118;
  _QWORD *v119;
  int *v120;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for DailyViewAttributes(0);
    v9 = v8[5];
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *(_WORD *)((char *)a1 + v8[6]) = *(_WORD *)((char *)a2 + v8[6]);
    *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
    *((_BYTE *)a1 + v8[8]) = *((_BYTE *)a2 + v8[8]);
    *((_BYTE *)a1 + v8[9]) = *((_BYTE *)a2 + v8[9]);
    *((_BYTE *)a1 + v8[10]) = *((_BYTE *)a2 + v8[10]);
    *(_QWORD *)((char *)a1 + v8[11]) = *(_QWORD *)((char *)a2 + v8[11]);
    *((_BYTE *)a1 + v8[12]) = *((_BYTE *)a2 + v8[12]);
    *((_BYTE *)a1 + v8[13]) = *((_BYTE *)a2 + v8[13]);
    *((_BYTE *)a1 + v8[14]) = *((_BYTE *)a2 + v8[14]);
    *((_BYTE *)a1 + v8[15]) = *((_BYTE *)a2 + v8[15]);
    *(_QWORD *)((char *)a1 + v8[16]) = *(_QWORD *)((char *)a2 + v8[16]);
    v11 = v8[17];
    v12 = *(_QWORD *)((char *)a2 + v11);
    *(_QWORD *)((char *)a1 + v11) = v12;
    v13 = v8[18];
    v14 = *(_QWORD *)((char *)a2 + v13);
    *(_QWORD *)((char *)a1 + v13) = v14;
    v15 = v8[19];
    v16 = *(_QWORD *)((char *)a2 + v15);
    *(_QWORD *)((char *)a1 + v15) = v16;
    *(_QWORD *)((char *)a1 + v8[20]) = *(_QWORD *)((char *)a2 + v8[20]);
    *(_QWORD *)((char *)a1 + v8[21]) = *(_QWORD *)((char *)a2 + v8[21]);
    v17 = v8[22];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    swift_bridgeObjectRetain(v10);
    swift_retain(v12);
    swift_retain(v14);
    swift_retain(v16);
    v20 = sub_100005D40(&qword_1001BF090);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v20))
    {
      v21 = sub_100005D40(&qword_1001BF098);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v18, 0, 1, v20);
    }
    v23 = v8[23];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v23, 1, v20))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v24, v25, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v20);
    }
    v119 = a2;
    v120 = a3;
    v27 = a3[5];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for UUID(0);
    v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
    v31(v28, v29, v30);
    v32 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v33 = v32[5];
    v34 = &v28[v33];
    v35 = &v29[v33];
    v36 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v37(&v28[v32[6]], &v29[v32[6]], v20);
    v37(&v28[v32[7]], &v29[v32[7]], v20);
    v38 = v32[8];
    v39 = &v28[v38];
    v40 = &v29[v38];
    v31(&v28[v38], &v29[v38], v30);
    v41 = (int *)type metadata accessor for ConditionViewModel(0);
    v42 = v41[5];
    v43 = &v39[v42];
    v44 = &v40[v42];
    v45 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
    v46 = v41[6];
    v47 = &v39[v46];
    v48 = &v40[v46];
    v49 = *((_QWORD *)v48 + 1);
    *(_QWORD *)v47 = *(_QWORD *)v48;
    *((_QWORD *)v47 + 1) = v49;
    v50 = v41[7];
    v51 = &v39[v50];
    v52 = &v40[v50];
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *((_QWORD *)v51 + 1) = v53;
    v39[v41[8]] = v40[v41[8]];
    v39[v41[9]] = v40[v41[9]];
    v39[v41[10]] = v40[v41[10]];
    v54 = v32[9];
    v55 = &v28[v54];
    v56 = &v29[v54];
    v57 = type metadata accessor for Precipitation(0);
    v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v53);
    v58(v55, v56, v57);
    *(_QWORD *)&v28[v32[10]] = *(_QWORD *)&v29[v32[10]];
    v59 = v32[11];
    v60 = &v28[v59];
    v61 = &v29[v59];
    v62 = *((_QWORD *)v61 + 1);
    *(_QWORD *)v60 = *(_QWORD *)v61;
    *((_QWORD *)v60 + 1) = v62;
    v63 = v32[12];
    v64 = &v28[v63];
    v65 = &v29[v63];
    v66 = *((_QWORD *)v65 + 1);
    *(_QWORD *)v64 = *(_QWORD *)v65;
    *((_QWORD *)v64 + 1) = v66;
    v67 = v32[13];
    v68 = &v28[v67];
    v69 = &v29[v67];
    v70 = *((_QWORD *)v69 + 1);
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *((_QWORD *)v68 + 1) = v70;
    v71 = v32[14];
    v72 = &v28[v71];
    v73 = &v29[v71];
    v74 = *((_QWORD *)v73 + 1);
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *((_QWORD *)v72 + 1) = v74;
    v75 = v32[15];
    v117 = &v29[v75];
    v118 = &v28[v75];
    v76 = type metadata accessor for TemperatureScaleConfiguration(0);
    v77 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v74);
    v77(v118, v117, v76);
    v78 = v32[16];
    v79 = &v28[v78];
    v80 = &v29[v78];
    v81 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v80, 1, v81))
    {
      v82 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v79, v80, v81);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v79, 0, 1, v81);
    }
    v83 = v32[17];
    v84 = &v28[v83];
    v85 = &v29[v83];
    v86 = type metadata accessor for MoonEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v85, 1, v86))
    {
      v87 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(v84, v85, v86);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v84, 0, 1, v86);
    }
    v88 = v32[18];
    v89 = &v28[v88];
    v90 = &v29[v88];
    v91 = type metadata accessor for UVIndex(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v89, v90, v91);
    *(_QWORD *)&v28[v32[19]] = *(_QWORD *)&v29[v32[19]];
    v92 = v120[7];
    *(_QWORD *)((char *)a1 + v120[6]) = *(_QWORD *)((char *)v119 + v120[6]);
    *(_QWORD *)((char *)a1 + v92) = *(_QWORD *)((char *)v119 + v92);
    v93 = v120[8];
    v94 = (_QWORD *)((char *)a1 + v93);
    v95 = (_QWORD *)((char *)v119 + v93);
    v96 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(v95, v96) == 1)
    {
      v97 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v94, v95, v97);
      v98 = 1;
    }
    else
    {
      v99 = *v95;
      *v94 = *v95;
      swift_retain(v99);
      v98 = 0;
    }
    swift_storeEnumTagMultiPayload(v94, v96, v98);
    v100 = v120[9];
    v101 = (char *)a1 + v100;
    v102 = (char *)v119 + v100;
    v103 = *(_QWORD *)v102;
    v104 = v102[8];
    sub_10001961C(*(_QWORD *)v102, v104);
    *(_QWORD *)v101 = v103;
    v101[8] = v104;
    v105 = v120[10];
    v106 = (_QWORD *)((char *)a1 + v105);
    v107 = (_QWORD *)((char *)v119 + v105);
    v108 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v107, v108) == 1)
    {
      v109 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v109 - 8) + 16))(v106, v107, v109);
      v110 = 1;
    }
    else
    {
      v111 = *v107;
      *v106 = *v107;
      swift_retain(v111);
      v110 = 0;
    }
    swift_storeEnumTagMultiPayload(v106, v108, v110);
    v112 = v120[11];
    v113 = (char *)a1 + v112;
    v114 = (char *)v119 + v112;
    v115 = sub_100005D40(&qword_1001BF498);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 16))(v113, v114, v115);
  }
  return a1;
}

uint64_t sub_1001137A0(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  int *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for DailyViewAttributes(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[5]));
  swift_release(*(_QWORD *)(a1 + v5[17]));
  swift_release(*(_QWORD *)(a1 + v5[18]));
  swift_release(*(_QWORD *)(a1 + v5[19]));
  v6 = a1 + v5[22];
  v7 = sub_100005D40(&qword_1001BF090);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + v5[23];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v8, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v8, v7);
  v9 = a1 + a2[5];
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v12 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v13 = v9 + v12[5];
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v15(v9 + v12[6], v7);
  v15(v9 + v12[7], v7);
  v16 = v9 + v12[8];
  v11(v16, v10);
  v17 = (int *)type metadata accessor for ConditionViewModel(0);
  v18 = v16 + v17[5];
  v19 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  swift_bridgeObjectRelease(*(_QWORD *)(v16 + v17[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v16 + v17[7] + 8));
  v20 = v9 + v12[9];
  v21 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v12[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v12[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v12[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v12[14] + 8));
  v22 = v9 + v12[15];
  v23 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  v24 = v9 + v12[16];
  v25 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v24, 1, v25))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = v9 + v12[17];
  v27 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v26, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = v9 + v12[18];
  v29 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
  v30 = (_QWORD *)(a1 + a2[8]);
  v31 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
  {
    v32 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v30, v32);
  }
  else
  {
    swift_release(*v30);
  }
  sub_100019A78(*(_QWORD *)(a1 + a2[9]), *(_BYTE *)(a1 + a2[9] + 8));
  v33 = (_QWORD *)(a1 + a2[10]);
  v34 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
  {
    v35 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v33, v35);
  }
  else
  {
    swift_release(*v33);
  }
  v36 = a1 + a2[11];
  v37 = sub_100005D40(&qword_1001BF498);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
}

uint64_t sub_100113B80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  void *v77;
  const void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  v10 = v7[17];
  v11 = *(_QWORD *)(a2 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  v12 = v7[18];
  v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  v14 = v7[19];
  v15 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v16 = v7[22];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  swift_bridgeObjectRetain(v9);
  swift_retain(v11);
  swift_retain(v13);
  swift_retain(v15);
  v19 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v19))
  {
    v20 = sub_100005D40(&qword_1001BF098);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v19);
  }
  v21 = v7[23];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v21, 1, v19))
  {
    v24 = sub_100005D40(&qword_1001BF098);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v22, v23, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v22, 0, 1, v19);
  }
  v117 = a2;
  v118 = a3;
  v25 = a3[5];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = type metadata accessor for UUID(0);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
  v29(v26, v27, v28);
  v30 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v31 = v30[5];
  v32 = v26 + v31;
  v33 = v27 + v31;
  v34 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
  v35(v26 + v30[6], v27 + v30[6], v19);
  v35(v26 + v30[7], v27 + v30[7], v19);
  v36 = v30[8];
  v37 = v26 + v36;
  v38 = v27 + v36;
  v29(v26 + v36, v27 + v36, v28);
  v39 = (int *)type metadata accessor for ConditionViewModel(0);
  v40 = v39[5];
  v41 = v37 + v40;
  v42 = v38 + v40;
  v43 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
  v44 = v39[6];
  v45 = (_QWORD *)(v37 + v44);
  v46 = (_QWORD *)(v38 + v44);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  v48 = v39[7];
  v49 = (_QWORD *)(v37 + v48);
  v50 = (_QWORD *)(v38 + v48);
  v51 = v50[1];
  *v49 = *v50;
  v49[1] = v51;
  *(_BYTE *)(v37 + v39[8]) = *(_BYTE *)(v38 + v39[8]);
  *(_BYTE *)(v37 + v39[9]) = *(_BYTE *)(v38 + v39[9]);
  *(_BYTE *)(v37 + v39[10]) = *(_BYTE *)(v38 + v39[10]);
  v52 = v30[9];
  v53 = v26 + v52;
  v54 = v27 + v52;
  v55 = type metadata accessor for Precipitation(0);
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v51);
  v56(v53, v54, v55);
  *(_QWORD *)(v26 + v30[10]) = *(_QWORD *)(v27 + v30[10]);
  v57 = v30[11];
  v58 = (_QWORD *)(v26 + v57);
  v59 = (_QWORD *)(v27 + v57);
  v60 = v59[1];
  *v58 = *v59;
  v58[1] = v60;
  v61 = v30[12];
  v62 = (_QWORD *)(v26 + v61);
  v63 = (_QWORD *)(v27 + v61);
  v64 = v63[1];
  *v62 = *v63;
  v62[1] = v64;
  v65 = v30[13];
  v66 = (_QWORD *)(v26 + v65);
  v67 = (_QWORD *)(v27 + v65);
  v68 = v67[1];
  *v66 = *v67;
  v66[1] = v68;
  v69 = v30[14];
  v70 = (_QWORD *)(v26 + v69);
  v71 = (_QWORD *)(v27 + v69);
  v72 = v71[1];
  *v70 = *v71;
  v70[1] = v72;
  v73 = v30[15];
  v115 = v27 + v73;
  v116 = v26 + v73;
  v74 = type metadata accessor for TemperatureScaleConfiguration(0);
  v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 16);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v72);
  v75(v116, v115, v74);
  v76 = v30[16];
  v77 = (void *)(v26 + v76);
  v78 = (const void *)(v27 + v76);
  v79 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v78, 1, v79))
  {
    v80 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v77, 0, 1, v79);
  }
  v81 = v30[17];
  v82 = (void *)(v26 + v81);
  v83 = (const void *)(v27 + v81);
  v84 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v83, 1, v84))
  {
    v85 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v82, v83, v84);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v82, 0, 1, v84);
  }
  v86 = v30[18];
  v87 = v26 + v86;
  v88 = v27 + v86;
  v89 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v87, v88, v89);
  *(_QWORD *)(v26 + v30[19]) = *(_QWORD *)(v27 + v30[19]);
  v90 = v118[7];
  *(_QWORD *)(a1 + v118[6]) = *(_QWORD *)(v117 + v118[6]);
  *(_QWORD *)(a1 + v90) = *(_QWORD *)(v117 + v90);
  v91 = v118[8];
  v92 = (uint64_t *)(a1 + v91);
  v93 = (uint64_t *)(v117 + v91);
  v94 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(v93, v94) == 1)
  {
    v95 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v92, v93, v95);
    v96 = 1;
  }
  else
  {
    v97 = *v93;
    *v92 = *v93;
    swift_retain(v97);
    v96 = 0;
  }
  swift_storeEnumTagMultiPayload(v92, v94, v96);
  v98 = v118[9];
  v99 = a1 + v98;
  v100 = v117 + v98;
  v101 = *(_QWORD *)v100;
  v102 = *(_BYTE *)(v100 + 8);
  sub_10001961C(*(_QWORD *)v100, v102);
  *(_QWORD *)v99 = v101;
  *(_BYTE *)(v99 + 8) = v102;
  v103 = v118[10];
  v104 = (uint64_t *)(a1 + v103);
  v105 = (uint64_t *)(v117 + v103);
  v106 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v105, v106) == 1)
  {
    v107 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v104, v105, v107);
    v108 = 1;
  }
  else
  {
    v109 = *v105;
    *v104 = *v105;
    swift_retain(v109);
    v108 = 0;
  }
  swift_storeEnumTagMultiPayload(v104, v106, v108);
  v110 = v118[11];
  v111 = a1 + v110;
  v112 = v117 + v110;
  v113 = sub_100005D40(&qword_1001BF498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(v111, v112, v113);
  return a1;
}

uint64_t sub_10011428C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const void *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const void *v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int *v140;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = v7[6];
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  v14 = v7[17];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  swift_retain(v15);
  swift_release(v16);
  v17 = v7[18];
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  swift_retain(v18);
  swift_release(v19);
  v20 = v7[19];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_retain(v21);
  swift_release(v22);
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v23 = v7[22];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  v26 = sub_100005D40(&qword_1001BF090);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v26);
  v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v26);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v29 = *(_QWORD *)(v26 - 8);
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v29 + 8))(v24, v26);
LABEL_6:
    v30 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v29 + 24))(v24, v25, v26);
LABEL_7:
  v31 = v7[23];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  v34 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v31, 1, v26);
  v35 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v33, 1, v26);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v32, v33, v26);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v32, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v36 = *(_QWORD *)(v26 - 8);
  if (v35)
  {
    (*(void (**)(void *, uint64_t))(v36 + 8))(v32, v26);
LABEL_12:
    v37 = sub_100005D40(&qword_1001BF098);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v36 + 24))(v32, v33, v26);
LABEL_13:
  v140 = a3;
  v38 = a3[5];
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = type metadata accessor for UUID(0);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24);
  v42(v39, v40, v41);
  v43 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v44 = v43[5];
  v45 = v39 + v44;
  v46 = v40 + v44;
  v47 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 24))(v45, v46, v47);
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24);
  v48(v39 + v43[6], v40 + v43[6], v26);
  v48(v39 + v43[7], v40 + v43[7], v26);
  v49 = v43[8];
  v50 = v39 + v49;
  v51 = v40 + v49;
  v42(v39 + v49, v40 + v49, v41);
  v52 = (int *)type metadata accessor for ConditionViewModel(0);
  v53 = v52[5];
  v54 = v50 + v53;
  v55 = v51 + v53;
  v56 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 24))(v54, v55, v56);
  v57 = v52[6];
  v58 = (_QWORD *)(v50 + v57);
  v59 = (_QWORD *)(v51 + v57);
  *v58 = *v59;
  v60 = v59[1];
  v61 = v58[1];
  v58[1] = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v61);
  v62 = v52[7];
  v63 = (_QWORD *)(v50 + v62);
  v64 = (_QWORD *)(v51 + v62);
  *v63 = *v64;
  v65 = v64[1];
  v66 = v63[1];
  v63[1] = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  *(_BYTE *)(v50 + v52[8]) = *(_BYTE *)(v51 + v52[8]);
  *(_BYTE *)(v50 + v52[9]) = *(_BYTE *)(v51 + v52[9]);
  *(_BYTE *)(v50 + v52[10]) = *(_BYTE *)(v51 + v52[10]);
  v67 = v43[9];
  v68 = v39 + v67;
  v69 = v40 + v67;
  v70 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 24))(v68, v69, v70);
  *(_QWORD *)(v39 + v43[10]) = *(_QWORD *)(v40 + v43[10]);
  v71 = v43[11];
  v72 = (_QWORD *)(v39 + v71);
  v73 = (_QWORD *)(v40 + v71);
  *v72 = *v73;
  v74 = v73[1];
  v75 = v72[1];
  v72[1] = v74;
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRelease(v75);
  v76 = v43[12];
  v77 = (_QWORD *)(v39 + v76);
  v78 = (_QWORD *)(v40 + v76);
  *v77 = *v78;
  v79 = v78[1];
  v80 = v77[1];
  v77[1] = v79;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRelease(v80);
  v81 = v43[13];
  v82 = (_QWORD *)(v39 + v81);
  v83 = (_QWORD *)(v40 + v81);
  *v82 = *v83;
  v84 = v83[1];
  v85 = v82[1];
  v82[1] = v84;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRelease(v85);
  v86 = v43[14];
  v87 = (_QWORD *)(v39 + v86);
  v88 = (_QWORD *)(v40 + v86);
  *v87 = *v88;
  v89 = v88[1];
  v90 = v87[1];
  v87[1] = v89;
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRelease(v90);
  v91 = v43[15];
  v92 = v39 + v91;
  v93 = v40 + v91;
  v94 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 24))(v92, v93, v94);
  v95 = v43[16];
  v96 = (void *)(v39 + v95);
  v97 = (const void *)(v40 + v95);
  v98 = type metadata accessor for SunEvents(0);
  LODWORD(v92) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v96, 1, v98);
  v99 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v97, 1, v98);
  if ((_DWORD)v92)
  {
    if (!v99)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v96, v97, v98);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v96, 0, 1, v98);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v100 = *(_QWORD *)(v98 - 8);
  if (v99)
  {
    (*(void (**)(void *, uint64_t))(v100 + 8))(v96, v98);
LABEL_18:
    v101 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(v100 + 24))(v96, v97, v98);
LABEL_19:
  v102 = v43[17];
  v103 = (void *)(v39 + v102);
  v104 = (const void *)(v40 + v102);
  v105 = type metadata accessor for MoonEvents(0);
  v106 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v103, 1, v105);
  v107 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v104, 1, v105);
  if (v106)
  {
    if (!v107)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v103, v104, v105);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v103, 0, 1, v105);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v108 = *(_QWORD *)(v105 - 8);
  if (v107)
  {
    (*(void (**)(void *, uint64_t))(v108 + 8))(v103, v105);
LABEL_24:
    v109 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, const void *, uint64_t))(v108 + 24))(v103, v104, v105);
LABEL_25:
  v110 = v43[18];
  v111 = v39 + v110;
  v112 = v40 + v110;
  v113 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 24))(v111, v112, v113);
  *(_QWORD *)(v39 + v43[19]) = *(_QWORD *)(v40 + v43[19]);
  *(_QWORD *)(a1 + v140[6]) = *(_QWORD *)(a2 + v140[6]);
  *(_QWORD *)(a1 + v140[7]) = *(_QWORD *)(a2 + v140[7]);
  if (a1 != a2)
  {
    v114 = v140[8];
    v115 = (uint64_t *)(a1 + v114);
    v116 = (uint64_t *)(a2 + v114);
    sub_100016904(a1 + v114, &qword_1001BF3C0);
    v117 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(v116, v117) == 1)
    {
      v118 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v118 - 8) + 16))(v115, v116, v118);
      v119 = 1;
    }
    else
    {
      v120 = *v116;
      *v115 = *v116;
      swift_retain(v120);
      v119 = 0;
    }
    swift_storeEnumTagMultiPayload(v115, v117, v119);
  }
  v121 = v140[9];
  v122 = a1 + v121;
  v123 = a2 + v121;
  v124 = *(_QWORD *)v123;
  v125 = *(_BYTE *)(v123 + 8);
  sub_10001961C(*(_QWORD *)v123, v125);
  v126 = *(_QWORD *)v122;
  v127 = *(_BYTE *)(v122 + 8);
  *(_QWORD *)v122 = v124;
  *(_BYTE *)(v122 + 8) = v125;
  sub_100019A78(v126, v127);
  if (a1 != a2)
  {
    v128 = v140[10];
    v129 = (uint64_t *)(a1 + v128);
    v130 = (uint64_t *)(a2 + v128);
    sub_100016904(a1 + v128, &qword_1001BF490);
    v131 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v130, v131) == 1)
    {
      v132 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v132 - 8) + 16))(v129, v130, v132);
      v133 = 1;
    }
    else
    {
      v134 = *v130;
      *v129 = *v130;
      swift_retain(v134);
      v133 = 0;
    }
    swift_storeEnumTagMultiPayload(v129, v131, v133);
  }
  v135 = v140[11];
  v136 = a1 + v135;
  v137 = a2 + v135;
  v138 = sub_100005D40(&qword_1001BF498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 24))(v136, v137, v138);
  return a1;
}

uint64_t sub_100114B7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v77;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  *(_QWORD *)(a1 + v7[17]) = *(_QWORD *)(a2 + v7[17]);
  *(_QWORD *)(a1 + v7[18]) = *(_QWORD *)(a2 + v7[18]);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v8 = v7[22];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
  {
    v12 = sub_100005D40(&qword_1001BF098);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
  }
  v13 = v7[23];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v13, 1, v11))
  {
    v16 = sub_100005D40(&qword_1001BF098);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v14, v15, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
  }
  v77 = a3;
  v17 = a3[5];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for UUID(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
  v21(v18, v19, v20);
  v22 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v23 = v22[5];
  v24 = v18 + v23;
  v25 = v19 + v23;
  v26 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v27(v18 + v22[6], v19 + v22[6], v11);
  v27(v18 + v22[7], v19 + v22[7], v11);
  v28 = v22[8];
  v29 = v18 + v28;
  v30 = v19 + v28;
  v21(v18 + v28, v19 + v28, v20);
  v31 = (int *)type metadata accessor for ConditionViewModel(0);
  v32 = v31[5];
  v33 = v29 + v32;
  v34 = v30 + v32;
  v35 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
  *(_OWORD *)(v29 + v31[6]) = *(_OWORD *)(v30 + v31[6]);
  *(_OWORD *)(v29 + v31[7]) = *(_OWORD *)(v30 + v31[7]);
  *(_BYTE *)(v29 + v31[8]) = *(_BYTE *)(v30 + v31[8]);
  *(_BYTE *)(v29 + v31[9]) = *(_BYTE *)(v30 + v31[9]);
  *(_BYTE *)(v29 + v31[10]) = *(_BYTE *)(v30 + v31[10]);
  v36 = v22[9];
  v37 = v18 + v36;
  v38 = v19 + v36;
  v39 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
  *(_QWORD *)(v18 + v22[10]) = *(_QWORD *)(v19 + v22[10]);
  *(_OWORD *)(v18 + v22[11]) = *(_OWORD *)(v19 + v22[11]);
  *(_OWORD *)(v18 + v22[12]) = *(_OWORD *)(v19 + v22[12]);
  *(_OWORD *)(v18 + v22[13]) = *(_OWORD *)(v19 + v22[13]);
  *(_OWORD *)(v18 + v22[14]) = *(_OWORD *)(v19 + v22[14]);
  v40 = v22[15];
  v41 = v18 + v40;
  v42 = v19 + v40;
  v43 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
  v44 = v22[16];
  v45 = (void *)(v18 + v44);
  v46 = (const void *)(v19 + v44);
  v47 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v46, 1, v47))
  {
    v48 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v45, v46, v47);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v45, 0, 1, v47);
  }
  v49 = v22[17];
  v50 = (void *)(v18 + v49);
  v51 = (const void *)(v19 + v49);
  v52 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v51, 1, v52))
  {
    v53 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v50, 0, 1, v52);
  }
  v54 = v22[18];
  v55 = v18 + v54;
  v56 = v19 + v54;
  v57 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
  *(_QWORD *)(v18 + v22[19]) = *(_QWORD *)(v19 + v22[19]);
  v58 = v77[7];
  *(_QWORD *)(a1 + v77[6]) = *(_QWORD *)(a2 + v77[6]);
  *(_QWORD *)(a1 + v58) = *(_QWORD *)(a2 + v58);
  v59 = v77[8];
  v60 = (void *)(a1 + v59);
  v61 = (const void *)(a2 + v59);
  v62 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(v61, v62) == 1)
  {
    v63 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v60, v61, v63);
    swift_storeEnumTagMultiPayload(v60, v62, 1);
  }
  else
  {
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  v64 = v77[9];
  v65 = v77[10];
  v66 = a1 + v64;
  v67 = a2 + v64;
  *(_QWORD *)v66 = *(_QWORD *)v67;
  *(_BYTE *)(v66 + 8) = *(_BYTE *)(v67 + 8);
  v68 = (void *)(a1 + v65);
  v69 = (const void *)(a2 + v65);
  v70 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v69, v70) == 1)
  {
    v71 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v68, v69, v71);
    swift_storeEnumTagMultiPayload(v68, v70, 1);
  }
  else
  {
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  v72 = v77[11];
  v73 = a1 + v72;
  v74 = a2 + v72;
  v75 = sub_100005D40(&qword_1001BF498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
  return a1;
}

uint64_t sub_1001151F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const void *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const void *v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  const void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  void *v126;
  const void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int *v135;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  v10 = v7[17];
  v11 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  swift_release(v11);
  v12 = v7[18];
  v13 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_release(v13);
  v14 = v7[19];
  v15 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v15);
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v16 = v7[22];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_100005D40(&qword_1001BF090);
  v20 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v17, 1, v19);
  v21 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v19);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v22 = *(_QWORD *)(v19 - 8);
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v17, v19);
LABEL_6:
    v23 = sub_100005D40(&qword_1001BF098);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v22 + 40))(v17, v18, v19);
LABEL_7:
  v24 = v7[23];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v24, 1, v19);
  v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v19);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v25, v26, v19);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v29 = *(_QWORD *)(v19 - 8);
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v29 + 8))(v25, v19);
LABEL_12:
    v30 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v29 + 40))(v25, v26, v19);
LABEL_13:
  v135 = a3;
  v31 = a3[5];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = type metadata accessor for UUID(0);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40);
  v35(v32, v33, v34);
  v36 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v37 = v36[5];
  v38 = v32 + v37;
  v39 = v33 + v37;
  v40 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 40))(v38, v39, v40);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40);
  v41(v32 + v36[6], v33 + v36[6], v19);
  v41(v32 + v36[7], v33 + v36[7], v19);
  v42 = v36[8];
  v43 = v32 + v42;
  v44 = v33 + v42;
  v35(v32 + v42, v33 + v42, v34);
  v45 = (int *)type metadata accessor for ConditionViewModel(0);
  v46 = v45[5];
  v47 = v43 + v46;
  v48 = v44 + v46;
  v49 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 40))(v47, v48, v49);
  v50 = v45[6];
  v51 = (_QWORD *)(v43 + v50);
  v52 = (uint64_t *)(v44 + v50);
  v54 = *v52;
  v53 = v52[1];
  v55 = v51[1];
  *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease(v55);
  v56 = v45[7];
  v57 = (_QWORD *)(v43 + v56);
  v58 = (uint64_t *)(v44 + v56);
  v60 = *v58;
  v59 = v58[1];
  v61 = v57[1];
  *v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease(v61);
  *(_BYTE *)(v43 + v45[8]) = *(_BYTE *)(v44 + v45[8]);
  *(_BYTE *)(v43 + v45[9]) = *(_BYTE *)(v44 + v45[9]);
  *(_BYTE *)(v43 + v45[10]) = *(_BYTE *)(v44 + v45[10]);
  v62 = v36[9];
  v63 = v32 + v62;
  v64 = v33 + v62;
  v65 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 40))(v63, v64, v65);
  *(_QWORD *)(v32 + v36[10]) = *(_QWORD *)(v33 + v36[10]);
  v66 = v36[11];
  v67 = (_QWORD *)(v32 + v66);
  v68 = (uint64_t *)(v33 + v66);
  v70 = *v68;
  v69 = v68[1];
  v71 = v67[1];
  *v67 = v70;
  v67[1] = v69;
  swift_bridgeObjectRelease(v71);
  v72 = v36[12];
  v73 = (_QWORD *)(v32 + v72);
  v74 = (uint64_t *)(v33 + v72);
  v76 = *v74;
  v75 = v74[1];
  v77 = v73[1];
  *v73 = v76;
  v73[1] = v75;
  swift_bridgeObjectRelease(v77);
  v78 = v36[13];
  v79 = (_QWORD *)(v32 + v78);
  v80 = (uint64_t *)(v33 + v78);
  v82 = *v80;
  v81 = v80[1];
  v83 = v79[1];
  *v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease(v83);
  v84 = v36[14];
  v85 = (_QWORD *)(v32 + v84);
  v86 = (uint64_t *)(v33 + v84);
  v88 = *v86;
  v87 = v86[1];
  v89 = v85[1];
  *v85 = v88;
  v85[1] = v87;
  swift_bridgeObjectRelease(v89);
  v90 = v36[15];
  v91 = v32 + v90;
  v92 = v33 + v90;
  v93 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 40))(v91, v92, v93);
  v94 = v36[16];
  v95 = (void *)(v32 + v94);
  v96 = (const void *)(v33 + v94);
  v97 = type metadata accessor for SunEvents(0);
  LODWORD(v91) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v95, 1, v97);
  v98 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v96, 1, v97);
  if ((_DWORD)v91)
  {
    if (!v98)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v97 - 8) + 32))(v95, v96, v97);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v97);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v99 = *(_QWORD *)(v97 - 8);
  if (v98)
  {
    (*(void (**)(void *, uint64_t))(v99 + 8))(v95, v97);
LABEL_18:
    v100 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(v99 + 40))(v95, v96, v97);
LABEL_19:
  v101 = v36[17];
  v102 = (void *)(v32 + v101);
  v103 = (const void *)(v33 + v101);
  v104 = type metadata accessor for MoonEvents(0);
  v105 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v102, 1, v104);
  v106 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v103, 1, v104);
  if (v105)
  {
    if (!v106)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v104 - 8) + 32))(v102, v103, v104);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v102, 0, 1, v104);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v107 = *(_QWORD *)(v104 - 8);
  if (v106)
  {
    (*(void (**)(void *, uint64_t))(v107 + 8))(v102, v104);
LABEL_24:
    v108 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, const void *, uint64_t))(v107 + 40))(v102, v103, v104);
LABEL_25:
  v109 = v36[18];
  v110 = v32 + v109;
  v111 = v33 + v109;
  v112 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 40))(v110, v111, v112);
  *(_QWORD *)(v32 + v36[19]) = *(_QWORD *)(v33 + v36[19]);
  v113 = v135[7];
  *(_QWORD *)(a1 + v135[6]) = *(_QWORD *)(a2 + v135[6]);
  *(_QWORD *)(a1 + v113) = *(_QWORD *)(a2 + v113);
  if (a1 != a2)
  {
    v114 = v135[8];
    v115 = (void *)(a1 + v114);
    v116 = (const void *)(a2 + v114);
    sub_100016904(a1 + v114, &qword_1001BF3C0);
    v117 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(v116, v117) == 1)
    {
      v118 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v118 - 8) + 32))(v115, v116, v118);
      swift_storeEnumTagMultiPayload(v115, v117, 1);
    }
    else
    {
      memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    }
  }
  v119 = v135[9];
  v120 = a1 + v119;
  v121 = (uint64_t *)(a2 + v119);
  v122 = *v121;
  LOBYTE(v121) = *((_BYTE *)v121 + 8);
  v123 = *(_QWORD *)v120;
  v124 = *(_BYTE *)(v120 + 8);
  *(_QWORD *)v120 = v122;
  *(_BYTE *)(v120 + 8) = (_BYTE)v121;
  sub_100019A78(v123, v124);
  if (a1 != a2)
  {
    v125 = v135[10];
    v126 = (void *)(a1 + v125);
    v127 = (const void *)(a2 + v125);
    sub_100016904(a1 + v125, &qword_1001BF490);
    v128 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v127, v128) == 1)
    {
      v129 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v129 - 8) + 32))(v126, v127, v129);
      swift_storeEnumTagMultiPayload(v126, v128, 1);
    }
    else
    {
      memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
    }
  }
  v130 = v135[11];
  v131 = a1 + v130;
  v132 = a2 + v130;
  v133 = sub_100005D40(&qword_1001BF498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 40))(v131, v132, v133);
  return a1;
}

uint64_t sub_100115A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100115A58);
}

uint64_t sub_100115A58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v16;

  sub_10001C7FC();
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
  }
  sub_10001C804();
  sub_10001C6C0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_17:
    v8 = a1 + v11;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
  }
  sub_100005D40(&qword_1001BF4B0);
  sub_10001C6C0();
  if (v12)
  {
    v7 = v13;
    v11 = a3[8];
    goto LABEL_17;
  }
  if ((_DWORD)a2 != 254)
  {
    sub_100005D40(&qword_1001BF4A8);
    sub_10001C6C0();
    if (v9)
    {
      v7 = v16;
      v11 = a3[10];
    }
    else
    {
      v7 = sub_100005D40(&qword_1001BF498);
      v11 = a3[11];
    }
    goto LABEL_17;
  }
  v14 = *(unsigned __int8 *)(a1 + a3[9] + 8);
  if (v14 > 1)
    return (v14 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_100115B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100115B4C);
}

void sub_100115B4C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  sub_10001C7FC();
  sub_10001C6D0();
  if (v11)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    sub_10001C804();
    sub_10001C6D0();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      sub_100005D40(&qword_1001BF4B0);
      sub_10001C6D0();
      if (v14)
      {
        v9 = v15;
        v13 = a4[8];
      }
      else
      {
        if (a3 == 254)
        {
          *(_BYTE *)(a1 + a4[9] + 8) = -(char)a2;
          return;
        }
        sub_100005D40(&qword_1001BF4A8);
        sub_10001C6D0();
        if (v11)
        {
          v9 = v16;
          v13 = a4[10];
        }
        else
        {
          v9 = sub_100005D40(&qword_1001BF498);
          v13 = a4[11];
        }
      }
    }
    v10 = a1 + v13;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for DailyTemperatureForecastRowView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C4EE8;
  if (!qword_1001C4EE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DailyTemperatureForecastRowView);
  return result;
}

void sub_100115C6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[8];

  v2 = type metadata accessor for DailyViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for DailyForecastViewModel(319);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      v12[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v12[3] = (char *)&value witness table for Builtin.Int64 + 64;
      sub_10001C028(319, &qword_1001BF530, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
      if (v7 <= 0x3F)
      {
        v12[4] = *(_QWORD *)(v6 - 8) + 64;
        v12[5] = "\t";
        sub_10001C028(319, (unint64_t *)&qword_1001BF528, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
        if (v9 <= 0x3F)
        {
          v12[6] = *(_QWORD *)(v8 - 8) + 64;
          sub_10001C074(319);
          if (v11 <= 0x3F)
          {
            v12[7] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 8, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t sub_100115D7C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A0AEC, 1);
}

double sub_100115D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  double result;
  char v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  char *v24;
  char v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v1 = type metadata accessor for WidgetRenderingMode(0);
  v31 = *(_QWORD *)(v1 - 8);
  v32 = v1;
  v2 = __chkstk_darwin(v1);
  v30 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v29 = (char *)&v29 - v4;
  v5 = type metadata accessor for ColorSchemeContrast(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v29 - v10;
  v12 = type metadata accessor for DailyTemperatureForecastRowView(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v0 + *(int *)(v13 + 36);
  v17 = *(_QWORD *)v16;
  v18 = *(_BYTE *)(v16 + 8);
  sub_10001961C(*(_QWORD *)v16, v18);
  v19 = sub_1000C5274(v17, v18);
  sub_100019A78(v17, v18);
  sub_10001C590(v0, (uint64_t)v15, type metadata accessor for DailyTemperatureForecastRowView);
  if ((v19 & 1) != 0)
  {
    sub_100011894((uint64_t)v15, type metadata accessor for DailyTemperatureForecastRowView);
    return 1.0;
  }
  else
  {
    sub_1000C548C(v11);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for ColorSchemeContrast.increased(_:), v5);
    v21 = static ColorSchemeContrast.== infix(_:_:)(v11, v9);
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22(v9, v5);
    v22(v11, v5);
    sub_100011894((uint64_t)v15, type metadata accessor for DailyTemperatureForecastRowView);
    result = 1.0;
    if ((v21 & 1) == 0)
    {
      v23 = v29;
      sub_1000C5250(v29);
      v24 = v30;
      static WidgetRenderingMode.accented.getter();
      v25 = static WidgetRenderingMode.== infix(_:_:)(v23, v24);
      v26 = *(void (**)(char *, uint64_t))(v31 + 8);
      v27 = v24;
      v28 = v32;
      v26(v27, v32);
      v26(v23, v28);
      result = 0.27;
      if ((v25 & 1) != 0)
        return 0.7;
    }
  }
  return result;
}

uint64_t sub_100115FFC@<X0>(void (**a1)(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = sub_1001182D0();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  sub_10001C590(v1, (uint64_t)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1001B95C8, v8 + v5, v7 | 7);
  result = sub_100117F54((uint64_t)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  *a1 = sub_100117F98;
  a1[1] = (void (*)(uint64_t@<X8>))v9;
  return result;
}

void sub_1001160AC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[2];

  v28 = a2;
  v25 = type metadata accessor for AccessibilityChildBehavior(0);
  v3 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005D40(&qword_1001C4F38);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001C4F40);
  v27 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100005D40(&qword_1001C4F48);
  v12 = __chkstk_darwin(v26);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v12);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v15 = sub_100005D40(&qword_1001C4F50);
  sub_100116308(a1, (uint64_t *)&v8[*(int *)(v15 + 44)]);
  static AccessibilityChildBehavior.ignore.getter(v16);
  sub_100016A54(&qword_1001C4F58, &qword_1001C4F38);
  v18 = v17;
  View.accessibilityElement(children:)(v5, v6, v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v25);
  sub_100016904((uint64_t)v8, &qword_1001C4F38);
  type metadata accessor for DailyTemperatureForecastRowView(0);
  v19 = sub_10013D430();
  v21 = v20;
  v30[0] = v19;
  v30[1] = v20;
  v29[0] = v6;
  v29[1] = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v29, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v23 = sub_10001692C();
  View.accessibilityLabel<A>(_:)(v30, v9, &type metadata for String, OpaqueTypeConformance2, v23);
  v24 = swift_bridgeObjectRelease(v21);
  (*(void (**)(char *, uint64_t, __n128))(v27 + 8))(v11, v9, v24);
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v26);
  sub_100016904((uint64_t)v14, &qword_1001C4F48);
}

double sub_100116308@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t KeyPath;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  char *v94;
  double result;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  unsigned __int8 v126;
  uint64_t v127;
  unsigned __int8 v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD v131[3];

  v96 = a1;
  v110 = a2;
  v3 = sub_100005D40(&qword_1001C4F60);
  v4 = __chkstk_darwin(v3);
  v122 = (uint64_t)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v121 = (uint64_t *)((char *)&v96 - v6);
  v115 = type metadata accessor for ColorSchemeContrast(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v112 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100005D40(&qword_1001C15F0);
  v116 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v108 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_100005D40(&qword_1001C15F8);
  __chkstk_darwin(v111);
  v109 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100005D40(&qword_1001C4F68);
  __chkstk_darwin(v117);
  v113 = (uint64_t)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_100005D40(&qword_1001C4F70);
  v11 = __chkstk_darwin(v120);
  v119 = (uint64_t)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v123 = (uint64_t)&v96 - v13;
  v14 = a1 + *(int *)(type metadata accessor for DailyTemperatureForecastRowView(0) + 20);
  v98 = v14;
  v97 = type metadata accessor for DailyForecastViewModel(0);
  v15 = (_QWORD *)(v14 + *(int *)(v97 + 56));
  v16 = v15[1];
  *(_QWORD *)&v131[0] = *v15;
  *((_QWORD *)&v131[0] + 1) = v16;
  v17 = sub_10001692C();
  swift_bridgeObjectRetain(v16);
  v18 = Text.init<A>(_:)(v131, &type metadata for String, v17);
  v20 = v19;
  v22 = v21;
  v24 = v23 & 1;
  v25 = static Color.white.getter(v18);
  v26 = Text.foregroundColor(_:)(v25, v18, v20, v24, v22);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  swift_release(v25);
  v33 = v30 & 1;
  sub_100016868(v18, v20, v24);
  swift_bridgeObjectRelease(v22);
  v34 = (int *)type metadata accessor for DailyViewAttributes(0);
  v35 = v96;
  v36 = Text.font(_:)(*(_QWORD *)(v96 + v34[17]), v26, v28, v33, v32);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  sub_100016868(v26, v28, v33);
  v43 = swift_bridgeObjectRelease(v32);
  v44 = Text.monospacedDigit()(v36, v38, v42, v40, v43);
  v46 = v45;
  v48 = v47;
  v50 = v49 & 1;
  sub_100016868(v36, v38, v42);
  swift_bridgeObjectRelease(v40);
  v51 = v35;
  v106 = Text.fontWeight(_:)(*(_QWORD *)(v35 + v34[20]), 0, v44, v46, v50, v48);
  v99 = v52;
  v107 = v53;
  LOBYTE(v38) = v54 & 1;
  sub_100016868(v44, v46, v50);
  swift_bridgeObjectRelease(v48);
  v56 = static Alignment.leading.getter(v55);
  _FrameLayout.init(width:height:alignment:)(&v125, 0x403E000000000000, 0, 0, 1, v56, v57);
  v105 = v125;
  v104 = v126;
  v103 = v127;
  v102 = v128;
  v101 = v129;
  v100 = v130;
  v58 = *(int *)(v97 + 32);
  v59 = (uint64_t *)(v98 + v58 + *(int *)(type metadata accessor for ConditionViewModel(0) + 24));
  v60 = *v59;
  v61 = v59[1];
  swift_bridgeObjectRetain(v61);
  v62 = v108;
  WidgetAccentableIconView.init(symbol:modifier:)(v60, v61, sub_100116B3C, 0, &type metadata for Image, &protocol witness table for Image);
  KeyPath = swift_getKeyPath(&unk_100182408);
  v64 = v114;
  v65 = v112;
  v66 = v115;
  (*(void (**)(char *, _QWORD, uint64_t))(v114 + 104))(v112, enum case for ColorSchemeContrast.standard(_:), v115);
  v67 = (uint64_t)v109;
  v68 = (uint64_t *)&v109[*(int *)(v111 + 36)];
  v69 = sub_100005D40(&qword_1001C1620);
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))((char *)v68 + *(int *)(v69 + 28), v65, v66);
  *v68 = KeyPath;
  v70 = v116;
  v71 = v118;
  (*(void (**)(uint64_t, char *, uint64_t))(v116 + 16))(v67, v62, v118);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v62, v71);
  v72 = *(_QWORD *)(v51 + v34[18]);
  v73 = swift_getKeyPath(&unk_100182438);
  v74 = v113;
  sub_10001C5BC(v67, v113, &qword_1001C15F8);
  v75 = (uint64_t *)(v74 + *(int *)(v117 + 36));
  *v75 = v73;
  v75[1] = v72;
  swift_retain(v72);
  sub_100016904(v67, &qword_1001C15F8);
  v77 = static Alignment.center.getter(v76);
  _FrameLayout.init(width:height:alignment:)(v131, 0x402E000000000000, 0, 0, 1, v77, v78);
  v79 = v119;
  sub_10001C5BC(v74, v119, &qword_1001C4F68);
  v80 = (_OWORD *)(v79 + *(int *)(v120 + 36));
  v81 = v131[1];
  *v80 = v131[0];
  v80[1] = v81;
  v80[2] = v131[2];
  sub_100016904(v74, &qword_1001C4F68);
  v82 = v123;
  sub_10001C660(v79, v123, &qword_1001C4F70);
  v84 = static VerticalAlignment.center.getter(v83);
  v85 = (uint64_t)v121;
  *v121 = v84;
  *(_QWORD *)(v85 + 8) = 0;
  *(_BYTE *)(v85 + 16) = 1;
  v86 = sub_100005D40(&qword_1001C4F78);
  sub_100116BE8(v51, v85 + *(int *)(v86 + 44));
  v124 = v38;
  sub_10001C5BC(v82, v79, &qword_1001C4F70);
  v87 = v122;
  sub_10001C5BC(v85, v122, &qword_1001C4F60);
  v88 = v110;
  v89 = v106;
  v90 = v99;
  *v110 = v106;
  v88[1] = v90;
  *((_BYTE *)v88 + 16) = v38;
  v91 = v107;
  v88[3] = v107;
  *((_WORD *)v88 + 16) = 257;
  v88[5] = v105;
  *((_BYTE *)v88 + 48) = v104;
  v88[7] = v103;
  *((_BYTE *)v88 + 64) = v102;
  v92 = v100;
  v88[9] = v101;
  v88[10] = v92;
  v88[11] = 0;
  *((_BYTE *)v88 + 96) = 1;
  v93 = (int *)sub_100005D40(&qword_1001C4F80);
  sub_10001C5BC(v79, (uint64_t)v88 + v93[16], &qword_1001C4F70);
  v94 = (char *)v88 + v93[20];
  *(_QWORD *)v94 = 0;
  v94[8] = 1;
  sub_10001C5BC(v87, (uint64_t)v88 + v93[24], &qword_1001C4F60);
  sub_100016828(v89, v90, v38);
  swift_bridgeObjectRetain(v91);
  sub_100016828(v89, v90, v38);
  swift_bridgeObjectRetain(v91);
  sub_100016904(v85, &qword_1001C4F60);
  sub_100016904(v123, &qword_1001C4F70);
  sub_100016868(v89, v90, v38);
  swift_bridgeObjectRelease(v91);
  sub_100016904(v87, &qword_1001C4F60);
  sub_100016904(v79, &qword_1001C4F70);
  sub_100016868(v89, v90, v124);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v91).n128_u64[0];
  return result;
}

void sub_100116B3C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_100005D40(&qword_1001C4FD0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Image.TemplateRenderingMode.macSafeOriginal.getter(v5);
  v8 = type metadata accessor for Image.TemplateRenderingMode(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v7, 0, 1, v8);
  v9 = Image.renderingMode(_:)(v7, a1);
  sub_100016904((uint64_t)v7, &qword_1001C4FD0);
  *a2 = v9;
}

void sub_100116BE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  char v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  double v115;
  char *v116;
  void (*v117)(uint64_t, uint64_t);
  char *v118;
  uint64_t v119;
  int v120;
  double v121;
  char *v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t);
  char *v125;
  double v126;
  void (*v127)(char *, uint64_t);
  char *v128;
  double v129;
  char *v130;
  char *v131;
  void (*v132)(char *, uint64_t);
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD *v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _OWORD v240[3];
  uint64_t v241;
  char v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  _OWORD v247[3];
  uint64_t v248;
  unsigned __int8 v249;
  int *v250;
  unsigned __int8 v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  unsigned __int8 v255;
  char *v256;
  unsigned __int8 v257;
  uint64_t v258;
  char *v259;

  v231 = a2;
  v3 = type metadata accessor for TemperatureScaleConfiguration.Gradient(0);
  __chkstk_darwin(v3);
  v224 = (char *)&v191 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = type metadata accessor for DailyTemperatureForecastRowView(0);
  v5 = __chkstk_darwin(v238);
  v233 = (uint64_t)&v191 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v228 = (char *)&v191 - v7;
  v8 = sub_100005D40(&qword_1001BF098);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v191 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v225 = (uint64_t)&v191 - v12;
  v13 = sub_100005D40(&qword_1001BF090);
  v234 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v214 = (char *)&v191 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v213 = (char *)&v191 - v17;
  v18 = __chkstk_darwin(v16);
  v198 = (char *)&v191 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v191 - v21;
  __chkstk_darwin(v20);
  v197 = (char *)&v191 - v23;
  v24 = type metadata accessor for WeatherDayVarianceView(0);
  v222 = *(_QWORD *)(v24 - 8);
  v223 = v24;
  __chkstk_darwin(v24);
  v221 = (char *)&v191 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = sub_100005D40(&qword_1001BF618);
  __chkstk_darwin(v215);
  v218 = (char *)&v191 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = sub_100005D40(&qword_1001C4F88);
  __chkstk_darwin(v220);
  v219 = (uint64_t)&v191 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v229 = sub_100005D40(&qword_1001C4F90);
  v28 = __chkstk_darwin(v229);
  v217 = (char *)&v191 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v216 = (uint64_t)&v191 - v30;
  v31 = sub_100005D40(&qword_1001C4F98);
  v32 = __chkstk_darwin(v31);
  v230 = (uint64_t)&v191 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v35 = (char *)&v191 - v34;
  v36 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v36);
  v207 = (char *)&v191 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for WidgetRenderingMode(0);
  v227 = *(_QWORD *)(v38 - 8);
  v39 = __chkstk_darwin(v38);
  v41 = (char *)&v191 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v226 = (char *)&v191 - v42;
  v43 = type metadata accessor for BlendMode(0);
  v202 = *(_QWORD *)(v43 - 8);
  v203 = v43;
  __chkstk_darwin(v43);
  v200 = (char *)&v191 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_100005D40(&qword_1001BF630);
  __chkstk_darwin(v199);
  v46 = (char *)&v191 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100005D40(&qword_1001BF638);
  __chkstk_darwin(v201);
  v206 = (uint64_t)&v191 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_100005D40(&qword_1001BF640);
  v48 = __chkstk_darwin(v205);
  v209 = (uint64_t)&v191 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __chkstk_darwin(v48);
  v204 = (uint64_t)&v191 - v51;
  __chkstk_darwin(v50);
  v208 = (uint64_t)&v191 - v52;
  v53 = sub_100005D40(&qword_1001C4FA0);
  v54 = __chkstk_darwin(v53);
  v237 = (uint64_t)&v191 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  v57 = (char *)&v191 - v56;
  v232 = (int *)type metadata accessor for DailyViewAttributes(0);
  v58 = v232[9];
  v239 = a1;
  LODWORD(v58) = *(unsigned __int8 *)(a1 + v58);
  v235 = v57;
  v236 = v35;
  v211 = v38;
  v212 = v11;
  v210 = v41;
  if ((_DWORD)v58 == 1)
  {
    sub_100112D28(v239 + *(int *)(v238 + 20));
    v60 = v59;
    v195 = v22;
    v62 = v61;
    v64 = v63;
    v66 = v65 & 1;
    v67 = static Color.white.getter(v59);
    v68 = Text.foregroundColor(_:)(v67, v60, v62, v66, v64);
    v192 = v69;
    v193 = v68;
    v196 = v13;
    v71 = v70;
    v194 = v72;
    swift_release(v67);
    v73 = v71 & 1;
    sub_100016868(v60, v62, v66);
    swift_bridgeObjectRelease(v64);
    v74 = v226;
    sub_1000C5250(v226);
    static WidgetRenderingMode.accented.getter();
    LOBYTE(v60) = static WidgetRenderingMode.== infix(_:_:)(v74, v41);
    v75 = *(void (**)(char *, uint64_t))(v227 + 8);
    v75(v41, v38);
    v75(v74, v38);
    v76 = (unsigned int *)&enum case for BlendMode.normal(_:);
    v78 = v202;
    v77 = v203;
    if ((v60 & 1) == 0)
      v76 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
    v79 = v200;
    (*(void (**)(char *, _QWORD, uint64_t))(v202 + 104))(v200, *v76, v203);
    v80 = (uint64_t)v207;
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v207, v79, v77);
    sub_10001C590(v80, (uint64_t)&v46[*(int *)(v199 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    v81 = v192;
    v82 = v193;
    *(_QWORD *)v46 = v193;
    *((_QWORD *)v46 + 1) = v81;
    v46[16] = v73;
    v83 = v194;
    *((_QWORD *)v46 + 3) = v194;
    sub_100016828(v82, v81, v73);
    swift_bridgeObjectRetain(v83);
    sub_100011894(v80, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v77);
    v84 = v81;
    v85 = v239;
    sub_100016868(v82, v84, v73);
    swift_bridgeObjectRelease(v83);
    v86 = sub_100115D8C();
    v87 = v206;
    sub_10001C5BC((uint64_t)v46, v206, &qword_1001BF630);
    *(double *)(v87 + *(int *)(v201 + 36)) = v86;
    sub_100016904((uint64_t)v46, &qword_1001BF630);
    v88 = *(_QWORD *)(v85 + *(int *)(v238 + 24));
    v90 = static Alignment.trailing.getter(v89);
    _FrameLayout.init(width:height:alignment:)(v240, v88, 0, 0, 1, v90, v91);
    v92 = v204;
    sub_10001C5BC(v87, v204, &qword_1001BF638);
    v93 = (_OWORD *)(v92 + *(int *)(v205 + 36));
    v94 = v240[1];
    *v93 = v240[0];
    v93[1] = v94;
    v93[2] = v240[2];
    sub_100016904(v87, &qword_1001BF638);
    v95 = v92;
    v96 = v208;
    sub_10001C660(v95, v208, &qword_1001BF640);
    v98 = static Alignment.center.getter(v97);
    _FrameLayout.init(width:height:alignment:)(&v241, 0x4010000000000000, 0, 0, 1, v98, v99);
    v100 = v241;
    LOBYTE(v87) = v242;
    v101 = v243;
    LOBYTE(v79) = v244;
    v102 = v245;
    v103 = v246;
    v104 = v209;
    sub_10001C5BC(v96, v209, &qword_1001BF640);
    sub_10001C5BC(v104, v237, &qword_1001BF640);
    v105 = sub_100005D40(&qword_1001C4FC8);
    v106 = v237 + *(int *)(v105 + 48);
    *(_QWORD *)v106 = 0;
    *(_BYTE *)(v106 + 8) = 1;
    *(_QWORD *)(v106 + 16) = v100;
    *(_BYTE *)(v106 + 24) = v87;
    *(_QWORD *)(v106 + 32) = v101;
    *(_BYTE *)(v106 + 40) = (_BYTE)v79;
    v35 = v236;
    *(_QWORD *)(v106 + 48) = v102;
    *(_QWORD *)(v106 + 56) = v103;
    v22 = v195;
    v13 = v196;
    sub_100016904(v96, &qword_1001BF640);
    v107 = v237;
    sub_100016904(v104, &qword_1001BF640);
    v108 = sub_100005D40(&qword_1001C4FA8);
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v107, 0, 1, v108);
    sub_10001C660(v107, (uint64_t)v235, &qword_1001C4FA0);
  }
  else
  {
    v109 = sub_100005D40(&qword_1001C4FA8);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v57, 1, 1, v109);
  }
  v110 = v232;
  v111 = 1;
  v112 = (uint64_t)v228;
  v113 = v225;
  if (*(_BYTE *)(v239 + v232[10]) == 1)
  {
    sub_10001C5BC(v239 + v232[22], v225, &qword_1001BF098);
    v114 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v113, 1, v13);
    if (v114 == 1)
    {
      sub_100016904(v113, &qword_1001BF098);
      v115 = 0.0;
    }
    else
    {
      v116 = v197;
      Measurement<>.converted(rounded:)(0);
      v117 = *(void (**)(uint64_t, uint64_t))(v234 + 8);
      v117(v113, v13);
      v115 = Measurement.value.getter(v13);
      v118 = v116;
      v110 = v232;
      v117((uint64_t)v118, v13);
    }
    v119 = (uint64_t)v212;
    sub_10001C590(v239, v112, type metadata accessor for DailyTemperatureForecastRowView);
    if (v114 == 1)
    {
      type metadata accessor for DailyForecastViewModel(0);
      Measurement<>.converted(rounded:)(0);
      v115 = Measurement.value.getter(v13);
      (*(void (**)(char *, uint64_t))(v234 + 8))(v22, v13);
    }
    sub_100011894(v112, type metadata accessor for DailyTemperatureForecastRowView);
    sub_10001C5BC(v239 + v110[23], v119, &qword_1001BF098);
    v120 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v119, 1, v13);
    if (v120 == 1)
    {
      sub_100016904(v119, &qword_1001BF098);
      v121 = 0.0;
    }
    else
    {
      v122 = v198;
      Measurement<>.converted(rounded:)(0);
      v123 = v119;
      v124 = *(void (**)(uint64_t, uint64_t))(v234 + 8);
      v124(v123, v13);
      v121 = Measurement.value.getter(v13);
      v124((uint64_t)v122, v13);
    }
    sub_10001C590(v239, v233, type metadata accessor for DailyTemperatureForecastRowView);
    if (v120 == 1)
    {
      type metadata accessor for DailyForecastViewModel(0);
      Measurement<>.converted(rounded:)(0);
      v121 = Measurement.value.getter(v13);
      (*(void (**)(char *, uint64_t))(v234 + 8))(v22, v13);
    }
    sub_100011894(v233, type metadata accessor for DailyTemperatureForecastRowView);
    type metadata accessor for DailyForecastViewModel(0);
    v125 = v213;
    Measurement<>.converted(rounded:)(0);
    v126 = Measurement.value.getter(v13);
    v127 = *(void (**)(char *, uint64_t))(v234 + 8);
    v127(v125, v13);
    v128 = v214;
    Measurement<>.converted(rounded:)(0);
    v129 = Measurement.value.getter(v13);
    v127(v128, v13);
    v130 = v226;
    sub_1000C5250(v226);
    v131 = v210;
    static WidgetRenderingMode.vibrant.getter();
    LOBYTE(v127) = static WidgetRenderingMode.== infix(_:_:)(v130, v131);
    v132 = *(void (**)(char *, uint64_t))(v227 + 8);
    v133 = v131;
    v134 = v211;
    v132(v133, v211);
    v135 = ((uint64_t (*)(char *, uint64_t))v132)(v130, v134);
    v136 = v224;
    TemperatureScaleConfiguration.gradient.getter(v135);
    v137 = Gradient.init(_:)(v136);
    v138 = v221;
    WeatherDayVarianceView.init(weekMaxTemp:weekMinTemp:dayHighTemp:dayLowTemp:currentTemp:isDaylight:temperatureGradient:)(0, 1, (v127 & 1) == 0, v137, v115, v121, v126, v129);
    v139 = sub_100005D40(&qword_1001BF498);
    v140 = ScaledValue.wrappedValue.getter(&v254, v139);
    v141 = v254;
    v142 = static Alignment.center.getter(v140);
    _FrameLayout.init(width:height:alignment:)(v247, 0, 1, v141, 0, v142, v143);
    v145 = v222;
    v144 = v223;
    v146 = (uint64_t)v218;
    (*(void (**)(char *, char *, uint64_t))(v222 + 16))(v218, v138, v223);
    v147 = (_OWORD *)(v146 + *(int *)(v215 + 36));
    v148 = v247[1];
    *v147 = v247[0];
    v147[1] = v148;
    v147[2] = v247[2];
    (*(void (**)(char *, uint64_t))(v145 + 8))(v138, v144);
    v149 = v219;
    sub_10001C5BC(v146, v219, &qword_1001BF618);
    v150 = v220;
    *(_BYTE *)(v149 + *(int *)(v220 + 36)) = 1;
    sub_100016904(v146, &qword_1001BF618);
    v151 = sub_100117FF0();
    v152 = v217;
    View.accessibilityHidden(_:)(1, v150, v151);
    sub_100016904(v149, &qword_1001C4F88);
    v153 = (uint64_t)v152;
    v154 = v216;
    sub_10001C660(v153, v216, &qword_1001C4F90);
    sub_10001C660(v154, (uint64_t)v35, &qword_1001C4F90);
    v111 = 0;
  }
  v155 = _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v35, v111, 1, v229);
  v156 = static Alignment.center.getter(v155);
  _FrameLayout.init(width:height:alignment:)(&v248, 0x4010000000000000, 0, 0, 1, v156, v157);
  v234 = v248;
  LODWORD(v233) = v249;
  v232 = v250;
  LODWORD(v229) = v251;
  v227 = v253;
  v228 = v252;
  v159 = v238;
  v158 = v239;
  sub_100112EC8(v239 + *(int *)(v238 + 20));
  v161 = v160;
  v163 = v162;
  v165 = v164;
  v167 = v166 & 1;
  v168 = static Color.white.getter(v160);
  v225 = Text.foregroundColor(_:)(v168, v161, v163, v167, v165);
  v226 = v169;
  v171 = v170;
  v173 = v172;
  swift_release(v168);
  sub_100016868(v161, v163, v167);
  swift_bridgeObjectRelease(v165);
  v174 = *(_QWORD *)(v158 + *(int *)(v159 + 28));
  v176 = static Alignment.trailing.getter(v175);
  _FrameLayout.init(width:height:alignment:)(&v254, v174, 0, 0, 1, v176, v177);
  v239 = v254;
  LODWORD(v238) = v255;
  v224 = v256;
  LODWORD(v223) = v257;
  v221 = v259;
  v222 = v258;
  v178 = (uint64_t)v235;
  v179 = v237;
  sub_10001C5BC((uint64_t)v235, v237, &qword_1001C4FA0);
  v180 = (uint64_t)v236;
  v181 = v230;
  sub_10001C5BC((uint64_t)v236, v230, &qword_1001C4F98);
  v182 = v231;
  sub_10001C5BC(v179, v231, &qword_1001C4FA0);
  v183 = (int *)sub_100005D40(&qword_1001C4FB0);
  sub_10001C5BC(v181, v182 + v183[12], &qword_1001C4F98);
  v184 = v182 + v183[16];
  *(_QWORD *)v184 = 0;
  *(_BYTE *)(v184 + 8) = 1;
  *(_QWORD *)(v184 + 16) = v234;
  *(_BYTE *)(v184 + 24) = v233;
  *(_QWORD *)(v184 + 32) = v232;
  *(_BYTE *)(v184 + 40) = v229;
  v185 = v227;
  *(_QWORD *)(v184 + 48) = v228;
  *(_QWORD *)(v184 + 56) = v185;
  v186 = v182 + v183[20];
  v188 = v225;
  v187 = v226;
  *(_QWORD *)v186 = v225;
  *(_QWORD *)(v186 + 8) = v171;
  *(_BYTE *)(v186 + 16) = v173 & 1;
  v189 = v239;
  *(_QWORD *)(v186 + 24) = v187;
  *(_QWORD *)(v186 + 32) = v189;
  *(_BYTE *)(v186 + 40) = v238;
  *(_QWORD *)(v186 + 48) = v224;
  *(_BYTE *)(v186 + 56) = v223;
  v190 = v221;
  *(_QWORD *)(v186 + 64) = v222;
  *(_QWORD *)(v186 + 72) = v190;
  sub_100016828(v188, v171, v173 & 1);
  swift_bridgeObjectRetain(v187);
  sub_100016904(v180, &qword_1001C4F98);
  sub_100016904(v178, &qword_1001C4FA0);
  sub_100016868(v188, v171, v173 & 1);
  swift_bridgeObjectRelease(v187);
  sub_100016904(v181, &qword_1001C4F98);
  sub_100016904(v179, &qword_1001C4FA0);
}

uint64_t sub_100117C5C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  int *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v1 = (int *)sub_1001182D0();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v36 = *(_QWORD *)(v2 + 64);
  v37 = v0;
  v5 = v0 + v4;
  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  v7 = (int *)sub_10001C7FC();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v7[5]));
  sub_100016B34(v7[17]);
  sub_100016B34(v7[18]);
  sub_100016B34(v7[19]);
  v8 = v0 + v4 + v7[22];
  v9 = sub_100005D40(&qword_1001BF090);
  if (!sub_100016AC4(v8))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v5 + v7[23];
  if (!sub_100016AC4(v10))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v10, v9);
  v11 = v5 + v1[5];
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v14 = (int *)sub_10001C804();
  v15 = type metadata accessor for Date(0);
  sub_10001C80C(v15);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v16(v11 + v14[6], v9);
  v16(v11 + v14[7], v9);
  v13(v11 + v14[8], v12);
  v17 = type metadata accessor for ConditionViewModel(0);
  v18 = type metadata accessor for WeatherCondition(0);
  sub_10001C80C(v18);
  sub_10001C928(*(int *)(v17 + 24));
  sub_10001C928(*(int *)(v17 + 28));
  v19 = sub_10001C93C();
  v20 = type metadata accessor for Precipitation(v19);
  sub_10001C820(v20);
  sub_10001C734(v14[11]);
  sub_10001C734(v14[12]);
  sub_10001C734(v14[13]);
  sub_10001C734(v14[14]);
  v21 = sub_10001C93C();
  v22 = type metadata accessor for TemperatureScaleConfiguration(v21);
  sub_10001C820(v22);
  v23 = sub_10001C93C();
  v24 = type metadata accessor for SunEvents(v23);
  if (!sub_10001C7D4(v24))
    sub_10001C848();
  v25 = sub_10001C93C();
  v26 = type metadata accessor for MoonEvents(v25);
  if (!sub_10001C7D4(v26))
    sub_10001C848();
  v27 = type metadata accessor for UVIndex(0);
  sub_100016C04(v27);
  v28 = (_QWORD *)(v5 + v1[8]);
  v29 = sub_100005D40(&qword_1001BF3C0);
  if (sub_10001C950(v29) == 1)
  {
    v30 = type metadata accessor for WidgetRenderingMode(0);
    sub_100016C04(v30);
  }
  else
  {
    swift_release(*v28);
  }
  sub_100019A78(*(_QWORD *)(v5 + v1[9]), *(_BYTE *)(v5 + v1[9] + 8));
  v31 = (_QWORD *)(v5 + v1[10]);
  v32 = sub_100005D40(&qword_1001BF490);
  if (sub_10001C950(v32) == 1)
  {
    v33 = type metadata accessor for ColorSchemeContrast(0);
    sub_100016C04(v33);
  }
  else
  {
    swift_release(*v31);
  }
  v34 = sub_100005D40(&qword_1001BF498);
  sub_100016A94(v34);
  return swift_deallocObject(v37, v4 + v36, v3 | 7);
}

uint64_t sub_100117F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DailyTemperatureForecastRowView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100117F98(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_1001182D0() - 8) + 80);
  sub_1001160AC(v1 + ((v3 + 16) & ~v3), a1);
}

unint64_t sub_100117FF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C4FB8;
  if (!qword_1001C4FB8)
  {
    v1 = sub_100005DC4(&qword_1001C4F88);
    sub_10001C5DC();
    sub_10011805C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C4FB8);
  }
  return result;
}

unint64_t sub_10011805C()
{
  unint64_t result;

  result = qword_1001C4FC0;
  if (!qword_1001C4FC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AccessibilityIgnoresInvertColorsViewModifier, &type metadata for _AccessibilityIgnoresInvertColorsViewModifier);
    atomic_store(result, (unint64_t *)&qword_1001C4FC0);
  }
  return result;
}

void sub_100118098()
{
  sub_100016A54(&qword_1001C4FD8, &qword_1001C4FE0);
}

uint64_t sub_1001180C4()
{
  return static Font.Weight.semibold.getter();
}

uint64_t sub_1001180E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(v4 - 120) + a1;
  *(_QWORD *)(v4 - 136) = v3;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v4 - 160) = v1;
  return v6(v1, v5, v2);
}

uint64_t sub_10011810C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return Measurement.formatted<A>(_:placeholder:unitManager:)(v6, v5, v4, a4, v8, v7);
}

uint64_t sub_100118128(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  _s13WeatherWidget20WeatherDataViewModelOwst_0(v2, 1, 1, a1);
  return static WeatherFormatStyle<>.weather(_:locale:)(v1, v2);
}

uint64_t sub_100118154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 152) + 104))(v2, a2, *(_QWORD *)(v3 - 128));
}

uint64_t sub_100118170()
{
  return type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
}

uint64_t sub_10011818C()
{
  return type metadata accessor for DailyForecastViewModel(0);
}

uint64_t sub_1001181A8()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1001181C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return Text.font(_:)(v4, v0, v1, v3, v2);
}

uint64_t sub_1001181D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 136) + 8))(v0, v1);
}

uint64_t sub_1001181EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  *(_QWORD *)(v3 - 168) = v4;
  return v4(v2, v0);
}

double sub_10011821C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  double result;

  sub_100016868(v0, v1, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

uint64_t sub_10011823C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = result;
  *(_QWORD *)(v1 - 152) = *(_QWORD *)(result - 8);
  return result;
}

uint64_t sub_100118254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 168))(v0, v1);
}

uint64_t sub_100118264(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = a1;
  return type metadata accessor for WeatherFormatPlaceholder(0);
}

uint64_t sub_100118274()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10011828C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = result;
  *(_QWORD *)(v2 - 120) = v1;
  return result;
}

uint64_t sub_1001182A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1001182B4()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1001182C4()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1001182D0()
{
  return type metadata accessor for DailyTemperatureForecastRowView(0);
}

uint64_t sub_1001182EC()
{
  return type metadata accessor for Locale(0);
}

uint64_t *sub_10011830C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t EnumCaseMultiPayload;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int *v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int *v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  int *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  int *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  void (*v160)(char *, char *, uint64_t);
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  int *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  _BOOL8 v244;
  uint64_t v246;
  char *v247;
  void (*v248)(char *, char *, uint64_t);
  void (*v249)(char *, char *, uint64_t);
  int *v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(char *, char *, uint64_t);
  void (*v256)(char *, char *, uint64_t);
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t *v260;

  if (a1 != a2)
  {
    sub_10002FBAC((uint64_t)a1, &qword_1001BFA18);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v254 = *(_QWORD *)(v15 - 8);
  v257 = v15;
  (*(void (**)(char *, char *))(v254 + 24))(v13, v14);
  v16 = type metadata accessor for ForecastEntry(0);
  v17 = *(int *)(v16 + 20);
  v18 = &v13[v17];
  v19 = &v14[v17];
  v20 = type metadata accessor for TimelineEntryRelevance(0);
  v21 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v20);
  v22 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v20);
  v260 = a1;
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v18, 0, 1, v20);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  v23 = *(_QWORD *)(v20 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v20);
LABEL_11:
    v24 = sub_100005D40(&qword_1001BFA20);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v18, v19, v20);
LABEL_12:
  v258 = v16;
  v25 = *(int *)(v16 + 24);
  v26 = &v13[v25];
  v27 = &v14[v25];
  *(_QWORD *)v26 = *(_QWORD *)&v14[v25];
  v28 = *(_QWORD *)&v14[v25 + 8];
  v29 = *(_QWORD *)&v13[v25 + 8];
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
  v30 = *((_QWORD *)v27 + 3);
  v31 = *((_QWORD *)v26 + 3);
  *((_QWORD *)v26 + 3) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
  v32 = *((_QWORD *)v27 + 5);
  v33 = *((_QWORD *)v26 + 5);
  *((_QWORD *)v26 + 5) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v26[48] = v27[48];
  v26[49] = v27[49];
  v26[50] = v27[50];
  v26[51] = v27[51];
  v34 = type metadata accessor for WidgetContext(0);
  v35 = *(int *)(v34 + 40);
  v36 = &v26[v35];
  v37 = &v27[v35];
  v38 = type metadata accessor for URL(0);
  v39 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v36, 1, v38);
  v40 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v37, 1, v38);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v36, 0, 1, v38);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v41 = *(_QWORD *)(v38 - 8);
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v38);
LABEL_17:
    v42 = sub_100005D40(&qword_1001BFA28);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 24))(v36, v37, v38);
LABEL_18:
  v43 = *(int *)(v34 + 44);
  v44 = &v26[v43];
  v45 = &v27[v43];
  v46 = *(_QWORD *)v45;
  v47 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v44[8] = v45[8];
  v48 = v260;
  if (v260 != a2)
  {
    v49 = *(int *)(v258 + 28);
    v50 = &v13[v49];
    v51 = &v14[v49];
    sub_10002C7E0((uint64_t)v50);
    v52 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v51, v52) == 1)
    {
      v53 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v51, v53);
      v55 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v81 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v50, v51, v81);
      }
      else
      {
        v259 = v50;
        v252 = v53;
        v253 = v52;
        v251 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v56 = type metadata accessor for UUID(0);
          v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
          v57(v50, v51, v56);
          v58 = type metadata accessor for InstantWeatherViewModel(0);
          v59 = *(int *)(v58 + 20);
          v60 = &v50[v59];
          v61 = &v51[v59];
          v62 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
          v63 = *(int *)(v58 + 24);
          v64 = &v50[v63];
          v65 = &v51[v63];
          v249 = v57;
          v57(&v50[v63], v65, v56);
          v66 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v67 = *(void (**)(char *, char *, uint64_t))(v254 + 16);
          v67(&v64[v66[5]], &v65[v66[5]], v257);
          v255 = v67;
          v67(&v64[v66[6]], &v65[v66[6]], v257);
          v68 = v66[7];
          v69 = &v64[v68];
          v70 = &v65[v68];
          v71 = sub_100005D40(&qword_1001BF090);
          v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
          v72(v69, v70, v71);
          v72(&v64[v66[8]], &v65[v66[8]], v71);
          v73 = v66[9];
          v74 = &v64[v73];
          v75 = &v65[v73];
          *(_QWORD *)v74 = *(_QWORD *)v75;
          v76 = *((_QWORD *)v75 + 1);
          *((_QWORD *)v74 + 1) = v76;
          v77 = v66[10];
          v78 = &v64[v77];
          v79 = &v65[v77];
          swift_bridgeObjectRetain(v76);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v79, 1, v71))
          {
            v80 = sub_100005D40(&qword_1001BF098);
            memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
          }
          else
          {
            v72(v78, v79, v71);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v78, 0, 1, v71);
          }
          v107 = v66[11];
          v108 = &v64[v107];
          v109 = &v65[v107];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v107], 1, v71))
          {
            v110 = sub_100005D40(&qword_1001BF098);
            memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
          }
          else
          {
            v72(v108, v109, v71);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v108, 0, 1, v71);
          }
          v50 = v259;
          v115 = v66[12];
          v116 = &v64[v115];
          v117 = &v65[v115];
          v249(&v64[v115], &v65[v115], v56);
          v118 = (int *)type metadata accessor for ConditionViewModel(0);
          v119 = v118[5];
          v120 = &v116[v119];
          v121 = &v117[v119];
          v122 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
          v123 = v118[6];
          v124 = &v116[v123];
          v125 = &v117[v123];
          *(_QWORD *)v124 = *(_QWORD *)v125;
          v126 = *((_QWORD *)v125 + 1);
          *((_QWORD *)v124 + 1) = v126;
          v127 = v118[7];
          v128 = &v116[v127];
          v129 = &v117[v127];
          *(_QWORD *)v128 = *(_QWORD *)v129;
          v130 = *((_QWORD *)v129 + 1);
          *((_QWORD *)v128 + 1) = v130;
          v116[v118[8]] = v117[v118[8]];
          v116[v118[9]] = v117[v118[9]];
          v116[v118[10]] = v117[v118[10]];
          *(_QWORD *)&v64[v66[13]] = *(_QWORD *)&v65[v66[13]];
          v131 = v66[14];
          v132 = &v64[v131];
          v133 = &v65[v131];
          v134 = type metadata accessor for CloudAltitudeKind(0);
          v135 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16);
          swift_bridgeObjectRetain(v126);
          swift_bridgeObjectRetain(v130);
          v135(v132, v133, v134);
          v136 = v66[15];
          v137 = &v64[v136];
          v138 = &v65[v136];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v136], 1, v257))
          {
            v139 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
          }
          else
          {
            v255(v137, v138, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v137, 0, 1, v257);
          }
          v165 = v66[16];
          v166 = &v64[v165];
          v167 = &v65[v165];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v165], 1, v257))
          {
            v168 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
          }
          else
          {
            v255(v166, v167, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v166, 0, 1, v257);
          }
          v173 = v66[17];
          v174 = &v64[v173];
          v175 = &v65[v173];
          v176 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v176 - 8) + 16))(v174, v175, v176);
          v177 = v66[18];
          v178 = &v64[v177];
          v179 = &v65[v177];
          v180 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v180 - 8) + 16))(v178, v179, v180);
          *(_QWORD *)&v64[v66[19]] = *(_QWORD *)&v65[v66[19]];
          v181 = v66[20];
          v182 = &v64[v181];
          v183 = &v65[v181];
          if (*((_QWORD *)v183 + 1))
          {
            *(_QWORD *)v182 = *(_QWORD *)v183;
            v184 = *((_QWORD *)v183 + 1);
            *((_QWORD *)v182 + 1) = v184;
            v185 = *((_QWORD *)v183 + 2);
            v186 = *((_QWORD *)v183 + 3);
            v187 = v183[32];
            swift_bridgeObjectRetain(v184);
            sub_100006E58(v185, v186, v187);
            *((_QWORD *)v182 + 2) = v185;
            *((_QWORD *)v182 + 3) = v186;
            v182[32] = v187;
          }
          else
          {
            v203 = *(_OWORD *)v183;
            v204 = *((_OWORD *)v183 + 1);
            v182[32] = v183[32];
            *(_OWORD *)v182 = v203;
            *((_OWORD *)v182 + 1) = v204;
          }
          v48 = v260;
          v53 = v252;
          v52 = v253;
        }
        else
        {
          v82 = type metadata accessor for UUID(0);
          v83 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16);
          v83(v50, v51, v82);
          v84 = type metadata accessor for AggregateWeatherViewModel(0);
          v85 = *(int *)(v84 + 20);
          v86 = &v50[v85];
          v87 = &v51[v85];
          v88 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v86, v87, v88);
          v248 = v83;
          v250 = (int *)v84;
          v89 = *(int *)(v84 + 24);
          v90 = &v50[v89];
          v247 = v51;
          v91 = &v51[v89];
          v83(&v50[v89], v91, v82);
          v92 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v93 = *(void (**)(char *, char *, uint64_t))(v254 + 16);
          v93(&v90[v92[5]], &v91[v92[5]], v257);
          v256 = v93;
          v93(&v90[v92[6]], &v91[v92[6]], v257);
          v94 = v92[7];
          v95 = &v90[v94];
          v96 = &v91[v94];
          v97 = sub_100005D40(&qword_1001BF090);
          v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
          v98(v95, v96, v97);
          v98(&v90[v92[8]], &v91[v92[8]], v97);
          v99 = v92[9];
          v100 = &v90[v99];
          v101 = &v91[v99];
          *(_QWORD *)v100 = *(_QWORD *)v101;
          v102 = *((_QWORD *)v101 + 1);
          *((_QWORD *)v100 + 1) = v102;
          v103 = v92[10];
          v104 = &v90[v103];
          v105 = &v91[v103];
          swift_bridgeObjectRetain(v102);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v105, 1, v97))
          {
            v106 = sub_100005D40(&qword_1001BF098);
            memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
          }
          else
          {
            v98(v104, v105, v97);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v104, 0, 1, v97);
          }
          v111 = v92[11];
          v112 = &v90[v111];
          v113 = &v91[v111];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v111], 1, v97))
          {
            v114 = sub_100005D40(&qword_1001BF098);
            memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
          }
          else
          {
            v98(v112, v113, v97);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v112, 0, 1, v97);
          }
          v140 = v92[12];
          v141 = &v90[v140];
          v142 = &v91[v140];
          v246 = v82;
          v248(&v90[v140], &v91[v140], v82);
          v143 = (int *)type metadata accessor for ConditionViewModel(0);
          v144 = v143[5];
          v145 = &v141[v144];
          v146 = &v142[v144];
          v147 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 16))(v145, v146, v147);
          v148 = v143[6];
          v149 = &v141[v148];
          v150 = &v142[v148];
          *(_QWORD *)v149 = *(_QWORD *)v150;
          v151 = *((_QWORD *)v150 + 1);
          *((_QWORD *)v149 + 1) = v151;
          v152 = v143[7];
          v153 = &v141[v152];
          v154 = &v142[v152];
          *(_QWORD *)v153 = *(_QWORD *)v154;
          v155 = *((_QWORD *)v154 + 1);
          *((_QWORD *)v153 + 1) = v155;
          v141[v143[8]] = v142[v143[8]];
          v141[v143[9]] = v142[v143[9]];
          v141[v143[10]] = v142[v143[10]];
          *(_QWORD *)&v90[v92[13]] = *(_QWORD *)&v91[v92[13]];
          v156 = v92[14];
          v157 = &v90[v156];
          v158 = &v91[v156];
          v159 = type metadata accessor for CloudAltitudeKind(0);
          v160 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 16);
          swift_bridgeObjectRetain(v151);
          swift_bridgeObjectRetain(v155);
          v160(v157, v158, v159);
          v161 = v92[15];
          v162 = &v90[v161];
          v163 = &v91[v161];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v161], 1, v257))
          {
            v164 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
          }
          else
          {
            v256(v162, v163, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v162, 0, 1, v257);
          }
          v169 = v92[16];
          v170 = &v90[v169];
          v171 = &v91[v169];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v169], 1, v257))
          {
            v172 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
          }
          else
          {
            v256(v170, v171, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v170, 0, 1, v257);
          }
          v188 = v92[17];
          v189 = &v90[v188];
          v190 = &v91[v188];
          v191 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v191 - 8) + 16))(v189, v190, v191);
          v192 = v92[18];
          v193 = &v90[v192];
          v194 = &v91[v192];
          v195 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v193, v194, v195);
          *(_QWORD *)&v90[v92[19]] = *(_QWORD *)&v91[v92[19]];
          v196 = v92[20];
          v197 = &v90[v196];
          v198 = &v91[v196];
          if (*((_QWORD *)v198 + 1))
          {
            *(_QWORD *)v197 = *(_QWORD *)v198;
            v199 = *((_QWORD *)v198 + 1);
            *((_QWORD *)v197 + 1) = v199;
            v200 = *((_QWORD *)v198 + 2);
            v201 = *((_QWORD *)v198 + 3);
            v202 = v198[32];
            swift_bridgeObjectRetain(v199);
            sub_100006E58(v200, v201, v202);
            *((_QWORD *)v197 + 2) = v200;
            *((_QWORD *)v197 + 3) = v201;
            v197[32] = v202;
          }
          else
          {
            v205 = *(_OWORD *)v198;
            v206 = *((_OWORD *)v198 + 1);
            v197[32] = v198[32];
            *(_OWORD *)v197 = v205;
            *((_OWORD *)v197 + 1) = v206;
          }
          v50 = v259;
          v207 = v250[7];
          v208 = *(_QWORD *)&v247[v207];
          *(_QWORD *)&v259[v207] = v208;
          v209 = v250[8];
          v210 = *(_QWORD *)&v247[v209];
          *(_QWORD *)&v259[v209] = v210;
          v211 = v250[9];
          v212 = &v259[v211];
          v213 = &v247[v211];
          v214 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v208);
          swift_bridgeObjectRetain(v210);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v213, 1, (uint64_t)v214))
          {
            v215 = sub_100005D40(&qword_1001BFA30);
            memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64));
          }
          else
          {
            v248(v212, v213, v246);
            v256(&v212[v214[5]], &v213[v214[5]], v257);
            *(_QWORD *)&v212[v214[6]] = *(_QWORD *)&v213[v214[6]];
            v216 = v214[7];
            v217 = &v212[v216];
            v218 = &v213[v216];
            v219 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v219 - 8) + 16))(v217, v218, v219);
            v220 = v214[8];
            v221 = &v212[v220];
            v222 = &v213[v220];
            v223 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v223 - 8) + 16))(v221, v222, v223);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v212, 0, 1, (uint64_t)v214);
          }
          v224 = v250[10];
          v225 = &v259[v224];
          v226 = &v247[v224];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          v52 = v253;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v226, 1, HourPrecipitationChartViewModel))
          {
            v228 = sub_100005D40(&qword_1001BFA38);
            memcpy(v225, v226, *(_QWORD *)(*(_QWORD *)(v228 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v225, v226, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v225, 0, 1, HourPrecipitationChartViewModel);
          }
          v53 = v252;
          v229 = v250[11];
          v230 = *(_QWORD *)&v247[v229];
          *(_QWORD *)&v259[v229] = v230;
          v231 = v250[12];
          v232 = &v259[v231];
          v233 = &v247[v231];
          v234 = *(_QWORD *)v233;
          *((_WORD *)v232 + 4) = *((_WORD *)v233 + 4);
          *(_QWORD *)v232 = v234;
          v235 = v250[13];
          v236 = &v259[v235];
          v237 = &v247[v235];
          swift_bridgeObjectRetain(v230);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v237, 1, v38))
          {
            v238 = sub_100005D40(&qword_1001BFA28);
            memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v236, v237, v38);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v236, 0, 1, v38);
          }
          v239 = v250[14];
          v240 = &v259[v239];
          v241 = &v247[v239];
          v242 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v241, 1, v242))
          {
            v243 = sub_100005D40(&qword_1001BFA40);
            memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v243 - 8) + 64));
          }
          else
          {
            v244 = swift_getEnumCaseMultiPayload(v241, v242) == 1;
            v256(v240, v241, v257);
            swift_storeEnumTagMultiPayload(v240, v242, v244);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v240, 0, 1, v242);
          }
          v48 = v260;
        }
        v55 = v251;
      }
      swift_storeEnumTagMultiPayload(v50, v53, v55);
      swift_storeEnumTagMultiPayload(v50, v52, 1);
    }
    else
    {
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
  }
  return v48;
}

char *sub_100119378(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  int *v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  __int128 v165;
  int *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  int *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  _BOOL8 v198;
  void (*v200)(char *, char *, uint64_t);
  uint64_t v201;
  int *v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(char *, char *, uint64_t);
  void (*v208)(char *, char *, uint64_t);
  uint64_t v209;
  void (*v210)(char *, char *, uint64_t);
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;

  if (a1 != a2)
  {
    sub_10002FBAC((uint64_t)a1, &qword_1001BFA18);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v214 = a1;
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v206 = *(_QWORD *)(v11 - 8);
  v211 = v11;
  (*(void (**)(char *, char *))(v206 + 40))(v9, v10);
  v12 = type metadata accessor for ForecastEntry(0);
  v13 = *(int *)(v12 + 20);
  v14 = &v9[v13];
  v15 = &v10[v13];
  v16 = type metadata accessor for TimelineEntryRelevance(0);
  v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v16);
  v18 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v16);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v16);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v19 = *(_QWORD *)(v16 - 8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v16);
LABEL_10:
    v20 = sub_100005D40(&qword_1001BFA20);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v14, v15, v16);
LABEL_11:
  v212 = v12;
  v21 = *(int *)(v12 + 24);
  v22 = &v9[v21];
  v23 = &v10[v21];
  v24 = *(_QWORD *)&v10[v21 + 8];
  v25 = *(_QWORD *)&v9[v21 + 8];
  *(_QWORD *)v22 = *(_QWORD *)&v10[v21];
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *((_QWORD *)v23 + 3);
  v27 = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
  *((_QWORD *)v22 + 3) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *((_QWORD *)v23 + 5);
  v29 = *((_QWORD *)v22 + 5);
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  *((_QWORD *)v22 + 5) = v28;
  swift_bridgeObjectRelease(v29);
  *((_WORD *)v22 + 24) = *((_WORD *)v23 + 24);
  v22[50] = v23[50];
  v22[51] = v23[51];
  v30 = type metadata accessor for WidgetContext(0);
  v31 = *(int *)(v30 + 40);
  v32 = &v22[v31];
  v33 = &v23[v31];
  v34 = type metadata accessor for URL(0);
  v35 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v34);
  v36 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v33, 1, v34);
  v209 = v34;
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v32, 0, 1, v34);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  v37 = *(_QWORD *)(v34 - 8);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v34);
LABEL_16:
    v38 = sub_100005D40(&qword_1001BFA28);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v32, v33, v34);
LABEL_17:
  v39 = *(int *)(v30 + 44);
  v40 = &v22[v39];
  v41 = &v23[v39];
  v42 = *(_QWORD *)v40;
  *(_QWORD *)v40 = *(_QWORD *)&v23[v39];
  swift_bridgeObjectRelease(v42);
  v40[8] = v41[8];
  v43 = v214;
  if (v214 != a2)
  {
    v44 = *(int *)(v212 + 28);
    v45 = &v9[v44];
    v46 = &v10[v44];
    sub_10002C7E0((uint64_t)&v9[v44]);
    v47 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v46, v47) == 1)
    {
      v48 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v46, v48);
      v50 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v72 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v45, v46, v72);
      }
      else
      {
        v213 = v45;
        v204 = v48;
        v205 = v47;
        v203 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v51 = type metadata accessor for UUID(0);
          v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32);
          v52(v45, v46, v51);
          v53 = type metadata accessor for InstantWeatherViewModel(0);
          v54 = *(int *)(v53 + 20);
          v55 = &v45[v54];
          v56 = &v46[v54];
          v57 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
          v58 = *(int *)(v53 + 24);
          v59 = &v45[v58];
          v60 = &v46[v58];
          v210 = v52;
          v52(&v45[v58], &v46[v58], v51);
          v61 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v62 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
          v62(&v59[v61[5]], &v60[v61[5]], v211);
          v207 = v62;
          v62(&v59[v61[6]], &v60[v61[6]], v211);
          v63 = v61[7];
          v64 = &v59[v63];
          v65 = &v60[v63];
          v66 = sub_100005D40(&qword_1001BF090);
          v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32);
          v67(v64, v65, v66);
          v67(&v59[v61[8]], &v60[v61[8]], v66);
          *(_OWORD *)&v59[v61[9]] = *(_OWORD *)&v60[v61[9]];
          v68 = v61[10];
          v69 = &v59[v68];
          v70 = &v60[v68];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v68], 1, v66))
          {
            v71 = sub_100005D40(&qword_1001BF098);
            memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
          }
          else
          {
            v67(v69, v70, v66);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v69, 0, 1, v66);
          }
          v94 = v61[11];
          v95 = &v59[v94];
          v96 = &v60[v94];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v94], 1, v66))
          {
            v97 = sub_100005D40(&qword_1001BF098);
            memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
          }
          else
          {
            v67(v95, v96, v66);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v66);
          }
          v45 = v213;
          v102 = v61[12];
          v103 = &v59[v102];
          v104 = &v60[v102];
          v210(&v59[v102], &v60[v102], v51);
          v105 = (int *)type metadata accessor for ConditionViewModel(0);
          v106 = v105[5];
          v107 = &v103[v106];
          v108 = &v104[v106];
          v109 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 32))(v107, v108, v109);
          *(_OWORD *)&v103[v105[6]] = *(_OWORD *)&v104[v105[6]];
          *(_OWORD *)&v103[v105[7]] = *(_OWORD *)&v104[v105[7]];
          v103[v105[8]] = v104[v105[8]];
          v103[v105[9]] = v104[v105[9]];
          v103[v105[10]] = v104[v105[10]];
          *(_QWORD *)&v59[v61[13]] = *(_QWORD *)&v60[v61[13]];
          v110 = v61[14];
          v111 = &v59[v110];
          v112 = &v60[v110];
          v113 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v113 - 8) + 32))(v111, v112, v113);
          v114 = v61[15];
          v115 = &v59[v114];
          v116 = &v60[v114];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v114], 1, v211))
          {
            v117 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            v207(v115, v116, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v211);
          }
          v134 = v61[16];
          v135 = &v59[v134];
          v136 = &v60[v134];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v134], 1, v211))
          {
            v137 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
          }
          else
          {
            v207(v135, v136, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v135, 0, 1, v211);
          }
          v142 = v61[17];
          v143 = &v59[v142];
          v144 = &v60[v142];
          v145 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
          v146 = v61[18];
          v147 = &v59[v146];
          v148 = &v60[v146];
          v149 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 32))(v147, v148, v149);
          *(_QWORD *)&v59[v61[19]] = *(_QWORD *)&v60[v61[19]];
          v150 = v61[20];
          v151 = &v59[v150];
          v152 = &v60[v150];
          v151[32] = v152[32];
          v153 = *((_OWORD *)v152 + 1);
          *(_OWORD *)v151 = *(_OWORD *)v152;
          *((_OWORD *)v151 + 1) = v153;
          v43 = v214;
          v48 = v204;
          v47 = v205;
        }
        else
        {
          v73 = type metadata accessor for UUID(0);
          v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32);
          v74(v45, v46, v73);
          v75 = type metadata accessor for AggregateWeatherViewModel(0);
          v76 = *(int *)(v75 + 20);
          v77 = &v45[v76];
          v78 = &v46[v76];
          v79 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
          v201 = v73;
          v202 = (int *)v75;
          v80 = *(int *)(v75 + 24);
          v81 = &v45[v80];
          v82 = &v46[v80];
          v200 = v74;
          v74(&v45[v80], &v46[v80], v73);
          v83 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v84 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
          v84(&v81[v83[5]], &v82[v83[5]], v211);
          v208 = v84;
          v84(&v81[v83[6]], &v82[v83[6]], v211);
          v85 = v83[7];
          v86 = &v81[v85];
          v87 = &v82[v85];
          v88 = sub_100005D40(&qword_1001BF090);
          v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32);
          v89(v86, v87, v88);
          v89(&v81[v83[8]], &v82[v83[8]], v88);
          *(_OWORD *)&v81[v83[9]] = *(_OWORD *)&v82[v83[9]];
          v90 = v83[10];
          v91 = &v81[v90];
          v92 = &v82[v90];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v90], 1, v88))
          {
            v93 = sub_100005D40(&qword_1001BF098);
            memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
          }
          else
          {
            v89(v91, v92, v88);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v91, 0, 1, v88);
          }
          v98 = v83[11];
          v99 = &v81[v98];
          v100 = &v82[v98];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v98], 1, v88))
          {
            v101 = sub_100005D40(&qword_1001BF098);
            memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
          }
          else
          {
            v89(v99, v100, v88);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v88);
          }
          v118 = v83[12];
          v119 = &v81[v118];
          v120 = &v82[v118];
          v200(&v81[v118], &v82[v118], v201);
          v121 = (int *)type metadata accessor for ConditionViewModel(0);
          v122 = v121[5];
          v123 = &v119[v122];
          v124 = &v120[v122];
          v125 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v123, v124, v125);
          *(_OWORD *)&v119[v121[6]] = *(_OWORD *)&v120[v121[6]];
          *(_OWORD *)&v119[v121[7]] = *(_OWORD *)&v120[v121[7]];
          v119[v121[8]] = v120[v121[8]];
          v119[v121[9]] = v120[v121[9]];
          v119[v121[10]] = v120[v121[10]];
          *(_QWORD *)&v81[v83[13]] = *(_QWORD *)&v82[v83[13]];
          v126 = v83[14];
          v127 = &v81[v126];
          v128 = &v82[v126];
          v129 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 32))(v127, v128, v129);
          v130 = v83[15];
          v131 = &v81[v130];
          v132 = &v82[v130];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v130], 1, v211))
          {
            v133 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
          }
          else
          {
            v208(v131, v132, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v131, 0, 1, v211);
          }
          v138 = v83[16];
          v139 = &v81[v138];
          v140 = &v82[v138];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v138], 1, v211))
          {
            v141 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
          }
          else
          {
            v208(v139, v140, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v139, 0, 1, v211);
          }
          v154 = v83[17];
          v155 = &v81[v154];
          v156 = &v82[v154];
          v157 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 32))(v155, v156, v157);
          v158 = v83[18];
          v159 = &v81[v158];
          v160 = &v82[v158];
          v161 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 32))(v159, v160, v161);
          *(_QWORD *)&v81[v83[19]] = *(_QWORD *)&v82[v83[19]];
          v162 = v83[20];
          v163 = &v81[v162];
          v164 = &v82[v162];
          v163[32] = v164[32];
          v165 = *((_OWORD *)v164 + 1);
          *(_OWORD *)v163 = *(_OWORD *)v164;
          *((_OWORD *)v163 + 1) = v165;
          v166 = v202;
          v45 = v213;
          *(_QWORD *)&v213[v202[7]] = *(_QWORD *)&v46[v202[7]];
          *(_QWORD *)&v213[v202[8]] = *(_QWORD *)&v46[v202[8]];
          v167 = v202[9];
          v168 = &v213[v167];
          v169 = &v46[v167];
          v170 = (int *)type metadata accessor for AirQualityViewModel(0);
          v48 = v204;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v169, 1, (uint64_t)v170))
          {
            v171 = sub_100005D40(&qword_1001BFA30);
            memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
          }
          else
          {
            v200(v168, v169, v201);
            v208(&v168[v170[5]], &v169[v170[5]], v211);
            *(_QWORD *)&v168[v170[6]] = *(_QWORD *)&v169[v170[6]];
            v172 = v170[7];
            v173 = &v168[v172];
            v174 = &v169[v172];
            v175 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v175 - 8) + 32))(v173, v174, v175);
            v176 = v170[8];
            v177 = &v168[v176];
            v178 = &v169[v176];
            v179 = type metadata accessor for AirQualityScaleCategory(0);
            v180 = v177;
            v166 = v202;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v179 - 8) + 32))(v180, v178, v179);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v168, 0, 1, (uint64_t)v170);
          }
          v181 = v166[10];
          v182 = &v213[v181];
          v183 = &v46[v181];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          v47 = v205;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v183, 1, HourPrecipitationChartViewModel))
          {
            v185 = sub_100005D40(&qword_1001BFA38);
            memcpy(v182, v183, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v182, v183, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v182, 0, 1, HourPrecipitationChartViewModel);
          }
          *(_QWORD *)&v213[v166[11]] = *(_QWORD *)&v46[v166[11]];
          v186 = v166[12];
          v187 = &v213[v186];
          v188 = &v46[v186];
          *(_QWORD *)v187 = *(_QWORD *)v188;
          *((_WORD *)v187 + 4) = *((_WORD *)v188 + 4);
          v189 = v166[13];
          v190 = &v213[v189];
          v191 = &v46[v189];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v46[v189], 1, v209))
          {
            v192 = sub_100005D40(&qword_1001BFA28);
            memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v209 - 8) + 32))(v190, v191, v209);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v190, 0, 1, v209);
          }
          v193 = v202[14];
          v194 = &v213[v193];
          v195 = &v46[v193];
          v196 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v195, 1, v196))
          {
            v197 = sub_100005D40(&qword_1001BFA40);
            memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
          }
          else
          {
            v198 = swift_getEnumCaseMultiPayload(v195, v196) == 1;
            v208(v194, v195, v211);
            swift_storeEnumTagMultiPayload(v194, v196, v198);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v194, 0, 1, v196);
          }
        }
        v50 = v203;
      }
      swift_storeEnumTagMultiPayload(v45, v48, v50);
      swift_storeEnumTagMultiPayload(v45, v47, 1);
    }
    else
    {
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
  }
  return v43;
}

uint64_t sub_10011A27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011A288);
}

uint64_t sub_10011A288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = type metadata accessor for ForecastEntry(0);
    v8 = a1 + *(int *)(a3 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
}

uint64_t sub_10011A2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011A300);
}

uint64_t sub_10011A300(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = type metadata accessor for ForecastEntry(0);
    v10 = a1 + *(int *)(a4 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for LocationContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C5040;
  if (!qword_1001C5040)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationContentView);
  return result;
}

uint64_t sub_10011A3AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A0B3C, 1);
}

uint64_t sub_10011A3BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10011A3C4(v1, a1);
}

uint64_t sub_10011A3C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t result;
  Swift::String v34;
  _DWORD *v35;
  uint64_t v36;
  Swift::String v37;
  void *object;
  __n128 v39;
  Swift::String v40;
  uint64_t v41;
  unint64_t v42;
  Swift::String v43;
  _DWORD *v44;
  uint64_t v45;
  Swift::String v46;
  void *v47;
  __n128 v48;
  Swift::String v49;
  Swift::String v50;
  _DWORD *v51;
  uint64_t v52;
  Swift::String v53;
  void *v54;
  __n128 v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v68 = a2;
  v66 = sub_100005D40(&qword_1001C5078);
  __chkstk_darwin(v66);
  v67 = (uint64_t)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100005D40(&qword_1001C5080);
  __chkstk_darwin(v63);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100005D40(&qword_1001C5088);
  __chkstk_darwin(v65);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocationComplicationDataStatus(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocationInlineContentView(0);
  v64 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocationContentView(0);
  v15 = __chkstk_darwin(v14);
  v60 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v59 = (uint64_t)&v57 - v18;
  __chkstk_darwin(v17);
  v58 = (uint64_t)&v57 - v19;
  v20 = type metadata accessor for WidgetFamily(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v61 = (_DWORD *)((char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v25 = (char *)&v57 - v24;
  sub_1000C54B0((uint64_t *)((char *)&v57 - v24));
  v62 = v21;
  v26 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v25, v20);
  if (v26 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_10011AA28(a1, v58);
    v69 = 0;
    v70 = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v34._countAndFlagsBits = 0xD000000000000021;
    v34._object = (void *)0x8000000100186340;
    String.append(_:)(v34);
    v35 = v61;
    sub_1000C54B0(v61);
    v36 = sub_1000061B0(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v20, v36);
    object = v37._object;
    String.append(_:)(v37);
    v39 = swift_bridgeObjectRelease(object);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v62 + 8))(v35, v20, v39);
    v40._object = (void *)0x80000001001896D0;
    v40._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v40);
    v41 = v69;
    v42 = v70;
  }
  else if (v26 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    sub_10011AA28(a1, v59);
    v69 = 0;
    v70 = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v43._countAndFlagsBits = 0xD000000000000021;
    v43._object = (void *)0x8000000100186340;
    String.append(_:)(v43);
    v44 = v61;
    sub_1000C54B0(v61);
    v45 = sub_1000061B0(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v20, v45);
    v47 = v46._object;
    String.append(_:)(v46);
    v48 = swift_bridgeObjectRelease(v47);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v62 + 8))(v44, v20, v48);
    v49._object = (void *)0x80000001001896D0;
    v49._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v49);
    v41 = v69;
    v42 = v70;
  }
  else
  {
    if (v26 == enum case for WidgetFamily.accessoryInline(_:))
    {
      sub_10007106C((uint64_t)v10);
      LocationInlineContentView.init(status:)(v10);
      v27 = v64;
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v5, v13, v11);
      swift_storeEnumTagMultiPayload(v5, v63, 0);
      v28 = sub_1000061B0(&qword_1001C5090, (uint64_t (*)(uint64_t))&type metadata accessor for LocationInlineContentView, (uint64_t)&protocol conformance descriptor for LocationInlineContentView);
      _ConditionalContent<>.init(storage:)(v5, v11, &type metadata for Never, v28, &protocol witness table for Never);
      v29 = v67;
      sub_10011AA6C((uint64_t)v7, v67);
      swift_storeEnumTagMultiPayload(v29, v66, 1);
      v30 = sub_100005D40(&qword_1001C5098);
      v31 = sub_10011AAB4();
      v32 = sub_10011AB10();
      _ConditionalContent<>.init(storage:)(v29, v30, v65, v31, v32);
      sub_10002FBAC((uint64_t)v7, &qword_1001C5088);
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v13, v11);
    }
    sub_10011AA28(a1, v60);
    v69 = 0;
    v70 = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v50._countAndFlagsBits = 0xD000000000000022;
    v50._object = (void *)0x80000001001862F0;
    String.append(_:)(v50);
    v51 = v61;
    sub_1000C54B0(v61);
    v52 = sub_1000061B0(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v20, v52);
    v54 = v53._object;
    String.append(_:)(v53);
    v55 = swift_bridgeObjectRelease(v54);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v62 + 8))(v51, v20, v55);
    v56._countAndFlagsBits = 0xD00000000000001CLL;
    v56._object = (void *)0x80000001001863D0;
    String.append(_:)(v56);
    v41 = v69;
    v42 = v70;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v41, v42, "WeatherWidget/LocationContentView.swift", 39, 2);
  __break(1u);
  return result;
}

uint64_t sub_10011AA28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011AA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001C5088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10011AAB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C50A0;
  if (!qword_1001C50A0)
  {
    v1 = sub_100005DC4(&qword_1001C5098);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C50A0);
  }
  return result;
}

unint64_t sub_10011AB10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C50A8;
  if (!qword_1001C50A8)
  {
    v1 = sub_100005DC4(&qword_1001C5088);
    sub_1000061B0(&qword_1001C5090, (uint64_t (*)(uint64_t))&type metadata accessor for LocationInlineContentView, (uint64_t)&protocol conformance descriptor for LocationInlineContentView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C50A8);
  }
  return result;
}

unint64_t sub_10011AB98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C50B0;
  if (!qword_1001C50B0)
  {
    v1 = sub_100005DC4(&qword_1001C50B8);
    sub_10011ABFC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C50B0);
  }
  return result;
}

unint64_t sub_10011ABFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C50C0;
  if (!qword_1001C50C0)
  {
    v1 = sub_100005DC4(&qword_1001C50C8);
    sub_10011AAB4();
    sub_10011AB10();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C50C0);
  }
  return result;
}

uint64_t assignWithCopy for AdaptiveConditionsComplicationDataStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  size_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  int v68;
  uint64_t v69;
  void *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  void *v95;
  const void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const void *v138;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  const void *v154;
  uint64_t v155;
  uint64_t v156;
  _BOOL8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  const void *v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  const void *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  const void *v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  char v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  int *v239;
  int v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  const void *v252;
  uint64_t v253;
  int v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _BYTE *v262;
  _BYTE *v263;
  uint64_t v264;
  void *v265;
  const void *v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  int v276;
  _BOOL8 v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  int EnumCaseMultiPayload;
  uint64_t v287;
  void (*v288)(void *, const void *, uint64_t);
  uint64_t v289;
  int *v290;
  uint64_t v291;
  uint64_t v292;
  void (*v293)(uint64_t, uint64_t, uint64_t);
  void (*v294)(uint64_t, uint64_t, uint64_t);
  uint64_t v295;
  uint64_t v296;
  void (*v297)(void *, const void *, uint64_t);
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;

  v6 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  v7 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 2, (uint64_t)v6);
  v8 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a2, 2, (uint64_t)v6);
  if (v7)
  {
    if (!v8)
    {
      v9 = type metadata accessor for UUID(0);
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
      v10(a1, a2, v9);
      v11 = v6[5];
      v12 = a1 + v11;
      v13 = a2 + v11;
      v14 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      v15 = v6[6];
      v16 = a1 + v15;
      v299 = a2;
      v17 = a2 + v15;
      v293 = v10;
      v295 = v9;
      v10(a1 + v15, v17, v9);
      v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v19 = v18[5];
      v20 = v16 + v19;
      v21 = v17 + v19;
      v22 = type metadata accessor for Date(0);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
      v23(v20, v21, v22);
      v291 = v22;
      v297 = (void (*)(void *, const void *, uint64_t))v23;
      v23(v16 + v18[6], v17 + v18[6], v22);
      v24 = v18[7];
      v25 = v16 + v24;
      v26 = v17 + v24;
      v27 = sub_100005D40(&qword_1001BF090);
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      v28(v25, v26, v27);
      v28(v16 + v18[8], v17 + v18[8], v27);
      v29 = v18[9];
      v30 = (_QWORD *)(v16 + v29);
      v31 = (_QWORD *)(v17 + v29);
      *v30 = *v31;
      v32 = v31[1];
      v30[1] = v32;
      v33 = v18[10];
      v34 = (void *)(v16 + v33);
      v35 = (const void *)(v17 + v33);
      swift_bridgeObjectRetain(v32);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 1, v27))
      {
        v36 = sub_100005D40(&qword_1001BF098);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        v28((uint64_t)v34, (uint64_t)v35, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v27);
      }
      v69 = v18[11];
      v70 = (void *)(v16 + v69);
      v71 = (const void *)(v17 + v69);
      v290 = v6;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v69, 1, v27))
      {
        v72 = sub_100005D40(&qword_1001BF098);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        v28((uint64_t)v70, (uint64_t)v71, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v70, 0, 1, v27);
      }
      v73 = v18[12];
      v74 = v16 + v73;
      v75 = v17 + v73;
      v293(v16 + v73, v17 + v73, v295);
      v76 = (int *)type metadata accessor for ConditionViewModel(0);
      v77 = v76[5];
      v78 = v74 + v77;
      v79 = v75 + v77;
      v80 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v78, v79, v80);
      v81 = v76[6];
      v82 = (_QWORD *)(v74 + v81);
      v83 = (_QWORD *)(v75 + v81);
      *v82 = *v83;
      v84 = v83[1];
      v82[1] = v84;
      v85 = v76[7];
      v86 = (_QWORD *)(v74 + v85);
      v87 = (_QWORD *)(v75 + v85);
      *v86 = *v87;
      v88 = v87[1];
      v86[1] = v88;
      *(_BYTE *)(v74 + v76[8]) = *(_BYTE *)(v75 + v76[8]);
      *(_BYTE *)(v74 + v76[9]) = *(_BYTE *)(v75 + v76[9]);
      *(_BYTE *)(v74 + v76[10]) = *(_BYTE *)(v75 + v76[10]);
      *(_QWORD *)(v16 + v18[13]) = *(_QWORD *)(v17 + v18[13]);
      v89 = v18[14];
      v90 = v16 + v89;
      v91 = v17 + v89;
      v92 = type metadata accessor for CloudAltitudeKind(0);
      v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 16);
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRetain(v88);
      v93(v90, v91, v92);
      v94 = v18[15];
      v95 = (void *)(v16 + v94);
      v96 = (const void *)(v17 + v94);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v94, 1, v291))
      {
        v97 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
      }
      else
      {
        v297(v95, v96, v291);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v291);
      }
      v98 = v18[16];
      v99 = (void *)(v16 + v98);
      v100 = (const void *)(v17 + v98);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v98, 1, v291))
      {
        v101 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
      }
      else
      {
        v297(v99, v100, v291);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v291);
      }
      v102 = v18[17];
      v103 = v16 + v102;
      v104 = v17 + v102;
      v105 = type metadata accessor for UVIndex(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v103, v104, v105);
      v106 = v18[18];
      v107 = v16 + v106;
      v108 = v17 + v106;
      v109 = type metadata accessor for Wind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 16))(v107, v108, v109);
      *(_QWORD *)(v16 + v18[19]) = *(_QWORD *)(v17 + v18[19]);
      v110 = v18[20];
      v111 = v16 + v110;
      v112 = (__int128 *)(v17 + v110);
      if (*((_QWORD *)v112 + 1))
      {
        *(_QWORD *)v111 = *(_QWORD *)v112;
        v113 = *((_QWORD *)v112 + 1);
        *(_QWORD *)(v111 + 8) = v113;
        v114 = *((_QWORD *)v112 + 2);
        v115 = *((_QWORD *)v112 + 3);
        v116 = *((_BYTE *)v112 + 32);
        swift_bridgeObjectRetain(v113);
        sub_100006E58(v114, v115, v116);
        *(_QWORD *)(v111 + 16) = v114;
        *(_QWORD *)(v111 + 24) = v115;
        *(_BYTE *)(v111 + 32) = v116;
      }
      else
      {
        v117 = *v112;
        v118 = v112[1];
        *(_BYTE *)(v111 + 32) = *((_BYTE *)v112 + 32);
        *(_OWORD *)v111 = v117;
        *(_OWORD *)(v111 + 16) = v118;
      }
      v119 = v290[7];
      v120 = *(_QWORD *)(v299 + v119);
      *(_QWORD *)(a1 + v119) = v120;
      v121 = v290[8];
      v122 = *(_QWORD *)(v299 + v121);
      *(_QWORD *)(a1 + v121) = v122;
      v123 = v290[9];
      v124 = (char *)(a1 + v123);
      v125 = (char *)(v299 + v123);
      v126 = (int *)type metadata accessor for AirQualityViewModel(0);
      swift_bridgeObjectRetain(v120);
      swift_bridgeObjectRetain(v122);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v125, 1, (uint64_t)v126))
      {
        v127 = sub_100005D40(&qword_1001BFA30);
        memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
      }
      else
      {
        v293((uint64_t)v124, (uint64_t)v125, v295);
        v297(&v124[v126[5]], &v125[v126[5]], v291);
        *(_QWORD *)&v124[v126[6]] = *(_QWORD *)&v125[v126[6]];
        v128 = v126[7];
        v129 = &v124[v128];
        v130 = &v125[v128];
        v131 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
        v132 = v126[8];
        v133 = &v124[v132];
        v134 = &v125[v132];
        v135 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16))(v133, v134, v135);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v124, 0, 1, (uint64_t)v126);
      }
      v136 = v290[10];
      v137 = (void *)(a1 + v136);
      v138 = (const void *)(v299 + v136);
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v138, 1, HourPrecipitationChartViewModel))
      {
        v140 = sub_100005D40(&qword_1001BFA38);
        memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v137, v138, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v137, 0, 1, HourPrecipitationChartViewModel);
      }
      v141 = v290[11];
      v142 = *(_QWORD *)(v299 + v141);
      *(_QWORD *)(a1 + v141) = v142;
      v143 = v290[12];
      v144 = a1 + v143;
      v145 = (uint64_t *)(v299 + v143);
      v146 = *v145;
      *(_WORD *)(v144 + 8) = *((_WORD *)v145 + 4);
      *(_QWORD *)v144 = v146;
      v147 = v290[13];
      v148 = (void *)(a1 + v147);
      v149 = (const void *)(v299 + v147);
      v150 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain(v142);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v149, 1, v150))
      {
        v151 = sub_100005D40(&qword_1001BFA28);
        memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v148, 0, 1, v150);
      }
      v152 = v290[14];
      v153 = (void *)(a1 + v152);
      v154 = (const void *)(v299 + v152);
      v155 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v154, 1, v155))
      {
        v156 = sub_100005D40(&qword_1001BFA40);
        memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
      }
      else
      {
        v157 = swift_getEnumCaseMultiPayload(v154, v155) == 1;
        v297(v153, v154, v291);
        swift_storeEnumTagMultiPayload(v153, v155, v157);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v153, 0, 1, v155);
      }
      v158 = a1;
      v159 = 2;
      v160 = (uint64_t)v290;
      goto LABEL_38;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_10011C038(a1, type metadata accessor for AggregateWeatherViewModel);
LABEL_7:
    v37 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
    v38 = (void *)a1;
    v39 = (const void *)a2;
LABEL_8:
    memcpy(v38, v39, v37);
    return a1;
  }
  v40 = type metadata accessor for UUID(0);
  v287 = *(_QWORD *)(v40 - 8);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v287 + 24);
  v41(a1, a2, v40);
  v42 = v6[5];
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v43, v44, v45);
  v46 = v6[6];
  v47 = a1 + v46;
  v300 = a2;
  v48 = a2 + v46;
  v294 = v41;
  v296 = v40;
  v41(a1 + v46, v48, v40);
  v49 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v50 = v49[5];
  v51 = v47 + v50;
  v52 = v48 + v50;
  v53 = type metadata accessor for Date(0);
  v298 = *(_QWORD *)(v53 - 8);
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v298 + 24);
  v54(v51, v52, v53);
  v292 = v53;
  v288 = (void (*)(void *, const void *, uint64_t))v54;
  v54(v47 + v49[6], v48 + v49[6], v53);
  v55 = v49[7];
  v56 = v47 + v55;
  v57 = v48 + v55;
  v58 = sub_100005D40(&qword_1001BF090);
  v289 = *(_QWORD *)(v58 - 8);
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v289 + 24);
  v59(v56, v57, v58);
  v59(v47 + v49[8], v48 + v49[8], v58);
  v60 = v49[9];
  v61 = (_QWORD *)(v47 + v60);
  v62 = (_QWORD *)(v48 + v60);
  *v61 = *v62;
  v63 = v62[1];
  v64 = v61[1];
  v61[1] = v63;
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRelease(v64);
  v65 = v49[10];
  v66 = (void *)(v47 + v65);
  v67 = (const void *)(v48 + v65);
  LODWORD(v54) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v47 + v65, 1, v58);
  v68 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v58);
  if ((_DWORD)v54)
  {
    if (!v68)
    {
      (*(void (**)(void *, const void *, uint64_t))(v289 + 16))(v66, v67, v58);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v58);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v68)
  {
    (*(void (**)(void *, uint64_t))(v289 + 8))(v66, v58);
LABEL_42:
    v162 = sub_100005D40(&qword_1001BF098);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_43;
  }
  v59((uint64_t)v66, (uint64_t)v67, v58);
LABEL_43:
  v163 = v49[11];
  v164 = (void *)(v47 + v163);
  v165 = (const void *)(v48 + v163);
  v166 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v47 + v163, 1, v58);
  v167 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v165, 1, v58);
  if (v166)
  {
    if (!v167)
    {
      (*(void (**)(void *, const void *, uint64_t))(v289 + 16))(v164, v165, v58);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v164, 0, 1, v58);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v167)
  {
    (*(void (**)(void *, uint64_t))(v289 + 8))(v164, v58);
LABEL_48:
    v168 = sub_100005D40(&qword_1001BF098);
    memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
    goto LABEL_49;
  }
  v59((uint64_t)v164, (uint64_t)v165, v58);
LABEL_49:
  v169 = v49[12];
  v170 = v47 + v169;
  v171 = v48 + v169;
  v294(v47 + v169, v48 + v169, v296);
  v172 = (int *)type metadata accessor for ConditionViewModel(0);
  v173 = v172[5];
  v174 = v170 + v173;
  v175 = v171 + v173;
  v176 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v176 - 8) + 24))(v174, v175, v176);
  v177 = v172[6];
  v178 = (_QWORD *)(v170 + v177);
  v179 = (_QWORD *)(v171 + v177);
  *v178 = *v179;
  v180 = v179[1];
  v181 = v178[1];
  v178[1] = v180;
  swift_bridgeObjectRetain(v180);
  swift_bridgeObjectRelease(v181);
  v182 = v172[7];
  v183 = (_QWORD *)(v170 + v182);
  v184 = (_QWORD *)(v171 + v182);
  *v183 = *v184;
  v185 = v184[1];
  v186 = v183[1];
  v183[1] = v185;
  swift_bridgeObjectRetain(v185);
  swift_bridgeObjectRelease(v186);
  *(_BYTE *)(v170 + v172[8]) = *(_BYTE *)(v171 + v172[8]);
  *(_BYTE *)(v170 + v172[9]) = *(_BYTE *)(v171 + v172[9]);
  *(_BYTE *)(v170 + v172[10]) = *(_BYTE *)(v171 + v172[10]);
  *(_QWORD *)(v47 + v49[13]) = *(_QWORD *)(v48 + v49[13]);
  v187 = v49[14];
  v188 = v47 + v187;
  v189 = v48 + v187;
  v190 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v190 - 8) + 24))(v188, v189, v190);
  v191 = v49[15];
  v192 = (void *)(v47 + v191);
  v193 = (const void *)(v48 + v191);
  LODWORD(v188) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v47 + v191, 1, v292);
  v194 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v193, 1, v292);
  if ((_DWORD)v188)
  {
    if (!v194)
    {
      (*(void (**)(void *, const void *, uint64_t))(v298 + 16))(v192, v193, v292);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v192, 0, 1, v292);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v194)
  {
    (*(void (**)(void *, uint64_t))(v298 + 8))(v192, v292);
LABEL_54:
    v195 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v192, v193, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
    goto LABEL_55;
  }
  v288(v192, v193, v292);
LABEL_55:
  v196 = v49[16];
  v197 = (void *)(v47 + v196);
  v198 = (const void *)(v48 + v196);
  v199 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v47 + v196, 1, v292);
  v200 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v198, 1, v292);
  if (v199)
  {
    if (!v200)
    {
      (*(void (**)(void *, const void *, uint64_t))(v298 + 16))(v197, v198, v292);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v197, 0, 1, v292);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v200)
  {
    (*(void (**)(void *, uint64_t))(v298 + 8))(v197, v292);
LABEL_60:
    v201 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
    goto LABEL_61;
  }
  v288(v197, v198, v292);
LABEL_61:
  v202 = v49[17];
  v203 = v47 + v202;
  v204 = v48 + v202;
  v205 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v205 - 8) + 24))(v203, v204, v205);
  v206 = v49[18];
  v207 = v47 + v206;
  v208 = v48 + v206;
  v209 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v209 - 8) + 24))(v207, v208, v209);
  *(_QWORD *)(v47 + v49[19]) = *(_QWORD *)(v48 + v49[19]);
  v210 = v49[20];
  v211 = v47 + v210;
  v212 = (__int128 *)(v48 + v210);
  v213 = *(_QWORD *)(v211 + 8);
  v214 = *((_QWORD *)v212 + 1);
  if (v213)
  {
    if (v214)
    {
      *(_QWORD *)v211 = *(_QWORD *)v212;
      v215 = *((_QWORD *)v212 + 1);
      *(_QWORD *)(v211 + 8) = v215;
      swift_bridgeObjectRetain(v215);
      swift_bridgeObjectRelease(v213);
      v216 = *((_QWORD *)v212 + 2);
      v217 = *((_QWORD *)v212 + 3);
      v218 = *((_BYTE *)v212 + 32);
      sub_100006E58(v216, v217, v218);
      v219 = *(_QWORD *)(v211 + 16);
      v220 = *(_QWORD *)(v211 + 24);
      v221 = *(_BYTE *)(v211 + 32);
      *(_QWORD *)(v211 + 16) = v216;
      *(_QWORD *)(v211 + 24) = v217;
      *(_BYTE *)(v211 + 32) = v218;
      sub_100007458(v219, v220, v221);
    }
    else
    {
      sub_100008EC4(v211);
      v226 = *((_BYTE *)v212 + 32);
      v227 = v212[1];
      *(_OWORD *)v211 = *v212;
      *(_OWORD *)(v211 + 16) = v227;
      *(_BYTE *)(v211 + 32) = v226;
    }
  }
  else if (v214)
  {
    *(_QWORD *)v211 = *(_QWORD *)v212;
    v222 = *((_QWORD *)v212 + 1);
    *(_QWORD *)(v211 + 8) = v222;
    v223 = *((_QWORD *)v212 + 2);
    v224 = *((_QWORD *)v212 + 3);
    v225 = *((_BYTE *)v212 + 32);
    swift_bridgeObjectRetain(v222);
    sub_100006E58(v223, v224, v225);
    *(_QWORD *)(v211 + 16) = v223;
    *(_QWORD *)(v211 + 24) = v224;
    *(_BYTE *)(v211 + 32) = v225;
  }
  else
  {
    v228 = *v212;
    v229 = v212[1];
    *(_BYTE *)(v211 + 32) = *((_BYTE *)v212 + 32);
    *(_OWORD *)v211 = v228;
    *(_OWORD *)(v211 + 16) = v229;
  }
  v230 = v6[7];
  v231 = *(_QWORD *)(v300 + v230);
  v232 = *(_QWORD *)(a1 + v230);
  *(_QWORD *)(a1 + v230) = v231;
  swift_bridgeObjectRetain(v231);
  swift_bridgeObjectRelease(v232);
  v233 = v6[8];
  v234 = *(_QWORD *)(v300 + v233);
  v235 = *(_QWORD *)(a1 + v233);
  *(_QWORD *)(a1 + v233) = v234;
  swift_bridgeObjectRetain(v234);
  swift_bridgeObjectRelease(v235);
  v236 = v6[9];
  v237 = (char *)(a1 + v236);
  v238 = (char *)(v300 + v236);
  v239 = (int *)type metadata accessor for AirQualityViewModel(0);
  LODWORD(v235) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v237, 1, (uint64_t)v239);
  v240 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v238, 1, (uint64_t)v239);
  if ((_DWORD)v235)
  {
    if (!v240)
    {
      (*(void (**)(char *, char *, uint64_t))(v287 + 16))(v237, v238, v296);
      (*(void (**)(char *, char *, uint64_t))(v298 + 16))(&v237[v239[5]], &v238[v239[5]], v292);
      *(_QWORD *)&v237[v239[6]] = *(_QWORD *)&v238[v239[6]];
      v241 = v239[7];
      v242 = &v237[v241];
      v243 = &v238[v241];
      v244 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v244 - 8) + 16))(v242, v243, v244);
      v245 = v239[8];
      v246 = &v237[v245];
      v247 = &v238[v245];
      v248 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 16))(v246, v247, v248);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v237, 0, 1, (uint64_t)v239);
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  if (v240)
  {
    sub_10011C038((uint64_t)v237, type metadata accessor for AirQualityViewModel);
LABEL_77:
    v249 = sub_100005D40(&qword_1001BFA30);
    memcpy(v237, v238, *(_QWORD *)(*(_QWORD *)(v249 - 8) + 64));
    goto LABEL_78;
  }
  v294((uint64_t)v237, (uint64_t)v238, v296);
  v288(&v237[v239[5]], &v238[v239[5]], v292);
  *(_QWORD *)&v237[v239[6]] = *(_QWORD *)&v238[v239[6]];
  v278 = v239[7];
  v279 = &v237[v278];
  v280 = &v238[v278];
  v281 = type metadata accessor for AirQualityScale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v281 - 8) + 24))(v279, v280, v281);
  v282 = v239[8];
  v283 = &v237[v282];
  v284 = &v238[v282];
  v285 = type metadata accessor for AirQualityScaleCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v285 - 8) + 24))(v283, v284, v285);
LABEL_78:
  v250 = v6[10];
  v251 = (void *)(a1 + v250);
  v252 = (const void *)(v300 + v250);
  v253 = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v254 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v251, 1, v253);
  v255 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v252, 1, v253);
  if (v254)
  {
    if (!v255)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v253 - 8) + 16))(v251, v252, v253);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v251, 0, 1, v253);
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  v256 = *(_QWORD *)(v253 - 8);
  if (v255)
  {
    (*(void (**)(void *, uint64_t))(v256 + 8))(v251, v253);
LABEL_83:
    v257 = sub_100005D40(&qword_1001BFA38);
    memcpy(v251, v252, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
    goto LABEL_84;
  }
  (*(void (**)(void *, const void *, uint64_t))(v256 + 24))(v251, v252, v253);
LABEL_84:
  v258 = v6[11];
  v259 = *(_QWORD *)(v300 + v258);
  v260 = *(_QWORD *)(a1 + v258);
  *(_QWORD *)(a1 + v258) = v259;
  swift_bridgeObjectRetain(v259);
  swift_bridgeObjectRelease(v260);
  v261 = v6[12];
  v262 = (_BYTE *)(a1 + v261);
  v263 = (_BYTE *)(v300 + v261);
  *v262 = *v263;
  v262[1] = v263[1];
  v262[2] = v263[2];
  v262[3] = v263[3];
  v262[4] = v263[4];
  v262[5] = v263[5];
  v262[6] = v263[6];
  v262[7] = v263[7];
  v262[8] = v263[8];
  v262[9] = v263[9];
  v264 = v6[13];
  v265 = (void *)(a1 + v264);
  v266 = (const void *)(v300 + v264);
  v267 = type metadata accessor for URL(0);
  LODWORD(v260) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v265, 1, v267);
  v268 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v266, 1, v267);
  if ((_DWORD)v260)
  {
    if (!v268)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v267 - 8) + 16))(v265, v266, v267);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v265, 0, 1, v267);
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  v269 = *(_QWORD *)(v267 - 8);
  if (v268)
  {
    (*(void (**)(void *, uint64_t))(v269 + 8))(v265, v267);
LABEL_89:
    v270 = sub_100005D40(&qword_1001BFA28);
    memcpy(v265, v266, *(_QWORD *)(*(_QWORD *)(v270 - 8) + 64));
    goto LABEL_90;
  }
  (*(void (**)(void *, const void *, uint64_t))(v269 + 24))(v265, v266, v267);
LABEL_90:
  v271 = v6[14];
  v272 = a1 + v271;
  v273 = v300 + v271;
  v274 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  v275 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v272, 1, v274);
  v276 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v273, 1, v274);
  if (v275)
  {
    if (!v276)
    {
      v277 = swift_getEnumCaseMultiPayload(v273, v274) == 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v298 + 16))(v272, v273, v292);
      swift_storeEnumTagMultiPayload(v272, v274, v277);
      v158 = v272;
      v159 = 1;
      v160 = v274;
LABEL_38:
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v158, 0, v159, v160);
      return a1;
    }
    goto LABEL_95;
  }
  if (v276)
  {
    sub_10011C038(v272, type metadata accessor for AggregateWeatherViewModel.SunEvent);
LABEL_95:
    v37 = *(_QWORD *)(*(_QWORD *)(sub_100005D40(&qword_1001BFA40) - 8) + 64);
    v38 = (void *)v272;
    v39 = (const void *)v273;
    goto LABEL_8;
  }
  if (a1 != v300)
  {
    sub_10011C038(v272, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v273, v274);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v298 + 16))(v272, v273, v292);
    swift_storeEnumTagMultiPayload(v272, v274, EnumCaseMultiPayload == 1);
  }
  return a1;
}

uint64_t sub_10011C038(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t assignWithTake for AdaptiveConditionsComplicationDataStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  int v65;
  uint64_t v66;
  void *v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const void *v117;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const void *v130;
  uint64_t v131;
  uint64_t v132;
  _BOOL8 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  const void *v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  const void *v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  const void *v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  int *v205;
  int v206;
  int v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  const void *v219;
  uint64_t v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  const void *v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  _BOOL8 v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  int EnumCaseMultiPayload;
  uint64_t v254;
  void (*v255)(void *, const void *, uint64_t);
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void (*v259)(uint64_t, uint64_t, uint64_t);
  void (*v260)(uint64_t, uint64_t, uint64_t);
  uint64_t v261;
  uint64_t v262;
  void (*v263)(void *, const void *, uint64_t);
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;

  v6 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  v7 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 2, (uint64_t)v6);
  v8 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a2, 2, (uint64_t)v6);
  if (v7)
  {
    if (!v8)
    {
      v9 = type metadata accessor for UUID(0);
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
      v10(a1, a2, v9);
      v11 = v6[5];
      v12 = a1 + v11;
      v13 = a2 + v11;
      v14 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      v15 = v6[6];
      v16 = a1 + v15;
      v265 = a2;
      v17 = a2 + v15;
      v259 = v10;
      v261 = v9;
      v10(a1 + v15, a2 + v15, v9);
      v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v19 = v18[5];
      v20 = v16 + v19;
      v21 = v17 + v19;
      v22 = type metadata accessor for Date(0);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
      v23(v20, v21, v22);
      v257 = v22;
      v263 = (void (*)(void *, const void *, uint64_t))v23;
      v23(v16 + v18[6], v17 + v18[6], v22);
      v24 = v18[7];
      v25 = v16 + v24;
      v26 = v17 + v24;
      v27 = sub_100005D40(&qword_1001BF090);
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
      v28(v25, v26, v27);
      v28(v16 + v18[8], v17 + v18[8], v27);
      *(_OWORD *)(v16 + v18[9]) = *(_OWORD *)(v17 + v18[9]);
      v29 = v18[10];
      v30 = (void *)(v16 + v29);
      v31 = (const void *)(v17 + v29);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v29, 1, v27))
      {
        v32 = sub_100005D40(&qword_1001BF098);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        v28((uint64_t)v30, (uint64_t)v31, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v27);
      }
      v66 = v18[11];
      v67 = (void *)(v16 + v66);
      v68 = (const void *)(v17 + v66);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v66, 1, v27))
      {
        v69 = sub_100005D40(&qword_1001BF098);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        v28((uint64_t)v67, (uint64_t)v68, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v27);
      }
      v70 = v18[12];
      v71 = v16 + v70;
      v72 = v17 + v70;
      v259(v16 + v70, v17 + v70, v261);
      v73 = (int *)type metadata accessor for ConditionViewModel(0);
      v74 = v73[5];
      v75 = v71 + v74;
      v76 = v72 + v74;
      v77 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
      *(_OWORD *)(v71 + v73[6]) = *(_OWORD *)(v72 + v73[6]);
      *(_OWORD *)(v71 + v73[7]) = *(_OWORD *)(v72 + v73[7]);
      *(_BYTE *)(v71 + v73[8]) = *(_BYTE *)(v72 + v73[8]);
      *(_BYTE *)(v71 + v73[9]) = *(_BYTE *)(v72 + v73[9]);
      *(_BYTE *)(v71 + v73[10]) = *(_BYTE *)(v72 + v73[10]);
      *(_QWORD *)(v16 + v18[13]) = *(_QWORD *)(v17 + v18[13]);
      v78 = v18[14];
      v79 = v16 + v78;
      v80 = v17 + v78;
      v81 = type metadata accessor for CloudAltitudeKind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v79, v80, v81);
      v82 = v18[15];
      v83 = (void *)(v16 + v82);
      v84 = (const void *)(v17 + v82);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v82, 1, v257))
      {
        v85 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v263(v83, v84, v257);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v83, 0, 1, v257);
      }
      v86 = v18[16];
      v87 = (void *)(v16 + v86);
      v88 = (const void *)(v17 + v86);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v86, 1, v257))
      {
        v89 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
      }
      else
      {
        v263(v87, v88, v257);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v87, 0, 1, v257);
      }
      v90 = v18[17];
      v91 = v16 + v90;
      v92 = v17 + v90;
      v93 = type metadata accessor for UVIndex(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(v91, v92, v93);
      v94 = v18[18];
      v95 = v16 + v94;
      v96 = v17 + v94;
      v97 = type metadata accessor for Wind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 32))(v95, v96, v97);
      *(_QWORD *)(v16 + v18[19]) = *(_QWORD *)(v17 + v18[19]);
      v98 = v18[20];
      v99 = v16 + v98;
      v100 = v17 + v98;
      *(_BYTE *)(v99 + 32) = *(_BYTE *)(v100 + 32);
      v101 = *(_OWORD *)(v100 + 16);
      *(_OWORD *)v99 = *(_OWORD *)v100;
      *(_OWORD *)(v99 + 16) = v101;
      *(_QWORD *)(a1 + v6[7]) = *(_QWORD *)(v265 + v6[7]);
      *(_QWORD *)(a1 + v6[8]) = *(_QWORD *)(v265 + v6[8]);
      v102 = v6[9];
      v103 = (char *)(a1 + v102);
      v104 = (char *)(v265 + v102);
      v105 = (int *)type metadata accessor for AirQualityViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v104, 1, (uint64_t)v105))
      {
        v106 = sub_100005D40(&qword_1001BFA30);
        memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
      }
      else
      {
        v259((uint64_t)v103, (uint64_t)v104, v261);
        v263(&v103[v105[5]], &v104[v105[5]], v257);
        *(_QWORD *)&v103[v105[6]] = *(_QWORD *)&v104[v105[6]];
        v107 = v105[7];
        v108 = &v103[v107];
        v109 = &v104[v107];
        v110 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 32))(v108, v109, v110);
        v111 = v105[8];
        v112 = &v103[v111];
        v113 = &v104[v111];
        v114 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 32))(v112, v113, v114);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v103, 0, 1, (uint64_t)v105);
      }
      v115 = v6[10];
      v116 = (void *)(a1 + v115);
      v117 = (const void *)(v265 + v115);
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v117, 1, HourPrecipitationChartViewModel))
      {
        v119 = sub_100005D40(&qword_1001BFA38);
        memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v116, v117, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v116, 0, 1, HourPrecipitationChartViewModel);
      }
      *(_QWORD *)(a1 + v6[11]) = *(_QWORD *)(v265 + v6[11]);
      v120 = v6[12];
      v121 = a1 + v120;
      v122 = v265 + v120;
      *(_QWORD *)v121 = *(_QWORD *)v122;
      *(_WORD *)(v121 + 8) = *(_WORD *)(v122 + 8);
      v123 = v6[13];
      v124 = (void *)(a1 + v123);
      v125 = (const void *)(v265 + v123);
      v126 = type metadata accessor for URL(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v125, 1, v126))
      {
        v127 = sub_100005D40(&qword_1001BFA28);
        memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v126 - 8) + 32))(v124, v125, v126);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v124, 0, 1, v126);
      }
      v128 = v6[14];
      v129 = (void *)(a1 + v128);
      v130 = (const void *)(v265 + v128);
      v131 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v130, 1, v131))
      {
        v132 = sub_100005D40(&qword_1001BFA40);
        memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
      }
      else
      {
        v133 = swift_getEnumCaseMultiPayload(v130, v131) == 1;
        v263(v129, v130, v257);
        swift_storeEnumTagMultiPayload(v129, v131, v133);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v129, 0, 1, v131);
      }
      v134 = a1;
      v135 = 2;
      v136 = (uint64_t)v6;
      goto LABEL_35;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_10011C038(a1, type metadata accessor for AggregateWeatherViewModel);
LABEL_7:
    v33 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
    v34 = (void *)a1;
    v35 = (const void *)a2;
LABEL_8:
    memcpy(v34, v35, v33);
    return a1;
  }
  v36 = type metadata accessor for UUID(0);
  v254 = *(_QWORD *)(v36 - 8);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v254 + 40);
  v37(a1, a2, v36);
  v38 = v6[5];
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 40))(v39, v40, v41);
  v42 = v6[6];
  v43 = a1 + v42;
  v266 = a2;
  v44 = a2 + v42;
  v260 = v37;
  v262 = v36;
  v37(a1 + v42, a2 + v42, v36);
  v45 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v46 = v45[5];
  v47 = v43 + v46;
  v48 = v44 + v46;
  v49 = type metadata accessor for Date(0);
  v264 = *(_QWORD *)(v49 - 8);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 40);
  v50(v47, v48, v49);
  v258 = v49;
  v255 = (void (*)(void *, const void *, uint64_t))v50;
  v50(v43 + v45[6], v44 + v45[6], v49);
  v51 = v45[7];
  v52 = v43 + v51;
  v53 = v44 + v51;
  v54 = sub_100005D40(&qword_1001BF090);
  v256 = *(_QWORD *)(v54 - 8);
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v256 + 40);
  v55(v52, v53, v54);
  v55(v43 + v45[8], v44 + v45[8], v54);
  v56 = v45[9];
  v57 = (_QWORD *)(v43 + v56);
  v58 = (uint64_t *)(v44 + v56);
  v60 = *v58;
  v59 = v58[1];
  v61 = v57[1];
  *v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease(v61);
  v62 = v45[10];
  v63 = (void *)(v43 + v62);
  v64 = (const void *)(v44 + v62);
  LODWORD(v50) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v43 + v62, 1, v54);
  v65 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v64, 1, v54);
  if ((_DWORD)v50)
  {
    if (!v65)
    {
      (*(void (**)(void *, const void *, uint64_t))(v256 + 32))(v63, v64, v54);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v54);
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (v65)
  {
    (*(void (**)(void *, uint64_t))(v256 + 8))(v63, v54);
LABEL_39:
    v138 = sub_100005D40(&qword_1001BF098);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
    goto LABEL_40;
  }
  v55((uint64_t)v63, (uint64_t)v64, v54);
LABEL_40:
  v139 = v45[11];
  v140 = (void *)(v43 + v139);
  v141 = (const void *)(v44 + v139);
  v142 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v43 + v139, 1, v54);
  v143 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v141, 1, v54);
  if (v142)
  {
    if (!v143)
    {
      (*(void (**)(void *, const void *, uint64_t))(v256 + 32))(v140, v141, v54);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v140, 0, 1, v54);
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if (v143)
  {
    (*(void (**)(void *, uint64_t))(v256 + 8))(v140, v54);
LABEL_45:
    v144 = sub_100005D40(&qword_1001BF098);
    memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
    goto LABEL_46;
  }
  v55((uint64_t)v140, (uint64_t)v141, v54);
LABEL_46:
  v145 = v45[12];
  v146 = v43 + v145;
  v147 = v44 + v145;
  v260(v43 + v145, v44 + v145, v262);
  v148 = (int *)type metadata accessor for ConditionViewModel(0);
  v149 = v148[5];
  v150 = v146 + v149;
  v151 = v147 + v149;
  v152 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 40))(v150, v151, v152);
  v153 = v148[6];
  v154 = (_QWORD *)(v146 + v153);
  v155 = (uint64_t *)(v147 + v153);
  v157 = *v155;
  v156 = v155[1];
  v158 = v154[1];
  *v154 = v157;
  v154[1] = v156;
  swift_bridgeObjectRelease(v158);
  v159 = v148[7];
  v160 = (_QWORD *)(v146 + v159);
  v161 = (uint64_t *)(v147 + v159);
  v163 = *v161;
  v162 = v161[1];
  v164 = v160[1];
  *v160 = v163;
  v160[1] = v162;
  swift_bridgeObjectRelease(v164);
  *(_BYTE *)(v146 + v148[8]) = *(_BYTE *)(v147 + v148[8]);
  *(_BYTE *)(v146 + v148[9]) = *(_BYTE *)(v147 + v148[9]);
  *(_BYTE *)(v146 + v148[10]) = *(_BYTE *)(v147 + v148[10]);
  *(_QWORD *)(v43 + v45[13]) = *(_QWORD *)(v44 + v45[13]);
  v165 = v45[14];
  v166 = v43 + v165;
  v167 = v44 + v165;
  v168 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v168 - 8) + 40))(v166, v167, v168);
  v169 = v45[15];
  v170 = (void *)(v43 + v169);
  v171 = (const void *)(v44 + v169);
  LODWORD(v166) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v43 + v169, 1, v258);
  v172 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v171, 1, v258);
  if ((_DWORD)v166)
  {
    if (!v172)
    {
      (*(void (**)(void *, const void *, uint64_t))(v264 + 32))(v170, v171, v258);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v170, 0, 1, v258);
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (v172)
  {
    (*(void (**)(void *, uint64_t))(v264 + 8))(v170, v258);
LABEL_51:
    v173 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    goto LABEL_52;
  }
  v255(v170, v171, v258);
LABEL_52:
  v174 = v45[16];
  v175 = (void *)(v43 + v174);
  v176 = (const void *)(v44 + v174);
  v177 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v43 + v174, 1, v258);
  v178 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v176, 1, v258);
  if (v177)
  {
    if (!v178)
    {
      (*(void (**)(void *, const void *, uint64_t))(v264 + 32))(v175, v176, v258);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v175, 0, 1, v258);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v178)
  {
    (*(void (**)(void *, uint64_t))(v264 + 8))(v175, v258);
LABEL_57:
    v179 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
    goto LABEL_58;
  }
  v255(v175, v176, v258);
LABEL_58:
  v180 = v45[17];
  v181 = v43 + v180;
  v182 = v44 + v180;
  v183 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v183 - 8) + 40))(v181, v182, v183);
  v184 = v45[18];
  v185 = v43 + v184;
  v186 = v44 + v184;
  v187 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v187 - 8) + 40))(v185, v186, v187);
  *(_QWORD *)(v43 + v45[19]) = *(_QWORD *)(v44 + v45[19]);
  v188 = v45[20];
  v189 = v43 + v188;
  v190 = v44 + v188;
  v191 = *(_QWORD *)(v43 + v188 + 8);
  if (v191)
  {
    v192 = *(_QWORD *)(v190 + 8);
    if (v192)
    {
      *(_QWORD *)v189 = *(_QWORD *)v190;
      *(_QWORD *)(v189 + 8) = v192;
      swift_bridgeObjectRelease(v191);
      v193 = *(_BYTE *)(v190 + 32);
      v194 = *(_QWORD *)(v189 + 16);
      v195 = *(_QWORD *)(v189 + 24);
      v196 = *(_BYTE *)(v189 + 32);
      *(_OWORD *)(v189 + 16) = *(_OWORD *)(v190 + 16);
      *(_BYTE *)(v189 + 32) = v193;
      sub_100007458(v194, v195, v196);
      goto LABEL_63;
    }
    sub_100008EC4(v189);
  }
  v197 = *(_OWORD *)(v190 + 16);
  *(_OWORD *)v189 = *(_OWORD *)v190;
  *(_OWORD *)(v189 + 16) = v197;
  *(_BYTE *)(v189 + 32) = *(_BYTE *)(v190 + 32);
LABEL_63:
  v198 = v6[7];
  v199 = *(_QWORD *)(a1 + v198);
  *(_QWORD *)(a1 + v198) = *(_QWORD *)(v266 + v198);
  swift_bridgeObjectRelease(v199);
  v200 = v6[8];
  v201 = *(_QWORD *)(a1 + v200);
  *(_QWORD *)(a1 + v200) = *(_QWORD *)(v266 + v200);
  swift_bridgeObjectRelease(v201);
  v202 = v6[9];
  v203 = (char *)(a1 + v202);
  v204 = (char *)(v266 + v202);
  v205 = (int *)type metadata accessor for AirQualityViewModel(0);
  v206 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v203, 1, (uint64_t)v205);
  v207 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v204, 1, (uint64_t)v205);
  if (v206)
  {
    if (!v207)
    {
      (*(void (**)(char *, char *, uint64_t))(v254 + 32))(v203, v204, v262);
      (*(void (**)(char *, char *, uint64_t))(v264 + 32))(&v203[v205[5]], &v204[v205[5]], v258);
      *(_QWORD *)&v203[v205[6]] = *(_QWORD *)&v204[v205[6]];
      v208 = v205[7];
      v209 = &v203[v208];
      v210 = &v204[v208];
      v211 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v211 - 8) + 32))(v209, v210, v211);
      v212 = v205[8];
      v213 = &v203[v212];
      v214 = &v204[v212];
      v215 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v215 - 8) + 32))(v213, v214, v215);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v203, 0, 1, (uint64_t)v205);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v207)
  {
    sub_10011C038((uint64_t)v203, type metadata accessor for AirQualityViewModel);
LABEL_68:
    v216 = sub_100005D40(&qword_1001BFA30);
    memcpy(v203, v204, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
    goto LABEL_69;
  }
  v260((uint64_t)v203, (uint64_t)v204, v262);
  v255(&v203[v205[5]], &v204[v205[5]], v258);
  *(_QWORD *)&v203[v205[6]] = *(_QWORD *)&v204[v205[6]];
  v245 = v205[7];
  v246 = &v203[v245];
  v247 = &v204[v245];
  v248 = type metadata accessor for AirQualityScale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 40))(v246, v247, v248);
  v249 = v205[8];
  v250 = &v203[v249];
  v251 = &v204[v249];
  v252 = type metadata accessor for AirQualityScaleCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v252 - 8) + 40))(v250, v251, v252);
LABEL_69:
  v217 = v6[10];
  v218 = (void *)(a1 + v217);
  v219 = (const void *)(v266 + v217);
  v220 = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v221 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v218, 1, v220);
  v222 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v219, 1, v220);
  if (v221)
  {
    if (!v222)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v220 - 8) + 32))(v218, v219, v220);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v218, 0, 1, v220);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  v223 = *(_QWORD *)(v220 - 8);
  if (v222)
  {
    (*(void (**)(void *, uint64_t))(v223 + 8))(v218, v220);
LABEL_74:
    v224 = sub_100005D40(&qword_1001BFA38);
    memcpy(v218, v219, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(void *, const void *, uint64_t))(v223 + 40))(v218, v219, v220);
LABEL_75:
  v225 = v6[11];
  v226 = *(_QWORD *)(a1 + v225);
  *(_QWORD *)(a1 + v225) = *(_QWORD *)(v266 + v225);
  swift_bridgeObjectRelease(v226);
  v227 = v6[12];
  v228 = a1 + v227;
  v229 = v266 + v227;
  *(_QWORD *)v228 = *(_QWORD *)v229;
  *(_WORD *)(v228 + 8) = *(_WORD *)(v229 + 8);
  v230 = v6[13];
  v231 = (void *)(a1 + v230);
  v232 = (const void *)(v266 + v230);
  v233 = type metadata accessor for URL(0);
  v234 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v231, 1, v233);
  v235 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v232, 1, v233);
  if (v234)
  {
    if (!v235)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v233 - 8) + 32))(v231, v232, v233);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v231, 0, 1, v233);
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  v236 = *(_QWORD *)(v233 - 8);
  if (v235)
  {
    (*(void (**)(void *, uint64_t))(v236 + 8))(v231, v233);
LABEL_80:
    v237 = sub_100005D40(&qword_1001BFA28);
    memcpy(v231, v232, *(_QWORD *)(*(_QWORD *)(v237 - 8) + 64));
    goto LABEL_81;
  }
  (*(void (**)(void *, const void *, uint64_t))(v236 + 40))(v231, v232, v233);
LABEL_81:
  v238 = v6[14];
  v239 = a1 + v238;
  v240 = v266 + v238;
  v241 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  v242 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v239, 1, v241);
  v243 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v240, 1, v241);
  if (v242)
  {
    if (!v243)
    {
      v244 = swift_getEnumCaseMultiPayload(v240, v241) == 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 32))(v239, v240, v258);
      swift_storeEnumTagMultiPayload(v239, v241, v244);
      v134 = v239;
      v135 = 1;
      v136 = v241;
LABEL_35:
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v134, 0, v135, v136);
      return a1;
    }
    goto LABEL_86;
  }
  if (v243)
  {
    sub_10011C038(v239, type metadata accessor for AggregateWeatherViewModel.SunEvent);
LABEL_86:
    v33 = *(_QWORD *)(*(_QWORD *)(sub_100005D40(&qword_1001BFA40) - 8) + 64);
    v34 = (void *)v239;
    v35 = (const void *)v240;
    goto LABEL_8;
  }
  if (a1 != v266)
  {
    sub_10011C038(v239, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v240, v241);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 32))(v239, v240, v258);
    swift_storeEnumTagMultiPayload(v239, v241, EnumCaseMultiPayload == 1);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AdaptiveConditionsComplicationDataStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011D2B0);
}

uint64_t sub_10011D2B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for AggregateWeatherViewModel(0);
  v5 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AdaptiveConditionsComplicationDataStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011D300);
}

uint64_t sub_10011D300(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = type metadata accessor for AggregateWeatherViewModel(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, v5, a3, v6);
}

uint64_t type metadata accessor for AdaptiveConditionsComplicationDataStatus(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C5140;
  if (!qword_1001C5140)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AdaptiveConditionsComplicationDataStatus);
  return result;
}

uint64_t sub_10011D384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011D390);
}

uint64_t sub_10011D390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = type metadata accessor for ForecastEntry(0);
    v8 = a1 + *(int *)(a3 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
}

uint64_t sub_10011D3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011D408);
}

uint64_t sub_10011D408(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = type metadata accessor for ForecastEntry(0);
    v10 = a1 + *(int *)(a4 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for AQIContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C51A8;
  if (!qword_1001C51A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AQIContentView);
  return result;
}

uint64_t sub_10011D4B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A0BB4, 1);
}

uint64_t sub_10011D4C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10011D4CC(v1, a1);
}

uint64_t sub_10011D4CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(char *, uint64_t);
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  Swift::String v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  void *object;
  __n128 v51;
  Swift::String v52;
  uint64_t v53;
  unint64_t v54;
  Swift::String v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  void *v60;
  __n128 v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;

  v81 = a2;
  v71 = sub_100005D40(&qword_1001C51E0);
  __chkstk_darwin(v71);
  v72 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100005D40(&qword_1001C51E8);
  __chkstk_darwin(v80);
  v76 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AirQualityInlineContentView(0);
  v74 = *(_QWORD *)(v5 - 8);
  v75 = v5;
  __chkstk_darwin(v5);
  v73 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for AQIContentView(0);
  v7 = __chkstk_darwin(v77);
  v67 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v64 = (uint64_t)&v63 - v9;
  v78 = sub_100005D40(&qword_1001C51F0);
  __chkstk_darwin(v78);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100005D40(&qword_1001C51F8);
  __chkstk_darwin(v69);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100005D40(&qword_1001C5200);
  __chkstk_darwin(v79);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AirQualityComplicationDataStatus(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AirQualityCircularContentView(0);
  v70 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for WidgetFamily(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v65 = (_DWORD *)((char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v24);
  v27 = (char *)&v63 - v26;
  sub_1000C54B0((uint64_t *)((char *)&v63 - v26));
  v66 = v23;
  v28 = *(uint64_t (**)(char *, uint64_t))(v23 + 88);
  v68 = v22;
  v29 = v28(v27, v22);
  if (v29 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_1000D8A44((uint64_t)v18);
    AirQualityCircularContentView.init(status:)(v18);
    v30 = v70;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v13, v21, v19);
    swift_storeEnumTagMultiPayload(v13, v69, 0);
    sub_10002EF14(&qword_1001C5218, (uint64_t (*)(uint64_t))&type metadata accessor for AirQualityCircularContentView, (uint64_t)&protocol conformance descriptor for AirQualityCircularContentView);
    _ConditionalContent<>.init(storage:)(v13, v19, &type metadata for Never, v31, &protocol witness table for Never);
    sub_10002EFD4((uint64_t)v15, (uint64_t)v11, &qword_1001C5200);
    swift_storeEnumTagMultiPayload(v11, v78, 0);
    v32 = sub_10011DC34();
    v33 = sub_10011DCB8();
    _ConditionalContent<>.init(storage:)(v11, v79, v80, v32, v33);
    sub_10002F014((uint64_t)v15, &qword_1001C5200);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v21, v19);
  }
  v35 = v78;
  if (v29 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    sub_10011DBF0(a1, v64);
    v82 = 0;
    v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v45._countAndFlagsBits = 0xD000000000000021;
    v45._object = (void *)0x8000000100186340;
    String.append(_:)(v45);
    v46 = v65;
    sub_1000C54B0(v65);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v47 = v68;
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v68, v48);
    object = v49._object;
    String.append(_:)(v49);
    v51 = swift_bridgeObjectRelease(object);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v66 + 8))(v46, v47, v51);
    v52._object = (void *)0x8000000100189720;
    v52._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v52);
    v53 = v82;
    v54 = v83;
LABEL_9:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v53, v54, "WeatherWidget/AQIContentView.swift", 34, 2);
    __break(1u);
    return result;
  }
  if (v29 != enum case for WidgetFamily.accessoryInline(_:))
  {
    sub_10011DBF0(a1, v67);
    v82 = 0;
    v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v55._countAndFlagsBits = 0xD000000000000022;
    v55._object = (void *)0x80000001001862F0;
    String.append(_:)(v55);
    v56 = v65;
    sub_1000C54B0(v65);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v57 = v68;
    v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v68, v58);
    v60 = v59._object;
    String.append(_:)(v59);
    v61 = swift_bridgeObjectRelease(v60);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v66 + 8))(v56, v57, v61);
    v62._object = (void *)0x8000000100189720;
    v62._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v62);
    v53 = v82;
    v54 = v83;
    goto LABEL_9;
  }
  v36 = (uint64_t)v11;
  sub_1000D8A44((uint64_t)v18);
  v37 = v73;
  AirQualityInlineContentView.init(status:)(v18);
  v39 = v74;
  v38 = v75;
  v40 = v72;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v72, v37, v75);
  swift_storeEnumTagMultiPayload(v40, v71, 0);
  sub_10002EF14(&qword_1001C5208, (uint64_t (*)(uint64_t))&type metadata accessor for AirQualityInlineContentView, (uint64_t)&protocol conformance descriptor for AirQualityInlineContentView);
  v41 = (uint64_t)v76;
  _ConditionalContent<>.init(storage:)(v40, v38, &type metadata for Never, v42, &protocol witness table for Never);
  sub_10002EFD4(v41, v36, &qword_1001C51E8);
  swift_storeEnumTagMultiPayload(v36, v35, 1);
  v43 = sub_10011DC34();
  v44 = sub_10011DCB8();
  _ConditionalContent<>.init(storage:)(v36, v79, v80, v43, v44);
  sub_10002F014(v41, &qword_1001C51E8);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v37, v38);
}

uint64_t sub_10011DBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AQIContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10011DC34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5210;
  if (!qword_1001C5210)
  {
    v1 = sub_100005DC4(&qword_1001C5200);
    sub_10002EF14(&qword_1001C5218, (uint64_t (*)(uint64_t))&type metadata accessor for AirQualityCircularContentView, (uint64_t)&protocol conformance descriptor for AirQualityCircularContentView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C5210);
  }
  return result;
}

unint64_t sub_10011DCB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5220;
  if (!qword_1001C5220)
  {
    v1 = sub_100005DC4(&qword_1001C51E8);
    sub_10002EF14(&qword_1001C5208, (uint64_t (*)(uint64_t))&type metadata accessor for AirQualityInlineContentView, (uint64_t)&protocol conformance descriptor for AirQualityInlineContentView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C5220);
  }
  return result;
}

unint64_t sub_10011DD40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5228;
  if (!qword_1001C5228)
  {
    v1 = sub_100005DC4(&qword_1001C5230);
    sub_10011DDA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C5228);
  }
  return result;
}

unint64_t sub_10011DDA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5238;
  if (!qword_1001C5238)
  {
    v1 = sub_100005DC4(&qword_1001C5240);
    sub_10011DC34();
    sub_10011DCB8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C5238);
  }
  return result;
}

uint64_t sub_10011DE10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  objc_class *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  v0 = type metadata accessor for Container.Environment(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005D40(&qword_1001C52D8);
  v5 = sub_100070EA4(v4, 192);
  *(_OWORD *)(v5 + 16) = xmmword_100182570;
  v6 = (objc_class *)type metadata accessor for FrameworkAssembly(0);
  v7 = objc_msgSend(objc_allocWithZone(v6), "init");
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = &protocol witness table for FrameworkAssembly;
  *(_QWORD *)(v5 + 32) = v7;
  v8 = type metadata accessor for Assembly(0);
  sub_100097B00(v8);
  v9 = Assembly.init()();
  *(_QWORD *)(v5 + 96) = v8;
  *(_QWORD *)(v5 + 104) = sub_10011ED6C(&qword_1001C52E0, v10, (uint64_t)&protocol conformance descriptor for Assembly);
  *(_QWORD *)(v5 + 72) = v9;
  v11 = type metadata accessor for Assembly(0);
  sub_100097B00(v11);
  v12 = Assembly.init()();
  *(_QWORD *)(v5 + 136) = v11;
  *(_QWORD *)(v5 + 144) = sub_10011ED6C(&qword_1001C52E8, v13, (uint64_t)&protocol conformance descriptor for Assembly);
  *(_QWORD *)(v5 + 112) = v12;
  v14 = type metadata accessor for Assembly(0);
  sub_100097B00(v14);
  v15 = Assembly.init()();
  *(_QWORD *)(v5 + 176) = v14;
  *(_QWORD *)(v5 + 184) = sub_10011ED6C(&qword_1001C52F0, v16, (uint64_t)&protocol conformance descriptor for Assembly);
  *(_QWORD *)(v5 + 152) = v15;
  v17 = sub_100005D40(&qword_1001C52F8);
  v18 = sub_100070EA4(v17, 112);
  *(_OWORD *)(v18 + 16) = xmmword_10017BD00;
  v19 = type metadata accessor for WidgetAssembly(0);
  sub_100097B00(v19);
  v20 = WidgetAssembly.init()();
  *(_QWORD *)(v18 + 56) = v19;
  *(_QWORD *)(v18 + 64) = sub_1000061B0(&qword_1001C5300, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetAssembly, (uint64_t)&protocol conformance descriptor for WidgetAssembly);
  *(_QWORD *)(v18 + 32) = v20;
  v21 = type metadata accessor for WeatherWidgetAssembly();
  v22 = sub_100070EA4(v21, 16);
  *(_QWORD *)(v18 + 96) = v21;
  *(_QWORD *)(v18 + 104) = sub_10011ED6C(&qword_1001C5308, v23, (uint64_t)&unk_1001802E8);
  *(_QWORD *)(v18 + 72) = v22;
  v24 = type metadata accessor for SingletonPool(0);
  sub_100097B00(v24);
  v25 = SingletonPool.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Container.Environment.normal(_:), v0);
  v26 = type metadata accessor for Container(0);
  sub_100097B00(v26);
  result = Container.init(bundleAssemblies:assemblies:singletonPool:environment:)(v5, v18, v25, v3);
  qword_1001DA018 = result;
  return result;
}

_QWORD *sub_10011E0A8()
{
  if (qword_1001BEEA0 != -1)
    swift_once(&qword_1001BEEA0, sub_10011DE10);
  return Container.resolver.getter(qword_1001C5248);
}

id sub_10011E0FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  if (qword_1001BEEA8 != -1)
    swift_once(&qword_1001BEEA8, sub_10011E0A8);
  sub_100112134((uint64_t)qword_1001C5248, (uint64_t)v5);
  v0 = v6;
  v1 = v7;
  sub_100022330(v5, v6);
  v2 = sub_100005D40(&qword_1001C3C88);
  dispatch thunk of ResolverType.resolve<A>(_:)(v4, v2, v2, v0, v1);
  sub_10011ECAC((uint64_t)v4);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v5);
  return objc_msgSend((id)objc_opt_self(AMSEphemeralDefaults), "setSuppressEngagement:", 1);
}

void sub_10011E1BC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;

  v91 = a1;
  v1 = sub_100005D40(&qword_1001C5278);
  v89 = *(_QWORD *)(v1 - 8);
  v90 = v1;
  sub_1000230F4();
  __chkstk_darwin(v2);
  sub_100023150();
  v98 = v3;
  sub_100023164();
  __chkstk_darwin(v4);
  v86 = (char *)&v76 - v5;
  v6 = sub_100005D40(&qword_1001C5280);
  v87 = *(_QWORD *)(v6 - 8);
  v88 = v6;
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_100023150();
  v97 = v8;
  sub_100023164();
  __chkstk_darwin(v9);
  v83 = (char *)&v76 - v10;
  v85 = sub_100005D40(&qword_1001C5288);
  v84 = *(_QWORD *)(v85 - 8);
  sub_1000230F4();
  __chkstk_darwin(v11);
  sub_100023150();
  v95 = v12;
  sub_100023164();
  __chkstk_darwin(v13);
  v92 = (char *)&v76 - v14;
  v82 = sub_100005D40(&qword_1001C5290);
  v96 = *(_QWORD *)(v82 - 8);
  sub_1000230F4();
  __chkstk_darwin(v15);
  sub_100023150();
  v93 = v16;
  sub_100023164();
  __chkstk_darwin(v17);
  v19 = (char *)&v76 - v18;
  v94 = sub_100005D40(&qword_1001C5298);
  v78 = *(_QWORD *)(v94 - 8);
  v20 = v78;
  v21 = __chkstk_darwin(v94);
  v23 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v76 - v24;
  v26 = type metadata accessor for WidgetNames(0);
  __chkstk_darwin(v26);
  sub_100093598();
  v28 = sub_10011ED60(v27, enum case for WidgetNames.Forecast(_:));
  v81 = WidgetNames.rawValue.getter(v28);
  v80 = v29;
  v30 = sub_10011ED54();
  v31 = sub_10011ED60(v30, enum case for WidgetNames.DataDense(_:));
  v32 = WidgetNames.rawValue.getter(v31);
  v34 = v33;
  sub_10011ED54();
  v101 = (_QWORD *)v32;
  v102 = v34;
  v35 = sub_10011EBF8();
  v77 = v25;
  static WidgetBundleBuilder.buildBlock<A>(_:)(&v101, &type metadata for DataDenseWidget, v35);
  swift_bridgeObjectRelease(v34);
  v37 = sub_10011ED60(v36, enum case for WidgetNames.DailyForecast(_:));
  v38 = WidgetNames.rawValue.getter(v37);
  v40 = v39;
  sub_10011ED54();
  v101 = (_QWORD *)v38;
  v102 = v40;
  v41 = sub_10011EC34();
  v76 = v19;
  static WidgetBundleBuilder.buildBlock<A>(_:)(&v101, &type metadata for DailyForecastWidget, v41);
  swift_bridgeObjectRelease(v40);
  v43 = sub_10011ED60(v42, enum case for WidgetNames.SunriseSunset(_:));
  v44 = WidgetNames.rawValue.getter(v43);
  v46 = v45;
  sub_10011ED54();
  v101 = (_QWORD *)v44;
  v102 = v46;
  v47 = sub_10011EC70();
  v48 = v92;
  static WidgetBundleBuilder.buildBlock<A>(_:)(&v101, &type metadata for SunriseSunsetWidget, v47);
  swift_bridgeObjectRelease(v46);
  v49 = v83;
  sub_10011E690();
  v50 = v86;
  sub_10011E8A4();
  v99 = v81;
  v100 = v80;
  v101 = &v99;
  v51 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v79 = v23;
  v51(v23, v25, v94);
  v102 = v23;
  v52 = v93;
  v53 = v82;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v93, v19, v82);
  v103 = v52;
  v54 = v84;
  v55 = v95;
  v56 = v48;
  v57 = v85;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v95, v56, v85);
  v104 = v55;
  v58 = v87;
  v59 = v97;
  v60 = v49;
  v61 = v49;
  v62 = v88;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v97, v60, v88);
  v105 = v59;
  v64 = v89;
  v63 = v90;
  v65 = v98;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v98, v50, v90);
  v106 = v65;
  sub_10011E9D8(&v101);
  v66 = *(void (**)(char *, uint64_t))(v64 + 8);
  v67 = v50;
  v68 = v63;
  v66(v67, v63);
  v69 = *(void (**)(char *, uint64_t))(v58 + 8);
  v70 = v62;
  v69(v61, v62);
  v71 = *(void (**)(char *, uint64_t))(v54 + 8);
  v72 = v57;
  v71(v92, v57);
  v73 = *(void (**)(char *, uint64_t))(v96 + 8);
  v73(v76, v53);
  v74 = *(void (**)(char *, uint64_t))(v78 + 8);
  v75 = v94;
  v74(v77, v94);
  v66(v98, v68);
  v69(v97, v70);
  v71(v95, v72);
  v73(v93, v53);
  v74(v79, v75);
  swift_bridgeObjectRelease(v100);
  sub_10001C770();
}

void sub_10011E690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[9];

  v1 = type metadata accessor for WidgetNames(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100093598();
  v4 = sub_10011ED48(v3, enum case for WidgetNames.TemperatureComplication(_:));
  v5 = WidgetNames.rawValue.getter(v4);
  v7 = v6;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  v30 = v5;
  v31 = v7;
  v32[0] = &v30;
  v9 = sub_10011ED48(v8, enum case for WidgetNames.LocationComplication(_:));
  WidgetNames.rawValue.getter(v9);
  v10 = sub_10011ED34();
  v28 = v5;
  v29 = v7;
  v32[1] = &v28;
  v11 = sub_10011ED48(v10, enum case for WidgetNames.AdaptiveConditionsComplication(_:));
  WidgetNames.rawValue.getter(v11);
  v12 = sub_10011ED34();
  v26 = v5;
  v27 = v7;
  v24 = 0xD000000000000026;
  v25 = 0x8000000100189740;
  v32[2] = &v26;
  v32[3] = &v24;
  v22 = 0xD000000000000028;
  v23 = 0x8000000100189770;
  v20 = 0xD000000000000029;
  v21 = 0x8000000100189270;
  v32[4] = &v22;
  v32[5] = &v20;
  v13 = sub_10011ED48(v12, enum case for WidgetNames.RainComplication(_:));
  WidgetNames.rawValue.getter(v13);
  sub_10011ED34();
  v18 = v5;
  v19 = v7;
  v16 = 0xD000000000000023;
  v17 = 0x8000000100187920;
  v32[6] = &v18;
  v32[7] = &v16;
  v14 = 0xD000000000000022;
  v15 = 0x80000001001897A0;
  v32[8] = &v14;
  sub_10011E8D4(v32);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v31);
  sub_10001C770();
}

uint64_t sub_10011E8A4()
{
  uint64_t v0;

  v0 = sub_100005D40(&qword_1001C52C0);
  return TupleWidget.init(_:)(v0, v0);
}

uint64_t sub_10011E8D4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[18];

  v1 = (_QWORD *)a1[1];
  v2 = *(_QWORD *)(*a1 + 8);
  v20[0] = *(_QWORD *)*a1;
  v20[1] = v2;
  v3 = v1[1];
  v20[2] = *v1;
  v20[3] = v3;
  v4 = (_QWORD *)a1[2];
  v5 = (_QWORD *)a1[3];
  v6 = v4[1];
  v20[4] = *v4;
  v20[5] = v6;
  v7 = v5[1];
  v20[6] = *v5;
  v20[7] = v7;
  v8 = (_QWORD *)a1[4];
  v9 = (_QWORD *)a1[5];
  v10 = v8[1];
  v20[8] = *v8;
  v20[9] = v10;
  v11 = v9[1];
  v20[10] = *v9;
  v20[11] = v11;
  v12 = (_QWORD *)a1[6];
  v13 = (_QWORD *)a1[7];
  v14 = v12[1];
  v20[12] = *v12;
  v20[13] = v14;
  v15 = v13[1];
  v20[14] = *v13;
  v20[15] = v15;
  v16 = (_QWORD *)a1[8];
  v17 = v16[1];
  v20[16] = *v16;
  v20[17] = v17;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  v18 = sub_100005D40(&qword_1001C52C8);
  return TupleWidget.init(_:)(v20, v18);
}

uint64_t sub_10011E9D8(_QWORD *a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v2 = (int *)sub_100005D40(&qword_1001C52B8);
  v3 = __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = a1[1];
  v7 = *(_QWORD *)(*a1 + 8);
  *v5 = *(_QWORD *)*a1;
  v5[1] = v7;
  v8 = (char *)v5 + *(int *)(v3 + 48);
  v9 = sub_100005D40(&qword_1001C5298);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, v6, v9);
  v10 = (char *)v5 + v2[16];
  v11 = a1[2];
  v12 = sub_100005D40(&qword_1001C5290);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = (char *)v5 + v2[20];
  v14 = a1[3];
  v15 = sub_100005D40(&qword_1001C5288);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = (char *)v5 + v2[24];
  v17 = a1[4];
  v18 = sub_100005D40(&qword_1001C5280);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = (char *)v5 + v2[28];
  v20 = a1[5];
  v21 = sub_100005D40(&qword_1001C5278);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  swift_bridgeObjectRetain(v7);
  return TupleWidget.init(_:)(v5, v2);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_10011EB9C();
  static WidgetBundle.main()();
  return 0;
}

unint64_t sub_10011EB9C()
{
  unint64_t result;

  result = qword_1001C5270;
  if (!qword_1001C5270)
  {
    result = swift_getWitnessTable(&unk_100182594, &type metadata for WeatherWidgetBundle);
    atomic_store(result, (unint64_t *)&qword_1001C5270);
  }
  return result;
}

ValueMetadata *type metadata accessor for WeatherWidgetBundle()
{
  return &type metadata for WeatherWidgetBundle;
}

uint64_t sub_10011EBE8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A0BF8, 1);
}

unint64_t sub_10011EBF8()
{
  unint64_t result;

  result = qword_1001C52A0;
  if (!qword_1001C52A0)
  {
    result = swift_getWitnessTable(&unk_10017EA68, &type metadata for DataDenseWidget);
    atomic_store(result, (unint64_t *)&qword_1001C52A0);
  }
  return result;
}

unint64_t sub_10011EC34()
{
  unint64_t result;

  result = qword_1001C52A8;
  if (!qword_1001C52A8)
  {
    result = swift_getWitnessTable(&unk_10017C0A4, &type metadata for DailyForecastWidget);
    atomic_store(result, (unint64_t *)&qword_1001C52A8);
  }
  return result;
}

unint64_t sub_10011EC70()
{
  unint64_t result;

  result = qword_1001C52B0;
  if (!qword_1001C52B0)
  {
    result = swift_getWitnessTable(&unk_10017DAC4, &type metadata for SunriseSunsetWidget);
    atomic_store(result, (unint64_t *)&qword_1001C52B0);
  }
  return result;
}

uint64_t sub_10011ECAC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001C52D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10011ECF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5310;
  if (!qword_1001C5310)
  {
    v1 = sub_100005DC4(&qword_1001C5318);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleWidget<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C5310);
  }
  return result;
}

uint64_t sub_10011ED34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_10011ED48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v2, a2, v3);
}

uint64_t sub_10011ED54()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t sub_10011ED60(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(v3, a2, v4);
}

uint64_t sub_10011ED6C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  return sub_1000061B0(a1, v3, a3);
}

uint64_t getEnumTagSinglePayload for WeatherDataNeeds(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;

  if (!a2)
  {
    v5 = -1;
    return v5 + 1;
  }
  if (a2 >= 0x7D)
  {
    if (a2 + 131 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 131) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 132;
    return v5 + 1;
  }
LABEL_17:
  v5 = ((*a1 >> 6) & 0xFFFFFF83 | (4 * ((*a1 >> 1) & 0x1F))) ^ 0x7F;
  if (v5 >= 0x7C)
    v5 = -1;
  return v5 + 1;
}

uint64_t storeEnumTagSinglePayload for WeatherDataNeeds(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 131 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 131) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x7D)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x7C)
    return ((uint64_t (*)(void))((char *)&loc_10011EE58 + 4 * byte_1001825E5[v4]))();
  *a1 = a2 - 125;
  return ((uint64_t (*)(void))((char *)sub_10011EE8C + 4 * byte_1001825E0[v4]))();
}

uint64_t sub_10011EE8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011EE94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10011EE9CLL);
  return result;
}

uint64_t sub_10011EEB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10011EEBCLL);
  *(_BYTE *)result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
  return result;
}

uint64_t sub_10011EEC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011EEC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011EED4(unsigned __int8 *a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *a1;
  v2 = (char)v1;
  v3 = v1 >> 6;
  v4 = (v1 | 0xFFFFFFFE) + 2 * (v1 >> 6);
  if (v2 >= 0)
    return v3;
  else
    return v4;
}

_BYTE *sub_10011EEF4(_BYTE *result)
{
  *result &= 0x3Fu;
  return result;
}

_BYTE *sub_10011EF04(_BYTE *result, unsigned int a2)
{
  int v2;

  if (a2 < 2)
    LOBYTE(v2) = *result & 1 | ((_BYTE)a2 << 6);
  else
    v2 = (a2 & 1 | (a2 >> 1 << 6)) + 64;
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for WeatherDataNeeds()
{
  return &type metadata for WeatherDataNeeds;
}

_QWORD *sub_10011EF44(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_100005D40(&qword_1001BF9B8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for ForecastEntry(0);
  v9 = __chkstk_darwin(v30);
  v29 = (uint64_t)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v28 = (uint64_t)&v24 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return &_swiftEmptyArrayStorage;
  v14 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v25 = a3;
  v26 = v14;
  v15 = a3 + v14;
  v16 = *(_QWORD *)(v11 + 72);
  swift_bridgeObjectRetain(a3);
  v17 = &_swiftEmptyArrayStorage;
  v27 = a1;
  while (1)
  {
    a1(v15);
    if (v3)
      break;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v8, 1, v30) == 1)
    {
      sub_100016904((uint64_t)v8, &qword_1001BF9B8);
    }
    else
    {
      v18 = v28;
      sub_100011868((uint64_t)v8, v28, type metadata accessor for ForecastEntry);
      sub_100011868(v18, v29, type metadata accessor for ForecastEntry);
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
      {
        sub_10006FC10(0, v17[2] + 1, 1, (uint64_t)v17);
        v17 = v21;
      }
      v20 = v17[2];
      v19 = v17[3];
      if (v20 >= v19 >> 1)
      {
        sub_10006FC10(v19 > 1, v20 + 1, 1, (uint64_t)v17);
        v17 = v22;
      }
      v17[2] = v20 + 1;
      sub_100011868(v29, (uint64_t)v17 + v26 + v20 * v16, type metadata accessor for ForecastEntry);
      a1 = v27;
    }
    v15 += v16;
    if (!--v13)
    {
      swift_bridgeObjectRelease(v25);
      return v17;
    }
  }
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v25);
  return v17;
}

void sub_10011F18C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;

  v0 = type metadata accessor for URL(0);
  sub_100093228(v0, qword_1001DA020);
  v1 = sub_100025184(v0, (uint64_t)qword_1001DA020);
  v2 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v3 = objc_msgSend(v2, "URLsForDirectory:inDomains:", 9, 1);

  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v0);
  if (*(_QWORD *)(v4 + 16))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v4+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 - 8) + 80)), v0);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    __break(1u);
  }
}

void sub_10011F268(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *i;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE v92[24];
  uint64_t v93[3];
  _QWORD v94[2];

  v88 = (char *)a1;
  v79 = a2;
  v82 = 0;
  type metadata accessor for TimelineReloadPolicy(0);
  sub_1000230F4();
  __chkstk_darwin(v2);
  sub_1000230E0();
  v81 = v3;
  v80 = sub_100122D7C();
  v89 = *(_QWORD *)(v80 - 8);
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_100023150();
  v90 = v5;
  sub_100023164();
  __chkstk_darwin(v6);
  v8 = (char *)&v77 - v7;
  v9 = sub_100005D40(&qword_1001C53C0);
  sub_1000230F4();
  __chkstk_darwin(v10);
  sub_1000230E0();
  v83 = v11;
  sub_100005D40(&qword_1001C53C8);
  sub_1000230F4();
  __chkstk_darwin(v12);
  sub_100049D00();
  v15 = (unint64_t *)(v13 - v14);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v77 - v17);
  sub_100005D40(&qword_1001C0E90);
  sub_1000230F4();
  __chkstk_darwin(v19);
  v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Location(0);
  v23 = *(_QWORD *)(v22 - 8);
  sub_1000230F4();
  __chkstk_darwin(v24);
  sub_1000230E0();
  v26 = v25;
  v27 = type metadata accessor for Date(0);
  v86 = *(_QWORD *)(v27 - 8);
  v87 = v27;
  sub_1000230F4();
  __chkstk_darwin(v28);
  sub_100023150();
  v84 = v29;
  sub_100023164();
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v77 - v32;
  v94[0] = &_swiftEmptyArrayStorage;
  Date.init()(v31);
  i = sub_10011F8CC();
  v34 = sub_10011F968();
  sub_1000168D8((uint64_t)v88, (uint64_t)v21, &qword_1001C0E90);
  v35 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v22);
  v88 = v33;
  if (v35 == 1)
  {
    sub_100016904((uint64_t)v21, &qword_1001C0E90);
  }
  else
  {
    v78 = v23;
    v36 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v26, v21, v22);
    __chkstk_darwin(v36);
    v37 = v34;
    *(&v77 - 2) = v26;
    *(&v77 - 1) = v38;
    swift_bridgeObjectRetain(v34);
    v39 = v82;
    v34 = sub_10011EF44((void (*)(_QWORD))sub_1001227F4, (uint64_t)(&v77 - 4), (uint64_t)v34);
    v82 = v39;
    v40 = swift_bridgeObjectRelease(v37);
    v41 = v34[2];
    (*(void (**)(uint64_t, uint64_t, __n128))(v78 + 8))(v26, v22, v40);
    if (v41)
    {
      swift_bridgeObjectRelease(v37);
      v33 = v88;
    }
    else
    {
      swift_bridgeObjectRelease(v34);
      v33 = v88;
      v34 = v37;
    }
  }
  v42 = 0;
  v43 = v34[2];
  v44 = (double)(uint64_t)i;
  for (i = v34; ; v34 = i)
  {
    if (v42 == v43)
    {
      v45 = 1;
      v42 = v43;
    }
    else
    {
      if (v42 >= v34[2])
      {
        __break(1u);
        goto LABEL_22;
      }
      sub_100122D64();
      v48 = v83 + *(int *)(v9 + 48);
      sub_10000F7C4(v46 + v47 * v42, v48, type metadata accessor for ForecastEntry);
      v49 = (uint64_t)v15 + *(int *)(v9 + 48);
      *v15 = v42;
      sub_100122DB4(v48, v49);
      v45 = 0;
      ++v42;
    }
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v15, v45, 1, v9);
    sub_1000168AC((uint64_t)v15, (uint64_t)v18, &qword_1001C53C8);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v9) == 1)
      break;
    v50 = *v18;
    sub_100122DB4((uint64_t)v18 + *(int *)(v9 + 48), (uint64_t)v8);
    v51 = v84;
    Date.addingTimeInterval(_:)(v44 * (double)v50);
    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 40))(v8, v51, v87);
    sub_10000F7C4((uint64_t)v8, v90, type metadata accessor for ForecastEntry);
    v52 = v94[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v94[0]) & 1) == 0)
    {
      sub_100122DA8(0, *(_QWORD *)(v52 + 16) + 1);
      v52 = v58;
    }
    v54 = *(_QWORD *)(v52 + 16);
    v53 = *(_QWORD *)(v52 + 24);
    if (v54 >= v53 >> 1)
    {
      sub_100122DA8(v53 > 1, v54 + 1);
      v52 = v59;
    }
    *(_QWORD *)(v52 + 16) = v54 + 1;
    sub_100122D64();
    sub_100122DB4(v57, v55 + v56 * v54);
    v94[0] = v52;
    sub_100011894((uint64_t)v8, type metadata accessor for ForecastEntry);
    v33 = v88;
  }
  swift_bridgeObjectRelease(i);
  if (qword_1001BEE70 == -1)
    goto LABEL_18;
LABEL_22:
  swift_once(&qword_1001BEE70, sub_100097B0C);
LABEL_18:
  v60 = sub_10002538C();
  v61 = sub_100025184(v60, (uint64_t)qword_1001D9F78);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.default.getter(v62);
  v64 = os_log_type_enabled(v62, v63);
  v65 = v80;
  if (v64)
  {
    v66 = (uint8_t *)sub_100025358(12);
    v67 = sub_100025358(32);
    v93[0] = v67;
    *(_DWORD *)v66 = 136315138;
    sub_100122D88((uint64_t)v94, (uint64_t)v92);
    v68 = v94[0];
    v69 = swift_bridgeObjectRetain(v94[0]);
    v70 = Array.description.getter(v69, v65);
    v72 = v71;
    swift_bridgeObjectRelease(v68);
    v91 = sub_10016EC84(v70, v72, v93);
    v33 = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v66 + 4);
    swift_bridgeObjectRelease(v72);
    sub_10002544C((void *)&_mh_execute_header, v62, v63, "Returning entries:%s", v66);
    swift_arrayDestroy(v67, 1);
    sub_10002534C(v67);
    sub_10002534C((uint64_t)v66);
  }

  sub_100122D88((uint64_t)v94, (uint64_t)v93);
  v73 = v94[0];
  v74 = swift_bridgeObjectRetain(v94[0]);
  v75 = v81;
  static TimelineReloadPolicy.atEnd.getter(v74);
  sub_10002EF14((unint64_t *)&qword_1001C53D0, type metadata accessor for ForecastEntry, (uint64_t)&unk_10017B31C);
  Timeline.init(entries:policy:)(v73, v75, v65, v76);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v33, v87);
  swift_bridgeObjectRelease(v94[0]);
}

id sub_10011F8CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  void *v4;
  NSString v5;
  id v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(v2);
  result = sub_1001223A0(v1, v2);
  if (result)
  {
    v4 = result;
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend(v4, "integerForKey:", v5);

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_10011F968()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  NSURL *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint8_t *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __n128 v63;
  void (*v64)(char *, uint64_t, __n128);
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __n128 v95;
  uint64_t v96;
  _QWORD *v97;
  void (*v98)(char *, uint64_t);
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  _QWORD *v112;
  void *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  __int128 v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  void (*v128)(char *, uint64_t, __n128);
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t (*v133)(char *, char *, uint64_t);
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  uint64_t v142;

  v0 = sub_100005D40(&qword_1001BF9B8);
  __chkstk_darwin(v0);
  v2 = (char *)&v114 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ForecastEntry(0);
  v118 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v121 = (uint64_t)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v125 = (uint64_t)&v114 - v6;
  v7 = type metadata accessor for String.Encoding(0);
  v130 = *(_QWORD *)(v7 - 8);
  v131 = v7;
  __chkstk_darwin(v7);
  v129 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001BFA28);
  __chkstk_darwin(v9);
  v135 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v117 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v132 = (char *)&v114 - v16;
  v17 = __chkstk_darwin(v15);
  v138 = (char *)&v114 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v114 - v19;
  if (qword_1001BEEB0 != -1)
    swift_once(&qword_1001BEEB0, sub_10011F18C);
  sub_100025184(v11, (uint64_t)qword_1001DA020);
  URL.appendingPathComponent(_:)(1869440356, 0xE400000000000000);
  v21 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v22);
  v24 = v23;
  v141 = 0;
  v25 = objc_msgSend(v21, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v23, 0, 0, &v141);

  v26 = v141;
  if (v25)
  {
    v136 = v12;
    v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v11);
    v28 = v26;

    if (qword_1001BEE70 != -1)
      swift_once(&qword_1001BEE70, sub_100097B0C);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100025184(v29, (uint64_t)qword_1001D9F78);
    v31 = swift_bridgeObjectRetain_n(v27, 2);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter(v32);
    v34 = os_log_type_enabled(v32, v33);
    v123 = v2;
    v122 = v3;
    v119 = v27;
    v134 = v30;
    v115 = v20;
    if (v34)
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = (void *)swift_slowAlloc(32, -1);
      v141 = v36;
      *(_DWORD *)v35 = 136315138;
      v37 = swift_bridgeObjectRetain(v27);
      v38 = Array.description.getter(v37, v11);
      v40 = v39;
      swift_bridgeObjectRelease(v119);
      v41 = v38;
      v27 = v119;
      v139 = sub_10016EC84(v41, v40, (uint64_t *)&v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v35 + 4);
      swift_bridgeObjectRelease_n(v27, 2);
      swift_bridgeObjectRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Found Content:%s", v35, 0xCu);
      swift_arrayDestroy(v36, 1);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v27, 2);
    }
    v46 = (uint64_t)v135;
    v47 = *(_QWORD *)(v27 + 16);
    if (v47)
    {
      v48 = v27 + ((*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80));
      v127 = *(_QWORD *)(v136 + 72);
      v49 = *(uint64_t (**)(char *, char *, uint64_t))(v136 + 16);
      v126 = &_swiftEmptyArrayStorage;
      *(_QWORD *)&v42 = 136315138;
      v124 = v42;
      v120 = (char *)&type metadata for Any + 8;
      v133 = v49;
      while (1)
      {
        v49((char *)v46, (char *)v48, v11);
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v46, 0, 1, v11);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v46, 1, v11) == 1)
          break;
        v137 = v47;
        v50 = v136;
        v51 = v138;
        (*(void (**)(char *, uint64_t, uint64_t))(v136 + 32))(v138, v46, v11);
        v52 = v132;
        v53 = v49(v132, v51, v11);
        v54 = Logger.logObject.getter(v53);
        v55 = static os_log_type_t.default.getter(v54);
        if (os_log_type_enabled(v54, v55))
        {
          v56 = swift_slowAlloc(12, -1);
          v57 = v11;
          v58 = (void *)swift_slowAlloc(32, -1);
          v141 = v58;
          *(_DWORD *)v56 = v124;
          sub_10002EF14(&qword_1001C53E0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v60 = dispatch thunk of CustomStringConvertible.description.getter(v57, v59);
          v62 = v61;
          *(_QWORD *)(v56 + 4) = sub_10016EC84(v60, v61, (uint64_t *)&v141);
          v63 = swift_bridgeObjectRelease(v62);
          v64 = *(void (**)(char *, uint64_t, __n128))(v50 + 8);
          v64(v52, v57, v63);
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Found URL:%s", (uint8_t *)v56, 0xCu);
          swift_arrayDestroy(v58, 1);
          v65 = v58;
          v11 = v57;
          swift_slowDealloc(v65, -1, -1);
          swift_slowDealloc(v56, -1, -1);
        }
        else
        {
          v64 = *(void (**)(char *, uint64_t, __n128))(v50 + 8);
          ((void (*)(char *, uint64_t))v64)(v52, v11);
        }

        v66 = URL.path.getter();
        v68 = v67;
        v69 = String.init(contentsOfFile:)(v66);
        v71 = v70;
        v72 = swift_bridgeObjectRelease(v68);
        v73 = v129;
        static String.Encoding.utf8.getter(v72);
        v74 = String.data(using:allowLossyConversion:)(v73, 0, v69, v71);
        v76 = v75;
        v77 = swift_bridgeObjectRelease(v71);
        (*(void (**)(char *, uint64_t, __n128))(v130 + 8))(v73, v131, v77);
        if (v76 >> 60 == 15)
        {
          ((void (*)(char *, uint64_t))v64)(v138, v11);
          v46 = (uint64_t)v135;
        }
        else
        {
          v128 = v64;
          v78 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
          v79 = JSONDecoder.init()();
          sub_10002EF14(&qword_1001C53D8, type metadata accessor for ForecastEntry, (uint64_t)&unk_10017B4BC);
          v80 = (uint64_t)v123;
          v81 = v74;
          v82 = v122;
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(v122, v81, v76, v122, v83);
          v116 = v81;
          swift_release(v79);
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v80, 0, 1, v82);
          sub_100011868(v80, v125, type metadata accessor for ForecastEntry);
          v84 = v117;
          v85 = v133(v117, v138, v11);
          v86 = Logger.logObject.getter(v85);
          v87 = static os_log_type_t.default.getter(v86);
          if (os_log_type_enabled(v86, v87))
          {
            v89 = swift_slowAlloc(12, -1);
            v90 = (void *)swift_slowAlloc(32, -1);
            v141 = v90;
            *(_DWORD *)v89 = v124;
            sub_10002EF14(&qword_1001C53E0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
            v92 = dispatch thunk of CustomStringConvertible.description.getter(v11, v91);
            v94 = v93;
            *(_QWORD *)(v89 + 4) = sub_10016EC84(v92, v93, (uint64_t *)&v141);
            v95 = swift_bridgeObjectRelease(v94);
            v128(v84, v11, v95);
            _os_log_impl((void *)&_mh_execute_header, v86, v87, "Succeeded decoding:%s", (uint8_t *)v89, 0xCu);
            swift_arrayDestroy(v90, 1);
            swift_slowDealloc(v90, -1, -1);
            swift_slowDealloc(v89, -1, -1);
          }
          else
          {
            ((void (*)(char *, uint64_t))v128)(v84, v11);
          }

          v46 = (uint64_t)v135;
          v96 = v116;
          sub_10000F7C4(v125, v121, type metadata accessor for ForecastEntry);
          if ((swift_isUniquelyReferenced_nonNull_native(v126) & 1) != 0)
          {
            v97 = v126;
          }
          else
          {
            sub_10006FC10(0, v126[2] + 1, 1, (uint64_t)v126);
            v97 = v102;
          }
          v98 = (void (*)(char *, uint64_t))v128;
          v100 = v97[2];
          v99 = v97[3];
          if (v100 >= v99 >> 1)
          {
            sub_10006FC10(v99 > 1, v100 + 1, 1, (uint64_t)v97);
            v97 = v103;
          }
          v97[2] = v100 + 1;
          v101 = (*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
          v126 = v97;
          sub_100011868(v121, (uint64_t)v97 + v101 + *(_QWORD *)(v118 + 72) * v100, type metadata accessor for ForecastEntry);
          sub_100122CD4(v96, v76);
          sub_100011894(v125, type metadata accessor for ForecastEntry);
          v98(v138, v11);
        }
        v48 += v127;
        v47 = v137 - 1;
        v49 = v133;
        if (v137 == 1)
          goto LABEL_31;
      }
    }
    else
    {
      v126 = &_swiftEmptyArrayStorage;
LABEL_31:
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v46, 1, 1, v11);
    }
    v104 = v136;
    v105 = swift_bridgeObjectRelease(v119);
    (*(void (**)(char *, uint64_t, __n128))(v104 + 8))(v115, v11, v105);
    return v126;
  }
  else
  {
    v43 = v141;
    v44 = _convertNSErrorToError(_:)(v26);

    swift_willThrow(v45);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
    if (qword_1001BEE70 != -1)
      swift_once(&qword_1001BEE70, sub_100097B0C);
    v107 = type metadata accessor for Logger(0);
    sub_100025184(v107, (uint64_t)qword_1001D9F78);
    swift_errorRetain(v44);
    v108 = swift_errorRetain(v44);
    v109 = Logger.logObject.getter(v108);
    v110 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v109, v110))
    {
      v111 = (uint8_t *)swift_slowAlloc(12, -1);
      v112 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v111 = 138543362;
      swift_errorRetain(v44);
      v113 = (void *)_swift_stdlib_bridgeErrorToNSError(v44);
      v141 = v113;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v111 + 4);
      *v112 = v113;
      swift_errorRelease(v44);
      swift_errorRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "WidgetDemo failed to decode entries. error=%{public}@", v111, 0xCu);
      sub_100005D40(&qword_1001C3188);
      swift_arrayDestroy(v112, 1);
      swift_slowDealloc(v112, -1, -1);
      swift_slowDealloc(v111, -1, -1);

      swift_errorRelease(v44);
    }
    else
    {
      swift_errorRelease(v44);
      swift_errorRelease(v44);
      swift_errorRelease(v44);

    }
    return &_swiftEmptyArrayStorage;
  }
}

uint64_t sub_100120604@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  char v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a3;
  v35 = a2;
  v36 = a4;
  v5 = type metadata accessor for WeatherDataViewModel(0);
  __chkstk_darwin(v5);
  v34 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001BF9B0);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(a1 + v16[7], (uint64_t)v9, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v9, v7) == 1)
  {
    sub_100011868((uint64_t)v9, (uint64_t)v12, type metadata accessor for WeatherDataViewModel);
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, v17, 1, v5);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v5) == 1)
  {
    sub_100016904((uint64_t)v12, &qword_1001BF9B0);
LABEL_8:
    v18 = 1;
    v19 = v36;
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v19, v18, 1, (uint64_t)v16);
  }
  if (swift_getEnumCaseMultiPayload(v12, v5))
  {
    sub_100011894((uint64_t)v12, type metadata accessor for WeatherDataViewModel);
    goto LABEL_8;
  }
  sub_100011868((uint64_t)v12, (uint64_t)v15, type metadata accessor for AggregateWeatherViewModel);
  v22 = Location.coordinate.getter(v21);
  v24 = v23;
  v26 = Location.coordinate.getter(v25);
  v28 = static CLLocationCoordinate2D.== infix(_:_:)(v22, v24, v26, v27);
  v19 = v36;
  if ((v28 & 1) != 0)
  {
    v29 = Date.timeIntervalSince(_:)(a1);
    v30 = v34;
    sub_100120950(v34, v29);
    sub_100011894((uint64_t)v15, type metadata accessor for AggregateWeatherViewModel);
    swift_storeEnumTagMultiPayload(v30, v5, 0);
    v31 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v19, a1, v31);
    sub_1000168D8(a1 + v16[5], v19 + v16[5], &qword_1001BFA20);
    sub_10000F7C4(a1 + v16[6], v19 + v16[6], type metadata accessor for WidgetContext);
    v32 = v19 + v16[7];
    sub_10000F7C4(v30, v32, type metadata accessor for WeatherDataViewModel);
    swift_storeEnumTagMultiPayload(v32, v7, 1);
    sub_100011894(v30, type metadata accessor for WeatherDataViewModel);
    v18 = 0;
  }
  else
  {
    sub_100011894((uint64_t)v15, type metadata accessor for AggregateWeatherViewModel);
    v18 = 1;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v19, v18, 1, (uint64_t)v16);
}

void sub_100120950(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(void);
  uint64_t v39;
  int *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  char *v122;
  int64_t v123;
  _QWORD *v124;
  _BYTE *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  _BYTE *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int64_t v163;
  void (*v164)(void);
  uint64_t v165;
  char *v166;
  _QWORD *v167;

  v3 = v2;
  v149 = a1;
  v5 = type metadata accessor for EventViewModel(0);
  v142 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v158 = (uint64_t)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v159 = (char *)&v139 - v8;
  v9 = sub_100005D40(&qword_1001BFA40);
  __chkstk_darwin(v9);
  v148 = (uint64_t)&v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005D40(&qword_1001BFA28);
  __chkstk_darwin(v11);
  v147 = (uint64_t)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for DailyForecastViewModel(0);
  v141 = *(_QWORD *)(v156 - 8);
  v13 = __chkstk_darwin(v156);
  v157 = (char *)&v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v166 = (char *)&v139 - v15;
  v16 = sub_100005D40(&qword_1001BFA38);
  __chkstk_darwin(v16);
  v151 = (uint64_t)&v139 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005D40(&qword_1001BFA30);
  __chkstk_darwin(v18);
  v150 = (uint64_t)&v139 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (int *)type metadata accessor for HourlyForecastViewModel(0);
  v21 = *((_QWORD *)v20 - 1);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v139 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v139 - v25;
  v27 = type metadata accessor for CurrentObservationViewModel(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v139 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Location(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v139 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for UUID(0);
  __chkstk_darwin(v34);
  v36 = (char *)&v139 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(void (**)(void))(v37 + 16);
  v144 = v36;
  v164 = v38;
  v165 = v39;
  v38();
  v40 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  v41 = v3 + v40[5];
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v145 = v33;
  v42(v33, v41, v30);
  v43 = v3 + v40[6];
  v146 = v29;
  sub_10000F7C4(v43, (uint64_t)v29, type metadata accessor for CurrentObservationViewModel);
  v152 = v40;
  v153 = v3;
  v44 = *(_QWORD *)(v3 + v40[7]);
  v45 = *(_QWORD *)(v44 + 16);
  v46 = &_swiftEmptyArrayStorage;
  if (v45)
  {
    v167 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v44);
    sub_100122878(0, v45, 0);
    v47 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    v143 = v44;
    v155 = v47;
    v48 = v44 + v47;
    v154 = *(_QWORD *)(v21 + 72);
    do
    {
      v163 = v45;
      sub_10000F7C4(v48, (uint64_t)v24, type metadata accessor for HourlyForecastViewModel);
      ((void (*)(char *, char *, uint64_t))v164)(v26, v24, v165);
      Date.addingTimeInterval(_:)(a2);
      v49 = v20[6];
      v50 = &v24[v49];
      v51 = &v26[v49];
      v52 = sub_100005D40(&qword_1001BF090);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v51, v50, v52);
      v53 = &v24[v20[7]];
      v54 = *(_QWORD *)v53;
      v55 = *((_QWORD *)v53 + 1);
      v56 = &v24[v20[8]];
      v57 = *(_QWORD *)v56;
      v58 = *((_QWORD *)v56 + 1);
      v161 = v54;
      v162 = v57;
      sub_10000F7C4((uint64_t)&v24[v20[9]], (uint64_t)&v26[v20[9]], type metadata accessor for ConditionViewModel);
      v59 = *(_QWORD *)&v24[v20[10]];
      v60 = &v24[v20[11]];
      v61 = *((_QWORD *)v60 + 1);
      v160 = *(_QWORD *)v60;
      v62 = v20[12];
      v63 = &v24[v62];
      v64 = &v26[v62];
      v65 = type metadata accessor for Precipitation(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v64, v63, v65);
      v66 = v20[13];
      v67 = &v24[v66];
      v68 = &v26[v66];
      v69 = type metadata accessor for Wind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v68, v67, v69);
      v70 = &v26[v20[7]];
      *(_QWORD *)v70 = v161;
      *((_QWORD *)v70 + 1) = v55;
      v71 = &v26[v20[8]];
      *(_QWORD *)v71 = v162;
      *((_QWORD *)v71 + 1) = v58;
      *(_QWORD *)&v26[v20[10]] = v59;
      v72 = &v26[v20[11]];
      *(_QWORD *)v72 = v160;
      *((_QWORD *)v72 + 1) = v61;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v61);
      sub_100011894((uint64_t)v24, type metadata accessor for HourlyForecastViewModel);
      v46 = v167;
      if ((swift_isUniquelyReferenced_nonNull_native(v167) & 1) == 0)
      {
        sub_100122878(0, v46[2] + 1, 1);
        v46 = v167;
      }
      v74 = v46[2];
      v73 = v46[3];
      if (v74 >= v73 >> 1)
      {
        sub_100122878(v73 > 1, v74 + 1, 1);
        v46 = v167;
      }
      v46[2] = v74 + 1;
      v75 = v154;
      sub_100011868((uint64_t)v26, (uint64_t)v46 + v155 + v74 * v154, type metadata accessor for HourlyForecastViewModel);
      v48 += v75;
      v45 = v163 - 1;
    }
    while (v163 != 1);
    swift_bridgeObjectRelease(v143);
  }
  v143 = (uint64_t)v46;
  v76 = *(_QWORD *)(v153 + v152[8]);
  v77 = *(_QWORD *)(v76 + 16);
  v78 = &_swiftEmptyArrayStorage;
  v79 = (uint64_t)v166;
  if (v77)
  {
    v167 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v76);
    sub_1001228AC(0, v77, 0);
    v80 = (*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
    v140 = v76;
    v155 = v80;
    v81 = v76 + v80;
    v154 = *(_QWORD *)(v141 + 72);
    v82 = (int *)v156;
    v83 = (uint64_t)v157;
    do
    {
      v163 = v77;
      sub_10000F7C4(v81, v83, type metadata accessor for DailyForecastViewModel);
      ((void (*)(uint64_t, uint64_t, uint64_t))v164)(v79, v83, v165);
      Date.addingTimeInterval(_:)(a2);
      v84 = v82[6];
      v85 = v83 + v84;
      v86 = v79 + v84;
      v87 = sub_100005D40(&qword_1001BF090);
      v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 16);
      v88(v86, v85, v87);
      v88((uint64_t)&v166[v82[7]], v83 + v82[7], v87);
      sub_10000F7C4(v83 + v82[8], (uint64_t)&v166[v82[8]], type metadata accessor for ConditionViewModel);
      v89 = v82[9];
      v90 = v83 + v89;
      v91 = &v166[v89];
      v92 = type metadata accessor for Precipitation(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v91, v90, v92);
      v93 = *(_QWORD *)(v83 + v82[10]);
      v94 = (uint64_t *)(v83 + v82[11]);
      v95 = *v94;
      v96 = v94[1];
      v97 = v82[13];
      v98 = (uint64_t *)(v83 + v82[12]);
      v99 = v98[1];
      v160 = *v98;
      v100 = *(_QWORD *)(v83 + v97 + 8);
      v161 = *(_QWORD *)(v83 + v97);
      v162 = v95;
      v101 = v82[15];
      v102 = (uint64_t *)(v83 + v82[14]);
      v103 = v83 + v101;
      v104 = &v166[v101];
      v105 = *v102;
      v106 = v102[1];
      v107 = type metadata accessor for TemperatureScaleConfiguration(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v104, v103, v107);
      sub_1000168D8(v83 + v82[16], (uint64_t)&v166[v82[16]], &qword_1001BF0A8);
      sub_1000168D8(v83 + v82[17], (uint64_t)&v166[v82[17]], &qword_1001BF0B0);
      v108 = v82[18];
      v109 = v83 + v108;
      v110 = &v166[v108];
      v111 = type metadata accessor for UVIndex(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(v110, v109, v111);
      v112 = *(_QWORD *)(v83 + v82[19]);
      *(_QWORD *)&v166[v82[10]] = v93;
      v113 = &v166[v82[11]];
      *(_QWORD *)v113 = v162;
      *((_QWORD *)v113 + 1) = v96;
      v114 = &v166[v82[12]];
      *(_QWORD *)v114 = v160;
      *((_QWORD *)v114 + 1) = v99;
      v115 = &v166[v82[13]];
      *(_QWORD *)v115 = v161;
      *((_QWORD *)v115 + 1) = v100;
      v116 = &v166[v82[14]];
      *(_QWORD *)v116 = v105;
      *((_QWORD *)v116 + 1) = v106;
      v79 = (uint64_t)v166;
      *(_QWORD *)&v166[v82[19]] = v112;
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v99);
      swift_bridgeObjectRetain(v100);
      swift_bridgeObjectRetain(v106);
      sub_100011894(v83, type metadata accessor for DailyForecastViewModel);
      v78 = v167;
      if ((swift_isUniquelyReferenced_nonNull_native(v167) & 1) == 0)
      {
        sub_1001228AC(0, v78[2] + 1, 1);
        v78 = v167;
      }
      v118 = v78[2];
      v117 = v78[3];
      if (v118 >= v117 >> 1)
      {
        sub_1001228AC(v117 > 1, v118 + 1, 1);
        v78 = v167;
      }
      v78[2] = v118 + 1;
      v119 = v154;
      sub_100011868(v79, (uint64_t)v78 + v155 + v118 * v154, type metadata accessor for DailyForecastViewModel);
      v81 += v119;
      v77 = v163 - 1;
    }
    while (v163 != 1);
    swift_bridgeObjectRelease(v140);
  }
  v121 = v152;
  v120 = v153;
  sub_1000168D8(v153 + v152[9], v150, &qword_1001BFA30);
  sub_1000168D8(v120 + v121[10], v151, &qword_1001BFA38);
  v122 = *(char **)(v120 + v121[11]);
  v123 = *((_QWORD *)v122 + 2);
  v124 = &_swiftEmptyArrayStorage;
  v125 = v159;
  if (v123)
  {
    v167 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v122);
    sub_100122948(0, v123, 0);
    v126 = (*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80);
    v166 = v122;
    v127 = (uint64_t)&v122[v126];
    v128 = *(_QWORD *)(v142 + 72);
    v124 = v167;
    do
    {
      v129 = v158;
      sub_10000F7C4(v127, v158, type metadata accessor for EventViewModel);
      sub_100121D44(v125, a2);
      sub_100011894(v129, type metadata accessor for EventViewModel);
      if ((swift_isUniquelyReferenced_nonNull_native(v124) & 1) == 0)
      {
        sub_100122948(0, v124[2] + 1, 1);
        v124 = v167;
      }
      v131 = v124[2];
      v130 = v124[3];
      if (v131 >= v130 >> 1)
      {
        sub_100122948(v130 > 1, v131 + 1, 1);
        v124 = v167;
      }
      v124[2] = v131 + 1;
      v132 = (uint64_t)v124 + v126 + v131 * v128;
      v125 = v159;
      sub_100011868((uint64_t)v159, v132, type metadata accessor for EventViewModel);
      v127 += v128;
      --v123;
    }
    while (v123);
    swift_bridgeObjectRelease(v166);
  }
  v133 = v153 + v152[12];
  v134 = *(_QWORD *)v133;
  v135 = *(_WORD *)(v133 + 8);
  v136 = v147;
  sub_1000168D8(v153 + v152[13], v147, &qword_1001BFA28);
  v137 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  v138 = v148;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v148, 1, 1, v137);
  sub_10008E8E0((uint64_t)v144, (uint64_t)v145, (uint64_t)v146, v143, (uint64_t)v78, v150, v151, (uint64_t)v124, v149, v134, v135, v136, v138);
}

void sub_100121460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  __n128 v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v104 = a2;
  v105 = a3;
  v91 = type metadata accessor for String.Encoding(0);
  v90 = *(_QWORD *)(v91 - 8);
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_100049D00();
  v7 = v5 - v6;
  __chkstk_darwin(v8);
  v92 = (char *)v84 - v9;
  v10 = type metadata accessor for URL(0);
  v103 = *(_QWORD *)(v10 - 8);
  sub_1000230F4();
  __chkstk_darwin(v11);
  sub_100023150();
  v88 = v12;
  sub_100023164();
  __chkstk_darwin(v13);
  v106 = (char *)v84 - v14;
  sub_100023164();
  __chkstk_darwin(v15);
  v108 = (char *)v84 - v16;
  v102 = sub_100122D7C();
  v96 = *(_QWORD *)(v102 - 8);
  sub_1000230F4();
  __chkstk_darwin(v17);
  v19 = (char *)v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005D40(&qword_1001C53C0);
  sub_1000230F4();
  __chkstk_darwin(v21);
  sub_1000230E0();
  v95 = v22;
  sub_100005D40(&qword_1001C53C8);
  sub_1000230F4();
  __chkstk_darwin(v23);
  sub_100049D00();
  v26 = (unint64_t *)(v24 - v25);
  __chkstk_darwin(v27);
  v29 = (_QWORD *)((char *)v84 - v28);
  if ((sub_100121CAC() & 1) == 0)
    return;
  v30 = *(_QWORD *)(a1 + 16);
  v94 = a1;
  v31 = swift_bridgeObjectRetain(a1);
  v32 = 0;
  v110 = 0;
  v31.n128_u64[0] = 136446210;
  v85 = v31;
  v84[1] = (char *)&type metadata for Any + 8;
  v31.n128_u64[0] = 138543362;
  v93 = v31;
  v89 = v7;
  v107 = v10;
  v97 = v26;
  v98 = v20;
  v100 = v30;
  v101 = v29;
  v99 = v19;
  while (v32 == v30)
  {
    v33 = 1;
    v34 = v30;
LABEL_7:
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v26, v33, 1, v20);
    sub_1000168AC((uint64_t)v26, (uint64_t)v29, &qword_1001C53C8);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, v20) == 1)
    {
      swift_bridgeObjectRelease(v94);
      return;
    }
    v109 = v34;
    v39 = *v29;
    sub_100011868((uint64_t)v29 + *(int *)(v20 + 48), (uint64_t)v19, type metadata accessor for ForecastEntry);
    if (qword_1001BEEB0 != -1)
      swift_once(&qword_1001BEEB0, sub_10011F18C);
    v40 = sub_100025184(v10, (uint64_t)qword_1001DA020);
    v41 = v103;
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v103 + 16);
    v43 = v106;
    v42(v106, v40, v10);
    v112 = v104;
    v113 = v105;
    swift_bridgeObjectRetain(v105);
    v44._countAndFlagsBits = 95;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    v111 = v39;
    v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v45);
    sub_1000287D8();
    v46._countAndFlagsBits = 0x6E6F736A2ELL;
    v46._object = (void *)0xE500000000000000;
    String.append(_:)(v46);
    v47 = v108;
    URL.appendingPathComponent(_:)(v112, v113);
    sub_1000287D8();
    v48 = *(void (**)(char *, uint64_t))(v41 + 8);
    v48(v43, v10);
    v49 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
    JSONEncoder.init()();
    sub_10002EF14(&qword_1001C5400, type metadata accessor for ForecastEntry, (uint64_t)&unk_10017B494);
    v50 = v110;
    v52 = dispatch thunk of JSONEncoder.encode<A>(_:)(v19, v102, v51);
    if (v50)
    {
      sub_1000D6DA4();
      v110 = 0;
      v19 = v99;
      if (qword_1001BEE70 != -1)
        swift_once(&qword_1001BEE70, sub_100097B0C);
      v64 = sub_10002538C();
      sub_100025184(v64, (uint64_t)qword_1001D9F78);
      sub_100122DBC();
      v65 = sub_100122DBC();
      v66 = Logger.logObject.getter(v65);
      v67 = static os_log_type_t.error.getter();
      v68 = os_log_type_enabled(v66, v67);
      v30 = v100;
      v29 = v101;
      if (v68)
      {
        v69 = sub_100025358(12);
        v70 = (_QWORD *)sub_100025358(8);
        *(_DWORD *)v69 = v93.n128_u32[0];
        sub_100122DBC();
        v71 = _swift_stdlib_bridgeErrorToNSError(v50);
        *(_QWORD *)(v69 + 4) = v71;
        *v70 = v71;
        sub_100122D5C();
        sub_100122D5C();
        sub_10002544C((void *)&_mh_execute_header, v66, v67, "Failed writing entry to disk. error=%{public}@", (uint8_t *)v69);
        sub_100005D40(&qword_1001C3188);
        swift_arrayDestroy(v70, 1);
        sub_10002534C((uint64_t)v70);
        sub_10002534C(v69);

      }
      else
      {

        sub_100122D5C();
        sub_100122D5C();
      }
      v26 = v97;
      v20 = v98;
      v32 = v109;
      sub_100122D5C();
      v10 = v107;
      v48(v108, v107);
      sub_100011894((uint64_t)v19, type metadata accessor for ForecastEntry);
    }
    else
    {
      v55 = v52;
      v56 = v53;
      v57 = (void (*)(uint64_t, uint64_t))v48;
      v58 = v92;
      static String.Encoding.utf8.getter(v54);
      v59 = String.init(data:encoding:)(v55, v56, v58);
      if (!v60)
        goto LABEL_29;
      v112 = v59;
      v113 = v60;
      v62 = v89;
      static String.Encoding.utf8.getter(v61);
      v63 = sub_10001692C();
      StringProtocol.write(to:atomically:encoding:)(v47, 1, v62, &type metadata for String, v63);
      v110 = 0;
      sub_100122D2C();
      sub_1000287D8();
      if (qword_1001BEE70 != -1)
        swift_once(&qword_1001BEE70, sub_100097B0C);
      v72 = sub_10002538C();
      sub_100025184(v72, (uint64_t)qword_1001D9F78);
      v73 = v88;
      v10 = v107;
      v74 = ((uint64_t (*)(uint64_t, char *, uint64_t))v42)(v88, v47, v107);
      v75 = Logger.logObject.getter(v74);
      v76 = static os_log_type_t.default.getter(v75);
      if (os_log_type_enabled(v75, v76))
      {
        v77 = sub_100025358(12);
        v87 = sub_100025358(32);
        v112 = v87;
        *(_DWORD *)v77 = v85.n128_u32[0];
        v86 = v75;
        v78 = v106;
        v42(v106, v73, v107);
        v79 = String.init<A>(reflecting:)(v78, v107);
        *(_QWORD *)(v77 + 4) = sub_10016EC84(v79, v80, &v112);
        sub_1000287D8();
        v57(v73, v107);
        v81 = v86;
        sub_10002544C((void *)&_mh_execute_header, v86, v76, "Demo entries to disk: %{public}s.", (uint8_t *)v77);
        v82 = v87;
        swift_arrayDestroy(v87, 1);
        sub_10002534C(v82);
        v83 = v77;
        v10 = v107;
        sub_10002534C(v83);
        sub_100122D50();

        sub_1000D6DA4();
      }
      else
      {
        sub_100122D50();

        sub_1000D6DA4();
        v57(v73, v10);
      }
      v57((uint64_t)v47, v10);
      v19 = v99;
      sub_100011894((uint64_t)v99, type metadata accessor for ForecastEntry);
      v26 = v97;
      v20 = v98;
      v30 = v100;
      v29 = v101;
      v32 = v109;
    }
  }
  if (v32 < v30)
  {
    v109 = v32 + 1;
    v35 = v94
        + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80))
        + *(_QWORD *)(v96 + 72) * v32;
    v36 = v32;
    v37 = v95 + *(int *)(v20 + 48);
    sub_10000F7C4(v35, v37, type metadata accessor for ForecastEntry);
    v38 = (uint64_t)v26 + *(int *)(v20 + 48);
    *v26 = v36;
    sub_100011868(v37, v38, type metadata accessor for ForecastEntry);
    v33 = 0;
    v34 = v109;
    goto LABEL_7;
  }
  __break(1u);
LABEL_29:
  __break(1u);
}

id sub_100121C38()
{
  return sub_100122D48();
}

uint64_t sub_100121C50()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for DemoManager()
{
  return objc_opt_self(_TtC13WeatherWidget11DemoManager);
}

id sub_100121C94()
{
  return sub_100122D48();
}

id sub_100121CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  void *v4;
  NSString v5;
  id v6;

  sub_100122DC4();
  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(v1);
  result = sub_1001223A0(v2, v1);
  if (result)
  {
    v4 = result;
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend(v4, "BOOLForKey:", v5);

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100121D44(_BYTE *a1@<X8>, double a2@<D0>)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v25;
  int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int v56;
  int v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;

  v3 = v2;
  v6 = sub_100005D40(&qword_1001C02A0);
  v7 = __chkstk_darwin(v6);
  v59 = (uint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v55 = (char *)&v50 - v9;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005D40(&qword_1001BF0A0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v62 = (uint64_t)&v50 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v50 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v50 - v23;
  v25 = *v3;
  v56 = v3[1];
  v57 = v25;
  v26 = (int *)type metadata accessor for EventViewModel(0);
  sub_1000168D8((uint64_t)&v3[v26[6]], (uint64_t)v22, &qword_1001BF0A0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v22, 1, v10) == 1)
  {
    sub_100016904((uint64_t)v22, &qword_1001BF0A0);
    v27 = 1;
  }
  else
  {
    Date.addingTimeInterval(_:)(a2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v22, v10);
    v27 = 0;
  }
  v58 = v24;
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, v27, 1, v10);
  sub_1000168D8((uint64_t)&v3[v26[7]], (uint64_t)v17, &qword_1001BF0A0);
  v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v17, 1, v10);
  v29 = v62;
  v61 = v11;
  if (v28 == 1)
  {
    sub_100016904((uint64_t)v17, &qword_1001BF0A0);
    v30 = 1;
  }
  else
  {
    Date.addingTimeInterval(_:)(a2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    v30 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v29, v30, 1, v10);
  v60 = v13;
  Date.addingTimeInterval(_:)(a2);
  v31 = &v3[v26[9]];
  v32 = *(_QWORD *)v31;
  v33 = *((_QWORD *)v31 + 1);
  v34 = &v3[v26[10]];
  v35 = *(_QWORD *)v34;
  v36 = *((_QWORD *)v34 + 1);
  v52 = v32;
  v53 = v35;
  v37 = v26[12];
  v38 = &v3[v26[11]];
  v39 = *((_QWORD *)v38 + 1);
  v51 = *(_QWORD *)v38;
  v40 = *(_QWORD *)&v3[v37];
  v41 = v59;
  sub_1000168D8((uint64_t)&v3[v26[13]], v59, &qword_1001C02A0);
  v42 = type metadata accessor for PrecipitationShift(0);
  v43 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v41, 1, v42);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v33);
  v54 = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v39);
  if (v43 == 1)
  {
    sub_100016904(v41, &qword_1001C02A0);
    v44 = 1;
    v45 = (uint64_t)v55;
  }
  else
  {
    v45 = (uint64_t)v55;
    sub_100122180(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
    v44 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v45, v44, 1, v42);
  *a1 = v57;
  a1[1] = v56;
  sub_1000168AC((uint64_t)v58, (uint64_t)&a1[v26[6]], &qword_1001BF0A0);
  sub_1000168AC(v62, (uint64_t)&a1[v26[7]], &qword_1001BF0A0);
  (*(void (**)(_BYTE *, char *, uint64_t))(v61 + 32))(&a1[v26[8]], v60, v10);
  v46 = &a1[v26[9]];
  *v46 = v52;
  v46[1] = v33;
  v47 = &a1[v26[10]];
  v48 = v54;
  *v47 = v53;
  v47[1] = v48;
  v49 = &a1[v26[11]];
  *v49 = v51;
  v49[1] = v39;
  *(_QWORD *)&a1[v26[12]] = v40;
  sub_1000168AC(v45, (uint64_t)&a1[v26[13]], &qword_1001C02A0);
}

uint64_t sub_100122180(double a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v2 = type metadata accessor for PrecipitationShift.Kind(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001BF0A0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v24 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v24 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v24 - v16;
  PrecipitationShift.date.getter(v15);
  v18 = type metadata accessor for Date(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v18) == 1)
  {
    sub_100016904((uint64_t)v14, &qword_1001BF0A0);
    v19 = 1;
  }
  else
  {
    Date.addingTimeInterval(_:)(a1);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v14, v18);
    v19 = 0;
  }
  v20 = _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, v19, 1, v18);
  PrecipitationShift.nextDate.getter(v20);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v8, 1, v18) == 1)
  {
    sub_100016904((uint64_t)v8, &qword_1001BF0A0);
    v21 = 1;
  }
  else
  {
    Date.addingTimeInterval(_:)(a1);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v8, v18);
    v21 = 0;
  }
  v22 = _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v11, v21, 1, v18);
  PrecipitationShift.kind.getter(v22);
  return PrecipitationShift.init(date:nextDate:kind:)(v17, v11, v4);
}

id sub_1001223A0(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSString v4;
  id v5;

  if (a2)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v4 = 0;
  }
  v5 = objc_msgSend(v2, "initWithSuiteName:", v4);

  return v5;
}

uint64_t sub_100122400(uint64_t a1)
{
  return sub_100122424(a1);
}

uint64_t sub_10012240C(uint64_t a1)
{
  return sub_100122424(a1);
}

uint64_t sub_100122418(uint64_t a1)
{
  return sub_100122424(a1);
}

uint64_t sub_100122424(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  if (a1 < 0)
  {
    sub_100070CB0();
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17);
    __break(1u);
  }
  else
  {
    sub_100122DC4();
    if (v3)
    {
      v4 = v1(0);
      v5 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v2, v4);
      v5[2] = v2;
    }
    else
    {
      v5 = &_swiftEmptyArrayStorage;
    }
    v1(0);
    sub_100122D94();
    return (uint64_t)v5;
  }
  return result;
}

void *sub_1001224D0(char *__src, uint64_t a2, char *__dst)
{
  void *result;

  if (a2 < 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst)
      return memcpy(__dst, __src, 8 * a2);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

void *sub_100122598(char *__src, uint64_t a2, char *__dst)
{
  void *result;

  if (a2 < 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[16 * a2] <= __src || &__src[16 * a2] <= __dst)
      return memcpy(__dst, __src, 16 * a2);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100122660(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100122678(a1, a2, a3);
}

uint64_t sub_10012266C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100122678(a1, a2, a3);
}

uint64_t sub_100122678(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  if (a2 < 0)
  {
    sub_100070CB0();
    v14 = "UnsafeMutablePointer.initialize with negative count";
    v15 = 51;
  }
  else
  {
    sub_100122DC4();
    v7 = *(_QWORD *)(*(_QWORD *)(v6(0) - 8) + 72) * v3;
    v8 = a3 + v7;
    v9 = v4 + v7;
    if (v8 <= v4 || v9 <= a3)
      return swift_arrayInitWithCopy(a3);
    sub_100070CB0();
    v14 = "UnsafeMutablePointer.initialize overlapping range";
    v15 = 49;
  }
  result = sub_100070D64((uint64_t)"Fatal error", 11, 2, (uint64_t)v14, v15, v12, (uint64_t)"Swift/UnsafePointer.swift", v13, v16, v17, v18);
  __break(1u);
  return result;
}

void *sub_100122748(char *__src, uint64_t a2, char *__dst)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100070CB0();
    v7 = "UnsafeMutablePointer.initialize with negative count";
    v8 = 51;
  }
  else
  {
    if (&__dst[40 * a2] <= __src || &__src[40 * a2] <= __dst)
      return memcpy(__dst, __src, 40 * a2);
    sub_100070CB0();
    v7 = "UnsafeMutablePointer.initialize overlapping range";
    v8 = 49;
  }
  result = (void *)sub_100070D64((uint64_t)"Fatal error", 11, 2, (uint64_t)v7, v8, v5, (uint64_t)"Swift/UnsafePointer.swift", v6, v9, v10, v11);
  __break(1u);
  return result;
}

uint64_t sub_1001227F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100120604(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

size_t sub_10012280C(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_100122B74(a1, a2, a3, *v3, &qword_1001C53E8, (uint64_t (*)(_QWORD))&type metadata accessor for MinuteCondition, (void (*)(uint64_t, uint64_t, unint64_t))sub_100070318);
  *v3 = result;
  return result;
}

char *sub_100122840(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100122998(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_10012285C(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100122A78(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

size_t sub_100122878(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_100122B74(a1, a2, a3, *v3, &qword_1001C0F50, type metadata accessor for HourlyForecastViewModel, (void (*)(uint64_t, uint64_t, unint64_t))sub_1000704E4);
  *v3 = result;
  return result;
}

size_t sub_1001228AC(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_100122B74(a1, a2, a3, *v3, &qword_1001C0F48, type metadata accessor for DailyForecastViewModel, (void (*)(uint64_t, uint64_t, unint64_t))sub_1000704F0);
  *v3 = result;
  return result;
}

size_t sub_1001228E0(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_100122B74(a1, a2, a3, *v3, &qword_1001C53F0, (uint64_t (*)(_QWORD))&type metadata accessor for HourWeather, (void (*)(uint64_t, uint64_t, unint64_t))sub_1000704FC);
  *v3 = result;
  return result;
}

size_t sub_100122914(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_100122B74(a1, a2, a3, *v3, &qword_1001C53F8, (uint64_t (*)(_QWORD))&type metadata accessor for DayWeather, (void (*)(uint64_t, uint64_t, unint64_t))sub_100070508);
  *v3 = result;
  return result;
}

size_t sub_100122948(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_100122B74(a1, a2, a3, *v3, &qword_1001C0F38, type metadata accessor for EventViewModel, (void (*)(uint64_t, uint64_t, unint64_t))sub_100070324);
  *v3 = result;
  return result;
}

size_t sub_10012297C(size_t a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_100122B74(a1, a2, a3, a4, &qword_1001C53E8, (uint64_t (*)(_QWORD))&type metadata accessor for MinuteCondition, (void (*)(uint64_t, uint64_t, unint64_t))sub_100070318);
}

char *sub_100122998(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005D40(&qword_1001C5408);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1000703B0(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001224D0(v14, v8, v13);
  }
  swift_release(a4);
  return v11;
}

char *sub_100122A78(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005D40(&qword_1001C5410);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100070408(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100122598(v14, v8, v13);
  }
  swift_release(a4);
  return v11;
}

size_t sub_100122B58(size_t a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_100122B74(a1, a2, a3, a4, &qword_1001C0F50, type metadata accessor for HourlyForecastViewModel, (void (*)(uint64_t, uint64_t, unint64_t))sub_1000704E4);
}

size_t sub_100122B74(size_t result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD), void (*a7)(uint64_t, uint64_t, unint64_t))
{
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v10 = result;
  if ((a3 & 1) != 0)
  {
    v11 = *(_QWORD *)(a4 + 24);
    v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v12 = a2;
    }
  }
  else
  {
    v12 = a2;
  }
  v13 = *(_QWORD *)(a4 + 16);
  if (v12 <= v13)
    v14 = *(_QWORD *)(a4 + 16);
  else
    v14 = v12;
  if (!v14)
  {
    v20 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v15 = sub_100005D40(a5);
  v16 = *(_QWORD *)(a6(0) - 8);
  v17 = *(_QWORD *)(v16 + 72);
  v18 = *(unsigned __int8 *)(v16 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = (_QWORD *)swift_allocObject(v15, v19 + v17 * v14, v18 | 7);
  result = j__malloc_size(v20);
  if (!v17)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v19 == 0x8000000000000000 && v17 == -1)
    goto LABEL_24;
  v20[2] = v13;
  v20[3] = 2 * ((uint64_t)(result - v19) / v17);
LABEL_19:
  a6(0);
  sub_100122D94();
  v23 = (unint64_t)v20 + v22;
  v24 = a4 + v22;
  if ((v10 & 1) != 0)
  {
    a7(v24, v13, v23);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100122678(v24, v13, v23);
  }
  swift_release(a4);
  return (size_t)v20;
}

size_t sub_100122CB8(size_t a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_100122B74(a1, a2, a3, a4, &qword_1001C53F0, (uint64_t (*)(_QWORD))&type metadata accessor for HourWeather, (void (*)(uint64_t, uint64_t, unint64_t))sub_1000704FC);
}

uint64_t sub_100122CD4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100122CE8(result, a2);
  return result;
}

uint64_t sub_100122CE8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100122D2C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 296) + 8))(v0, *(_QWORD *)(v1 - 288));
}

id sub_100122D48()
{
  return sub_100121CAC();
}

uint64_t sub_100122D50()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100122CE8(v1, v0);
}

uint64_t sub_100122D5C()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_100122D7C()
{
  return type metadata accessor for ForecastEntry(0);
}

uint64_t sub_100122D88(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0, 0);
}

void sub_100122DA8(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_10006FC10(a1, a2, 1, v2);
}

void sub_100122DB4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100011868(a1, a2, v2);
}

uint64_t sub_100122DBC()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

ValueMetadata *type metadata accessor for ErrorViewAttributes()
{
  return &type metadata for ErrorViewAttributes;
}

uint64_t sub_100122DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100122DEC);
}

uint64_t sub_100122DEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v17;

  sub_100005D40(&qword_1001BFA48);
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
  }
  sub_100005D40(&qword_1001C0288);
  sub_10001C6C0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_13:
    v8 = a1 + v11;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
  }
  sub_100005D40(&qword_1001BF0D0);
  sub_10001C6C0();
  if (v12)
  {
    v7 = v13;
    v11 = a3[7];
    goto LABEL_13;
  }
  sub_10008307C();
  sub_10001C6C0();
  if (v14)
  {
    v7 = v15;
    v11 = a3[8];
    goto LABEL_13;
  }
  v17 = *(_QWORD *)(a1 + a3[9]);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  return (v17 + 1);
}

uint64_t sub_100122EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100122EC8);
}

void sub_100122EC8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  sub_100005D40(&qword_1001BFA48);
  sub_10001C6D0();
  if (v10)
  {
    v8 = v7;
    v9 = a1;
  }
  else
  {
    sub_100005D40(&qword_1001C0288);
    sub_10001C6D0();
    if (v10)
    {
      v8 = v11;
      v12 = a4[5];
    }
    else
    {
      sub_100005D40(&qword_1001BF0D0);
      sub_10001C6D0();
      if (v13)
      {
        v8 = v14;
        v12 = a4[7];
      }
      else
      {
        sub_10008307C();
        sub_10001C6D0();
        if (!v15)
        {
          *(_QWORD *)(a1 + a4[9]) = (a2 - 1);
          return;
        }
        v8 = v16;
        v12 = a4[8];
      }
    }
    v9 = a1 + v12;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v9, a2, a2, v8);
}

uint64_t type metadata accessor for DailyForecastContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C5470;
  if (!qword_1001C5470)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DailyForecastContentView);
  return result;
}

void sub_100122FCC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[7];

  sub_10001C028(319, (unint64_t *)&qword_1001BFAB8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001C028(319, (unint64_t *)&unk_1001C1058, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = "\t";
      sub_10001C028(319, (unint64_t *)&qword_1001BF140, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for ForecastEntry(319);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = &unk_100182688;
          v10[6] = &unk_1001826A0;
          swift_initStructMetadata(a1, 256, 7, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_1001230D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A0CD8, 1);
}

void sub_1001230E4(__n128 *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40[3];
  unsigned __int8 v41;

  v2 = v1;
  v4 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v4);
  v39.n128_u64[0] = (unint64_t)v37.n128_u64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v6);
  v8 = (__n128 *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001BF9B0);
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)type metadata accessor for DailyForecastContentView(0);
  v19 = v2 + v18[8];
  v20 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v19 + *(int *)(v20 + 28), (uint64_t)v11, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    sub_100011868((uint64_t)v11, (uint64_t)v14, type metadata accessor for WeatherDataViewModel);
    v21 = type metadata accessor for WeatherDataViewModel(0);
    v22 = (uint64_t)v14;
    v23 = 0;
  }
  else
  {
    v21 = type metadata accessor for WeatherDataViewModel(0);
    v22 = (uint64_t)v14;
    v23 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v22, v23, 1, v21);
  type metadata accessor for WeatherDataViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v21) == 1)
  {
    sub_100016904((uint64_t)v14, &qword_1001BF9B0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload(v14, v21))
    {
      sub_100011868((uint64_t)v14, (uint64_t)v17, type metadata accessor for AggregateWeatherViewModel);
      sub_1000C54B0(v8);
      v28 = v39.n128_u64[0];
      sub_1000C54E0(v39.n128_u64[0]);
      v29 = v18[10];
      v30 = v2 + v18[6];
      v31 = *(_QWORD *)v30;
      v32 = *(_BYTE *)(v30 + 8);
      v33 = *(_BYTE *)(v2 + v29);
      sub_10001961C(*(_QWORD *)v30, v32);
      v34 = sub_1000C5274(v31, v32);
      sub_100019A78(v31, v32);
      v35 = type metadata accessor for HourlyBannerViewAttributesFactory(0);
      swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
      v36 = sub_100132A00((uint64_t)v8, v28, v33, v34 & 1);
      sub_100132670((uint64_t)v17, v40);
      v38 = v40[1];
      v39 = v40[0];
      v37 = v40[2];
      v24 = v41;
      swift_release(v36);
      sub_100011894((uint64_t)v17, type metadata accessor for AggregateWeatherViewModel);
      v27 = v37;
      v26 = v38;
      v25 = v39;
      goto LABEL_10;
    }
    sub_100011894((uint64_t)v14, type metadata accessor for WeatherDataViewModel);
  }
  v24 = 0;
  v25 = 0uLL;
  v26 = 0uLL;
  v27 = 0uLL;
LABEL_10:
  *a1 = v25;
  a1[1] = v26;
  a1[2] = v27;
  a1[3].n128_u8[0] = v24;
}

uint64_t sub_100123430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v35 = a1;
  v36 = a2;
  v4 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v4);
  v34 = (_DWORD *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v6);
  v8 = (_DWORD *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001BF9B0);
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DailyForecastContentView(0);
  v19 = v3 + *(int *)(v18 + 32);
  v20 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v19 + *(int *)(v20 + 28), (uint64_t)v11, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    sub_100011868((uint64_t)v11, (uint64_t)v14, type metadata accessor for WeatherDataViewModel);
    v21 = type metadata accessor for WeatherDataViewModel(0);
    v22 = (uint64_t)v14;
    v23 = 0;
  }
  else
  {
    v21 = type metadata accessor for WeatherDataViewModel(0);
    v22 = (uint64_t)v14;
    v23 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v22, v23, 1, v21);
  type metadata accessor for WeatherDataViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v21) == 1)
  {
    sub_100016904((uint64_t)v14, &qword_1001BF9B0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload(v14, v21))
    {
      sub_100011868((uint64_t)v14, (uint64_t)v17, type metadata accessor for AggregateWeatherViewModel);
      sub_1000C54B0(v8);
      sub_1000C54E0(v34);
      v26 = v3 + *(int *)(v18 + 24);
      v27 = *(_QWORD *)v26;
      v28 = *(_BYTE *)(v26 + 8);
      sub_10001961C(*(_QWORD *)v26, v28);
      sub_1000C5274(v27, v28);
      sub_100019A78(v27, v28);
      v29 = type metadata accessor for DailyViewAttributesFactory(0);
      swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
      v30 = sub_10015FBD4();
      v25 = v36;
      sub_10015E560((uint64_t)v17, v35, v19 + *(int *)(v20 + 24), 1, v36);
      swift_release(v30);
      sub_100011894((uint64_t)v17, type metadata accessor for AggregateWeatherViewModel);
      v24 = 0;
      goto LABEL_10;
    }
    sub_100011894((uint64_t)v14, type metadata accessor for WeatherDataViewModel);
  }
  v24 = 1;
  v25 = v36;
LABEL_10:
  v31 = type metadata accessor for DailyViewAttributes(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v25, v24, 1, v31);
}

uint64_t sub_10012377C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;

  v2 = v1;
  v39 = a1;
  v3 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v3);
  v38 = (_DWORD *)((char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v5);
  v37 = (_DWORD *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001BF9B0);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for DailyForecastContentView(0);
  v17 = v2 + v16[8];
  v18 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v17 + *(int *)(v18 + 28), (uint64_t)v9, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v9, v7) == 1)
  {
    sub_100011868((uint64_t)v9, (uint64_t)v12, type metadata accessor for WeatherDataViewModel);
    v19 = type metadata accessor for WeatherDataViewModel(0);
    v20 = (uint64_t)v12;
    v21 = 0;
  }
  else
  {
    v19 = type metadata accessor for WeatherDataViewModel(0);
    v20 = (uint64_t)v12;
    v21 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v20, v21, 1, v19);
  type metadata accessor for WeatherDataViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v19) == 1)
  {
    sub_100016904((uint64_t)v12, &qword_1001BF9B0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload(v12, v19))
    {
      sub_100011868((uint64_t)v12, (uint64_t)v15, type metadata accessor for AggregateWeatherViewModel);
      v24 = v37;
      sub_1000C54B0(v37);
      v25 = v38;
      sub_1000C54E0(v38);
      v26 = v2 + v16[6];
      v27 = *(_QWORD *)v26;
      v28 = *(_BYTE *)(v26 + 8);
      v29 = *(_BYTE *)(v2 + v16[10]);
      sub_10001961C(*(_QWORD *)v26, v28);
      v30 = sub_1000C5274(v27, v28);
      sub_100019A78(v27, v28);
      v31 = type metadata accessor for CurrentObservationViewAttributesFactory(0);
      swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
      v32 = sub_1000D7DC8((uint64_t)v24, (uint64_t)v25, v29, v30 & 1);
      v33 = v17 + *(int *)(v18 + 24);
      v23 = v39;
      sub_1000D6DB8((uint64_t)v15, v33, (uint64_t)&v15[*(int *)(v13 + 20)], *(_QWORD *)v33, *(_QWORD *)(v33 + 8), *(unsigned __int8 *)(v33 + 50), *(unsigned __int8 *)(v33 + 51), 1, v39, 1, 1u);
      swift_release(v32);
      sub_100011894((uint64_t)v15, type metadata accessor for AggregateWeatherViewModel);
      v22 = 0;
      goto LABEL_10;
    }
    sub_100011894((uint64_t)v12, type metadata accessor for WeatherDataViewModel);
  }
  v22 = 1;
  v23 = v39;
LABEL_10:
  v34 = type metadata accessor for CurrentObservationViewAttributes(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v23, v22, 1, v34);
}

void *sub_100123AF4@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _BYTE __src[80];

  v2 = v1;
  v25 = a1;
  v3 = type metadata accessor for Font.Context(0);
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  __chkstk_darwin(v3);
  v5 = (_DWORD *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v6);
  v8 = (_DWORD *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v9);
  v11 = (_DWORD *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100123CC8(v1);
  sub_1000C54B0(v11);
  v13 = type metadata accessor for DailyForecastContentView(0);
  sub_1000C54E0(v8);
  v14 = v1 + *(int *)(v13 + 24);
  v15 = *(_QWORD *)v14;
  v16 = *(_BYTE *)(v14 + 8);
  v17 = *(_BYTE *)(v2 + *(int *)(v13 + 40));
  sub_10001961C(*(_QWORD *)v14, v16);
  v18 = sub_1000C5274(v15, v16);
  sub_100019A78(v15, v16);
  v19 = type metadata accessor for ErrorViewAttributesFactory(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = sub_100093708((uint64_t)v11, (uint64_t)v8, v17, v18 & 1);
  sub_1000C5030(v5);
  sub_1000D91F4(v12, (uint64_t)v5, (uint64_t)__src);
  swift_release(v20);
  (*(void (**)(_DWORD *, uint64_t))(v23 + 8))(v5, v24);
  return memcpy(v25, __src, 0x50uLL);
}

uint64_t sub_100123CC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v2);
  v4 = (unsigned __int8 *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1 + *(int *)(type metadata accessor for DailyForecastContentView(0) + 32);
  v6 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v5 + *(int *)(v6 + 28), (uint64_t)v4, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v4, v2) != 1)
    return *v4;
  sub_100011894((uint64_t)v4, type metadata accessor for ForecastEntry.Model);
  return 3;
}

void sub_100123D8C(uint64_t a1@<X8>)
{
  const void *v1;
  const void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = type metadata accessor for ErrorView(0);
  sub_100029068();
  __chkstk_darwin(v5);
  sub_10002325C();
  v8 = v7 - v6;
  memcpy((void *)(v7 - v6), v2, 0x50uLL);
  v9 = (_QWORD *)(v8 + *(int *)(v4 + 20));
  *v9 = swift_getKeyPath(&unk_100182708);
  v10 = sub_100005D40(&qword_1001BF490);
  swift_storeEnumTagMultiPayload(v9, v10, 0);
  v11 = sub_1000C5634((uint64_t)v2);
  LOBYTE(v2) = static Edge.Set.all.getter(v11);
  sub_10000F7C4(v8, a1, type metadata accessor for ErrorView);
  v12 = a1 + *(int *)(sub_100005D40(&qword_1001C14F8) + 36);
  *(_BYTE *)v12 = (_BYTE)v2;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_BYTE *)(v12 + 40) = 1;
  sub_100011894(v8, type metadata accessor for ErrorView);
}

void sub_100123E8C(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE v3[80];

  memcpy(v3, v1, sizeof(v3));
  sub_100123D8C(a1);
}

void sub_100123ECC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40[3];
  uint64_t v41;
  uint64_t v42;
  __n128 v43[3];
  __int128 v44;
  char v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[7];
  _QWORD v52[2];

  v41 = sub_100005D40(&qword_1001C5580);
  __chkstk_darwin(v41);
  v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100005D40(&qword_1001C1318);
  __chkstk_darwin(v42);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001C1320);
  __chkstk_darwin(v10);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DailyViewAttributes(0);
  __chkstk_darwin(v13);
  v40[0] = (uint64_t)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005D40(&qword_1001C1288);
  __chkstk_darwin(v15);
  v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CurrentObservationViewAttributes(0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[1] = a1;
  GeometryProxy.size.getter(v19);
  sub_1001230E4(v43);
  sub_1000168AC((uint64_t)v43, (uint64_t)v51, &qword_1001C12E8);
  v22 = v51[0];
  if (v51[0])
  {
    v40[2] = a3;
    v52[0] = v51[0];
    sub_100081500(v52);
    sub_1000813D0((uint64_t *)v43);
    v23 = *(_QWORD *)(v22 + 16);
    sub_100081528(v52);
    sub_10012377C((uint64_t)v17);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v17, 1, v18) == 1)
    {
      v24 = &qword_1001C1288;
      v25 = (uint64_t)v17;
    }
    else
    {
      sub_100011868((uint64_t)v17, (uint64_t)v21, type metadata accessor for CurrentObservationViewAttributes);
      sub_100123430(v23, (uint64_t)v12);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v13) != 1)
      {
        v34 = v40[0];
        sub_100011868((uint64_t)v12, v40[0], type metadata accessor for DailyViewAttributes);
        *(_QWORD *)v9 = static VerticalAlignment.center.getter(v35);
        *((_QWORD *)v9 + 1) = 0;
        v9[16] = 0;
        v36 = sub_100005D40(&qword_1001C1330);
        sub_100124304((uint64_t)v21, v34, a2, (uint64_t)&v9[*(int *)(v36 + 44)]);
        sub_1000168D8((uint64_t)v9, (uint64_t)v7, &qword_1001C1318);
        swift_storeEnumTagMultiPayload(v7, v41, 0);
        sub_100016A54(&qword_1001C1328, &qword_1001C1318);
        v38 = v37;
        v39 = sub_1001267B8();
        _ConditionalContent<>.init(storage:)(v7, v42, &type metadata for DailyForecastContentView.GenericErrorView, v38, v39);
        sub_100016904((uint64_t)v9, &qword_1001C1318);
        sub_100011894(v34, type metadata accessor for DailyViewAttributes);
        sub_100011894((uint64_t)v21, type metadata accessor for CurrentObservationViewAttributes);
        return;
      }
      sub_100011894((uint64_t)v21, type metadata accessor for CurrentObservationViewAttributes);
      v24 = &qword_1001C1320;
      v25 = (uint64_t)v12;
    }
    sub_100016904(v25, v24);
  }
  sub_100123AF4(&v44);
  v26 = v45;
  v27 = v46;
  v28 = v49;
  v29 = v50;
  *(_OWORD *)v7 = v44;
  v7[16] = v26;
  *((_QWORD *)v7 + 3) = v27;
  v30 = v48;
  *((_OWORD *)v7 + 2) = v47;
  *((_OWORD *)v7 + 3) = v30;
  *((_QWORD *)v7 + 8) = v28;
  *((_QWORD *)v7 + 9) = v29;
  swift_storeEnumTagMultiPayload(v7, v41, 1);
  sub_100016A54(&qword_1001C1328, &qword_1001C1318);
  v32 = v31;
  v33 = sub_1001267B8();
  _ConditionalContent<>.init(storage:)(v7, v42, &type metadata for DailyForecastContentView.GenericErrorView, v32, v33);
}

void sub_100124304(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD v66[3];
  uint64_t v67;
  char v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[32];
  __int128 v74;

  *(_QWORD *)&v59 = a3;
  v61 = a2;
  v63 = a4;
  v60 = type metadata accessor for DailyView(0);
  __chkstk_darwin(v60);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100005D40(&qword_1001C1338);
  v7 = __chkstk_darwin(v62);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v55 - v10;
  v12 = type metadata accessor for CurrentObservationView(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005D40(&qword_1001C1340);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v55 - v19;
  sub_10000F7C4(a1, (uint64_t)v14, type metadata accessor for CurrentObservationViewAttributes);
  v22 = GeometryProxy.size.getter(v21) * 0.5 + -16.0;
  GeometryProxy.size.getter(v23);
  v25 = v24;
  v27 = static Alignment.leading.getter(v26);
  _FrameLayout.init(width:height:alignment:)(v66, *(_QWORD *)&v22, 0, v25, 0, v27, v28);
  sub_10000F7C4((uint64_t)v14, (uint64_t)v18, type metadata accessor for CurrentObservationView);
  v29 = &v18[*(int *)(v15 + 36)];
  v30 = v66[1];
  *(_OWORD *)v29 = v66[0];
  *((_OWORD *)v29 + 1) = v30;
  *((_OWORD *)v29 + 2) = v66[2];
  sub_100011894((uint64_t)v14, type metadata accessor for CurrentObservationView);
  sub_1000168AC((uint64_t)v18, (uint64_t)v20, &qword_1001C1340);
  v32 = static Alignment.center.getter(v31);
  _FrameLayout.init(width:height:alignment:)(&v67, 0x4030000000000000, 0, 0, 1, v32, v33);
  v34 = v67;
  LOBYTE(v15) = v68;
  v58 = v69;
  v57 = v70;
  v56 = v71;
  v55 = v72;
  v35 = (uint64_t *)(v59 + *(int *)(type metadata accessor for DailyForecastContentView(0) + 36));
  v37 = *v35;
  v36 = v35[1];
  v64 = v37;
  v65 = v36;
  v38 = sub_100005D40(&qword_1001C10E8);
  State.projectedValue.getter(v73, v38);
  v39 = *(_QWORD *)v73;
  v59 = *(_OWORD *)&v73[8];
  sub_10000F7C4(v61, (uint64_t)v6, type metadata accessor for DailyViewAttributes);
  v40 = &v6[*(int *)(v60 + 20)];
  *(_QWORD *)v40 = v39;
  *(_OWORD *)(v40 + 8) = v59;
  v42 = GeometryProxy.size.getter(v41) * 0.5;
  GeometryProxy.size.getter(v43);
  v45 = v44;
  v47 = static Alignment.leading.getter(v46);
  _FrameLayout.init(width:height:alignment:)(v73, *(_QWORD *)&v42, 0, v45, 0, v47, v48);
  sub_10000F7C4((uint64_t)v6, (uint64_t)v9, type metadata accessor for DailyView);
  v49 = &v9[*(int *)(v62 + 36)];
  v50 = *(_OWORD *)&v73[16];
  *(_OWORD *)v49 = *(_OWORD *)v73;
  *((_OWORD *)v49 + 1) = v50;
  *((_OWORD *)v49 + 2) = v74;
  sub_100011894((uint64_t)v6, type metadata accessor for DailyView);
  sub_1000168AC((uint64_t)v9, (uint64_t)v11, &qword_1001C1338);
  sub_1000168D8((uint64_t)v20, (uint64_t)v18, &qword_1001C1340);
  sub_1000168D8((uint64_t)v11, (uint64_t)v9, &qword_1001C1338);
  v51 = v63;
  sub_1000168D8((uint64_t)v18, v63, &qword_1001C1340);
  v52 = sub_100005D40(&qword_1001C1348);
  v53 = v51 + *(int *)(v52 + 48);
  *(_QWORD *)v53 = 0;
  *(_BYTE *)(v53 + 8) = 1;
  *(_QWORD *)(v53 + 16) = v34;
  *(_BYTE *)(v53 + 24) = v15;
  *(_QWORD *)(v53 + 32) = v58;
  *(_BYTE *)(v53 + 40) = v57;
  v54 = v55;
  *(_QWORD *)(v53 + 48) = v56;
  *(_QWORD *)(v53 + 56) = v54;
  sub_1000168D8((uint64_t)v9, v51 + *(int *)(v52 + 64), &qword_1001C1338);
  sub_100016904((uint64_t)v11, &qword_1001C1338);
  sub_100016904((uint64_t)v20, &qword_1001C1340);
  sub_100016904((uint64_t)v9, &qword_1001C1338);
  sub_100016904((uint64_t)v18, &qword_1001C1340);
}

void sub_10012479C()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v0, "bounds");

}

void sub_10012480C()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v0, "bounds");

}

void sub_10012487C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43[3];
  __int128 v44;
  char v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[7];
  _QWORD v52[2];

  v41 = sub_100005D40(&qword_1001C5518);
  __chkstk_darwin(v41);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100005D40(&qword_1001C5520);
  __chkstk_darwin(v42);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D40(&qword_1001C1320);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DailyViewAttributes(0);
  __chkstk_darwin(v11);
  v39 = (uint64_t)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005D40(&qword_1001C1288);
  __chkstk_darwin(v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CurrentObservationViewAttributes(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  GeometryProxy.size.getter(v17);
  sub_1001230E4(v43);
  sub_1000168AC((uint64_t)v43, (uint64_t)v51, &qword_1001C12E8);
  v20 = v51[0];
  if (v51[0])
  {
    v40 = a2;
    v52[0] = v51[0];
    sub_100081500(v52);
    sub_1000813D0((uint64_t *)v43);
    v21 = *(_QWORD *)(v20 + 16);
    sub_100081528(v52);
    sub_10012377C((uint64_t)v15);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v16) == 1)
    {
      v22 = &qword_1001C1288;
      v23 = (uint64_t)v15;
    }
    else
    {
      sub_100011868((uint64_t)v15, (uint64_t)v19, type metadata accessor for CurrentObservationViewAttributes);
      sub_100123430(v21, (uint64_t)v10);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11) != 1)
      {
        v32 = v39;
        sub_100011868((uint64_t)v10, v39, type metadata accessor for DailyViewAttributes);
        *(_QWORD *)v7 = static HorizontalAlignment.center.getter(v33);
        *((_QWORD *)v7 + 1) = 0;
        v7[16] = 1;
        v34 = sub_100005D40(&qword_1001C5538);
        sub_100124CA8((uint64_t)v19, a1, v32, (uint64_t)&v7[*(int *)(v34 + 44)]);
        sub_1000168D8((uint64_t)v7, (uint64_t)v5, &qword_1001C5520);
        swift_storeEnumTagMultiPayload(v5, v41, 0);
        sub_100016A54(&qword_1001C5528, &qword_1001C5520);
        v36 = v35;
        v37 = sub_1001267B8();
        _ConditionalContent<>.init(storage:)(v5, v42, &type metadata for DailyForecastContentView.GenericErrorView, v36, v37);
        sub_100016904((uint64_t)v7, &qword_1001C5520);
        sub_100011894(v32, type metadata accessor for DailyViewAttributes);
        sub_100011894((uint64_t)v19, type metadata accessor for CurrentObservationViewAttributes);
        return;
      }
      sub_100011894((uint64_t)v19, type metadata accessor for CurrentObservationViewAttributes);
      v22 = &qword_1001C1320;
      v23 = (uint64_t)v10;
    }
    sub_100016904(v23, v22);
  }
  sub_100123AF4(&v44);
  v24 = v45;
  v25 = v46;
  v26 = v49;
  v27 = v50;
  *(_OWORD *)v5 = v44;
  v5[16] = v24;
  *((_QWORD *)v5 + 3) = v25;
  v28 = v48;
  *((_OWORD *)v5 + 2) = v47;
  *((_OWORD *)v5 + 3) = v28;
  *((_QWORD *)v5 + 8) = v26;
  *((_QWORD *)v5 + 9) = v27;
  swift_storeEnumTagMultiPayload(v5, v41, 1);
  sub_100016A54(&qword_1001C5528, &qword_1001C5520);
  v30 = v29;
  v31 = sub_1001267B8();
  _ConditionalContent<>.init(storage:)(v5, v42, &type metadata for DailyForecastContentView.GenericErrorView, v30, v31);
}

void sub_100124CA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;

  v64 = a3;
  v65 = a4;
  *(_QWORD *)&v58 = a2;
  v62 = type metadata accessor for DailyView(0);
  v5 = __chkstk_darwin(v62);
  v63 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v61 = (uint64_t)&v54 - v7;
  v57 = type metadata accessor for AccessibilityChildBehavior(0);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001C5540);
  __chkstk_darwin(v10);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005D40(&qword_1001C5548);
  v55 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100005D40(&qword_1001C5550);
  v16 = __chkstk_darwin(v60);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v54 - v20;
  v22 = __chkstk_darwin(v19);
  v59 = (uint64_t)&v54 - v23;
  *(_QWORD *)v12 = static HorizontalAlignment.center.getter(v22);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v24 = sub_100005D40(&qword_1001C5558);
  sub_100125190(a1, (uint64_t)&v12[*(int *)(v24 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v25);
  sub_100016A54(&qword_1001C5560, &qword_1001C5540);
  v27 = v26;
  View.accessibilityElement(children:)(v9, v10, v26);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v9, v57);
  sub_100016904((uint64_t)v12, &qword_1001C5540);
  v70 = v10;
  v71 = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v70, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityRespondsToUserInteraction(_:)(1, v13, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v15, v13);
  v29 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
  v30 = swift_allocObject(v29, 48, 7);
  *(_OWORD *)(v30 + 16) = xmmword_10017BD10;
  v31 = type metadata accessor for CurrentObservationViewAttributes(0);
  *(_QWORD *)(v30 + 32) = Location.name.getter(v31);
  *(_QWORD *)(v30 + 40) = v32;
  v33 = sub_10001692C();
  ModifiedContent<>.accessibilityInputLabels<A>(_:)(v30, v60, &type metadata for String, v33);
  swift_bridgeObjectRelease(v30);
  sub_100016904((uint64_t)v18, &qword_1001C5550);
  v34 = v59;
  sub_1000168AC((uint64_t)v21, v59, &qword_1001C5550);
  v35 = v58;
  sub_10012480C();
  v37 = v36;
  v39 = static Alignment.center.getter(v38);
  _FrameLayout.init(width:height:alignment:)(&v70, 0, 1, v37, 0, v39, v40);
  v60 = v70;
  LODWORD(v57) = v71;
  v56 = v72;
  LOBYTE(v15) = v73;
  v41 = v74;
  v42 = v75;
  v43 = (uint64_t *)(v35 + *(int *)(type metadata accessor for DailyForecastContentView(0) + 36));
  v45 = *v43;
  v44 = v43[1];
  v66 = v45;
  v67 = v44;
  v46 = sub_100005D40(&qword_1001C10E8);
  State.projectedValue.getter(&v68, v46);
  v47 = v68;
  v58 = v69;
  v48 = v61;
  sub_10000F7C4(v64, v61, type metadata accessor for DailyViewAttributes);
  v49 = v48 + *(int *)(v62 + 20);
  *(_QWORD *)v49 = v47;
  *(_OWORD *)(v49 + 8) = v58;
  sub_1000168D8(v34, (uint64_t)v21, &qword_1001C5550);
  v50 = v63;
  sub_10000F7C4(v48, v63, type metadata accessor for DailyView);
  v51 = v65;
  sub_1000168D8((uint64_t)v21, v65, &qword_1001C5550);
  v52 = sub_100005D40(&qword_1001C5568);
  v53 = v51 + *(int *)(v52 + 48);
  *(_QWORD *)v53 = 0;
  *(_BYTE *)(v53 + 8) = 1;
  *(_QWORD *)(v53 + 16) = v60;
  *(_BYTE *)(v53 + 24) = v57;
  *(_QWORD *)(v53 + 32) = v56;
  *(_BYTE *)(v53 + 40) = (_BYTE)v15;
  *(_QWORD *)(v53 + 48) = v41;
  *(_QWORD *)(v53 + 56) = v42;
  sub_10000F7C4(v50, v51 + *(int *)(v52 + 64), type metadata accessor for DailyView);
  sub_100011894(v48, type metadata accessor for DailyView);
  sub_100016904(v34, &qword_1001C5550);
  sub_100011894(v50, type metadata accessor for DailyView);
  sub_100016904((uint64_t)v21, &qword_1001C5550);
}

void sub_100125190(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[3];

  v53 = a2;
  v3 = type metadata accessor for Font.Context(0);
  v51 = *(_QWORD *)(v3 - 8);
  v52 = v3;
  __chkstk_darwin(v3);
  v5 = (_DWORD *)((char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v48 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v48);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DegreesConditionView(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100005D40(&qword_1001C5570);
  v11 = __chkstk_darwin(v50);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v49 = (uint64_t)&v41 - v14;
  v15 = type metadata accessor for LocationIconView(0);
  v16 = __chkstk_darwin(v15);
  v47 = (uint64_t)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v41 - v18;
  sub_10000F7C4(a1, (uint64_t)&v41 - v18, type metadata accessor for CurrentObservationViewAttributes);
  sub_10012479C();
  v21 = v20;
  v23 = static Alignment.center.getter(v22);
  _FrameLayout.init(width:height:alignment:)(&v54, 0, 1, v21, 0, v23, v24);
  v46 = v54;
  v45 = v55;
  v44 = v56;
  v43 = v57;
  v42 = v58;
  v41 = v59;
  sub_10000F7C4(a1, (uint64_t)v7, type metadata accessor for CurrentObservationViewAttributes);
  KeyPath = swift_getKeyPath(&unk_100182768);
  v26 = (uint64_t *)&v10[*(int *)(v8 + 20)];
  *v26 = KeyPath;
  v27 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  sub_100011868((uint64_t)v7, (uint64_t)v10, type metadata accessor for CurrentObservationViewAttributes);
  v28 = *(_QWORD *)(a1 + *(int *)(v48 + 64));
  type metadata accessor for DailyForecastContentView(0);
  sub_1000C5030(v5);
  v29 = Font.capHeight(in:)(v5, v28);
  v30 = (*(uint64_t (**)(_DWORD *, uint64_t))(v51 + 8))(v5, v52);
  v31 = static Alignment.center.getter(v30);
  _FrameLayout.init(width:height:alignment:)(v60, 0, 1, *(_QWORD *)&v29, 0, v31, v32);
  sub_10000F7C4((uint64_t)v10, (uint64_t)v13, type metadata accessor for DegreesConditionView);
  v33 = &v13[*(int *)(v50 + 36)];
  v34 = v60[1];
  *(_OWORD *)v33 = v60[0];
  *((_OWORD *)v33 + 1) = v34;
  *((_OWORD *)v33 + 2) = v60[2];
  sub_100011894((uint64_t)v10, type metadata accessor for DegreesConditionView);
  v35 = v49;
  sub_1000168AC((uint64_t)v13, v49, &qword_1001C5570);
  v36 = v47;
  sub_10000F7C4((uint64_t)v19, v47, type metadata accessor for LocationIconView);
  sub_1000168D8(v35, (uint64_t)v13, &qword_1001C5570);
  v37 = v53;
  sub_10000F7C4(v36, v53, type metadata accessor for LocationIconView);
  v38 = sub_100005D40(&qword_1001C5578);
  v39 = v37 + *(int *)(v38 + 48);
  *(_QWORD *)v39 = 0;
  *(_BYTE *)(v39 + 8) = 1;
  *(_QWORD *)(v39 + 16) = v46;
  *(_BYTE *)(v39 + 24) = v45;
  *(_QWORD *)(v39 + 32) = v44;
  *(_BYTE *)(v39 + 40) = v43;
  v40 = v41;
  *(_QWORD *)(v39 + 48) = v42;
  *(_QWORD *)(v39 + 56) = v40;
  sub_1000168D8((uint64_t)v13, v37 + *(int *)(v38 + 64), &qword_1001C5570);
  sub_100016904(v35, &qword_1001C5570);
  sub_100011894((uint64_t)v19, type metadata accessor for LocationIconView);
  sub_100016904((uint64_t)v13, &qword_1001C5570);
  sub_100011894(v36, type metadata accessor for LocationIconView);
}

void sub_1001255D8(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;

  v59 = a1;
  v2 = type metadata accessor for ContainerBackgroundPlacement(0);
  v57 = *(_QWORD *)(v2 - 8);
  v58 = v2;
  __chkstk_darwin(v2);
  sub_10002325C();
  v51 = v4 - v3;
  v5 = sub_1001268A4();
  sub_100029068();
  __chkstk_darwin(v6);
  sub_10002325C();
  v9 = v8 - v7;
  v10 = sub_100005D40(&qword_1001C54C0);
  v55 = *(_QWORD *)(v10 - 8);
  v56 = v10;
  v11 = __chkstk_darwin(v10);
  v52 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v54 = (char *)&v50 - v13;
  sub_100005D40(&qword_1001C1320);
  sub_100029068();
  __chkstk_darwin(v14);
  sub_10002325C();
  v17 = v16 - v15;
  v18 = sub_100123430(4, v16 - v15);
  v19 = static Alignment.leading.getter(v18);
  v21 = v20;
  v53 = v17;
  sub_10012594C(v17, v1, &v60);
  v50 = *((_QWORD *)&v60 + 1);
  v22 = v60;
  v23 = v61;
  v24 = v1 + *(int *)(v5 + 24);
  v25 = *(_QWORD *)v24;
  v26 = *(_BYTE *)(v24 + 8);
  sub_10001961C(*(_QWORD *)v24, v26);
  v27 = sub_1000C5274(v25, v26);
  sub_100019A78(v25, v26);
  sub_10000F7C4(v1, v9, type metadata accessor for DailyForecastContentView);
  if ((v27 & 1) == 0)
  {
    sub_100011894(v9, type metadata accessor for DailyForecastContentView);
    v31 = v50;
    goto LABEL_5;
  }
  v28 = *(int *)(v5 + 32);
  v29 = v28 + *(int *)(sub_10008307C() + 24);
  LOBYTE(v29) = *(_BYTE *)(v9 + v29 + *(int *)(type metadata accessor for WidgetContext(0) + 44) + 8);
  sub_100011894(v9, type metadata accessor for DailyForecastContentView);
  v31 = v50;
  if ((v29 & 1) == 0)
  {
LABEL_5:
    v34 = static Color.clear.getter(v30);
    v33 = v34;
    goto LABEL_6;
  }
  v32 = static Color.black.getter();
  v33 = Color.opacity(_:)(0.3);
  v34 = swift_release(v32);
LABEL_6:
  *(_QWORD *)&v60 = v19;
  *((_QWORD *)&v60 + 1) = v21;
  v61 = v22;
  v62 = v31;
  v63 = v23;
  v64 = v33;
  v65 = xmmword_10017CEB0;
  v66 = 0x4000000000000000;
  v35 = v51;
  v36 = static ContainerBackgroundPlacement.widget.getter(v34);
  v37 = __chkstk_darwin(v36);
  v38 = static Alignment.center.getter(v37);
  v40 = v39;
  v41 = sub_100005D40(&qword_1001C54C8);
  v42 = type metadata accessor for BackgroundView(0);
  v43 = sub_100125FC8();
  sub_100016878(&qword_1001C10E0, type metadata accessor for BackgroundView);
  v44 = v52;
  View.containerBackground<A>(for:alignment:content:)(v35, v38, v40, sub_100125FC0, &v50 - 4, v41, v42, v43, v45);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v35, v58);
  v46 = v64;
  sub_1000812CC(v61, v62);
  swift_release(v46);
  v47 = v54;
  v48 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
  v49 = v56;
  v48(v54, v44, v56);
  v48(v59, v47, v49);
  sub_100016904(v53, &qword_1001C1320);
}

double sub_10012594C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double result;
  char v44;
  _OWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  char v55;
  __int128 v56;
  char v57;

  v48 = a2;
  v52 = a3;
  v4 = type metadata accessor for DailyForecastContentView(0);
  v49 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v50 = v5;
  v51 = (uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WidgetFamily(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v47 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001C54E8);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001C1320);
  __chkstk_darwin(v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005D40(&qword_1001C54F0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v46 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v46 - v22;
  sub_1000168D8(a1, (uint64_t)v14, &qword_1001C1320);
  v24 = type metadata accessor for DailyViewAttributes(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v24) == 1)
  {
    sub_100016904((uint64_t)v14, &qword_1001C1320);
    v25 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v23, v14, v6);
    sub_100011894((uint64_t)v14, type metadata accessor for DailyViewAttributes);
    v25 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, v25, 1, v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v21, enum case for WidgetFamily.systemSmall(_:), v6);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v21, 0, 1, v6);
  v26 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_1000168D8((uint64_t)v23, (uint64_t)v11, &qword_1001C54F0);
  sub_1000168D8((uint64_t)v21, v26, &qword_1001C54F0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v11, 1, v6) != 1)
  {
    sub_1000168D8((uint64_t)v11, (uint64_t)v18, &qword_1001C54F0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v26, 1, v6) != 1)
    {
      v27 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v47, v26, v6);
      sub_100016878(&qword_1001C35B0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
      v28 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v27, v6);
      v29 = *(void (**)(char *, uint64_t))(v7 + 8);
      v29(v27, v6);
      sub_100016904((uint64_t)v21, &qword_1001C54F0);
      sub_100016904((uint64_t)v23, &qword_1001C54F0);
      v29(v18, v6);
      sub_100016904((uint64_t)v11, &qword_1001C54F0);
      if ((v28 & 1) != 0)
        goto LABEL_11;
LABEL_12:
      v34 = v51;
      sub_10000F7C4(v48, v51, type metadata accessor for DailyForecastContentView);
      v35 = *(unsigned __int8 *)(v49 + 80);
      v36 = (v35 + 16) & ~v35;
      v37 = swift_allocObject(&unk_1001B9830, v36 + v50, v35 | 7);
      sub_100011868(v34, v37 + v36, type metadata accessor for DailyForecastContentView);
      v53 = sub_100126058;
      v54 = v37;
      v55 = 1;
      goto LABEL_13;
    }
    sub_100016904((uint64_t)v21, &qword_1001C54F0);
    sub_100016904((uint64_t)v23, &qword_1001C54F0);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
LABEL_9:
    sub_100016904((uint64_t)v11, &qword_1001C54E8);
    goto LABEL_12;
  }
  sub_100016904((uint64_t)v21, &qword_1001C54F0);
  sub_100016904((uint64_t)v23, &qword_1001C54F0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v26, 1, v6) != 1)
    goto LABEL_9;
  sub_100016904((uint64_t)v11, &qword_1001C54F0);
LABEL_11:
  v30 = v51;
  sub_10000F7C4(v48, v51, type metadata accessor for DailyForecastContentView);
  v31 = *(unsigned __int8 *)(v49 + 80);
  v32 = (v31 + 16) & ~v31;
  v33 = swift_allocObject(&unk_1001B9858, v32 + v50, v31 | 7);
  sub_100011868(v30, v33 + v32, type metadata accessor for DailyForecastContentView);
  v53 = sub_100126754;
  v54 = v33;
  v55 = 0;
LABEL_13:
  v38 = sub_100005D40(&qword_1001C54F8);
  v39 = sub_100005D40(&qword_1001C5500);
  sub_100016A54(&qword_1001C5508, &qword_1001C54F8);
  v41 = v40;
  sub_100016A54(&qword_1001C5510, &qword_1001C5500);
  _ConditionalContent<>.init(storage:)(&v53, v38, v39, v41, v42);
  result = *(double *)&v56;
  v44 = v57;
  v45 = v52;
  *v52 = v56;
  *((_BYTE *)v45 + 16) = v44;
  return result;
}

uint64_t sub_100125EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v4 = type metadata accessor for BackgroundView(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + *(int *)(type metadata accessor for DailyForecastContentView(0) + 32);
  v8 = *(int *)(type metadata accessor for ForecastEntry(0) + 24);
  v9 = (uint64_t *)(v7 + v8 + *(int *)(type metadata accessor for WidgetContext(0) + 44));
  v10 = *v9;
  LOBYTE(v9) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v6 = v10;
  v6[8] = (char)v9;
  v11 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v11 = swift_getKeyPath(&unk_100182708);
  v12 = sub_100005D40(&qword_1001BF490);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  v13 = &v6[*(int *)(v4 + 24)];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_100182738);
  v13[8] = 0;
  sub_100011868((uint64_t)v6, a2, type metadata accessor for BackgroundView);
  return swift_bridgeObjectRetain(v10);
}

uint64_t sub_100125FC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100125EA0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100125FC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C54D0;
  if (!qword_1001C54D0)
  {
    v1 = sub_100005DC4(&qword_1001C54C8);
    sub_100016A54(&qword_1001C54D8, &qword_1001C54E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C54D0);
  }
  return result;
}

uint64_t sub_100126058(uint64_t a1)
{
  return sub_100126760(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100123ECC);
}

uint64_t sub_100126068()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void (*v6)(_QWORD *);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  int *v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t);
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  void (*v96)(uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (*v135)(uint64_t, uint64_t);
  uint64_t (*v136)(uint64_t, uint64_t);
  uint64_t (*v137)(uint64_t, uint64_t);
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;

  v1 = v0;
  v2 = (int *)sub_1001268A4();
  v3 = *((_QWORD *)v2 - 1);
  v138 = *(_QWORD *)(v3 + 64);
  v139 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v140 = *(unsigned __int8 *)(v3 + 80);
  v4 = (_QWORD *)(v0 + v139);
  v5 = sub_100005D40(&qword_1001BFA18);
  if (swift_getEnumCaseMultiPayload(v0 + v139, v5) == 1)
  {
    type metadata accessor for WidgetFamily(0);
    sub_100083030();
    v6(v4);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)v4 + v2[5]);
  v8 = sub_100005D40(&qword_1001C0290);
  if (sub_10001C950(v8) == 1)
  {
    v9 = type metadata accessor for ContentSizeCategory(0);
    sub_100016C04(v9);
  }
  else
  {
    swift_release(*v7);
  }
  sub_100019A78(*(_QWORD *)((char *)v4 + v2[6]), *((_BYTE *)v4 + v2[6] + 8));
  v10 = (_QWORD *)((char *)v4 + v2[7]);
  v11 = sub_100005D40(&qword_1001BF0C8);
  if (sub_10001C950(v11) == 1)
  {
    v12 = type metadata accessor for Font.Context(0);
    sub_100016C04(v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (char *)v4 + v2[8];
  v14 = type metadata accessor for Date(0);
  v135 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v135((uint64_t)v13, v14);
  v15 = (int *)sub_10008307C();
  v16 = (uint64_t)&v13[v15[5]];
  v17 = type metadata accessor for TimelineEntryRelevance(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v16, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = &v13[v15[6]];
  swift_bridgeObjectRelease(*((_QWORD *)v18 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v18 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v18 + 5));
  v19 = type metadata accessor for WidgetContext(0);
  v20 = (uint64_t)&v18[*(int *)(v19 + 40)];
  v21 = type metadata accessor for URL(0);
  if (!sub_100016AC4(v20))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  swift_bridgeObjectRelease(*(_QWORD *)&v18[*(int *)(v19 + 44)]);
  v22 = (uint64_t)&v13[v15[7]];
  v23 = type metadata accessor for ForecastEntry.Model(0);
  if (sub_1000831AC(v23) == 1)
  {
    v24 = type metadata accessor for WeatherDataViewModel(0);
    v25 = sub_1000831AC(v24);
    switch(v25)
    {
      case 2:
        type metadata accessor for SunriseSunsetViewModel(0);
        sub_100083030();
        v77(v22, v76);
        break;
      case 1:
        sub_10008313C();
        sub_100083134(v22);
        v78 = type metadata accessor for InstantWeatherViewModel(0);
        v79 = v22 + *(int *)(v78 + 20);
        type metadata accessor for Location(0);
        sub_100083030();
        v80(v79);
        v81 = v22 + *(int *)(v78 + 24);
        sub_100083134(v81);
        v82 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        sub_1000831C4(v81 + v82[5], v83, v84, v85, v86, v87, v88, v89, v122, v125, v129, v132, v135);
        ((void (*)(uint64_t, uint64_t))v78)(v81 + v82[6], v14);
        v90 = v81 + v82[7];
        sub_100005D40(&qword_1001BF090);
        sub_100083008(v90);
        sub_100083008(v81 + v82[8]);
        swift_bridgeObjectRelease(*(_QWORD *)(v81 + v82[9] + 8));
        v91 = v81 + v82[10];
        if (!sub_100082F7C())
          sub_100083008(v91);
        v92 = v81 + v82[11];
        if (!sub_100082F7C())
          sub_100083008(v92);
        v93 = v81 + v82[12];
        sub_100083134(v93);
        v94 = (int *)type metadata accessor for ConditionViewModel(0);
        v95 = v93 + v94[5];
        type metadata accessor for WeatherCondition(0);
        sub_100083030();
        v96(v95);
        sub_100082FD8(v94[6]);
        sub_100082FD8(v94[7]);
        v97 = sub_100083178();
        v98 = type metadata accessor for CloudAltitudeKind(v97);
        sub_100016BF0(v98);
        v99 = sub_100082F6C();
        if (!(_DWORD)v99)
          sub_100082F5C(v99, v100, v101, v102, v103, v104, v105, v106, v124, v128, v131, v134, v137);
        v107 = sub_100082F6C();
        v1 = v134;
        if (!(_DWORD)v107)
          sub_100082F5C(v107, v108, v109, v110, v111, v112, v113, v114, v124, v128, v131, v134, v137);
        v115 = sub_100083178();
        v116 = type metadata accessor for UVIndex(v115);
        sub_100016BF0(v116);
        v117 = sub_100083178();
        v118 = type metadata accessor for Wind(v117);
        sub_100016BF0(v118);
        v119 = *(_QWORD *)(v81 + v82[20] + 8);
        if (v119)
        {
          swift_bridgeObjectRelease(v119);
          sub_100083184();
        }
        break;
      case 0:
        v26 = sub_10008313C();
        v27 = *(_QWORD *)(*(_QWORD *)(v26 - 8) + 8);
        sub_100083008(v22);
        v28 = type metadata accessor for AggregateWeatherViewModel(0);
        v29 = sub_100083178();
        v30 = type metadata accessor for Location(v29);
        sub_100016BF0(v30);
        v126 = v27;
        v31 = v22 + *(int *)(v28 + 24);
        sub_100083008(v31);
        v32 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        sub_1000831C4(v31 + v32[5], v33, v34, v35, v36, v37, v38, v39, v28, v126, v26, v132, v135);
        ((void (*)(uint64_t, uint64_t))v18)(v31 + v32[6], v14);
        v40 = sub_100005D40(&qword_1001BF090);
        v41 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8);
        sub_100083084();
        v41(v31 + v32[8], v40);
        swift_bridgeObjectRelease(*(_QWORD *)(v31 + v32[9] + 8));
        if (!sub_100082F7C())
          sub_100083084();
        if (!sub_100082F7C())
          sub_100083084();
        v42 = v31 + v32[12];
        v127(v42, v130);
        v43 = (int *)type metadata accessor for ConditionViewModel(0);
        v44 = v42 + v43[5];
        type metadata accessor for WeatherCondition(0);
        sub_100083030();
        v45(v44);
        sub_100082FD8(v43[6]);
        sub_100082FD8(v43[7]);
        v46 = type metadata accessor for CloudAltitudeKind(0);
        sub_100016BF0(v46);
        v47 = sub_100082F6C();
        if (!(_DWORD)v47)
          sub_100082F5C(v47, v48, v49, v50, v51, v52, v53, v54, v123, (uint64_t)v127, v130, v133, v136);
        v55 = sub_100082F6C();
        v63 = (int *)v123;
        if (!(_DWORD)v55)
          sub_100082F5C(v55, v56, v57, v58, v59, v60, v61, v62, v123, (uint64_t)v127, v130, v133, v136);
        v64 = type metadata accessor for UVIndex(0);
        sub_100016BF0(v64);
        v65 = type metadata accessor for Wind(0);
        sub_100016BF0(v65);
        v66 = *(_QWORD *)(v31 + v32[20] + 8);
        if (v66)
        {
          swift_bridgeObjectRelease(v66);
          sub_100083184();
        }
        sub_100083170(v63[7]);
        sub_100083170(v63[8]);
        v67 = v22 + v63[9];
        v68 = type metadata accessor for AirQualityViewModel(0);
        v1 = v133;
        if (!sub_100083054(v68))
        {
          v127(v67, v130);
          v136(v67 + *(int *)(v31 + 20), v14);
          v69 = type metadata accessor for AirQualityScale(0);
          sub_100016BF0(v69);
          v70 = type metadata accessor for AirQualityScaleCategory(0);
          sub_100016BF0(v70);
        }
        v71 = v22 + v63[10];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (!sub_100083054(HourPrecipitationChartViewModel))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v71, v31);
        sub_100083170(v63[11]);
        v73 = v22 + v63[13];
        if (!sub_100016AC4(v73))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v73, v21);
        v74 = v22 + v63[14];
        v75 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v74, 1, v75))
          v136(v74, v14);
        break;
    }
  }
  v120 = (_QWORD *)((char *)v4 + v2[9]);
  swift_bridgeObjectRelease(*v120);
  swift_release(v120[1]);
  return swift_deallocObject(v1, v139 + v138, v140 | 7);
}

uint64_t sub_100126754(uint64_t a1)
{
  return sub_100126760(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10012487C);
}

uint64_t sub_100126760(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1001268A4() - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t sub_1001267B8()
{
  unint64_t result;

  result = qword_1001C5530;
  if (!qword_1001C5530)
  {
    result = swift_getWitnessTable(&unk_1001827B4, &type metadata for DailyForecastContentView.GenericErrorView);
    atomic_store(result, (unint64_t *)&qword_1001C5530);
  }
  return result;
}

ValueMetadata *type metadata accessor for DailyForecastContentView.GenericErrorView()
{
  return &type metadata for DailyForecastContentView.GenericErrorView;
}

uint64_t sub_100126808()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v0 = sub_100005DC4(&qword_1001C54C8);
  v1 = type metadata accessor for BackgroundView(255);
  v2 = sub_100125FC8();
  sub_100016878(&qword_1001C10E0, type metadata accessor for BackgroundView);
  v5[0] = v0;
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  return swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

uint64_t sub_100126890(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A0D00, 1);
}

uint64_t sub_1001268A4()
{
  return type metadata accessor for DailyForecastContentView(0);
}

uint64_t sub_1001268AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001268B8);
}

uint64_t sub_1001268B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_100128834();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_10012692C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100126938);
}

uint64_t sub_100126938(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = sub_100128834();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AdaptiveConditionsInlineContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C55E0;
  if (!qword_1001C55E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AdaptiveConditionsInlineContentView);
  return result;
}

uint64_t sub_1001269E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A0D50, 1);
}

void sub_1001269F0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(_QWORD);
  int v96;
  uint64_t v97;
  Swift::String v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, _QWORD);
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  _QWORD v139[29];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD v147[3];
  _QWORD v148[4];
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _BYTE v157[8];
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  _BYTE v162[8];
  _BYTE v163[8];
  uint64_t v164;
  uint64_t v165;

  v154 = a1;
  v153 = sub_100005D40(&qword_1001C5618);
  sub_100029068();
  __chkstk_darwin(v1);
  sub_1000230E0();
  v150 = v2;
  v144 = sub_100005D40(&qword_1001C5620);
  sub_100029068();
  __chkstk_darwin(v3);
  sub_1000230E0();
  sub_100023440(v4);
  v152 = sub_100005D40(&qword_1001C5628);
  sub_100029068();
  __chkstk_darwin(v5);
  sub_1000230E0();
  v7 = sub_1000232E8(v6);
  v139[7] = type metadata accessor for RainInlineTruncateFallbackText(v7);
  sub_100029068();
  __chkstk_darwin(v8);
  sub_1000230E0();
  sub_100023440(v9);
  v139[28] = sub_100005D40(&qword_1001C14E8);
  sub_100029068();
  __chkstk_darwin(v10);
  sub_100023150();
  v139[6] = v11;
  __chkstk_darwin(v12);
  v14 = sub_1000232E8((uint64_t)v139 - v13);
  type metadata accessor for RainInlineContentViewModel(v14);
  sub_100029068();
  __chkstk_darwin(v15);
  sub_1000230E0();
  sub_100023440(v16);
  v139[23] = sub_100005D40(&qword_1001C5630);
  sub_100029068();
  __chkstk_darwin(v17);
  sub_100023150();
  v139[9] = v18;
  __chkstk_darwin(v19);
  sub_100023440((uint64_t)v139 - v20);
  v139[26] = sub_100005D40(&qword_1001C5638);
  sub_100029068();
  __chkstk_darwin(v21);
  sub_1000230E0();
  sub_100023440(v22);
  v139[21] = sub_100005D40(&qword_1001C5640);
  sub_100029068();
  __chkstk_darwin(v23);
  sub_1000230E0();
  sub_100023440(v24);
  v142 = sub_100005D40(&qword_1001C5648);
  sub_100029068();
  __chkstk_darwin(v25);
  sub_1000230E0();
  sub_100023440(v26);
  sub_100005D40(&qword_1001C08A8);
  sub_100029068();
  __chkstk_darwin(v27);
  sub_1000230E0();
  v29 = sub_1000232E8(v28);
  v30 = type metadata accessor for AccessibilityChildBehavior(v29);
  sub_10002886C(v30, (uint64_t)&v165);
  v147[2] = v31;
  sub_1000230F4();
  __chkstk_darwin(v32);
  sub_1000230E0();
  sub_100023440(v33);
  v34 = sub_100005D40(&qword_1001C3450);
  v148[2] = *(_QWORD *)(v34 - 8);
  v148[3] = v34;
  sub_1000230F4();
  __chkstk_darwin(v35);
  sub_1000230E0();
  v155 = v36;
  v151 = sub_100005D40(&qword_1001C06F8);
  sub_100029068();
  __chkstk_darwin(v37);
  sub_100023150();
  v148[1] = v38;
  __chkstk_darwin(v39);
  v149 = (uint64_t)v139 - v40;
  v41 = type metadata accessor for WeatherFormatPlaceholder(0);
  sub_10002886C(v41, (uint64_t)v162);
  v139[20] = v42;
  sub_1000230F4();
  __chkstk_darwin(v43);
  sub_1000230E0();
  v45 = sub_1000232E8(v44);
  v46 = type metadata accessor for NSUnitTemperature.AttributedWeatherFormatStyle(v45);
  sub_10002886C(v46, (uint64_t)v148);
  v139[14] = v47;
  sub_1000230F4();
  __chkstk_darwin(v48);
  sub_1000230E0();
  v50 = sub_1000232E8(v49);
  v51 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(v50);
  sub_10002886C(v51, (uint64_t)v163);
  v139[19] = v52;
  sub_1000230F4();
  __chkstk_darwin(v53);
  sub_1000230E0();
  sub_100023440(v54);
  v55 = sub_100005D40(&qword_1001BF090);
  sub_10002886C(v55, (uint64_t)&v159);
  v141 = v56;
  sub_1000230F4();
  __chkstk_darwin(v57);
  sub_1000230E0();
  v59 = sub_1000232E8(v58);
  v60 = type metadata accessor for AttributedString(v59);
  sub_10002886C(v60, (uint64_t)v147);
  v139[11] = v61;
  sub_1000230F4();
  __chkstk_darwin(v62);
  sub_1000230E0();
  v64 = sub_1000232E8(v63);
  type metadata accessor for LocalizedStringKey.StringInterpolation(v64);
  sub_100029068();
  __chkstk_darwin(v65);
  sub_1000230E0();
  v67 = sub_1000232E8(v66);
  v68 = type metadata accessor for Locale.Language(v67);
  sub_10002886C(v68, (uint64_t)v157);
  v139[17] = v69;
  sub_1000230F4();
  __chkstk_darwin(v70);
  sub_10002325C();
  v73 = v72 - v71;
  v74 = type metadata accessor for Locale(0);
  v75 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  sub_10002325C();
  v146 = sub_100005D40(&qword_1001C5650);
  sub_100029068();
  __chkstk_darwin(v76);
  sub_10002325C();
  v79 = v78 - v77;
  v140 = type metadata accessor for ConditionState(0);
  sub_100029068();
  v81 = __chkstk_darwin(v80);
  v83 = (char *)v139 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v81);
  v85 = (_QWORD *)((char *)v139 - v84);
  v86 = type metadata accessor for AggregateWeatherViewModel(0);
  sub_100029068();
  __chkstk_darwin(v87);
  sub_10002325C();
  v90 = v89 - v88;
  sub_100128834();
  sub_100029068();
  __chkstk_darwin(v91);
  sub_10002325C();
  v94 = v93 - v92;
  sub_10000F7C4(v156, v93 - v92, v95);
  v96 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v94, 2, v86);
  if (!v96)
  {
    v139[0] = v75;
    v139[1] = v73;
    v139[4] = v86;
    v139[5] = v74;
    v139[2] = v79;
    sub_100011868(v94, v90, type metadata accessor for AggregateWeatherViewModel);
    type metadata accessor for AdaptiveConditionsInlineContentView(0);
    v156 = v90;
    sub_10010E4D8(v90, v85);
    sub_10000F7C4((uint64_t)v85, (uint64_t)v83, type metadata accessor for ConditionState);
    v122 = (char *)&loc_100127218 + 4 * word_100182810[swift_getEnumCaseMultiPayload(v83, v140)];
    v139[3] = v85;
    __asm { BR              X10 }
  }
  v97 = v147[0];
  if (v96 == 1)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1);
    sub_1000D6D98();
    Image.init(systemName:)(0x656D6F6D72656874, 0xEB00000000726574);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    sub_1000CD56C();
    v98._countAndFlagsBits = 0xB0C22D2D20;
    v98._object = (void *)0xA500000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v98);
    v99 = LocalizedStringKey.init(stringInterpolation:)(v97);
    v158 = sub_100128684(v99, v100, v101, v102);
    v159 = v103;
    v160 = v104 & 1;
    v161 = v105;
    v106 = v147[1];
    static AccessibilityChildBehavior.ignore.getter(v158);
    sub_1001287D0(v106);
    v107 = sub_1000CD460();
    v108(v107, v148[0]);
    sub_100128850();
    v109 = sub_100128768(0xD000000000000018, (uint64_t)"Weather data unavailable");
    sub_100128684(v109, v110, v111, v112);
    sub_10012872C();
    v114 = sub_10012875C(v113, (uint64_t)&opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>);
    sub_1001286C0(v114);
    sub_1001286A0();
    sub_100128748();
    v115 = v149;
    sub_1001287DC((uint64_t)&protocol witness table for Text, v149);
    v116 = v145;
    sub_100083190(v115, v145);
    sub_100128720(v116, (uint64_t)&v164);
    sub_100128554();
    sub_1001287E4();
    v117 = v143;
    v118 = v151;
    sub_1001287C8(v116, v146, v151, (uint64_t)&v158);
    v119 = v150;
    sub_1000932D8(v117, v150);
    sub_1000CD618(v119, v153);
    v120 = sub_100128530();
    sub_1001287C8(v119, v152, v118, v120);
    sub_10002310C(v117);
    v121 = v115;
  }
  else
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
    sub_1000D6D98();
    Image.init(systemName:)(0xD000000000000013, 0x8000000100187E60);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    sub_1000CD56C();
    sub_1000D6D98();
    v123 = LocalizedStringKey.init(stringInterpolation:)(v97);
    v158 = sub_100128684(v123, v124, v125, v126);
    v159 = v127;
    sub_100128708(v129, v128 & 1);
    sub_1001287D0((uint64_t)v83);
    sub_1001286EC();
    sub_100128850();
    v130 = sub_100128768(0xD000000000000019, (uint64_t)"Location data unavailable");
    sub_100128684(v130, v131, v132, v133);
    sub_10012872C();
    v135 = sub_10012875C(v134, (uint64_t)&opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>);
    sub_1001286C0(v135);
    sub_1001286A0();
    sub_100128748();
    v136 = v149;
    sub_1001287DC((uint64_t)&protocol witness table for Text, v149);
    v137 = v150;
    sub_100083190(v136, v150);
    swift_storeEnumTagMultiPayload(v137, v153, 1);
    sub_100128530();
    v138 = sub_1001287E4();
    _ConditionalContent<>.init(storage:)(v137, v152, v151, &v158, v138);
    v121 = v136;
  }
  sub_100016904(v121, &qword_1001C06F8);
}

void sub_100127EC8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  void (*v49)(char *, uint64_t, __n128);
  unint64_t v50;
  uint64_t v51;
  __n128 v52;
  Swift::String v53;
  uint64_t v54;
  Swift::String v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  void *v86;
  uint64_t OpaqueTypeConformance2;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  void *v99;
  char v100;
  uint64_t v101;

  v85 = (_QWORD *)a1;
  v86 = a2;
  v94 = a3;
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v6 = *(_QWORD *)(v5 - 8);
  v89 = v5;
  __chkstk_darwin(v5);
  v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001C3450);
  v13 = *(_QWORD *)(v12 - 8);
  v91 = v12;
  v92 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100005D40(&qword_1001C06F8);
  v16 = __chkstk_darwin(v97);
  v93 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v84 - v19;
  v21 = __chkstk_darwin(v18);
  v95 = (uint64_t)&v84 - v22;
  __chkstk_darwin(v21);
  v96 = (uint64_t)&v84 - v23;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 2);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v24);
  v90 = 0x8000000100187A30;
  v25 = Image.init(systemName:)(0xD00000000000001DLL, 0x8000000100187A30);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  swift_release(v25);
  v26._countAndFlagsBits = 32;
  v26._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v26);
  v27._countAndFlagsBits = a1;
  v27._object = a2;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v27);
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v28);
  v29 = LocalizedStringKey.init(stringInterpolation:)(v11);
  v98 = (_QWORD *)Text.init(_:tableName:bundle:comment:)(v29, v31, v30 & 1, v32, 0, 0, 0);
  v99 = v33;
  v100 = v34 & 1;
  v101 = v35;
  static AccessibilityChildBehavior.ignore.getter(v98);
  View.accessibilityElement(children:)(v8, &type metadata for Text, &protocol witness table for Text);
  v88 = *(void (**)(char *, uint64_t))(v6 + 8);
  v88(v8, v5);
  sub_100016868((uint64_t)v98, (uint64_t)v99, v100);
  swift_bridgeObjectRelease(v101);
  v36 = LocalizedStringKey.init(stringLiteral:)(0x2072656874616557, 0xED00007472656C61);
  v40 = Text.init(_:tableName:bundle:comment:)(v36, v38, v37 & 1, v39, 0, 0, 0);
  v42 = v41;
  v44 = v43;
  v46 = v45 & 1;
  v98 = &type metadata for Text;
  v99 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v47 = v91;
  View.accessibilityLabel(_:)(v40, v42, v46, v44, v91, OpaqueTypeConformance2);
  sub_100016868(v40, v42, v46);
  v48 = swift_bridgeObjectRelease(v44);
  v49 = *(void (**)(char *, uint64_t, __n128))(v92 + 8);
  v49(v15, v47, v48);
  v98 = v85;
  v99 = v86;
  v50 = sub_10001692C();
  v51 = v95;
  ModifiedContent<>.accessibilityValue<A>(_:)(&v98, v97, &type metadata for String, v50, v52);
  sub_100016904((uint64_t)v20, &qword_1001C06F8);
  sub_1000168AC(v51, v96, &qword_1001C06F8);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 1);
  v53._countAndFlagsBits = 0;
  v53._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v53);
  v54 = Image.init(systemName:)(0xD00000000000001DLL, v90);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  swift_release(v54);
  v55._countAndFlagsBits = 0x2065726576655320;
  v55._object = (void *)0xEF72656874616557;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v55);
  v56 = LocalizedStringKey.init(stringInterpolation:)(v11);
  v98 = (_QWORD *)Text.init(_:tableName:bundle:comment:)(v56, v58, v57 & 1, v59, 0, 0, 0);
  v99 = v60;
  v100 = v61 & 1;
  v101 = v62;
  static AccessibilityChildBehavior.ignore.getter(v98);
  View.accessibilityElement(children:)(v8, &type metadata for Text, &protocol witness table for Text);
  v88(v8, v89);
  sub_100016868((uint64_t)v98, (uint64_t)v99, v100);
  swift_bridgeObjectRelease(v101);
  v63 = LocalizedStringKey.init(stringLiteral:)(0x2072656874616557, 0xED00007472656C61);
  v67 = Text.init(_:tableName:bundle:comment:)(v63, v65, v64 & 1, v66, 0, 0, 0);
  v69 = v68;
  v71 = v70;
  LOBYTE(v44) = v72 & 1;
  v73 = (uint64_t)v93;
  View.accessibilityLabel(_:)(v67, v68, v72 & 1, v70, v47, OpaqueTypeConformance2);
  sub_100016868(v67, v69, v44);
  v74 = swift_bridgeObjectRelease(v71);
  v49(v15, v47, v74);
  v75 = LocalizedStringKey.init(stringLiteral:)(0x7720657265766553, 0xEE00726568746165);
  v77 = v76;
  v79 = v78;
  ModifiedContent<>.accessibilityValue(_:)(v75);
  swift_bridgeObjectRelease(v79);
  swift_bridgeObjectRelease(v77);
  sub_100016904(v73, &qword_1001C06F8);
  v80 = v95;
  sub_1000168AC((uint64_t)v20, v95, &qword_1001C06F8);
  v81 = v96;
  sub_1000168D8(v96, (uint64_t)v20, &qword_1001C06F8);
  sub_1000168D8(v80, v73, &qword_1001C06F8);
  v82 = v94;
  sub_1000168D8((uint64_t)v20, v94, &qword_1001C06F8);
  v83 = sub_100005D40(&qword_1001C5680);
  sub_1000168D8(v73, v82 + *(int *)(v83 + 48), &qword_1001C06F8);
  sub_100016904(v80, &qword_1001C06F8);
  sub_100016904(v81, &qword_1001C06F8);
  sub_100016904(v73, &qword_1001C06F8);
  sub_100016904((uint64_t)v20, &qword_1001C06F8);
}

uint64_t sub_100128530()
{
  return sub_100128578(&qword_1001C5658, &qword_1001C5628, (void (*)(void))sub_100128554, (void (*)(void))sub_10004CF4C);
}

uint64_t sub_100128554()
{
  return sub_100128578(&qword_1001C5660, &qword_1001C5650, (void (*)(void))sub_1001285E8, (void (*)(void))sub_10010E41C);
}

uint64_t sub_100128578(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005DC4(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001285E8()
{
  return sub_100128578(&qword_1001C5668, &qword_1001C5648, (void (*)(void))sub_10004CF4C, (void (*)(void))sub_10012860C);
}

unint64_t sub_10012860C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5670;
  if (!qword_1001C5670)
  {
    v1 = sub_100005DC4(&qword_1001C5630);
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewThatFits<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C5670);
  }
  return result;
}

uint64_t sub_100128650()
{
  return sub_100128578(&qword_1001C5688, &qword_1001C5690, (void (*)(void))sub_100128530, (void (*)(void))sub_10004CF4C);
}

uint64_t sub_100128684(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return Text.init(_:tableName:bundle:comment:)(a1, a2, a3 & 1, a4, 0, 0, 0);
}

double sub_1001286A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  double result;

  sub_100016868(v0, v1, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001286C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return View.accessibilityLabel(_:)(v1, v2, v4, v3, *(_QWORD *)(v5 - 240), a1);
}

uint64_t sub_1001286EC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 272) + 8))(v0, *(_QWORD *)(v1 - 264));
}

uint64_t sub_100128708@<X0>(uint64_t a1@<X3>, char a2@<W8>)
{
  uint64_t v2;

  *(_BYTE *)(v2 - 112) = a2;
  *(_QWORD *)(v2 - 104) = a1;
  return static AccessibilityChildBehavior.ignore.getter();
}

uint64_t sub_100128720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_storeEnumTagMultiPayload(a1, *(_QWORD *)(a2 - 256), 1);
}

void sub_10012872C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = v0;
  *(_QWORD *)(v2 - 120) = v1;
}

uint64_t sub_100128748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 248) + 8))(v1, v0);
}

uint64_t sub_10012875C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getOpaqueTypeConformance2(v2 - 128, a2, 1);
}

uint64_t sub_100128768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LocalizedStringKey.init(stringLiteral:)(a1, (a2 - 32) | 0x8000000000000000);
}

uint64_t sub_100128774(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;

  result = *(_QWORD *)(v2 - 360);
  *(_DWORD *)(v2 - 400) = a2;
  return result;
}

uint64_t sub_100128790(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 504) = a1;
  return static UnitManager.standard.getter();
}

uint64_t sub_1001287A0()
{
  uint64_t v0;

  return v0;
}

void sub_1001287B8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v0);
}

uint64_t sub_1001287C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return _ConditionalContent<>.init(storage:)(a1, a2, a3, a4, v4);
}

uint64_t sub_1001287D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return View.accessibilityElement(children:)(a1, v1, v2);
}

void sub_1001287DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000168AC(a1, a2, v2);
}

unint64_t sub_1001287E4()
{
  return sub_10004CF4C();
}

uint64_t sub_1001287EC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100128800@<X0>(uint64_t (*a1)(void)@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 408) = a1;
  return a1();
}

uint64_t sub_10012880C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100128834()
{
  return type metadata accessor for AdaptiveConditionsComplicationDataStatus(0);
}

double sub_100128850()
{
  uint64_t v0;
  double result;

  sub_100016868(*(_QWORD *)(v0 - 128), *(_QWORD *)(v0 - 120), *(_BYTE *)(v0 - 112));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 104)).n128_u64[0];
  return result;
}

uint64_t destroy for HourlyBannerViewAttributes(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

uint64_t initializeWithCopy for HourlyBannerViewAttributes(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for HourlyBannerViewAttributes(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  a1[4] = a2[4];
  a1[5] = a2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

__n128 initializeWithTake for HourlyBannerViewAttributes(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HourlyBannerViewAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  swift_release(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for HourlyBannerViewAttributes(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HourlyBannerViewAttributes(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HourlyBannerViewAttributes()
{
  return &type metadata for HourlyBannerViewAttributes;
}

double sub_100128ACC(uint64_t a1)
{
  uint64_t v1;
  double v3;
  double v4;

  v3 = 0.0;
  if ((*(_BYTE *)(v1 + 48) & 1) != 0)
    v3 = Font.capHeight(in:)(a1, *(_QWORD *)(v1 + 24)) + *(double *)(v1 + 40);
  v4 = Font.capHeight(in:)(a1, *(_QWORD *)(v1 + 8)) + *(double *)(v1 + 40);
  return v3 + v4 + Font.lineHeight(in:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100128B38(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  sub_10008CEDC();
  if ((v4 & 1) != 0
    && (static Font.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) != 0
    && (static Font.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) != 0
    && (static Font.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) != 0
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40))
  {
    v5 = ((*(_BYTE *)(a1 + 48) & 1) == 0) ^ *(_BYTE *)(a2 + 48);
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

unint64_t sub_100128BE0()
{
  unint64_t result;

  result = qword_1001C56B8;
  if (!qword_1001C56B8)
  {
    result = swift_getWitnessTable(&unk_1001829A0, &unk_1001B9B50);
    atomic_store(result, (unint64_t *)&qword_1001C56B8);
  }
  return result;
}

void sub_100128C1C()
{
  sub_10004AFE0(&qword_1001C56C0, &qword_1001C56C8, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_100128C48()
{
  unint64_t v0;

  v0 = sub_10012A194();
  return _EntityURLRepresentation.init(_:)(0xD000000000000055, 0x8000000100188270, &unk_1001B9AD0, v0);
}

uint64_t sub_100128C90()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v0 = sub_100005D40(&qword_1001C5818);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100093228(v6, qword_1001DA038);
  sub_100025184(v6, (uint64_t)qword_1001DA038);
  LocalizedStringResource.init(stringLiteral:)(0x646E6120656D6F48, 0xED00006B726F5720);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v5, v2);
}

void sub_100128DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_100005D40(&qword_1001C5840);
  sub_100029068();
  __chkstk_darwin(v1);
  sub_10002325C();
  v4 = v3 - v2;
  sub_100005D40(&qword_1001C5818);
  sub_100029068();
  __chkstk_darwin(v5);
  sub_1000443F0();
  v6 = sub_10012B320();
  sub_100029068();
  __chkstk_darwin(v7);
  sub_100049D00();
  v10 = v8 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - v12;
  sub_10012B2A0();
  sub_1000A8718();
  LocalizedStringResource.init(stringLiteral:)(0x1000000000000010, v14);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 0, 1, v6);
  v15 = type metadata accessor for DisplayRepresentation.Image(0);
  sub_1000CD60C(v4, v16, v17, v15);
  sub_10012B2A0();
  DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v13, v0, v4, &_swiftEmptyArrayStorage, v10);
  sub_1000FA1C4();
}

uint64_t sub_100128EC4(uint64_t a1)
{
  return sub_10012A8B0(a1, qword_1001DA050, 0xD000000000000014, 0x8000000100189AB0);
}

uint64_t sub_100128EE8(_QWORD *a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (*a1 != -1)
    swift_once(a1, a4);
  v6 = a2(0);
  return sub_100025184(v6, a3);
}

uint64_t sub_100128F2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100005D40(&qword_1001C58B8);
  sub_100093228(v0, qword_1001DA068);
  v1 = sub_100025184(v0, (uint64_t)qword_1001DA068);
  IntentDescription.init(stringLiteral:)(0xD00000000000002FLL, 0x8000000100189A80);
  v2 = type metadata accessor for IntentDescription(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, v2);
}

uint64_t sub_100128FAC()
{
  uint64_t v0;

  if (qword_1001BEEC8 != -1)
    swift_once(&qword_1001BEEC8, sub_100128F2C);
  v0 = sub_100005D40(&qword_1001C58B8);
  return sub_100025184(v0, (uint64_t)qword_1001DA068);
}

uint64_t sub_100128FF8()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_100183108);
  qword_1001DA080 = result;
  return result;
}

uint64_t sub_10012901C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_retain(a3);
}

uint64_t sub_100129024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  result = sub_10012901C(a1, a2, v4);
  *a3 = v4;
  return result;
}

uint64_t *sub_100129050()
{
  if (qword_1001BEED0 != -1)
    swift_once(&qword_1001BEED0, sub_100128FF8);
  return &qword_1001DA080;
}

void sub_100129090(uint64_t a1)
{
  sub_10012B354(a1);
  sub_10012B368();
}

void sub_1001290B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];

  sub_10012B2E4(a1, a2);
  swift_retain(v2);
  IntentParameter.wrappedValue.setter(v4);
  sub_1000CD56C();
  swift_bridgeObjectRelease(v3);
  sub_10012B328();
}

uint64_t sub_1001290F0()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_100129120(char a1)
{
  char v2;

  v2 = a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t sub_100129150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3[21] = a2;
  v3[22] = a3;
  v3[20] = a1;
  v4 = sub_100005D40(&qword_1001C5888);
  v3[23] = sub_10012B2C4(*(_QWORD *)(v4 - 8));
  v5 = sub_100005D40(&qword_1001C5890);
  v3[24] = sub_10012B2C4(*(_QWORD *)(v5 - 8));
  v6 = sub_100005D40(&qword_1001C5898);
  v3[25] = sub_10012B2C4(*(_QWORD *)(v6 - 8));
  v7 = sub_10012B360();
  v3[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[27] = v8;
  v3[28] = sub_10012B2C4(v8);
  v9 = sub_100005D40(&qword_1001C58A0);
  v3[29] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[30] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[31] = swift_task_alloc(v11);
  v3[32] = swift_task_alloc(v11);
  sub_10012B348();
  return sub_100070D44();
}

uint64_t sub_10012921C()
{
  uint64_t v0;
  __int128 v1;
  _QWORD *v2;
  unint64_t v3;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 48) = v1;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to IntentDialog._CapturedContent.init<>(entity:_:)[1]);
  *(_QWORD *)(v0 + 264) = v2;
  v3 = sub_10012A194();
  *v2 = v0;
  v2[1] = sub_1001292AC;
  return IntentDialog._CapturedContent.init<>(entity:_:)(*(_QWORD *)(v0 + 256), v0 + 40, sub_1001296C0, 0, &unk_1001B9AD0, v3);
}

uint64_t sub_1001292AC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  sub_10012B300(*(_QWORD *)(v2 + 264), &v2);
  sub_10012B348();
  return sub_100070D44();
}

uint64_t sub_1001292F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 272) = v1;
  *(_QWORD *)(v0 + 280) = v2;
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 313));
  *(_BYTE *)(v0 + 312) = *(_BYTE *)(v0 + 313);
  if (qword_1001BEED0 != -1)
    swift_once(&qword_1001BEED0, sub_100128FF8);
  v3 = qword_1001DA080;
  *(_QWORD *)(v0 + 288) = qword_1001DA080;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  sub_10012B374();
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 296) = v5;
  sub_10004AFE0(&qword_1001C5860, &qword_1001C5868, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v5 = v0;
  v5[1] = sub_1001293F0;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 312, v3, &type metadata for Bool, v6);
}

uint64_t sub_1001293F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc(v2);
  sub_1000CD56C();
  swift_release(v3);
  swift_bridgeObjectRelease(v4);
  sub_10012B348();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_100129470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 232);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 216);
  v20 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 136));
  v6 = *(_OWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 112) = *(_QWORD *)(v0 + 136);
  *(_OWORD *)(v0 + 120) = v6;
  v7 = type metadata accessor for _GeneratedContentOptions(0);
  sub_1000CD60C(v5, v8, v9, v7);
  v10 = type metadata accessor for _GeneratedContentFallback(0);
  sub_1000CD60C(v4, v11, v12, v10);
  v13 = sub_100128BE0();
  v14 = sub_10012A320();
  IntentDialog._GeneratedDialogContent.init(fromResult:options:fallbackDialog:)(sub_1001296C0, 0, v5, v4, &unk_1001B9B50, &unk_1001B9AD0, v13, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v17, v16);
  IntentDialog.init<A, B>(from:capturedContent:)(v3, v1, &unk_1001B9B50, &unk_1001B9AD0, v13, v14);
  static IntentResult.result<A>(value:dialog:)(v0 + 112, v18, &unk_1001B9AD0, v14);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v17, v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v1);
  sub_100070FA0();
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012963C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(v1, *(_QWORD *)(v0 + 232));
  swift_task_dealloc(v1);
  sub_100070FA0();
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return sub_10012B318(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1001296C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = sub_100005D40(&qword_1001C58A8);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1000443F0();
  if (qword_1001BEED0 != -1)
    swift_once(&qword_1001BEED0, sub_100128FF8);
  v3 = qword_1001DA080;
  v4 = swift_retain(qword_1001DA080);
  static _DialogBuilderEntity.buildExpression<A, B>(_:)(v4);
  swift_release(v3);
  v5 = sub_10012A320();
  sub_10004AFE0(&qword_1001C58B0, &qword_1001C58A8, (uint64_t)&protocol conformance descriptor for _NLGRepresentationEntity<A>);
  static _DialogBuilderEntity.buildBlock<A>(_:)(v0, &unk_1001B9AD0, v1, v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  sub_1000FA1C4();
}

uint64_t sub_1001297B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];

  sub_100005D40(&qword_1001C5870);
  sub_100029068();
  __chkstk_darwin(v2);
  sub_10002325C();
  v26 = v4 - v3;
  v5 = type metadata accessor for InputConnectionBehavior(0);
  __chkstk_darwin(v5);
  sub_1000443F0();
  sub_100005D40(&qword_1001C5810);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_100049D00();
  v9 = v7 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - v11;
  sub_100005D40(&qword_1001C5818);
  sub_100029068();
  __chkstk_darwin(v13);
  sub_10003C164();
  sub_10012B320();
  sub_100029068();
  __chkstk_darwin(v14);
  sub_10002325C();
  v17 = v16 - v15;
  v25 = sub_100005D40(&qword_1001C5820);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000017, 0x8000000100189A30);
  sub_10012B2D4(v1);
  sub_10012B360();
  memset(v27, 0, sizeof(v27));
  sub_10012B308((uint64_t)v12);
  sub_10012B308(v9);
  sub_10012B338();
  v18 = sub_10012A194();
  v25 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v1, v27, v12, v9, v0, v18);
  sub_100005D40(&qword_1001C5878);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000028, 0x8000000100189A50);
  sub_10012B2D4(v1);
  LOBYTE(v27[0]) = 2;
  v19 = type metadata accessor for Bool.IntentDisplayName(0);
  v20 = v26;
  sub_1000CD60C(v26, v21, v22, v19);
  sub_10012B308((uint64_t)v12);
  sub_10012B338();
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v17, v1, v27, v20, v12, v0);
  return v25;
}

void sub_1001299F0(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100129090(*v1);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
}

void sub_100129A1C(uint64_t *a1)
{
  sub_1001290B4(*a1, a1[1]);
}

uint64_t (*sub_100129A30(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100129A78;
}

uint64_t sub_100129A7C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1001290F0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100129AA8(char *a1)
{
  return sub_100129120(*a1);
}

uint64_t (*sub_100129AB4(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100129A78;
}

uint64_t sub_100129AFC()
{
  sub_100129050();
  return swift_retain(qword_1001DA080);
}

unint64_t sub_100129B1C()
{
  return 0xD000000000000015;
}

unint64_t sub_100129B40()
{
  unint64_t result;

  result = qword_1001C56D0;
  if (!qword_1001C56D0)
  {
    result = swift_getWitnessTable(&unk_100182A30, &unk_1001B9B50);
    atomic_store(result, (unint64_t *)&qword_1001C56D0);
  }
  return result;
}

unint64_t sub_100129B80()
{
  unint64_t result;

  result = qword_1001C56D8;
  if (!qword_1001C56D8)
  {
    result = swift_getWitnessTable(&unk_100182A58, &unk_1001B9B50);
    atomic_store(result, (unint64_t *)&qword_1001C56D8);
  }
  return result;
}

uint64_t sub_100129BBC(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1001A0E04, 1) + 8);
}

uint64_t sub_100129BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012AC88(a1, a2, a3, (uint64_t (*)(void))sub_100128BE0);
}

uint64_t sub_100129BEC@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ACEC(&qword_1001BEEC0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001DA050, (uint64_t)sub_100128EC4, a1);
}

uint64_t sub_100129C20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_100128FAC();
  return sub_10012B250(v2, a1);
}

uint64_t sub_100129C44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_1001C5884);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10012B298;
  return sub_100129150(a1, v5, v4);
}

uint64_t sub_100129CA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1001297B0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100129CCC()
{
  return 0xD000000000000030;
}

unint64_t sub_100129CEC()
{
  unint64_t result;

  result = qword_1001C56E8;
  if (!qword_1001C56E8)
  {
    result = swift_getWitnessTable(&unk_100182AB4, &unk_1001B9A58);
    atomic_store(result, (unint64_t *)&qword_1001C56E8);
  }
  return result;
}

unint64_t sub_100129D2C()
{
  unint64_t result;

  result = qword_1001C56F0;
  if (!qword_1001C56F0)
  {
    result = swift_getWitnessTable(&unk_100182BE8, &unk_1001B9AD0);
    atomic_store(result, (unint64_t *)&qword_1001C56F0);
  }
  return result;
}

uint64_t sub_100129D68(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100129D80, 0, 0);
}

uint64_t sub_100129D80()
{
  uint64_t v0;
  _BYTE *v1;

  if (qword_1001BEE60 != -1)
    swift_once(&qword_1001BEE60, sub_10008AC18);
  v1 = *(_BYTE **)(v0 + 16);
  *v1 = sub_10008ADBC() & 1;
  return sub_10012B318(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100129DE8(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_100129E04, 0, 0);
}

uint64_t sub_100129E04()
{
  uint64_t v0;

  if (qword_1001BEE60 != -1)
    swift_once(&qword_1001BEE60, sub_10008AC18);
  sub_10008AE8C();
  sub_10012B210();
  static NSUserDefaults.postSettingsUpdatedNotification()();
  return sub_100070E38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100129E70()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10012B320();
  *(_QWORD *)(v0 + 16) = sub_10012B2C4(*(_QWORD *)(v1 - 8));
  sub_10012B348();
  return sub_100070D44();
}

uint64_t sub_100129EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(unint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  sub_100005D40(&qword_1001C56C8);
  sub_10012B2A0();
  sub_10004AFE0(&qword_1001C5860, &qword_1001C5868, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v1, &unk_1001C5850, 0, &unk_1001C5858, 0, &unk_1001B9B50, v2);
  sub_100070FA0();
  sub_1000A8718();
  return v3(0xD00000000000001FLL);
}

uint64_t sub_100129F58(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1001C584C);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100129FA0;
  return sub_100129E70();
}

uint64_t sub_100129FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v8 = *v4;
  v12 = v8;
  v9 = *v4;
  sub_10012B300(*(_QWORD *)(v8 + 24), &v12);
  if (!v3)
  {
    v10 = *(_QWORD **)(v8 + 16);
    *v10 = a1;
    v10[1] = a2;
    v10[2] = a3;
  }
  return (*(uint64_t (**)(void))(v9 + 8))();
}

unint64_t sub_10012A010()
{
  unint64_t result;

  result = qword_1001C5700;
  if (!qword_1001C5700)
  {
    result = swift_getWitnessTable(&unk_100182AEC, &unk_1001B9A58);
    atomic_store(result, (unint64_t *)&qword_1001C5700);
  }
  return result;
}

uint64_t sub_10012A04C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10012A4A8();
  *v4 = v2;
  v4[1] = sub_10012A0B4;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

uint64_t sub_10012A0B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v7 = v4;
  v5 = *v2;
  sub_10012B300(*(_QWORD *)(v4 + 24), &v7);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

unint64_t sub_10012A114()
{
  unint64_t result;

  result = qword_1001C5710;
  if (!qword_1001C5710)
  {
    result = swift_getWitnessTable(&unk_100182B44, &unk_1001B9A58);
    atomic_store(result, (unint64_t *)&qword_1001C5710);
  }
  return result;
}

unint64_t sub_10012A154()
{
  unint64_t result;

  result = qword_1001C5718;
  if (!qword_1001C5718)
  {
    result = swift_getWitnessTable(&unk_100182BA4, &unk_1001B9A58);
    atomic_store(result, (unint64_t *)&qword_1001C5718);
  }
  return result;
}

unint64_t sub_10012A194()
{
  unint64_t result;

  result = qword_1001C5720[0];
  if (!qword_1001C5720[0])
  {
    result = swift_getWitnessTable(&unk_100182C80, &unk_1001B9AD0);
    atomic_store(result, qword_1001C5720);
  }
  return result;
}

uint64_t sub_10012A1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10012A4A8();
  *v5 = v2;
  v5[1] = sub_10012A23C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_10012A23C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = sub_100070CDC();
  if (!v1)
    v4 = a1;
  return (*(uint64_t (**)(uint64_t))(v2 + 8))(v4);
}

uint64_t sub_10012A274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10012A4A8();
  *v4 = v2;
  v4[1] = sub_10012B29C;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_10012A2E0()
{
  unint64_t result;

  result = qword_1001C5738;
  if (!qword_1001C5738)
  {
    result = swift_getWitnessTable(&unk_100182BCC, &unk_1001B9A58);
    atomic_store(result, (unint64_t *)&qword_1001C5738);
  }
  return result;
}

unint64_t sub_10012A320()
{
  unint64_t result;

  result = qword_1001C5740;
  if (!qword_1001C5740)
  {
    result = swift_getWitnessTable(&unk_100182DF0, &unk_1001B9AD0);
    atomic_store(result, (unint64_t *)&qword_1001C5740);
  }
  return result;
}

unint64_t sub_10012A360()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5748;
  if (!qword_1001C5748)
  {
    v1 = sub_100005DC4(qword_1001C5750);
    sub_10012A320();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001C5748);
  }
  return result;
}

uint64_t sub_10012A3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10012A010();
  *v5 = v2;
  v5[1] = sub_1000709F8;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_10012A430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100070BD4;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

unint64_t sub_10012A4A8()
{
  unint64_t result;

  result = qword_1001C5768;
  if (!qword_1001C5768)
  {
    result = swift_getWitnessTable(&unk_100182A74, &unk_1001B9A58);
    atomic_store(result, (unint64_t *)&qword_1001C5768);
  }
  return result;
}

uint64_t sub_10012A4E4()
{
  uint64_t v0;

  v0 = qword_1001C5698;
  swift_bridgeObjectRetain(off_1001C56A0);
  return v0;
}

unint64_t sub_10012A51C()
{
  unint64_t result;

  result = qword_1001C5770;
  if (!qword_1001C5770)
  {
    result = swift_getWitnessTable(&unk_100182CD8, &unk_1001B9AD0);
    atomic_store(result, (unint64_t *)&qword_1001C5770);
  }
  return result;
}

unint64_t sub_10012A560()
{
  unint64_t result;

  result = qword_1001C5778;
  if (!qword_1001C5778)
  {
    result = swift_getWitnessTable(&unk_100182D00, &unk_1001B9AD0);
    atomic_store(result, (unint64_t *)&qword_1001C5778);
  }
  return result;
}

unint64_t sub_10012A5A0()
{
  unint64_t result;

  result = qword_1001C5780;
  if (!qword_1001C5780)
  {
    result = swift_getWitnessTable(&unk_100182D38, &unk_1001B9AD0);
    atomic_store(result, (unint64_t *)&qword_1001C5780);
  }
  return result;
}

unint64_t sub_10012A5E0()
{
  unint64_t result;

  result = qword_1001C5788;
  if (!qword_1001C5788)
  {
    result = swift_getWitnessTable(&unk_100182D68, &unk_1001B9AD0);
    atomic_store(result, (unint64_t *)&qword_1001C5788);
  }
  return result;
}

void *sub_10012A61C()
{
  return &protocol witness table for String;
}

uint64_t sub_10012A628(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10012B1C0();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_10012B1FC(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_10012A674()
{
  unint64_t result;

  result = qword_1001C5798;
  if (!qword_1001C5798)
  {
    result = swift_getWitnessTable(&unk_100182DA0, &unk_1001B9AD0);
    atomic_store(result, (unint64_t *)&qword_1001C5798);
  }
  return result;
}

unint64_t sub_10012A6B4()
{
  unint64_t result;

  result = qword_1001C57A0;
  if (!qword_1001C57A0)
  {
    result = swift_getWitnessTable(&unk_100182DC8, &unk_1001B9AD0);
    atomic_store(result, (unint64_t *)&qword_1001C57A0);
  }
  return result;
}

unint64_t sub_10012A6F4()
{
  unint64_t result;

  result = qword_1001C57A8;
  if (!qword_1001C57A8)
  {
    result = swift_getWitnessTable(&unk_100182E48, &unk_1001B9AD0);
    atomic_store(result, (unint64_t *)&qword_1001C57A8);
  }
  return result;
}

void *sub_10012A730()
{
  return &protocol witness table for String;
}

uint64_t sub_10012A73C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10012A748@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ACEC(&qword_1001BEEB8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1001DA038, (uint64_t)sub_100128C90, a1);
}

void sub_10012A76C()
{
  sub_10004AFE0(&qword_1001C57B0, &qword_1001C57B8, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_10012A798(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012A194();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10012A7D4()
{
  unint64_t result;

  result = qword_1001C57C0;
  if (!qword_1001C57C0)
  {
    result = swift_getWitnessTable(&unk_100182E78, &unk_1001B9AD0);
    atomic_store(result, (unint64_t *)&qword_1001C57C0);
  }
  return result;
}

uint64_t sub_10012A814(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012A6F4();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10012A850()
{
  unint64_t result;

  result = qword_1001C57C8;
  if (!qword_1001C57C8)
  {
    result = swift_getWitnessTable(&unk_100182F70, &unk_1001B9A30);
    atomic_store(result, (unint64_t *)&qword_1001C57C8);
  }
  return result;
}

uint64_t sub_10012A88C(uint64_t a1)
{
  return sub_10012A8B0(a1, qword_1001DA088, 0xD00000000000001ALL, 0x80000001001899B0);
}

uint64_t sub_10012A8B0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_10012B320();
  sub_100093228(v7, a2);
  sub_100025184(v7, (uint64_t)a2);
  return LocalizedStringResource.init(stringLiteral:)(a3, a4);
}

uint64_t sub_10012A908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v25[3];

  v1 = type metadata accessor for InputConnectionBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10002325C();
  v5 = v4 - v3;
  sub_100005D40(&qword_1001C5810);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_100049D00();
  v9 = v7 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v25[-1] - v11;
  sub_100005D40(&qword_1001C5818);
  sub_100029068();
  __chkstk_darwin(v13);
  sub_10002325C();
  v16 = v15 - v14;
  v17 = sub_10012B320();
  sub_100029068();
  __chkstk_darwin(v18);
  sub_10003C164();
  sub_100005D40(&qword_1001C5820);
  sub_1000A8718();
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ALL, v19);
  sub_1000A8718();
  LocalizedStringResource.init(stringLiteral:)(v20, v21);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v16, 0, 1, v17);
  sub_10012B360();
  memset(v25, 0, sizeof(v25));
  sub_10012B2D4((uint64_t)v12);
  sub_10012B2D4(v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v5, enum case for InputConnectionBehavior.default(_:), v1);
  v22 = sub_10012A194();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v0, v16, v25, v12, v9, v5, v22);
}

void sub_10012AAC4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

unint64_t sub_10012AAF8()
{
  unint64_t result;

  result = qword_1001C57D0;
  if (!qword_1001C57D0)
  {
    result = swift_getWitnessTable(&unk_100182F98, &unk_1001B9A30);
    atomic_store(result, (unint64_t *)&qword_1001C57D0);
  }
  return result;
}

unint64_t sub_10012AB38()
{
  unint64_t result;

  result = qword_1001C57D8;
  if (!qword_1001C57D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, (unint64_t *)&qword_1001C57D8);
  }
  return result;
}

uint64_t sub_10012AB74(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10012B148();
  v5 = sub_10012B1C0();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_10012ABC8()
{
  uint64_t v0;

  v0 = qword_1001C56A8;
  swift_bridgeObjectRetain(off_1001C56B0);
  return v0;
}

unint64_t sub_10012AC00()
{
  unint64_t result;

  result = qword_1001C57E0;
  if (!qword_1001C57E0)
  {
    result = swift_getWitnessTable(&unk_100183028, &unk_1001B9A30);
    atomic_store(result, (unint64_t *)&qword_1001C57E0);
  }
  return result;
}

unint64_t sub_10012AC40()
{
  unint64_t result;

  result = qword_1001C57E8;
  if (!qword_1001C57E8)
  {
    result = swift_getWitnessTable(&unk_100183050, &unk_1001B9A30);
    atomic_store(result, (unint64_t *)&qword_1001C57E8);
  }
  return result;
}

uint64_t sub_10012AC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012AC88(a1, a2, a3, (uint64_t (*)(void))sub_10012AAF8);
}

uint64_t sub_10012AC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a4();
  return swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10012ACC8@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ACEC(&qword_1001BEED8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001DA088, (uint64_t)sub_10012A88C, a1);
}

uint64_t sub_10012ACEC@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  v7 = sub_100128EE8(a1, a2, a3, a4);
  v8 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v7, v8);
}

uint64_t sub_10012AD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10012B148();
  v7 = sub_10012B184();
  v8 = sub_10012B1C0();
  *v5 = v2;
  v5[1] = sub_10012ADD8;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_10012ADD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = sub_100070CDC();
  if (v0)
    return sub_100070E38(*(uint64_t (**)(void))(v1 + 8));
  return result;
}

uint64_t sub_10012AE10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10012A908();
  *a1 = result;
  return result;
}

uint64_t sub_10012AE34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012AAF8();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

void type metadata accessor for OpenWeatherHomeWorkShowLabelsIntent()
{
  sub_100044408();
}

void type metadata accessor for WeatherHomeWorkShowLabelsEntity.WeatherHomeWorkShowLabelsEntityQuery()
{
  sub_100044408();
}

void sub_10012AE78(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  sub_10012B374();
  sub_100006338();
}

_QWORD *sub_10012AEAC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

__n128 sub_10012AF10(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *sub_10012AF24(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  return a1;
}

uint64_t sub_10012AF68(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10012AFA8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for WeatherHomeWorkShowLabelsEntity()
{
  sub_100044408();
}

uint64_t sub_10012AFF8(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

void sub_10012B020(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  sub_10012B374();
  sub_100006338();
}

uint64_t *sub_10012B04C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *sub_10012B0A8(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

void type metadata accessor for WeatherHomeWorkShowLabelsEntity.UpdateIntent_value()
{
  sub_100044408();
}

void sub_10012B0F0()
{
  sub_10004AFE0(&qword_1001C57F8, &qword_1001C5800, (uint64_t)&protocol conformance descriptor for <> IntentResultContainer<A, B, C, D>);
}

void sub_10012B11C()
{
  sub_10004AFE0(&qword_1001C5808, &qword_1001C5800, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

unint64_t sub_10012B148()
{
  unint64_t result;

  result = qword_1001C5828;
  if (!qword_1001C5828)
  {
    result = swift_getWitnessTable(&unk_100182EA0, &unk_1001B9A30);
    atomic_store(result, (unint64_t *)&qword_1001C5828);
  }
  return result;
}

unint64_t sub_10012B184()
{
  unint64_t result;

  result = qword_1001C5830;
  if (!qword_1001C5830)
  {
    result = swift_getWitnessTable(&unk_100182EF0, &unk_1001B9A30);
    atomic_store(result, (unint64_t *)&qword_1001C5830);
  }
  return result;
}

unint64_t sub_10012B1C0()
{
  unint64_t result;

  result = qword_1001C5838;
  if (!qword_1001C5838)
  {
    result = swift_getWitnessTable(&unk_100182C48, &unk_1001B9AD0);
    atomic_store(result, (unint64_t *)&qword_1001C5838);
  }
  return result;
}

uint64_t sub_10012B1FC(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

unint64_t sub_10012B210()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0E98;
  if (!qword_1001C0E98)
  {
    v1 = objc_opt_self(NSUserDefaults);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001C0E98);
  }
  return result;
}

uint64_t sub_10012B250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001C58B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012B2A0()
{
  return LocalizedStringResource.init(stringLiteral:)(0x646E6120656D6F48, 0xED00006B726F5720);
}

uint64_t sub_10012B2C4@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10012B2D4(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 1, 1, v1);
}

uint64_t sub_10012B2E4(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10012B300@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_10012B308(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 1, 1, v1);
}

uint64_t sub_10012B318(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10012B320()
{
  return type metadata accessor for LocalizedStringResource(0);
}

uint64_t sub_10012B338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v1, v3, v0);
}

_QWORD *sub_10012B354(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return IntentParameter.wrappedValue.getter((uint64_t *)va);
}

uint64_t sub_10012B360()
{
  return type metadata accessor for IntentDialog(0);
}

uint64_t sub_10012B374()
{
  uint64_t v0;

  return swift_retain(v0);
}

unint64_t sub_10012B380()
{
  unint64_t result;

  result = qword_1001C58E0;
  if (!qword_1001C58E0)
  {
    result = swift_getWitnessTable(&unk_1001831E0, &unk_1001BA068);
    atomic_store(result, (unint64_t *)&qword_1001C58E0);
  }
  return result;
}

void sub_10012B3BC()
{
  sub_10004AFE0(&qword_1001C58E8, &qword_1001C58F0, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_10012B3E8()
{
  unint64_t v0;

  v0 = sub_10012C5B0();
  return _EntityURLRepresentation.init(_:)(0xD00000000000004DLL, 0x80000001001882D0, &unk_1001B9FE8, v0);
}

uint64_t sub_10012B430()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v0 = sub_100005D40(&qword_1001C5818);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100093228(v6, qword_1001DA0A0);
  sub_100025184(v6, (uint64_t)qword_1001DA0A0);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000018, 0x8000000100189BD0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v5, v2);
}

uint64_t sub_10012B53C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  sub_100005D40(&qword_1001C5840);
  sub_100029068();
  __chkstk_darwin(v1);
  sub_10002325C();
  v4 = v3 - v2;
  sub_100005D40(&qword_1001C5818);
  sub_100029068();
  __chkstk_darwin(v5);
  sub_1000443F0();
  v6 = sub_10012B320();
  sub_100029068();
  __chkstk_darwin(v7);
  sub_100049D00();
  v10 = v8 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v19 - v12;
  sub_10012D150();
  sub_1000A8718();
  LocalizedStringResource.init(stringLiteral:)(0x1000000000000010, v14);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 0, 1, v6);
  v15 = type metadata accessor for DisplayRepresentation.Image(0);
  sub_1000CD60C(v4, v16, v17, v15);
  sub_10012D150();
  return DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v13, v0, v4, &_swiftEmptyArrayStorage, v10);
}

uint64_t sub_10012B680(uint64_t a1)
{
  return sub_10012A8B0(a1, qword_1001DA0B8, 0xD00000000000001FLL, 0x8000000100189CF0);
}

uint64_t sub_10012B6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100005D40(&qword_1001C58B8);
  sub_100093228(v0, qword_1001DA0D0);
  v1 = sub_100025184(v0, (uint64_t)qword_1001DA0D0);
  IntentDescription.init(stringLiteral:)(0xD000000000000045, 0x8000000100189CA0);
  v2 = type metadata accessor for IntentDescription(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, v2);
}

uint64_t sub_10012B724()
{
  uint64_t v0;

  if (qword_1001BEEF0 != -1)
    swift_once(&qword_1001BEEF0, sub_10012B6A4);
  v0 = sub_100005D40(&qword_1001C58B8);
  return sub_100025184(v0, (uint64_t)qword_1001DA0D0);
}

uint64_t sub_10012B770()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_100183958);
  qword_1001DA0E8 = result;
  return result;
}

uint64_t *sub_10012B794()
{
  if (qword_1001BEEF8 != -1)
    swift_once(&qword_1001BEEF8, sub_10012B770);
  return &qword_1001DA0E8;
}

uint64_t sub_10012B7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3[21] = a2;
  v3[22] = a3;
  v3[20] = a1;
  v4 = sub_100005D40(&qword_1001C5888);
  v3[23] = sub_10012B2C4(*(_QWORD *)(v4 - 8));
  v5 = sub_100005D40(&qword_1001C5890);
  v3[24] = sub_10012B2C4(*(_QWORD *)(v5 - 8));
  v6 = sub_100005D40(&qword_1001C5A80);
  v3[25] = sub_10012B2C4(*(_QWORD *)(v6 - 8));
  v7 = sub_10012B360();
  v3[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[27] = v8;
  v3[28] = sub_10012B2C4(v8);
  v9 = sub_100005D40(&qword_1001C5A88);
  v3[29] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[30] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[31] = swift_task_alloc(v11);
  v3[32] = swift_task_alloc(v11);
  sub_10012B348();
  return sub_100070D44();
}

uint64_t sub_10012B8A0()
{
  uint64_t v0;
  __int128 v1;
  _QWORD *v2;
  unint64_t v3;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 48) = v1;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to IntentDialog._CapturedContent.init<>(entity:_:)[1]);
  *(_QWORD *)(v0 + 264) = v2;
  v3 = sub_10012C5B0();
  *v2 = v0;
  v2[1] = sub_10012B930;
  return IntentDialog._CapturedContent.init<>(entity:_:)(*(_QWORD *)(v0 + 256), v0 + 40, sub_10012BCC0, 0, &unk_1001B9FE8, v3);
}

uint64_t sub_10012B930()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  sub_10012B300(*(_QWORD *)(v2 + 264), &v2);
  sub_10012B348();
  return sub_100070D44();
}

uint64_t sub_10012B974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 272) = v1;
  *(_QWORD *)(v0 + 280) = v2;
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 313));
  *(_BYTE *)(v0 + 312) = *(_BYTE *)(v0 + 313);
  if (qword_1001BEEF8 != -1)
    swift_once(&qword_1001BEEF8, sub_10012B770);
  v3 = qword_1001DA0E8;
  *(_QWORD *)(v0 + 288) = qword_1001DA0E8;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  sub_10012B374();
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 296) = v5;
  sub_10004AFE0(&qword_1001C5A68, &qword_1001C5A70, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v5 = v0;
  v5[1] = sub_10012BA74;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 312, v3, &type metadata for Bool, v6);
}

uint64_t sub_10012BA74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc(v2);
  sub_1000CD56C();
  swift_release(v3);
  swift_bridgeObjectRelease(v4);
  sub_10012B348();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_10012BAF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 232);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 216);
  v20 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 136));
  v6 = *(_OWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 112) = *(_QWORD *)(v0 + 136);
  *(_OWORD *)(v0 + 120) = v6;
  v7 = type metadata accessor for _GeneratedContentOptions(0);
  sub_1000CD60C(v5, v8, v9, v7);
  v10 = type metadata accessor for _GeneratedContentFallback(0);
  sub_1000CD60C(v4, v11, v12, v10);
  v13 = sub_10012B380();
  v14 = sub_10012C704();
  IntentDialog._GeneratedDialogContent.init(fromResult:options:fallbackDialog:)(sub_10012BCC0, 0, v5, v4, &unk_1001BA068, &unk_1001B9FE8, v13, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v17, v16);
  IntentDialog.init<A, B>(from:capturedContent:)(v3, v1, &unk_1001BA068, &unk_1001B9FE8, v13, v14);
  static IntentResult.result<A>(value:dialog:)(v0 + 112, v18, &unk_1001B9FE8, v14);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v17, v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v1);
  sub_100070FA0();
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012BCC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = sub_100005D40(&qword_1001C5A90);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1000443F0();
  if (qword_1001BEEF8 != -1)
    swift_once(&qword_1001BEEF8, sub_10012B770);
  v3 = qword_1001DA0E8;
  v4 = swift_retain(qword_1001DA0E8);
  static _DialogBuilderEntity.buildExpression<A, B>(_:)(v4);
  swift_release(v3);
  v5 = sub_10012C704();
  sub_10004AFE0(&qword_1001C5A98, &qword_1001C5A90, (uint64_t)&protocol conformance descriptor for _NLGRepresentationEntity<A>);
  static _DialogBuilderEntity.buildBlock<A>(_:)(v0, &unk_1001B9FE8, v1, v5, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10012BDBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];

  sub_100005D40(&qword_1001C5870);
  sub_100029068();
  __chkstk_darwin(v2);
  sub_10002325C();
  v26 = v4 - v3;
  v5 = type metadata accessor for InputConnectionBehavior(0);
  __chkstk_darwin(v5);
  sub_1000443F0();
  sub_100005D40(&qword_1001C5810);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_100049D00();
  v9 = v7 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - v11;
  sub_100005D40(&qword_1001C5818);
  sub_100029068();
  __chkstk_darwin(v13);
  sub_10003C164();
  sub_10012B320();
  sub_100029068();
  __chkstk_darwin(v14);
  sub_10002325C();
  v17 = v16 - v15;
  v25 = sub_100005D40(&qword_1001C5A30);
  sub_10012D160(34, 0x8000000100189C30);
  sub_10012B2D4(v1);
  sub_10012B360();
  memset(v27, 0, sizeof(v27));
  sub_10012B308((uint64_t)v12);
  sub_10012B308(v9);
  sub_10012B338();
  v18 = sub_10012C5B0();
  v25 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v1, v27, v12, v9, v0, v18);
  sub_100005D40(&qword_1001C5878);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000003ELL, 0x8000000100189C60);
  sub_10012B2D4(v1);
  LOBYTE(v27[0]) = 2;
  v19 = type metadata accessor for Bool.IntentDisplayName(0);
  v20 = v26;
  sub_1000CD60C(v26, v21, v22, v19);
  sub_10012B308((uint64_t)v12);
  sub_10012B338();
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v17, v1, v27, v20, v12, v0);
  return v25;
}

uint64_t sub_10012BFF8()
{
  sub_10012B794();
  return swift_retain(qword_1001DA0E8);
}

unint64_t sub_10012C018()
{
  unint64_t result;

  result = qword_1001C58F8;
  if (!qword_1001C58F8)
  {
    result = swift_getWitnessTable(&unk_100183270, &unk_1001BA068);
    atomic_store(result, (unint64_t *)&qword_1001C58F8);
  }
  return result;
}

unint64_t sub_10012C058()
{
  unint64_t result;

  result = qword_1001C5900;
  if (!qword_1001C5900)
  {
    result = swift_getWitnessTable(&unk_100183298, &unk_1001BA068);
    atomic_store(result, (unint64_t *)&qword_1001C5900);
  }
  return result;
}

uint64_t sub_10012C094(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1001A0EB8, 1) + 8);
}

uint64_t sub_10012C0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012AC88(a1, a2, a3, (uint64_t (*)(void))sub_10012B380);
}

uint64_t sub_10012C0C4@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ACEC(&qword_1001BEEE8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001DA0B8, (uint64_t)sub_10012B680, a1);
}

uint64_t sub_10012C0E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_10012B724();
  return sub_10012B250(v2, a1);
}

uint64_t sub_10012C10C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_1001C5A7C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10012B298;
  return sub_10012B7D4(a1, v5, v4);
}

uint64_t sub_10012C170@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10012BDBC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_10012C194()
{
  return 0xD000000000000034;
}

unint64_t sub_10012C1B4()
{
  unint64_t result;

  result = qword_1001C5910;
  if (!qword_1001C5910)
  {
    result = swift_getWitnessTable(&unk_1001832F4, &unk_1001B9F70);
    atomic_store(result, (unint64_t *)&qword_1001C5910);
  }
  return result;
}

unint64_t sub_10012C1F4()
{
  unint64_t result;

  result = qword_1001C5918;
  if (!qword_1001C5918)
  {
    result = swift_getWitnessTable(&unk_100183428, &unk_1001B9FE8);
    atomic_store(result, (unint64_t *)&qword_1001C5918);
  }
  return result;
}

uint64_t sub_10012C230(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10012C248, 0, 0);
}

uint64_t sub_10012C248()
{
  uint64_t v0;
  _BYTE *v1;

  if (qword_1001BEE60 != -1)
    swift_once(&qword_1001BEE60, sub_10008AC18);
  v1 = *(_BYTE **)(v0 + 16);
  *v1 = sub_10008AD0C() & 1;
  return sub_10012B318(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10012C2B0(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_10012C2CC, 0, 0);
}

uint64_t sub_10012C2CC()
{
  uint64_t v0;

  if (qword_1001BEE60 != -1)
    swift_once(&qword_1001BEE60, sub_10008AC18);
  sub_10008AD6C();
  sub_10012B210();
  static NSUserDefaults.postSettingsUpdatedNotification()();
  return sub_100070E38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10012C338()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10012B320();
  *(_QWORD *)(v0 + 16) = sub_10012B2C4(*(_QWORD *)(v1 - 8));
  sub_10012B348();
  return sub_100070D44();
}

uint64_t sub_10012C370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = *(_QWORD *)(v0 + 16);
  sub_100005D40(&qword_1001C58F0);
  sub_1000A8718();
  sub_10012D160(24, v2);
  sub_10004AFE0(&qword_1001C5A68, &qword_1001C5A70, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v1, &unk_1001C5A58, 0, &unk_1001C5A60, 0, &unk_1001BA068, v3);
  sub_100070FA0();
  sub_1000A8718();
  return v4();
}

uint64_t sub_10012C43C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1001C5A54);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100129FA0;
  return sub_10012C338();
}

unint64_t sub_10012C488()
{
  unint64_t result;

  result = qword_1001C5928;
  if (!qword_1001C5928)
  {
    result = swift_getWitnessTable(&unk_10018332C, &unk_1001B9F70);
    atomic_store(result, (unint64_t *)&qword_1001C5928);
  }
  return result;
}

uint64_t sub_10012C4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10012C818();
  *v4 = v2;
  v4[1] = sub_10012A0B4;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_10012C530()
{
  unint64_t result;

  result = qword_1001C5938;
  if (!qword_1001C5938)
  {
    result = swift_getWitnessTable(&unk_100183384, &unk_1001B9F70);
    atomic_store(result, (unint64_t *)&qword_1001C5938);
  }
  return result;
}

unint64_t sub_10012C570()
{
  unint64_t result;

  result = qword_1001C5940;
  if (!qword_1001C5940)
  {
    result = swift_getWitnessTable(&unk_1001833E4, &unk_1001B9F70);
    atomic_store(result, (unint64_t *)&qword_1001C5940);
  }
  return result;
}

unint64_t sub_10012C5B0()
{
  unint64_t result;

  result = qword_1001C5948[0];
  if (!qword_1001C5948[0])
  {
    result = swift_getWitnessTable(&unk_1001834C0, &unk_1001B9FE8);
    atomic_store(result, qword_1001C5948);
  }
  return result;
}

uint64_t sub_10012C5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10012C818();
  *v5 = v2;
  v5[1] = sub_10012A23C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_10012C658(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10012C818();
  *v4 = v2;
  v4[1] = sub_10012B29C;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_10012C6C4()
{
  unint64_t result;

  result = qword_1001C5960;
  if (!qword_1001C5960)
  {
    result = swift_getWitnessTable(&unk_10018340C, &unk_1001B9F70);
    atomic_store(result, (unint64_t *)&qword_1001C5960);
  }
  return result;
}

unint64_t sub_10012C704()
{
  unint64_t result;

  result = qword_1001C5968;
  if (!qword_1001C5968)
  {
    result = swift_getWitnessTable(&unk_100183630, &unk_1001B9FE8);
    atomic_store(result, (unint64_t *)&qword_1001C5968);
  }
  return result;
}

unint64_t sub_10012C744()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5970;
  if (!qword_1001C5970)
  {
    v1 = sub_100005DC4(qword_1001C5978);
    sub_10012C704();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001C5970);
  }
  return result;
}

uint64_t sub_10012C7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10012C488();
  *v5 = v2;
  v5[1] = sub_1000709F8;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_10012C818()
{
  unint64_t result;

  result = qword_1001C5990;
  if (!qword_1001C5990)
  {
    result = swift_getWitnessTable(&unk_1001832B4, &unk_1001B9F70);
    atomic_store(result, (unint64_t *)&qword_1001C5990);
  }
  return result;
}

uint64_t sub_10012C854()
{
  uint64_t v0;

  v0 = qword_1001C58C0;
  swift_bridgeObjectRetain(off_1001C58C8);
  return v0;
}

unint64_t sub_10012C88C()
{
  unint64_t result;

  result = qword_1001C5998;
  if (!qword_1001C5998)
  {
    result = swift_getWitnessTable(&unk_100183518, &unk_1001B9FE8);
    atomic_store(result, (unint64_t *)&qword_1001C5998);
  }
  return result;
}

unint64_t sub_10012C8D0()
{
  unint64_t result;

  result = qword_1001C59A0;
  if (!qword_1001C59A0)
  {
    result = swift_getWitnessTable(&unk_100183540, &unk_1001B9FE8);
    atomic_store(result, (unint64_t *)&qword_1001C59A0);
  }
  return result;
}

unint64_t sub_10012C910()
{
  unint64_t result;

  result = qword_1001C59A8;
  if (!qword_1001C59A8)
  {
    result = swift_getWitnessTable(&unk_100183578, &unk_1001B9FE8);
    atomic_store(result, (unint64_t *)&qword_1001C59A8);
  }
  return result;
}

unint64_t sub_10012C950()
{
  unint64_t result;

  result = qword_1001C59B0;
  if (!qword_1001C59B0)
  {
    result = swift_getWitnessTable(&unk_1001835A8, &unk_1001B9FE8);
    atomic_store(result, (unint64_t *)&qword_1001C59B0);
  }
  return result;
}

uint64_t sub_10012C990(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10012D110();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_10012B1FC(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_10012C9DC()
{
  unint64_t result;

  result = qword_1001C59C0;
  if (!qword_1001C59C0)
  {
    result = swift_getWitnessTable(&unk_1001835E0, &unk_1001B9FE8);
    atomic_store(result, (unint64_t *)&qword_1001C59C0);
  }
  return result;
}

unint64_t sub_10012CA1C()
{
  unint64_t result;

  result = qword_1001C59C8;
  if (!qword_1001C59C8)
  {
    result = swift_getWitnessTable(&unk_100183608, &unk_1001B9FE8);
    atomic_store(result, (unint64_t *)&qword_1001C59C8);
  }
  return result;
}

unint64_t sub_10012CA60()
{
  unint64_t result;

  result = qword_1001C59D0;
  if (!qword_1001C59D0)
  {
    result = swift_getWitnessTable(&unk_100183688, &unk_1001B9FE8);
    atomic_store(result, (unint64_t *)&qword_1001C59D0);
  }
  return result;
}

uint64_t sub_10012CA9C@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ACEC(&qword_1001BEEE0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1001DA0A0, (uint64_t)sub_10012B430, a1);
}

void sub_10012CAC0()
{
  sub_10004AFE0(&qword_1001C59D8, &qword_1001C59E0, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_10012CAEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012C5B0();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10012CB28()
{
  unint64_t result;

  result = qword_1001C59E8;
  if (!qword_1001C59E8)
  {
    result = swift_getWitnessTable(&unk_1001836B8, &unk_1001B9FE8);
    atomic_store(result, (unint64_t *)&qword_1001C59E8);
  }
  return result;
}

uint64_t sub_10012CB68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012CA60();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10012CBA4()
{
  unint64_t result;

  result = qword_1001C59F0;
  if (!qword_1001C59F0)
  {
    result = swift_getWitnessTable(&unk_1001837B0, &unk_1001B9F48);
    atomic_store(result, (unint64_t *)&qword_1001C59F0);
  }
  return result;
}

uint64_t sub_10012CBE4(uint64_t a1)
{
  return sub_10012A8B0(a1, qword_1001DA0F0, 0xD000000000000025, 0x8000000100189BA0);
}

uint64_t sub_10012CC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v25[3];

  v1 = type metadata accessor for InputConnectionBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10002325C();
  v5 = v4 - v3;
  sub_100005D40(&qword_1001C5810);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_100049D00();
  v9 = v7 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v25[-1] - v11;
  sub_100005D40(&qword_1001C5818);
  sub_100029068();
  __chkstk_darwin(v13);
  sub_10002325C();
  v16 = v15 - v14;
  v17 = sub_10012B320();
  sub_100029068();
  __chkstk_darwin(v18);
  sub_10003C164();
  sub_100005D40(&qword_1001C5A30);
  sub_1000A8718();
  sub_10012D160(32, v19);
  sub_1000A8718();
  LocalizedStringResource.init(stringLiteral:)(v20, v21);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v16, 0, 1, v17);
  sub_10012B360();
  memset(v25, 0, sizeof(v25));
  sub_10012B2D4((uint64_t)v12);
  sub_10012B2D4(v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v5, enum case for InputConnectionBehavior.default(_:), v1);
  v22 = sub_10012C5B0();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v0, v16, v25, v12, v9, v5, v22);
}

unint64_t sub_10012CDC4()
{
  unint64_t result;

  result = qword_1001C59F8;
  if (!qword_1001C59F8)
  {
    result = swift_getWitnessTable(&unk_1001837D8, &unk_1001B9F48);
    atomic_store(result, (unint64_t *)&qword_1001C59F8);
  }
  return result;
}

uint64_t sub_10012CE00(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10012D098();
  v5 = sub_10012D110();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_10012CE54()
{
  uint64_t v0;

  v0 = qword_1001C58D0;
  swift_bridgeObjectRetain(off_1001C58D8);
  return v0;
}

unint64_t sub_10012CE8C()
{
  unint64_t result;

  result = qword_1001C5A00;
  if (!qword_1001C5A00)
  {
    result = swift_getWitnessTable(&unk_100183868, &unk_1001B9F48);
    atomic_store(result, (unint64_t *)&qword_1001C5A00);
  }
  return result;
}

unint64_t sub_10012CECC()
{
  unint64_t result;

  result = qword_1001C5A08;
  if (!qword_1001C5A08)
  {
    result = swift_getWitnessTable(&unk_100183890, &unk_1001B9F48);
    atomic_store(result, (unint64_t *)&qword_1001C5A08);
  }
  return result;
}

uint64_t sub_10012CF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012AC88(a1, a2, a3, (uint64_t (*)(void))sub_10012CDC4);
}

uint64_t sub_10012CF14@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ACEC(&qword_1001BEF00, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001DA0F0, (uint64_t)sub_10012CBE4, a1);
}

uint64_t sub_10012CF38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10012D098();
  v7 = sub_10012D0D4();
  v8 = sub_10012D110();
  *v5 = v2;
  v5[1] = sub_10012ADD8;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_10012CFC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10012CC08();
  *a1 = result;
  return result;
}

uint64_t sub_10012CFE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012CDC4();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

void type metadata accessor for OpenWeatherPrivacyResetIdentifierIntent()
{
  sub_100044408();
}

void type metadata accessor for WeatherPrivacyResetIdentifierEntity.WeatherPrivacyResetIdentifierEntityQuery()
{
  sub_100044408();
}

void type metadata accessor for WeatherPrivacyResetIdentifierEntity()
{
  sub_100044408();
}

void type metadata accessor for WeatherPrivacyResetIdentifierEntity.UpdateIntent_value()
{
  sub_100044408();
}

void sub_10012D040()
{
  sub_10004AFE0(&qword_1001C5A18, &qword_1001C5A20, (uint64_t)&protocol conformance descriptor for <> IntentResultContainer<A, B, C, D>);
}

void sub_10012D06C()
{
  sub_10004AFE0(&qword_1001C5A28, &qword_1001C5A20, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

unint64_t sub_10012D098()
{
  unint64_t result;

  result = qword_1001C5A38;
  if (!qword_1001C5A38)
  {
    result = swift_getWitnessTable(&unk_1001836E0, &unk_1001B9F48);
    atomic_store(result, (unint64_t *)&qword_1001C5A38);
  }
  return result;
}

unint64_t sub_10012D0D4()
{
  unint64_t result;

  result = qword_1001C5A40;
  if (!qword_1001C5A40)
  {
    result = swift_getWitnessTable(&unk_100183730, &unk_1001B9F48);
    atomic_store(result, (unint64_t *)&qword_1001C5A40);
  }
  return result;
}

unint64_t sub_10012D110()
{
  unint64_t result;

  result = qword_1001C5A48;
  if (!qword_1001C5A48)
  {
    result = swift_getWitnessTable(&unk_100183488, &unk_1001B9FE8);
    atomic_store(result, &qword_1001C5A48);
  }
  return result;
}

uint64_t sub_10012D150()
{
  uint64_t v0;

  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000018, v0);
}

uint64_t sub_10012D160(uint64_t a1, uint64_t a2)
{
  return LocalizedStringResource.init(stringLiteral:)(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2);
}

unint64_t sub_10012D16C()
{
  unint64_t result;

  result = qword_1001C5AC0;
  if (!qword_1001C5AC0)
  {
    result = swift_getWitnessTable(&unk_100183A3C, &unk_1001BA610);
    atomic_store(result, (unint64_t *)&qword_1001C5AC0);
  }
  return result;
}

void sub_10012D1A8()
{
  sub_10004AFE0(&qword_1001C5AC8, &qword_1001C5AD0, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_10012D1D4(char a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  if (a1)
  {
    if (a1 == 1)
    {
      v1 = 0x65686E6572686146;
      v2 = 0xEA00000000007469;
    }
    else
    {
      v1 = 0x5320726F7272694DLL;
      v2 = 0xED00006D65747379;
    }
  }
  else
  {
    v1 = 0x737569736C6543;
    v2 = 0xE700000000000000;
  }
  v3 = LocalizedStringKey.init(stringLiteral:)(v1, v2);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v10 = qword_1001DA1E8;
  v11 = (id)qword_1001DA1E8;
  return Text.init(_:tableName:bundle:comment:)(v3, v5, v7 & 1, v9, 0, 0, v10);
}

uint64_t sub_10012D2E4()
{
  unint64_t v0;

  v0 = sub_10012E64C();
  return _EntityURLRepresentation.init(_:)(0xD000000000000050, 0x8000000100188320, &unk_1001BA590, v0);
}

void sub_10012D32C(uint64_t a1)
{
  sub_10012F0B4(a1, qword_1001DA108);
}

uint64_t sub_10012D338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  sub_100005D40(&qword_1001C5840);
  sub_100029068();
  __chkstk_darwin(v2);
  sub_100093598();
  sub_100005D40(&qword_1001C5818);
  sub_100029068();
  __chkstk_darwin(v3);
  sub_1000443F0();
  v4 = sub_10012B320();
  sub_100029068();
  __chkstk_darwin(v5);
  sub_100049D00();
  v8 = v6 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - v10;
  sub_10012FC1C();
  sub_1000A8718();
  LocalizedStringResource.init(stringLiteral:)(0x1000000000000010, v12);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, v4);
  v13 = type metadata accessor for DisplayRepresentation.Image(0);
  sub_1000CD60C(v0, v14, v15, v13);
  sub_10012FC1C();
  return DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v11, v1, v0, &_swiftEmptyArrayStorage, v8);
}

uint64_t sub_10012D474(uint64_t a1)
{
  return sub_10012A8B0(a1, qword_1001DA120, 0xD000000000000017, 0x8000000100189E80);
}

uint64_t sub_10012D498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100005D40(&qword_1001C58B8);
  sub_100093228(v0, qword_1001DA138);
  v1 = sub_100025184(v0, (uint64_t)qword_1001DA138);
  IntentDescription.init(stringLiteral:)(0xD000000000000035, 0x8000000100189E40);
  v2 = type metadata accessor for IntentDescription(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, v2);
}

uint64_t sub_10012D518()
{
  uint64_t v0;

  if (qword_1001BEF18 != -1)
    swift_once(&qword_1001BEF18, sub_10012D498);
  v0 = sub_100005D40(&qword_1001C58B8);
  return sub_100025184(v0, (uint64_t)qword_1001DA138);
}

uint64_t sub_10012D564()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_100184478);
  qword_1001DA150 = result;
  return result;
}

uint64_t *sub_10012D588()
{
  if (qword_1001BEF20 != -1)
    swift_once(&qword_1001BEF20, sub_10012D564);
  return &qword_1001DA150;
}

uint64_t sub_10012D5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[21] = a2;
  v3[22] = a3;
  v3[20] = a1;
  v4 = sub_100005D40(&qword_1001C5888);
  v3[23] = sub_10012B2C4(*(_QWORD *)(v4 - 8));
  v5 = sub_100005D40(&qword_1001C5890);
  v3[24] = sub_10012B2C4(*(_QWORD *)(v5 - 8));
  v6 = sub_100005D40(&qword_1001C5CD8);
  v3[25] = sub_10012B2C4(*(_QWORD *)(v6 - 8));
  v7 = sub_10012B360();
  v3[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[27] = v8;
  v3[28] = sub_10012B2C4(v8);
  v9 = sub_100005D40(&qword_1001C5CE0);
  v3[29] = v9;
  v3[30] = *(_QWORD *)(v9 - 8);
  v3[31] = sub_10012FC38();
  v3[32] = sub_10012FC38();
  sub_10012B348();
  return sub_100070D44();
}

uint64_t sub_10012D68C()
{
  uint64_t v0;
  __int128 v1;
  _QWORD *v2;
  unint64_t v3;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 48) = v1;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to IntentDialog._CapturedContent.init<>(entity:_:)[1]);
  *(_QWORD *)(v0 + 264) = v2;
  v3 = sub_10012E64C();
  *v2 = v0;
  v2[1] = sub_10012D71C;
  return IntentDialog._CapturedContent.init<>(entity:_:)(*(_QWORD *)(v0 + 256), v0 + 40, sub_10012DA8C, 0, &unk_1001BA590, v3);
}

uint64_t sub_10012D71C()
{
  uint64_t v0;

  sub_10012FC0C();
  sub_10012FBCC(*(_QWORD *)(v0 + 264));
  sub_10012B348();
  return sub_100070D44();
}

uint64_t sub_10012D750()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter(v0 + 8);
  v0[11] = v0[8];
  v1 = v0[9];
  v2 = v0[10];
  v0[34] = v1;
  v0[35] = v2;
  v0[12] = v1;
  v0[13] = v2;
  IntentParameter.wrappedValue.getter(v0 + 39);
  if (qword_1001BEF20 != -1)
    swift_once(&qword_1001BEF20, sub_10012D564);
  v3 = qword_1001DA150;
  v0[36] = qword_1001DA150;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  sub_10012B374();
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[37] = v5;
  sub_10004AFE0(&qword_1001C5CB8, &qword_1001C5CC0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v5 = v0;
  v5[1] = sub_10012D848;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 39, v3, &unk_1001BA518, v6);
}

uint64_t sub_10012D848()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10012FC0C();
  v3 = v2[37];
  v5 = v2[34];
  v4 = v2[35];
  *v6 = *v1;
  v2[38] = v0;
  swift_task_dealloc(v3);
  sub_1000CD56C();
  swift_release(v4);
  swift_bridgeObjectRelease(v5);
  sub_10012B348();
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_10012D8C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 232);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 216);
  v20 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 136));
  v6 = *(_OWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 112) = *(_QWORD *)(v0 + 136);
  *(_OWORD *)(v0 + 120) = v6;
  v7 = type metadata accessor for _GeneratedContentOptions(0);
  sub_1000CD60C(v5, v8, v9, v7);
  v10 = type metadata accessor for _GeneratedContentFallback(0);
  sub_1000CD60C(v4, v11, v12, v10);
  v13 = sub_10012D16C();
  v14 = sub_10012E7A0();
  IntentDialog._GeneratedDialogContent.init(fromResult:options:fallbackDialog:)(sub_10012DA8C, 0, v5, v4, &unk_1001BA610, &unk_1001BA590, v13, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v17, v16);
  IntentDialog.init<A, B>(from:capturedContent:)(v3, v1, &unk_1001BA610, &unk_1001BA590, v13, v14);
  static IntentResult.result<A>(value:dialog:)(v0 + 112, v18, &unk_1001BA590, v14);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v17, v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v1);
  sub_100070FA0();
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10012DA90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = sub_100005D40(&qword_1001C5CE8);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1000443F0();
  if (qword_1001BEF20 != -1)
    swift_once(&qword_1001BEF20, sub_10012D564);
  v3 = qword_1001DA150;
  v4 = swift_retain(qword_1001DA150);
  static _DialogBuilderEntity.buildExpression<A, B>(_:)(v4);
  swift_release(v3);
  v5 = sub_10012E7A0();
  sub_10004AFE0(&qword_1001C5CF0, &qword_1001C5CE8, (uint64_t)&protocol conformance descriptor for _NLGRepresentationEntity<A>);
  static _DialogBuilderEntity.buildBlock<A>(_:)(v0, &unk_1001BA590, v1, v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  sub_1000FA1C4();
}

uint64_t sub_10012DB7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v30 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  sub_10002325C();
  v29 = v3 - v2;
  sub_100005D40(&qword_1001C5810);
  sub_100029068();
  __chkstk_darwin(v4);
  sub_100049D00();
  v7 = v5 - v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - v9;
  sub_100005D40(&qword_1001C5818);
  sub_100029068();
  __chkstk_darwin(v11);
  sub_10003C164();
  sub_10012B320();
  sub_100029068();
  __chkstk_darwin(v12);
  sub_10002325C();
  v28 = sub_100005D40(&qword_1001C5C80);
  sub_10012D160(26, 0x8000000100189DF0);
  sub_10012B2D4(v0);
  sub_10012B360();
  v32 = 0;
  v33 = 0;
  v31 = 0;
  sub_10012B308((uint64_t)v10);
  v13 = v7;
  sub_10012B308(v7);
  v14 = enum case for InputConnectionBehavior.default(_:);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  v15 = v29;
  v16 = v30;
  v27(v29, enum case for InputConnectionBehavior.default(_:), v30);
  sub_10012E64C();
  v17 = sub_10012FBF0();
  v28 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v18, v19, v20, v21, v22, v23);
  sub_100005D40(&qword_1001C5CC8);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000002ELL, 0x8000000100189E10);
  sub_10012B2D4(v0);
  LOBYTE(v31) = 3;
  sub_10012B308((uint64_t)v10);
  sub_10012B308(v13);
  v27(v15, v14, v16);
  sub_1000EC9B4();
  v24 = sub_10012FBF0();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v24);
  return v28;
}

uint64_t sub_10012DD9C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1001290F0();
  *a1 = result;
  return result;
}

uint64_t sub_10012DDC4(char *a1)
{
  return sub_100129120(*a1);
}

uint64_t sub_10012DDD0()
{
  sub_10012D588();
  return swift_retain(qword_1001DA150);
}

unint64_t sub_10012DDF0()
{
  unint64_t result;

  result = qword_1001C5AD8;
  if (!qword_1001C5AD8)
  {
    result = swift_getWitnessTable(&unk_100183ACC, &unk_1001BA610);
    atomic_store(result, (unint64_t *)&qword_1001C5AD8);
  }
  return result;
}

unint64_t sub_10012DE30()
{
  unint64_t result;

  result = qword_1001C5AE0;
  if (!qword_1001C5AE0)
  {
    result = swift_getWitnessTable(&unk_100183AF4, &unk_1001BA610);
    atomic_store(result, (unint64_t *)&qword_1001C5AE0);
  }
  return result;
}

uint64_t sub_10012DE6C(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1001A0F88, 1) + 8);
}

uint64_t sub_10012DE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012F838(a1, a2, a3, (uint64_t (*)(void))sub_10012D16C, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_10012DEA4@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ACEC(&qword_1001BEF10, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001DA120, (uint64_t)sub_10012D474, a1);
}

uint64_t sub_10012DEC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_10012D518();
  return sub_10012B250(v2, a1);
}

uint64_t sub_10012DEEC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_1001C5CD4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10012B298;
  return sub_10012D5C8(a1, v5, v4);
}

uint64_t sub_10012DF50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10012DB7C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_10012DF74()
{
  return 0xD00000000000002DLL;
}

unint64_t sub_10012DF94()
{
  unint64_t result;

  result = qword_1001C5AF0;
  if (!qword_1001C5AF0)
  {
    result = swift_getWitnessTable(&unk_100183B50, &unk_1001BA488);
    atomic_store(result, (unint64_t *)&qword_1001C5AF0);
  }
  return result;
}

uint64_t sub_10012DFD4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10012DFEC, 0, 0);
}

uint64_t sub_10012DFEC()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  if (qword_1001BEE60 != -1)
    swift_once(&qword_1001BEE60, sub_10008AC18);
  v1 = *(void **)(qword_1001D9F70 + OBJC_IVAR____TtC13WeatherWidget20WeatherSettingsState_units);
  *(_QWORD *)(v0 + 24) = v1;
  v1;
  v2 = (_QWORD *)sub_10012FC38();
  *(_QWORD *)(v0 + 32) = v2;
  *v2 = v0;
  v2[1] = sub_10012E080;
  return sub_10015FF30();
}

uint64_t sub_10012E080()
{
  uint64_t v0;
  void *v1;

  sub_10012FC0C();
  v1 = *(void **)(v0 + 24);
  sub_10012FBCC(*(_QWORD *)(v0 + 32));

  sub_10012B348();
  return sub_100070D44();
}

uint64_t sub_10012E0B8()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  char v6;
  char v7;
  id v8;
  char v9;

  v1 = *(id *)(qword_1001D9F70 + OBJC_IVAR____TtC13WeatherWidget20WeatherSettingsState_units);
  v2 = (void *)sub_100160318();

  if (v2)
  {
    sub_100070744(0, (unint64_t *)&qword_1001BF6E0, NSUnitTemperature_ptr);
    v3 = (void *)objc_opt_self(NSUnitTemperature);
    v4 = v2;
    v5 = objc_msgSend(v3, "celsius");
    v6 = static NSObject.== infix(_:_:)(v4, v5);

    if ((v6 & 1) != 0)
    {

      v7 = 0;
    }
    else
    {
      v8 = objc_msgSend(v3, "fahrenheit");
      v9 = static NSObject.== infix(_:_:)(v4, v8);

      if ((v9 & 1) != 0)
        v7 = 1;
      else
        v7 = 2;
    }
  }
  else
  {
    v7 = 2;
  }
  **(_BYTE **)(v0 + 16) = v7;
  return sub_10012FBDC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10012E1E0(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_10012E1FC, 0, 0);
}

uint64_t sub_10012E1FC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;

  sub_10012E2C0(*(_BYTE *)(v0 + 16));
  v2 = v1;
  if (qword_1001BEE60 != -1)
    swift_once(&qword_1001BEE60, sub_10008AC18);
  v3 = *(id *)(qword_1001D9F70 + OBJC_IVAR____TtC13WeatherWidget20WeatherSettingsState_units);
  sub_1001601C4(v2);

  sub_100070744(0, (unint64_t *)&qword_1001C0E98, NSUserDefaults_ptr);
  static NSUserDefaults.postSettingsUpdatedNotification()();
  sub_1000A8718();
  static WidgetUtilities.reloadWidget(reason:)(0xD000000000000010);

  return sub_10012B318(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10012E2C0(char a1)
{
  char **v1;
  id v2;

  if (!a1)
  {
    v1 = &selRef_celsius;
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    v1 = &selRef_fahrenheit;
LABEL_5:
    v2 = objc_msgSend((id)objc_opt_self(NSUnitTemperature), *v1);
  }
  sub_100006338();
}

uint64_t sub_10012E31C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10012B320();
  *(_QWORD *)(v0 + 16) = sub_10012B2C4(*(_QWORD *)(v1 - 8));
  sub_10012B348();
  return sub_100070D44();
}

uint64_t sub_10012E354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t (*v6)(void);

  v1 = *(_QWORD *)(v0 + 16);
  sub_100005D40(&qword_1001C5AD0);
  sub_1000A8718();
  sub_10012D160(16, v2);
  sub_10004AFE0(&qword_1001C5CB8, &qword_1001C5CC0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v4 = v3;
  v5 = sub_1000EC9B4();
  _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v1, &unk_1001C5CA8, 0, &unk_1001C5CB0, 0, &unk_1001BA610, v4, v5);
  sub_100070FA0();
  sub_1000A8718();
  return v6();
}

uint64_t sub_10012E42C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1001C5CA4);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_10012E474;
  return sub_10012E31C();
}

uint64_t sub_10012E474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v8 = *v4;
  v11 = v8;
  sub_10012FC2C(*(_QWORD *)(v8 + 24), &v11);
  if (!v3)
  {
    v9 = *(_QWORD **)(v8 + 16);
    *v9 = a1;
    v9[1] = a2;
    v9[2] = a3;
  }
  return sub_10012FBDC((uint64_t (*)(void))v4[1]);
}

unint64_t sub_10012E4D0()
{
  unint64_t result;

  result = qword_1001C5B00;
  if (!qword_1001C5B00)
  {
    result = swift_getWitnessTable(&unk_100183B88, &unk_1001BA488);
    atomic_store(result, (unint64_t *)&qword_1001C5B00);
  }
  return result;
}

uint64_t sub_10012E50C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10012E8B4();
  *v4 = v2;
  v4[1] = sub_10012E574;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

uint64_t sub_10012E574(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v4 = *v2;
  v6 = v4;
  sub_10012FC2C(*(_QWORD *)(v4 + 24), &v6);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return ((uint64_t (*)(void))v2[1])();
}

unint64_t sub_10012E5CC()
{
  unint64_t result;

  result = qword_1001C5B10;
  if (!qword_1001C5B10)
  {
    result = swift_getWitnessTable(&unk_100183BE0, &unk_1001BA488);
    atomic_store(result, (unint64_t *)&qword_1001C5B10);
  }
  return result;
}

unint64_t sub_10012E60C()
{
  unint64_t result;

  result = qword_1001C5B18;
  if (!qword_1001C5B18)
  {
    result = swift_getWitnessTable(&unk_100183C40, &unk_1001BA488);
    atomic_store(result, (unint64_t *)&qword_1001C5B18);
  }
  return result;
}

unint64_t sub_10012E64C()
{
  unint64_t result;

  result = qword_1001C5B20[0];
  if (!qword_1001C5B20[0])
  {
    result = swift_getWitnessTable(&unk_100183D1C, &unk_1001BA590);
    atomic_store(result, qword_1001C5B20);
  }
  return result;
}

uint64_t sub_10012E688(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10012E8B4();
  *v5 = v2;
  v5[1] = sub_10012A23C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_10012E6F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10012E8B4();
  *v4 = v2;
  v4[1] = sub_10012FBC8;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_10012E760()
{
  unint64_t result;

  result = qword_1001C5B38;
  if (!qword_1001C5B38)
  {
    result = swift_getWitnessTable(&unk_100183C68, &unk_1001BA488);
    atomic_store(result, (unint64_t *)&qword_1001C5B38);
  }
  return result;
}

unint64_t sub_10012E7A0()
{
  unint64_t result;

  result = qword_1001C5B40;
  if (!qword_1001C5B40)
  {
    result = swift_getWitnessTable(&unk_100183E8C, &unk_1001BA590);
    atomic_store(result, (unint64_t *)&qword_1001C5B40);
  }
  return result;
}

unint64_t sub_10012E7E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5B48;
  if (!qword_1001C5B48)
  {
    v1 = sub_100005DC4(qword_1001C5B50);
    sub_10012E7A0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001C5B48);
  }
  return result;
}

uint64_t sub_10012E844(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10012E4D0();
  *v5 = v2;
  v5[1] = sub_1000709F8;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_10012E8B4()
{
  unint64_t result;

  result = qword_1001C5B68;
  if (!qword_1001C5B68)
  {
    result = swift_getWitnessTable(&unk_100183B10, &unk_1001BA488);
    atomic_store(result, (unint64_t *)&qword_1001C5B68);
  }
  return result;
}

uint64_t sub_10012E8F0()
{
  uint64_t v0;

  v0 = qword_1001C5AA0;
  swift_bridgeObjectRetain(off_1001C5AA8);
  return v0;
}

unint64_t sub_10012E928()
{
  unint64_t result;

  result = qword_1001C5B70;
  if (!qword_1001C5B70)
  {
    result = swift_getWitnessTable(&unk_100183D74, &unk_1001BA590);
    atomic_store(result, (unint64_t *)&qword_1001C5B70);
  }
  return result;
}

unint64_t sub_10012E96C()
{
  unint64_t result;

  result = qword_1001C5B78;
  if (!qword_1001C5B78)
  {
    result = swift_getWitnessTable(&unk_100183D9C, &unk_1001BA590);
    atomic_store(result, (unint64_t *)&qword_1001C5B78);
  }
  return result;
}

unint64_t sub_10012E9AC()
{
  unint64_t result;

  result = qword_1001C5B80;
  if (!qword_1001C5B80)
  {
    result = swift_getWitnessTable(&unk_100183DD4, &unk_1001BA590);
    atomic_store(result, (unint64_t *)&qword_1001C5B80);
  }
  return result;
}

unint64_t sub_10012E9EC()
{
  unint64_t result;

  result = qword_1001C5B88;
  if (!qword_1001C5B88)
  {
    result = swift_getWitnessTable(&unk_100183E04, &unk_1001BA590);
    atomic_store(result, (unint64_t *)&qword_1001C5B88);
  }
  return result;
}

uint64_t sub_10012EA28(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10012FB88();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_10012B1FC(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_10012EA74()
{
  unint64_t result;

  result = qword_1001C5B98;
  if (!qword_1001C5B98)
  {
    result = swift_getWitnessTable(&unk_100183E3C, &unk_1001BA590);
    atomic_store(result, (unint64_t *)&qword_1001C5B98);
  }
  return result;
}

unint64_t sub_10012EAB4()
{
  unint64_t result;

  result = qword_1001C5BA0;
  if (!qword_1001C5BA0)
  {
    result = swift_getWitnessTable(&unk_100183E64, &unk_1001BA590);
    atomic_store(result, (unint64_t *)&qword_1001C5BA0);
  }
  return result;
}

unint64_t sub_10012EAF4()
{
  unint64_t result;

  result = qword_1001C5BA8;
  if (!qword_1001C5BA8)
  {
    result = swift_getWitnessTable(&unk_100183EE4, &unk_1001BA590);
    atomic_store(result, (unint64_t *)&qword_1001C5BA8);
  }
  return result;
}

uint64_t sub_10012EB30@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ACEC(&qword_1001BEF08, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1001DA108, (uint64_t)sub_10012D32C, a1);
}

void sub_10012EB54()
{
  sub_10004AFE0(&qword_1001C5BB0, &qword_1001C5BB8, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_10012EB80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012E64C();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10012EBBC()
{
  unint64_t result;

  result = qword_1001C5BC0;
  if (!qword_1001C5BC0)
  {
    result = swift_getWitnessTable(&unk_100183F14, &unk_1001BA590);
    atomic_store(result, (unint64_t *)&qword_1001C5BC0);
  }
  return result;
}

uint64_t sub_10012EBFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012EAF4();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10012EC38()
{
  unint64_t result;

  result = qword_1001C5BC8;
  if (!qword_1001C5BC8)
  {
    result = swift_getWitnessTable(&unk_10018400C, &unk_1001BA460);
    atomic_store(result, (unint64_t *)&qword_1001C5BC8);
  }
  return result;
}

uint64_t sub_10012EC74(uint64_t a1)
{
  return sub_10012A8B0(a1, qword_1001DA158, 0xD00000000000001DLL, 0x8000000100189D80);
}

uint64_t sub_10012EC98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v25[3];

  v1 = type metadata accessor for InputConnectionBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10002325C();
  v5 = v4 - v3;
  sub_100005D40(&qword_1001C5810);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_100049D00();
  v9 = v7 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v25[-1] - v11;
  sub_100005D40(&qword_1001C5818);
  sub_100029068();
  __chkstk_darwin(v13);
  sub_10002325C();
  v16 = v15 - v14;
  v17 = sub_10012B320();
  sub_100029068();
  __chkstk_darwin(v18);
  sub_10003C164();
  sub_100005D40(&qword_1001C5C80);
  sub_1000A8718();
  sub_10012D160(24, v19);
  sub_1000A8718();
  LocalizedStringResource.init(stringLiteral:)(v20, v21);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v16, 0, 1, v17);
  sub_10012B360();
  memset(v25, 0, sizeof(v25));
  sub_10012B2D4((uint64_t)v12);
  sub_10012B2D4(v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v5, enum case for InputConnectionBehavior.default(_:), v1);
  v22 = sub_10012E64C();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v0, v16, v25, v12, v9, v5, v22);
}

unint64_t sub_10012EE54()
{
  unint64_t result;

  result = qword_1001C5BD0;
  if (!qword_1001C5BD0)
  {
    result = swift_getWitnessTable(&unk_100184034, &unk_1001BA460);
    atomic_store(result, (unint64_t *)&qword_1001C5BD0);
  }
  return result;
}

uint64_t sub_10012EE90(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10012FB10();
  v5 = sub_10012FB88();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_10012EEE4()
{
  uint64_t v0;

  v0 = qword_1001C5AB0;
  swift_bridgeObjectRetain(off_1001C5AB8);
  return v0;
}

unint64_t sub_10012EF1C()
{
  unint64_t result;

  result = qword_1001C5BD8;
  if (!qword_1001C5BD8)
  {
    result = swift_getWitnessTable(&unk_1001840C4, &unk_1001BA460);
    atomic_store(result, (unint64_t *)&qword_1001C5BD8);
  }
  return result;
}

unint64_t sub_10012EF5C()
{
  unint64_t result;

  result = qword_1001C5BE0;
  if (!qword_1001C5BE0)
  {
    result = swift_getWitnessTable(&unk_1001840EC, &unk_1001BA460);
    atomic_store(result, (unint64_t *)&qword_1001C5BE0);
  }
  return result;
}

uint64_t sub_10012EF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012F838(a1, a2, a3, (uint64_t (*)(void))sub_10012EE54, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_10012EFAC@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ACEC(&qword_1001BEF28, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001DA158, (uint64_t)sub_10012EC74, a1);
}

uint64_t sub_10012EFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10012FB10();
  v7 = sub_10012FB4C();
  v8 = sub_10012FB88();
  *v5 = v2;
  v5[1] = sub_10012ADD8;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_10012F05C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10012EC98();
  *a1 = result;
  return result;
}

uint64_t sub_10012F080(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012EE54();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

void sub_10012F0A8(uint64_t a1)
{
  sub_10012F0B4(a1, qword_1001DA170);
}

void sub_10012F0B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100005D40(&qword_1001C5818);
  sub_100029068();
  __chkstk_darwin(v4);
  sub_100093598();
  v5 = sub_10012B320();
  sub_100029068();
  __chkstk_darwin(v6);
  sub_10002325C();
  v9 = v8 - v7;
  v10 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100093228(v10, a2);
  sub_100025184(v10, (uint64_t)a2);
  sub_1000A8718();
  sub_10012D160(16, v11);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v2, 1, 1, v5);
  TypeDisplayRepresentation.init(name:numericFormat:)(v9, v2);
  sub_1000FA1C4();
}

uint64_t sub_10012F17C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;

  v0 = sub_100005D40(&qword_1001C5840);
  __chkstk_darwin(v0);
  v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005D40(&qword_1001C5818);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001C5C70);
  v10 = *(_QWORD *)(sub_100005D40(&qword_1001C5C78) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(v9, v13 + 3 * v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_10017C900;
  v15 = v14 + v13;
  *(_BYTE *)(v14 + v13) = 0;
  LocalizedStringResource.init(stringLiteral:)(0x737569736C6543, 0xE700000000000000);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v5, 1, 1, v6);
  v16 = type metadata accessor for DisplayRepresentation.Image(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v16);
  DisplayRepresentation.init(title:subtitle:image:)(v8, v5, v2);
  *(_BYTE *)(v15 + v11) = 1;
  LocalizedStringResource.init(stringLiteral:)(0x65686E6572686146, 0xEA00000000007469);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v5, 1, 1, v6);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v16);
  DisplayRepresentation.init(title:subtitle:image:)(v8, v5, v2);
  *(_BYTE *)(v15 + 2 * v11) = 2;
  LocalizedStringResource.init(stringLiteral:)(0x5320726F7272694DLL, 0xED00006D65747379);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v5, 1, 1, v6);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v16);
  DisplayRepresentation.init(title:subtitle:image:)(v8, v5, v2);
  v17 = type metadata accessor for DisplayRepresentation(0);
  v18 = sub_10012F6B8();
  result = Dictionary.init(dictionaryLiteral:)(v14, &unk_1001BA518, v17, v18);
  qword_1001DA188 = result;
  return result;
}

uint64_t *sub_10012F444()
{
  if (qword_1001BEF38 != -1)
    swift_once(&qword_1001BEF38, sub_10012F17C);
  return &qword_1001DA188;
}

unint64_t sub_10012F484(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001B44B8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_10012F4CC(char a1)
{
  if (!a1)
    return 0x737569736C6563;
  if (a1 == 1)
    return 0x65686E6572686166;
  return 0x7953726F7272696DLL;
}

void sub_10012F530(unsigned __int8 *a1, unsigned __int8 *a2)
{
  sub_1000B7958(*a1, *a2);
}

unint64_t sub_10012F540()
{
  unint64_t result;

  result = qword_1001C5BF0;
  if (!qword_1001C5BF0)
  {
    result = swift_getWitnessTable(&unk_100184108, &unk_1001BA518);
    atomic_store(result, (unint64_t *)&qword_1001C5BF0);
  }
  return result;
}

void sub_10012F57C()
{
  char *v0;

  sub_10004643C(*v0);
}

uint64_t sub_10012F584(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_100046510(a1, *v1);
}

void sub_10012F58C(uint64_t a1)
{
  char *v1;

  sub_100046608(a1, *v1);
}

unint64_t sub_10012F594@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10012F484(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10012F5C0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10012F4CC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10012F5EC()
{
  unint64_t result;

  result = qword_1001C5BF8;
  if (!qword_1001C5BF8)
  {
    result = swift_getWitnessTable(&unk_100184220, &unk_1001BA518);
    atomic_store(result, (unint64_t *)&qword_1001C5BF8);
  }
  return result;
}

unint64_t sub_10012F62C()
{
  unint64_t result;

  result = qword_1001C5C00;
  if (!qword_1001C5C00)
  {
    result = swift_getWitnessTable(&unk_100184258, &unk_1001BA518);
    atomic_store(result, (unint64_t *)&qword_1001C5C00);
  }
  return result;
}

unint64_t sub_10012F66C()
{
  unint64_t result;

  result = qword_1001C5C08;
  if (!qword_1001C5C08)
  {
    result = swift_getWitnessTable(&unk_100184170, &unk_1001BA518);
    atomic_store(result, (unint64_t *)&qword_1001C5C08);
  }
  return result;
}

void *sub_10012F6A8()
{
  return &protocol witness table for String;
}

unint64_t sub_10012F6B8()
{
  unint64_t result;

  result = qword_1001C5C10;
  if (!qword_1001C5C10)
  {
    result = swift_getWitnessTable(&unk_100184130, &unk_1001BA518);
    atomic_store(result, (unint64_t *)&qword_1001C5C10);
  }
  return result;
}

void sub_10012F6F4(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

unint64_t sub_10012F704()
{
  unint64_t result;

  result = qword_1001C5C18;
  if (!qword_1001C5C18)
  {
    result = swift_getWitnessTable(&unk_100184288, &unk_1001BA518);
    atomic_store(result, (unint64_t *)&qword_1001C5C18);
  }
  return result;
}

unint64_t sub_10012F744()
{
  unint64_t result;

  result = qword_1001C5C20;
  if (!qword_1001C5C20)
  {
    result = swift_getWitnessTable(&unk_1001842B0, &unk_1001BA518);
    atomic_store(result, (unint64_t *)&qword_1001C5C20);
  }
  return result;
}

unint64_t sub_10012F784()
{
  unint64_t result;

  result = qword_1001C5C28;
  if (!qword_1001C5C28)
  {
    result = swift_getWitnessTable(&unk_1001842D8, &unk_1001BA518);
    atomic_store(result, (unint64_t *)&qword_1001C5C28);
  }
  return result;
}

unint64_t sub_10012F7C4()
{
  unint64_t result;

  result = qword_1001C5C30;
  if (!qword_1001C5C30)
  {
    result = swift_getWitnessTable(&unk_100184330, &unk_1001BA518);
    atomic_store(result, (unint64_t *)&qword_1001C5C30);
  }
  return result;
}

uint64_t sub_10012F800@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ACEC(&qword_1001BEF30, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1001DA170, (uint64_t)sub_10012F0A8, a1);
}

uint64_t sub_10012F824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012F838(a1, a2, a3, (uint64_t (*)(void))sub_1000EC9B4, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

uint64_t sub_10012F838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a4();
  return swift_getOpaqueTypeConformance2(v7, a5, 1);
}

uint64_t sub_10012F878(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EC9B4();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10012F8B4()
{
  unint64_t result;

  result = qword_1001C5C38;
  if (!qword_1001C5C38)
  {
    result = swift_getWitnessTable(&unk_100184370, &unk_1001BA518);
    atomic_store(result, (unint64_t *)&qword_1001C5C38);
  }
  return result;
}

unint64_t sub_10012F8F4()
{
  unint64_t result;

  result = qword_1001C5C40;
  if (!qword_1001C5C40)
  {
    result = swift_getWitnessTable(&unk_100184398, &unk_1001BA518);
    atomic_store(result, (unint64_t *)&qword_1001C5C40);
  }
  return result;
}

uint64_t sub_10012F930()
{
  sub_10012F444();
  return swift_bridgeObjectRetain(qword_1001DA188);
}

uint64_t sub_10012F94C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012F7C4();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_10012F984()
{
  sub_10004AFE0(&qword_1001C5C48, &qword_1001C5C50, (uint64_t)&protocol conformance descriptor for [A]);
}

void sub_10012F9B0(_QWORD *a1@<X8>)
{
  *a1 = &off_1001B4490;
}

void type metadata accessor for OpenWeatherTemperatureUnitIntent()
{
  sub_100044408();
}

void type metadata accessor for WeatherTemperatureUnitEntity.WeatherTemperatureUnitEntityQuery()
{
  sub_100044408();
}

uint64_t sub_10012F9D8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10012FA24 + 4 * byte_100183985[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10012FA58 + 4 * byte_100183980[v4]))();
}

uint64_t sub_10012FA58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012FA60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012FA68);
  return result;
}

uint64_t sub_10012FA74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012FA7CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10012FA80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012FA88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for TemperatureUnit()
{
  sub_100044408();
}

void type metadata accessor for WeatherTemperatureUnitEntity()
{
  sub_100044408();
}

void type metadata accessor for WeatherTemperatureUnitEntity.UpdateIntent_value()
{
  sub_100044408();
}

void sub_10012FAB8()
{
  sub_10004AFE0(&qword_1001C5C58, &qword_1001C5C60, (uint64_t)&protocol conformance descriptor for <> IntentResultContainer<A, B, C, D>);
}

void sub_10012FAE4()
{
  sub_10004AFE0(&qword_1001C5C68, &qword_1001C5C60, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

unint64_t sub_10012FB10()
{
  unint64_t result;

  result = qword_1001C5C88;
  if (!qword_1001C5C88)
  {
    result = swift_getWitnessTable(&unk_100183F3C, &unk_1001BA460);
    atomic_store(result, (unint64_t *)&qword_1001C5C88);
  }
  return result;
}

unint64_t sub_10012FB4C()
{
  unint64_t result;

  result = qword_1001C5C90;
  if (!qword_1001C5C90)
  {
    result = swift_getWitnessTable(&unk_100183F8C, &unk_1001BA460);
    atomic_store(result, (unint64_t *)&qword_1001C5C90);
  }
  return result;
}

unint64_t sub_10012FB88()
{
  unint64_t result;

  result = qword_1001C5C98;
  if (!qword_1001C5C98)
  {
    result = swift_getWitnessTable(&unk_100183CE4, &unk_1001BA590);
    atomic_store(result, &qword_1001C5C98);
  }
  return result;
}

uint64_t sub_10012FBCC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_10012FBDC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10012FBF0()
{
  uint64_t v0;

  return v0;
}

void sub_10012FC0C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10012FC1C()
{
  uint64_t v0;

  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000010, v0);
}

uint64_t sub_10012FC2C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_10012FC38()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

_QWORD *sub_10012FC40(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = type metadata accessor for EventManager();
  v1[2] = swift_allocObject(v3, 16, 7);
  v4 = sub_1001308AC();
  sub_100097B00(v4);
  v5 = sub_1001308A4();
  v1[3] = a1;
  v1[4] = v5;
  return v1;
}

void sub_10012FC94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  sub_1000CD49C();
  v61 = v1;
  v62 = v2;
  v4 = v3;
  v6 = v5;
  sub_100005D40(&qword_1001BFA28);
  sub_1000230F4();
  __chkstk_darwin(v7);
  v68 = *(_QWORD *)(sub_10013078C(v8, v52) - 8);
  sub_1000230F4();
  __chkstk_darwin(v9);
  v11 = sub_1001307E4(v10, v53);
  v12 = type metadata accessor for CloudAltitudeKind(v11);
  v59 = *(_QWORD *)(v12 - 8);
  v60 = v12;
  sub_1000230F4();
  __chkstk_darwin(v13);
  sub_1000230E0();
  v58 = v14;
  v57 = sub_10013088C();
  v56 = *(_QWORD *)(v57 - 8);
  sub_1000230F4();
  __chkstk_darwin(v15);
  sub_1000230E0();
  v55 = v16;
  sub_1001308DC();
  sub_1000230F4();
  __chkstk_darwin(v17);
  sub_1000230E0();
  v54 = v18;
  v19 = type metadata accessor for WeatherCondition(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = sub_10002539C();
  v22 = type metadata accessor for WeatherConditionGradientModel(v21);
  v69 = *(_QWORD *)(v22 - 8);
  v70 = v22;
  sub_1000230F4();
  __chkstk_darwin(v23);
  sub_10002325C();
  v26 = v25 - v24;
  v27 = type metadata accessor for AggregateWeatherViewModel(0);
  v28 = *(_QWORD *)(v4 + *(int *)(v27 + 44));
  v29 = sub_1001308F4();
  sub_10010B03C(v29, v28);
  v66 = v30;
  sub_10010B2F8(v29, v28);
  v67 = v29;
  v31 = sub_10010B44C(v29, v28);
  v64 = v32;
  v65 = v31;
  v33 = v4 + *(int *)(v27 + 24);
  v34 = type metadata accessor for CurrentObservationViewModel(0);
  v35 = v33 + *(int *)(v34 + 48);
  v36 = type metadata accessor for ConditionViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v0, v35 + *(int *)(v36 + 20), v19);
  static GeoHandler.getElevation(for:on:)(v61, v62);
  v37 = *(unsigned __int8 *)(v35 + *(int *)(v36 + 32));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v56 + 104))(v55, enum case for WeatherConditionGradientModel.PresentationContext.widget(_:), v57);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v58, v33 + *(int *)(v34 + 56), v60);
  sub_100130898(v0, v54, v37, v55);
  v38 = sub_1001308AC();
  sub_100097B00(v38);
  v39 = sub_1001308A4();
  sub_1001308EC();
  v63 = sub_1001308E4();
  v40 = sub_1001308D0(v68);
  v41 = Location.kind.getter(v40);
  sub_1001308C8(v41);
  v42 = sub_100130850();
  v44 = v61 == v42 && v61 == v43;
  v45 = v61;
  if (!v44)
  {
    sub_1001307AC(v42, v43);
    v45 = v54;
  }
  sub_10002548C();
  swift_bridgeObjectRelease(v45);
  v46 = sub_100130814();
  v49 = sub_1000CD60C(v71, v47, v48, v46);
  WeatherConditionGradientModel.isLowContrastInWidgets.getter(v49);
  sub_100130844();
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v26, v70);
  sub_1001308B4(v66);
  *(_QWORD *)(v6 + 32) = v65;
  *(_QWORD *)(v6 + 40) = v64;
  *(_BYTE *)(v6 + 48) = v67;
  sub_10013082C();
  sub_100130804();
  sub_1000B6F64(v71, v50);
  v51 = v6 + *(int *)(v39 + 44);
  *(_QWORD *)v51 = v63;
  *(_BYTE *)(v51 + 8) = v26 & 1;
  sub_1000CD1DC();
}

void sub_10012FFD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;

  sub_1000CD49C();
  v58 = v2;
  v50 = v3;
  v5 = v4;
  v52 = v6;
  v8 = v7;
  sub_100005D40(&qword_1001BFA28);
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_1000230E0();
  v60 = v10;
  v59 = *(_QWORD *)(type metadata accessor for SkyBackgroundGradient(0) - 8);
  sub_1000230F4();
  __chkstk_darwin(v11);
  sub_1000230E0();
  v55 = sub_100130880();
  v51 = *(_QWORD *)(v55 - 8);
  sub_1000230F4();
  __chkstk_darwin(v12);
  v14 = sub_1001307E4(v13, v46);
  v15 = type metadata accessor for WeatherConditionGradientModel.PresentationContext(v14);
  v47 = *(_QWORD *)(v15 - 8);
  v48 = v15;
  sub_1000230F4();
  __chkstk_darwin(v16);
  sub_1000230E0();
  v49 = v17;
  sub_1001308DC();
  sub_1000230F4();
  __chkstk_darwin(v18);
  sub_10002325C();
  v21 = v20 - v19;
  v22 = type metadata accessor for WeatherCondition(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v56 = sub_1001307C8();
  v53 = *(_QWORD *)(v56 - 8);
  sub_1000230F4();
  __chkstk_darwin(v24);
  sub_10003C164();
  v57 = v5;
  v26 = Location.kind.getter(v25);
  v27 = sub_1001308C8(v26);
  v29 = v28;
  v61 = 1;
  v30 = Location.Identifier.Kind.rawValue.getter(1);
  v32 = v27 == v30 && v29 == v31;
  v33 = v29;
  if (!v32)
  {
    v34 = v31;
    v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v30, v31, 0);
    v33 = v34;
  }
  sub_10002548C();
  swift_bridgeObjectRelease(v33);
  v35 = v52 + *(int *)(type metadata accessor for InstantWeatherViewModel(0) + 24);
  v36 = type metadata accessor for CurrentObservationViewModel(0);
  v37 = v35 + *(int *)(v36 + 48);
  v38 = type metadata accessor for ConditionViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v1, v37 + *(int *)(v38 + 20), v22);
  static GeoHandler.getElevation(for:on:)(v57, v58);
  v39 = *(unsigned __int8 *)(v37 + *(int *)(v38 + 32));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v47 + 104))(v49, enum case for WeatherConditionGradientModel.PresentationContext.widget(_:), v48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v54, v35 + *(int *)(v36 + 56), v55);
  sub_100130898(v1, v21, v39, v49);
  v40 = sub_1001308AC();
  sub_100097B00(v40);
  sub_1001308A4();
  sub_1001308EC();
  sub_1001308E4();
  sub_1001308D0(v59);
  v41 = type metadata accessor for URL(0);
  v44 = sub_1000CD60C(v60, v42, v43, v41);
  WeatherConditionGradientModel.isLowContrastInWidgets.getter(v44);
  sub_100130844();
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v0, v56);
  sub_100130900();
  *(_WORD *)(v8 + 48) = 257;
  *(_BYTE *)(v8 + 50) = v61 & 1;
  *(_BYTE *)(v8 + 51) = v50 == 3;
  type metadata accessor for WidgetContext(0);
  sub_100130804();
  sub_1000B6F64(v60, v45);
  sub_100130864();
  sub_1000CD1DC();
}

void sub_1001302E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  sub_1000CD49C();
  v53 = v3;
  v54 = v4;
  v6 = v5;
  v58 = v7;
  v59 = v8;
  v52 = v9;
  v11 = v10;
  sub_100005D40(&qword_1001BFA28);
  sub_1000230F4();
  __chkstk_darwin(v12);
  v14 = sub_10013078C(v13, v46);
  v61 = *(_QWORD *)(v14 - 8);
  v62 = v14;
  sub_1000230F4();
  __chkstk_darwin(v15);
  sub_1000230E0();
  v57 = v16;
  v51 = sub_100130880();
  v50 = *(_QWORD *)(v51 - 8);
  sub_1000230F4();
  __chkstk_darwin(v17);
  sub_1000230E0();
  v49 = v18;
  v48 = sub_10013088C();
  v47 = *(_QWORD *)(v48 - 8);
  sub_1000230F4();
  __chkstk_darwin(v19);
  sub_10003C164();
  sub_1001308DC();
  sub_1000230F4();
  __chkstk_darwin(v20);
  v21 = sub_10002539C();
  v22 = type metadata accessor for WeatherCondition(v21);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v24 = sub_1001307C8();
  v63 = *(_QWORD *)(v24 - 8);
  v64 = v24;
  sub_1000230F4();
  __chkstk_darwin(v25);
  sub_10002325C();
  v28 = v27 - v26;
  v29 = sub_1001308F4();
  sub_10010B03C(v29, v6);
  v60 = v30;
  sub_10010B2F8(v29, v6);
  v31 = sub_10010B44C(v29, v6);
  v55 = v32;
  v56 = v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v2, v52, v22);
  static GeoHandler.getElevation(for:on:)(v53, v54);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v47 + 104))(v1, enum case for WeatherConditionGradientModel.PresentationContext.widget(_:), v48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v49, v58, v51);
  sub_100130898(v2, v0, v59, v1);
  v33 = sub_1001308AC();
  sub_100097B00(v33);
  sub_1001308A4();
  v34 = sub_1001308EC();
  SkyBackgroundGradient.gradient()(v34);
  v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v57, v62);
  v36 = Location.kind.getter(v35);
  sub_1001308C8(v36);
  v37 = sub_100130850();
  v39 = v57 == v37 && v53 == v38;
  v40 = v53;
  if (!v39)
  {
    sub_1001307AC(v37, v38);
    v40 = v2;
  }
  sub_10002548C();
  swift_bridgeObjectRelease(v40);
  v41 = sub_100130814();
  v44 = sub_1000CD60C(v65, v42, v43, v41);
  WeatherConditionGradientModel.isLowContrastInWidgets.getter(v44);
  sub_100130844();
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v28, v64);
  sub_1001308B4(v60);
  *(_QWORD *)(v11 + 32) = v56;
  *(_QWORD *)(v11 + 40) = v55;
  *(_BYTE *)(v11 + 48) = v29;
  sub_10013082C();
  sub_100130804();
  sub_1000B6F64(v65, v45);
  sub_100130864();
  sub_1000CD1DC();
}

uint64_t sub_1001305C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  sub_100005D40(&qword_1001BFA28);
  sub_1000230F4();
  __chkstk_darwin(v3);
  v4 = sub_10002539C();
  v5 = type metadata accessor for SkyBackgroundGradient(v4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002325C();
  v9 = v8 - v7;
  v10 = type metadata accessor for WeatherConditionGradientModel(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static WeatherConditionGradientModel.widgetPlaceholder.getter(v12);
  WeatherConditionGradientManager.load(for:)(v14);
  v15 = sub_1001308E4();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  v16 = type metadata accessor for URL(0);
  v19 = sub_1000CD60C(v1, v17, v18, v16);
  v20 = WeatherConditionGradientModel.isLowContrastInWidgets.getter(v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_100130900();
  *(_DWORD *)(a1 + 48) = 65793;
  type metadata accessor for WidgetContext(0);
  sub_100130804();
  result = sub_1000B6F64(v1, v21);
  v23 = a1 + *(int *)(v5 + 44);
  *(_QWORD *)v23 = v15;
  *(_BYTE *)(v23 + 8) = v20 & 1;
  return result;
}

uint64_t sub_100130720()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t sub_10013074C()
{
  uint64_t v0;

  sub_100130720();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for WidgetContextFactory()
{
  return objc_opt_self(_TtC13WeatherWidget20WidgetContextFactory);
}

uint64_t sub_10013078C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for SkyBackgroundGradient(0);
}

uint64_t sub_1001307AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0);
}

uint64_t sub_1001307C8()
{
  return type metadata accessor for WeatherConditionGradientModel(0);
}

uint64_t sub_1001307E4@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_100130814()
{
  return type metadata accessor for URL(0);
}

uint64_t sub_10013082C()
{
  _BYTE *v0;
  char v1;
  char v2;
  char v3;

  v0[49] = v2;
  v0[50] = v1 & 1;
  v0[51] = v3;
  return type metadata accessor for WidgetContext(0);
}

uint64_t sub_100130844()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100130850()
{
  return Location.Identifier.Kind.rawValue.getter(1);
}

void sub_100130864()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v0 + *(int *)(v3 + 44);
  *(_QWORD *)v4 = v2;
  *(_BYTE *)(v4 + 8) = v1 & 1;
}

uint64_t sub_100130880()
{
  return type metadata accessor for CloudAltitudeKind(0);
}

uint64_t sub_10013088C()
{
  return type metadata accessor for WeatherConditionGradientModel.PresentationContext(0);
}

uint64_t sub_100130898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double v5;

  return WeatherConditionGradientModel.init(conditionKind:elevation:isDaylight:presentation:cloudCover:cloudKind:)(a1, a2, a3, a4, v4, v5);
}

uint64_t sub_1001308A4()
{
  return WeatherConditionGradientManager.init()();
}

uint64_t sub_1001308AC()
{
  return type metadata accessor for WeatherConditionGradientManager(0);
}

void sub_1001308B4(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *v2 = v1;
  v2[1] = a1;
  v4 = *(_QWORD *)(v3 - 200);
  v2[2] = *(_QWORD *)(v3 - 192);
  v2[3] = v4;
}

uint64_t sub_1001308C8(char a1)
{
  return Location.Identifier.Kind.rawValue.getter(a1 & 1);
}

uint64_t sub_1001308D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_1001308DC()
{
  return type metadata accessor for Elevation(0);
}

uint64_t sub_1001308E4()
{
  return SkyBackgroundGradient.gradient()();
}

uint64_t sub_1001308EC()
{
  return WeatherConditionGradientManager.load(for:)();
}

uint64_t sub_1001308F4()
{
  uint64_t v0;

  return sub_10010AB40(v0);
}

void sub_100130900()
{
  _QWORD *v0;

  *v0 = 0;
  v0[1] = 0xE000000000000000;
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = 0;
  v0[5] = 0xE000000000000000;
}

uint64_t sub_100130914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100130920);
}

uint64_t sub_100130920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = type metadata accessor for ForecastEntry(0);
    v8 = a1 + *(int *)(a3 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
}

uint64_t sub_10013098C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100130998);
}

uint64_t sub_100130998(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = type metadata accessor for ForecastEntry(0);
    v10 = a1 + *(int *)(a4 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for WindContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C5E00;
  if (!qword_1001C5E00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WindContentView);
  return result;
}

uint64_t sub_100130A44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A1030, 1);
}

uint64_t sub_100130A54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100130A5C(v1, a1);
}

uint64_t sub_100130A5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(char *, uint64_t);
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  Swift::String v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  void *object;
  __n128 v51;
  Swift::String v52;
  uint64_t v53;
  unint64_t v54;
  Swift::String v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  void *v60;
  __n128 v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;

  v81 = a2;
  v71 = sub_100005D40(&qword_1001C5E38);
  __chkstk_darwin(v71);
  v72 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100005D40(&qword_1001C5E40);
  __chkstk_darwin(v80);
  v76 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WindInlineContentView(0);
  v74 = *(_QWORD *)(v5 - 8);
  v75 = v5;
  __chkstk_darwin(v5);
  v73 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for WindContentView(0);
  v7 = __chkstk_darwin(v77);
  v67 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v64 = (uint64_t)&v63 - v9;
  v78 = sub_100005D40(&qword_1001C5E48);
  __chkstk_darwin(v78);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100005D40(&qword_1001C5E50);
  __chkstk_darwin(v69);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100005D40(&qword_1001C5E58);
  __chkstk_darwin(v79);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for WindComplicationDataStatus(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for WindCircularContentView(0);
  v70 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for WidgetFamily(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v65 = (_DWORD *)((char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v24);
  v27 = (char *)&v63 - v26;
  sub_1000C54B0((uint64_t *)((char *)&v63 - v26));
  v66 = v23;
  v28 = *(uint64_t (**)(char *, uint64_t))(v23 + 88);
  v68 = v22;
  v29 = v28(v27, v22);
  if (v29 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_100158F90((uint64_t)v18);
    WindCircularContentView.init(status:)(v18);
    v30 = v70;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v13, v21, v19);
    swift_storeEnumTagMultiPayload(v13, v69, 0);
    sub_10002EF14(&qword_1001C5E70, (uint64_t (*)(uint64_t))&type metadata accessor for WindCircularContentView, (uint64_t)&protocol conformance descriptor for WindCircularContentView);
    _ConditionalContent<>.init(storage:)(v13, v19, &type metadata for Never, v31, &protocol witness table for Never);
    sub_10002EFD4((uint64_t)v15, (uint64_t)v11, &qword_1001C5E58);
    swift_storeEnumTagMultiPayload(v11, v78, 0);
    v32 = sub_1001311C4();
    v33 = sub_100131248();
    _ConditionalContent<>.init(storage:)(v11, v79, v80, v32, v33);
    sub_10002F014((uint64_t)v15, &qword_1001C5E58);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v21, v19);
  }
  v35 = v78;
  if (v29 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    sub_100131180(a1, v64);
    v82 = 0;
    v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v45._countAndFlagsBits = 0xD000000000000021;
    v45._object = (void *)0x8000000100186340;
    String.append(_:)(v45);
    v46 = v65;
    sub_1000C54B0(v65);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v47 = v68;
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v68, v48);
    object = v49._object;
    String.append(_:)(v49);
    v51 = swift_bridgeObjectRelease(object);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v66 + 8))(v46, v47, v51);
    v52._object = (void *)0x8000000100189F30;
    v52._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v52);
    v53 = v82;
    v54 = v83;
LABEL_9:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v53, v54, "WeatherWidget/WindContentView.swift", 35, 2);
    __break(1u);
    return result;
  }
  if (v29 != enum case for WidgetFamily.accessoryInline(_:))
  {
    sub_100131180(a1, v67);
    v82 = 0;
    v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    v55._countAndFlagsBits = 0xD000000000000022;
    v55._object = (void *)0x80000001001862F0;
    String.append(_:)(v55);
    v56 = v65;
    sub_1000C54B0(v65);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v57 = v68;
    v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v68, v58);
    v60 = v59._object;
    String.append(_:)(v59);
    v61 = swift_bridgeObjectRelease(v60);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v66 + 8))(v56, v57, v61);
    v62._object = (void *)0x8000000100189F30;
    v62._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v62);
    v53 = v82;
    v54 = v83;
    goto LABEL_9;
  }
  v36 = (uint64_t)v11;
  sub_100158F90((uint64_t)v18);
  v37 = v73;
  WindInlineContentView.init(status:)(v18);
  v39 = v74;
  v38 = v75;
  v40 = v72;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v72, v37, v75);
  swift_storeEnumTagMultiPayload(v40, v71, 0);
  sub_10002EF14(&qword_1001C5E60, (uint64_t (*)(uint64_t))&type metadata accessor for WindInlineContentView, (uint64_t)&protocol conformance descriptor for WindInlineContentView);
  v41 = (uint64_t)v76;
  _ConditionalContent<>.init(storage:)(v40, v38, &type metadata for Never, v42, &protocol witness table for Never);
  sub_10002EFD4(v41, v36, &qword_1001C5E40);
  swift_storeEnumTagMultiPayload(v36, v35, 1);
  v43 = sub_1001311C4();
  v44 = sub_100131248();
  _ConditionalContent<>.init(storage:)(v36, v79, v80, v43, v44);
  sub_10002F014(v41, &qword_1001C5E40);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v37, v38);
}

uint64_t sub_100131180(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WindContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001311C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5E68;
  if (!qword_1001C5E68)
  {
    v1 = sub_100005DC4(&qword_1001C5E58);
    sub_10002EF14(&qword_1001C5E70, (uint64_t (*)(uint64_t))&type metadata accessor for WindCircularContentView, (uint64_t)&protocol conformance descriptor for WindCircularContentView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C5E68);
  }
  return result;
}

unint64_t sub_100131248()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5E78;
  if (!qword_1001C5E78)
  {
    v1 = sub_100005DC4(&qword_1001C5E40);
    sub_10002EF14(&qword_1001C5E60, (uint64_t (*)(uint64_t))&type metadata accessor for WindInlineContentView, (uint64_t)&protocol conformance descriptor for WindInlineContentView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C5E78);
  }
  return result;
}

unint64_t sub_1001312D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5E80;
  if (!qword_1001C5E80)
  {
    v1 = sub_100005DC4(&qword_1001C5E88);
    sub_100131334();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C5E80);
  }
  return result;
}

unint64_t sub_100131334()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5E90;
  if (!qword_1001C5E90)
  {
    v1 = sub_100005DC4(&qword_1001C5E98);
    sub_1001311C4();
    sub_100131248();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C5E90);
  }
  return result;
}

uint64_t sub_1001313A0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v0 = sub_100005D40(&qword_1001C5818);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100093228(v6, qword_1001DA190);
  sub_100025184(v6, (uint64_t)qword_1001DA190);
  LocalizedStringResource.init(stringLiteral:)(0x72656874616557, 0xE700000000000000);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v5, v2);
}

uint64_t sub_1001314A8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;

  v0 = sub_100005D40(&qword_1001C5840);
  __chkstk_darwin(v0);
  v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005D40(&qword_1001C5818);
  __chkstk_darwin(v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001C5F78);
  v10 = sub_100005D40(&qword_1001C5F80);
  v11 = swift_allocObject(v9, ((*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80) | 7);
  *(_OWORD *)(v11 + 16) = xmmword_10017BD10;
  LocalizedStringResource.init(stringLiteral:)(0x72656874616557, 0xE700000000000000);
  LocalizedStringResource.init(stringLiteral:)(1936748609, 0xE400000000000000);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v5, 0, 1, v6);
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000011, 0x8000000100186DD0);
  v12 = type metadata accessor for DisplayRepresentation.Image(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 0, 1, v12);
  DisplayRepresentation.init(title:subtitle:image:)(v8, v5, v2);
  v13 = type metadata accessor for DisplayRepresentation(0);
  v14 = sub_100131CD4();
  result = Dictionary.init(dictionaryLiteral:)(v11, &type metadata for WeatherSettingsDeeplinks, v13, v14);
  qword_1001DA1A8 = result;
  return result;
}

uint64_t *sub_100131694()
{
  if (qword_1001BEF48 != -1)
    swift_once(&qword_1001BEF48, sub_1001314A8);
  return &qword_1001DA1A8;
}

uint64_t sub_1001316D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v0 = sub_100005D40(&qword_1001C5F88);
  sub_100093228(v0, qword_1001DA1B0);
  sub_100025184(v0, (uint64_t)qword_1001DA1B0);
  v1 = sub_100005D40(&qword_1001C5F90);
  v2 = *(_QWORD *)(sub_100005D40(&qword_1001C5F98) - 8);
  v3 = swift_allocObject(v1, ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72), *(unsigned __int8 *)(v2 + 80) | 7);
  *(_OWORD *)(v3 + 16) = xmmword_10017BD10;
  v4 = sub_100131918();
  EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD00000000000003FLL, 0x8000000100188380, &type metadata for WeatherSettingsDeeplinks, v4);
  v5 = sub_100005D40(&qword_1001C5FA0);
  v6 = sub_100131CD4();
  v7 = Dictionary.init(dictionaryLiteral:)(v3, &type metadata for WeatherSettingsDeeplinks, v5, v6);
  return EnumURLRepresentation.init(_:)(v7, &type metadata for WeatherSettingsDeeplinks, v4);
}

uint64_t sub_1001317F0()
{
  uint64_t v0;

  if (qword_1001BEF50 != -1)
    swift_once(&qword_1001BEF50, sub_1001316D4);
  v0 = sub_100005D40(&qword_1001C5F88);
  return sub_100025184(v0, (uint64_t)qword_1001DA1B0);
}

BOOL sub_10013183C(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001B4520, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

unint64_t sub_100131884()
{
  unint64_t result;

  result = qword_1001C5EB0;
  if (!qword_1001C5EB0)
  {
    result = swift_getWitnessTable(&unk_10018455C, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5EB0);
  }
  return result;
}

BOOL sub_1001318CC@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_10013183C(*a1);
  *a2 = result;
  return result;
}

void sub_100131900(_QWORD *a1@<X8>)
{
  *a1 = 1953460082;
  a1[1] = 0xE400000000000000;
}

unint64_t sub_100131918()
{
  unint64_t result;

  result = qword_1001C5EB8;
  if (!qword_1001C5EB8)
  {
    result = swift_getWitnessTable(&unk_100184634, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5EB8);
  }
  return result;
}

unint64_t sub_100131958()
{
  unint64_t result;

  result = qword_1001C5EC0;
  if (!qword_1001C5EC0)
  {
    result = swift_getWitnessTable(&unk_100184674, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5EC0);
  }
  return result;
}

uint64_t sub_100131994@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1001317F0();
  v3 = sub_100005D40(&qword_1001C5F88);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

unint64_t sub_1001319DC()
{
  unint64_t result;

  result = qword_1001C5EC8;
  if (!qword_1001C5EC8)
  {
    result = swift_getWitnessTable(&unk_10018469C, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5EC8);
  }
  return result;
}

unint64_t sub_100131A1C()
{
  unint64_t result;

  result = qword_1001C5ED0;
  if (!qword_1001C5ED0)
  {
    result = swift_getWitnessTable(&unk_1001846D4, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5ED0);
  }
  return result;
}

unint64_t sub_100131A5C()
{
  unint64_t result;

  result = qword_1001C5ED8;
  if (!qword_1001C5ED8)
  {
    result = swift_getWitnessTable(&unk_1001845C4, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5ED8);
  }
  return result;
}

uint64_t sub_100131A98(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1001324AC();
  v4 = URLRepresentableEnum.urlRepresentationParameter.getter(a1, v3);
  return sub_10012B1FC(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_100131AE4()
{
  unint64_t result;

  result = qword_1001C5EE8;
  if (!qword_1001C5EE8)
  {
    result = swift_getWitnessTable(&unk_100184704, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5EE8);
  }
  return result;
}

unint64_t sub_100131B24()
{
  unint64_t result;

  result = qword_1001C5EF0;
  if (!qword_1001C5EF0)
  {
    result = swift_getWitnessTable(&unk_10018472C, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5EF0);
  }
  return result;
}

unint64_t sub_100131B64()
{
  unint64_t result;

  result = qword_1001C5EF8;
  if (!qword_1001C5EF8)
  {
    result = swift_getWitnessTable(&unk_100184754, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5EF8);
  }
  return result;
}

unint64_t sub_100131BA4()
{
  unint64_t result;

  result = qword_1001C5F00;
  if (!qword_1001C5F00)
  {
    result = swift_getWitnessTable(&unk_1001847AC, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5F00);
  }
  return result;
}

uint64_t sub_100131BE0@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ACEC(&qword_1001BEF40, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1001DA190, (uint64_t)sub_1001313A0, a1);
}

uint64_t sub_100131C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012F838(a1, a2, a3, (uint64_t (*)(void))sub_100131918, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

uint64_t sub_100131C18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100131918();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100131C54()
{
  unint64_t result;

  result = qword_1001C5F08;
  if (!qword_1001C5F08)
  {
    result = swift_getWitnessTable(&unk_1001847EC, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5F08);
  }
  return result;
}

unint64_t sub_100131C94()
{
  unint64_t result;

  result = qword_1001C5F10;
  if (!qword_1001C5F10)
  {
    result = swift_getWitnessTable(&unk_100184814, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5F10);
  }
  return result;
}

unint64_t sub_100131CD4()
{
  unint64_t result;

  result = qword_1001C5F18;
  if (!qword_1001C5F18)
  {
    result = swift_getWitnessTable(&unk_100184584, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5F18);
  }
  return result;
}

uint64_t sub_100131D10()
{
  sub_100131694();
  return swift_bridgeObjectRetain(qword_1001DA1A8);
}

uint64_t sub_100131D2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100131BA4();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100131D68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C5F20;
  if (!qword_1001C5F20)
  {
    v1 = sub_100005DC4(&qword_1001C5F28);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001C5F20);
  }
  return result;
}

void sub_100131DAC(_QWORD *a1@<X8>)
{
  *a1 = &off_1001B4558;
}

unint64_t sub_100131DC0()
{
  unint64_t result;

  result = qword_1001C5F30;
  if (!qword_1001C5F30)
  {
    result = swift_getWitnessTable(&unk_10018490C, &type metadata for OpenWeatherSettingsDeeplinksIntent);
    atomic_store(result, (unint64_t *)&qword_1001C5F30);
  }
  return result;
}

uint64_t sub_100131DFC()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100093228(v0, qword_1001DA1C8);
  sub_100025184(v0, (uint64_t)qword_1001DA1C8);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000015, 0x8000000100189F80);
}

_QWORD *sub_100131E5C@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_100131E7C(uint64_t a1)
{
  return IntentParameter.wrappedValue.setter(a1);
}

uint64_t sub_100131E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[16];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10002325C();
  v4 = v3 - v2;
  sub_100005D40(&qword_1001C5810);
  sub_100029068();
  v6 = __chkstk_darwin(v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v20[-v9];
  sub_100005D40(&qword_1001C5818);
  sub_100029068();
  __chkstk_darwin(v11);
  sub_10002325C();
  v14 = v13 - v12;
  type metadata accessor for LocalizedStringResource(0);
  sub_100029068();
  __chkstk_darwin(v15);
  sub_10002325C();
  v18 = v17 - v16;
  sub_100005D40(&qword_1001C5F58);
  LocalizedStringResource.init(stringLiteral:)(0x2072656874616557, 0xEF676E6974746553);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000022, 0x8000000100189F50);
  sub_1001324E8(v14, 0);
  v20[15] = 1;
  type metadata accessor for IntentDialog(0);
  sub_1001324E8((uint64_t)v10, 1);
  sub_1001324E8((uint64_t)v8, 1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v4, enum case for InputConnectionBehavior.default(_:), v0);
  sub_100131918();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v18);
}

_QWORD *sub_100132084@<X0>(_QWORD *a1@<X8>)
{
  return sub_100131E5C(a1);
}

uint64_t sub_10013208C()
{
  uint64_t *v0;

  return sub_100131E7C(*v0);
}

void (*sub_100132094(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_10012AAC4;
}

unint64_t sub_1001320E0()
{
  unint64_t result;

  result = qword_1001C5F38;
  if (!qword_1001C5F38)
  {
    result = swift_getWitnessTable(&unk_100184934, &type metadata for OpenWeatherSettingsDeeplinksIntent);
    atomic_store(result, (unint64_t *)&qword_1001C5F38);
  }
  return result;
}

uint64_t sub_10013211C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_100132434();
  v5 = sub_1001324AC();
  return static URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_100132170()
{
  uint64_t v0;

  v0 = qword_1001C5EA0;
  swift_bridgeObjectRetain(off_1001C5EA8);
  return v0;
}

unint64_t sub_1001321A8()
{
  unint64_t result;

  result = qword_1001C5F40;
  if (!qword_1001C5F40)
  {
    result = swift_getWitnessTable(&unk_1001849C4, &type metadata for OpenWeatherSettingsDeeplinksIntent);
    atomic_store(result, (unint64_t *)&qword_1001C5F40);
  }
  return result;
}

unint64_t sub_1001321E8()
{
  unint64_t result;

  result = qword_1001C5F48;
  if (!qword_1001C5F48)
  {
    result = swift_getWitnessTable(&unk_1001849EC, &type metadata for OpenWeatherSettingsDeeplinksIntent);
    atomic_store(result, (unint64_t *)&qword_1001C5F48);
  }
  return result;
}

uint64_t sub_100132224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012F838(a1, a2, a3, (uint64_t (*)(void))sub_1001320E0, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_100132238@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ACEC(&qword_1001BEF58, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001DA1C8, (uint64_t)sub_100131DFC, a1);
}

uint64_t sub_10013225C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = sub_100132434();
  v6 = sub_100132470();
  v7 = sub_1001324AC();
  *v4 = v2;
  v4[1] = sub_1001322E0;
  return URLRepresentableIntent<>.perform()(a2, v5, v6, v7);
}

uint64_t sub_1001322E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*v1 + 16);
  v3 = *v1;
  result = swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  return result;
}

uint64_t sub_10013233C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100131E9C();
  *a1 = result;
  return result;
}

uint64_t sub_100132360(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001320E0();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenWeatherSettingsDeeplinksIntent()
{
  return &type metadata for OpenWeatherSettingsDeeplinksIntent;
}

uint64_t storeEnumTagSinglePayload for WeatherSettingsDeeplinks(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001323D8 + 4 * byte_100184550[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001323F8 + 4 * byte_100184555[v4]))();
}

_BYTE *sub_1001323D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001323F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100132400(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100132408(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100132410(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100132418(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WeatherSettingsDeeplinks()
{
  return &type metadata for WeatherSettingsDeeplinks;
}

unint64_t sub_100132434()
{
  unint64_t result;

  result = qword_1001C5F60;
  if (!qword_1001C5F60)
  {
    result = swift_getWitnessTable(&unk_10018484C, &type metadata for OpenWeatherSettingsDeeplinksIntent);
    atomic_store(result, (unint64_t *)&qword_1001C5F60);
  }
  return result;
}

unint64_t sub_100132470()
{
  unint64_t result;

  result = qword_1001C5F68;
  if (!qword_1001C5F68)
  {
    result = swift_getWitnessTable(&unk_10018489C, &type metadata for OpenWeatherSettingsDeeplinksIntent);
    atomic_store(result, (unint64_t *)&qword_1001C5F68);
  }
  return result;
}

unint64_t sub_1001324AC()
{
  unint64_t result;

  result = qword_1001C5F70;
  if (!qword_1001C5F70)
  {
    result = swift_getWitnessTable(&unk_1001845FC, &type metadata for WeatherSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_1001C5F70);
  }
  return result;
}

uint64_t sub_1001324E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, 1, v2);
}

ValueMetadata *type metadata accessor for HourlyCellPreferenceKey()
{
  return &type metadata for HourlyCellPreferenceKey;
}

void sub_100132504()
{
  qword_1001DA1E0 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t *sub_100132518()
{
  if (qword_1001BEF60 != -1)
    swift_once(&qword_1001BEF60, sub_100132504);
  return &qword_1001DA1E0;
}

void sub_100132558(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v2;

  a2(&v2);
  sub_1000BB600(v2);
}

uint64_t sub_100132594@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  sub_100132518();
  v2 = qword_1001DA1E0;
  *a1 = qword_1001DA1E0;
  return swift_bridgeObjectRetain(v2);
}

uint64_t getEnumTagSinglePayload for HourlyCellPreferenceData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for HourlyCellPreferenceData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for HourlyCellPreferenceData()
{
  return &type metadata for HourlyCellPreferenceData;
}

BOOL sub_100132630(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && CGRectEqualToRect(*(CGRect *)(a1 + 8), *(CGRect *)(a2 + 8));
}

__n128 sub_100132670@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  __n128 result;

  v5 = static Font.caption2.getter();
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize))
  {
    v6 = sub_100005BB8(*(_BYTE *)(v2 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize));
    if (v6)
    {
      v7 = static Font.caption2.getter();
      v8 = static Font.caption.getter(v7);
    }
    else
    {
      v7 = static Font.body.getter(v6);
      v8 = static Font.footnote.getter(v7);
    }
    v9 = v8;
    v10 = (unsigned int *)&enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
    v11 = (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:);
  }
  else
  {
    v7 = static Font.callout.getter();
    v9 = static Font.caption.getter(v7);
    v10 = (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:);
    v11 = (unsigned int *)&enum case for ContentSizeCategory.extraLarge(_:);
  }
  v12 = sub_10013279C(v10, v11);
  v13 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AggregateWeatherViewModel(0) + 28));
  sub_10010A920(v12, v13);
  swift_bridgeObjectRetain(v13);
  sub_100160BC4();
  v15 = v14;
  v16 = sub_100132860(v2);
  a2->n128_u64[0] = v15;
  a2->n128_u64[1] = v5;
  a2[1].n128_u64[0] = v7;
  a2[1].n128_u64[1] = v9;
  __asm { FMOV            V0.2D, #2.0 }
  a2[2] = result;
  a2[3].n128_u8[0] = v16 & 1;
  return result;
}

uint64_t sub_10013279C(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v9;

  v4 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v4);
  sub_10002325C();
  sub_100132B5C(v5, *a1);
  v6 = sub_100132B74();
  v7 = sub_100132B68();
  if ((v6 & 1) != 0)
    return 4;
  sub_100132B5C(v7, *a2);
  v9 = sub_100132B74();
  sub_100132B68();
  if ((v9 & 1) != 0)
    return 5;
  else
    return 6;
}

uint64_t sub_100132860(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  char v15;
  _QWORD v17[2];

  v2 = type metadata accessor for ContentSizeCategory(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WidgetFamily(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for WidgetFamily.systemMedium(_:), v6);
  v10 = sub_10008A7CC();
  dispatch thunk of RawRepresentable.rawValue.getter(v6, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(v6, v10);
  v12 = v17[0];
  v11 = v17[1];
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v11 == v12)
  {
    v13 = a1 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
    if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize) >= 2u)
      v14 = (unsigned int *)&enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
    else
      v14 = (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *v14, v2);
    v15 = sub_10015E258(v13, v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v15 = 1;
  }
  return v15 & 1;
}

uint64_t sub_100132A00(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = type metadata accessor for ContentSizeCategory(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10002325C();
  v12 = v11 - v10;
  v13 = type metadata accessor for WidgetFamily(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_10002325C();
  v17 = v16 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v16 - v15, a1, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  v18 = sub_100067564(v17, v12, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return v18;
}

uint64_t sub_100132B1C()
{
  return type metadata accessor for HourlyBannerViewAttributesFactory(0);
}

uint64_t type metadata accessor for HourlyBannerViewAttributesFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C5FD0;
  if (!qword_1001C5FD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HourlyBannerViewAttributesFactory);
  return result;
}

uint64_t sub_100132B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  return v3(v4, a2, v2);
}

uint64_t sub_100132B68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_100132B74()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10015DC48(v0, v1);
}

_QWORD *sub_100132B80(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t EnumCaseMultiPayload;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, char *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  int *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t);
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  int *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  void (*v157)(char *, char *, uint64_t);
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  __int128 v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  int *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  void (*v206)(char *, char *, uint64_t);
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  int *v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  _BOOL8 v267;
  uint64_t v269;
  void (*v270)(char *, char *, uint64_t);
  void (*v271)(char *, char *, uint64_t);
  uint64_t v272;
  int *v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  void (*v277)(char *, char *, uint64_t);
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  char *v281;
  int *v282;
  _QWORD *v283;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = a3[5];
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = sub_100005D40(&qword_1001C0290);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = v16;
      v21 = v18;
      v22 = 1;
    }
    else
    {
      v23 = *v17;
      *v16 = *v17;
      swift_retain(v23);
      v20 = v16;
      v21 = v18;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    v24 = a3[6];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = *(_QWORD *)v26;
    v28 = v26[8];
    sub_10001961C(*(_QWORD *)v26, v28);
    *(_QWORD *)v25 = v27;
    v25[8] = v28;
    v29 = a3[7];
    v30 = (_QWORD *)((char *)a1 + v29);
    v31 = (_QWORD *)((char *)a2 + v29);
    v32 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
      v34 = 1;
    }
    else
    {
      v35 = *v31;
      *v30 = *v31;
      swift_retain(v35);
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v32, v34);
    v36 = a3[8];
    v37 = (_QWORD *)((char *)a1 + v36);
    v38 = (_QWORD *)((char *)a2 + v36);
    v39 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v40 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v37, v38, v40);
      v41 = v37;
      v42 = v39;
      v43 = 1;
    }
    else
    {
      v44 = *v38;
      *v37 = *v38;
      swift_retain(v44);
      v41 = v37;
      v42 = v39;
      v43 = 0;
    }
    swift_storeEnumTagMultiPayload(v41, v42, v43);
    v45 = a3[9];
    v46 = (char *)a1 + v45;
    v47 = (char *)a2 + v45;
    v48 = *(_QWORD *)v47;
    v49 = v47[8];
    sub_10001961C(*(_QWORD *)v47, v49);
    *(_QWORD *)v46 = v48;
    v46[8] = v49;
    v282 = a3;
    v50 = a3[10];
    v279 = a1;
    v51 = (char *)a1 + v50;
    v283 = a2;
    v52 = (char *)a2 + v50;
    v278 = type metadata accessor for Date(0);
    v277 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v278 - 8) + 16);
    v277(v51, v52, v278);
    v53 = type metadata accessor for ForecastEntry(0);
    v54 = *(int *)(v53 + 20);
    v55 = &v51[v54];
    v56 = &v52[v54];
    v57 = type metadata accessor for TimelineEntryRelevance(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v56, 1, v57))
    {
      v58 = sub_100005D40(&qword_1001BFA20);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v55, 0, 1, v57);
    }
    v280 = v53;
    v59 = *(int *)(v53 + 24);
    v60 = &v51[v59];
    v61 = &v52[v59];
    v62 = *(_QWORD *)&v52[v59 + 8];
    *(_QWORD *)v60 = *(_QWORD *)&v52[v59];
    *((_QWORD *)v60 + 1) = v62;
    v63 = *(_QWORD *)&v52[v59 + 24];
    *((_QWORD *)v60 + 2) = *(_QWORD *)&v52[v59 + 16];
    *((_QWORD *)v60 + 3) = v63;
    v64 = *(_QWORD *)&v52[v59 + 40];
    *((_QWORD *)v60 + 4) = *(_QWORD *)&v52[v59 + 32];
    *((_QWORD *)v60 + 5) = v64;
    *((_DWORD *)v60 + 12) = *(_DWORD *)&v52[v59 + 48];
    v65 = type metadata accessor for WidgetContext(0);
    v66 = *(int *)(v65 + 40);
    v67 = &v60[v66];
    v68 = &v61[v66];
    v69 = type metadata accessor for URL(0);
    v70 = v62;
    v71 = v69;
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v64);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v68, 1, v71))
    {
      v72 = sub_100005D40(&qword_1001BFA28);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v67, v68, v71);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v71);
    }
    v73 = *(int *)(v65 + 44);
    v74 = &v60[v73];
    v75 = &v61[v73];
    v76 = *(_QWORD *)v75;
    *(_QWORD *)v74 = *(_QWORD *)v75;
    v74[8] = v75[8];
    v77 = *(int *)(v280 + 28);
    v78 = &v51[v77];
    v79 = &v52[v77];
    v80 = type metadata accessor for ForecastEntry.Model(0);
    swift_bridgeObjectRetain(v76);
    if (swift_getEnumCaseMultiPayload(v79, v80) == 1)
    {
      v81 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v79, v81);
      v83 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v108 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 16))(v78, v79, v108);
        v13 = v279;
      }
      else
      {
        v275 = v81;
        v276 = v80;
        v281 = v78;
        v274 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v84 = type metadata accessor for UUID(0);
          v85 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16);
          v85(v78, v79, v84);
          v86 = type metadata accessor for InstantWeatherViewModel(0);
          v87 = *(int *)(v86 + 20);
          v88 = &v78[v87];
          v89 = &v79[v87];
          v90 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v88, v89, v90);
          v91 = *(int *)(v86 + 24);
          v92 = &v78[v91];
          v93 = &v79[v91];
          v271 = v85;
          v85(&v78[v91], &v79[v91], v84);
          v94 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v277(&v92[v94[5]], &v93[v94[5]], v278);
          v277(&v92[v94[6]], &v93[v94[6]], v278);
          v95 = v94[7];
          v96 = &v92[v95];
          v97 = &v93[v95];
          v98 = sub_100005D40(&qword_1001BF090);
          v99 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16);
          v99(v96, v97, v98);
          v99(&v92[v94[8]], &v93[v94[8]], v98);
          v100 = v94[9];
          v101 = &v92[v100];
          v102 = &v93[v100];
          v103 = *((_QWORD *)v102 + 1);
          *(_QWORD *)v101 = *(_QWORD *)v102;
          *((_QWORD *)v101 + 1) = v103;
          v104 = v94[10];
          v105 = &v92[v104];
          v106 = &v93[v104];
          swift_bridgeObjectRetain(v103);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v106, 1, v98))
          {
            v107 = sub_100005D40(&qword_1001BF098);
            memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
          }
          else
          {
            v99(v105, v106, v98);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v105, 0, 1, v98);
          }
          v133 = v94[11];
          v134 = &v92[v133];
          v135 = &v93[v133];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v93[v133], 1, v98))
          {
            v136 = sub_100005D40(&qword_1001BF098);
            memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
          }
          else
          {
            v99(v134, v135, v98);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v134, 0, 1, v98);
          }
          v137 = v94[12];
          v138 = &v92[v137];
          v139 = &v93[v137];
          v271(&v92[v137], &v93[v137], v84);
          v140 = (int *)type metadata accessor for ConditionViewModel(0);
          v141 = v140[5];
          v142 = &v138[v141];
          v143 = &v139[v141];
          v144 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 16))(v142, v143, v144);
          v145 = v140[6];
          v146 = &v138[v145];
          v147 = &v139[v145];
          v148 = *((_QWORD *)v147 + 1);
          *(_QWORD *)v146 = *(_QWORD *)v147;
          *((_QWORD *)v146 + 1) = v148;
          v149 = v140[7];
          v150 = &v138[v149];
          v151 = &v139[v149];
          v152 = *((_QWORD *)v151 + 1);
          *(_QWORD *)v150 = *(_QWORD *)v151;
          *((_QWORD *)v150 + 1) = v152;
          v138[v140[8]] = v139[v140[8]];
          v138[v140[9]] = v139[v140[9]];
          v138[v140[10]] = v139[v140[10]];
          *(_QWORD *)&v92[v94[13]] = *(_QWORD *)&v93[v94[13]];
          v153 = v94[14];
          v154 = &v92[v153];
          v155 = &v93[v153];
          v156 = type metadata accessor for CloudAltitudeKind(0);
          v157 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v156 - 8) + 16);
          swift_bridgeObjectRetain(v148);
          swift_bridgeObjectRetain(v152);
          v157(v154, v155, v156);
          v158 = v94[15];
          v159 = &v92[v158];
          v160 = &v93[v158];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v93[v158], 1, v278))
          {
            v161 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
          }
          else
          {
            v277(v159, v160, v278);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v159, 0, 1, v278);
          }
          v13 = v279;
          v162 = v94[16];
          v163 = &v92[v162];
          v164 = &v93[v162];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v93[v162], 1, v278))
          {
            v165 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
          }
          else
          {
            v277(v163, v164, v278);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v163, 0, 1, v278);
          }
          v166 = v94[17];
          v167 = &v92[v166];
          v168 = &v93[v166];
          v169 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 16))(v167, v168, v169);
          v170 = v94[18];
          v171 = &v92[v170];
          v172 = &v93[v170];
          v173 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 16))(v171, v172, v173);
          *(_QWORD *)&v92[v94[19]] = *(_QWORD *)&v93[v94[19]];
          v174 = v94[20];
          v175 = &v92[v174];
          v176 = &v93[v174];
          v177 = *((_QWORD *)v176 + 1);
          if (v177)
          {
            *(_QWORD *)v175 = *(_QWORD *)v176;
            *((_QWORD *)v175 + 1) = v177;
            v178 = *((_QWORD *)v176 + 2);
            v179 = *((_QWORD *)v176 + 3);
            v180 = v176[32];
            swift_bridgeObjectRetain(v177);
            sub_100006E58(v178, v179, v180);
            *((_QWORD *)v175 + 2) = v178;
            *((_QWORD *)v175 + 3) = v179;
            v175[32] = v180;
          }
          else
          {
            v181 = *((_OWORD *)v176 + 1);
            *(_OWORD *)v175 = *(_OWORD *)v176;
            *((_OWORD *)v175 + 1) = v181;
            v175[32] = v176[32];
          }
          v78 = v281;
          v81 = v275;
          v80 = v276;
        }
        else
        {
          v269 = v71;
          v109 = type metadata accessor for UUID(0);
          v110 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 16);
          v110(v78, v79, v109);
          v111 = type metadata accessor for AggregateWeatherViewModel(0);
          v112 = *(int *)(v111 + 20);
          v113 = &v78[v112];
          v114 = &v79[v112];
          v115 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 16))(v113, v114, v115);
          v272 = v109;
          v273 = (int *)v111;
          v116 = *(int *)(v111 + 24);
          v117 = &v78[v116];
          v118 = &v79[v116];
          v270 = v110;
          v110(v117, &v79[v116], v109);
          v119 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v277(&v117[v119[5]], &v118[v119[5]], v278);
          v277(&v117[v119[6]], &v118[v119[6]], v278);
          v120 = v119[7];
          v121 = &v117[v120];
          v122 = &v118[v120];
          v123 = sub_100005D40(&qword_1001BF090);
          v124 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 16);
          v124(v121, v122, v123);
          v124(&v117[v119[8]], &v118[v119[8]], v123);
          v125 = v119[9];
          v126 = &v117[v125];
          v127 = &v118[v125];
          v128 = *((_QWORD *)v127 + 1);
          *(_QWORD *)v126 = *(_QWORD *)v127;
          *((_QWORD *)v126 + 1) = v128;
          v129 = v119[10];
          v130 = &v117[v129];
          v131 = &v118[v129];
          swift_bridgeObjectRetain(v128);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v131, 1, v123))
          {
            v132 = sub_100005D40(&qword_1001BF098);
            memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
          }
          else
          {
            v124(v130, v131, v123);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v130, 0, 1, v123);
          }
          v182 = v119[11];
          v183 = &v117[v182];
          v184 = &v118[v182];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v118[v182], 1, v123))
          {
            v185 = sub_100005D40(&qword_1001BF098);
            memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
          }
          else
          {
            v124(v183, v184, v123);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v183, 0, 1, v123);
          }
          v186 = v119[12];
          v187 = &v117[v186];
          v188 = &v118[v186];
          v270(&v117[v186], &v118[v186], v272);
          v189 = (int *)type metadata accessor for ConditionViewModel(0);
          v190 = v189[5];
          v191 = &v187[v190];
          v192 = &v188[v190];
          v193 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v193 - 8) + 16))(v191, v192, v193);
          v194 = v189[6];
          v195 = &v187[v194];
          v196 = &v188[v194];
          v197 = *((_QWORD *)v196 + 1);
          *(_QWORD *)v195 = *(_QWORD *)v196;
          *((_QWORD *)v195 + 1) = v197;
          v198 = v189[7];
          v199 = &v187[v198];
          v200 = &v188[v198];
          v201 = *((_QWORD *)v200 + 1);
          *(_QWORD *)v199 = *(_QWORD *)v200;
          *((_QWORD *)v199 + 1) = v201;
          v187[v189[8]] = v188[v189[8]];
          v187[v189[9]] = v188[v189[9]];
          v187[v189[10]] = v188[v189[10]];
          *(_QWORD *)&v117[v119[13]] = *(_QWORD *)&v118[v119[13]];
          v202 = v119[14];
          v203 = &v117[v202];
          v204 = &v118[v202];
          v205 = type metadata accessor for CloudAltitudeKind(0);
          v206 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v205 - 8) + 16);
          swift_bridgeObjectRetain(v197);
          swift_bridgeObjectRetain(v201);
          v206(v203, v204, v205);
          v207 = v119[15];
          v208 = &v117[v207];
          v209 = &v118[v207];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v118[v207], 1, v278))
          {
            v210 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v208, v209, *(_QWORD *)(*(_QWORD *)(v210 - 8) + 64));
          }
          else
          {
            v277(v208, v209, v278);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v208, 0, 1, v278);
          }
          v211 = v119[16];
          v212 = &v117[v211];
          v213 = &v118[v211];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v118[v211], 1, v278))
          {
            v214 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
          }
          else
          {
            v277(v212, v213, v278);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v212, 0, 1, v278);
          }
          v215 = v119[17];
          v216 = &v117[v215];
          v217 = &v118[v215];
          v218 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v218 - 8) + 16))(v216, v217, v218);
          v219 = v119[18];
          v220 = &v117[v219];
          v221 = &v118[v219];
          v222 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v222 - 8) + 16))(v220, v221, v222);
          *(_QWORD *)&v117[v119[19]] = *(_QWORD *)&v118[v119[19]];
          v223 = v119[20];
          v224 = &v117[v223];
          v225 = &v118[v223];
          v226 = *((_QWORD *)v225 + 1);
          if (v226)
          {
            *(_QWORD *)v224 = *(_QWORD *)v225;
            *((_QWORD *)v224 + 1) = v226;
            v227 = *((_QWORD *)v225 + 2);
            v228 = *((_QWORD *)v225 + 3);
            v229 = v225[32];
            swift_bridgeObjectRetain(v226);
            sub_100006E58(v227, v228, v229);
            *((_QWORD *)v224 + 2) = v227;
            *((_QWORD *)v224 + 3) = v228;
            v224[32] = v229;
          }
          else
          {
            v230 = *((_OWORD *)v225 + 1);
            *(_OWORD *)v224 = *(_OWORD *)v225;
            *((_OWORD *)v224 + 1) = v230;
            v224[32] = v225[32];
          }
          v78 = v281;
          v231 = v273[7];
          v232 = *(_QWORD *)&v79[v231];
          *(_QWORD *)&v281[v231] = v232;
          v233 = v273[8];
          v234 = *(_QWORD *)&v79[v233];
          *(_QWORD *)&v281[v233] = v234;
          v235 = v273[9];
          v236 = &v281[v235];
          v237 = &v79[v235];
          v238 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v232);
          swift_bridgeObjectRetain(v234);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v237, 1, (uint64_t)v238))
          {
            v239 = sub_100005D40(&qword_1001BFA30);
            memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
          }
          else
          {
            v270(v236, v237, v272);
            v277(&v236[v238[5]], &v237[v238[5]], v278);
            *(_QWORD *)&v236[v238[6]] = *(_QWORD *)&v237[v238[6]];
            v240 = v238[7];
            v241 = &v236[v240];
            v242 = &v237[v240];
            v243 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v243 - 8) + 16))(v241, v242, v243);
            v244 = v238[8];
            v245 = &v236[v244];
            v246 = &v237[v244];
            v247 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v247 - 8) + 16))(v245, v246, v247);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v236, 0, 1, (uint64_t)v238);
          }
          v81 = v275;
          v248 = v273[10];
          v249 = &v281[v248];
          v250 = &v79[v248];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v250, 1, HourPrecipitationChartViewModel))
          {
            v252 = sub_100005D40(&qword_1001BFA38);
            memcpy(v249, v250, *(_QWORD *)(*(_QWORD *)(v252 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v249, v250, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v249, 0, 1, HourPrecipitationChartViewModel);
          }
          v253 = v273[11];
          v254 = *(_QWORD *)&v79[v253];
          *(_QWORD *)&v281[v253] = v254;
          v255 = v273[12];
          v256 = &v281[v255];
          v257 = &v79[v255];
          *(_QWORD *)v256 = *(_QWORD *)v257;
          *((_WORD *)v256 + 4) = *((_WORD *)v257 + 4);
          v258 = v273[13];
          v259 = &v281[v258];
          v260 = &v79[v258];
          swift_bridgeObjectRetain(v254);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v260, 1, v269))
          {
            v261 = sub_100005D40(&qword_1001BFA28);
            memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v261 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v269 - 8) + 16))(v259, v260, v269);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v259, 0, 1, v269);
          }
          v262 = v273[14];
          v263 = &v281[v262];
          v264 = &v79[v262];
          v265 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v264, 1, v265))
          {
            v266 = sub_100005D40(&qword_1001BFA40);
            memcpy(v263, v264, *(_QWORD *)(*(_QWORD *)(v266 - 8) + 64));
          }
          else
          {
            v267 = swift_getEnumCaseMultiPayload(v264, v265) == 1;
            v277(v263, v264, v278);
            swift_storeEnumTagMultiPayload(v263, v265, v267);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v263, 0, 1, v265);
          }
          v13 = v279;
          v80 = v276;
        }
        v83 = v274;
      }
      swift_storeEnumTagMultiPayload(v78, v81, v83);
      swift_storeEnumTagMultiPayload(v78, v80, 1);
    }
    else
    {
      memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
      v13 = v279;
    }
    *((_BYTE *)v13 + v282[11]) = *((_BYTE *)v283 + v282[11]);
  }
  return v13;
}

uint64_t sub_100133C9C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  int *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  int *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  int *v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  void (*v94)(char *, uint64_t);

  v4 = sub_100005D40(&qword_1001BFA18);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_100005D40(&qword_1001C0290);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_100019A78(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  v9 = (_QWORD *)((char *)a1 + a2[7]);
  v10 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)((char *)a1 + a2[8]);
  v13 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  sub_100019A78(*(_QWORD *)((char *)a1 + a2[9]), *((_BYTE *)a1 + a2[9] + 8));
  v15 = (char *)a1 + a2[10];
  v16 = type metadata accessor for Date(0);
  v94 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
  v94(v15, v16);
  v17 = (int *)type metadata accessor for ForecastEntry(0);
  v18 = (uint64_t)&v15[v17[5]];
  v19 = type metadata accessor for TimelineEntryRelevance(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v18, 1, v19))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = &v15[v17[6]];
  swift_bridgeObjectRelease(*((_QWORD *)v20 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v20 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v20 + 5));
  v21 = type metadata accessor for WidgetContext(0);
  v22 = (uint64_t)&v20[*(int *)(v21 + 40)];
  v23 = type metadata accessor for URL(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v22, 1, v23))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  swift_bridgeObjectRelease(*(_QWORD *)&v20[*(int *)(v21 + 44)]);
  v24 = &v15[v17[7]];
  v25 = type metadata accessor for ForecastEntry.Model(0);
  result = swift_getEnumCaseMultiPayload(v24, v25);
  if ((_DWORD)result == 1)
  {
    v27 = type metadata accessor for WeatherDataViewModel(0);
    result = swift_getEnumCaseMultiPayload(v24, v27);
    switch((_DWORD)result)
    {
      case 2:
        v66 = type metadata accessor for SunriseSunsetViewModel(0);
        v67 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 8);
        v65 = (uint64_t)v24;
        return v67(v65, v66);
      case 1:
        v68 = type metadata accessor for UUID(0);
        v69 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v68 - 8) + 8);
        v69(v24, v68);
        v70 = type metadata accessor for InstantWeatherViewModel(0);
        v71 = &v24[*(int *)(v70 + 20)];
        v72 = type metadata accessor for Location(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v72 - 8) + 8))(v71, v72);
        v73 = &v24[*(int *)(v70 + 24)];
        v69(v73, v68);
        v74 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v94(&v73[v74[5]], v16);
        v94(&v73[v74[6]], v16);
        v75 = &v73[v74[7]];
        v76 = sub_100005D40(&qword_1001BF090);
        v77 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v76 - 8) + 8);
        v77(v75, v76);
        v77(&v73[v74[8]], v76);
        swift_bridgeObjectRelease(*(_QWORD *)&v73[v74[9] + 8]);
        v78 = (uint64_t)&v73[v74[10]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v78, 1, v76))
          v77((char *)v78, v76);
        v79 = (uint64_t)&v73[v74[11]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v79, 1, v76))
          v77((char *)v79, v76);
        v80 = &v73[v74[12]];
        v69(v80, v68);
        v81 = (int *)type metadata accessor for ConditionViewModel(0);
        v82 = &v80[v81[5]];
        v83 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v83 - 8) + 8))(v82, v83);
        swift_bridgeObjectRelease(*(_QWORD *)&v80[v81[6] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v80[v81[7] + 8]);
        v84 = &v73[v74[14]];
        v85 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v85 - 8) + 8))(v84, v85);
        v86 = (uint64_t)&v73[v74[15]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v86, 1, v16))
          v94((char *)v86, v16);
        v87 = (uint64_t)&v73[v74[16]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v87, 1, v16))
          v94((char *)v87, v16);
        v88 = &v73[v74[17]];
        v89 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v89 - 8) + 8))(v88, v89);
        v90 = &v73[v74[18]];
        v91 = type metadata accessor for Wind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v91 - 8) + 8))(v90, v91);
        v92 = &v73[v74[20]];
        result = *((_QWORD *)v92 + 1);
        if (result)
        {
          swift_bridgeObjectRelease(result);
          return sub_100007458(*((_QWORD *)v92 + 2), *((_QWORD *)v92 + 3), v92[32]);
        }
        break;
      case 0:
        v28 = type metadata accessor for UUID(0);
        v29 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8);
        v29(v24, v28);
        v30 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        v31 = &v24[v30[5]];
        v32 = type metadata accessor for Location(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
        v33 = &v24[v30[6]];
        v93 = v29;
        v29(v33, v28);
        v34 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v94(&v33[v34[5]], v16);
        v94(&v33[v34[6]], v16);
        v35 = &v33[v34[7]];
        v36 = sub_100005D40(&qword_1001BF090);
        v37 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8);
        v37(v35, v36);
        v37(&v33[v34[8]], v36);
        swift_bridgeObjectRelease(*(_QWORD *)&v33[v34[9] + 8]);
        v38 = (uint64_t)&v33[v34[10]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, v36))
          v37((char *)v38, v36);
        v39 = (uint64_t)&v33[v34[11]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v39, 1, v36))
          v37((char *)v39, v36);
        v40 = &v33[v34[12]];
        v93(v40, v28);
        v41 = (int *)type metadata accessor for ConditionViewModel(0);
        v42 = &v40[v41[5]];
        v43 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v42, v43);
        swift_bridgeObjectRelease(*(_QWORD *)&v40[v41[6] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v40[v41[7] + 8]);
        v44 = &v33[v34[14]];
        v45 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v44, v45);
        v46 = (uint64_t)&v33[v34[15]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v46, 1, v16))
          v94((char *)v46, v16);
        v47 = (uint64_t)&v33[v34[16]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v47, 1, v16))
          v94((char *)v47, v16);
        v48 = &v33[v34[17]];
        v49 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v48, v49);
        v50 = &v33[v34[18]];
        v51 = type metadata accessor for Wind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v50, v51);
        v52 = &v33[v34[20]];
        v53 = *((_QWORD *)v52 + 1);
        if (v53)
        {
          swift_bridgeObjectRelease(v53);
          sub_100007458(*((_QWORD *)v52 + 2), *((_QWORD *)v52 + 3), v52[32]);
        }
        swift_bridgeObjectRelease(*(_QWORD *)&v24[v30[7]]);
        swift_bridgeObjectRelease(*(_QWORD *)&v24[v30[8]]);
        v54 = (uint64_t)&v24[v30[9]];
        v55 = (int *)type metadata accessor for AirQualityViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v54, 1, (uint64_t)v55))
        {
          v93((char *)v54, v28);
          v94((char *)(v54 + v55[5]), v16);
          v56 = v54 + v55[7];
          v57 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v56, v57);
          v58 = v54 + v55[8];
          v59 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v58, v59);
        }
        v60 = (uint64_t)&v24[v30[10]];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v60, 1, HourPrecipitationChartViewModel))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v60, HourPrecipitationChartViewModel);
        swift_bridgeObjectRelease(*(_QWORD *)&v24[v30[11]]);
        v62 = (uint64_t)&v24[v30[13]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v62, 1, v23))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v62, v23);
        v63 = (uint64_t)&v24[v30[14]];
        v64 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v63, 1, v64);
        if (!(_DWORD)result)
        {
          v65 = v63;
          v66 = v16;
          v67 = (uint64_t (*)(uint64_t, uint64_t))v94;
          return v67(v65, v66);
        }
        break;
    }
  }
  return result;
}

_QWORD *sub_100134624(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t EnumCaseMultiPayload;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  int *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  int *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  void (*v122)(char *, char *, uint64_t);
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  int *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  void (*v155)(char *, char *, uint64_t);
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  __int128 v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  int *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  void (*v204)(char *, char *, uint64_t);
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  int *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  _BOOL8 v265;
  uint64_t v267;
  void (*v268)(char *, char *, uint64_t);
  void (*v269)(char *, char *, uint64_t);
  uint64_t v270;
  int *v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  void (*v275)(char *, char *, uint64_t);
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  char *v279;
  int *v280;
  _QWORD *v281;

  v6 = sub_100005D40(&qword_1001BFA18);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_100005D40(&qword_1001C0290);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_10001961C(*(_QWORD *)v23, v25);
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  v26 = a3[7];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v29 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
    v31 = 1;
  }
  else
  {
    v32 = *v28;
    *v27 = *v28;
    swift_retain(v32);
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v29, v31);
  v33 = a3[8];
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  v36 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
  {
    v37 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
    v38 = v34;
    v39 = v36;
    v40 = 1;
  }
  else
  {
    v41 = *v35;
    *v34 = *v35;
    swift_retain(v41);
    v38 = v34;
    v39 = v36;
    v40 = 0;
  }
  swift_storeEnumTagMultiPayload(v38, v39, v40);
  v42 = a3[9];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = *(_QWORD *)v44;
  v46 = v44[8];
  sub_10001961C(*(_QWORD *)v44, v46);
  *(_QWORD *)v43 = v45;
  v43[8] = v46;
  v280 = a3;
  v47 = a3[10];
  v277 = a1;
  v48 = (char *)a1 + v47;
  v281 = a2;
  v49 = (char *)a2 + v47;
  v276 = type metadata accessor for Date(0);
  v275 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v276 - 8) + 16);
  v275(v48, v49, v276);
  v50 = type metadata accessor for ForecastEntry(0);
  v51 = *(int *)(v50 + 20);
  v52 = &v48[v51];
  v53 = &v49[v51];
  v54 = type metadata accessor for TimelineEntryRelevance(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v53, 1, v54))
  {
    v55 = sub_100005D40(&qword_1001BFA20);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v52, 0, 1, v54);
  }
  v278 = v50;
  v56 = *(int *)(v50 + 24);
  v57 = &v48[v56];
  v58 = &v49[v56];
  v59 = *(_QWORD *)&v49[v56 + 8];
  *(_QWORD *)v57 = *(_QWORD *)&v49[v56];
  *((_QWORD *)v57 + 1) = v59;
  v60 = *(_QWORD *)&v49[v56 + 24];
  *((_QWORD *)v57 + 2) = *(_QWORD *)&v49[v56 + 16];
  *((_QWORD *)v57 + 3) = v60;
  v61 = *(_QWORD *)&v49[v56 + 40];
  *((_QWORD *)v57 + 4) = *(_QWORD *)&v49[v56 + 32];
  *((_QWORD *)v57 + 5) = v61;
  *((_DWORD *)v57 + 12) = *(_DWORD *)&v49[v56 + 48];
  v62 = type metadata accessor for WidgetContext(0);
  v63 = *(int *)(v62 + 40);
  v64 = &v57[v63];
  v65 = &v58[v63];
  v66 = type metadata accessor for URL(0);
  v67 = v59;
  v68 = v66;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v61);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v65, 1, v68))
  {
    v69 = sub_100005D40(&qword_1001BFA28);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v64, v65, v68);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v68);
  }
  v70 = *(int *)(v62 + 44);
  v71 = &v57[v70];
  v72 = &v58[v70];
  v73 = *(_QWORD *)v72;
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v71[8] = v72[8];
  v74 = *(int *)(v278 + 28);
  v75 = &v48[v74];
  v76 = &v49[v74];
  v77 = type metadata accessor for ForecastEntry.Model(0);
  swift_bridgeObjectRetain(v73);
  if (swift_getEnumCaseMultiPayload(v76, v77) == 1)
  {
    v78 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v76, v78);
    v80 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v106 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v75, v76, v106);
      v105 = v277;
    }
    else
    {
      v273 = v78;
      v274 = v77;
      v279 = v75;
      v272 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v81 = type metadata accessor for UUID(0);
        v82 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16);
        v82(v75, v76, v81);
        v83 = type metadata accessor for InstantWeatherViewModel(0);
        v84 = *(int *)(v83 + 20);
        v85 = &v75[v84];
        v86 = &v76[v84];
        v87 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v85, v86, v87);
        v88 = *(int *)(v83 + 24);
        v89 = &v75[v88];
        v90 = &v76[v88];
        v269 = v82;
        v82(&v75[v88], &v76[v88], v81);
        v91 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v275(&v89[v91[5]], &v90[v91[5]], v276);
        v275(&v89[v91[6]], &v90[v91[6]], v276);
        v92 = v91[7];
        v93 = &v89[v92];
        v94 = &v90[v92];
        v95 = sub_100005D40(&qword_1001BF090);
        v96 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16);
        v96(v93, v94, v95);
        v96(&v89[v91[8]], &v90[v91[8]], v95);
        v97 = v91[9];
        v98 = &v89[v97];
        v99 = &v90[v97];
        v100 = *((_QWORD *)v99 + 1);
        *(_QWORD *)v98 = *(_QWORD *)v99;
        *((_QWORD *)v98 + 1) = v100;
        v101 = v91[10];
        v102 = &v89[v101];
        v103 = &v90[v101];
        swift_bridgeObjectRetain(v100);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v103, 1, v95))
        {
          v104 = sub_100005D40(&qword_1001BF098);
          memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
        }
        else
        {
          v96(v102, v103, v95);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v102, 0, 1, v95);
        }
        v131 = v91[11];
        v132 = &v89[v131];
        v133 = &v90[v131];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v90[v131], 1, v95))
        {
          v134 = sub_100005D40(&qword_1001BF098);
          memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
        }
        else
        {
          v96(v132, v133, v95);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v132, 0, 1, v95);
        }
        v135 = v91[12];
        v136 = &v89[v135];
        v137 = &v90[v135];
        v269(&v89[v135], &v90[v135], v81);
        v138 = (int *)type metadata accessor for ConditionViewModel(0);
        v139 = v138[5];
        v140 = &v136[v139];
        v141 = &v137[v139];
        v142 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 16))(v140, v141, v142);
        v143 = v138[6];
        v144 = &v136[v143];
        v145 = &v137[v143];
        v146 = *((_QWORD *)v145 + 1);
        *(_QWORD *)v144 = *(_QWORD *)v145;
        *((_QWORD *)v144 + 1) = v146;
        v147 = v138[7];
        v148 = &v136[v147];
        v149 = &v137[v147];
        v150 = *((_QWORD *)v149 + 1);
        *(_QWORD *)v148 = *(_QWORD *)v149;
        *((_QWORD *)v148 + 1) = v150;
        v136[v138[8]] = v137[v138[8]];
        v136[v138[9]] = v137[v138[9]];
        v136[v138[10]] = v137[v138[10]];
        *(_QWORD *)&v89[v91[13]] = *(_QWORD *)&v90[v91[13]];
        v151 = v91[14];
        v152 = &v89[v151];
        v153 = &v90[v151];
        v154 = type metadata accessor for CloudAltitudeKind(0);
        v155 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v154 - 8) + 16);
        swift_bridgeObjectRetain(v146);
        swift_bridgeObjectRetain(v150);
        v155(v152, v153, v154);
        v156 = v91[15];
        v157 = &v89[v156];
        v158 = &v90[v156];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v90[v156], 1, v276))
        {
          v159 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
        }
        else
        {
          v275(v157, v158, v276);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v157, 0, 1, v276);
        }
        v105 = v277;
        v160 = v91[16];
        v161 = &v89[v160];
        v162 = &v90[v160];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v90[v160], 1, v276))
        {
          v163 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
        }
        else
        {
          v275(v161, v162, v276);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v161, 0, 1, v276);
        }
        v164 = v91[17];
        v165 = &v89[v164];
        v166 = &v90[v164];
        v167 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 16))(v165, v166, v167);
        v168 = v91[18];
        v169 = &v89[v168];
        v170 = &v90[v168];
        v171 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v171 - 8) + 16))(v169, v170, v171);
        *(_QWORD *)&v89[v91[19]] = *(_QWORD *)&v90[v91[19]];
        v172 = v91[20];
        v173 = &v89[v172];
        v174 = &v90[v172];
        v175 = *((_QWORD *)v174 + 1);
        if (v175)
        {
          *(_QWORD *)v173 = *(_QWORD *)v174;
          *((_QWORD *)v173 + 1) = v175;
          v176 = *((_QWORD *)v174 + 2);
          v177 = *((_QWORD *)v174 + 3);
          v178 = v174[32];
          swift_bridgeObjectRetain(v175);
          sub_100006E58(v176, v177, v178);
          *((_QWORD *)v173 + 2) = v176;
          *((_QWORD *)v173 + 3) = v177;
          v173[32] = v178;
        }
        else
        {
          v179 = *((_OWORD *)v174 + 1);
          *(_OWORD *)v173 = *(_OWORD *)v174;
          *((_OWORD *)v173 + 1) = v179;
          v173[32] = v174[32];
        }
        v75 = v279;
        v78 = v273;
        v77 = v274;
      }
      else
      {
        v267 = v68;
        v107 = type metadata accessor for UUID(0);
        v108 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16);
        v108(v75, v76, v107);
        v109 = type metadata accessor for AggregateWeatherViewModel(0);
        v110 = *(int *)(v109 + 20);
        v111 = &v75[v110];
        v112 = &v76[v110];
        v113 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(v111, v112, v113);
        v270 = v107;
        v271 = (int *)v109;
        v114 = *(int *)(v109 + 24);
        v115 = &v75[v114];
        v116 = &v76[v114];
        v268 = v108;
        v108(v115, &v76[v114], v107);
        v117 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v275(&v115[v117[5]], &v116[v117[5]], v276);
        v275(&v115[v117[6]], &v116[v117[6]], v276);
        v118 = v117[7];
        v119 = &v115[v118];
        v120 = &v116[v118];
        v121 = sub_100005D40(&qword_1001BF090);
        v122 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 16);
        v122(v119, v120, v121);
        v122(&v115[v117[8]], &v116[v117[8]], v121);
        v123 = v117[9];
        v124 = &v115[v123];
        v125 = &v116[v123];
        v126 = *((_QWORD *)v125 + 1);
        *(_QWORD *)v124 = *(_QWORD *)v125;
        *((_QWORD *)v124 + 1) = v126;
        v127 = v117[10];
        v128 = &v115[v127];
        v129 = &v116[v127];
        swift_bridgeObjectRetain(v126);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v129, 1, v121))
        {
          v130 = sub_100005D40(&qword_1001BF098);
          memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
        }
        else
        {
          v122(v128, v129, v121);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v128, 0, 1, v121);
        }
        v180 = v117[11];
        v181 = &v115[v180];
        v182 = &v116[v180];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v116[v180], 1, v121))
        {
          v183 = sub_100005D40(&qword_1001BF098);
          memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
        }
        else
        {
          v122(v181, v182, v121);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v181, 0, 1, v121);
        }
        v184 = v117[12];
        v185 = &v115[v184];
        v186 = &v116[v184];
        v268(&v115[v184], &v116[v184], v270);
        v187 = (int *)type metadata accessor for ConditionViewModel(0);
        v188 = v187[5];
        v189 = &v185[v188];
        v190 = &v186[v188];
        v191 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v191 - 8) + 16))(v189, v190, v191);
        v192 = v187[6];
        v193 = &v185[v192];
        v194 = &v186[v192];
        v195 = *((_QWORD *)v194 + 1);
        *(_QWORD *)v193 = *(_QWORD *)v194;
        *((_QWORD *)v193 + 1) = v195;
        v196 = v187[7];
        v197 = &v185[v196];
        v198 = &v186[v196];
        v199 = *((_QWORD *)v198 + 1);
        *(_QWORD *)v197 = *(_QWORD *)v198;
        *((_QWORD *)v197 + 1) = v199;
        v185[v187[8]] = v186[v187[8]];
        v185[v187[9]] = v186[v187[9]];
        v185[v187[10]] = v186[v187[10]];
        *(_QWORD *)&v115[v117[13]] = *(_QWORD *)&v116[v117[13]];
        v200 = v117[14];
        v201 = &v115[v200];
        v202 = &v116[v200];
        v203 = type metadata accessor for CloudAltitudeKind(0);
        v204 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v203 - 8) + 16);
        swift_bridgeObjectRetain(v195);
        swift_bridgeObjectRetain(v199);
        v204(v201, v202, v203);
        v205 = v117[15];
        v206 = &v115[v205];
        v207 = &v116[v205];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v116[v205], 1, v276))
        {
          v208 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v206, v207, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
        }
        else
        {
          v275(v206, v207, v276);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v206, 0, 1, v276);
        }
        v209 = v117[16];
        v210 = &v115[v209];
        v211 = &v116[v209];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v116[v209], 1, v276))
        {
          v212 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v210, v211, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
        }
        else
        {
          v275(v210, v211, v276);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v210, 0, 1, v276);
        }
        v213 = v117[17];
        v214 = &v115[v213];
        v215 = &v116[v213];
        v216 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v216 - 8) + 16))(v214, v215, v216);
        v217 = v117[18];
        v218 = &v115[v217];
        v219 = &v116[v217];
        v220 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v220 - 8) + 16))(v218, v219, v220);
        *(_QWORD *)&v115[v117[19]] = *(_QWORD *)&v116[v117[19]];
        v221 = v117[20];
        v222 = &v115[v221];
        v223 = &v116[v221];
        v224 = *((_QWORD *)v223 + 1);
        if (v224)
        {
          *(_QWORD *)v222 = *(_QWORD *)v223;
          *((_QWORD *)v222 + 1) = v224;
          v225 = *((_QWORD *)v223 + 2);
          v226 = *((_QWORD *)v223 + 3);
          v227 = v223[32];
          swift_bridgeObjectRetain(v224);
          sub_100006E58(v225, v226, v227);
          *((_QWORD *)v222 + 2) = v225;
          *((_QWORD *)v222 + 3) = v226;
          v222[32] = v227;
        }
        else
        {
          v228 = *((_OWORD *)v223 + 1);
          *(_OWORD *)v222 = *(_OWORD *)v223;
          *((_OWORD *)v222 + 1) = v228;
          v222[32] = v223[32];
        }
        v75 = v279;
        v229 = v271[7];
        v230 = *(_QWORD *)&v76[v229];
        *(_QWORD *)&v279[v229] = v230;
        v231 = v271[8];
        v232 = *(_QWORD *)&v76[v231];
        *(_QWORD *)&v279[v231] = v232;
        v233 = v271[9];
        v234 = &v279[v233];
        v235 = &v76[v233];
        v236 = (int *)type metadata accessor for AirQualityViewModel(0);
        swift_bridgeObjectRetain(v230);
        swift_bridgeObjectRetain(v232);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v235, 1, (uint64_t)v236))
        {
          v237 = sub_100005D40(&qword_1001BFA30);
          memcpy(v234, v235, *(_QWORD *)(*(_QWORD *)(v237 - 8) + 64));
        }
        else
        {
          v268(v234, v235, v270);
          v275(&v234[v236[5]], &v235[v236[5]], v276);
          *(_QWORD *)&v234[v236[6]] = *(_QWORD *)&v235[v236[6]];
          v238 = v236[7];
          v239 = &v234[v238];
          v240 = &v235[v238];
          v241 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v241 - 8) + 16))(v239, v240, v241);
          v242 = v236[8];
          v243 = &v234[v242];
          v244 = &v235[v242];
          v245 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v245 - 8) + 16))(v243, v244, v245);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v234, 0, 1, (uint64_t)v236);
        }
        v78 = v273;
        v246 = v271[10];
        v247 = &v279[v246];
        v248 = &v76[v246];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v248, 1, HourPrecipitationChartViewModel))
        {
          v250 = sub_100005D40(&qword_1001BFA38);
          memcpy(v247, v248, *(_QWORD *)(*(_QWORD *)(v250 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v247, v248, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v247, 0, 1, HourPrecipitationChartViewModel);
        }
        v251 = v271[11];
        v252 = *(_QWORD *)&v76[v251];
        *(_QWORD *)&v279[v251] = v252;
        v253 = v271[12];
        v254 = &v279[v253];
        v255 = &v76[v253];
        *(_QWORD *)v254 = *(_QWORD *)v255;
        *((_WORD *)v254 + 4) = *((_WORD *)v255 + 4);
        v256 = v271[13];
        v257 = &v279[v256];
        v258 = &v76[v256];
        swift_bridgeObjectRetain(v252);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v258, 1, v267))
        {
          v259 = sub_100005D40(&qword_1001BFA28);
          memcpy(v257, v258, *(_QWORD *)(*(_QWORD *)(v259 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v267 - 8) + 16))(v257, v258, v267);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v257, 0, 1, v267);
        }
        v260 = v271[14];
        v261 = &v279[v260];
        v262 = &v76[v260];
        v263 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v262, 1, v263))
        {
          v264 = sub_100005D40(&qword_1001BFA40);
          memcpy(v261, v262, *(_QWORD *)(*(_QWORD *)(v264 - 8) + 64));
        }
        else
        {
          v265 = swift_getEnumCaseMultiPayload(v262, v263) == 1;
          v275(v261, v262, v276);
          swift_storeEnumTagMultiPayload(v261, v263, v265);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v261, 0, 1, v263);
        }
        v105 = v277;
        v77 = v274;
      }
      v80 = v272;
    }
    swift_storeEnumTagMultiPayload(v75, v78, v80);
    swift_storeEnumTagMultiPayload(v75, v77, 1);
  }
  else
  {
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    v105 = v277;
  }
  *((_BYTE *)v105 + v280[11]) = *((_BYTE *)v281 + v280[11]);
  return v105;
}

_QWORD *sub_100135714(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t EnumCaseMultiPayload;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  int *v103;
  void (*v104)(char *, char *, uint64_t);
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  int *v130;
  void (*v131)(char *, char *, uint64_t);
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  int *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  void (*v173)(char *, char *, uint64_t);
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  int *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  void (*v198)(char *, char *, uint64_t);
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  int *v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  _BOOL8 v282;
  uint64_t v284;
  void (*v285)(char *, char *, uint64_t);
  int *v286;
  char *v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  int *v293;
  uint64_t v294;
  void (*v295)(char *, char *, uint64_t);
  uint64_t v296;
  int *v297;
  _QWORD *v298;
  _QWORD *v299;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BFA18);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_100016904((uint64_t)a1 + v12, &qword_1001C0290);
    v15 = sub_100005D40(&qword_1001C0290);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_10001961C(*(_QWORD *)v23, v25);
  v26 = *(_QWORD *)v22;
  v27 = v22[8];
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  sub_100019A78(v26, v27);
  if (a1 != a2)
  {
    v28 = a3[7];
    v29 = (_QWORD *)((char *)a1 + v28);
    v30 = (_QWORD *)((char *)a2 + v28);
    sub_100016904((uint64_t)a1 + v28, &qword_1001BF0C8);
    v31 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = 1;
    }
    else
    {
      v34 = *v30;
      *v29 = *v30;
      swift_retain(v34);
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v31, v33);
    v35 = a3[8];
    v36 = (_QWORD *)((char *)a1 + v35);
    v37 = (_QWORD *)((char *)a2 + v35);
    sub_100016904((uint64_t)a1 + v35, &qword_1001BF3C0);
    v38 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
    {
      v39 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v36, v37, v39);
      v40 = v36;
      v41 = v38;
      v42 = 1;
    }
    else
    {
      v43 = *v37;
      *v36 = *v37;
      swift_retain(v43);
      v40 = v36;
      v41 = v38;
      v42 = 0;
    }
    swift_storeEnumTagMultiPayload(v40, v41, v42);
  }
  v44 = a3[9];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = *(_QWORD *)v46;
  v48 = v46[8];
  sub_10001961C(*(_QWORD *)v46, v48);
  v49 = *(_QWORD *)v45;
  v50 = v45[8];
  *(_QWORD *)v45 = v47;
  v45[8] = v48;
  sub_100019A78(v49, v50);
  v297 = a3;
  v51 = a3[10];
  v52 = (char *)a1 + v51;
  v299 = a2;
  v53 = (char *)a2 + v51;
  v296 = type metadata accessor for Date(0);
  v292 = *(_QWORD *)(v296 - 8);
  (*(void (**)(char *, char *, uint64_t))(v292 + 24))(v52, v53, v296);
  v54 = (int *)type metadata accessor for ForecastEntry(0);
  v55 = v54[5];
  v56 = &v52[v55];
  v57 = &v53[v55];
  v58 = type metadata accessor for TimelineEntryRelevance(0);
  LODWORD(v47) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v56, 1, v58);
  v59 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v57, 1, v58);
  v298 = a1;
  if ((_DWORD)v47)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v58);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  v60 = *(_QWORD *)(v58 - 8);
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v56, v58);
LABEL_22:
    v61 = sub_100005D40(&qword_1001BFA20);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(v60 + 24))(v56, v57, v58);
LABEL_23:
  v62 = v54[6];
  v63 = &v52[v62];
  v64 = &v53[v62];
  *(_QWORD *)v63 = *(_QWORD *)&v53[v62];
  v65 = *(_QWORD *)&v53[v62 + 8];
  v66 = *(_QWORD *)&v52[v62 + 8];
  *((_QWORD *)v63 + 1) = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  *((_QWORD *)v63 + 2) = *((_QWORD *)v64 + 2);
  v67 = *((_QWORD *)v64 + 3);
  v68 = *((_QWORD *)v63 + 3);
  *((_QWORD *)v63 + 3) = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  *((_QWORD *)v63 + 4) = *((_QWORD *)v64 + 4);
  v69 = *((_QWORD *)v64 + 5);
  v70 = *((_QWORD *)v63 + 5);
  *((_QWORD *)v63 + 5) = v69;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease(v70);
  v63[48] = v64[48];
  v63[49] = v64[49];
  v63[50] = v64[50];
  v63[51] = v64[51];
  v71 = type metadata accessor for WidgetContext(0);
  v72 = *(int *)(v71 + 40);
  v73 = &v63[v72];
  v74 = &v64[v72];
  v75 = type metadata accessor for URL(0);
  LODWORD(v70) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v73, 1, v75);
  v76 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v74, 1, v75);
  v294 = v75;
  if ((_DWORD)v70)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v73, 0, 1, v75);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  v77 = *(_QWORD *)(v75 - 8);
  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v77 + 8))(v73, v75);
LABEL_28:
    v78 = sub_100005D40(&qword_1001BFA28);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_29;
  }
  (*(void (**)(char *, char *, uint64_t))(v77 + 24))(v73, v74, v75);
LABEL_29:
  v79 = *(int *)(v71 + 44);
  v80 = &v63[v79];
  v81 = &v64[v79];
  v82 = *(_QWORD *)v81;
  v83 = *(_QWORD *)&v63[v79];
  *(_QWORD *)&v63[v79] = *(_QWORD *)v81;
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRelease(v83);
  v80[8] = v81[8];
  v84 = v298;
  v85 = v299;
  if (v298 != v299)
  {
    v86 = v54[7];
    v87 = &v52[v86];
    v88 = &v53[v86];
    sub_100011894((uint64_t)&v52[v86], type metadata accessor for ForecastEntry.Model);
    v89 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v88, v89) == 1)
    {
      v90 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v88, v90);
      v92 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v118 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v118 - 8) + 16))(v87, v88, v118);
      }
      else
      {
        v290 = v89;
        v291 = v87;
        v289 = v90;
        v288 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v93 = type metadata accessor for UUID(0);
          v94 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 16);
          v94(v87, v88, v93);
          v95 = type metadata accessor for InstantWeatherViewModel(0);
          v96 = *(int *)(v95 + 20);
          v97 = &v87[v96];
          v98 = &v88[v96];
          v99 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(v97, v98, v99);
          v100 = *(int *)(v95 + 24);
          v101 = &v87[v100];
          v102 = &v88[v100];
          v94(&v87[v100], v102, v93);
          v103 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v104 = *(void (**)(char *, char *, uint64_t))(v292 + 16);
          v104(&v101[v103[5]], &v102[v103[5]], v296);
          v295 = v104;
          v104(&v101[v103[6]], &v102[v103[6]], v296);
          v105 = v103[7];
          v106 = &v101[v105];
          v107 = &v102[v105];
          v108 = sub_100005D40(&qword_1001BF090);
          v109 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 16);
          v109(v106, v107, v108);
          v109(&v101[v103[8]], &v102[v103[8]], v108);
          v110 = v103[9];
          v111 = &v101[v110];
          v112 = &v102[v110];
          *(_QWORD *)v111 = *(_QWORD *)v112;
          v113 = *((_QWORD *)v112 + 1);
          *((_QWORD *)v111 + 1) = v113;
          v114 = v103[10];
          v115 = &v101[v114];
          v116 = &v102[v114];
          swift_bridgeObjectRetain(v113);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v116, 1, v108))
          {
            v117 = sub_100005D40(&qword_1001BF098);
            memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            v109(v115, v116, v108);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v108);
          }
          v145 = v103[11];
          v146 = &v101[v145];
          v147 = &v102[v145];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v102[v145], 1, v108))
          {
            v148 = sub_100005D40(&qword_1001BF098);
            memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
          }
          else
          {
            v109(v146, v147, v108);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v146, 0, 1, v108);
          }
          v153 = v103[12];
          v154 = &v101[v153];
          v155 = &v102[v153];
          v94(&v101[v153], &v102[v153], v93);
          v156 = (int *)type metadata accessor for ConditionViewModel(0);
          v157 = v156[5];
          v158 = &v154[v157];
          v159 = &v155[v157];
          v160 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 16))(v158, v159, v160);
          v161 = v156[6];
          v162 = &v154[v161];
          v163 = &v155[v161];
          *(_QWORD *)v162 = *(_QWORD *)v163;
          v164 = *((_QWORD *)v163 + 1);
          *((_QWORD *)v162 + 1) = v164;
          v165 = v156[7];
          v166 = &v154[v165];
          v167 = &v155[v165];
          *(_QWORD *)v166 = *(_QWORD *)v167;
          v168 = *((_QWORD *)v167 + 1);
          *((_QWORD *)v166 + 1) = v168;
          v154[v156[8]] = v155[v156[8]];
          v154[v156[9]] = v155[v156[9]];
          v154[v156[10]] = v155[v156[10]];
          *(_QWORD *)&v101[v103[13]] = *(_QWORD *)&v102[v103[13]];
          v169 = v103[14];
          v170 = &v101[v169];
          v171 = &v102[v169];
          v172 = type metadata accessor for CloudAltitudeKind(0);
          v173 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v172 - 8) + 16);
          swift_bridgeObjectRetain(v164);
          swift_bridgeObjectRetain(v168);
          v173(v170, v171, v172);
          v174 = v103[15];
          v175 = &v101[v174];
          v176 = &v102[v174];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v102[v174], 1, v296))
          {
            v177 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
          }
          else
          {
            v295(v175, v176, v296);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v175, 0, 1, v296);
          }
          v85 = v299;
          v203 = v103[16];
          v204 = &v101[v203];
          v205 = &v102[v203];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v102[v203], 1, v296))
          {
            v206 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
          }
          else
          {
            v295(v204, v205, v296);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v204, 0, 1, v296);
          }
          v211 = v103[17];
          v212 = &v101[v211];
          v213 = &v102[v211];
          v214 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v214 - 8) + 16))(v212, v213, v214);
          v215 = v103[18];
          v216 = &v101[v215];
          v217 = &v102[v215];
          v218 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v218 - 8) + 16))(v216, v217, v218);
          *(_QWORD *)&v101[v103[19]] = *(_QWORD *)&v102[v103[19]];
          v219 = v103[20];
          v220 = &v101[v219];
          v221 = &v102[v219];
          if (*((_QWORD *)v221 + 1))
          {
            *(_QWORD *)v220 = *(_QWORD *)v221;
            v222 = *((_QWORD *)v221 + 1);
            *((_QWORD *)v220 + 1) = v222;
            v223 = *((_QWORD *)v221 + 2);
            v224 = *((_QWORD *)v221 + 3);
            v225 = v221[32];
            swift_bridgeObjectRetain(v222);
            sub_100006E58(v223, v224, v225);
            *((_QWORD *)v220 + 2) = v223;
            *((_QWORD *)v220 + 3) = v224;
            v220[32] = v225;
          }
          else
          {
            v241 = *(_OWORD *)v221;
            v242 = *((_OWORD *)v221 + 1);
            v220[32] = v221[32];
            *(_OWORD *)v220 = v241;
            *((_OWORD *)v220 + 1) = v242;
          }
          v89 = v290;
          v87 = v291;
          v90 = v289;
          v92 = 1;
        }
        else
        {
          v119 = type metadata accessor for UUID(0);
          v120 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 16);
          v120(v87, v88, v119);
          v121 = type metadata accessor for AggregateWeatherViewModel(0);
          v122 = *(int *)(v121 + 20);
          v123 = &v87[v122];
          v124 = &v88[v122];
          v125 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 16))(v123, v124, v125);
          v126 = *(int *)(v121 + 24);
          v127 = v88;
          v128 = &v87[v126];
          v286 = (int *)v121;
          v287 = v127;
          v129 = &v127[v126];
          v285 = v120;
          v120(v128, &v127[v126], v119);
          v130 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v131 = *(void (**)(char *, char *, uint64_t))(v292 + 16);
          v131(&v128[v130[5]], &v129[v130[5]], v296);
          v131(&v128[v130[6]], &v129[v130[6]], v296);
          v132 = v130[7];
          v133 = &v128[v132];
          v134 = &v129[v132];
          v135 = sub_100005D40(&qword_1001BF090);
          v136 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16);
          v136(v133, v134, v135);
          v136(&v128[v130[8]], &v129[v130[8]], v135);
          v137 = v130[9];
          v138 = &v128[v137];
          v139 = &v129[v137];
          *(_QWORD *)v138 = *(_QWORD *)v139;
          v140 = *((_QWORD *)v139 + 1);
          *((_QWORD *)v138 + 1) = v140;
          v293 = v130;
          v141 = v130[10];
          v142 = &v128[v141];
          v143 = &v129[v141];
          swift_bridgeObjectRetain(v140);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v135))
          {
            v144 = sub_100005D40(&qword_1001BF098);
            memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
          }
          else
          {
            v136(v142, v143, v135);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v142, 0, 1, v135);
          }
          v149 = v130[11];
          v150 = &v128[v149];
          v151 = &v129[v149];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v129[v149], 1, v135))
          {
            v152 = sub_100005D40(&qword_1001BF098);
            memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
          }
          else
          {
            v136(v150, v151, v135);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v150, 0, 1, v135);
          }
          v178 = v130[12];
          v179 = &v128[v178];
          v180 = &v129[v178];
          v284 = v119;
          v285(&v128[v178], &v129[v178], v119);
          v181 = (int *)type metadata accessor for ConditionViewModel(0);
          v182 = v181[5];
          v183 = &v179[v182];
          v184 = &v180[v182];
          v185 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v185 - 8) + 16))(v183, v184, v185);
          v186 = v181[6];
          v187 = &v179[v186];
          v188 = &v180[v186];
          *(_QWORD *)v187 = *(_QWORD *)v188;
          v189 = *((_QWORD *)v188 + 1);
          *((_QWORD *)v187 + 1) = v189;
          v190 = v181[7];
          v191 = &v179[v190];
          v192 = &v180[v190];
          *(_QWORD *)v191 = *(_QWORD *)v192;
          v193 = *((_QWORD *)v192 + 1);
          *((_QWORD *)v191 + 1) = v193;
          v179[v181[8]] = v180[v181[8]];
          v179[v181[9]] = v180[v181[9]];
          v179[v181[10]] = v180[v181[10]];
          *(_QWORD *)&v128[v293[13]] = *(_QWORD *)&v129[v293[13]];
          v194 = v293[14];
          v195 = &v128[v194];
          v196 = &v129[v194];
          v197 = type metadata accessor for CloudAltitudeKind(0);
          v198 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v197 - 8) + 16);
          swift_bridgeObjectRetain(v189);
          swift_bridgeObjectRetain(v193);
          v198(v195, v196, v197);
          v199 = v293[15];
          v200 = &v128[v199];
          v201 = &v129[v199];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v129[v199], 1, v296))
          {
            v202 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64));
          }
          else
          {
            v131(v200, v201, v296);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v200, 0, 1, v296);
          }
          v207 = v293[16];
          v208 = &v128[v207];
          v209 = &v129[v207];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v129[v207], 1, v296))
          {
            v210 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v208, v209, *(_QWORD *)(*(_QWORD *)(v210 - 8) + 64));
          }
          else
          {
            v131(v208, v209, v296);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v208, 0, 1, v296);
          }
          v226 = v293[17];
          v227 = &v128[v226];
          v228 = &v129[v226];
          v229 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v229 - 8) + 16))(v227, v228, v229);
          v230 = v293[18];
          v231 = &v128[v230];
          v232 = &v129[v230];
          v233 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v233 - 8) + 16))(v231, v232, v233);
          *(_QWORD *)&v128[v293[19]] = *(_QWORD *)&v129[v293[19]];
          v234 = v293[20];
          v235 = &v128[v234];
          v236 = &v129[v234];
          if (*((_QWORD *)v236 + 1))
          {
            *(_QWORD *)v235 = *(_QWORD *)v236;
            v237 = *((_QWORD *)v236 + 1);
            *((_QWORD *)v235 + 1) = v237;
            v238 = *((_QWORD *)v236 + 2);
            v239 = *((_QWORD *)v236 + 3);
            v240 = v236[32];
            swift_bridgeObjectRetain(v237);
            sub_100006E58(v238, v239, v240);
            *((_QWORD *)v235 + 2) = v238;
            *((_QWORD *)v235 + 3) = v239;
            v235[32] = v240;
          }
          else
          {
            v243 = *(_OWORD *)v236;
            v244 = *((_OWORD *)v236 + 1);
            v235[32] = v236[32];
            *(_OWORD *)v235 = v243;
            *((_OWORD *)v235 + 1) = v244;
          }
          v87 = v291;
          v245 = v286[7];
          v246 = *(_QWORD *)&v287[v245];
          *(_QWORD *)&v291[v245] = v246;
          v247 = v286[8];
          v248 = *(_QWORD *)&v287[v247];
          *(_QWORD *)&v291[v247] = v248;
          v249 = v286[9];
          v250 = &v291[v249];
          v251 = &v287[v249];
          v252 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v246);
          swift_bridgeObjectRetain(v248);
          v89 = v290;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v251, 1, (uint64_t)v252))
          {
            v253 = sub_100005D40(&qword_1001BFA30);
            memcpy(v250, v251, *(_QWORD *)(*(_QWORD *)(v253 - 8) + 64));
          }
          else
          {
            v285(v250, v251, v284);
            v131(&v250[v252[5]], &v251[v252[5]], v296);
            *(_QWORD *)&v250[v252[6]] = *(_QWORD *)&v251[v252[6]];
            v254 = v252[7];
            v255 = &v250[v254];
            v256 = &v251[v254];
            v257 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v257 - 8) + 16))(v255, v256, v257);
            v258 = v252[8];
            v259 = &v250[v258];
            v260 = &v251[v258];
            v261 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v261 - 8) + 16))(v259, v260, v261);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v250, 0, 1, (uint64_t)v252);
          }
          v262 = v286[10];
          v263 = &v291[v262];
          v264 = &v287[v262];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v264, 1, HourPrecipitationChartViewModel))
          {
            v266 = sub_100005D40(&qword_1001BFA38);
            memcpy(v263, v264, *(_QWORD *)(*(_QWORD *)(v266 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v263, v264, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v263, 0, 1, HourPrecipitationChartViewModel);
          }
          v267 = v286[11];
          v268 = *(_QWORD *)&v287[v267];
          *(_QWORD *)&v291[v267] = v268;
          v269 = v286[12];
          v270 = &v291[v269];
          v271 = &v287[v269];
          v272 = *(_QWORD *)v271;
          *((_WORD *)v270 + 4) = *((_WORD *)v271 + 4);
          *(_QWORD *)v270 = v272;
          v273 = v286[13];
          v274 = &v291[v273];
          v275 = &v287[v273];
          swift_bridgeObjectRetain(v268);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v275, 1, v294))
          {
            v276 = sub_100005D40(&qword_1001BFA28);
            memcpy(v274, v275, *(_QWORD *)(*(_QWORD *)(v276 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v294 - 8) + 16))(v274, v275, v294);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v274, 0, 1, v294);
          }
          v277 = v286[14];
          v278 = &v291[v277];
          v279 = &v287[v277];
          v280 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v279, 1, v280))
          {
            v281 = sub_100005D40(&qword_1001BFA40);
            memcpy(v278, v279, *(_QWORD *)(*(_QWORD *)(v281 - 8) + 64));
          }
          else
          {
            v282 = swift_getEnumCaseMultiPayload(v279, v280) == 1;
            v131(v278, v279, v296);
            swift_storeEnumTagMultiPayload(v278, v280, v282);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v278, 0, 1, v280);
          }
          v90 = v289;
          v92 = v288;
          v84 = v298;
        }
      }
      swift_storeEnumTagMultiPayload(v87, v90, v92);
      swift_storeEnumTagMultiPayload(v87, v89, 1);
    }
    else
    {
      memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    }
  }
  *((_BYTE *)v84 + v297[11]) = *((_BYTE *)v85 + v297[11]);
  return v84;
}

char *sub_1001369C8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t EnumCaseMultiPayload;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  __int128 v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  int *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  __int128 v173;
  uint64_t v174;
  char *v175;
  char *v176;
  int *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  _BOOL8 v204;
  void (*v206)(char *, char *, uint64_t);
  uint64_t v207;
  void (*v208)(char *, char *, uint64_t);
  int *v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  void (*v216)(char *, char *, uint64_t);
  uint64_t v217;
  int *v218;
  char *v219;

  v6 = sub_100005D40(&qword_1001BFA18);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100005D40(&qword_1001C0290);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = &a1[v14];
  v18 = &a2[v14];
  v19 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for Font.Context(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
    swift_storeEnumTagMultiPayload(v22, v24, 1);
  }
  else
  {
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  v26 = a3[9];
  v27 = a3[10];
  v218 = a3;
  v219 = a2;
  v28 = &a1[v26];
  v29 = &a2[v26];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v29[8];
  v30 = &a1[v27];
  v31 = &a2[v27];
  v217 = type metadata accessor for Date(0);
  v216 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v217 - 8) + 32);
  v216(v30, v31, v217);
  v32 = (int *)type metadata accessor for ForecastEntry(0);
  v33 = v32[5];
  v34 = &v30[v33];
  v35 = &v31[v33];
  v36 = type metadata accessor for TimelineEntryRelevance(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 1, v36))
  {
    v37 = sub_100005D40(&qword_1001BFA20);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v36);
  }
  v38 = v32[6];
  v39 = &v30[v38];
  v40 = &v31[v38];
  v41 = *(_OWORD *)&v31[v38 + 16];
  *(_OWORD *)v39 = *(_OWORD *)&v31[v38];
  *((_OWORD *)v39 + 1) = v41;
  *((_OWORD *)v39 + 2) = *(_OWORD *)&v31[v38 + 32];
  *((_DWORD *)v39 + 12) = *(_DWORD *)&v31[v38 + 48];
  v42 = type metadata accessor for WidgetContext(0);
  v43 = *(int *)(v42 + 40);
  v44 = &v39[v43];
  v45 = &v40[v43];
  v46 = type metadata accessor for URL(0);
  v214 = v46;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v45, 1, v46))
  {
    v47 = sub_100005D40(&qword_1001BFA28);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v44, 0, 1, v46);
  }
  v48 = *(int *)(v42 + 44);
  v49 = &v39[v48];
  v50 = &v40[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v49[8] = v50[8];
  v51 = v32[7];
  v52 = &v30[v51];
  v53 = &v31[v51];
  v54 = type metadata accessor for ForecastEntry.Model(0);
  v55 = a1;
  if (swift_getEnumCaseMultiPayload(v53, v54) == 1)
  {
    v56 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v53, v56);
    v58 = EnumCaseMultiPayload;
    v59 = v219;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v81 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v52, v53, v81);
      v80 = v218;
    }
    else
    {
      v212 = v54;
      v213 = v52;
      v211 = v56;
      v210 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v60 = type metadata accessor for UUID(0);
        v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32);
        v61(v52, v53, v60);
        v62 = type metadata accessor for InstantWeatherViewModel(0);
        v63 = *(int *)(v62 + 20);
        v64 = &v52[v63];
        v65 = &v53[v63];
        v66 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
        v67 = *(int *)(v62 + 24);
        v68 = &v52[v67];
        v69 = &v53[v67];
        v215 = v60;
        v208 = v61;
        v61(&v52[v67], &v53[v67], v60);
        v70 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v216(&v68[v70[5]], &v69[v70[5]], v217);
        v216(&v68[v70[6]], &v69[v70[6]], v217);
        v71 = v70[7];
        v72 = &v68[v71];
        v73 = &v69[v71];
        v74 = sub_100005D40(&qword_1001BF090);
        v75 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32);
        v75(v72, v73, v74);
        v75(&v68[v70[8]], &v69[v70[8]], v74);
        *(_OWORD *)&v68[v70[9]] = *(_OWORD *)&v69[v70[9]];
        v76 = v70[10];
        v77 = &v68[v76];
        v78 = &v69[v76];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v69[v76], 1, v74))
        {
          v79 = sub_100005D40(&qword_1001BF098);
          memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        }
        else
        {
          v75(v77, v78, v74);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v77, 0, 1, v74);
        }
        v102 = v70[11];
        v103 = &v68[v102];
        v104 = &v69[v102];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v69[v102], 1, v74))
        {
          v105 = sub_100005D40(&qword_1001BF098);
          memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
        }
        else
        {
          v75(v103, v104, v74);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v103, 0, 1, v74);
        }
        v59 = v219;
        v106 = v70[12];
        v107 = &v68[v106];
        v108 = &v69[v106];
        v208(&v68[v106], &v69[v106], v215);
        v109 = (int *)type metadata accessor for ConditionViewModel(0);
        v110 = v109[5];
        v111 = &v107[v110];
        v112 = &v108[v110];
        v113 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v113 - 8) + 32))(v111, v112, v113);
        *(_OWORD *)&v107[v109[6]] = *(_OWORD *)&v108[v109[6]];
        *(_OWORD *)&v107[v109[7]] = *(_OWORD *)&v108[v109[7]];
        v107[v109[8]] = v108[v109[8]];
        v107[v109[9]] = v108[v109[9]];
        v107[v109[10]] = v108[v109[10]];
        *(_QWORD *)&v68[v70[13]] = *(_QWORD *)&v69[v70[13]];
        v114 = v70[14];
        v115 = &v68[v114];
        v116 = &v69[v114];
        v117 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 32))(v115, v116, v117);
        v118 = v70[15];
        v119 = &v68[v118];
        v120 = &v69[v118];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v69[v118], 1, v217))
        {
          v121 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
        }
        else
        {
          v216(v119, v120, v217);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v119, 0, 1, v217);
        }
        v80 = v218;
        v122 = v70[16];
        v123 = &v68[v122];
        v124 = &v69[v122];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v69[v122], 1, v217))
        {
          v125 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
        }
        else
        {
          v216(v123, v124, v217);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v123, 0, 1, v217);
        }
        v126 = v70[17];
        v127 = &v68[v126];
        v128 = &v69[v126];
        v129 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 32))(v127, v128, v129);
        v130 = v70[18];
        v131 = &v68[v130];
        v132 = &v69[v130];
        v133 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 32))(v131, v132, v133);
        *(_QWORD *)&v68[v70[19]] = *(_QWORD *)&v69[v70[19]];
        v134 = v70[20];
        v135 = &v68[v134];
        v136 = &v69[v134];
        v135[32] = v136[32];
        v137 = *((_OWORD *)v136 + 1);
        *(_OWORD *)v135 = *(_OWORD *)v136;
        *((_OWORD *)v135 + 1) = v137;
        v54 = v212;
        v52 = v213;
      }
      else
      {
        v82 = type metadata accessor for UUID(0);
        v83 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 32);
        v83(v52, v53, v82);
        v84 = type metadata accessor for AggregateWeatherViewModel(0);
        v85 = *(int *)(v84 + 20);
        v86 = &v52[v85];
        v87 = &v53[v85];
        v88 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v86, v87, v88);
        v207 = v82;
        v209 = (int *)v84;
        v89 = *(int *)(v84 + 24);
        v90 = &v52[v89];
        v91 = &v53[v89];
        v206 = v83;
        v83(v90, &v53[v89], v82);
        v92 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v216(&v90[v92[5]], &v91[v92[5]], v217);
        v216(&v90[v92[6]], &v91[v92[6]], v217);
        v93 = v92[7];
        v94 = &v90[v93];
        v95 = &v91[v93];
        v96 = sub_100005D40(&qword_1001BF090);
        v97 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32);
        v97(v94, v95, v96);
        v97(&v90[v92[8]], &v91[v92[8]], v96);
        *(_OWORD *)&v90[v92[9]] = *(_OWORD *)&v91[v92[9]];
        v98 = v92[10];
        v99 = &v90[v98];
        v100 = &v91[v98];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v98], 1, v96))
        {
          v101 = sub_100005D40(&qword_1001BF098);
          memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
        }
        else
        {
          v97(v99, v100, v96);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v96);
        }
        v138 = v92[11];
        v139 = &v90[v138];
        v140 = &v91[v138];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v138], 1, v96))
        {
          v141 = sub_100005D40(&qword_1001BF098);
          memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
        }
        else
        {
          v97(v139, v140, v96);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v139, 0, 1, v96);
        }
        v142 = v92[12];
        v143 = &v90[v142];
        v144 = &v91[v142];
        v206(&v90[v142], &v91[v142], v207);
        v145 = (int *)type metadata accessor for ConditionViewModel(0);
        v146 = v145[5];
        v147 = &v143[v146];
        v148 = &v144[v146];
        v149 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 32))(v147, v148, v149);
        *(_OWORD *)&v143[v145[6]] = *(_OWORD *)&v144[v145[6]];
        *(_OWORD *)&v143[v145[7]] = *(_OWORD *)&v144[v145[7]];
        v143[v145[8]] = v144[v145[8]];
        v143[v145[9]] = v144[v145[9]];
        v143[v145[10]] = v144[v145[10]];
        *(_QWORD *)&v90[v92[13]] = *(_QWORD *)&v91[v92[13]];
        v150 = v92[14];
        v151 = &v90[v150];
        v152 = &v91[v150];
        v153 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 32))(v151, v152, v153);
        v154 = v92[15];
        v155 = &v90[v154];
        v156 = &v91[v154];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v154], 1, v217))
        {
          v157 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
        }
        else
        {
          v216(v155, v156, v217);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v155, 0, 1, v217);
        }
        v59 = v219;
        v158 = v92[16];
        v159 = &v90[v158];
        v160 = &v91[v158];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v158], 1, v217))
        {
          v161 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
        }
        else
        {
          v216(v159, v160, v217);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v159, 0, 1, v217);
        }
        v162 = v92[17];
        v163 = &v90[v162];
        v164 = &v91[v162];
        v165 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v165 - 8) + 32))(v163, v164, v165);
        v166 = v92[18];
        v167 = &v90[v166];
        v168 = &v91[v166];
        v169 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 32))(v167, v168, v169);
        *(_QWORD *)&v90[v92[19]] = *(_QWORD *)&v91[v92[19]];
        v170 = v92[20];
        v171 = &v90[v170];
        v172 = &v91[v170];
        v171[32] = v172[32];
        v173 = *((_OWORD *)v172 + 1);
        *(_OWORD *)v171 = *(_OWORD *)v172;
        *((_OWORD *)v171 + 1) = v173;
        v52 = v213;
        *(_QWORD *)&v213[v209[7]] = *(_QWORD *)&v53[v209[7]];
        *(_QWORD *)&v213[v209[8]] = *(_QWORD *)&v53[v209[8]];
        v174 = v209[9];
        v175 = &v213[v174];
        v176 = &v53[v174];
        v177 = (int *)type metadata accessor for AirQualityViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v176, 1, (uint64_t)v177))
        {
          v178 = sub_100005D40(&qword_1001BFA30);
          memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
        }
        else
        {
          v206(v175, v176, v207);
          v216(&v175[v177[5]], &v176[v177[5]], v217);
          *(_QWORD *)&v175[v177[6]] = *(_QWORD *)&v176[v177[6]];
          v179 = v177[7];
          v180 = &v175[v179];
          v181 = &v176[v179];
          v182 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v182 - 8) + 32))(v180, v181, v182);
          v183 = v177[8];
          v184 = &v175[v183];
          v185 = &v176[v183];
          v186 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v186 - 8) + 32))(v184, v185, v186);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v175, 0, 1, (uint64_t)v177);
        }
        v54 = v212;
        v187 = v209[10];
        v188 = &v213[v187];
        v189 = &v53[v187];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v189, 1, HourPrecipitationChartViewModel))
        {
          v191 = sub_100005D40(&qword_1001BFA38);
          memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v188, v189, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v188, 0, 1, HourPrecipitationChartViewModel);
        }
        *(_QWORD *)&v213[v209[11]] = *(_QWORD *)&v53[v209[11]];
        v192 = v209[12];
        v193 = &v213[v192];
        v194 = &v53[v192];
        *(_QWORD *)v193 = *(_QWORD *)v194;
        *((_WORD *)v193 + 4) = *((_WORD *)v194 + 4);
        v195 = v209[13];
        v196 = &v213[v195];
        v197 = &v53[v195];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v53[v195], 1, v214))
        {
          v198 = sub_100005D40(&qword_1001BFA28);
          memcpy(v196, v197, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v214 - 8) + 32))(v196, v197, v214);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v196, 0, 1, v214);
        }
        v199 = v209[14];
        v200 = &v213[v199];
        v201 = &v53[v199];
        v202 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v201, 1, v202))
        {
          v203 = sub_100005D40(&qword_1001BFA40);
          memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64));
        }
        else
        {
          v204 = swift_getEnumCaseMultiPayload(v201, v202) == 1;
          v216(v200, v201, v217);
          swift_storeEnumTagMultiPayload(v200, v202, v204);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v200, 0, 1, v202);
        }
        v80 = v218;
      }
      v56 = v211;
      v58 = v210;
    }
    swift_storeEnumTagMultiPayload(v52, v56, v58);
    swift_storeEnumTagMultiPayload(v52, v54, 1);
  }
  else
  {
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    v80 = v218;
    v59 = v219;
  }
  v55[v80[11]] = v59[v80[11]];
  return v55;
}

char *sub_100137970(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t EnumCaseMultiPayload;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int *v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int *v109;
  void (*v110)(char *, char *, uint64_t);
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  void (*v115)(char *, char *, uint64_t);
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  int *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  int *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  __int128 v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  int *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL8 v224;
  int *v226;
  void (*v227)(char *, char *, uint64_t);
  uint64_t v228;
  char *v229;
  void (*v230)(char *, char *, uint64_t);
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  int *v236;
  void (*v237)(char *, char *, uint64_t);
  uint64_t v238;
  char *v239;
  int *v240;
  char *v241;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BFA18);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100016904((uint64_t)&a1[v8], &qword_1001C0290);
    v11 = sub_100005D40(&qword_1001C0290);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  v18 = v14[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  sub_100019A78(v17, v18);
  if (a1 != a2)
  {
    v19 = a3[7];
    v20 = &a1[v19];
    v21 = &a2[v19];
    sub_100016904((uint64_t)&a1[v19], &qword_1001BF0C8);
    v22 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for Font.Context(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    v24 = a3[8];
    v25 = &a1[v24];
    v26 = &a2[v24];
    sub_100016904((uint64_t)&a1[v24], &qword_1001BF3C0);
    v27 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
      swift_storeEnumTagMultiPayload(v25, v27, 1);
    }
    else
    {
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
  }
  v29 = a3[9];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = *(_QWORD *)v31;
  LOBYTE(v31) = v31[8];
  v33 = *(_QWORD *)v30;
  v34 = v30[8];
  *(_QWORD *)v30 = v32;
  v30[8] = (char)v31;
  sub_100019A78(v33, v34);
  v240 = a3;
  v241 = a2;
  v35 = a3[10];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v238 = type metadata accessor for Date(0);
  v235 = *(_QWORD *)(v238 - 8);
  (*(void (**)(char *, char *, uint64_t))(v235 + 40))(v36, v37, v238);
  v38 = (int *)type metadata accessor for ForecastEntry(0);
  v39 = v38[5];
  v40 = &v36[v39];
  v41 = &v37[v39];
  v42 = type metadata accessor for TimelineEntryRelevance(0);
  v43 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v40, 1, v42);
  v44 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v41, 1, v42);
  v239 = a1;
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v40, 0, 1, v42);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  v45 = *(_QWORD *)(v42 - 8);
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v40, v42);
LABEL_20:
    v46 = sub_100005D40(&qword_1001BFA20);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 40))(v40, v41, v42);
LABEL_21:
  v47 = v38[6];
  v48 = &v36[v47];
  v49 = &v37[v47];
  v50 = *(_QWORD *)&v37[v47 + 8];
  v51 = *(_QWORD *)&v36[v47 + 8];
  *(_QWORD *)v48 = *(_QWORD *)&v37[v47];
  *((_QWORD *)v48 + 1) = v50;
  swift_bridgeObjectRelease(v51);
  v52 = *((_QWORD *)v49 + 3);
  v53 = *((_QWORD *)v48 + 3);
  *((_QWORD *)v48 + 2) = *((_QWORD *)v49 + 2);
  *((_QWORD *)v48 + 3) = v52;
  swift_bridgeObjectRelease(v53);
  v54 = *((_QWORD *)v49 + 5);
  v55 = *((_QWORD *)v48 + 5);
  *((_QWORD *)v48 + 4) = *((_QWORD *)v49 + 4);
  *((_QWORD *)v48 + 5) = v54;
  swift_bridgeObjectRelease(v55);
  *((_WORD *)v48 + 24) = *((_WORD *)v49 + 24);
  v48[50] = v49[50];
  v48[51] = v49[51];
  v56 = type metadata accessor for WidgetContext(0);
  v57 = *(int *)(v56 + 40);
  v58 = &v48[v57];
  v59 = &v49[v57];
  v60 = type metadata accessor for URL(0);
  v61 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v58, 1, v60);
  v62 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v59, 1, v60);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v58, v59, v60);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v60);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  v63 = *(_QWORD *)(v60 - 8);
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v58, v60);
LABEL_26:
    v64 = sub_100005D40(&qword_1001BFA28);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 40))(v58, v59, v60);
LABEL_27:
  v65 = *(int *)(v56 + 44);
  v66 = &v48[v65];
  v67 = &v49[v65];
  v68 = *(_QWORD *)&v48[v65];
  *(_QWORD *)&v48[v65] = *(_QWORD *)v67;
  swift_bridgeObjectRelease(v68);
  v66[8] = v67[8];
  v69 = v241;
  if (v239 != v241)
  {
    v70 = v38[7];
    v71 = &v36[v70];
    v72 = &v37[v70];
    sub_100011894((uint64_t)&v36[v70], type metadata accessor for ForecastEntry.Model);
    v73 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v72, v73) == 1)
    {
      v74 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v72, v74);
      v76 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v98 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 32))(v71, v72, v98);
      }
      else
      {
        v233 = v73;
        v234 = v71;
        v232 = v74;
        v231 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v77 = type metadata accessor for UUID(0);
          v78 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 32);
          v78(v71, v72, v77);
          v79 = type metadata accessor for InstantWeatherViewModel(0);
          v80 = *(int *)(v79 + 20);
          v81 = &v71[v80];
          v82 = &v72[v80];
          v83 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v81, v82, v83);
          v84 = *(int *)(v79 + 24);
          v85 = &v71[v84];
          v86 = &v72[v84];
          v78(&v71[v84], v86, v77);
          v87 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v88 = *(void (**)(char *, char *, uint64_t))(v235 + 32);
          v88(&v85[v87[5]], &v86[v87[5]], v238);
          v237 = v88;
          v88(&v85[v87[6]], &v86[v87[6]], v238);
          v89 = v87[7];
          v90 = &v85[v89];
          v91 = &v86[v89];
          v92 = sub_100005D40(&qword_1001BF090);
          v93 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32);
          v93(v90, v91, v92);
          v93(&v85[v87[8]], &v86[v87[8]], v92);
          *(_OWORD *)&v85[v87[9]] = *(_OWORD *)&v86[v87[9]];
          v94 = v87[10];
          v95 = &v85[v94];
          v96 = &v86[v94];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v86[v94], 1, v92))
          {
            v97 = sub_100005D40(&qword_1001BF098);
            memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
          }
          else
          {
            v93(v95, v96, v92);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v92);
          }
          v120 = v87[11];
          v121 = &v85[v120];
          v122 = &v86[v120];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v86[v120], 1, v92))
          {
            v123 = sub_100005D40(&qword_1001BF098);
            memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
          }
          else
          {
            v93(v121, v122, v92);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v121, 0, 1, v92);
          }
          v128 = v87[12];
          v129 = &v85[v128];
          v130 = &v86[v128];
          v78(&v85[v128], &v86[v128], v77);
          v131 = (int *)type metadata accessor for ConditionViewModel(0);
          v132 = v131[5];
          v133 = &v129[v132];
          v134 = &v130[v132];
          v135 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 32))(v133, v134, v135);
          *(_OWORD *)&v129[v131[6]] = *(_OWORD *)&v130[v131[6]];
          *(_OWORD *)&v129[v131[7]] = *(_OWORD *)&v130[v131[7]];
          v129[v131[8]] = v130[v131[8]];
          v129[v131[9]] = v130[v131[9]];
          v129[v131[10]] = v130[v131[10]];
          *(_QWORD *)&v85[v87[13]] = *(_QWORD *)&v86[v87[13]];
          v136 = v87[14];
          v137 = &v85[v136];
          v138 = &v86[v136];
          v139 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v139 - 8) + 32))(v137, v138, v139);
          v140 = v87[15];
          v141 = &v85[v140];
          v142 = &v86[v140];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v86[v140], 1, v238))
          {
            v143 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
          }
          else
          {
            v237(v141, v142, v238);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v141, 0, 1, v238);
          }
          v69 = v241;
          v160 = v87[16];
          v161 = &v85[v160];
          v162 = &v86[v160];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v86[v160], 1, v238))
          {
            v163 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
          }
          else
          {
            v237(v161, v162, v238);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v161, 0, 1, v238);
          }
          v73 = v233;
          v169 = v87[17];
          v170 = &v85[v169];
          v171 = &v86[v169];
          v172 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v172 - 8) + 32))(v170, v171, v172);
          v173 = v87[18];
          v174 = &v85[v173];
          v175 = &v86[v173];
          v176 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v176 - 8) + 32))(v174, v175, v176);
          *(_QWORD *)&v85[v87[19]] = *(_QWORD *)&v86[v87[19]];
          v177 = v87[20];
          v178 = &v85[v177];
          v179 = &v86[v177];
          v178[32] = v179[32];
          v180 = *((_OWORD *)v179 + 1);
          *(_OWORD *)v178 = *(_OWORD *)v179;
          *((_OWORD *)v178 + 1) = v180;
          v71 = v234;
        }
        else
        {
          v99 = type metadata accessor for UUID(0);
          v100 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32);
          v100(v71, v72, v99);
          v101 = type metadata accessor for AggregateWeatherViewModel(0);
          v102 = *(int *)(v101 + 20);
          v103 = &v71[v102];
          v104 = &v72[v102];
          v105 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 32))(v103, v104, v105);
          v226 = (int *)v101;
          v227 = v100;
          v106 = *(int *)(v101 + 24);
          v107 = &v71[v106];
          v108 = &v72[v106];
          v228 = v99;
          v100(v107, &v72[v106], v99);
          v109 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v110 = *(void (**)(char *, char *, uint64_t))(v235 + 32);
          v110(&v107[v109[5]], &v108[v109[5]], v238);
          v230 = v110;
          v110(&v107[v109[6]], &v108[v109[6]], v238);
          v111 = v109[7];
          v112 = &v107[v111];
          v113 = &v108[v111];
          v114 = sub_100005D40(&qword_1001BF090);
          v115 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 32);
          v115(v112, v113, v114);
          v115(&v107[v109[8]], &v108[v109[8]], v114);
          *(_OWORD *)&v107[v109[9]] = *(_OWORD *)&v108[v109[9]];
          v236 = v109;
          v116 = v109[10];
          v117 = &v107[v116];
          v118 = &v108[v116];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v108[v116], 1, v114))
          {
            v119 = sub_100005D40(&qword_1001BF098);
            memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
          }
          else
          {
            v115(v117, v118, v114);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v117, 0, 1, v114);
          }
          v124 = v109[11];
          v125 = &v107[v124];
          v126 = &v108[v124];
          v229 = v72;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v108[v124], 1, v114))
          {
            v127 = sub_100005D40(&qword_1001BF098);
            memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
          }
          else
          {
            v115(v125, v126, v114);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v125, 0, 1, v114);
          }
          v144 = v109[12];
          v145 = &v107[v144];
          v146 = &v108[v144];
          v227(&v107[v144], &v108[v144], v228);
          v147 = (int *)type metadata accessor for ConditionViewModel(0);
          v148 = v147[5];
          v149 = &v145[v148];
          v150 = &v146[v148];
          v151 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 32))(v149, v150, v151);
          *(_OWORD *)&v145[v147[6]] = *(_OWORD *)&v146[v147[6]];
          *(_OWORD *)&v145[v147[7]] = *(_OWORD *)&v146[v147[7]];
          v145[v147[8]] = v146[v147[8]];
          v145[v147[9]] = v146[v147[9]];
          v145[v147[10]] = v146[v147[10]];
          *(_QWORD *)&v107[v236[13]] = *(_QWORD *)&v108[v236[13]];
          v152 = v236[14];
          v153 = &v107[v152];
          v154 = &v108[v152];
          v155 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 32))(v153, v154, v155);
          v156 = v236[15];
          v157 = &v107[v156];
          v158 = &v108[v156];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v108[v156], 1, v238))
          {
            v159 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
          }
          else
          {
            v230(v157, v158, v238);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v157, 0, 1, v238);
          }
          v164 = v229;
          v165 = v236[16];
          v166 = &v107[v165];
          v167 = &v108[v165];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v108[v165], 1, v238))
          {
            v168 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
          }
          else
          {
            v230(v166, v167, v238);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v166, 0, 1, v238);
          }
          v181 = v236[17];
          v182 = &v107[v181];
          v183 = &v108[v181];
          v184 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v184 - 8) + 32))(v182, v183, v184);
          v185 = v236[18];
          v186 = &v107[v185];
          v187 = &v108[v185];
          v188 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v188 - 8) + 32))(v186, v187, v188);
          *(_QWORD *)&v107[v236[19]] = *(_QWORD *)&v108[v236[19]];
          v189 = v236[20];
          v190 = &v107[v189];
          v191 = &v108[v189];
          v190[32] = v191[32];
          v192 = *((_OWORD *)v191 + 1);
          *(_OWORD *)v190 = *(_OWORD *)v191;
          *((_OWORD *)v190 + 1) = v192;
          v71 = v234;
          *(_QWORD *)&v234[v226[7]] = *(_QWORD *)&v229[v226[7]];
          *(_QWORD *)&v234[v226[8]] = *(_QWORD *)&v229[v226[8]];
          v193 = v226[9];
          v194 = &v234[v193];
          v195 = &v229[v193];
          v196 = (int *)type metadata accessor for AirQualityViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v195, 1, (uint64_t)v196))
          {
            v197 = sub_100005D40(&qword_1001BFA30);
            memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
          }
          else
          {
            v227(v194, v195, v228);
            v230(&v194[v196[5]], &v195[v196[5]], v238);
            *(_QWORD *)&v194[v196[6]] = *(_QWORD *)&v195[v196[6]];
            v198 = v196[7];
            v199 = &v194[v198];
            v200 = &v195[v198];
            v201 = type metadata accessor for AirQualityScale(0);
            v202 = v200;
            v164 = v229;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v201 - 8) + 32))(v199, v202, v201);
            v203 = v196[8];
            v204 = &v194[v203];
            v205 = &v195[v203];
            v206 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v206 - 8) + 32))(v204, v205, v206);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v194, 0, 1, (uint64_t)v196);
          }
          v207 = v226[10];
          v208 = &v234[v207];
          v209 = &v164[v207];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v209, 1, HourPrecipitationChartViewModel))
          {
            v211 = sub_100005D40(&qword_1001BFA38);
            memcpy(v208, v209, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v208, v209, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v208, 0, 1, HourPrecipitationChartViewModel);
          }
          *(_QWORD *)&v234[v226[11]] = *(_QWORD *)&v164[v226[11]];
          v212 = v226[12];
          v213 = &v234[v212];
          v214 = &v164[v212];
          *(_QWORD *)v213 = *(_QWORD *)v214;
          *((_WORD *)v213 + 4) = *((_WORD *)v214 + 4);
          v215 = v226[13];
          v216 = &v234[v215];
          v217 = &v164[v215];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v164[v215], 1, v60))
          {
            v218 = sub_100005D40(&qword_1001BFA28);
            memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v216, v217, v60);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v216, 0, 1, v60);
          }
          v219 = v226[14];
          v220 = &v234[v219];
          v221 = &v164[v219];
          v222 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v221, 1, v222))
          {
            v223 = sub_100005D40(&qword_1001BFA40);
            memcpy(v220, v221, *(_QWORD *)(*(_QWORD *)(v223 - 8) + 64));
          }
          else
          {
            v224 = swift_getEnumCaseMultiPayload(v221, v222) == 1;
            v230(v220, v221, v238);
            swift_storeEnumTagMultiPayload(v220, v222, v224);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v220, 0, 1, v222);
          }
          v73 = v233;
        }
        v74 = v232;
        v76 = v231;
      }
      swift_storeEnumTagMultiPayload(v71, v74, v76);
      swift_storeEnumTagMultiPayload(v71, v73, 1);
    }
    else
    {
      memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    }
  }
  v239[v240[11]] = v69[v240[11]];
  return v239;
}

uint64_t sub_100138A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100138A9C);
}

uint64_t sub_100138A9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;
  char v15;
  uint64_t v16;

  sub_100005D40(&qword_1001BFA48);
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
  }
  sub_100005D40(&qword_1001C0288);
  sub_10001C6C0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_17:
    v8 = a1 + v11;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
  }
  if ((_DWORD)a2 != 254)
  {
    sub_100005D40(&qword_1001BF0D0);
    sub_10001C6C0();
    if (v9)
    {
      v7 = v14;
      v11 = a3[7];
    }
    else
    {
      sub_100005D40(&qword_1001BF4B0);
      sub_10001C6C0();
      if (v15)
      {
        v7 = v16;
        v11 = a3[8];
      }
      else
      {
        v7 = sub_10008307C();
        v11 = a3[10];
      }
    }
    goto LABEL_17;
  }
  v12 = *(unsigned __int8 *)(a1 + a3[6] + 8);
  if (v12 > 1)
    return (v12 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_100138B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100138B98);
}

void sub_100138B98(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  sub_100005D40(&qword_1001BFA48);
  sub_10001C6D0();
  if (v11)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    sub_100005D40(&qword_1001C0288);
    sub_10001C6D0();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      if (a3 == 254)
      {
        *(_BYTE *)(a1 + a4[6] + 8) = -(char)a2;
        sub_1000443A4();
        return;
      }
      sub_100005D40(&qword_1001BF0D0);
      sub_10001C6D0();
      if (v11)
      {
        v9 = v14;
        v13 = a4[7];
      }
      else
      {
        sub_100005D40(&qword_1001BF4B0);
        sub_10001C6D0();
        if (v15)
        {
          v9 = v16;
          v13 = a4[8];
        }
        else
        {
          v9 = sub_10008307C();
          v13 = a4[10];
        }
      }
    }
    v10 = a1 + v13;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for SunriseSunsetContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C60E0;
  if (!qword_1001C60E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SunriseSunsetContentView);
  return result;
}

void sub_100138CB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[8];

  sub_10001C028(319, (unint64_t *)&qword_1001BFAB8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001C028(319, (unint64_t *)&unk_1001C1058, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      v12[2] = "\t";
      sub_10001C028(319, (unint64_t *)&qword_1001BF140, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context);
      if (v7 <= 0x3F)
      {
        v12[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001C028(319, &qword_1001BF530, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
        if (v9 <= 0x3F)
        {
          v12[4] = *(_QWORD *)(v8 - 8) + 64;
          v12[5] = "\t";
          v10 = type metadata accessor for ForecastEntry(319);
          if (v11 <= 0x3F)
          {
            v12[6] = *(_QWORD *)(v10 - 8) + 64;
            v12[7] = &unk_100184B78;
            swift_initStructMetadata(a1, 256, 8, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t sub_100138DE0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A1164, 1);
}

uint64_t sub_100138DF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  double v19;
  char v20;
  char *v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for SunriseSunsetContentView(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v33 - v6;
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v33 - v13;
  sub_1000C5250((uint64_t *)((char *)&v33 - v13));
  static WidgetRenderingMode.accented.getter();
  v15 = static WidgetRenderingMode.== infix(_:_:)(v14, v12);
  v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v12, v8);
  v17 = ((uint64_t (*)(char *, uint64_t))v16)(v14, v8);
  if ((v15 & 1) == 0)
  {
    sub_1000C5250(v14);
    static WidgetRenderingMode.vibrant.getter();
    v20 = static WidgetRenderingMode.== infix(_:_:)(v14, v12);
    v16(v12, v8);
    v16(v14, v8);
    sub_10001C590(v1, (uint64_t)v7, type metadata accessor for SunriseSunsetContentView);
    if ((v20 & 1) != 0)
    {
      sub_100011894((uint64_t)v7, type metadata accessor for SunriseSunsetContentView);
      sub_10001C590(v1, (uint64_t)v5, type metadata accessor for SunriseSunsetContentView);
    }
    else
    {
      v21 = &v7[*(int *)(v2 + 36)];
      v22 = *(_QWORD *)v21;
      v23 = v21[8];
      sub_10001961C(*(_QWORD *)v21, v23);
      v24 = sub_1000C5274(v22, v23);
      sub_100019A78(v22, v23);
      sub_100011894((uint64_t)v7, type metadata accessor for SunriseSunsetContentView);
      sub_10001C590(v1, (uint64_t)v5, type metadata accessor for SunriseSunsetContentView);
      if ((v24 & 1) == 0)
      {
        v29 = &v5[*(int *)(v2 + 24)];
        v30 = *(_QWORD *)v29;
        v31 = v29[8];
        sub_10001961C(*(_QWORD *)v29, v31);
        v32 = sub_1000C5274(v30, v31);
        sub_100019A78(v30, v31);
        sub_100011894((uint64_t)v5, type metadata accessor for SunriseSunsetContentView);
        if ((v32 & 1) != 0)
        {
          v26 = static Color.black.getter();
          goto LABEL_8;
        }
LABEL_7:
        v26 = static Color.white.getter(v25);
LABEL_8:
        v18 = v26;
        v19 = 0.2;
        goto LABEL_9;
      }
    }
    sub_100011894((uint64_t)v5, type metadata accessor for SunriseSunsetContentView);
    goto LABEL_7;
  }
  v18 = static Color.white.getter(v17);
  v19 = 0.1;
LABEL_9:
  v27 = Color.opacity(_:)(v19);
  swift_release(v18);
  return v27;
}

void sub_100139094(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10013909C(v1, a1);
}

void sub_10013909C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t OpaqueTypeConformance2;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  Swift::String v149;
  uint64_t v150;
  Swift::String v151;
  void *object;
  __n128 v153;
  Swift::String v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t *v179;
  char *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD v204[4];
  char *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;

  v201 = a2;
  v199 = sub_100005D40(&qword_1001C6130);
  __chkstk_darwin(v199);
  v200 = (uint64_t)&v155 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100005D40(&qword_1001C1650);
  __chkstk_darwin(v190);
  v179 = (uint64_t *)((char *)&v155 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v203 = sub_100005D40(&qword_1001C6138);
  __chkstk_darwin(v203);
  v181 = (char *)&v155 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_100005D40(&qword_1001C6140);
  v183 = *(_QWORD *)(v198 - 8);
  v6 = __chkstk_darwin(v198);
  v180 = (char *)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v182 = (char *)&v155 - v8;
  v196 = sub_100005D40(&qword_1001C6148);
  __chkstk_darwin(v196);
  v197 = (uint64_t)&v155 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = type metadata accessor for SunriseSunsetBackgroundStyle(0);
  v176 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v175 = (char *)&v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = type metadata accessor for ContainerBackgroundPlacement(0);
  v191 = *(_QWORD *)(v192 - 8);
  v11 = __chkstk_darwin(v192);
  v178 = (char *)&v155 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v170 = (char *)&v155 - v13;
  v189 = type metadata accessor for ColorScheme(0);
  v202 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189);
  v188 = (char *)&v155 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SunriseSunsetContentView(0);
  v16 = __chkstk_darwin(v15);
  v157 = (uint64_t)&v155 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v158 = (uint64_t)&v155 - v18;
  v161 = type metadata accessor for SunriseSunsetView(0);
  v160 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v184 = (char *)&v155 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_100005D40(&qword_1001C6150);
  __chkstk_darwin(v159);
  v162 = (char *)&v155 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_100005D40(&qword_1001C6158);
  __chkstk_darwin(v163);
  v164 = (char *)&v155 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100005D40(&qword_1001C6160);
  v167 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v166 = (char *)&v155 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100005D40(&qword_1001C6168);
  __chkstk_darwin(v165);
  v168 = (char *)&v155 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_100005D40(&qword_1001C6170);
  __chkstk_darwin(v172);
  v173 = (uint64_t)&v155 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_100005D40(&qword_1001C6178);
  v25 = __chkstk_darwin(v195);
  v171 = (char *)&v155 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v174 = (uint64_t)&v155 - v27;
  v28 = type metadata accessor for SunriseSunsetViewModel(0);
  v186 = *(_QWORD *)(v28 - 8);
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v155 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v185 = (char *)&v155 - v32;
  v33 = type metadata accessor for SunriseSunsetWidgetDataStatus(0);
  __chkstk_darwin(v33);
  v35 = (char *)&v155 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100005D40(&qword_1001C6180);
  __chkstk_darwin(v194);
  v193 = (char *)&v155 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for WidgetFamily(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = __chkstk_darwin(v37);
  v41 = (_DWORD *)((char *)&v155 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v39);
  v43 = (char *)&v155 - v42;
  sub_1000C54B0((uint64_t *)((char *)&v155 - v42));
  if ((*(unsigned int (**)(char *, uint64_t))(v38 + 88))(v43, v37) == enum case for WidgetFamily.systemSmall(_:))
  {
    sub_10004B668((uint64_t)v35);
    v44 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 2, v28);
    v187 = a1;
    if (v44)
    {
      sub_10013A2A8(&v205);
      v185 = v205;
      v184 = (char *)v206;
      LODWORD(v177) = v207;
      v45 = v208;
      v46 = v209;
      v47 = v210;
      v48 = v211;
      v49 = v212;
      v186 = v213;
      v50 = v214;
      v51 = v202;
      v52 = v188;
      v53 = v189;
      (*(void (**)(char *, _QWORD, uint64_t))(v202 + 104))(v188, enum case for ColorScheme.dark(_:), v189);
      KeyPath = swift_getKeyPath(&unk_100184BE0);
      v55 = v179;
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))((char *)v179 + *(int *)(v190 + 28), v52, v53);
      *v55 = KeyPath;
      v56 = (uint64_t)v181;
      sub_10003EB70((uint64_t)v55, (uint64_t)&v181[*(int *)(v203 + 36)], &qword_1001C1650);
      v57 = (uint64_t)v185;
      v58 = (uint64_t)v184;
      *(_QWORD *)v56 = v185;
      *(_QWORD *)(v56 + 8) = v58;
      v59 = v177;
      *(_BYTE *)(v56 + 16) = v177;
      *(_QWORD *)(v56 + 24) = v45;
      *(_QWORD *)(v56 + 32) = v46;
      *(_QWORD *)(v56 + 40) = v47;
      *(_QWORD *)(v56 + 48) = v48;
      v60 = v186;
      *(_QWORD *)(v56 + 56) = v49;
      *(_QWORD *)(v56 + 64) = v60;
      *(_QWORD *)(v56 + 72) = v50;
      sub_100016828(v57, v58, v59);
      swift_bridgeObjectRetain(v45);
      sub_1000167F8(v46, v47, v48, v49);
      swift_retain(v60);
      sub_100016904((uint64_t)v55, &qword_1001C1650);
      (*(void (**)(char *, uint64_t))(v202 + 8))(v52, v53);
      v61 = sub_100080B68((uint64_t)&v205);
      v62 = v178;
      v63 = static ContainerBackgroundPlacement.widget.getter(v61);
      v64 = __chkstk_darwin(v63);
      v65 = static Alignment.center.getter(v64);
      v67 = v66;
      v68 = type metadata accessor for BackgroundView(0);
      v69 = sub_10013AA40(&qword_1001C6188, &qword_1001C6138, (void (*)(void))sub_10013A804);
      sub_10002EF14(&qword_1001C10E0, type metadata accessor for BackgroundView, (uint64_t)&unk_10017D0C4);
      v71 = v70;
      v72 = v180;
      v73 = v203;
      View.containerBackground<A>(for:alignment:content:)(v62, v65, v67, sub_10013A7EC, &v155 - 4, v203, v68, v69, v70);
      (*(void (**)(char *, uint64_t))(v191 + 8))(v62, v192);
      sub_100016904(v56, &qword_1001C6138);
      v74 = v183;
      v75 = v182;
      v76 = v198;
      (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v182, v72, v198);
      v77 = v197;
      (*(void (**)(uint64_t, char *, uint64_t))(v74 + 16))(v197, v75, v76);
      swift_storeEnumTagMultiPayload(v77, v196, 1);
      v78 = sub_10013A840();
      v204[0] = v73;
      v204[1] = v68;
      v204[2] = v69;
      v204[3] = v71;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v204, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
      v80 = (uint64_t)v193;
      _ConditionalContent<>.init(storage:)(v77, v195, v76, v78, OpaqueTypeConformance2);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v76);
LABEL_12:
      v147 = v200;
      sub_10003EB70(v80, v200, &qword_1001C6180);
      swift_storeEnumTagMultiPayload(v147, v199, 0);
      v148 = sub_10013AB7C();
      _ConditionalContent<>.init(storage:)(v147, v194, &type metadata for Never, v148, &protocol witness table for Never);
      sub_100016904(v80, &qword_1001C6180);
      return;
    }
    v81 = v186;
    v82 = v185;
    (*(void (**)(char *, char *, uint64_t))(v186 + 32))(v185, v35, v28);
    (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v31, v82, v28);
    SunriseSunsetView.init(model:)(v31);
    v83 = a1 + *(int *)(v15 + 24);
    v84 = *(_QWORD *)v83;
    v183 = v83;
    LOBYTE(v82) = *(_BYTE *)(v83 + 8);
    sub_10001961C(v84, (char)v82);
    v85 = sub_1000C5274(v84, (char)v82);
    sub_100019A78(v84, (char)v82);
    v86 = v158;
    sub_10001C590(a1, v158, type metadata accessor for SunriseSunsetContentView);
    v156 = v28;
    if ((v85 & 1) != 0)
    {
      v87 = *(int *)(v15 + 40);
      v88 = v87 + *(int *)(type metadata accessor for ForecastEntry(0) + 24);
      LOBYTE(v88) = *(_BYTE *)(v86 + v88 + *(int *)(type metadata accessor for WidgetContext(0) + 44) + 8);
      sub_100011894(v86, type metadata accessor for SunriseSunsetContentView);
      v90 = v189;
      v91 = v202;
      v92 = v188;
      v93 = v161;
      v94 = v160;
      if ((v88 & 1) != 0)
      {
        v95 = static Color.black.getter();
        v96 = Color.opacity(_:)(0.3);
        swift_release(v95);
LABEL_9:
        v97 = v190;
        v98 = (uint64_t)v162;
        v99 = v184;
        (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v162, v184, v93);
        v100 = v98 + *(int *)(v159 + 36);
        *(_QWORD *)v100 = v96;
        *(_OWORD *)(v100 + 8) = xmmword_10017CEB0;
        *(_QWORD *)(v100 + 24) = 0x4000000000000000;
        (*(void (**)(char *, uint64_t))(v94 + 8))(v99, v93);
        (*(void (**)(char *, _QWORD, uint64_t))(v91 + 104))(v92, enum case for ColorScheme.dark(_:), v90);
        v101 = swift_getKeyPath(&unk_100184BE0);
        v102 = v163;
        v103 = (uint64_t)v164;
        v104 = (uint64_t *)&v164[*(int *)(v163 + 36)];
        (*(void (**)(char *, char *, uint64_t))(v91 + 16))((char *)v104 + *(int *)(v97 + 28), v92, v90);
        *v104 = v101;
        sub_10003EB70(v98, v103, &qword_1001C6150);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v90);
        sub_100016904(v98, &qword_1001C6150);
        v105 = v170;
        v107 = static ContainerBackgroundPlacement.widget.getter(v106);
        v108 = __chkstk_darwin(v107);
        v109 = static Alignment.center.getter(v108);
        v111 = v110;
        v112 = type metadata accessor for BackgroundView(0);
        v113 = sub_10013AA40(&qword_1001C61B0, &qword_1001C6158, (void (*)(void))sub_10013AABC);
        sub_10002EF14(&qword_1001C10E0, type metadata accessor for BackgroundView, (uint64_t)&unk_10017D0C4);
        v202 = v114;
        v115 = v166;
        v116 = v102;
        v117 = v112;
        View.containerBackground<A>(for:alignment:content:)(v105, v109, v111, sub_10013AE60, &v155 - 4, v116, v112, v113, v114);
        (*(void (**)(char *, uint64_t))(v191 + 8))(v105, v192);
        sub_100016904(v103, &qword_1001C6158);
        v118 = swift_getKeyPath(&unk_100184C10);
        v119 = *(_QWORD *)v183;
        LOBYTE(v111) = *(_BYTE *)(v183 + 8);
        sub_10001961C(*(_QWORD *)v183, v111);
        v120 = sub_1000C5274(v119, v111);
        sub_100019A78(v119, v111);
        v121 = (unsigned int *)&enum case for SunriseSunsetBackgroundStyle.opaque(_:);
        v122 = v176;
        if ((v120 & 1) == 0)
          v121 = (unsigned int *)&enum case for SunriseSunsetBackgroundStyle.transparent(_:);
        v123 = v175;
        v124 = v177;
        (*(void (**)(char *, _QWORD, uint64_t))(v176 + 104))(v175, *v121, v177);
        v125 = (uint64_t)v168;
        v126 = (uint64_t *)&v168[*(int *)(v165 + 36)];
        v127 = sub_100005D40(&qword_1001C61D0);
        (*(void (**)(char *, char *, uint64_t))(v122 + 16))((char *)v126 + *(int *)(v127 + 28), v123, v124);
        *v126 = v118;
        v128 = v167;
        v129 = v169;
        (*(void (**)(uint64_t, char *, uint64_t))(v167 + 16))(v125, v115, v169);
        (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v124);
        (*(void (**)(char *, uint64_t))(v128 + 8))(v115, v129);
        v130 = swift_getKeyPath(&unk_100184C40);
        v131 = sub_100138DF0();
        v132 = v173;
        sub_10003EB70(v125, v173, &qword_1001C6168);
        v133 = v172;
        v134 = (uint64_t *)(v132 + *(int *)(v172 + 36));
        *v134 = v130;
        v134[1] = v131;
        sub_100016904(v125, &qword_1001C6168);
        v135 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
        v136 = swift_allocObject(v135, 48, 7);
        *(_OWORD *)(v136 + 16) = xmmword_10017BD10;
        v137 = v185;
        *(_QWORD *)(v136 + 32) = SunriseSunsetViewModel.headerTitle.getter();
        *(_QWORD *)(v136 + 40) = v138;
        v139 = sub_10013A8C4();
        v140 = sub_10001692C();
        v141 = (uint64_t)v171;
        View.accessibilityInputLabels<A>(_:)(v136, v133, &type metadata for String, v139, v140);
        swift_bridgeObjectRelease(v136);
        sub_100016904(v132, &qword_1001C6170);
        v142 = v174;
        sub_10013ACD4(v141, v174);
        v143 = v197;
        sub_10003EB70(v142, v197, &qword_1001C6178);
        swift_storeEnumTagMultiPayload(v143, v196, 0);
        v144 = sub_10013A840();
        v145 = sub_10013AA40(&qword_1001C6188, &qword_1001C6138, (void (*)(void))sub_10013A804);
        v205 = (char *)v203;
        v206 = v117;
        v207 = v145;
        v208 = v202;
        v146 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
        v80 = (uint64_t)v193;
        _ConditionalContent<>.init(storage:)(v143, v195, v198, v144, v146);
        sub_100016904(v142, &qword_1001C6178);
        (*(void (**)(char *, uint64_t))(v186 + 8))(v137, v156);
        goto LABEL_12;
      }
    }
    else
    {
      sub_100011894(v86, type metadata accessor for SunriseSunsetContentView);
      v90 = v189;
      v91 = v202;
      v92 = v188;
      v93 = v161;
      v94 = v160;
    }
    v96 = static Color.clear.getter(v89);
    goto LABEL_9;
  }
  sub_10001C590(a1, v157, type metadata accessor for SunriseSunsetContentView);
  v205 = 0;
  v206 = 0xE000000000000000;
  _StringGuts.grow(_:)(62);
  v149._countAndFlagsBits = 0xD000000000000022;
  v149._object = (void *)0x80000001001862F0;
  String.append(_:)(v149);
  sub_1000C54B0(v41);
  sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v151._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v37, v150);
  object = v151._object;
  String.append(_:)(v151);
  v153 = swift_bridgeObjectRelease(object);
  (*(void (**)(_DWORD *, uint64_t, __n128))(v38 + 8))(v41, v37, v153);
  v154._object = (void *)0x800000010018A010;
  v154._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v154);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v205, v206, "WeatherWidget/SunriseSunsetContentView.swift", 44, 2);
  __break(1u);
}

uint64_t sub_10013A280(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.sunriseSunsetNightLineColor.setter(v1);
}

void *sub_10013A2A8@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _BYTE __src[80];

  v2 = v1;
  v30 = a1;
  v3 = type metadata accessor for Font.Context(0);
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  __chkstk_darwin(v3);
  v5 = (_DWORD *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v6);
  v8 = (_DWORD *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v9);
  v11 = (_DWORD *)((char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v12);
  v14 = (unsigned __int8 *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for SunriseSunsetContentView(0);
  v16 = v2 + v15[10];
  v17 = type metadata accessor for ForecastEntry(0);
  sub_10001C590(v16 + *(int *)(v17 + 28), (uint64_t)v14, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v14, v12) == 1)
  {
    sub_100011894((uint64_t)v14, type metadata accessor for ForecastEntry.Model);
    v18 = 2;
  }
  else
  {
    v18 = *v14;
  }
  sub_1000C54B0(v11);
  sub_1000C54E0(v8);
  v19 = v2 + v15[6];
  v20 = *(_QWORD *)v19;
  v21 = *(_BYTE *)(v19 + 8);
  v22 = *(_BYTE *)(v2 + v15[11]);
  sub_10001961C(*(_QWORD *)v19, v21);
  v23 = sub_1000C5274(v20, v21);
  sub_100019A78(v20, v21);
  v24 = type metadata accessor for ErrorViewAttributesFactory(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v25 = sub_100093708((uint64_t)v11, (uint64_t)v8, v22, v23 & 1);
  sub_1000C5030(v5);
  sub_1000D91F4(v18, (uint64_t)v5, (uint64_t)__src);
  swift_release(v25);
  (*(void (**)(_DWORD *, uint64_t))(v28 + 8))(v5, v29);
  return memcpy(v30, __src, 0x50uLL);
}

void sub_10013A508(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v4 = type metadata accessor for BackgroundView(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + *(int *)(type metadata accessor for SunriseSunsetContentView(0) + 40);
  v8 = *(int *)(sub_10008307C() + 24);
  v9 = (uint64_t *)(v7 + v8 + *(int *)(type metadata accessor for WidgetContext(0) + 44));
  v10 = *v9;
  LOBYTE(v9) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v6 = v10;
  v6[8] = (char)v9;
  v11 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v11 = swift_getKeyPath(&unk_100184C70);
  v12 = sub_100005D40(&qword_1001BF490);
  sub_10013AE64(v12);
  v13 = &v6[*(int *)(v4 + 24)];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_100184CA0);
  v13[8] = 0;
  sub_10013AD24((uint64_t)v6, a2);
  swift_bridgeObjectRetain(v10);
  sub_1000FA1C4();
}

void sub_10013A5FC(uint64_t a1@<X8>)
{
  const void *v1;
  const void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = type metadata accessor for ErrorView(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v6, v2, 0x50uLL);
  v7 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v7 = swift_getKeyPath(&unk_100184C70);
  v8 = sub_100005D40(&qword_1001BF490);
  sub_10013AE64(v8);
  v9 = sub_1000C5634((uint64_t)v2);
  LOBYTE(v2) = static Edge.Set.all.getter(v9);
  sub_10001C590((uint64_t)v6, a1, type metadata accessor for ErrorView);
  v10 = a1 + *(int *)(sub_100005D40(&qword_1001C14F8) + 36);
  *(_BYTE *)v10 = (_BYTE)v2;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_BYTE *)(v10 + 40) = 1;
  sub_100011894((uint64_t)v6, type metadata accessor for ErrorView);
  sub_1000FA1C4();
}

void sub_10013A6F4(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE v3[80];

  memcpy(v3, v1, sizeof(v3));
  sub_10013A5FC(a1);
}

void sub_10013A738()
{
  EnvironmentValues.colorScheme.getter();
  sub_100006338();
}

void sub_10013A754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v8 = a5(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v12 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v12 - v9, a1);
  a6(v10);
  sub_1000443A4();
}

void sub_10013A7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10013A754(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (void (*)(char *))&EnvironmentValues.colorScheme.setter);
}

void sub_10013A7EC(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10013A508(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10013A804()
{
  unint64_t result;

  result = qword_1001C6190;
  if (!qword_1001C6190)
  {
    result = swift_getWitnessTable(&unk_100184CE4, &type metadata for SunriseSunsetContentView.GenericErrorView);
    atomic_store(result, (unint64_t *)&qword_1001C6190);
  }
  return result;
}

unint64_t sub_10013A840()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6198;
  if (!qword_1001C6198)
  {
    v1 = sub_100005DC4(&qword_1001C6178);
    sub_10013A8C4();
    sub_10002EF14((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6198);
  }
  return result;
}

unint64_t sub_10013A8C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C61A0;
  if (!qword_1001C61A0)
  {
    v1 = sub_100005DC4(&qword_1001C6170);
    sub_10013A940();
    sub_10013AB40(&qword_1001C61D8, &qword_1001C61E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C61A0);
  }
  return result;
}

unint64_t sub_10013A940()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  result = qword_1001C61A8;
  if (!qword_1001C61A8)
  {
    v1 = sub_100005DC4(&qword_1001C6168);
    v2 = sub_100005DC4(&qword_1001C6158);
    v3 = type metadata accessor for BackgroundView(255);
    v4 = sub_10013AA40(&qword_1001C61B0, &qword_1001C6158, (void (*)(void))sub_10013AABC);
    sub_10002EF14(&qword_1001C10E0, type metadata accessor for BackgroundView, (uint64_t)&unk_10017D0C4);
    v6[0] = v2;
    v6[1] = v3;
    v6[2] = v4;
    v6[3] = v5;
    swift_getOpaqueTypeConformance2(v6, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    sub_10013AB40(&qword_1001C61C8, &qword_1001C61D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C61A8);
  }
  return result;
}

uint64_t sub_10013AA40(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005DC4(a2);
    a3();
    sub_10013AB40(&qword_1001C1648, &qword_1001C1650);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10013AABC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C61B8;
  if (!qword_1001C61B8)
  {
    v1 = sub_100005DC4(&qword_1001C6150);
    sub_10002EF14(&qword_1001C61C0, (uint64_t (*)(uint64_t))&type metadata accessor for SunriseSunsetView, (uint64_t)&protocol conformance descriptor for SunriseSunsetView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C61B8);
  }
  return result;
}

void sub_10013AB40(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100005DC4(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v3), a1);
  }
  sub_100006338();
}

unint64_t sub_10013AB7C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  result = qword_1001C61E8;
  if (!qword_1001C61E8)
  {
    v1 = sub_100005DC4(&qword_1001C6180);
    sub_10013A840();
    v2 = sub_100005DC4(&qword_1001C6138);
    v3 = type metadata accessor for BackgroundView(255);
    v4 = sub_10013AA40(&qword_1001C6188, &qword_1001C6138, (void (*)(void))sub_10013A804);
    sub_10002EF14(&qword_1001C10E0, type metadata accessor for BackgroundView, (uint64_t)&unk_10017D0C4);
    v6[0] = v2;
    v6[1] = v3;
    v6[2] = v4;
    v6[3] = v5;
    swift_getOpaqueTypeConformance2(v6, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C61E8);
  }
  return result;
}

void sub_10013AC6C()
{
  EnvironmentValues.sunriseSunsetBackgroundStyle.getter();
  sub_100006338();
}

void sub_10013AC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10013A754(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for SunriseSunsetBackgroundStyle, (void (*)(char *))&EnvironmentValues.sunriseSunsetBackgroundStyle.setter);
}

void sub_10013ACAC(_QWORD *a1@<X8>)
{
  *a1 = EnvironmentValues.sunriseSunsetNightLineColor.getter();
  sub_100006338();
}

uint64_t sub_10013ACD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001C6178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013AD24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BackgroundView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SunriseSunsetContentView.GenericErrorView()
{
  return &type metadata for SunriseSunsetContentView.GenericErrorView;
}

unint64_t sub_10013AD7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C61F0;
  if (!qword_1001C61F0)
  {
    v1 = sub_100005DC4(&qword_1001C61F8);
    sub_10013ADE0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C61F0);
  }
  return result;
}

unint64_t sub_10013ADE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6200;
  if (!qword_1001C6200)
  {
    v1 = sub_100005DC4(&qword_1001C6208);
    sub_10013AB7C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6200);
  }
  return result;
}

uint64_t sub_10013AE4C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A118C, 1);
}

uint64_t sub_10013AE64(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 0);
}

unint64_t sub_10013AE74()
{
  return 0xD000000000000028;
}

ValueMetadata *type metadata accessor for SunComplicationWidget()
{
  return &type metadata for SunComplicationWidget;
}

uint64_t sub_10013AEA0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A11D0, 1);
}

uint64_t sub_10013AEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, uint64_t);
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;

  v4 = sub_100005D40(&qword_1001C6210);
  v57 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10002325C();
  v7 = v6 - v5;
  v58 = sub_100005D40(&qword_1001C6218);
  v59 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  sub_10002325C();
  v10 = v9 - v8;
  v60 = sub_100005D40(&qword_1001C6220);
  v61 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  sub_10002325C();
  v13 = v12 - v11;
  v14 = type metadata accessor for WeatherTimelineProvider();
  swift_allocObject(v14, 248, 7);
  swift_bridgeObjectRetain_n(a2, 2);
  v62 = sub_100165A84(64, a1, a2);
  v15 = type metadata accessor for SunEventsContentView(0);
  v16 = sub_1000061B0(&qword_1001C6228, type metadata accessor for SunEventsContentView, (uint64_t)&unk_10017D378);
  v17 = sub_1000061B0(&qword_1001C0640, (uint64_t (*)(uint64_t))type metadata accessor for WeatherTimelineProvider, (uint64_t)&unk_100185D00);
  StaticConfiguration.init<A>(kind:provider:content:)(a1, a2, &v62, sub_10013B294, 0, v15, v14, v16, v17);
  v18 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x8000000100187380);
  v22 = sub_100045174(v18, v20, v19 & 1, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = sub_10013B378();
  WidgetConfiguration.configurationDisplayName(_:)(v22, v24, v28, v26, v4, v29);
  sub_100016868(v22, v24, v28);
  v30 = swift_bridgeObjectRelease(v26);
  (*(void (**)(uint64_t, uint64_t, __n128))(v57 + 8))(v7, v4, v30);
  v31 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000035, 0x800000010018A090);
  v35 = sub_100045174(v31, v33, v32 & 1, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v62 = v4;
  v63 = v29;
  v42 = sub_100083814(v35, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.description(_:)(v35, v37, v41, v39, v58, v42);
  sub_100016868(v35, v37, v41);
  v43 = swift_bridgeObjectRelease(v39);
  (*(void (**)(uint64_t, uint64_t, __n128))(v59 + 8))(v10, v58, v43);
  v44 = sub_100005D40(&qword_1001C0280);
  v45 = type metadata accessor for WidgetFamily(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(_QWORD *)(v46 + 72);
  v48 = *(unsigned __int8 *)(v46 + 80);
  v49 = (v48 + 32) & ~v48;
  v50 = swift_allocObject(v44, v49 + 2 * v47, v48 | 7);
  *(_OWORD *)(v50 + 16) = xmmword_10017BD00;
  v51 = v50 + v49;
  v52 = *(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104);
  v52(v51, enum case for WidgetFamily.accessoryCircular(_:), v45);
  v53 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v52)(v51 + v47, enum case for WidgetFamily.accessoryInline(_:), v45);
  v62 = v58;
  v63 = v42;
  v54 = sub_100083814(v53, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  WidgetConfiguration.supportedFamilies(_:)(v50, v60, v54);
  v55 = swift_bridgeObjectRelease(v50);
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v61 + 8))(v13, v60, v55);
}

uint64_t sub_10013B294@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044F34(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath(&unk_100184D98);
  v7 = sub_100005D40(&qword_1001BFA18);
  swift_storeEnumTagMultiPayload(a2, v7, 0);
  v8 = type metadata accessor for SunEventsContentView(0);
  return sub_100044FCC((uint64_t)v6, (uint64_t)a2 + *(int *)(v8 + 20));
}

unint64_t sub_10013B344@<X0>(_QWORD *a1@<X8>)
{
  unint64_t result;
  uint64_t v3;

  result = sub_10013AE74();
  *a1 = 0xD000000000000028;
  a1[1] = v3;
  return result;
}

uint64_t sub_10013B370()
{
  uint64_t *v0;

  return sub_10013AEB0(*v0, v0[1]);
}

unint64_t sub_10013B378()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6230;
  if (!qword_1001C6230)
  {
    v1 = sub_100005DC4(&qword_1001C6210);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6230);
  }
  return result;
}

uint64_t sub_10013B3C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v0 = sub_100005DC4(&qword_1001C6220);
  v1 = sub_100005DC4(&qword_1001C6218);
  v2 = sub_100005DC4(&qword_1001C6210);
  v3 = sub_10013B378();
  v10 = sub_100083808(v3, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, v4, v5, v6, v7, v8, v9, v2);
  v24 = sub_100083808(v10, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, v11, v12, v13, v14, v15, v16, v1);
  return sub_100083808(v24, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, v17, v18, v19, v20, v21, v22, v0);
}

unint64_t sub_10013B44C()
{
  return 0xD000000000000026;
}

ValueMetadata *type metadata accessor for UVIndexComplicationWidget()
{
  return &type metadata for UVIndexComplicationWidget;
}

uint64_t sub_10013B478(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A1214, 1);
}

uint64_t sub_10013B488(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, uint64_t);
  uint64_t v53;
  __n128 v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v4 = sub_100005D40(&qword_1001C6238);
  v56 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10002325C();
  v7 = v6 - v5;
  v57 = sub_100005D40(&qword_1001C6240);
  v58 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  sub_10002325C();
  v10 = v9 - v8;
  v59 = sub_100005D40(&qword_1001C6248);
  v60 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  sub_10002325C();
  v13 = v12 - v11;
  v14 = type metadata accessor for WeatherTimelineProvider();
  swift_allocObject(v14, 248, 7);
  swift_bridgeObjectRetain_n(a2, 2);
  v61 = sub_100165A84(0, a1, a2);
  v15 = type metadata accessor for UVIndexContentView(0);
  v16 = sub_1000061B0(&qword_1001C6250, type metadata accessor for UVIndexContentView, (uint64_t)&unk_10017B274);
  v17 = sub_1000061B0(&qword_1001C0640, (uint64_t (*)(uint64_t))type metadata accessor for WeatherTimelineProvider, (uint64_t)&unk_100185D00);
  StaticConfiguration.init<A>(kind:provider:content:)(a1, a2, &v61, sub_10013B86C, 0, v15, v14, v16, v17);
  v18 = LocalizedStringKey.init(stringLiteral:)(0x7865646E49205655, 0xE800000000000000);
  v22 = sub_100045174(v18, v20, v19 & 1, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = sub_10013B950();
  WidgetConfiguration.configurationDisplayName(_:)(v22, v24, v28, v26, v4, v29);
  sub_100016868(v22, v24, v28);
  v30 = swift_bridgeObjectRelease(v26);
  (*(void (**)(uint64_t, uint64_t, __n128))(v56 + 8))(v7, v4, v30);
  v31 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002BLL, 0x800000010018A190);
  v35 = sub_100045174(v31, v33, v32 & 1, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v61 = v4;
  v62 = v29;
  v42 = sub_10004516C((uint64_t)&v61, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.description(_:)(v35, v37, v41, v39, v57, v42);
  sub_100016868(v35, v37, v41);
  v43 = swift_bridgeObjectRelease(v39);
  (*(void (**)(uint64_t, uint64_t, __n128))(v58 + 8))(v10, v57, v43);
  v44 = sub_100005D40(&qword_1001C0280);
  v45 = type metadata accessor for WidgetFamily(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(_QWORD *)(v46 + 72);
  v48 = *(unsigned __int8 *)(v46 + 80);
  v49 = (v48 + 32) & ~v48;
  v50 = swift_allocObject(v44, v49 + 2 * v47, v48 | 7);
  *(_OWORD *)(v50 + 16) = xmmword_10017BD00;
  v51 = v50 + v49;
  v52 = *(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104);
  v52(v51, enum case for WidgetFamily.accessoryCircular(_:), v45);
  v52(v51 + v47, enum case for WidgetFamily.accessoryInline(_:), v45);
  v61 = v57;
  v62 = v42;
  v53 = sub_10004516C((uint64_t)&v61, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  WidgetConfiguration.supportedFamilies(_:)(v50, v59, v53);
  v54 = swift_bridgeObjectRelease(v50);
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v60 + 8))(v13, v59, v54);
}

uint64_t sub_10013B86C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044F34(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath(&unk_100184E30);
  v7 = sub_100005D40(&qword_1001BFA18);
  swift_storeEnumTagMultiPayload(a2, v7, 0);
  v8 = type metadata accessor for UVIndexContentView(0);
  return sub_100044FCC((uint64_t)v6, (uint64_t)a2 + *(int *)(v8 + 20));
}

unint64_t sub_10013B91C@<X0>(_QWORD *a1@<X8>)
{
  unint64_t result;
  uint64_t v3;

  result = sub_10013B44C();
  *a1 = 0xD000000000000026;
  a1[1] = v3;
  return result;
}

uint64_t sub_10013B948()
{
  uint64_t *v0;

  return sub_10013B488(*v0, v0[1]);
}

unint64_t sub_10013B950()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6258;
  if (!qword_1001C6258)
  {
    v1 = sub_100005DC4(&qword_1001C6238);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6258);
  }
  return result;
}

uint64_t sub_10013B998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v0 = sub_100005DC4(&qword_1001C6248);
  v1 = sub_100005DC4(&qword_1001C6240);
  v5 = sub_100005DC4(&qword_1001C6238);
  v6 = sub_10013B950();
  v2 = sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v5 = v1;
  v6 = v2;
  v3 = sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  v5 = v0;
  v6 = v3;
  return sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>);
}

char *sub_10013BA30(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v75;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v64 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v64 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v64);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[6];
    v14 = &a1[v13];
    v15 = (char *)a2 + v13;
    v16 = sub_100005D40(&qword_1001BF090);
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v17(&a1[a3[7]], (char *)a2 + a3[7], v16);
    v18 = a3[8];
    v19 = &a1[v18];
    v20 = (char *)a2 + v18;
    v8(&a1[v18], (uint64_t *)((char *)a2 + v18), v7);
    v21 = (int *)type metadata accessor for ConditionViewModel(0);
    v22 = v21[5];
    v23 = &v19[v22];
    v24 = &v20[v22];
    v25 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    v26 = v21[6];
    v27 = &v19[v26];
    v28 = &v20[v26];
    v29 = *((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v29;
    v30 = v21[7];
    v31 = &v19[v30];
    v32 = &v20[v30];
    v33 = *((_QWORD *)v32 + 1);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    v19[v21[8]] = v20[v21[8]];
    v19[v21[9]] = v20[v21[9]];
    v19[v21[10]] = v20[v21[10]];
    v34 = a3[9];
    v35 = &a1[v34];
    v36 = (char *)a2 + v34;
    v37 = type metadata accessor for Precipitation(0);
    v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v33);
    v38(v35, v36, v37);
    v39 = a3[11];
    *(_QWORD *)&a1[a3[10]] = *(uint64_t *)((char *)a2 + a3[10]);
    v40 = &a1[v39];
    v41 = (uint64_t *)((char *)a2 + v39);
    v42 = v41[1];
    *(_QWORD *)v40 = *v41;
    *((_QWORD *)v40 + 1) = v42;
    v43 = a3[12];
    v44 = a3[13];
    v45 = &a1[v43];
    v46 = (uint64_t *)((char *)a2 + v43);
    v47 = v46[1];
    *(_QWORD *)v45 = *v46;
    *((_QWORD *)v45 + 1) = v47;
    v48 = &a1[v44];
    v49 = (uint64_t *)((char *)a2 + v44);
    v50 = v49[1];
    *(_QWORD *)v48 = *v49;
    *((_QWORD *)v48 + 1) = v50;
    v51 = a3[14];
    v52 = a3[15];
    v53 = &a1[v51];
    v54 = (uint64_t *)((char *)a2 + v51);
    v55 = v54[1];
    *(_QWORD *)v53 = *v54;
    *((_QWORD *)v53 + 1) = v55;
    v56 = &a1[v52];
    v75 = (char *)a2 + v52;
    v57 = type metadata accessor for TemperatureScaleConfiguration(0);
    v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRetain(v55);
    v58(v56, v75, v57);
    v59 = a3[16];
    v60 = &a1[v59];
    v61 = (char *)a2 + v59;
    v62 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v61, 1, v62))
    {
      v63 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v60, 0, 1, v62);
    }
    v65 = a3[17];
    v66 = &a1[v65];
    v67 = (char *)a2 + v65;
    v68 = type metadata accessor for MoonEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v68))
    {
      v69 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v68);
    }
    v70 = a3[18];
    v71 = &a1[v70];
    v72 = (char *)a2 + v70;
    v73 = type metadata accessor for UVIndex(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
    *(_QWORD *)&a1[a3[19]] = *(uint64_t *)((char *)a2 + a3[19]);
  }
  return a1;
}

uint64_t sub_10013BDF8(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[6];
  v9 = sub_100005D40(&qword_1001BF090);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(a1 + a2[7], v9);
  v11 = a1 + a2[8];
  v5(v11, v4);
  v12 = (int *)type metadata accessor for ConditionViewModel(0);
  v13 = v11 + v12[5];
  v14 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + v12[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + v12[7] + 8));
  v15 = a1 + a2[9];
  v16 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[14] + 8));
  v17 = a1 + a2[15];
  v18 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[16];
  v20 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v19, 1, v20))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = a1 + a2[17];
  v22 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v21, 1, v22))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = a1 + a2[18];
  v24 = type metadata accessor for UVIndex(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
}

uint64_t sub_10013C034(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  void *v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v16(a1 + a3[7], a2 + a3[7], v15);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v7(a1 + v17, a2 + v17, v6);
  v20 = (int *)type metadata accessor for ConditionViewModel(0);
  v21 = v20[5];
  v22 = v18 + v21;
  v23 = v19 + v21;
  v24 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
  v25 = v20[6];
  v26 = (_QWORD *)(v18 + v25);
  v27 = (_QWORD *)(v19 + v25);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = v20[7];
  v30 = (_QWORD *)(v18 + v29);
  v31 = (_QWORD *)(v19 + v29);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  *(_BYTE *)(v18 + v20[8]) = *(_BYTE *)(v19 + v20[8]);
  *(_BYTE *)(v18 + v20[9]) = *(_BYTE *)(v19 + v20[9]);
  *(_BYTE *)(v18 + v20[10]) = *(_BYTE *)(v19 + v20[10]);
  v33 = a3[9];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = type metadata accessor for Precipitation(0);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v32);
  v37(v34, v35, v36);
  v38 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v39 = (_QWORD *)(a1 + v38);
  v40 = (_QWORD *)(a2 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = a3[12];
  v43 = a3[13];
  v44 = (_QWORD *)(a1 + v42);
  v45 = (_QWORD *)(a2 + v42);
  v46 = v45[1];
  *v44 = *v45;
  v44[1] = v46;
  v47 = (_QWORD *)(a1 + v43);
  v48 = (_QWORD *)(a2 + v43);
  v49 = v48[1];
  *v47 = *v48;
  v47[1] = v49;
  v50 = a3[14];
  v51 = a3[15];
  v52 = (_QWORD *)(a1 + v50);
  v53 = (_QWORD *)(a2 + v50);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = a1 + v51;
  v73 = a2 + v51;
  v56 = type metadata accessor for TemperatureScaleConfiguration(0);
  v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v54);
  v57(v55, v73, v56);
  v58 = a3[16];
  v59 = (void *)(a1 + v58);
  v60 = (const void *)(a2 + v58);
  v61 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v60, 1, v61))
  {
    v62 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v61);
  }
  v63 = a3[17];
  v64 = (void *)(a1 + v63);
  v65 = (const void *)(a2 + v63);
  v66 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v65, 1, v66))
  {
    v67 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v66);
  }
  v68 = a3[18];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  return a1;
}

uint64_t sub_10013C3D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const void *v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24);
  v16(v13, v14, v15);
  v16(a1 + a3[7], a2 + a3[7], v15);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v7(a1 + v17, a2 + v17, v6);
  v20 = (int *)type metadata accessor for ConditionViewModel(0);
  v21 = v20[5];
  v22 = v18 + v21;
  v23 = v19 + v21;
  v24 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  v25 = v20[6];
  v26 = (_QWORD *)(v18 + v25);
  v27 = (_QWORD *)(v19 + v25);
  *v26 = *v27;
  v28 = v27[1];
  v29 = v26[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = v20[7];
  v31 = (_QWORD *)(v18 + v30);
  v32 = (_QWORD *)(v19 + v30);
  *v31 = *v32;
  v33 = v32[1];
  v34 = v31[1];
  v31[1] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *(_BYTE *)(v18 + v20[8]) = *(_BYTE *)(v19 + v20[8]);
  *(_BYTE *)(v18 + v20[9]) = *(_BYTE *)(v19 + v20[9]);
  *(_BYTE *)(v18 + v20[10]) = *(_BYTE *)(v19 + v20[10]);
  v35 = a3[9];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v39 = a3[11];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  *v40 = *v41;
  v42 = v41[1];
  v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = a3[12];
  v45 = (_QWORD *)(a1 + v44);
  v46 = (_QWORD *)(a2 + v44);
  *v45 = *v46;
  v47 = v46[1];
  v48 = v45[1];
  v45[1] = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  v49 = a3[13];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (_QWORD *)(a2 + v49);
  *v50 = *v51;
  v52 = v51[1];
  v53 = v50[1];
  v50[1] = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  v54 = a3[14];
  v55 = (_QWORD *)(a1 + v54);
  v56 = (_QWORD *)(a2 + v54);
  *v55 = *v56;
  v57 = v56[1];
  v58 = v55[1];
  v55[1] = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  v59 = a3[15];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 24))(v60, v61, v62);
  v63 = a3[16];
  v64 = (void *)(a1 + v63);
  v65 = (const void *)(a2 + v63);
  v66 = type metadata accessor for SunEvents(0);
  LODWORD(v34) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v64, 1, v66);
  v67 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v65, 1, v66);
  if ((_DWORD)v34)
  {
    if (!v67)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v66);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v68 = *(_QWORD *)(v66 - 8);
  if (v67)
  {
    (*(void (**)(void *, uint64_t))(v68 + 8))(v64, v66);
LABEL_6:
    v69 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v68 + 24))(v64, v65, v66);
LABEL_7:
  v70 = a3[17];
  v71 = (void *)(a1 + v70);
  v72 = (const void *)(a2 + v70);
  v73 = type metadata accessor for MoonEvents(0);
  v74 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v71, 1, v73);
  v75 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v72, 1, v73);
  if (!v74)
  {
    v76 = *(_QWORD *)(v73 - 8);
    if (!v75)
    {
      (*(void (**)(void *, const void *, uint64_t))(v76 + 24))(v71, v72, v73);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v76 + 8))(v71, v73);
    goto LABEL_12;
  }
  if (v75)
  {
LABEL_12:
    v77 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v71, 0, 1, v73);
LABEL_13:
  v78 = a3[18];
  v79 = a1 + v78;
  v80 = a2 + v78;
  v81 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 24))(v79, v80, v81);
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  return a1;
}

uint64_t sub_10013C854(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  v16(a1 + a3[7], a2 + a3[7], v15);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v7(a1 + v17, a2 + v17, v6);
  v20 = (int *)type metadata accessor for ConditionViewModel(0);
  v21 = v20[5];
  v22 = v18 + v21;
  v23 = v19 + v21;
  v24 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  *(_OWORD *)(v18 + v20[6]) = *(_OWORD *)(v19 + v20[6]);
  *(_OWORD *)(v18 + v20[7]) = *(_OWORD *)(v19 + v20[7]);
  *(_BYTE *)(v18 + v20[8]) = *(_BYTE *)(v19 + v20[8]);
  *(_BYTE *)(v18 + v20[9]) = *(_BYTE *)(v19 + v20[9]);
  *(_BYTE *)(v18 + v20[10]) = *(_BYTE *)(v19 + v20[10]);
  v25 = a3[9];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  v29 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
  v30 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v30) = *(_OWORD *)(a2 + v30);
  v31 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  v35 = a3[16];
  v36 = (void *)(a1 + v35);
  v37 = (const void *)(a2 + v35);
  v38 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v37, 1, v38))
  {
    v39 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v36, 0, 1, v38);
  }
  v40 = a3[17];
  v41 = (void *)(a1 + v40);
  v42 = (const void *)(a2 + v40);
  v43 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v42, 1, v43))
  {
    v44 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v41, 0, 1, v43);
  }
  v45 = a3[18];
  v46 = a1 + v45;
  v47 = a2 + v45;
  v48 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v46, v47, v48);
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  return a1;
}

uint64_t sub_10013CB7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const void *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const void *v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  v16(a1 + a3[7], a2 + a3[7], v15);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v7(a1 + v17, a2 + v17, v6);
  v20 = (int *)type metadata accessor for ConditionViewModel(0);
  v21 = v20[5];
  v22 = v18 + v21;
  v23 = v19 + v21;
  v24 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
  v25 = v20[6];
  v26 = (_QWORD *)(v18 + v25);
  v27 = (uint64_t *)(v19 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  v31 = v20[7];
  v32 = (_QWORD *)(v18 + v31);
  v33 = (uint64_t *)(v19 + v31);
  v35 = *v33;
  v34 = v33[1];
  v36 = v32[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  *(_BYTE *)(v18 + v20[8]) = *(_BYTE *)(v19 + v20[8]);
  *(_BYTE *)(v18 + v20[9]) = *(_BYTE *)(v19 + v20[9]);
  *(_BYTE *)(v18 + v20[10]) = *(_BYTE *)(v19 + v20[10]);
  v37 = a3[9];
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 40))(v38, v39, v40);
  v41 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v42 = (_QWORD *)(a1 + v41);
  v43 = (uint64_t *)(a2 + v41);
  v45 = *v43;
  v44 = v43[1];
  v46 = v42[1];
  *v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease(v46);
  v47 = a3[12];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (uint64_t *)(a2 + v47);
  v51 = *v49;
  v50 = v49[1];
  v52 = v48[1];
  *v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease(v52);
  v53 = a3[13];
  v54 = (_QWORD *)(a1 + v53);
  v55 = (uint64_t *)(a2 + v53);
  v57 = *v55;
  v56 = v55[1];
  v58 = v54[1];
  *v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease(v58);
  v59 = a3[14];
  v60 = (_QWORD *)(a1 + v59);
  v61 = (uint64_t *)(a2 + v59);
  v63 = *v61;
  v62 = v61[1];
  v64 = v60[1];
  *v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease(v64);
  v65 = a3[15];
  v66 = a1 + v65;
  v67 = a2 + v65;
  v68 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 40))(v66, v67, v68);
  v69 = a3[16];
  v70 = (void *)(a1 + v69);
  v71 = (const void *)(a2 + v69);
  v72 = type metadata accessor for SunEvents(0);
  LODWORD(v22) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v70, 1, v72);
  v73 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v71, 1, v72);
  if ((_DWORD)v22)
  {
    if (!v73)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v70, v71, v72);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v70, 0, 1, v72);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v74 = *(_QWORD *)(v72 - 8);
  if (v73)
  {
    (*(void (**)(void *, uint64_t))(v74 + 8))(v70, v72);
LABEL_6:
    v75 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v74 + 40))(v70, v71, v72);
LABEL_7:
  v76 = a3[17];
  v77 = (void *)(a1 + v76);
  v78 = (const void *)(a2 + v76);
  v79 = type metadata accessor for MoonEvents(0);
  v80 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v77, 1, v79);
  v81 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v78, 1, v79);
  if (!v80)
  {
    v82 = *(_QWORD *)(v79 - 8);
    if (!v81)
    {
      (*(void (**)(void *, const void *, uint64_t))(v82 + 40))(v77, v78, v79);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v82 + 8))(v77, v79);
    goto LABEL_12;
  }
  if (v81)
  {
LABEL_12:
    v83 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v77, 0, 1, v79);
LABEL_13:
  v84 = a3[18];
  v85 = a1 + v84;
  v86 = a2 + v84;
  v87 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 40))(v85, v86, v87);
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  return a1;
}

uint64_t sub_10013CF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013CFA8);
}

uint64_t sub_10013CFA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  sub_100023394();
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
  }
  sub_10002338C();
  sub_10001C6C0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_29:
    v8 = v4 + v11;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
  }
  sub_100005D40(&qword_1001BF090);
  sub_10001C6C0();
  if (v12)
  {
    v7 = v13;
    v11 = a3[6];
    goto LABEL_29;
  }
  sub_1000A7274();
  sub_10001C6C0();
  if (v14)
  {
    v7 = v15;
    v11 = a3[8];
    goto LABEL_29;
  }
  sub_10013FE24();
  sub_10001C6C0();
  if (v16)
  {
    v7 = v17;
    v11 = a3[9];
    goto LABEL_29;
  }
  if ((_DWORD)v3 != 0x7FFFFFFF)
  {
    sub_10013FE1C();
    sub_10001C6C0();
    if (v9)
    {
      v7 = v20;
      v11 = a3[15];
    }
    else
    {
      sub_100005D40(&qword_1001BF0A8);
      sub_10001C6C0();
      if (v21)
      {
        v7 = v22;
        v11 = a3[16];
      }
      else
      {
        sub_100005D40(&qword_1001BF0B0);
        sub_10001C6C0();
        if (v23)
        {
          v7 = v24;
          v11 = a3[17];
        }
        else
        {
          v7 = sub_1000234CC();
          v11 = a3[18];
        }
      }
    }
    goto LABEL_29;
  }
  v18 = *(_QWORD *)(v4 + a3[12] + 8);
  if (v18 >= 0xFFFFFFFF)
    LODWORD(v18) = -1;
  return (v18 + 1);
}

uint64_t sub_10013D0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013D0FC);
}

void sub_10013D0FC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  sub_100023394();
  sub_10001C6D0();
  if (v11)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    sub_10002338C();
    sub_10001C6D0();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      sub_100005D40(&qword_1001BF090);
      sub_10001C6D0();
      if (v14)
      {
        v9 = v15;
        v13 = a4[6];
      }
      else
      {
        sub_1000A7274();
        sub_10001C6D0();
        if (v16)
        {
          v9 = v17;
          v13 = a4[8];
        }
        else
        {
          sub_10013FE24();
          sub_10001C6D0();
          if (v18)
          {
            v9 = v19;
            v13 = a4[9];
          }
          else
          {
            if (a3 == 0x7FFFFFFF)
            {
              *(_QWORD *)(v5 + a4[12] + 8) = (v4 - 1);
              return;
            }
            sub_10013FE1C();
            sub_10001C6D0();
            if (v11)
            {
              v9 = v20;
              v13 = a4[15];
            }
            else
            {
              sub_100005D40(&qword_1001BF0A8);
              sub_10001C6D0();
              if (v21)
              {
                v9 = v22;
                v13 = a4[16];
              }
              else
              {
                sub_100005D40(&qword_1001BF0B0);
                sub_10001C6D0();
                if (v23)
                {
                  v9 = v24;
                  v13 = a4[17];
                }
                else
                {
                  v9 = sub_1000234CC();
                  v13 = a4[18];
                }
              }
            }
          }
        }
      }
    }
    v10 = v5 + v13;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, v4, v4, v9);
}

uint64_t type metadata accessor for DailyForecastViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C62B8;
  if (!qword_1001C62B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DailyForecastViewModel);
  return result;
}

void sub_10013D278(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v20[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v20[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001EBBC(319, (unint64_t *)&qword_1001BF6D8, (uint64_t (*)(uint64_t))sub_10001EB28, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Measurement);
      if (v7 <= 0x3F)
      {
        v21 = *(_QWORD *)(v6 - 8) + 64;
        v22 = v21;
        v8 = type metadata accessor for ConditionViewModel(319);
        if (v9 <= 0x3F)
        {
          v23 = *(_QWORD *)(v8 - 8) + 64;
          v10 = type metadata accessor for Precipitation(319);
          if (v11 <= 0x3F)
          {
            v24 = *(_QWORD *)(v10 - 8) + 64;
            v25 = (char *)&value witness table for Builtin.Int64 + 64;
            v26 = &unk_100184E98;
            v27 = &unk_100184EB0;
            v28 = &unk_100184EB0;
            v29 = &unk_100184EB0;
            v12 = type metadata accessor for TemperatureScaleConfiguration(319);
            if (v13 <= 0x3F)
            {
              v30 = *(_QWORD *)(v12 - 8) + 64;
              sub_10001EBBC(319, &qword_1001C62C8, (uint64_t (*)(uint64_t))&type metadata accessor for SunEvents, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
              if (v15 <= 0x3F)
              {
                v31 = *(_QWORD *)(v14 - 8) + 64;
                sub_10001EBBC(319, (unint64_t *)&unk_1001C62D0, (uint64_t (*)(uint64_t))&type metadata accessor for MoonEvents, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
                if (v17 <= 0x3F)
                {
                  v32 = *(_QWORD *)(v16 - 8) + 64;
                  v18 = type metadata accessor for UVIndex(319);
                  if (v19 <= 0x3F)
                  {
                    v33 = *(_QWORD *)(v18 - 8) + 64;
                    v34 = (char *)&value witness table for Builtin.Int64 + 64;
                    swift_initStructMetadata(a1, 256, 16, v20, a1 + 16);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10013D430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t);
  unsigned int v97;
  uint64_t v98;
  uint64_t (*v99)(char *, uint64_t, uint64_t);
  int *v100;
  uint64_t v101;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  _QWORD v115[2];
  uint64_t v116;
  uint64_t v117;
  Swift::String v118;

  v108 = type metadata accessor for WeatherFormatPlaceholder(0);
  v106 = *(_QWORD *)(v108 - 8);
  sub_1000230F4();
  __chkstk_darwin(v1);
  sub_1000230E0();
  v104 = v2;
  sub_100005D40(&qword_1001C08A8);
  sub_1000230F4();
  __chkstk_darwin(v3);
  sub_1000230E0();
  v107 = v4;
  v5 = sub_100093378();
  v111 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(v5);
  v105 = *(_QWORD *)(v111 - 8);
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_1000230E0();
  v110 = v7;
  v109 = sub_100005D40(&qword_1001BF090);
  v113 = *(_QWORD *)(v109 - 8);
  sub_1000230F4();
  __chkstk_darwin(v8);
  v114 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100093378();
  v11 = (int *)type metadata accessor for DailyForecastViewModel(v10);
  v12 = (uint64_t *)(v0 + v11[13]);
  v13 = *v12;
  v14 = v12[1];
  sub_10013FE00();
  sub_10006F7B8();
  v16 = v15;
  v17 = *(_QWORD *)(v15 + 16);
  v18 = v17 + 1;
  if (v17 >= *(_QWORD *)(v15 + 24) >> 1)
  {
    sub_10013FD98();
    v16 = v85;
  }
  *(_QWORD *)(v16 + 16) = v18;
  v19 = v16 + 16 * v17;
  *(_QWORD *)(v19 + 32) = v13;
  *(_QWORD *)(v19 + 40) = v14;
  v20 = v0 + v11[8];
  v21 = sub_1000A7274();
  v22 = (uint64_t *)(v20 + *(int *)(v21 + 28));
  v23 = *v22;
  v24 = v22[1];
  v25 = v11;
  v26 = v11[11];
  v27 = v0;
  v28 = (uint64_t *)(v0 + v26);
  v29 = v28[1];
  if (v29 && *(_BYTE *)(v20 + *(int *)(v21 + 36)) == 1)
  {
    v30 = *v28;
    v116 = v23;
    v117 = v24;
    v115[0] = v30;
    v115[1] = v29;
    v31 = sub_10001692C();
    sub_10013FE00();
    swift_bridgeObjectRetain(v29);
    if (StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(v115, &type metadata for String, &type metadata for String, v31, v31))
    {
      v32 = *(_QWORD *)(v16 + 16);
      v33 = v32 + 1;
      if (v32 >= *(_QWORD *)(v16 + 24) >> 1)
      {
        sub_10013FD98();
        v16 = v89;
      }
      *(_QWORD *)(v16 + 16) = v33;
      v34 = v16 + 16 * v32;
      *(_QWORD *)(v34 + 32) = v23;
      *(_QWORD *)(v34 + 40) = v24;
    }
    else
    {
      swift_bridgeObjectRelease(v24);
      v33 = *(_QWORD *)(v16 + 16);
    }
    if (v33 >= *(_QWORD *)(v16 + 24) >> 1)
    {
      sub_10006F7B8();
      v16 = v88;
    }
    *(_QWORD *)(v16 + 16) = v33 + 1;
    v39 = v16 + 16 * v33;
    *(_QWORD *)(v39 + 32) = v30;
    v38 = v39 + 32;
    v24 = v29;
  }
  else
  {
    v35 = v16;
    v36 = *(_QWORD *)(v16 + 24);
    sub_10013FE00();
    if (v18 >= v36 >> 1)
    {
      sub_10006F7B8();
      v16 = v87;
    }
    else
    {
      v16 = v35;
    }
    *(_QWORD *)(v16 + 16) = v17 + 2;
    v37 = v16 + 16 * v18;
    *(_QWORD *)(v37 + 32) = v23;
    v38 = v37 + 32;
  }
  v112 = v16;
  *(_QWORD *)(v38 + 8) = v24;
  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v40 = (id)qword_1001DA1E8;
  v118._countAndFlagsBits = 0xD00000000000004FLL;
  v118._object = (void *)0x800000010018A280;
  v41._object = (void *)0x800000010018A260;
  v41._countAndFlagsBits = 0xD000000000000015;
  v42._countAndFlagsBits = 0;
  v42._object = (void *)0xE000000000000000;
  v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, (Swift::String_optional)0, (NSBundle)v40, v42, v118);
  object = v43._object;
  countAndFlagsBits = v43._countAndFlagsBits;

  v44 = sub_100005D40(&qword_1001C1848);
  v45 = swift_allocObject(v44, 112, 7);
  *(_OWORD *)(v45 + 16) = xmmword_10017BD00;
  v100 = v25;
  v101 = v27;
  v46 = v27 + v25[6];
  v99 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v113 + 16);
  v47 = v109;
  v48 = v99(v114, v46, v109);
  v49 = static Set<>.value.getter(v48);
  v98 = type metadata accessor for Locale(0);
  v50 = v107;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v107, 1, 1, v98);
  v51 = v110;
  static WeatherFormatStyle<>.weather(_:locale:)(v49, v50);
  swift_bridgeObjectRelease(v49);
  sub_100016904(v50, &qword_1001C08A8);
  v97 = enum case for WeatherFormatPlaceholder.none(_:);
  v52 = v106;
  v96 = *(void (**)(uint64_t))(v106 + 104);
  v53 = v104;
  v54 = v108;
  v96(v104);
  v95 = type metadata accessor for UnitManager(0);
  v55 = static UnitManager.standard.getter(v95);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v94 = v56;
  v57 = v111;
  v58 = v114;
  v92 = Measurement.formatted<A>(_:placeholder:unitManager:)(v51, v53, v55, &protocol witness table for UnitManager, v47, v111);
  v91 = v59;
  swift_release(v55);
  v106 = *(_QWORD *)(v52 + 8);
  v60 = v54;
  ((void (*)(uint64_t, uint64_t))v106)(v53, v54);
  v105 = *(_QWORD *)(v105 + 8);
  v61 = sub_1000935C8();
  v62(v61);
  v113 = *(_QWORD *)(v113 + 8);
  v63 = v58;
  ((void (*)(char *, uint64_t))v113)(v58, v47);
  *(_QWORD *)(v45 + 56) = &type metadata for String;
  v93 = sub_1000881BC();
  *(_QWORD *)(v45 + 64) = v93;
  v64 = v91;
  *(_QWORD *)(v45 + 32) = v92;
  *(_QWORD *)(v45 + 40) = v64;
  v65 = v99(v58, v101 + v100[7], v47);
  v66 = static Set<>.value.getter(v65);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v50, 1, 1, v98);
  static WeatherFormatStyle<>.weather(_:locale:)(v66, v50);
  swift_bridgeObjectRelease(v66);
  sub_100016904(v50, &qword_1001C08A8);
  v67 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v96)(v53, v97, v60);
  v68 = static UnitManager.standard.getter(v67);
  v69 = Measurement.formatted<A>(_:placeholder:unitManager:)(v51, v53, v68, &protocol witness table for UnitManager, v47, v57);
  v71 = v70;
  swift_release(v68);
  ((void (*)(uint64_t, uint64_t))v106)(v53, v60);
  v72 = sub_1000935C8();
  ((void (*)(uint64_t))v105)(v72);
  ((void (*)(char *, uint64_t))v113)(v63, v47);
  v73 = v93;
  *(_QWORD *)(v45 + 96) = &type metadata for String;
  *(_QWORD *)(v45 + 104) = v73;
  *(_QWORD *)(v45 + 72) = v69;
  *(_QWORD *)(v45 + 80) = v71;
  v74 = object;
  v75 = String.init(format:_:)(countAndFlagsBits, object, v45);
  v77 = v76;
  swift_bridgeObjectRelease(v74);
  v78 = v112;
  v79 = *(_QWORD *)(v112 + 16);
  if (v79 >= *(_QWORD *)(v112 + 24) >> 1)
  {
    sub_10006F7B8();
    v78 = v86;
  }
  *(_QWORD *)(v78 + 16) = v79 + 1;
  v80 = v78 + 16 * v79;
  *(_QWORD *)(v80 + 32) = v75;
  *(_QWORD *)(v80 + 40) = v77;
  v116 = v78;
  v81 = sub_100005D40(&qword_1001C01A8);
  sub_100016A54(&qword_1001C01B0, &qword_1001C01A8);
  v83 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v81, v82);
  swift_bridgeObjectRelease(v78);
  return v83;
}

uint64_t sub_10013DB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t result;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  int *v80;
  void (*v81)(_BYTE *, uint64_t);
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  void (*v93)(uint64_t);
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[4];
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;

  v4 = type metadata accessor for MoonEvents(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1000230E0();
  v103 = v6;
  v7 = sub_100005D40(&qword_1001C6380);
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_10002325C();
  v11 = v10 - v9;
  sub_100005D40(&qword_1001BF0B0);
  sub_1000230F4();
  __chkstk_darwin(v12);
  sub_100023150();
  v104 = v13;
  v15 = __chkstk_darwin(v14);
  v106 = &v96[-v16];
  __chkstk_darwin(v15);
  v107 = &v96[-v17];
  v18 = sub_100093378();
  v19 = type metadata accessor for SunEvents(v18);
  v108 = *(_QWORD *)(v19 - 8);
  v109 = v19;
  sub_1000230F4();
  __chkstk_darwin(v20);
  v105 = &v96[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = sub_100005D40(&qword_1001C6388);
  sub_1000230F4();
  __chkstk_darwin(v23);
  sub_1000230E0();
  v110 = (int *)v24;
  sub_100005D40(&qword_1001BF0A8);
  sub_1000230F4();
  v26 = __chkstk_darwin(v25);
  v28 = &v96[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = __chkstk_darwin(v26);
  v31 = &v96[-v30];
  __chkstk_darwin(v29);
  v33 = &v96[-v32];
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v102 = v7;
  v34 = (int *)type metadata accessor for DailyForecastViewModel(0);
  if ((static Date.== infix(_:_:)(a1 + v34[5], a2 + v34[5]) & 1) == 0)
    return 0;
  v99 = v5;
  v100 = v4;
  v101 = v11;
  v35 = v34[6];
  v36 = a1;
  v37 = a1 + v35;
  v38 = a2;
  v39 = a2 + v35;
  sub_10001EB28();
  if ((sub_10013FDC8(v37, v39) & 1) == 0)
    return 0;
  if ((sub_10013FDC8(v36 + v34[7], v38 + v34[7]) & 1) == 0)
    return 0;
  v40 = v38;
  v41 = v36;
  static ConditionViewModel.__derived_struct_equals(_:_:)(v36 + v34[8], v38 + v34[8]);
  if ((v42 & 1) == 0)
    return 0;
  v43 = v34;
  if ((sub_1000B788C(v41 + v34[9], v38 + v34[9]) & 1) == 0 || *(double *)(v41 + v34[10]) != *(double *)(v38 + v34[10]))
    return 0;
  v44 = v34[11];
  v45 = (uint64_t *)(v41 + v44);
  v46 = *(_QWORD *)(v41 + v44 + 8);
  v47 = (uint64_t *)(v38 + v44);
  v48 = v47[1];
  if (!v46)
  {
    v49 = v102;
    if (v48)
      return 0;
    goto LABEL_17;
  }
  v49 = v102;
  if (!v48)
    return 0;
  v50 = *v45 == *v47 && v46 == v48;
  if (v50 || (sub_1000232C8(*v45, v46, *v47, v48), result = sub_100049CBC(), (v52 & 1) != 0))
  {
LABEL_17:
    v53 = sub_10013FD2C(v43[12]);
    if (!v50 || v54 != v56)
    {
      sub_1000232C8(v53, v54, v55, v56);
      result = sub_100049CBC();
      if ((v58 & 1) == 0)
        return result;
    }
    v59 = sub_10013FD2C(v43[13]);
    if (!v50 || v60 != v62)
    {
      sub_1000232C8(v59, v60, v61, v62);
      result = sub_100049CBC();
      if ((v64 & 1) == 0)
        return result;
    }
    v65 = sub_10013FD2C(v43[14]);
    if (!v50 || v66 != v68)
    {
      sub_1000232C8(v65, v66, v67, v68);
      result = sub_100049CBC();
      if ((v70 & 1) == 0)
        return result;
    }
    if ((static TemperatureScaleConfiguration.== infix(_:_:)(v41 + v43[15], v38 + v43[15]) & 1) == 0)
      return 0;
    v71 = v43[16];
    v98 = v41;
    sub_100083190(v41 + v71, (uint64_t)v33);
    sub_100083190(v38 + v43[16], (uint64_t)v31);
    v72 = (uint64_t)v110;
    v73 = (uint64_t)v110 + *(int *)(v22 + 48);
    sub_100083190((uint64_t)v33, (uint64_t)v110);
    sub_100083190((uint64_t)v31, v73);
    v74 = v109;
    sub_10002879C(v72, 1, v109);
    if (v50)
    {
      sub_1000231E4((uint64_t)v31);
      sub_1000231E4((uint64_t)v33);
      sub_10002879C(v73, 1, v74);
      if (v50)
      {
        sub_100016904((uint64_t)v110, &qword_1001BF0A8);
LABEL_43:
        v82 = v107;
        sub_100083190(v98 + v43[17], (uint64_t)v107);
        v83 = v106;
        sub_100083190(v40 + v43[17], (uint64_t)v106);
        v84 = v101;
        v85 = v101 + *(int *)(v49 + 48);
        sub_100083190((uint64_t)v82, v101);
        sub_100083190((uint64_t)v83, v85);
        v86 = v100;
        sub_10002879C(v84, 1, v100);
        if (v50)
        {
          sub_1000231E4((uint64_t)v83);
          sub_1000231E4((uint64_t)v82);
          sub_10002879C(v85, 1, v86);
          if (v50)
          {
            sub_100016904(v101, &qword_1001BF0B0);
            goto LABEL_56;
          }
        }
        else
        {
          v110 = v43;
          v87 = v40;
          v88 = v104;
          sub_1000168D8(v84, v104, &qword_1001BF0B0);
          sub_10002879C(v85, 1, v86);
          if (!v89)
          {
            v90 = v99;
            v91 = v103;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 32))(v103, v85, v86);
            sub_100016878(&qword_1001C6390, (uint64_t (*)(uint64_t))&type metadata accessor for MoonEvents);
            v92 = dispatch thunk of static Equatable.== infix(_:_:)(v88, v91, v86);
            v93 = *(void (**)(uint64_t))(v90 + 8);
            v94 = sub_1000935C8();
            v93(v94);
            sub_10002310C((uint64_t)v83);
            sub_10002310C((uint64_t)v82);
            ((void (*)(uint64_t, uint64_t))v93)(v88, v86);
            sub_10002310C(v101);
            v40 = v87;
            v43 = v110;
            if ((v92 & 1) != 0)
            {
LABEL_56:
              v95 = v98;
              if ((static UVIndex.== infix(_:_:)(v98 + v43[18], v40 + v43[18]) & 1) != 0)
                return *(double *)(v95 + v43[19]) == *(double *)(v40 + v43[19]);
            }
            return 0;
          }
          sub_1000231E4((uint64_t)v83);
          sub_1000231E4((uint64_t)v82);
          (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v88, v86);
        }
        v76 = &qword_1001C6380;
        v77 = v101;
LABEL_52:
        sub_100016904(v77, v76);
        return 0;
      }
    }
    else
    {
      sub_1000168D8(v72, (uint64_t)v28, &qword_1001BF0A8);
      sub_10002879C(v73, 1, v74);
      if (!v75)
      {
        v78 = v108;
        v79 = v105;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v108 + 32))(v105, v73, v74);
        sub_100016878(&qword_1001C6398, (uint64_t (*)(uint64_t))&type metadata accessor for SunEvents);
        v97 = dispatch thunk of static Equatable.== infix(_:_:)(v28, v79, v74);
        v80 = v43;
        v81 = *(void (**)(_BYTE *, uint64_t))(v78 + 8);
        v81(v79, v74);
        sub_100016904((uint64_t)v31, &qword_1001BF0A8);
        sub_100016904((uint64_t)v33, &qword_1001BF0A8);
        v81(v28, v74);
        v43 = v80;
        v49 = v102;
        sub_100016904((uint64_t)v110, &qword_1001BF0A8);
        if ((v97 & 1) == 0)
          return 0;
        goto LABEL_43;
      }
      sub_1000231E4((uint64_t)v31);
      sub_1000231E4((uint64_t)v33);
      (*(void (**)(_BYTE *, uint64_t))(v108 + 8))(v28, v74);
    }
    v76 = &qword_1001C6388;
    v77 = (uint64_t)v110;
    goto LABEL_52;
  }
  return result;
}

uint64_t sub_10013E20C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v28;
  unint64_t v30;
  char v32;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 1751607656 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1751607656, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 7827308 && a2 == 0xE300000000000000)
  {
    v12 = 0xE300000000000000;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7827308, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x6F697469646E6F63 && a2 == 0xE90000000000006ELL)
  {
    v14 = 0xE90000000000006ELL;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4;
  }
  if (a1 == 0x7469706963657270 && a2 == 0xED00006E6F697461)
  {
    v16 = 0xED00006E6F697461;
    goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7469706963657270, 0xED00006E6F697461, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v16);
    return 5;
  }
  if (a1 == 0xD000000000000013)
  {
    v17 = 0x8000000100187B30;
    if (a2 == 0x8000000100187B30)
      goto LABEL_53;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100187B30, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_53:
    swift_bridgeObjectRelease(v17);
    return 6;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x800000010018A220)
  {
    v18 = 0x800000010018A220;
LABEL_59:
    swift_bridgeObjectRelease(v18);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000010018A220, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_59;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100186180)
  {
    v19 = 0x8000000100186180;
LABEL_65:
    swift_bridgeObjectRelease(v19);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100186180, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_65;
  }
  if (a1 == 0x6E69727453796164 && a2 == 0xE900000000000067)
  {
    v21 = 0xE900000000000067;
    goto LABEL_73;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69727453796164, 0xE900000000000067, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
LABEL_73:
    swift_bridgeObjectRelease(v21);
    return 9;
  }
  if (a1 == 0x79614474726F6873 && a2 == 0xEE00676E69727453)
  {
    v23 = 0xEE00676E69727453;
    goto LABEL_81;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79614474726F6873, 0xEE00676E69727453, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
LABEL_81:
    swift_bridgeObjectRelease(v23);
    return 10;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x800000010018A240)
  {
    v24 = 0x800000010018A240;
LABEL_87:
    swift_bridgeObjectRelease(v24);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000010018A240, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
    goto LABEL_87;
  }
  if (a1 == 0x746E6576456E7573 && a2 == 0xE900000000000073)
  {
    v26 = 0xE900000000000073;
    goto LABEL_95;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E6576456E7573, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
LABEL_95:
    swift_bridgeObjectRelease(v26);
    return 12;
  }
  if (a1 == 0x6E6576456E6F6F6DLL && a2 == 0xEA00000000007374)
  {
    v28 = 0xEA00000000007374;
    goto LABEL_103;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6576456E6F6F6DLL, 0xEA00000000007374, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
LABEL_103:
    swift_bridgeObjectRelease(v28);
    return 13;
  }
  if (a1 == 0x7865646E497675 && a2 == 0xE700000000000000)
  {
    v30 = 0xE700000000000000;
    goto LABEL_111;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E497675, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v30 = a2;
LABEL_111:
    swift_bridgeObjectRelease(v30);
    return 14;
  }
  if (a1 == 0x79746964696D7568 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 15;
  }
  else
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(0x79746964696D7568, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v32 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

uint64_t sub_10013E84C()
{
  return 16;
}

uint64_t sub_10013E854(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10013E87C + 4 * byte_100184E60[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_10013E87C()
{
  return 1702125924;
}

uint64_t sub_10013E88C()
{
  return 1751607656;
}

uint64_t sub_10013E89C()
{
  return 7827308;
}

uint64_t sub_10013E8AC()
{
  return 0x6F697469646E6F63;
}

uint64_t sub_10013E8CC()
{
  return 0x7469706963657270;
}

unint64_t sub_10013E8F0()
{
  return 0xD000000000000013;
}

unint64_t sub_10013E90C()
{
  return 0xD000000000000018;
}

uint64_t sub_10013E99C()
{
  return 0x746E6576456E7573;
}

uint64_t sub_10013E9BC()
{
  return 0x6E6576456E6F6F6DLL;
}

uint64_t sub_10013E9D8()
{
  return 0x7865646E497675;
}

uint64_t sub_10013E9F0()
{
  return 0x79746964696D7568;
}

uint64_t sub_10013EA08(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v35;

  v3 = sub_100005D40(&qword_1001C6338);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10002325C();
  v7 = v6 - v5;
  v8 = a1[3];
  v9 = a1[4];
  sub_100022330(a1, v8);
  v10 = sub_10013FA08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DailyForecastViewModel.CodingKeys, &type metadata for DailyForecastViewModel.CodingKeys, v10, v8, v9);
  v35 = 0;
  type metadata accessor for UUID(0);
  sub_100016878(&qword_1001BF778, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  sub_100023100();
  if (!v1)
  {
    v11 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v12 = sub_10013FD5C(1);
    type metadata accessor for Date(v12);
    sub_100016878(&qword_1001BF780, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    sub_10013FC9C(v13);
    v35 = 2;
    sub_100005D40(&qword_1001BF090);
    sub_100016A54(&qword_1001BF788, &qword_1001BF090);
    sub_100023100();
    v35 = 3;
    sub_100023100();
    v14 = sub_10013FD5C(4);
    type metadata accessor for ConditionViewModel(v14);
    sub_100016878(&qword_1001BF790, type metadata accessor for ConditionViewModel);
    sub_10013FC9C(v15);
    v16 = sub_10013FD5C(5);
    type metadata accessor for Precipitation(v16);
    sub_100016878(&qword_1001C2AD8, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation);
    sub_10013FC9C(v17);
    sub_10013FD68(6);
    v18 = sub_10013FE48(v11[11]);
    v35 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v35, v3);
    v20 = sub_10013FE48(v11[12]);
    sub_10013FCF4(v20, v21, 8);
    v22 = sub_10013FE48(v11[13]);
    sub_10013FCF4(v22, v23, 9);
    v24 = sub_10013FE48(v11[14]);
    sub_10013FCF4(v24, v25, 10);
    v26 = sub_10013FD5C(11);
    type metadata accessor for TemperatureScaleConfiguration(v26);
    sub_100016878(&qword_1001C6348, (uint64_t (*)(uint64_t))&type metadata accessor for TemperatureScaleConfiguration);
    sub_10013FC9C(v27);
    v28 = sub_10013FD5C(12);
    type metadata accessor for SunEvents(v28);
    sub_100016878(&qword_1001C6350, (uint64_t (*)(uint64_t))&type metadata accessor for SunEvents);
    sub_10013FD0C(v29);
    v30 = sub_10013FD5C(13);
    type metadata accessor for MoonEvents(v30);
    sub_100016878(&qword_1001C6358, (uint64_t (*)(uint64_t))&type metadata accessor for MoonEvents);
    sub_10013FD0C(v31);
    v32 = sub_10013FD5C(14);
    type metadata accessor for UVIndex(v32);
    sub_100016878(&qword_1001BF7A0, (uint64_t (*)(uint64_t))&type metadata accessor for UVIndex);
    sub_10013FC9C(v33);
    sub_10013FD68(15);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

void sub_10013EE14(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[2];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  _BYTE v130[9];

  v104 = a2;
  v3 = type metadata accessor for UVIndex(0);
  v110 = *(_QWORD *)(v3 - 8);
  v111 = v3;
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_1000230E0();
  v105 = v5;
  sub_100005D40(&qword_1001BF0B0);
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_1000230E0();
  v106 = v7;
  sub_100005D40(&qword_1001BF0A8);
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_1000230E0();
  v107 = v9;
  v10 = sub_100093378();
  v11 = type metadata accessor for TemperatureScaleConfiguration(v10);
  v112 = *(_QWORD *)(v11 - 8);
  v113 = v11;
  sub_1000230F4();
  __chkstk_darwin(v12);
  sub_1000230E0();
  v108 = v13;
  v14 = sub_100093378();
  v15 = type metadata accessor for Precipitation(v14);
  v114 = *(_QWORD *)(v15 - 8);
  v115 = v15;
  sub_1000230F4();
  __chkstk_darwin(v16);
  sub_1000230E0();
  v109 = v17;
  v18 = sub_100093378();
  v123 = type metadata accessor for ConditionViewModel(v18);
  sub_1000230F4();
  __chkstk_darwin(v19);
  sub_1000230E0();
  v121 = v20;
  v21 = sub_100005D40(&qword_1001BF090);
  v119 = *(_QWORD *)(v21 - 8);
  v120 = v21;
  sub_1000230F4();
  __chkstk_darwin(v22);
  sub_100023150();
  v126 = v23;
  __chkstk_darwin(v24);
  v26 = (char *)v103 - v25;
  v27 = type metadata accessor for Date(0);
  v116 = *(_QWORD *)(v27 - 8);
  v117 = v27;
  sub_1000230F4();
  __chkstk_darwin(v28);
  sub_10002325C();
  v31 = v30 - v29;
  v32 = type metadata accessor for UUID(0);
  v118 = *(_QWORD *)(v32 - 8);
  sub_1000230F4();
  __chkstk_darwin(v33);
  sub_10002325C();
  v36 = v35 - v34;
  v124 = sub_100005D40(&qword_1001C6360);
  v37 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  sub_10002325C();
  v40 = v39 - v38;
  v129 = (int *)type metadata accessor for DailyForecastViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v41);
  sub_1000230E0();
  v128 = v42;
  v43 = a1[3];
  v44 = a1[4];
  v122 = a1;
  sub_100022330(a1, v43);
  v45 = sub_10013FA08();
  v125 = v40;
  v46 = v127;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DailyForecastViewModel.CodingKeys, &type metadata for DailyForecastViewModel.CodingKeys, v45, v43, v44);
  if (!v46)
  {
    v47 = v126;
    v103[1] = v37;
    v130[0] = 0;
    sub_100016878(&qword_1001BF7C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    sub_10013FD50();
    v48 = v124;
    sub_10013FE40(v32, v49, v124, v32);
    v50 = v32;
    v53 = v128;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v118 + 32))(v128, v36, v50);
    v130[0] = 1;
    sub_100016878(&qword_1001BF7C8, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    sub_10013FD50();
    v54 = v117;
    sub_10013FE40(v117, v55, v48, v117);
    v103[0] = v50;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 32))(v53 + v129[5], v31, v54);
    v130[0] = 2;
    sub_100016A54(&qword_1001BF7D0, &qword_1001BF090);
    v56 = v26;
    v57 = v120;
    v58 = sub_10013FE08();
    sub_10013FE40(v58, v59, v60, v61);
    v62 = v53 + v129[6];
    v63 = *(void (**)(uint64_t, char *, uint64_t))(v119 + 32);
    v63(v62, v56, v57);
    v130[0] = 3;
    v64 = sub_10013FE08();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v64, v65, v66, v67);
    v68 = v129;
    v63(v128 + v129[7], v47, v57);
    v130[0] = 4;
    sub_100016878(&qword_1001BF7D8, type metadata accessor for ConditionViewModel);
    sub_10013FD50();
    v69 = v121;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v123, v70, v48, v123);
    v71 = v128;
    sub_1000223EC(v69, v128 + v68[8]);
    v130[0] = 5;
    sub_100016878(&qword_1001C2AE8, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation);
    sub_10013FD50();
    v72 = v109;
    v73 = v115;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v115, v74, v48, v115);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 32))(v71 + v68[9], v72, v73);
    v130[0] = 6;
    KeyedDecodingContainer.decode(_:forKey:)(v130, v48);
    *(_QWORD *)(v71 + v68[10]) = v75;
    v130[0] = 7;
    v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v130, v48);
    sub_10013FE54(v76, v77, v68[11]);
    v78 = sub_10013FDF0(8);
    sub_10013FE54(v78, v79, v129[12]);
    v80 = sub_10013FDF0(9);
    v127 = 0;
    sub_10013FE54(v80, v81, v129[13]);
    v82 = sub_10013FE2C(10);
    v84 = KeyedDecodingContainer.decode(_:forKey:)(v82, v83);
    v127 = 0;
    sub_10013FE54(v84, v85, v129[14]);
    v130[0] = 11;
    sub_100016878(&qword_1001C6368, (uint64_t (*)(uint64_t))&type metadata accessor for TemperatureScaleConfiguration);
    sub_10013FD50();
    sub_10013FDE0(v113, v86);
    v127 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 32))(v128 + v129[15], v108, v113);
    type metadata accessor for SunEvents(0);
    v130[0] = 12;
    sub_100016878(&qword_1001C6370, (uint64_t (*)(uint64_t))&type metadata accessor for SunEvents);
    sub_10013FD50();
    sub_10013FD80(v87, v88, v89, v90, v91);
    LODWORD(v126) = 1;
    v127 = 0;
    sub_1000168AC(v107, v128 + v129[16], &qword_1001BF0A8);
    type metadata accessor for MoonEvents(0);
    v130[0] = 13;
    sub_100016878(&qword_1001C6378, (uint64_t (*)(uint64_t))&type metadata accessor for MoonEvents);
    sub_10013FD50();
    sub_10013FD80(v92, v93, v94, v95, v96);
    v127 = 0;
    sub_1000168AC(v106, v128 + v129[17], &qword_1001BF0B0);
    v130[0] = 14;
    sub_100016878(&qword_1001BF7E8, (uint64_t (*)(uint64_t))&type metadata accessor for UVIndex);
    sub_10013FD50();
    sub_10013FDE0(v111, v97);
    v127 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 32))(v128 + v129[18], v105, v111);
    v98 = sub_10013FE2C(15);
    KeyedDecodingContainer.decode(_:forKey:)(v98, v99);
    v127 = 0;
    v101 = v100;
    sub_10013FCBC();
    v102 = v128;
    *(_QWORD *)(v128 + v129[19]) = v101;
    sub_10013FA44(v102, v104);
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v122);
    sub_100011894(v102, type metadata accessor for DailyForecastViewModel);
    return;
  }
  v127 = v46;
  LODWORD(v124) = 0;
  v51 = v128;
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v122);
  LODWORD(v121) = 0;
  LODWORD(v125) = 0;
  LODWORD(v123) = 0;
  LODWORD(v126) = 0;
  LODWORD(v122) = 0;
  v52 = v129;
  if ((_DWORD)v124 && (sub_10013FD44(v129[14]), (v122 & 1) != 0))
  {
    sub_10013FDD8(v112);
    if ((v126 & 1) != 0)
    {
LABEL_7:
      sub_100016904(v51 + v52[16], &qword_1001BF0A8);
      if ((v123 & 1) == 0)
        goto LABEL_8;
LABEL_13:
      sub_100016904(v51 + v52[17], &qword_1001BF0B0);
      if ((v125 & 1) == 0)
        return;
      goto LABEL_14;
    }
  }
  else if ((_DWORD)v126)
  {
    goto LABEL_7;
  }
  if ((_DWORD)v123)
    goto LABEL_13;
LABEL_8:
  if ((_DWORD)v125)
LABEL_14:
    sub_10013FDD8(v110);
}

uint64_t sub_10013F93C()
{
  unsigned __int8 *v0;

  return sub_10013E854(*v0);
}

uint64_t sub_10013F944@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10013E20C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10013F968@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10013E84C();
  *a1 = result;
  return result;
}

uint64_t sub_10013F98C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10013FA08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013F9B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10013FA08();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10013F9E0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10013EE14(a1, a2);
}

uint64_t sub_10013F9F4(_QWORD *a1)
{
  return sub_10013EA08(a1);
}

unint64_t sub_10013FA08()
{
  unint64_t result;

  result = qword_1001C6340;
  if (!qword_1001C6340)
  {
    result = swift_getWitnessTable(&unk_10018503C, &type metadata for DailyForecastViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C6340);
  }
  return result;
}

uint64_t sub_10013FA44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DailyForecastViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for DailyForecastViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF1)
  {
    if (a2 + 15 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 15) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 16;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v5 = v6 - 16;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DailyForecastViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_10013FB5C + 4 * byte_100184E75[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_10013FB90 + 4 * byte_100184E70[v4]))();
}

uint64_t sub_10013FB90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013FB98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013FBA0);
  return result;
}

uint64_t sub_10013FBAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013FBB4);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_10013FBB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013FBC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DailyForecastViewModel.CodingKeys()
{
  return &type metadata for DailyForecastViewModel.CodingKeys;
}

unint64_t sub_10013FBE0()
{
  unint64_t result;

  result = qword_1001C63A0;
  if (!qword_1001C63A0)
  {
    result = swift_getWitnessTable(&unk_100185014, &type metadata for DailyForecastViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C63A0);
  }
  return result;
}

unint64_t sub_10013FC20()
{
  unint64_t result;

  result = qword_1001C63A8;
  if (!qword_1001C63A8)
  {
    result = swift_getWitnessTable(&unk_100184F84, &type metadata for DailyForecastViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C63A8);
  }
  return result;
}

unint64_t sub_10013FC60()
{
  unint64_t result;

  result = qword_1001C63B0;
  if (!qword_1001C63B0)
  {
    result = swift_getWitnessTable(&unk_100184FAC, &type metadata for DailyForecastViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C63B0);
  }
  return result;
}

uint64_t sub_10013FC9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v4 - 65, v1, v3, a1);
}

uint64_t sub_10013FCBC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 312) + 8))(*(_QWORD *)(v0 - 136), *(_QWORD *)(v0 - 144));
}

uint64_t sub_10013FCD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 312) + 8))(v0, v1);
}

uint64_t sub_10013FCE8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10013FCF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 65) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 65, v3);
}

uint64_t sub_10013FD0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v2, v4 - 65, v1, v3, a1);
}

uint64_t sub_10013FD2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_10013FD44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_10013FD5C@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 65) = a1;
  return 0;
}

uint64_t sub_10013FD68@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 65) = a1;
  return KeyedEncodingContainer.encode(_:forKey:)(v2 - 65, v1);
}

uint64_t sub_10013FD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v5, a2, *(_QWORD *)(v6 - 144), v5, a5);
}

void sub_10013FD98()
{
  sub_10006F7B8();
}

uint64_t sub_10013FDB0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 312) + 8))(*(_QWORD *)(v1 - 136), v0);
}

uint64_t sub_10013FDC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return static Measurement.== infix<A, B>(_:_:)(a1, a2, v2, v2, v2);
}

uint64_t sub_10013FDD8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_10013FDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, *(_QWORD *)(v2 - 144), a1);
}

uint64_t sub_10013FDF0@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 89) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 89, v1);
}

uint64_t sub_10013FE00()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10013FE08()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10013FE1C()
{
  return type metadata accessor for TemperatureScaleConfiguration(0);
}

uint64_t sub_10013FE24()
{
  return type metadata accessor for Precipitation(0);
}

uint64_t sub_10013FE2C@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 89) = a1;
  return v1 - 89;
}

uint64_t sub_10013FE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_10013FE48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_10013FE54@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + a3);
  *v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t sub_10013FE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013FE84);
}

uint64_t sub_10013FE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013FE94);
}

uint64_t type metadata accessor for DegreesConditionView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C6410, (uint64_t)&nominal type descriptor for DegreesConditionView);
}

uint64_t sub_10013FEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013FED4);
}

uint64_t sub_10013FED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  sub_100016B00();
  v3 = sub_1001579E8();
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v3, a2, v4);
}

uint64_t sub_10013FF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001565EC);
}

uint64_t type metadata accessor for LocationIconView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C64A0, (uint64_t)&nominal type descriptor for LocationIconView);
}

uint64_t sub_10013FF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001565F4);
}

uint64_t sub_10013FF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001565E8);
}

uint64_t type metadata accessor for CurrentObservationView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C6530, (uint64_t)&nominal type descriptor for CurrentObservationView);
}

uint64_t sub_10013FF50(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A147C, 1);
}

void sub_10013FF60(void (**a1)(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = type metadata accessor for CurrentObservationView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  sub_1001449F4(v1, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CurrentObservationView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1001BB320, v7 + v5, v6 | 7);
  sub_100144A64((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for CurrentObservationView);
  *a1 = sub_1001449A8;
  a1[1] = (void (*)(uint64_t@<X8>))v8;
}

void sub_10014001C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v3 = sub_100005D40(&qword_1001C6568);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005D40(&qword_1001C6570);
  v7 = __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v9 = static Alignment.center.getter(v7);
  v9[1] = v10;
  v11 = sub_100005D40(&qword_1001C6578);
  v12 = (uint64_t)v9 + *(int *)(v11 + 44);
  *(_QWORD *)v5 = static HorizontalAlignment.leading.getter(v11);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  v13 = sub_100005D40(&qword_1001C6580);
  sub_100140214(a1, (uint64_t)&v5[*(int *)(v13 + 44)]);
  v14 = v12 + *(int *)(sub_100005D40(&qword_1001C6588) + 36);
  sub_1001449F4(a1, v14, type metadata accessor for CurrentObservationViewModel);
  v15 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v16 = a1 + v15[5];
  v17 = (int *)type metadata accessor for CurrentObservationAccessibilityModifier(0);
  sub_1001449F4(v16, v14 + v17[5], type metadata accessor for DailyForecastViewModel);
  v18 = a1 + v15[7];
  v19 = v14 + v17[6];
  v20 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, v18, v20);
  v21 = (uint64_t *)(a1 + v15[8]);
  v22 = *v21;
  v23 = v21[1];
  v24 = (_QWORD *)(v14 + v17[7]);
  *v24 = v22;
  v24[1] = v23;
  sub_100156004((uint64_t)v5, v12, &qword_1001C6568);
  swift_bridgeObjectRetain(v23);
  sub_100016904((uint64_t)v5, &qword_1001C6568);
  sub_100156004((uint64_t)v9, v26, &qword_1001C6570);
  sub_100016904((uint64_t)v9, &qword_1001C6570);
}

void sub_100140214(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t *v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ConditionDescriptionView(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v29 - v11;
  v13 = type metadata accessor for LocationDegreesView(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v29 - v17;
  sub_1001449F4(a1, (uint64_t)&v29 - v17, type metadata accessor for CurrentObservationViewAttributes);
  sub_1001449F4(a1, (uint64_t)v6, type metadata accessor for CurrentObservationViewAttributes);
  v20 = GeometryProxy.size.getter(v19);
  v22 = v21;
  KeyPath = swift_getKeyPath(&unk_1001851E8);
  v24 = (uint64_t *)&v12[*(int *)(v7 + 24)];
  *v24 = KeyPath;
  v25 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  sub_100144A64((uint64_t)v6, (uint64_t)v12, type metadata accessor for CurrentObservationViewAttributes);
  v26 = (double *)&v12[*(int *)(v7 + 20)];
  *v26 = v20;
  *((_QWORD *)v26 + 1) = v22;
  sub_1001449F4((uint64_t)v18, (uint64_t)v16, type metadata accessor for LocationDegreesView);
  sub_1001449F4((uint64_t)v12, (uint64_t)v10, type metadata accessor for ConditionDescriptionView);
  sub_1001449F4((uint64_t)v16, a2, type metadata accessor for LocationDegreesView);
  v27 = sub_100005D40(&qword_1001C6590);
  v28 = a2 + *(int *)(v27 + 48);
  *(_QWORD *)v28 = 0x3FF0000000000000;
  *(_BYTE *)(v28 + 8) = 0;
  sub_1001449F4((uint64_t)v10, a2 + *(int *)(v27 + 64), type metadata accessor for ConditionDescriptionView);
  sub_100011894((uint64_t)v12, type metadata accessor for ConditionDescriptionView);
  sub_100011894((uint64_t)v18, type metadata accessor for LocationDegreesView);
  sub_100011894((uint64_t)v10, type metadata accessor for ConditionDescriptionView);
  sub_100011894((uint64_t)v16, type metadata accessor for LocationDegreesView);
}

void sub_100140468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  v0 = sub_1001579F4();
  __chkstk_darwin(v0);
  sub_100023344();
  static AccessibilityChildBehavior.combine.getter(v1);
  sub_100005D40(&qword_1001C6CB8);
  sub_1001565B0(&qword_1001C6CC0, &qword_1001C6CB8);
  v2 = sub_100157930();
  View.accessibilityElement(children:)(v2, v3, v4);
  v5 = sub_1001574B0();
  v6(v5);
  sub_100016BC0();
}

void sub_10014050C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t v109;
  char *v110;
  uint64_t KeyPath;
  uint64_t *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  __n128 v129;
  double v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t (*v148)(char *, uint64_t);
  void (*v149)(char *, uint64_t, __n128);
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;

  v166 = a1;
  v158 = sub_100005D40(&qword_1001C6BB0);
  __chkstk_darwin(v158);
  v162 = (uint64_t *)((char *)&v134 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v2 = type metadata accessor for ContentTransition(0);
  v160 = *(_QWORD *)(v2 - 8);
  v161 = v2;
  __chkstk_darwin(v2);
  v153 = (char *)&v134 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for Font.Context(0);
  v157 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v156 = (_DWORD *)((char *)&v134 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v159 = sub_100005D40(&qword_1001C6BB8);
  __chkstk_darwin(v159);
  v165 = (char *)&v134 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_100005D40(&qword_1001C6BC0);
  __chkstk_darwin(v163);
  v164 = (uint64_t)&v134 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for WeatherFormatPlaceholder(0);
  v147 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v142 = (char *)&v134 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for NSUnitTemperature.AttributedWeatherFormatStyle(0);
  v140 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v9 = (char *)&v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v146 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v145 = (char *)&v134 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100005D40(&qword_1001BF090);
  v11 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v13 = (char *)&v134 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v134 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Locale.Language(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v134 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Locale(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v134 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = static Locale.current.getter(v23);
  Locale.language.getter(v26);
  v27 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
  v150 = v25;
  v151 = v21;
  v28 = v27(v25, v21);
  LOBYTE(v25) = Locale.Language.prefersFullTemperatureScale.getter(v28);
  v29 = *(void (**)(char *, uint64_t))(v18 + 8);
  v152 = v20;
  v155 = v17;
  v29(v20, v17);
  v149 = (void (*)(char *, uint64_t, __n128))v29;
  v148 = v27;
  if ((v25 & 1) != 0)
  {
    v138 = v16;
    v30 = v145;
    v31 = v11;
    v32 = v146;
    v33 = v144;
    v34 = v147;
    v137 = type metadata accessor for CurrentObservationViewAttributes(0);
    v35 = v167;
    if (*(_BYTE *)(v167 + *(int *)(v137 + 68)) == 1)
    {
      v36 = (uint64_t)v138;
      sub_100140F94(v167, (uint64_t)v138);
      v37 = Text.init(_:)(v36);
      v38 = v37;
      v40 = v39;
      v42 = v41;
      v43 = v137;
      v45 = v44;
    }
    else
    {
      v71 = v35 + *(int *)(type metadata accessor for CurrentObservationViewModel(0) + 28);
      v136 = v31;
      v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 16);
      v135 = v13;
      v73 = v72(v13, v71, v33);
      v74 = static WeatherFormatStyle<>.weather.getter(v73);
      NSUnitTemperature.BaseWeatherFormatStyle.attributed.getter(v74);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v141);
      v75 = v142;
      v76 = v143;
      (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v142, enum case for WeatherFormatPlaceholder.none(_:), v143);
      v77 = type metadata accessor for UnitManager(0);
      v78 = static UnitManager.standard.getter(v77);
      sub_100016878(&qword_1001C3458, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.AttributedWeatherFormatStyle);
      v79 = (uint64_t)v138;
      v80 = v139;
      v81 = v135;
      Measurement.formatted<A>(_:placeholder:unitManager:)(v9, v75, v78, &protocol witness table for UnitManager, v33, v139, v82);
      swift_release(v78);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v75, v76);
      (*(void (**)(char *, uint64_t))(v140 + 8))(v9, v80);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v81, v33);
      v83 = Text.init(_:)(v79);
      v85 = v84;
      v87 = v86;
      v89 = v88 & 1;
      v90 = v137;
      v38 = Text.font(_:)(*(_QWORD *)(v35 + *(int *)(v137 + 64)), v83, v84, v89, v86);
      v40 = v91;
      v42 = v92;
      v43 = v90;
      v45 = v93;
      sub_100016868(v83, v85, v89);
      swift_bridgeObjectRelease(v87);
    }
    v70 = v158;
    v69 = v154;
  }
  else
  {
    v46 = type metadata accessor for CurrentObservationViewModel(0);
    v47 = v167;
    v48 = v145;
    static WeatherFormatStyle<>.weather.getter(v46);
    v49 = v147;
    v50 = v142;
    v51 = v143;
    (*(void (**)(char *, _QWORD, uint64_t))(v147 + 104))(v142, enum case for WeatherFormatPlaceholder.none(_:), v143);
    v52 = type metadata accessor for UnitManager(0);
    v53 = static UnitManager.standard.getter(v52);
    sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
    v54 = v141;
    v55 = Measurement.formatted<A>(_:placeholder:unitManager:)(v48, v50, v53, &protocol witness table for UnitManager, v144, v141);
    v57 = v56;
    swift_release(v53);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v51);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v48, v54);
    v168 = v55;
    v169 = v57;
    v58 = sub_10001692C();
    v59 = Text.init<A>(_:)(&v168, &type metadata for String, v58);
    v61 = v60;
    v63 = v62;
    v65 = v64 & 1;
    v43 = type metadata accessor for CurrentObservationViewAttributes(0);
    v38 = Text.font(_:)(*(_QWORD *)(v47 + *(int *)(v43 + 64)), v59, v61, v65, v63);
    v40 = v66;
    v42 = v67;
    v45 = v68;
    sub_100016868(v59, v61, v65);
    swift_bridgeObjectRelease(v63);
    v69 = v154;
    v70 = v158;
  }
  v143 = v40;
  v147 = v38;
  v94 = v42 & 1;
  LODWORD(v154) = v42 & 1;
  v95 = static Color.white.getter(v37);
  v158 = v45;
  v145 = (char *)Text.foregroundColor(_:)(v95, v38, v40, v94, v45);
  v144 = v96;
  v98 = v97;
  v146 = v99;
  swift_release(v95);
  LODWORD(v142) = v98 & 1;
  type metadata accessor for CurrentObservationViewAttributes(0);
  v100 = *(_QWORD *)(v167 + *(int *)(v43 + 64));
  type metadata accessor for DegreesView(0);
  v101 = v156;
  sub_1000C5030(v156);
  v102 = Font.capHeight(in:)(v101, v100);
  v103 = (*(uint64_t (**)(_DWORD *, uint64_t))(v157 + 8))(v101, v69);
  v104 = static Alignment.center.getter(v103);
  _FrameLayout.init(width:height:alignment:)(&v168, 0, 1, *(_QWORD *)&v102, 0, v104, v105);
  v106 = v168;
  v107 = v169;
  v167 = v170;
  v108 = v171;
  v109 = v173;
  v157 = v172;
  v110 = v153;
  static ContentTransition.numericText(countsDown:)(0);
  KeyPath = swift_getKeyPath(&unk_100185698);
  v113 = v161;
  v112 = v162;
  v114 = (char *)v162 + *(int *)(v70 + 28);
  v115 = v110;
  v116 = v160;
  (*(void (**)(char *, char *, uint64_t))(v160 + 16))(v114, v115, v161);
  *v112 = KeyPath;
  v117 = (uint64_t)v165;
  sub_100156004((uint64_t)v112, (uint64_t)&v165[*(int *)(v159 + 36)], &qword_1001C6BB0);
  v118 = (uint64_t)v145;
  v119 = v144;
  *(_QWORD *)v117 = v145;
  *(_QWORD *)(v117 + 8) = v119;
  v120 = (char)v142;
  *(_BYTE *)(v117 + 16) = (_BYTE)v142;
  v121 = v146;
  *(_QWORD *)(v117 + 24) = v146;
  *(_QWORD *)(v117 + 32) = v106;
  *(_BYTE *)(v117 + 40) = v107;
  *(_QWORD *)(v117 + 48) = v167;
  *(_BYTE *)(v117 + 56) = v108;
  *(_QWORD *)(v117 + 64) = v157;
  *(_QWORD *)(v117 + 72) = v109;
  v122 = v118;
  v123 = v119;
  LOBYTE(v109) = v120;
  sub_100016828(v118, v119, v120);
  swift_bridgeObjectRetain(v121);
  sub_100016904((uint64_t)v112, &qword_1001C6BB0);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v115, v113);
  sub_100016868(v122, v123, v109);
  swift_bridgeObjectRelease(v121);
  v124 = v150;
  v126 = static Locale.current.getter(v125);
  v127 = v152;
  Locale.language.getter(v126);
  v128 = v148(v124, v151);
  LOBYTE(v116) = Locale.Language.prefersFullTemperatureScale.getter(v128);
  sub_100016868(v147, v143, v154);
  v129 = swift_bridgeObjectRelease(v158);
  v149(v127, v155, v129);
  if ((v116 & 1) != 0)
    v130 = 0.8;
  else
    v130 = 1.0;
  v131 = swift_getKeyPath(&unk_100185668);
  v132 = v164;
  sub_100156004(v117, v164, &qword_1001C6BB8);
  v133 = v132 + *(int *)(v163 + 36);
  *(_QWORD *)v133 = v131;
  *(double *)(v133 + 8) = v130;
  sub_100016904(v117, &qword_1001C6BB8);
  sub_1001561C0(v132, v166, &qword_1001C6BC0);
}

void sub_100140F94(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, _QWORD, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  void (*v74)(char *, uint64_t);
  void (*v75)(char *, _QWORD);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t KeyPath;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  CGFloat v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t *v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  void (*v103)(char *, uint64_t);
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, _QWORD);
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146[8];

  v130 = a1;
  v129 = a2;
  v125 = type metadata accessor for Text.Scale(0);
  v117 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v116 = (char *)&v109 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100005D40(&qword_1001C6BC8);
  __chkstk_darwin(v118);
  v144 = (uint64_t)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005D40(&qword_1001C6BD0);
  v5 = __chkstk_darwin(v4);
  v119 = (uint64_t)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v124 = (char *)&v109 - v8;
  __chkstk_darwin(v7);
  v142 = (uint64_t)&v109 - v9;
  v123 = type metadata accessor for Font.Context(0);
  v122 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v121 = (_DWORD *)((char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v120 = sub_100005D40(&qword_1001C6BD8);
  __chkstk_darwin(v120);
  v141 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for AttributedString.Runs.Run(0);
  v143 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v140 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005D40(&qword_1001C6BE0);
  __chkstk_darwin(v13);
  v134 = (uint64_t)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for AttributedString.Runs.Index(0);
  v137 = *(_QWORD *)(v139 - 8);
  v15 = __chkstk_darwin(v139);
  v133 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v138 = (char *)&v109 - v17;
  v136 = type metadata accessor for AttributedString.Runs(0);
  v131 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v135 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for AttributedString(0);
  v127 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v126 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100005D40(&qword_1001C6BE8);
  v20 = __chkstk_darwin(v115);
  v113 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v114 = (char *)&v109 - v22;
  v111 = type metadata accessor for WeatherFormatPlaceholder(0);
  v23 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v25 = (char *)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for NSUnitTemperature.AttributedWeatherFormatStyle(0);
  v112 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v28 = (char *)&v109 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v109 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100005D40(&qword_1001BF090);
  v110 = *(_QWORD *)(v33 - 8);
  v34 = v110;
  __chkstk_darwin(v33);
  v36 = (char *)&v109 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for CurrentObservationViewModel(0);
  v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, v130 + *(int *)(v37 + 28), v33);
  v39 = static WeatherFormatStyle<>.weather.getter(v38);
  NSUnitTemperature.BaseWeatherFormatStyle.attributed.getter(v39);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
  v40 = *(void (**)(char *, _QWORD, uint64_t))(v23 + 104);
  v41 = v23;
  v42 = v111;
  v40(v25, enum case for WeatherFormatPlaceholder.none(_:), v111);
  v43 = type metadata accessor for UnitManager(0);
  v44 = static UnitManager.standard.getter(v43);
  sub_100016878(&qword_1001C3458, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.AttributedWeatherFormatStyle);
  v45 = v129;
  Measurement.formatted<A>(_:placeholder:unitManager:)(v28, v25, v44, &protocol witness table for UnitManager, v33, v26, v46);
  swift_release(v44);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v25, v42);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v28, v26);
  v47 = v36;
  v48 = v128;
  (*(void (**)(char *, uint64_t))(v110 + 8))(v47, v33);
  v49 = v127;
  v50 = v126;
  v51 = v45;
  v52 = v132;
  v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v127 + 16))(v126, v51, v132);
  v54 = v135;
  AttributedString.runs.getter(v53);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v52);
  v55 = v131;
  v56 = (uint64_t)v113;
  v57 = v54;
  v58 = v136;
  v127 = *(_QWORD *)(v131 + 16);
  ((void (*)(char *, char *, uint64_t))v127)(v113, v54, v136);
  sub_100016878(&qword_1001C6BF0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Runs);
  v59 = v138;
  v132 = v60;
  dispatch thunk of Collection.startIndex.getter(v58, v60);
  v61 = (uint64_t)v114;
  v126 = *(char **)(v55 + 8);
  ((void (*)(char *, uint64_t))v126)(v57, v58);
  v62 = v115;
  v63 = v137;
  (*(void (**)(uint64_t, char *, uint64_t))(v137 + 32))(v56 + *(int *)(v115 + 36), v59, v139);
  sub_1001561C0(v56, v61, &qword_1001C6BE8);
  v64 = v61 + *(int *)(v62 + 36);
  v131 = *(_QWORD *)(v63 + 16);
  while (1)
  {
    v65 = v138;
    v66 = v64;
    v67 = v64;
    v68 = v139;
    ((void (*)(char *, uint64_t, uint64_t))v131)(v138, v66, v139);
    v70 = v132;
    v69 = v133;
    v71 = v61;
    v72 = v136;
    dispatch thunk of Collection.endIndex.getter(v136, v132);
    sub_100016878(&qword_1001C6BF8, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Runs.Index);
    v73 = dispatch thunk of static Equatable.== infix(_:_:)(v65, v69, v68);
    v74 = *(void (**)(char *, uint64_t))(v137 + 8);
    v74(v69, v68);
    v74(v65, v68);
    if ((v73 & 1) != 0)
      break;
    v75 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read(v146, v67, v72, v70);
    v76 = v143;
    v77 = v134;
    (*(void (**)(uint64_t))(v143 + 16))(v134);
    v75(v146, 0);
    v78 = v135;
    v79 = v71;
    ((void (*)(char *, uint64_t, uint64_t))v127)(v135, v71, v72);
    dispatch thunk of Collection.formIndex(after:)(v67, v72, v70);
    ((void (*)(char *, uint64_t))v126)(v78, v72);
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v77, 0, 1, v48);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v77, 1, v48) == 1)
      goto LABEL_17;
    v64 = v67;
    v80 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 32))(v140, v77, v48);
    AttributedString.Runs.Run.range.getter(v80);
    KeyPath = swift_getKeyPath(&unk_1001856C8);
    *(&v109 - 2) = __chkstk_darwin(KeyPath);
    v82 = swift_getKeyPath(&unk_1001856F8);
    v83 = *(_QWORD *)(v130 + *(int *)(type metadata accessor for CurrentObservationViewAttributes(0) + 64));
    type metadata accessor for DegreesView(0);
    v84 = v121;
    sub_1000C5030(v121);
    v85 = Font.pointSize(in:)(v84, v83);
    (*(void (**)(_DWORD *, uint64_t))(v122 + 8))(v84, v123);
    v86 = swift_getKeyPath(&unk_100185738);
    *(&v109 - 2) = __chkstk_darwin(v86);
    v87 = swift_getKeyPath(&unk_100185768);
    v88 = sub_100155EB0();
    v89 = v142;
    AttributedString.Runs.Run.subscript.getter(v87, v88);
    v90 = swift_release(v87);
    v91 = (uint64_t)v124;
    static Text.Scale.secondary.getter(v90);
    v92 = v125;
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v91, 0, 1, v125);
    v93 = v144;
    v94 = v144 + *(int *)(v118 + 48);
    sub_100156004(v89, v144, &qword_1001C6BD0);
    sub_100156004(v91, v94, &qword_1001C6BD0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v93, 1, v92) == 1)
    {
      sub_100016904(v91, &qword_1001C6BD0);
      sub_100016904(v142, &qword_1001C6BD0);
      v95 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v94, 1, v92);
      if (v95 == 1)
        v96 = &qword_1001C6BD0;
      else
        v96 = &qword_1001C6BC8;
      if (v95 == 1)
        v97 = -1;
      else
        v97 = 0;
      v61 = v79;
    }
    else
    {
      sub_100156004(v144, v119, &qword_1001C6BD0);
      v61 = v79;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v94, 1, v92) == 1)
      {
        sub_100016904(v91, &qword_1001C6BD0);
        sub_100016904(v142, &qword_1001C6BD0);
        (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v119, v92);
        v97 = 0;
        v96 = &qword_1001C6BC8;
      }
      else
      {
        v98 = v64;
        v99 = v117;
        v100 = v119;
        v101 = v82;
        v102 = v116;
        (*(void (**)(char *, uint64_t, uint64_t))(v117 + 32))(v116, v94, v92);
        sub_100016878(&qword_1001C6C18, (uint64_t (*)(uint64_t))&type metadata accessor for Text.Scale);
        v97 = dispatch thunk of static Equatable.== infix(_:_:)(v100, v102, v92);
        v103 = *(void (**)(char *, uint64_t))(v99 + 8);
        v104 = v102;
        v82 = v101;
        v103(v104, v92);
        sub_100016904(v91, &qword_1001C6BD0);
        sub_100016904(v142, &qword_1001C6BD0);
        v103((char *)v100, v92);
        v64 = v98;
        v96 = &qword_1001C6BD0;
      }
    }
    sub_100016904(v144, v96);
    v145 = sub_10004B324((v97 & 1) == 0, v85);
    sub_1001565B0(&qword_1001C6C10, &qword_1001C6BD8);
    v105 = (uint64_t)v141;
    v107 = (void (*)(char *, _QWORD))AttributedString.subscript.modify(v146, v141, v120, v106);
    v108 = sub_100155DF4();
    AttributedSubstring.subscript.setter(&v145, v82, v108);
    v107(v146, 0);
    sub_100016904(v105, &qword_1001C6BD8);
    v48 = v128;
    (*(void (**)(char *, uint64_t))(v143 + 8))(v140, v128);
  }
  v79 = v71;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v134, 1, 1, v48);
LABEL_17:
  sub_100016904(v79, &qword_1001C6BE8);
}

void sub_100141BE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_100155DF4();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_100141C08(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v7 = *a1;
  v8 = v4;
  v5 = sub_100005D40(a4);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v8, &v7, v5) & 1;
}

void sub_100141C5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100005D40(a3);
  dispatch thunk of Hashable.hashValue.getter(v3, &protocol witness table for AnyKeyPath);
  sub_1001578F0();
}

void sub_100141C94(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_100155EB0();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

void sub_100141CBC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t OpaqueTypeConformance2;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;

  v87 = a1;
  v85 = sub_100005D40(&qword_1001C6A08);
  __chkstk_darwin(v85);
  v86 = (uint64_t)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Locale.Language(0);
  v81 = *(_QWORD *)(v3 - 8);
  v82 = v3;
  __chkstk_darwin(v3);
  v80 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v74 = *(_QWORD *)(v5 - 8);
  v75 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ConditionImage(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100005D40(&qword_1001BF3A8);
  __chkstk_darwin(v11);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100005D40(&qword_1001BF3B0);
  __chkstk_darwin(v73);
  v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005D40(&qword_1001BF3B8);
  v78 = *(_QWORD *)(v16 - 8);
  v79 = v16;
  __chkstk_darwin(v16);
  v77 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100005D40(&qword_1001C6A10);
  v18 = __chkstk_darwin(v84);
  v76 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v83 = (uint64_t)&v72 - v20;
  v21 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v22 = (uint64_t *)(v1 + v21[25]);
  v23 = v22[1];
  if (v23)
  {
    v24 = *v22;
    *v10 = swift_getKeyPath(&unk_100185548);
    v25 = sub_100005D40(&qword_1001BF3C0);
    swift_storeEnumTagMultiPayload(v10, v25, 0);
    v26 = (_QWORD *)((char *)v10 + *(int *)(v8 + 20));
    *v26 = v24;
    v26[1] = v23;
    *((_BYTE *)v10 + *(int *)(v8 + 24)) = 0;
    v27 = swift_bridgeObjectRetain(v23);
    v28 = static Color.white.getter(v27);
    KeyPath = swift_getKeyPath(&unk_100185578);
    sub_1001449F4((uint64_t)v10, (uint64_t)v13, type metadata accessor for ConditionImage);
    v30 = (uint64_t *)&v13[*(int *)(v11 + 36)];
    *v30 = KeyPath;
    v30[1] = v28;
    sub_100011894((uint64_t)v10, type metadata accessor for ConditionImage);
    v31 = *(_QWORD *)(v1 + v21[15]);
    v32 = swift_getKeyPath(&unk_1001855A8);
    sub_100156004((uint64_t)v13, (uint64_t)v15, &qword_1001BF3A8);
    v33 = v73;
    v34 = (uint64_t *)&v15[*(int *)(v73 + 36)];
    *v34 = v32;
    v34[1] = v31;
    swift_retain(v31);
    sub_100016904((uint64_t)v13, &qword_1001BF3A8);
    v36 = static Locale.current.getter(v35);
    v37 = v80;
    Locale.language.getter(v36);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v7, v75);
    v38 = sub_100016470();
    v39 = v77;
    View.typesettingLanguage(_:isEnabled:)(v37, 1, v33, v38);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v37, v82);
    sub_100016904((uint64_t)v15, &qword_1001BF3B0);
    v88 = v33;
    v89 = v38;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v88, &opaque type descriptor for <<opaque return type of View.typesettingLanguage(_:isEnabled:)>>, 1);
    v41 = v76;
    v42 = v79;
    View.accessibility(hidden:)(1, v79, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v39, v42);
    v43 = (uint64_t)v41;
    v44 = v83;
    sub_1001561C0(v43, v83, &qword_1001C6A10);
    v45 = v86;
    sub_100156004(v44, v86, &qword_1001C6A10);
    v46 = v45;
    v47 = v85;
    v48 = 0;
  }
  else
  {
    v49 = v1 + *(int *)(type metadata accessor for CurrentObservationViewModel(0) + 48);
    v50 = (uint64_t *)(v49 + *(int *)(type metadata accessor for ConditionViewModel(0) + 24));
    v52 = *v50;
    v51 = v50[1];
    *v10 = swift_getKeyPath(&unk_100185548);
    v53 = sub_100005D40(&qword_1001BF3C0);
    swift_storeEnumTagMultiPayload(v10, v53, 0);
    v54 = (_QWORD *)((char *)v10 + *(int *)(v8 + 20));
    *v54 = v52;
    v54[1] = v51;
    *((_BYTE *)v10 + *(int *)(v8 + 24)) = 0;
    v55 = *(_QWORD *)(v1 + v21[11]);
    v56 = swift_getKeyPath(&unk_100185578);
    sub_1001449F4((uint64_t)v10, (uint64_t)v13, type metadata accessor for ConditionImage);
    v57 = (uint64_t *)&v13[*(int *)(v11 + 36)];
    *v57 = v56;
    v57[1] = v55;
    swift_retain(v55);
    swift_bridgeObjectRetain(v51);
    sub_100011894((uint64_t)v10, type metadata accessor for ConditionImage);
    v58 = *(_QWORD *)(v1 + v21[15]);
    v59 = swift_getKeyPath(&unk_1001855A8);
    sub_100156004((uint64_t)v13, (uint64_t)v15, &qword_1001BF3A8);
    v60 = v73;
    v61 = (uint64_t *)&v15[*(int *)(v73 + 36)];
    *v61 = v59;
    v61[1] = v58;
    swift_retain(v58);
    sub_100016904((uint64_t)v13, &qword_1001BF3A8);
    v63 = static Locale.current.getter(v62);
    v64 = v80;
    Locale.language.getter(v63);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v7, v75);
    v65 = sub_100016470();
    v66 = v77;
    View.typesettingLanguage(_:isEnabled:)(v64, 1, v60, v65);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v64, v82);
    sub_100016904((uint64_t)v15, &qword_1001BF3B0);
    v88 = v60;
    v89 = v65;
    v67 = swift_getOpaqueTypeConformance2(&v88, &opaque type descriptor for <<opaque return type of View.typesettingLanguage(_:isEnabled:)>>, 1);
    v68 = v76;
    v69 = v79;
    View.accessibility(hidden:)(1, v79, v67);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v66, v69);
    v70 = (uint64_t)v68;
    v44 = v83;
    sub_1001561C0(v70, v83, &qword_1001C6A10);
    v45 = v86;
    sub_100156004(v44, v86, &qword_1001C6A10);
    v46 = v45;
    v47 = v85;
    v48 = 1;
  }
  swift_storeEnumTagMultiPayload(v46, v47, v48);
  v71 = sub_100155904();
  _ConditionalContent<>.init(storage:)(v45, v84, v84, v71, v71);
  sub_100016904(v44, &qword_1001C6A10);
}

void sub_100142344(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeConformance2;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];

  v2 = v1;
  v36 = a1;
  v32 = type metadata accessor for AccessibilityChildBehavior(0);
  v3 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005D40(&qword_1001C6C30);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100005D40(&qword_1001C6C38);
  v35 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100005D40(&qword_1001C6C40);
  v11 = __chkstk_darwin(v34);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v31 - v15;
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v14);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v17 = sub_100005D40(&qword_1001C6C48);
  sub_100142610(v2, (uint64_t *)&v8[*(int *)(v17 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v18);
  sub_1001565B0(&qword_1001C6C50, &qword_1001C6C30);
  v20 = v19;
  View.accessibilityElement(children:)(v5, v6, v19);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v32);
  sub_100016904((uint64_t)v8, &qword_1001C6C30);
  v21 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
  v22 = swift_allocObject(v21, 48, 7);
  *(_OWORD *)(v22 + 16) = xmmword_10017BD10;
  v23 = type metadata accessor for CurrentObservationViewAttributes(0);
  *(_QWORD *)(v22 + 32) = Location.name.getter(v23);
  *(_QWORD *)(v22 + 40) = v24;
  v37[0] = v6;
  v37[1] = v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v37, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v26 = sub_10001692C();
  v27 = v33;
  View.accessibilityInputLabels<A>(_:)(v22, v33, &type metadata for String, OpaqueTypeConformance2, v26);
  v28 = swift_bridgeObjectRelease(v22);
  (*(void (**)(char *, uint64_t, __n128))(v35 + 8))(v10, v27, v28);
  v29 = v34;
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(1, v34);
  sub_100016904((uint64_t)v13, &qword_1001C6C40);
  v30 = sub_100155F30();
  View.widgetAccentable(_:)(1, v29, v30);
  sub_100016904((uint64_t)v16, &qword_1001C6C40);
}

void sub_100142610(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t KeyPath;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, _QWORD, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t OpaqueTypeConformance2;
  uint64_t v97;
  uint64_t v98;
  char v99;
  __n128 v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  _QWORD v141[2];
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 v145;
  _DWORD *v146;
  uint64_t v147;

  v139 = a2;
  v129 = type metadata accessor for AccessibilityChildBehavior(0);
  v127 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v125 = (char *)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100005D40(&qword_1001C24D0);
  __chkstk_darwin(v115);
  v119 = (uint64_t *)((char *)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v118 = type metadata accessor for Image.Scale(0);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v116 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_100005D40(&qword_1001C24D8);
  __chkstk_darwin(v114);
  v120 = (uint64_t *)((char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v123 = sub_100005D40(&qword_1001C6C60);
  __chkstk_darwin(v123);
  v121 = (uint64_t)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100005D40(&qword_1001C6C68);
  v126 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v124 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100005D40(&qword_1001C6C70);
  __chkstk_darwin(v137);
  v122 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001C6C78);
  v11 = __chkstk_darwin(v10);
  v138 = (uint64_t)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v140 = (uint64_t)&v109 - v13;
  v133 = type metadata accessor for Font.Context(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (_DWORD *)((char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v142 = Location.name.getter(v15);
  v143 = v16;
  v17 = sub_10001692C();
  v18 = Text.init<A>(_:)(&v142, &type metadata for String, v17);
  v20 = v19;
  v22 = v21;
  v24 = v23 & 1;
  v25 = static Color.white.getter(v18);
  v26 = Text.foregroundColor(_:)(v25, v18, v20, v24, v22);
  v28 = v27;
  v30 = v29;
  v136 = v31;
  swift_release(v25);
  v32 = v30 & 1;
  sub_100016868(v18, v20, v24);
  swift_bridgeObjectRelease(v22);
  v130 = *(_QWORD *)(a1 + v15[19]);
  v33 = v136;
  v34 = Text.font(_:)(v130, v26, v28, v32, v136);
  v36 = v35;
  v38 = v37;
  v51 = v39 & 1;
  sub_100016868(v26, v28, v32);
  swift_bridgeObjectRelease(v33);
  v136 = Text.fontWeight(_:)(*(_QWORD *)(a1 + v15[20]), 0, v34, v36, v51, v38);
  v135 = v40;
  v134 = v41;
  v43 = v42;
  sub_100016868(v34, v36, v51);
  swift_bridgeObjectRelease(v38);
  type metadata accessor for LocationView(0);
  v44 = v131;
  sub_1000C5030(v131);
  v45 = Font.capHeight(in:)(v44, v130);
  v46 = (*(uint64_t (**)(_DWORD *, uint64_t))(v132 + 8))(v44, v133);
  v47 = static Alignment.center.getter(v46);
  v48 = 1;
  _FrameLayout.init(width:height:alignment:)(&v142, 0, 1, *(_QWORD *)&v45, 0, v47, v49);
  v50 = v142;
  LODWORD(v51) = v143;
  v133 = v144;
  LODWORD(v132) = v145;
  v131 = v146;
  v130 = v147;
  if (*(_BYTE *)(a1 + v15[9]) == 1)
  {
    v52 = (uint64_t *)(a1 + v15[12]);
    v53 = *v52;
    v54 = v52[1];
    swift_bridgeObjectRetain(v54);
    v110 = Image.init(systemName:)(v53, v54);
    v109 = static Color.white.getter(v110);
    KeyPath = swift_getKeyPath(&unk_100185578);
    v56 = *(_QWORD *)(a1 + v15[13]);
    v57 = swift_getKeyPath(&unk_1001855A8);
    v113 = v43;
    v58 = v57;
    v111 = v51;
    v51 = v117;
    v59 = *(void (**)(char *, _QWORD, uint64_t))(v117 + 104);
    v60 = v116;
    v112 = v50;
    v61 = v118;
    v59(v116, enum case for Image.Scale.small(_:), v118);
    v62 = swift_getKeyPath(&unk_1001857A8);
    v63 = v119;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))((char *)v119 + *(int *)(v115 + 28), v60, v61);
    *v63 = v62;
    v64 = v120;
    sub_100156004((uint64_t)v63, (uint64_t)v120 + *(int *)(v114 + 36), &qword_1001C24D0);
    v65 = v110;
    *v64 = v110;
    v64[1] = KeyPath;
    v66 = v109;
    v64[2] = v109;
    v64[3] = v58;
    v64[4] = v56;
    swift_retain_n(v56, 2);
    swift_retain(v65);
    swift_retain(KeyPath);
    swift_retain(v66);
    swift_retain(v58);
    sub_100016904((uint64_t)v63, &qword_1001C24D0);
    v67 = *(void (**)(char *, uint64_t))(v51 + 8);
    LOBYTE(v51) = v111;
    v68 = v61;
    v50 = v112;
    v67(v60, v68);
    swift_release(v56);
    swift_release(v58);
    swift_release(v66);
    swift_release(KeyPath);
    v69 = swift_release(v65);
    LOBYTE(v65) = static Edge.Set.leading.getter(v69);
    v70 = EdgeInsets.init(_all:)(2.0);
    v72 = v71;
    v74 = v73;
    v76 = v75;
    v77 = v121;
    sub_100156004((uint64_t)v64, v121, &qword_1001C24D8);
    v78 = v123;
    v79 = v77 + *(int *)(v123 + 36);
    *(_BYTE *)v79 = v65;
    *(double *)(v79 + 8) = v70;
    *(_QWORD *)(v79 + 16) = v72;
    *(_QWORD *)(v79 + 24) = v74;
    *(_QWORD *)(v79 + 32) = v76;
    *(_BYTE *)(v79 + 40) = 0;
    sub_100016904((uint64_t)v64, &qword_1001C24D8);
    v80 = v125;
    static AccessibilityChildBehavior.ignore.getter(v81);
    sub_1001559B0(&qword_1001C6C88, &qword_1001C6C60, (void (*)(void))sub_100156034);
    v83 = v82;
    v84 = v124;
    View.accessibilityElement(children:)(v80, v78, v82);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v80, v129);
    sub_100016904(v77, &qword_1001C6C60);
    v85 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x800000010018A2D0);
    v89 = Text.init(_:tableName:bundle:comment:)(v85, v87, v86 & 1, v88, 0, 0, 0);
    v91 = v90;
    v93 = v92;
    v95 = v94 & 1;
    v141[0] = v78;
    v141[1] = v83;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v141, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v97 = (uint64_t)v122;
    v98 = v128;
    View.accessibilityLabel(_:)(v89, v91, v95, v93, v128, OpaqueTypeConformance2);
    v99 = v95;
    v43 = v113;
    sub_100016868(v89, v91, v99);
    v100 = swift_bridgeObjectRelease(v93);
    (*(void (**)(char *, uint64_t, __n128))(v126 + 8))(v84, v98, v100);
    sub_1001561C0(v97, v140, &qword_1001C6C70);
    v48 = 0;
  }
  v101 = v140;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v140, v48, 1, v137);
  v102 = v134 & 1;
  v103 = v138;
  sub_100156004(v101, v138, &qword_1001C6C78);
  v104 = v139;
  v105 = v136;
  v106 = v135;
  *v139 = v136;
  v104[1] = v106;
  *((_BYTE *)v104 + 16) = v102;
  v104[3] = v43;
  v104[4] = v50;
  *((_BYTE *)v104 + 40) = v51;
  v104[6] = v133;
  *((_BYTE *)v104 + 56) = v132;
  v107 = v130;
  v104[8] = (uint64_t)v131;
  v104[9] = v107;
  v108 = sub_100005D40(&qword_1001C6C80);
  sub_100156004(v103, (uint64_t)v104 + *(int *)(v108 + 48), &qword_1001C6C78);
  sub_100016828(v105, v106, v102);
  swift_bridgeObjectRetain(v43);
  sub_100016904(v101, &qword_1001C6C78);
  sub_100016904(v103, &qword_1001C6C78);
  sub_100016868(v105, v106, v102);
  swift_bridgeObjectRelease(v43);
}

void sub_100142FAC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  _OWORD v22[3];

  v4 = v1;
  v6 = sub_100157028();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10002335C();
  v8 = sub_100005D40(&qword_1001C6598);
  sub_1000230F4();
  __chkstk_darwin(v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005D40(&qword_1001C65A0);
  sub_1000230F4();
  __chkstk_darwin(v12);
  sub_100023374();
  sub_100143148(v4);
  v13 = sub_100144A94();
  View.accessibilityRespondsToUserInteraction(_:)(0, v8, v13);
  sub_100016904((uint64_t)v11, &qword_1001C6598);
  sub_100016B00();
  type metadata accessor for DegreesConditionView(0);
  sub_1000C5030(v3);
  v14 = sub_100157578();
  v16 = Font.capHeight(in:)(v14, v15);
  v17 = (*(uint64_t (**)(_DWORD *, uint64_t))(v7 + 8))(v3, v6);
  v18 = static Alignment.center.getter(v17);
  _FrameLayout.init(width:height:alignment:)(v22, 0, 1, *(_QWORD *)&v16, 0, v18, v19);
  sub_100156004(v2, a1, &qword_1001C65A0);
  v20 = (_OWORD *)(a1 + *(int *)(sub_100005D40(&qword_1001C65E0) + 36));
  v21 = v22[1];
  *v20 = v22[0];
  v20[1] = v21;
  v20[2] = v22[2];
  sub_100016904(v2, &qword_1001C65A0);
  sub_1000CD1DC();
}

void sub_100143148(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = sub_100005D40(&qword_1001C65D8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001C65E8);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D40(&qword_1001C65C8);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CurrentObservationViewAttributes(0);
  v12 = *(unsigned __int8 *)(a1 + *(int *)(v11 + 84));
  v13 = static Axis.Set.horizontal.getter(v11);
  if (v12 == 1)
  {
    *v10 = v13;
    v14 = sub_100005D40(&qword_1001C65F8);
    sub_1001433AC(a1, (uint64_t)&v10[*(int *)(v14 + 44)]);
    sub_100156004((uint64_t)v10, (uint64_t)v7, &qword_1001C65C8);
    swift_storeEnumTagMultiPayload(v7, v5, 0);
    sub_1001565B0(&qword_1001C65C0, &qword_1001C65C8);
    v16 = v15;
    sub_1001565B0(&qword_1001C65D0, &qword_1001C65D8);
    _ConditionalContent<>.init(storage:)(v7, v8, v2, v16, v17);
    v18 = (uint64_t)v10;
    v19 = &qword_1001C65C8;
  }
  else
  {
    *v4 = v13;
    v20 = sub_100005D40(&qword_1001C65F0);
    sub_100143A58(a1, (uint64_t)&v4[*(int *)(v20 + 44)]);
    sub_100156004((uint64_t)v4, (uint64_t)v7, &qword_1001C65D8);
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    sub_1001565B0(&qword_1001C65C0, &qword_1001C65C8);
    v22 = v21;
    sub_1001565B0(&qword_1001C65D0, &qword_1001C65D8);
    _ConditionalContent<>.init(storage:)(v7, v8, v2, v22, v23);
    v18 = (uint64_t)v4;
    v19 = &qword_1001C65D8;
  }
  sub_100016904(v18, v19);
}

void sub_1001433AC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  v3 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DegreesView(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v34 - v10;
  v12 = sub_100005D40(&qword_1001C6600);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v34 - v16;
  v18 = sub_100005D40(&qword_1001C6608);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v34 - v23;
  *(_QWORD *)v24 = static VerticalAlignment.center.getter(v22);
  *((_QWORD *)v24 + 1) = 0;
  v24[16] = 1;
  v25 = sub_100005D40(&qword_1001C6610);
  sub_100143E30(a1, &enum case for TemperatureHighLowText.Style.numbersOnly(_:), (uint64_t)&v24[*(int *)(v25 + 44)]);
  *(_QWORD *)v17 = static VerticalAlignment.center.getter(v26);
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  v27 = (uint64_t)&v17[*(int *)(sub_100005D40(&qword_1001C6618) + 44)];
  sub_1001449F4(a1, (uint64_t)v5, type metadata accessor for CurrentObservationViewAttributes);
  KeyPath = swift_getKeyPath(&unk_1001851E8);
  v29 = (uint64_t *)&v11[*(int *)(v6 + 20)];
  *v29 = KeyPath;
  v30 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v29, v30, 0);
  sub_100144A64((uint64_t)v5, (uint64_t)v11, type metadata accessor for CurrentObservationViewAttributes);
  sub_1001449F4((uint64_t)v11, (uint64_t)v9, type metadata accessor for DegreesView);
  sub_1001449F4((uint64_t)v9, v27, type metadata accessor for DegreesView);
  v31 = v27 + *(int *)(sub_100005D40(&qword_1001C6620) + 48);
  *(_QWORD *)v31 = 0;
  *(_BYTE *)(v31 + 8) = 1;
  sub_100011894((uint64_t)v11, type metadata accessor for DegreesView);
  sub_100011894((uint64_t)v9, type metadata accessor for DegreesView);
  sub_100156004((uint64_t)v24, (uint64_t)v21, &qword_1001C6608);
  sub_100156004((uint64_t)v17, (uint64_t)v15, &qword_1001C6600);
  v32 = v35;
  sub_100156004((uint64_t)v21, v35, &qword_1001C6608);
  v33 = sub_100005D40(&qword_1001C6628);
  sub_100156004((uint64_t)v15, v32 + *(int *)(v33 + 48), &qword_1001C6600);
  sub_100016904((uint64_t)v17, &qword_1001C6600);
  sub_100016904((uint64_t)v24, &qword_1001C6608);
  sub_100016904((uint64_t)v15, &qword_1001C6600);
  sub_100016904((uint64_t)v21, &qword_1001C6608);
}

void sub_1001436CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  unsigned int v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v68 = a1;
  v72 = a2;
  v6 = sub_100157028();
  v70 = *(_QWORD *)(v6 - 8);
  v71 = v6;
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_1000230E0();
  v69 = v8;
  v9 = type metadata accessor for TemperatureHighLowText.Style(0);
  v66 = *(_QWORD *)(v9 - 8);
  v67 = v9;
  sub_1000230F4();
  __chkstk_darwin(v10);
  sub_1000230E0();
  v65 = v11;
  v60 = sub_1001577B0();
  v52 = *(_QWORD **)(v60 - 8);
  v12 = v52;
  __chkstk_darwin(v60);
  v13 = sub_1000CD210();
  v14 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(v13);
  __chkstk_darwin(v14);
  sub_1001574BC();
  __chkstk_darwin(v15);
  v17 = (char *)&v51 - v16;
  v18 = sub_100005D40(&qword_1001BF090);
  v54 = *(_QWORD *)(v18 - 8);
  v19 = v54;
  __chkstk_darwin(v18);
  sub_100023344();
  v63 = sub_100016B00();
  v20 = v2 + *(int *)(v63 + 20);
  v59 = v20;
  v21 = sub_10001C804();
  v22 = v20 + *(int *)(v21 + 24);
  v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v58 = v21;
  v23 = sub_1000A6CB0(v3, v22, v57);
  static WeatherFormatStyle<>.weather.getter(v23);
  sub_100157810();
  sub_100157540((uint64_t)v17);
  v56 = enum case for WeatherFormatPlaceholder.none(_:);
  v55 = (void (*)(uint64_t))v12[13];
  v24 = v60;
  v55(v5);
  v25 = sub_1000D6D90();
  v26 = sub_1001579DC(v25, (uint64_t)&v73);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v53 = v27;
  v28 = sub_100157160(v4, v5, v26, (uint64_t)&protocol witness table for UnitManager, v18, v14);
  v61 = v29;
  v62 = v28;
  sub_100156F24();
  sub_1000FC7C8();
  v52 = v30;
  ((void (*)(uint64_t, uint64_t))v30)(v5, v24);
  sub_100157540(v4);
  sub_100157924();
  v31 = v57(v3, v59 + *(int *)(v58 + 28), v18);
  static WeatherFormatStyle<>.weather.getter(v31);
  sub_100157810();
  sub_100157540((uint64_t)v17);
  v32 = v24;
  v33 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v55)(v5, v56, v24);
  v34 = static UnitManager.standard.getter(v33);
  v35 = sub_100157160(v4, v5, v34, (uint64_t)&protocol witness table for UnitManager, v18, v14);
  v58 = v36;
  v59 = v35;
  swift_release(v34);
  ((void (*)(uint64_t, uint64_t))v52)(v5, v32);
  sub_100157540(v4);
  sub_100157924();
  v38 = v63;
  v37 = v64;
  v39 = *(_QWORD *)(v64 + *(int *)(v63 + 72));
  v40 = v65;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v65, v68, v67);
  v41 = swift_retain(v39);
  v42 = static Alignment.topTrailing.getter(v41);
  v44 = v43;
  v45 = *(_QWORD *)(v37 + *(int *)(v38 + 52));
  type metadata accessor for DegreesConditionView(0);
  v46 = v69;
  sub_1000C5030(v69);
  v47 = Font.capHeight(in:)(v46, v45);
  v48 = (*(uint64_t (**)(_DWORD *, uint64_t))(v70 + 8))(v46, v71);
  v49 = static Color.white.getter(v48);
  v50 = 1;
  TemperatureHighLowText.init(highTemperature:lowTemperature:font:foregroundColor:style:textAlignment:alignVertically:textHeightFrame:)(v62, v61, v59, v58, v39, v49, v40, v42, v47, v44, v50);
  sub_1000CD1DC();
}

void sub_100143A58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a2;
  v3 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for DegreesView(0);
  v6 = __chkstk_darwin(v40);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v40 - v9;
  v11 = sub_100005D40(&qword_1001C6600);
  v12 = __chkstk_darwin(v11);
  v42 = (uint64_t)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v40 - v14;
  v16 = sub_100005D40(&qword_1001C6608);
  v17 = __chkstk_darwin(v16);
  v41 = (uint64_t)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v40 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v40 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v40 - v26;
  *(_QWORD *)v27 = static VerticalAlignment.center.getter(v25);
  *((_QWORD *)v27 + 1) = 0;
  v27[16] = 1;
  v28 = sub_100005D40(&qword_1001C6610);
  sub_100143E30(a1, &enum case for TemperatureHighLowText.Style.arrowLabels(_:), (uint64_t)&v27[*(int *)(v28 + 44)]);
  *(_QWORD *)v24 = static VerticalAlignment.center.getter(v29);
  *((_QWORD *)v24 + 1) = 0;
  v24[16] = 1;
  sub_100143E30(a1, &enum case for TemperatureHighLowText.Style.numbersOnly(_:), (uint64_t)&v24[*(int *)(v28 + 44)]);
  *(_QWORD *)v15 = static VerticalAlignment.center.getter(v30);
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 1;
  v31 = (uint64_t)&v15[*(int *)(sub_100005D40(&qword_1001C6618) + 44)];
  sub_1001449F4(a1, (uint64_t)v5, type metadata accessor for CurrentObservationViewAttributes);
  KeyPath = swift_getKeyPath(&unk_1001851E8);
  v33 = (uint64_t *)&v10[*(int *)(v40 + 20)];
  *v33 = KeyPath;
  v34 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v33, v34, 0);
  sub_100144A64((uint64_t)v5, (uint64_t)v10, type metadata accessor for CurrentObservationViewAttributes);
  sub_1001449F4((uint64_t)v10, (uint64_t)v8, type metadata accessor for DegreesView);
  sub_1001449F4((uint64_t)v8, v31, type metadata accessor for DegreesView);
  v35 = v31 + *(int *)(sub_100005D40(&qword_1001C6620) + 48);
  *(_QWORD *)v35 = 0;
  *(_BYTE *)(v35 + 8) = 1;
  sub_100011894((uint64_t)v10, type metadata accessor for DegreesView);
  sub_100011894((uint64_t)v8, type metadata accessor for DegreesView);
  sub_100156004((uint64_t)v27, (uint64_t)v21, &qword_1001C6608);
  v36 = v41;
  sub_100156004((uint64_t)v24, v41, &qword_1001C6608);
  v37 = v42;
  sub_100156004((uint64_t)v15, v42, &qword_1001C6600);
  v38 = v43;
  sub_100156004((uint64_t)v21, v43, &qword_1001C6608);
  v39 = sub_100005D40(&qword_1001C6638);
  sub_100156004(v36, v38 + *(int *)(v39 + 48), &qword_1001C6608);
  sub_100156004(v37, v38 + *(int *)(v39 + 64), &qword_1001C6600);
  sub_100016904((uint64_t)v15, &qword_1001C6600);
  sub_100016904((uint64_t)v24, &qword_1001C6608);
  sub_100016904((uint64_t)v27, &qword_1001C6608);
  sub_100016904(v37, &qword_1001C6600);
  sub_100016904(v36, &qword_1001C6608);
  sub_100016904((uint64_t)v21, &qword_1001C6608);
}

void sub_100143E30(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t KeyPath;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  char v41;

  v39 = a2;
  v40 = a3;
  v38 = type metadata accessor for TemperatureHighLowText.Style(0);
  v7 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v8 = sub_1000CD210();
  v9 = type metadata accessor for TemperatureHighLowText(v8);
  v37 = *(_QWORD *)(v9 - 8);
  sub_1000230F4();
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v36 - v14;
  sub_100016B00();
  sub_1000230F4();
  __chkstk_darwin(v16);
  v17 = sub_1000253B8();
  v18 = type metadata accessor for DegreesView(v17);
  sub_1000230F4();
  __chkstk_darwin(v19);
  sub_1001574BC();
  __chkstk_darwin(v20);
  v22 = (char *)&v36 - v21;
  sub_1001449F4(a1, v3, type metadata accessor for CurrentObservationViewAttributes);
  KeyPath = swift_getKeyPath(&unk_1001851E8);
  v24 = (uint64_t *)&v22[*(int *)(v18 + 20)];
  *v24 = KeyPath;
  v25 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  sub_100144A64(v3, (uint64_t)v22, type metadata accessor for CurrentObservationViewAttributes);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v5, *v39, v38);
  sub_1001436CC(v5, (uint64_t)v13);
  sub_1000D8040(v5, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  v26 = v37;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v15, v13, v9);
  sub_1001449F4((uint64_t)v22, v4, type metadata accessor for DegreesView);
  v41 = 1;
  v27 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  v27(v13, v15, v9);
  v28 = v40;
  sub_1001449F4(v4, v40, type metadata accessor for DegreesView);
  v29 = sub_100005D40(&qword_1001C6630);
  v30 = v28 + *(int *)(v29 + 48);
  v31 = v41;
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = v31;
  v27((char *)(v28 + *(int *)(v29 + 64)), v13, v9);
  v32 = *(void (**)(char *, uint64_t))(v26 + 8);
  v32(v15, v9);
  sub_100011894((uint64_t)v22, type metadata accessor for DegreesView);
  v33 = sub_1001574B0();
  ((void (*)(uint64_t))v32)(v33);
  v34 = sub_100157578();
  sub_100011894(v34, v35);
  sub_10001C770();
}

void sub_100144084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = sub_1001579F4();
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100023344();
  sub_100005D40(&qword_1001C6640);
  sub_100157680();
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_10002335C();
  *(_QWORD *)v2 = static VerticalAlignment.center.getter(v6);
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 0;
  v7 = sub_100005D40(&qword_1001C6648);
  sub_100144174(v0, v2 + *(int *)(v7 + 44));
  static AccessibilityChildBehavior.combine.getter(v8);
  sub_1001565B0(&qword_1001C6650, &qword_1001C6640);
  v9 = sub_100157930();
  View.accessibilityElement(children:)(v9, v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  sub_100016904(v2, &qword_1001C6640);
  sub_100016BC0();
}

void sub_100144174(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t KeyPath;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  unint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  _QWORD v55[2];

  v53 = a2;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for IconView(0);
  __chkstk_darwin(v45);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100005D40(&qword_1001C6658);
  v52 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100005D40(&qword_1001C6660);
  v10 = __chkstk_darwin(v51);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v44 - v14;
  __chkstk_darwin(v13);
  v49 = (uint64_t)&v44 - v16;
  v17 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for LocationView(0);
  v21 = __chkstk_darwin(v20);
  v46 = (uint64_t)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)&v44 - v23;
  sub_1001449F4(a1, (uint64_t)v19, type metadata accessor for CurrentObservationViewAttributes);
  KeyPath = swift_getKeyPath(&unk_1001851E8);
  v26 = (uint64_t *)&v24[*(int *)(v20 + 20)];
  *v26 = KeyPath;
  v27 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  sub_100144A64((uint64_t)v19, (uint64_t)v24, type metadata accessor for CurrentObservationViewAttributes);
  sub_1001449F4(a1, (uint64_t)v7, type metadata accessor for CurrentObservationViewAttributes);
  static AccessibilityChildBehavior.ignore.getter(v28);
  sub_100016878(&qword_1001C6668, type metadata accessor for IconView);
  v30 = v29;
  v31 = v45;
  View.accessibilityElement(children:)(v5, v45, v29);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v5, v48);
  sub_100011894((uint64_t)v7, type metadata accessor for IconView);
  type metadata accessor for CurrentObservationViewModel(0);
  type metadata accessor for ConditionViewModel(0);
  v32 = WeatherCondition.accessibilityDescription.getter();
  v34 = v33;
  v55[0] = v32;
  v55[1] = v33;
  v54[0] = v31;
  v54[1] = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v54, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v36 = sub_10001692C();
  v37 = v50;
  View.accessibilityLabel<A>(_:)(v55, v50, &type metadata for String, OpaqueTypeConformance2, v36);
  v38 = swift_bridgeObjectRelease(v34);
  (*(void (**)(char *, uint64_t, __n128))(v52 + 8))(v9, v37, v38);
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v51);
  sub_100016904((uint64_t)v12, &qword_1001C6660);
  v39 = v49;
  sub_1001561C0((uint64_t)v15, v49, &qword_1001C6660);
  v40 = v46;
  sub_1001449F4((uint64_t)v24, v46, type metadata accessor for LocationView);
  sub_100156004(v39, (uint64_t)v15, &qword_1001C6660);
  v41 = v53;
  sub_1001449F4(v40, v53, type metadata accessor for LocationView);
  v42 = sub_100005D40(&qword_1001C6670);
  v43 = v41 + *(int *)(v42 + 48);
  *(_QWORD *)v43 = 0x4010000000000000;
  *(_BYTE *)(v43 + 8) = 0;
  sub_100156004((uint64_t)v15, v41 + *(int *)(v42 + 64), &qword_1001C6660);
  sub_100016904(v39, &qword_1001C6660);
  sub_100011894((uint64_t)v24, type metadata accessor for LocationView);
  sub_100016904((uint64_t)v15, &qword_1001C6660);
  sub_100011894(v40, type metadata accessor for LocationView);
}

uint64_t sub_1001445B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A1454, 1);
}

uint64_t sub_1001445C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A142C, 1);
}

uint64_t sub_1001445D0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  sub_100156BF0();
  v4 = *(_QWORD *)(type metadata accessor for CurrentObservationView(0) - 8);
  v48 = *(unsigned __int8 *)(v4 + 80);
  v49 = v0;
  v46 = *(_QWORD *)(v4 + 64);
  v47 = (v48 + 16) & ~v48;
  v5 = v0 + v47;
  v6 = sub_1000A726C();
  sub_1001571CC(v6);
  v7 = (int *)sub_1000A7264();
  v8 = sub_10002338C();
  v9 = *(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  sub_100016BA8();
  sub_100157558();
  v10 = v0 + v47 + v7[7];
  sub_100005D40(&qword_1001BF090);
  sub_100016B5C(v10);
  sub_100016B5C(v5 + v7[8]);
  sub_100016A8C(v5 + v7[9]);
  v11 = v5 + v7[10];
  if (!sub_100016AC4(v11))
    sub_100016B5C(v11);
  v12 = v5 + v7[11];
  if (!sub_100016AC4(v12))
    sub_100016B5C(v12);
  v13 = v5 + v7[12];
  v45 = v2;
  v2(v13, v1);
  v14 = (int *)sub_1000A7274();
  sub_1000A727C();
  v15 = sub_1001578FC();
  v41 = v17;
  v42 = v16;
  ((void (*)(uint64_t))v17)(v15);
  sub_100016A8C(v13 + v14[6]);
  sub_100016A8C(v13 + v14[7]);
  v18 = sub_1000234BC();
  sub_100016BF0(v18);
  if (!sub_100016AB8(v5 + v7[15]))
    sub_100016BA8();
  if (!sub_100016AB8(v5 + v7[16]))
    sub_100016BA8();
  sub_1000234CC();
  v19 = sub_100016CD8();
  v43 = v21;
  v44 = v20;
  ((void (*)(uint64_t))v21)(v19);
  v22 = sub_1000234C4();
  sub_100016BF0(v22);
  v23 = v5 + v7[20];
  v24 = *(_QWORD *)(v23 + 8);
  if (v24)
  {
    swift_bridgeObjectRelease(v24);
    sub_100083184();
  }
  v25 = sub_100016B00();
  v26 = sub_10015795C(v25);
  v45(v26, v1);
  v27 = sub_10001C804();
  v28 = sub_1001579FC(v27);
  v9(v28);
  sub_100016B5C(v3 + *(int *)(v23 + 24));
  sub_100016B5C(v3 + *(int *)(v23 + 28));
  sub_100157370();
  v41(v8 + v14[5], v42);
  sub_100016A8C(v8 + v14[6]);
  sub_100016A8C(v8 + v14[7]);
  v29 = sub_10013FE24();
  sub_100016C04(v29);
  sub_100016A8C(v3 + *(int *)(v23 + 44));
  sub_100016A8C(v3 + *(int *)(v23 + 48));
  sub_100016A8C(v3 + *(int *)(v23 + 52));
  sub_100016A8C(v3 + *(int *)(v23 + 56));
  v30 = sub_10013FE1C();
  sub_100016C04(v30);
  v31 = v3 + *(int *)(v23 + 64);
  v32 = sub_1000A7254();
  if (!sub_100016AB8(v31))
    sub_1001569E0(*(_QWORD *)(v32 - 8));
  v33 = v3 + *(int *)(v23 + 68);
  v34 = sub_1000A725C();
  if (!sub_100016AB8(v33))
    sub_1001569E0(*(_QWORD *)(v34 - 8));
  v43(v3 + *(int *)(v23 + 72), v44);
  v35 = v5 + v7[6];
  v36 = sub_1000E01F0();
  if (!sub_1000F9F90(v35))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v35 + 8));
    v37 = sub_100156B1C();
    sub_100156D1C(v37);
    if (!sub_100016AB8(v35 + *(int *)(v36 + 24)))
      sub_100016B10();
    sub_100016A8C(v35 + *(int *)(v36 + 28));
  }
  v38 = v5 + v7[7];
  v39 = sub_100070DE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  sub_100016A8C(v5 + v7[8]);
  sub_100016B3C(v7[11]);
  sub_100016A8C(v5 + v7[12]);
  sub_100016B3C(v7[13]);
  sub_100016B3C(v7[14]);
  sub_100016B3C(v7[15]);
  sub_100016B3C(v7[16]);
  sub_100016B3C(v7[18]);
  sub_100016B3C(v7[19]);
  sub_100016A8C(v5 + v7[25]);
  return swift_deallocObject(v49, v47 + v46, v48 | 7);
}

void sub_1001449A8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CurrentObservationView(0) - 8) + 80);
  sub_10014001C(v1 + ((v3 + 16) & ~v3), a1);
}

void sub_1001449F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  v4 = sub_100016C68(a1, a2, a3);
  sub_100156FD8(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16));
  sub_100006338();
}

uint64_t type metadata accessor for CurrentObservationAccessibilityModifier(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C6918, (uint64_t)&nominal type descriptor for CurrentObservationAccessibilityModifier);
}

uint64_t type metadata accessor for ConditionDescriptionView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C66D0, (uint64_t)&nominal type descriptor for ConditionDescriptionView);
}

uint64_t type metadata accessor for LocationDegreesView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C69B0, (uint64_t)&nominal type descriptor for LocationDegreesView);
}

void sub_100144A64(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  v4 = sub_100016C68(a1, a2, a3);
  sub_100156FD8(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  sub_100006338();
}

unint64_t sub_100144A94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C65A8;
  if (!qword_1001C65A8)
  {
    v1 = sub_100005DC4(&qword_1001C6598);
    sub_100144AF8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C65A8);
  }
  return result;
}

unint64_t sub_100144AF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C65B0;
  if (!qword_1001C65B0)
  {
    v1 = sub_100005DC4(&qword_1001C65B8);
    sub_1001565B0(&qword_1001C65C0, &qword_1001C65C8);
    sub_1001565B0(&qword_1001C65D0, &qword_1001C65D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C65B0);
  }
  return result;
}

void sub_100144B9C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_100005D40(&qword_1001C6CE8);
  sub_100144BDC(v2, a2 + *(int *)(v4 + 44));
  sub_100006338();
}

void sub_100144BDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t KeyPath;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;

  v36 = a2;
  v35 = type metadata accessor for DegreesView(0);
  v3 = __chkstk_darwin(v35);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v31 - v6;
  v8 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocationView(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v31 - v15;
  sub_1001449F4(a1, (uint64_t)v10, type metadata accessor for CurrentObservationViewAttributes);
  KeyPath = swift_getKeyPath(&unk_1001851E8);
  v18 = (uint64_t *)&v16[*(int *)(v11 + 20)];
  *v18 = KeyPath;
  v19 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  sub_100144A64((uint64_t)v10, (uint64_t)v16, type metadata accessor for CurrentObservationViewAttributes);
  v20 = *(_QWORD *)(a1 + *(int *)(v8 + 108));
  v22 = static Alignment.center.getter(v21);
  _FrameLayout.init(width:height:alignment:)(&v37, 0, 1, v20, 0, v22, v23);
  v24 = v37;
  LOBYTE(v18) = v38;
  v34 = v39;
  v33 = v40;
  v31 = v42;
  v32 = v41;
  sub_1001449F4(a1, (uint64_t)v10, type metadata accessor for CurrentObservationViewAttributes);
  v25 = swift_getKeyPath(&unk_1001851E8);
  v26 = (uint64_t *)&v7[*(int *)(v35 + 20)];
  *v26 = v25;
  swift_storeEnumTagMultiPayload(v26, v19, 0);
  sub_100144A64((uint64_t)v10, (uint64_t)v7, type metadata accessor for CurrentObservationViewAttributes);
  sub_1001449F4((uint64_t)v16, (uint64_t)v14, type metadata accessor for LocationView);
  sub_1001449F4((uint64_t)v7, (uint64_t)v5, type metadata accessor for DegreesView);
  v27 = v36;
  sub_1001449F4((uint64_t)v14, v36, type metadata accessor for LocationView);
  v28 = sub_100005D40(&qword_1001C6CF0);
  v29 = v27 + *(int *)(v28 + 48);
  *(_QWORD *)v29 = 0;
  *(_BYTE *)(v29 + 8) = 1;
  *(_QWORD *)(v29 + 16) = v24;
  *(_BYTE *)(v29 + 24) = (_BYTE)v18;
  *(_QWORD *)(v29 + 32) = v34;
  *(_BYTE *)(v29 + 40) = v33;
  v30 = v31;
  *(_QWORD *)(v29 + 48) = v32;
  *(_QWORD *)(v29 + 56) = v30;
  sub_1001449F4((uint64_t)v5, v27 + *(int *)(v28 + 64), type metadata accessor for DegreesView);
  sub_100011894((uint64_t)v7, type metadata accessor for DegreesView);
  sub_100011894((uint64_t)v16, type metadata accessor for LocationView);
  sub_100011894((uint64_t)v5, type metadata accessor for DegreesView);
  sub_100011894((uint64_t)v14, type metadata accessor for LocationView);
}

void sub_100144ED0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[1] = a1;
  v2 = type metadata accessor for Font.Context(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (_DWORD *)((char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100005D40(&qword_1001C6A20);
  __chkstk_darwin(v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001C6A28);
  __chkstk_darwin(v9);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100145098(v1, (uint64_t)v8);
  v12 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CurrentObservationViewAttributes(0) + 52));
  type metadata accessor for ConditionDescriptionView(0);
  sub_1000C5030(v5);
  v13 = Font.descender(in:)(v5, v12);
  (*(void (**)(_DWORD *, uint64_t))(v3 + 8))(v5, v2);
  sub_100156004((uint64_t)v8, (uint64_t)v11, &qword_1001C6A20);
  v14 = &v11[*(int *)(v9 + 36)];
  *(_QWORD *)v14 = 0;
  *((double *)v14 + 1) = -v13;
  sub_100016904((uint64_t)v8, &qword_1001C6A20);
  sub_1001559B0(&qword_1001C6A30, &qword_1001C6A28, (void (*)(void))sub_100155A08);
  View.accessibilityRespondsToUserInteraction(_:)(0, v9, v15);
  sub_100016904((uint64_t)v11, &qword_1001C6A28);
}

void sub_100145098(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(_QWORD);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t OpaqueTypeConformance2;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  void (*v166)(char *, uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t KeyPath;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  _DWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t *v235;
  char *v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  char *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void (*v263)(_QWORD);
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unsigned __int8 v295;
  uint64_t v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char v303;
  uint64_t v304;
  uint64_t v305;

  v286 = a2;
  v285 = sub_100005D40(&qword_1001C6A50);
  __chkstk_darwin(v285);
  v280 = (uint64_t *)((char *)&v219 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_100005D40(&qword_1001C6A58);
  __chkstk_darwin(v4);
  v6 = (char *)&v219 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v278 = sub_100005D40(&qword_1001C6A60);
  __chkstk_darwin(v278);
  v256 = (uint64_t)&v219 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v255 = sub_100005D40(&qword_1001C6A68);
  __chkstk_darwin(v255);
  v235 = (uint64_t *)((char *)&v219 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v252 = sub_100005D40(&qword_1001C6A70);
  __chkstk_darwin(v252);
  v254 = (uint64_t)&v219 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = sub_100005D40(&qword_1001BF358);
  __chkstk_darwin(v253);
  v249 = (char *)&v219 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v268 = type metadata accessor for WeatherFormatPlaceholder(0);
  v232 = *(_QWORD *)(v268 - 8);
  __chkstk_darwin(v268);
  v247 = (char *)&v219 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v231 = *(_QWORD *)(v246 - 8);
  v12 = __chkstk_darwin(v246);
  v243 = (char *)&v219 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v233 = (char *)&v219 - v14;
  v239 = sub_100005D40(&qword_1001BF090);
  v267 = *(_QWORD *)(v239 - 8);
  __chkstk_darwin(v239);
  v236 = (char *)&v219 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v245 = type metadata accessor for TemperatureHighLowTextVertical(0);
  v241 = *(_QWORD *)(v245 - 8);
  __chkstk_darwin(v245);
  v238 = (char *)&v219 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = sub_100005D40(&qword_1001BF360);
  v240 = *(_QWORD *)(v244 - 8);
  __chkstk_darwin(v244);
  v237 = (char *)&v219 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = sub_100005D40(&qword_1001C6A78);
  __chkstk_darwin(v234);
  v242 = (char *)&v219 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v269 = sub_100005D40(&qword_1001C6A80);
  __chkstk_darwin(v269);
  v248 = (uint64_t)&v219 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v250 = sub_100005D40(&qword_1001C6A88);
  v225 = *(_QWORD *)(v250 - 8);
  v20 = __chkstk_darwin(v250);
  v223 = (char *)&v219 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v224 = (char *)&v219 - v22;
  v23 = sub_100005D40(&qword_1001C6A90);
  v24 = __chkstk_darwin(v23);
  v251 = (uint64_t)&v219 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v271 = (uint64_t)&v219 - v26;
  v228 = type metadata accessor for Font.Context(0);
  v227 = *(_QWORD *)(v228 - 8);
  __chkstk_darwin(v228);
  v226 = (_DWORD *)((char *)&v219 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_100005D40(&qword_1001C6A98);
  v29 = __chkstk_darwin(v28);
  v230 = (uint64_t)&v219 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v229 = (uint64_t *)((char *)&v219 - v31);
  v275 = sub_100005D40(&qword_1001C6AA0);
  __chkstk_darwin(v275);
  v276 = (uint64_t)&v219 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v262 = type metadata accessor for AccessibilityChildBehavior(0);
  v260 = *(_QWORD *)(v262 - 8);
  __chkstk_darwin(v262);
  v259 = (char *)&v219 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = sub_100005D40(&qword_1001C6AA8);
  __chkstk_darwin(v261);
  v257 = (uint64_t *)((char *)&v219 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v265 = (_QWORD *)sub_100005D40(&qword_1001C6AB0);
  v264 = *(v265 - 1);
  __chkstk_darwin(v265);
  v263 = (void (*)(_QWORD))((char *)&v219 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v274 = sub_100005D40(&qword_1001C6AB8);
  v36 = __chkstk_darwin(v274);
  v258 = (char *)&v219 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v266 = (uint64_t)&v219 - v38;
  v39 = sub_100005D40(&qword_1001C6AC0);
  v40 = __chkstk_darwin(v39);
  v270 = (uint64_t)&v219 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v272 = (uint64_t)&v219 - v42;
  v43 = sub_100005D40(&qword_1001BF0C0);
  __chkstk_darwin(v43);
  v287 = (uint64_t)&v219 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v288 = type metadata accessor for RainInlineContentViewModel(0);
  __chkstk_darwin(v288);
  v279 = (uint64_t)&v219 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100005D40(&qword_1001C6AC8);
  __chkstk_darwin(v46);
  v48 = (char *)&v219 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100005D40(&qword_1001C6AD0);
  v50 = __chkstk_darwin(v49);
  v52 = (char *)&v219 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v283 = (char *)&v219 - v53;
  v54 = type metadata accessor for IconView(0);
  v55 = __chkstk_darwin(v54);
  v57 = (char *)&v219 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55);
  v59 = (char *)&v219 - v58;
  v60 = sub_100005D40(&qword_1001C6AD8);
  v61 = __chkstk_darwin(v60);
  v63 = (char *)&v219 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v61);
  v65 = (char *)&v219 - v64;
  v289 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v66 = *(_BYTE *)(a1 + v289[24]) == 1;
  v284 = v6;
  v273 = v48;
  if (v66)
  {
    sub_1001449F4(a1, (uint64_t)v59, type metadata accessor for CurrentObservationViewAttributes);
    v68 = static Alignment.center.getter(v67);
    _FrameLayout.init(width:height:alignment:)(&v294, 0, 1, 0x4014000000000000, 0, v68, v69);
    v222 = v294;
    v221 = v295;
    v277 = v52;
    v70 = v296;
    v71 = v297;
    v281 = v46;
    v282 = v4;
    v73 = v298;
    v72 = v299;
    sub_1001449F4((uint64_t)v59, (uint64_t)v57, type metadata accessor for IconView);
    sub_1001449F4((uint64_t)v57, (uint64_t)v63, type metadata accessor for IconView);
    v74 = &v63[*(int *)(sub_100005D40(&qword_1001C6B68) + 48)];
    *(_QWORD *)v74 = 0;
    v74[8] = 1;
    *((_QWORD *)v74 + 2) = v222;
    v74[24] = v221;
    *((_QWORD *)v74 + 4) = v70;
    v52 = v277;
    v74[40] = v71;
    *((_QWORD *)v74 + 6) = v73;
    *((_QWORD *)v74 + 7) = v72;
    v46 = v281;
    v4 = v282;
    sub_100011894((uint64_t)v59, type metadata accessor for IconView);
    sub_100011894((uint64_t)v57, type metadata accessor for IconView);
    v75 = sub_100005D40(&qword_1001C6AE0);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v75);
    sub_1001561C0((uint64_t)v63, (uint64_t)v65, &qword_1001C6AD8);
  }
  else
  {
    v76 = sub_100005D40(&qword_1001C6AE0);
    v77 = _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v65, 1, 1, v76);
  }
  v79 = v288;
  v78 = v289;
  v80 = (uint64_t *)(a1 + v289[8]);
  v82 = *v80;
  v81 = v80[1];
  v83 = v82 & 0xFFFFFFFFFFFFLL;
  if ((v81 & 0x2000000000000000) != 0)
    v84 = HIBYTE(v81) & 0xF;
  else
    v84 = v83;
  v85 = v287;
  if (v84)
  {
    v86 = static HorizontalAlignment.center.getter(v77);
    v87 = (uint64_t)v280;
    *v280 = v86;
    *(_QWORD *)(v87 + 8) = 0;
    *(_BYTE *)(v87 + 16) = 1;
    v88 = sub_100005D40(&qword_1001C6AE8);
    sub_1001483B4(a1, (_QWORD *)(v87 + *(int *)(v88 + 44)));
    v89 = &qword_1001C6A50;
    v90 = (uint64_t)v284;
    sub_100156004(v87, (uint64_t)v284, &qword_1001C6A50);
    swift_storeEnumTagMultiPayload(v90, v4, 1);
    v91 = sub_100155A84();
    sub_1001565B0(&qword_1001C6B10, &qword_1001C6A50);
    v92 = (uint64_t)v283;
    _ConditionalContent<>.init(storage:)(v90, v46, v285, v91, v93);
    v94 = v87;
LABEL_20:
    sub_100016904(v94, v89);
    sub_100156004((uint64_t)v65, (uint64_t)v63, &qword_1001C6AD8);
    sub_100156004(v92, (uint64_t)v52, &qword_1001C6AD0);
    v217 = v286;
    sub_100156004((uint64_t)v63, v286, &qword_1001C6AD8);
    v218 = sub_100005D40(&qword_1001C6B18);
    sub_100156004((uint64_t)v52, v217 + *(int *)(v218 + 48), &qword_1001C6AD0);
    sub_100016904(v92, &qword_1001C6AD0);
    sub_100016904((uint64_t)v65, &qword_1001C6AD8);
    sub_100016904((uint64_t)v52, &qword_1001C6AD0);
    sub_100016904((uint64_t)v63, &qword_1001C6AD8);
    return;
  }
  sub_100156004(a1 + v289[6], v287, &qword_1001BF0C0);
  v95 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v85, 1, v79);
  v282 = v4;
  v281 = v46;
  if (v95 != 1)
  {
    v117 = v85;
    v118 = v279;
    sub_100144A64(v117, v279, type metadata accessor for RainInlineContentViewModel);
    v120 = static HorizontalAlignment.leading.getter(v119);
    v121 = (uint64_t)v257;
    *v257 = v120;
    *(_QWORD *)(v121 + 8) = 0;
    *(_BYTE *)(v121 + 16) = 1;
    v122 = sub_100005D40(&qword_1001C6B60);
    sub_1001469F4(a1, v118, (_QWORD *)(v121 + *(int *)(v122 + 44)));
    v123 = v259;
    static AccessibilityChildBehavior.ignore.getter(v124);
    sub_1001565B0(&qword_1001C6B00, &qword_1001C6AA8);
    v126 = v125;
    v127 = v263;
    v128 = v79;
    v129 = v261;
    View.accessibilityElement(children:)(v123, v261, v125);
    (*(void (**)(char *, uint64_t))(v260 + 8))(v123, v262);
    sub_100016904(v121, &qword_1001C6AA8);
    v130 = *(int *)(v128 + 28);
    v131 = (uint64_t)v284;
    v132 = v279;
    v133 = (uint64_t *)(v279 + v130);
    v135 = *v133;
    v134 = v133[1];
    v300 = v135;
    v301 = v134;
    v290 = v129;
    v291 = v126;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v290, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v137 = sub_10001692C();
    v138 = (uint64_t)v258;
    v139 = v265;
    View.accessibilityValue<A>(_:)(&v300, v265, &type metadata for String, OpaqueTypeConformance2, v137);
    (*(void (**)(void (*)(_QWORD), _QWORD *))(v264 + 8))(v127, v139);
    v140 = v266;
    sub_1001561C0(v138, v266, &qword_1001C6AB8);
    v141 = v276;
    sub_100156004(v140, v276, &qword_1001C6AB8);
    swift_storeEnumTagMultiPayload(v141, v275, 0);
    v142 = sub_100155B08();
    sub_1001565B0(&qword_1001C6B08, &qword_1001C6A60);
    v143 = (uint64_t)v273;
    _ConditionalContent<>.init(storage:)(v141, v274, v278, v142, v144);
    sub_100016904(v140, &qword_1001C6AB8);
    v145 = v132;
    v146 = v282;
    sub_100011894(v145, type metadata accessor for RainInlineContentViewModel);
LABEL_19:
    v89 = &qword_1001C6AC8;
    sub_100156004(v143, v131, &qword_1001C6AC8);
    swift_storeEnumTagMultiPayload(v131, v146, 0);
    v215 = sub_100155A84();
    sub_1001565B0(&qword_1001C6B10, &qword_1001C6A50);
    v92 = (uint64_t)v283;
    _ConditionalContent<>.init(storage:)(v131, v281, v285, v215, v216);
    v94 = v143;
    goto LABEL_20;
  }
  sub_100016904(v85, &qword_1001BF0C0);
  v97 = *(_BYTE *)(a1 + v78[23]);
  v277 = v52;
  v219 = v65;
  v220 = a1;
  if ((v97 & 1) != 0)
  {
    v98 = static HorizontalAlignment.center.getter(v96);
    v99 = (uint64_t)v229;
    *v229 = v98;
    *(_QWORD *)(v99 + 8) = 0;
    *(_BYTE *)(v99 + 16) = 1;
    v100 = sub_100005D40(&qword_1001C6B50);
    sub_1001475DC(a1, (_QWORD *)(v99 + *(int *)(v100 + 44)));
    v101 = *(_QWORD *)(a1 + v78[13]);
    type metadata accessor for ConditionDescriptionView(0);
    v102 = v226;
    sub_1000C5030(v226);
    v103 = Font.descender(in:)(v102, v101);
    v104 = (*(uint64_t (**)(_DWORD *, uint64_t))(v227 + 8))(v102, v228);
    v105 = static Alignment.center.getter(v104);
    ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v300, 0, 1, v103 + 8.0, 0, v105, v106);
    v107 = v300;
    LODWORD(v288) = v301;
    v108 = v302;
    v109 = v303;
    v110 = v304;
    v111 = v305;
    v112 = v230;
    sub_100156004(v99, v230, &qword_1001C6A98);
    v113 = v270;
    sub_100156004(v112, v270, &qword_1001C6A98);
    v114 = v113 + *(int *)(sub_100005D40(&qword_1001C6B58) + 48);
    *(_QWORD *)v114 = 0;
    *(_BYTE *)(v114 + 8) = 1;
    *(_QWORD *)(v114 + 16) = v107;
    v78 = v289;
    *(_BYTE *)(v114 + 24) = v288;
    *(_QWORD *)(v114 + 32) = v108;
    a1 = v220;
    *(_BYTE *)(v114 + 40) = v109;
    *(_QWORD *)(v114 + 48) = v110;
    *(_QWORD *)(v114 + 56) = v111;
    sub_100016904(v99, &qword_1001C6A98);
    sub_100016904(v112, &qword_1001C6A98);
    v115 = sub_100005D40(&qword_1001C6B20);
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v113, 0, 1, v115);
    sub_1001561C0(v113, v272, &qword_1001C6AC0);
  }
  else
  {
    v147 = sub_100005D40(&qword_1001C6B20);
    v116 = _s13WeatherWidget20WeatherDataViewModelOwst_0(v272, 1, 1, v147);
  }
  v288 = (uint64_t)v63;
  if (*(_BYTE *)(a1 + v78[22]) != 1)
  {
    v199 = static HorizontalAlignment.center.getter(v116);
    v200 = (uint64_t)v235;
    *v235 = v199;
    *(_QWORD *)(v200 + 8) = 0;
    *(_BYTE *)(v200 + 16) = 1;
    v201 = sub_100005D40(&qword_1001C6B28);
    sub_100147C68(a1, (_QWORD *)(v200 + *(int *)(v201 + 44)));
    v202 = v254;
    sub_100156004(v200, v254, &qword_1001C6A68);
    swift_storeEnumTagMultiPayload(v202, v252, 1);
    v203 = sub_100155BD4();
    sub_1001565B0(&qword_1001BF458, &qword_1001BF358);
    v290 = v269;
    v291 = v253;
    v292 = v203;
    v293 = v204;
    v205 = swift_getOpaqueTypeConformance2(&v290, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_1001565B0(&qword_1001C6B40, &qword_1001C6A68);
    v197 = v271;
    _ConditionalContent<>.init(storage:)(v202, v250, v255, v205, v206);
    sub_100016904(v200, &qword_1001C6A68);
    goto LABEL_18;
  }
  v279 = a1 + v78[5];
  v148 = v279;
  v266 = type metadata accessor for DailyForecastViewModel(0);
  v149 = v148 + *(int *)(v266 + 24);
  v265 = *(_QWORD **)(v267 + 16);
  v150 = v236;
  v151 = v239;
  v152 = ((uint64_t (*)(char *, uint64_t, uint64_t))v265)(v236, v149, v239);
  v153 = v233;
  v154 = static WeatherFormatStyle<>.weather.getter(v152);
  v155 = v243;
  NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v154);
  v259 = *(char **)(v231 + 8);
  v156 = v246;
  ((void (*)(char *, uint64_t))v259)(v153, v246);
  LODWORD(v264) = enum case for WeatherFormatPlaceholder.none(_:);
  v157 = v232;
  v263 = *(void (**)(_QWORD))(v232 + 104);
  v158 = v247;
  v263(v247);
  v262 = type metadata accessor for UnitManager(0);
  v159 = static UnitManager.standard.getter(v262);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v261 = v160;
  v287 = Measurement.formatted<A>(_:placeholder:unitManager:)(v155, v158, v159, &protocol witness table for UnitManager, v151, v156);
  v280 = v161;
  swift_release(v159);
  v260 = *(_QWORD *)(v157 + 8);
  v162 = v268;
  ((void (*)(char *, uint64_t))v260)(v158, v268);
  v163 = (void (*)(char *, uint64_t))v259;
  ((void (*)(char *, uint64_t))v259)(v155, v156);
  v267 = *(_QWORD *)(v267 + 8);
  ((void (*)(char *, uint64_t))v267)(v150, v151);
  v164 = ((uint64_t (*)(char *, uint64_t, uint64_t))v265)(v150, v279 + *(int *)(v266 + 28), v151);
  v165 = static WeatherFormatStyle<>.weather.getter(v164);
  NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v165);
  v163(v153, v156);
  v166 = v163;
  v167 = ((uint64_t (*)(char *, _QWORD, uint64_t))v263)(v158, v264, v162);
  v168 = static UnitManager.standard.getter(v167);
  v169 = Measurement.formatted<A>(_:placeholder:unitManager:)(v155, v158, v168, &protocol witness table for UnitManager, v151, v156);
  v171 = v170;
  swift_release(v168);
  ((void (*)(char *, uint64_t))v260)(v158, v162);
  v166(v155, v156);
  ((void (*)(char *, uint64_t))v267)(v150, v151);
  v172 = v238;
  v173 = TemperatureHighLowTextVertical.init(highTemperature:lowTemperature:showNumericOnlyHighLow:scaleFactor:additionalSpacing:)(v287, v280, v169, v171, *(unsigned __int8 *)(v220 + v289[21]), 1.0, 0.0);
  v174 = v237;
  TemperatureHighLowTextVertical.defaultAccessibilityLabel()(v173);
  (*(void (**)(char *, uint64_t))(v241 + 8))(v172, v245);
  v175 = v240;
  v176 = (uint64_t)v242;
  v177 = v244;
  (*(void (**)(char *, char *, uint64_t))(v240 + 16))(v242, v174, v244);
  *(_OWORD *)(v176 + *(int *)(v234 + 36)) = xmmword_10017A640;
  v178 = (*(uint64_t (**)(char *, uint64_t))(v175 + 8))(v174, v177);
  v179 = static Color.white.getter(v178);
  KeyPath = swift_getKeyPath(&unk_100185578);
  v181 = v248;
  sub_100156004(v176, v248, &qword_1001C6A78);
  v182 = v269;
  v183 = (uint64_t *)(v181 + *(int *)(v269 + 36));
  *v183 = KeyPath;
  v183[1] = v179;
  sub_100016904(v176, &qword_1001C6A78);
  v184 = enum case for DynamicTypeSize.large(_:);
  v185 = type metadata accessor for DynamicTypeSize(0);
  v186 = (uint64_t)v249;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v185 - 8) + 104))(v249, v184, v185);
  sub_100016878(&qword_1001BF468, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v186, v186, v185) & 1) != 0)
  {
    v187 = sub_100155BD4();
    sub_1001565B0(&qword_1001BF458, &qword_1001BF358);
    v189 = v188;
    v190 = v223;
    v191 = v253;
    View.dynamicTypeSize<A>(_:)(v186, v182, v253, v187, v188);
    sub_100016904(v186, &qword_1001BF358);
    sub_100016904(v181, &qword_1001C6A80);
    v192 = v225;
    v193 = v224;
    v194 = v250;
    (*(void (**)(char *, char *, uint64_t))(v225 + 32))(v224, v190, v250);
    v195 = v254;
    (*(void (**)(uint64_t, char *, uint64_t))(v192 + 16))(v254, v193, v194);
    swift_storeEnumTagMultiPayload(v195, v252, 0);
    v290 = v182;
    v291 = v191;
    v292 = v187;
    v293 = v189;
    v196 = swift_getOpaqueTypeConformance2(&v290, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_1001565B0(&qword_1001C6B40, &qword_1001C6A68);
    v197 = v271;
    _ConditionalContent<>.init(storage:)(v195, v194, v255, v196, v198);
    (*(void (**)(char *, uint64_t))(v192 + 8))(v193, v194);
LABEL_18:
    v131 = (uint64_t)v284;
    v146 = v282;
    v65 = v219;
    v207 = v272;
    v208 = v270;
    sub_100156004(v272, v270, &qword_1001C6AC0);
    v209 = v251;
    sub_100156004(v197, v251, &qword_1001C6A90);
    v210 = v256;
    sub_100156004(v208, v256, &qword_1001C6AC0);
    v211 = sub_100005D40(&qword_1001C6B48);
    sub_100156004(v209, v210 + *(int *)(v211 + 48), &qword_1001C6A90);
    sub_100016904(v209, &qword_1001C6A90);
    sub_100016904(v208, &qword_1001C6AC0);
    v212 = v276;
    sub_100156004(v210, v276, &qword_1001C6A60);
    swift_storeEnumTagMultiPayload(v212, v275, 1);
    v213 = sub_100155B08();
    sub_1001565B0(&qword_1001C6B08, &qword_1001C6A60);
    v143 = (uint64_t)v273;
    _ConditionalContent<>.init(storage:)(v212, v274, v278, v213, v214);
    sub_100016904(v210, &qword_1001C6A60);
    sub_100016904(v271, &qword_1001C6A90);
    sub_100016904(v207, &qword_1001C6AC0);
    v52 = v277;
    v63 = (char *)v288;
    goto LABEL_19;
  }
  __break(1u);
}

void sub_1001469F4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t KeyPath;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  double v76;
  uint64_t v77;
  uint64_t (*v78)(_DWORD *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, char *, uint64_t);
  char *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  char *v123;
  int *v124;
  char *v125;
  char *v126;
  char *v127;
  _DWORD *v128;
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  _DWORD *v136;
  uint64_t v137;
  uint64_t (*v138)(_DWORD *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  unsigned __int8 v173;
  uint64_t v174;
  unsigned __int8 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 v179;
  char *v180;
  unsigned __int8 v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  unsigned __int8 v185;
  uint64_t v186;
  unsigned __int8 v187;
  uint64_t v188;
  _DWORD *v189;

  v154 = a2;
  v159 = a3;
  v153 = type metadata accessor for AttributedString(0);
  v152 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v151 = (char *)&v130 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_100005D40(&qword_1001C1F50);
  v157 = *(_QWORD *)(v158 - 8);
  v5 = __chkstk_darwin(v158);
  v156 = (char *)&v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v155 = (char *)&v130 - v7;
  v142 = sub_100005D40(&qword_1001C6B70);
  __chkstk_darwin(v142);
  v141 = (uint64_t *)((char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v137 = type metadata accessor for Text.TruncationMode(0);
  v161 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v160 = (char *)&v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for Font.Leading(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100005D40(&qword_1001C6B78);
  __chkstk_darwin(v135);
  v134 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100005D40(&qword_1001C6B80);
  v12 = __chkstk_darwin(v143);
  v163 = (uint64_t)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v164 = (uint64_t)&v130 - v14;
  v15 = type metadata accessor for Font.Context(0);
  v16 = *(_QWORD *)(v15 - 8);
  v139 = v15;
  __chkstk_darwin(v15);
  v18 = (_DWORD *)((char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v144 = type metadata accessor for CurrentObservationViewAttributes(0);
  v162 = *(int *)(v144 + 52);
  v165 = a1;
  v19 = *(_QWORD *)(a1 + v162);
  v140 = a1 + *(int *)(type metadata accessor for ConditionDescriptionView(0) + 24);
  sub_1000C5030(v18);
  v136 = v18;
  v20 = Font.capHeight(in:)(v18, v19);
  v138 = *(uint64_t (**)(_DWORD *, uint64_t))(v16 + 8);
  v21 = v138(v18, v15);
  v22 = static Alignment.center.getter(v21);
  _FrameLayout.init(width:height:alignment:)(&v172, 0, 1, *(_QWORD *)&v20, 0, v22, v23);
  v150 = v172;
  v149 = v173;
  v148 = v174;
  v147 = v175;
  v146 = v176;
  v145 = v177;
  v24 = LocalizedStringKey.init(stringLiteral:)(0x6F2065636E616843, 0xEE006E6961522066);
  v28 = Text.init(_:tableName:bundle:comment:)(v24, v26, v25 & 1, v27, 0, 0, 0);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v35 = static Color.white.getter(v28);
  v36 = Text.foregroundColor(_:)(v35, v28, v30, v34, v32);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  swift_release(v35);
  LOBYTE(v35) = v40 & 1;
  sub_100016868(v28, v30, v34);
  v43 = swift_bridgeObjectRelease(v32);
  v44 = *(_QWORD *)(v165 + v162);
  v45 = v132;
  v46 = v131;
  v47 = v133;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v132 + 104))(v131, enum case for Font.Leading.tight(_:), v133, v43);
  v48 = Font.leading(_:)(v46, v44);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
  v49 = Text.font(_:)(v48, v36, v38, v40 & 1, v42);
  v51 = v50;
  LOBYTE(v46) = v52;
  v54 = v53;
  swift_release(v48);
  LOBYTE(v48) = v46 & 1;
  sub_100016868(v36, v38, v35);
  swift_bridgeObjectRelease(v42);
  v56 = static Font.Weight.medium.getter(v55);
  v57 = Text.fontWeight(_:)(*(_QWORD *)&v56, 0, v49, v51, v46 & 1, v54);
  v59 = v58;
  v61 = v60;
  LOBYTE(v38) = v62 & 1;
  sub_100016868(v49, v51, v48);
  swift_bridgeObjectRelease(v54);
  KeyPath = swift_getKeyPath(&unk_1001855D8);
  v64 = v161;
  v65 = v160;
  v66 = v137;
  (*(void (**)(char *, _QWORD, uint64_t))(v161 + 104))(v160, enum case for Text.TruncationMode.tail(_:), v137);
  v67 = swift_getKeyPath(&unk_100185608);
  v68 = v141;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))((char *)v141 + *(int *)(v142 + 28), v65, v66);
  *v68 = v67;
  v69 = (uint64_t)v134;
  sub_100156004((uint64_t)v68, (uint64_t)&v134[*(int *)(v135 + 36)], &qword_1001C6B70);
  *(_QWORD *)v69 = v57;
  *(_QWORD *)(v69 + 8) = v59;
  *(_BYTE *)(v69 + 16) = v38;
  *(_QWORD *)(v69 + 24) = v61;
  *(_QWORD *)(v69 + 32) = KeyPath;
  *(_BYTE *)(v69 + 40) = 0;
  sub_100016828(v57, v59, v38);
  swift_bridgeObjectRetain(v61);
  swift_retain(KeyPath);
  sub_100016904((uint64_t)v68, &qword_1001C6B70);
  (*(void (**)(char *, uint64_t))(v161 + 8))(v160, v66);
  sub_100016868(v57, v59, v38);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v61);
  v70 = swift_getKeyPath(&unk_100185638);
  v71 = v163;
  sub_100156004(v69, v163, &qword_1001C6B78);
  v72 = v71 + *(int *)(v143 + 36);
  *(_QWORD *)v72 = v70;
  *(_QWORD *)(v72 + 8) = 2;
  *(_BYTE *)(v72 + 16) = 0;
  sub_100016904(v69, &qword_1001C6B78);
  sub_1001561C0(v71, v164, &qword_1001C6B80);
  v73 = v165;
  v74 = *(_QWORD *)(v165 + v162);
  v75 = v136;
  sub_1000C5030(v136);
  v76 = Font.descender(in:)(v75, v74);
  v77 = v139;
  v78 = v138;
  v79 = v138(v75, v139);
  v80 = static Alignment.center.getter(v79);
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v178, 0, 1, v76 + 8.0, 0, v80, v81);
  v162 = v178;
  LODWORD(v161) = v179;
  v160 = v180;
  LODWORD(v143) = v181;
  v142 = v182;
  v141 = (uint64_t *)v183;
  v82 = *(int *)(v144 + 72);
  v83 = *(_QWORD *)(v73 + v82);
  sub_1000C5030(v75);
  v84 = Font.capHeight(in:)(v75, v83);
  v85 = v78(v75, v77);
  v86 = static Alignment.center.getter(v85);
  _FrameLayout.init(width:height:alignment:)(&v184, 0, 1, *(_QWORD *)&v84, 0, v86, v87);
  v144 = v184;
  LODWORD(v140) = v185;
  v139 = v186;
  LODWORD(v138) = v187;
  v137 = v188;
  v136 = v189;
  v88 = type metadata accessor for RainInlineContentViewModel(0);
  v89 = v151;
  (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v151, v154 + *(int *)(v88 + 20), v153);
  v90 = Text.init(_:)(v89);
  v92 = v91;
  v94 = v93;
  v96 = v95 & 1;
  v97 = static Color.white.getter(v90);
  v98 = Text.foregroundColor(_:)(v97, v90, v92, v96, v94);
  v100 = v99;
  LOBYTE(v69) = v101;
  v103 = v102;
  swift_release(v97);
  LOBYTE(v97) = v69 & 1;
  sub_100016868(v90, v92, v96);
  swift_bridgeObjectRelease(v94);
  v104 = Text.font(_:)(*(_QWORD *)(v165 + v82), v98, v100, v69 & 1, v103);
  v106 = v105;
  v108 = v107;
  LOBYTE(v69) = v109 & 1;
  sub_100016868(v98, v100, v97);
  swift_bridgeObjectRelease(v103);
  v110 = swift_getKeyPath(&unk_1001855D8);
  v166 = v104;
  v167 = v106;
  v168 = v69;
  v169 = v108;
  v170 = v110;
  v171 = 0;
  v111 = static Font.Weight.medium.getter(v110);
  v112 = sub_100005D40(&qword_1001C1F58);
  v113 = sub_1000A67D4();
  v114 = v155;
  View.fontWeight(_:)(*(_QWORD *)&v111, 0, v112, v113);
  sub_100016868(v104, v106, v69);
  swift_release(v110);
  swift_bridgeObjectRelease(v108);
  v115 = v164;
  v116 = v163;
  sub_100156004(v164, v163, &qword_1001C6B80);
  v117 = v157;
  v118 = *(void (**)(char *, char *, uint64_t))(v157 + 16);
  v119 = v156;
  v120 = v158;
  v118(v156, v114, v158);
  v121 = v159;
  *v159 = 0;
  *((_BYTE *)v121 + 8) = 1;
  v121[2] = v150;
  *((_BYTE *)v121 + 24) = v149;
  v121[4] = v148;
  *((_BYTE *)v121 + 40) = v147;
  v122 = v145;
  v121[6] = v146;
  v121[7] = v122;
  v123 = (char *)v121;
  v124 = (int *)sub_100005D40(&qword_1001C6B88);
  sub_100156004(v116, (uint64_t)&v123[v124[12]], &qword_1001C6B80);
  v125 = &v123[v124[16]];
  *(_QWORD *)v125 = 0;
  v125[8] = 1;
  *((_QWORD *)v125 + 2) = v162;
  v125[24] = v161;
  *((_QWORD *)v125 + 4) = v160;
  v125[40] = v143;
  v126 = (char *)v141;
  *((_QWORD *)v125 + 6) = v142;
  *((_QWORD *)v125 + 7) = v126;
  v127 = &v123[v124[20]];
  *(_QWORD *)v127 = 0;
  v127[8] = 1;
  *((_QWORD *)v127 + 2) = v144;
  v127[24] = v140;
  *((_QWORD *)v127 + 4) = v139;
  v127[40] = (char)v138;
  v128 = v136;
  *((_QWORD *)v127 + 6) = v137;
  *((_QWORD *)v127 + 7) = v128;
  v118(&v123[v124[24]], v119, v120);
  v129 = *(void (**)(char *, uint64_t))(v117 + 8);
  v129(v114, v120);
  sub_100016904(v115, &qword_1001C6B80);
  v129(v119, v120);
  sub_100016904(v116, &qword_1001C6B80);
}

void sub_1001475DC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t KeyPath;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  _QWORD v97[2];
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;
  unsigned __int8 v101;
  uint64_t v102;
  uint64_t v103;

  v94 = a2;
  v91 = sub_100005D40(&qword_1001C6B70);
  __chkstk_darwin(v91);
  v89 = (uint64_t *)((char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v88 = type metadata accessor for Text.TruncationMode(0);
  v96 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v95 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for Font.Leading(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v77 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100005D40(&qword_1001C6B78);
  __chkstk_darwin(v87);
  v86 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100005D40(&qword_1001C6B80);
  v7 = __chkstk_darwin(v93);
  v90 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v92 = (uint64_t)&v75 - v9;
  v10 = type metadata accessor for Font.Context(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (_DWORD *)((char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = *(int *)(type metadata accessor for CurrentObservationViewAttributes(0) + 52);
  v14 = *(_QWORD *)(a1 + v76);
  type metadata accessor for ConditionDescriptionView(0);
  v75 = a1;
  sub_1000C5030(v13);
  v15 = Font.capHeight(in:)(v13, v14);
  v16 = (*(uint64_t (**)(_DWORD *, uint64_t))(v11 + 8))(v13, v10);
  v17 = static Alignment.center.getter(v16);
  _FrameLayout.init(width:height:alignment:)(&v98, 0, 1, *(_QWORD *)&v15, 0, v17, v18);
  v85 = v98;
  v84 = v99;
  v83 = v100;
  v82 = v101;
  v81 = v102;
  v80 = v103;
  v19 = a1 + *(int *)(type metadata accessor for CurrentObservationViewModel(0) + 48);
  v20 = (_QWORD *)(v19 + *(int *)(type metadata accessor for ConditionViewModel(0) + 28));
  v21 = v20[1];
  v97[0] = *v20;
  v97[1] = v21;
  v22 = sub_10001692C();
  swift_bridgeObjectRetain(v21);
  v23 = Text.init<A>(_:)(v97, &type metadata for String, v22);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = static Color.white.getter(v23);
  v31 = Text.foregroundColor(_:)(v30, v23, v25, v29, v27);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  swift_release(v30);
  v38 = v35 & 1;
  sub_100016868(v23, v25, v29);
  v39 = swift_bridgeObjectRelease(v27);
  v40 = *(_QWORD *)(v75 + v76);
  v41 = v78;
  v42 = v77;
  v43 = v79;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v78 + 104))(v77, enum case for Font.Leading.tight(_:), v79, v39);
  v44 = Font.leading(_:)(v42, v40);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  v45 = v37;
  v46 = Text.font(_:)(v44, v31, v33, v38, v37);
  v48 = v47;
  LOBYTE(v42) = v49;
  v51 = v50;
  swift_release(v44);
  LOBYTE(v43) = v42 & 1;
  sub_100016868(v31, v33, v38);
  swift_bridgeObjectRelease(v45);
  v53 = static Font.Weight.medium.getter(v52);
  v54 = Text.fontWeight(_:)(*(_QWORD *)&v53, 0, v46, v48, v42 & 1, v51);
  v56 = v55;
  v58 = v57;
  LOBYTE(v45) = v59 & 1;
  sub_100016868(v46, v48, v43);
  swift_bridgeObjectRelease(v51);
  KeyPath = swift_getKeyPath(&unk_1001855D8);
  v62 = v95;
  v61 = v96;
  v63 = v88;
  (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v95, enum case for Text.TruncationMode.tail(_:), v88);
  v64 = swift_getKeyPath(&unk_100185608);
  v65 = v89;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))((char *)v89 + *(int *)(v91 + 28), v62, v63);
  *v65 = v64;
  v66 = (uint64_t)v86;
  sub_100156004((uint64_t)v65, (uint64_t)&v86[*(int *)(v87 + 36)], &qword_1001C6B70);
  *(_QWORD *)v66 = v54;
  *(_QWORD *)(v66 + 8) = v56;
  *(_BYTE *)(v66 + 16) = v45;
  *(_QWORD *)(v66 + 24) = v58;
  *(_QWORD *)(v66 + 32) = KeyPath;
  *(_BYTE *)(v66 + 40) = 0;
  sub_100016828(v54, v56, v45);
  swift_bridgeObjectRetain(v58);
  swift_retain(KeyPath);
  sub_100016904((uint64_t)v65, &qword_1001C6B70);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v63);
  sub_100016868(v54, v56, v45);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v58);
  v67 = swift_getKeyPath(&unk_100185638);
  v68 = v90;
  sub_100156004(v66, v90, &qword_1001C6B78);
  v69 = v68 + *(int *)(v93 + 36);
  *(_QWORD *)v69 = v67;
  *(_QWORD *)(v69 + 8) = 2;
  *(_BYTE *)(v69 + 16) = 0;
  sub_100016904(v66, &qword_1001C6B78);
  v70 = v92;
  sub_1001561C0(v68, v92, &qword_1001C6B80);
  sub_100156004(v70, v68, &qword_1001C6B80);
  v71 = v94;
  *v94 = 0;
  *((_BYTE *)v71 + 8) = 1;
  v71[2] = v85;
  *((_BYTE *)v71 + 24) = v84;
  v71[4] = v83;
  *((_BYTE *)v71 + 40) = v82;
  v72 = v80;
  v71[6] = v81;
  v71[7] = v72;
  v73 = v71;
  v74 = sub_100005D40(&qword_1001C6B90);
  sub_100156004(v68, (uint64_t)v73 + *(int *)(v74 + 48), &qword_1001C6B80);
  sub_100016904(v70, &qword_1001C6B80);
  sub_100016904(v68, &qword_1001C6B80);
}

uint64_t sub_100147C68@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  void (*v47)(char *, uint64_t);
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char v76;
  char v77;
  char v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v85;
  char v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *);
  unsigned int v93;
  uint64_t (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  char v124;
  char v125;
  char v126;
  uint64_t v127;
  unsigned __int8 v128;
  uint64_t v129;
  unsigned __int8 v130;
  uint64_t v131;
  uint64_t v132;

  v123 = a2;
  v3 = type metadata accessor for TemperatureHighLowText.Style(0);
  v121 = *(_QWORD *)(v3 - 8);
  v122 = v3;
  __chkstk_darwin(v3);
  v120 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for WeatherFormatPlaceholder(0);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v105 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v6 = *(_QWORD *)(v104 - 8);
  v7 = __chkstk_darwin(v104);
  v101 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v87 - v9;
  v98 = sub_100005D40(&qword_1001BF090);
  v91 = *(_QWORD *)(v98 - 8);
  v11 = v91;
  __chkstk_darwin(v98);
  v97 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for TemperatureHighLowText(0);
  v117 = *(_QWORD *)(v119 - 8);
  v13 = __chkstk_darwin(v119);
  v118 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v116 = (char *)&v87 - v16;
  __chkstk_darwin(v15);
  v115 = (char *)&v87 - v17;
  v18 = type metadata accessor for Font.Context(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (_DWORD *)((char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for CurrentObservationViewAttributes(0);
  v108 = *(int *)(v22 + 72);
  v103 = v22;
  v23 = *(_QWORD *)(a1 + v108);
  type metadata accessor for ConditionDescriptionView(0);
  v102 = a1;
  sub_1000C5030(v21);
  v24 = Font.capHeight(in:)(v21, v23);
  v25 = (*(uint64_t (**)(_DWORD *, uint64_t))(v19 + 8))(v21, v18);
  v26 = static Alignment.center.getter(v25);
  _FrameLayout.init(width:height:alignment:)(&v127, 0, 1, *(_QWORD *)&v24, 0, v26, v27);
  v114 = v127;
  v110 = v128;
  v113 = v129;
  v109 = v130;
  v112 = v131;
  v111 = v132;
  v96 = a1 + *(int *)(v22 + 20);
  v28 = v96;
  v95 = type metadata accessor for DailyForecastViewModel(0);
  v29 = v28 + *(int *)(v95 + 24);
  v94 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v30 = v97;
  v31 = v98;
  v32 = v94(v97, v29, v98);
  v33 = v10;
  v34 = static WeatherFormatStyle<>.weather.getter(v32);
  v35 = v101;
  NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v34);
  v88 = *(void (**)(char *, uint64_t))(v6 + 8);
  v36 = v104;
  v88(v33, v104);
  v93 = enum case for WeatherFormatPlaceholder.none(_:);
  v37 = v106;
  v92 = *(void (**)(char *))(v106 + 104);
  v38 = v105;
  v39 = v107;
  v92(v105);
  v90 = type metadata accessor for UnitManager(0);
  v40 = static UnitManager.standard.getter(v90);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v89 = v41;
  v100 = Measurement.formatted<A>(_:placeholder:unitManager:)(v35, v38, v40, &protocol witness table for UnitManager, v31, v36);
  v99 = v42;
  swift_release(v40);
  v106 = *(_QWORD *)(v37 + 8);
  v43 = v39;
  ((void (*)(char *, uint64_t))v106)(v38, v39);
  v44 = v35;
  v45 = v35;
  v46 = v88;
  v88(v45, v36);
  v47 = *(void (**)(char *, uint64_t))(v91 + 8);
  v47(v30, v31);
  v48 = v30;
  v49 = v30;
  v50 = v31;
  v51 = v94(v48, v96 + *(int *)(v95 + 28), v31);
  v52 = static WeatherFormatStyle<>.weather.getter(v51);
  v53 = v44;
  NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v52);
  v46(v33, v36);
  v54 = v46;
  v55 = v43;
  v56 = ((uint64_t (*)(char *, _QWORD, uint64_t))v92)(v38, v93, v43);
  v57 = static UnitManager.standard.getter(v56);
  v96 = Measurement.formatted<A>(_:placeholder:unitManager:)(v44, v38, v57, &protocol witness table for UnitManager, v50, v36);
  v59 = v58;
  swift_release(v57);
  ((void (*)(char *, uint64_t))v106)(v38, v55);
  v54(v53, v36);
  v47(v49, v50);
  v60 = *(_QWORD *)(v102 + v108);
  v61 = v120;
  if (*(_BYTE *)(v102 + *(int *)(v103 + 84)))
    v62 = &enum case for TemperatureHighLowText.Style.numbersOnly(_:);
  else
    v62 = (unsigned int *)&enum case for TemperatureHighLowText.Style.textLabels(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v121 + 104))(v120, *v62, v122);
  v63 = swift_retain(v60);
  v64 = static Alignment.leading.getter(v63);
  v66 = v65;
  v67 = static Color.white.getter(v64);
  v86 = 0;
  v85 = v66;
  v68 = v116;
  TemperatureHighLowText.init(highTemperature:lowTemperature:font:foregroundColor:style:textAlignment:alignVertically:textHeightFrame:)(v100, v99, v96, v59, v60, v67, v61, v64, 0.0, v85, v86);
  v69 = v117;
  v70 = v115;
  v71 = v119;
  (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v115, v68, v119);
  v126 = 1;
  v125 = v110;
  v124 = v109;
  v72 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
  v73 = v69;
  v74 = v118;
  v75 = v71;
  v72(v118, v70, v71);
  v76 = v126;
  v77 = v125;
  v78 = v124;
  v79 = v123;
  *v123 = 0;
  *((_BYTE *)v79 + 8) = v76;
  v79[2] = v114;
  *((_BYTE *)v79 + 24) = v77;
  v79[4] = v113;
  *((_BYTE *)v79 + 40) = v78;
  v80 = v111;
  v79[6] = v112;
  v79[7] = v80;
  v81 = (char *)v79;
  v82 = sub_100005D40(&qword_1001C6B98);
  v72(&v81[*(int *)(v82 + 48)], v74, v75);
  v83 = *(void (**)(char *, uint64_t))(v73 + 8);
  v83(v70, v75);
  return ((uint64_t (*)(char *, uint64_t))v83)(v74, v75);
}

uint64_t sub_1001483B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  char *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t KeyPath;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  void (*v63)(_DWORD *, uint64_t);
  double v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(_DWORD *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  unsigned __int8 v124;
  uint64_t v125;
  unsigned __int8 v126;
  uint64_t v127;
  uint64_t v128;

  v100 = a2;
  v95 = sub_100005D40(&qword_1001BF358);
  __chkstk_darwin(v95);
  v111 = (char *)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for Font.Leading(0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100005D40(&qword_1001C6BA0);
  v98 = *(_QWORD *)(v99 - 8);
  v5 = __chkstk_darwin(v99);
  v97 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v96 = (char *)&v89 - v7;
  v8 = type metadata accessor for Font.Context(0);
  v9 = *(_QWORD *)(v8 - 8);
  v108 = v8;
  __chkstk_darwin(v8);
  v11 = (_DWORD *)((char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for CurrentObservationViewAttributes(0);
  v13 = *(int *)(v12 + 52);
  v14 = v12;
  v102 = v12;
  v110 = v13;
  v15 = *(_QWORD *)(a1 + v13);
  v109 = a1 + *(int *)(type metadata accessor for ConditionDescriptionView(0) + 24);
  sub_1000C5030(v11);
  v16 = Font.capHeight(in:)(v11, v15);
  v107 = *(void (**)(_DWORD *, uint64_t))(v9 + 8);
  v17 = ((uint64_t (*)(_DWORD *, uint64_t))v107)(v11, v8);
  v18 = static Alignment.center.getter(v17);
  _FrameLayout.init(width:height:alignment:)(&v123, 0, 1, *(_QWORD *)&v16, 0, v18, v19);
  v94 = v123;
  v93 = v124;
  v92 = v125;
  v91 = v126;
  v90 = v127;
  v89 = v128;
  v20 = (uint64_t *)(a1 + *(int *)(v14 + 32));
  v103 = a1;
  v21 = v20[1];
  v112 = *v20;
  v113 = (char *)v21;
  v22 = sub_10001692C();
  swift_bridgeObjectRetain(v21);
  v23 = Text.init<A>(_:)(&v112, &type metadata for String, v22);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = static Color.white.getter(v23);
  v31 = Text.foregroundColor(_:)(v30, v23, v25, v29, v27);
  v33 = v32;
  LOBYTE(v21) = v34;
  v101 = v35;
  swift_release(v30);
  v36 = v21 & 1;
  sub_100016868(v23, v25, v29);
  v37 = swift_bridgeObjectRelease(v27);
  v38 = *(_QWORD *)(a1 + *(int *)(v102 + 56));
  v39 = v105;
  v40 = v104;
  v41 = v106;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v105 + 104))(v104, enum case for Font.Leading.tight(_:), v106, v37);
  v42 = Font.leading(_:)(v40, v38);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
  v43 = v101;
  v44 = Text.font(_:)(v42, v31, v33, v36, v101);
  v46 = v45;
  LOBYTE(v39) = v47;
  v49 = v48;
  swift_release(v42);
  sub_100016868(v31, v33, v36);
  swift_bridgeObjectRelease(v43);
  v51 = static Font.Weight.medium.getter(v50);
  v105 = Text.fontWeight(_:)(*(_QWORD *)&v51, 0, v44, v46, v39 & 1, v49);
  v104 = v52;
  LOBYTE(v33) = v53;
  v106 = v54;
  sub_100016868(v44, v46, v39 & 1);
  v55 = v49;
  v56 = (uint64_t)v111;
  swift_bridgeObjectRelease(v55);
  KeyPath = swift_getKeyPath(&unk_1001855D8);
  v58 = v110;
  v59 = v103;
  v60 = *(_QWORD *)(v103 + v110);
  sub_1000C5030(v11);
  v61 = Font.pointSize(in:)(v11, v60);
  v62 = v108;
  v63 = v107;
  v107(v11, v108);
  v64 = v61 + -1.0;
  v65 = *(_QWORD *)(v59 + v58);
  sub_1000C5030(v11);
  v66 = Font.pointSize(in:)(v11, v65);
  v63(v11, v62);
  v67 = swift_getKeyPath(&unk_100185668);
  v68 = swift_getKeyPath(&unk_100185638);
  v112 = v105;
  v113 = v104;
  v114 = v33 & 1;
  v115 = v106;
  v116 = KeyPath;
  v117 = 0;
  v118 = v67;
  v119 = v64 / v66;
  v120 = v68;
  v121 = 3;
  v122 = 0;
  v69 = enum case for DynamicTypeSize.large(_:);
  v70 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 104))(v56, v69, v70);
  sub_100016878(&qword_1001BF468, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v56, v56, v70);
  if ((result & 1) != 0)
  {
    v72 = sub_100005D40(&qword_1001C2660);
    v73 = sub_1000A66CC();
    sub_1001565B0(&qword_1001BF458, &qword_1001BF358);
    v74 = v97;
    View.dynamicTypeSize<A>(_:)(v56, v72, v95, v73, v75);
    sub_100016904(v56, &qword_1001BF358);
    v76 = v115;
    v77 = v116;
    v78 = v118;
    v79 = v120;
    sub_100016868(v112, (uint64_t)v113, v114);
    swift_release(v79);
    swift_release(v78);
    swift_release(v77);
    v80 = swift_bridgeObjectRelease(v76);
    v81 = v98;
    v82 = v96;
    v83 = v99;
    (*(void (**)(char *, char *, uint64_t, __n128))(v98 + 32))(v96, v74, v99, v80);
    v84 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
    v84(v74, v82, v83);
    v85 = v100;
    *v100 = 0;
    *((_BYTE *)v85 + 8) = 1;
    v85[2] = v94;
    *((_BYTE *)v85 + 24) = v93;
    v85[4] = v92;
    *((_BYTE *)v85 + 40) = v91;
    v86 = v89;
    v85[6] = v90;
    v85[7] = v86;
    v87 = sub_100005D40(&qword_1001C6BA8);
    v84((char *)v85 + *(int *)(v87 + 48), v74, v83);
    v88 = *(void (**)(char *, uint64_t))(v81 + 8);
    v88(v82, v83);
    return ((uint64_t (*)(char *, uint64_t))v88)(v74, v83);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100148AE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String *v32;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Swift::String *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t OpaqueTypeConformance2;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)(uint64_t, uint64_t);
  uint64_t (*v144)(uint64_t, uint64_t);
  uint64_t (*v145)(uint64_t, uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t (*v148)(uint64_t, uint64_t);
  _QWORD v149[2];
  uint64_t v150;
  Swift::String v151;
  Swift::String v152;
  Swift::String v153;
  Swift::String v154;
  Swift::String v155;
  Swift::String v156;
  Swift::String v157;
  Swift::String v158;

  v6 = v2;
  v136 = a1;
  v142 = a2;
  v7 = type metadata accessor for AccessibilityTraits(0);
  v140 = *(_QWORD *)(v7 - 8);
  v141 = v7;
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_1000230E0();
  v138 = v9;
  v131 = sub_1001579F4();
  v129 = *(_QWORD *)(v131 - 8);
  sub_1000230F4();
  __chkstk_darwin(v10);
  sub_1000230E0();
  v128 = v11;
  v135 = sub_100005D40(&qword_1001C6CC8);
  v133 = *(_QWORD *)(v135 - 8);
  sub_1000230F4();
  __chkstk_darwin(v12);
  sub_1000230E0();
  v130 = v13;
  v139 = sub_100005D40(&qword_1001C6CD0);
  sub_1000230F4();
  v15 = __chkstk_darwin(v14);
  v132 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v134 = (char *)&v119 - v18;
  __chkstk_darwin(v17);
  v137 = (char *)&v119 - v19;
  sub_1001577B0();
  sub_100157364();
  v148 = v20;
  sub_1000230F4();
  __chkstk_darwin(v21);
  sub_100023374();
  v22 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v124 = *(_QWORD *)(v22 - 8);
  sub_1000230F4();
  __chkstk_darwin(v23);
  v24 = sub_1000253B8();
  type metadata accessor for LocalizedStringKey.StringInterpolation(v24);
  sub_1000230F4();
  __chkstk_darwin(v25);
  v27 = (char *)&v119 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for CurrentObservationAccessibilityModifier(0);
  v29 = Location.name.getter(v28);
  v31 = v30;
  v125 = v28;
  v32 = (Swift::String *)(v2 + *(int *)(v28 + 28));
  countAndFlagsBits = v32->_countAndFlagsBits;
  object = v32->_object;
  v127 = v29;
  v126 = v31;
  if (!countAndFlagsBits && object == (void *)0xE000000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 0, 0xE000000000000000, 0) & 1) != 0)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(26, 8);
    sub_10015772C();
    sub_10015793C();
    sub_100156F7C();
    v122 = sub_1000A7264();
    v35 = v2;
    sub_100157258();
    LODWORD(v143) = enum case for WeatherFormatPlaceholder.none(_:);
    v36 = v148;
    v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v148 + 13);
    sub_100157984(enum case for WeatherFormatPlaceholder.none(_:), v145);
    v37 = sub_1000D6D90();
    v38 = sub_1001579DC(v37, (uint64_t)&v150);
    v39 = sub_100005D40(&qword_1001BF090);
    v147 = v39;
    sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
    v146 = v40;
    v41 = Measurement.formatted<A>(_:placeholder:unitManager:)(v4, v3, v38, &protocol witness table for UnitManager, v39, v22);
    v43 = v42;
    swift_release(v38);
    v144 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)v36 + 1);
    sub_1000287E0(v3, v144);
    v44 = v5;
    sub_1000FC7C8();
    v148 = v45;
    sub_100156D34(v45);
    v151._countAndFlagsBits = v41;
    v151._object = v43;
    sub_100156E0C(v151);
    sub_100028950();
    sub_100156D40();
    v46 = v35 + *(int *)(v125 + 20);
    v47 = sub_10001C804();
    sub_1001578BC(v47);
    v48 = v22;
    v50 = (Swift::String *)(v46 + v49);
    v51 = v46;
    v124 = v46;
    sub_100156E0C(*(Swift::String *)(v46 + v49));
    sub_100156F7C();
    v52 = v35 + *(int *)(v122 + 48);
    v152 = *(Swift::String *)(v52 + *(int *)(sub_1000A7274() + 28));
    sub_100156E0C(v152);
    sub_100157090();
    v53 = (void *)(v51 + *(int *)(v38 + 24));
    sub_100157258();
    v54 = sub_100157500();
    v55 = v123;
    v56 = v123;
    v57 = static UnitManager.standard.getter(v54);
    sub_100157160(v4, v3, v57, (uint64_t)&protocol witness table for UnitManager, v147, v48);
    sub_100157A10();
    swift_release(v57);
    v144(v3, v44);
    sub_1001575A4();
    v153._countAndFlagsBits = (uint64_t)v56;
    v153._object = v53;
    sub_100156E0C(v153);
    sub_100156D4C();
    sub_100156D40();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*v50);
    sub_1001570AC();
    sub_100157000();
    v58 = sub_100157500();
    v59 = static UnitManager.standard.getter(v58);
    sub_100157160(v4, v3, v59, (uint64_t)&protocol witness table for UnitManager, v147, v48);
    sub_100157A10();
    sub_100156F24();
    v144(v3, v44);
    sub_1001575A4();
    v154._countAndFlagsBits = (uint64_t)v55;
    v154._object = v53;
    sub_100156E0C(v154);
    sub_100156D4C();
    sub_100156D40();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*v50);
    sub_1000D6D98();
    v60 = LocalizedStringKey.init(stringInterpolation:)(v27);
    v64 = v63 & 1;
  }
  else
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(28, 9);
    sub_10015772C();
    sub_10015793C();
    sub_100156F7C();
    v122 = sub_1000A7264();
    v65 = (void *)(v2 + *(int *)(v122 + 28));
    sub_100157258();
    LODWORD(v147) = enum case for WeatherFormatPlaceholder.none(_:);
    v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v148 + 13);
    sub_100157984(enum case for WeatherFormatPlaceholder.none(_:), v123);
    v146 = sub_1000D6D90();
    v66 = static UnitManager.standard.getter(v146);
    v120 = v5;
    v67 = v66;
    v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100005D40(&qword_1001BF090);
    v145 = v68;
    sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
    v144 = v69;
    v121 = v22;
    sub_100157160(v4, v3, v67, (uint64_t)&protocol witness table for UnitManager, (uint64_t)v68, v22);
    sub_100157A10();
    swift_release(v67);
    v148 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)v148 + 1);
    v70 = v120;
    sub_1000287E0(v3, v148);
    sub_1000FC7C8();
    v143 = v71;
    sub_100156D34(v71);
    v155._countAndFlagsBits = (uint64_t)v68;
    v155._object = v65;
    sub_100156E0C(v155);
    sub_100156D4C();
    sub_100156D40();
    v72 = v6 + *(int *)(v125 + 20);
    v73 = sub_10001C804();
    sub_1001578BC(v73);
    v74 = v6;
    v76 = (Swift::String *)(v72 + v75);
    v77 = v72;
    v124 = v72;
    sub_100156E0C(*(Swift::String *)(v72 + v75));
    sub_100156F7C();
    v78 = v74 + *(int *)(v122 + 48);
    v156 = *(Swift::String *)(v78 + *(int *)(sub_1000A7274() + 28));
    sub_100156E0C(v156);
    sub_100156F7C();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*v32);
    sub_100157090();
    v79 = (void *)(v77 + *(int *)(v31 + 24));
    sub_100157258();
    v80 = v70;
    v81 = v70;
    v82 = v123;
    v83 = v123(v3, v147, v81);
    v84 = v146;
    v85 = static UnitManager.standard.getter(v83);
    v86 = v121;
    sub_100157160(v4, v3, v85, (uint64_t)&protocol witness table for UnitManager, (uint64_t)v145, v121);
    sub_100157A10();
    swift_release(v85);
    sub_1001575A4();
    v87 = v86;
    v143(v4, v86);
    v157._countAndFlagsBits = v84;
    v157._object = v79;
    sub_100156E0C(v157);
    sub_100156D4C();
    sub_100156D40();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*v76);
    sub_1001570AC();
    sub_100157000();
    v88 = v82(v3, v147, v80);
    v89 = static UnitManager.standard.getter(v88);
    v90 = sub_100157160(v4, v3, v89, (uint64_t)&protocol witness table for UnitManager, (uint64_t)v145, v86);
    v92 = v91;
    swift_release(v89);
    sub_1001575A4();
    v143(v4, v87);
    v158._countAndFlagsBits = v90;
    v158._object = v92;
    sub_100156E0C(v158);
    sub_100157088();
    sub_100156D40();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*v76);
    sub_1000D6D98();
    v60 = LocalizedStringKey.init(stringInterpolation:)(v27);
    v64 = v93 & 1;
  }
  v94 = Text.init(_:tableName:bundle:comment:)(v60, v61, v64, v62, 0, 0, 0);
  v96 = v95;
  v98 = v97;
  v100 = v99 & 1;
  v101 = v128;
  static AccessibilityChildBehavior.combine.getter(v94);
  v102 = sub_100005D40(&qword_1001C6CD8);
  sub_1001565B0(&qword_1001C6CE0, &qword_1001C6CD8);
  v104 = v103;
  v105 = v130;
  View.accessibilityElement(children:)(v101, v102, v103);
  sub_1000FC7C8();
  v106(v101, v131);
  v149[0] = v102;
  v149[1] = v104;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v149, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibility(label:)(v94, v96, v100, v98, v135, OpaqueTypeConformance2);
  v108 = sub_1000D8040(v105, *(uint64_t (**)(uint64_t, uint64_t))(v133 + 8));
  v109 = v138;
  static AccessibilityTraits.isImage.getter(v108);
  v110 = (uint64_t)v134;
  v111 = v139;
  ModifiedContent<>.accessibility(removeTraits:)(v109, v139);
  sub_10015799C(v140);
  sub_10015781C();
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(1, v111);
  sub_100016904(v110, &qword_1001C6CD0);
  v112 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
  v113 = swift_allocObject(v112, 48, 7);
  *(_OWORD *)(v113 + 16) = xmmword_10017BD10;
  v114 = v126;
  *(_QWORD *)(v113 + 32) = v127;
  *(_QWORD *)(v113 + 40) = v114;
  sub_10001692C();
  v115 = sub_100157578();
  ModifiedContent<>.accessibilityInputLabels<A>(_:)(v115, v116, v117, v118);
  sub_1000935D4();
  sub_100016868(v94, v96, v100);
  sub_100157088();
  sub_10015781C();
  sub_10001C770();
}

uint64_t type metadata accessor for DegreesView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C6768, (uint64_t)&nominal type descriptor for DegreesView);
}

uint64_t type metadata accessor for IconView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C67F8, (uint64_t)&nominal type descriptor for IconView);
}

uint64_t type metadata accessor for LocationView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C6888, (uint64_t)&nominal type descriptor for LocationView);
}

char *sub_1001494A4(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t);
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v185)(char *, char *);
  uint64_t v186;
  int *v187;
  void (*v188)(char *, char *);
  uint64_t v189;
  void (*v190)(char *, char *, uint64_t);
  uint64_t v191;
  void (*v193)(char *, char *, uint64_t);
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  int *v199;
  char *v200;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v28 = v27 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v27);
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v193 = v13;
    v196 = v12;
    v13(&a1[v8[6]], &a2[v8[6]], v12);
    v14 = v8[7];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = sub_100005D40(&qword_1001BF090);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v18(&a1[v8[8]], &a2[v8[8]], v17);
    v19 = v8[9];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = v8[10];
    v24 = &a1[v23];
    v25 = &a2[v23];
    swift_bridgeObjectRetain(v22);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v17))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v18(v24, v25, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v17);
    }
    v29 = v8[11];
    v30 = &a1[v29];
    v31 = &a2[v29];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v29], 1, v17))
    {
      v32 = sub_100005D40(&qword_1001BF098);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v18(v30, v31, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v17);
    }
    v33 = v8[12];
    v34 = &a1[v33];
    v35 = &a2[v33];
    v190 = v7;
    v191 = v6;
    v7(&a1[v33], &a2[v33], v6);
    v36 = (int *)type metadata accessor for ConditionViewModel(0);
    v37 = v36[5];
    v38 = &v34[v37];
    v200 = a1;
    v39 = &v35[v37];
    v40 = type metadata accessor for WeatherCondition(0);
    v185 = *(void (**)(char *, char *))(*(_QWORD *)(v40 - 8) + 16);
    v186 = v40;
    v185(v38, v39);
    v41 = v36[6];
    v42 = &v34[v41];
    v43 = &v35[v41];
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = v36[7];
    v46 = &v34[v45];
    v47 = &v35[v45];
    v48 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    v34[v36[8]] = v35[v36[8]];
    v34[v36[9]] = v35[v36[9]];
    v187 = v36;
    v34[v36[10]] = v35[v36[10]];
    *(_QWORD *)&a1[v8[13]] = *(_QWORD *)&a2[v8[13]];
    v49 = v8[14];
    v50 = &a1[v49];
    v51 = &a2[v49];
    v52 = type metadata accessor for CloudAltitudeKind(0);
    v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v48);
    v53(v50, v51, v52);
    v54 = v8[15];
    v55 = &v200[v54];
    v56 = &a2[v54];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v54], 1, v196))
    {
      v57 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v193(v55, v56, v196);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v55, 0, 1, v196);
    }
    v58 = v8[16];
    v59 = &v200[v58];
    v60 = &a2[v58];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v58], 1, v196))
    {
      v61 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      v193(v59, v60, v196);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v196);
    }
    v62 = v8[17];
    v63 = &v200[v62];
    v64 = &a2[v62];
    v65 = type metadata accessor for UVIndex(0);
    v188 = *(void (**)(char *, char *))(*(_QWORD *)(v65 - 8) + 16);
    v189 = v65;
    v188(v63, v64);
    v66 = v8[18];
    v67 = &v200[v66];
    v68 = &a2[v66];
    v69 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
    *(_QWORD *)&v200[v8[19]] = *(_QWORD *)&a2[v8[19]];
    v70 = v8[20];
    v71 = &v200[v70];
    v72 = &a2[v70];
    v73 = *((_QWORD *)v72 + 1);
    if (v73)
    {
      *(_QWORD *)v71 = *(_QWORD *)v72;
      *((_QWORD *)v71 + 1) = v73;
      v74 = *((_QWORD *)v72 + 2);
      v75 = *((_QWORD *)v72 + 3);
      v76 = v72[32];
      swift_bridgeObjectRetain(v73);
      sub_100006E58(v74, v75, v76);
      *((_QWORD *)v71 + 2) = v74;
      *((_QWORD *)v71 + 3) = v75;
      v71[32] = v76;
    }
    else
    {
      v77 = *((_OWORD *)v72 + 1);
      *(_OWORD *)v71 = *(_OWORD *)v72;
      *((_OWORD *)v71 + 1) = v77;
      v71[32] = v72[32];
    }
    v199 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
    v78 = v199[5];
    v79 = &v200[v78];
    v80 = &a2[v78];
    v190(&v200[v78], &a2[v78], v191);
    v81 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v193(&v79[v81[5]], &v80[v81[5]], v196);
    v18(&v79[v81[6]], &v80[v81[6]], v17);
    v18(&v79[v81[7]], &v80[v81[7]], v17);
    v82 = v81[8];
    v83 = &v79[v82];
    v84 = &v80[v82];
    v190(&v79[v82], &v80[v82], v191);
    ((void (*)(char *, char *, uint64_t))v185)(&v83[v187[5]], &v84[v187[5]], v186);
    v85 = v187[6];
    v86 = &v83[v85];
    v87 = &v84[v85];
    v88 = *((_QWORD *)v87 + 1);
    *(_QWORD *)v86 = *(_QWORD *)v87;
    *((_QWORD *)v86 + 1) = v88;
    v89 = v187[7];
    v90 = &v83[v89];
    v91 = &v84[v89];
    v92 = *((_QWORD *)v91 + 1);
    *(_QWORD *)v90 = *(_QWORD *)v91;
    *((_QWORD *)v90 + 1) = v92;
    v83[v187[8]] = v84[v187[8]];
    v83[v187[9]] = v84[v187[9]];
    v83[v187[10]] = v84[v187[10]];
    v93 = v81[9];
    v94 = &v79[v93];
    v95 = &v80[v93];
    v96 = type metadata accessor for Precipitation(0);
    v97 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16);
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v92);
    v97(v94, v95, v96);
    *(_QWORD *)&v79[v81[10]] = *(_QWORD *)&v80[v81[10]];
    v98 = v81[11];
    v99 = &v79[v98];
    v100 = &v80[v98];
    v101 = *((_QWORD *)v100 + 1);
    *(_QWORD *)v99 = *(_QWORD *)v100;
    *((_QWORD *)v99 + 1) = v101;
    v102 = v81[12];
    v103 = &v79[v102];
    v104 = &v80[v102];
    v105 = *((_QWORD *)v104 + 1);
    *(_QWORD *)v103 = *(_QWORD *)v104;
    *((_QWORD *)v103 + 1) = v105;
    v106 = v81[13];
    v107 = &v79[v106];
    v108 = &v80[v106];
    v109 = *((_QWORD *)v108 + 1);
    *(_QWORD *)v107 = *(_QWORD *)v108;
    *((_QWORD *)v107 + 1) = v109;
    v110 = v81[14];
    v111 = &v79[v110];
    v112 = &v80[v110];
    v113 = *((_QWORD *)v112 + 1);
    *(_QWORD *)v111 = *(_QWORD *)v112;
    *((_QWORD *)v111 + 1) = v113;
    v114 = v81[15];
    v194 = &v80[v114];
    v197 = &v79[v114];
    v115 = type metadata accessor for TemperatureScaleConfiguration(0);
    v116 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 16);
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRetain(v105);
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v113);
    v116(v197, v194, v115);
    v117 = v81[16];
    v118 = &v79[v117];
    v119 = &v80[v117];
    v120 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v119, 1, v120))
    {
      v121 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v118, v119, v120);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v118, 0, 1, v120);
    }
    v122 = v81[17];
    v123 = &v79[v122];
    v124 = &v80[v122];
    v125 = type metadata accessor for MoonEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v124, 1, v125))
    {
      v126 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 16))(v123, v124, v125);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v123, 0, 1, v125);
    }
    ((void (*)(char *, char *, uint64_t))v188)(&v79[v81[18]], &v80[v81[18]], v189);
    *(_QWORD *)&v79[v81[19]] = *(_QWORD *)&v80[v81[19]];
    v127 = v200;
    v128 = v199[6];
    v129 = &v200[v128];
    v130 = &a2[v128];
    v131 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v130, 1, (uint64_t)v131))
    {
      v132 = sub_100005D40(&qword_1001BF0C0);
      memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
    }
    else
    {
      v133 = v130[1];
      *v129 = *v130;
      v129[1] = v133;
      v134 = v131[5];
      v135 = (char *)v129 + v134;
      v136 = (char *)v130 + v134;
      v137 = type metadata accessor for AttributedString(0);
      v138 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 16);
      swift_bridgeObjectRetain(v133);
      v138(v135, v136, v137);
      v139 = v131[6];
      v140 = (char *)v129 + v139;
      v141 = (char *)v130 + v139;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v130 + v139, 1, v137))
      {
        v142 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
      }
      else
      {
        v138(v140, v141, v137);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v140, 0, 1, v137);
      }
      v143 = v131[7];
      v144 = (_QWORD *)((char *)v129 + v143);
      v145 = (_QWORD *)((char *)v130 + v143);
      v146 = v145[1];
      *v144 = *v145;
      v144[1] = v146;
      swift_bridgeObjectRetain(v146);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v129, 0, 1, (uint64_t)v131);
      v127 = v200;
    }
    v147 = v199[7];
    v148 = (uint64_t)v127 + v147;
    v149 = &a2[v147];
    v150 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
    v151 = v199[8];
    v152 = (_QWORD *)((char *)v127 + v151);
    v153 = &a2[v151];
    v154 = v153[1];
    *v152 = *v153;
    v152[1] = v154;
    *((_BYTE *)v127 + v199[9]) = a2[v199[9]];
    *((_BYTE *)v127 + v199[10]) = a2[v199[10]];
    v155 = v199[11];
    v195 = *(_QWORD *)&a2[v155];
    *(_QWORD *)((char *)v127 + v155) = v195;
    v156 = v199[12];
    v157 = (_QWORD *)((char *)v127 + v156);
    v158 = &a2[v156];
    v159 = v158[1];
    *v157 = *v158;
    v157[1] = v159;
    v160 = v199[13];
    v161 = *(_QWORD *)&a2[v160];
    *(_QWORD *)((char *)v127 + v160) = v161;
    v162 = v199[14];
    v163 = *(_QWORD *)&a2[v162];
    *(_QWORD *)((char *)v127 + v162) = v163;
    v164 = v199[15];
    v165 = *(_QWORD *)&a2[v164];
    *(_QWORD *)((char *)v127 + v164) = v165;
    v166 = v199[16];
    v198 = *(_QWORD *)&a2[v166];
    *(_QWORD *)((char *)v127 + v166) = v198;
    *((_BYTE *)v127 + v199[17]) = a2[v199[17]];
    v167 = v199[18];
    v168 = *(_QWORD *)&a2[v167];
    *(_QWORD *)((char *)v127 + v167) = v168;
    v169 = v199[19];
    v170 = *(_QWORD *)&a2[v169];
    *(_QWORD *)((char *)v127 + v169) = v170;
    *(_QWORD *)((char *)v127 + v199[20]) = *(_QWORD *)&a2[v199[20]];
    *((_BYTE *)v127 + v199[21]) = a2[v199[21]];
    *((_BYTE *)v127 + v199[22]) = a2[v199[22]];
    *((_BYTE *)v127 + v199[23]) = a2[v199[23]];
    *((_BYTE *)v127 + v199[24]) = a2[v199[24]];
    v171 = v199[25];
    v172 = (_QWORD *)((char *)v127 + v171);
    v173 = &a2[v171];
    v174 = v173[1];
    *v172 = *v173;
    v172[1] = v174;
    *((_BYTE *)v127 + v199[26]) = a2[v199[26]];
    *(_QWORD *)((char *)v127 + v199[27]) = *(_QWORD *)&a2[v199[27]];
    *(_QWORD *)((char *)v127 + v199[28]) = *(_QWORD *)&a2[v199[28]];
    v175 = *(int *)(a3 + 24);
    *(_OWORD *)((char *)v127 + *(int *)(a3 + 20)) = *(_OWORD *)&a2[*(int *)(a3 + 20)];
    v176 = (_QWORD *)((char *)v127 + v175);
    v177 = (uint64_t *)&a2[v175];
    swift_bridgeObjectRetain(v154);
    swift_retain(v195);
    swift_bridgeObjectRetain(v159);
    swift_retain(v161);
    swift_retain(v163);
    swift_retain(v165);
    swift_retain(v198);
    swift_retain(v168);
    swift_retain(v170);
    swift_bridgeObjectRetain(v174);
    v178 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v177, v178) == 1)
    {
      v179 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v179 - 8) + 16))(v176, v177, v179);
      v180 = v176;
      v181 = v178;
      v182 = 1;
    }
    else
    {
      v183 = *v177;
      *v176 = *v177;
      swift_retain(v183);
      v180 = v176;
      v181 = v178;
      v182 = 0;
    }
    swift_storeEnumTagMultiPayload(v180, v181, v182);
    return v200;
  }
  return (char *)v28;
}

uint64_t sub_100149FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v52)(uint64_t);
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;

  v3 = type metadata accessor for UUID(0);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(a1, v3);
  v5 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v6 = a1 + v5[5];
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + v5[6], v7);
  v9 = a1 + v5[7];
  v10 = sub_100005D40(&qword_1001BF090);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(a1 + v5[8], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[9] + 8));
  v12 = a1 + v5[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v12, 1, v10))
    v11(v12, v10);
  v13 = a1 + v5[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v13, 1, v10))
    v11(v13, v10);
  v14 = a1 + v5[12];
  v56 = v4;
  v57 = v3;
  v4(v14, v3);
  v15 = (int *)type metadata accessor for ConditionViewModel(0);
  v16 = v14 + v15[5];
  v17 = type metadata accessor for WeatherCondition(0);
  v52 = *(void (**)(uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v53 = v17;
  v52(v16);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[7] + 8));
  v18 = a1 + v5[14];
  v19 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = a1 + v5[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v20, 1, v7))
    v8(v20, v7);
  v21 = a1 + v5[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v21, 1, v7))
    v8(v21, v7);
  v22 = a1 + v5[17];
  v23 = type metadata accessor for UVIndex(0);
  v54 = *(void (**)(uint64_t))(*(_QWORD *)(v23 - 8) + 8);
  v55 = v23;
  v54(v22);
  v24 = a1 + v5[18];
  v25 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = a1 + v5[20];
  v27 = *(_QWORD *)(v26 + 8);
  if (v27)
  {
    swift_bridgeObjectRelease(v27);
    sub_100007458(*(_QWORD *)(v26 + 16), *(_QWORD *)(v26 + 24), *(_BYTE *)(v26 + 32));
  }
  v28 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v29 = a1 + v28[5];
  v56(v29, v57);
  v30 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v8(v29 + v30[5], v7);
  v11(v29 + v30[6], v10);
  v11(v29 + v30[7], v10);
  v31 = v29 + v30[8];
  v56(v31, v57);
  ((void (*)(uint64_t, uint64_t))v52)(v31 + v15[5], v53);
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v15[7] + 8));
  v32 = v29 + v30[9];
  v33 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[14] + 8));
  v34 = v29 + v30[15];
  v35 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
  v36 = v29 + v30[16];
  v37 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v36, 1, v37))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
  v38 = v29 + v30[17];
  v39 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, v39))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  ((void (*)(uint64_t, uint64_t))v54)(v29 + v30[18], v55);
  v40 = a1 + v28[6];
  v41 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v40, 1, (uint64_t)v41))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + 8));
    v42 = v40 + v41[5];
    v43 = type metadata accessor for AttributedString(0);
    v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8);
    v44(v42, v43);
    v45 = v40 + v41[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v45, 1, v43))
      v44(v45, v43);
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + v41[7] + 8));
  }
  v46 = a1 + v28[7];
  v47 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[8] + 8));
  swift_release(*(_QWORD *)(a1 + v28[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[12] + 8));
  swift_release(*(_QWORD *)(a1 + v28[13]));
  swift_release(*(_QWORD *)(a1 + v28[14]));
  swift_release(*(_QWORD *)(a1 + v28[15]));
  swift_release(*(_QWORD *)(a1 + v28[16]));
  swift_release(*(_QWORD *)(a1 + v28[18]));
  swift_release(*(_QWORD *)(a1 + v28[19]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[25] + 8));
  v48 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v49 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v48, v49) != 1)
    return swift_release(*v48);
  v50 = type metadata accessor for Font.Context(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v48, v50);
}

uint64_t sub_10014A5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  void *v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  const void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v183)(uint64_t, uint64_t);
  uint64_t v184;
  int *v185;
  void (*v186)(uint64_t, uint64_t);
  uint64_t v187;
  void (*v188)(uint64_t, uint64_t, uint64_t);
  uint64_t v189;
  void (*v191)(void *, const void *, uint64_t);
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v191 = v12;
  v193 = v11;
  v12((void *)(a1 + v7[6]), (const void *)(a2 + v7[6]), v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  v18 = v7[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v7[10];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  swift_bridgeObjectRetain(v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[11];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v26, 1, v16))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v27, (uint64_t)v28, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v16);
  }
  v30 = v7[12];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v188 = v6;
  v189 = v5;
  v6(a1 + v30, a2 + v30, v5);
  v33 = (int *)type metadata accessor for ConditionViewModel(0);
  v34 = v33[5];
  v35 = v31 + v34;
  v196 = a2;
  v36 = v32 + v34;
  v37 = type metadata accessor for WeatherCondition(0);
  v183 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
  v184 = v37;
  v183(v35, v36);
  v38 = v33[6];
  v39 = (_QWORD *)(v31 + v38);
  v40 = (_QWORD *)(v32 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = v33[7];
  v43 = (_QWORD *)(v31 + v42);
  v44 = (_QWORD *)(v32 + v42);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  *(_BYTE *)(v31 + v33[8]) = *(_BYTE *)(v32 + v33[8]);
  *(_BYTE *)(v31 + v33[9]) = *(_BYTE *)(v32 + v33[9]);
  v185 = v33;
  *(_BYTE *)(v31 + v33[10]) = *(_BYTE *)(v32 + v33[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v46 = v7[14];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for CloudAltitudeKind(0);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  v50(v47, v48, v49);
  v51 = v7[15];
  v52 = (void *)(a1 + v51);
  v53 = (const void *)(v196 + v51);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v196 + v51, 1, v193))
  {
    v54 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    v191(v52, v53, v193);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v52, 0, 1, v193);
  }
  v55 = v7[16];
  v56 = (void *)(a1 + v55);
  v57 = (const void *)(v196 + v55);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v196 + v55, 1, v193))
  {
    v58 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v191(v56, v57, v193);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v193);
  }
  v59 = v7[17];
  v60 = a1 + v59;
  v61 = v196 + v59;
  v62 = type metadata accessor for UVIndex(0);
  v186 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
  v187 = v62;
  v186(v60, v61);
  v63 = v7[18];
  v64 = a1 + v63;
  v65 = v196 + v63;
  v66 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(v196 + v7[19]);
  v67 = v7[20];
  v68 = a1 + v67;
  v69 = v196 + v67;
  v70 = *(_QWORD *)(v69 + 8);
  if (v70)
  {
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *(_QWORD *)(v68 + 8) = v70;
    v71 = *(_QWORD *)(v69 + 16);
    v72 = *(_QWORD *)(v69 + 24);
    v73 = *(_BYTE *)(v69 + 32);
    swift_bridgeObjectRetain(v70);
    sub_100006E58(v71, v72, v73);
    *(_QWORD *)(v68 + 16) = v71;
    *(_QWORD *)(v68 + 24) = v72;
    *(_BYTE *)(v68 + 32) = v73;
  }
  else
  {
    v74 = *(_OWORD *)(v69 + 16);
    *(_OWORD *)v68 = *(_OWORD *)v69;
    *(_OWORD *)(v68 + 16) = v74;
    *(_BYTE *)(v68 + 32) = *(_BYTE *)(v69 + 32);
  }
  v75 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v76 = v75[5];
  v195 = a1;
  v77 = a1 + v76;
  v78 = v196 + v76;
  v188(a1 + v76, v196 + v76, v189);
  v79 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v191((void *)(v77 + v79[5]), (const void *)(v78 + v79[5]), v193);
  v17(v77 + v79[6], v78 + v79[6], v16);
  v17(v77 + v79[7], v78 + v79[7], v16);
  v80 = v79[8];
  v81 = v77 + v80;
  v82 = v78 + v80;
  v188(v77 + v80, v78 + v80, v189);
  ((void (*)(uint64_t, uint64_t, uint64_t))v183)(v81 + v185[5], v82 + v185[5], v184);
  v83 = v185[6];
  v84 = (_QWORD *)(v81 + v83);
  v85 = (_QWORD *)(v82 + v83);
  v86 = v85[1];
  *v84 = *v85;
  v84[1] = v86;
  v87 = v185[7];
  v88 = (_QWORD *)(v81 + v87);
  v89 = (_QWORD *)(v82 + v87);
  v90 = v89[1];
  *v88 = *v89;
  v88[1] = v90;
  *(_BYTE *)(v81 + v185[8]) = *(_BYTE *)(v82 + v185[8]);
  *(_BYTE *)(v81 + v185[9]) = *(_BYTE *)(v82 + v185[9]);
  *(_BYTE *)(v81 + v185[10]) = *(_BYTE *)(v82 + v185[10]);
  v91 = v79[9];
  v92 = v77 + v91;
  v93 = v78 + v91;
  v94 = type metadata accessor for Precipitation(0);
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 16);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v90);
  v95(v92, v93, v94);
  *(_QWORD *)(v77 + v79[10]) = *(_QWORD *)(v78 + v79[10]);
  v96 = v79[11];
  v97 = (_QWORD *)(v77 + v96);
  v98 = (_QWORD *)(v78 + v96);
  v99 = v98[1];
  *v97 = *v98;
  v97[1] = v99;
  v100 = v79[12];
  v101 = (_QWORD *)(v77 + v100);
  v102 = (_QWORD *)(v78 + v100);
  v103 = v102[1];
  *v101 = *v102;
  v101[1] = v103;
  v104 = v79[13];
  v105 = (_QWORD *)(v77 + v104);
  v106 = (_QWORD *)(v78 + v104);
  v107 = v106[1];
  *v105 = *v106;
  v105[1] = v107;
  v108 = v79[14];
  v109 = (_QWORD *)(v77 + v108);
  v110 = (_QWORD *)(v78 + v108);
  v111 = v110[1];
  *v109 = *v110;
  v109[1] = v111;
  v112 = v79[15];
  v192 = v78 + v112;
  v194 = v77 + v112;
  v113 = type metadata accessor for TemperatureScaleConfiguration(0);
  v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 16);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v111);
  v114(v194, v192, v113);
  v115 = v79[16];
  v116 = (void *)(v77 + v115);
  v117 = (const void *)(v78 + v115);
  v118 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v117, 1, v118))
  {
    v119 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v118 - 8) + 16))(v116, v117, v118);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v116, 0, 1, v118);
  }
  v120 = v79[17];
  v121 = (void *)(v77 + v120);
  v122 = (const void *)(v78 + v120);
  v123 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v122, 1, v123))
  {
    v124 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v123 - 8) + 16))(v121, v122, v123);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v121, 0, 1, v123);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v186)(v77 + v79[18], v78 + v79[18], v187);
  *(_QWORD *)(v77 + v79[19]) = *(_QWORD *)(v78 + v79[19]);
  v125 = v75[6];
  v126 = (_QWORD *)(v195 + v125);
  v127 = v196;
  v128 = (_QWORD *)(v196 + v125);
  v129 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128, 1, (uint64_t)v129))
  {
    v130 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v126, v128, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
  }
  else
  {
    v131 = v128[1];
    *v126 = *v128;
    v126[1] = v131;
    v132 = v129[5];
    v133 = (char *)v126 + v132;
    v134 = (char *)v128 + v132;
    v135 = type metadata accessor for AttributedString(0);
    v136 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16);
    swift_bridgeObjectRetain(v131);
    v136(v133, v134, v135);
    v137 = v129[6];
    v138 = (char *)v126 + v137;
    v139 = (char *)v128 + v137;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128 + v137, 1, v135))
    {
      v140 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
    }
    else
    {
      v136(v138, v139, v135);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v138, 0, 1, v135);
    }
    v141 = v129[7];
    v142 = (_QWORD *)((char *)v126 + v141);
    v143 = (_QWORD *)((char *)v128 + v141);
    v144 = v143[1];
    *v142 = *v143;
    v142[1] = v144;
    swift_bridgeObjectRetain(v144);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v126, 0, 1, (uint64_t)v129);
    v127 = v196;
  }
  v145 = v75[7];
  v146 = v195 + v145;
  v147 = v127 + v145;
  v148 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 16))(v146, v147, v148);
  v149 = v75[8];
  v150 = (_QWORD *)(v195 + v149);
  v151 = (_QWORD *)(v127 + v149);
  v152 = v151[1];
  *v150 = *v151;
  v150[1] = v152;
  *(_BYTE *)(v195 + v75[9]) = *(_BYTE *)(v127 + v75[9]);
  *(_BYTE *)(v195 + v75[10]) = *(_BYTE *)(v127 + v75[10]);
  v153 = v75[11];
  v154 = *(_QWORD *)(v127 + v153);
  *(_QWORD *)(v195 + v153) = v154;
  v155 = v75[12];
  v156 = (_QWORD *)(v195 + v155);
  v157 = (_QWORD *)(v127 + v155);
  v158 = v157[1];
  *v156 = *v157;
  v156[1] = v158;
  v159 = v75[13];
  v160 = *(_QWORD *)(v127 + v159);
  *(_QWORD *)(v195 + v159) = v160;
  v161 = v75[14];
  v162 = *(_QWORD *)(v127 + v161);
  *(_QWORD *)(v195 + v161) = v162;
  v163 = v75[15];
  v164 = *(_QWORD *)(v127 + v163);
  *(_QWORD *)(v195 + v163) = v164;
  v165 = v75[16];
  v197 = *(_QWORD *)(v127 + v165);
  *(_QWORD *)(v195 + v165) = v197;
  *(_BYTE *)(v195 + v75[17]) = *(_BYTE *)(v127 + v75[17]);
  v166 = v75[18];
  v167 = *(_QWORD *)(v127 + v166);
  *(_QWORD *)(v195 + v166) = v167;
  v168 = v75[19];
  v169 = v127;
  v170 = *(_QWORD *)(v127 + v168);
  *(_QWORD *)(v195 + v168) = v170;
  *(_QWORD *)(v195 + v75[20]) = *(_QWORD *)(v169 + v75[20]);
  *(_BYTE *)(v195 + v75[21]) = *(_BYTE *)(v169 + v75[21]);
  *(_BYTE *)(v195 + v75[22]) = *(_BYTE *)(v169 + v75[22]);
  *(_BYTE *)(v195 + v75[23]) = *(_BYTE *)(v169 + v75[23]);
  *(_BYTE *)(v195 + v75[24]) = *(_BYTE *)(v169 + v75[24]);
  v171 = v75[25];
  v172 = (_QWORD *)(v195 + v171);
  v173 = (_QWORD *)(v169 + v171);
  v174 = v173[1];
  *v172 = *v173;
  v172[1] = v174;
  *(_BYTE *)(v195 + v75[26]) = *(_BYTE *)(v169 + v75[26]);
  *(_QWORD *)(v195 + v75[27]) = *(_QWORD *)(v169 + v75[27]);
  *(_QWORD *)(v195 + v75[28]) = *(_QWORD *)(v169 + v75[28]);
  v175 = *(int *)(a3 + 24);
  *(_OWORD *)(v195 + *(int *)(a3 + 20)) = *(_OWORD *)(v169 + *(int *)(a3 + 20));
  v176 = (uint64_t *)(v195 + v175);
  v177 = (uint64_t *)(v169 + v175);
  swift_bridgeObjectRetain(v152);
  swift_retain(v154);
  swift_bridgeObjectRetain(v158);
  swift_retain(v160);
  swift_retain(v162);
  swift_retain(v164);
  swift_retain(v197);
  swift_retain(v167);
  swift_retain(v170);
  swift_bridgeObjectRetain(v174);
  v178 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v177, v178) == 1)
  {
    v179 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v179 - 8) + 16))(v176, v177, v179);
    v180 = 1;
  }
  else
  {
    v181 = *v177;
    *v176 = *v177;
    swift_retain(v181);
    v180 = 0;
  }
  swift_storeEnumTagMultiPayload(v176, v178, v180);
  return v195;
}

uint64_t sub_10014B080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const void *v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  int *v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  void (*v167)(char *, char *, uint64_t);
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  int v182;
  int v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v245;
  void (*v246)(uint64_t, uint64_t, uint64_t);
  uint64_t v247;
  uint64_t v248;
  int *v250;
  void (*v251)(uint64_t, uint64_t);
  uint64_t v252;
  void (*v253)(void *, const void *, uint64_t);
  void (*v254)(void *, const void *, uint64_t);
  void (*v255)(char *, char *, uint64_t);
  void (*v256)(uint64_t, uint64_t, uint64_t);
  char *v257;
  uint64_t v258;

  v5 = type metadata accessor for UUID(0);
  v256 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24);
  v256(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v245 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v245 + 24);
  v11(v8, v9, v10);
  v254 = (void (*)(void *, const void *, uint64_t))v11;
  v11(a1 + v6[6], a2 + v6[6], v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  v253 = (void (*)(void *, const void *, uint64_t))v17;
  v17(a1 + v6[8], a2 + v6[8], v15);
  v18 = v6[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = v6[10];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  LODWORD(v17) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v23, 1, v15);
  v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v15);
  if ((_DWORD)v17)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v24, v25, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v24, v15);
LABEL_6:
    v27 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v253(v24, v25, v15);
LABEL_7:
  v28 = v6[11];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v28, 1, v15);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v15);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v29, v30, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v29, v15);
LABEL_12:
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  v253(v29, v30, v15);
LABEL_13:
  v34 = v6[12];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v247 = v5;
  v256(a1 + v34, a2 + v34, v5);
  v37 = (int *)type metadata accessor for ConditionViewModel(0);
  v38 = v37[5];
  v39 = v35 + v38;
  v40 = v36 + v38;
  v41 = type metadata accessor for WeatherCondition(0);
  v251 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24);
  v252 = v41;
  v251(v39, v40);
  v42 = v37[6];
  v43 = (_QWORD *)(v35 + v42);
  v44 = (_QWORD *)(v36 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = v37[7];
  v48 = (_QWORD *)(v35 + v47);
  v49 = (_QWORD *)(v36 + v47);
  *v48 = *v49;
  v50 = v49[1];
  v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  *(_BYTE *)(v35 + v37[8]) = *(_BYTE *)(v36 + v37[8]);
  *(_BYTE *)(v35 + v37[9]) = *(_BYTE *)(v36 + v37[9]);
  *(_BYTE *)(v35 + v37[10]) = *(_BYTE *)(v36 + v37[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v52 = v6[14];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 24))(v53, v54, v55);
  v56 = v6[15];
  v57 = (void *)(a1 + v56);
  v58 = (const void *)(a2 + v56);
  LODWORD(v51) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v56, 1, v10);
  v59 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v58, 1, v10);
  v250 = v37;
  if ((_DWORD)v51)
  {
    if (!v59)
    {
      (*(void (**)(void *, const void *, uint64_t))(v245 + 16))(v57, v58, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v57, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v59)
  {
    (*(void (**)(void *, uint64_t))(v245 + 8))(v57, v10);
LABEL_18:
    v60 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_19;
  }
  v254(v57, v58, v10);
LABEL_19:
  v61 = v247;
  v62 = v6[16];
  v63 = (void *)(a1 + v62);
  v64 = (const void *)(a2 + v62);
  v65 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v62, 1, v10);
  v66 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v64, 1, v10);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v245 + 16))(v63, v64, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v245 + 8))(v63, v10);
LABEL_24:
    v67 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_25;
  }
  v254(v63, v64, v10);
LABEL_25:
  v68 = v6[17];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = type metadata accessor for UVIndex(0);
  v246 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 24);
  v246(v69, v70, v71);
  v72 = v6[18];
  v73 = a1 + v72;
  v74 = a2 + v72;
  v75 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 24))(v73, v74, v75);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v76 = v6[20];
  v77 = a1 + v76;
  v78 = (__int128 *)(a2 + v76);
  v79 = *(_QWORD *)(a1 + v76 + 8);
  v80 = *(_QWORD *)(a2 + v76 + 8);
  v248 = v71;
  if (v79)
  {
    if (v80)
    {
      *(_QWORD *)v77 = *(_QWORD *)v78;
      v81 = *((_QWORD *)v78 + 1);
      *(_QWORD *)(v77 + 8) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v79);
      v82 = *((_QWORD *)v78 + 2);
      v83 = *((_QWORD *)v78 + 3);
      v84 = *((_BYTE *)v78 + 32);
      sub_100006E58(v82, v83, v84);
      v85 = *(_QWORD *)(v77 + 16);
      v86 = *(_QWORD *)(v77 + 24);
      v87 = *(_BYTE *)(v77 + 32);
      *(_QWORD *)(v77 + 16) = v82;
      *(_QWORD *)(v77 + 24) = v83;
      *(_BYTE *)(v77 + 32) = v84;
      sub_100007458(v85, v86, v87);
    }
    else
    {
      sub_100008EC4(v77);
      v92 = *((_BYTE *)v78 + 32);
      v93 = v78[1];
      *(_OWORD *)v77 = *v78;
      *(_OWORD *)(v77 + 16) = v93;
      *(_BYTE *)(v77 + 32) = v92;
    }
  }
  else if (v80)
  {
    *(_QWORD *)v77 = *(_QWORD *)v78;
    v88 = *((_QWORD *)v78 + 1);
    *(_QWORD *)(v77 + 8) = v88;
    v89 = *((_QWORD *)v78 + 2);
    v90 = *((_QWORD *)v78 + 3);
    v91 = *((_BYTE *)v78 + 32);
    swift_bridgeObjectRetain(v88);
    sub_100006E58(v89, v90, v91);
    *(_QWORD *)(v77 + 16) = v89;
    *(_QWORD *)(v77 + 24) = v90;
    *(_BYTE *)(v77 + 32) = v91;
  }
  else
  {
    v94 = *v78;
    v95 = v78[1];
    *(_BYTE *)(v77 + 32) = *((_BYTE *)v78 + 32);
    *(_OWORD *)v77 = v94;
    *(_OWORD *)(v77 + 16) = v95;
  }
  v96 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v97 = v96[5];
  v98 = a1 + v97;
  v99 = a2 + v97;
  v256(a1 + v97, a2 + v97, v61);
  v100 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v254((void *)(v98 + v100[5]), (const void *)(v99 + v100[5]), v10);
  v253((void *)(v98 + v100[6]), (const void *)(v99 + v100[6]), v15);
  v253((void *)(v98 + v100[7]), (const void *)(v99 + v100[7]), v15);
  v101 = v100[8];
  v102 = v98 + v101;
  v103 = v99 + v101;
  v256(v98 + v101, v99 + v101, v61);
  ((void (*)(uint64_t, uint64_t, uint64_t))v251)(v102 + v250[5], v103 + v250[5], v252);
  v104 = v250[6];
  v105 = (_QWORD *)(v102 + v104);
  v106 = (_QWORD *)(v103 + v104);
  *v105 = *v106;
  v107 = v106[1];
  v108 = v105[1];
  v105[1] = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108);
  v109 = v250[7];
  v110 = (_QWORD *)(v102 + v109);
  v111 = (_QWORD *)(v103 + v109);
  *v110 = *v111;
  v112 = v111[1];
  v113 = v110[1];
  v110[1] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease(v113);
  *(_BYTE *)(v102 + v250[8]) = *(_BYTE *)(v103 + v250[8]);
  *(_BYTE *)(v102 + v250[9]) = *(_BYTE *)(v103 + v250[9]);
  *(_BYTE *)(v102 + v250[10]) = *(_BYTE *)(v103 + v250[10]);
  v114 = v100[9];
  v115 = v98 + v114;
  v116 = v99 + v114;
  v117 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 24))(v115, v116, v117);
  *(_QWORD *)(v98 + v100[10]) = *(_QWORD *)(v99 + v100[10]);
  v118 = v100[11];
  v119 = (_QWORD *)(v98 + v118);
  v120 = (_QWORD *)(v99 + v118);
  *v119 = *v120;
  v121 = v120[1];
  v122 = v119[1];
  v119[1] = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  v123 = v100[12];
  v124 = (_QWORD *)(v98 + v123);
  v125 = (_QWORD *)(v99 + v123);
  *v124 = *v125;
  v126 = v125[1];
  v127 = v124[1];
  v124[1] = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  v128 = v100[13];
  v129 = (_QWORD *)(v98 + v128);
  v130 = (_QWORD *)(v99 + v128);
  *v129 = *v130;
  v131 = v130[1];
  v132 = v129[1];
  v129[1] = v131;
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRelease(v132);
  v133 = v100[14];
  v134 = (_QWORD *)(v98 + v133);
  v135 = (_QWORD *)(v99 + v133);
  *v134 = *v135;
  v136 = v135[1];
  v137 = v134[1];
  v134[1] = v136;
  swift_bridgeObjectRetain(v136);
  swift_bridgeObjectRelease(v137);
  v138 = v100[15];
  v139 = v98 + v138;
  v140 = v99 + v138;
  v141 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v100[16];
  v143 = (void *)(v98 + v142);
  v144 = (const void *)(v99 + v142);
  v145 = type metadata accessor for SunEvents(0);
  LODWORD(v113) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v145);
  v146 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145);
  if ((_DWORD)v113)
  {
    if (!v146)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v147 = *(_QWORD *)(v145 - 8);
  if (v146)
  {
    (*(void (**)(void *, uint64_t))(v147 + 8))(v143, v145);
LABEL_41:
    v148 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v147 + 24))(v143, v144, v145);
LABEL_42:
  v149 = v100[17];
  v150 = (void *)(v98 + v149);
  v151 = (const void *)(v99 + v149);
  v152 = type metadata accessor for MoonEvents(0);
  v153 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, v152);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v152);
  if (v153)
  {
    if (!v154)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v152 - 8) + 16))(v150, v151, v152);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v150, 0, 1, v152);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v155 = *(_QWORD *)(v152 - 8);
  if (v154)
  {
    (*(void (**)(void *, uint64_t))(v155 + 8))(v150, v152);
LABEL_47:
    v156 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v155 + 24))(v150, v151, v152);
LABEL_48:
  v246(v98 + v100[18], v99 + v100[18], v248);
  *(_QWORD *)(v98 + v100[19]) = *(_QWORD *)(v99 + v100[19]);
  v157 = v96[6];
  v158 = (_QWORD *)(a1 + v157);
  v159 = (_QWORD *)(a2 + v157);
  v160 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v161 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, (uint64_t)v160);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, (uint64_t)v160);
  if (!v161)
  {
    if (v162)
    {
      sub_100011894((uint64_t)v158, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_54;
    }
    *v158 = *v159;
    v173 = v159[1];
    v174 = v158[1];
    v158[1] = v173;
    swift_bridgeObjectRetain(v173);
    swift_bridgeObjectRelease(v174);
    v175 = v160[5];
    v176 = (char *)v158 + v175;
    v177 = (char *)v159 + v175;
    v178 = type metadata accessor for AttributedString(0);
    v258 = *(_QWORD *)(v178 - 8);
    v255 = *(void (**)(char *, char *, uint64_t))(v258 + 24);
    v255(v176, v177, v178);
    v179 = v160[6];
    v180 = (char *)v158 + v179;
    v181 = (char *)v159 + v179;
    v182 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158 + v179, 1, v178);
    v183 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v181, 1, v178);
    if (v182)
    {
      if (!v183)
      {
        (*(void (**)(char *, char *, uint64_t))(v258 + 16))(v180, v181, v178);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v180, 0, 1, v178);
LABEL_65:
        v189 = v160[7];
        v190 = (_QWORD *)((char *)v158 + v189);
        v191 = (_QWORD *)((char *)v159 + v189);
        *v190 = *v191;
        v192 = v191[1];
        v193 = v190[1];
        v190[1] = v192;
        swift_bridgeObjectRetain(v192);
        swift_bridgeObjectRelease(v193);
        goto LABEL_66;
      }
    }
    else
    {
      if (!v183)
      {
        v255(v180, v181, v178);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v258 + 8))(v180, v178);
    }
    v188 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
    goto LABEL_65;
  }
  if (v162)
  {
LABEL_54:
    v172 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
    goto LABEL_66;
  }
  *v158 = *v159;
  v163 = v159[1];
  v158[1] = v163;
  v164 = v160[5];
  v165 = (char *)v158 + v164;
  v257 = (char *)v159 + v164;
  v166 = type metadata accessor for AttributedString(0);
  v167 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 16);
  swift_bridgeObjectRetain(v163);
  v167(v165, v257, v166);
  v168 = v160[6];
  v169 = (char *)v158 + v168;
  v170 = (char *)v159 + v168;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159 + v168, 1, v166))
  {
    v171 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
  }
  else
  {
    v167(v169, v170, v166);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v169, 0, 1, v166);
  }
  v184 = v160[7];
  v185 = (_QWORD *)((char *)v158 + v184);
  v186 = (_QWORD *)((char *)v159 + v184);
  *v185 = *v186;
  v187 = v186[1];
  v185[1] = v187;
  swift_bridgeObjectRetain(v187);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v158, 0, 1, (uint64_t)v160);
LABEL_66:
  v194 = v96[7];
  v195 = a1 + v194;
  v196 = a2 + v194;
  v197 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v197 - 8) + 24))(v195, v196, v197);
  v198 = v96[8];
  v199 = (_QWORD *)(a1 + v198);
  v200 = (_QWORD *)(a2 + v198);
  *v199 = *v200;
  v201 = v200[1];
  v202 = v199[1];
  v199[1] = v201;
  swift_bridgeObjectRetain(v201);
  swift_bridgeObjectRelease(v202);
  *(_BYTE *)(a1 + v96[9]) = *(_BYTE *)(a2 + v96[9]);
  *(_BYTE *)(a1 + v96[10]) = *(_BYTE *)(a2 + v96[10]);
  v203 = v96[11];
  v204 = *(_QWORD *)(a1 + v203);
  v205 = *(_QWORD *)(a2 + v203);
  *(_QWORD *)(a1 + v203) = v205;
  swift_retain(v205);
  swift_release(v204);
  v206 = v96[12];
  v207 = (_QWORD *)(a1 + v206);
  v208 = (_QWORD *)(a2 + v206);
  *v207 = *v208;
  v209 = v208[1];
  v210 = v207[1];
  v207[1] = v209;
  swift_bridgeObjectRetain(v209);
  swift_bridgeObjectRelease(v210);
  v211 = v96[13];
  v212 = *(_QWORD *)(a2 + v211);
  v213 = *(_QWORD *)(a1 + v211);
  *(_QWORD *)(a1 + v211) = v212;
  swift_retain(v212);
  swift_release(v213);
  v214 = v96[14];
  v215 = *(_QWORD *)(a2 + v214);
  v216 = *(_QWORD *)(a1 + v214);
  *(_QWORD *)(a1 + v214) = v215;
  swift_retain(v215);
  swift_release(v216);
  v217 = v96[15];
  v218 = *(_QWORD *)(a2 + v217);
  v219 = *(_QWORD *)(a1 + v217);
  *(_QWORD *)(a1 + v217) = v218;
  swift_retain(v218);
  swift_release(v219);
  v220 = v96[16];
  v221 = *(_QWORD *)(a2 + v220);
  v222 = *(_QWORD *)(a1 + v220);
  *(_QWORD *)(a1 + v220) = v221;
  swift_retain(v221);
  swift_release(v222);
  *(_BYTE *)(a1 + v96[17]) = *(_BYTE *)(a2 + v96[17]);
  v223 = v96[18];
  v224 = *(_QWORD *)(a2 + v223);
  v225 = *(_QWORD *)(a1 + v223);
  *(_QWORD *)(a1 + v223) = v224;
  swift_retain(v224);
  swift_release(v225);
  v226 = v96[19];
  v227 = *(_QWORD *)(a2 + v226);
  v228 = *(_QWORD *)(a1 + v226);
  *(_QWORD *)(a1 + v226) = v227;
  swift_retain(v227);
  swift_release(v228);
  *(_QWORD *)(a1 + v96[20]) = *(_QWORD *)(a2 + v96[20]);
  *(_BYTE *)(a1 + v96[21]) = *(_BYTE *)(a2 + v96[21]);
  *(_BYTE *)(a1 + v96[22]) = *(_BYTE *)(a2 + v96[22]);
  *(_BYTE *)(a1 + v96[23]) = *(_BYTE *)(a2 + v96[23]);
  *(_BYTE *)(a1 + v96[24]) = *(_BYTE *)(a2 + v96[24]);
  v229 = v96[25];
  v230 = (_QWORD *)(a1 + v229);
  v231 = (_QWORD *)(a2 + v229);
  *v230 = *v231;
  v232 = v231[1];
  v233 = v230[1];
  v230[1] = v232;
  swift_bridgeObjectRetain(v232);
  swift_bridgeObjectRelease(v233);
  *(_BYTE *)(a1 + v96[26]) = *(_BYTE *)(a2 + v96[26]);
  *(_QWORD *)(a1 + v96[27]) = *(_QWORD *)(a2 + v96[27]);
  *(_QWORD *)(a1 + v96[28]) = *(_QWORD *)(a2 + v96[28]);
  v234 = *(int *)(a3 + 20);
  v235 = (_QWORD *)(a1 + v234);
  v236 = (_QWORD *)(a2 + v234);
  *v235 = *v236;
  v235[1] = v236[1];
  if (a1 != a2)
  {
    v237 = *(int *)(a3 + 24);
    v238 = (uint64_t *)(a1 + v237);
    v239 = (uint64_t *)(a2 + v237);
    sub_100016904(a1 + v237, &qword_1001BF0C8);
    v240 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v239, v240) == 1)
    {
      v241 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v241 - 8) + 16))(v238, v239, v241);
      v242 = 1;
    }
    else
    {
      v243 = *v239;
      *v238 = *v239;
      swift_retain(v243);
      v242 = 0;
    }
    swift_storeEnumTagMultiPayload(v238, v240, v242);
  }
  return a1;
}

uint64_t sub_10014C024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  _OWORD *v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const void *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v116 = v11;
  v12(a1 + v7[6], a2 + v7[6], v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
  v18 = v7[10];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v18, 1, v16))
  {
    v21 = sub_100005D40(&qword_1001BF098);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v19, (uint64_t)v20, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v19, 0, 1, v16);
  }
  v22 = v7[11];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v112 = v17;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v22, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[12];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v113 = v5;
  v114 = v6;
  v6(a1 + v26, a2 + v26, v5);
  v29 = (int *)type metadata accessor for ConditionViewModel(0);
  v30 = v29[5];
  v31 = v27 + v30;
  v32 = v28 + v30;
  v33 = type metadata accessor for WeatherCondition(0);
  v108 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
  v109 = v33;
  v108(v31, v32);
  *(_OWORD *)(v27 + v29[6]) = *(_OWORD *)(v28 + v29[6]);
  *(_OWORD *)(v27 + v29[7]) = *(_OWORD *)(v28 + v29[7]);
  *(_BYTE *)(v27 + v29[8]) = *(_BYTE *)(v28 + v29[8]);
  *(_BYTE *)(v27 + v29[9]) = *(_BYTE *)(v28 + v29[9]);
  *(_BYTE *)(v27 + v29[10]) = *(_BYTE *)(v28 + v29[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v34 = v7[14];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  v38 = v7[15];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v38, 1, v116))
  {
    v41 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v39, (uint64_t)v40, v116);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v116);
  }
  v42 = v7[16];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v42, 1, v116))
  {
    v45 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v43, (uint64_t)v44, v116);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v43, 0, 1, v116);
  }
  v46 = v7[17];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for UVIndex(0);
  v110 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 32);
  v111 = v49;
  v110(v47, v48);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  v54 = v7[20];
  v55 = a1 + v54;
  v56 = a2 + v54;
  *(_BYTE *)(v55 + 32) = *(_BYTE *)(v56 + 32);
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  v58 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v59 = v58[5];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v114(a1 + v59, a2 + v59, v113);
  v62 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v12(v60 + v62[5], v61 + v62[5], v116);
  v112(v60 + v62[6], v61 + v62[6], v16);
  v112(v60 + v62[7], v61 + v62[7], v16);
  v63 = v62[8];
  v64 = v60 + v63;
  v65 = v61 + v63;
  v114(v60 + v63, v61 + v63, v113);
  ((void (*)(uint64_t, uint64_t, uint64_t))v108)(v64 + v29[5], v65 + v29[5], v109);
  *(_OWORD *)(v64 + v29[6]) = *(_OWORD *)(v65 + v29[6]);
  *(_OWORD *)(v64 + v29[7]) = *(_OWORD *)(v65 + v29[7]);
  *(_BYTE *)(v64 + v29[8]) = *(_BYTE *)(v65 + v29[8]);
  *(_BYTE *)(v64 + v29[9]) = *(_BYTE *)(v65 + v29[9]);
  *(_BYTE *)(v64 + v29[10]) = *(_BYTE *)(v65 + v29[10]);
  v66 = v62[9];
  v67 = v60 + v66;
  v68 = v61 + v66;
  v69 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
  *(_QWORD *)(v60 + v62[10]) = *(_QWORD *)(v61 + v62[10]);
  *(_OWORD *)(v60 + v62[11]) = *(_OWORD *)(v61 + v62[11]);
  *(_OWORD *)(v60 + v62[12]) = *(_OWORD *)(v61 + v62[12]);
  *(_OWORD *)(v60 + v62[13]) = *(_OWORD *)(v61 + v62[13]);
  *(_OWORD *)(v60 + v62[14]) = *(_OWORD *)(v61 + v62[14]);
  v70 = v62[15];
  v71 = v60 + v70;
  v72 = v61 + v70;
  v73 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
  v74 = v62[16];
  v75 = (void *)(v60 + v74);
  v76 = (const void *)(v61 + v74);
  v77 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v76, 1, v77))
  {
    v78 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v75, 0, 1, v77);
  }
  v79 = v62[17];
  v80 = (void *)(v60 + v79);
  v81 = (const void *)(v61 + v79);
  v82 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v81, 1, v82))
  {
    v83 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v80, v81, v82);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v80, 0, 1, v82);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v110)(v60 + v62[18], v61 + v62[18], v111);
  *(_QWORD *)(v60 + v62[19]) = *(_QWORD *)(v61 + v62[19]);
  v84 = v58[6];
  v85 = (_OWORD *)(a1 + v84);
  v86 = (_OWORD *)(a2 + v84);
  v87 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86, 1, (uint64_t)v87))
  {
    v88 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    *v85 = *v86;
    v89 = v87[5];
    v90 = (char *)v85 + v89;
    v91 = (char *)v86 + v89;
    v92 = type metadata accessor for AttributedString(0);
    v93 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32);
    v93(v90, v91, v92);
    v94 = v87[6];
    v95 = (char *)v85 + v94;
    v96 = (char *)v86 + v94;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86 + v94, 1, v92))
    {
      v97 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      v93(v95, v96, v92);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v92);
    }
    *(_OWORD *)((char *)v85 + v87[7]) = *(_OWORD *)((char *)v86 + v87[7]);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v85, 0, 1, (uint64_t)v87);
  }
  v98 = v58[7];
  v99 = a1 + v98;
  v100 = a2 + v98;
  v101 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v99, v100, v101);
  *(_OWORD *)(a1 + v58[8]) = *(_OWORD *)(a2 + v58[8]);
  *(_BYTE *)(a1 + v58[9]) = *(_BYTE *)(a2 + v58[9]);
  *(_BYTE *)(a1 + v58[10]) = *(_BYTE *)(a2 + v58[10]);
  *(_QWORD *)(a1 + v58[11]) = *(_QWORD *)(a2 + v58[11]);
  *(_OWORD *)(a1 + v58[12]) = *(_OWORD *)(a2 + v58[12]);
  *(_QWORD *)(a1 + v58[13]) = *(_QWORD *)(a2 + v58[13]);
  *(_QWORD *)(a1 + v58[14]) = *(_QWORD *)(a2 + v58[14]);
  *(_QWORD *)(a1 + v58[15]) = *(_QWORD *)(a2 + v58[15]);
  *(_QWORD *)(a1 + v58[16]) = *(_QWORD *)(a2 + v58[16]);
  *(_BYTE *)(a1 + v58[17]) = *(_BYTE *)(a2 + v58[17]);
  *(_QWORD *)(a1 + v58[18]) = *(_QWORD *)(a2 + v58[18]);
  *(_QWORD *)(a1 + v58[19]) = *(_QWORD *)(a2 + v58[19]);
  *(_QWORD *)(a1 + v58[20]) = *(_QWORD *)(a2 + v58[20]);
  *(_BYTE *)(a1 + v58[21]) = *(_BYTE *)(a2 + v58[21]);
  *(_BYTE *)(a1 + v58[22]) = *(_BYTE *)(a2 + v58[22]);
  *(_BYTE *)(a1 + v58[23]) = *(_BYTE *)(a2 + v58[23]);
  *(_BYTE *)(a1 + v58[24]) = *(_BYTE *)(a2 + v58[24]);
  *(_OWORD *)(a1 + v58[25]) = *(_OWORD *)(a2 + v58[25]);
  *(_BYTE *)(a1 + v58[26]) = *(_BYTE *)(a2 + v58[26]);
  *(_QWORD *)(a1 + v58[27]) = *(_QWORD *)(a2 + v58[27]);
  *(_QWORD *)(a1 + v58[28]) = *(_QWORD *)(a2 + v58[28]);
  v102 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  v103 = (void *)(a1 + v102);
  v104 = (const void *)(a2 + v102);
  v105 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v104, v105) == 1)
  {
    v106 = type metadata accessor for Font.Context(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v106 - 8) + 32))(v103, v104, v106);
    swift_storeEnumTagMultiPayload(v103, v105, 1);
  }
  else
  {
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10014C998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const void *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  int *v161;
  int v162;
  int v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v234;
  void (*v235)(uint64_t, uint64_t, uint64_t);
  uint64_t v236;
  uint64_t v237;
  int *v239;
  void (*v240)(uint64_t, uint64_t);
  uint64_t v241;
  void (*v242)(void *, const void *, uint64_t);
  void (*v243)(void *, const void *, uint64_t);
  void (*v244)(char *, char *, uint64_t);
  void (*v245)(uint64_t, uint64_t, uint64_t);
  uint64_t v246;

  v5 = type metadata accessor for UUID(0);
  v245 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40);
  v245(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v234 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v234 + 40);
  v11(v8, v9, v10);
  v243 = (void (*)(void *, const void *, uint64_t))v11;
  v11(a1 + v6[6], a2 + v6[6], v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40);
  v17(v13, v14, v15);
  v242 = (void (*)(void *, const void *, uint64_t))v17;
  v17(a1 + v6[8], a2 + v6[8], v15);
  v18 = v6[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = v6[10];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  LODWORD(v17) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v24, 1, v15);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v15);
  if ((_DWORD)v17)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v25, v26, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v25, v15);
LABEL_6:
    v28 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  v242(v25, v26, v15);
LABEL_7:
  v29 = v6[11];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v29, 1, v15);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v15);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v30, v31, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v30, v15);
LABEL_12:
    v34 = sub_100005D40(&qword_1001BF098);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  v242(v30, v31, v15);
LABEL_13:
  v35 = v6[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v236 = v5;
  v245(a1 + v35, a2 + v35, v5);
  v38 = (int *)type metadata accessor for ConditionViewModel(0);
  v39 = v38[5];
  v40 = v36 + v39;
  v41 = v37 + v39;
  v42 = type metadata accessor for WeatherCondition(0);
  v240 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40);
  v241 = v42;
  v240(v40, v41);
  v43 = v38[6];
  v44 = (_QWORD *)(v36 + v43);
  v45 = (uint64_t *)(v37 + v43);
  v47 = *v45;
  v46 = v45[1];
  v48 = v44[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease(v48);
  v49 = v38[7];
  v50 = (_QWORD *)(v36 + v49);
  v51 = (uint64_t *)(v37 + v49);
  v53 = *v51;
  v52 = v51[1];
  v54 = v50[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease(v54);
  *(_BYTE *)(v36 + v38[8]) = *(_BYTE *)(v37 + v38[8]);
  *(_BYTE *)(v36 + v38[9]) = *(_BYTE *)(v37 + v38[9]);
  *(_BYTE *)(v36 + v38[10]) = *(_BYTE *)(v37 + v38[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v55 = v6[14];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  v59 = v6[15];
  v60 = (void *)(a1 + v59);
  v61 = (const void *)(a2 + v59);
  LODWORD(v40) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v59, 1, v10);
  v62 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v61, 1, v10);
  v239 = v38;
  if ((_DWORD)v40)
  {
    if (!v62)
    {
      (*(void (**)(void *, const void *, uint64_t))(v234 + 32))(v60, v61, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v60, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v62)
  {
    (*(void (**)(void *, uint64_t))(v234 + 8))(v60, v10);
LABEL_18:
    v63 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_19;
  }
  v243(v60, v61, v10);
LABEL_19:
  v64 = v236;
  v65 = v6[16];
  v66 = (void *)(a1 + v65);
  v67 = (const void *)(a2 + v65);
  v68 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v65, 1, v10);
  v69 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(void *, const void *, uint64_t))(v234 + 32))(v66, v67, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v69)
  {
    (*(void (**)(void *, uint64_t))(v234 + 8))(v66, v10);
LABEL_24:
    v70 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_25;
  }
  v243(v66, v67, v10);
LABEL_25:
  v71 = v6[17];
  v72 = a1 + v71;
  v73 = a2 + v71;
  v74 = type metadata accessor for UVIndex(0);
  v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 40);
  v75(v72, v73, v74);
  v76 = v6[18];
  v77 = a1 + v76;
  v78 = a2 + v76;
  v79 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 40))(v77, v78, v79);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v80 = v6[20];
  v81 = a1 + v80;
  v82 = a2 + v80;
  v83 = *(_QWORD *)(a1 + v80 + 8);
  v235 = v75;
  v237 = v74;
  if (v83)
  {
    v84 = *(_QWORD *)(v82 + 8);
    if (v84)
    {
      *(_QWORD *)v81 = *(_QWORD *)v82;
      *(_QWORD *)(v81 + 8) = v84;
      swift_bridgeObjectRelease(v83);
      v85 = *(_BYTE *)(v82 + 32);
      v86 = *(_QWORD *)(v81 + 16);
      v87 = *(_QWORD *)(v81 + 24);
      v88 = *(_BYTE *)(v81 + 32);
      *(_OWORD *)(v81 + 16) = *(_OWORD *)(v82 + 16);
      *(_BYTE *)(v81 + 32) = v85;
      sub_100007458(v86, v87, v88);
      goto LABEL_30;
    }
    sub_100008EC4(v81);
  }
  v89 = *(_OWORD *)(v82 + 16);
  *(_OWORD *)v81 = *(_OWORD *)v82;
  *(_OWORD *)(v81 + 16) = v89;
  *(_BYTE *)(v81 + 32) = *(_BYTE *)(v82 + 32);
LABEL_30:
  v90 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v91 = v90[5];
  v92 = a1 + v91;
  v93 = a2 + v91;
  v245(a1 + v91, a2 + v91, v64);
  v94 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v243((void *)(v92 + v94[5]), (const void *)(v93 + v94[5]), v10);
  v242((void *)(v92 + v94[6]), (const void *)(v93 + v94[6]), v15);
  v242((void *)(v92 + v94[7]), (const void *)(v93 + v94[7]), v15);
  v95 = v94[8];
  v96 = v92 + v95;
  v97 = v93 + v95;
  v245(v92 + v95, v93 + v95, v64);
  ((void (*)(uint64_t, uint64_t, uint64_t))v240)(v96 + v239[5], v97 + v239[5], v241);
  v98 = v239[6];
  v99 = (_QWORD *)(v96 + v98);
  v100 = (uint64_t *)(v97 + v98);
  v102 = *v100;
  v101 = v100[1];
  v103 = v99[1];
  *v99 = v102;
  v99[1] = v101;
  swift_bridgeObjectRelease(v103);
  v104 = v239[7];
  v105 = (_QWORD *)(v96 + v104);
  v106 = (uint64_t *)(v97 + v104);
  v108 = *v106;
  v107 = v106[1];
  v109 = v105[1];
  *v105 = v108;
  v105[1] = v107;
  swift_bridgeObjectRelease(v109);
  *(_BYTE *)(v96 + v239[8]) = *(_BYTE *)(v97 + v239[8]);
  *(_BYTE *)(v96 + v239[9]) = *(_BYTE *)(v97 + v239[9]);
  *(_BYTE *)(v96 + v239[10]) = *(_BYTE *)(v97 + v239[10]);
  v110 = v94[9];
  v111 = v92 + v110;
  v112 = v93 + v110;
  v113 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 40))(v111, v112, v113);
  *(_QWORD *)(v92 + v94[10]) = *(_QWORD *)(v93 + v94[10]);
  v114 = v94[11];
  v115 = (_QWORD *)(v92 + v114);
  v116 = (uint64_t *)(v93 + v114);
  v118 = *v116;
  v117 = v116[1];
  v119 = v115[1];
  *v115 = v118;
  v115[1] = v117;
  swift_bridgeObjectRelease(v119);
  v120 = v94[12];
  v121 = (_QWORD *)(v92 + v120);
  v122 = (uint64_t *)(v93 + v120);
  v124 = *v122;
  v123 = v122[1];
  v125 = v121[1];
  *v121 = v124;
  v121[1] = v123;
  swift_bridgeObjectRelease(v125);
  v126 = v94[13];
  v127 = (_QWORD *)(v92 + v126);
  v128 = (uint64_t *)(v93 + v126);
  v130 = *v128;
  v129 = v128[1];
  v131 = v127[1];
  *v127 = v130;
  v127[1] = v129;
  swift_bridgeObjectRelease(v131);
  v132 = v94[14];
  v133 = (_QWORD *)(v92 + v132);
  v134 = (uint64_t *)(v93 + v132);
  v136 = *v134;
  v135 = v134[1];
  v137 = v133[1];
  *v133 = v136;
  v133[1] = v135;
  swift_bridgeObjectRelease(v137);
  v138 = v94[15];
  v139 = v92 + v138;
  v140 = v93 + v138;
  v141 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 40))(v139, v140, v141);
  v142 = v94[16];
  v143 = (void *)(v92 + v142);
  v144 = (const void *)(v93 + v142);
  v145 = type metadata accessor for SunEvents(0);
  v146 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v145);
  v147 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145);
  if (v146)
  {
    if (!v147)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v148 = *(_QWORD *)(v145 - 8);
  if (v147)
  {
    (*(void (**)(void *, uint64_t))(v148 + 8))(v143, v145);
LABEL_35:
    v149 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(void *, const void *, uint64_t))(v148 + 40))(v143, v144, v145);
LABEL_36:
  v150 = v94[17];
  v151 = (void *)(v92 + v150);
  v152 = (const void *)(v93 + v150);
  v153 = type metadata accessor for MoonEvents(0);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v153);
  v155 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v152, 1, v153);
  if (v154)
  {
    if (!v155)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v153 - 8) + 32))(v151, v152, v153);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v151, 0, 1, v153);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v156 = *(_QWORD *)(v153 - 8);
  if (v155)
  {
    (*(void (**)(void *, uint64_t))(v156 + 8))(v151, v153);
LABEL_41:
    v157 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v156 + 40))(v151, v152, v153);
LABEL_42:
  v235(v92 + v94[18], v93 + v94[18], v237);
  *(_QWORD *)(v92 + v94[19]) = *(_QWORD *)(v93 + v94[19]);
  v158 = v90[6];
  v159 = (_QWORD *)(a1 + v158);
  v160 = (_QWORD *)(a2 + v158);
  v161 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, (uint64_t)v161);
  v163 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v160, 1, (uint64_t)v161);
  if (v162)
  {
    if (!v163)
    {
      *(_OWORD *)v159 = *(_OWORD *)v160;
      v164 = v161[5];
      v165 = (char *)v159 + v164;
      v166 = (char *)v160 + v164;
      v167 = type metadata accessor for AttributedString(0);
      v168 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 32);
      v168(v165, v166, v167);
      v169 = v161[6];
      v170 = (char *)v159 + v169;
      v171 = (char *)v160 + v169;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v160 + v169, 1, v167))
      {
        v172 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
      }
      else
      {
        v168(v170, v171, v167);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v170, 0, 1, v167);
      }
      *(_OWORD *)((char *)v159 + v161[7]) = *(_OWORD *)((char *)v160 + v161[7]);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v159, 0, 1, (uint64_t)v161);
      goto LABEL_64;
    }
    goto LABEL_48;
  }
  if (v163)
  {
    sub_100011894((uint64_t)v159, type metadata accessor for RainInlineContentViewModel);
LABEL_48:
    v173 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    goto LABEL_64;
  }
  v174 = v160[1];
  v175 = v159[1];
  *v159 = *v160;
  v159[1] = v174;
  swift_bridgeObjectRelease(v175);
  v176 = v161[5];
  v177 = (char *)v159 + v176;
  v178 = (char *)v160 + v176;
  v179 = type metadata accessor for AttributedString(0);
  v246 = *(_QWORD *)(v179 - 8);
  v244 = *(void (**)(char *, char *, uint64_t))(v246 + 40);
  v244(v177, v178, v179);
  v180 = v161[6];
  v181 = (char *)v159 + v180;
  v182 = (char *)v160 + v180;
  v183 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159 + v180, 1, v179);
  v184 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v182, 1, v179);
  if (!v183)
  {
    if (!v184)
    {
      v244(v181, v182, v179);
      goto LABEL_63;
    }
    (*(void (**)(char *, uint64_t))(v246 + 8))(v181, v179);
    goto LABEL_62;
  }
  if (v184)
  {
LABEL_62:
    v185 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v246 + 32))(v181, v182, v179);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v181, 0, 1, v179);
LABEL_63:
  v186 = v161[7];
  v187 = (_QWORD *)((char *)v159 + v186);
  v188 = (_QWORD *)((char *)v160 + v186);
  v190 = *v188;
  v189 = v188[1];
  v191 = v187[1];
  *v187 = v190;
  v187[1] = v189;
  swift_bridgeObjectRelease(v191);
LABEL_64:
  v192 = v90[7];
  v193 = a1 + v192;
  v194 = a2 + v192;
  v195 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v195 - 8) + 40))(v193, v194, v195);
  v196 = v90[8];
  v197 = (_QWORD *)(a1 + v196);
  v198 = (uint64_t *)(a2 + v196);
  v200 = *v198;
  v199 = v198[1];
  v201 = v197[1];
  *v197 = v200;
  v197[1] = v199;
  swift_bridgeObjectRelease(v201);
  *(_BYTE *)(a1 + v90[9]) = *(_BYTE *)(a2 + v90[9]);
  *(_BYTE *)(a1 + v90[10]) = *(_BYTE *)(a2 + v90[10]);
  v202 = v90[11];
  v203 = *(_QWORD *)(a1 + v202);
  *(_QWORD *)(a1 + v202) = *(_QWORD *)(a2 + v202);
  swift_release(v203);
  v204 = v90[12];
  v205 = (_QWORD *)(a1 + v204);
  v206 = (uint64_t *)(a2 + v204);
  v208 = *v206;
  v207 = v206[1];
  v209 = v205[1];
  *v205 = v208;
  v205[1] = v207;
  swift_bridgeObjectRelease(v209);
  v210 = v90[13];
  v211 = *(_QWORD *)(a1 + v210);
  *(_QWORD *)(a1 + v210) = *(_QWORD *)(a2 + v210);
  swift_release(v211);
  v212 = v90[14];
  v213 = *(_QWORD *)(a1 + v212);
  *(_QWORD *)(a1 + v212) = *(_QWORD *)(a2 + v212);
  swift_release(v213);
  v214 = v90[15];
  v215 = *(_QWORD *)(a1 + v214);
  *(_QWORD *)(a1 + v214) = *(_QWORD *)(a2 + v214);
  swift_release(v215);
  v216 = v90[16];
  v217 = *(_QWORD *)(a1 + v216);
  *(_QWORD *)(a1 + v216) = *(_QWORD *)(a2 + v216);
  swift_release(v217);
  *(_BYTE *)(a1 + v90[17]) = *(_BYTE *)(a2 + v90[17]);
  v218 = v90[18];
  v219 = *(_QWORD *)(a1 + v218);
  *(_QWORD *)(a1 + v218) = *(_QWORD *)(a2 + v218);
  swift_release(v219);
  v220 = v90[19];
  v221 = *(_QWORD *)(a1 + v220);
  *(_QWORD *)(a1 + v220) = *(_QWORD *)(a2 + v220);
  swift_release(v221);
  *(_QWORD *)(a1 + v90[20]) = *(_QWORD *)(a2 + v90[20]);
  *(_BYTE *)(a1 + v90[21]) = *(_BYTE *)(a2 + v90[21]);
  *(_BYTE *)(a1 + v90[22]) = *(_BYTE *)(a2 + v90[22]);
  *(_BYTE *)(a1 + v90[23]) = *(_BYTE *)(a2 + v90[23]);
  *(_BYTE *)(a1 + v90[24]) = *(_BYTE *)(a2 + v90[24]);
  v222 = v90[25];
  v223 = (_QWORD *)(a1 + v222);
  v224 = (uint64_t *)(a2 + v222);
  v226 = *v224;
  v225 = v224[1];
  v227 = v223[1];
  *v223 = v226;
  v223[1] = v225;
  swift_bridgeObjectRelease(v227);
  *(_BYTE *)(a1 + v90[26]) = *(_BYTE *)(a2 + v90[26]);
  *(_QWORD *)(a1 + v90[27]) = *(_QWORD *)(a2 + v90[27]);
  *(_QWORD *)(a1 + v90[28]) = *(_QWORD *)(a2 + v90[28]);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  if (a1 != a2)
  {
    v228 = *(int *)(a3 + 24);
    v229 = (void *)(a1 + v228);
    v230 = (const void *)(a2 + v228);
    sub_100016904(a1 + v228, &qword_1001BF0C8);
    v231 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v230, v231) == 1)
    {
      v232 = type metadata accessor for Font.Context(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v232 - 8) + 32))(v229, v230, v232);
      swift_storeEnumTagMultiPayload(v229, v231, 1);
    }
    else
    {
      memcpy(v229, v230, *(_QWORD *)(*(_QWORD *)(v231 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10014D77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014D788);
}

uint64_t sub_10014D788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;

  sub_100016B00();
  sub_10001C6C0();
  if (v6)
  {
    v8 = sub_1001579E8();
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BF0D0);
    v8 = a1 + *(int *)(a3 + 24);
  }
  return sub_100016B50(v8, a2, v7);
}

uint64_t sub_10014D7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014D7E8);
}

uint64_t sub_10014D7E8()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100016B00();
  sub_10001C6D0();
  if (v0)
    sub_100157A28();
  else
    sub_100005D40(&qword_1001BF0D0);
  sub_1000A75F8();
  return sub_100016B44(v1, v2, v3, v4);
}

void sub_10014D840(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v2 = type metadata accessor for CurrentObservationViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_100185240;
    sub_10000A7A4(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_10014D8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014D8D8);
}

uint64_t sub_10014D8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014D8E8);
}

uint64_t sub_10014D8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001565F8);
}

uint64_t sub_10014D8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014D904);
}

uint64_t sub_10014D904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100016B00();
  sub_100157A28();
  sub_1000A75F8();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, v1, v2, v3);
}

#error "10014DA94: call analysis failed (funcsize=277)"

uint64_t sub_10014DDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);

  v6 = sub_100156B6C();
  sub_1001571CC(v6);
  v7 = (int *)sub_1000A7264();
  v8 = sub_10002338C();
  v9 = *(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  sub_100016BA8();
  sub_100157558();
  v10 = v2 + v7[7];
  sub_100005D40(&qword_1001BF090);
  sub_100016B5C(v10);
  sub_100016B5C(v2 + v7[8]);
  sub_100016A8C(v2 + v7[9]);
  v11 = v2 + v7[10];
  if (!sub_100016AC4(v11))
    sub_100016B5C(v11);
  v12 = v2 + v7[11];
  if (!sub_100016AC4(v12))
    sub_100016B5C(v12);
  v13 = v2 + v7[12];
  v47 = v4;
  v4(v13, v3);
  v14 = (int *)sub_1000A7274();
  sub_1000A727C();
  v15 = sub_1001578FC();
  v43 = v17;
  v44 = v16;
  ((void (*)(uint64_t))v17)(v15);
  sub_100016A8C(v13 + v14[6]);
  sub_100016A8C(v13 + v14[7]);
  v18 = sub_1000234BC();
  sub_100016BF0(v18);
  if (!sub_100016AB8(v2 + v7[15]))
    sub_100016BA8();
  if (!sub_100016AB8(v2 + v7[16]))
    sub_100016BA8();
  sub_1000234CC();
  v19 = sub_100016CD8();
  v45 = v21;
  v46 = v20;
  ((void (*)(uint64_t))v21)(v19);
  v22 = sub_1000234C4();
  sub_100016BF0(v22);
  v23 = v2 + v7[20];
  v24 = *(_QWORD *)(v23 + 8);
  if (v24)
  {
    swift_bridgeObjectRelease(v24);
    sub_100083184();
  }
  v25 = sub_100016B00();
  v26 = sub_10015795C(v25);
  v47(v26, v3);
  v27 = sub_10001C804();
  v28 = sub_1001579FC(v27);
  v9(v28);
  sub_100016B5C(v5 + *(int *)(v23 + 24));
  sub_100016B5C(v5 + *(int *)(v23 + 28));
  sub_100157370();
  v43(v8 + v14[5], v44);
  sub_100016A8C(v8 + v14[6]);
  sub_100016A8C(v8 + v14[7]);
  v29 = sub_10013FE24();
  sub_100016C04(v29);
  sub_100016A8C(v5 + *(int *)(v23 + 44));
  sub_100016A8C(v5 + *(int *)(v23 + 48));
  sub_100016A8C(v5 + *(int *)(v23 + 52));
  sub_100016A8C(v5 + *(int *)(v23 + 56));
  v30 = sub_10013FE1C();
  sub_100016C04(v30);
  v31 = v5 + *(int *)(v23 + 64);
  v32 = sub_1000A7254();
  if (!sub_100016AB8(v31))
    sub_1001569E0(*(_QWORD *)(v32 - 8));
  v33 = v5 + *(int *)(v23 + 68);
  v34 = sub_1000A725C();
  if (!sub_100016AB8(v33))
    sub_1001569E0(*(_QWORD *)(v34 - 8));
  v45(v5 + *(int *)(v23 + 72), v46);
  v35 = v2 + v7[6];
  v36 = sub_1000E01F0();
  if (!sub_1000F9F90(v35))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v35 + 8));
    v37 = sub_100156B1C();
    sub_100156D1C(v37);
    if (!sub_100016AB8(v35 + *(int *)(v36 + 24)))
      sub_100016B10();
    sub_100016A8C(v35 + *(int *)(v36 + 28));
  }
  v38 = sub_100070DE8();
  sub_100016BF0(v38);
  sub_100016A8C(v2 + v7[8]);
  sub_100016B3C(v7[11]);
  sub_100016A8C(v2 + v7[12]);
  sub_100016B3C(v7[13]);
  sub_100016B3C(v7[14]);
  sub_100016B3C(v7[15]);
  sub_100016B3C(v7[16]);
  sub_100016B3C(v7[18]);
  sub_100016B3C(v7[19]);
  sub_100016A8C(v2 + v7[25]);
  v39 = (_QWORD *)(v2 + *(int *)(a2 + 20));
  v40 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v39, v40) != 1)
    return swift_release(*v39);
  v41 = sub_100157028();
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v39, v41);
}

#error "10014E2EC: call analysis failed (funcsize=268)"

#error "10014E94C: call analysis failed (funcsize=540)"

void sub_10014EE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;

  sub_100156BF0();
  v79 = v3;
  v4 = sub_100156B5C();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
  sub_100157020(v0, v1);
  v6 = (int *)sub_1000A7264();
  sub_10002338C();
  sub_100157680();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  sub_100157078();
  v8(v0 + v6[6], v1 + v6[6], v2);
  sub_100157714();
  sub_100005D40(&qword_1001BF090);
  sub_100157680();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  sub_100157068();
  sub_100157234(v0 + v6[8], v1 + v6[8]);
  sub_1001570C8(v6[9]);
  v11 = v6[10];
  v12 = v0 + v11;
  if (sub_100016AC4(v1 + v11))
  {
    v13 = sub_100005D40(&qword_1001BF098);
    sub_1000A6E18(v13);
  }
  else
  {
    sub_100157068();
    sub_100156608(v12);
  }
  v14 = v6[11];
  v15 = v0 + v14;
  v76 = v10;
  if (sub_100016AC4(v1 + v14))
  {
    v16 = sub_100005D40(&qword_1001BF098);
    sub_1000A6E18(v16);
  }
  else
  {
    sub_100157068();
    sub_100156608(v15);
  }
  v17 = v6[12];
  v18 = v0 + v17;
  v19 = v1 + v17;
  v77 = v4;
  v78 = v5;
  sub_100157020(v0 + v17, v1 + v17);
  v20 = (int *)sub_1000A7274();
  v21 = v20[5];
  v22 = v18 + v21;
  v23 = v19 + v21;
  v24 = sub_1000A727C();
  v72 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v73 = v24;
  v72(v22, v23);
  *(_OWORD *)(v18 + v20[6]) = *(_OWORD *)(v19 + v20[6]);
  *(_OWORD *)(v18 + v20[7]) = *(_OWORD *)(v19 + v20[7]);
  *(_BYTE *)(v18 + v20[8]) = *(_BYTE *)(v19 + v20[8]);
  *(_BYTE *)(v18 + v20[9]) = *(_BYTE *)(v19 + v20[9]);
  *(_BYTE *)(v18 + v20[10]) = *(_BYTE *)(v19 + v20[10]);
  sub_100157948();
  v25 = sub_1000234BC();
  sub_1000A6D7C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32));
  v26 = v6[15];
  v27 = v0 + v26;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v1 + v26, 1, v2))
  {
    v28 = sub_100005D40(&qword_1001BF0A0);
    sub_10015743C(v28);
  }
  else
  {
    sub_1001576CC();
    sub_10015712C(v27);
  }
  v29 = v0 + v6[16];
  if (sub_10015760C())
  {
    v30 = sub_100005D40(&qword_1001BF0A0);
    sub_10015743C(v30);
  }
  else
  {
    sub_1001576CC();
    sub_10015712C(v29);
  }
  sub_1000234CC();
  v31 = sub_10015783C();
  v74 = v33;
  v75 = v32;
  ((void (*)(uint64_t))v33)(v31);
  v34 = sub_1000234C4();
  sub_1000A6D7C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32));
  sub_100157910();
  v36 = v0 + v35;
  v37 = v1 + v35;
  *(_BYTE *)(v36 + 32) = *(_BYTE *)(v37 + 32);
  v38 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_OWORD *)(v36 + 16) = v38;
  v39 = (int *)sub_100016B00();
  v40 = v39[5];
  v41 = v0 + v40;
  v42 = v1 + v40;
  v78(v0 + v40, v1 + v40, v77);
  v43 = sub_10001C804();
  v8(v41 + *(int *)(v43 + 20), v42 + *(int *)(v43 + 20), v2);
  v76(v41 + *(int *)(v43 + 24), v42 + *(int *)(v43 + 24), v2);
  v76(v41 + *(int *)(v43 + 28), v42 + *(int *)(v43 + 28), v2);
  v44 = *(int *)(v43 + 32);
  v45 = v41 + v44;
  v46 = v42 + v44;
  v78(v41 + v44, v42 + v44, v77);
  ((void (*)(uint64_t, uint64_t, uint64_t))v72)(v45 + v20[5], v46 + v20[5], v73);
  *(_OWORD *)(v45 + v20[6]) = *(_OWORD *)(v46 + v20[6]);
  *(_OWORD *)(v45 + v20[7]) = *(_OWORD *)(v46 + v20[7]);
  *(_BYTE *)(v45 + v20[8]) = *(_BYTE *)(v46 + v20[8]);
  *(_BYTE *)(v45 + v20[9]) = *(_BYTE *)(v46 + v20[9]);
  *(_BYTE *)(v45 + v20[10]) = *(_BYTE *)(v46 + v20[10]);
  v47 = sub_10013FE24();
  sub_100157328(v47);
  *(_QWORD *)(v41 + *(int *)(v43 + 40)) = *(_QWORD *)(v42 + *(int *)(v43 + 40));
  sub_1001578B0(*(int *)(v43 + 44));
  sub_1001578B0(*(int *)(v43 + 48));
  sub_1001578B0(*(int *)(v43 + 52));
  sub_1001578B0(*(int *)(v43 + 56));
  v48 = sub_10013FE1C();
  sub_100157328(v48);
  v49 = *(int *)(v43 + 64);
  v50 = v41 + v49;
  v51 = v42 + v49;
  v52 = sub_1000A7254();
  if (sub_1000A6DAC(v51))
  {
    v53 = sub_100005D40(&qword_1001BF0A8);
    sub_100157428(v53);
  }
  else
  {
    sub_1000E02E0(v50, v51, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 32));
    sub_1000A6B88(v50);
  }
  v54 = *(int *)(v43 + 68);
  v55 = v41 + v54;
  v56 = v42 + v54;
  v57 = sub_1000A725C();
  if (sub_1000A6DAC(v56))
  {
    v58 = sub_100005D40(&qword_1001BF0B0);
    sub_100157428(v58);
  }
  else
  {
    sub_1000E02E0(v55, v56, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 32));
    sub_1000A6B88(v55);
  }
  v74(v41 + *(int *)(v43 + 72), v42 + *(int *)(v43 + 72), v75);
  *(_QWORD *)(v41 + *(int *)(v43 + 76)) = *(_QWORD *)(v42 + *(int *)(v43 + 76));
  v59 = (_OWORD *)(v0 + v39[6]);
  v60 = sub_100156CAC();
  if (sub_100016AC4(v43))
  {
    v61 = sub_100005D40(&qword_1001BF0C0);
    sub_1000A6E18(v61);
  }
  else
  {
    *v59 = *(_OWORD *)v43;
    sub_1001569C4();
    sub_1000A6BD0();
    v62 = *(int *)(v60 + 24);
    v63 = (uint64_t)v59 + v62;
    if (sub_1000A6DAC(v43 + v62))
    {
      v64 = sub_100005D40(&qword_1001BF0B8);
      sub_1000A6D04(v64);
    }
    else
    {
      sub_1000A6BD0();
      sub_1000A6B88(v63);
    }
    *(_OWORD *)((char *)v59 + *(int *)(v60 + 28)) = *(_OWORD *)(v43 + *(int *)(v60 + 28));
    sub_100156608((uint64_t)v59);
  }
  v65 = sub_100070DE8();
  sub_1000A6D7C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 32));
  sub_1001570C8(v39[8]);
  sub_100156CFC();
  sub_1000FA0EC(v66);
  sub_1001570C8(v39[12]);
  sub_100157948();
  sub_1000FA0EC(v67);
  sub_1000FA0EC(v39[15]);
  sub_1000FA0EC(v39[16]);
  *(_BYTE *)(v0 + v39[17]) = *(_BYTE *)(v1 + v39[17]);
  sub_1000FA0EC(v39[18]);
  sub_100157910();
  sub_1000FA0EC(v68);
  *(_BYTE *)(v0 + v39[21]) = *(_BYTE *)(v1 + v39[21]);
  *(_BYTE *)(v0 + v39[22]) = *(_BYTE *)(v1 + v39[22]);
  *(_BYTE *)(v0 + v39[23]) = *(_BYTE *)(v1 + v39[23]);
  *(_BYTE *)(v0 + v39[24]) = *(_BYTE *)(v1 + v39[24]);
  sub_1001570C8(v39[25]);
  *(_BYTE *)(v0 + v39[26]) = *(_BYTE *)(v1 + v39[26]);
  sub_1000FA0EC(v39[27]);
  sub_1000FA0EC(v39[28]);
  v69 = v0 + *(int *)(v79 + 20);
  v70 = sub_100005D40(&qword_1001BF0C8);
  if (sub_10015762C(v70) == 1)
  {
    v71 = sub_100157028();
    sub_100156FD8(v69, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 32));
    sub_1001575F4();
  }
  else
  {
    sub_1001573DC();
  }
  sub_100156948();
}

#error "10014F9DC: call analysis failed (funcsize=430)"

uint64_t sub_10014FBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014FBE8);
}

uint64_t sub_10014FBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;

  sub_100016B00();
  sub_10001C6C0();
  if (v6)
  {
    v8 = sub_1001579E8();
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BF0D0);
    v8 = a1 + *(int *)(a3 + 20);
  }
  return sub_100016B50(v8, a2, v7);
}

uint64_t sub_10014FC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014FC4C);
}

uint64_t sub_10014FC50()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100016B00();
  sub_10001C6D0();
  if (v0)
    sub_100157A28();
  else
    sub_100005D40(&qword_1001BF0D0);
  sub_1000A75F8();
  return sub_100016B44(v1, v2, v3, v4);
}

void sub_10014FCA8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_10015778C();
  if (v2 <= 0x3F)
  {
    v5 = *(_QWORD *)(v1 - 8) + 64;
    sub_10000A7A4(319);
    if (v3 <= 0x3F)
    {
      sub_1001577C4();
      swift_initStructMetadata(v0, 256, 2, &v5, v4);
    }
  }
  sub_1001578F0();
}

ValueMetadata *type metadata accessor for CurrentObservationContainerAccessibilityModifier()
{
  return &type metadata for CurrentObservationContainerAccessibilityModifier;
}

char *sub_10014FD20(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  int *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void (*v100)(uint64_t, char *, uint64_t);
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void (*v120)(uint64_t, char *, uint64_t);
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  _QWORD *v137;
  uint64_t v138;
  void (*v140)(char *, char *);
  uint64_t v141;
  void (*v142)(char *, char *);
  uint64_t v143;
  void (*v144)(uint64_t, char *, uint64_t);
  void (*v145)(char *, char *, uint64_t);
  uint64_t v146;
  void (*v147)(char *, char *, uint64_t);
  uint64_t v148;
  char *v149;
  char *v150;
  _QWORD *v152;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v28 = (char *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v27);
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v147 = v13;
    v13(&a1[v8[6]], &a2[v8[6]], v12);
    v14 = v8[7];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = sub_100005D40(&qword_1001BF090);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v18(&a1[v8[8]], &a2[v8[8]], v17);
    v19 = v8[9];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = v8[10];
    v24 = &a1[v23];
    v25 = &a2[v23];
    swift_bridgeObjectRetain(v22);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v17))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v18(v24, v25, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v17);
    }
    v29 = v8[11];
    v30 = &a1[v29];
    v31 = &a2[v29];
    v148 = v12;
    v144 = (void (*)(uint64_t, char *, uint64_t))v18;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v29], 1, v17))
    {
      v32 = sub_100005D40(&qword_1001BF098);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v18(v30, v31, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v17);
    }
    v33 = v8[12];
    v34 = &a1[v33];
    v35 = a2;
    v36 = &a2[v33];
    v145 = v7;
    v146 = v6;
    v7(&a1[v33], &a2[v33], v6);
    v37 = (int *)type metadata accessor for ConditionViewModel(0);
    v38 = v37[5];
    v39 = &v34[v38];
    v40 = &v36[v38];
    v41 = type metadata accessor for WeatherCondition(0);
    v140 = *(void (**)(char *, char *))(*(_QWORD *)(v41 - 8) + 16);
    v141 = v41;
    v140(v39, v40);
    v42 = v37[6];
    v43 = &v34[v42];
    v44 = &v36[v42];
    v45 = *((_QWORD *)v44 + 1);
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *((_QWORD *)v43 + 1) = v45;
    v46 = v37[7];
    v47 = &v34[v46];
    v48 = &v36[v46];
    v49 = *((_QWORD *)v48 + 1);
    *(_QWORD *)v47 = *(_QWORD *)v48;
    *((_QWORD *)v47 + 1) = v49;
    v34[v37[8]] = v36[v37[8]];
    v34[v37[9]] = v36[v37[9]];
    v34[v37[10]] = v36[v37[10]];
    *(_QWORD *)&a1[v8[13]] = *(_QWORD *)((char *)v35 + v8[13]);
    v50 = v8[14];
    v51 = &a1[v50];
    v52 = (char *)v35 + v50;
    v150 = a1;
    v53 = type metadata accessor for CloudAltitudeKind(0);
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v49);
    v55 = v53;
    v56 = v150;
    v54(v51, v52, v55);
    v57 = v8[15];
    v58 = &v150[v57];
    v152 = v35;
    v59 = (char *)v35 + v57;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35 + v57, 1, v148))
    {
      v60 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v147(v58, v59, v148);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v148);
    }
    v61 = v8[16];
    v62 = &v150[v61];
    v63 = (char *)v35 + v61;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35 + v61, 1, v148))
    {
      v64 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      v147(v62, v63, v148);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v62, 0, 1, v148);
    }
    v65 = v8[17];
    v66 = &v150[v65];
    v67 = (char *)v35 + v65;
    v68 = type metadata accessor for UVIndex(0);
    v142 = *(void (**)(char *, char *))(*(_QWORD *)(v68 - 8) + 16);
    v143 = v68;
    v142(v66, v67);
    v69 = v8[18];
    v70 = &v150[v69];
    v71 = (char *)v35 + v69;
    v72 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
    *(_QWORD *)&v150[v8[19]] = *(_QWORD *)((char *)v35 + v8[19]);
    v73 = v8[20];
    v74 = &v150[v73];
    v75 = (char *)v35 + v73;
    v76 = *((_QWORD *)v75 + 1);
    if (v76)
    {
      *(_QWORD *)v74 = *(_QWORD *)v75;
      *((_QWORD *)v74 + 1) = v76;
      v77 = *((_QWORD *)v75 + 2);
      v78 = *((_QWORD *)v75 + 3);
      v79 = v75[32];
      swift_bridgeObjectRetain(v76);
      sub_100006E58(v77, v78, v79);
      *((_QWORD *)v74 + 2) = v77;
      *((_QWORD *)v74 + 3) = v78;
      v74[32] = v79;
      v56 = v150;
    }
    else
    {
      v80 = *((_OWORD *)v75 + 1);
      *(_OWORD *)v74 = *(_OWORD *)v75;
      *((_OWORD *)v74 + 1) = v80;
      v74[32] = v75[32];
    }
    v81 = a3[5];
    v82 = &v56[v81];
    v83 = (char *)v35 + v81;
    v145(&v56[v81], (char *)v35 + v81, v146);
    v84 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v147(&v82[v84[5]], &v83[v84[5]], v148);
    v144((uint64_t)&v82[v84[6]], &v83[v84[6]], v17);
    v144((uint64_t)&v82[v84[7]], &v83[v84[7]], v17);
    v85 = v84[8];
    v86 = &v82[v85];
    v87 = &v83[v85];
    v145(&v82[v85], &v83[v85], v146);
    ((void (*)(char *, char *, uint64_t))v140)(&v86[v37[5]], &v87[v37[5]], v141);
    v88 = v37[6];
    v89 = &v86[v88];
    v90 = &v87[v88];
    v91 = *((_QWORD *)v90 + 1);
    *v89 = *(_QWORD *)v90;
    v89[1] = v91;
    v92 = v37[7];
    v93 = &v86[v92];
    v94 = &v87[v92];
    v95 = *((_QWORD *)v94 + 1);
    *v93 = *(_QWORD *)v94;
    v93[1] = v95;
    v86[v37[8]] = v87[v37[8]];
    v86[v37[9]] = v87[v37[9]];
    v86[v37[10]] = v87[v37[10]];
    v96 = v84[9];
    v97 = &v82[v96];
    v98 = &v83[v96];
    v99 = type metadata accessor for Precipitation(0);
    v100 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 16);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v95);
    v100((uint64_t)v97, v98, v99);
    *(_QWORD *)&v82[v84[10]] = *(_QWORD *)&v83[v84[10]];
    v101 = v84[11];
    v102 = &v82[v101];
    v103 = &v83[v101];
    v104 = *((_QWORD *)v103 + 1);
    *(_QWORD *)v102 = *(_QWORD *)v103;
    *((_QWORD *)v102 + 1) = v104;
    v105 = v84[12];
    v106 = &v82[v105];
    v107 = &v83[v105];
    v108 = *((_QWORD *)v107 + 1);
    *(_QWORD *)v106 = *(_QWORD *)v107;
    *((_QWORD *)v106 + 1) = v108;
    v109 = v84[13];
    v110 = &v82[v109];
    v111 = &v83[v109];
    v112 = *((_QWORD *)v111 + 1);
    *(_QWORD *)v110 = *(_QWORD *)v111;
    *((_QWORD *)v110 + 1) = v112;
    v113 = v84[14];
    v114 = &v82[v113];
    v115 = &v83[v113];
    v116 = *((_QWORD *)v115 + 1);
    *(_QWORD *)v114 = *(_QWORD *)v115;
    *((_QWORD *)v114 + 1) = v116;
    v117 = v84[15];
    v118 = &v82[v117];
    v149 = &v83[v117];
    v119 = type metadata accessor for TemperatureScaleConfiguration(0);
    v120 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 16);
    swift_bridgeObjectRetain(v104);
    swift_bridgeObjectRetain(v108);
    swift_bridgeObjectRetain(v112);
    swift_bridgeObjectRetain(v116);
    v120((uint64_t)v118, v149, v119);
    v121 = v84[16];
    v122 = &v82[v121];
    v123 = &v83[v121];
    v124 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v123, 1, v124))
    {
      v125 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(v122, v123, v124);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v122, 0, 1, v124);
    }
    v126 = v84[17];
    v127 = &v82[v126];
    v128 = &v83[v126];
    v129 = type metadata accessor for MoonEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128, 1, v129))
    {
      v130 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 16))(v127, v128, v129);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v127, 0, 1, v129);
    }
    ((void (*)(char *, char *, uint64_t))v142)(&v82[v84[18]], &v83[v84[18]], v143);
    *(_QWORD *)&v82[v84[19]] = *(_QWORD *)&v83[v84[19]];
    v28 = v150;
    v131 = a3[6];
    v132 = &v150[v131];
    v133 = (uint64_t)v152 + v131;
    v134 = type metadata accessor for Location(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(v132, v133, v134);
    v135 = a3[7];
    v136 = &v150[v135];
    v137 = (_QWORD *)((char *)v152 + v135);
    v138 = v137[1];
    *(_QWORD *)v136 = *v137;
    *((_QWORD *)v136 + 1) = v138;
    swift_bridgeObjectRetain(v138);
  }
  return v28;
}

double sub_100150534(uint64_t a1, int *a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double result;
  void (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t);
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t, uint64_t);

  v3 = type metadata accessor for UUID(0);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(a1, v3);
  v5 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v6 = a1 + v5[5];
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v46 = v8;
  v8(a1 + v5[6], v7);
  v9 = a1 + v5[7];
  v10 = sub_100005D40(&qword_1001BF090);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(a1 + v5[8], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[9] + 8));
  v12 = a1 + v5[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v12, 1, v10))
    v11(v12, v10);
  v13 = a1 + v5[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v13, 1, v10))
    v11(v13, v10);
  v14 = a1 + v5[12];
  v45 = v4;
  v4(v14, v3);
  v15 = (int *)type metadata accessor for ConditionViewModel(0);
  v16 = v14 + v15[5];
  v17 = type metadata accessor for WeatherCondition(0);
  v42 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v42(v16, v17);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[7] + 8));
  v18 = a1 + v5[14];
  v19 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = a1 + v5[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v20, 1, v7))
    v46(v20, v7);
  v21 = a1 + v5[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v21, 1, v7))
    v46(v21, v7);
  v22 = a1 + v5[17];
  v23 = type metadata accessor for UVIndex(0);
  v43 = *(void (**)(uint64_t))(*(_QWORD *)(v23 - 8) + 8);
  v44 = v23;
  v43(v22);
  v24 = a1 + v5[18];
  v25 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = a1 + v5[20];
  v27 = *(_QWORD *)(v26 + 8);
  if (v27)
  {
    swift_bridgeObjectRelease(v27);
    sub_100007458(*(_QWORD *)(v26 + 16), *(_QWORD *)(v26 + 24), *(_BYTE *)(v26 + 32));
  }
  v28 = a1 + a2[5];
  v45(v28, v3);
  v29 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v46(v28 + v29[5], v7);
  v11(v28 + v29[6], v10);
  v11(v28 + v29[7], v10);
  v30 = v28 + v29[8];
  v45(v30, v3);
  v42(v30 + v15[5], v17);
  swift_bridgeObjectRelease(*(_QWORD *)(v30 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v30 + v15[7] + 8));
  v31 = v28 + v29[9];
  v32 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  swift_bridgeObjectRelease(*(_QWORD *)(v28 + v29[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v28 + v29[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v28 + v29[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v28 + v29[14] + 8));
  v33 = v28 + v29[15];
  v34 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
  v35 = v28 + v29[16];
  v36 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v35, 1, v36))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
  v37 = v28 + v29[17];
  v38 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v37, 1, v38))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
  ((void (*)(uint64_t, uint64_t))v43)(v28 + v29[18], v44);
  v39 = a1 + a2[6];
  v40 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1001509C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  void *v118;
  const void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  const void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  void (*v136)(uint64_t, uint64_t);
  uint64_t v137;
  void (*v138)(uint64_t, uint64_t);
  uint64_t v139;
  void (*v140)(uint64_t, uint64_t, uint64_t);
  uint64_t v141;
  void (*v142)(void *, const void *, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  uint64_t v147;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v142 = v12;
  v143 = v11;
  v12((void *)(a1 + v7[6]), (const void *)(a2 + v7[6]), v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  v18 = v7[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v7[10];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  swift_bridgeObjectRetain(v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[11];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v26, 1, v16))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v27, (uint64_t)v28, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v16);
  }
  v30 = v7[12];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v140 = v6;
  v141 = v5;
  v6(a1 + v30, a2 + v30, v5);
  v33 = (int *)type metadata accessor for ConditionViewModel(0);
  v34 = v33[5];
  v35 = v31 + v34;
  v36 = v32 + v34;
  v37 = type metadata accessor for WeatherCondition(0);
  v136 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
  v137 = v37;
  v136(v35, v36);
  v38 = v33[6];
  v39 = (_QWORD *)(v31 + v38);
  v40 = (_QWORD *)(v32 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = v33[7];
  v43 = (_QWORD *)(v31 + v42);
  v44 = (_QWORD *)(v32 + v42);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  *(_BYTE *)(v31 + v33[8]) = *(_BYTE *)(v32 + v33[8]);
  *(_BYTE *)(v31 + v33[9]) = *(_BYTE *)(v32 + v33[9]);
  *(_BYTE *)(v31 + v33[10]) = *(_BYTE *)(v32 + v33[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v46 = v7[14];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v146 = a1;
  v147 = a2;
  v49 = type metadata accessor for CloudAltitudeKind(0);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  v51 = v49;
  v52 = v147;
  v50(v47, v48, v51);
  v53 = v7[15];
  v54 = (void *)(v146 + v53);
  v55 = (const void *)(v147 + v53);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v147 + v53, 1, v143))
  {
    v56 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    v142(v54, v55, v143);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v54, 0, 1, v143);
  }
  v57 = v7[16];
  v58 = (void *)(v146 + v57);
  v59 = (const void *)(v147 + v57);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v147 + v57, 1, v143))
  {
    v60 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    v142(v58, v59, v143);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v143);
  }
  v61 = v7[17];
  v62 = v146 + v61;
  v63 = v147 + v61;
  v64 = type metadata accessor for UVIndex(0);
  v138 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 16);
  v139 = v64;
  v138(v62, v63);
  v65 = v7[18];
  v66 = v146 + v65;
  v67 = v147 + v65;
  v68 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
  *(_QWORD *)(v146 + v7[19]) = *(_QWORD *)(v147 + v7[19]);
  v69 = v7[20];
  v70 = v146 + v69;
  v71 = v147 + v69;
  v72 = *(_QWORD *)(v71 + 8);
  if (v72)
  {
    *(_QWORD *)v70 = *(_QWORD *)v71;
    *(_QWORD *)(v70 + 8) = v72;
    v73 = *(_QWORD *)(v71 + 16);
    v74 = *(_QWORD *)(v71 + 24);
    v75 = *(_BYTE *)(v71 + 32);
    swift_bridgeObjectRetain(v72);
    sub_100006E58(v73, v74, v75);
    *(_QWORD *)(v70 + 16) = v73;
    *(_QWORD *)(v70 + 24) = v74;
    *(_BYTE *)(v70 + 32) = v75;
    v52 = v147;
  }
  else
  {
    v76 = *(_OWORD *)(v71 + 16);
    *(_OWORD *)v70 = *(_OWORD *)v71;
    *(_OWORD *)(v70 + 16) = v76;
    *(_BYTE *)(v70 + 32) = *(_BYTE *)(v71 + 32);
  }
  v77 = a3[5];
  v78 = v146 + v77;
  v79 = v52 + v77;
  v140(v146 + v77, v52 + v77, v141);
  v80 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v142((void *)(v78 + v80[5]), (const void *)(v79 + v80[5]), v143);
  v17(v78 + v80[6], v79 + v80[6], v16);
  v17(v78 + v80[7], v79 + v80[7], v16);
  v81 = v80[8];
  v82 = v78 + v81;
  v83 = v79 + v81;
  v140(v78 + v81, v79 + v81, v141);
  ((void (*)(uint64_t, uint64_t, uint64_t))v136)(v82 + v33[5], v83 + v33[5], v137);
  v84 = v33[6];
  v85 = (_QWORD *)(v82 + v84);
  v86 = (_QWORD *)(v83 + v84);
  v87 = v86[1];
  *v85 = *v86;
  v85[1] = v87;
  v88 = v33[7];
  v89 = (_QWORD *)(v82 + v88);
  v90 = (_QWORD *)(v83 + v88);
  v91 = v90[1];
  *v89 = *v90;
  v89[1] = v91;
  *(_BYTE *)(v82 + v33[8]) = *(_BYTE *)(v83 + v33[8]);
  *(_BYTE *)(v82 + v33[9]) = *(_BYTE *)(v83 + v33[9]);
  *(_BYTE *)(v82 + v33[10]) = *(_BYTE *)(v83 + v33[10]);
  v92 = v80[9];
  v93 = v78 + v92;
  v94 = v79 + v92;
  v95 = type metadata accessor for Precipitation(0);
  v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 16);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v91);
  v96(v93, v94, v95);
  *(_QWORD *)(v78 + v80[10]) = *(_QWORD *)(v79 + v80[10]);
  v97 = v80[11];
  v98 = (_QWORD *)(v78 + v97);
  v99 = (_QWORD *)(v79 + v97);
  v100 = v99[1];
  *v98 = *v99;
  v98[1] = v100;
  v101 = v80[12];
  v102 = (_QWORD *)(v78 + v101);
  v103 = (_QWORD *)(v79 + v101);
  v104 = v103[1];
  *v102 = *v103;
  v102[1] = v104;
  v105 = v80[13];
  v106 = (_QWORD *)(v78 + v105);
  v107 = (_QWORD *)(v79 + v105);
  v108 = v107[1];
  *v106 = *v107;
  v106[1] = v108;
  v109 = v80[14];
  v110 = (_QWORD *)(v78 + v109);
  v111 = (_QWORD *)(v79 + v109);
  v112 = v111[1];
  *v110 = *v111;
  v110[1] = v112;
  v113 = v80[15];
  v114 = v78 + v113;
  v144 = v79 + v113;
  v115 = type metadata accessor for TemperatureScaleConfiguration(0);
  v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 16);
  swift_bridgeObjectRetain(v100);
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v112);
  v116(v114, v144, v115);
  v117 = v80[16];
  v118 = (void *)(v78 + v117);
  v119 = (const void *)(v79 + v117);
  v120 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v119, 1, v120))
  {
    v121 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v118, v119, v120);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v118, 0, 1, v120);
  }
  v122 = v80[17];
  v123 = (void *)(v78 + v122);
  v124 = (const void *)(v79 + v122);
  v125 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v124, 1, v125))
  {
    v126 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v125 - 8) + 16))(v123, v124, v125);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v123, 0, 1, v125);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v138)(v78 + v80[18], v79 + v80[18], v139);
  *(_QWORD *)(v78 + v80[19]) = *(_QWORD *)(v79 + v80[19]);
  v127 = a3[6];
  v128 = v146 + v127;
  v129 = v147 + v127;
  v130 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(v128, v129, v130);
  v131 = a3[7];
  v132 = (_QWORD *)(v146 + v131);
  v133 = (_QWORD *)(v147 + v131);
  v134 = v133[1];
  *v132 = *v133;
  v132[1] = v134;
  swift_bridgeObjectRetain(v134);
  return v146;
}

uint64_t sub_100151198(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void *, const void *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const void *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const void *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  void (*v168)(uint64_t, uint64_t);
  uint64_t v169;
  void (*v170)(uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(void *, const void *, uint64_t);
  void (*v175)(void *, const void *, uint64_t);
  void (*v176)(uint64_t, uint64_t, uint64_t);

  v5 = type metadata accessor for UUID(0);
  v176 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24);
  v176(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v171 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v171 + 24);
  v12 = v9;
  v13 = v10;
  v11(v8, v12, v10);
  v175 = v11;
  v11((void *)(a1 + v6[6]), (const void *)(a2 + v6[6]), v13);
  v14 = v6[7];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = sub_100005D40(&qword_1001BF090);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(void *, const void *, uint64_t))(v18 + 24);
  v19(v15, v16, v17);
  v174 = v19;
  v19((void *)(a1 + v6[8]), (const void *)(a2 + v6[8]), v17);
  v20 = v6[9];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v23 = v22[1];
  v24 = v21[1];
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  v25 = v6[10];
  v26 = (void *)(a1 + v25);
  v27 = (const void *)(a2 + v25);
  LODWORD(v19) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v25, 1, v17);
  v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v27, 1, v17);
  if ((_DWORD)v19)
  {
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v26, v27, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v26, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v26, v17);
LABEL_6:
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  v174(v26, v27, v17);
LABEL_7:
  v30 = v6[11];
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v30, 1, v17);
  v34 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v17);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v31, v32, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v31, v17);
LABEL_12:
    v35 = sub_100005D40(&qword_1001BF098);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  v174(v31, v32, v17);
LABEL_13:
  v36 = v6[12];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v173 = v5;
  v176(a1 + v36, a2 + v36, v5);
  v39 = (int *)type metadata accessor for ConditionViewModel(0);
  v40 = v39[5];
  v41 = v37 + v40;
  v42 = v38 + v40;
  v43 = type metadata accessor for WeatherCondition(0);
  v168 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 24);
  v169 = v43;
  v168(v41, v42);
  v44 = v39[6];
  v45 = (_QWORD *)(v37 + v44);
  v46 = (_QWORD *)(v38 + v44);
  *v45 = *v46;
  v47 = v46[1];
  v48 = v45[1];
  v45[1] = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  v49 = v39[7];
  v50 = (_QWORD *)(v37 + v49);
  v51 = (_QWORD *)(v38 + v49);
  *v50 = *v51;
  v52 = v51[1];
  v53 = v50[1];
  v50[1] = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  *(_BYTE *)(v37 + v39[8]) = *(_BYTE *)(v38 + v39[8]);
  *(_BYTE *)(v37 + v39[9]) = *(_BYTE *)(v38 + v39[9]);
  *(_BYTE *)(v37 + v39[10]) = *(_BYTE *)(v38 + v39[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v54 = v6[14];
  v55 = a1 + v54;
  v56 = a2 + v54;
  v57 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 24))(v55, v56, v57);
  v58 = v6[15];
  v59 = (void *)(a1 + v58);
  v60 = (const void *)(a2 + v58);
  LODWORD(v56) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v58, 1, v13);
  v61 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v60, 1, v13);
  if ((_DWORD)v56)
  {
    if (!v61)
    {
      (*(void (**)(void *, const void *, uint64_t))(v171 + 16))(v59, v60, v13);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v13);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v61)
  {
    (*(void (**)(void *, uint64_t))(v171 + 8))(v59, v13);
LABEL_18:
    v62 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_19;
  }
  v175(v59, v60, v13);
LABEL_19:
  v63 = v6[16];
  v64 = (void *)(a1 + v63);
  v65 = (const void *)(a2 + v63);
  v66 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v63, 1, v13);
  v67 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v65, 1, v13);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(void *, const void *, uint64_t))(v171 + 16))(v64, v65, v13);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v13);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v67)
  {
    (*(void (**)(void *, uint64_t))(v171 + 8))(v64, v13);
LABEL_24:
    v68 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_25;
  }
  v175(v64, v65, v13);
LABEL_25:
  v69 = v6[17];
  v70 = a1 + v69;
  v71 = a2 + v69;
  v72 = type metadata accessor for UVIndex(0);
  v170 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 24);
  v172 = v72;
  v170(v70, v71);
  v73 = v6[18];
  v74 = a1 + v73;
  v75 = a2 + v73;
  v76 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 24))(v74, v75, v76);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v77 = v6[20];
  v78 = a1 + v77;
  v79 = (__int128 *)(a2 + v77);
  v80 = *(_QWORD *)(a1 + v77 + 8);
  v81 = *(_QWORD *)(a2 + v77 + 8);
  if (v80)
  {
    if (v81)
    {
      *(_QWORD *)v78 = *(_QWORD *)v79;
      v82 = *((_QWORD *)v79 + 1);
      *(_QWORD *)(v78 + 8) = v82;
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRelease(v80);
      v83 = *((_QWORD *)v79 + 2);
      v84 = *((_QWORD *)v79 + 3);
      v85 = *((_BYTE *)v79 + 32);
      sub_100006E58(v83, v84, v85);
      v86 = *(_QWORD *)(v78 + 16);
      v87 = *(_QWORD *)(v78 + 24);
      v88 = *(_BYTE *)(v78 + 32);
      *(_QWORD *)(v78 + 16) = v83;
      *(_QWORD *)(v78 + 24) = v84;
      *(_BYTE *)(v78 + 32) = v85;
      sub_100007458(v86, v87, v88);
    }
    else
    {
      sub_100008EC4(v78);
      v93 = *((_BYTE *)v79 + 32);
      v94 = v79[1];
      *(_OWORD *)v78 = *v79;
      *(_OWORD *)(v78 + 16) = v94;
      *(_BYTE *)(v78 + 32) = v93;
    }
  }
  else if (v81)
  {
    *(_QWORD *)v78 = *(_QWORD *)v79;
    v89 = *((_QWORD *)v79 + 1);
    *(_QWORD *)(v78 + 8) = v89;
    v90 = *((_QWORD *)v79 + 2);
    v91 = *((_QWORD *)v79 + 3);
    v92 = *((_BYTE *)v79 + 32);
    swift_bridgeObjectRetain(v89);
    sub_100006E58(v90, v91, v92);
    *(_QWORD *)(v78 + 16) = v90;
    *(_QWORD *)(v78 + 24) = v91;
    *(_BYTE *)(v78 + 32) = v92;
  }
  else
  {
    v95 = *v79;
    v96 = v79[1];
    *(_BYTE *)(v78 + 32) = *((_BYTE *)v79 + 32);
    *(_OWORD *)v78 = v95;
    *(_OWORD *)(v78 + 16) = v96;
  }
  v97 = a3[5];
  v98 = a1 + v97;
  v99 = a2 + v97;
  v176(a1 + v97, a2 + v97, v173);
  v100 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v175((void *)(v98 + v100[5]), (const void *)(v99 + v100[5]), v13);
  v174((void *)(v98 + v100[6]), (const void *)(v99 + v100[6]), v17);
  v174((void *)(v98 + v100[7]), (const void *)(v99 + v100[7]), v17);
  v101 = v100[8];
  v102 = v98 + v101;
  v103 = v99 + v101;
  v176(v98 + v101, v99 + v101, v173);
  ((void (*)(uint64_t, uint64_t, uint64_t))v168)(v102 + v39[5], v103 + v39[5], v169);
  v104 = v39[6];
  v105 = (_QWORD *)(v102 + v104);
  v106 = (_QWORD *)(v103 + v104);
  *v105 = *v106;
  v107 = v106[1];
  v108 = v105[1];
  v105[1] = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108);
  v109 = v39[7];
  v110 = (_QWORD *)(v102 + v109);
  v111 = (_QWORD *)(v103 + v109);
  *v110 = *v111;
  v112 = v111[1];
  v113 = v110[1];
  v110[1] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease(v113);
  *(_BYTE *)(v102 + v39[8]) = *(_BYTE *)(v103 + v39[8]);
  *(_BYTE *)(v102 + v39[9]) = *(_BYTE *)(v103 + v39[9]);
  *(_BYTE *)(v102 + v39[10]) = *(_BYTE *)(v103 + v39[10]);
  v114 = v100[9];
  v115 = v98 + v114;
  v116 = v99 + v114;
  v117 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 24))(v115, v116, v117);
  *(_QWORD *)(v98 + v100[10]) = *(_QWORD *)(v99 + v100[10]);
  v118 = v100[11];
  v119 = (_QWORD *)(v98 + v118);
  v120 = (_QWORD *)(v99 + v118);
  *v119 = *v120;
  v121 = v120[1];
  v122 = v119[1];
  v119[1] = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  v123 = v100[12];
  v124 = (_QWORD *)(v98 + v123);
  v125 = (_QWORD *)(v99 + v123);
  *v124 = *v125;
  v126 = v125[1];
  v127 = v124[1];
  v124[1] = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  v128 = v100[13];
  v129 = (_QWORD *)(v98 + v128);
  v130 = (_QWORD *)(v99 + v128);
  *v129 = *v130;
  v131 = v130[1];
  v132 = v129[1];
  v129[1] = v131;
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRelease(v132);
  v133 = v100[14];
  v134 = (_QWORD *)(v98 + v133);
  v135 = (_QWORD *)(v99 + v133);
  *v134 = *v135;
  v136 = v135[1];
  v137 = v134[1];
  v134[1] = v136;
  swift_bridgeObjectRetain(v136);
  swift_bridgeObjectRelease(v137);
  v138 = v100[15];
  v139 = v98 + v138;
  v140 = v99 + v138;
  v141 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v100[16];
  v143 = (void *)(v98 + v142);
  v144 = (const void *)(v99 + v142);
  v145 = type metadata accessor for SunEvents(0);
  v146 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v145);
  v147 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145);
  if (v146)
  {
    if (!v147)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v148 = *(_QWORD *)(v145 - 8);
  if (v147)
  {
    (*(void (**)(void *, uint64_t))(v148 + 8))(v143, v145);
LABEL_41:
    v149 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v148 + 24))(v143, v144, v145);
LABEL_42:
  v150 = v100[17];
  v151 = (void *)(v98 + v150);
  v152 = (const void *)(v99 + v150);
  v153 = type metadata accessor for MoonEvents(0);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v153);
  v155 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v152, 1, v153);
  if (!v154)
  {
    v156 = *(_QWORD *)(v153 - 8);
    if (!v155)
    {
      (*(void (**)(void *, const void *, uint64_t))(v156 + 24))(v151, v152, v153);
      goto LABEL_48;
    }
    (*(void (**)(void *, uint64_t))(v156 + 8))(v151, v153);
    goto LABEL_47;
  }
  if (v155)
  {
LABEL_47:
    v157 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v153 - 8) + 16))(v151, v152, v153);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v151, 0, 1, v153);
LABEL_48:
  ((void (*)(uint64_t, uint64_t, uint64_t))v170)(v98 + v100[18], v99 + v100[18], v172);
  *(_QWORD *)(v98 + v100[19]) = *(_QWORD *)(v99 + v100[19]);
  v158 = a3[6];
  v159 = a1 + v158;
  v160 = a2 + v158;
  v161 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 24))(v159, v160, v161);
  v162 = a3[7];
  v163 = (_QWORD *)(a1 + v162);
  v164 = (_QWORD *)(a2 + v162);
  *v163 = *v164;
  v165 = v164[1];
  v166 = v163[1];
  v163[1] = v165;
  swift_bridgeObjectRetain(v165);
  swift_bridgeObjectRelease(v166);
  return a1;
}

uint64_t sub_100151C3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  void (*v96)(uint64_t, uint64_t, uint64_t);

  v5 = type metadata accessor for UUID(0);
  v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v96(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v12 = v9;
  v13 = v10;
  v11(v8, v12, v10);
  v11(a1 + v6[6], a2 + v6[6], v13);
  v14 = v6[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_100005D40(&qword_1001BF090);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
  v18(v15, v16, v17);
  v18(a1 + v6[8], a2 + v6[8], v17);
  *(_OWORD *)(a1 + v6[9]) = *(_OWORD *)(a2 + v6[9]);
  v19 = v6[10];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  v95 = v18;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v19, 1, v17))
  {
    v22 = sub_100005D40(&qword_1001BF098);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v18((uint64_t)v20, (uint64_t)v21, v17);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, v17);
  }
  v23 = v6[11];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  v93 = v17;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v23, 1, v17))
  {
    v26 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v18((uint64_t)v24, (uint64_t)v25, v17);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v17);
  }
  v27 = v6[12];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v94 = v5;
  v96(a1 + v27, a2 + v27, v5);
  v30 = (int *)type metadata accessor for ConditionViewModel(0);
  v31 = v30[5];
  v32 = v28 + v31;
  v33 = v29 + v31;
  v34 = type metadata accessor for WeatherCondition(0);
  v89 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32);
  v90 = v34;
  v89(v32, v33);
  *(_OWORD *)(v28 + v30[6]) = *(_OWORD *)(v29 + v30[6]);
  *(_OWORD *)(v28 + v30[7]) = *(_OWORD *)(v29 + v30[7]);
  *(_BYTE *)(v28 + v30[8]) = *(_BYTE *)(v29 + v30[8]);
  *(_BYTE *)(v28 + v30[9]) = *(_BYTE *)(v29 + v30[9]);
  *(_BYTE *)(v28 + v30[10]) = *(_BYTE *)(v29 + v30[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v35 = v6[14];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = v6[15];
  v40 = (void *)(a1 + v39);
  v41 = (const void *)(a2 + v39);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v39, 1, v13))
  {
    v42 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v11((uint64_t)v40, (uint64_t)v41, v13);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v40, 0, 1, v13);
  }
  v43 = v6[16];
  v44 = (void *)(a1 + v43);
  v45 = (const void *)(a2 + v43);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v43, 1, v13))
  {
    v46 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    v11((uint64_t)v44, (uint64_t)v45, v13);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v44, 0, 1, v13);
  }
  v47 = v6[17];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = type metadata accessor for UVIndex(0);
  v91 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 32);
  v92 = v50;
  v91(v48, v49);
  v51 = v6[18];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v55 = v6[20];
  v56 = a1 + v55;
  v57 = a2 + v55;
  *(_BYTE *)(v56 + 32) = *(_BYTE *)(v57 + 32);
  v58 = *(_OWORD *)(v57 + 16);
  *(_OWORD *)v56 = *(_OWORD *)v57;
  *(_OWORD *)(v56 + 16) = v58;
  v59 = a3[5];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v96(a1 + v59, a2 + v59, v94);
  v62 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v11(v60 + v62[5], v61 + v62[5], v13);
  v95(v60 + v62[6], v61 + v62[6], v93);
  v95(v60 + v62[7], v61 + v62[7], v93);
  v63 = v62[8];
  v64 = v60 + v63;
  v65 = v61 + v63;
  v96(v60 + v63, v61 + v63, v94);
  ((void (*)(uint64_t, uint64_t, uint64_t))v89)(v64 + v30[5], v65 + v30[5], v90);
  *(_OWORD *)(v64 + v30[6]) = *(_OWORD *)(v65 + v30[6]);
  *(_OWORD *)(v64 + v30[7]) = *(_OWORD *)(v65 + v30[7]);
  *(_BYTE *)(v64 + v30[8]) = *(_BYTE *)(v65 + v30[8]);
  *(_BYTE *)(v64 + v30[9]) = *(_BYTE *)(v65 + v30[9]);
  *(_BYTE *)(v64 + v30[10]) = *(_BYTE *)(v65 + v30[10]);
  v66 = v62[9];
  v67 = v60 + v66;
  v68 = v61 + v66;
  v69 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
  *(_QWORD *)(v60 + v62[10]) = *(_QWORD *)(v61 + v62[10]);
  *(_OWORD *)(v60 + v62[11]) = *(_OWORD *)(v61 + v62[11]);
  *(_OWORD *)(v60 + v62[12]) = *(_OWORD *)(v61 + v62[12]);
  *(_OWORD *)(v60 + v62[13]) = *(_OWORD *)(v61 + v62[13]);
  *(_OWORD *)(v60 + v62[14]) = *(_OWORD *)(v61 + v62[14]);
  v70 = v62[15];
  v71 = v60 + v70;
  v72 = v61 + v70;
  v73 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
  v74 = v62[16];
  v75 = (void *)(v60 + v74);
  v76 = (const void *)(v61 + v74);
  v77 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v76, 1, v77))
  {
    v78 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v75, 0, 1, v77);
  }
  v79 = v62[17];
  v80 = (void *)(v60 + v79);
  v81 = (const void *)(v61 + v79);
  v82 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v81, 1, v82))
  {
    v83 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v80, v81, v82);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v80, 0, 1, v82);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v91)(v60 + v62[18], v61 + v62[18], v92);
  *(_QWORD *)(v60 + v62[19]) = *(_QWORD *)(v61 + v62[19]);
  v84 = a3[6];
  v85 = a1 + v84;
  v86 = a2 + v84;
  v87 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 32))(v85, v86, v87);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10015232C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void *, const void *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  void *v35;
  const void *v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const void *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const void *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const void *v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  const void *v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v175)(uint64_t, uint64_t);
  uint64_t v176;
  void (*v177)(uint64_t, uint64_t);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(void *, const void *, uint64_t);
  void (*v182)(uint64_t, uint64_t, uint64_t);
  uint64_t v183;
  void (*v184)(uint64_t, uint64_t, uint64_t);
  uint64_t v186;

  v5 = type metadata accessor for UUID(0);
  v184 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40);
  v184(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v178 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v178 + 40);
  v12 = v9;
  v13 = v10;
  v11(v8, v12, v10);
  v182 = v11;
  v11(a1 + v6[6], a2 + v6[6], v13);
  v14 = v6[7];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = sub_100005D40(&qword_1001BF090);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(void *, const void *, uint64_t))(v18 + 40);
  v19(v15, v16, v17);
  v181 = v19;
  v19((void *)(a1 + v6[8]), (const void *)(a2 + v6[8]), v17);
  v20 = v6[9];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  v26 = v6[10];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  LODWORD(v19) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v26, 1, v17);
  v186 = v17;
  v29 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v28, 1, v17);
  if ((_DWORD)v19)
  {
    if (v29)
    {
      v30 = sub_100005D40(&qword_1001BF098);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      v31 = v17;
    }
    else
    {
      v31 = v17;
      (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v27, v28, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v17);
    }
  }
  else
  {
    v31 = v17;
    if (v29)
    {
      (*(void (**)(void *, uint64_t))(v18 + 8))(v27, v17);
      v32 = sub_100005D40(&qword_1001BF098);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v181(v27, v28, v17);
    }
  }
  v33 = v182;
  v34 = v6[11];
  v35 = (void *)(a1 + v34);
  v36 = (const void *)(a2 + v34);
  v37 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v34, 1, v31);
  v38 = v31;
  v39 = v37;
  v40 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v36, 1, v38);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v35, v36, v186);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v35, 0, 1, v186);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v40)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v35, v186);
LABEL_13:
    v41 = sub_100005D40(&qword_1001BF098);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_14;
  }
  v181(v35, v36, v186);
LABEL_14:
  v42 = v6[12];
  v43 = a1 + v42;
  v44 = a2 + v42;
  v180 = v5;
  v184(a1 + v42, a2 + v42, v5);
  v45 = (int *)type metadata accessor for ConditionViewModel(0);
  v46 = v45[5];
  v47 = v43 + v46;
  v48 = v44 + v46;
  v49 = type metadata accessor for WeatherCondition(0);
  v175 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 40);
  v176 = v49;
  v175(v47, v48);
  v50 = v45[6];
  v51 = (_QWORD *)(v43 + v50);
  v52 = (uint64_t *)(v44 + v50);
  v54 = *v52;
  v53 = v52[1];
  v55 = v51[1];
  *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease(v55);
  v56 = v45[7];
  v57 = (_QWORD *)(v43 + v56);
  v58 = (uint64_t *)(v44 + v56);
  v60 = *v58;
  v59 = v58[1];
  v61 = v57[1];
  *v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease(v61);
  *(_BYTE *)(v43 + v45[8]) = *(_BYTE *)(v44 + v45[8]);
  *(_BYTE *)(v43 + v45[9]) = *(_BYTE *)(v44 + v45[9]);
  *(_BYTE *)(v43 + v45[10]) = *(_BYTE *)(v44 + v45[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v62 = v6[14];
  v63 = a1 + v62;
  v64 = a2 + v62;
  v65 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 40))(v63, v64, v65);
  v66 = v6[15];
  v67 = (void *)(a1 + v66);
  v68 = (const void *)(a2 + v66);
  LODWORD(v64) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v66, 1, v13);
  v69 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v68, 1, v13);
  if ((_DWORD)v64)
  {
    if (!v69)
    {
      (*(void (**)(void *, const void *, uint64_t))(v178 + 32))(v67, v68, v13);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v13);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v69)
  {
    (*(void (**)(void *, uint64_t))(v178 + 8))(v67, v13);
LABEL_19:
    v70 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_20;
  }
  v182((uint64_t)v67, (uint64_t)v68, v13);
LABEL_20:
  v71 = v6[16];
  v72 = (void *)(a1 + v71);
  v73 = (const void *)(a2 + v71);
  v74 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v71, 1, v13);
  v75 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v73, 1, v13);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(void *, const void *, uint64_t))(v178 + 32))(v72, v73, v13);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v72, 0, 1, v13);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v75)
  {
    (*(void (**)(void *, uint64_t))(v178 + 8))(v72, v13);
LABEL_25:
    v76 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_26;
  }
  v182((uint64_t)v72, (uint64_t)v73, v13);
LABEL_26:
  v77 = v6[17];
  v78 = a1 + v77;
  v79 = a2 + v77;
  v80 = type metadata accessor for UVIndex(0);
  v177 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 40);
  v179 = v80;
  v177(v78, v79);
  v81 = v6[18];
  v82 = a1 + v81;
  v83 = a2 + v81;
  v84 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 40))(v82, v83, v84);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v85 = v6[20];
  v86 = a1 + v85;
  v183 = a2;
  v87 = a2 + v85;
  v88 = *(_QWORD *)(a1 + v85 + 8);
  if (v88)
  {
    v89 = v33;
    v90 = *(_QWORD *)(v87 + 8);
    if (v90)
    {
      v91 = v13;
      *(_QWORD *)v86 = *(_QWORD *)v87;
      *(_QWORD *)(v86 + 8) = v90;
      swift_bridgeObjectRelease(v88);
      v92 = *(_BYTE *)(v87 + 32);
      v93 = *(_QWORD *)(v86 + 16);
      v94 = *(_QWORD *)(v86 + 24);
      v95 = *(_BYTE *)(v86 + 32);
      *(_OWORD *)(v86 + 16) = *(_OWORD *)(v87 + 16);
      *(_BYTE *)(v86 + 32) = v92;
      sub_100007458(v93, v94, v95);
      goto LABEL_32;
    }
    v91 = v13;
    sub_100008EC4(v86);
  }
  else
  {
    v89 = v33;
    v91 = v13;
  }
  v96 = *(_OWORD *)(v87 + 16);
  *(_OWORD *)v86 = *(_OWORD *)v87;
  *(_OWORD *)(v86 + 16) = v96;
  *(_BYTE *)(v86 + 32) = *(_BYTE *)(v87 + 32);
LABEL_32:
  v97 = a3[5];
  v98 = a1 + v97;
  v99 = v183 + v97;
  v184(a1 + v97, v183 + v97, v180);
  v100 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v89(v98 + v100[5], v99 + v100[5], v91);
  v181((void *)(v98 + v100[6]), (const void *)(v99 + v100[6]), v186);
  v181((void *)(v98 + v100[7]), (const void *)(v99 + v100[7]), v186);
  v101 = v100[8];
  v102 = v98 + v101;
  v103 = v99 + v101;
  v184(v98 + v101, v99 + v101, v180);
  ((void (*)(uint64_t, uint64_t, uint64_t))v175)(v102 + v45[5], v103 + v45[5], v176);
  v104 = v45[6];
  v105 = (_QWORD *)(v102 + v104);
  v106 = (uint64_t *)(v103 + v104);
  v108 = *v106;
  v107 = v106[1];
  v109 = v105[1];
  *v105 = v108;
  v105[1] = v107;
  swift_bridgeObjectRelease(v109);
  v110 = v45[7];
  v111 = (_QWORD *)(v102 + v110);
  v112 = (uint64_t *)(v103 + v110);
  v114 = *v112;
  v113 = v112[1];
  v115 = v111[1];
  *v111 = v114;
  v111[1] = v113;
  swift_bridgeObjectRelease(v115);
  *(_BYTE *)(v102 + v45[8]) = *(_BYTE *)(v103 + v45[8]);
  *(_BYTE *)(v102 + v45[9]) = *(_BYTE *)(v103 + v45[9]);
  *(_BYTE *)(v102 + v45[10]) = *(_BYTE *)(v103 + v45[10]);
  v116 = v100[9];
  v117 = v98 + v116;
  v118 = v99 + v116;
  v119 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 40))(v117, v118, v119);
  *(_QWORD *)(v98 + v100[10]) = *(_QWORD *)(v99 + v100[10]);
  v120 = v100[11];
  v121 = (_QWORD *)(v98 + v120);
  v122 = (uint64_t *)(v99 + v120);
  v124 = *v122;
  v123 = v122[1];
  v125 = v121[1];
  *v121 = v124;
  v121[1] = v123;
  swift_bridgeObjectRelease(v125);
  v126 = v100[12];
  v127 = (_QWORD *)(v98 + v126);
  v128 = (uint64_t *)(v99 + v126);
  v130 = *v128;
  v129 = v128[1];
  v131 = v127[1];
  *v127 = v130;
  v127[1] = v129;
  swift_bridgeObjectRelease(v131);
  v132 = v100[13];
  v133 = (_QWORD *)(v98 + v132);
  v134 = (uint64_t *)(v99 + v132);
  v136 = *v134;
  v135 = v134[1];
  v137 = v133[1];
  *v133 = v136;
  v133[1] = v135;
  swift_bridgeObjectRelease(v137);
  v138 = v100[14];
  v139 = (_QWORD *)(v98 + v138);
  v140 = (uint64_t *)(v99 + v138);
  v142 = *v140;
  v141 = v140[1];
  v143 = v139[1];
  *v139 = v142;
  v139[1] = v141;
  swift_bridgeObjectRelease(v143);
  v144 = v100[15];
  v145 = v98 + v144;
  v146 = v99 + v144;
  v147 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 40))(v145, v146, v147);
  v148 = v100[16];
  v149 = (void *)(v98 + v148);
  v150 = (const void *)(v99 + v148);
  v151 = type metadata accessor for SunEvents(0);
  v152 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v149, 1, v151);
  v153 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, v151);
  if (v152)
  {
    if (!v153)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v151 - 8) + 32))(v149, v150, v151);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v149, 0, 1, v151);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  v154 = *(_QWORD *)(v151 - 8);
  if (v153)
  {
    (*(void (**)(void *, uint64_t))(v154 + 8))(v149, v151);
LABEL_37:
    v155 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(void *, const void *, uint64_t))(v154 + 40))(v149, v150, v151);
LABEL_38:
  v156 = v100[17];
  v157 = (void *)(v98 + v156);
  v158 = (const void *)(v99 + v156);
  v159 = type metadata accessor for MoonEvents(0);
  v160 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157, 1, v159);
  v161 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, v159);
  if (!v160)
  {
    v162 = *(_QWORD *)(v159 - 8);
    if (!v161)
    {
      (*(void (**)(void *, const void *, uint64_t))(v162 + 40))(v157, v158, v159);
      goto LABEL_44;
    }
    (*(void (**)(void *, uint64_t))(v162 + 8))(v157, v159);
    goto LABEL_43;
  }
  if (v161)
  {
LABEL_43:
    v163 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v159 - 8) + 32))(v157, v158, v159);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v157, 0, 1, v159);
LABEL_44:
  ((void (*)(uint64_t, uint64_t, uint64_t))v177)(v98 + v100[18], v99 + v100[18], v179);
  *(_QWORD *)(v98 + v100[19]) = *(_QWORD *)(v99 + v100[19]);
  v164 = a3[6];
  v165 = a1 + v164;
  v166 = v183 + v164;
  v167 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 40))(v165, v166, v167);
  v168 = a3[7];
  v169 = (_QWORD *)(a1 + v168);
  v170 = (uint64_t *)(v183 + v168);
  v172 = *v170;
  v171 = v170[1];
  v173 = v169[1];
  *v169 = v172;
  v169[1] = v171;
  swift_bridgeObjectRelease(v173);
  return a1;
}

uint64_t sub_100152D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100152D24);
}

uint64_t sub_100152D24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v14;

  sub_1000A7264();
  sub_10001C6C0();
  if (v8)
  {
    v6 = sub_1001579E8();
    return sub_100016B50(v6, a2, v7);
  }
  sub_10001C804();
  sub_10001C6C0();
  if (v8)
  {
    v7 = v9;
    v10 = a3[5];
LABEL_10:
    v6 = a1 + v10;
    return sub_100016B50(v6, a2, v7);
  }
  sub_100070DE8();
  sub_10001C6C0();
  if (v11)
  {
    v7 = v12;
    v10 = a3[6];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[7] + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100152DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100152DC8);
}

void sub_100152DC8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000A7264();
  sub_10001C6D0();
  if (v7)
  {
    sub_100157A28();
  }
  else
  {
    sub_10001C804();
    sub_10001C6D0();
    if (!v7)
    {
      sub_100070DE8();
      sub_10001C6D0();
      if (!v8)
      {
        *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
        sub_1000443A4();
        return;
      }
    }
  }
  sub_1000A75F8();
  sub_100016B44(v9, v10, v11, v12);
}

uint64_t sub_100152E50(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  result = type metadata accessor for CurrentObservationViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for DailyForecastViewModel(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for Location(319);
      if (v5 <= 0x3F)
      {
        v6[2] = *(_QWORD *)(result - 8) + 64;
        v6[3] = &unk_1001852E8;
        swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

#error "100153160: call analysis failed (funcsize=467)"

double sub_100153668()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  int *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double result;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);

  v1 = sub_100156B6C();
  v2 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
  v2(v0, v1);
  v3 = (int *)sub_1000A7264();
  v4 = v0 + v3[5];
  v5 = sub_10002338C();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  sub_100157568(v4);
  sub_100157568(v0 + v3[6]);
  v7 = v0 + v3[7];
  sub_100005D40(&qword_1001BF090);
  sub_100157804();
  sub_1001572E8(v7);
  sub_1001572E8(v0 + v3[8]);
  sub_100016A8C(v0 + v3[9]);
  v8 = v0 + v3[10];
  if (!sub_100016AB8(v8))
    sub_1001572E8(v8);
  v9 = v0 + v3[11];
  if (!sub_100016AB8(v9))
    sub_1001572E8(v9);
  v10 = v0 + v3[12];
  v42 = v2;
  v2(v10, v1);
  v11 = (int *)sub_1000A7274();
  sub_1000A727C();
  v12 = sub_100157244();
  v38 = v14;
  v39 = v13;
  ((void (*)(uint64_t))v14)(v12);
  sub_100016A8C(v10 + v11[6]);
  sub_100016A8C(v10 + v11[7]);
  v15 = sub_1000234BC();
  sub_10015799C(*(_QWORD *)(v15 - 8));
  v16 = v0 + v3[15];
  if (!sub_1000F9F90(v16))
    sub_100157568(v16);
  v17 = v0 + v3[16];
  if (!sub_1000F9F90(v17))
    sub_100157568(v17);
  sub_1000234CC();
  v18 = sub_100157244();
  v40 = v20;
  v41 = v19;
  ((void (*)(uint64_t))v20)(v18);
  sub_1000234C4();
  v21 = sub_100157244();
  v22(v21);
  v23 = *(_QWORD *)(v0 + v3[20] + 8);
  if (v23)
  {
    swift_bridgeObjectRelease(v23);
    sub_100083184();
  }
  v24 = (int *)sub_100016B00();
  v25 = v0 + v24[5];
  v42(v25, v1);
  v26 = (int *)sub_10001C804();
  v6(v25 + v26[5], v5);
  sub_1001572E8(v25 + v26[6]);
  sub_1001572E8(v25 + v26[7]);
  v27 = v25 + v26[8];
  v28 = sub_100157930();
  ((void (*)(uint64_t))v42)(v28);
  v38(v27 + v11[5], v39);
  sub_100016A8C(v27 + v11[6]);
  sub_100016A8C(v27 + v11[7]);
  v29 = sub_10013FE24();
  sub_100083090(v29);
  sub_100016A8C(v25 + v26[11]);
  sub_100016A8C(v25 + v26[12]);
  sub_100016A8C(v25 + v26[13]);
  sub_100016A8C(v25 + v26[14]);
  v30 = sub_10013FE1C();
  sub_100083090(v30);
  v31 = v25 + v26[16];
  sub_1000A7254();
  if (!sub_1000F9F90(v31))
    sub_1001573C8();
  v32 = v25 + v26[17];
  sub_1000A725C();
  if (!sub_1000F9F90(v32))
    sub_1001573C8();
  v40(v25 + v26[18], v41);
  v33 = v0 + v24[6];
  v34 = sub_1000E01F0();
  if (!sub_1000F9F90(v33))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v33 + 8));
    v35 = sub_100156B1C();
    sub_100156D1C(v35);
    if (!sub_100016AB8(v33 + *(int *)(v34 + 24)))
      sub_100016B10();
    sub_100016A8C(v33 + *(int *)(v34 + 28));
  }
  v36 = sub_100070DE8();
  sub_100083090(v36);
  sub_100016A8C(v0 + v24[8]);
  sub_100016B3C(v24[11]);
  sub_100016A8C(v0 + v24[12]);
  sub_100016B3C(v24[13]);
  sub_100016B3C(v24[14]);
  sub_100016B3C(v24[15]);
  sub_100016B3C(v24[16]);
  sub_100016B3C(v24[18]);
  sub_100016B3C(v24[19]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + v24[25] + 8)).n128_u64[0];
  return result;
}

#error "100153CA4: call analysis failed (funcsize=475)"

#error "100154550: call analysis failed (funcsize=528)"

#error "100154D38: call analysis failed (funcsize=376)"

#error "10015555C: call analysis failed (funcsize=425)"

uint64_t sub_100155718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001565FC);
}

uint64_t sub_100155724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001565F0);
}

void sub_100155730()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _BYTE v3[8];

  sub_10015778C();
  if (v1 <= 0x3F)
  {
    sub_1001577C4();
    swift_initStructMetadata(v0, 256, 1, v3, v2);
  }
  sub_1001578F0();
}

void sub_10015577C()
{
  sub_1001565B0(&qword_1001C69E8, &qword_1001C69F0);
}

void sub_1001557A8()
{
  sub_1001559B0(&qword_1001C69F8, &qword_1001C65E0, (void (*)(void))sub_1001557DC);
}

unint64_t sub_1001557DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6A00;
  if (!qword_1001C6A00)
  {
    v1 = sub_100005DC4(&qword_1001C65A0);
    sub_100144A94();
    sub_100016878((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6A00);
  }
  return result;
}

void sub_100155860(uint64_t a1)
{
  sub_100156464(a1, &qword_1001C6640, &qword_1001C6650);
}

uint64_t sub_10015587C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A1594, 1);
}

uint64_t sub_10015588C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A156C, 1);
}

uint64_t sub_10015589C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A1544, 1);
}

uint64_t sub_1001558AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A151C, 1);
}

uint64_t sub_1001558BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A14F4, 1);
}

uint64_t sub_1001558CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A14CC, 1);
}

uint64_t sub_1001558DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A14A4, 1);
}

unint64_t sub_100155904()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001C6A18;
  if (!qword_1001C6A18)
  {
    v1 = sub_100005DC4(&qword_1001C6A10);
    v2[0] = sub_100005DC4(&qword_1001BF3B0);
    v2[1] = sub_100016470();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.typesettingLanguage(_:isEnabled:)>>, 1);
    sub_100016878((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6A18);
  }
  return result;
}

void sub_1001559B0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = sub_1001577BC(0, a2);
    a3();
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5), a1);
  }
  sub_1001576BC();
}

unint64_t sub_100155A08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6A38;
  if (!qword_1001C6A38)
  {
    v1 = sub_100005DC4(&qword_1001C6A20);
    sub_1001565B0(&qword_1001C6A40, &qword_1001C6A48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6A38);
  }
  return result;
}

unint64_t sub_100155A84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6AF0;
  if (!qword_1001C6AF0)
  {
    v1 = sub_100005DC4(&qword_1001C6AC8);
    sub_100155B08();
    sub_1001565B0(&qword_1001C6B08, &qword_1001C6A60);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6AF0);
  }
  return result;
}

unint64_t sub_100155B08()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1001C6AF8;
  if (!qword_1001C6AF8)
  {
    v1 = sub_100005DC4(&qword_1001C6AB8);
    v2 = sub_100005DC4(&qword_1001C6AA8);
    sub_1001565B0(&qword_1001C6B00, &qword_1001C6AA8);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100016878((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6AF8);
  }
  return result;
}

unint64_t sub_100155BD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6B30;
  if (!qword_1001C6B30)
  {
    v1 = sub_100005DC4(&qword_1001C6A80);
    sub_100155C58();
    sub_1001565B0(&qword_1001BF3E0, &qword_1001BF3E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6B30);
  }
  return result;
}

unint64_t sub_100155C58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6B38;
  if (!qword_1001C6B38)
  {
    v1 = sub_100005DC4(&qword_1001C6A78);
    swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of TemperatureHighLowTextVertical.defaultAccessibilityLabel()>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6B38);
  }
  return result;
}

void sub_100155CD8()
{
  EnvironmentValues.truncationMode.getter();
  sub_100006338();
}

void sub_100155CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(char *))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;

  v7 = a5(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v12 - v8;
  v10 = sub_1001574B0();
  v11(v10);
  a6(v9);
  sub_1000443A4();
}

void sub_100155D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100155CF4(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for Text.TruncationMode, (void (*)(char *))&EnvironmentValues.truncationMode.setter);
}

void sub_100155D98()
{
  EnvironmentValues.contentTransition.getter();
  sub_100006338();
}

void sub_100155DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100155CF4(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ContentTransition, (void (*)(char *))&EnvironmentValues.contentTransition.setter);
}

void sub_100155DD8()
{
  AttributeScopes.SwiftUIAttributes.font.getter();
  __break(1u);
}

unint64_t sub_100155DF4()
{
  unint64_t result;

  result = qword_1001C6C00;
  if (!qword_1001C6C00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.FontAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.FontAttribute);
    atomic_store(result, (unint64_t *)&qword_1001C6C00);
  }
  return result;
}

uint64_t sub_100155E38(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_100155E40(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_100155E4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100141C08(a1, a2, a3, &qword_1001C6C28) & 1;
}

void sub_100155E6C(uint64_t a1, uint64_t a2)
{
  sub_100141C5C(a1, a2, &qword_1001C6C28);
}

_QWORD *sub_100155E88(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_100155E94()
{
  AttributeScopes.SwiftUIAttributes.textScale.getter();
  __break(1u);
}

unint64_t sub_100155EB0()
{
  unint64_t result;

  result = qword_1001C6C08;
  if (!qword_1001C6C08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.TextScaleAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.TextScaleAttribute);
    atomic_store(result, (unint64_t *)&qword_1001C6C08);
  }
  return result;
}

uint64_t sub_100155EF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100141C08(a1, a2, a3, &qword_1001C6C20) & 1;
}

void sub_100155F14(uint64_t a1, uint64_t a2)
{
  sub_100141C5C(a1, a2, &qword_1001C6C20);
}

unint64_t sub_100155F30()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1001C6C58;
  if (!qword_1001C6C58)
  {
    v1 = sub_100005DC4(&qword_1001C6C40);
    v2 = sub_100005DC4(&qword_1001C6C30);
    sub_1001565B0(&qword_1001C6C50, &qword_1001C6C30);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100016878((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6C58);
  }
  return result;
}

void sub_100156004(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = sub_100016C78(a1, a2, a3);
  sub_100156FD8(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16));
  sub_100006338();
}

unint64_t sub_100156034()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6C90;
  if (!qword_1001C6C90)
  {
    v1 = sub_100005DC4(&qword_1001C24D8);
    sub_1001560B8();
    sub_1001565B0(&qword_1001C29A0, &qword_1001C24D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6C90);
  }
  return result;
}

unint64_t sub_1001560B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6C98;
  if (!qword_1001C6C98)
  {
    v1 = sub_100005DC4(&qword_1001C6CA0);
    sub_10015613C();
    sub_1001565B0(&qword_1001BF3F0, &qword_1001BF3F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6C98);
  }
  return result;
}

unint64_t sub_10015613C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6CA8;
  if (!qword_1001C6CA8)
  {
    v1 = sub_100005DC4(&qword_1001C6CB0);
    sub_1001565B0(&qword_1001BF3E0, &qword_1001BF3E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6CA8);
  }
  return result;
}

void sub_1001561C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = sub_100016C78(a1, a2, a3);
  sub_100156FD8(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  sub_100006338();
}

unint64_t sub_1001561F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6CF8;
  if (!qword_1001C6CF8)
  {
    v1 = sub_100005DC4(&qword_1001C6D00);
    sub_100155904();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6CF8);
  }
  return result;
}

unint64_t sub_10015625C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6D08;
  if (!qword_1001C6D08)
  {
    v1 = sub_100005DC4(&qword_1001C6D10);
    sub_1001559B0(&qword_1001C6A30, &qword_1001C6A28, (void (*)(void))sub_100155A08);
    sub_100016878((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6D08);
  }
  return result;
}

unint64_t sub_100156304()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6D18;
  if (!qword_1001C6D18)
  {
    v1 = sub_100005DC4(&qword_1001C6BC0);
    sub_100156388();
    sub_1001565B0(&qword_1001C2678, &qword_1001C2680);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6D18);
  }
  return result;
}

unint64_t sub_100156388()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6D20;
  if (!qword_1001C6D20)
  {
    v1 = sub_100005DC4(&qword_1001C6BB8);
    sub_1000A655C();
    sub_1001565B0(&qword_1001C6D28, &qword_1001C6BB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6D20);
  }
  return result;
}

void sub_10015640C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v0 = sub_100005DC4(&qword_1001C6C40);
  v7 = sub_100155F30();
  sub_100083808(v7, (uint64_t)&opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, v1, v2, v3, v4, v5, v6, v0);
  sub_1001578F0();
}

void sub_100156448(uint64_t a1)
{
  sub_100156464(a1, &qword_1001C6CB8, &qword_1001C6CC0);
}

void sub_100156464(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = sub_1001577BC(a1, a2);
  sub_1001565B0(a3, a2);
  sub_100083808(v6, (uint64_t)&opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, v7, v8, v9, v10, v11, v12, v5);
  sub_1001576BC();
}

unint64_t sub_1001564B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1001C6D30;
  if (!qword_1001C6D30)
  {
    v1 = sub_100005DC4(&qword_1001C6CD0);
    v2 = sub_100005DC4(&qword_1001C6CD8);
    sub_1001565B0(&qword_1001C6CE0, &qword_1001C6CD8);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100016878((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6D30);
  }
  return result;
}

void sub_100156584()
{
  sub_1001565B0(&qword_1001C6D38, &qword_1001C6D40);
}

void sub_1001565B0(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_1001577BC(0, a2);
    atomic_store(sub_100016CCC(v3), a1);
  }
  sub_100006338();
}

uint64_t sub_100156608(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 0, 1, v1);
}

uint64_t sub_100156618()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = v1[8];
  v4 = (_QWORD *)(v0 + v3);
  v5 = (_QWORD *)(v2 + v3);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  *(_BYTE *)(v0 + v1[9]) = *(_BYTE *)(v2 + v1[9]);
  *(_BYTE *)(v0 + v1[10]) = *(_BYTE *)(v2 + v1[10]);
  *(_QWORD *)(v0 + v1[11]) = *(_QWORD *)(v2 + v1[11]);
  v7 = v1[12];
  v8 = (_QWORD *)(v0 + v7);
  v9 = (_QWORD *)(v2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  *(_QWORD *)(v0 + v1[13]) = *(_QWORD *)(v2 + v1[13]);
  *(_QWORD *)(v0 + v1[14]) = *(_QWORD *)(v2 + v1[14]);
  *(_QWORD *)(v0 + v1[15]) = *(_QWORD *)(v2 + v1[15]);
  *(_QWORD *)(v0 + v1[16]) = *(_QWORD *)(v2 + v1[16]);
  *(_BYTE *)(v0 + v1[17]) = *(_BYTE *)(v2 + v1[17]);
  *(_QWORD *)(v0 + v1[18]) = *(_QWORD *)(v2 + v1[18]);
  *(_QWORD *)(v0 + v1[19]) = *(_QWORD *)(v2 + v1[19]);
  *(_QWORD *)(v0 + v1[20]) = *(_QWORD *)(v2 + v1[20]);
  *(_BYTE *)(v0 + v1[21]) = *(_BYTE *)(v2 + v1[21]);
  *(_BYTE *)(v0 + v1[22]) = *(_BYTE *)(v2 + v1[22]);
  *(_BYTE *)(v0 + v1[23]) = *(_BYTE *)(v2 + v1[23]);
  *(_BYTE *)(v0 + v1[24]) = *(_BYTE *)(v2 + v1[24]);
  v11 = v1[25];
  v12 = (_QWORD *)(v0 + v11);
  v13 = (_QWORD *)(v2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  *(_BYTE *)(v0 + v1[26]) = *(_BYTE *)(v2 + v1[26]);
  *(_QWORD *)(v0 + v1[27]) = *(_QWORD *)(v2 + v1[27]);
  *(_QWORD *)(v0 + v1[28]) = *(_QWORD *)(v2 + v1[28]);
  return swift_bridgeObjectRetain(v6);
}

void *sub_100156748(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

uint64_t sub_10015675C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;

  v25 = v24[6];
  v26 = (_QWORD *)(v21 + v25);
  v27 = (_QWORD *)(v23 + v25);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = v24[7];
  v30 = (_QWORD *)(v21 + v29);
  v31 = (_QWORD *)(v23 + v29);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  *(_BYTE *)(v21 + v24[8]) = *(_BYTE *)(v23 + v24[8]);
  *(_BYTE *)(v21 + v24[9]) = *(_BYTE *)(v23 + v24[9]);
  *(_BYTE *)(v21 + v24[10]) = *(_BYTE *)(v23 + v24[10]);
  *(_QWORD *)(v20 + *(int *)(v22 + 52)) = *(_QWORD *)(a20 + *(int *)(v22 + 52));
  return type metadata accessor for CloudAltitudeKind(0);
}

void *sub_1001567D4(void *a1, uint64_t a2, size_t a3)
{
  const void *v3;

  return memcpy(a1, v3, a3);
}

uint64_t sub_1001567DC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  *(_QWORD *)(v2 + v1[10]) = *(_QWORD *)(v0 + v1[10]);
  v3 = v1[11];
  v4 = (_QWORD *)(v2 + v3);
  v5 = (_QWORD *)(v0 + v3);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  v7 = v1[12];
  v8 = (_QWORD *)(v2 + v7);
  v9 = (_QWORD *)(v0 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = v1[13];
  v12 = (_QWORD *)(v2 + v11);
  v13 = (_QWORD *)(v0 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = v1[14];
  v16 = (_QWORD *)(v2 + v15);
  v17 = (_QWORD *)(v0 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  return type metadata accessor for TemperatureScaleConfiguration(0);
}

uint64_t sub_100156850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  return a17(v17, v18, v19);
}

void *sub_100156864(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

uint64_t sub_100156878()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 0, 1, v1);
}

uint64_t sub_10015688C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t sub_10015689C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v2, 1, a1);
}

uint64_t sub_1001568CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v1 + a1;
  _s13WeatherWidget20WeatherDataViewModelOwet_0(v2, 1, v3);
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v4, 1, v3);
}

uint64_t sub_1001568FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v2, 1, a1);
}

uint64_t sub_100156964()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = v0[6];
  v4 = (_QWORD *)(v1 + v3);
  v5 = (_QWORD *)(v2 + v3);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  v7 = v0[7];
  v8 = (_QWORD *)(v1 + v7);
  v9 = (_QWORD *)(v2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  *(_BYTE *)(v1 + v0[8]) = *(_BYTE *)(v2 + v0[8]);
  *(_BYTE *)(v1 + v0[9]) = *(_BYTE *)(v2 + v0[9]);
  *(_BYTE *)(v1 + v0[10]) = *(_BYTE *)(v2 + v0[10]);
  return type metadata accessor for Precipitation(0);
}

uint64_t sub_1001569C4()
{
  return type metadata accessor for AttributedString(0);
}

uint64_t sub_1001569D0@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t sub_1001569E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_1001569F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v17;

  return a17(a1, a2, v17);
}

double sub_1001569FC()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  double result;

  v3 = v2[20];
  result = *(double *)(v1 + v3);
  *(double *)(v0 + v3) = result;
  *(_BYTE *)(v0 + v2[21]) = *(_BYTE *)(v1 + v2[21]);
  *(_BYTE *)(v0 + v2[22]) = *(_BYTE *)(v1 + v2[22]);
  *(_BYTE *)(v0 + v2[23]) = *(_BYTE *)(v1 + v2[23]);
  *(_BYTE *)(v0 + v2[24]) = *(_BYTE *)(v1 + v2[24]);
  return result;
}

uint64_t sub_100156A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;

  *(_BYTE *)(v3 + v5[8]) = *(_BYTE *)(v4 + v5[8]);
  *(_BYTE *)(v3 + v5[9]) = *(_BYTE *)(v4 + v5[9]);
  *(_BYTE *)(v3 + v5[10]) = *(_BYTE *)(v4 + v5[10]);
  *(_QWORD *)(v0 + *(int *)(v2 + 52)) = *(_QWORD *)(v1 + *(int *)(v2 + 52));
  return type metadata accessor for CloudAltitudeKind(0);
}

double sub_100156A8C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  double result;

  v3 = v2[20];
  result = *(double *)(v1 + v3);
  *(double *)(v0 + v3) = result;
  *(_BYTE *)(v0 + v2[21]) = *(_BYTE *)(v1 + v2[21]);
  *(_BYTE *)(v0 + v2[22]) = *(_BYTE *)(v1 + v2[22]);
  *(_BYTE *)(v0 + v2[23]) = *(_BYTE *)(v1 + v2[23]);
  *(_BYTE *)(v0 + v2[24]) = *(_BYTE *)(v1 + v2[24]);
  return result;
}

uint64_t sub_100156AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;

  *(_BYTE *)(v2 + v5[8]) = *(_BYTE *)(v4 + v5[8]);
  *(_BYTE *)(v2 + v5[9]) = *(_BYTE *)(v4 + v5[9]);
  *(_BYTE *)(v2 + v5[10]) = *(_BYTE *)(v4 + v5[10]);
  *(_QWORD *)(v0 + *(int *)(v3 + 52)) = *(_QWORD *)(v1 + *(int *)(v3 + 52));
  return type metadata accessor for CloudAltitudeKind(0);
}

uint64_t sub_100156B1C()
{
  return type metadata accessor for AttributedString(0);
}

uint64_t sub_100156B24()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v1, v2, v3);
}

uint64_t sub_100156B34@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t sub_100156B44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + a1);
  *(_QWORD *)(v1 + a1) = v3;
  return swift_retain(v3);
}

uint64_t sub_100156B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(void))
{
  return a17();
}

uint64_t sub_100156B5C()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_100156B6C()
{
  return type metadata accessor for UUID(0);
}

void *sub_100156B78(void *a1, uint64_t a2, size_t a3)
{
  const void *v3;

  return memcpy(a1, v3, a3);
}

uint64_t sub_100156B80()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;

  *(_BYTE *)(v0 + v2[8]) = *(_BYTE *)(v1 + v2[8]);
  *(_BYTE *)(v0 + v2[9]) = *(_BYTE *)(v1 + v2[9]);
  *(_BYTE *)(v0 + v2[10]) = *(_BYTE *)(v1 + v2[10]);
  return type metadata accessor for Precipitation(0);
}

uint64_t sub_100156BB8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;

  *(_BYTE *)(v0 + v2[8]) = *(_BYTE *)(v1 + v2[8]);
  *(_BYTE *)(v0 + v2[9]) = *(_BYTE *)(v1 + v2[9]);
  *(_BYTE *)(v0 + v2[10]) = *(_BYTE *)(v1 + v2[10]);
  return type metadata accessor for Precipitation(0);
}

uint64_t sub_100156C0C()
{
  return type metadata accessor for RainInlineContentViewModel(0);
}

uint64_t sub_100156C20@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v3, v2);
}

uint64_t sub_100156C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  return a16(v16, v17, v18);
}

void *sub_100156C48(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

uint64_t sub_100156C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  return a16(v16, v18, v17);
}

uint64_t sub_100156C70@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t sub_100156C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 8))(v11, v12);
}

uint64_t sub_100156C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a18 + 8))(v18, v19);
}

uint64_t sub_100156CAC()
{
  return type metadata accessor for RainInlineContentViewModel(0);
}

uint64_t sub_100156CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v2, v1);
}

void sub_100156CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v0 + *(int *)(v2 + 36)) = *(_BYTE *)(v1 + *(int *)(v2 + 36));
  *(_BYTE *)(v0 + *(int *)(v2 + 40)) = *(_BYTE *)(v1 + *(int *)(v2 + 40));
}

uint64_t sub_100156CF4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void sub_100156CFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v0 + *(int *)(v2 + 36)) = *(_BYTE *)(v1 + *(int *)(v2 + 36));
  *(_BYTE *)(v0 + *(int *)(v2 + 40)) = *(_BYTE *)(v1 + *(int *)(v2 + 40));
}

uint64_t sub_100156D1C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_100156D34@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void sub_100156D40()
{
  Swift::String v0;

  v0._countAndFlagsBits = 32;
  v0._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v0);
}

uint64_t sub_100156D4C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100156D54@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100156D60@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100156D6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_100156D84@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + a1);
  v4 = v3[1];
  *v1 = *v3;
  v1[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_100156D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(int *)(v2 + 64);
  v5 = v1 + v4;
  _s13WeatherWidget20WeatherDataViewModelOwet_0(v0 + v4, 1, v3);
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v5, 1, v3);
}

uint64_t sub_100156DD4@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t sub_100156DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);

  return v17(v15 + *(int *)(a1 + 20), v16 + *(int *)(a1 + 20), a15);
}

void sub_100156E0C(Swift::String a1)
{
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(a1);
}

uint64_t sub_100156E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_100156E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(int *)(v2 + 60);
  v5 = v1 + v4;
  _s13WeatherWidget20WeatherDataViewModelOwet_0(v0 + v4, 1, v3);
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v5, 1, v3);
}

uint64_t sub_100156E5C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v3, v2);
}

uint64_t sub_100156E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v18;
  uint64_t v19;

  return a18(v18 + *(int *)(a1 + 20), v19 + *(int *)(a1 + 20), a15);
}

uint64_t sub_100156E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

double sub_100156EC0()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  double result;

  *(_BYTE *)(v0 + v2[26]) = *(_BYTE *)(v1 + v2[26]);
  *(_QWORD *)(v0 + v2[27]) = *(_QWORD *)(v1 + v2[27]);
  v3 = v2[28];
  result = *(double *)(v1 + v3);
  *(double *)(v0 + v3) = result;
  return result;
}

uint64_t sub_100156EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  return a18(v18 + *(int *)(v20 + 48), v19 + *(int *)(v20 + 48), v21);
}

uint64_t sub_100156F10()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100156F24()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100156F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  return a18(v18 + *(int *)(a1 + 20), v19 + *(int *)(a1 + 20), v20);
}

uint64_t sub_100156F50()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;

  *(_BYTE *)(v0 + v2[26]) = *(_BYTE *)(v1 + v2[26]);
  *(_QWORD *)(v0 + v2[27]) = *(_QWORD *)(v1 + v2[27]);
  *(_QWORD *)(v0 + v2[28]) = *(_QWORD *)(v1 + v2[28]);
  return v0;
}

void sub_100156F7C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v0);
}

uint64_t sub_100156F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  return a18(v18 + *(int *)(v20 + 48), v19 + *(int *)(v20 + 48), v21);
}

uint64_t sub_100156FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(int *)(v1 + 36);
  v4 = (_QWORD *)(v0 + v3);
  v5 = (_QWORD *)(v2 + v3);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_100156FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_100156FD8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100156FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v19 + *(int *)(v18 + 60), 1, a18);
}

uint64_t sub_100157000()
{
  return static WeatherFormatStyle<>.weather.getter();
}

uint64_t sub_100157020(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_100157028()
{
  return type metadata accessor for Font.Context(0);
}

uint64_t sub_100157030(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_10015704C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_BYTE *)(v1 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_BYTE *)(v0 + 32);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 16);
  *(_BYTE *)(v0 + 32) = v2;
  return sub_100007458(v3, v4, v5);
}

uint64_t sub_100157068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v1, v2);
}

uint64_t sub_100157078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v1, v2);
}

uint64_t sub_100157088()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_100157090()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6F2068676948202CLL;
  v0._object = (void *)0xEA00000000002066;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v0);
}

void sub_1001570AC()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x666F20776F4C202CLL;
  v0._object = (void *)0xE900000000000020;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v0);
}

__n128 sub_1001570C8@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v2 + a1);
  *(__n128 *)(v1 + a1) = result;
  return result;
}

uint64_t sub_1001570D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  return v3(v4 + *(int *)(v2 + 32), v1 + *(int *)(v2 + 32), v0);
}

uint64_t sub_1001570F0(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1001570FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v2, v1);
}

uint64_t sub_10015710C()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v1, v3, v2);
}

uint64_t sub_10015711C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v2, v1);
}

uint64_t sub_10015712C(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 0, 1, v1);
}

uint64_t sub_10015713C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(void))
{
  return a18();
}

uint64_t sub_100157144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(v4 + *(int *)(v0 + 32), v1 + *(int *)(v0 + 32), v3);
}

uint64_t sub_100157160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Measurement.formatted<A>(_:placeholder:unitManager:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100157168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2);
}

uint64_t sub_100157184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v0 + *(int *)(v2 + 32), v1 + *(int *)(v2 + 32), v3);
}

uint64_t sub_10015719C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v0 + *(int *)(v2 + 24), v1 + *(int *)(v2 + 24), v3);
}

uint64_t sub_1001571B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t, uint64_t, uint64_t), uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;

  return a17(v19 + *(int *)(a1 + 20), v18 + *(int *)(a1 + 20), a18);
}

uint64_t sub_1001571CC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_1001571E4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1001571EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t, uint64_t), uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  return a12(v14 + *(int *)(a14 + 20), v15 + *(int *)(a14 + 20), a13);
}

uint64_t sub_100157204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t), uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  return a9(v11 + *(int *)(a11 + 20), v12 + *(int *)(a11 + 20), a10);
}

uint64_t sub_10015721C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  return a16(v16 + *(int *)(v17 + 24), v19 + *(int *)(v17 + 24), v18);
}

uint64_t sub_100157234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_10015723C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_100157244()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100157258()
{
  return static WeatherFormatStyle<>.weather.getter();
}

uint64_t sub_100157260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + *(int *)(v1 + 76)) = *(_QWORD *)(v2 + *(int *)(v1 + 76));
  return *(_QWORD *)(v2 + *(int *)(v1 + 80) + 8);
}

uint64_t sub_100157280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, uint64_t, uint64_t), uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;

  return a14(v15 + *(int *)(a13 + 20), v16 + *(int *)(a13 + 20), a15);
}

uint64_t sub_100157298()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1001572B0(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 0, 1, v1);
}

uint64_t sub_1001572D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v0 + *(int *)(v2 + 32), v1 + *(int *)(v2 + 32), v3);
}

uint64_t sub_1001572E8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1001572F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1001572F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  return a16(v19 + *(int *)(v16 + 24), v18 + *(int *)(v16 + 24), v17);
}

uint64_t sub_100157310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v0 + *(int *)(v2 + 24), v1 + *(int *)(v2 + 24), v3);
}

uint64_t sub_100157328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

uint64_t sub_100157340(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_100157358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t (*a19)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v19;

  return a19(a1, a2, v19);
}

uint64_t sub_100157370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;

  return v2(v3 + *(int *)(v0 + 32), v1);
}

void sub_100157384(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 + a1) = *(_BYTE *)(v1 + a1);
}

uint64_t sub_100157390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = *(int *)(v2 + 28);
  v4 = (_QWORD *)(v0 + v3);
  v5 = (_QWORD *)(v1 + v3);
  *v4 = *v5;
  return v5[1];
}

uint64_t sub_1001573AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = *(int *)(v2 + 28);
  v4 = (_QWORD *)(v0 + v3);
  v5 = (_QWORD *)(v1 + v3);
  *v4 = *v5;
  return v5[1];
}

uint64_t sub_1001573C8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void *sub_1001573DC()
{
  const void *v0;
  void *v1;
  uint64_t v2;

  return memcpy(v1, v0, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
}

uint64_t sub_1001573F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t), uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  return a10(v13 + *(int *)(v11 + 72), v12 + *(int *)(v11 + 72), a11);
}

uint64_t sub_100157404()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

double sub_10015740C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v3 = *(int *)(v1 + 40);
  result = *(double *)(v2 + v3);
  *(double *)(v0 + v3) = result;
  return result;
}

void *sub_100157428(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

void *sub_10015743C(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

uint64_t sub_100157450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(a1, v4 + a2, v3);
}

uint64_t sub_10015745C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(v0 + *(int *)(v1 + 28), v4 + *(int *)(v1 + 28), v3);
}

uint64_t sub_100157470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v2 + *(int *)(v0 + 64), 1, v1);
}

uint64_t sub_10015749C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t), uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  return a11(v12 + *(int *)(v13 + 72), v14 + *(int *)(v13 + 72), a12);
}

uint64_t sub_1001574B0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001574D8(uint64_t a1)
{
  return swift_retain(a1);
}

uint64_t sub_1001574EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t, uint64_t), uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  return a12(v15 + *(int *)(v14 + 72), v13 + *(int *)(v14 + 72), a13);
}

uint64_t sub_100157500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 - 160))(v1, *(unsigned int *)(v2 - 176), v0);
}

double sub_100157514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v3 = *(int *)(v0 + 40);
  result = *(double *)(v1 + v3);
  *(double *)(v2 + v3) = result;
  return result;
}

uint64_t sub_100157530@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  return a3(v3 + a1, v4 + a1);
}

uint64_t sub_100157540(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_100157558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  return v3(v0 + *(int *)(v1 + 24), v2);
}

uint64_t sub_100157568(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_100157570()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100157578()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100157584()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10015758C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);

  return v20(v19, a18, v18);
}

uint64_t sub_10015759C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001575A4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 136))();
}

uint64_t sub_1001575AC()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1001575B4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001575BC()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v3, v0);
}

uint64_t sub_1001575CC()
{
  uint64_t v0;

  return sub_100008EC4(v0);
}

uint64_t sub_1001575D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v1, v2);
}

uint64_t sub_1001575E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v1, v2);
}

uint64_t sub_1001575F4()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, v1, 1);
}

uint64_t sub_100157604()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10015760C()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, v0);
}

uint64_t sub_10015761C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10015762C(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

double sub_100157648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v3 = *(int *)(v2 + 76);
  result = *(double *)(v1 + v3);
  *(double *)(v0 + v3) = result;
  return result;
}

uint64_t sub_100157660()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  return sub_100006E58(v0, v1, v2);
}

uint64_t sub_100157670()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  return sub_100006E58(v0, v1, v2);
}

uint64_t sub_1001576AC(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

uint64_t sub_1001576CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v1, v3, v0);
}

uint64_t sub_1001576DC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001576E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return swift_retain(a20);
}

double sub_1001576EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v3 = *(int *)(v2 + 76);
  result = *(double *)(v1 + v3);
  *(double *)(v0 + v3) = result;
  return result;
}

uint64_t sub_100157704@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + a1);
  *(_QWORD *)(v1 + a1) = *(_QWORD *)(v2 + a1);
  return swift_release(v3);
}

uint64_t sub_100157724(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void sub_10015772C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v0);
}

uint64_t sub_10015773C()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100157744()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10015774C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_10015775C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

uint64_t sub_100157768(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
}

uint64_t sub_10015778C()
{
  return type metadata accessor for CurrentObservationViewAttributes(319);
}

uint64_t sub_100157798()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v0;
  *v1 = *v0;
  return swift_retain(v2);
}

uint64_t sub_1001577A4()
{
  return 8;
}

uint64_t sub_1001577B0()
{
  return type metadata accessor for WeatherFormatPlaceholder(0);
}

uint64_t sub_1001577BC(uint64_t a1, uint64_t *a2)
{
  return sub_100005DC4(a2);
}

__n128 sub_1001577D8()
{
  uint64_t v0;
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v0 = *(_OWORD *)v1;
  *(_OWORD *)(v0 + 16) = v3;
  *(_BYTE *)(v0 + 32) = *(_BYTE *)(v1 + 32);
  return result;
}

uint64_t sub_1001577EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;

  *v2 = *v3;
  v2[1] = a2;
  return swift_bridgeObjectRelease(a1);
}

__n128 sub_1001577F8@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v1 + a1);
  *(__n128 *)(v2 + a1) = result;
  return result;
}

uint64_t sub_100157810()
{
  return NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter();
}

void sub_10015781C()
{
  uint64_t *v0;
  uint64_t v1;

  sub_100016904(v1, v0);
}

void sub_100157828(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + a1) = *(_BYTE *)(v2 + a1);
}

uint64_t sub_10015783C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100157848()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100157854()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;

  result = sub_100006E58(v0, v1, v2);
  *(_QWORD *)(v3 + 16) = v0;
  *(_QWORD *)(v3 + 24) = v1;
  *(_BYTE *)(v3 + 32) = v2;
  return result;
}

uint64_t sub_100157878()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;

  result = sub_100006E58(v0, v1, v2);
  *(_QWORD *)(v3 + 16) = v0;
  *(_QWORD *)(v3 + 24) = v1;
  *(_BYTE *)(v3 + 32) = v2;
  return result;
}

uint64_t sub_10015789C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t result;

  *v0 = *v1;
  result = v1[1];
  v0[1] = result;
  return result;
}

__n128 sub_1001578B0@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v1 + a1);
  *(__n128 *)(v2 + a1) = result;
  return result;
}

uint64_t sub_1001578BC(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 320) = result;
  return result;
}

__n128 sub_1001578D0@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 32) = *(_BYTE *)(a1 + 32);
  return result;
}

uint64_t sub_1001578E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + a1);
  *(_QWORD *)(v1 + a1) = v3;
  return swift_retain(v3);
}

uint64_t sub_1001578FC()
{
  uint64_t v0;

  return v0;
}

void sub_100157910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + *(int *)(v2 + 76)) = *(_QWORD *)(v1 + *(int *)(v2 + 76));
}

uint64_t sub_100157924()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_100157930()
{
  uint64_t v0;

  return v0;
}

void sub_10015793C()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v2);
}

void sub_100157948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + *(int *)(v2 + 52)) = *(_QWORD *)(v1 + *(int *)(v2 + 52));
}

uint64_t sub_10015795C(uint64_t a1)
{
  uint64_t v1;

  return v1 + *(int *)(a1 + 20);
}

uint64_t sub_100157970()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t result;

  *v0 = *v1;
  result = v1[1];
  v0[1] = result;
  return result;
}

uint64_t sub_100157984@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t sub_100157990@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = a1[1];
  *v1 = *a1;
  v1[1] = result;
  return result;
}

uint64_t sub_10015799C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

void sub_1001579A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + *(int *)(v2 + 76)) = *(_QWORD *)(v1 + *(int *)(v2 + 76));
}

void sub_1001579C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + *(int *)(v2 + 52)) = *(_QWORD *)(v1 + *(int *)(v2 + 52));
}

uint64_t sub_1001579DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = a1;
  return static UnitManager.standard.getter();
}

uint64_t sub_1001579E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001579F4()
{
  return type metadata accessor for AccessibilityChildBehavior(0);
}

uint64_t sub_1001579FC(uint64_t a1)
{
  uint64_t v1;

  return v1 + *(int *)(a1 + 20);
}

uint64_t sub_100157A28()
{
  uint64_t v0;

  return v0;
}

void sub_100157A34(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  _QWORD v84[3];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v93 = a1;
  v84[0] = type metadata accessor for InstantWeatherViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v2);
  sub_10002325C();
  v5 = v4 - v3;
  v88 = type metadata accessor for UVIndex(0);
  v85 = *(_QWORD *)(v88 - 8);
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_1000230E0();
  v89 = v7;
  v8 = type metadata accessor for UltravioletComplicationViewModel(0);
  v91 = *(_QWORD *)(v8 - 8);
  v92 = v8;
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_1000230E0();
  v90 = v10;
  v11 = type metadata accessor for TimeZone(0);
  v86 = *(_QWORD *)(v11 - 8);
  v87 = v11;
  sub_1000230F4();
  v13 = __chkstk_darwin(v12);
  v84[1] = (char *)v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v84[2] = (char *)v84 - v15;
  type metadata accessor for AggregateWeatherViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v16);
  sub_10002325C();
  v19 = v18 - v17;
  v20 = type metadata accessor for WeatherDataViewModel(0);
  sub_1000230F4();
  v22 = __chkstk_darwin(v21);
  v24 = (char *)v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)v84 - v25;
  v27 = type metadata accessor for ForecastEntry.Model(0);
  sub_1000230F4();
  __chkstk_darwin(v28);
  sub_10002325C();
  v31 = (_BYTE *)(v30 - v29);
  v32 = type metadata accessor for ForecastEntry(0);
  sub_1001449F4(v1 + *(int *)(v32 + 28), (uint64_t)v31, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v31, v27) != 1)
  {
    v56 = v93;
    if (*v31)
      v57 = 1;
    else
      v57 = 2;
    v58 = v92;
    goto LABEL_29;
  }
  sub_100144A64((uint64_t)v31, (uint64_t)v26, type metadata accessor for WeatherDataViewModel);
  sub_1001449F4((uint64_t)v26, (uint64_t)v24, type metadata accessor for WeatherDataViewModel);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v20);
  v34 = (uint64_t)v26;
  if (!EnumCaseMultiPayload)
  {
    sub_100144A64((uint64_t)v24, v19, type metadata accessor for AggregateWeatherViewModel);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v59 = sub_10002538C();
    sub_100025184(v59, (uint64_t)qword_1001D9FF0);
    v60 = sub_100025394();
    v61 = static os_log_type_t.default.getter();
    if (sub_100025374(v61))
    {
      v62 = (uint8_t *)sub_1000290AC();
      *(_WORD *)v62 = 0;
      sub_100025384((void *)&_mh_execute_header, v60, (os_log_type_t)type metadata accessor for WeatherDataViewModel, "Making UltraViolet complication view model entry from aggregate weather", v62);
      sub_10002534C((uint64_t)v62);
    }

    v63 = Location.kind.getter();
    v64 = Location.Identifier.Kind.rawValue.getter(v63 & 1);
    v66 = v65;
    v67 = 1;
    v68 = Location.Identifier.Kind.rawValue.getter(1);
    v70 = v64 == v68 && v66 == v69;
    v71 = v66;
    if (!v70)
    {
      v20 = v69;
      v67 = sub_1001580AC(v64, v66, v68);
      v71 = v20;
    }
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(v71);
    sub_1001580C4();
    type metadata accessor for CurrentObservationViewModel(0);
    v73 = v86;
    v72 = v87;
    v74 = sub_100158098();
    v75(v74);
    v76 = v89;
    sub_100156FD8(v89, *(uint64_t (**)(uint64_t, uint64_t))(v85 + 16));
    v53 = v90;
    sub_1001580B8(v67 & 1, v20, v76);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v64, v72);
    v54 = type metadata accessor for AggregateWeatherViewModel;
    v55 = v19;
    goto LABEL_28;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_100144A64((uint64_t)v24, v5, type metadata accessor for InstantWeatherViewModel);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v35 = sub_10002538C();
    sub_100025184(v35, (uint64_t)qword_1001D9FF0);
    v36 = sub_100025394();
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)sub_1000290AC();
      *(_WORD *)v38 = 0;
      sub_100025384((void *)&_mh_execute_header, v36, v37, "Making UltraViolet complication view model entry from interpolated instant weather", v38);
      sub_10002534C((uint64_t)v38);
    }

    v39 = Location.kind.getter();
    v40 = Location.Identifier.Kind.rawValue.getter(v39 & 1);
    v42 = v41;
    v43 = 1;
    v44 = Location.Identifier.Kind.rawValue.getter(1);
    v46 = v40 == v44 && v42 == v45;
    v47 = v42;
    if (!v46)
    {
      v20 = v45;
      v43 = sub_1001580AC(v40, v42, v44);
      v47 = v20;
    }
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v47);
    sub_1001580C4();
    type metadata accessor for CurrentObservationViewModel(0);
    v49 = v86;
    v48 = v87;
    v50 = sub_100158098();
    v51(v50);
    v52 = v89;
    sub_100156FD8(v89, *(uint64_t (**)(uint64_t, uint64_t))(v85 + 16));
    v53 = v90;
    sub_1001580B8(v43 & 1, v20, v52);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v26, v48);
    v54 = type metadata accessor for InstantWeatherViewModel;
    v55 = v5;
LABEL_28:
    sub_100029030(v55, v54);
    sub_100029030(v34, type metadata accessor for WeatherDataViewModel);
    v77 = v93;
    v78 = v53;
    v79 = v92;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32))(v93, v78, v92);
    v56 = v77;
    v57 = 0;
    v58 = v79;
LABEL_29:
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v56, v57, 2, v58);
    return;
  }
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v80 = sub_10002538C();
  sub_100025184(v80, (uint64_t)qword_1001D9FF0);
  v81 = sub_100025394();
  v82 = static os_log_type_t.error.getter();
  if (sub_100025374(v82))
  {
    v83 = (uint8_t *)sub_1000290AC();
    *(_WORD *)v83 = 0;
    sub_100025384((void *)&_mh_execute_header, v81, (os_log_type_t)type metadata accessor for WeatherDataViewModel, "Expected aggregate weather or instant but got sunrise/sunset", v83);
    sub_10002534C((uint64_t)v83);
  }

  sub_100029030((uint64_t)v26, type metadata accessor for WeatherDataViewModel);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v93, 1, 2, v92);
  sub_100029030((uint64_t)v24, type metadata accessor for WeatherDataViewModel);
}

uint64_t sub_100158098()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 168);
}

uint64_t sub_1001580AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0);
}

uint64_t sub_1001580B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UltravioletComplicationViewModel.init(localWeather:timeZone:current:daily:hourly:)(a1, a2, a3, 0, 0);
}

uint64_t sub_1001580C4()
{
  return Location.timeZone.getter();
}

uint64_t sub_1001580D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for WidgetNames(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for WidgetNames.Forecast(_:), v0);
  v5 = WidgetNames.rawValue.getter(v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

ValueMetadata *type metadata accessor for ForecastWidget()
{
  return &type metadata for ForecastWidget;
}

uint64_t sub_100158184(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A15D8, 1);
}

uint64_t sub_100158194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v82 = a3;
  v5 = sub_100005D40(&qword_1001C6D48);
  v72 = *(_QWORD *)(v5 - 8);
  sub_1000230F4();
  __chkstk_darwin(v6);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001C6D50);
  v10 = *(_QWORD *)(v9 - 8);
  v75 = v9;
  v76 = v10;
  sub_1000230F4();
  __chkstk_darwin(v11);
  sub_1000230E0();
  v71 = v12;
  v13 = sub_100005D40(&qword_1001C6D58);
  v14 = *(_QWORD *)(v13 - 8);
  v78 = v13;
  v79 = v14;
  sub_1000230F4();
  __chkstk_darwin(v15);
  sub_1000230E0();
  v73 = v16;
  v17 = sub_100005D40(&qword_1001C6D60);
  v18 = *(_QWORD *)(v17 - 8);
  v80 = v17;
  v81 = v18;
  sub_1000230F4();
  __chkstk_darwin(v19);
  sub_1000230E0();
  v77 = v20;
  v21 = type metadata accessor for WeatherTimelineProvider();
  swift_allocObject(v21, 248, 7);
  swift_bridgeObjectRetain(a2);
  v22 = sub_100165A84(65, a1, a2);
  v23 = type metadata accessor for WeatherIntent();
  v83 = v22;
  v74 = v22;
  v24 = type metadata accessor for WidgetContentView(0);
  v25 = sub_1000061B0(&qword_1001C6D68, type metadata accessor for WidgetContentView, (uint64_t)&unk_10017CF20);
  v26 = sub_1000061B0(&qword_1001C0270, (uint64_t (*)(uint64_t))type metadata accessor for WeatherTimelineProvider, (uint64_t)&unk_100185C98);
  swift_bridgeObjectRetain(a2);
  swift_retain(v22);
  IntentConfiguration.init<A>(kind:intent:provider:content:)(a1, a2, v23, &v83, sub_100158638, 0, v23, v24, v21, v25, v26);
  v27 = LocalizedStringKey.init(stringLiteral:)(0x7473616365726F46, 0xE800000000000000);
  v31 = sub_100045174(v27, v29, v28 & 1, v30);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v38 = sub_100158908();
  v39 = v71;
  WidgetConfiguration.configurationDisplayName(_:)(v31, v33, v37, v35, v5, v38);
  sub_100016868(v31, v33, v37);
  v40 = swift_bridgeObjectRelease(v35);
  (*(void (**)(char *, uint64_t, __n128))(v72 + 8))(v8, v5, v40);
  v41 = sub_100005D40(&qword_1001C0280);
  v42 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v43 = *(_QWORD *)(v42 + 72);
  v44 = *(unsigned __int8 *)(v42 + 80);
  v45 = (v44 + 32) & ~v44;
  v46 = swift_allocObject(v41, v45 + 3 * v43, v44 | 7);
  *(_OWORD *)(v46 + 16) = xmmword_10017C900;
  v47 = v46 + v45;
  sub_100158A1C(v47, enum case for WidgetFamily.systemSmall(_:));
  sub_100158A1C(v47 + v43, enum case for WidgetFamily.systemMedium(_:));
  sub_100158A1C(v47 + 2 * v43, enum case for WidgetFamily.systemLarge(_:));
  v83 = v5;
  v84 = v38;
  v48 = sub_10004516C((uint64_t)&v83, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v49 = v73;
  v50 = v75;
  WidgetConfiguration.supportedFamilies(_:)(v46, v75, v48);
  v51 = swift_bridgeObjectRelease(v46);
  v52 = v50;
  (*(void (**)(uint64_t, uint64_t, __n128))(v76 + 8))(v39, v50, v51);
  v53 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003FLL, 0x800000010018A570);
  v57 = sub_100045174(v53, v55, v54 & 1, v56);
  v59 = v58;
  v61 = v60;
  v63 = v62 & 1;
  v83 = v52;
  v84 = v48;
  v64 = sub_10004516C((uint64_t)&v83, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>);
  v66 = v77;
  v65 = v78;
  WidgetConfiguration.description(_:)(v57, v59, v63, v61, v78, v64);
  sub_100016868(v57, v59, v63);
  v67 = swift_bridgeObjectRelease(v61);
  (*(void (**)(uint64_t, uint64_t, __n128))(v79 + 8))(v49, v65, v67);
  v83 = v65;
  v84 = v64;
  v68 = sub_10004516C((uint64_t)&v83, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  v69 = v80;
  WidgetConfiguration.enableContentMarginsForFirstParty(_:)(1, v80, v68);
  swift_release(v74);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 8))(v66, v69);
}

uint64_t sub_100158638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v4 = sub_100005D40(&qword_1001C0288);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100005D40(&qword_1001BFA48);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044F34(a1, (uint64_t)v12);
  *v9 = swift_getKeyPath(&unk_100185830);
  v13 = sub_100005D40(&qword_1001BFA18);
  swift_storeEnumTagMultiPayload(v9, v13, 0);
  *v6 = swift_getKeyPath(&unk_100185860);
  v14 = sub_100005D40(&qword_1001C0290);
  swift_storeEnumTagMultiPayload(v6, v14, 0);
  KeyPath = swift_getKeyPath(&unk_100185890);
  v16 = swift_getKeyPath(&unk_1001858B8);
  v17 = (int *)type metadata accessor for WidgetContentView(0);
  v18 = (uint64_t *)(a2 + v17[7]);
  *v18 = v16;
  v19 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  sub_100094280((uint64_t)v9, a2, &qword_1001BFA48);
  sub_100094280((uint64_t)v6, a2 + v17[5], &qword_1001C0288);
  v20 = a2 + v17[6];
  *(_QWORD *)v20 = KeyPath;
  *(_BYTE *)(v20 + 8) = 0;
  sub_100044FCC((uint64_t)v12, a2 + v17[8]);
  v21 = (_QWORD *)(a2 + v17[9]);
  type metadata accessor for CGRect(0);
  v23 = static Array._allocateBufferUninitialized(minimumCapacity:)(12, v22);
  *(_QWORD *)(v23 + 16) = 12;
  bzero((void *)(v23 + 32), 0x180uLL);
  v34 = v23;
  v24 = sub_100005D40(&qword_1001C0298);
  State.init(wrappedValue:)(v35, &v34, v24);
  v25 = v35[1];
  *v21 = v35[0];
  v21[1] = v25;
  v26 = v17[10];
  v27 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v27, "bounds");
  v29 = v28;
  v31 = v30;

  result = sub_100005B38(v29, v31);
  *(_BYTE *)(a2 + v26) = result;
  return result;
}

uint64_t sub_1001588DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1001580D0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100158900@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100158194(*v1, v1[1], a1);
}

unint64_t sub_100158908()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6D70;
  if (!qword_1001C6D70)
  {
    v1 = sub_100005DC4(&qword_1001C6D48);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentConfiguration<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6D70);
  }
  return result;
}

uint64_t sub_100158960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;

  v0 = sub_100005DC4(&qword_1001C6D60);
  v1 = sub_100005DC4(&qword_1001C6D58);
  v2 = sub_100005DC4(&qword_1001C6D50);
  v7 = sub_100005DC4(&qword_1001C6D48);
  v8 = sub_100158908();
  v3 = sub_10004516C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v7 = v2;
  v8 = v3;
  v4 = sub_10004516C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>);
  v7 = v1;
  v8 = v4;
  v5 = sub_10004516C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  v7 = v0;
  v8 = v5;
  return sub_10004516C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.enableContentMarginsForFirstParty(_:)>>);
}

uint64_t sub_100158A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

ValueMetadata *type metadata accessor for PrivacyResetIdentifierControlWidget()
{
  return &type metadata for PrivacyResetIdentifierControlWidget;
}

uint64_t sub_100158A34(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A161C, 1);
}

uint64_t sub_100158A44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v0 = sub_100005D40(&qword_1001C6D78);
  v39 = *(_QWORD *)(v0 - 8);
  sub_1000230F4();
  __chkstk_darwin(v1);
  sub_10002325C();
  v4 = v3 - v2;
  v5 = sub_100005D40(&qword_1001C6D80);
  v41 = *(_QWORD *)(v5 - 8);
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_10002325C();
  v9 = v8 - v7;
  v42 = sub_100005D40(&qword_1001C6D88);
  v43 = *(_QWORD *)(v42 - 8);
  sub_1000230F4();
  __chkstk_darwin(v10);
  sub_10002325C();
  v13 = v12 - v11;
  v44 = sub_100005D40(&qword_1001C6D90);
  v45 = *(_QWORD *)(v44 - 8);
  sub_1000230F4();
  __chkstk_darwin(v14);
  sub_10002325C();
  v40 = v16 - v15;
  KeyPath = swift_getKeyPath(&unk_100185958);
  v18 = sub_10012C1F4();
  ControlToggle.init<A, B, C, D, E, F, G>(kind:intentUpdatableProperty:title:subtitle:value:)(0xD000000000000030, 0x800000010018A610, KeyPath, sub_100158D6C, 0, sub_100158D88, 0, sub_100158E04, 0, &type metadata for Text, &type metadata for Text, &type metadata for Text, v18, &protocol witness table for Text, &protocol witness table for Text, &protocol witness table for Text);
  v19 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000016, 0x800000010018A650);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v26 = sub_100158E90();
  WidgetConfiguration.configurationDisplayName(_:)(v19, v21, v23 & 1, v25, v0, v26);
  swift_bridgeObjectRelease(v25);
  v27 = swift_bridgeObjectRelease(v21);
  (*(void (**)(uint64_t, uint64_t, __n128))(v39 + 8))(v4, v0, v27);
  v28 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000027, 0x800000010018A670);
  v30 = v29;
  LOBYTE(v4) = v31;
  v33 = v32;
  v46 = v0;
  v47 = v26;
  v34 = sub_10004516C((uint64_t)&v46, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.description(_:)(v28, v30, v4 & 1, v33, v5, v34);
  swift_bridgeObjectRelease(v33);
  v35 = swift_bridgeObjectRelease(v30);
  (*(void (**)(uint64_t, uint64_t, __n128))(v41 + 8))(v9, v5, v35);
  v46 = v5;
  v47 = v34;
  v36 = sub_10004516C((uint64_t)&v46, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  WidgetConfiguration.disablesControlStateCaching()(v42, v36);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v13, v42);
  v46 = v42;
  v47 = v36;
  v37 = sub_10004516C((uint64_t)&v46, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>);
  WidgetConfiguration.hiddenControl()(v44, v37);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v40, v44);
}

uint64_t sub_100158D6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100158DA0(0xD000000000000018, 0x8000000100189BD0, a1);
}

uint64_t sub_100158D88@<X0>(uint64_t a1@<X8>)
{
  return sub_100158DA0(0x72656874616557, 0xE700000000000000, a1);
}

uint64_t sub_100158DA0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v4 = LocalizedStringKey.init(stringLiteral:)(a1, a2);
  result = Text.init(_:tableName:bundle:comment:)(v4, v6, v5 & 1, v7, 0, 0, 0);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v10 & 1;
  *(_QWORD *)(a3 + 24) = v11;
  return result;
}

uint64_t sub_100158E04@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if ((a1 & 1) != 0)
  {
    v3 = 0x656C6269736956;
    v4 = 0xE700000000000000;
  }
  else
  {
    v3 = 6710863;
    v4 = 0xE300000000000000;
  }
  v5 = LocalizedStringKey.init(stringLiteral:)(v3, v4);
  result = Text.init(_:tableName:bundle:comment:)(v5, v7, v6 & 1, v8, 0, 0, 0);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = v11 & 1;
  *(_QWORD *)(a2 + 24) = v12;
  return result;
}

unint64_t sub_100158E90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C6D98;
  if (!qword_1001C6D98)
  {
    v1 = sub_100005DC4(&qword_1001C6D78);
    result = swift_getWitnessTable(&protocol conformance descriptor for ControlToggle<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C6D98);
  }
  return result;
}

uint64_t sub_100158ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;

  v0 = sub_100005DC4(&qword_1001C6D90);
  v1 = sub_100005DC4(&qword_1001C6D88);
  v2 = sub_100005DC4(&qword_1001C6D80);
  v7 = sub_100005DC4(&qword_1001C6D78);
  v8 = sub_100158E90();
  v3 = sub_10004516C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v7 = v2;
  v8 = v3;
  v4 = sub_10004516C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  v7 = v1;
  v8 = v4;
  v5 = sub_10004516C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>);
  v7 = v0;
  v8 = v5;
  return sub_10004516C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.hiddenControl()>>);
}

void sub_100158F90(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  int EnumCaseMultiPayload;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  NSObject *v46;
  os_log_type_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  BOOL v52;
  NSObject *v53;
  NSObject *v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  os_log_type_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  BOOL v85;
  NSObject *v86;
  NSObject *v87;
  _BYTE *v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  _BYTE *v92;
  void (*v93)(uint64_t, _BYTE *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[12];
  unsigned int v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v127 = a1;
  type metadata accessor for InstantWeatherViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v2);
  sub_1000230E0();
  v110 = v3;
  sub_100005D40(&qword_1001C6DA0);
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_1000230E0();
  v119 = v5;
  v6 = sub_100093378();
  v126 = type metadata accessor for WindComplicationViewModel(v6);
  v121 = *(_QWORD *)(v126 - 8);
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_1000230E0();
  v120 = v8;
  v9 = sub_100005D40(&qword_1001C08B0);
  v117 = *(_QWORD *)(v9 - 8);
  v118 = v9;
  sub_1000230F4();
  __chkstk_darwin(v10);
  sub_100023150();
  v113 = v11;
  __chkstk_darwin(v12);
  v115 = &v107[-v13];
  v116 = sub_100005D40(&qword_1001C6DA8);
  v114 = *(_QWORD *)(v116 - 8);
  sub_1000230F4();
  __chkstk_darwin(v14);
  sub_100023150();
  v112 = v15;
  __chkstk_darwin(v16);
  v123 = &v107[-v17];
  v18 = sub_100093378();
  v19 = type metadata accessor for TimeZone(v18);
  v124 = *(_QWORD *)(v19 - 8);
  v125 = v19;
  sub_1000230F4();
  __chkstk_darwin(v20);
  sub_100023150();
  v111 = v21;
  __chkstk_darwin(v22);
  v122 = &v107[-v23];
  v24 = sub_100093378();
  type metadata accessor for AggregateWeatherViewModel(v24);
  sub_1000230F4();
  __chkstk_darwin(v25);
  sub_1000230E0();
  v27 = v26;
  v28 = sub_100093378();
  v29 = type metadata accessor for WeatherDataViewModel(v28);
  sub_1000230F4();
  v31 = __chkstk_darwin(v30);
  v33 = &v107[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v31);
  v35 = &v107[-v34];
  v36 = type metadata accessor for ForecastEntry.Model(0);
  sub_1000230F4();
  __chkstk_darwin(v37);
  v39 = &v107[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v40 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v1 + *(int *)(v40 + 28), (uint64_t)v39, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v39, v36) != 1)
  {
    v72 = v127;
    if (*v39)
      v73 = 1;
    else
      v73 = 2;
    v74 = v126;
    goto LABEL_29;
  }
  sub_100011868((uint64_t)v39, (uint64_t)v35, type metadata accessor for WeatherDataViewModel);
  sub_10000F7C4((uint64_t)v35, (uint64_t)v33, type metadata accessor for WeatherDataViewModel);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v33, v29);
  if (!EnumCaseMultiPayload)
  {
    sub_100011868((uint64_t)v33, v27, type metadata accessor for AggregateWeatherViewModel);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v75 = type metadata accessor for Logger(0);
    v76 = sub_100025184(v75, (uint64_t)qword_1001D9FF0);
    v77 = v76;
    v78 = Logger.logObject.getter(v76);
    v79 = static os_log_type_t.default.getter(v78);
    if (sub_100025374(v79))
    {
      v80 = (uint8_t *)sub_1000290AC();
      *(_WORD *)v80 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v77, "Making Wind complication view model entry from aggregate weather", v80, 2u);
      sub_10002534C((uint64_t)v80);
    }
    v109 = v35;

    v81 = Location.kind.getter();
    v82 = Location.Identifier.Kind.rawValue.getter(v81 & 1);
    v83 = sub_100159738();
    v85 = v82 == v83 && v78 == v84;
    v86 = v78;
    if (!v85)
    {
      v87 = v84;
      LOBYTE(v35) = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v78, v83, v84, 0);
      v86 = v87;
    }
    swift_bridgeObjectRelease(v78);
    swift_bridgeObjectRelease(v86);
    v88 = v122;
    Location.timeZone.getter(v89);
    type metadata accessor for CurrentObservationViewModel(0);
    v90 = v123;
    v91 = Wind.direction.getter();
    v108 = Wind.compassDirection.getter(v91);
    v92 = v115;
    Wind.speed.getter();
    v93 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v124 + 16);
    v110 = v27;
    v94 = v111;
    v93(v111, v88, v125);
    v95 = type metadata accessor for WeatherConditionGradientModel(0);
    sub_100159720(v95);
    v96 = v114;
    v97 = (char)v35;
    v98 = v112;
    v99 = v116;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v114 + 16))(v112, v90, v116);
    v101 = v117;
    v100 = v118;
    v102 = v113;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v117 + 16))(v113, v92, v118);
    v103 = v97 & 1;
    v70 = v120;
    WindComplicationViewModel.init(localWeather:timeZone:gradientModel:angle:direction:speed:hourly:)(v103, v94, v88, v98, v108, v102, 0);
    (*(void (**)(_BYTE *, uint64_t))(v101 + 8))(v92, v100);
    (*(void (**)(_BYTE *, uint64_t))(v96 + 8))(v123, v99);
    sub_100159748();
    v71 = type metadata accessor for AggregateWeatherViewModel;
    goto LABEL_28;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v42 = v110;
    sub_100011868((uint64_t)v33, v110, type metadata accessor for InstantWeatherViewModel);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v109 = v35;
    v43 = type metadata accessor for Logger(0);
    v44 = sub_100025184(v43, (uint64_t)qword_1001D9FF0);
    v45 = v44;
    v46 = Logger.logObject.getter(v44);
    v47 = static os_log_type_t.default.getter(v46);
    if (sub_100025374(v47))
    {
      v35 = (uint8_t *)sub_1000290AC();
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v45, "Making Wind complication view model entry from interpolated instant weather", v35, 2u);
      sub_10002534C((uint64_t)v35);
    }

    v48 = Location.kind.getter();
    v49 = Location.Identifier.Kind.rawValue.getter(v48 & 1);
    v50 = sub_100159738();
    v52 = v49 == v50 && v46 == v51;
    v53 = v46;
    if (!v52)
    {
      v54 = v51;
      LOBYTE(v35) = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v46, v50, v51, 0);
      v53 = v54;
    }
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v53);
    v55 = v122;
    Location.timeZone.getter(v56);
    type metadata accessor for CurrentObservationViewModel(0);
    v57 = v123;
    v58 = Wind.direction.getter();
    v108 = Wind.compassDirection.getter(v58);
    v59 = v115;
    Wind.speed.getter();
    v60 = v111;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v124 + 16))(v111, v55, v125);
    v61 = type metadata accessor for WeatherConditionGradientModel(0);
    sub_100159720(v61);
    v62 = v114;
    v63 = v112;
    v64 = v116;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v114 + 16))(v112, v57, v116);
    v66 = v117;
    v65 = v118;
    v67 = (char)v35;
    v68 = v113;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v117 + 16))(v113, v59, v118);
    v69 = v67 & 1;
    v70 = v120;
    WindComplicationViewModel.init(localWeather:timeZone:gradientModel:angle:direction:speed:hourly:)(v69, v60, v42, v63, v108, v68, 0);
    (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v59, v65);
    (*(void (**)(_BYTE *, uint64_t))(v62 + 8))(v123, v64);
    sub_100159748();
    v71 = type metadata accessor for InstantWeatherViewModel;
LABEL_28:
    sub_100029030(v110, v71);
    sub_100029030((uint64_t)v109, type metadata accessor for WeatherDataViewModel);
    v104 = v127;
    v105 = v70;
    v106 = v126;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 32))(v127, v105, v126);
    v72 = v104;
    v73 = 0;
    v74 = v106;
LABEL_29:
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v72, v73, 2, v74);
    return;
  }
  sub_100029030((uint64_t)v35, type metadata accessor for WeatherDataViewModel);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v127, 1, 2, v126);
  sub_100029030((uint64_t)v33, type metadata accessor for WeatherDataViewModel);
}

uint64_t sub_100159720(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(*(_QWORD *)(v1 - 160), 1, 1, a1);
}

uint64_t sub_100159738()
{
  return Location.Identifier.Kind.rawValue.getter(1);
}

uint64_t sub_100159748()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 120) + 8))(*(_QWORD *)(v0 - 136), *(_QWORD *)(v0 - 112));
}

uint64_t sub_100159758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;

  sub_1001599D0(a1, a9, type metadata accessor for CurrentObservationViewModel);
  v36 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  sub_1001599D0(a2, a9 + v36[5], type metadata accessor for DailyForecastViewModel);
  sub_100159A14(a3, a9 + v36[6]);
  v37 = a9 + v36[7];
  v38 = sub_100070DE8();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v37, a4, v38);
  v40 = (_QWORD *)(a9 + v36[8]);
  *v40 = a5;
  v40[1] = a6;
  *(_BYTE *)(a9 + v36[9]) = a7;
  *(_BYTE *)(a9 + v36[10]) = a8;
  *(_QWORD *)(a9 + v36[11]) = a13;
  v41 = (_QWORD *)(a9 + v36[12]);
  *v41 = a14;
  v41[1] = a15;
  *(_QWORD *)(a9 + v36[13]) = a16;
  *(_QWORD *)(a9 + v36[14]) = a17;
  *(_QWORD *)(a9 + v36[15]) = a18;
  *(_QWORD *)(a9 + v36[16]) = a19;
  *(_BYTE *)(a9 + v36[17]) = a20;
  *(_QWORD *)(a9 + v36[18]) = a21;
  *(_QWORD *)(a9 + v36[19]) = a22;
  *(double *)(a9 + v36[20]) = a10;
  *(_BYTE *)(a9 + v36[21]) = a23;
  *(_BYTE *)(a9 + v36[22]) = a24;
  *(_BYTE *)(a9 + v36[23]) = a25;
  *(_BYTE *)(a9 + v36[24]) = a26;
  v42 = (_QWORD *)(a9 + v36[25]);
  *v42 = a27;
  v42[1] = a28;
  *(_BYTE *)(a9 + v36[26]) = a29;
  *(double *)(a9 + v36[27]) = a11;
  *(double *)(a9 + v36[28]) = a12;
  return result;
}

uint64_t type metadata accessor for CurrentObservationViewAttributes(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C6E08;
  if (!qword_1001C6E08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CurrentObservationViewAttributes);
  return result;
}

uint64_t sub_1001599D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100159A14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001BF0C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_100159A5C(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, char *, uint64_t);
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  uint64_t v127;
  char *v128;
  _QWORD *v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  void (*v137)(char *, char *, uint64_t);
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  int *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  void (*v181)(char *, char *);
  uint64_t v182;
  void (*v183)(char *, char *);
  uint64_t v184;
  void (*v185)(char *, char *, uint64_t);
  uint64_t v186;
  uint64_t v187;
  void (*v188)(char *, char *, uint64_t);
  uint64_t v189;
  char *v190;
  _QWORD *v191;
  void (*v192)(char *, char *, uint64_t);
  char *v193;
  uint64_t v194;
  uint64_t v196;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v27);
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v192 = v13;
    v13(&a1[v8[6]], &a2[v8[6]], v12);
    v14 = v8[7];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = sub_100005D40(&qword_1001BF090);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v18(&a1[v8[8]], &a2[v8[8]], v17);
    v19 = v8[9];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = v8[10];
    v24 = &a1[v23];
    v25 = &a2[v23];
    swift_bridgeObjectRetain(v22);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v17))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v18(v24, v25, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v17);
    }
    v28 = v8[11];
    v29 = &a1[v28];
    v30 = &a2[v28];
    v186 = v17;
    v187 = v12;
    v185 = v18;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v28], 1, v17))
    {
      v31 = sub_100005D40(&qword_1001BF098);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v18(v29, v30, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v17);
    }
    v32 = v8[12];
    v33 = &a1[v32];
    v34 = &a2[v32];
    v188 = v7;
    v189 = v6;
    v7(&a1[v32], &a2[v32], v6);
    v35 = (int *)type metadata accessor for ConditionViewModel(0);
    v36 = v35[5];
    v37 = &v33[v36];
    v38 = &v34[v36];
    v39 = type metadata accessor for WeatherCondition(0);
    v181 = *(void (**)(char *, char *))(*(_QWORD *)(v39 - 8) + 16);
    v182 = v39;
    v181(v37, v38);
    v40 = v35[6];
    v41 = &v33[v40];
    v42 = &v34[v40];
    v43 = *((_QWORD *)v42 + 1);
    *(_QWORD *)v41 = *(_QWORD *)v42;
    *((_QWORD *)v41 + 1) = v43;
    v44 = v35[7];
    v45 = &v33[v44];
    v46 = &v34[v44];
    v47 = *((_QWORD *)v46 + 1);
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *((_QWORD *)v45 + 1) = v47;
    v33[v35[8]] = v34[v35[8]];
    v33[v35[9]] = v34[v35[9]];
    v33[v35[10]] = v34[v35[10]];
    *(_QWORD *)&a1[v8[13]] = *(_QWORD *)&a2[v8[13]];
    v48 = v8[14];
    v49 = &a1[v48];
    v50 = &a2[v48];
    v51 = type metadata accessor for CloudAltitudeKind(0);
    v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v47);
    v52(v49, v50, v51);
    v53 = v8[15];
    v54 = &a1[v53];
    v55 = &a2[v53];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v53], 1, v187))
    {
      v56 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      v192(v54, v55, v187);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v54, 0, 1, v187);
    }
    v57 = v8[16];
    v58 = &a1[v57];
    v59 = &a2[v57];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v57], 1, v187))
    {
      v60 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v192(v58, v59, v187);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v187);
    }
    v61 = v8[17];
    v62 = &a1[v61];
    v63 = &a2[v61];
    v64 = type metadata accessor for UVIndex(0);
    v183 = *(void (**)(char *, char *))(*(_QWORD *)(v64 - 8) + 16);
    v184 = v64;
    v183(v62, v63);
    v65 = v8[18];
    v66 = &a1[v65];
    v67 = &a2[v65];
    v68 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
    *(_QWORD *)&a1[v8[19]] = *(_QWORD *)&a2[v8[19]];
    v69 = v8[20];
    v70 = &a1[v69];
    v71 = &a2[v69];
    v72 = *((_QWORD *)v71 + 1);
    if (v72)
    {
      *(_QWORD *)v70 = *(_QWORD *)v71;
      *((_QWORD *)v70 + 1) = v72;
      v73 = *((_QWORD *)v71 + 2);
      v74 = *((_QWORD *)v71 + 3);
      v75 = v71[32];
      swift_bridgeObjectRetain(v72);
      sub_100006E58(v73, v74, v75);
      *((_QWORD *)v70 + 2) = v73;
      *((_QWORD *)v70 + 3) = v74;
      v70[32] = v75;
    }
    else
    {
      v76 = *((_OWORD *)v71 + 1);
      *(_OWORD *)v70 = *(_OWORD *)v71;
      *((_OWORD *)v70 + 1) = v76;
      v70[32] = v71[32];
    }
    v77 = a3[5];
    v78 = &a1[v77];
    v191 = a2;
    v79 = &a2[v77];
    v188(&a1[v77], &a2[v77], v189);
    v80 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v192(&v78[v80[5]], &v79[v80[5]], v187);
    v185(&v78[v80[6]], &v79[v80[6]], v186);
    v185(&v78[v80[7]], &v79[v80[7]], v186);
    v81 = v80[8];
    v82 = &v78[v81];
    v83 = &v79[v81];
    v188(&v78[v81], &v79[v81], v189);
    ((void (*)(char *, char *, uint64_t))v181)(&v82[v35[5]], &v83[v35[5]], v182);
    v84 = v35[6];
    v85 = &v82[v84];
    v86 = &v83[v84];
    v87 = *((_QWORD *)v86 + 1);
    *(_QWORD *)v85 = *(_QWORD *)v86;
    *((_QWORD *)v85 + 1) = v87;
    v88 = v35[7];
    v89 = &v82[v88];
    v90 = &v83[v88];
    v91 = *((_QWORD *)v90 + 1);
    *(_QWORD *)v89 = *(_QWORD *)v90;
    *((_QWORD *)v89 + 1) = v91;
    v82[v35[8]] = v83[v35[8]];
    v82[v35[9]] = v83[v35[9]];
    v82[v35[10]] = v83[v35[10]];
    v92 = v80[9];
    v93 = &v78[v92];
    v94 = &v79[v92];
    v95 = type metadata accessor for Precipitation(0);
    v96 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v91);
    v96(v93, v94, v95);
    *(_QWORD *)&v78[v80[10]] = *(_QWORD *)&v79[v80[10]];
    v97 = v80[11];
    v98 = &v78[v97];
    v99 = &v79[v97];
    v100 = *((_QWORD *)v99 + 1);
    *(_QWORD *)v98 = *(_QWORD *)v99;
    *((_QWORD *)v98 + 1) = v100;
    v101 = v80[12];
    v102 = &v78[v101];
    v103 = &v79[v101];
    v104 = *((_QWORD *)v103 + 1);
    *(_QWORD *)v102 = *(_QWORD *)v103;
    *((_QWORD *)v102 + 1) = v104;
    v105 = v80[13];
    v106 = &v78[v105];
    v107 = &v79[v105];
    v108 = *((_QWORD *)v107 + 1);
    *(_QWORD *)v106 = *(_QWORD *)v107;
    *((_QWORD *)v106 + 1) = v108;
    v109 = v80[14];
    v110 = &v78[v109];
    v111 = &v79[v109];
    v112 = *((_QWORD *)v111 + 1);
    *(_QWORD *)v110 = *(_QWORD *)v111;
    *((_QWORD *)v110 + 1) = v112;
    v113 = v80[15];
    v193 = &v78[v113];
    v190 = &v79[v113];
    v114 = type metadata accessor for TemperatureScaleConfiguration(0);
    v115 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 16);
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v104);
    swift_bridgeObjectRetain(v108);
    swift_bridgeObjectRetain(v112);
    v115(v193, v190, v114);
    v116 = v80[16];
    v117 = &v78[v116];
    v118 = &v79[v116];
    v119 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v118, 1, v119))
    {
      v120 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 16))(v117, v118, v119);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v117, 0, 1, v119);
    }
    v121 = v80[17];
    v122 = &v78[v121];
    v123 = &v79[v121];
    v124 = type metadata accessor for MoonEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v123, 1, v124))
    {
      v125 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(v122, v123, v124);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v122, 0, 1, v124);
    }
    ((void (*)(char *, char *, uint64_t))v183)(&v78[v80[18]], &v79[v80[18]], v184);
    *(_QWORD *)&v78[v80[19]] = *(_QWORD *)&v79[v80[19]];
    v126 = a3;
    v127 = a3[6];
    v128 = &a1[v127];
    v129 = (_QWORD *)((char *)v191 + v127);
    v130 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v129, 1, (uint64_t)v130))
    {
      v131 = sub_100005D40(&qword_1001BF0C0);
      memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
    }
    else
    {
      v132 = v129[1];
      *(_QWORD *)v128 = *v129;
      *((_QWORD *)v128 + 1) = v132;
      v133 = v130[5];
      v134 = &v128[v133];
      v135 = (char *)v129 + v133;
      v136 = type metadata accessor for AttributedString(0);
      v137 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 16);
      swift_bridgeObjectRetain(v132);
      v137(v134, v135, v136);
      v138 = v130[6];
      v139 = &v128[v138];
      v140 = (char *)v129 + v138;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v129 + v138, 1, v136))
      {
        v141 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
      }
      else
      {
        v137(v139, v140, v136);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v139, 0, 1, v136);
      }
      v142 = v130[7];
      v143 = &v128[v142];
      v144 = (_QWORD *)((char *)v129 + v142);
      v145 = v144[1];
      *(_QWORD *)v143 = *v144;
      *((_QWORD *)v143 + 1) = v145;
      swift_bridgeObjectRetain(v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v128, 0, 1, (uint64_t)v130);
      v126 = a3;
    }
    v146 = v126[7];
    v147 = v126;
    v148 = &a1[v146];
    v149 = (char *)v191 + v146;
    v150 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
    v151 = v147[8];
    v152 = v147[9];
    v153 = &a1[v151];
    v154 = (_QWORD *)((char *)v191 + v151);
    v155 = v154[1];
    *(_QWORD *)v153 = *v154;
    *((_QWORD *)v153 + 1) = v155;
    a1[v152] = *((_BYTE *)v191 + v152);
    v156 = v147[11];
    a1[v147[10]] = *((_BYTE *)v191 + v147[10]);
    v196 = *(_QWORD *)((char *)v191 + v156);
    *(_QWORD *)&a1[v156] = v196;
    v157 = v147[12];
    v158 = v147[13];
    v159 = &a1[v157];
    v160 = (_QWORD *)((char *)v191 + v157);
    v161 = v160[1];
    *(_QWORD *)v159 = *v160;
    *((_QWORD *)v159 + 1) = v161;
    v162 = *(_QWORD *)((char *)v191 + v158);
    *(_QWORD *)&a1[v158] = v162;
    v163 = v147[14];
    v164 = v147[15];
    v165 = *(_QWORD *)((char *)v191 + v163);
    *(_QWORD *)&a1[v163] = v165;
    v194 = *(_QWORD *)((char *)v191 + v164);
    *(_QWORD *)&a1[v164] = v194;
    v166 = v147[16];
    v167 = v147[17];
    v168 = *(_QWORD *)((char *)v191 + v166);
    *(_QWORD *)&a1[v166] = v168;
    a1[v167] = *((_BYTE *)v191 + v167);
    v169 = v147[18];
    v170 = v147[19];
    v171 = *(_QWORD *)((char *)v191 + v169);
    *(_QWORD *)&a1[v169] = v171;
    v172 = *(_QWORD *)((char *)v191 + v170);
    *(_QWORD *)&a1[v170] = v172;
    v173 = v147[21];
    *(_QWORD *)&a1[v147[20]] = *(_QWORD *)((char *)v191 + v147[20]);
    a1[v173] = *((_BYTE *)v191 + v173);
    v174 = v147[23];
    a1[v147[22]] = *((_BYTE *)v191 + v147[22]);
    a1[v174] = *((_BYTE *)v191 + v174);
    v175 = v147[25];
    a1[v147[24]] = *((_BYTE *)v191 + v147[24]);
    v176 = &a1[v175];
    v177 = (_QWORD *)((char *)v191 + v175);
    v178 = v177[1];
    *(_QWORD *)v176 = *v177;
    *((_QWORD *)v176 + 1) = v178;
    v179 = v147[27];
    a1[v147[26]] = *((_BYTE *)v191 + v147[26]);
    *(_QWORD *)&a1[v179] = *(_QWORD *)((char *)v191 + v179);
    *(_QWORD *)&a1[v147[28]] = *(_QWORD *)((char *)v191 + v147[28]);
    swift_bridgeObjectRetain(v155);
    swift_retain(v196);
    swift_bridgeObjectRetain(v161);
    swift_retain(v162);
    swift_retain(v165);
    swift_retain(v194);
    swift_retain(v168);
    swift_retain(v171);
    swift_retain(v172);
    swift_bridgeObjectRetain(v178);
  }
  return a1;
}

double sub_10015A4B8(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double result;
  void (*v49)(uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = a1 + v6[5];
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v54 = v9;
  v9(a1 + v6[6], v8);
  v10 = a1 + v6[7];
  v11 = sub_100005D40(&qword_1001BF090);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(a1 + v6[8], v11);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[9] + 8));
  v13 = a1 + v6[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v13, 1, v11))
    v12(v13, v11);
  v14 = a1 + v6[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v14, 1, v11))
    v12(v14, v11);
  v15 = a1 + v6[12];
  v53 = v4;
  v5(v15, v4);
  v16 = (int *)type metadata accessor for ConditionViewModel(0);
  v17 = v15 + v16[5];
  v18 = type metadata accessor for WeatherCondition(0);
  v49 = *(void (**)(uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v50 = v18;
  v49(v17);
  swift_bridgeObjectRelease(*(_QWORD *)(v15 + v16[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v15 + v16[7] + 8));
  v19 = a1 + v6[14];
  v20 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = a1 + v6[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v21, 1, v8))
    v54(v21, v8);
  v22 = a1 + v6[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v22, 1, v8))
    v54(v22, v8);
  v23 = a1 + v6[17];
  v24 = type metadata accessor for UVIndex(0);
  v51 = *(void (**)(uint64_t))(*(_QWORD *)(v24 - 8) + 8);
  v52 = v24;
  v51(v23);
  v25 = a1 + v6[18];
  v26 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v27 = a1 + v6[20];
  v28 = *(_QWORD *)(v27 + 8);
  if (v28)
  {
    swift_bridgeObjectRelease(v28);
    sub_100007458(*(_QWORD *)(v27 + 16), *(_QWORD *)(v27 + 24), *(_BYTE *)(v27 + 32));
  }
  v29 = a1 + a2[5];
  v5(v29, v53);
  v30 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v54(v29 + v30[5], v8);
  v12(v29 + v30[6], v11);
  v12(v29 + v30[7], v11);
  v31 = v29 + v30[8];
  v5(v31, v53);
  ((void (*)(uint64_t, uint64_t))v49)(v31 + v16[5], v50);
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v16[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v16[7] + 8));
  v32 = v29 + v30[9];
  v33 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[14] + 8));
  v34 = v29 + v30[15];
  v35 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
  v36 = v29 + v30[16];
  v37 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v36, 1, v37))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
  v38 = v29 + v30[17];
  v39 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, v39))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  ((void (*)(uint64_t, uint64_t))v51)(v29 + v30[18], v52);
  v40 = a1 + a2[6];
  v41 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v40, 1, (uint64_t)v41))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + 8));
    v42 = v40 + v41[5];
    v43 = type metadata accessor for AttributedString(0);
    v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8);
    v44(v42, v43);
    v45 = v40 + v41[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v45, 1, v43))
      v44(v45, v43);
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + v41[7] + 8));
  }
  v46 = a1 + a2[7];
  v47 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_release(*(_QWORD *)(a1 + a2[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  swift_release(*(_QWORD *)(a1 + a2[13]));
  swift_release(*(_QWORD *)(a1 + a2[14]));
  swift_release(*(_QWORD *)(a1 + a2[15]));
  swift_release(*(_QWORD *)(a1 + a2[16]));
  swift_release(*(_QWORD *)(a1 + a2[18]));
  swift_release(*(_QWORD *)(a1 + a2[19]));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[25] + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10015AA38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  void *v115;
  const void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t);
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  void (*v177)(uint64_t, uint64_t);
  uint64_t v178;
  void (*v179)(uint64_t, uint64_t);
  uint64_t v180;
  void (*v181)(uint64_t, uint64_t, uint64_t);
  uint64_t v182;
  uint64_t v183;
  void (*v184)(uint64_t, uint64_t, uint64_t);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(void *, const void *, uint64_t);
  uint64_t v190;
  uint64_t v191;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v189 = v12;
  v12((void *)(a1 + v7[6]), (const void *)(a2 + v7[6]), v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  v18 = v7[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v7[10];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  swift_bridgeObjectRetain(v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[11];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  v182 = v16;
  v183 = v11;
  v181 = v17;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v26, 1, v16))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v27, (uint64_t)v28, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v16);
  }
  v30 = v7[12];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v184 = v6;
  v185 = v5;
  v6(a1 + v30, a2 + v30, v5);
  v33 = (int *)type metadata accessor for ConditionViewModel(0);
  v34 = v33[5];
  v35 = v31 + v34;
  v36 = v32 + v34;
  v37 = type metadata accessor for WeatherCondition(0);
  v177 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
  v178 = v37;
  v177(v35, v36);
  v38 = v33[6];
  v39 = (_QWORD *)(v31 + v38);
  v40 = (_QWORD *)(v32 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = v33[7];
  v43 = (_QWORD *)(v31 + v42);
  v44 = (_QWORD *)(v32 + v42);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  *(_BYTE *)(v31 + v33[8]) = *(_BYTE *)(v32 + v33[8]);
  *(_BYTE *)(v31 + v33[9]) = *(_BYTE *)(v32 + v33[9]);
  *(_BYTE *)(v31 + v33[10]) = *(_BYTE *)(v32 + v33[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v46 = v7[14];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for CloudAltitudeKind(0);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  v50(v47, v48, v49);
  v51 = v7[15];
  v52 = (void *)(a1 + v51);
  v53 = (const void *)(a2 + v51);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v51, 1, v183))
  {
    v54 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    v189(v52, v53, v183);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v52, 0, 1, v183);
  }
  v55 = v7[16];
  v56 = (void *)(a1 + v55);
  v57 = (const void *)(a2 + v55);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v55, 1, v183))
  {
    v58 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v189(v56, v57, v183);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v183);
  }
  v59 = v7[17];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = type metadata accessor for UVIndex(0);
  v179 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
  v180 = v62;
  v179(v60, v61);
  v63 = v7[18];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  v67 = v7[20];
  v68 = a1 + v67;
  v69 = a2 + v67;
  v70 = *(_QWORD *)(v69 + 8);
  if (v70)
  {
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *(_QWORD *)(v68 + 8) = v70;
    v71 = *(_QWORD *)(v69 + 16);
    v72 = *(_QWORD *)(v69 + 24);
    v73 = *(_BYTE *)(v69 + 32);
    swift_bridgeObjectRetain(v70);
    sub_100006E58(v71, v72, v73);
    *(_QWORD *)(v68 + 16) = v71;
    *(_QWORD *)(v68 + 24) = v72;
    *(_BYTE *)(v68 + 32) = v73;
  }
  else
  {
    v74 = *(_OWORD *)(v69 + 16);
    *(_OWORD *)v68 = *(_OWORD *)v69;
    *(_OWORD *)(v68 + 16) = v74;
    *(_BYTE *)(v68 + 32) = *(_BYTE *)(v69 + 32);
  }
  v75 = a3[5];
  v188 = a1;
  v76 = a1 + v75;
  v77 = a2 + v75;
  v184(a1 + v75, a2 + v75, v185);
  v78 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v189((void *)(v76 + v78[5]), (const void *)(v77 + v78[5]), v183);
  v181(v76 + v78[6], v77 + v78[6], v182);
  v181(v76 + v78[7], v77 + v78[7], v182);
  v79 = v78[8];
  v80 = v76 + v79;
  v81 = v77 + v79;
  v184(v76 + v79, v77 + v79, v185);
  ((void (*)(uint64_t, uint64_t, uint64_t))v177)(v80 + v33[5], v81 + v33[5], v178);
  v82 = v33[6];
  v83 = (_QWORD *)(v80 + v82);
  v84 = (_QWORD *)(v81 + v82);
  v85 = v84[1];
  *v83 = *v84;
  v83[1] = v85;
  v86 = v33[7];
  v87 = (_QWORD *)(v80 + v86);
  v88 = (_QWORD *)(v81 + v86);
  v89 = v88[1];
  *v87 = *v88;
  v87[1] = v89;
  *(_BYTE *)(v80 + v33[8]) = *(_BYTE *)(v81 + v33[8]);
  *(_BYTE *)(v80 + v33[9]) = *(_BYTE *)(v81 + v33[9]);
  *(_BYTE *)(v80 + v33[10]) = *(_BYTE *)(v81 + v33[10]);
  v90 = v78[9];
  v91 = v76 + v90;
  v92 = v77 + v90;
  v93 = type metadata accessor for Precipitation(0);
  v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 16);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v89);
  v94(v91, v92, v93);
  *(_QWORD *)(v76 + v78[10]) = *(_QWORD *)(v77 + v78[10]);
  v95 = v78[11];
  v96 = (_QWORD *)(v76 + v95);
  v97 = (_QWORD *)(v77 + v95);
  v98 = v97[1];
  *v96 = *v97;
  v96[1] = v98;
  v99 = v78[12];
  v100 = (_QWORD *)(v76 + v99);
  v101 = (_QWORD *)(v77 + v99);
  v102 = v101[1];
  *v100 = *v101;
  v100[1] = v102;
  v103 = v78[13];
  v104 = (_QWORD *)(v76 + v103);
  v105 = (_QWORD *)(v77 + v103);
  v106 = v105[1];
  *v104 = *v105;
  v104[1] = v106;
  v107 = v78[14];
  v108 = (_QWORD *)(v76 + v107);
  v109 = (_QWORD *)(v77 + v107);
  v110 = v109[1];
  *v108 = *v109;
  v108[1] = v110;
  v111 = v78[15];
  v190 = v76 + v111;
  v186 = v77 + v111;
  v112 = type metadata accessor for TemperatureScaleConfiguration(0);
  v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 16);
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRetain(v106);
  swift_bridgeObjectRetain(v110);
  v113(v190, v186, v112);
  v114 = v78[16];
  v115 = (void *)(v76 + v114);
  v116 = (const void *)(v77 + v114);
  v117 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v116, 1, v117))
  {
    v118 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v117 - 8) + 16))(v115, v116, v117);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v117);
  }
  v119 = v78[17];
  v120 = (void *)(v76 + v119);
  v121 = (const void *)(v77 + v119);
  v122 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v121, 1, v122))
  {
    v123 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v120, 0, 1, v122);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v179)(v76 + v78[18], v77 + v78[18], v180);
  *(_QWORD *)(v76 + v78[19]) = *(_QWORD *)(v77 + v78[19]);
  v124 = a3[6];
  v125 = (_QWORD *)(v188 + v124);
  v126 = (_QWORD *)(a2 + v124);
  v127 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v126, 1, (uint64_t)v127))
  {
    v128 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
  }
  else
  {
    v129 = v126[1];
    *v125 = *v126;
    v125[1] = v129;
    v130 = v127[5];
    v131 = (char *)v125 + v130;
    v132 = (char *)v126 + v130;
    v133 = type metadata accessor for AttributedString(0);
    v134 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 16);
    swift_bridgeObjectRetain(v129);
    v134(v131, v132, v133);
    v135 = v127[6];
    v136 = (char *)v125 + v135;
    v137 = (char *)v126 + v135;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v126 + v135, 1, v133))
    {
      v138 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
    }
    else
    {
      v134(v136, v137, v133);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v136, 0, 1, v133);
    }
    v139 = v127[7];
    v140 = (_QWORD *)((char *)v125 + v139);
    v141 = (_QWORD *)((char *)v126 + v139);
    v142 = v141[1];
    *v140 = *v141;
    v140[1] = v142;
    swift_bridgeObjectRetain(v142);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v125, 0, 1, (uint64_t)v127);
  }
  v143 = a3[7];
  v144 = v188 + v143;
  v145 = a2 + v143;
  v146 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 16))(v144, v145, v146);
  v147 = a3[8];
  v148 = a3[9];
  v149 = (_QWORD *)(v188 + v147);
  v150 = (_QWORD *)(a2 + v147);
  v151 = v150[1];
  *v149 = *v150;
  v149[1] = v151;
  *(_BYTE *)(v188 + v148) = *(_BYTE *)(a2 + v148);
  v152 = a3[11];
  *(_BYTE *)(v188 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v191 = *(_QWORD *)(a2 + v152);
  *(_QWORD *)(v188 + v152) = v191;
  v153 = a3[12];
  v154 = a3[13];
  v155 = (_QWORD *)(v188 + v153);
  v156 = (_QWORD *)(a2 + v153);
  v157 = v156[1];
  *v155 = *v156;
  v155[1] = v157;
  v158 = *(_QWORD *)(a2 + v154);
  *(_QWORD *)(v188 + v154) = v158;
  v159 = a3[14];
  v160 = a3[15];
  v161 = *(_QWORD *)(a2 + v159);
  *(_QWORD *)(v188 + v159) = v161;
  v187 = *(_QWORD *)(a2 + v160);
  *(_QWORD *)(v188 + v160) = v187;
  v162 = a3[16];
  v163 = a3[17];
  v164 = *(_QWORD *)(a2 + v162);
  *(_QWORD *)(v188 + v162) = v164;
  *(_BYTE *)(v188 + v163) = *(_BYTE *)(a2 + v163);
  v165 = a3[18];
  v166 = a3[19];
  v167 = *(_QWORD *)(a2 + v165);
  *(_QWORD *)(v188 + v165) = v167;
  v168 = *(_QWORD *)(a2 + v166);
  *(_QWORD *)(v188 + v166) = v168;
  v169 = a3[21];
  *(_QWORD *)(v188 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  *(_BYTE *)(v188 + v169) = *(_BYTE *)(a2 + v169);
  v170 = a3[23];
  *(_BYTE *)(v188 + a3[22]) = *(_BYTE *)(a2 + a3[22]);
  *(_BYTE *)(v188 + v170) = *(_BYTE *)(a2 + v170);
  v171 = a3[25];
  *(_BYTE *)(v188 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  v172 = (_QWORD *)(v188 + v171);
  v173 = (_QWORD *)(a2 + v171);
  v174 = v173[1];
  *v172 = *v173;
  v172[1] = v174;
  v175 = a3[27];
  *(_BYTE *)(v188 + a3[26]) = *(_BYTE *)(a2 + a3[26]);
  *(_QWORD *)(v188 + v175) = *(_QWORD *)(a2 + v175);
  *(_QWORD *)(v188 + a3[28]) = *(_QWORD *)(a2 + a3[28]);
  swift_bridgeObjectRetain(v151);
  swift_retain(v191);
  swift_bridgeObjectRetain(v157);
  swift_retain(v158);
  swift_retain(v161);
  swift_retain(v187);
  swift_retain(v164);
  swift_retain(v167);
  swift_retain(v168);
  swift_bridgeObjectRetain(v174);
  return v188;
}

uint64_t sub_10015B464(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const void *v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  int *v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  void (*v167)(char *, char *, uint64_t);
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  int v182;
  int v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v235;
  void (*v236)(uint64_t, uint64_t, uint64_t);
  uint64_t v237;
  uint64_t v238;
  void (*v239)(uint64_t, uint64_t);
  uint64_t v240;
  void (*v241)(void *, const void *, uint64_t);
  void (*v242)(void *, const void *, uint64_t);
  int *v243;
  uint64_t v244;
  void (*v245)(char *, char *, uint64_t);
  void (*v246)(uint64_t, uint64_t, uint64_t);
  char *v247;
  uint64_t v248;

  v6 = type metadata accessor for UUID(0);
  v246 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v246(a1, a2, v6);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  v235 = *(_QWORD *)(v11 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v235 + 24);
  v12(v9, v10, v11);
  v244 = v11;
  v242 = (void (*)(void *, const void *, uint64_t))v12;
  v12(a1 + v7[6], a2 + v7[6], v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 24);
  v18(v14, v15, v16);
  v241 = (void (*)(void *, const void *, uint64_t))v18;
  v18(a1 + v7[8], a2 + v7[8], v16);
  v19 = v7[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = v7[10];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  LODWORD(v18) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v24, 1, v16);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v16);
  if ((_DWORD)v18)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v25, v26, v16);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v25, v16);
LABEL_6:
    v28 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  v241(v25, v26, v16);
LABEL_7:
  v29 = v7[11];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v29, 1, v16);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v16);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v30, v31, v16);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v16);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v30, v16);
LABEL_12:
    v34 = sub_100005D40(&qword_1001BF098);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  v241(v30, v31, v16);
LABEL_13:
  v35 = v7[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v237 = v6;
  v246(a1 + v35, a2 + v35, v6);
  v38 = (int *)type metadata accessor for ConditionViewModel(0);
  v39 = v38[5];
  v40 = v36 + v39;
  v41 = v37 + v39;
  v42 = type metadata accessor for WeatherCondition(0);
  v239 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24);
  v240 = v42;
  v239(v40, v41);
  v43 = v38[6];
  v44 = (_QWORD *)(v36 + v43);
  v45 = (_QWORD *)(v37 + v43);
  *v44 = *v45;
  v46 = v45[1];
  v47 = v44[1];
  v44[1] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = v38[7];
  v49 = (_QWORD *)(v36 + v48);
  v50 = (_QWORD *)(v37 + v48);
  *v49 = *v50;
  v51 = v50[1];
  v52 = v49[1];
  v49[1] = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  *(_BYTE *)(v36 + v38[8]) = *(_BYTE *)(v37 + v38[8]);
  *(_BYTE *)(v36 + v38[9]) = *(_BYTE *)(v37 + v38[9]);
  *(_BYTE *)(v36 + v38[10]) = *(_BYTE *)(v37 + v38[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v53 = v7[14];
  v54 = a1 + v53;
  v55 = a2 + v53;
  v56 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 24))(v54, v55, v56);
  v57 = v7[15];
  v58 = (void *)(a1 + v57);
  v59 = (const void *)(a2 + v57);
  LODWORD(v55) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v57, 1, v244);
  v60 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v59, 1, v244);
  v243 = a3;
  if ((_DWORD)v55)
  {
    if (!v60)
    {
      (*(void (**)(void *, const void *, uint64_t))(v235 + 16))(v58, v59, v244);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v244);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v60)
  {
    (*(void (**)(void *, uint64_t))(v235 + 8))(v58, v244);
LABEL_18:
    v61 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_19;
  }
  v242(v58, v59, v244);
LABEL_19:
  v62 = v237;
  v63 = v7[16];
  v64 = (void *)(a1 + v63);
  v65 = (const void *)(a2 + v63);
  v66 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v63, 1, v244);
  v67 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v65, 1, v244);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(void *, const void *, uint64_t))(v235 + 16))(v64, v65, v244);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v244);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v67)
  {
    (*(void (**)(void *, uint64_t))(v235 + 8))(v64, v244);
LABEL_24:
    v68 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_25;
  }
  v242(v64, v65, v244);
LABEL_25:
  v69 = v7[17];
  v70 = a1 + v69;
  v71 = a2 + v69;
  v72 = type metadata accessor for UVIndex(0);
  v236 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 24);
  v236(v70, v71, v72);
  v73 = v7[18];
  v74 = a1 + v73;
  v75 = a2 + v73;
  v76 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 24))(v74, v75, v76);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  v77 = v7[20];
  v78 = a1 + v77;
  v79 = (__int128 *)(a2 + v77);
  v80 = *(_QWORD *)(a1 + v77 + 8);
  v81 = *(_QWORD *)(a2 + v77 + 8);
  v238 = v72;
  if (v80)
  {
    if (v81)
    {
      *(_QWORD *)v78 = *(_QWORD *)v79;
      v82 = *((_QWORD *)v79 + 1);
      *(_QWORD *)(v78 + 8) = v82;
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRelease(v80);
      v83 = *((_QWORD *)v79 + 2);
      v84 = *((_QWORD *)v79 + 3);
      v85 = *((_BYTE *)v79 + 32);
      sub_100006E58(v83, v84, v85);
      v86 = *(_QWORD *)(v78 + 16);
      v87 = *(_QWORD *)(v78 + 24);
      v88 = *(_BYTE *)(v78 + 32);
      *(_QWORD *)(v78 + 16) = v83;
      *(_QWORD *)(v78 + 24) = v84;
      *(_BYTE *)(v78 + 32) = v85;
      sub_100007458(v86, v87, v88);
    }
    else
    {
      sub_100008EC4(v78);
      v93 = *((_BYTE *)v79 + 32);
      v94 = v79[1];
      *(_OWORD *)v78 = *v79;
      *(_OWORD *)(v78 + 16) = v94;
      *(_BYTE *)(v78 + 32) = v93;
    }
  }
  else if (v81)
  {
    *(_QWORD *)v78 = *(_QWORD *)v79;
    v89 = *((_QWORD *)v79 + 1);
    *(_QWORD *)(v78 + 8) = v89;
    v90 = *((_QWORD *)v79 + 2);
    v91 = *((_QWORD *)v79 + 3);
    v92 = *((_BYTE *)v79 + 32);
    swift_bridgeObjectRetain(v89);
    sub_100006E58(v90, v91, v92);
    *(_QWORD *)(v78 + 16) = v90;
    *(_QWORD *)(v78 + 24) = v91;
    *(_BYTE *)(v78 + 32) = v92;
  }
  else
  {
    v95 = *v79;
    v96 = v79[1];
    *(_BYTE *)(v78 + 32) = *((_BYTE *)v79 + 32);
    *(_OWORD *)v78 = v95;
    *(_OWORD *)(v78 + 16) = v96;
  }
  v97 = v243[5];
  v98 = a1 + v97;
  v99 = a2 + v97;
  v246(a1 + v97, a2 + v97, v62);
  v100 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v242((void *)(v98 + v100[5]), (const void *)(v99 + v100[5]), v244);
  v241((void *)(v98 + v100[6]), (const void *)(v99 + v100[6]), v16);
  v241((void *)(v98 + v100[7]), (const void *)(v99 + v100[7]), v16);
  v101 = v100[8];
  v102 = v98 + v101;
  v103 = v99 + v101;
  v246(v98 + v101, v99 + v101, v62);
  ((void (*)(uint64_t, uint64_t, uint64_t))v239)(v102 + v38[5], v103 + v38[5], v240);
  v104 = v38[6];
  v105 = (_QWORD *)(v102 + v104);
  v106 = (_QWORD *)(v103 + v104);
  *v105 = *v106;
  v107 = v106[1];
  v108 = v105[1];
  v105[1] = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108);
  v109 = v38[7];
  v110 = (_QWORD *)(v102 + v109);
  v111 = (_QWORD *)(v103 + v109);
  *v110 = *v111;
  v112 = v111[1];
  v113 = v110[1];
  v110[1] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease(v113);
  *(_BYTE *)(v102 + v38[8]) = *(_BYTE *)(v103 + v38[8]);
  *(_BYTE *)(v102 + v38[9]) = *(_BYTE *)(v103 + v38[9]);
  *(_BYTE *)(v102 + v38[10]) = *(_BYTE *)(v103 + v38[10]);
  v114 = v100[9];
  v115 = v98 + v114;
  v116 = v99 + v114;
  v117 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 24))(v115, v116, v117);
  *(_QWORD *)(v98 + v100[10]) = *(_QWORD *)(v99 + v100[10]);
  v118 = v100[11];
  v119 = (_QWORD *)(v98 + v118);
  v120 = (_QWORD *)(v99 + v118);
  *v119 = *v120;
  v121 = v120[1];
  v122 = v119[1];
  v119[1] = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  v123 = v100[12];
  v124 = (_QWORD *)(v98 + v123);
  v125 = (_QWORD *)(v99 + v123);
  *v124 = *v125;
  v126 = v125[1];
  v127 = v124[1];
  v124[1] = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  v128 = v100[13];
  v129 = (_QWORD *)(v98 + v128);
  v130 = (_QWORD *)(v99 + v128);
  *v129 = *v130;
  v131 = v130[1];
  v132 = v129[1];
  v129[1] = v131;
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRelease(v132);
  v133 = v100[14];
  v134 = (_QWORD *)(v98 + v133);
  v135 = (_QWORD *)(v99 + v133);
  *v134 = *v135;
  v136 = v135[1];
  v137 = v134[1];
  v134[1] = v136;
  swift_bridgeObjectRetain(v136);
  swift_bridgeObjectRelease(v137);
  v138 = v100[15];
  v139 = v98 + v138;
  v140 = v99 + v138;
  v141 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v100[16];
  v143 = (void *)(v98 + v142);
  v144 = (const void *)(v99 + v142);
  v145 = type metadata accessor for SunEvents(0);
  LODWORD(v113) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v145);
  v146 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145);
  if ((_DWORD)v113)
  {
    if (!v146)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v147 = *(_QWORD *)(v145 - 8);
  if (v146)
  {
    (*(void (**)(void *, uint64_t))(v147 + 8))(v143, v145);
LABEL_41:
    v148 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v147 + 24))(v143, v144, v145);
LABEL_42:
  v149 = v100[17];
  v150 = (void *)(v98 + v149);
  v151 = (const void *)(v99 + v149);
  v152 = type metadata accessor for MoonEvents(0);
  v153 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, v152);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v152);
  if (v153)
  {
    if (!v154)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v152 - 8) + 16))(v150, v151, v152);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v150, 0, 1, v152);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v155 = *(_QWORD *)(v152 - 8);
  if (v154)
  {
    (*(void (**)(void *, uint64_t))(v155 + 8))(v150, v152);
LABEL_47:
    v156 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v155 + 24))(v150, v151, v152);
LABEL_48:
  v236(v98 + v100[18], v99 + v100[18], v238);
  *(_QWORD *)(v98 + v100[19]) = *(_QWORD *)(v99 + v100[19]);
  v157 = v243[6];
  v158 = (_QWORD *)(a1 + v157);
  v159 = (_QWORD *)(a2 + v157);
  v160 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v161 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, (uint64_t)v160);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, (uint64_t)v160);
  if (!v161)
  {
    if (v162)
    {
      sub_1000E1258((uint64_t)v158);
      goto LABEL_54;
    }
    *v158 = *v159;
    v173 = v159[1];
    v174 = v158[1];
    v158[1] = v173;
    swift_bridgeObjectRetain(v173);
    swift_bridgeObjectRelease(v174);
    v175 = v160[5];
    v176 = (char *)v158 + v175;
    v177 = (char *)v159 + v175;
    v178 = type metadata accessor for AttributedString(0);
    v248 = *(_QWORD *)(v178 - 8);
    v245 = *(void (**)(char *, char *, uint64_t))(v248 + 24);
    v245(v176, v177, v178);
    v179 = v160[6];
    v180 = (char *)v158 + v179;
    v181 = (char *)v159 + v179;
    v182 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158 + v179, 1, v178);
    v183 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v181, 1, v178);
    if (v182)
    {
      if (!v183)
      {
        (*(void (**)(char *, char *, uint64_t))(v248 + 16))(v180, v181, v178);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v180, 0, 1, v178);
LABEL_65:
        v189 = v160[7];
        v190 = (_QWORD *)((char *)v158 + v189);
        v191 = (_QWORD *)((char *)v159 + v189);
        *v190 = *v191;
        v192 = v191[1];
        v193 = v190[1];
        v190[1] = v192;
        swift_bridgeObjectRetain(v192);
        swift_bridgeObjectRelease(v193);
        goto LABEL_66;
      }
    }
    else
    {
      if (!v183)
      {
        v245(v180, v181, v178);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v248 + 8))(v180, v178);
    }
    v188 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
    goto LABEL_65;
  }
  if (v162)
  {
LABEL_54:
    v172 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
    goto LABEL_66;
  }
  *v158 = *v159;
  v163 = v159[1];
  v158[1] = v163;
  v164 = v160[5];
  v165 = (char *)v158 + v164;
  v247 = (char *)v159 + v164;
  v166 = type metadata accessor for AttributedString(0);
  v167 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 16);
  swift_bridgeObjectRetain(v163);
  v167(v165, v247, v166);
  v168 = v160[6];
  v169 = (char *)v158 + v168;
  v170 = (char *)v159 + v168;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159 + v168, 1, v166))
  {
    v171 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
  }
  else
  {
    v167(v169, v170, v166);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v169, 0, 1, v166);
  }
  v184 = v160[7];
  v185 = (_QWORD *)((char *)v158 + v184);
  v186 = (_QWORD *)((char *)v159 + v184);
  *v185 = *v186;
  v187 = v186[1];
  v185[1] = v187;
  swift_bridgeObjectRetain(v187);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v158, 0, 1, (uint64_t)v160);
LABEL_66:
  v194 = v243[7];
  v195 = a1 + v194;
  v196 = a2 + v194;
  v197 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v197 - 8) + 24))(v195, v196, v197);
  v198 = v243[8];
  v199 = (_QWORD *)(a1 + v198);
  v200 = (_QWORD *)(a2 + v198);
  *v199 = *v200;
  v201 = v200[1];
  v202 = v199[1];
  v199[1] = v201;
  swift_bridgeObjectRetain(v201);
  swift_bridgeObjectRelease(v202);
  *(_BYTE *)(a1 + v243[9]) = *(_BYTE *)(a2 + v243[9]);
  *(_BYTE *)(a1 + v243[10]) = *(_BYTE *)(a2 + v243[10]);
  v203 = v243[11];
  v204 = *(_QWORD *)(a1 + v203);
  v205 = *(_QWORD *)(a2 + v203);
  *(_QWORD *)(a1 + v203) = v205;
  swift_retain(v205);
  swift_release(v204);
  v206 = v243[12];
  v207 = (_QWORD *)(a1 + v206);
  v208 = (_QWORD *)(a2 + v206);
  *v207 = *v208;
  v209 = v208[1];
  v210 = v207[1];
  v207[1] = v209;
  swift_bridgeObjectRetain(v209);
  swift_bridgeObjectRelease(v210);
  v211 = v243[13];
  v212 = *(_QWORD *)(a2 + v211);
  v213 = *(_QWORD *)(a1 + v211);
  *(_QWORD *)(a1 + v211) = v212;
  swift_retain(v212);
  swift_release(v213);
  v214 = v243[14];
  v215 = *(_QWORD *)(a2 + v214);
  v216 = *(_QWORD *)(a1 + v214);
  *(_QWORD *)(a1 + v214) = v215;
  swift_retain(v215);
  swift_release(v216);
  v217 = v243[15];
  v218 = *(_QWORD *)(a2 + v217);
  v219 = *(_QWORD *)(a1 + v217);
  *(_QWORD *)(a1 + v217) = v218;
  swift_retain(v218);
  swift_release(v219);
  v220 = v243[16];
  v221 = *(_QWORD *)(a2 + v220);
  v222 = *(_QWORD *)(a1 + v220);
  *(_QWORD *)(a1 + v220) = v221;
  swift_retain(v221);
  swift_release(v222);
  *(_BYTE *)(a1 + v243[17]) = *(_BYTE *)(a2 + v243[17]);
  v223 = v243[18];
  v224 = *(_QWORD *)(a2 + v223);
  v225 = *(_QWORD *)(a1 + v223);
  *(_QWORD *)(a1 + v223) = v224;
  swift_retain(v224);
  swift_release(v225);
  v226 = v243[19];
  v227 = *(_QWORD *)(a2 + v226);
  v228 = *(_QWORD *)(a1 + v226);
  *(_QWORD *)(a1 + v226) = v227;
  swift_retain(v227);
  swift_release(v228);
  *(_QWORD *)(a1 + v243[20]) = *(_QWORD *)(a2 + v243[20]);
  *(_BYTE *)(a1 + v243[21]) = *(_BYTE *)(a2 + v243[21]);
  *(_BYTE *)(a1 + v243[22]) = *(_BYTE *)(a2 + v243[22]);
  *(_BYTE *)(a1 + v243[23]) = *(_BYTE *)(a2 + v243[23]);
  *(_BYTE *)(a1 + v243[24]) = *(_BYTE *)(a2 + v243[24]);
  v229 = v243[25];
  v230 = (_QWORD *)(a1 + v229);
  v231 = (_QWORD *)(a2 + v229);
  *v230 = *v231;
  v232 = v231[1];
  v233 = v230[1];
  v230[1] = v232;
  swift_bridgeObjectRetain(v232);
  swift_bridgeObjectRelease(v233);
  *(_BYTE *)(a1 + v243[26]) = *(_BYTE *)(a2 + v243[26]);
  *(_QWORD *)(a1 + v243[27]) = *(_QWORD *)(a2 + v243[27]);
  *(_QWORD *)(a1 + v243[28]) = *(_QWORD *)(a2 + v243[28]);
  return a1;
}

uint64_t sub_10015C354(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  _OWORD *v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  void (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v119 = v11;
  v12(a1 + v7[6], a2 + v7[6], v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
  v18 = v7[10];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v18, 1, v16))
  {
    v21 = sub_100005D40(&qword_1001BF098);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v19, (uint64_t)v20, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v19, 0, 1, v16);
  }
  v22 = v7[11];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v116 = v17;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v22, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[12];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v117 = v6;
  v118 = v5;
  v6(a1 + v26, a2 + v26, v5);
  v29 = (int *)type metadata accessor for ConditionViewModel(0);
  v30 = v29[5];
  v31 = v27 + v30;
  v32 = v28 + v30;
  v33 = type metadata accessor for WeatherCondition(0);
  v112 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
  v113 = v33;
  v112(v31, v32);
  *(_OWORD *)(v27 + v29[6]) = *(_OWORD *)(v28 + v29[6]);
  *(_OWORD *)(v27 + v29[7]) = *(_OWORD *)(v28 + v29[7]);
  *(_BYTE *)(v27 + v29[8]) = *(_BYTE *)(v28 + v29[8]);
  *(_BYTE *)(v27 + v29[9]) = *(_BYTE *)(v28 + v29[9]);
  *(_BYTE *)(v27 + v29[10]) = *(_BYTE *)(v28 + v29[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v34 = v7[14];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  v38 = v7[15];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v38, 1, v119))
  {
    v41 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v39, (uint64_t)v40, v119);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v119);
  }
  v42 = v7[16];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v42, 1, v119))
  {
    v45 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v43, (uint64_t)v44, v119);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v43, 0, 1, v119);
  }
  v46 = v7[17];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for UVIndex(0);
  v114 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 32);
  v115 = v49;
  v114(v47, v48);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  v54 = v7[20];
  v55 = a1 + v54;
  v56 = a2 + v54;
  *(_BYTE *)(v55 + 32) = *(_BYTE *)(v56 + 32);
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  v58 = a3[5];
  v59 = a1 + v58;
  v60 = a2 + v58;
  v117(a1 + v58, a2 + v58, v118);
  v61 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v12(v59 + v61[5], v60 + v61[5], v119);
  v116(v59 + v61[6], v60 + v61[6], v16);
  v116(v59 + v61[7], v60 + v61[7], v16);
  v62 = v61[8];
  v63 = v59 + v62;
  v64 = v60 + v62;
  v117(v59 + v62, v60 + v62, v118);
  ((void (*)(uint64_t, uint64_t, uint64_t))v112)(v63 + v29[5], v64 + v29[5], v113);
  *(_OWORD *)(v63 + v29[6]) = *(_OWORD *)(v64 + v29[6]);
  *(_OWORD *)(v63 + v29[7]) = *(_OWORD *)(v64 + v29[7]);
  *(_BYTE *)(v63 + v29[8]) = *(_BYTE *)(v64 + v29[8]);
  *(_BYTE *)(v63 + v29[9]) = *(_BYTE *)(v64 + v29[9]);
  *(_BYTE *)(v63 + v29[10]) = *(_BYTE *)(v64 + v29[10]);
  v65 = v61[9];
  v66 = v59 + v65;
  v67 = v60 + v65;
  v68 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v66, v67, v68);
  *(_QWORD *)(v59 + v61[10]) = *(_QWORD *)(v60 + v61[10]);
  *(_OWORD *)(v59 + v61[11]) = *(_OWORD *)(v60 + v61[11]);
  *(_OWORD *)(v59 + v61[12]) = *(_OWORD *)(v60 + v61[12]);
  *(_OWORD *)(v59 + v61[13]) = *(_OWORD *)(v60 + v61[13]);
  *(_OWORD *)(v59 + v61[14]) = *(_OWORD *)(v60 + v61[14]);
  v69 = v61[15];
  v70 = v59 + v69;
  v71 = v60 + v69;
  v72 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v70, v71, v72);
  v73 = v61[16];
  v74 = (void *)(v59 + v73);
  v75 = (const void *)(v60 + v73);
  v76 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v75, 1, v76))
  {
    v77 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(v74, v75, v76);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v74, 0, 1, v76);
  }
  v78 = v61[17];
  v79 = (void *)(v59 + v78);
  v80 = (const void *)(v60 + v78);
  v81 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v80, 1, v81))
  {
    v82 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v79, v80, v81);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v79, 0, 1, v81);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v114)(v59 + v61[18], v60 + v61[18], v115);
  *(_QWORD *)(v59 + v61[19]) = *(_QWORD *)(v60 + v61[19]);
  v83 = a3[6];
  v84 = (_OWORD *)(a1 + v83);
  v85 = (_OWORD *)(a2 + v83);
  v86 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v85, 1, (uint64_t)v86))
  {
    v87 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
  }
  else
  {
    *v84 = *v85;
    v88 = v86[5];
    v89 = (char *)v84 + v88;
    v90 = (char *)v85 + v88;
    v91 = type metadata accessor for AttributedString(0);
    v92 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 32);
    v92(v89, v90, v91);
    v93 = v86[6];
    v94 = (char *)v84 + v93;
    v95 = (char *)v85 + v93;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v85 + v93, 1, v91))
    {
      v96 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    }
    else
    {
      v92(v94, v95, v91);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v94, 0, 1, v91);
    }
    *(_OWORD *)((char *)v84 + v86[7]) = *(_OWORD *)((char *)v85 + v86[7]);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v84, 0, 1, (uint64_t)v86);
  }
  v97 = a3[7];
  v98 = a1 + v97;
  v99 = a2 + v97;
  v100 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(v98, v99, v100);
  v101 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v101) = *(_BYTE *)(a2 + v101);
  v102 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v102) = *(_QWORD *)(a2 + v102);
  v103 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v103) = *(_QWORD *)(a2 + v103);
  v104 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v104) = *(_QWORD *)(a2 + v104);
  v105 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v105) = *(_BYTE *)(a2 + v105);
  v106 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_QWORD *)(a1 + v106) = *(_QWORD *)(a2 + v106);
  v107 = a3[21];
  *(_QWORD *)(a1 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  *(_BYTE *)(a1 + v107) = *(_BYTE *)(a2 + v107);
  v108 = a3[23];
  *(_BYTE *)(a1 + a3[22]) = *(_BYTE *)(a2 + a3[22]);
  *(_BYTE *)(a1 + v108) = *(_BYTE *)(a2 + v108);
  v109 = a3[25];
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  *(_OWORD *)(a1 + v109) = *(_OWORD *)(a2 + v109);
  v110 = a3[27];
  *(_BYTE *)(a1 + a3[26]) = *(_BYTE *)(a2 + a3[26]);
  *(_QWORD *)(a1 + v110) = *(_QWORD *)(a2 + v110);
  *(_QWORD *)(a1 + a3[28]) = *(_QWORD *)(a2 + a3[28]);
  return a1;
}

uint64_t sub_10015CC10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const void *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const void *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  int *v161;
  int v162;
  int v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v233;
  void (*v234)(uint64_t, uint64_t, uint64_t);
  uint64_t v235;
  uint64_t v236;
  void (*v237)(uint64_t, uint64_t);
  uint64_t v238;
  void (*v239)(void *, const void *, uint64_t);
  void (*v240)(void *, const void *, uint64_t);
  int *v241;
  uint64_t v242;
  void (*v243)(char *, char *, uint64_t);
  void (*v244)(uint64_t, uint64_t, uint64_t);
  uint64_t v245;

  v6 = type metadata accessor for UUID(0);
  v244 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v244(a1, a2, v6);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  v233 = *(_QWORD *)(v11 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v233 + 40);
  v12(v9, v10, v11);
  v242 = v11;
  v240 = (void (*)(void *, const void *, uint64_t))v12;
  v12(a1 + v7[6], a2 + v7[6], v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 40);
  v18(v14, v15, v16);
  v239 = (void (*)(void *, const void *, uint64_t))v18;
  v18(a1 + v7[8], a2 + v7[8], v16);
  v19 = v7[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = v7[10];
  v26 = (void *)(a1 + v25);
  v27 = (const void *)(a2 + v25);
  LODWORD(v18) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v25, 1, v16);
  v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v27, 1, v16);
  if ((_DWORD)v18)
  {
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v26, v27, v16);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v26, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v26, v16);
LABEL_6:
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  v239(v26, v27, v16);
LABEL_7:
  v30 = v7[11];
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v30, 1, v16);
  v34 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v16);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v31, v32, v16);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v16);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v31, v16);
LABEL_12:
    v35 = sub_100005D40(&qword_1001BF098);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  v239(v31, v32, v16);
LABEL_13:
  v36 = v7[12];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v235 = v6;
  v244(a1 + v36, a2 + v36, v6);
  v39 = (int *)type metadata accessor for ConditionViewModel(0);
  v40 = v39[5];
  v41 = v37 + v40;
  v42 = v38 + v40;
  v43 = type metadata accessor for WeatherCondition(0);
  v237 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 40);
  v238 = v43;
  v237(v41, v42);
  v44 = v39[6];
  v45 = (_QWORD *)(v37 + v44);
  v46 = (uint64_t *)(v38 + v44);
  v48 = *v46;
  v47 = v46[1];
  v49 = v45[1];
  *v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease(v49);
  v50 = v39[7];
  v51 = (_QWORD *)(v37 + v50);
  v52 = (uint64_t *)(v38 + v50);
  v54 = *v52;
  v53 = v52[1];
  v55 = v51[1];
  *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease(v55);
  *(_BYTE *)(v37 + v39[8]) = *(_BYTE *)(v38 + v39[8]);
  *(_BYTE *)(v37 + v39[9]) = *(_BYTE *)(v38 + v39[9]);
  *(_BYTE *)(v37 + v39[10]) = *(_BYTE *)(v38 + v39[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v56 = v7[14];
  v57 = a1 + v56;
  v58 = a2 + v56;
  v59 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 40))(v57, v58, v59);
  v60 = v7[15];
  v61 = (void *)(a1 + v60);
  v62 = (const void *)(a2 + v60);
  LODWORD(v58) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v60, 1, v242);
  v63 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v62, 1, v242);
  v241 = a3;
  if ((_DWORD)v58)
  {
    if (!v63)
    {
      (*(void (**)(void *, const void *, uint64_t))(v233 + 32))(v61, v62, v242);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v61, 0, 1, v242);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v63)
  {
    (*(void (**)(void *, uint64_t))(v233 + 8))(v61, v242);
LABEL_18:
    v64 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_19;
  }
  v240(v61, v62, v242);
LABEL_19:
  v65 = v235;
  v66 = v7[16];
  v67 = (void *)(a1 + v66);
  v68 = (const void *)(a2 + v66);
  v69 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v66, 1, v242);
  v70 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v68, 1, v242);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(void *, const void *, uint64_t))(v233 + 32))(v67, v68, v242);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v242);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v70)
  {
    (*(void (**)(void *, uint64_t))(v233 + 8))(v67, v242);
LABEL_24:
    v71 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    goto LABEL_25;
  }
  v240(v67, v68, v242);
LABEL_25:
  v72 = v7[17];
  v73 = a1 + v72;
  v74 = a2 + v72;
  v75 = type metadata accessor for UVIndex(0);
  v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 40);
  v76(v73, v74, v75);
  v77 = v7[18];
  v78 = a1 + v77;
  v79 = a2 + v77;
  v80 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 40))(v78, v79, v80);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  v81 = v7[20];
  v82 = a1 + v81;
  v83 = a2 + v81;
  v84 = *(_QWORD *)(a1 + v81 + 8);
  v234 = v76;
  v236 = v75;
  if (v84)
  {
    v85 = *(_QWORD *)(v83 + 8);
    if (v85)
    {
      *(_QWORD *)v82 = *(_QWORD *)v83;
      *(_QWORD *)(v82 + 8) = v85;
      swift_bridgeObjectRelease(v84);
      v86 = *(_BYTE *)(v83 + 32);
      v87 = *(_QWORD *)(v82 + 16);
      v88 = *(_QWORD *)(v82 + 24);
      v89 = *(_BYTE *)(v82 + 32);
      *(_OWORD *)(v82 + 16) = *(_OWORD *)(v83 + 16);
      *(_BYTE *)(v82 + 32) = v86;
      sub_100007458(v87, v88, v89);
      goto LABEL_30;
    }
    sub_100008EC4(v82);
  }
  v90 = *(_OWORD *)(v83 + 16);
  *(_OWORD *)v82 = *(_OWORD *)v83;
  *(_OWORD *)(v82 + 16) = v90;
  *(_BYTE *)(v82 + 32) = *(_BYTE *)(v83 + 32);
LABEL_30:
  v91 = v241[5];
  v92 = a1 + v91;
  v93 = a2 + v91;
  v244(a1 + v91, a2 + v91, v65);
  v94 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v240((void *)(v92 + v94[5]), (const void *)(v93 + v94[5]), v242);
  v239((void *)(v92 + v94[6]), (const void *)(v93 + v94[6]), v16);
  v239((void *)(v92 + v94[7]), (const void *)(v93 + v94[7]), v16);
  v95 = v94[8];
  v96 = v92 + v95;
  v97 = v93 + v95;
  v244(v92 + v95, v93 + v95, v65);
  ((void (*)(uint64_t, uint64_t, uint64_t))v237)(v96 + v39[5], v97 + v39[5], v238);
  v98 = v39[6];
  v99 = (_QWORD *)(v96 + v98);
  v100 = (uint64_t *)(v97 + v98);
  v102 = *v100;
  v101 = v100[1];
  v103 = v99[1];
  *v99 = v102;
  v99[1] = v101;
  swift_bridgeObjectRelease(v103);
  v104 = v39[7];
  v105 = (_QWORD *)(v96 + v104);
  v106 = (uint64_t *)(v97 + v104);
  v108 = *v106;
  v107 = v106[1];
  v109 = v105[1];
  *v105 = v108;
  v105[1] = v107;
  swift_bridgeObjectRelease(v109);
  *(_BYTE *)(v96 + v39[8]) = *(_BYTE *)(v97 + v39[8]);
  *(_BYTE *)(v96 + v39[9]) = *(_BYTE *)(v97 + v39[9]);
  *(_BYTE *)(v96 + v39[10]) = *(_BYTE *)(v97 + v39[10]);
  v110 = v94[9];
  v111 = v92 + v110;
  v112 = v93 + v110;
  v113 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 40))(v111, v112, v113);
  *(_QWORD *)(v92 + v94[10]) = *(_QWORD *)(v93 + v94[10]);
  v114 = v94[11];
  v115 = (_QWORD *)(v92 + v114);
  v116 = (uint64_t *)(v93 + v114);
  v118 = *v116;
  v117 = v116[1];
  v119 = v115[1];
  *v115 = v118;
  v115[1] = v117;
  swift_bridgeObjectRelease(v119);
  v120 = v94[12];
  v121 = (_QWORD *)(v92 + v120);
  v122 = (uint64_t *)(v93 + v120);
  v124 = *v122;
  v123 = v122[1];
  v125 = v121[1];
  *v121 = v124;
  v121[1] = v123;
  swift_bridgeObjectRelease(v125);
  v126 = v94[13];
  v127 = (_QWORD *)(v92 + v126);
  v128 = (uint64_t *)(v93 + v126);
  v130 = *v128;
  v129 = v128[1];
  v131 = v127[1];
  *v127 = v130;
  v127[1] = v129;
  swift_bridgeObjectRelease(v131);
  v132 = v94[14];
  v133 = (_QWORD *)(v92 + v132);
  v134 = (uint64_t *)(v93 + v132);
  v136 = *v134;
  v135 = v134[1];
  v137 = v133[1];
  *v133 = v136;
  v133[1] = v135;
  swift_bridgeObjectRelease(v137);
  v138 = v94[15];
  v139 = v92 + v138;
  v140 = v93 + v138;
  v141 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 40))(v139, v140, v141);
  v142 = v94[16];
  v143 = (void *)(v92 + v142);
  v144 = (const void *)(v93 + v142);
  v145 = type metadata accessor for SunEvents(0);
  v146 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v145);
  v147 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145);
  if (v146)
  {
    if (!v147)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v148 = *(_QWORD *)(v145 - 8);
  if (v147)
  {
    (*(void (**)(void *, uint64_t))(v148 + 8))(v143, v145);
LABEL_35:
    v149 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(void *, const void *, uint64_t))(v148 + 40))(v143, v144, v145);
LABEL_36:
  v150 = v94[17];
  v151 = (void *)(v92 + v150);
  v152 = (const void *)(v93 + v150);
  v153 = type metadata accessor for MoonEvents(0);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v153);
  v155 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v152, 1, v153);
  if (v154)
  {
    if (!v155)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v153 - 8) + 32))(v151, v152, v153);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v151, 0, 1, v153);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v156 = *(_QWORD *)(v153 - 8);
  if (v155)
  {
    (*(void (**)(void *, uint64_t))(v156 + 8))(v151, v153);
LABEL_41:
    v157 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v156 + 40))(v151, v152, v153);
LABEL_42:
  v234(v92 + v94[18], v93 + v94[18], v236);
  *(_QWORD *)(v92 + v94[19]) = *(_QWORD *)(v93 + v94[19]);
  v158 = v241[6];
  v159 = (_QWORD *)(a1 + v158);
  v160 = (_QWORD *)(a2 + v158);
  v161 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, (uint64_t)v161);
  v163 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v160, 1, (uint64_t)v161);
  if (!v162)
  {
    if (v163)
    {
      sub_1000E1258((uint64_t)v159);
      goto LABEL_48;
    }
    v174 = v160[1];
    v175 = v159[1];
    *v159 = *v160;
    v159[1] = v174;
    swift_bridgeObjectRelease(v175);
    v176 = v161[5];
    v177 = (char *)v159 + v176;
    v178 = (char *)v160 + v176;
    v179 = type metadata accessor for AttributedString(0);
    v245 = *(_QWORD *)(v179 - 8);
    v243 = *(void (**)(char *, char *, uint64_t))(v245 + 40);
    v243(v177, v178, v179);
    v180 = v161[6];
    v181 = (char *)v159 + v180;
    v182 = (char *)v160 + v180;
    v183 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159 + v180, 1, v179);
    v184 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v182, 1, v179);
    if (v183)
    {
      if (!v184)
      {
        (*(void (**)(char *, char *, uint64_t))(v245 + 32))(v181, v182, v179);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v181, 0, 1, v179);
LABEL_63:
        v186 = v161[7];
        v187 = (_QWORD *)((char *)v159 + v186);
        v188 = (_QWORD *)((char *)v160 + v186);
        v190 = *v188;
        v189 = v188[1];
        v191 = v187[1];
        *v187 = v190;
        v187[1] = v189;
        swift_bridgeObjectRelease(v191);
        goto LABEL_64;
      }
    }
    else
    {
      if (!v184)
      {
        v243(v181, v182, v179);
        goto LABEL_63;
      }
      (*(void (**)(char *, uint64_t))(v245 + 8))(v181, v179);
    }
    v185 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
    goto LABEL_63;
  }
  if (v163)
  {
LABEL_48:
    v173 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    goto LABEL_64;
  }
  *(_OWORD *)v159 = *(_OWORD *)v160;
  v164 = v161[5];
  v165 = (char *)v159 + v164;
  v166 = (char *)v160 + v164;
  v167 = type metadata accessor for AttributedString(0);
  v168 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 32);
  v168(v165, v166, v167);
  v169 = v161[6];
  v170 = (char *)v159 + v169;
  v171 = (char *)v160 + v169;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v160 + v169, 1, v167))
  {
    v172 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
  }
  else
  {
    v168(v170, v171, v167);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v170, 0, 1, v167);
  }
  *(_OWORD *)((char *)v159 + v161[7]) = *(_OWORD *)((char *)v160 + v161[7]);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v159, 0, 1, (uint64_t)v161);
LABEL_64:
  v192 = v241[7];
  v193 = a1 + v192;
  v194 = a2 + v192;
  v195 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v195 - 8) + 40))(v193, v194, v195);
  v196 = v241[8];
  v197 = (_QWORD *)(a1 + v196);
  v198 = (uint64_t *)(a2 + v196);
  v200 = *v198;
  v199 = v198[1];
  v201 = v197[1];
  *v197 = v200;
  v197[1] = v199;
  swift_bridgeObjectRelease(v201);
  v202 = v241[10];
  *(_BYTE *)(a1 + v241[9]) = *(_BYTE *)(a2 + v241[9]);
  *(_BYTE *)(a1 + v202) = *(_BYTE *)(a2 + v202);
  v203 = v241[11];
  v204 = *(_QWORD *)(a1 + v203);
  *(_QWORD *)(a1 + v203) = *(_QWORD *)(a2 + v203);
  swift_release(v204);
  v205 = v241[12];
  v206 = (_QWORD *)(a1 + v205);
  v207 = (uint64_t *)(a2 + v205);
  v209 = *v207;
  v208 = v207[1];
  v210 = v206[1];
  *v206 = v209;
  v206[1] = v208;
  swift_bridgeObjectRelease(v210);
  v211 = v241[13];
  v212 = *(_QWORD *)(a1 + v211);
  *(_QWORD *)(a1 + v211) = *(_QWORD *)(a2 + v211);
  swift_release(v212);
  v213 = v241[14];
  v214 = *(_QWORD *)(a1 + v213);
  *(_QWORD *)(a1 + v213) = *(_QWORD *)(a2 + v213);
  swift_release(v214);
  v215 = v241[15];
  v216 = *(_QWORD *)(a1 + v215);
  *(_QWORD *)(a1 + v215) = *(_QWORD *)(a2 + v215);
  swift_release(v216);
  v217 = v241[16];
  v218 = *(_QWORD *)(a1 + v217);
  *(_QWORD *)(a1 + v217) = *(_QWORD *)(a2 + v217);
  swift_release(v218);
  v219 = v241[18];
  *(_BYTE *)(a1 + v241[17]) = *(_BYTE *)(a2 + v241[17]);
  v220 = *(_QWORD *)(a1 + v219);
  *(_QWORD *)(a1 + v219) = *(_QWORD *)(a2 + v219);
  swift_release(v220);
  v221 = v241[19];
  v222 = *(_QWORD *)(a1 + v221);
  *(_QWORD *)(a1 + v221) = *(_QWORD *)(a2 + v221);
  swift_release(v222);
  v223 = v241[21];
  *(_QWORD *)(a1 + v241[20]) = *(_QWORD *)(a2 + v241[20]);
  *(_BYTE *)(a1 + v223) = *(_BYTE *)(a2 + v223);
  v224 = v241[23];
  *(_BYTE *)(a1 + v241[22]) = *(_BYTE *)(a2 + v241[22]);
  *(_BYTE *)(a1 + v224) = *(_BYTE *)(a2 + v224);
  v225 = v241[25];
  *(_BYTE *)(a1 + v241[24]) = *(_BYTE *)(a2 + v241[24]);
  v226 = (_QWORD *)(a1 + v225);
  v227 = (uint64_t *)(a2 + v225);
  v229 = *v227;
  v228 = v227[1];
  v230 = v226[1];
  *v226 = v229;
  v226[1] = v228;
  swift_bridgeObjectRelease(v230);
  v231 = v241[27];
  *(_BYTE *)(a1 + v241[26]) = *(_BYTE *)(a2 + v241[26]);
  *(_QWORD *)(a1 + v231) = *(_QWORD *)(a2 + v231);
  *(_QWORD *)(a1 + v241[28]) = *(_QWORD *)(a2 + v241[28]);
  return a1;
}

uint64_t sub_10015D934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10015D940);
}

uint64_t sub_10015D940(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v17;

  sub_10015DC38();
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
  }
  type metadata accessor for DailyForecastViewModel(0);
  sub_10001C6C0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_13:
    v8 = v4 + v11;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
  }
  sub_100005D40(&qword_1001BF0C0);
  sub_10001C6C0();
  if (v12)
  {
    v7 = v13;
    v11 = a3[6];
    goto LABEL_13;
  }
  sub_100070DE8();
  sub_10001C6C0();
  if (v14)
  {
    v7 = v15;
    v11 = a3[7];
    goto LABEL_13;
  }
  v17 = *(_QWORD *)(v4 + a3[8] + 8);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  return (v17 + 1);
}

uint64_t sub_10015DA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10015DA0C);
}

void sub_10015DA0C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  sub_10015DC38();
  sub_10001C6D0();
  if (v10)
  {
    v8 = v7;
    v9 = v5;
  }
  else
  {
    type metadata accessor for DailyForecastViewModel(0);
    sub_10001C6D0();
    if (v10)
    {
      v8 = v11;
      v12 = a4[5];
    }
    else
    {
      sub_100005D40(&qword_1001BF0C0);
      sub_10001C6D0();
      if (v13)
      {
        v8 = v14;
        v12 = a4[6];
      }
      else
      {
        sub_100070DE8();
        sub_10001C6D0();
        if (!v15)
        {
          *(_QWORD *)(v5 + a4[8] + 8) = (v4 - 1);
          return;
        }
        v8 = v16;
        v12 = a4[7];
      }
    }
    v9 = v5 + v12;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v9, v4, v4, v8);
}

void sub_10015DAC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[25];

  v2 = type metadata accessor for CurrentObservationViewModel(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for DailyForecastViewModel(319);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10015DBE4(319);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for Location(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          v10[4] = &unk_1001859A8;
          v10[5] = &unk_1001859C0;
          v10[6] = &unk_1001859C0;
          v10[7] = &unk_1001859D8;
          v10[8] = &unk_1001859A8;
          v10[9] = (char *)&value witness table for Builtin.NativeObject + 64;
          v10[10] = (char *)&value witness table for Builtin.NativeObject + 64;
          v10[11] = (char *)&value witness table for Builtin.NativeObject + 64;
          v10[12] = (char *)&value witness table for Builtin.NativeObject + 64;
          v10[13] = &unk_1001859C0;
          v10[14] = (char *)&value witness table for Builtin.NativeObject + 64;
          v10[15] = (char *)&value witness table for Builtin.NativeObject + 64;
          v10[16] = (char *)&value witness table for Builtin.Int64 + 64;
          v10[17] = &unk_1001859C0;
          v10[18] = &unk_1001859C0;
          v10[19] = &unk_1001859C0;
          v10[20] = &unk_1001859C0;
          v10[21] = &unk_1001859F0;
          v10[22] = &unk_1001859C0;
          v10[23] = (char *)&value witness table for Builtin.Int64 + 64;
          v10[24] = (char *)&value witness table for Builtin.Int64 + 64;
          swift_initStructMetadata(a1, 256, 25, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_10015DBE4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001C6E18)
  {
    v2 = type metadata accessor for RainInlineContentViewModel(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001C6E18);
  }
}

uint64_t sub_10015DC38()
{
  return type metadata accessor for CurrentObservationViewModel(0);
}

#error "10015DC88: call analysis failed (funcsize=194)"

#error "10015DF90: call analysis failed (funcsize=194)"

#error "10015E298: call analysis failed (funcsize=194)"

uint64_t sub_10015E560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(_QWORD);
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _BOOL4 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  __int16 v89;
  __int16 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t result;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BOOL4 v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(_QWORD);
  void (*v136)(char *, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v6 = v5;
  v125 = a4;
  v131 = a1;
  v132 = a3;
  v124 = a2;
  v126 = a5;
  v127 = type metadata accessor for DailyForecastViewModel(0);
  v109 = *(_QWORD *)(v127 - 8);
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_10002325C();
  v10 = v9 - v8;
  sub_100005D40(&qword_1001BF098);
  sub_1000230F4();
  __chkstk_darwin(v11);
  sub_100023150();
  v121 = v12;
  sub_100023164();
  __chkstk_darwin(v13);
  v123 = (char *)&v108 - v14;
  sub_100023164();
  __chkstk_darwin(v15);
  v120 = (char *)&v108 - v16;
  sub_100023164();
  __chkstk_darwin(v17);
  v122 = (char *)&v108 - v18;
  v115 = sub_10015FDC4();
  v114 = *(_QWORD *)(v115 - 8);
  sub_1000230F4();
  __chkstk_darwin(v19);
  sub_10002325C();
  v113 = v21 - v20;
  type metadata accessor for WidgetContext(0);
  sub_1000230F4();
  __chkstk_darwin(v22);
  sub_100023150();
  v110 = v23;
  sub_100023164();
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v108 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v108 - v28;
  v30 = type metadata accessor for WidgetFamily(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  sub_100023150();
  v128 = v32;
  sub_100023164();
  __chkstk_darwin(v33);
  v35 = (char *)&v108 - v34;
  v36 = v5 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetFamily;
  v37 = *(void (**)(_QWORD))(v31 + 104);
  v130 = enum case for WidgetFamily.systemMedium(_:);
  v135 = v37;
  v37((char *)&v108 - v34);
  sub_10008A7CC();
  v137 = v36;
  sub_10015FD24();
  sub_10015FD24();
  v39 = v138;
  v38 = v139;
  v111 = v31;
  v136 = *(void (**)(char *, uint64_t))(v31 + 8);
  v136(v35, v30);
  v133 = v6;
  if (v38 == v39)
    v40 = 1;
  else
    v40 = sub_10015DF50(v6 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory, v6 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_maxSupportedSizeCategory);
  sub_10015FD60((uint64_t)v35, v130);
  sub_10015FD24();
  sub_10015FD24();
  v42 = v138;
  v41 = v139;
  sub_10015FD30();
  sub_10004B9CC(v132, (uint64_t)v29, type metadata accessor for WidgetContext);
  v43 = v127;
  if (v41 == v42)
  {
    v44 = v29[48];
    sub_10011C038((uint64_t)v29, type metadata accessor for WidgetContext);
    v45 = (v44 - 6) < 0xFFFFFFFD;
  }
  else
  {
    sub_10011C038((uint64_t)v29, type metadata accessor for WidgetContext);
    v45 = 1;
  }
  v46 = v133;
  sub_10015FD60((uint64_t)v35, enum case for WidgetFamily.systemSmall(_:));
  sub_10015FD24();
  sub_10015FD24();
  v117 = v139;
  v116 = v138;
  sub_10015FD30();
  v118 = sub_10015EF60(v46);
  v47 = *(unsigned __int8 *)(v46 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize);
  v119 = v45;
  v112 = v47;
  if ((v47 - 2) >= 2)
  {
    if (v47)
      v48 = sub_10015F370();
    else
      v48 = sub_10015F1B0();
  }
  else
  {
    v48 = sub_10015F5F8();
  }
  v134 = v48;
  v129 = enum case for WidgetFamily.systemLarge(_:);
  sub_10015FD60((uint64_t)v35, enum case for WidgetFamily.systemLarge(_:));
  sub_10015FD24();
  sub_10015FD24();
  v50 = v138;
  v49 = v139;
  sub_10015FD30();
  sub_10004B9CC(v132, (uint64_t)v27, type metadata accessor for WidgetContext);
  if (v49 != v50)
  {
    sub_10011C038((uint64_t)v27, type metadata accessor for WidgetContext);
    goto LABEL_20;
  }
  v51 = v27[48];
  if ((v51 - 3) >= 2)
  {
    v53 = v110;
    sub_10004B9CC((uint64_t)v27, v110, type metadata accessor for WidgetContext);
    v78 = v51 == 5;
    v52 = v53;
    if (!v78)
    {
      v106 = *(unsigned __int8 *)(v53 + 48);
      sub_10015FDCC(v53);
      result = sub_10015FDCC((uint64_t)v27);
      if (v106 != 2)
        goto LABEL_20;
      goto LABEL_19;
    }
  }
  else
  {
    v52 = v110;
    sub_10004B9CC((uint64_t)v27, v110, type metadata accessor for WidgetContext);
  }
  sub_10015FDCC(v52);
  result = sub_10015FDCC((uint64_t)v27);
LABEL_19:
  v54 = __OFSUB__(v134--, 1);
  if (v54)
  {
    __break(1u);
LABEL_57:
    __break(1u);
    return result;
  }
LABEL_20:
  sub_10015FD60((uint64_t)v35, v129);
  sub_10015FD24();
  sub_10015FD24();
  v56 = v138;
  v55 = v139;
  sub_10015FD30();
  if (v55 == v56)
  {
    result = sub_10015F864();
    if ((result & 1) != 0)
    {
      v54 = __OFSUB__(v134--, 1);
      if (v54)
        goto LABEL_57;
    }
  }
  LODWORD(v110) = v40;
  sub_10015FD60((uint64_t)v35, v130);
  sub_10015FD24();
  sub_10015FD24();
  v58 = v138;
  v57 = v139;
  sub_10015FD30();
  v59 = *(int *)(type metadata accessor for AggregateWeatherViewModel(0) + 32);
  v60 = *(_QWORD *)(v131 + v59);
  if (v57 == v58)
  {
    sub_10010A900(v134, *(_QWORD *)(v131 + v59));
    swift_bridgeObjectRetain(v60);
    sub_100160BA8();
    v62 = v61;
  }
  else
  {
    v63 = sub_1001609D4(1, *(_QWORD *)(v131 + v59));
    v65 = v64;
    v67 = v66;
    v69 = v68;
    swift_bridgeObjectRetain(v60);
    swift_unknownObjectRetain(v63);
    sub_10010A914(v134, v63, v65, v67, v69);
    sub_100160BA8();
    v62 = v70;
    swift_unknownObjectRelease(v63);
  }
  v71 = v133;
  v130 = sub_10015FB24(v133);
  v72 = v71 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
  v73 = v114;
  v74 = v113;
  v75 = v115;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 16))(v113, v72, v115);
  v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 88))(v74, v75);
  if (v76 == enum case for ContentSizeCategory.extraLarge(_:))
  {
    v77 = 36;
  }
  else
  {
    v78 = v76 == enum case for ContentSizeCategory.extraExtraLarge(_:)
       || v76 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
    if (v78)
    {
      v77 = 40;
    }
    else
    {
      sub_100083168(v74, *(uint64_t (**)(uint64_t, uint64_t))(v73 + 8));
      v77 = 32;
    }
  }
  v79 = static Font.caption2.getter();
  v113 = v79;
  v115 = v77;
  if (!v112)
  {
    v114 = static Font.caption.getter(v79);
    sub_10015FD60((uint64_t)v35, v129);
    sub_10015FD24();
    sub_10015FD24();
    v86 = v138;
    v85 = v139;
    v82 = sub_10015FD30();
    if (v85 != v86)
    {
      v83 = (void (*)(char *, uint64_t))static Font.footnote.getter(v82);
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  v114 = static Font.footnote.getter(v79);
  sub_10015FD60((uint64_t)v35, v129);
  sub_10015FD24();
  sub_10015FD24();
  v81 = v138;
  v80 = v139;
  v82 = sub_10015FD30();
  if (v80 != v81)
  {
LABEL_38:
    v83 = (void (*)(char *, uint64_t))static Font.subheadline.getter(v82);
    goto LABEL_40;
  }
  v83 = (void (*)(char *, uint64_t))static Font.body.getter(v82);
LABEL_40:
  v136 = v83;
  v87 = v111;
  v88 = static Font.Weight.semibold.getter(v84);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 16))(v128, v137, v30);
  v89 = *(unsigned __int8 *)(v132 + 48);
  v90 = *(unsigned __int8 *)(v132 + 49);
  v91 = *(_QWORD *)(v62 + 16);
  if (v91)
  {
    v92 = v62 + ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80));
    v93 = *(_QWORD *)(v109 + 72);
    swift_bridgeObjectRetain(v62);
    while (1)
    {
      sub_10004B9CC(v92, v10, type metadata accessor for DailyForecastViewModel);
      v94 = v10 + *(int *)(v43 + 32);
      LODWORD(v94) = *(unsigned __int8 *)(v94 + *(int *)(type metadata accessor for ConditionViewModel(0) + 36));
      sub_10011C038(v10, type metadata accessor for DailyForecastViewModel);
      if ((_DWORD)v94 == 1)
        break;
      v92 += v93;
      if (!--v91)
      {
        swift_bridgeObjectRelease(v62);
        v95 = 0;
        goto LABEL_47;
      }
    }
    swift_bridgeObjectRelease(v62);
    v95 = sub_10015F8FC();
  }
  else
  {
    v95 = 0;
  }
LABEL_47:
  v96 = sub_10015F8FC();
  v97 = (uint64_t)v120;
  sub_10008B368();
  v98 = v97;
  v99 = sub_100005D40(&qword_1001BF090);
  v100 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v97, 1, v99);
  v102 = (uint64_t)v122;
  v101 = (uint64_t)v123;
  if (v100 == 1)
  {
    sub_1000E3BB0(v98);
    v103 = 1;
  }
  else
  {
    Measurement<>.converted(rounded:)(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 8))(v98, v99);
    v103 = 0;
  }
  sub_10015FDD4(v102, v103);
  v104 = v121;
  sub_10008B514();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v104, 1, v99) == 1)
  {
    sub_1000E3BB0(v104);
    v105 = 1;
  }
  else
  {
    Measurement<>.converted(rounded:)(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 8))(v104, v99);
    v105 = 0;
  }
  sub_10015FDD4(v101, v105);
  return sub_1000896A0(v128, v62, v89 | (unsigned __int16)(v90 << 8), v134, v95 & 1, v130 & 1, v96 & 1, v115, v126, v88, v110 & 1, v119, v117 == v116, v125 & 1, v118, v114, (uint64_t)v136, v113, v124,
           v102,
           v101);
}

uint64_t sub_10015EF60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, _QWORD, uint64_t);
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v25 = type metadata accessor for ContentSizeCategory(0);
  v2 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1;
  v9 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
  v9(v8, enum case for WidgetFamily.systemLarge(_:), v5);
  v10 = sub_10008A7CC();
  dispatch thunk of RawRepresentable.rawValue.getter(v5, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(v5, v10);
  v11 = v26;
  v12 = v27;
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, v5);
  if (v12 == v11)
  {
    v14 = v25;
    v15 = v24 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for ContentSizeCategory.extraLarge(_:), v25);
    LOBYTE(v15) = sub_10015DC48(v15, v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v14);
    v16 = (v15 & 1) == 0;
    v17 = 24;
    v18 = 16;
  }
  else
  {
    v9(v8, enum case for WidgetFamily.systemSmall(_:), v5);
    dispatch thunk of RawRepresentable.rawValue.getter(v5, v10);
    dispatch thunk of RawRepresentable.rawValue.getter(v5, v10);
    v20 = v26;
    v19 = v27;
    v13(v8, v5);
    if (v19 == v20)
      return 4;
    v22 = v25;
    v23 = v24 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for ContentSizeCategory.large(_:), v25);
    LOBYTE(v23) = sub_10015DC48(v23, v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v22);
    v16 = (v23 & 1) == 0;
    v17 = 14;
    v18 = 12;
  }
  if (v16)
    return v17;
  else
    return v18;
}

uint64_t sub_10015F1B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, _QWORD, uint64_t);
  char v11;
  void (*v12)(char *, uint64_t);
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ContentSizeCategory(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
  v10 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
  v10(v8, enum case for ContentSizeCategory.extraExtraLarge(_:), v5);
  v11 = sub_10015DC48(v9, v8);
  v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, v5);
  if ((v11 & 1) != 0)
    return 3;
  v10(v8, enum case for ContentSizeCategory.large(_:), v5);
  v14 = sub_10015DC48(v9, v8);
  v12(v8, v5);
  if ((v14 & 1) != 0)
    return 4;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for WidgetFamily.systemSmall(_:), v1);
  v15 = sub_10008A7CC();
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v15);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v15);
  v17 = v18[0];
  v16 = v18[1];
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v16 == v17)
    return 4;
  else
    return 5;
}

uint64_t sub_10015F370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, _QWORD, uint64_t);
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  void (*v25)(char *, _QWORD, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for ContentSizeCategory(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WidgetFamily(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetFamily;
  v25 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
  v25(v9, enum case for WidgetFamily.systemLarge(_:), v6);
  v11 = sub_10008A7CC();
  v26 = v10;
  dispatch thunk of RawRepresentable.rawValue.getter(v6, v11);
  dispatch thunk of RawRepresentable.rawValue.getter(v6, v11);
  v13 = v27;
  v12 = v28;
  v24 = *(void (**)(char *, uint64_t))(v7 + 8);
  v24(v9, v6);
  if (v12 == v13)
  {
    v14 = v1 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
    v15 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
    v15(v5, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v2);
    LOBYTE(v14) = sub_10015DC48(v14, v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if ((v14 & 1) != 0)
      return 2;
  }
  else
  {
    v15 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  }
  v17 = v1 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
  v15(v5, enum case for ContentSizeCategory.extraExtraLarge(_:), v2);
  v18 = sub_10015DC48(v17, v5);
  v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v5, v2);
  if ((v18 & 1) != 0)
    return 3;
  v15(v5, enum case for ContentSizeCategory.large(_:), v2);
  v20 = sub_10015DC48(v17, v5);
  v19(v5, v2);
  if ((v20 & 1) != 0)
    return 4;
  v25(v9, enum case for WidgetFamily.systemSmall(_:), v6);
  dispatch thunk of RawRepresentable.rawValue.getter(v6, v11);
  dispatch thunk of RawRepresentable.rawValue.getter(v6, v11);
  v22 = v27;
  v21 = v28;
  v24(v9, v6);
  if (v21 == v22)
    return 4;
  else
    return 5;
}

uint64_t sub_10015F5F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;
  void (*v15)(_QWORD);
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  char v23;
  char v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(void);
  unsigned int v30;
  void (*v31)(char *, _QWORD, uint64_t);
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ContentSizeCategory(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v10(v8, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v5);
  v11 = sub_10015DC48(v9, v8);
  v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, v5);
  if ((v11 & 1) != 0)
    return 3;
  v14 = v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetFamily;
  v15 = *(void (**)(_QWORD))(v2 + 104);
  v30 = enum case for WidgetFamily.systemSmall(_:);
  v31 = (void (*)(char *, _QWORD, uint64_t))v15;
  v15(v4);
  v16 = sub_10008A7CC();
  v33 = v14;
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v16);
  v32 = v16;
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v16);
  v17 = v4;
  v18 = v9;
  v19 = v35;
  v20 = v36;
  v21 = *(void (**)(void))(v2 + 8);
  v34 = v17;
  v29 = v21;
  v21();
  v22 = enum case for ContentSizeCategory.extraLarge(_:);
  if (v20 == v19)
  {
    v10(v8, enum case for ContentSizeCategory.extraLarge(_:), v5);
    v23 = sub_10015DC48(v18, v8);
    v12(v8, v5);
    if ((v23 & 1) != 0)
      return 3;
  }
  v10(v8, v22, v5);
  v24 = sub_10015DC48(v18, v8);
  v12(v8, v5);
  if ((v24 & 1) != 0)
    return 4;
  v25 = v34;
  v31(v34, v30, v1);
  v26 = v32;
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v32);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v26);
  v28 = v35;
  v27 = v36;
  ((void (*)(char *, uint64_t))v29)(v25, v1);
  if (v27 == v28)
    return 4;
  else
    return 5;
}

BOOL sub_10015F864()
{
  void *v0;
  id v1;
  double v2;
  double v3;
  id v4;
  double v5;
  double v6;

  v0 = (void *)objc_opt_self(UIScreen);
  v1 = objc_msgSend(v0, "mainScreen");
  objc_msgSend(v1, "nativeScale");
  v3 = v2;

  v4 = objc_msgSend(v0, "mainScreen");
  objc_msgSend(v4, "scale");
  v6 = v5;

  return v6 < v3;
}

uint64_t sub_10015F8FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t result;
  uint64_t v15;

  v1 = type metadata accessor for ContentSizeCategory(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetFamily, v5);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  if (v9 == enum case for WidgetFamily.systemSmall(_:))
    goto LABEL_2;
  if (v9 != enum case for WidgetFamily.systemMedium(_:))
  {
    if (v9 != enum case for WidgetFamily.systemLarge(_:) && v9 != enum case for WidgetFamily.systemExtraLarge(_:))
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x206E776F6E6B6E75, 0xEC00000065736163, "WeatherWidget/DailyViewAttributesFactory.swift", 46, 2);
      __break(1u);
      return result;
    }
    v11 = OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
    if (*(_BYTE *)(v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize))
      v13 = (unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:);
    else
      v13 = (unsigned int *)&enum case for ContentSizeCategory.extraLarge(_:);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *v13, v1);
    goto LABEL_16;
  }
  if (!sub_10015F864() && *(_BYTE *)(v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize))
  {
    v11 = OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for ContentSizeCategory.extraExtraLarge(_:), v1);
LABEL_16:
    v10 = sub_10015E258(v0 + v11, v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return v10 & 1;
  }
LABEL_2:
  v10 = 0;
  return v10 & 1;
}

uint64_t sub_10015FB24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for ContentSizeCategory(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v2);
  LOBYTE(v6) = sub_10015E258(v6, v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v6 & 1;
}

uint64_t sub_10015FBD4()
{
  int v0;
  int v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_100070E5C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = sub_10015FDC4();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10002325C();
  v12 = v11 - v10;
  v13 = type metadata accessor for WidgetFamily(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_10002325C();
  v17 = v16 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v16 - v15, v7, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v5, v8);
  v18 = sub_100067564(v17, v12, v3, v1);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v5, v8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v7, v13);
  return v18;
}

uint64_t sub_10015FCE4()
{
  return type metadata accessor for DailyViewAttributesFactory(0);
}

uint64_t type metadata accessor for DailyViewAttributesFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C6ED0;
  if (!qword_1001C6ED0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DailyViewAttributesFactory);
  return result;
}

uint64_t sub_10015FD24()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_10015FD30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 136))(v1, v0);
}

uint64_t sub_10015FD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&a9 - v9, v11, v10);
}

uint64_t sub_10015FD60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 144))(a1, a2, v2);
}

uint64_t sub_10015FD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v0);
}

uint64_t sub_10015FD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

uint64_t sub_10015FDBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10015FDC4()
{
  return type metadata accessor for ContentSizeCategory(0);
}

uint64_t sub_10015FDCC(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  return sub_10011C038(a1, v1);
}

uint64_t sub_10015FDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, 1, v2);
}

id sub_10015FDE0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  objc_super v5;
  _QWORD v6[5];

  v1 = type metadata accessor for NanoPreferencesSynchronizer(0);
  sub_100097B00(v1);
  v6[3] = v1;
  v6[4] = &protocol witness table for NanoPreferencesSynchronizer;
  v6[0] = NanoPreferencesSynchronizer.init(domain:container:appGroupContainer:)(0xD000000000000017, 0x800000010018A790, 0xD000000000000011, 0x8000000100186DD0, 0xD000000000000017, 0x800000010018A790);
  v2 = type metadata accessor for UnitSetupManager(0);
  sub_100097B00(v2);
  UnitSetupManager.init(nanoPrefencesSynchronizer:)(v6);
  UnitSetupManager.setupSettings()();
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for WeatherSettingsUnits();
  v3 = objc_msgSendSuper2(&v5, "init");
  sub_1000A7198();
  return v3;
}

uint64_t sub_10015FED8()
{
  uint64_t v0;

  type metadata accessor for UnitManager(0);
  v0 = sub_100160888();
  UnitManager.refreshUnitsFromStorage()();
  return swift_release(v0);
}

uint64_t sub_10015FF30()
{
  return swift_task_switch(sub_10015FF44, 0, 0);
}

uint64_t sub_10015FF44()
{
  uint64_t v0;
  _QWORD *v1;

  type metadata accessor for UnitManager(0);
  *(_QWORD *)(v0 + 16) = sub_100160888();
  v1 = (_QWORD *)swift_task_alloc(async function pointer to UnitManager.refreshUnitsFromStorage()[1]);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_10015FFA0;
  return UnitManager.refreshUnitsFromStorage()();
}

uint64_t sub_10015FFA0()
{
  uint64_t (**v0)(void);

  sub_10012FBCC(*((_QWORD *)*v0 + 3));
  sub_1000A7198();
  return sub_100070E38(v0[1]);
}

uint64_t sub_100160034(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1001C6FB4;
  v5 = a2;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_100160090;
  return sub_10015FF30();
}

uint64_t sub_100160090()
{
  uint64_t (**v0)(void);
  void (**v1)(_QWORD);
  void *v2;

  v1 = (void (**)(_QWORD))*((_QWORD *)*v0 + 3);
  v2 = (void *)*((_QWORD *)*v0 + 2);
  sub_10012FBCC(*((_QWORD *)*v0 + 4));

  v1[2](v1);
  _Block_release(v1);
  return v0[1]();
}

uint64_t sub_1001600E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = sub_100005D40(&qword_1001C0F70);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v6, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject(&unk_1001BB5D0, 48, 7);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  v9 = (_QWORD *)swift_allocObject(&unk_1001BB5F8, 48, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = &unk_1001C6FD8;
  v9[5] = v8;
  v10 = sub_100160694((uint64_t)v6, (uint64_t)&unk_1001C6FE8, (uint64_t)v9);
  return swift_release(v10);
}

uint64_t sub_1001601C4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = sub_100005D40(&qword_1001C6FB8);
  __chkstk_darwin(v3);
  v4 = sub_10016086C();
  type metadata accessor for UnitManager(v4);
  if (a1)
  {
    v5 = a1;
    static UnitManager.standard.getter(v5);
    v6 = v5;
    UnitConfiguration.Temperature.init(_:)();
    UnitManager.setPreferredTemperatureUnit(_:)(v1);

  }
  else
  {
    sub_100160888();
    v7 = type metadata accessor for UnitConfiguration.Temperature(0);
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 1, 1, v7);
    UnitManager.setPreferredTemperatureUnit(_:)(v1);
  }
  sub_1000A7198();
  return sub_10002FBAC(v1, &qword_1001C6FB8);
}

uint64_t sub_100160318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100005D40(&qword_1001C6FB8);
  __chkstk_darwin(v1);
  v2 = sub_10016086C();
  type metadata accessor for UnitManager(v2);
  sub_100160888();
  UnitManager.preferredTemperatureUnit.getter();
  sub_1000A7198();
  v3 = type metadata accessor for UnitConfiguration.Temperature(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v0, 1, v3) == 1)
  {
    sub_10002FBAC(v0, &qword_1001C6FB8);
    return 0;
  }
  else
  {
    v4 = UnitConfiguration.Temperature.asUnit.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0, v3);
  }
  return v4;
}

id sub_1001603DC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WeatherSettingsUnits();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WeatherSettingsUnits()
{
  return objc_opt_self(_TtC13WeatherWidget20WeatherSettingsUnits);
}

uint64_t sub_10016042C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100160458()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1001C6FC4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000709F8;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1001C6FC0 + dword_1001C6FC0))(v2, v3);
}

uint64_t sub_1001604BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_10012B298;
  return v6();
}

uint64_t sub_100160514()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1001C6FD4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10012B298;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1001C6FD0 + dword_1001C6FD0))(v2, v3, v4);
}

uint64_t sub_10016058C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_10012B298;
  return v7();
}

uint64_t sub_1001605E4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100160610(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1001C6FE4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10012B298;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001C6FE0 + dword_1001C6FE0))(a1, v4, v5, v6);
}

uint64_t sub_100160694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v6) == 1)
  {
    sub_10002FBAC(a1, &qword_1001C0F70);
    v7 = 7168;
  }
  else
  {
    v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v7 = v8 | 0x1C00;
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    v14 = v13;
    swift_unknownObjectRelease(v9);
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = swift_allocObject(&unk_1001BB620, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0;
    v18[1] = 0;
    v16 = v18;
    v18[2] = v12;
    v18[3] = v14;
  }
  else
  {
    v16 = 0;
  }
  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_1001C6FF8, v15);
}

uint64_t sub_1001607D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001607FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1001C6FF4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000709F8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1001C6FF0 + dword_1001C6FF0))(a1, v4);
}

uint64_t sub_10016086C()
{
  return 0;
}

uint64_t sub_100160888()
{
  return static UnitManager.standard.getter();
}

uint64_t sub_100160890(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for LayoutSubviews(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v9 = sub_10010B6F8();
    dispatch thunk of Collection.startIndex.getter(v4, v9);
    sub_10010B760();
    dispatch thunk of Collection.index(_:offsetBy:limitedBy:)(&v11, &v14, a1, &v13, v4, v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v1, v4);
    if ((v12 & 1) != 0)
    {
      sub_10010B760();
      sub_10010B738();
    }
    else
    {
      v10 = v11;
      sub_10010B738();
      v14 = v10;
    }
    result = sub_10010B760();
    if (v13 >= v14)
    {
      v11 = v14;
      v12 = v13;
      dispatch thunk of Collection.subscript.getter(&v11, v4, v9);
      return ((uint64_t (*)(uint64_t, uint64_t))a1)(v2, v4);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001609D4(uint64_t a1, uint64_t a2)
{
  return sub_100160B18(a1, a2, (void (*)(_QWORD))type metadata accessor for DailyForecastViewModel);
}

void sub_1001609E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = a5 >> 1;
    v10 = sub_10010B6A8(a4, a1, a5 >> 1, a2);
    if ((v11 & 1) != 0)
      v10 = v9;
    if (v9 >= v10)
    {
      sub_1000E5028(v10, v9, a2, a3, a4, a5);
      v12 = sub_10016555C();
      swift_unknownObjectRelease(v12);
      sub_1001655C0();
      sub_1000FA1C4();
      return;
    }
  }
  __break(1u);
}

void sub_100160A70(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v5 = HIBYTE(a3) & 0xF;
    else
      v5 = a2 & 0xFFFFFFFFFFFFLL;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, a1, v7, a2, a3);
    if ((v9 & 1) != 0)
      v8 = v7;
    if (4 * v5 >= v8 >> 14)
    {
      String.subscript.getter(v8, v7, a2, a3);
      v10 = sub_10016555C();
      swift_bridgeObjectRelease(v10);
      sub_1001655C0();
      sub_1000FA1C4();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100160B18(uint64_t result, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(a2 + 16);
  result = sub_10010B6AC(0, result, v5);
  if ((v6 & 1) != 0)
    v7 = v5;
  else
    v7 = result;
  if (v5 < v7)
    goto LABEL_9;
  if ((v7 & 0x8000000000000000) == 0)
  {
    a3(0);
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_100160BA8()
{
  sub_100160BE0();
}

void sub_100160BC4()
{
  sub_100160BE0();
}

void sub_100160BE0()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  sub_100070E5C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  if ((v0 & 1) == 0)
    goto LABEL_2;
  v6 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v7 = swift_unknownObjectRetain_n(v5, 2);
  v8 = (_QWORD *)swift_dynamicCastClass(v7, v6);
  if (!v8)
  {
    sub_10016559C();
    v8 = &_swiftEmptyArrayStorage;
  }
  v9 = v8[2];
  v10 = swift_release(v8);
  if (__OFSUB__(v1 >> 1, v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = v5;
  if (v9 != (v1 >> 1) - v3)
  {
LABEL_11:
    swift_unknownObjectRelease(v10);
LABEL_2:
    sub_100165388();
    goto LABEL_9;
  }
  if (!swift_dynamicCastClass(v5, v6))
    sub_10016559C();
LABEL_9:
  sub_10016559C();
  sub_10001C770();
}

uint64_t sub_100160CC4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v0 = type metadata accessor for SunriseSunsetNightRule(0);
  v24 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SunriseSunsetDayRule(0);
  v23 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SunriseSunsetMorningRule(0);
  v22 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SunriseSunsetPolarRule(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = SunriseSunsetPolarRule.init()(v11);
  v15 = SunriseSunsetMorningRule.init()(v14);
  v16 = SunriseSunsetDayRule.init()(v15);
  SunriseSunsetNightRule.init()(v16);
  v17 = type metadata accessor for Date(0);
  v18 = type metadata accessor for SunriseSunsetDescriptionContext(0);
  v19 = static RuleBuilder.buildBlock<A, B, C, D>(_:_:_:_:)(v13, v8, v5, v2, v17, v18, v9, v6, v3, v0, &protocol witness table for SunriseSunsetPolarRule, &protocol witness table for SunriseSunsetMorningRule, &protocol witness table for SunriseSunsetDayRule, &protocol witness table for SunriseSunsetNightRule);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v2, v0);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return v19;
}

_QWORD *sub_100160ED0(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t HourPrecipitationChartViewModelFactory;
  __int128 v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[5];
  _QWORD __src[16];

  v4 = v2;
  type metadata accessor for SunriseSunsetEventCalculator(0);
  sub_100029068();
  __chkstk_darwin(v7);
  sub_1000253B8();
  v8 = type metadata accessor for RelevanceProvider();
  v2[3] = swift_allocObject(v8, 16, 7);
  v9 = type metadata accessor for WeatherEventDescriptionStringBuilder(0);
  sub_100097B00(v9);
  v2[4] = WeatherEventDescriptionStringBuilder.init()();
  v10 = sub_100005D40(&qword_1001C70D8);
  sub_100097B00(v10);
  v11 = StringBuilder.init(_:)(sub_100160CC4, 0);
  SunriseSunsetEventCalculator.init()();
  v12 = type metadata accessor for SunriseSunsetViewModelFactory(0);
  sub_100097B00(v12);
  v4[22] = SunriseSunsetViewModelFactory.init(stringBuilder:sunriseSunsetEventCalculator:)(v11, v3);
  sub_100112134((uint64_t)a1, (uint64_t)(v4 + 23));
  v4[5] = a2;
  v13 = type metadata accessor for WidgetContextFactory();
  swift_allocObject(v13, 40, 7);
  v14 = a2;
  v4[2] = sub_10012FC40((uint64_t)v14);
  sub_100112134((uint64_t)a1, (uint64_t)v20);
  sub_100112134((uint64_t)v20, (uint64_t)&__src[11]);
  sub_100112134((uint64_t)v20, (uint64_t)__src);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  __src[10] = WeatherEventDescriptionStringBuilder.init()();
  HourPrecipitationChartViewModelFactory = type metadata accessor for NextHourPrecipitationChartViewModelFactory(0);
  sub_100097B00(HourPrecipitationChartViewModelFactory);
  v18 = HourPrecipitationChartViewModelFactory;
  v19 = &protocol witness table for NextHourPrecipitationChartViewModelFactory;
  *(_QWORD *)&v17 = NextHourPrecipitationChartViewModelFactory.init()();
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v20);
  sub_100096428(&v17, (uint64_t)&__src[5]);

  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
  memcpy(v4 + 6, __src, 0x80uLL);
  return v4;
}

void sub_100161094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t (*v22)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  sub_100070E5C();
  v37 = v1;
  v36 = v2;
  v4 = v3;
  v38 = v5;
  sub_100005D40(&qword_1001C7100);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_10002335C();
  v7 = type metadata accessor for InstantWeather(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10002325C();
  v11 = v10 - v9;
  v12 = type metadata accessor for WeatherDataModel(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10002325C();
  v16 = v15 - v14;
  v17 = type metadata accessor for WeatherDataOperationResult.Data(0);
  sub_100029068();
  __chkstk_darwin(v18);
  sub_10002325C();
  v21 = (uint64_t *)(v20 - v19);
  sub_10000F7C4(v4, v20 - v19, v22);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v17);
  if (!EnumCaseMultiPayload)
  {
    sub_1001654F4();
    v26 = (void (*)(uint64_t, uint64_t))sub_100165530();
    sub_10016126C(v26, v27, v28, v29);
LABEL_7:
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
LABEL_9:
    v25 = 0;
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_1001654F4();
    sub_100165530();
    sub_100161464(v30, v31, v32, v33);
    goto LABEL_7;
  }
  v24 = *v21;
  sub_100024038();
  swift_bridgeObjectRelease(v24);
  v4 = v38;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v0, 1, v7) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v0, v7);
    sub_10016136C(v11, v36, v37, v38);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
    goto LABEL_9;
  }
  sub_100016904(v0, &qword_1001C7100);
  v25 = 1;
LABEL_10:
  v34 = sub_10008307C();
  sub_1001654D4(v4, v25, v35, v34);
  sub_10001C770();
}

uint64_t sub_10016126C@<X0>(void (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = type metadata accessor for ForecastEntry(0);
  v9 = a4 + *(int *)(v8 + 28);
  sub_1000A7A1C(a1, a3, 0, v9);
  v10 = a4 + *(int *)(v8 + 24);
  sub_10012FC94();
  sub_100087EDC(*(_WORD *)(v10 + 48));
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a4, a2, v11);
  v12 = type metadata accessor for WeatherDataViewModel(0);
  swift_storeEnumTagMultiPayload(v9, v12, 0);
  v13 = type metadata accessor for ForecastEntry.Model(0);
  return swift_storeEnumTagMultiPayload(v9, v13, 1);
}

uint64_t sub_10016136C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = type metadata accessor for ForecastEntry(0);
  v9 = a4 + *(int *)(v8 + 28);
  sub_1000C5714(a1, a3, v9);
  v10 = a4 + *(int *)(v8 + 24);
  sub_10012FFD8();
  sub_100087EDC(*(_WORD *)(v10 + 48));
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a4, a2, v11);
  v12 = type metadata accessor for WeatherDataViewModel(0);
  swift_storeEnumTagMultiPayload(v9, v12, 1);
  v13 = type metadata accessor for ForecastEntry.Model(0);
  return swift_storeEnumTagMultiPayload(v9, v13, 1);
}

void sub_100161464(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;

  v75 = a3;
  v72 = a2;
  v70 = a1;
  v73 = a4;
  v4 = sub_100005D40(&qword_1001BFA20);
  __chkstk_darwin(v4);
  v71 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CloudAltitudeKind(0);
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  __chkstk_darwin(v6);
  v63 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WeatherCondition(0);
  v64 = *(_QWORD *)(v8 - 8);
  v65 = v8;
  __chkstk_darwin(v8);
  v61 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetContext(0);
  __chkstk_darwin(v10);
  v62 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SunriseSunsetViewModel(0);
  v68 = *(_QWORD *)(v12 - 8);
  v69 = v12;
  __chkstk_darwin(v12);
  v76 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005D40(&qword_1001BF9D0);
  __chkstk_darwin(v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CurrentWeather(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v58 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v58 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v58 - v28;
  v30 = type metadata accessor for SunriseSunsetModel(0);
  v59 = *(_QWORD *)(v30 - 8);
  v60 = v30;
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v58 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = WeatherDataModel.currentWeather.getter(v31);
  WeatherDataModel.dailyForecast.getter(v34);
  SunriseSunsetModel.init(currentWeather:dailyForecast:)(v29, v16);
  v35 = v74;
  v36 = SunriseSunsetViewModelFactory.makeViewModel(for:component:)(v75, v33);
  v58 = *(_QWORD *)(v35 + 16);
  v37 = WeatherDataModel.currentWeather.getter(v36);
  v38 = v61;
  CurrentWeather.condition.getter(v37);
  v39 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  v40 = v39(v29, v17);
  v41 = WeatherDataModel.currentWeather.getter(v40);
  CurrentWeather.isDaylight.getter(v41);
  v42 = v39(v27, v17);
  v43 = WeatherDataModel.currentWeather.getter(v42);
  CurrentWeather.cloudCover.getter(v43);
  v44 = v39(v24, v17);
  v45 = WeatherDataModel.currentWeather.getter(v44);
  v46 = v63;
  CurrentWeather.predominateCloudAltitudeKind.getter(v45);
  v39(v21, v17);
  v47 = v62;
  v48 = v46;
  v49 = v70;
  sub_1001302E8();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v48, v67);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v38, v65);
  v50 = (uint64_t)v47;
  v51 = (uint64_t)v71;
  sub_100087EDC(*((_WORD *)v47 + 24));
  (*(void (**)(char *, uint64_t))(v59 + 8))(v33, v60);
  v52 = type metadata accessor for Date(0);
  v53 = v73;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v73, v49, v52);
  v54 = (int *)type metadata accessor for ForecastEntry(0);
  sub_100011868(v50, v53 + v54[6], type metadata accessor for WidgetContext);
  v55 = v53 + v54[7];
  (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v55, v76, v69);
  v56 = type metadata accessor for WeatherDataViewModel(0);
  swift_storeEnumTagMultiPayload(v55, v56, 2);
  v57 = type metadata accessor for ForecastEntry.Model(0);
  swift_storeEnumTagMultiPayload(v55, v57, 1);
  sub_1000168AC(v51, v53 + v54[5], &qword_1001BFA20);
}

void sub_1001618F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  sub_100070E5C();
  v3 = v2;
  v4 = type metadata accessor for WeatherDataModel(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = sub_1000253B8();
  v7 = type metadata accessor for WeatherDataOperationResult.Data(v6);
  sub_100029068();
  __chkstk_darwin(v8);
  sub_10002335C();
  sub_10000F7C4(v3, (uint64_t)v1, v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v7);
  if (!EnumCaseMultiPayload)
  {
    sub_100165508();
    sub_10016558C();
    sub_1001619F0(v15, v16, v17, v18);
LABEL_6:
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v4);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_100165508();
    sub_10016558C();
    sub_100161F54(v19, v20, v21);
    goto LABEL_6;
  }
  v11 = *v1;
  sub_10016558C();
  sub_100161D3C(v12, v13, v14);
  swift_bridgeObjectRelease(v11);
LABEL_7:
  sub_10001C770();
}

_QWORD *sub_1001619F0(void (*a1)(uint64_t, uint64_t), int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  int v54;
  uint64_t v55;
  char v56[8];
  char v57[8];

  v55 = a3;
  v49 = a4;
  v54 = a2;
  v5 = sub_100005D40(&qword_1001C2DF8);
  v6 = *(_QWORD *)(v5 - 8);
  v51 = v5;
  v52 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for WidgetFamily(0);
  v50 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PrecipitationRelevancyWindow(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005D40(&qword_1001BF9E8);
  __chkstk_darwin(v15);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005D40(&qword_1001BF9F0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = a1;
  WeatherDataModel.minuteForecast.getter(v20);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v17, 1, v18) == 1)
  {
    sub_100016904((uint64_t)v17, &qword_1001BF9E8);
LABEL_7:
    v36 = v55;
    v37 = v54;
    v39 = v52;
    v38 = v53;
    v40 = v51;
    WeatherDataModel.hourlyForecast.getter(v23);
    v41 = sub_100163314();
    dispatch thunk of Collection.startIndex.getter(v40, v41);
    dispatch thunk of Collection.endIndex.getter(v40, v41);
    v42 = dispatch thunk of Collection.distance(from:to:)(v57, v56, v40, v41);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v40);
    if (v42 >= 5)
      v43 = 5;
    else
      v43 = v42;
    sub_100162C78(v38, v37, v36, v43);
    return (_QWORD *)v44;
  }
  v47 = v10;
  v24 = v50;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for PrecipitationRelevancyWindow.default(_:), v11);
  v25 = Forecast<>.isRelevant(in:)(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((v25 & 1) == 0)
  {
    v23 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    goto LABEL_7;
  }
  v26 = v24;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v28 = v47;
  v29 = v48;
  v27(v47, v49, v48);
  v30 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v28, v29);
  v31 = v55;
  v32 = v54;
  v33 = v53;
  if (v30 == enum case for WidgetFamily.systemLarge(_:))
  {
    v34 = 3;
    v35 = 7;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v29);
    v34 = 1;
    v35 = 20;
  }
  v45 = sub_100162188(v33, v32, v31, v34, v35);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  return v45;
}

_QWORD *sub_100161D3C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = a3;
  v30 = a2;
  v4 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v4 - 8);
  v29 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ForecastEntry(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v25 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return _swiftEmptyArrayStorage;
  v15 = *(_QWORD *)(type metadata accessor for InstantWeather(0) - 8);
  v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(_QWORD *)(v15 + 72);
  v26 = a1;
  v27 = v17;
  v18 = swift_bridgeObjectRetain(a1);
  v19 = _swiftEmptyArrayStorage;
  do
  {
    InstantWeather.date.getter(v18);
    sub_10016136C(v16, (uint64_t)v6, v31, (uint64_t)v13);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v29);
    sub_10000F7C4((uint64_t)v13, (uint64_t)v11, type metadata accessor for ForecastEntry);
    if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
    {
      sub_10006FC10(0, v19[2] + 1, 1, (uint64_t)v19);
      v19 = v22;
    }
    v21 = v19[2];
    v20 = v19[3];
    if (v21 >= v20 >> 1)
    {
      sub_10006FC10(v20 > 1, v21 + 1, 1, (uint64_t)v19);
      v19 = v23;
    }
    v19[2] = v21 + 1;
    sub_100011868((uint64_t)v11, (uint64_t)v19+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v21, type metadata accessor for ForecastEntry);
    sub_100011894((uint64_t)v13, type metadata accessor for ForecastEntry);
    v16 += v27;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease(v26);
  return v19;
}

uint64_t sub_100161F54(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ForecastEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter(v11);
  sub_100161464((uint64_t)v8, a2, a3, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = sub_100005D40(&qword_1001C0F28);
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject(v14, v16 + *(_QWORD *)(v10 + 72), v15 | 7);
  *(_OWORD *)(v17 + 16) = xmmword_10017BD10;
  sub_100011868((uint64_t)v13, v17 + v16, type metadata accessor for ForecastEntry);
  return v17;
}

uint64_t sub_10016208C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for ForecastEntry(0);
  v7 = a3 + *(int *)(v6 + 24);
  sub_10012FC94();
  sub_100087EDC(*(_WORD *)(v7 + 48));
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a3, a2, v8);
  v9 = a3 + *(int *)(v6 + 28);
  sub_10000F7C4(a1, v9, type metadata accessor for AggregateWeatherViewModel);
  v10 = type metadata accessor for WeatherDataViewModel(0);
  swift_storeEnumTagMultiPayload(v9, v10, 0);
  v11 = type metadata accessor for ForecastEntry.Model(0);
  return swift_storeEnumTagMultiPayload(v9, v11, 1);
}

_QWORD *sub_100162188(void (*a1)(uint64_t, uint64_t), int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *result;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  void (*v103)(char *, uint64_t);
  void (*v104)(char *, uint64_t);
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  unsigned int v114;
  unsigned int v115;
  char *v116;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(uint64_t, uint64_t);
  void (*v133)(uint64_t, uint64_t);
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(char *, _QWORD, uint64_t);
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  _QWORD *v144;

  v6 = v5;
  v131 = a5;
  v126 = a4;
  v121 = a2;
  v9 = type metadata accessor for ForecastEntry(0);
  v120 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v119 = (uint64_t)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v118 = (uint64_t)&v105 - v12;
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v112 = *(_QWORD *)(HourPrecipitationChartViewModel - 8);
  __chkstk_darwin(HourPrecipitationChartViewModel);
  v111 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005D40(&qword_1001BFA38);
  v15 = __chkstk_darwin(v14);
  v110 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v116 = (char *)&v105 - v18;
  __chkstk_darwin(v17);
  v135 = (char *)&v105 - v19;
  v20 = type metadata accessor for CurrentObservationViewModel(0);
  __chkstk_darwin(v20);
  v142 = (uint64_t *)((char *)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v125 = type metadata accessor for Calendar.Component(0);
  v127 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v124 = (char *)&v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100005D40(&qword_1001BF0A0);
  __chkstk_darwin(v23);
  v123 = (char *)&v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for Calendar(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v26 = (char *)&v105 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for TimeZone(0);
  v136 = *(_QWORD *)(v27 - 8);
  v137 = v27;
  v28 = __chkstk_darwin(v27);
  v132 = (uint64_t (*)(uint64_t, uint64_t))((char *)&v105 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v28);
  v31 = (char *)&v105 - v30;
  v32 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  v33 = __chkstk_darwin(v32);
  v35 = (char *)&v105 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v37 = (char *)&v105 - v36;
  v130 = type metadata accessor for Date(0);
  v140 = *(_QWORD *)(v130 - 8);
  v38 = __chkstk_darwin(v130);
  v143 = (uint64_t)&v105 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v42 = (char *)&v105 - v41;
  v43 = __chkstk_darwin(v40);
  v45 = (char *)&v105 - v44;
  v46 = static Date.now.getter(v43);
  v129 = v42;
  v106 = v45;
  Date.zeroSeconds.getter(v46);
  v122 = v6;
  v139 = v37;
  v133 = a1;
  v47 = sub_1000A7A1C(a1, a3, 0, (uint64_t)v37);
  v134 = a3;
  v48 = v131;
  Location.timeZone.getter(v47);
  v128 = v26;
  v107 = v31;
  result = (_QWORD *)static Calendar.currentCalendar(with:)(v31);
  if (v48 < 0)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  if (v48)
  {
    v50 = 0;
    v115 = enum case for Calendar.Component.minute(_:);
    v114 = enum case for Calendar.Component.hour(_:);
    v51 = v128;
    v138 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v127 + 104);
    v144 = _swiftEmptyArrayStorage;
    v52 = (uint64_t)v135;
    v53 = v129;
    v54 = v130;
    v113 = v35;
    while (v48 != v50)
    {
      v55 = v124;
      v56 = v125;
      result = (_QWORD *)v138(v124, v115, v125);
      v57 = v126 * v50;
      if ((unsigned __int128)(v126 * (__int128)v50) >> 64 != (v126 * v50) >> 63)
        goto LABEL_24;
      v141 = v50;
      v58 = v52;
      v59 = (uint64_t)v123;
      Calendar.date(byAdding:value:to:wrappingComponents:)(v55, v57, v53, 0);
      v60 = v53;
      v61 = *(void (**)(char *, uint64_t))(v127 + 8);
      v61(v55, v56);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v59, 1, v54) == 1)
      {
        (*(void (**)(char *, uint64_t))(v108 + 8))(v51, v109);
        (*(void (**)(char *, uint64_t))(v136 + 8))(v107, v137);
        sub_100011894((uint64_t)v139, type metadata accessor for AggregateWeatherViewModel);
        v104 = *(void (**)(char *, uint64_t))(v140 + 8);
        v104(v60, v54);
        v104(v106, v54);
        sub_100016904(v59, &qword_1001BF0A0);
        return v144;
      }
      v62 = v143;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v140 + 32))(v143, v59, v54);
      v138(v55, v114, v56);
      v63 = Calendar.isDate(_:equalTo:toGranularity:)(v60, v62, v55);
      v64 = ((uint64_t (*)(char *, uint64_t))v61)(v55, v56);
      if ((v63 & 1) != 0)
      {
        v65 = (uint64_t)v139;
        sub_10000F7C4((uint64_t)&v139[v32[6]], (uint64_t)v142, type metadata accessor for CurrentObservationViewModel);
        v66 = swift_bridgeObjectRetain(*(_QWORD *)(v65 + v32[7]));
        v67 = HourPrecipitationChartViewModel;
        v68 = (uint64_t)v116;
        v69 = (uint64_t)v113;
        v70 = v58;
        v71 = v66;
      }
      else
      {
        v72 = v132;
        Location.timeZone.getter(v64);
        sub_100102BFC((uint64_t)v133, v72, 1, v142);
        (*(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t))(v136 + 8))(v72, v137);
        v65 = (uint64_t)v139;
        v73 = *(_QWORD *)&v139[v32[7]];
        sub_100160B18(1, v73, (void (*)(_QWORD))type metadata accessor for HourlyForecastViewModel);
        swift_bridgeObjectRetain(v73);
        v70 = (uint64_t)v135;
        sub_100160BE0();
        v71 = v74;
        v67 = HourPrecipitationChartViewModel;
        v68 = (uint64_t)v116;
        v69 = (uint64_t)v113;
      }
      v75 = v65 + v32[10];
      sub_1000168D8(v75, v70, &qword_1001BFA38);
      sub_1000168D8(v75, v68, &qword_1001BFA38);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v68, 1, v67) == 1)
      {
        sub_100016904(v68, &qword_1001BFA38);
        v77 = v141;
      }
      else
      {
        v78 = v112;
        v79 = v111;
        (*(void (**)(char *, uint64_t, uint64_t))(v112 + 32))(v111, v68, v67);
        v80 = (uint64_t)v110;
        v77 = v141;
        static NextHourPrecipitationChartViewModel.transform(viewModel:by:)(v79, v141);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v67);
        sub_100016904(v70, &qword_1001BFA38);
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v80, 0, 1, v67);
        sub_1000168AC(v80, v70, &qword_1001BFA38);
      }
      v81 = *(_QWORD *)(v122 + 32);
      v82 = (uint64_t)v132;
      v83 = v134;
      Location.timeZone.getter(v76);
      v84 = sub_1000255C8((uint64_t)v133, v82, v77, v81);
      v85 = (*(uint64_t (**)(uint64_t, uint64_t))(v136 + 8))(v82, v137);
      UUID.init()(v85);
      v86 = v69 + v32[5];
      v87 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v86, v83, v87);
      sub_10000F7C4((uint64_t)v142, v69 + v32[6], type metadata accessor for CurrentObservationViewModel);
      v88 = (uint64_t)v139;
      v89 = *(_QWORD *)&v139[v32[8]];
      sub_1000168D8((uint64_t)&v139[v32[9]], v69 + v32[9], &qword_1001BFA30);
      sub_1000168D8(v70, v69 + v32[10], &qword_1001BFA38);
      v90 = v88 + v32[12];
      v91 = *(_WORD *)(v90 + 8);
      v92 = *(_QWORD *)v90;
      sub_1000168D8(v88 + v32[13], v69 + v32[13], &qword_1001BFA28);
      v93 = v69 + v32[14];
      v94 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v93, 1, 1, v94);
      *(_QWORD *)(v69 + v32[7]) = v71;
      *(_QWORD *)(v69 + v32[8]) = v89;
      *(_QWORD *)(v69 + v32[11]) = v84;
      v95 = v69 + v32[12];
      *(_QWORD *)v95 = v92;
      *(_WORD *)(v95 + 8) = v91;
      swift_bridgeObjectRetain(v89);
      v96 = v118;
      sub_10016208C(v69, v143, v118);
      v97 = v119;
      sub_10000F7C4(v96, v119, type metadata accessor for ForecastEntry);
      if ((swift_isUniquelyReferenced_nonNull_native(v144) & 1) == 0)
      {
        sub_10006FC10(0, v144[2] + 1, 1, (uint64_t)v144);
        v144 = v101;
      }
      v48 = v131;
      v51 = v128;
      v99 = v144[2];
      v98 = v144[3];
      v52 = (uint64_t)v135;
      if (v99 >= v98 >> 1)
      {
        sub_10006FC10(v98 > 1, v99 + 1, 1, (uint64_t)v144);
        v144 = v102;
      }
      v50 = v141 + 1;
      v100 = v144;
      v144[2] = v99 + 1;
      sub_100011868(v97, (uint64_t)v100+ ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80))+ *(_QWORD *)(v120 + 72) * v99, type metadata accessor for ForecastEntry);
      sub_100011894(v96, type metadata accessor for ForecastEntry);
      sub_100011894(v69, type metadata accessor for AggregateWeatherViewModel);
      sub_100016904(v52, &qword_1001BFA38);
      sub_100011894((uint64_t)v142, type metadata accessor for CurrentObservationViewModel);
      v54 = v130;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v140 + 8))(v143, v130);
      v53 = v129;
      if (v48 == v50)
        goto LABEL_20;
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v144 = _swiftEmptyArrayStorage;
  v51 = v128;
  v53 = v129;
  v54 = v130;
LABEL_20:
  (*(void (**)(char *, uint64_t))(v108 + 8))(v51, v109);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v107, v137);
  sub_100011894((uint64_t)v139, type metadata accessor for AggregateWeatherViewModel);
  v103 = *(void (**)(char *, uint64_t))(v140 + 8);
  v103(v53, v54);
  v103(v106, v54);
  return v144;
}

void sub_100162C78(void (*a1)(uint64_t, uint64_t), int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t (*v39)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  int v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;

  v83 = a1;
  v80 = a4;
  v79 = a2;
  v5 = type metadata accessor for Calendar.Component(0);
  v76 = *(_QWORD *)(v5 - 8);
  v77 = v5;
  __chkstk_darwin(v5);
  v75 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005D40(&qword_1001BF0A0);
  __chkstk_darwin(v7);
  v78 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ForecastEntry(0);
  v85 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v66 - v17;
  v19 = __chkstk_darwin(v16);
  v72 = (char *)&v66 - v20;
  __chkstk_darwin(v19);
  v70 = (uint64_t)&v66 - v21;
  v22 = type metadata accessor for Calendar(0);
  v68 = *(_QWORD *)(v22 - 8);
  v69 = v22;
  __chkstk_darwin(v22);
  v24 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for TimeZone(0);
  v82 = *(char **)(v25 - 8);
  __chkstk_darwin(v25);
  v27 = (char *)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Date(0);
  v87 = *(_QWORD *)(v28 - 8);
  v88 = v28;
  v29 = __chkstk_darwin(v28);
  v86 = (char *)&v66 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v66 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v66 - v35;
  v37 = static Date.now.getter(v34);
  v38 = Location.timeZone.getter(v37);
  v81 = v33;
  Date.zeroMinutes(timeZone:)(v27, v38);
  v39 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v82 + 1);
  v40 = v39(v27, v25);
  Location.timeZone.getter(v40);
  v82 = v24;
  static Calendar.currentCalendar(with:)(v27);
  v41 = v27;
  v42 = (uint64_t)v72;
  v39(v41, v25);
  v43 = a3;
  v44 = v70;
  v67 = v36;
  v45 = v43;
  sub_10016126C(v83, (uint64_t)v36, v43, v70);
  sub_10000F7C4(v44, v42, type metadata accessor for ForecastEntry);
  sub_10006FC10(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  v47 = v46;
  v49 = *(_QWORD *)(v46 + 16);
  v48 = *(_QWORD *)(v46 + 24);
  v50 = v49 + 1;
  if (v49 >= v48 >> 1)
    goto LABEL_14;
  while (1)
  {
    *(_QWORD *)(v47 + 16) = v50;
    v74 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
    v73 = *(_QWORD *)(v85 + 72);
    sub_100011868(v42, v47 + v74 + v73 * v49, type metadata accessor for ForecastEntry);
    v51 = v80;
    v42 = (uint64_t)v78;
    if (v80 < 1)
      break;
    if (v80 == 1)
    {
LABEL_5:
      sub_100011894(v70, type metadata accessor for ForecastEntry);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v82, v69);
      v52 = v88;
      v53 = *(void (**)(char *, uint64_t))(v87 + 8);
      v53(v81, v88);
      v53(v67, v52);
      return;
    }
    v72 = (char *)(v84 + 48);
    v48 = enum case for Calendar.Component.hour(_:);
    v71 = enum case for Calendar.Component.hour(_:);
    v49 = 1;
    while (v51 != v49)
    {
      v85 = v47;
      v54 = (uint64_t)v18;
      v55 = (uint64_t)v15;
      sub_1000A7A1C(v83, v45, (_QWORD *)v49, (uint64_t)v11);
      v56 = v75;
      v57 = v76;
      v58 = v77;
      (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v75, v71, v77);
      Calendar.date(byAdding:value:to:wrappingComponents:)(v56, v49, v81, 0);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
      v59 = v88;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v42, 1, v88) == 1)
      {
        sub_100011894((uint64_t)v11, type metadata accessor for AggregateWeatherViewModel);
        sub_100011894(v70, type metadata accessor for ForecastEntry);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v82, v69);
        v64 = *(void (**)(char *, uint64_t))(v87 + 8);
        v64(v81, v59);
        v64(v67, v59);
        sub_100016904(v42, &qword_1001BF0A0);
        return;
      }
      v60 = (uint64_t)v86;
      (*(void (**)(char *, uint64_t, uint64_t))(v87 + 32))(v86, v42, v59);
      v18 = (char *)v54;
      sub_10016208C((uint64_t)v11, v60, v54);
      v15 = (char *)v55;
      sub_10000F7C4(v54, v55, type metadata accessor for ForecastEntry);
      v47 = v85;
      v62 = *(_QWORD *)(v85 + 16);
      v61 = *(_QWORD *)(v85 + 24);
      v50 = v62 + 1;
      if (v62 >= v61 >> 1)
      {
        sub_10006FC10(v61 > 1, v62 + 1, 1, v85);
        v47 = v63;
      }
      ++v49;
      *(_QWORD *)(v47 + 16) = v50;
      sub_100011868((uint64_t)v15, v47 + v74 + v62 * v73, type metadata accessor for ForecastEntry);
      sub_100011894(v54, type metadata accessor for ForecastEntry);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);
      sub_100011894((uint64_t)v11, type metadata accessor for AggregateWeatherViewModel);
      v51 = v80;
      v42 = (uint64_t)v78;
      if (v80 == v49)
        goto LABEL_5;
    }
    __break(1u);
LABEL_14:
    sub_10006FC10(v48 > 1, v50, 1, v47);
    v47 = v65;
  }
  __break(1u);
}

uint64_t sub_100163288()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  sub_100165490((_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 176));
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(v0 + 184));
  return v0;
}

uint64_t sub_1001632D4()
{
  uint64_t v0;

  sub_100163288();
  return swift_deallocClassInstance(v0, 224, 7);
}

uint64_t type metadata accessor for EntryFactory()
{
  return objc_opt_self(_TtC13WeatherWidget12EntryFactory);
}

unint64_t sub_100163314()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2E28;
  if (!qword_1001C2E28)
  {
    v1 = sub_100005DC4(&qword_1001C2DF8);
    result = swift_getWitnessTable(&protocol conformance descriptor for Forecast<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2E28);
  }
  return result;
}

uint64_t sub_100163358@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;

  v4 = sub_10008307C();
  v5 = sub_1001305C0(a2 + *(int *)(v4 + 24));
  static Date.now.getter(v5);
  v6 = sub_1001655A4();
  sub_100028878(v6);
  v7 = (_BYTE *)(a2 + *(int *)(v4 + 28));
  *v7 = a1;
  v8 = type metadata accessor for ForecastEntry.Model(0);
  return swift_storeEnumTagMultiPayload(v7, v8, 0);
}

void sub_1001633CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(_QWORD);
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int *v131;
  uint64_t v132;
  void (*v133)(char *, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t);
  uint64_t v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  char v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  int *v170;
  id v171;
  Swift::String v172;
  Swift::String v173;
  Swift::String v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(uint64_t, uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(uint64_t, uint64_t, uint64_t);
  uint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  char v212;
  uint64_t v213;
  char v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int *object;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void (*v246)(uint64_t, _QWORD, uint64_t);
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int *v257;
  uint64_t v258;
  uint64_t v259;
  int *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  void (*v289)(char *, uint64_t, uint64_t);
  void (*v290)(uint64_t, char *, uint64_t);
  uint64_t v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  Swift::String v305;

  sub_100070E5C();
  a19 = v21;
  a20 = v22;
  v304 = v20;
  v250 = v23;
  v254 = v24;
  v251 = type metadata accessor for WeatherDataViewModel(0);
  sub_100029068();
  __chkstk_darwin(v25);
  sub_1000230E0();
  v252 = v26;
  v27 = sub_100093378();
  type metadata accessor for WidgetContext(v27);
  sub_100029068();
  __chkstk_darwin(v28);
  sub_1000230E0();
  v253 = v29;
  v30 = sub_100093378();
  v305._object = (void *)type metadata accessor for AggregateWeatherViewModel(v30);
  sub_100029068();
  __chkstk_darwin(v31);
  sub_1000230E0();
  v249 = v32;
  sub_100005D40(&qword_1001BFA40);
  sub_100029068();
  __chkstk_darwin(v33);
  sub_1000230E0();
  v255 = v34;
  sub_100005D40(&qword_1001BF0A0);
  sub_100029068();
  __chkstk_darwin(v35);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v36);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v37);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v38);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v39);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v40);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v41);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v42);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v43);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v44);
  sub_1000232B4();
  v300 = v45;
  sub_100023164();
  __chkstk_darwin(v46);
  v299 = (uint64_t)&v245 - v47;
  v48 = sub_100093378();
  v49 = type metadata accessor for TemperatureScaleConfiguration(v48);
  sub_10002886C(v49, (uint64_t)&v300);
  v267 = v50;
  sub_1000230F4();
  __chkstk_darwin(v51);
  sub_1000230E0();
  v298 = v52;
  v53 = sub_100093378();
  v54 = type metadata accessor for AppConfiguration(v53);
  sub_10002886C(v54, (uint64_t)&v298);
  v265 = v55;
  sub_1000230F4();
  __chkstk_darwin(v56);
  sub_1000230E0();
  v264 = v57;
  v58 = sub_100093378();
  v59 = type metadata accessor for Precipitation(v58);
  v297 = *(_QWORD *)(v59 - 8);
  sub_1000230F4();
  __chkstk_darwin(v60);
  sub_1000230E0();
  v296 = v61;
  v62 = sub_100093378();
  v63 = type metadata accessor for UUID(v62);
  sub_10002886C(v63, (uint64_t)&v294);
  v261 = v64;
  sub_1000230F4();
  __chkstk_darwin(v65);
  sub_1000230E0();
  v295 = v66;
  v67 = sub_100093378();
  v68 = type metadata accessor for DailyForecastViewModel(v67);
  sub_10002886C(v68, (uint64_t)&v292);
  v259 = v69;
  sub_1000230F4();
  __chkstk_darwin(v70);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v71);
  v278 = (char *)&v245 - v72;
  v73 = sub_100093378();
  v74 = (int *)type metadata accessor for HourlyForecastViewModel(v73);
  v287 = *((_QWORD *)v74 - 1);
  sub_1000230F4();
  __chkstk_darwin(v75);
  sub_100023150();
  v301 = v76;
  sub_100023164();
  __chkstk_darwin(v77);
  v79 = (char *)&v245 - v78;
  v288 = type metadata accessor for CurrentObservationViewModel(0);
  sub_100029068();
  __chkstk_darwin(v80);
  sub_1000230E0();
  v280 = v81;
  v303 = sub_100005D40(&qword_1001BF090);
  v283 = *(_QWORD *)(v303 - 8);
  sub_1000230F4();
  __chkstk_darwin(v82);
  sub_100023150();
  v294 = v83;
  sub_100023164();
  __chkstk_darwin(v84);
  sub_1000232B4();
  v293 = v85;
  sub_100023164();
  __chkstk_darwin(v86);
  sub_1000232B4();
  v285 = v87;
  sub_100023164();
  __chkstk_darwin(v88);
  sub_1000232B4();
  v284 = v89;
  sub_100023164();
  __chkstk_darwin(v90);
  v282 = (uint64_t)&v245 - v91;
  v92 = sub_100093378();
  v93 = type metadata accessor for Date(v92);
  v277 = *(_QWORD *)(v93 - 8);
  sub_1000230F4();
  __chkstk_darwin(v94);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v95);
  sub_1000232B4();
  v292 = v96;
  sub_100023164();
  __chkstk_darwin(v97);
  v99 = (char *)&v245 - v98;
  v100 = type metadata accessor for ConditionViewModel(0);
  sub_100029068();
  __chkstk_darwin(v101);
  sub_100023150();
  v291 = v102;
  sub_100023164();
  __chkstk_darwin(v103);
  sub_1000232B4();
  sub_10002875C();
  v105 = __chkstk_darwin(v104);
  v107 = (char *)&v245 - v106;
  UUID.init()(v105);
  v108 = (uint64_t)v107;
  type metadata accessor for WeatherCondition(0);
  v109 = sub_100165574();
  v256 = v110;
  v246 = (void (*)(uint64_t, _QWORD, uint64_t))v111;
  v111(v109);
  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v112 = (id)qword_1001DA1E8;
  sub_1000E0294();
  v119 = sub_1001654DC(0x4320796C74726150, 0xED00007964756F6CLL, v113, v114, v115, v116, v117, v118);
  v121 = v120;

  v122 = (char *)(v108 + *(int *)(v100 + 24));
  strcpy(v122, "cloud.sun.fill");
  v122[15] = -18;
  v123 = (uint64_t *)(v108 + *(int *)(v100 + 28));
  *v123 = v119;
  v123[1] = v121;
  *(_BYTE *)(v108 + *(int *)(v100 + 32)) = 1;
  *(_BYTE *)(v108 + *(int *)(v100 + 36)) = 0;
  v257 = (int *)v100;
  *(_BYTE *)(v108 + *(int *)(v100 + 40)) = 0;
  v125 = static Date.now.getter(v124);
  v126 = v282;
  v127 = static Measurement<>.fahrenheit(_:)(v125, 72.0);
  v128 = static Measurement<>.fahrenheit(_:)(v127, 64.0);
  v129 = static Measurement<>.fahrenheit(_:)(v128, 88.0);
  v130 = v280;
  UUID.init()(v129);
  v131 = (int *)v288;
  v132 = v130 + *(int *)(v288 + 20);
  v290 = *(void (**)(uint64_t, char *, uint64_t))(v277 + 16);
  v290(v132, v99, v93);
  v302 = v99;
  static Date.+ infix(_:_:)(v99, 60.0);
  v133 = *(void (**)(char *, uint64_t, uint64_t))(v283 + 16);
  v134 = v303;
  sub_1001655B8(v130 + v131[7], v126);
  sub_1001655B8(v130 + v131[8], v126);
  sub_1001655B8(v130 + v131[10], v285);
  sub_10016551C();
  v135 = v130 + v131[11];
  v289 = v133;
  v133((char *)v135, v284, v134);
  sub_10016551C();
  v136 = v130 + v131[12];
  v279 = v108;
  sub_10000F7C4(v108, v136, type metadata accessor for ConditionViewModel);
  type metadata accessor for CloudAltitudeKind(0);
  v137 = sub_100165574();
  v138(v137);
  sub_1001654C4(v130 + v131[15]);
  sub_10016456C(v130 + v131[16]);
  v139 = 6;
  sub_1001655E8();
  sub_10016495C();
  v140 = (id)qword_1001DA1E8;
  sub_1000E0294();
  v147 = sub_1001654DC(4804929, 0xE300000000000000, v141, v142, v143, v144, v145, v146);
  v149 = v148;

  v151 = (_QWORD *)(v130 + v131[9]);
  *v151 = 0;
  v151[1] = 0xE000000000000000;
  *(_QWORD *)(v130 + v131[13]) = 0x3FD8000000000000;
  *(_QWORD *)(v130 + v131[19]) = 0;
  v152 = v130 + v131[20];
  *(_QWORD *)v152 = v147;
  *(_QWORD *)(v152 + 8) = v149;
  *(_OWORD *)(v152 + 16) = xmmword_100185A50;
  *(_BYTE *)(v152 + 32) = 0;
  LODWORD(v286) = enum case for Precipitation.none(_:);
  v153 = &_swiftEmptyArrayStorage;
  v154 = (uint64_t)v301;
  do
  {
    UUID.init()(v150);
    sub_10016554C((uint64_t)&v79[v74[5]]);
    v289(&v79[v74[6]], v282, v303);
    sub_10000F7C4(v279, (uint64_t)&v79[v74[9]], type metadata accessor for ConditionViewModel);
    v155 = &v79[v74[12]];
    v288 = *(_QWORD *)(v297 + 104);
    ((void (*)(char *, _QWORD, uint64_t))v288)(v155, v286, v59);
    sub_10016495C();
    v156 = &v79[v74[7]];
    *(_QWORD *)v156 = 2960685;
    *((_QWORD *)v156 + 1) = 0xE300000000000000;
    v157 = &v79[v74[8]];
    *(_QWORD *)v157 = 0;
    *((_QWORD *)v157 + 1) = 0xE000000000000000;
    *(_QWORD *)&v79[v74[10]] = 0x3FE3333333333333;
    v158 = &v79[v74[11]];
    *(_QWORD *)v158 = 0;
    *((_QWORD *)v158 + 1) = 0xE000000000000000;
    sub_10000F7C4((uint64_t)v79, v154, type metadata accessor for HourlyForecastViewModel);
    if ((swift_isUniquelyReferenced_nonNull_native(v153) & 1) != 0)
    {
      v159 = v153;
    }
    else
    {
      sub_10006FA3C(0, v153[2] + 1, 1, (uint64_t)v153);
      v159 = v163;
    }
    v161 = v159[2];
    v160 = v159[3];
    v154 = (uint64_t)v301;
    if (v161 >= v160 >> 1)
    {
      v164 = sub_1001655D4(v160);
      sub_10006FA3C(v164, v165, v166, v167);
      v159 = v168;
      v154 = (uint64_t)v301;
    }
    v159[2] = v161 + 1;
    v162 = (uint64_t)v159
         + ((*(unsigned __int8 *)(v287 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v287 + 80))
         + *(_QWORD *)(v287 + 72) * v161;
    v153 = v159;
    sub_100011868(v154, v162, type metadata accessor for HourlyForecastViewModel);
    sub_100011894((uint64_t)v79, type metadata accessor for HourlyForecastViewModel);
    --v139;
  }
  while (v139);
  v247 = v153;
  v169 = v281;
  UUID.init()(v150);
  v170 = v257;
  v246(v169 + v257[5], enum case for WeatherCondition.rain(_:), v256);
  v171 = (id)qword_1001DA1E8;
  sub_1000E0294();
  v172._countAndFlagsBits = 0x796E696152;
  v172._object = (void *)0xE500000000000000;
  v173._countAndFlagsBits = 0;
  v173._object = (void *)0xE000000000000000;
  v305._countAndFlagsBits = 0xD000000000000030;
  v174 = NSLocalizedString(_:tableName:bundle:value:comment:)(v172, (Swift::String_optional)0, (NSBundle)v171, v173, v305);

  v176 = (_QWORD *)(v169 + v170[6]);
  *v176 = 0x61722E64756F6C63;
  v176[1] = 0xEF6C6C69662E6E69;
  *(Swift::String *)(v169 + v170[7]) = v174;
  *(_BYTE *)(v169 + v170[8]) = 1;
  *(_BYTE *)(v169 + v170[9]) = 1;
  *(_BYTE *)(v169 + v170[10]) = 0;
  v177 = v304;
  v257 = (int *)(v304 + 184);
  LODWORD(v256) = enum case for Precipitation.rain(_:);
  v178 = &_swiftEmptyArrayStorage;
  v179 = 7;
  v180 = (uint64_t)v278;
  v263 = v59;
  do
  {
    v301 = v178;
    v287 = v179;
    UUID.init()(v175);
    sub_10016554C(v292);
    v181 = v303;
    v182 = (void (*)(uint64_t, uint64_t, uint64_t))v289;
    v289(v293, v285, v303);
    v182(v294, v284, v181);
    sub_10000F7C4(v281, v291, type metadata accessor for ConditionViewModel);
    ((void (*)(uint64_t, _QWORD, uint64_t))v288)(v296, v256, v59);
    v184 = *(_QWORD *)(v177 + 208);
    v183 = *(_QWORD *)(v177 + 216);
    sub_100022330(v257, v184);
    v185 = v264;
    v186 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v184, v183);
    AppConfiguration.temperatureScale.getter(v186);
    (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v185, v266);
    v187 = v260;
    v286 = v180 + v260[16];
    sub_1001654C4(v299);
    sub_1001654C4(v300);
    v188 = v269;
    sub_1001654C4(v269);
    v189 = v270;
    sub_1001654C4(v270);
    v190 = v271;
    sub_1001654C4(v271);
    v191 = v272;
    sub_10016456C(v272);
    v192 = v273;
    sub_1001654C4(v273);
    v193 = v274;
    sub_1001654C4(v274);
    v194 = v275;
    sub_1001654C4(v275);
    v195 = v276;
    sub_1001654C4(v276);
    v249 = v195;
    v196 = v286;
    v197 = v190;
    v180 = (uint64_t)v278;
    v198 = v192;
    v59 = v263;
    SunEvents.init(astronomicalDawn:nauticalDawn:civilDawn:sunrise:solarNoon:sunset:civilDusk:nauticalDusk:astronomicalDusk:solarMidnight:)(v299, v300, v188, v189, v197, v191, v198, v193, v194, v249);
    v199 = type metadata accessor for SunEvents(0);
    sub_1001654D4(v196, 0, v200, v199);
    sub_100164B10(v180 + v187[17]);
    sub_1001655E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v261 + 32))(v180, v295, v262);
    sub_100044440(v180 + v187[5], v292);
    v201 = *(void (**)(uint64_t, uint64_t, uint64_t))(v283 + 32);
    v202 = v303;
    v201(v180 + v187[6], (uint64_t)v293, v303);
    v201(v180 + v187[7], v294, v202);
    sub_100011868(v291, v180 + v187[8], type metadata accessor for ConditionViewModel);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v297 + 32))(v180 + v187[9], v296, v59);
    *(_QWORD *)(v180 + v187[10]) = 0x3FE3333333333333;
    v203 = (_QWORD *)(v180 + v187[11]);
    *v203 = 0;
    v203[1] = 0;
    v204 = (_QWORD *)(v180 + v187[12]);
    *v204 = 0;
    v204[1] = 0xE000000000000000;
    v205 = (_QWORD *)(v180 + v187[13]);
    *v205 = 0;
    v205[1] = 0xE000000000000000;
    v206 = (_QWORD *)(v180 + v187[14]);
    *v206 = 0;
    v206[1] = 0xE000000000000000;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v267 + 32))(v180 + v187[15], v298, v268);
    *(_QWORD *)(v180 + v187[19]) = 0;
    v207 = v258;
    sub_10000F7C4(v180, v258, type metadata accessor for DailyForecastViewModel);
    v178 = v301;
    if ((swift_isUniquelyReferenced_nonNull_native(v301) & 1) == 0)
    {
      sub_10006FBF0(0, v178[2] + 1, 1, (uint64_t)v178);
      v178 = v211;
    }
    v209 = v178[2];
    v208 = v178[3];
    v210 = v280;
    if (v209 >= v208 >> 1)
    {
      v212 = sub_1001655D4(v208);
      sub_10006FBF0(v212, v213, v214, (uint64_t)v178);
      v178 = v215;
    }
    v178[2] = v209 + 1;
    sub_100011868(v207, (uint64_t)v178+ ((*(unsigned __int8 *)(v259 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v259 + 80))+ *(_QWORD *)(v259 + 72) * v209, type metadata accessor for DailyForecastViewModel);
    sub_100011894(v180, type metadata accessor for DailyForecastViewModel);
    v179 = v287 - 1;
    v177 = v304;
  }
  while (v287 != 1);
  v301 = v178;
  v216 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  v217 = v255;
  sub_1001655F4(v255, 1);
  v218 = v248;
  sub_10016456C(v248);
  v219 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v218, 1, v93);
  v220 = v252;
  if (v219 == 1)
  {
    sub_100016904(v218, &qword_1001BF0A0);
  }
  else
  {
    sub_100016904(v217, &qword_1001BFA40);
    v222 = v220;
    v223 = v245;
    sub_100044440(v245, v218);
    v224 = v223;
    v220 = v222;
    sub_100044440(v217, v224);
    swift_storeEnumTagMultiPayload(v217, v216, 1);
    v221 = sub_1001655F4(v217, 0);
  }
  v225 = v249;
  v226 = UUID.init()(v221);
  object = (int *)v305._object;
  WCDefaultCityManager.defaultLocation()(v226);
  v228 = v225 + object[9];
  sub_1001651E4(v228);
  v229 = type metadata accessor for AirQualityViewModel(0);
  sub_1001654D4(v228, 0, v230, v229);
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  sub_100028878(HourPrecipitationChartViewModel);
  v232 = type metadata accessor for URL(0);
  sub_100028878(v232);
  sub_1000168D8(v255, v225 + object[14], &qword_1001BFA40);
  sub_10000F7C4(v210, v225 + object[6], type metadata accessor for CurrentObservationViewModel);
  *(_QWORD *)(v225 + object[7]) = v247;
  *(_QWORD *)(v225 + object[8]) = v301;
  *(_QWORD *)(v225 + object[11]) = &_swiftEmptyArrayStorage;
  v233 = v225 + object[12];
  *(_QWORD *)v233 = 0x2010004020100;
  *(_WORD *)(v233 + 8) = 1;
  v234 = v253;
  v235 = sub_1001305C0(v253);
  if (v250 == 192)
  {
    static SunriseSunsetViewModel.placeholderModel.getter(v235);
    v236 = 2;
  }
  else
  {
    sub_10000F7C4(v225, v220, type metadata accessor for AggregateWeatherViewModel);
    v236 = 0;
  }
  v238 = v284;
  v237 = v285;
  swift_storeEnumTagMultiPayload(v220, v251, v236);
  sub_100011894(v225, type metadata accessor for AggregateWeatherViewModel);
  sub_100016904(v255, &qword_1001BFA40);
  v239 = v220;
  sub_100165600((uint64_t)&a16);
  sub_100011894(v210, type metadata accessor for CurrentObservationViewModel);
  sub_1001655B0(v237);
  sub_1001655B0(v238);
  sub_1001655B0(v282);
  sub_100165600((uint64_t)&a14);
  v240 = sub_10008307C();
  v241 = v254;
  v242 = sub_1001655A4();
  sub_100028878(v242);
  v243 = v241 + *(int *)(v240 + 28);
  sub_100011868(v239, v243, type metadata accessor for WeatherDataViewModel);
  v244 = type metadata accessor for ForecastEntry.Model(0);
  swift_storeEnumTagMultiPayload(v243, v244, 1);
  sub_100044440(v241, (uint64_t)v302);
  sub_100011868(v234, v241 + *(int *)(v240 + 24), type metadata accessor for WidgetContext);
  sub_10001C770();
}

uint64_t sub_10016456C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v48 = a1;
  v1 = type metadata accessor for Calendar.Component(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001BF0A0);
  v6 = __chkstk_darwin(v5);
  v39 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v36 - v8;
  v49 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v49 - 8);
  v10 = __chkstk_darwin(v49);
  v38 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - v12;
  v46 = type metadata accessor for Calendar(0);
  v43 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for TimeZone(0);
  v41 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for Location(0);
  v40 = *(_QWORD *)(v42 - 8);
  v18 = __chkstk_darwin(v42);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = WCDefaultCityManager.defaultLocation()(v18);
  Location.timeZone.getter(v21);
  v22 = static Calendar.currentCalendar(with:)(v17);
  Date.init()(v22);
  v23 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
  v23(v4, enum case for Calendar.Component.hour(_:), v1);
  v44 = v13;
  Calendar.date(bySetting:value:of:)(v4, 19, v13);
  v24 = *(void (**)(char *, uint64_t))(v2 + 8);
  v25 = v1;
  v26 = v1;
  v27 = v49;
  v24(v4, v26);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v27) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v27);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v46);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v45);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v42);
  }
  else
  {
    v28 = v9;
    v29 = v47;
    v30 = v38;
    v37 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
    v37(v38, v28, v27);
    v23(v4, enum case for Calendar.Component.minute(_:), v25);
    v31 = (uint64_t)v39;
    Calendar.date(bySetting:value:of:)(v4, 32, v30);
    v27 = v49;
    v24(v4, v25);
    v32 = *(void (**)(char *, uint64_t))(v29 + 8);
    v32(v30, v27);
    v32(v44, v27);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v46);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v45);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v42);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v31, 1, v27) != 1)
    {
      v33 = v48;
      v37((char *)v48, (char *)v31, v27);
      v34 = 0;
      return _s13WeatherWidget20WeatherDataViewModelOwst_0(v33, v34, 1, v27);
    }
    v9 = (char *)v31;
  }
  v33 = v48;
  sub_100016904((uint64_t)v9, &qword_1001BF0A0);
  v34 = 1;
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v33, v34, 1, v27);
}

uint64_t sub_10016495C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v14;

  v0 = sub_100005D40(&qword_1001C70E8);
  __chkstk_darwin(v0);
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005D40(&qword_1001C08B0);
  __chkstk_darwin(v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005D40(&qword_1001C6DA8);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(NSUnitAngle), "degrees");
  v10 = sub_100070744(0, &qword_1001C70F0, NSUnitAngle_ptr);
  Measurement.init(value:unit:)(v9, v10, 45.0);
  v11 = objc_msgSend((id)objc_opt_self(NSUnitSpeed), "milesPerHour");
  v12 = sub_100070744(0, &qword_1001C70F8, NSUnitSpeed_ptr);
  Measurement.init(value:unit:)(v11, v12, 22.0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v3);
  return Wind.init(compassDirection:direction:speed:gust:)(2, v8, v5, v2);
}

uint64_t sub_100164B10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t);
  void (*v44)(_BYTE *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v62;
  void (*v63)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_BYTE *, uint64_t);
  _BYTE v70[12];
  unsigned int v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  _BYTE *v78;
  void (*v79)(_QWORD);
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v91 = a1;
  v1 = type metadata accessor for Calendar.Component(0);
  v80 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = &v70[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_100005D40(&qword_1001BF0A0);
  v5 = __chkstk_darwin(v4);
  v74 = &v70[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v5);
  v73 = &v70[-v8];
  v9 = __chkstk_darwin(v7);
  v75 = &v70[-v10];
  v11 = __chkstk_darwin(v9);
  v77 = &v70[-v12];
  v13 = __chkstk_darwin(v11);
  v81 = &v70[-v14];
  __chkstk_darwin(v13);
  v16 = &v70[-v15];
  v17 = type metadata accessor for Date(0);
  v92 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v72 = &v70[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = __chkstk_darwin(v18);
  v76 = &v70[-v21];
  v22 = __chkstk_darwin(v20);
  v78 = &v70[-v23];
  v24 = __chkstk_darwin(v22);
  v26 = &v70[-v25];
  __chkstk_darwin(v24);
  v28 = &v70[-v27];
  v90 = type metadata accessor for Calendar(0);
  v87 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v30 = &v70[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v88 = type metadata accessor for TimeZone(0);
  v85 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v32 = &v70[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v86 = type metadata accessor for Location(0);
  v83 = *(_QWORD *)(v86 - 8);
  v33 = __chkstk_darwin(v86);
  v35 = &v70[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = WCDefaultCityManager.defaultLocation()(v33);
  v82 = v35;
  Location.timeZone.getter(v36);
  v84 = v32;
  v37 = static Calendar.currentCalendar(with:)(v32);
  Date.init()(v37);
  v38 = enum case for Calendar.Component.hour(_:);
  v39 = v80;
  v79 = *(void (**)(_QWORD))(v80 + 104);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v79)(v3, enum case for Calendar.Component.hour(_:), v1);
  v89 = v28;
  v40 = v28;
  v41 = v30;
  v42 = v17;
  Calendar.date(bySetting:value:of:)(v3, 14, v40);
  v43 = *(void (**)(_BYTE *, uint64_t))(v39 + 8);
  v43(v3, v1);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v42) == 1)
  {
    v44 = *(void (**)(_BYTE *, uint64_t))(v92 + 8);
  }
  else
  {
    v45 = v92;
    v80 = *(_QWORD *)(v92 + 32);
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v80)(v26, v16, v42);
    v71 = enum case for Calendar.Component.minute(_:);
    v79(v3);
    v46 = (uint64_t)v81;
    Calendar.date(bySetting:value:of:)(v3, 38, v26);
    v43(v3, v1);
    v47 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v46, 1, v42);
    v48 = v26;
    if (v47 == 1)
    {
      v44 = *(void (**)(_BYTE *, uint64_t))(v45 + 8);
      v44(v26, v42);
      v16 = v81;
    }
    else
    {
      v49 = v78;
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v80)(v78, v81, v42);
      v50 = v38;
      v51 = v49;
      ((void (*)(_BYTE *, uint64_t, uint64_t))v79)(v3, v50, v1);
      v52 = (uint64_t)v77;
      Calendar.date(byAdding:value:to:wrappingComponents:)(v3, 10, v49, 0);
      v53 = v52;
      v43(v3, v1);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v52, 1, v42) == 1)
      {
        v44 = *(void (**)(_BYTE *, uint64_t))(v92 + 8);
        v44(v51, v42);
        v44(v48, v42);
        v16 = (_BYTE *)v52;
      }
      else
      {
        v54 = v48;
        v55 = v76;
        ((void (*)(_BYTE *, uint64_t, uint64_t))v80)(v76, v53, v42);
        ((void (*)(_BYTE *, _QWORD, uint64_t))v79)(v3, v71, v1);
        v16 = v75;
        Calendar.date(byAdding:value:to:wrappingComponents:)(v3, -16, v55, 0);
        v43(v3, v1);
        v56 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v42);
        v57 = v92;
        if (v56 != 1)
        {
          v62 = v72;
          ((void (*)(_BYTE *, _BYTE *, uint64_t))v80)(v72, v16, v42);
          v63 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v57 + 16);
          v64 = v57;
          v65 = v51;
          v66 = (uint64_t)v73;
          v63(v73, v65, v42);
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v66, 0, 1, v42);
          v67 = v42;
          v68 = (uint64_t)v74;
          v63(v74, v62, v67);
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v68, 0, 1, v67);
          v58 = v91;
          MoonEvents.init(phase:moonrise:moonset:)(2, v66, v68);
          v69 = *(void (**)(_BYTE *, uint64_t))(v64 + 8);
          v69(v62, v67);
          v69(v76, v67);
          v69(v65, v67);
          v69(v54, v67);
          v69(v89, v67);
          (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v41, v90);
          (*(void (**)(_BYTE *, uint64_t))(v85 + 8))(v84, v88);
          (*(void (**)(_BYTE *, uint64_t))(v83 + 8))(v82, v86);
          v59 = 0;
          goto LABEL_10;
        }
        v44 = *(void (**)(_BYTE *, uint64_t))(v92 + 8);
        v44(v55, v42);
        v44(v51, v42);
        v44(v54, v42);
      }
    }
  }
  v58 = v91;
  v44(v89, v42);
  (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v41, v90);
  (*(void (**)(_BYTE *, uint64_t))(v85 + 8))(v84, v88);
  (*(void (**)(_BYTE *, uint64_t))(v83 + 8))(v82, v86);
  sub_100016904((uint64_t)v16, &qword_1001BF0A0);
  v59 = 1;
LABEL_10:
  v60 = type metadata accessor for MoonEvents(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v58, v59, 1, v60);
}

uint64_t sub_1001651E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;

  v2 = type metadata accessor for AirQualityScaleGradient(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AirQualityViewModel(0);
  v6 = a1 + *(int *)(v5 + 32);
  AirQualityScaleCategory.init(description:number:color:recommendation:range:glyph:)(0, 0xE000000000000000, 42, 0, 0xE000000000000000, 0, 0, 0, 500, 0, 0);
  v7 = sub_100005D40(&qword_1001C70E0);
  v8 = type metadata accessor for AirQualityScaleCategory(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v7, v11 + *(_QWORD *)(v9 + 72), v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10017BD10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12 + v11, v6, v8);
  AirQualityScaleGradient.init(stops:)(&_swiftEmptyArrayStorage);
  v16 = 1;
  v13 = AirQualityScale.init(identifier:displayName:shortDisplayName:longDisplayName:displayLabel:isNumerical:range:categories:gradient:)(0, 0xE000000000000000, 0, 0xE000000000000000, 0, 0xE000000000000000, 0, 0xE000000000000000, 0, 0xE000000000000000, v16, 0, 500, v12, v4);
  v14 = UUID.init()(v13);
  result = Date.init()(v14);
  *(_QWORD *)(a1 + *(int *)(v5 + 24)) = 42;
  return result;
}

void sub_100165388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)(_QWORD);
  void (*v4)(uint64_t, uint64_t, char *);
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, char *);
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v20;

  sub_100070E5C();
  v6 = v5 >> 1;
  v7 = (v5 >> 1) - v1;
  if (__OFSUB__(v5 >> 1, v1))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!v7)
    goto LABEL_14;
  v8 = v4;
  v9 = v3;
  v10 = v1;
  v11 = v0;
  if (v7 > 0)
  {
    v12 = sub_100005D40(v2);
    v13 = *(_QWORD *)(v9(0) - 8);
    v14 = *(_QWORD *)(v13 + 72);
    v15 = *(unsigned __int8 *)(v13 + 80);
    v16 = (v15 + 32) & ~v15;
    v17 = (_QWORD *)swift_allocObject(v12, v16 + v14 * v7, v15 | 7);
    v18 = j__malloc_size(v17);
    if (v14)
    {
      if (v18 - v16 != 0x8000000000000000 || v14 != -1)
      {
        v17[2] = v7;
        v17[3] = 2 * ((uint64_t)(v18 - v16) / v14);
        goto LABEL_12;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v17 = &_swiftEmptyArrayStorage;
LABEL_12:
  if (v6 != v10)
  {
    v20 = v9(0);
    v8(v11 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v10, v7, (char *)v17+ ((*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80)));
LABEL_14:
    sub_10001C770();
    return;
  }
LABEL_18:
  __break(1u);
}

_QWORD *sub_100165490(_QWORD *a1)
{
  destroy for AggregateWeatherViewModelFactory(a1);
  return a1;
}

uint64_t sub_1001654C4(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 1, 1, v1);
}

uint64_t sub_1001654D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, 1, a4);
}

uint64_t sub_1001654DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSBundle v8;
  Swift::String v9;

  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, (Swift::String_optional)0, v8, v9, *(Swift::String *)&a8)._countAndFlagsBits;
}

uint64_t sub_1001654F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v3, v1, v2);
}

uint64_t sub_100165508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
}

uint64_t sub_10016551C()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 0, 1, v1);
}

uint64_t sub_100165530()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016554C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 - 208))(a1, *(_QWORD *)(v2 - 112), v1);
}

uint64_t sub_10016555C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100165574()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016559C()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1001655A4()
{
  return type metadata accessor for TimelineEntryRelevance(0);
}

uint64_t sub_1001655B0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1001655B8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1001655C0()
{
  uint64_t v0;

  return v0;
}

BOOL sub_1001655D4@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1001655E8()
{
  return UVIndex.init(value:category:)(6, 2);
}

uint64_t sub_1001655F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, 1, v2);
}

void sub_100165600(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD);

  sub_100011894(*(_QWORD *)(a1 - 256), v1);
}

unint64_t sub_100165610()
{
  unint64_t result;

  result = qword_1001C7108;
  if (!qword_1001C7108)
  {
    result = swift_getWitnessTable(&unk_100185AF8, &type metadata for WeatherSettingsIntentsExtension);
    atomic_store(result, (unint64_t *)&qword_1001C7108);
  }
  return result;
}

uint64_t sub_10016564C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10016568C();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of AppIntentsExtension.configuration>>, 1);
}

unint64_t sub_10016568C()
{
  unint64_t result;

  result = qword_1001C7110;
  if (!qword_1001C7110)
  {
    result = swift_getWitnessTable(&unk_100185AD0, &type metadata for WeatherSettingsIntentsExtension);
    atomic_store(result, (unint64_t *)&qword_1001C7110);
  }
  return result;
}

uint64_t sub_1001656C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016568C();
  return AppIntentsExtension.configuration.getter(a1, v2);
}

ValueMetadata *type metadata accessor for WeatherSettingsIntentsExtension()
{
  return &type metadata for WeatherSettingsIntentsExtension;
}

ValueMetadata *type metadata accessor for HomeWorkShowLabelsControlWidget()
{
  return &type metadata for HomeWorkShowLabelsControlWidget;
}

uint64_t sub_100165720(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A178C, 1);
}

uint64_t sub_100165730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v0 = sub_100005D40(&qword_1001C6D78);
  v39 = *(_QWORD *)(v0 - 8);
  sub_1000230F4();
  __chkstk_darwin(v1);
  sub_10002325C();
  v4 = v3 - v2;
  v5 = sub_100005D40(&qword_1001C6D80);
  v41 = *(_QWORD *)(v5 - 8);
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_10002325C();
  v9 = v8 - v7;
  v42 = sub_100005D40(&qword_1001C6D88);
  v43 = *(_QWORD *)(v42 - 8);
  sub_1000230F4();
  __chkstk_darwin(v10);
  sub_10002325C();
  v13 = v12 - v11;
  v44 = sub_100005D40(&qword_1001C6D90);
  v45 = *(_QWORD *)(v44 - 8);
  sub_1000230F4();
  __chkstk_darwin(v14);
  sub_10002325C();
  v40 = v16 - v15;
  KeyPath = swift_getKeyPath(&unk_100185BC0);
  v18 = sub_100129D2C();
  ControlToggle.init<A, B, C, D, E, F, G>(kind:intentUpdatableProperty:title:subtitle:value:)(0xD00000000000002CLL, 0x800000010018A980, KeyPath, sub_100165A58, 0, sub_100158D88, 0, sub_100158E04, 0, &type metadata for Text, &type metadata for Text, &type metadata for Text, v18, &protocol witness table for Text, &protocol witness table for Text, &protocol witness table for Text);
  v19 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x800000010018A9B0);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v26 = sub_100158E90();
  WidgetConfiguration.configurationDisplayName(_:)(v19, v21, v23 & 1, v25, v0, v26);
  swift_bridgeObjectRelease(v25);
  v27 = swift_bridgeObjectRelease(v21);
  (*(void (**)(uint64_t, uint64_t, __n128))(v39 + 8))(v4, v0, v27);
  v28 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000019, 0x800000010018A9D0);
  v30 = v29;
  LOBYTE(v4) = v31;
  v33 = v32;
  v46 = v0;
  v47 = v26;
  v34 = sub_10004516C((uint64_t)&v46, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.description(_:)(v28, v30, v4 & 1, v33, v5, v34);
  swift_bridgeObjectRelease(v33);
  v35 = swift_bridgeObjectRelease(v30);
  (*(void (**)(uint64_t, uint64_t, __n128))(v41 + 8))(v9, v5, v35);
  v46 = v5;
  v47 = v34;
  v36 = sub_10004516C((uint64_t)&v46, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  WidgetConfiguration.disablesControlStateCaching()(v42, v36);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v13, v42);
  v46 = v42;
  v47 = v36;
  v37 = sub_10004516C((uint64_t)&v46, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>);
  WidgetConfiguration.hiddenControl()(v44, v37);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v40, v44);
}

uint64_t sub_100165A58@<X0>(uint64_t a1@<X8>)
{
  return sub_100158DA0(0x646E6120656D6F48, 0xED00006B726F5720, a1);
}

uint64_t sub_100165A84(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t refreshed;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _QWORD v46[3];

  *(_BYTE *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  if (qword_1001BEEA0 != -1)
    swift_once(&qword_1001BEEA0, sub_10011DE10);
  Container.resolver.getter(v46);
  sub_100170C70(v46);
  v4 = sub_100005D40(&qword_1001C3BC8);
  result = (uint64_t)sub_100170868(v4, v5, v6, v7, v8, v9, v10, v11, v44);
  if (!v45)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_100096428(&v44, v3 + 40);
  sub_10017088C(v46);
  v13 = type metadata accessor for WeatherDataService();
  result = sub_100170814(v13);
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(_QWORD *)(v3 + 80) = result;
  sub_10017088C(v46);
  v14 = type metadata accessor for EntryFactory();
  result = sub_100170814(v14);
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  *(_QWORD *)(v3 + 88) = result;
  sub_10017088C(v46);
  refreshed = type metadata accessor for RefreshPolicyProvider();
  result = sub_100170814(refreshed);
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *(_QWORD *)(v3 + 96) = result;
  sub_10017088C(v46);
  v16 = type metadata accessor for WidgetLocationManager();
  result = sub_100170814(v16);
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *(_QWORD *)(v3 + 104) = result;
  v17 = sub_10017088C(v46);
  v18 = type metadata accessor for StubPPTWeatherDataManager(v17);
  result = sub_100170814(v18);
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *(_QWORD *)(v3 + 112) = result;
  sub_10017088C(v46);
  v19 = type metadata accessor for DemoManager();
  result = sub_100170814(v19);
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(_QWORD *)(v3 + 120) = result;
  sub_100170C70(v46);
  v20 = sub_100005D40(&qword_1001C3B78);
  result = (uint64_t)sub_100170868(v20, v21, v22, v23, v24, v25, v26, v27, v44);
  if (!v45)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_100096428(&v44, v3 + 128);
  sub_100170C70(v46);
  v28 = sub_100005D40(&qword_1001C7268);
  result = (uint64_t)sub_100170868(v28, v29, v30, v31, v32, v33, v34, v35, v44);
  if (!v45)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sub_100096428(&v44, v3 + 168);
  sub_100170C70(v46);
  v36 = sub_100005D40(&qword_1001C7270);
  result = (uint64_t)sub_100170868(v36, v37, v38, v39, v40, v41, v42, v43, v44);
  if (v45)
  {
    sub_100096428(&v44, v3 + 208);
    sub_100165C94();
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v46);
    return v3;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_100165C94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = type metadata accessor for AppConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UnitSetupManager(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = UnitSetupManager.init()();
  v8 = v0[8];
  v7 = v0[9];
  sub_100022330(v0 + 5, v8);
  dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v8, v7);
  UnitSetupManager.setupWidget(appConfiguration:)(v4);
  swift_release(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_100165D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for SettingReader(0);
  v0 = ((uint64_t (*)(void))static SettingReader.shared.getter)();
  v1 = static Settings.WeatherEnvironment.contentEnvironment.getter();
  SettingReader.read<A>(_:)(&v14);
  swift_release(v0);
  swift_release(v1);
  v2 = ContentEnvironment.rawValue.getter(v14);
  v4 = v3;
  v5 = ContentEnvironment.rawValue.getter(6);
  if (v2 == v5 && v4 == v6)
  {
    result = swift_bridgeObjectRelease_n(v4, 2);
    goto LABEL_8;
  }
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  result = 0;
  if ((v9 & 1) != 0)
  {
LABEL_8:
    v11 = static SettingReader.shared.getter(result);
    v12 = static Settings.WeatherEnvironment.localServerPort.getter();
    SettingReader.read<A>(_:)(&v13);
    swift_release(v11);
    swift_release(v12);
    return v13 == 0;
  }
  return result;
}

#error "1001660D8: call analysis failed (funcsize=248)"

void sub_10016627C(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v3 = v2;
  LODWORD(v4) = a1;
  v66 = a2;
  v67 = type metadata accessor for TimelineReloadPolicy(0);
  v65 = *(_QWORD *)(v67 - 8);
  v5 = __chkstk_darwin(v67);
  v64 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v57 - v7;
  v9 = type metadata accessor for ForecastEntry(0);
  v62 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v57 - v14;
  __chkstk_darwin(v13);
  v68 = (uint64_t)&v57 - v16;
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100025184(v17, (uint64_t)qword_1001D9FF0);
  v19 = swift_retain(v3);
  v60 = (char *)v18;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = os_log_type_enabled(v20, v21);
  v63 = v8;
  v61 = v9;
  if (v22)
  {
    v23 = swift_slowAlloc(32, -1);
    v24 = swift_slowAlloc(64, -1);
    v59 = v4;
    v4 = v24;
    v70 = v24;
    *(_DWORD *)v23 = 136315651;
    v58 = v12;
    v25 = v15;
    v27 = *(_QWORD *)(v3 + 24);
    v26 = *(_QWORD *)(v3 + 32);
    swift_bridgeObjectRetain(v26);
    v69 = sub_10016EC84(v27, v26, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v23 + 4);
    swift_release(v3);
    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v23 + 12) = 2160;
    v69 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v23 + 14);
    *(_WORD *)(v23 + 22) = 2081;
    LOBYTE(v69) = v59;
    v28 = String.init<A>(reflecting:)(&v69, &type metadata for ForecastEntry.Error);
    v30 = v29;
    v69 = sub_10016EC84(v28, v29, &v70);
    v8 = v63;
    v15 = v25;
    v12 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v23 + 24);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "About to build an error timeline for %s. error=%{private,mask.hash}s", (uint8_t *)v23, 0x20u);
    swift_arrayDestroy(v4, 2);
    v31 = v4;
    LOBYTE(v4) = v59;
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_release(v3);
  }
  v32 = v68;
  sub_100163358(v4, v68);
  v33 = v4;
  v35 = *(_QWORD *)(v3 + 24);
  v34 = *(_QWORD *)(v3 + 32);
  sub_100024F44(v33, v35, v34, (uint64_t)v8);
  sub_10004D258(v32, (uint64_t)v15, type metadata accessor for ForecastEntry);
  v36 = swift_retain(v3);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v39 = swift_slowAlloc(32, -1);
    v60 = v15;
    v40 = v39;
    v41 = swift_slowAlloc(64, -1);
    v70 = v41;
    *(_DWORD *)v40 = 136315651;
    swift_bridgeObjectRetain(v34);
    v69 = sub_10016EC84(v35, v34, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v40 + 4);
    swift_release(v3);
    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v40 + 12) = 2160;
    v69 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v40 + 14);
    *(_WORD *)(v40 + 22) = 2081;
    v42 = (uint64_t)v60;
    sub_10004D258((uint64_t)v60, (uint64_t)v12, type metadata accessor for ForecastEntry);
    v43 = v12;
    v44 = v61;
    v45 = String.init<A>(describing:)(v43, v61);
    v47 = v46;
    v69 = sub_10016EC84(v45, v46, &v70);
    v8 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v40 + 24);
    swift_bridgeObjectRelease(v47);
    sub_100011894(v42, type metadata accessor for ForecastEntry);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Returning error timeline for %s. entry=%{private,mask.hash}s", (uint8_t *)v40, 0x20u);
    swift_arrayDestroy(v41, 2);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {
    swift_release(v3);
    sub_100011894((uint64_t)v15, type metadata accessor for ForecastEntry);

    v44 = v61;
  }
  v48 = sub_100005D40(&qword_1001C0F28);
  v49 = *(unsigned __int8 *)(v62 + 80);
  v50 = (v49 + 32) & ~v49;
  v51 = swift_allocObject(v48, v50 + *(_QWORD *)(v62 + 72), v49 | 7);
  *(_OWORD *)(v51 + 16) = xmmword_10017BD10;
  v52 = v68;
  sub_10004D258(v68, v51 + v50, type metadata accessor for ForecastEntry);
  v54 = v64;
  v53 = v65;
  v55 = v67;
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v64, v8, v67);
  v56 = sub_100168644();
  Timeline.init(entries:policy:)(v51, v54, v44, v56);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v8, v55);
  sub_100011894(v52, type metadata accessor for ForecastEntry);
}

void sub_100166854(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v4 = v3;
  v80 = a1;
  v83 = a3;
  v74 = type metadata accessor for WeatherDataOperationResult.Data(0);
  __chkstk_darwin(v74);
  v73 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for WeatherDataOperationResult(0);
  __chkstk_darwin(v78);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for ForecastEntry(0);
  v9 = __chkstk_darwin(v84);
  v72 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v81 = (uint64_t)&v69 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v69 - v13;
  v15 = type metadata accessor for Date(0);
  v76 = *(_QWORD *)(v15 - 8);
  v77 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005D40(&qword_1001BF9B8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v69 - v22;
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v79 = a2;
  v24 = type metadata accessor for Logger(0);
  v25 = sub_100025184(v24, (uint64_t)qword_1001D9FF0);
  v26 = swift_retain(v4);
  v75 = v25;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = os_log_type_enabled(v27, v28);
  v82 = v23;
  if (v29)
  {
    v30 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(64, -1);
    v71 = v14;
    v32 = v31;
    v86 = v31;
    *(_DWORD *)v30 = 136315394;
    v70 = v8;
    v33 = *(_QWORD *)(v4 + 24);
    v34 = *(_QWORD *)(v4 + 32);
    swift_bridgeObjectRetain(v34);
    v85 = sub_10016EC84(v33, v34, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v30 + 4);
    swift_release(v4);
    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v30 + 12) = 2082;
    LOBYTE(v85) = v79;
    v35 = String.init<A>(reflecting:)(&v85, &type metadata for LocationState);
    v37 = v36;
    v85 = sub_10016EC84(v35, v36, &v86);
    v8 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v30 + 14);
    v38 = v37;
    v23 = v82;
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "About to build a single timeline entry for %s. locationState=%{public}s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v32, 2);
    v39 = v32;
    v14 = v71;
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    v40 = swift_release(v4);
  }
  v41 = v4;
  Date.init()(v40);
  v42 = v80;
  sub_100161094();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v17, v77);
  sub_10003EB70((uint64_t)v23, (uint64_t)v21, &qword_1001BF9B8);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v84) == 1)
  {
    sub_100016904((uint64_t)v21, &qword_1001BF9B8);
    sub_10004D258(v42, (uint64_t)v8, type metadata accessor for WeatherDataOperationResult);
    v43 = swift_retain(v41);
    v44 = (uint64_t)v8;
    v45 = Logger.logObject.getter(v43);
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = swift_slowAlloc(32, -1);
      v48 = swift_slowAlloc(64, -1);
      v86 = v48;
      *(_DWORD *)v47 = 136315651;
      v49 = *(_QWORD *)(v41 + 24);
      v50 = *(_QWORD *)(v41 + 32);
      swift_bridgeObjectRetain(v50);
      v85 = sub_10016EC84(v49, v50, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v47 + 4);
      swift_release(v41);
      swift_bridgeObjectRelease(v50);
      *(_WORD *)(v47 + 12) = 2160;
      v85 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v47 + 14);
      *(_WORD *)(v47 + 22) = 2081;
      v51 = v73;
      sub_10004D258(v44, v73, type metadata accessor for WeatherDataOperationResult.Data);
      v52 = String.init<A>(describing:)(v51, v74);
      v54 = v53;
      v85 = sub_10016EC84(v52, v53, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v47 + 24);
      swift_bridgeObjectRelease(v54);
      sub_100011894(v44, type metadata accessor for WeatherDataOperationResult);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Could not build single timeline entry for %s (returning .noWeatherData). weatherDataOperationResult.data=%{private,mask.hash}s", (uint8_t *)v47, 0x20u);
      swift_arrayDestroy(v48, 2);
      v55 = v48;
      v23 = v82;
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v47, -1, -1);
    }
    else
    {
      swift_release(v41);
      sub_100011894(v44, type metadata accessor for WeatherDataOperationResult);
    }

    sub_100163358(2, v83);
    sub_100016904((uint64_t)v23, &qword_1001BF9B8);
  }
  else
  {
    sub_10004D278((uint64_t)v21, (uint64_t)v14, type metadata accessor for ForecastEntry);
    sub_10004D258((uint64_t)v14, v81, type metadata accessor for ForecastEntry);
    v56 = swift_retain_n(v41, 2);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.default.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = swift_slowAlloc(32, -1);
      v60 = swift_slowAlloc(64, -1);
      v86 = v60;
      *(_DWORD *)v59 = 136315651;
      v61 = *(_QWORD *)(v41 + 24);
      v62 = *(_QWORD *)(v41 + 32);
      swift_bridgeObjectRetain(v62);
      v85 = sub_10016EC84(v61, v62, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v59 + 4);
      swift_release_n(v41, 2);
      swift_bridgeObjectRelease(v62);
      *(_WORD *)(v59 + 12) = 2160;
      v85 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v59 + 14);
      *(_WORD *)(v59 + 22) = 2081;
      v63 = v81;
      v64 = v72;
      sub_10004D258(v81, v72, type metadata accessor for ForecastEntry);
      v65 = String.init<A>(describing:)(v64, v84);
      v67 = v66;
      v85 = sub_10016EC84(v65, v66, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v59 + 24);
      swift_bridgeObjectRelease(v67);
      sub_100011894(v63, type metadata accessor for ForecastEntry);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Successfully built single timeline entry for %s. entry=%{private,mask.hash}s", (uint8_t *)v59, 0x20u);
      swift_arrayDestroy(v60, 2);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);

      v68 = (uint64_t)v82;
    }
    else
    {

      sub_100011894(v81, type metadata accessor for ForecastEntry);
      swift_release_n(v41, 2);
      v68 = (uint64_t)v23;
    }
    sub_100016904(v68, &qword_1001BF9B8);
    sub_10004D278((uint64_t)v14, v83, type metadata accessor for ForecastEntry);
  }
}

void sub_100167098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD, _QWORD, _QWORD);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void (*v52)(_QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_BYTE *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE v98[4];
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  void (*v108)(_BYTE *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(_QWORD, _QWORD, _QWORD);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125[2];

  sub_100070E5C();
  v1 = v0;
  v118 = v3;
  v119 = v2;
  v121 = v4;
  v6 = v5;
  v109 = v7;
  v104 = sub_100005D40(&qword_1001C7240);
  v103 = *(_QWORD *)(v104 - 8);
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_1000230E0();
  v123 = v9;
  v10 = type metadata accessor for TimelineReloadPolicy(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100023150();
  v105 = v12;
  sub_100023164();
  __chkstk_darwin(v13);
  sub_100023434();
  v106 = v14;
  v15 = sub_10008A8E8();
  v116 = *(_QWORD *)(v15 - 8);
  v117 = v15;
  sub_1000230F4();
  __chkstk_darwin(v16);
  sub_1000230E0();
  v115 = v17;
  v112 = type metadata accessor for Location.Identifier(0);
  sub_1000230F4();
  __chkstk_darwin(v18);
  sub_1000230E0();
  v111 = v19;
  v20 = sub_100070DE8();
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_100023150();
  v101 = v22;
  sub_100023164();
  __chkstk_darwin(v23);
  v107 = &v98[-v24];
  sub_100023164();
  __chkstk_darwin(v25);
  v27 = &v98[-v26];
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v28 = sub_10002538C();
  v29 = sub_100025184(v28, (uint64_t)qword_1001D9FF0);
  v30 = *(void (**)(_QWORD, _QWORD, _QWORD))(v21 + 16);
  v120 = v6;
  v113 = v30;
  v30(v27, v6, v20);
  v31 = sub_100170D48();
  v114 = v29;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  v34 = v33;
  v35 = os_log_type_enabled(v32, v33);
  v122 = v11;
  v110 = v20;
  if (v35)
  {
    v36 = sub_100025358(42);
    v102 = v10;
    v37 = v36;
    v100 = sub_100025358(96);
    v125[0] = v100;
    *(_DWORD *)v37 = 136315907;
    v38 = *(_QWORD *)(v1 + 24);
    v39 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain(v39);
    v40 = sub_10016EC84(v38, v39, v125);
    sub_1001709CC(v40);
    sub_100156F24();
    swift_bridgeObjectRelease(v39);
    *(_WORD *)(v37 + 12) = 2082;
    v99 = v34;
    v41 = v121;
    LOBYTE(v124) = v121;
    v42 = String.init<A>(reflecting:)(&v124, &type metadata for LocationState);
    v124 = sub_100170958(v42, v43);
    sub_100170940((uint64_t)&v124);
    v44 = sub_10002548C();
    *(_WORD *)(v37 + 22) = 2160;
    v46 = sub_1001709A4(v44, v45, v37 + 24);
    *(_WORD *)(v37 + 32) = 2081;
    v47 = v1;
    v48 = v111;
    Location.identifier.getter(v46);
    v49 = v48;
    v1 = v47;
    v50 = sub_100170D40(v49);
    v124 = sub_100170958(v50, v51);
    sub_100170940((uint64_t)&v124);
    sub_10002548C();
    v52 = *(void (**)(_QWORD))(v21 + 8);
    v53 = v110;
    v108 = (void (*)(_BYTE *, uint64_t))v52;
    v52(v27);
    sub_100170D24((void *)&_mh_execute_header, v32, (os_log_type_t)v99, "About to build a timeline for %s. locationState=%{public}s, location: %{private,mask.hash}s", (uint8_t *)v37);
    v54 = v100;
    sub_100170D1C(v100);
    sub_10002534C(v54);
    v55 = v37;
    v10 = v102;
    sub_10002534C(v55);

  }
  else
  {
    sub_100156F24();
    v56 = *(void (**)(_BYTE *, uint64_t))(v21 + 8);
    v53 = v20;
    v108 = v56;
    v56(v27, v20);

    v41 = v121;
  }
  v57 = type metadata accessor for WeatherDataOperationResult(0);
  v58 = v115;
  TimelineProviderContext.family.getter(v57);
  sub_1001618F4();
  v60 = v59;
  (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v58, v117);
  if (v60)
  {
    v62 = *(_QWORD *)(v1 + 24);
    v61 = *(_QWORD *)(v1 + 32);
    v63 = v41;
    v64 = v106;
    sub_1000234D4(v60, v63, v62);
    v65 = v105;
    sub_100156E14(v105, v64, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 16));
    v66 = sub_10008307C();
    v67 = sub_100168644();
    Timeline.init(entries:policy:)(v60, v65, v66, v67);
    v68 = v107;
    sub_100170CD0((uint64_t)v107, v120);
    v69 = swift_retain_n(v1, 2);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.default.getter(v70);
    if (sub_100170C98(v71))
    {
      v72 = sub_100025358(32);
      v73 = sub_100025358(64);
      v125[0] = v73;
      *(_DWORD *)v72 = 136315651;
      v102 = v10;
      swift_bridgeObjectRetain(v61);
      v124 = sub_10016EC84(v62, v61, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125, v72 + 4);
      sub_100170D50();
      swift_bridgeObjectRelease(v61);
      *(_WORD *)(v72 + 12) = 2160;
      v76 = sub_1001709A4(v74, v75, v72 + 14);
      *(_WORD *)(v72 + 22) = 2081;
      v77 = v111;
      Location.identifier.getter(v76);
      v78 = sub_100170D40(v77);
      v124 = sub_100170958(v78, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125, v72 + 24);
      sub_10002548C();
      sub_100170B78();
      sub_1000CD538((void *)&_mh_execute_header, v70, (os_log_type_t)v10, "Timeline: successfully built for %s! location: %{private,mask.hash}s", (uint8_t *)v72);
      sub_100170C10(v73);
      sub_10002534C(v73);
      sub_10002534C(v72);

      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v64, v102);
    }
    else
    {

      v108(v68, v53);
      sub_100170D50();
      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v64, v10);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 32))(v109, v123, v104);
  }
  else
  {
    v80 = v101;
    sub_100170CD0(v101, v120);
    v81 = sub_100170D48();
    v82 = Logger.logObject.getter(v81);
    v83 = static os_log_type_t.default.getter(v82);
    if (sub_100170C98(v83))
    {
      v84 = sub_100025358(42);
      v85 = sub_100025358(96);
      v125[0] = v85;
      *(_DWORD *)v84 = 136315907;
      v86 = swift_bridgeObjectRetain(*(_QWORD *)(v1 + 32));
      v88 = sub_100170D70(v86, v87, v125);
      sub_1001709CC(v88);
      sub_100156F24();
      sub_100023458();
      *(_WORD *)(v84 + 12) = 2082;
      LOBYTE(v124) = v41;
      v89 = String.init<A>(reflecting:)(&v124, &type metadata for LocationState);
      v91 = v90;
      v124 = sub_100170970(v89, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125, v84 + 14);
      swift_bridgeObjectRelease(v91);
      *(_WORD *)(v84 + 22) = 2160;
      v92 = sub_100170D08();
      v94 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v92, v125, v93);
      *(_WORD *)(v84 + 32) = 2081;
      v95 = v111;
      Location.identifier.getter(v94);
      v96 = sub_100170D40(v95);
      v124 = sub_100170958(v96, v97);
      sub_100170D9C((uint64_t)&v124, (uint64_t)v125);
      sub_10002548C();
      sub_100170B78();
      sub_100170D24((void *)&_mh_execute_header, v82, (os_log_type_t)v10, "Timeline: failed for %s (no entries so returning .noWeatherData). locationState=%{public}s, location: %{private,mask.hash}s", (uint8_t *)v84);
      sub_100170D1C(v85);
      sub_10002534C(v85);
      sub_10002534C(v84);
    }
    else
    {
      sub_100156F24();
      v108((_BYTE *)v80, v53);
    }

    sub_10016627C(2, v109);
  }
  sub_10001C770();
}

uint64_t sub_100167864()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for UserIdentityChange(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0[24];
  v6 = v0[25];
  sub_100022330(v0 + 21, v5);
  dispatch thunk of IdentityRotationManagerType.rotateIdentifiersIfNeeded()(v5, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_1001678FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v1 = v0;
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100025184(v2, (uint64_t)qword_1001D9FF0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "About to refresh the app config - taking RBAssertion", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = sub_100167A9C();
  v8 = type metadata accessor for AppConfiguration(0);
  v9 = firstly<A>(closure:)(sub_10016F3B8, v1, v8);
  v10 = (void *)zalgo.getter(v9);
  v11 = Promise.error(on:closure:)(v10, sub_100167E4C, 0);
  swift_release(v9);

  v12 = swift_allocObject(&unk_1001BB790, 32, 7);
  *(_QWORD *)(v12 + 16) = v1;
  *(_QWORD *)(v12 + 24) = v7;
  v13 = v7;
  v14 = swift_retain(v1);
  v16 = (id)zalgo.getter(v14);
  v15 = Promise.always(on:closure:)(v16, sub_10016F3F8, v12);

  swift_release(v15);
  swift_release(v11);
  swift_release(v12);

}

id sub_100167A9C()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  unsigned int v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  id v25;

  sub_100070744(0, &qword_1001C7250, RBSDomainAttribute_ptr);
  v0 = sub_100168104(0xD000000000000010, 0x800000010018AD40, 0x61546873696E6946, 0xED0000776F4E6B73);
  v1 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v2 = sub_100005D40(&qword_1001C7258);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100185C10;
  *(_QWORD *)(v3 + 32) = v0;
  v25 = (id)v3;
  specialized Array._endMutation()();
  objc_allocWithZone((Class)RBSAssertion);
  v4 = v0;
  v5 = sub_10016EBE0(0xD00000000000001FLL, 0x800000010018AD60, v1, (uint64_t)v25);
  v25 = 0;
  v6 = objc_msgSend(v5, "acquireWithError:", &v25);
  v7 = v25;
  if (v6)
  {
    v8 = v25;

  }
  else
  {
    v9 = v25;
    v10 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v11);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v12 = type metadata accessor for Logger(0);
    sub_100025184(v12, (uint64_t)qword_1001D9FF0);
    swift_errorRetain(v10);
    v13 = swift_errorRetain(v10);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (void *)swift_slowAlloc(32, -1);
      v25 = v17;
      *(_DWORD *)v16 = 136315138;
      v23 = v10;
      swift_errorRetain(v10);
      v18 = sub_100005D40(&qword_1001C0FC8);
      v19 = String.init<A>(reflecting:)(&v23, v18);
      v21 = v20;
      v23 = sub_10016EC84(v19, v20, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v16 + 4);
      swift_bridgeObjectRelease(v21);
      swift_errorRelease(v10);
      swift_errorRelease(v10);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "failed to acquire runningboard assertion. error=%s", v16, 0xCu);
      swift_arrayDestroy(v17, 1);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      swift_errorRelease(v10);
      swift_errorRelease(v10);
    }

    objc_msgSend(v5, "invalidate");
    swift_errorRelease(v10);

    return 0;
  }
  return v5;
}

uint64_t sub_100167DFC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[8];
  v2 = a1[9];
  sub_100022330(a1 + 5, v1);
  return AppConfigurationManagerType.fetchAppConfig()(v1, v2);
}

void sub_100167E4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  uint64_t v12;
  uint64_t v13;

  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v2 = type metadata accessor for Logger(0);
  sub_100025184(v2, (uint64_t)qword_1001D9FF0);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = a1;
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_errorRetain(a1);
    v7 = sub_100005D40(&qword_1001C0FC8);
    v8 = String.init<A>(reflecting:)(&v12, v7);
    v10 = v9;
    v12 = sub_10016EC84(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v5 + 4);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Error refreshing app config. Error: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
}

void sub_100168028(int a1, id a2)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;

  objc_msgSend(a2, "invalidate");
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100025184(v2, (uint64_t)qword_1001D9FF0);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Just refreshed the app config - release RBAssertion", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

}

id sub_100168104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSString v7;
  NSString v8;
  id v9;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "attributeWithDomain:name:", v7, v8);

  return v9;
}

uint64_t sub_100168194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t refreshed;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v52 = a3;
  v55 = a2;
  v59 = a1;
  refreshed = type metadata accessor for WidgetRefreshTelemetryPayload.Success(0);
  v50 = *(_QWORD *)(refreshed - 8);
  v51 = refreshed;
  __chkstk_darwin(refreshed);
  v49 = (char **)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v6);
  v60 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WidgetFamily(0);
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v53 - 8);
  v12 = __chkstk_darwin(v53);
  v56 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v54 = (char *)&v47 - v14;
  v15 = type metadata accessor for WidgetRefreshTelemetryPayload.Failure(0);
  v48 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v47 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005D40(&qword_1001C7238);
  __chkstk_darwin(v17);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for WidgetRefreshFailureReason(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v47 - v25;
  sub_10003EB70(v52, (uint64_t)v19, &qword_1001C7238);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v20) == 1)
  {
    sub_100016904((uint64_t)v19, &qword_1001C7238);
    v27 = v3[29];
    v28 = v3[30];
    sub_100022330(v3 + 26, v27);
    v29 = v54;
    v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v54, v55, v53);
    v31 = v56;
    static Date.now.getter(v30);
    v32 = v3[3];
    v33 = v3[4];
    v34 = swift_bridgeObjectRetain(v33);
    TimelineProviderContext.family.getter(v34);
    v35 = v60;
    sub_10010DCD0(v60);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v58);
    v36 = v49;
    WidgetRefreshTelemetryPayload.Success.init(startTime:endTime:widgetName:widgetFamily:)(v29, v31, v32, v33, v35);
    dispatch thunk of WidgetRefreshTelemetryBackendType.recordSuccess(_:)(v36, v27, v28);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v50 + 8))(v36, v51);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v26, v19, v20);
    v38 = v3[30];
    v50 = v3[29];
    v52 = v38;
    v49 = sub_100022330(v3 + 26, v50);
    v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v51 = v15;
    v40 = v54;
    v41 = v39(v54, v55, v53);
    v42 = v56;
    static Date.now.getter(v41);
    v43 = v3[4];
    v55 = v3[3];
    v44 = swift_bridgeObjectRetain(v43);
    TimelineProviderContext.family.getter(v44);
    v45 = v60;
    sub_10010DCD0(v60);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v58);
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v24, v26, v20);
    v46 = v47;
    WidgetRefreshTelemetryPayload.Failure.init(startTime:endTime:widgetName:widgetFamily:reason:)(v40, v42, v55, v43, v45, v24);
    dispatch thunk of WidgetRefreshTelemetryBackendType.recordFailure(_:)(v46, v50, v52);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v51);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v26, v20);
  }
}

uint64_t sub_100168598()
{
  uint64_t v0;

  sub_100170BD8();
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));

  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(v0 + 128));
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(v0 + 168));
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(v0 + 208));
  return v0;
}

uint64_t sub_100168600()
{
  uint64_t v0;

  sub_100168598();
  return swift_deallocClassInstance(v0, 248, 7);
}

uint64_t type metadata accessor for WeatherTimelineProvider()
{
  return objc_opt_self(_TtC13WeatherWidget23WeatherTimelineProvider);
}

unint64_t sub_100168644()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C53D0;
  if (!qword_1001C53D0)
  {
    v1 = type metadata accessor for ForecastEntry(255);
    result = swift_getWitnessTable(&unk_10017B31C, v1);
    atomic_store(result, (unint64_t *)&qword_1001C53D0);
  }
  return result;
}

void sub_100168684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD);
  void (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  char *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(_QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  sub_100070E5C();
  v1 = v0;
  v61 = v3;
  v62 = v2;
  v5 = v4;
  v6 = sub_10008A8E8();
  v58 = *(_QWORD *)(v6 - 8);
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_1000230E0();
  v57 = v8;
  v9 = sub_10008307C();
  v59 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v59 + 64);
  v11 = __chkstk_darwin(v9);
  v12 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  sub_100023434();
  v14 = v13;
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v15 = sub_10002538C();
  v16 = sub_100025184(v15, (uint64_t)qword_1001D9FF0);
  v17 = swift_retain(v1);
  v56 = v16;
  Logger.logObject.getter(v17);
  v18 = sub_1000253F8();
  if (os_log_type_enabled(v16, v18))
  {
    v54 = v6;
    v19 = sub_100025358(12);
    v60 = v5;
    v20 = (uint8_t *)v19;
    v21 = sub_100025358(32);
    v55 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    v22 = v21;
    v63 = v21;
    *(_DWORD *)v20 = 136315138;
    v53 = v20 + 4;
    v23 = v10;
    v25 = *(_QWORD *)(v1 + 24);
    v24 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain(v24);
    v26 = v25;
    v10 = v23;
    v27 = sub_10016EC84(v26, v24, &v63);
    v28 = sub_1000C56E4(v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v28, v29, v53);
    sub_1000D6DA4();
    v30 = v24;
    v6 = v54;
    swift_bridgeObjectRelease(v30);
    sub_10002544C((void *)&_mh_execute_header, v16, v18, "Accessory - Snapshot Requested for %s", v20);
    sub_100025444(v22);
    v31 = v22;
    v12 = v55;
    sub_10002534C(v31);
    v32 = (uint64_t)v20;
    v5 = v60;
    sub_10002534C(v32);

  }
  else
  {

    v33 = sub_1000D6DA4();
  }
  if ((TimelineProviderContext.isPreview.getter(v33) & 1) != 0)
  {
    v34 = swift_retain(v1);
    v35 = v56;
    Logger.logObject.getter(v34);
    v36 = sub_1000253F8();
    if (os_log_type_enabled(v35, v36))
    {
      v60 = v5;
      v37 = (uint8_t *)sub_100025358(12);
      v38 = sub_100025358(32);
      v63 = v38;
      *(_DWORD *)v37 = 136315138;
      v39 = *(_QWORD *)(v1 + 24);
      v40 = *(_QWORD *)(v1 + 32);
      sub_100170CDC();
      v41 = sub_10016EC84(v39, v40, &v63);
      v42 = sub_1000C56E4(v41);
      v5 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v42, v43, v37 + 4);
      swift_release(v1);
      swift_bridgeObjectRelease(v40);
      sub_10002544C((void *)&_mh_execute_header, v35, v36, "Accessory - We are in preview mode for %s, so return placeholder data", v37);
      sub_100025444(v38);
      sub_10002534C(v38);
      sub_10002534C((uint64_t)v37);

    }
    else
    {

      sub_1000D6DA4();
    }
    sub_100165E70(v62);
    v5(v14);
    sub_100011894(v14, type metadata accessor for ForecastEntry);
  }
  else
  {
    sub_100167864();
    sub_1001678FC();
    sub_1000D6D90();
    sub_100160888();
    sub_100170C58();
    sub_1000A7198();
    v44 = v14;
    v45 = sub_100163358(2, v14);
    v46 = v57;
    TimelineProviderContext.family.getter(v45);
    v47 = sub_100168AC0(v46);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v46, v6);
    v48 = sub_1001708BC((uint64_t)&unk_1001BB6F0);
    swift_weakInit(v48 + 16, v1);
    sub_10004D258(v44, (uint64_t)v12, type metadata accessor for ForecastEntry);
    v49 = *(unsigned __int8 *)(v59 + 80);
    v50 = (v49 + 40) & ~v49;
    v51 = (_QWORD *)swift_allocObject(&unk_1001BB7E0, v50 + v10, v49 | 7);
    v51[2] = v48;
    v51[3] = v5;
    v52 = v61;
    v51[4] = v61;
    sub_10004D278((uint64_t)v12, (uint64_t)v51 + v50, type metadata accessor for ForecastEntry);
    sub_100170D48();
    swift_retain(v52);
    sub_100069834((os_log_type_t)(v47 & 1), (uint64_t (*)(uint64_t))sub_10016F810, (uint64_t)v51);
    sub_100170984();
    sub_100011894(v44, type metadata accessor for ForecastEntry);
    sub_100156F24();
  }
  sub_10001C770();
}

uint64_t sub_100168AC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v12;

  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 != enum case for WidgetFamily.systemSmall(_:)
    && v6 != enum case for WidgetFamily.systemMedium(_:)
    && v6 != enum case for WidgetFamily.systemLarge(_:)
    && v6 != enum case for WidgetFamily.systemExtraLarge(_:))
  {
    if (v6 == enum case for WidgetFamily.accessoryCircular(_:)
      || v6 == enum case for WidgetFamily.accessoryRectangular(_:))
    {
      return 0;
    }
    if (v6 != enum case for WidgetFamily.accessoryInline(_:))
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return 1;
}

void sub_100168BDC(uint64_t a1, int a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t Strong;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  void (*v68)(char *);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88[32];

  v81 = a6;
  v85 = a5;
  v84 = a2;
  v83 = a1;
  v8 = sub_100005D40(&qword_1001C0E90);
  __chkstk_darwin(v8);
  v77 = (uint64_t)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for Location(0);
  v76 = *(_QWORD *)(v79 - 8);
  v10 = *(_QWORD *)(v76 + 64);
  v11 = __chkstk_darwin(v79);
  v74 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v75 = (char *)&v72 - v12;
  v13 = sub_100005D40(&qword_1001BF9B8);
  __chkstk_darwin(v13);
  v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005D40(&qword_1001C7240);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ForecastEntry(0);
  v73 = *(_QWORD *)(v20 - 8);
  v21 = *(_QWORD *)(v73 + 64);
  v22 = __chkstk_darwin(v20);
  v80 = (uint64_t)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v72 - v23;
  a3 += 16;
  swift_beginAccess(a3, v88, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (!Strong)
  {
    a4(v81);
    return;
  }
  v78 = (void (*)(char *))a4;
  v82 = Strong;
  v26 = *(_QWORD *)(Strong + 120);
  swift_retain(v26);
  v27 = sub_100121C94();
  swift_release(v26);
  if ((v27 & 1) != 0)
  {
    v28 = v82;
    v29 = *(_QWORD *)(v82 + 120);
    swift_retain(v29);
    sub_10011F268(v83, (uint64_t)v19);
    swift_release(v29);
    v30 = Timeline.entries.getter(v16);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    sub_100023FBC();
    swift_bridgeObjectRelease(v30);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v20) != 1)
    {
      sub_10004D278((uint64_t)v15, (uint64_t)v24, type metadata accessor for ForecastEntry);
      v78(v24);
      swift_release(v28);
      v50 = (uint64_t)v24;
      goto LABEL_23;
    }
    sub_100016904((uint64_t)v15, &qword_1001BF9B8);
  }
  if (v84 == 4)
  {
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v31 = type metadata accessor for Logger(0);
    sub_100025184(v31, (uint64_t)qword_1001D9FF0);
    v32 = (_QWORD *)v82;
    v33 = swift_retain(v82);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v87 = v37;
      *(_DWORD *)v36 = 136315138;
      v38 = v32[3];
      v39 = v32[4];
      swift_bridgeObjectRetain(v39);
      v86 = sub_10016EC84(v38, v39, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v36 + 4);
      swift_release(v32);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Accessory - Snapshot: failed for %s (no location permissions)", v36, 0xCu);
      swift_arrayDestroy(v37, 1);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      swift_release(v32);
    }
    v51 = (void (*)(uint64_t))v78;
    v52 = v32[11];
    swift_retain(v52);
    v53 = v80;
    v54 = v80;
    v55 = 0;
  }
  else
  {
    v40 = v77;
    sub_10003EB70(v83, v77, &qword_1001C0E90);
    v41 = v79;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v40, 1, v79) != 1)
    {
      v56 = (uint64_t)v75;
      v57 = v76;
      v72 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 32);
      v72(v75, v40, v41);
      v58 = v82;
      v83 = *(_QWORD *)(v82 + 80);
      LODWORD(v77) = *(unsigned __int8 *)(v82 + 16);
      v59 = swift_allocObject(&unk_1001BB6F0, 24, 7);
      swift_weakInit(v59 + 16, v58);
      v60 = v80;
      sub_10004D258(v81, v80, type metadata accessor for ForecastEntry);
      v61 = v74;
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v74, v56, v41);
      v62 = *(unsigned __int8 *)(v73 + 80);
      v63 = (v62 + 40) & ~v62;
      v64 = v63 + v21;
      v65 = *(unsigned __int8 *)(v57 + 80);
      v66 = (v65 + v63 + v21 + 1) & ~v65;
      v67 = (_QWORD *)swift_allocObject(&unk_1001BB808, v66 + v10, v62 | v65 | 7);
      v68 = v78;
      v67[2] = v59;
      v67[3] = v68;
      v69 = v85;
      v67[4] = v85;
      sub_10004D278(v60, (uint64_t)v67 + v63, type metadata accessor for ForecastEntry);
      *((_BYTE *)v67 + v64) = v84;
      v70 = v61;
      v71 = v79;
      v72((char *)v67 + v66, (uint64_t)v70, v79);
      swift_retain(v59);
      swift_retain(v69);
      sub_100111814(v56, v77, (uint64_t)sub_10016F85C, (uint64_t)v67);
      swift_release(v67);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v71);
      swift_release(v59);
      swift_release(v82);
      return;
    }
    sub_100016904(v40, &qword_1001C0E90);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v42 = type metadata accessor for Logger(0);
    sub_100025184(v42, (uint64_t)qword_1001D9FF0);
    v32 = (_QWORD *)v82;
    v43 = swift_retain(v82);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = swift_slowAlloc(32, -1);
      v87 = v47;
      *(_DWORD *)v46 = 136315138;
      v48 = v32[3];
      v49 = v32[4];
      swift_bridgeObjectRetain(v49);
      v86 = sub_10016EC84(v48, v49, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v46 + 4);
      swift_release(v32);
      swift_bridgeObjectRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Accessory - Snapshot: failed for %s (no location)", v46, 0xCu);
      swift_arrayDestroy(v47, 1);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);

    }
    else
    {

      swift_release(v32);
    }
    v51 = (void (*)(uint64_t))v78;
    v52 = v32[11];
    swift_retain(v52);
    v53 = v80;
    v54 = v80;
    v55 = 1;
  }
  sub_100163358(v55, v54);
  swift_release(v52);
  v51(v53);
  swift_release(v32);
  v50 = v53;
LABEL_23:
  sub_100011894(v50, type metadata accessor for ForecastEntry);
}

void sub_10016939C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t Strong;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint8_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  char v84[24];

  v79 = a7;
  v81 = a3;
  v12 = sub_100005D40(&qword_1001C7248);
  __chkstk_darwin(v12);
  v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v15);
  v80 = (uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for WeatherDataOperationResult(0);
  v18 = __chkstk_darwin(v17);
  v78 = (uint64_t)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v71 - v20;
  v22 = sub_100005D40(&qword_1001C3190);
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v84, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
  {
    v81(a5);
    return;
  }
  v26 = (_QWORD *)Strong;
  v75 = a5;
  sub_10003EB70(a1, (uint64_t)v24, &qword_1001C3190);
  if (swift_getEnumCaseMultiPayload(v24, v22) != 1)
  {
    sub_10004D278((uint64_t)v24, (uint64_t)v21, type metadata accessor for WeatherDataOperationResult);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v37 = type metadata accessor for Logger(0);
    sub_100025184(v37, (uint64_t)qword_1001D9FF0);
    v38 = swift_retain(v26);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v77 = a4;
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      v83 = v42;
      v76 = a6;
      *(_DWORD *)v41 = 136315138;
      v44 = v26[3];
      v43 = v26[4];
      swift_bridgeObjectRetain(v43);
      v82 = sub_10016EC84(v44, v43, &v83);
      a6 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v41 + 4);
      swift_release(v26);
      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Accessory - Snapshot: successsully fetched weather data for %s", v41, 0xCu);
      swift_arrayDestroy(v42, 1);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {

      swift_release(v26);
    }
    v58 = v80;
    sub_100166854((uint64_t)v21, a6, v80);
    v81(v58);
    swift_release(v26);
    sub_100011894(v58, type metadata accessor for ForecastEntry);
    v59 = (uint64_t)v21;
    goto LABEL_24;
  }
  v76 = a6;
  v74 = *v24;
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_100025184(v27, (uint64_t)qword_1001D9FF0);
  v29 = swift_retain(v26);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  v32 = os_log_type_enabled(v30, v31);
  v77 = a4;
  if (v32)
  {
    v73 = v28;
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v83 = v34;
    *(_DWORD *)v33 = 136315138;
    v72 = v33 + 4;
    v36 = v26[3];
    v35 = v26[4];
    swift_bridgeObjectRetain(v35);
    v82 = sub_10016EC84(v36, v35, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v72);
    swift_release(v26);
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Accessory - Snapshot: failed to fetch or interpolate fresh weather data for %s, trying old cached data first", v33, 0xCu);
    swift_arrayDestroy(v34, 1);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_release(v26);
  }
  v45 = v26[10];
  swift_retain(v45);
  sub_100111FD0(v79);
  swift_release(v45);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v17) != 1)
  {
    v60 = (uint64_t)v14;
    v61 = v78;
    sub_10004D278(v60, v78, type metadata accessor for WeatherDataOperationResult);
    v62 = swift_retain(v26);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.default.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      v83 = v66;
      *(_DWORD *)v65 = 136315138;
      v67 = v26[3];
      v68 = v26[4];
      swift_bridgeObjectRetain(v68);
      v82 = sub_10016EC84(v67, v68, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v65 + 4);
      swift_release(v26);
      swift_bridgeObjectRelease(v68);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Accessory - Snapshot: successsully retrieved cached weather data for %s", v65, 0xCu);
      swift_arrayDestroy(v66, 1);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

    }
    else
    {

      swift_release(v26);
    }
    v69 = v74;
    v70 = v80;
    sub_100166854(v61, v76, v80);
    v81(v70);
    swift_errorRelease(v69);
    swift_release(v26);
    sub_100011894(v70, type metadata accessor for ForecastEntry);
    v59 = v61;
LABEL_24:
    sub_100011894(v59, type metadata accessor for WeatherDataOperationResult);
    return;
  }
  sub_100016904((uint64_t)v14, &qword_1001C7248);
  swift_retain(v26);
  v46 = v74;
  swift_errorRetain(v74);
  swift_retain(v26);
  v47 = swift_errorRetain(v46);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = swift_slowAlloc(32, -1);
    v51 = swift_slowAlloc(64, -1);
    v83 = v51;
    *(_DWORD *)v50 = 136315651;
    v52 = v26[3];
    v53 = v26[4];
    swift_bridgeObjectRetain(v53);
    v82 = sub_10016EC84(v52, v53, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v50 + 4);
    swift_release_n(v26, 2);
    swift_bridgeObjectRelease(v53);
    *(_WORD *)(v50 + 12) = 2160;
    v82 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v50 + 14);
    *(_WORD *)(v50 + 22) = 2081;
    v82 = v46;
    swift_errorRetain(v46);
    v54 = sub_100005D40(&qword_1001C0FC8);
    v55 = String.init<A>(describing:)(&v82, v54);
    v57 = v56;
    v82 = sub_10016EC84(v55, v56, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v50 + 24);
    swift_bridgeObjectRelease(v57);
    swift_errorRelease(v46);
    swift_errorRelease(v46);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Accessory - Snapshot: failed to fetch weather data or get cached data for %s ... returning .noWeatherData. error=%{private,mask.hash}s", (uint8_t *)v50, 0x20u);
    swift_arrayDestroy(v51, 2);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    swift_release_n(v26, 2);
    swift_errorRelease(v46);
    swift_errorRelease(v46);
  }

  v81(v75);
  swift_release(v26);
  swift_errorRelease(v46);
}

void sub_100169CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70[2];

  sub_100070E5C();
  v1 = v0;
  v57 = v2;
  v58 = v3;
  v66 = v4;
  v5 = sub_10008A8E8();
  v60 = *(_QWORD *)(v5 - 8);
  v61 = v5;
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_1000230E0();
  v59 = v7;
  v62 = sub_1001708B4();
  v56 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  sub_100170DB8();
  v64 = v8;
  v65 = v9;
  v10 = sub_10002338C();
  v67 = *(_QWORD *)(v10 - 8);
  v68 = v10;
  v11 = __chkstk_darwin(v10);
  v55 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v12;
  __chkstk_darwin(v11);
  sub_100023434();
  v63 = v13;
  v14 = *(_QWORD *)(v0 + 24);
  v15 = *(_QWORD *)(v0 + 32);
  v16 = qword_1001BEE98;
  sub_100170CDC();
  if (v16 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v17 = sub_10002538C();
  v18 = sub_100025184(v17, (uint64_t)qword_1001D9FF0);
  v19 = swift_bridgeObjectRetain_n(v15, 2);
  Logger.logObject.getter(v19);
  v20 = sub_1000253F8();
  v21 = os_log_type_enabled(v18, v20);
  v53 = v14;
  v54 = v15;
  if (v21)
  {
    v22 = (uint8_t *)sub_100025358(12);
    v23 = sub_100025358(32);
    v70[0] = v23;
    *(_DWORD *)v22 = 136315138;
    sub_100170CDC();
    v69 = sub_10016EC84(v14, v15, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v22 + 4);
    swift_bridgeObjectRelease_n(v15, 3);
    sub_10002544C((void *)&_mh_execute_header, v18, v20, "Accessory - Timeline requested for %s", v22);
    sub_100025444(v23);
    sub_10002534C(v23);
    sub_10002534C((uint64_t)v22);

  }
  else
  {

    v24 = swift_bridgeObjectRelease_n(v15, 2);
  }
  v25 = v63;
  static Date.now.getter(v24);
  sub_100022330((_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 152));
  sub_100170C60();
  v26 = sub_1001708BC((uint64_t)&unk_1001BB6F0);
  swift_weakInit(v26 + 16, v1);
  v27 = v56;
  v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
  v28 = v62;
  sub_100156E14(v64, v66, v51);
  v29 = v67;
  v30 = (uint64_t)v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v55, v25, v68);
  v31 = *(unsigned __int8 *)(v27 + 80);
  v32 = (v31 + 40) & ~v31;
  v50 = v31 | 7;
  v33 = *(unsigned __int8 *)(v29 + 80);
  v34 = (v65 + v33 + v32) & ~v33;
  v35 = (_QWORD *)swift_allocObject(&unk_1001BB718, v34 + v52, v31 | 7 | v33);
  v36 = v57;
  v35[2] = v26;
  v35[3] = v36;
  v37 = v58;
  v35[4] = v58;
  v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
  v38 = v64;
  sub_100156E14((uint64_t)v35 + v32, v64, v57);
  sub_1000A6CB0((uint64_t)v35 + v34, v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 32));
  swift_retain(v37);
  sub_100170CC0();
  sub_1001678FC();
  sub_1000D6D90();
  sub_100160888();
  sub_100170C58();
  v39 = sub_1000A7198();
  v40 = v59;
  v41 = v66;
  TimelineProviderContext.family.getter(v39);
  LOBYTE(v32) = sub_100168AC0(v40);
  sub_1001308D0(v60);
  v42 = sub_1001708BC((uint64_t)&unk_1001BB6F0);
  sub_100170978(v42);
  v43 = v38;
  v44 = v38;
  v45 = v28;
  v51(v44, v41, v28);
  v46 = (v31 + 56) & ~v31;
  v47 = (_QWORD *)swift_allocObject(&unk_1001BB740, v46 + v65, v50);
  v48 = v53;
  v49 = v54;
  v47[2] = v42;
  v47[3] = v48;
  v47[4] = v49;
  v47[5] = sub_10016EB30;
  v47[6] = v35;
  v57((uint64_t)v47 + v46, v43, v45);
  sub_100170CC8();
  sub_100170C08();
  sub_100069834((os_log_type_t)(v32 & 1), (uint64_t (*)(uint64_t))sub_10016EB94, (uint64_t)v47);
  sub_1000CD56C();
  sub_1000D6DA4();
  sub_1000287E0(v63, *(uint64_t (**)(uint64_t, uint64_t))(v67 + 8));
  sub_100170984();
  sub_10001C770();
}

void sub_10016A0B8(unint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(_QWORD, _QWORD), uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  void (*v31)(_QWORD, _QWORD, _QWORD);
  uint64_t refreshed;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  void (*v54)(_QWORD, _QWORD, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  void (*v68)(_QWORD, _QWORD, _QWORD);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_QWORD, _QWORD);
  uint64_t v88;
  uint64_t v89;
  char v90[32];

  v75 = a8;
  v87 = a6;
  v80 = a4;
  v81 = a2;
  v82 = a1;
  v78 = type metadata accessor for TimelineProviderContext(0);
  v76 = *(_QWORD *)(v78 - 8);
  v11 = *(_QWORD *)(v76 + 64);
  __chkstk_darwin(v78);
  v77 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001C0E90);
  __chkstk_darwin(v12);
  v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Location(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = __chkstk_darwin(v15);
  v19 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v72 - v20;
  v22 = sub_100005D40(&qword_1001C7238);
  __chkstk_darwin(v22);
  v83 = (uint64_t)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100005D40(&qword_1001C7240);
  v85 = *(_QWORD *)(v24 - 8);
  v86 = v24;
  __chkstk_darwin(v24);
  v84 = (uint64_t *)((char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  a3 += 16;
  swift_beginAccess(a3, v90, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v74 = a5;
    v79 = a7;
    v27 = *(_QWORD *)(Strong + 120);
    v28 = Strong;
    swift_retain(v27);
    v29 = sub_100121C94();
    swift_release(v27);
    if ((v29 & 1) != 0)
    {
      v30 = *(_QWORD *)(v28 + 120);
      swift_retain(v30);
      v31 = (void (*)(_QWORD, _QWORD, _QWORD))v84;
      sub_10011F268(v82, (uint64_t)v84);
      swift_release(v30);
      refreshed = type metadata accessor for WidgetRefreshFailureReason(0);
      v33 = v83;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v83, 1, 1, refreshed);
      v87(v31, v33);
      swift_release(v28);
      sub_100016904(v33, &qword_1001C7238);
      (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v85 + 8))(v31, v86);
    }
    else if (v81 == 4)
    {
      if (qword_1001BEE98 != -1)
        swift_once(&qword_1001BEE98, sub_100097BD0);
      v40 = type metadata accessor for Logger(0);
      sub_100025184(v40, (uint64_t)qword_1001D9FF0);
      v41 = v74;
      v42 = swift_bridgeObjectRetain_n(v74, 2);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.default.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = swift_slowAlloc(32, -1);
        v89 = v46;
        *(_DWORD *)v45 = 136315138;
        swift_bridgeObjectRetain(v41);
        v88 = sub_10016EC84(v80, v41, &v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v45 + 4);
        swift_bridgeObjectRelease_n(v41, 3);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Accessory - Timeline: failed for %s (no location permissions)", v45, 0xCu);
        swift_arrayDestroy(v46, 1);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v45, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v41, 2);
      }
      v54 = (void (*)(_QWORD, _QWORD, _QWORD))v84;
      sub_10016627C(0, (uint64_t)v84);
      v55 = type metadata accessor for WidgetRefreshFailureReason(0);
      v56 = v83;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v83, 1, 1, v55);
      v87(v54, v56);
      swift_release(v28);
      sub_100016904(v56, &qword_1001C7238);
      (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v85 + 8))(v54, v86);
    }
    else
    {
      sub_10003EB70(v82, (uint64_t)v14, &qword_1001C0E90);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v15) == 1)
      {
        sub_100016904((uint64_t)v14, &qword_1001C0E90);
        if (qword_1001BEE98 != -1)
          swift_once(&qword_1001BEE98, sub_100097BD0);
        v47 = type metadata accessor for Logger(0);
        sub_100025184(v47, (uint64_t)qword_1001D9FF0);
        v48 = v74;
        v49 = swift_bridgeObjectRetain_n(v74, 2);
        v50 = Logger.logObject.getter(v49);
        v51 = static os_log_type_t.default.getter(v50);
        if (os_log_type_enabled(v50, v51))
        {
          v52 = (uint8_t *)swift_slowAlloc(12, -1);
          v53 = swift_slowAlloc(32, -1);
          v89 = v53;
          *(_DWORD *)v52 = 136315138;
          swift_bridgeObjectRetain(v48);
          v88 = sub_10016EC84(v80, v48, &v89);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v52 + 4);
          swift_bridgeObjectRelease_n(v48, 3);
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Accessory - Timeline: failed for %s (no location)", v52, 0xCu);
          swift_arrayDestroy(v53, 1);
          swift_slowDealloc(v53, -1, -1);
          swift_slowDealloc(v52, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v48, 2);
        }
        v68 = (void (*)(_QWORD, _QWORD, _QWORD))v84;
        sub_10016627C(1, (uint64_t)v84);
        v69 = enum case for WidgetRefreshFailureReason.noLocationData(_:);
        v70 = type metadata accessor for WidgetRefreshFailureReason(0);
        v71 = v83;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 104))(v83, v69, v70);
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v71, 0, 1, v70);
        v87(v68, v71);
        swift_release(v28);
        sub_100016904(v71, &qword_1001C7238);
        (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v85 + 8))(v68, v86);
      }
      else
      {
        v84 = *(_QWORD **)(v16 + 32);
        ((void (*)(char *, char *, uint64_t))v84)(v21, v14, v15);
        v86 = *(_QWORD *)(v28 + 80);
        LODWORD(v85) = *(unsigned __int8 *)(v28 + 16);
        v73 = v28;
        v83 = swift_allocObject(&unk_1001BB6F0, 24, 7);
        swift_weakInit(v83 + 16, v28);
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
        v57 = v76;
        (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v77, v75, v78);
        v58 = *(unsigned __int8 *)(v16 + 80);
        v59 = (v58 + 40) & ~v58;
        v75 = v59 + v17;
        v60 = *(unsigned __int8 *)(v57 + 80);
        v61 = (v60 + v59 + v17 + 1) & ~v60;
        v82 = (v11 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
        v62 = (_QWORD *)swift_allocObject(&unk_1001BB768, v82 + 16, v58 | v60 | 7);
        v63 = v83;
        v64 = v80;
        v62[2] = v83;
        v62[3] = v64;
        v65 = v74;
        v62[4] = v74;
        ((void (*)(char *, char *, uint64_t))v84)((char *)v62 + v59, v19, v15);
        *((_BYTE *)v62 + v75) = v81;
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))((char *)v62 + v61, v77, v78);
        v66 = (_QWORD *)((char *)v62 + v82);
        v67 = v79;
        *v66 = v87;
        v66[1] = v67;
        swift_bridgeObjectRetain(v65);
        swift_retain(v63);
        swift_retain(v67);
        sub_100111814((uint64_t)v21, v85, (uint64_t)sub_10016F3AC, (uint64_t)v62);
        swift_release(v62);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
        swift_release(v63);
        swift_release(v73);
      }
    }
  }
  else
  {
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v34 = type metadata accessor for Logger(0);
    sub_100025184(v34, (uint64_t)qword_1001D9FF0);
    v35 = swift_bridgeObjectRetain_n(a5, 2);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v89 = v39;
      *(_DWORD *)v38 = 136315138;
      swift_bridgeObjectRetain(a5);
      v88 = sub_10016EC84(v80, a5, &v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v38 + 4);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Accessory - Timeline: failed for %s (we have been deallocated while obtaining location information)", v38, 0xCu);
      swift_arrayDestroy(v39, 1);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a5, 2);
    }
  }
}

void sub_10016AA28(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7, void (*a8)(uint64_t, uint64_t), uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t refreshed;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[2];
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[24];

  v89 = a8;
  v90 = a3;
  v85 = a7;
  LODWORD(v84) = a6;
  v91 = a5;
  v12 = sub_100005D40(&qword_1001C7248);
  __chkstk_darwin(v12);
  v14 = (char *)v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005D40(&qword_1001C7238);
  __chkstk_darwin(v15);
  v86 = (uint64_t)v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005D40(&qword_1001C7240);
  v88 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v87 = (uint64_t)v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for WeatherDataOperationResult(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)v80 - v23;
  v25 = sub_100005D40(&qword_1001C3190);
  __chkstk_darwin(v25);
  v27 = (_QWORD *)((char *)v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v94, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v29 = Strong;
    v83 = a9;
    sub_10003EB70(a1, (uint64_t)v27, &qword_1001C3190);
    if (swift_getEnumCaseMultiPayload(v27, v25) == 1)
    {
      v30 = *v27;
      if (qword_1001BEE98 != -1)
        swift_once(&qword_1001BEE98, sub_100097BD0);
      v31 = type metadata accessor for Logger(0);
      v32 = sub_100025184(v31, (uint64_t)qword_1001D9FF0);
      v33 = swift_bridgeObjectRetain_n(a4, 2);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter(v34);
      v36 = os_log_type_enabled(v34, v35);
      v82 = v17;
      if (v36)
      {
        v84 = v29;
        v37 = swift_slowAlloc(12, -1);
        v80[1] = v32;
        v38 = (uint8_t *)v37;
        v39 = swift_slowAlloc(32, -1);
        v93 = v39;
        v81 = v22;
        *(_DWORD *)v38 = 136315138;
        swift_bridgeObjectRetain(a4);
        v92 = sub_10016EC84(v90, a4, &v93);
        v29 = v84;
        v22 = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v38 + 4);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Accessory - Timeline: failed to fetch or interpolate fresh weather data for %s, trying old cached data first", v38, 0xCu);
        swift_arrayDestroy(v39, 1);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      v52 = *(_QWORD *)(v29 + 80);
      swift_retain(v52);
      sub_100111FD0(v91);
      swift_release(v52);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v19) == 1)
      {
        sub_100016904((uint64_t)v14, &qword_1001C7248);
        swift_bridgeObjectRetain(a4);
        swift_errorRetain(v30);
        swift_bridgeObjectRetain(a4);
        v53 = swift_errorRetain(v30);
        v54 = Logger.logObject.getter(v53);
        v55 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v54, v55))
        {
          v56 = swift_slowAlloc(32, -1);
          v57 = swift_slowAlloc(64, -1);
          v93 = v57;
          *(_DWORD *)v56 = 136315651;
          swift_bridgeObjectRetain(a4);
          v92 = sub_10016EC84(v90, a4, &v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v56 + 4);
          swift_bridgeObjectRelease_n(a4, 3);
          *(_WORD *)(v56 + 12) = 2160;
          v92 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v56 + 14);
          *(_WORD *)(v56 + 22) = 2081;
          v92 = v30;
          swift_errorRetain(v30);
          v58 = sub_100005D40(&qword_1001C0FC8);
          v59 = String.init<A>(describing:)(&v92, v58);
          v61 = v60;
          v92 = sub_10016EC84(v59, v60, &v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v56 + 24);
          swift_bridgeObjectRelease(v61);
          swift_errorRelease(v30);
          swift_errorRelease(v30);
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Accessory - Timeline: failed to fetch weather data or get cached data for %s ... returning .noWeatherData. error=%{private,mask.hash}s", (uint8_t *)v56, 0x20u);
          swift_arrayDestroy(v57, 2);
          swift_slowDealloc(v57, -1, -1);
          swift_slowDealloc(v56, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(a4, 2);
          swift_errorRelease(v30);
          swift_errorRelease(v30);
        }

        v71 = v82;
        v72 = v87;
        sub_10016627C(2, v87);
        v73 = enum case for WidgetRefreshFailureReason.noWeatherData(_:);
        refreshed = type metadata accessor for WidgetRefreshFailureReason(0);
        v75 = v86;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(refreshed - 8) + 104))(v86, v73, refreshed);
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v75, 0, 1, refreshed);
        v89(v72, v75);
        swift_release(v29);
        swift_errorRelease(v30);
        sub_100016904(v75, &qword_1001C7238);
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v72, v71);
        return;
      }
      sub_10004D278((uint64_t)v14, (uint64_t)v22, type metadata accessor for WeatherDataOperationResult);
      v66 = swift_bridgeObjectRetain_n(a4, 2);
      v67 = Logger.logObject.getter(v66);
      v68 = static os_log_type_t.default.getter(v67);
      if (os_log_type_enabled(v67, v68))
      {
        v69 = (uint8_t *)swift_slowAlloc(12, -1);
        v70 = swift_slowAlloc(32, -1);
        v93 = v70;
        *(_DWORD *)v69 = 136315138;
        swift_bridgeObjectRetain(a4);
        v92 = sub_10016EC84(v90, a4, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v69 + 4);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Accessory - Timeline: successsully retrieved cached weather data for %s", v69, 0xCu);
        swift_arrayDestroy(v70, 1);
        swift_slowDealloc(v70, -1, -1);
        swift_slowDealloc(v69, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      v76 = v82;
      v77 = v87;
      sub_100167098();
      v78 = type metadata accessor for WidgetRefreshFailureReason(0);
      v79 = v86;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v86, 1, 1, v78);
      v89(v77, v79);
      swift_release(v29);
      swift_errorRelease(v30);
      sub_100016904(v79, &qword_1001C7238);
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v77, v76);
      v65 = (uint64_t)v22;
    }
    else
    {
      sub_10004D278((uint64_t)v27, (uint64_t)v24, type metadata accessor for WeatherDataOperationResult);
      if (qword_1001BEE98 != -1)
        swift_once(&qword_1001BEE98, sub_100097BD0);
      v46 = type metadata accessor for Logger(0);
      sub_100025184(v46, (uint64_t)qword_1001D9FF0);
      v47 = swift_bridgeObjectRetain_n(a4, 2);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.default.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc(12, -1);
        v51 = swift_slowAlloc(32, -1);
        v93 = v51;
        *(_DWORD *)v50 = 136315138;
        swift_bridgeObjectRetain(a4);
        v92 = sub_10016EC84(v90, a4, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v50 + 4);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Accessory - Timeline: successfully fetched weather data for %s", v50, 0xCu);
        swift_arrayDestroy(v51, 1);
        swift_slowDealloc(v51, -1, -1);
        swift_slowDealloc(v50, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      v62 = v87;
      sub_100167098();
      v63 = type metadata accessor for WidgetRefreshFailureReason(0);
      v64 = v86;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v86, 1, 1, v63);
      v89(v62, v64);
      swift_release(v29);
      sub_100016904(v64, &qword_1001C7238);
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v62, v17);
      v65 = (uint64_t)v24;
    }
    sub_100011894(v65, type metadata accessor for WeatherDataOperationResult);
    return;
  }
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v40 = type metadata accessor for Logger(0);
  sub_100025184(v40, (uint64_t)qword_1001D9FF0);
  v41 = swift_bridgeObjectRetain_n(a4, 2);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    v93 = v45;
    *(_DWORD *)v44 = 136315138;
    swift_bridgeObjectRetain(a4);
    v92 = sub_10016EC84(v90, a4, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v44 + 4);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Accessory - Timeline: failed for %s (we have been deallocated while fetching weather data)", v44, 0xCu);
    swift_arrayDestroy(v45, 1);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
}

void sub_10016B5D4()
{
  sub_100168684();
}

void sub_10016B5F4()
{
  sub_100169CA0();
}

uint64_t sub_10016B614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100170804;
  return TimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_10016B680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100170804;
  return TimelineProvider.relevance()(a1, a2, a3);
}

void sub_10016B6EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *isa;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  uint64_t v41[2];
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];

  sub_100070E5C();
  v2 = v1;
  v46 = v3;
  v5 = v4;
  v6 = sub_10008307C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v45 = (uint64_t)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v41 - v10;
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v12 = sub_10002538C();
  v13 = sub_100025184(v12, (uint64_t)qword_1001D9FF0);
  v14 = v5;
  sub_100170D5C();
  v15 = sub_1000253F8();
  if (sub_100170CB4(v15))
  {
    v41[1] = v13;
    v42 = v7;
    v43 = v11;
    v44 = v2;
    v16 = sub_100025358(32);
    v41[0] = sub_100025358(64);
    v48[1] = v41[0];
    *(_DWORD *)v16 = 136446723;
    sub_10016FA9C(v14);
    v47 = v17;
    v48[0] = v18;
    sub_100005D40(&qword_1001C0FB0);
    v19 = sub_100170D64();
    v21 = v20;
    v47 = sub_100070EC0(v19, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v16 + 4);

    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v16 + 12) = 2160;
    v22 = sub_100170D08();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22, v48, v23);
    *(_WORD *)(v16 + 22) = 2081;
    v24 = objc_msgSend(v14, "location");
    if (v24)
      sub_10016FA38(v24);
    else
      v25 = 0;
    v47 = (uint64_t)v24;
    v48[0] = v25;
    v26 = sub_100170D64();
    v28 = v27;
    v47 = sub_100070EC0(v26, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v16 + 24);

    swift_bridgeObjectRelease(v28);
    sub_1000CD538((void *)&_mh_execute_header, v0, v15, "Snapshot Requested. configuration.identifier=%{public}s, location=%{private,mask.hash}s", (uint8_t *)v16);
    v29 = v41[0];
    sub_100170C10(v41[0]);
    sub_10002534C(v29);
    sub_10002534C(v16);

    v11 = v43;
    v2 = v44;
    v7 = v42;
  }
  else
  {

  }
  if ((sub_100165D6C() & 1) != 0)
  {
    isa = v0[14].isa;
    if (!StubPPTWeatherDataManager.isServiceAvailable()())
    {
      sub_100170D5C();
      v31 = sub_1000253F8();
      if (os_log_type_enabled(isa, v31))
      {
        v32 = (uint8_t *)sub_100025358(2);
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, isa, v31, "Setup stub data", v32, 2u);
        sub_10002534C((uint64_t)v32);
      }

      StubPPTWeatherDataManager.setupStubData()();
    }
  }
  sub_100170CC0();
  sub_1001678FC();
  sub_1000D6D90();
  sub_100160888();
  sub_100170C58();
  sub_1000A7198();
  sub_100163358(2, (uint64_t)v11);
  v33 = sub_1001708BC((uint64_t)&unk_1001BB6F0);
  sub_100170978(v33);
  v34 = v45;
  sub_10004D258((uint64_t)v11, v45, type metadata accessor for ForecastEntry);
  v35 = *(unsigned __int8 *)(v7 + 80);
  v36 = (v35 + 40) & ~v35;
  v37 = (v8 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = (_QWORD *)swift_allocObject(&unk_1001BB8D0, v37 + 8, v35 | 7);
  v39 = v46;
  v38[2] = v33;
  v38[3] = v39;
  v38[4] = v2;
  sub_10004D278(v34, (uint64_t)v38 + v36, type metadata accessor for ForecastEntry);
  *(_QWORD *)((char *)v38 + v37) = v14;
  v40 = v14;
  sub_100170C08();
  swift_retain(v2);
  sub_100067ADC(v40, (uint64_t (*)(uint64_t, uint64_t))sub_1001700E8, (uint64_t)v38);
  sub_100156F24();
  sub_100011894((uint64_t)v11, type metadata accessor for ForecastEntry);
  sub_1000CD56C();
  sub_10001C770();
}

void sub_10016BAC0(uint64_t a1, int a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t Strong;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  void (*v75)(char *);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *);
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106[32];

  v96 = a7;
  v101 = (char *)a6;
  v102 = a5;
  v100 = a2;
  v99 = a1;
  v9 = sub_100005D40(&qword_1001C0E90);
  __chkstk_darwin(v9);
  v93 = (uint64_t)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for Location(0);
  v91 = *(_QWORD *)(v94 - 8);
  v11 = *(_QWORD *)(v91 + 64);
  v12 = __chkstk_darwin(v94);
  v90 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v92 = (uint64_t)&v88 - v13;
  v14 = sub_100005D40(&qword_1001BF9B8);
  __chkstk_darwin(v14);
  v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005D40(&qword_1001C7240);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ForecastEntry(0);
  v89 = *(_QWORD *)(v21 - 8);
  v22 = *(_QWORD *)(v89 + 64);
  v23 = __chkstk_darwin(v21);
  v97 = (uint64_t)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v88 - v24;
  a3 += 16;
  swift_beginAccess(a3, v106, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (!Strong)
  {
    a4((uint64_t)v101);
    return;
  }
  v95 = (void (*)(char *))a4;
  v98 = Strong;
  v27 = *(_QWORD *)(Strong + 120);
  swift_retain(v27);
  v28 = sub_100121C94();
  swift_release(v27);
  if ((v28 & 1) != 0)
  {
    v29 = v98;
    v30 = *(_QWORD *)(v98 + 120);
    swift_retain(v30);
    sub_10011F268(v99, (uint64_t)v20);
    swift_release(v30);
    v31 = Timeline.entries.getter(v17);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    sub_100023FBC();
    swift_bridgeObjectRelease(v31);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v21) != 1)
    {
      sub_10004D278((uint64_t)v16, (uint64_t)v25, type metadata accessor for ForecastEntry);
      v95(v25);
      swift_release(v29);
      v62 = (uint64_t)v25;
LABEL_25:
      sub_100011894(v62, type metadata accessor for ForecastEntry);
      return;
    }
    sub_100016904((uint64_t)v16, &qword_1001BF9B8);
  }
  if (v100 == 4)
  {
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v32 = type metadata accessor for Logger(0);
    sub_100025184(v32, (uint64_t)qword_1001D9FF0);
    v33 = v96;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(32, -1);
      v37 = swift_slowAlloc(64, -1);
      v105 = v37;
      *(_DWORD *)v36 = 136446723;
      sub_10016FA9C(v33);
      v103 = v38;
      v104 = v39;
      v40 = sub_100005D40(&qword_1001C0FB0);
      v41 = String.init<A>(reflecting:)(&v103, v40);
      v43 = v42;
      v103 = sub_10016EC84(v41, v42, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v36 + 4);

      swift_bridgeObjectRelease(v43);
      *(_WORD *)(v36 + 12) = 2160;
      v103 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v36 + 14);
      *(_WORD *)(v36 + 22) = 2081;
      v44 = objc_msgSend(v33, "location");
      if (v44)
        sub_10016FA38(v44);
      else
        v45 = 0;
      v103 = (uint64_t)v44;
      v104 = v45;
      v78 = String.init<A>(reflecting:)(&v103, v40);
      v80 = v79;
      v103 = sub_10016EC84(v78, v79, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v36 + 24);

      swift_bridgeObjectRelease(v80);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Snapshot: failed (no location permissions). configuration.identifier=%{public}s, location= %{private,mask.hash}s", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy(v37, 2);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

    }
    v81 = (void (*)(uint64_t))v95;
    v82 = v98;
    v83 = *(_QWORD *)(v98 + 88);
    swift_retain(v83);
    v84 = v97;
    sub_100163358(0, v97);
    swift_release(v83);
    v81(v84);
    swift_release(v82);
    v62 = v84;
    goto LABEL_25;
  }
  v46 = v93;
  sub_10003EB70(v99, v93, &qword_1001C0E90);
  v47 = v94;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v46, 1, v94) == 1)
  {
    sub_100016904(v46, &qword_1001C0E90);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v48 = type metadata accessor for Logger(0);
    sub_100025184(v48, (uint64_t)qword_1001D9FF0);
    v49 = v96;
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = swift_slowAlloc(32, -1);
      v53 = swift_slowAlloc(64, -1);
      v105 = v53;
      *(_DWORD *)v52 = 136446723;
      sub_10016FA9C(v49);
      v103 = v54;
      v104 = v55;
      v56 = sub_100005D40(&qword_1001C0FB0);
      v57 = String.init<A>(reflecting:)(&v103, v56);
      v59 = v58;
      v103 = sub_10016EC84(v57, v58, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v52 + 4);

      swift_bridgeObjectRelease(v59);
      *(_WORD *)(v52 + 12) = 2160;
      v103 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v52 + 14);
      *(_WORD *)(v52 + 22) = 2081;
      v60 = objc_msgSend(v49, "location");
      if (v60)
        sub_10016FA38(v60);
      else
        v61 = 0;
      v103 = (uint64_t)v60;
      v104 = v61;
      v85 = String.init<A>(reflecting:)(&v103, v56);
      v87 = v86;
      v103 = sub_10016EC84(v85, v86, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v52 + 24);

      swift_bridgeObjectRelease(v87);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Snapshot failed (no location). configuration.identifier=%{public}s, location=%{private,mask.hash}s", (uint8_t *)v52, 0x20u);
      swift_arrayDestroy(v53, 2);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);

    }
    else
    {

    }
    v95(v101);
  }
  else
  {
    v63 = v91;
    v64 = v92;
    v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32);
    v88(v92, v46, v47);
    v65 = v98;
    v99 = *(_QWORD *)(v98 + 80);
    LODWORD(v96) = *(unsigned __int8 *)(v98 + 16);
    v66 = swift_allocObject(&unk_1001BB6F0, 24, 7);
    swift_weakInit(v66 + 16, v65);
    v67 = v97;
    sub_10004D258((uint64_t)v101, v97, type metadata accessor for ForecastEntry);
    v68 = v90;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v90, v64, v47);
    v69 = *(unsigned __int8 *)(v89 + 80);
    v70 = (v69 + 40) & ~v69;
    v71 = v70 + v22;
    v72 = *(unsigned __int8 *)(v63 + 80);
    v73 = (v72 + v71 + 1) & ~v72;
    v74 = (_QWORD *)swift_allocObject(&unk_1001BB8F8, v73 + v11, v69 | v72 | 7);
    v75 = v95;
    v74[2] = v66;
    v74[3] = v75;
    v76 = v102;
    v74[4] = v102;
    sub_10004D278(v67, (uint64_t)v74 + v70, type metadata accessor for ForecastEntry);
    *((_BYTE *)v74 + v71) = v100;
    v88((uint64_t)v74 + v73, (uint64_t)v68, v47);
    swift_retain(v66);
    swift_retain(v76);
    v77 = v92;
    sub_100111814(v92, (int)v96, (uint64_t)sub_100170780, (uint64_t)v74);
    swift_release(v74);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v77, v47);
    swift_release(v66);
  }
  swift_release(v98);
}

void sub_10016C418(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t Strong;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char v65[24];

  v60 = a7;
  v62 = a6;
  v12 = sub_100005D40(&qword_1001C7248);
  __chkstk_darwin(v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v15);
  v61 = (uint64_t)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for WeatherDataOperationResult(0);
  v18 = __chkstk_darwin(v17);
  v58 = (uint64_t)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v56 - v20;
  v22 = sub_100005D40(&qword_1001C3190);
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v65, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
  {
    a3(a5);
    return;
  }
  v26 = Strong;
  v59 = a4;
  sub_10003EB70(a1, (uint64_t)v24, &qword_1001C3190);
  if (swift_getEnumCaseMultiPayload(v24, v22) != 1)
  {
    sub_10004D278((uint64_t)v24, (uint64_t)v21, type metadata accessor for WeatherDataOperationResult);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v44 = type metadata accessor for Logger(0);
    v45 = sub_100025184(v44, (uint64_t)qword_1001D9FF0);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = v26;
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Snapshot: successsully fetched weather data", v49, 2u);
      v50 = v49;
      v26 = v48;
      swift_slowDealloc(v50, -1, -1);
    }

    v51 = v61;
    sub_100166854((uint64_t)v21, v62, v61);
    a3(v51);
    swift_release(v26);
    sub_100011894(v51, type metadata accessor for ForecastEntry);
    v52 = (uint64_t)v21;
    goto LABEL_17;
  }
  v57 = v26;
  v27 = *v24;
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_100025184(v28, (uint64_t)qword_1001D9FF0);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Snapshot: failed to fetch or interpolate fresh weather data, trying old cached data first", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  v33 = v57;
  v34 = *(_QWORD *)(v57 + 80);
  swift_retain(v34);
  sub_100111FD0(v60);
  swift_release(v34);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v17) != 1)
  {
    v53 = v58;
    sub_10004D278((uint64_t)v14, v58, type metadata accessor for WeatherDataOperationResult);
    v54 = v61;
    sub_100166854(v53, v62, v61);
    a3(v54);
    swift_release(v33);
    swift_errorRelease(v27);
    sub_100011894(v54, type metadata accessor for ForecastEntry);
    v52 = v53;
LABEL_17:
    sub_100011894(v52, type metadata accessor for WeatherDataOperationResult);
    return;
  }
  sub_100016904((uint64_t)v14, &qword_1001C7248);
  swift_errorRetain(v27);
  v35 = swift_errorRetain(v27);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = swift_slowAlloc(22, -1);
    v39 = swift_slowAlloc(32, -1);
    *(_DWORD *)v38 = 141558275;
    v63 = 1752392040;
    v64 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v38 + 4);
    *(_WORD *)(v38 + 12) = 2081;
    v63 = v27;
    swift_errorRetain(v27);
    v40 = sub_100005D40(&qword_1001C0FC8);
    v41 = String.init<A>(describing:)(&v63, v40);
    v43 = v42;
    v63 = sub_10016EC84(v41, v42, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v38 + 14);
    swift_bridgeObjectRelease(v43);
    swift_errorRelease(v27);
    swift_errorRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Snapshot: failed to fetch weather data or get cached data. error=%{private,mask.hash}s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy(v39, 1);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);
  }
  else
  {
    swift_errorRelease(v27);
    swift_errorRelease(v27);
  }

  v55 = v57;
  a3(a5);
  swift_release(v55);
  swift_errorRelease(v27);
}

void sub_10016C9F0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t, uint64_t);
  _BOOL8 v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  NSObject *v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  sub_100070E5C();
  v1 = v0;
  v75 = v2;
  v76 = v3;
  v5 = v4;
  v7 = v6;
  v83 = sub_1001708B4();
  v74 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  sub_100170DB8();
  v81 = v9;
  v82 = v8;
  v80 = sub_10002338C();
  v85 = *(_QWORD *)(v80 - 8);
  v10 = *(_QWORD *)(v85 + 64);
  v11 = __chkstk_darwin(v80);
  v72 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  sub_100023434();
  v84 = v12;
  v13 = v1[3];
  v14 = v1[4];
  v15 = qword_1001BEE98;
  swift_bridgeObjectRetain(v14);
  if (v15 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v16 = sub_10002538C();
  v17 = sub_100025184(v16, (uint64_t)qword_1001D9FF0);
  v18 = v7;
  swift_bridgeObjectRetain_n(v14, 2);
  v19 = v18;
  v67 = v17;
  sub_100170D5C();
  v20 = sub_1000253F8();
  v21 = sub_100170CB4(v20);
  v86 = v19;
  v77 = v14;
  v78 = v13;
  if (v21)
  {
    v22 = sub_100025358(42);
    v79 = sub_100025358(96);
    v89 = v79;
    *(_DWORD *)v22 = 136315907;
    swift_bridgeObjectRetain(v14);
    v87 = sub_10016EC84(v13, v14, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v22 + 4);
    swift_bridgeObjectRelease_n(v14, 3);
    *(_WORD *)(v22 + 12) = 2082;
    sub_10016FA9C(v19);
    v87 = v23;
    v88 = v24;
    sub_100005D40(&qword_1001C0FB0);
    v25 = sub_100170B00();
    v27 = v26;
    v87 = sub_100170970(v25, v26);
    v28 = (uint64_t)&v19[1];
    sub_100170D9C((uint64_t)&v87, v28);

    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v22 + 22) = 2160;
    v87 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v28, v22 + 24);
    *(_WORD *)(v22 + 32) = 2081;
    v29 = -[NSObject location](v86, "location");
    if (v29)
      sub_10016FA38(v29);
    else
      v30 = 0;
    v87 = (uint64_t)v29;
    v88 = v30;
    v32 = sub_100170B00();
    v34 = v33;
    v87 = sub_100170970(v32, v33);
    sub_100170D9C((uint64_t)&v87, v28 + 8);
    v35 = v86;

    swift_bridgeObjectRelease(v34);
    sub_100170D24((void *)&_mh_execute_header, v18, v20, "Timeline requested for for %s. configuration identifier=%{public}s - Location: %{private,mask.hash}s ", (uint8_t *)v22);
    v36 = v79;
    sub_100170D1C(v79);
    sub_10002534C(v36);
    sub_10002534C(v22);

  }
  else
  {

    v31 = swift_bridgeObjectRelease_n(v14, 2);
  }
  v37 = v84;
  static Date.now.getter(v31);
  sub_100022330(v1 + 16, v1[19]);
  sub_100170C60();
  v38 = sub_1001708BC((uint64_t)&unk_1001BB6F0);
  sub_100170978(v38);
  v73 = v1;
  v39 = v74;
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16);
  v41 = v82;
  v79 = v5;
  v42 = v5;
  v43 = v83;
  v71 = v40;
  v40(v82, v42, v83);
  v44 = v85;
  v45 = v72;
  sub_1000A6CB0(v72, v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 16));
  v46 = *(unsigned __int8 *)(v39 + 80);
  v68 = ~v46;
  v47 = (v46 + 40) & ~v46;
  v69 = v46;
  v48 = *(unsigned __int8 *)(v44 + 80);
  v49 = (v81 + v48 + v47) & ~v48;
  v70 = v46 | 7;
  v50 = (_QWORD *)swift_allocObject(&unk_1001BB830, v49 + v10, v46 | 7 | v48);
  v51 = v75;
  v50[2] = v38;
  v50[3] = v51;
  v52 = v76;
  v50[4] = v76;
  v53 = (char *)v50 + v47;
  v54 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 32);
  v54(v53, v41, v43);
  sub_1000A6CB0((uint64_t)v50 + v49, v45, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 32));
  swift_retain(v52);
  if ((sub_100165D6C() & 1) != 0)
  {
    v55 = StubPPTWeatherDataManager.isServiceAvailable()();
    if (!v55)
    {
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.default.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)sub_100025358(2);
        *(_WORD *)v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Setup stub data", v58, 2u);
        sub_10002534C((uint64_t)v58);
      }

      StubPPTWeatherDataManager.setupStubData()();
    }
  }
  sub_100170CC0();
  sub_1001678FC();
  sub_1000D6D90();
  sub_100160888();
  sub_100170C58();
  sub_1000A7198();
  v59 = sub_1001708BC((uint64_t)&unk_1001BB6F0);
  sub_100170978(v59);
  v61 = v82;
  v60 = v83;
  v71(v82, v79, v83);
  v62 = (v69 + 64) & v68;
  v63 = (char *)swift_allocObject(&unk_1001BB858, v62 + v81, v70);
  v64 = v78;
  *((_QWORD *)v63 + 2) = v59;
  *((_QWORD *)v63 + 3) = v64;
  *((_QWORD *)v63 + 4) = v77;
  *((_QWORD *)v63 + 5) = sub_10016F8EC;
  v65 = v86;
  *((_QWORD *)v63 + 6) = v50;
  *((_QWORD *)v63 + 7) = v65;
  v54(&v63[v62], v61, v60);
  v66 = v65;
  swift_retain(v59);
  sub_100170C08();
  sub_100067ADC(v66, (uint64_t (*)(uint64_t, uint64_t))sub_10016F9E8, (uint64_t)v63);
  sub_1000CD56C();
  sub_100156F24();
  sub_1000287E0(v84, *(uint64_t (**)(uint64_t, uint64_t))(v85 + 8));
  swift_release(v59);
  sub_10001C770();
}

void sub_10016CF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Strong;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;

  sub_100070E5C();
  v47 = v22;
  v48 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = sub_100005D40(&qword_1001C7240);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(_QWORD *)(v36 + 64);
  __chkstk_darwin(v35);
  v30 += 16;
  swift_beginAccess(v30, &v49, 0, 0);
  Strong = swift_weakLoadStrong(v30);
  if (Strong)
  {
    v39 = (_QWORD *)Strong;
    v46 = a21;
    sub_100168194(v26, v24, v32);
    v40 = v39[19];
    v45 = v39[20];
    sub_100022330(v39 + 16, v40);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))((char *)&v44 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v35);
    v41 = *(unsigned __int8 *)(v36 + 80);
    v42 = (v41 + 32) & ~v41;
    v43 = swift_allocObject(v47, v42 + v37, v41 | 7);
    *(_QWORD *)(v43 + 16) = v48;
    *(_QWORD *)(v43 + 24) = v28;
    (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v43 + v42, (char *)&v44 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0), v35);
    sub_100170C08();
    dispatch thunk of WidgetTimelineTelemetryManagerType.finish(_:)(v46, v43, v40, v45);
    swift_release(v43);
    swift_release(v39);
  }
  else
  {
    v48(v34);
  }
  sub_10001C770();
}

void sub_10016D0F4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(_QWORD, _QWORD), uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t refreshed;
  void (*v33)(_QWORD, _QWORD, _QWORD);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  id v67;
  uint64_t v68;
  void (*v69)(_QWORD, _QWORD);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  id v83;
  void (*v84)(_QWORD, _QWORD);
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(_QWORD, _QWORD, _QWORD);
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(_QWORD, _QWORD, _QWORD);
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(_QWORD, _QWORD);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE v118[32];

  v105 = a8;
  v114 = a6;
  v109 = a5;
  v110 = a1;
  v107 = a4;
  v108 = a2;
  v103 = type metadata accessor for TimelineProviderContext(0);
  v101 = *(_QWORD *)(v103 - 8);
  v11 = *(_QWORD *)(v101 + 64);
  __chkstk_darwin(v103);
  v102 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001C0E90);
  __chkstk_darwin(v12);
  v14 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Location(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = __chkstk_darwin(v15);
  v19 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v100 - v20;
  v22 = sub_100005D40(&qword_1001C7238);
  __chkstk_darwin(v22);
  v111 = (uint64_t *)((char *)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = sub_100005D40(&qword_1001C7240);
  v113 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v112 = (uint64_t)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v118, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v104 = v24;
    v106 = a7;
    v27 = *(_QWORD *)(Strong + 120);
    v28 = Strong;
    swift_retain(v27);
    v29 = sub_100121C94();
    swift_release(v27);
    if ((v29 & 1) != 0)
    {
      v30 = *(_QWORD *)(v28 + 120);
      swift_retain(v30);
      v31 = v112;
      sub_10011F268(v110, v112);
      swift_release(v30);
      refreshed = type metadata accessor for WidgetRefreshFailureReason(0);
      v33 = (void (*)(_QWORD, _QWORD, _QWORD))v111;
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v111, 1, 1, refreshed);
      v114(v31, v33);
      swift_release(v28);
      sub_100016904((uint64_t)v33, &qword_1001C7238);
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v31, v104);
    }
    else
    {
      v100 = v28;
      if (v108 == 4)
      {
        if (qword_1001BEE98 != -1)
          swift_once(&qword_1001BEE98, sub_100097BD0);
        v41 = type metadata accessor for Logger(0);
        sub_100025184(v41, (uint64_t)qword_1001D9FF0);
        v42 = v105;
        v43 = Logger.logObject.getter(v42);
        v44 = static os_log_type_t.default.getter(v43);
        if (os_log_type_enabled(v43, v44))
        {
          v45 = swift_slowAlloc(32, -1);
          v46 = swift_slowAlloc(64, -1);
          v117 = v46;
          *(_DWORD *)v45 = 136446723;
          sub_10016FA9C(v42);
          v115 = v47;
          v116 = v48;
          v49 = sub_100005D40(&qword_1001C0FB0);
          v50 = String.init<A>(reflecting:)(&v115, v49);
          v52 = v51;
          v115 = sub_10016EC84(v50, v51, &v117);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v45 + 4);

          swift_bridgeObjectRelease(v52);
          *(_WORD *)(v45 + 12) = 2160;
          v115 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v45 + 14);
          *(_WORD *)(v45 + 22) = 2081;
          v53 = objc_msgSend(v42, "location");
          if (v53)
            sub_10016FA38(v53);
          else
            v54 = 0;
          v69 = v114;
          v115 = (uint64_t)v53;
          v116 = v54;
          v85 = String.init<A>(reflecting:)(&v115, v49);
          v87 = v86;
          v115 = sub_10016EC84(v85, v86, &v117);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v45 + 24);

          swift_bridgeObjectRelease(v87);
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "Timeline failed (no location permissions). configuration.identifier=%{public}s, location=%{private,mask.hash}s ", (uint8_t *)v45, 0x20u);
          swift_arrayDestroy(v46, 2);
          swift_slowDealloc(v46, -1, -1);
          swift_slowDealloc(v45, -1, -1);

        }
        else
        {

          v69 = v114;
        }
        v88 = v112;
        v89 = v100;
        sub_10016627C(0, v112);
        v90 = type metadata accessor for WidgetRefreshFailureReason(0);
        v91 = (void (*)(_QWORD, _QWORD, _QWORD))v111;
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v111, 1, 1, v90);
        v69(v88, v91);
        swift_release(v89);
        sub_100016904((uint64_t)v91, &qword_1001C7238);
        (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v88, v104);
      }
      else
      {
        sub_10003EB70(v110, (uint64_t)v14, &qword_1001C0E90);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v15) == 1)
        {
          sub_100016904((uint64_t)v14, &qword_1001C0E90);
          if (qword_1001BEE98 != -1)
            swift_once(&qword_1001BEE98, sub_100097BD0);
          v55 = type metadata accessor for Logger(0);
          sub_100025184(v55, (uint64_t)qword_1001D9FF0);
          v56 = v105;
          v57 = Logger.logObject.getter(v56);
          v58 = static os_log_type_t.default.getter(v57);
          if (os_log_type_enabled(v57, v58))
          {
            v59 = swift_slowAlloc(32, -1);
            v60 = swift_slowAlloc(64, -1);
            v117 = v60;
            *(_DWORD *)v59 = 136446723;
            sub_10016FA9C(v56);
            v115 = v61;
            v116 = v62;
            v63 = sub_100005D40(&qword_1001C0FB0);
            v64 = String.init<A>(reflecting:)(&v115, v63);
            v66 = v65;
            v115 = sub_10016EC84(v64, v65, &v117);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v59 + 4);

            swift_bridgeObjectRelease(v66);
            *(_WORD *)(v59 + 12) = 2160;
            v115 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v59 + 14);
            *(_WORD *)(v59 + 22) = 2081;
            v67 = objc_msgSend(v56, "location");
            if (v67)
              sub_10016FA38(v67);
            else
              v68 = 0;
            v84 = v114;
            v115 = (uint64_t)v67;
            v116 = v68;
            v92 = String.init<A>(reflecting:)(&v115, v63);
            v94 = v93;
            v115 = sub_10016EC84(v92, v93, &v117);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v59 + 24);

            swift_bridgeObjectRelease(v94);
            _os_log_impl((void *)&_mh_execute_header, v57, v58, "Timeline failed (no location). configuration.identifier=%{public}s, location=%{private,mask.hash}s ", (uint8_t *)v59, 0x20u);
            swift_arrayDestroy(v60, 2);
            swift_slowDealloc(v60, -1, -1);
            swift_slowDealloc(v59, -1, -1);

          }
          else
          {

            v84 = v114;
          }
          v95 = v112;
          v96 = v100;
          sub_10016627C(1, v112);
          v97 = enum case for WidgetRefreshFailureReason.noLocationData(_:);
          v98 = type metadata accessor for WidgetRefreshFailureReason(0);
          v99 = (void (*)(_QWORD, _QWORD, _QWORD))v111;
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 104))(v111, v97, v98);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v98);
          v84(v95, v99);
          swift_release(v96);
          sub_100016904((uint64_t)v99, &qword_1001C7238);
          (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v95, v104);
        }
        else
        {
          v111 = *(_QWORD **)(v16 + 32);
          ((void (*)(char *, char *, uint64_t))v111)(v21, v14, v15);
          v70 = v100;
          v113 = *(_QWORD *)(v100 + 80);
          LODWORD(v112) = *(unsigned __int8 *)(v100 + 16);
          v71 = (char *)swift_allocObject(&unk_1001BB6F0, 24, 7);
          v105 = v71;
          swift_weakInit(v71 + 16, v70);
          (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
          v72 = v101;
          (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v102, a9, v103);
          v73 = *(unsigned __int8 *)(v16 + 80);
          v74 = (v73 + 40) & ~v73;
          v110 = v74 + v17;
          v75 = *(unsigned __int8 *)(v72 + 80);
          v76 = (v75 + v74 + v17 + 1) & ~v75;
          v77 = (v11 + v76 + 7) & 0xFFFFFFFFFFFFFFF8;
          v78 = (_QWORD *)swift_allocObject(&unk_1001BB880, v77 + 16, v73 | v75 | 7);
          v79 = v107;
          v78[2] = v71;
          v78[3] = v79;
          v80 = v109;
          v78[4] = v109;
          ((void (*)(char *, char *, uint64_t))v111)((char *)v78 + v74, v19, v15);
          *((_BYTE *)v78 + v110) = v108;
          (*(void (**)(char *, char *, uint64_t))(v72 + 32))((char *)v78 + v76, v102, v103);
          v81 = (_QWORD *)((char *)v78 + v77);
          v82 = v106;
          *v81 = v114;
          v81[1] = v82;
          swift_bridgeObjectRetain(v80);
          v83 = v105;
          swift_retain(v105);
          swift_retain(v82);
          sub_100111814((uint64_t)v21, v112, (uint64_t)sub_10016FB94, (uint64_t)v78);
          swift_release(v78);
          (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
          swift_release(v83);
          swift_release(v100);
        }
      }
    }
  }
  else
  {
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v34 = type metadata accessor for Logger(0);
    sub_100025184(v34, (uint64_t)qword_1001D9FF0);
    v35 = v109;
    v36 = swift_bridgeObjectRetain_n(v109, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v115 = v40;
      *(_DWORD *)v39 = 136315138;
      swift_bridgeObjectRetain(v35);
      v117 = sub_10016EC84(v107, v35, &v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118, v39 + 4);
      swift_bridgeObjectRelease_n(v35, 3);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Timeline: failed for %s (we have been deallocated while obtaining location information)", v39, 0xCu);
      swift_arrayDestroy(v40, 1);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v35, 2);
    }
  }
}

void sub_10016DC18(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7, void (*a8)(uint64_t, uint64_t), uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t Strong;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t refreshed;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[2];
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124[32];

  v118 = a8;
  v115 = a7;
  LODWORD(v114) = a6;
  v120 = a3;
  v121 = a5;
  v107 = type metadata accessor for Location.Identifier(0);
  __chkstk_darwin(v107);
  v106 = (char *)v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Location(0);
  v109 = *(_QWORD *)(v13 - 8);
  v110 = v13;
  __chkstk_darwin(v13);
  v112 = (char *)v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005D40(&qword_1001C7248);
  __chkstk_darwin(v15);
  v17 = (char *)v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005D40(&qword_1001C7238);
  __chkstk_darwin(v18);
  v116 = (uint64_t)v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_100005D40(&qword_1001C7240);
  v117 = *(_QWORD *)(v119 - 8);
  v20 = __chkstk_darwin(v119);
  v113 = (uint64_t)v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)v105 - v22;
  v24 = type metadata accessor for WeatherDataOperationResult(0);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)v105 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)v105 - v28;
  v30 = sub_100005D40(&qword_1001C3190);
  __chkstk_darwin(v30);
  v32 = (_QWORD *)((char *)v105 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v124, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v34 = Strong;
    v111 = a9;
    sub_10003EB70(a1, (uint64_t)v32, &qword_1001C3190);
    if (swift_getEnumCaseMultiPayload(v32, v30) == 1)
    {
      v114 = *v32;
      if (qword_1001BEE98 != -1)
        swift_once(&qword_1001BEE98, sub_100097BD0);
      v35 = type metadata accessor for Logger(0);
      v36 = sub_100025184(v35, (uint64_t)qword_1001D9FF0);
      v37 = swift_bridgeObjectRetain_n(a4, 2);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.default.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        v108 = v34;
        v40 = swift_slowAlloc(12, -1);
        v105[1] = v36;
        v41 = (uint8_t *)v40;
        v42 = swift_slowAlloc(32, -1);
        v123 = v42;
        *(_DWORD *)v41 = 136315138;
        swift_bridgeObjectRetain(a4);
        v122 = sub_10016EC84(v120, a4, &v123);
        v34 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v41 + 4);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Timeline: failed to fetch or interpolate fresh weather data for %s, trying old cached data first", v41, 0xCu);
        swift_arrayDestroy(v42, 1);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      v55 = v121;
      v56 = v112;
      v57 = *(_QWORD *)(v34 + 80);
      swift_retain(v57);
      sub_100111FD0(v55);
      swift_release(v57);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v17, 1, v24) == 1)
      {
        sub_100016904((uint64_t)v17, &qword_1001C7248);
        v59 = v109;
        v58 = v110;
        (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v56, v55, v110);
        swift_bridgeObjectRetain(a4);
        v60 = v114;
        swift_errorRetain(v114);
        swift_bridgeObjectRetain(a4);
        v61 = swift_errorRetain(v60);
        v62 = Logger.logObject.getter(v61);
        v63 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v62, v63))
        {
          v64 = v56;
          v65 = swift_slowAlloc(52, -1);
          v66 = swift_slowAlloc(96, -1);
          v123 = v66;
          *(_DWORD *)v65 = 136316163;
          swift_bridgeObjectRetain(a4);
          v122 = sub_10016EC84(v120, a4, &v123);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v65 + 4);
          swift_bridgeObjectRelease_n(a4, 3);
          v108 = v34;
          *(_WORD *)(v65 + 12) = 2160;
          v122 = 1752392040;
          v67 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v65 + 14);
          *(_WORD *)(v65 + 22) = 2081;
          v68 = v106;
          Location.identifier.getter(v67);
          v69 = String.init<A>(reflecting:)(v68, v107);
          v71 = v70;
          v122 = sub_10016EC84(v69, v70, &v123);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v65 + 24);
          v72 = swift_bridgeObjectRelease(v71);
          (*(void (**)(char *, uint64_t, __n128))(v109 + 8))(v64, v110, v72);
          *(_WORD *)(v65 + 32) = 2160;
          v122 = 1752392040;
          v60 = v114;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v65 + 34);
          *(_WORD *)(v65 + 42) = 2081;
          v122 = v60;
          swift_errorRetain(v60);
          v73 = sub_100005D40(&qword_1001C0FC8);
          v74 = String.init<A>(describing:)(&v122, v73);
          v76 = v75;
          v122 = sub_10016EC84(v74, v75, &v123);
          v34 = v108;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v65 + 44);
          swift_bridgeObjectRelease(v76);
          swift_errorRelease(v60);
          swift_errorRelease(v60);
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "Timeline: failed to fetch weather data or get cached data for %s. location=%{private,mask.hash}s, error=%{private,mask.hash}s", (uint8_t *)v65, 0x34u);
          swift_arrayDestroy(v66, 3);
          swift_slowDealloc(v66, -1, -1);
          swift_slowDealloc(v65, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(a4, 2);
          (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v58);
          swift_errorRelease(v60);
          swift_errorRelease(v60);
        }

        v95 = v119;
        v96 = v113;
        sub_10016627C(2, v113);
        v97 = enum case for WidgetRefreshFailureReason.noWeatherData(_:);
        refreshed = type metadata accessor for WidgetRefreshFailureReason(0);
        v99 = v116;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(refreshed - 8) + 104))(v116, v97, refreshed);
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v99, 0, 1, refreshed);
        v118(v96, v99);
        swift_release(v34);
        swift_errorRelease(v60);
        sub_100016904(v99, &qword_1001C7238);
        (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v96, v95);
        return;
      }
      sub_10004D278((uint64_t)v17, (uint64_t)v27, type metadata accessor for WeatherDataOperationResult);
      v90 = swift_bridgeObjectRetain_n(a4, 2);
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.default.getter(v91);
      if (os_log_type_enabled(v91, v92))
      {
        v93 = (uint8_t *)swift_slowAlloc(12, -1);
        v94 = swift_slowAlloc(32, -1);
        v123 = v94;
        *(_DWORD *)v93 = 136315138;
        swift_bridgeObjectRetain(a4);
        v122 = sub_10016EC84(v120, a4, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v93 + 4);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Timeline: successsully retrieved cached weather data for %s", v93, 0xCu);
        swift_arrayDestroy(v94, 1);
        swift_slowDealloc(v94, -1, -1);
        swift_slowDealloc(v93, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      v100 = v119;
      v101 = v113;
      v102 = v114;
      sub_100167098();
      v103 = type metadata accessor for WidgetRefreshFailureReason(0);
      v104 = v116;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v116, 1, 1, v103);
      v118(v101, v104);
      swift_release(v34);
      swift_errorRelease(v102);
      sub_100016904(v104, &qword_1001C7238);
      (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v101, v100);
      v89 = (uint64_t)v27;
    }
    else
    {
      sub_10004D278((uint64_t)v32, (uint64_t)v29, type metadata accessor for WeatherDataOperationResult);
      if (qword_1001BEE98 != -1)
        swift_once(&qword_1001BEE98, sub_100097BD0);
      v108 = v34;
      v49 = type metadata accessor for Logger(0);
      sub_100025184(v49, (uint64_t)qword_1001D9FF0);
      v50 = swift_bridgeObjectRetain_n(a4, 2);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.default.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(12, -1);
        v54 = swift_slowAlloc(32, -1);
        v123 = v54;
        *(_DWORD *)v53 = 136315138;
        swift_bridgeObjectRetain(a4);
        v122 = sub_10016EC84(v120, a4, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v53 + 4);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Timeline: successfully fetched weather data for %s", v53, 0xCu);
        swift_arrayDestroy(v54, 1);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v53, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      v77 = v119;
      v78 = v108;
      sub_100167098();
      v79 = Timeline.entries.getter(v77);
      v80 = *(_QWORD *)(v78 + 120);
      swift_retain(v80);
      v81 = sub_100121C38();
      swift_release(v80);
      if ((v81 & 1) != 0)
      {
        v82 = *(_QWORD *)(v78 + 120);
        v83 = swift_retain(v82);
        v84 = Location.name.getter(v83);
        v86 = v85;
        sub_100121460(v79, v84, v85);
        swift_release(v82);
        swift_bridgeObjectRelease(v86);
      }
      swift_bridgeObjectRelease(v79);
      v87 = type metadata accessor for WidgetRefreshFailureReason(0);
      v88 = v116;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v116, 1, 1, v87);
      v118((uint64_t)v23, v88);
      swift_release(v78);
      sub_100016904(v88, &qword_1001C7238);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v23, v77);
      v89 = (uint64_t)v29;
    }
    sub_100011894(v89, type metadata accessor for WeatherDataOperationResult);
    return;
  }
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v43 = type metadata accessor for Logger(0);
  sub_100025184(v43, (uint64_t)qword_1001D9FF0);
  v44 = swift_bridgeObjectRetain_n(a4, 2);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.default.getter(v45);
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    v123 = v48;
    *(_DWORD *)v47 = 136315138;
    swift_bridgeObjectRetain(a4);
    v122 = sub_10016EC84(v120, a4, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v47 + 4);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Timeline: failed for %s (we have been deallocated while fetching weather data)", v47, 0xCu);
    swift_arrayDestroy(v48, 1);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
}

uint64_t sub_10016E988(uint64_t a1)
{
  return sub_100165E70(a1);
}

void sub_10016E9A8()
{
  sub_10016B6EC();
}

void sub_10016E9C8()
{
  sub_10016C9F0();
}

uint64_t sub_10016E9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10016EA54;
  return IntentTimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_10016EA54()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10016EA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100170804;
  return IntentTimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_10016EB08()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10016EB30(uint64_t a1, uint64_t a2)
{
  return sub_10016F900(a1, a2, &unk_1001BB7B8, sub_10016F404);
}

uint64_t sub_10016EB44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1001708B4();
  sub_100170B40();
  sub_10017091C();
  sub_100170BD8();
  swift_release(*(_QWORD *)(v0 + 48));
  sub_100070F28();
  v1 = sub_100170B20();
  return sub_10017087C(v1, v2, v3);
}

void sub_10016EB94()
{
  unint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void (*v5)(_QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;

  sub_1001708B4();
  sub_100170A44();
  v0 = sub_1000CD63C();
  sub_10016A0B8(v0, v1, v2, v3, v4, v5, v6, v7);
}

id sub_10016EBE0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v4;
  NSString v8;
  Class isa;
  id v10;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  sub_100070744(0, &qword_1001C7260, RBSAttribute_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(v4, "initWithExplanation:target:attributes:", v8, a3, isa, swift_bridgeObjectRelease(a4).n128_f64[0]);

  return v10;
}

uint64_t sub_10016EC84(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  void *ObjectType;

  v6 = sub_10016ED54(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10016F36C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10016F36C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v12);
  return v7;
}

_QWORD *sub_10016ED54(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_10016EEA8((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_10016EF6C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (_QWORD *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

void *sub_10016EEA8(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory with negative count", 60, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1170, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1173, 0);
  }
  __break(1u);
  return result;
}

_QWORD *sub_10016EF6C(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_10016F000(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10016F1D4(0, v2[2] + 1, 1, (uint64_t)v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_10016F1D4((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

_QWORD *sub_10016F000(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4)
      goto LABEL_6;
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return &_swiftEmptyArrayStorage;
LABEL_6:
  v5 = sub_10016F170(v4, 0);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 71, 0);
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    goto LABEL_15;
  }
  if (v7 == v4)
    return v6;
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 1122, 0);
LABEL_15:
  __break(1u);
  return result;
}

_QWORD *sub_10016F170(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100005D40(&qword_1001C7230);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_10016F1D4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005D40(&qword_1001C7230);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100070330(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10016F2A8(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_10016F2A8(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10016F36C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10016F3AC(uint64_t a1)
{
  return sub_10016FBA0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *, _QWORD, char *, _QWORD, _QWORD))sub_10016AA28);
}

uint64_t sub_10016F3B8()
{
  _QWORD *v0;

  return sub_100167DFC(v0);
}

uint64_t sub_10016F3D0()
{
  uint64_t v0;

  sub_10017091C();

  return swift_deallocObject(v0, 32, 7);
}

void sub_10016F3F8()
{
  uint64_t v0;

  sub_100168028(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_10016F408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(uint64_t, uint64_t);
  uint64_t (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t, uint64_t);
  uint64_t (*v127)(uint64_t, uint64_t);
  uint64_t (*v128)(uint64_t, uint64_t);
  uint64_t v129;

  sub_10008307C();
  sub_1001708F8();
  sub_1000CD448();
  v8 = sub_10002338C();
  sub_100170924(v8);
  sub_100170B30();
  if (!sub_100016AC4(v3))
    sub_100170A1C();
  sub_100170B10();
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
  sub_100083198();
  sub_100170A5C();
  if (!sub_1000F9F90(v4))
    sub_100170AC4();
  sub_100170DD8();
  v9 = sub_100170C88();
  if (sub_1000831A0(v9) == 1)
  {
    v10 = sub_100170D84();
    v11 = sub_1000831A0(v10);
    switch(v11)
    {
      case 2:
        sub_100170D8C();
        v72 = sub_100170DA4();
        v74(v72, v73);
        break;
      case 1:
        sub_1000A726C();
        sub_100170964();
        v75 = sub_100170D94();
        v76 = sub_100070DE8();
        sub_10001C820(v76);
        v77 = v2 + *(int *)(v75 + 24);
        sub_100170964();
        v78 = (int *)sub_1000A7264();
        sub_10017094C(v77 + v78[5], v79, v80, v81, v82, v83, v84, v85, v109, v114, v119, v6, v126);
        sub_100170B88();
        v86 = sub_100005D40(&qword_1001BF090);
        v6 = *(_QWORD *)(*(_QWORD *)(v86 - 8) + 8);
        sub_1001708A8();
        sub_1001708D4(v77 + v78[8]);
        sub_100016A8C(v77 + v78[9]);
        if (!sub_100170854(v78[10]))
          sub_1001708A8();
        if (!sub_100170854(v78[11]))
          sub_1001708A8();
        sub_100170A30();
        v87 = sub_1000A7274();
        v88 = sub_1000A727C();
        sub_100170840(v88);
        sub_100016A8C(v86 + *(int *)(v87 + 24));
        sub_100016A8C(v86 + *(int *)(v87 + 28));
        v89 = sub_1000234BC();
        sub_1001308D0(*(_QWORD *)(v89 - 8));
        v90 = v77 + v78[15];
        if (!sub_100070EAC(v90))
          sub_100170808(v90, v91, v92, v93, v94, v95, v96, v97, v113, v118, v123, v125, v128);
        if (!sub_100170B50())
          sub_100170808(v90, v98, v99, v100, v101, v102, v103, v104, v113, v118, v123, v125, v128);
        v105 = sub_1000234CC();
        sub_100016A94(v105);
        v106 = sub_1000234C4();
        sub_100016A94(v106);
        v107 = *(_QWORD *)(v77 + v78[20] + 8);
        if (v107)
        {
          swift_bridgeObjectRelease(v107);
          sub_100170CA8();
        }
        break;
      case 0:
        v12 = sub_1000A726C();
        sub_1001709EC(v12);
        v13 = (int *)sub_100087ED4();
        v14 = v2 + v13[5];
        v15 = sub_100070DE8();
        sub_100170840(v15);
        sub_100170A04();
        v16 = (int *)sub_1000A7264();
        sub_10017094C(v14 + v16[5], v17, v18, v19, v20, v21, v22, v23, v7, v114, v119, v6, v126);
        sub_100170C48();
        v24 = sub_100005D40(&qword_1001BF090);
        sub_1001708C8();
        sub_100170C18();
        sub_100016A8C(v14 + v16[9]);
        if (!sub_10017082C(v16[10]))
          sub_1001708C8();
        v25 = sub_10017082C(v16[11]);
        if (!(_DWORD)v25)
          v25 = sub_1001708C8();
        sub_100170A90(v25, v26, v27, v28, v29, v30, v31, v32, v110, v115, v120);
        v7 = sub_1000A7274();
        v33 = sub_1000A727C();
        sub_10001C820(v33);
        sub_100016A8C(v24 + *(int *)(v7 + 24));
        sub_100016A8C(v24 + *(int *)(v7 + 28));
        v34 = sub_1000234BC();
        sub_10001C820(v34);
        v6 = v14 + v16[15];
        if (!sub_100070EAC(v6))
          sub_100170808(v6, v35, v36, v37, v38, v39, v40, v41, v111, (uint64_t)v116, v121, v124, v127);
        if (!sub_100170BE0())
          sub_100170808(v6, v42, v43, v44, v45, v46, v47, v48, v111, (uint64_t)v116, v121, v124, v127);
        v49 = sub_1000234CC();
        sub_10001C820(v49);
        v50 = sub_1000234C4();
        sub_10001C820(v50);
        v51 = v14 + v16[20];
        v52 = *(_QWORD *)(v51 + 8);
        if (v52)
        {
          swift_bridgeObjectRelease(v52);
          sub_100170A84();
        }
        sub_1001709E4(v13[7]);
        sub_1001709E4(v13[8]);
        v53 = sub_100170BC8();
        v54 = sub_100170CE4(v53);
        if (!(_DWORD)v54)
        {
          sub_100170DCC(v54, v55, v56, v57, v58, v59, v60, v61, v111, v116, v121);
          sub_100170808(v14 + v16[5], v62, v63, v64, v65, v66, v67, v68, v112, v117, v122, v124, v127);
          v69 = sub_100170C38();
          sub_10001C820(v69);
          v70 = sub_100170C28();
          sub_10001C820(v70);
        }
        sub_100170BB8();
        if (!sub_1000A6DAC(v51))
          sub_10001C848();
        sub_1001709E4(v13[11]);
        if (!sub_1000F9F90(v2 + v13[13]))
          sub_100170AB0();
        v71 = sub_100170BA8();
        if (!sub_100170B98(v71))
          v127(v2, v0);
        break;
    }
  }
  return sub_1001708DC(v1, v6 + v129, v7 | 7);
}

void sub_10016F810()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  sub_10008307C();
  sub_100170A44();
  v0 = sub_1000CD63C();
  sub_100168BDC(v0, v1, v2, v3, v4, v5);
}

uint64_t sub_10016F85C(uint64_t a1)
{
  return sub_10017078C(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *, _QWORD, char *))sub_10016939C);
}

uint64_t sub_10016F86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100070E5C();
  v1 = *(_QWORD *)(sub_1001708B4() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(sub_10002338C() - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((((v2 + 40) & ~v2) + v3 + v5) & ~v5) + *(_QWORD *)(v4 + 64);
  v7 = v2 | v5 | 7;
  sub_10017091C();
  sub_1000CD448();
  sub_1000CD2EC();
  sub_1000CD2DC();
  return sub_1000CD190(v0, v6, v7);
}

uint64_t sub_10016F8EC(uint64_t a1, uint64_t a2)
{
  return sub_10016F900(a1, a2, &unk_1001BB8A8, sub_10016F404);
}

#error "10016F970: call analysis failed (funcsize=36)"

uint64_t sub_10016F990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1001708B4();
  sub_100170B40();
  sub_10017091C();
  sub_100170BD8();
  swift_release(*(_QWORD *)(v0 + 48));

  sub_100070F28();
  v1 = sub_100170B20();
  return sub_10017087C(v1, v2, v3);
}

void sub_10016F9E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(_QWORD, _QWORD);
  uint64_t v8;
  void *v9;
  uint64_t v10;

  sub_1001708B4();
  sub_100170A44();
  v10 = v0 + ((v1 + 64) & ~v1);
  v2 = sub_1000CD63C();
  sub_10016D0F4(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_1001576BC();
}

void sub_10016FA38(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, "identifier");

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  sub_1000443A4();
}

void sub_10016FA9C(void *a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(a1, "identifier");
  if (v1)
  {
    v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  }
  sub_1000443A4();
}

uint64_t sub_10016FAF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  sub_100070E5C();
  v1 = *(_QWORD *)(sub_100070DE8() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(sub_1001708B4() - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v2 | v6 | 7;
  v8 = (*(_QWORD *)(v5 + 64) + ((v4 + v6 + v3 + 1) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10017091C();
  sub_100170BD8();
  sub_1000CD2EC();
  sub_1000CD2DC();
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return sub_1000CD190(v0, v8 + 16, v7);
}

uint64_t sub_10016FB94(uint64_t a1)
{
  return sub_10016FBA0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *, _QWORD, char *, _QWORD, _QWORD))sub_10016DC18);
}

uint64_t sub_10016FBA0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, char *, _QWORD, char *, _QWORD, _QWORD))
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100070DE8();
  sub_1001709BC();
  v7 = v6 & ~v5;
  v9 = v7 + *(_QWORD *)(v8 + 64);
  sub_1001708B4();
  sub_100170D2C();
  return a2(a1, *((_QWORD *)v2 + 2), *((_QWORD *)v2 + 3), *((_QWORD *)v2 + 4), &v2[v7], v2[v9], &v2[v11], *(_QWORD *)&v2[v10 & 0xFFFFFFFFFFFFFFF8], *(_QWORD *)&v2[(v10 & 0xFFFFFFFFFFFFFFF8) + 8]);
}

uint64_t sub_10016FC34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100005D40(&qword_1001C7240);
  sub_100170B40();
  swift_release(*(_QWORD *)(v0 + 24));
  sub_100070F28();
  v1 = sub_100170B20();
  return sub_10017087C(v1, v2, v3);
}

uint64_t sub_10016FC84()
{
  uint64_t v0;
  uint64_t v1;

  sub_100005D40(&qword_1001C7240);
  sub_100170A44();
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_10016FCC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, uint64_t);
  uint64_t (*v118)(uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(uint64_t, uint64_t);
  uint64_t (*v129)(uint64_t, uint64_t);
  uint64_t (*v130)(uint64_t, uint64_t);
  uint64_t v131;

  sub_10008307C();
  sub_1001708F8();
  sub_1000CD448();
  v8 = sub_10002338C();
  sub_100170924(v8);
  sub_100170B30();
  if (!sub_100016AC4(v3))
    sub_100170A1C();
  sub_100170B10();
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
  sub_100083198();
  sub_100170A5C();
  if (!sub_1000F9F90(v4))
    sub_100170AC4();
  sub_100170DD8();
  v9 = sub_100170C88();
  if (sub_1000831A0(v9) == 1)
  {
    v10 = sub_100170D84();
    v11 = sub_1000831A0(v10);
    switch(v11)
    {
      case 2:
        sub_100170D8C();
        v72 = sub_100170DA4();
        v74(v72, v73);
        break;
      case 1:
        sub_1000A726C();
        sub_100170964();
        v75 = sub_100170D94();
        v76 = sub_100070DE8();
        sub_10001C820(v76);
        v77 = v2 + *(int *)(v75 + 24);
        sub_100170964();
        v78 = (int *)sub_1000A7264();
        sub_10017094C(v77 + v78[5], v79, v80, v81, v82, v83, v84, v85, v111, v116, v121, v6, v128);
        sub_100170B88();
        v86 = sub_100005D40(&qword_1001BF090);
        v6 = *(_QWORD *)(*(_QWORD *)(v86 - 8) + 8);
        sub_1001708A8();
        sub_1001708D4(v77 + v78[8]);
        sub_100016A8C(v77 + v78[9]);
        if (!sub_100170854(v78[10]))
          sub_1001708A8();
        if (!sub_100170854(v78[11]))
          sub_1001708A8();
        sub_100170A30();
        v87 = sub_1000A7274();
        v88 = sub_1000A727C();
        sub_100170840(v88);
        sub_100016A8C(v86 + *(int *)(v87 + 24));
        sub_100016A8C(v86 + *(int *)(v87 + 28));
        v89 = sub_1000234BC();
        sub_1001308D0(*(_QWORD *)(v89 - 8));
        v90 = v77 + v78[15];
        if (!sub_100070EAC(v90))
          sub_100170808(v90, v91, v92, v93, v94, v95, v96, v97, v115, v120, v125, v127, v130);
        if (!sub_100170B50())
          sub_100170808(v90, v98, v99, v100, v101, v102, v103, v104, v115, v120, v125, v127, v130);
        v105 = sub_1000234CC();
        sub_100016A94(v105);
        v106 = sub_1000234C4();
        sub_100016A94(v106);
        v107 = *(_QWORD *)(v77 + v78[20] + 8);
        if (v107)
        {
          swift_bridgeObjectRelease(v107);
          sub_100170CA8();
        }
        break;
      case 0:
        v12 = sub_1000A726C();
        sub_1001709EC(v12);
        v13 = (int *)sub_100087ED4();
        v14 = v2 + v13[5];
        v15 = sub_100070DE8();
        sub_100170840(v15);
        sub_100170A04();
        v16 = (int *)sub_1000A7264();
        sub_10017094C(v14 + v16[5], v17, v18, v19, v20, v21, v22, v23, v7, v116, v121, v6, v128);
        sub_100170C48();
        v24 = sub_100005D40(&qword_1001BF090);
        sub_1001708C8();
        sub_100170C18();
        sub_100016A8C(v14 + v16[9]);
        if (!sub_10017082C(v16[10]))
          sub_1001708C8();
        v25 = sub_10017082C(v16[11]);
        if (!(_DWORD)v25)
          v25 = sub_1001708C8();
        sub_100170A90(v25, v26, v27, v28, v29, v30, v31, v32, v112, v117, v122);
        v7 = sub_1000A7274();
        v33 = sub_1000A727C();
        sub_10001C820(v33);
        sub_100016A8C(v24 + *(int *)(v7 + 24));
        sub_100016A8C(v24 + *(int *)(v7 + 28));
        v34 = sub_1000234BC();
        sub_10001C820(v34);
        v6 = v14 + v16[15];
        if (!sub_100070EAC(v6))
          sub_100170808(v6, v35, v36, v37, v38, v39, v40, v41, v113, (uint64_t)v118, v123, v126, v129);
        if (!sub_100170BE0())
          sub_100170808(v6, v42, v43, v44, v45, v46, v47, v48, v113, (uint64_t)v118, v123, v126, v129);
        v49 = sub_1000234CC();
        sub_10001C820(v49);
        v50 = sub_1000234C4();
        sub_10001C820(v50);
        v51 = v14 + v16[20];
        v52 = *(_QWORD *)(v51 + 8);
        if (v52)
        {
          swift_bridgeObjectRelease(v52);
          sub_100170A84();
        }
        sub_1001709E4(v13[7]);
        sub_1001709E4(v13[8]);
        v53 = sub_100170BC8();
        v54 = sub_100170CE4(v53);
        if (!(_DWORD)v54)
        {
          sub_100170DCC(v54, v55, v56, v57, v58, v59, v60, v61, v113, v118, v123);
          sub_100170808(v14 + v16[5], v62, v63, v64, v65, v66, v67, v68, v114, v119, v124, v126, v129);
          v69 = sub_100170C38();
          sub_10001C820(v69);
          v70 = sub_100170C28();
          sub_10001C820(v70);
        }
        sub_100170BB8();
        if (!sub_1000A6DAC(v51))
          sub_10001C848();
        sub_1001709E4(v13[11]);
        if (!sub_1000F9F90(v2 + v13[13]))
          sub_100170AB0();
        v71 = sub_100170BA8();
        if (!sub_100170B98(v71))
          v129(v2, v0);
        break;
    }
  }
  v108 = (v131 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v109 = v108 + 8;

  return sub_1001708DC(v1, v109, v7 | 7);
}

void sub_1001700E8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  void *v6;

  sub_10008307C();
  sub_1001709BC();
  sub_100170D2C();
  v0 = sub_1000CD63C();
  sub_10016BAC0(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_100170138()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  int *v98;
  uint64_t v99;
  uint64_t (*v100)(void);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v1 = (int *)sub_10008307C();
  v2 = *((_QWORD *)v1 - 1);
  v105 = *(unsigned __int8 *)(v2 + 80);
  v103 = *(_QWORD *)(v2 + 64);
  v3 = sub_100070DE8();
  v4 = *(_QWORD *)(v3 - 8);
  v102 = *(unsigned __int8 *)(v4 + 80);
  v101 = *(_QWORD *)(v4 + 64);
  sub_10017091C();
  sub_1000CD448();
  v104 = (v105 + 40) & ~v105;
  v5 = v0 + v104;
  v6 = sub_10002338C();
  v100 = *(uint64_t (**)(void))(*(_QWORD *)(v6 - 8) + 8);
  ((void (*)(uint64_t, uint64_t))v100)(v0 + v104, v6);
  v7 = v0 + v104 + v1[5];
  v8 = type metadata accessor for TimelineEntryRelevance(0);
  if (!sub_1000A6DAC(v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (_QWORD *)(v5 + v1[6]);
  swift_bridgeObjectRelease(v9[1]);
  swift_bridgeObjectRelease(v9[3]);
  swift_bridgeObjectRelease(v9[5]);
  v10 = sub_100083198();
  v11 = (uint64_t)v9 + *(int *)(v10 + 40);
  v12 = type metadata accessor for URL(0);
  if (!sub_100016AB8(v11))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v9 + *(int *)(v10 + 44)));
  v13 = v5 + v1[7];
  v14 = type metadata accessor for ForecastEntry.Model(0);
  if (sub_10001C950(v14) == 1)
  {
    v15 = sub_100170D84();
    v16 = sub_10001C950(v15);
    switch(v16)
    {
      case 2:
        v61 = sub_100170D8C();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v13, v61);
        break;
      case 1:
        sub_1000A726C();
        sub_1001708D4(v13);
        v62 = sub_100170D94();
        sub_10017098C(v62);
        v63 = v13 + *(int *)(v62 + 24);
        sub_1001708D4(v63);
        v64 = (int *)sub_1000A7264();
        ((void (*)(uint64_t, uint64_t))v100)(v63 + v64[5], v6);
        ((void (*)(uint64_t, uint64_t))v100)(v63 + v64[6], v6);
        v65 = sub_100005D40(&qword_1001BF090);
        v66 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 8);
        sub_100170A50();
        v66(v63 + v64[8], v65);
        sub_100016A8C(v63 + v64[9]);
        if (!sub_1000A6DAC(v63 + v64[10]))
          sub_100170A50();
        if (!sub_1000A6DAC(v63 + v64[11]))
          sub_100170A50();
        v67 = v63 + v64[12];
        sub_1001708A8();
        v68 = (int *)sub_1000A7274();
        v69 = v67 + v68[5];
        v70 = sub_1000A727C();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 8))(v69, v70);
        sub_100016A8C(v67 + v68[6]);
        sub_100016A8C(v67 + v68[7]);
        v71 = v63 + v64[14];
        v72 = sub_1000234BC();
        sub_10001C820(v72);
        if (!sub_100170A70(v64[15]))
          sub_100170824(v71, v6, v73, v74, v75, v76, v77, v78, v92, v94, v96, v99, v100);
        v3 = v99;
        if (!sub_100170A70(v64[16]))
          sub_100170824(v71, v6, v79, v80, v81, v82, v83, v84, v92, v94, v96, v99, v100);
        v85 = sub_1000234CC();
        sub_100083090(v85);
        v86 = sub_1000234C4();
        sub_100083090(v86);
        v87 = v63 + v64[20];
        v88 = *(_QWORD *)(v87 + 8);
        if (v88)
        {
          swift_bridgeObjectRelease(v88);
          sub_100007458(*(_QWORD *)(v87 + 16), *(_QWORD *)(v87 + 24), *(_BYTE *)(v87 + 32));
        }
        break;
      case 0:
        v17 = sub_1000A726C();
        v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
        v18(v13, v17);
        v19 = sub_100087ED4();
        sub_10017098C(v19);
        v95 = v17;
        v97 = (int *)v19;
        v20 = v13 + *(int *)(v19 + 24);
        v93 = v18;
        v18(v20, v17);
        v21 = (int *)sub_1000A7264();
        ((void (*)(uint64_t, uint64_t))v100)(v20 + v21[5], v6);
        ((void (*)(uint64_t, uint64_t))v100)(v20 + v21[6], v6);
        v22 = sub_100005D40(&qword_1001BF090);
        v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
        sub_100170AA4();
        v23(v20 + v21[8], v22);
        sub_100016A8C(v20 + v21[9]);
        if (!sub_100170AD8(v21[10]))
          sub_100170AA4();
        if (!sub_100170AD8(v21[11]))
          sub_100170AA4();
        v24 = v20 + v21[12];
        v93(v24, v95);
        v25 = sub_1000A7274();
        v26 = sub_1000A727C();
        sub_10001C820(v26);
        sub_100016A8C(v24 + *(int *)(v25 + 24));
        sub_100016A8C(v24 + *(int *)(v25 + 28));
        v27 = sub_1000234BC();
        sub_10001C820(v27);
        if (!sub_100170AEC(v21[15]))
          sub_100170824(v24, v6, v28, v29, v30, v31, v32, v33, (uint64_t)v93, v95, (uint64_t)v97, v99, v100);
        v3 = v99;
        if (!sub_100170AEC(v21[16]))
          sub_100170824(v24, v6, v34, v35, v36, v37, v38, v39, (uint64_t)v93, v95, (uint64_t)v97, v99, v100);
        v40 = sub_1000234CC();
        sub_10001C820(v40);
        v41 = sub_1000234C4();
        sub_10001C820(v41);
        v42 = *(_QWORD *)(v20 + v21[20] + 8);
        if (v42)
        {
          swift_bridgeObjectRelease(v42);
          sub_100170A84();
        }
        v43 = v97;
        sub_100170D7C(v97[7]);
        sub_100170D7C(v97[8]);
        v44 = v13 + v97[9];
        v45 = type metadata accessor for AirQualityViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v44, 1, v45))
        {
          v93(v44, v95);
          sub_100170824(v44 + *(int *)(v45 + 20), v6, v46, v47, v48, v49, v50, v51, (uint64_t)v93, v95, (uint64_t)v97, v99, v100);
          v52 = type metadata accessor for AirQualityScale(0);
          sub_10001C820(v52);
          v53 = v44 + *(int *)(v45 + 32);
          v54 = type metadata accessor for AirQualityScaleCategory(0);
          v55 = v53;
          v43 = v98;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v55, v54);
        }
        v56 = v13 + v43[10];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v56, 1, HourPrecipitationChartViewModel))
          sub_1000287E0(v56, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8));
        sub_100170D7C(v43[11]);
        v58 = v13 + v43[13];
        if (!sub_100016AB8(v58))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v58, v12);
        v59 = v13 + v43[14];
        v60 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v59, 1, v60))
          ((void (*)(uint64_t, uint64_t))v100)(v59, v6);
        break;
    }
  }
  v89 = (v103 + v104 + v102 + 1) & ~v102;
  v90 = v89 + v101;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v89, v3);
  return swift_deallocObject(v0, v90, v105 | v102 | 7);
}

uint64_t sub_100170780(uint64_t a1)
{
  return sub_10017078C(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *, _QWORD, char *))sub_10016C418);
}

uint64_t sub_10017078C(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, char *, _QWORD, char *))
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10008307C();
  sub_1001709BC();
  v6 = v5 & ~v4;
  v8 = v6 + *(_QWORD *)(v7 + 64);
  sub_100070DE8();
  sub_100170A44();
  return a2(a1, *((_QWORD *)v2 + 2), *((_QWORD *)v2 + 3), *((_QWORD *)v2 + 4), &v2[v6], v2[v8], &v2[(v8 + v9 + 1) & ~v9]);
}

uint64_t sub_100170808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t))
{
  uint64_t v13;

  return a13(a1, v13);
}

uint64_t sub_100170814(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of ResolverType.resolve<A>(_:)(a1, a1, v1, v2);
}

uint64_t sub_100170824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(void))
{
  return a13();
}

uint64_t sub_10017082C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1 + a1, 1, v2);
}

uint64_t sub_100170840(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_100170854@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1 + a1, 1, v2);
}

_QWORD *sub_100170868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  return dispatch thunk of ResolverType.resolve<A>(_:)(&a9, a1, a1, v9, v10);
}

uint64_t sub_10017087C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10017088C(_QWORD *a1)
{
  uint64_t v1;

  sub_100022330(a1, v1);
  return 0;
}

uint64_t sub_1001708A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1001708B4()
{
  return type metadata accessor for TimelineProviderContext(0);
}

uint64_t sub_1001708BC(uint64_t a1)
{
  return swift_allocObject(a1, 24, 7);
}

uint64_t sub_1001708C8()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1001708D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1001708DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1001708F8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10017091C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100170924(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_100170940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v2, v1);
}

uint64_t sub_10017094C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t))
{
  uint64_t v13;

  return a13(a1, v13);
}

uint64_t sub_100170958(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10016EC84(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_100170964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_100170970(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10016EC84(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_100170978(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_100170984()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10017098C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2 + *(int *)(a1 + 20), v3);
}

uint64_t sub_1001709A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 104) = 1752392040;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 104, v3, a3);
}

uint64_t sub_1001709CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v2 - 96, v1);
}

uint64_t sub_1001709E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1));
}

uint64_t sub_1001709EC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_100170A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  return v3(v0 + *(int *)(v1 + 24), v2);
}

uint64_t sub_100170A1C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_100170A30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  return v3(v0 + *(int *)(v1 + 48), v2);
}

uint64_t sub_100170A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_100170A5C()
{
  return type metadata accessor for URL(0);
}

uint64_t sub_100170A70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v2 + a1, 1, v1);
}

uint64_t sub_100170A84()
{
  uint64_t v0;

  return sub_100007458(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_100170A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t), uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  return a10(v11 + *(int *)(v12 + 48), a11);
}

uint64_t sub_100170AA4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_100170AB0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_100170AC4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_100170AD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1 + a1, 1, v2);
}

uint64_t sub_100170AEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v2 + a1, 1, v1);
}

uint64_t sub_100170B00()
{
  uint64_t v0;
  uint64_t v1;

  return String.init<A>(reflecting:)(v1 - 112, v0);
}

uint64_t sub_100170B10()
{
  uint64_t v0;
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 24) + 8));
}

uint64_t sub_100170B20()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100170B30()
{
  return type metadata accessor for TimelineEntryRelevance(0);
}

uint64_t sub_100170B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1 + *(int *)(v2 + 64), 1, v0);
}

uint64_t sub_100170B78()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 232))(v0, *(_QWORD *)(v1 - 216));
}

uint64_t sub_100170B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  return v3(v1 + *(int *)(v2 + 24), v0);
}

uint64_t sub_100170B98(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
}

uint64_t sub_100170BA8()
{
  return type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
}

uint64_t sub_100170BB8()
{
  return type metadata accessor for NextHourPrecipitationChartViewModel(0);
}

uint64_t sub_100170BC8()
{
  return type metadata accessor for AirQualityViewModel(0);
}

uint64_t sub_100170BD8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100170BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1 + *(int *)(v2 + 64), 1, v0);
}

uint64_t sub_100170C08()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100170C10(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2);
}

uint64_t sub_100170C18()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v1 + *(int *)(v2 + 32), v3);
}

uint64_t sub_100170C28()
{
  return type metadata accessor for AirQualityScaleCategory(0);
}

uint64_t sub_100170C38()
{
  return type metadata accessor for AirQualityScale(0);
}

uint64_t sub_100170C48()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2 + *(int *)(v3 + 24), v0);
}

void sub_100170C58()
{
  UnitManager.refreshUnitsFromStorage()();
}

uint64_t sub_100170C60()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of WidgetTimelineTelemetryManagerType.start()(v0, v1);
}

_QWORD *sub_100170C70(_QWORD *a1)
{
  uint64_t v1;

  return sub_100022330(a1, v1);
}

uint64_t sub_100170C88()
{
  return type metadata accessor for ForecastEntry.Model(0);
}

BOOL sub_100170C98(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100170CA8()
{
  uint64_t v0;

  return sub_100007458(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

BOOL sub_100170CB4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100170CC0()
{
  return sub_100167864();
}

uint64_t sub_100170CC8()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100170CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 192))(a1, a2, v2);
}

uint64_t sub_100170CDC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100170CE4(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
}

uint64_t sub_100170D08()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 1752392040;
  return v0 - 104;
}

uint64_t sub_100170D1C(uint64_t a1)
{
  return swift_arrayDestroy(a1, 3);
}

void sub_100170D24(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x2Au);
}

uint64_t sub_100170D40(uint64_t a1)
{
  uint64_t v1;

  return String.init<A>(reflecting:)(a1, *(_QWORD *)(v1 - 200));
}

uint64_t sub_100170D48()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100170D50()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_100170D5C()
{
  return Logger.logObject.getter();
}

uint64_t sub_100170D64()
{
  uint64_t v0;
  uint64_t v1;

  return String.init<A>(reflecting:)(v1 - 104, v0);
}

uint64_t sub_100170D70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_10016EC84(v3, v4, a3);
}

uint64_t sub_100170D7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1));
}

uint64_t sub_100170D84()
{
  return type metadata accessor for WeatherDataViewModel(0);
}

uint64_t sub_100170D8C()
{
  return type metadata accessor for SunriseSunsetViewModel(0);
}

uint64_t sub_100170D94()
{
  return type metadata accessor for InstantWeatherViewModel(0);
}

uint64_t sub_100170D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_100170DA4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100170DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t), uint64_t a11)
{
  uint64_t v11;

  return a10(v11, a11);
}

uint64_t sub_100170DD8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 44)));
}

unint64_t sub_100170DE4()
{
  return 0xD000000000000022;
}

ValueMetadata *type metadata accessor for AQIComplicationWidget()
{
  return &type metadata for AQIComplicationWidget;
}

uint64_t sub_100170E10(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A180C, 1);
}

uint64_t sub_100170E20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, uint64_t);
  uint64_t v53;
  __n128 v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v4 = sub_100005D40(&qword_1001C7278);
  v56 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10002325C();
  v7 = v6 - v5;
  v57 = sub_100005D40(&qword_1001C7280);
  v58 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  sub_10002325C();
  v10 = v9 - v8;
  v59 = sub_100005D40(&qword_1001C7288);
  v60 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  sub_10002325C();
  v13 = v12 - v11;
  v14 = type metadata accessor for WeatherTimelineProvider();
  swift_allocObject(v14, 248, 7);
  swift_bridgeObjectRetain_n(a2, 2);
  v61 = sub_100165A84(64, a1, a2);
  v15 = type metadata accessor for AQIContentView(0);
  v16 = sub_1000061B0(&qword_1001C7290, type metadata accessor for AQIContentView, (uint64_t)&unk_10018251C);
  v17 = sub_1000061B0(&qword_1001C0640, (uint64_t (*)(uint64_t))type metadata accessor for WeatherTimelineProvider, (uint64_t)&unk_100185D00);
  StaticConfiguration.init<A>(kind:provider:content:)(a1, a2, &v61, sub_10017120C, 0, v15, v14, v16, v17);
  v18 = LocalizedStringKey.init(stringLiteral:)(0x6C61755120726941, 0xEB00000000797469);
  v22 = sub_100045174(v18, v20, v19 & 1, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = sub_1001712F0();
  WidgetConfiguration.configurationDisplayName(_:)(v22, v24, v28, v26, v4, v29);
  sub_100016868(v22, v24, v28);
  v30 = swift_bridgeObjectRelease(v26);
  (*(void (**)(uint64_t, uint64_t, __n128))(v56 + 8))(v7, v4, v30);
  v31 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000005DLL, 0x800000010018ADD0);
  v35 = sub_100045174(v31, v33, v32 & 1, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v61 = v4;
  v62 = v29;
  v42 = sub_10004516C((uint64_t)&v61, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.description(_:)(v35, v37, v41, v39, v57, v42);
  sub_100016868(v35, v37, v41);
  v43 = swift_bridgeObjectRelease(v39);
  (*(void (**)(uint64_t, uint64_t, __n128))(v58 + 8))(v10, v57, v43);
  v44 = sub_100005D40(&qword_1001C0280);
  v45 = type metadata accessor for WidgetFamily(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(_QWORD *)(v46 + 72);
  v48 = *(unsigned __int8 *)(v46 + 80);
  v49 = (v48 + 32) & ~v48;
  v50 = swift_allocObject(v44, v49 + 2 * v47, v48 | 7);
  *(_OWORD *)(v50 + 16) = xmmword_10017BD00;
  v51 = v50 + v49;
  v52 = *(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104);
  v52(v51, enum case for WidgetFamily.accessoryCircular(_:), v45);
  v52(v51 + v47, enum case for WidgetFamily.accessoryInline(_:), v45);
  v61 = v57;
  v62 = v42;
  v53 = sub_10004516C((uint64_t)&v61, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  WidgetConfiguration.supportedFamilies(_:)(v50, v59, v53);
  v54 = swift_bridgeObjectRelease(v50);
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v60 + 8))(v13, v59, v54);
}

uint64_t sub_10017120C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044F34(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath(&unk_100185DB8);
  v7 = sub_100005D40(&qword_1001BFA18);
  swift_storeEnumTagMultiPayload(a2, v7, 0);
  v8 = type metadata accessor for AQIContentView(0);
  return sub_100044FCC((uint64_t)v6, (uint64_t)a2 + *(int *)(v8 + 20));
}

unint64_t sub_1001712BC@<X0>(_QWORD *a1@<X8>)
{
  unint64_t result;
  uint64_t v3;

  result = sub_100170DE4();
  *a1 = 0xD000000000000022;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001712E8()
{
  uint64_t *v0;

  return sub_100170E20(*v0, v0[1]);
}

unint64_t sub_1001712F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C7298;
  if (!qword_1001C7298)
  {
    v1 = sub_100005DC4(&qword_1001C7278);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C7298);
  }
  return result;
}

uint64_t sub_100171338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v0 = sub_100005DC4(&qword_1001C7288);
  v1 = sub_100005DC4(&qword_1001C7280);
  v5 = sub_100005DC4(&qword_1001C7278);
  v6 = sub_1001712F0();
  v2 = sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v5 = v1;
  v6 = v2;
  v3 = sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  v5 = v0;
  v6 = v3;
  return sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>);
}

BOOL static InstantWeatherViewModel.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0
    && (v4 = type metadata accessor for InstantWeatherViewModel(0),
        (static Location.== infix(_:_:)(a1 + *(int *)(v4 + 20)) & 1) != 0))
  {
    return sub_10001F940(a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24));
  }
  else
  {
    return 0;
  }
}

uint64_t type metadata accessor for InstantWeatherViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C7310;
  if (!qword_1001C7310)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InstantWeatherViewModel);
  return result;
}

uint64_t sub_100171478(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v9;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001001872E0)
  {
    swift_bridgeObjectRelease(0x80000001001872E0);
    return 2;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001001872E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001715AC(char a1)
{
  if (!a1)
    return 25705;
  if (a1 == 1)
    return 0x6E6F697461636F6CLL;
  return 0xD000000000000012;
}

uint64_t sub_1001715FC()
{
  char *v0;

  return sub_1001715AC(*v0);
}

uint64_t sub_100171604@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100171478(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100171628(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100171840();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100171650(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100171840();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t InstantWeatherViewModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = sub_100005D40(&qword_1001C72A0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10002325C();
  v7 = v6 - v5;
  v8 = a1[3];
  v9 = a1[4];
  sub_100022330(a1, v8);
  v10 = sub_100171840();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InstantWeatherViewModel.CodingKeys, &type metadata for InstantWeatherViewModel.CodingKeys, v10, v8, v9);
  type metadata accessor for UUID(0);
  sub_1000061B0(&qword_1001BF778, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_10003C1C4();
  if (!v1)
  {
    type metadata accessor for InstantWeatherViewModel(0);
    type metadata accessor for Location(0);
    sub_1000061B0(&qword_1001C1AB0, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
    sub_10003C1C4();
    type metadata accessor for CurrentObservationViewModel(0);
    sub_1000061B0(&qword_1001C1AB8, type metadata accessor for CurrentObservationViewModel, (uint64_t)&unk_10017ABB0);
    sub_10003C1C4();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

unint64_t sub_100171840()
{
  unint64_t result;

  result = qword_1001C72A8;
  if (!qword_1001C72A8)
  {
    result = swift_getWitnessTable(&unk_100185F8C, &type metadata for InstantWeatherViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C72A8);
  }
  return result;
}

uint64_t InstantWeatherViewModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v16 = type metadata accessor for CurrentObservationViewModel(0);
  __chkstk_darwin(v16);
  sub_1000230E0();
  v17 = v3;
  v20 = type metadata accessor for Location(0);
  v18 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_1000230E0();
  v19 = v4;
  v21 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_1000230E0();
  v22 = v6;
  v23 = sub_100005D40(&qword_1001C72B0);
  __chkstk_darwin(v23);
  sub_10002325C();
  v7 = type metadata accessor for InstantWeatherViewModel(0);
  __chkstk_darwin(v7);
  sub_10002325C();
  v10 = v9 - v8;
  v12 = a1[3];
  v11 = a1[4];
  sub_100022330(a1, v12);
  v13 = sub_100171840();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InstantWeatherViewModel.CodingKeys, &type metadata for InstantWeatherViewModel.CodingKeys, v13, v12, v11);
  if (v24)
    return _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
  v27 = 0;
  sub_1000061B0(&qword_1001BF7C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v21, &v27, v23, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10, v22, v21);
  v26 = 1;
  sub_1000061B0(&qword_1001C1B38, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v20, &v26, v23, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v10 + *(int *)(v7 + 20), v19, v20);
  v25 = 2;
  sub_1000061B0(&qword_1001C1B40, type metadata accessor for CurrentObservationViewModel, (uint64_t)&unk_10017AB88);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v25, v23, v16);
  sub_100173D58();
  sub_1000A865C(v17, v10 + *(int *)(v7 + 24));
  sub_100171BF8(v10, a2);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
  return sub_100171C3C(v10);
}

uint64_t sub_100171BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InstantWeatherViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100171C3C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InstantWeatherViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100171C7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return InstantWeatherViewModel.init(from:)(a1, a2);
}

uint64_t sub_100171C90(_QWORD *a1)
{
  return InstantWeatherViewModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for InstantWeatherViewModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t, __n128);
  __n128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  void (*v88)(char *, char *, uint64_t);
  void (*v89)(char *, char *, uint64_t);
  uint64_t *v90;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v35 = *a2;
    *a1 = *a2;
    v36 = (uint64_t *)(v35 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v35);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v89 = (void (*)(char *, char *, uint64_t))v8;
    v8((uint64_t *)((char *)a1 + v13), (uint64_t *)v15, v7);
    v16 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v17 = v16[5];
    v18 = &v14[v17];
    v19 = &v15[v17];
    v20 = type metadata accessor for Date(0);
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v21(v18, v19, v20);
    v88 = v21;
    v21(&v14[v16[6]], &v15[v16[6]], v20);
    v22 = v16[7];
    v23 = &v14[v22];
    v24 = &v15[v22];
    v25 = sub_100005D40(&qword_1001BF090);
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v26(v23, v24, v25);
    v26(&v14[v16[8]], &v15[v16[8]], v25);
    v27 = v16[9];
    v28 = &v14[v27];
    v29 = &v15[v27];
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    v31 = v16[10];
    v32 = &v14[v31];
    v33 = &v15[v31];
    swift_bridgeObjectRetain(v30);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v33, 1, v25))
    {
      v34 = sub_100005D40(&qword_1001BF098);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v26(v32, v33, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v32, 0, 1, v25);
    }
    v37 = v16[11];
    v38 = &v14[v37];
    v39 = &v15[v37];
    v90 = a1;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v37], 1, v25))
    {
      v40 = sub_100005D40(&qword_1001BF098);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v26(v38, v39, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v38, 0, 1, v25);
    }
    v41 = v16[12];
    v42 = &v14[v41];
    v43 = &v15[v41];
    v89(&v14[v41], &v15[v41], v7);
    v44 = (int *)type metadata accessor for ConditionViewModel(0);
    v45 = v44[5];
    v46 = &v42[v45];
    v47 = &v43[v45];
    v48 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
    v49 = v44[6];
    v50 = &v42[v49];
    v51 = &v43[v49];
    v52 = *((_QWORD *)v51 + 1);
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *((_QWORD *)v50 + 1) = v52;
    v53 = v44[7];
    v54 = &v42[v53];
    v55 = &v43[v53];
    v56 = *((_QWORD *)v55 + 1);
    *(_QWORD *)v54 = *(_QWORD *)v55;
    *((_QWORD *)v54 + 1) = v56;
    v42[v44[8]] = v43[v44[8]];
    v42[v44[9]] = v43[v44[9]];
    v42[v44[10]] = v43[v44[10]];
    *(_QWORD *)&v14[v16[13]] = *(_QWORD *)&v15[v16[13]];
    v57 = v16[14];
    v58 = &v14[v57];
    v59 = &v15[v57];
    v60 = type metadata accessor for CloudAltitudeKind(0);
    v61 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v60 - 8) + 16);
    swift_bridgeObjectRetain(v52);
    v62 = swift_bridgeObjectRetain(v56);
    v61(v58, v59, v60, v62);
    v63 = v16[15];
    v64 = &v14[v63];
    v65 = &v15[v63];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v63], 1, v20))
    {
      v66 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    }
    else
    {
      v88(v64, v65, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v20);
    }
    v67 = v16[16];
    v68 = &v14[v67];
    v69 = &v15[v67];
    v36 = v90;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v67], 1, v20))
    {
      v70 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    else
    {
      v88(v68, v69, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v68, 0, 1, v20);
    }
    v71 = v16[17];
    v72 = &v14[v71];
    v73 = &v15[v71];
    v74 = type metadata accessor for UVIndex(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v72, v73, v74);
    v75 = v16[18];
    v76 = &v14[v75];
    v77 = &v15[v75];
    v78 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v76, v77, v78);
    *(_QWORD *)&v14[v16[19]] = *(_QWORD *)&v15[v16[19]];
    v79 = v16[20];
    v80 = &v14[v79];
    v81 = &v15[v79];
    v82 = *((_QWORD *)v81 + 1);
    if (v82)
    {
      *(_QWORD *)v80 = *(_QWORD *)v81;
      *((_QWORD *)v80 + 1) = v82;
      v83 = *((_QWORD *)v81 + 2);
      v84 = *((_QWORD *)v81 + 3);
      v85 = v81[32];
      swift_bridgeObjectRetain(v82);
      sub_100006E58(v83, v84, v85);
      *((_QWORD *)v80 + 2) = v83;
      *((_QWORD *)v80 + 3) = v84;
      v80[32] = v85;
    }
    else
    {
      v86 = *((_OWORD *)v81 + 1);
      *(_OWORD *)v80 = *(_OWORD *)v81;
      *((_OWORD *)v80 + 1) = v86;
      v80[32] = v81[32];
    }
  }
  return v36;
}

uint64_t destroy for InstantWeatherViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + *(int *)(a2 + 24);
  v5(v8, v4);
  v9 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v10 = v8 + v9[5];
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(v8 + v9[6], v11);
  v13 = v8 + v9[7];
  v14 = sub_100005D40(&qword_1001BF090);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  v15(v8 + v9[8], v14);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[9] + 8));
  v16 = v8 + v9[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v16, 1, v14))
    v15(v16, v14);
  v17 = v8 + v9[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v17, 1, v14))
    v15(v17, v14);
  v18 = v8 + v9[12];
  v5(v18, v4);
  v19 = (int *)type metadata accessor for ConditionViewModel(0);
  v20 = v18 + v19[5];
  v21 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  swift_bridgeObjectRelease(*(_QWORD *)(v18 + v19[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v18 + v19[7] + 8));
  v22 = v8 + v9[14];
  v23 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  v24 = v8 + v9[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v24, 1, v11))
    v12(v24, v11);
  v25 = v8 + v9[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v25, 1, v11))
    v12(v25, v11);
  v26 = v8 + v9[17];
  v27 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = v8 + v9[18];
  v29 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
  v30 = v8 + v9[20];
  result = *(_QWORD *)(v30 + 8);
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return sub_100007458(*(_QWORD *)(v30 + 16), *(_QWORD *)(v30 + 24), *(_BYTE *)(v30 + 32));
  }
  return result;
}

uint64_t initializeWithCopy for InstantWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  void (*v20)(void *, const void *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  void (*v85)(void *, const void *, uint64_t);
  uint64_t v86;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v86 = a1;
  v13 = a1 + v12;
  v14 = a2 + v12;
  v7(a1 + v12, a2 + v12, v6);
  v15 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v16 = v15[5];
  v17 = (void *)(v13 + v16);
  v18 = (const void *)(v14 + v16);
  v19 = type metadata accessor for Date(0);
  v20 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
  v20(v17, v18, v19);
  v85 = v20;
  v20((void *)(v13 + v15[6]), (const void *)(v14 + v15[6]), v19);
  v21 = v15[7];
  v22 = v13 + v21;
  v23 = v14 + v21;
  v24 = sub_100005D40(&qword_1001BF090);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
  v25(v22, v23, v24);
  v25(v13 + v15[8], v14 + v15[8], v24);
  v26 = v15[9];
  v27 = (_QWORD *)(v13 + v26);
  v28 = (_QWORD *)(v14 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = v15[10];
  v31 = (void *)(v13 + v30);
  v32 = (const void *)(v14 + v30);
  swift_bridgeObjectRetain(v29);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v24))
  {
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v25((uint64_t)v31, (uint64_t)v32, v24);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v24);
  }
  v34 = v15[11];
  v35 = (void *)(v13 + v34);
  v36 = (const void *)(v14 + v34);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v34, 1, v24))
  {
    v37 = sub_100005D40(&qword_1001BF098);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v25((uint64_t)v35, (uint64_t)v36, v24);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v35, 0, 1, v24);
  }
  v38 = v15[12];
  v39 = v13 + v38;
  v40 = v14 + v38;
  v7(v13 + v38, v14 + v38, v6);
  v41 = (int *)type metadata accessor for ConditionViewModel(0);
  v42 = v41[5];
  v43 = v39 + v42;
  v44 = v40 + v42;
  v45 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
  v46 = v41[6];
  v47 = (_QWORD *)(v39 + v46);
  v48 = (_QWORD *)(v40 + v46);
  v49 = v48[1];
  *v47 = *v48;
  v47[1] = v49;
  v50 = v41[7];
  v51 = (_QWORD *)(v39 + v50);
  v52 = (_QWORD *)(v40 + v50);
  v53 = v52[1];
  *v51 = *v52;
  v51[1] = v53;
  *(_BYTE *)(v39 + v41[8]) = *(_BYTE *)(v40 + v41[8]);
  *(_BYTE *)(v39 + v41[9]) = *(_BYTE *)(v40 + v41[9]);
  *(_BYTE *)(v39 + v41[10]) = *(_BYTE *)(v40 + v41[10]);
  *(_QWORD *)(v13 + v15[13]) = *(_QWORD *)(v14 + v15[13]);
  v54 = v15[14];
  v55 = v13 + v54;
  v56 = v14 + v54;
  v57 = type metadata accessor for CloudAltitudeKind(0);
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v57 - 8) + 16);
  swift_bridgeObjectRetain(v49);
  v59 = swift_bridgeObjectRetain(v53);
  v58(v55, v56, v57, v59);
  v60 = v15[15];
  v61 = (void *)(v13 + v60);
  v62 = (const void *)(v14 + v60);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v60, 1, v19))
  {
    v63 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
  }
  else
  {
    v85(v61, v62, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v61, 0, 1, v19);
  }
  v64 = v15[16];
  v65 = (void *)(v13 + v64);
  v66 = (const void *)(v14 + v64);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v64, 1, v19))
  {
    v67 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    v85(v65, v66, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v65, 0, 1, v19);
  }
  v68 = v15[17];
  v69 = v13 + v68;
  v70 = v14 + v68;
  v71 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
  v72 = v15[18];
  v73 = v13 + v72;
  v74 = v14 + v72;
  v75 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
  *(_QWORD *)(v13 + v15[19]) = *(_QWORD *)(v14 + v15[19]);
  v76 = v15[20];
  v77 = v13 + v76;
  v78 = v14 + v76;
  v79 = *(_QWORD *)(v78 + 8);
  if (v79)
  {
    *(_QWORD *)v77 = *(_QWORD *)v78;
    *(_QWORD *)(v77 + 8) = v79;
    v80 = *(_QWORD *)(v78 + 16);
    v81 = *(_QWORD *)(v78 + 24);
    v82 = *(_BYTE *)(v78 + 32);
    swift_bridgeObjectRetain(v79);
    sub_100006E58(v80, v81, v82);
    *(_QWORD *)(v77 + 16) = v80;
    *(_QWORD *)(v77 + 24) = v81;
    *(_BYTE *)(v77 + 32) = v82;
  }
  else
  {
    v83 = *(_OWORD *)(v78 + 16);
    *(_OWORD *)v77 = *(_OWORD *)v78;
    *(_OWORD *)(v77 + 16) = v83;
    *(_BYTE *)(v77 + 32) = *(_BYTE *)(v78 + 32);
  }
  return v86;
}

uint64_t assignWithCopy for InstantWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  void (*v20)(void *, const void *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const void *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const void *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  void (*v106)(void *, const void *, uint64_t);
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v109 = v6;
  v110 = a1;
  v13 = a1 + v12;
  v14 = a2 + v12;
  v108 = v7;
  v7(a1 + v12, a2 + v12, v6);
  v15 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v16 = v15[5];
  v17 = (void *)(v13 + v16);
  v18 = (const void *)(v14 + v16);
  v19 = type metadata accessor for Date(0);
  v107 = *(_QWORD *)(v19 - 8);
  v20 = *(void (**)(void *, const void *, uint64_t))(v107 + 24);
  v20(v17, v18, v19);
  v106 = v20;
  v20((void *)(v13 + v15[6]), (const void *)(v14 + v15[6]), v19);
  v21 = v15[7];
  v22 = v13 + v21;
  v23 = v14 + v21;
  v24 = sub_100005D40(&qword_1001BF090);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24);
  v26(v22, v23, v24);
  v26(v13 + v15[8], v14 + v15[8], v24);
  v27 = v15[9];
  v28 = (_QWORD *)(v13 + v27);
  v29 = (_QWORD *)(v14 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = v15[10];
  v33 = (void *)(v13 + v32);
  v34 = (const void *)(v14 + v32);
  v35 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v32, 1, v24);
  v36 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v34, 1, v24);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v33, v34, v24);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v33, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v36)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v33, v24);
LABEL_6:
    v37 = sub_100005D40(&qword_1001BF098);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_7;
  }
  v26((uint64_t)v33, (uint64_t)v34, v24);
LABEL_7:
  v38 = v15[11];
  v39 = (void *)(v13 + v38);
  v40 = (const void *)(v14 + v38);
  v41 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v38, 1, v24);
  v42 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v40, 1, v24);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v39, v40, v24);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v39, v24);
LABEL_12:
    v43 = sub_100005D40(&qword_1001BF098);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_13;
  }
  v26((uint64_t)v39, (uint64_t)v40, v24);
LABEL_13:
  v44 = v15[12];
  v45 = v13 + v44;
  v46 = v14 + v44;
  v108(v13 + v44, v14 + v44, v109);
  v47 = (int *)type metadata accessor for ConditionViewModel(0);
  v48 = v47[5];
  v49 = v45 + v48;
  v50 = v46 + v48;
  v51 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 24))(v49, v50, v51);
  v52 = v47[6];
  v53 = (_QWORD *)(v45 + v52);
  v54 = (_QWORD *)(v46 + v52);
  *v53 = *v54;
  v55 = v54[1];
  v56 = v53[1];
  v53[1] = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  v57 = v47[7];
  v58 = (_QWORD *)(v45 + v57);
  v59 = (_QWORD *)(v46 + v57);
  *v58 = *v59;
  v60 = v59[1];
  v61 = v58[1];
  v58[1] = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v61);
  *(_BYTE *)(v45 + v47[8]) = *(_BYTE *)(v46 + v47[8]);
  *(_BYTE *)(v45 + v47[9]) = *(_BYTE *)(v46 + v47[9]);
  *(_BYTE *)(v45 + v47[10]) = *(_BYTE *)(v46 + v47[10]);
  *(_QWORD *)(v13 + v15[13]) = *(_QWORD *)(v14 + v15[13]);
  v62 = v15[14];
  v63 = v13 + v62;
  v64 = v14 + v62;
  v65 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 24))(v63, v64, v65);
  v66 = v15[15];
  v67 = (void *)(v13 + v66);
  v68 = (const void *)(v14 + v66);
  LODWORD(v46) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v66, 1, v19);
  v69 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v68, 1, v19);
  if ((_DWORD)v46)
  {
    if (!v69)
    {
      (*(void (**)(void *, const void *, uint64_t))(v107 + 16))(v67, v68, v19);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v19);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v69)
  {
    (*(void (**)(void *, uint64_t))(v107 + 8))(v67, v19);
LABEL_18:
    v70 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_19;
  }
  v106(v67, v68, v19);
LABEL_19:
  v71 = v15[16];
  v72 = (void *)(v13 + v71);
  v73 = (const void *)(v14 + v71);
  v74 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v71, 1, v19);
  v75 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v73, 1, v19);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(void *, const void *, uint64_t))(v107 + 16))(v72, v73, v19);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v72, 0, 1, v19);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v75)
  {
    (*(void (**)(void *, uint64_t))(v107 + 8))(v72, v19);
LABEL_24:
    v76 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_25;
  }
  v106(v72, v73, v19);
LABEL_25:
  v77 = v15[17];
  v78 = v13 + v77;
  v79 = v14 + v77;
  v80 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 24))(v78, v79, v80);
  v81 = v15[18];
  v82 = v13 + v81;
  v83 = v14 + v81;
  v84 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 24))(v82, v83, v84);
  *(_QWORD *)(v13 + v15[19]) = *(_QWORD *)(v14 + v15[19]);
  v85 = v15[20];
  v86 = v13 + v85;
  v87 = (__int128 *)(v14 + v85);
  v88 = *(_QWORD *)(v86 + 8);
  v89 = *((_QWORD *)v87 + 1);
  if (v88)
  {
    if (v89)
    {
      *(_QWORD *)v86 = *(_QWORD *)v87;
      v90 = *((_QWORD *)v87 + 1);
      *(_QWORD *)(v86 + 8) = v90;
      swift_bridgeObjectRetain(v90);
      swift_bridgeObjectRelease(v88);
      v91 = *((_QWORD *)v87 + 2);
      v92 = *((_QWORD *)v87 + 3);
      v93 = *((_BYTE *)v87 + 32);
      sub_100006E58(v91, v92, v93);
      v94 = *(_QWORD *)(v86 + 16);
      v95 = *(_QWORD *)(v86 + 24);
      v96 = *(_BYTE *)(v86 + 32);
      *(_QWORD *)(v86 + 16) = v91;
      *(_QWORD *)(v86 + 24) = v92;
      *(_BYTE *)(v86 + 32) = v93;
      sub_100007458(v94, v95, v96);
    }
    else
    {
      sub_100008EC4(v86);
      v101 = *((_BYTE *)v87 + 32);
      v102 = v87[1];
      *(_OWORD *)v86 = *v87;
      *(_OWORD *)(v86 + 16) = v102;
      *(_BYTE *)(v86 + 32) = v101;
    }
  }
  else if (v89)
  {
    *(_QWORD *)v86 = *(_QWORD *)v87;
    v97 = *((_QWORD *)v87 + 1);
    *(_QWORD *)(v86 + 8) = v97;
    v98 = *((_QWORD *)v87 + 2);
    v99 = *((_QWORD *)v87 + 3);
    v100 = *((_BYTE *)v87 + 32);
    swift_bridgeObjectRetain(v97);
    sub_100006E58(v98, v99, v100);
    *(_QWORD *)(v86 + 16) = v98;
    *(_QWORD *)(v86 + 24) = v99;
    *(_BYTE *)(v86 + 32) = v100;
  }
  else
  {
    v103 = *v87;
    v104 = v87[1];
    *(_BYTE *)(v86 + 32) = *((_BYTE *)v87 + 32);
    *(_OWORD *)v86 = v103;
    *(_OWORD *)(v86 + 16) = v104;
  }
  return v110;
}

uint64_t initializeWithTake for InstantWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  void (*v20)(void *, const void *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  void (*v67)(void *, const void *, uint64_t);
  uint64_t v68;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v68 = a1;
  v13 = a1 + v12;
  v14 = a2 + v12;
  v7(a1 + v12, v14, v6);
  v15 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v16 = v15[5];
  v17 = (void *)(v13 + v16);
  v18 = (const void *)(v14 + v16);
  v19 = type metadata accessor for Date(0);
  v20 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
  v20(v17, v18, v19);
  v67 = v20;
  v20((void *)(v13 + v15[6]), (const void *)(v14 + v15[6]), v19);
  v21 = v15[7];
  v22 = v13 + v21;
  v23 = v14 + v21;
  v24 = sub_100005D40(&qword_1001BF090);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v25(v22, v23, v24);
  v25(v13 + v15[8], v14 + v15[8], v24);
  *(_OWORD *)(v13 + v15[9]) = *(_OWORD *)(v14 + v15[9]);
  v26 = v15[10];
  v27 = (void *)(v13 + v26);
  v28 = (const void *)(v14 + v26);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v26, 1, v24))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v25((uint64_t)v27, (uint64_t)v28, v24);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v24);
  }
  v30 = v15[11];
  v31 = (void *)(v13 + v30);
  v32 = (const void *)(v14 + v30);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v30, 1, v24))
  {
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v25((uint64_t)v31, (uint64_t)v32, v24);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v24);
  }
  v34 = v15[12];
  v35 = v13 + v34;
  v36 = v14 + v34;
  v7(v13 + v34, v14 + v34, v6);
  v37 = (int *)type metadata accessor for ConditionViewModel(0);
  v38 = v37[5];
  v39 = v35 + v38;
  v40 = v36 + v38;
  v41 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
  *(_OWORD *)(v35 + v37[6]) = *(_OWORD *)(v36 + v37[6]);
  *(_OWORD *)(v35 + v37[7]) = *(_OWORD *)(v36 + v37[7]);
  *(_BYTE *)(v35 + v37[8]) = *(_BYTE *)(v36 + v37[8]);
  *(_BYTE *)(v35 + v37[9]) = *(_BYTE *)(v36 + v37[9]);
  *(_BYTE *)(v35 + v37[10]) = *(_BYTE *)(v36 + v37[10]);
  *(_QWORD *)(v13 + v15[13]) = *(_QWORD *)(v14 + v15[13]);
  v42 = v15[14];
  v43 = v13 + v42;
  v44 = v14 + v42;
  v45 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
  v46 = v15[15];
  v47 = (void *)(v13 + v46);
  v48 = (const void *)(v14 + v46);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v46, 1, v19))
  {
    v49 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    v67(v47, v48, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v47, 0, 1, v19);
  }
  v50 = v15[16];
  v51 = (void *)(v13 + v50);
  v52 = (const void *)(v14 + v50);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v50, 1, v19))
  {
    v53 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    v67(v51, v52, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v51, 0, 1, v19);
  }
  v54 = v15[17];
  v55 = v13 + v54;
  v56 = v14 + v54;
  v57 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
  v58 = v15[18];
  v59 = v13 + v58;
  v60 = v14 + v58;
  v61 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
  *(_QWORD *)(v13 + v15[19]) = *(_QWORD *)(v14 + v15[19]);
  v62 = v15[20];
  v63 = v13 + v62;
  v64 = v14 + v62;
  *(_BYTE *)(v63 + 32) = *(_BYTE *)(v64 + 32);
  v65 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)v63 = *(_OWORD *)v64;
  *(_OWORD *)(v63 + 16) = v65;
  return v68;
}

uint64_t assignWithTake for InstantWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  void (*v20)(void *, const void *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const void *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const void *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  __int128 v97;
  void (*v99)(void *, const void *, uint64_t);
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v102 = v6;
  v103 = a1;
  v13 = a1 + v12;
  v14 = a2 + v12;
  v101 = v7;
  v7(a1 + v12, a2 + v12, v6);
  v15 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v16 = v15[5];
  v17 = (void *)(v13 + v16);
  v18 = (const void *)(v14 + v16);
  v19 = type metadata accessor for Date(0);
  v100 = *(_QWORD *)(v19 - 8);
  v20 = *(void (**)(void *, const void *, uint64_t))(v100 + 40);
  v20(v17, v18, v19);
  v99 = v20;
  v20((void *)(v13 + v15[6]), (const void *)(v14 + v15[6]), v19);
  v21 = v15[7];
  v22 = v13 + v21;
  v23 = v14 + v21;
  v24 = sub_100005D40(&qword_1001BF090);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 40);
  v26(v22, v23, v24);
  v26(v13 + v15[8], v14 + v15[8], v24);
  v27 = v15[9];
  v28 = (_QWORD *)(v13 + v27);
  v29 = (uint64_t *)(v14 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v15[10];
  v34 = (void *)(v13 + v33);
  v35 = (const void *)(v14 + v33);
  v36 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v33, 1, v24);
  v37 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 1, v24);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v34, v35, v24);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v34, v24);
LABEL_6:
    v38 = sub_100005D40(&qword_1001BF098);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_7;
  }
  v26((uint64_t)v34, (uint64_t)v35, v24);
LABEL_7:
  v39 = v15[11];
  v40 = (void *)(v13 + v39);
  v41 = (const void *)(v14 + v39);
  v42 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v39, 1, v24);
  v43 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v41, 1, v24);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v40, v41, v24);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v40, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v43)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v40, v24);
LABEL_12:
    v44 = sub_100005D40(&qword_1001BF098);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_13;
  }
  v26((uint64_t)v40, (uint64_t)v41, v24);
LABEL_13:
  v45 = v15[12];
  v46 = v13 + v45;
  v47 = v14 + v45;
  v101(v13 + v45, v14 + v45, v102);
  v48 = (int *)type metadata accessor for ConditionViewModel(0);
  v49 = v48[5];
  v50 = v46 + v49;
  v51 = v47 + v49;
  v52 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 40))(v50, v51, v52);
  v53 = v48[6];
  v54 = (_QWORD *)(v46 + v53);
  v55 = (uint64_t *)(v47 + v53);
  v57 = *v55;
  v56 = v55[1];
  v58 = v54[1];
  *v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease(v58);
  v59 = v48[7];
  v60 = (_QWORD *)(v46 + v59);
  v61 = (uint64_t *)(v47 + v59);
  v63 = *v61;
  v62 = v61[1];
  v64 = v60[1];
  *v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease(v64);
  *(_BYTE *)(v46 + v48[8]) = *(_BYTE *)(v47 + v48[8]);
  *(_BYTE *)(v46 + v48[9]) = *(_BYTE *)(v47 + v48[9]);
  *(_BYTE *)(v46 + v48[10]) = *(_BYTE *)(v47 + v48[10]);
  *(_QWORD *)(v13 + v15[13]) = *(_QWORD *)(v14 + v15[13]);
  v65 = v15[14];
  v66 = v13 + v65;
  v67 = v14 + v65;
  v68 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 40))(v66, v67, v68);
  v69 = v15[15];
  v70 = (void *)(v13 + v69);
  v71 = (const void *)(v14 + v69);
  LODWORD(v47) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v69, 1, v19);
  v72 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v71, 1, v19);
  if ((_DWORD)v47)
  {
    if (!v72)
    {
      (*(void (**)(void *, const void *, uint64_t))(v100 + 32))(v70, v71, v19);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v70, 0, 1, v19);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v72)
  {
    (*(void (**)(void *, uint64_t))(v100 + 8))(v70, v19);
LABEL_18:
    v73 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    goto LABEL_19;
  }
  v99(v70, v71, v19);
LABEL_19:
  v74 = v15[16];
  v75 = (void *)(v13 + v74);
  v76 = (const void *)(v14 + v74);
  v77 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v74, 1, v19);
  v78 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v76, 1, v19);
  if (v77)
  {
    if (!v78)
    {
      (*(void (**)(void *, const void *, uint64_t))(v100 + 32))(v75, v76, v19);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v75, 0, 1, v19);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v78)
  {
    (*(void (**)(void *, uint64_t))(v100 + 8))(v75, v19);
LABEL_24:
    v79 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    goto LABEL_25;
  }
  v99(v75, v76, v19);
LABEL_25:
  v80 = v15[17];
  v81 = v13 + v80;
  v82 = v14 + v80;
  v83 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 40))(v81, v82, v83);
  v84 = v15[18];
  v85 = v13 + v84;
  v86 = v14 + v84;
  v87 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 40))(v85, v86, v87);
  *(_QWORD *)(v13 + v15[19]) = *(_QWORD *)(v14 + v15[19]);
  v88 = v15[20];
  v89 = v13 + v88;
  v90 = v14 + v88;
  v91 = *(_QWORD *)(v89 + 8);
  if (!v91)
  {
LABEL_29:
    v97 = *(_OWORD *)(v90 + 16);
    *(_OWORD *)v89 = *(_OWORD *)v90;
    *(_OWORD *)(v89 + 16) = v97;
    *(_BYTE *)(v89 + 32) = *(_BYTE *)(v90 + 32);
    return v103;
  }
  v92 = *(_QWORD *)(v90 + 8);
  if (!v92)
  {
    sub_100008EC4(v89);
    goto LABEL_29;
  }
  *(_QWORD *)v89 = *(_QWORD *)v90;
  *(_QWORD *)(v89 + 8) = v92;
  swift_bridgeObjectRelease(v91);
  v93 = *(_BYTE *)(v90 + 32);
  v94 = *(_QWORD *)(v89 + 16);
  v95 = *(_QWORD *)(v89 + 24);
  v96 = *(_BYTE *)(v89 + 32);
  *(_OWORD *)(v89 + 16) = *(_OWORD *)(v90 + 16);
  *(_BYTE *)(v89 + 32) = v93;
  sub_100007458(v94, v95, v96);
  return v103;
}

uint64_t getEnumTagSinglePayload for InstantWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100173A18);
}

uint64_t sub_100173A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_100023394();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    v9 = type metadata accessor for Location(0);
    if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
    {
      v7 = v9;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      v7 = type metadata accessor for CurrentObservationViewModel(0);
      v10 = *(int *)(a3 + 24);
    }
    v8 = v4 + v10;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
}

uint64_t storeEnumTagSinglePayload for InstantWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100173AA4);
}

uint64_t sub_100173AA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_100023394();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    v11 = type metadata accessor for Location(0);
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v12 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = type metadata accessor for CurrentObservationViewModel(0);
      v12 = *(int *)(a4 + 24);
    }
    v10 = v5 + v12;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, v4, v4, v9);
}

uint64_t sub_100173B2C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Location(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for CurrentObservationViewModel(319);
      if (v5 <= 0x3F)
      {
        v6[2] = *(_QWORD *)(result - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InstantWeatherViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100173C18 + 4 * byte_100185DF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100173C4C + 4 * byte_100185DF0[v4]))();
}

uint64_t sub_100173C4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100173C54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100173C5CLL);
  return result;
}

uint64_t sub_100173C68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100173C70);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100173C74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100173C7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InstantWeatherViewModel.CodingKeys()
{
  return &type metadata for InstantWeatherViewModel.CodingKeys;
}

unint64_t sub_100173C9C()
{
  unint64_t result;

  result = qword_1001C7350;
  if (!qword_1001C7350)
  {
    result = swift_getWitnessTable(&unk_100185F64, &type metadata for InstantWeatherViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C7350);
  }
  return result;
}

unint64_t sub_100173CDC()
{
  unint64_t result;

  result = qword_1001C7358;
  if (!qword_1001C7358)
  {
    result = swift_getWitnessTable(&unk_100185ED4, &type metadata for InstantWeatherViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C7358);
  }
  return result;
}

unint64_t sub_100173D1C()
{
  unint64_t result;

  result = qword_1001C7360;
  if (!qword_1001C7360)
  {
    result = swift_getWitnessTable(&unk_100185EFC, &type metadata for InstantWeatherViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C7360);
  }
  return result;
}

uint64_t sub_100173D58()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 96), *(_QWORD *)(v1 - 104));
}

uint64_t type metadata accessor for BundleLookup()
{
  return objc_opt_self(_TtC13WeatherWidgetP33_1265C850677B6868132BE94B00C7EB3A12BundleLookup);
}

id sub_100173D84()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id result;

  v0 = type metadata accessor for BundleLookup();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  result = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  qword_1001DA1E8 = (uint64_t)result;
  return result;
}

id WeatherIntent.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WeatherIntent();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for WeatherIntent()
{
  return objc_opt_self(WeatherIntent);
}

void WeatherIntent.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for WeatherIntent();
  sub_1001747E8((uint64_t)v7.super_class, "initWithCoder:", v1, v2, v3, v4, v5, v6, v7);
  sub_1001747E0();
  sub_1001578F0();
}

void WeatherIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  NSString v6;

  v4 = v3;
  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    sub_100156D4C();
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(objc_allocWithZone(v4), "initWithIdentifier:backingStore:", v6, a3);

  sub_1000443A4();
}

void WeatherIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v5;
  objc_super v6;

  if (a2)
  {
    v5 = String._bridgeToObjectiveC()();
    sub_100156D4C();
  }
  else
  {
    v5 = 0;
  }
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for WeatherIntent();
  objc_msgSendSuper2(&v6, "initWithIdentifier:backingStore:", v5, a3);

  sub_1001576BC();
}

uint64_t WeatherIntent.__allocating_init(domain:verb:parametersByName:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSDictionary v4;

  sub_1001747FC();
  sub_100174824();
  sub_100174810();
  sub_100174850();
  if (v3)
  {
    v4.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_100156D4C();
  }
  else
  {
    v4.super.isa = 0;
  }
  objc_msgSend(sub_1001747F4(), "initWithDomain:verb:parametersByName:", v0, v2, v4.super.isa);
  sub_1001747E0();

  return v1;
}

void *WeatherIntent.init(domain:verb:parametersByName:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  NSDictionary v4;
  objc_super v6;

  sub_1001747FC();
  sub_100174824();
  sub_100174810();
  sub_100174850();
  if (v3)
  {
    v4.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_100156D4C();
  }
  else
  {
    v4.super.isa = 0;
  }
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for WeatherIntent();
  objc_msgSendSuper2(&v6, "initWithDomain:verb:parametersByName:", v0, v2, v4.super.isa);
  sub_1001747E0();

  return v1;
}

id WeatherIntent.__deallocating_deinit()
{
  return sub_10017470C(type metadata accessor for WeatherIntent);
}

unint64_t WeatherIntentResponseCode.init(rawValue:)(unint64_t result)
{
  if (result > 6)
    return 0;
  return result;
}

BOOL sub_1001741D4(uint64_t *a1, uint64_t *a2)
{
  return sub_1000B7A5C(*a1, *a2);
}

void sub_1001741E0()
{
  uint64_t *v0;

  sub_10004648C(*v0);
}

void sub_1001741E8(int a1)
{
  Swift::UInt *v1;

  sub_10004659C(a1, *v1);
}

void sub_1001741F0(uint64_t a1)
{
  sub_1000465DC(a1);
}

unint64_t sub_1001741F8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = WeatherIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_100174228(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t WeatherIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR___WeatherIntentResponse_code;
  swift_beginAccess(v0 + OBJC_IVAR___WeatherIntentResponse_code, v3, 0, 0);
  return *(_QWORD *)v1;
}

uint64_t sub_1001742BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR___WeatherIntentResponse_code);
  result = sub_10017483C((uint64_t)v3, (uint64_t)v5);
  *v3 = a1;
  return result;
}

void WeatherIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  sub_1001747F4();
  WeatherIntentResponse.init(code:userActivity:)(a1, a2);
  sub_1000443A4();
}

char *WeatherIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  void *v2;
  char *v5;
  char *v6;
  char *v7;
  char v9[24];

  v5 = (char *)objc_msgSend(v2, "init");
  v6 = &v5[OBJC_IVAR___WeatherIntentResponse_code];
  sub_10017483C((uint64_t)&v5[OBJC_IVAR___WeatherIntentResponse_code], (uint64_t)v9);
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, "setUserActivity:", a2);

  return v7;
}

id WeatherIntentResponse.__allocating_init()()
{
  return objc_msgSend(sub_1001747F4(), "init");
}

id WeatherIntentResponse.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_100174848(OBJC_IVAR___WeatherIntentResponse_code);
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for WeatherIntentResponse()
{
  return objc_opt_self(WeatherIntentResponse);
}

uint64_t WeatherIntentResponse.__allocating_init(coder:)()
{
  uint64_t v0;
  id v1;

  v1 = sub_1001747F4();
  sub_10017481C(v1, "initWithCoder:");
  sub_1001747E0();
  return v0;
}

void WeatherIntentResponse.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)sub_100174848(OBJC_IVAR___WeatherIntentResponse_code);
  sub_1001747E8((uint64_t)v7.super_class, "initWithCoder:", v1, v2, v3, v4, v5, v6, v7);
  sub_1001747E0();
  sub_1001578F0();
}

uint64_t WeatherIntentResponse.__allocating_init(backingStore:)()
{
  uint64_t v0;
  id v1;

  v1 = sub_1001747F4();
  sub_10017481C(v1, "initWithBackingStore:");
  sub_1001747E0();
  return v0;
}

void WeatherIntentResponse.init(backingStore:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)sub_100174848(OBJC_IVAR___WeatherIntentResponse_code);
  sub_1001747E8((uint64_t)v7.super_class, "initWithBackingStore:", v1, v2, v3, v4, v5, v6, v7);
  sub_1001747E0();
  sub_1001578F0();
}

void WeatherIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  id v1;

  if (a1)
  {
    Dictionary._bridgeToObjectiveC()();
    sub_100174830();
  }
  v1 = sub_1001747F4();
  sub_10017481C(v1, "initWithPropertiesByName:");
  sub_1001747E0();
  sub_1000443A4();
}

void WeatherIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_super v9;

  *(_QWORD *)&v1[OBJC_IVAR___WeatherIntentResponse_code] = 0;
  if (a1)
  {
    Dictionary._bridgeToObjectiveC()();
    sub_100174830();
  }
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for WeatherIntentResponse();
  v8 = sub_1001747E8((uint64_t)v9.super_class, "initWithPropertiesByName:", v2, v3, v4, v5, v6, v7, v9);
  sub_1001747E0();
  if (v1)

  sub_1001576BC();
}

id WeatherIntentResponse.__deallocating_deinit()
{
  return sub_10017470C(type metadata accessor for WeatherIntentResponse);
}

id sub_10017470C(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

unint64_t sub_100174740()
{
  unint64_t result;

  result = qword_1001C7408;
  if (!qword_1001C7408)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WeatherIntentResponseCode, &type metadata for WeatherIntentResponseCode);
    atomic_store(result, (unint64_t *)&qword_1001C7408);
  }
  return result;
}

uint64_t sub_10017477C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WeatherIntentResponse.code.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001747A4(uint64_t *a1)
{
  return sub_1001742BC(*a1);
}

ValueMetadata *type metadata accessor for WeatherIntentResponseCode()
{
  return &type metadata for WeatherIntentResponseCode;
}

void sub_1001747E0()
{
  void *v0;

}

id sub_1001747E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v9;

  return objc_msgSendSuper2(&a9, a2, v9);
}

id sub_1001747F4()
{
  objc_class *v0;

  return objc_allocWithZone(v0);
}

NSString sub_1001747FC()
{
  return String._bridgeToObjectiveC()();
}

NSString sub_100174810()
{
  return String._bridgeToObjectiveC()();
}

id sub_10017481C(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_100174824()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100174830()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10017483C(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 1, 0);
}

uint64_t sub_100174848@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + a1) = 0;
  return type metadata accessor for WeatherIntentResponse();
}

uint64_t sub_100174850()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t WeatherLocation.__allocating_init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  sub_100175030();
  if (v5)
  {
    String._bridgeToObjectiveC()();
    sub_10017500C();
  }
  else
  {
    v0 = 0;
  }
  sub_100174FEC();
  sub_100175050();
  if (v3)
  {
    sub_100175044();
    sub_100175024();
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(sub_1001747F4(), "initWithIdentifier:displayString:pronunciationHint:", v0, v2, v4);
  sub_1001747E0();

  return v1;
}

void *WeatherLocation.init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  objc_super v7;

  sub_100175030();
  if (v5)
  {
    String._bridgeToObjectiveC()();
    sub_10017500C();
  }
  else
  {
    v0 = 0;
  }
  sub_100174FEC();
  sub_100175050();
  if (v3)
  {
    sub_100175044();
    sub_100175024();
  }
  else
  {
    v4 = 0;
  }
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for WeatherLocation();
  objc_msgSendSuper2(&v7, "initWithIdentifier:displayString:pronunciationHint:", v0, v2, v4);
  sub_1001747E0();

  return v1;
}

uint64_t type metadata accessor for WeatherLocation()
{
  return objc_opt_self(WeatherLocation);
}

uint64_t WeatherLocation.__allocating_init(coder:)(uint64_t a1)
{
  uint64_t v1;

  objc_msgSend(sub_1001747F4(), "initWithCoder:", a1);
  sub_1001747E0();
  return v1;
}

void *WeatherLocation.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for WeatherLocation();
  sub_1001747E8((uint64_t)v8.super_class, "initWithCoder:", v1, v2, v3, v4, v5, v6, v8);
  sub_1001747E0();
  return v0;
}

id WeatherLocation.__deallocating_deinit()
{
  return sub_10017470C(type metadata accessor for WeatherLocation);
}

id static WeatherLocationResolutionResult.success(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)sub_100175018();
  v8.super_class = (Class)&OBJC_METACLASS___WeatherLocationResolutionResult;
  v6 = sub_1001747E8((uint64_t)v8.receiver, "successWithResolvedObject:", v0, v1, v2, v3, v4, v5, v8);
  return sub_100174FE0(v6);
}

void static WeatherLocationResolutionResult.disambiguation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  void *ObjCClassFromMetadata;
  Class isa;
  double v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v11;
  uint64_t v12;
  objc_super v13;

  v2 = v1;
  v3 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    v10 = sub_100175004();
    v11 = swift_bridgeObjectRetain(v3);
    v12 = _bridgeCocoaArray<A>(_:)(v9, v10, v11);
    swift_bridgeObjectRelease(v3);
    v3 = v12;
  }
  else
  {
    v4 = swift_bridgeObjectRetain(a1);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v4);
    sub_100175004();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v2);
  sub_100175004();
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v7 = swift_bridgeObjectRelease(v3).n128_u64[0];
  v13.receiver = ObjCClassFromMetadata;
  v13.super_class = (Class)&OBJC_METACLASS___WeatherLocationResolutionResult;
  v8 = objc_msgSendSuper2(&v13, "disambiguationWithObjectsToDisambiguate:", isa, v7);

  sub_1001576BC();
}

unint64_t sub_100174C4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C7488;
  if (!qword_1001C7488)
  {
    v1 = objc_opt_self(INObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001C7488);
  }
  return result;
}

id static WeatherLocationResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)sub_100175018();
  v8.super_class = (Class)&OBJC_METACLASS___WeatherLocationResolutionResult;
  v6 = sub_1001747E8((uint64_t)v8.receiver, "confirmationRequiredWithObjectToConfirm:", v0, v1, v2, v3, v4, v5, v8);
  return sub_100174FE0(v6);
}

void static WeatherLocationResolutionResult.success(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100174FC4((uint64_t)"Fatal error", a2, a3, a4, a5, (uint64_t)"WeatherWidget/WeatherLocation.swift");
  __break(1u);
}

void static WeatherLocationResolutionResult.disambiguation(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100174FC4((uint64_t)"Fatal error", a2, a3, a4, a5, (uint64_t)"WeatherWidget/WeatherLocation.swift");
  __break(1u);
}

void static WeatherLocationResolutionResult.confirmationRequired(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100174FC4((uint64_t)"Fatal error", a2, a3, a4, a5, (uint64_t)"WeatherWidget/WeatherLocation.swift");
  __break(1u);
}

id WeatherLocationResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  id v4;
  id v5;

  v4 = sub_1001747F4();
  Dictionary._bridgeToObjectiveC()();
  sub_100174FF8();
  v5 = objc_msgSend(v4, "initWithJSONDictionary:forIntent:", v2, a2);

  return v5;
}

void WeatherLocationResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v5;
  objc_super v6;

  Dictionary._bridgeToObjectiveC()();
  sub_100174FF8();
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for WeatherLocationResolutionResult();
  objc_msgSendSuper2(&v6, "initWithJSONDictionary:forIntent:", v3, a2);
  sub_1001747E0();
  v5 = v2;

  if (v5)
  sub_1001576BC();
}

uint64_t type metadata accessor for WeatherLocationResolutionResult()
{
  return objc_opt_self(WeatherLocationResolutionResult);
}

id WeatherLocationResolutionResult.__deallocating_deinit()
{
  return sub_10017470C(type metadata accessor for WeatherLocationResolutionResult);
}

uint64_t sub_100174FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, 0, 0xE000000000000000, a6, 35, 2);
}

id sub_100174FE0(id a1)
{
  return a1;
}

NSString sub_100174FEC()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100174FF8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

unint64_t sub_100175004()
{
  return sub_100174C4C();
}

uint64_t sub_10017500C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100175018()
{
  uint64_t v0;

  return swift_getObjCClassFromMetadata(v0);
}

uint64_t sub_100175024()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

NSString sub_100175044()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100175050()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC13WeatherWidgetP33_02EE0C27D2B9C523B3509337CD1F5FDB19ResourceBundleClass);
}

id objc_msgSend__weatherDisplayName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_weatherDisplayName");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_containerURLForSecurityApplicationGroupIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerURLForSecurityApplicationGroupIdentifier:");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_groupContainerURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupContainerURLs");
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_locality(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locality");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_placemark(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placemark");
}

id objc_msgSend_readContainerPreferenceValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readContainerPreferenceValueForKey:");
}

