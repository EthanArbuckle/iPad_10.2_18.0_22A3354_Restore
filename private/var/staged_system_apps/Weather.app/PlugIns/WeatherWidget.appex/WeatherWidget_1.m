char *sub_1000760BC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t EnumCaseMultiPayload;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int *v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  int *v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  int *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  int *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  __int128 v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  __int128 v181;
  uint64_t v182;
  char *v183;
  char *v184;
  int *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  _BOOL8 v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  int *v220;
  void (*v221)(char *, char *, uint64_t);
  uint64_t v222;
  char *v223;
  void (*v224)(char *, char *, uint64_t);
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  int *v230;
  void (*v231)(char *, char *, uint64_t);
  uint64_t v232;
  char *v233;
  int *v234;
  char *v235;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BFA18);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100016904((uint64_t)&a1[v8], &qword_1001C0290);
    v11 = sub_100005D40(&qword_1001C0290);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  v18 = v14[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  sub_100019A78(v17, v18);
  if (a1 != a2)
  {
    v19 = a3[7];
    v20 = &a1[v19];
    v21 = &a2[v19];
    sub_100016904((uint64_t)&a1[v19], &qword_1001BF0C8);
    v22 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for Font.Context(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
  }
  v234 = a3;
  v235 = a2;
  v24 = a3[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v232 = type metadata accessor for Date(0);
  v229 = *(_QWORD *)(v232 - 8);
  (*(void (**)(char *, char *, uint64_t))(v229 + 40))(v25, v26, v232);
  v27 = (int *)type metadata accessor for ForecastEntry(0);
  v28 = v27[5];
  v29 = &v25[v28];
  v30 = &v26[v28];
  v31 = type metadata accessor for TimelineEntryRelevance(0);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, v31);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v31);
  v233 = a1;
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v31);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v34 = *(_QWORD *)(v31 - 8);
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v31);
LABEL_17:
    v35 = sub_100005D40(&qword_1001BFA20);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 40))(v29, v30, v31);
LABEL_18:
  v36 = v27[6];
  v37 = &v25[v36];
  v38 = &v26[v36];
  v39 = *(_QWORD *)&v26[v36 + 8];
  v40 = *(_QWORD *)&v25[v36 + 8];
  *(_QWORD *)v37 = *(_QWORD *)&v26[v36];
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRelease(v40);
  v41 = *((_QWORD *)v38 + 3);
  v42 = *((_QWORD *)v37 + 3);
  *((_QWORD *)v37 + 2) = *((_QWORD *)v38 + 2);
  *((_QWORD *)v37 + 3) = v41;
  swift_bridgeObjectRelease(v42);
  v43 = *((_QWORD *)v38 + 5);
  v44 = *((_QWORD *)v37 + 5);
  *((_QWORD *)v37 + 4) = *((_QWORD *)v38 + 4);
  *((_QWORD *)v37 + 5) = v43;
  swift_bridgeObjectRelease(v44);
  *((_WORD *)v37 + 24) = *((_WORD *)v38 + 24);
  v37[50] = v38[50];
  v37[51] = v38[51];
  v45 = type metadata accessor for WidgetContext(0);
  v46 = *(int *)(v45 + 40);
  v47 = &v37[v46];
  v48 = &v38[v46];
  v49 = type metadata accessor for URL(0);
  v50 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v47, 1, v49);
  v51 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v48, 1, v49);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v47, 0, 1, v49);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  v52 = *(_QWORD *)(v49 - 8);
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v47, v49);
LABEL_23:
    v53 = sub_100005D40(&qword_1001BFA28);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 40))(v47, v48, v49);
LABEL_24:
  v54 = *(int *)(v45 + 44);
  v55 = &v37[v54];
  v56 = &v38[v54];
  v57 = *(_QWORD *)&v37[v54];
  *(_QWORD *)&v37[v54] = *(_QWORD *)v56;
  swift_bridgeObjectRelease(v57);
  v55[8] = v56[8];
  v58 = v235;
  if (v233 != v235)
  {
    v59 = v27[7];
    v60 = &v25[v59];
    v61 = &v26[v59];
    sub_100011894((uint64_t)&v25[v59], type metadata accessor for ForecastEntry.Model);
    v62 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v61, v62) == 1)
    {
      v63 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v61, v63);
      v65 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v87 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32))(v60, v61, v87);
      }
      else
      {
        v227 = v62;
        v228 = v60;
        v226 = v63;
        v225 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v66 = type metadata accessor for UUID(0);
          v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32);
          v67(v60, v61, v66);
          v68 = type metadata accessor for InstantWeatherViewModel(0);
          v69 = *(int *)(v68 + 20);
          v70 = &v60[v69];
          v71 = &v61[v69];
          v72 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v70, v71, v72);
          v73 = *(int *)(v68 + 24);
          v74 = &v60[v73];
          v75 = &v61[v73];
          v67(&v60[v73], v75, v66);
          v76 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v77 = *(void (**)(char *, char *, uint64_t))(v229 + 32);
          v77(&v74[v76[5]], &v75[v76[5]], v232);
          v231 = v77;
          v77(&v74[v76[6]], &v75[v76[6]], v232);
          v78 = v76[7];
          v79 = &v74[v78];
          v80 = &v75[v78];
          v81 = sub_100005D40(&qword_1001BF090);
          v82 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 32);
          v82(v79, v80, v81);
          v82(&v74[v76[8]], &v75[v76[8]], v81);
          *(_OWORD *)&v74[v76[9]] = *(_OWORD *)&v75[v76[9]];
          v83 = v76[10];
          v84 = &v74[v83];
          v85 = &v75[v83];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v75[v83], 1, v81))
          {
            v86 = sub_100005D40(&qword_1001BF098);
            memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
          }
          else
          {
            v82(v84, v85, v81);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v84, 0, 1, v81);
          }
          v109 = v76[11];
          v110 = &v74[v109];
          v111 = &v75[v109];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v75[v109], 1, v81))
          {
            v112 = sub_100005D40(&qword_1001BF098);
            memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
          }
          else
          {
            v82(v110, v111, v81);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v110, 0, 1, v81);
          }
          v117 = v76[12];
          v118 = &v74[v117];
          v119 = &v75[v117];
          v67(&v74[v117], &v75[v117], v66);
          v120 = (int *)type metadata accessor for ConditionViewModel(0);
          v121 = v120[5];
          v122 = &v118[v121];
          v123 = &v119[v121];
          v124 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 32))(v122, v123, v124);
          *(_OWORD *)&v118[v120[6]] = *(_OWORD *)&v119[v120[6]];
          *(_OWORD *)&v118[v120[7]] = *(_OWORD *)&v119[v120[7]];
          v118[v120[8]] = v119[v120[8]];
          v118[v120[9]] = v119[v120[9]];
          v118[v120[10]] = v119[v120[10]];
          *(_QWORD *)&v74[v76[13]] = *(_QWORD *)&v75[v76[13]];
          v125 = v76[14];
          v126 = &v74[v125];
          v127 = &v75[v125];
          v128 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 32))(v126, v127, v128);
          v129 = v76[15];
          v130 = &v74[v129];
          v131 = &v75[v129];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v75[v129], 1, v232))
          {
            v132 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
          }
          else
          {
            v231(v130, v131, v232);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v130, 0, 1, v232);
          }
          v58 = v235;
          v149 = v76[16];
          v150 = &v74[v149];
          v151 = &v75[v149];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v75[v149], 1, v232))
          {
            v152 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
          }
          else
          {
            v231(v150, v151, v232);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v150, 0, 1, v232);
          }
          v62 = v227;
          v158 = v76[17];
          v159 = &v74[v158];
          v160 = &v75[v158];
          v161 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 32))(v159, v160, v161);
          v162 = v76[18];
          v163 = &v74[v162];
          v164 = &v75[v162];
          v165 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v165 - 8) + 32))(v163, v164, v165);
          *(_QWORD *)&v74[v76[19]] = *(_QWORD *)&v75[v76[19]];
          v166 = v76[20];
          v167 = &v74[v166];
          v168 = &v75[v166];
          v167[32] = v168[32];
          v169 = *((_OWORD *)v168 + 1);
          *(_OWORD *)v167 = *(_OWORD *)v168;
          *((_OWORD *)v167 + 1) = v169;
          v60 = v228;
        }
        else
        {
          v88 = type metadata accessor for UUID(0);
          v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32);
          v89(v60, v61, v88);
          v90 = type metadata accessor for AggregateWeatherViewModel(0);
          v91 = *(int *)(v90 + 20);
          v92 = &v60[v91];
          v93 = &v61[v91];
          v94 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 32))(v92, v93, v94);
          v220 = (int *)v90;
          v221 = v89;
          v95 = *(int *)(v90 + 24);
          v96 = &v60[v95];
          v97 = &v61[v95];
          v222 = v88;
          v89(v96, &v61[v95], v88);
          v98 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v99 = *(void (**)(char *, char *, uint64_t))(v229 + 32);
          v99(&v96[v98[5]], &v97[v98[5]], v232);
          v224 = v99;
          v99(&v96[v98[6]], &v97[v98[6]], v232);
          v100 = v98[7];
          v101 = &v96[v100];
          v102 = &v97[v100];
          v103 = sub_100005D40(&qword_1001BF090);
          v104 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32);
          v104(v101, v102, v103);
          v104(&v96[v98[8]], &v97[v98[8]], v103);
          *(_OWORD *)&v96[v98[9]] = *(_OWORD *)&v97[v98[9]];
          v230 = v98;
          v105 = v98[10];
          v106 = &v96[v105];
          v107 = &v97[v105];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v97[v105], 1, v103))
          {
            v108 = sub_100005D40(&qword_1001BF098);
            memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
          }
          else
          {
            v104(v106, v107, v103);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v106, 0, 1, v103);
          }
          v113 = v98[11];
          v114 = &v96[v113];
          v115 = &v97[v113];
          v223 = v61;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v97[v113], 1, v103))
          {
            v116 = sub_100005D40(&qword_1001BF098);
            memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
          }
          else
          {
            v104(v114, v115, v103);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v114, 0, 1, v103);
          }
          v133 = v98[12];
          v134 = &v96[v133];
          v135 = &v97[v133];
          v221(&v96[v133], &v97[v133], v222);
          v136 = (int *)type metadata accessor for ConditionViewModel(0);
          v137 = v136[5];
          v138 = &v134[v137];
          v139 = &v135[v137];
          v140 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 32))(v138, v139, v140);
          *(_OWORD *)&v134[v136[6]] = *(_OWORD *)&v135[v136[6]];
          *(_OWORD *)&v134[v136[7]] = *(_OWORD *)&v135[v136[7]];
          v134[v136[8]] = v135[v136[8]];
          v134[v136[9]] = v135[v136[9]];
          v134[v136[10]] = v135[v136[10]];
          *(_QWORD *)&v96[v230[13]] = *(_QWORD *)&v97[v230[13]];
          v141 = v230[14];
          v142 = &v96[v141];
          v143 = &v97[v141];
          v144 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 32))(v142, v143, v144);
          v145 = v230[15];
          v146 = &v96[v145];
          v147 = &v97[v145];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v97[v145], 1, v232))
          {
            v148 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
          }
          else
          {
            v224(v146, v147, v232);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v146, 0, 1, v232);
          }
          v153 = v223;
          v154 = v230[16];
          v155 = &v96[v154];
          v156 = &v97[v154];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v97[v154], 1, v232))
          {
            v157 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
          }
          else
          {
            v224(v155, v156, v232);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v155, 0, 1, v232);
          }
          v170 = v230[17];
          v171 = &v96[v170];
          v172 = &v97[v170];
          v173 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32))(v171, v172, v173);
          v174 = v230[18];
          v175 = &v96[v174];
          v176 = &v97[v174];
          v177 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v177 - 8) + 32))(v175, v176, v177);
          *(_QWORD *)&v96[v230[19]] = *(_QWORD *)&v97[v230[19]];
          v178 = v230[20];
          v179 = &v96[v178];
          v180 = &v97[v178];
          v179[32] = v180[32];
          v181 = *((_OWORD *)v180 + 1);
          *(_OWORD *)v179 = *(_OWORD *)v180;
          *((_OWORD *)v179 + 1) = v181;
          v60 = v228;
          *(_QWORD *)&v228[v220[7]] = *(_QWORD *)&v223[v220[7]];
          *(_QWORD *)&v228[v220[8]] = *(_QWORD *)&v223[v220[8]];
          v182 = v220[9];
          v183 = &v228[v182];
          v184 = &v223[v182];
          v185 = (int *)type metadata accessor for AirQualityViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v184, 1, (uint64_t)v185))
          {
            v186 = sub_100005D40(&qword_1001BFA30);
            memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
          }
          else
          {
            v221(v183, v184, v222);
            v224(&v183[v185[5]], &v184[v185[5]], v232);
            *(_QWORD *)&v183[v185[6]] = *(_QWORD *)&v184[v185[6]];
            v187 = v185[7];
            v188 = &v183[v187];
            v189 = &v184[v187];
            v190 = type metadata accessor for AirQualityScale(0);
            v191 = v189;
            v153 = v223;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v190 - 8) + 32))(v188, v191, v190);
            v192 = v185[8];
            v193 = &v183[v192];
            v194 = &v184[v192];
            v195 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 32))(v193, v194, v195);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v183, 0, 1, (uint64_t)v185);
          }
          v196 = v220[10];
          v197 = &v228[v196];
          v198 = &v153[v196];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v198, 1, HourPrecipitationChartViewModel))
          {
            v200 = sub_100005D40(&qword_1001BFA38);
            memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v197, v198, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v197, 0, 1, HourPrecipitationChartViewModel);
          }
          *(_QWORD *)&v228[v220[11]] = *(_QWORD *)&v153[v220[11]];
          v201 = v220[12];
          v202 = &v228[v201];
          v203 = &v153[v201];
          *(_QWORD *)v202 = *(_QWORD *)v203;
          *((_WORD *)v202 + 4) = *((_WORD *)v203 + 4);
          v204 = v220[13];
          v205 = &v228[v204];
          v206 = &v153[v204];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v153[v204], 1, v49))
          {
            v207 = sub_100005D40(&qword_1001BFA28);
            memcpy(v205, v206, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v205, v206, v49);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v205, 0, 1, v49);
          }
          v208 = v220[14];
          v209 = &v228[v208];
          v210 = &v153[v208];
          v211 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v210, 1, v211))
          {
            v212 = sub_100005D40(&qword_1001BFA40);
            memcpy(v209, v210, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
          }
          else
          {
            v213 = swift_getEnumCaseMultiPayload(v210, v211) == 1;
            v224(v209, v210, v232);
            swift_storeEnumTagMultiPayload(v209, v211, v213);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v209, 0, 1, v211);
          }
          v62 = v227;
        }
        v63 = v226;
        v65 = v225;
      }
      swift_storeEnumTagMultiPayload(v60, v63, v65);
      swift_storeEnumTagMultiPayload(v60, v62, 1);
    }
    else
    {
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
  }
  v214 = v234[9];
  v215 = &v233[v214];
  v216 = &v58[v214];
  v217 = *(_QWORD *)&v233[v214];
  *(_QWORD *)&v233[v214] = *(_QWORD *)&v58[v214];
  swift_bridgeObjectRelease(v217);
  v218 = *((_QWORD *)v215 + 1);
  *((_QWORD *)v215 + 1) = *((_QWORD *)v216 + 1);
  swift_release(v218);
  v233[v234[10]] = v58[v234[10]];
  return v233;
}

uint64_t sub_100077158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100077164);
}

void sub_100077164(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  sub_100005D40(&qword_1001BFA48);
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    sub_100005D40(&qword_1001C0288);
    sub_10001C6C0();
    if (v9)
    {
      v7 = v10;
      v11 = a3[5];
    }
    else
    {
      sub_100005D40(&qword_1001BF0D0);
      sub_10001C6C0();
      if (v12)
      {
        v7 = v13;
        v11 = a3[7];
      }
      else
      {
        sub_10008307C();
        sub_10001C6C0();
        if (!v14)
        {
          sub_100044448(*(_QWORD *)(a1 + a3[9]));
          sub_1000443A4();
          return;
        }
        v7 = v15;
        v11 = a3[8];
      }
    }
    v8 = a1 + v11;
  }
  sub_100016B50(v8, a2, v7);
}

uint64_t sub_100077218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100077224);
}

void sub_100077224()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  sub_100083154();
  sub_100005D40(&qword_1001BFA48);
  sub_10001C6D0();
  if (v6)
  {
    v4 = v3;
    v5 = v1;
  }
  else
  {
    sub_100005D40(&qword_1001C0288);
    sub_10001C6D0();
    if (v6)
    {
      v4 = v7;
      v8 = v2[5];
    }
    else
    {
      sub_100005D40(&qword_1001BF0D0);
      sub_10001C6D0();
      if (v9)
      {
        v4 = v10;
        v8 = v2[7];
      }
      else
      {
        sub_10008307C();
        sub_10001C6D0();
        if (!v11)
        {
          *(_QWORD *)(v1 + v2[9]) = (v0 - 1);
          sub_1000443A4();
          return;
        }
        v4 = v12;
        v8 = v2[8];
      }
    }
    v5 = v1 + v8;
  }
  sub_100016B44(v5, v0, v0, v4);
}

uint64_t type metadata accessor for WidgetContentView(uint64_t a1)
{
  return sub_10000F804(a1, (uint64_t *)&unk_1001C1048, (uint64_t)&nominal type descriptor for WidgetContentView);
}

void sub_1000772E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[7];

  sub_10001C028(319, (unint64_t *)&qword_1001BFAB8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001C028(319, (unint64_t *)&unk_1001C1058, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = "\t";
      sub_10001C028(319, (unint64_t *)&qword_1001BF140, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for ForecastEntry(319);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = &unk_10017CEF0;
          v10[6] = &unk_10017CF08;
          swift_initStructMetadata(a1, 256, 7, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_1000773F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F138, 1);
}

void sub_100077400(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  sub_100082E68(a1, a2);
  sub_100005D40(&qword_1001C1508);
  v5 = sub_100083040();
  sub_100083000(v5, v6);
  sub_100082F30();
  sub_100082F04();
  v7 = v2 + *(int *)(v4 + 128);
  v9 = *(uint64_t **)(v3 + 48);
  v8 = *(_QWORD *)(v3 + 56);
  v10 = *v9;
  LOBYTE(v9) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v7 = v10;
  *(_BYTE *)(v7 + 8) = (_BYTE)v9;
  sub_100083000(v8, v2 + *(int *)(v4 + 144));
  sub_1000443A4();
}

void sub_100077468(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  sub_100082E68(a1, a2);
  sub_100005D40(&qword_1001C1500);
  v2 = sub_100083040();
  sub_100083000(v2, v3);
  sub_100082F30();
  sub_100082F04();
  sub_1000443A4();
}

void sub_1000774A8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_10000F7C4(*a1, a2, type metadata accessor for CurrentObservationBannerView);
  v4 = (int *)sub_100005D40(&qword_1001C13D8);
  v5 = a2 + v4[12];
  v7 = a1[1];
  v6 = a1[2];
  v8 = *(_QWORD *)v7;
  LOBYTE(v7) = *(_BYTE *)(v7 + 8);
  *(_QWORD *)v5 = v8;
  *(_BYTE *)(v5 + 8) = v7;
  sub_1000168D8(v6, a2 + v4[16], &qword_1001C13C0);
  sub_1000168D8(a1[3], a2 + v4[20], &qword_1001C1388);
  v9 = a2 + v4[24];
  v11 = a1[4];
  v10 = a1[5];
  v12 = *(_QWORD *)v11;
  LOBYTE(v11) = *(_BYTE *)(v11 + 8);
  *(_QWORD *)v9 = v12;
  *(_BYTE *)(v9 + 8) = v11;
  sub_10000F7C4(v10, a2 + v4[28], type metadata accessor for HourlyBannerView);
  v13 = a2 + v4[32];
  v15 = a1[6];
  v14 = a1[7];
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v13 = v16;
  *(_BYTE *)(v13 + 8) = v15;
  sub_1000168D8(v14, a2 + v4[36], &qword_1001C1388);
  v17 = a2 + v4[40];
  v19 = a1[8];
  v18 = a1[9];
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v17 = v20;
  *(_BYTE *)(v17 + 8) = v19;
  sub_1000168D8(v18, a2 + v4[44], &qword_1001C13B8);
}

uint64_t sub_1000775CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  __int128 v34;

  sub_10000F7C4(*a1, a2, type metadata accessor for PrecipitationChartView);
  v4 = (int *)sub_100005D40(&qword_1001C1390);
  v5 = a2 + v4[12];
  v6 = a1[1];
  v7 = a1[2];
  v8 = *(_BYTE *)(v6 + 8);
  v9 = *(_QWORD *)(v6 + 16);
  v10 = *(_BYTE *)(v6 + 24);
  v11 = *(_QWORD *)(v6 + 32);
  v12 = *(_BYTE *)(v6 + 40);
  v13 = *(_OWORD *)(v6 + 48);
  *(_QWORD *)v5 = *(_QWORD *)v6;
  *(_BYTE *)(v5 + 8) = v8;
  *(_QWORD *)(v5 + 16) = v9;
  *(_BYTE *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 32) = v11;
  *(_BYTE *)(v5 + 40) = v12;
  *(_OWORD *)(v5 + 48) = v13;
  v14 = a2 + v4[16];
  v15 = *(_QWORD *)v7;
  v16 = *(_QWORD *)(v7 + 8);
  v17 = *(_QWORD *)(v7 + 16);
  LOBYTE(v7) = *(_BYTE *)(v7 + 24);
  *(_QWORD *)v14 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  *(_QWORD *)(v14 + 16) = v17;
  *(_BYTE *)(v14 + 24) = v7;
  v18 = a2 + v4[20];
  v20 = a1[3];
  v19 = a1[4];
  v21 = *(_QWORD *)v20;
  v22 = *(_BYTE *)(v20 + 8);
  v23 = *(_QWORD *)(v20 + 16);
  LOBYTE(v9) = *(_BYTE *)(v20 + 24);
  v24 = *(_QWORD *)(v20 + 32);
  v25 = *(_OWORD *)(v20 + 48);
  LOBYTE(v20) = *(_BYTE *)(v20 + 40);
  *(_QWORD *)v18 = v21;
  *(_BYTE *)(v18 + 8) = v22;
  *(_QWORD *)(v18 + 16) = v23;
  *(_BYTE *)(v18 + 24) = v9;
  *(_QWORD *)(v18 + 32) = v24;
  *(_BYTE *)(v18 + 40) = v20;
  *(_OWORD *)(v18 + 48) = v25;
  sub_1000168D8(v19, a2 + v4[24], &qword_1001C1388);
  v26 = a2 + v4[28];
  v28 = a1[5];
  v27 = a1[6];
  v29 = *(_BYTE *)(v28 + 8);
  v30 = *(_QWORD *)(v28 + 16);
  v31 = *(_BYTE *)(v28 + 24);
  v32 = *(_QWORD *)(v28 + 32);
  v33 = *(_BYTE *)(v28 + 40);
  v34 = *(_OWORD *)(v28 + 48);
  *(_QWORD *)v26 = *(_QWORD *)v28;
  *(_BYTE *)(v26 + 8) = v29;
  *(_QWORD *)(v26 + 16) = v30;
  *(_BYTE *)(v26 + 24) = v31;
  *(_QWORD *)(v26 + 32) = v32;
  *(_BYTE *)(v26 + 40) = v33;
  *(_OWORD *)(v26 + 48) = v34;
  sub_10000F7C4(v27, a2 + v4[32], type metadata accessor for HourlyBannerView);
  swift_bridgeObjectRetain(v16);
  return swift_retain(v17);
}

void sub_100077740(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;

  sub_10000F7C4(*a1, a2, type metadata accessor for WeekdayColumn);
  sub_100005D40(&qword_1001C1530);
  v5 = sub_100083040();
  sub_1000168D8(v5, v6, &qword_1001C1538);
  sub_1000168D8(a1[2], a2 + v2[16], &qword_1001C1540);
  sub_1000168D8(a1[3], a2 + v2[20], &qword_1001C1548);
  v7 = a2 + v2[24];
  v9 = a1[4];
  v8 = a1[5];
  v10 = *(_BYTE *)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 16);
  v12 = *(_BYTE *)(v9 + 24);
  v13 = *(_QWORD *)(v9 + 32);
  v14 = *(_BYTE *)(v9 + 40);
  v15 = *(_OWORD *)(v9 + 48);
  *(_QWORD *)v7 = *(_QWORD *)v9;
  *(_BYTE *)(v7 + 8) = v10;
  *(_QWORD *)(v7 + 16) = v11;
  *(_BYTE *)(v7 + 24) = v12;
  *(_QWORD *)(v7 + 32) = v13;
  *(_BYTE *)(v7 + 40) = v14;
  *(_OWORD *)(v7 + 48) = v15;
  sub_1000168D8(v8, a2 + v2[28], &qword_1001C1550);
  sub_1000443A4();
}

uint64_t sub_100077818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  const void *v7;
  const void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  char v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  double v31;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[15];

  v8 = v7;
  v23 = sub_100082EB0(a1);
  if (!v24)
    v23 = -INFINITY;
  v25 = v13 & 1;
  v26 = *(double *)&v12;
  if ((v13 & 1) != 0)
    v26 = v23;
  v27 = v15 & 1;
  v28 = v17 & 1;
  v29 = v19 & 1;
  v30 = v18 & 1;
  v31 = *(double *)&v14;
  if ((v15 & 1) != 0)
    v31 = v26;
  if (v23 > v26 || v26 > v31)
    goto LABEL_22;
  v34 = sub_100083118(v10, v11, v12, v13, v14, v15, v16);
  if (!v24)
    v34 = v33;
  v35 = v21;
  if (v29)
    v35 = v34;
  v36 = v20;
  if (v30)
    v36 = v35;
  if (v34 > v35 || v35 > v36)
  {
LABEL_22:
    v62 = v16;
    v63 = a2;
    v60 = *(_QWORD *)&v20;
    v61 = v14;
    v58 = v10;
    v59 = v12;
    v57 = *(_QWORD *)&v21;
    HIDWORD(v56) = v11;
    v38 = v22;
    v39 = static os_log_type_t.fault.getter(v10, v11, v12, v13, v14, v15, v16, v17);
    v40 = (void *)static Log.runtimeIssuesLog.getter();
    sub_100082FCC(v39, (uint64_t)&_mh_execute_header, (uint64_t)v40, (uint64_t)"Contradictory frame constraints specified.");

    v22 = v38;
    v11 = HIDWORD(v56);
    v21 = *(double *)&v57;
    v10 = v58;
    v12 = v59;
    v20 = *(double *)&v60;
    v14 = v61;
    v16 = v62;
    a2 = v63;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v64, v10, v11, v12, v25, v14, v27, v16, v28, *(_QWORD *)&v21, (_BYTE)v29, *(_QWORD *)&v20, (_BYTE)v30, a7, v22);
  memcpy((void *)a2, v8, 0x41uLL);
  sub_100083128((void *)(a2 + 72), v41, v42, v43, v44, v45, v46, v47, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59,
    v60,
    v61,
    v62,
    v63,
    v64[0]);
  return sub_100016978((uint64_t)v8);
}

void sub_100077980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100082EEC();
  sub_100082E50(v0, v1, v2, v3, v4, v5, v6, v7, &qword_1001BF598, &qword_1001BF5A0);
  sub_100083110();
}

void sub_1000779B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100082EEC();
  sub_100082E50(v0, v1, v2, v3, v4, v5, v6, v7, &qword_1001C05A0, &unk_1001C05A8);
  sub_100083110();
}

void sub_1000779E0(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, void *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  char v23;
  uint64_t v24;
  double v25;
  double v26;
  BOOL v27;
  double v28;
  double v29;
  double v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;

  v22 = sub_100082EB0(a1);
  if (!v23)
    v22 = -INFINITY;
  v24 = v17 & 1;
  v25 = *(double *)&v16;
  if ((_DWORD)v24)
    v25 = v22;
  v26 = *(double *)&v18;
  if ((v19 & 1) != 0)
    v26 = v25;
  v27 = v22 > v25 || v25 > v26;
  if (v27
    || ((sub_100083118(v14, v15, v16, v24, v18, v19, v20), sub_1000830A4(), v30 <= v28) ? (v31 = v28 > v29) : (v31 = 1),
        v31))
  {
    sub_100082FB0(v14, v15, v16, v24, v18, v19, v20, v21, v49, v52, v55, v58, v61, v64, v67, v70);
    a10 = (void *)sub_100083148();
    v32 = a2;
    a2 = v11;
    sub_100082FCC(v32, (uint64_t)&_mh_execute_header, (uint64_t)a10, (uint64_t)"Contradictory frame constraints specified.");

    v14 = sub_100083010(v33, v34, v35, v36, v37, v38, v39, v40, v50, v53, v56, v59, v62, v65, v68, v71, v73, v75, v77,
            v79,
            v81,
            v83,
            v85);
  }
  sub_100082F8C(v14, v15, v16, v24, v18, v19, v20, v21, v49, v52, v55, v58, v61, v64, v67, v70, v73, v75, v77,
    v79,
    v81,
    v83,
    v85,
    v87,
    v89,
    v91);
  sub_1000168D8(v10, a2, a9);
  v41 = sub_100005D40((uint64_t *)a10);
  sub_1000830C0(v41, v42, v43, v44, v45, v46, v47, v48, v51, v54, v57, v60, v63, v66, v69, v72, v74, v76, v78,
    v80,
    v82,
    v84,
    v86,
    v88,
    v90,
    v92);
  sub_100082FE4();
}

void sub_100077AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100082EEC();
  sub_100082E50(v0, v1, v2, v3, v4, v5, v6, v7, &qword_1001C0A30, &qword_1001C0A38);
  sub_100083110();
}

void sub_100077B04(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(_QWORD), void *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  char v23;
  uint64_t v24;
  double v25;
  double v26;
  BOOL v27;
  double v28;
  double v29;
  double v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;

  v22 = sub_100082EB0(a1);
  if (!v23)
    v22 = -INFINITY;
  v24 = v17 & 1;
  v25 = *(double *)&v16;
  if ((_DWORD)v24)
    v25 = v22;
  v26 = *(double *)&v18;
  if ((v19 & 1) != 0)
    v26 = v25;
  v27 = v22 > v25 || v25 > v26;
  if (v27
    || ((sub_100083118(v14, v15, v16, v24, v18, v19, v20), sub_1000830A4(), v30 <= v28) ? (v31 = v28 > v29) : (v31 = 1),
        v31))
  {
    sub_100082FB0(v14, v15, v16, v24, v18, v19, v20, v21, v49, v52, v55, v58, v61, v64, v67, v70);
    a10 = (void *)sub_100083148();
    v32 = a2;
    a2 = v11;
    sub_100082FCC(v32, (uint64_t)&_mh_execute_header, (uint64_t)a10, (uint64_t)"Contradictory frame constraints specified.");

    v14 = sub_100083010(v33, v34, v35, v36, v37, v38, v39, v40, v50, v53, v56, v59, v62, v65, v68, v71, v73, v75, v77,
            v79,
            v81,
            v83,
            v85);
  }
  sub_100082F8C(v14, v15, v16, v24, v18, v19, v20, v21, v49, v52, v55, v58, v61, v64, v67, v70, v73, v75, v77,
    v79,
    v81,
    v83,
    v85,
    v87,
    v89,
    v91);
  sub_10000F7C4(v10, a2, a9);
  v41 = sub_100005D40((uint64_t *)a10);
  sub_1000830C0(v41, v42, v43, v44, v45, v46, v47, v48, v51, v54, v57, v60, v63, v66, v69, v72, v74, v76, v78,
    v80,
    v82,
    v84,
    v86,
    v88,
    v90,
    v92);
  sub_100082FE4();
}

void *sub_100077BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char v20;
  char v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  char v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  double v33;
  double v35;
  double v36;
  double v37;
  char v39;
  uint64_t v40;
  void *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[15];

  v11 = a10;
  v25 = sub_100082EB0(a1);
  if (!v26)
    v25 = -INFINITY;
  v27 = v15 & 1;
  v28 = v14;
  if ((_DWORD)v27)
    v28 = v25;
  v29 = v17 & 1;
  v30 = v19 & 1;
  v31 = v21 & 1;
  v32 = v20 & 1;
  v33 = v16;
  if ((v17 & 1) != 0)
    v33 = v28;
  if (v25 > v28 || v28 > v33)
    goto LABEL_22;
  v35 = v18;
  if ((v19 & 1) != 0)
    v35 = -INFINITY;
  v36 = v23;
  if ((v21 & 1) != 0)
    v36 = v35;
  v37 = v22;
  if ((v20 & 1) != 0)
    v37 = v36;
  if (v35 > v36 || v36 > v37)
  {
LABEL_22:
    v63 = *(_QWORD *)&v16;
    v64 = *(_QWORD *)&v18;
    v61 = v12;
    v62 = *(_QWORD *)&v14;
    v59 = *(_QWORD *)&v23;
    v60 = *(_QWORD *)&v22;
    v57 = __PAIR64__(v13, v27);
    v58 = v24;
    v39 = v20 & 1;
    v40 = static os_log_type_t.fault.getter(v12, v13, *(_QWORD *)&v14, v27, *(_QWORD *)&v16, v17, *(_QWORD *)&v18, v19);
    v41 = (void *)static Log.runtimeIssuesLog.getter();
    sub_100082FCC(v40, (uint64_t)&_mh_execute_header, (uint64_t)v41, (uint64_t)"Contradictory frame constraints specified.");

    v32 = v39;
    v27 = v57;
    v13 = HIDWORD(v57);
    v24 = v58;
    v23 = *(double *)&v59;
    v22 = *(double *)&v60;
    v12 = v61;
    v14 = *(double *)&v62;
    v16 = *(double *)&v63;
    v11 = a10;
    v18 = *(double *)&v64;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v65, v12, v13, *(_QWORD *)&v14, v27, *(_QWORD *)&v16, v29, *(_QWORD *)&v18, v30, *(_QWORD *)&v23, v31, *(_QWORD *)&v22, v32, a7, v24);
  *(_QWORD *)a2 = a9;
  *(_BYTE *)(a2 + 8) = v11 & 1;
  return sub_100083128((void *)(a2 + 16), v42, v43, v44, v45, v46, v47, v48, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60,
           v61,
           v62,
           v63,
           v64,
           v65[0]);
}

void sub_100077D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100082EEC();
  sub_100082E50(v0, v1, v2, v3, v4, v5, v6, v7, &qword_1001C14E8, &unk_1001C14F0);
  sub_100083110();
}

BOOL sub_100077D98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  _QWORD v19[2];

  v1 = v0;
  v2 = type metadata accessor for WidgetContentView(0);
  __chkstk_darwin(v2);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v19 - v10;
  sub_1000C54B0((_QWORD *)((char *)v19 - v10));
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for WidgetFamily.systemMedium(_:), v5);
  sub_10008070C((uint64_t)&qword_1001C1430);
  v13 = v12;
  dispatch thunk of RawRepresentable.rawValue.getter(v5, v12);
  dispatch thunk of RawRepresentable.rawValue.getter(v5, v13);
  v15 = v19[0];
  v14 = v19[1];
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v9, v5);
  v16(v11, v5);
  sub_10000F7C4(v1, (uint64_t)v4, type metadata accessor for WidgetContentView);
  if (v14 == v15)
  {
    v17 = *(int *)(v2 + 32);
    LODWORD(v17) = v4[v17 + 48 + *(int *)(type metadata accessor for ForecastEntry(0) + 24)];
    sub_100011894((uint64_t)v4, type metadata accessor for WidgetContentView);
    return (v17 - 6) < 0xFFFFFFFD;
  }
  else
  {
    sub_100011894((uint64_t)v4, type metadata accessor for WidgetContentView);
    return 0;
  }
}

BOOL sub_100077F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  _QWORD v19[2];

  v1 = v0;
  v2 = type metadata accessor for WidgetContentView(0);
  __chkstk_darwin(v2);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v19 - v10;
  sub_1000C54B0((_QWORD *)((char *)v19 - v10));
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for WidgetFamily.systemMedium(_:), v5);
  sub_10008070C((uint64_t)&qword_1001C1430);
  v13 = v12;
  dispatch thunk of RawRepresentable.rawValue.getter(v5, v12);
  dispatch thunk of RawRepresentable.rawValue.getter(v5, v13);
  v15 = v19[0];
  v14 = v19[1];
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v9, v5);
  v16(v11, v5);
  sub_10000F7C4(v1, (uint64_t)v4, type metadata accessor for WidgetContentView);
  if (v14 == v15)
  {
    v17 = *(int *)(v2 + 32);
    LODWORD(v17) = v4[v17 + 48 + *(int *)(type metadata accessor for ForecastEntry(0) + 24)];
    sub_100011894((uint64_t)v4, type metadata accessor for WidgetContentView);
    return (v17 - 3) < 3;
  }
  else
  {
    sub_100011894((uint64_t)v4, type metadata accessor for WidgetContentView);
    return 0;
  }
}

BOOL sub_100078138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  void (*v10)(char *, uint64_t);
  _QWORD v12[2];

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)v12 - v5;
  sub_1000C54B0((_QWORD *)((char *)v12 - v5));
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for WidgetFamily.systemLarge(_:), v0);
  sub_10008070C((uint64_t)&qword_1001C1430);
  v8 = v7;
  dispatch thunk of RawRepresentable.rawValue.getter(v0, v7);
  dispatch thunk of RawRepresentable.rawValue.getter(v0, v8);
  v9 = v12[1] == v12[0];
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v10(v6, v0);
  return v9;
}

uint64_t sub_100078258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v35 = a1;
  v36 = a2;
  v4 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v4);
  v34 = (_DWORD *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v6);
  v8 = (_DWORD *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001BF9B0);
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for WidgetContentView(0);
  v19 = v3 + *(int *)(v18 + 32);
  v20 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v19 + *(int *)(v20 + 28), (uint64_t)v11, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    sub_100011868((uint64_t)v11, (uint64_t)v14, type metadata accessor for WeatherDataViewModel);
    v21 = type metadata accessor for WeatherDataViewModel(0);
    v22 = (uint64_t)v14;
    v23 = 0;
  }
  else
  {
    v21 = type metadata accessor for WeatherDataViewModel(0);
    v22 = (uint64_t)v14;
    v23 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v22, v23, 1, v21);
  type metadata accessor for WeatherDataViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v21) == 1)
  {
    sub_100016904((uint64_t)v14, &qword_1001BF9B0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload(v14, v21))
    {
      sub_100011868((uint64_t)v14, (uint64_t)v17, type metadata accessor for AggregateWeatherViewModel);
      sub_1000C54B0(v8);
      sub_1000C54E0(v34);
      v26 = v3 + *(int *)(v18 + 24);
      v27 = *(_QWORD *)v26;
      v28 = *(_BYTE *)(v26 + 8);
      sub_10001961C(*(_QWORD *)v26, v28);
      sub_1000C5274(v27, v28);
      sub_100019A78(v27, v28);
      v29 = type metadata accessor for DailyViewAttributesFactory(0);
      swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
      v30 = sub_10015FBD4();
      v25 = v36;
      sub_10015E560((uint64_t)v17, v35, v19 + *(int *)(v20 + 24), 0, v36);
      swift_release(v30);
      sub_100011894((uint64_t)v17, type metadata accessor for AggregateWeatherViewModel);
      v24 = 0;
      goto LABEL_10;
    }
    sub_100011894((uint64_t)v14, type metadata accessor for WeatherDataViewModel);
  }
  v24 = 1;
  v25 = v36;
LABEL_10:
  v31 = type metadata accessor for DailyViewAttributes(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v25, v24, 1, v31);
}

void sub_1000785A4(__n128 *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40[3];
  unsigned __int8 v41;

  v2 = v1;
  v4 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v4);
  v39.n128_u64[0] = (unint64_t)v37.n128_u64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v6);
  v8 = (__n128 *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001BF9B0);
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)type metadata accessor for WidgetContentView(0);
  v19 = v2 + v18[8];
  v20 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v19 + *(int *)(v20 + 28), (uint64_t)v11, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    sub_100011868((uint64_t)v11, (uint64_t)v14, type metadata accessor for WeatherDataViewModel);
    v21 = type metadata accessor for WeatherDataViewModel(0);
    v22 = (uint64_t)v14;
    v23 = 0;
  }
  else
  {
    v21 = type metadata accessor for WeatherDataViewModel(0);
    v22 = (uint64_t)v14;
    v23 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v22, v23, 1, v21);
  type metadata accessor for WeatherDataViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v21) == 1)
  {
    sub_100016904((uint64_t)v14, &qword_1001BF9B0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload(v14, v21))
    {
      sub_100011868((uint64_t)v14, (uint64_t)v17, type metadata accessor for AggregateWeatherViewModel);
      sub_1000C54B0(v8);
      v28 = v39.n128_u64[0];
      sub_1000C54E0(v39.n128_u64[0]);
      v29 = v18[10];
      v30 = v2 + v18[6];
      v31 = *(_QWORD *)v30;
      v32 = *(_BYTE *)(v30 + 8);
      v33 = *(_BYTE *)(v2 + v29);
      sub_10001961C(*(_QWORD *)v30, v32);
      v34 = sub_1000C5274(v31, v32);
      sub_100019A78(v31, v32);
      v35 = type metadata accessor for HourlyBannerViewAttributesFactory(0);
      swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
      v36 = sub_100132A00((uint64_t)v8, v28, v33, v34 & 1);
      sub_100132670((uint64_t)v17, v40);
      v38 = v40[1];
      v39 = v40[0];
      v37 = v40[2];
      v24 = v41;
      swift_release(v36);
      sub_100011894((uint64_t)v17, type metadata accessor for AggregateWeatherViewModel);
      v27 = v37;
      v26 = v38;
      v25 = v39;
      goto LABEL_10;
    }
    sub_100011894((uint64_t)v14, type metadata accessor for WeatherDataViewModel);
  }
  v24 = 0;
  v25 = 0uLL;
  v26 = 0uLL;
  v27 = 0uLL;
LABEL_10:
  *a1 = v25;
  a1[1] = v26;
  a1[2] = v27;
  a1[3].n128_u8[0] = v24;
}

uint64_t sub_1000788F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v2);
  v4 = (_DWORD *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v5);
  v7 = (_DWORD *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000C54B0(v7);
  v8 = (int *)type metadata accessor for WidgetContentView(0);
  sub_1000C54E0(v4);
  v9 = v0 + v8[6];
  v10 = *(_QWORD *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  v12 = *(_BYTE *)(v1 + v8[10]);
  sub_10001961C(*(_QWORD *)v9, v11);
  v13 = sub_1000C5274(v10, v11);
  sub_100019A78(v10, v11);
  v14 = type metadata accessor for LargePrecipitationViewAttributesFactory(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = sub_100093708((uint64_t)v7, (uint64_t)v4, v12, v13 & 1);
  v16 = v1 + v8[8];
  v17 = type metadata accessor for ForecastEntry(0);
  v18 = sub_1000936BC(v16 + *(int *)(v17 + 24));
  swift_release(v15);
  return v18;
}

uint64_t sub_100078A68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;

  v2 = v1;
  v39 = a1;
  v3 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v3);
  v38 = (_DWORD *)((char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v5);
  v37 = (_DWORD *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001BF9B0);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for WidgetContentView(0);
  v17 = v2 + v16[8];
  v18 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v17 + *(int *)(v18 + 28), (uint64_t)v9, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v9, v7) == 1)
  {
    sub_100011868((uint64_t)v9, (uint64_t)v12, type metadata accessor for WeatherDataViewModel);
    v19 = type metadata accessor for WeatherDataViewModel(0);
    v20 = (uint64_t)v12;
    v21 = 0;
  }
  else
  {
    v19 = type metadata accessor for WeatherDataViewModel(0);
    v20 = (uint64_t)v12;
    v21 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v20, v21, 1, v19);
  type metadata accessor for WeatherDataViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v19) == 1)
  {
    sub_100016904((uint64_t)v12, &qword_1001BF9B0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload(v12, v19))
    {
      sub_100011868((uint64_t)v12, (uint64_t)v15, type metadata accessor for AggregateWeatherViewModel);
      v24 = v37;
      sub_1000C54B0(v37);
      v25 = v38;
      sub_1000C54E0(v38);
      v26 = v2 + v16[6];
      v27 = *(_QWORD *)v26;
      v28 = *(_BYTE *)(v26 + 8);
      v29 = *(_BYTE *)(v2 + v16[10]);
      sub_10001961C(*(_QWORD *)v26, v28);
      v30 = sub_1000C5274(v27, v28);
      sub_100019A78(v27, v28);
      v31 = type metadata accessor for CurrentObservationViewAttributesFactory(0);
      swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
      v32 = sub_1000D7DC8((uint64_t)v24, (uint64_t)v25, v29, v30 & 1);
      v33 = v17 + *(int *)(v18 + 24);
      v23 = v39;
      sub_1000D6DB8((uint64_t)v15, v33, (uint64_t)&v15[*(int *)(v13 + 20)], *(_QWORD *)v33, *(_QWORD *)(v33 + 8), *(unsigned __int8 *)(v33 + 50), *(unsigned __int8 *)(v33 + 51), 0, v39, 1, 0);
      swift_release(v32);
      sub_100011894((uint64_t)v15, type metadata accessor for AggregateWeatherViewModel);
      v22 = 0;
      goto LABEL_10;
    }
    sub_100011894((uint64_t)v12, type metadata accessor for WeatherDataViewModel);
  }
  v22 = 1;
  v23 = v39;
LABEL_10:
  v34 = type metadata accessor for CurrentObservationViewAttributes(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v23, v22, 1, v34);
}

uint64_t sub_100078DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;

  v5 = v4;
  v39 = a3;
  v40 = a1;
  v41 = a2;
  v43 = a4;
  v6 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v6);
  v38 = (_DWORD *)((char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v8);
  v42 = (_DWORD *)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005D40(&qword_1001BF9B0);
  __chkstk_darwin(v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for WidgetContentView(0);
  v20 = v5 + v19[8];
  v21 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v20 + *(int *)(v21 + 28), (uint64_t)v12, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    sub_100011868((uint64_t)v12, (uint64_t)v15, type metadata accessor for WeatherDataViewModel);
    v22 = type metadata accessor for WeatherDataViewModel(0);
    v23 = (uint64_t)v15;
    v24 = 0;
  }
  else
  {
    v22 = type metadata accessor for WeatherDataViewModel(0);
    v23 = (uint64_t)v15;
    v24 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v23, v24, 1, v22);
  type metadata accessor for WeatherDataViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v22) == 1)
  {
    sub_100016904((uint64_t)v15, &qword_1001BF9B0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload(v15, v22))
    {
      sub_100011868((uint64_t)v15, (uint64_t)v18, type metadata accessor for AggregateWeatherViewModel);
      sub_1000C54B0(v42);
      v27 = v38;
      sub_1000C54E0(v38);
      v28 = v5 + v19[6];
      v29 = *(_QWORD *)v28;
      v30 = *(_BYTE *)(v28 + 8);
      v31 = *(_BYTE *)(v5 + v19[10]);
      sub_10001961C(*(_QWORD *)v28, v30);
      v32 = sub_1000C5274(v29, v30);
      sub_100019A78(v29, v30);
      v33 = type metadata accessor for CurrentObservationViewAttributesFactory(0);
      swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
      v34 = sub_1000D7DC8((uint64_t)v42, (uint64_t)v27, v31, v32 & 1);
      v35 = v20 + *(int *)(v21 + 24);
      v26 = v43;
      sub_1000D6DB8((uint64_t)v18, v35, (uint64_t)&v18[*(int *)(v16 + 20)], v40, v41, *(unsigned __int8 *)(v35 + 50), *(unsigned __int8 *)(v35 + 51), 1, v43, v39 & 1, 0);
      swift_release(v34);
      sub_100011894((uint64_t)v18, type metadata accessor for AggregateWeatherViewModel);
      v25 = 0;
      goto LABEL_10;
    }
    sub_100011894((uint64_t)v15, type metadata accessor for WeatherDataViewModel);
  }
  v25 = 1;
  v26 = v43;
LABEL_10:
  v36 = type metadata accessor for CurrentObservationViewAttributes(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v26, v25, 1, v36);
}

void *sub_100079168@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _BYTE __src[80];

  v2 = v1;
  v25 = a1;
  v3 = type metadata accessor for Font.Context(0);
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  __chkstk_darwin(v3);
  v5 = (_DWORD *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v6);
  v8 = (_DWORD *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v9);
  v11 = (_DWORD *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_10007933C(v1);
  sub_1000C54B0(v11);
  v13 = type metadata accessor for WidgetContentView(0);
  sub_1000C54E0(v8);
  v14 = v1 + *(int *)(v13 + 24);
  v15 = *(_QWORD *)v14;
  v16 = *(_BYTE *)(v14 + 8);
  v17 = *(_BYTE *)(v2 + *(int *)(v13 + 40));
  sub_10001961C(*(_QWORD *)v14, v16);
  v18 = sub_1000C5274(v15, v16);
  sub_100019A78(v15, v16);
  v19 = type metadata accessor for ErrorViewAttributesFactory(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = sub_100093708((uint64_t)v11, (uint64_t)v8, v17, v18 & 1);
  sub_1000C5030(v5);
  sub_1000D91F4(v12, (uint64_t)v5, (uint64_t)__src);
  swift_release(v20);
  (*(void (**)(_DWORD *, uint64_t))(v23 + 8))(v5, v24);
  return memcpy(v25, __src, 0x50uLL);
}

uint64_t sub_10007933C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v2);
  v4 = (unsigned __int8 *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1 + *(int *)(type metadata accessor for WidgetContentView(0) + 32);
  v6 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v5 + *(int *)(v6 + 28), (uint64_t)v4, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v4, v2) != 1)
    return *v4;
  sub_100011894((uint64_t)v4, type metadata accessor for ForecastEntry.Model);
  return 3;
}

void sub_100079400(uint64_t a1@<X8>)
{
  const void *v1;
  char *v2;
  const void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1;
  v5 = type metadata accessor for ErrorView(0);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_1000443F0();
  memcpy(v2, v3, 0x50uLL);
  v7 = &v2[*(int *)(v5 + 20)];
  *(_QWORD *)v7 = swift_getKeyPath(&unk_10017CF70);
  v8 = sub_100005D40(&qword_1001BF490);
  swift_storeEnumTagMultiPayload(v7, v8, 0);
  v9 = sub_100082140((uint64_t)v3);
  LOBYTE(v3) = static Edge.Set.all.getter(v9);
  sub_10000F7C4((uint64_t)v2, a1, type metadata accessor for ErrorView);
  v10 = a1 + *(int *)(sub_100005D40(&qword_1001C14F8) + 36);
  *(_BYTE *)v10 = (_BYTE)v3;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_BYTE *)(v10 + 40) = 1;
  sub_100011894((uint64_t)v2, type metadata accessor for ErrorView);
}

void sub_1000794F8(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE v3[80];

  memcpy(v3, v1, sizeof(v3));
  sub_100079400(a1);
}

void sub_100079538(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  __int128 v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v33[1] = a1;
  v1 = type metadata accessor for CurrentObservationView(0);
  __chkstk_darwin(v1);
  v3 = (char *)v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005D40(&qword_1001C1260);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v33 - v8;
  v10 = sub_100005D40(&qword_1001C1428);
  __chkstk_darwin(v10);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005D40(&qword_1001C1288);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100078A68((uint64_t)v15);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v16) == 1)
  {
    sub_100016904((uint64_t)v15, &qword_1001C1288);
    sub_100079168(&v34);
    v19 = v35;
    v20 = v36;
    v21 = v39;
    v22 = v40;
    *(_OWORD *)v12 = v34;
    v12[16] = v19;
    *((_QWORD *)v12 + 3) = v20;
    v23 = v38;
    *((_OWORD *)v12 + 2) = v37;
    *((_OWORD *)v12 + 3) = v23;
    *((_QWORD *)v12 + 8) = v21;
    *((_QWORD *)v12 + 9) = v22;
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v24 = sub_100080AE4();
    v25 = sub_10008053C();
    _ConditionalContent<>.init(storage:)(v12, v4, &type metadata for WidgetContentView.GenericErrorView, v24, v25);
  }
  else
  {
    sub_100011868((uint64_t)v15, (uint64_t)v18, type metadata accessor for CurrentObservationViewAttributes);
    sub_10000F7C4((uint64_t)v18, (uint64_t)v3, type metadata accessor for CurrentObservationViewAttributes);
    v27 = static Alignment.leading.getter(v26);
    LOBYTE(v32) = 0;
    LOBYTE(v31) = 1;
    sub_100077B04(0, (uint64_t)v7, 0, v31, 0x7FF0000000000000, v32, v27, v28, type metadata accessor for CurrentObservationView, &qword_1001C1260);
    sub_100011894((uint64_t)v3, type metadata accessor for CurrentObservationView);
    sub_1000168AC((uint64_t)v7, (uint64_t)v9, &qword_1001C1260);
    sub_1000168D8((uint64_t)v9, (uint64_t)v12, &qword_1001C1260);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v29 = sub_100080AE4();
    v30 = sub_10008053C();
    _ConditionalContent<>.init(storage:)(v12, v4, &type metadata for WidgetContentView.GenericErrorView, v29, v30);
    sub_100016904((uint64_t)v9, &qword_1001C1260);
    sub_100011894((uint64_t)v18, type metadata accessor for CurrentObservationViewAttributes);
  }
}

void sub_100079878(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[4];
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;

  v54 = a2;
  v55 = sub_100005D40(&qword_1001BF358);
  __chkstk_darwin(v55);
  v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001C1230);
  __chkstk_darwin(v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D40(&qword_1001C13E0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v51 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v52 = (char *)&v48 - v12;
  v13 = sub_100005D40(&qword_1001C13E8);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005D40(&qword_1001C1288);
  __chkstk_darwin(v16);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v19);
  v53 = (uint64_t)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100078A68((uint64_t)v18);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v19) == 1)
  {
    sub_100016904((uint64_t)v18, &qword_1001C1288);
    sub_100079168(&v57);
    v21 = v58;
    v22 = v59;
    v23 = v62;
    v24 = v63;
    *(_OWORD *)v15 = v57;
    v15[16] = v21;
    *((_QWORD *)v15 + 3) = v22;
    v25 = v61;
    *((_OWORD *)v15 + 2) = v60;
    *((_OWORD *)v15 + 3) = v25;
    *((_QWORD *)v15 + 8) = v23;
    *((_QWORD *)v15 + 9) = v24;
    swift_storeEnumTagMultiPayload(v15, v13, 1);
    sub_100082DEC((uint64_t)&unk_1001C1238);
    v27 = v26;
    sub_100082DEC((uint64_t)&qword_1001BF458);
    v56[0] = v5;
    v56[1] = v55;
    v56[2] = v27;
    v56[3] = v28;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v56, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v30 = sub_10008053C();
    _ConditionalContent<>.init(storage:)(v15, v8, &type metadata for WidgetContentView.GenericErrorView, OpaqueTypeConformance2, v30);
  }
  else
  {
    v48 = v13;
    v49 = v9;
    v31 = v5;
    v32 = v55;
    v50 = v8;
    v33 = v53;
    sub_100011868((uint64_t)v18, v53, type metadata accessor for CurrentObservationViewAttributes);
    *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v34);
    *((_QWORD *)v7 + 1) = 0;
    v7[16] = 0;
    v35 = sub_100005D40(&qword_1001C13F0);
    sub_100079D4C(v33, a1, (uint64_t)&v7[*(int *)(v35 + 44)]);
    v36 = enum case for DynamicTypeSize.xxLarge(_:);
    v37 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v4, v36, v37);
    sub_10008070C((uint64_t)&qword_1001BF468);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v4, v4, v37) & 1) != 0)
    {
      sub_100082DEC((uint64_t)&unk_1001C1238);
      v39 = v38;
      sub_100082DEC((uint64_t)&qword_1001BF458);
      v41 = v40;
      v42 = v51;
      View.dynamicTypeSize<A>(_:)(v4, v31, v32, v39, v40);
      sub_100016904((uint64_t)v4, &qword_1001BF358);
      sub_100016904((uint64_t)v7, &qword_1001C1230);
      v43 = v49;
      v44 = v52;
      v45 = v50;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v52, v42, v50);
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v15, v44, v45);
      swift_storeEnumTagMultiPayload(v15, v48, 0);
      *(_QWORD *)&v57 = v31;
      *((_QWORD *)&v57 + 1) = v32;
      v58 = v39;
      v59 = v41;
      v46 = swift_getOpaqueTypeConformance2(&v57, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
      v47 = sub_10008053C();
      _ConditionalContent<>.init(storage:)(v15, v45, &type metadata for WidgetContentView.GenericErrorView, v46, v47);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
      sub_100011894(v53, type metadata accessor for CurrentObservationViewAttributes);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100079D4C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t KeyPath;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v47 = a2;
  v43 = a1;
  v50 = a3;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v48 = *(_QWORD *)(v3 - 8);
  v49 = v3;
  __chkstk_darwin(v3);
  v42 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100005D40(&qword_1001C13F8);
  __chkstk_darwin(v46);
  v6 = (uint64_t *)((char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100005D40(&qword_1001C1400);
  v45 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v44 = (char *)&v41 - v11;
  v12 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SmallCurrentObservationView(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005D40(&qword_1001C1408);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v41 - v22;
  sub_10000F7C4(v43, (uint64_t)v14, type metadata accessor for CurrentObservationViewAttributes);
  KeyPath = swift_getKeyPath(&unk_10017D000);
  v25 = (uint64_t *)&v17[*(int *)(v15 + 20)];
  *v25 = KeyPath;
  v26 = sub_100005D40(&qword_1001BF3C0);
  swift_storeEnumTagMultiPayload(v25, v26, 0);
  sub_100011868((uint64_t)v14, (uint64_t)v17, type metadata accessor for CurrentObservationViewAttributes);
  sub_10000F7C4((uint64_t)v17, (uint64_t)v21, type metadata accessor for SmallCurrentObservationView);
  *(_WORD *)&v21[*(int *)(v18 + 36)] = 256;
  sub_100011894((uint64_t)v17, type metadata accessor for SmallCurrentObservationView);
  sub_1000168AC((uint64_t)v21, (uint64_t)v23, &qword_1001C1408);
  *v6 = static Alignment.center.getter(v27);
  v6[1] = v28;
  v29 = sub_100005D40(&qword_1001C1410);
  v30 = sub_10007A118(v47, (uint64_t)v6 + *(int *)(v29 + 44));
  v31 = v42;
  static AccessibilityChildBehavior.contain.getter(v30);
  sub_100082DEC((uint64_t)&unk_1001C1418);
  View.accessibilityElement(children:)(v31, v46, v32);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v49);
  sub_100016904((uint64_t)v6, &qword_1001C13F8);
  v34 = v44;
  v33 = v45;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v44, v10, v7);
  sub_1000168D8((uint64_t)v23, (uint64_t)v21, &qword_1001C1408);
  v35 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
  v36 = v33;
  v35(v10, v34, v7);
  v37 = v50;
  sub_1000168D8((uint64_t)v21, v50, &qword_1001C1408);
  v38 = sub_100005D40(&qword_1001C1420);
  v39 = v37 + *(int *)(v38 + 48);
  *(_QWORD *)v39 = 0x3FF0000000000000;
  *(_BYTE *)(v39 + 8) = 0;
  v35((char *)(v37 + *(int *)(v38 + 64)), v10, v7);
  v40 = *(void (**)(char *, uint64_t))(v36 + 8);
  v40(v34, v7);
  sub_100016904((uint64_t)v23, &qword_1001C1408);
  v40(v10, v7);
  sub_100016904((uint64_t)v21, &qword_1001C1408);
}

uint64_t sub_10007A118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t HourPrecipitationChartView;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a2;
  HourPrecipitationChartView = type metadata accessor for SmallNextHourPrecipitationChartView(0);
  v38 = *(_QWORD *)(HourPrecipitationChartView - 8);
  v39 = HourPrecipitationChartView;
  __chkstk_darwin(HourPrecipitationChartView);
  v37 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001BFA38);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v36 = *(_QWORD *)(HourPrecipitationChartViewModel - 8);
  v9 = __chkstk_darwin(HourPrecipitationChartViewModel);
  v35 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - v11;
  v13 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005D40(&qword_1001BF9B0);
  __chkstk_darwin(v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1 + *(int *)(type metadata accessor for WidgetContentView(0) + 32);
  v23 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v22 + *(int *)(v23 + 28), (uint64_t)v15, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v15, v13) == 1)
  {
    sub_100011868((uint64_t)v15, (uint64_t)v18, type metadata accessor for WeatherDataViewModel);
    v24 = type metadata accessor for WeatherDataViewModel(0);
    v25 = (uint64_t)v18;
    v26 = 0;
  }
  else
  {
    v24 = type metadata accessor for WeatherDataViewModel(0);
    v25 = (uint64_t)v18;
    v26 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v25, v26, 1, v24);
  type metadata accessor for WeatherDataViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v24) == 1)
  {
    sub_100016904((uint64_t)v18, &qword_1001BF9B0);
LABEL_8:
    v27 = 1;
    v29 = v39;
    v28 = v40;
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v28, v27, 1, v29);
  }
  if (swift_getEnumCaseMultiPayload(v18, v24))
  {
    sub_100011894((uint64_t)v18, type metadata accessor for WeatherDataViewModel);
    goto LABEL_8;
  }
  sub_100011868((uint64_t)v18, (uint64_t)v21, type metadata accessor for AggregateWeatherViewModel);
  sub_1000168D8((uint64_t)&v21[*(int *)(v19 + 40)], (uint64_t)v7, &qword_1001BFA38);
  v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v7, 1, HourPrecipitationChartViewModel);
  v29 = v39;
  v28 = v40;
  if (v31 == 1)
  {
    sub_100011894((uint64_t)v21, type metadata accessor for AggregateWeatherViewModel);
    sub_100016904((uint64_t)v7, &qword_1001BFA38);
    v27 = 1;
  }
  else
  {
    v32 = v36;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v12, v7, HourPrecipitationChartViewModel);
    v33 = v35;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v35, v12, HourPrecipitationChartViewModel);
    v34 = v37;
    SmallNextHourPrecipitationChartView.init(model:)(v33);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v12, HourPrecipitationChartViewModel);
    sub_100011894((uint64_t)v21, type metadata accessor for AggregateWeatherViewModel);
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v28, v34, v29);
    v27 = 0;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v28, v27, 1, v29);
}

void sub_10007A4C8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __n128 v32[3];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[3];
  char v40;

  v31 = a2;
  v3 = sub_100005D40(&qword_1001C12D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005D40(&qword_1001C12D8);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001C1288);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1 + *(int *)(type metadata accessor for WidgetContentView(0) + 32);
  v16 = type metadata accessor for ForecastEntry(0);
  sub_100078DE0(*(_QWORD *)(v15 + *(int *)(v16 + 24)), *(_QWORD *)(v15 + *(int *)(v16 + 24) + 8), 1, (uint64_t)v11);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v11, 1, v12) == 1)
  {
    sub_100016904((uint64_t)v11, &qword_1001C1288);
  }
  else
  {
    sub_100011868((uint64_t)v11, (uint64_t)v14, type metadata accessor for CurrentObservationViewAttributes);
    GeometryProxy.size.getter(v17);
    sub_1000785A4(v32);
    sub_1000168AC((uint64_t)v32, (uint64_t)v39, &qword_1001C12E8);
    if (*(_QWORD *)&v39[0])
    {
      v33 = v39[0];
      v34 = v39[1];
      v35 = v39[2];
      LOBYTE(v36) = v40;
      *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v18);
      *((_QWORD *)v8 + 1) = 0;
      v8[16] = 0;
      v19 = sub_100005D40(&qword_1001C12F0);
      sub_10007A824((uint64_t)v14, a1, &v33, (uint64_t)&v8[*(int *)(v19 + 44)]);
      sub_1000168D8((uint64_t)v8, (uint64_t)v5, &qword_1001C12D8);
      swift_storeEnumTagMultiPayload(v5, v3, 0);
      sub_100082DEC((uint64_t)&unk_1001C12E0);
      v21 = v20;
      v22 = sub_10008053C();
      _ConditionalContent<>.init(storage:)(v5, v6, &type metadata for WidgetContentView.GenericErrorView, v21, v22);
      sub_1000813D0((uint64_t *)v32);
      sub_100016904((uint64_t)v8, &qword_1001C12D8);
      sub_100011894((uint64_t)v14, type metadata accessor for CurrentObservationViewAttributes);
      return;
    }
    sub_100011894((uint64_t)v14, type metadata accessor for CurrentObservationViewAttributes);
  }
  sub_100079168(&v33);
  v23 = v34;
  v24 = *((_QWORD *)&v34 + 1);
  v25 = v37;
  v26 = v38;
  *(_OWORD *)v5 = v33;
  v5[16] = v23;
  *((_QWORD *)v5 + 3) = v24;
  v27 = v36;
  *((_OWORD *)v5 + 2) = v35;
  *((_OWORD *)v5 + 3) = v27;
  *((_QWORD *)v5 + 8) = v25;
  *((_QWORD *)v5 + 9) = v26;
  swift_storeEnumTagMultiPayload(v5, v3, 1);
  sub_100082DEC((uint64_t)&unk_1001C12E0);
  v29 = v28;
  v30 = sub_10008053C();
  _ConditionalContent<>.init(storage:)(v5, v6, &type metadata for WidgetContentView.GenericErrorView, v29, v30);
}

void sub_10007A824(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int16 v42;
  char v43;
  uint64_t KeyPath;
  uint64_t *v45;
  _OWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  __int16 v65;
  char v66;
  uint64_t v67;
  __int16 v68;
  char v69;

  v63 = a3;
  v58 = a2;
  v61 = a4;
  v60 = type metadata accessor for HourlyBannerView(0);
  v5 = __chkstk_darwin(v60);
  v62 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v54 - v7;
  v9 = type metadata accessor for ContentSizeCategory(0);
  v56 = *(_QWORD *)(v9 - 8);
  v57 = v9;
  v10 = __chkstk_darwin(v9);
  v55 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v54 - v12;
  v14 = type metadata accessor for WidgetContentView(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CurrentObservationBannerView(0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v54 - v24;
  sub_10000F7C4(a1, (uint64_t)v19, type metadata accessor for CurrentObservationViewAttributes);
  v26 = &v23[*(int *)(v20 + 20)];
  *(_QWORD *)v26 = swift_getKeyPath(&unk_10017CFD0);
  v27 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  v28 = v58;
  sub_100011868((uint64_t)v19, (uint64_t)v23, type metadata accessor for CurrentObservationViewAttributes);
  v59 = v25;
  sub_100011868((uint64_t)v23, (uint64_t)v25, type metadata accessor for CurrentObservationBannerView);
  v29 = *(int *)(v14 + 40);
  v30 = *(unsigned __int8 *)(v28 + v29);
  if (sub_100005BB8(*(_BYTE *)(v28 + v29)))
  {
    v64 = 0x4028000000000000;
    v65 = 0;
    _ConditionalContent<>.init(storage:)(&v64, &type metadata for Spacer, &type metadata for Spacer, &protocol witness table for Spacer, &protocol witness table for Spacer);
    v31 = v67;
    v32 = v68;
    if (HIBYTE(v68))
      v33 = 256;
    else
      v33 = 0;
  }
  else
  {
    sub_10000F7C4(v28, (uint64_t)v16, type metadata accessor for WidgetContentView);
    if (v30 > 1)
    {
      sub_1000C54E0(v13);
      v35 = v55;
      v34 = v56;
      v36 = v57;
      (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v55, enum case for ContentSizeCategory.large(_:), v57);
      v37 = sub_10015DC48(v13, v35);
      v38 = *(void (**)(char *, uint64_t))(v34 + 8);
      v38(v35, v36);
      v38(v13, v36);
      sub_100011894((uint64_t)v16, type metadata accessor for WidgetContentView);
      if ((v37 & 1) == 0)
      {
        v64 = 0x4030000000000000;
        v65 = 0;
        v66 = 1;
        v53 = sub_100005D40(&qword_1001C12F8);
        v40 = sub_100081454();
        v41 = v53;
        goto LABEL_12;
      }
    }
    else
    {
      sub_100011894((uint64_t)v16, type metadata accessor for WidgetContentView);
    }
    v64 = 0x4018000000000000;
    v65 = 256;
    _ConditionalContent<>.init(storage:)(&v64, &type metadata for Spacer, &type metadata for Spacer, &protocol witness table for Spacer, &protocol witness table for Spacer);
    v31 = v67;
    v32 = v68;
    if (HIBYTE(v68))
      v33 = 256;
    else
      v33 = 0;
  }
  v64 = v31;
  v65 = v33 | v32;
  v66 = 0;
  v39 = sub_100005D40(&qword_1001C12F8);
  v40 = sub_100081454();
  v41 = v39;
LABEL_12:
  _ConditionalContent<>.init(storage:)(&v64, v41, &type metadata for Spacer, v40, &protocol witness table for Spacer);
  v58 = v67;
  v42 = v68;
  v43 = v69;
  KeyPath = swift_getKeyPath(&unk_10017CFD0);
  v45 = (uint64_t *)&v8[*(int *)(v60 + 20)];
  *v45 = KeyPath;
  swift_storeEnumTagMultiPayload(v45, v27, 0);
  v46 = v63;
  v47 = v63[1];
  *(_OWORD *)v8 = *v63;
  *((_OWORD *)v8 + 1) = v47;
  *((_OWORD *)v8 + 2) = v46[2];
  v8[48] = *((_BYTE *)v46 + 48);
  v48 = (uint64_t)v59;
  sub_10000F7C4((uint64_t)v59, (uint64_t)v23, type metadata accessor for CurrentObservationBannerView);
  v49 = v62;
  sub_10000F7C4((uint64_t)v8, v62, type metadata accessor for HourlyBannerView);
  v50 = v61;
  sub_10000F7C4((uint64_t)v23, v61, type metadata accessor for CurrentObservationBannerView);
  v51 = sub_100005D40(&qword_1001C1308);
  v52 = v50 + *(int *)(v51 + 48);
  *(_QWORD *)v52 = v58;
  *(_WORD *)(v52 + 8) = v42;
  *(_BYTE *)(v52 + 10) = v43;
  sub_10000F7C4(v49, v50 + *(int *)(v51 + 64), type metadata accessor for HourlyBannerView);
  sub_1000814B0(v46);
  sub_100011894((uint64_t)v8, type metadata accessor for HourlyBannerView);
  sub_100011894(v48, type metadata accessor for CurrentObservationBannerView);
  sub_100011894(v49, type metadata accessor for HourlyBannerView);
  sub_100011894((uint64_t)v23, type metadata accessor for CurrentObservationBannerView);
}

void sub_10007AD5C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int *v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _OWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  char v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;

  v94 = a1;
  v86 = sub_100005D40(&qword_1001C1270);
  __chkstk_darwin(v86);
  v88 = (_OWORD *)((char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v87 = sub_100005D40(&qword_1001C1198);
  __chkstk_darwin(v87);
  v81 = (uint64_t *)((char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v93 = sub_100005D40(&qword_1001C1188);
  __chkstk_darwin(v93);
  v89 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100005D40(&qword_1001C1278);
  __chkstk_darwin(v91);
  v92 = (uint64_t)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100005D40(&qword_1001C1280);
  __chkstk_darwin(v82);
  v85 = (_OWORD *)((char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v84 = type metadata accessor for AccessibilitySizeCurrentObservationBannerView(0);
  __chkstk_darwin(v84);
  v80 = (uint64_t)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D40(&qword_1001C1288);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v77 - v12;
  v14 = type metadata accessor for CurrentObservationViewAttributes(0);
  v15 = __chkstk_darwin(v14);
  v79 = (uint64_t)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v78 = (uint64_t)&v77 - v17;
  v90 = sub_100005D40(&qword_1001C1170);
  __chkstk_darwin(v90);
  v83 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ContentSizeCategory(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v77 - v24;
  v26 = type metadata accessor for WidgetContentView(0);
  sub_1000C54E0(v25);
  if (*(_BYTE *)(v1 + *(int *)(v26 + 40)))
    v27 = (unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:);
  else
    v27 = (unsigned int *)&enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v23, *v27, v19);
  v28 = sub_10015DF50(v25, v23);
  v29 = *(void (**)(char *, uint64_t))(v20 + 8);
  v29(v23, v19);
  v29(v25, v19);
  v30 = v1 + *(int *)(v26 + 32);
  v31 = v30 + *(int *)(type metadata accessor for ForecastEntry(0) + 24);
  v32 = *(_QWORD *)(v31 + 16);
  v33 = *(_QWORD *)(v31 + 24);
  if ((v28 & 1) != 0)
  {
    sub_100078DE0(v32, v33, 0, (uint64_t)v13);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v14) == 1)
    {
      sub_100016904((uint64_t)v13, &qword_1001C1288);
      sub_100079168(&v95);
      v34 = v96;
      v35 = v97;
      v36 = v100;
      v37 = v101;
      v38 = v85;
      *v85 = v95;
      *((_BYTE *)v38 + 16) = v34;
      *((_QWORD *)v38 + 3) = v35;
      v39 = v99;
      v38[2] = v98;
      v38[3] = v39;
      *((_QWORD *)v38 + 8) = v36;
      *((_QWORD *)v38 + 9) = v37;
      swift_storeEnumTagMultiPayload(v38, v82, 1);
      sub_10008070C((uint64_t)&unk_1001C1178);
      v41 = v40;
      v42 = sub_10008053C();
      v43 = (uint64_t)v83;
      _ConditionalContent<>.init(storage:)(v38, v84, &type metadata for WidgetContentView.GenericErrorView, v41, v42);
    }
    else
    {
      v54 = v78;
      sub_100011868((uint64_t)v13, v78, type metadata accessor for CurrentObservationViewAttributes);
      v55 = v80;
      sub_10000F7C4(v54, v80, type metadata accessor for CurrentObservationViewAttributes);
      v56 = v85;
      sub_10000F7C4(v55, (uint64_t)v85, type metadata accessor for AccessibilitySizeCurrentObservationBannerView);
      swift_storeEnumTagMultiPayload(v56, v82, 0);
      sub_10008070C((uint64_t)&unk_1001C1178);
      v58 = v57;
      v59 = sub_10008053C();
      v43 = (uint64_t)v83;
      _ConditionalContent<>.init(storage:)(v56, v84, &type metadata for WidgetContentView.GenericErrorView, v58, v59);
      sub_100011894(v55, type metadata accessor for AccessibilitySizeCurrentObservationBannerView);
      sub_100011894(v54, type metadata accessor for CurrentObservationViewAttributes);
    }
    v60 = &qword_1001C1170;
    v61 = v92;
    sub_1000168D8(v43, v92, &qword_1001C1170);
    swift_storeEnumTagMultiPayload(v61, v91, 0);
    v62 = sub_100080688();
    v63 = sub_10008073C();
    _ConditionalContent<>.init(storage:)(v61, v90, v93, v62, v63);
    v64 = v43;
  }
  else
  {
    sub_100078DE0(v32, v33, 1, (uint64_t)v11);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v11, 1, v14) == 1)
    {
      sub_100016904((uint64_t)v11, &qword_1001C1288);
      sub_100079168(&v95);
      v44 = v96;
      v45 = v97;
      v46 = v100;
      v47 = v101;
      v48 = v88;
      *v88 = v95;
      *((_BYTE *)v48 + 16) = v44;
      *((_QWORD *)v48 + 3) = v45;
      v49 = v99;
      v48[2] = v98;
      v48[3] = v49;
      *((_QWORD *)v48 + 8) = v46;
      *((_QWORD *)v48 + 9) = v47;
      swift_storeEnumTagMultiPayload(v48, v86, 1);
      sub_100082DEC((uint64_t)&unk_1001C1190);
      v51 = v50;
      v52 = sub_10008053C();
      v53 = (uint64_t)v89;
      _ConditionalContent<>.init(storage:)(v48, v87, &type metadata for WidgetContentView.GenericErrorView, v51, v52);
    }
    else
    {
      v65 = v79;
      sub_100011868((uint64_t)v11, v79, type metadata accessor for CurrentObservationViewAttributes);
      v67 = static HorizontalAlignment.center.getter(v66);
      v68 = (uint64_t)v81;
      *v81 = v67;
      *(_QWORD *)(v68 + 8) = 0;
      *(_BYTE *)(v68 + 16) = 1;
      v69 = sub_100005D40(&qword_1001C1290);
      sub_10007B524(v65, v1, v68 + *(int *)(v69 + 44));
      v70 = v88;
      sub_1000168D8(v68, (uint64_t)v88, &qword_1001C1198);
      swift_storeEnumTagMultiPayload(v70, v86, 0);
      sub_100082DEC((uint64_t)&unk_1001C1190);
      v72 = v71;
      v73 = sub_10008053C();
      v53 = (uint64_t)v89;
      _ConditionalContent<>.init(storage:)(v70, v87, &type metadata for WidgetContentView.GenericErrorView, v72, v73);
      sub_100016904(v68, &qword_1001C1198);
      sub_100011894(v65, type metadata accessor for CurrentObservationViewAttributes);
    }
    v60 = &qword_1001C1188;
    v74 = v92;
    sub_1000168D8(v53, v92, &qword_1001C1188);
    swift_storeEnumTagMultiPayload(v74, v91, 1);
    v75 = sub_100080688();
    v76 = sub_10008073C();
    _ConditionalContent<>.init(storage:)(v74, v90, v93, v75, v76);
    v64 = v53;
  }
  sub_100016904(v64, v60);
}

void sub_10007B524(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v52 = a2;
  v50 = a1;
  v57 = a3;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v55 = *(_QWORD *)(v3 - 8);
  v56 = v3;
  __chkstk_darwin(v3);
  v54 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001C1298);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v51 = sub_100005D40(&qword_1001C12A0);
  __chkstk_darwin(v51);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001C12A8);
  v53 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v50 - v14;
  v16 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CurrentObservationBannerView(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v50 - v23;
  sub_10000F7C4(v50, (uint64_t)v18, type metadata accessor for CurrentObservationViewAttributes);
  v25 = &v22[*(int *)(v19 + 20)];
  *(_QWORD *)v25 = swift_getKeyPath(&unk_10017CFD0);
  v26 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v25, v26, 0);
  sub_100011868((uint64_t)v18, (uint64_t)v22, type metadata accessor for CurrentObservationViewAttributes);
  sub_100011868((uint64_t)v22, (uint64_t)v24, type metadata accessor for CurrentObservationBannerView);
  *v7 = static Alignment.center.getter(v27);
  v7[1] = v28;
  v29 = (uint64_t)v7 + *(int *)(sub_100005D40(&qword_1001C12B0) + 44);
  v30 = type metadata accessor for WidgetContentView(0);
  sub_10000F7C4(v52 + *(int *)(v30 + 32), v29, type metadata accessor for ForecastEntry);
  LOBYTE(v29) = static Edge.Set.bottom.getter();
  v31 = EdgeInsets.init(_all:)(-6.0);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_1000168D8((uint64_t)v7, (uint64_t)v9, &qword_1001C1298);
  v38 = v51;
  v39 = &v9[*(int *)(v51 + 36)];
  *v39 = v29;
  *((double *)v39 + 1) = v31;
  *((_QWORD *)v39 + 2) = v33;
  *((_QWORD *)v39 + 3) = v35;
  *((_QWORD *)v39 + 4) = v37;
  v39[40] = 0;
  sub_100016904((uint64_t)v7, &qword_1001C1298);
  v40 = v54;
  static AccessibilityChildBehavior.contain.getter(v41);
  v42 = sub_10008134C();
  View.accessibilityElement(children:)(v40, v38, v42);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v56);
  sub_100016904((uint64_t)v9, &qword_1001C12A0);
  v43 = v53;
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v15, v13, v10);
  sub_10000F7C4((uint64_t)v24, (uint64_t)v22, type metadata accessor for CurrentObservationBannerView);
  v44 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
  v45 = v43;
  v44(v13, v15, v10);
  v46 = v57;
  sub_10000F7C4((uint64_t)v22, v57, type metadata accessor for CurrentObservationBannerView);
  v47 = sub_100005D40(&qword_1001C12C8);
  v48 = v46 + *(int *)(v47 + 48);
  *(_QWORD *)v48 = 0x4018000000000000;
  *(_BYTE *)(v48 + 8) = 0;
  v44((char *)(v46 + *(int *)(v47 + 64)), v13, v10);
  v49 = *(void (**)(char *, uint64_t))(v45 + 8);
  v49(v15, v10);
  sub_100011894((uint64_t)v24, type metadata accessor for CurrentObservationBannerView);
  v49(v13, v10);
  sub_100011894((uint64_t)v22, type metadata accessor for CurrentObservationBannerView);
}

void sub_10007B92C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40[3];
  uint64_t v41;
  uint64_t v42;
  __n128 v43[3];
  __int128 v44;
  char v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[7];
  _QWORD v52[2];

  v41 = sub_100005D40(&qword_1001C1310);
  __chkstk_darwin(v41);
  v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100005D40(&qword_1001C1318);
  __chkstk_darwin(v42);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001C1320);
  __chkstk_darwin(v10);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DailyViewAttributes(0);
  __chkstk_darwin(v13);
  v40[0] = (uint64_t)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005D40(&qword_1001C1288);
  __chkstk_darwin(v15);
  v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CurrentObservationViewAttributes(0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[1] = a1;
  GeometryProxy.size.getter(v19);
  sub_1000785A4(v43);
  sub_1000168AC((uint64_t)v43, (uint64_t)v51, &qword_1001C12E8);
  v22 = v51[0];
  if (v51[0])
  {
    v40[2] = a3;
    v52[0] = v51[0];
    sub_100081500(v52);
    sub_1000813D0((uint64_t *)v43);
    v23 = *(_QWORD *)(v22 + 16);
    sub_100081528(v52);
    sub_100078A68((uint64_t)v17);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v17, 1, v18) == 1)
    {
      v24 = &qword_1001C1288;
      v25 = (uint64_t)v17;
    }
    else
    {
      sub_100011868((uint64_t)v17, (uint64_t)v21, type metadata accessor for CurrentObservationViewAttributes);
      sub_100078258(v23, (uint64_t)v12);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v13) != 1)
      {
        v34 = v40[0];
        sub_100011868((uint64_t)v12, v40[0], type metadata accessor for DailyViewAttributes);
        *(_QWORD *)v9 = static VerticalAlignment.center.getter(v35);
        *((_QWORD *)v9 + 1) = 0;
        v9[16] = 0;
        v36 = sub_100005D40(&qword_1001C1330);
        sub_10007BD64((uint64_t)v21, v34, a2, (uint64_t)&v9[*(int *)(v36 + 44)]);
        sub_1000168D8((uint64_t)v9, (uint64_t)v7, &qword_1001C1318);
        swift_storeEnumTagMultiPayload(v7, v41, 0);
        sub_100082DEC((uint64_t)&unk_1001C1328);
        v38 = v37;
        v39 = sub_10008053C();
        _ConditionalContent<>.init(storage:)(v7, v42, &type metadata for WidgetContentView.GenericErrorView, v38, v39);
        sub_100016904((uint64_t)v9, &qword_1001C1318);
        sub_100011894(v34, type metadata accessor for DailyViewAttributes);
        sub_100011894((uint64_t)v21, type metadata accessor for CurrentObservationViewAttributes);
        return;
      }
      sub_100011894((uint64_t)v21, type metadata accessor for CurrentObservationViewAttributes);
      v24 = &qword_1001C1320;
      v25 = (uint64_t)v12;
    }
    sub_100016904(v25, v24);
  }
  sub_100079168(&v44);
  v26 = v45;
  v27 = v46;
  v28 = v49;
  v29 = v50;
  *(_OWORD *)v7 = v44;
  v7[16] = v26;
  *((_QWORD *)v7 + 3) = v27;
  v30 = v48;
  *((_OWORD *)v7 + 2) = v47;
  *((_OWORD *)v7 + 3) = v30;
  *((_QWORD *)v7 + 8) = v28;
  *((_QWORD *)v7 + 9) = v29;
  swift_storeEnumTagMultiPayload(v7, v41, 1);
  sub_100082DEC((uint64_t)&unk_1001C1328);
  v32 = v31;
  v33 = sub_10008053C();
  _ConditionalContent<>.init(storage:)(v7, v42, &type metadata for WidgetContentView.GenericErrorView, v32, v33);
}

void sub_10007BD64(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD v66[3];
  uint64_t v67;
  char v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[32];
  __int128 v74;

  *(_QWORD *)&v59 = a3;
  v61 = a2;
  v63 = a4;
  v60 = type metadata accessor for DailyView(0);
  __chkstk_darwin(v60);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100005D40(&qword_1001C1338);
  v7 = __chkstk_darwin(v62);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v55 - v10;
  v12 = type metadata accessor for CurrentObservationView(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005D40(&qword_1001C1340);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v55 - v19;
  sub_10000F7C4(a1, (uint64_t)v14, type metadata accessor for CurrentObservationViewAttributes);
  v22 = GeometryProxy.size.getter(v21) * 0.5 + -16.0;
  GeometryProxy.size.getter(v23);
  v25 = v24;
  v27 = static Alignment.leading.getter(v26);
  _FrameLayout.init(width:height:alignment:)(v66, *(_QWORD *)&v22, 0, v25, 0, v27, v28);
  sub_10000F7C4((uint64_t)v14, (uint64_t)v18, type metadata accessor for CurrentObservationView);
  v29 = &v18[*(int *)(v15 + 36)];
  v30 = v66[1];
  *(_OWORD *)v29 = v66[0];
  *((_OWORD *)v29 + 1) = v30;
  *((_OWORD *)v29 + 2) = v66[2];
  sub_100011894((uint64_t)v14, type metadata accessor for CurrentObservationView);
  sub_1000168AC((uint64_t)v18, (uint64_t)v20, &qword_1001C1340);
  v32 = static Alignment.center.getter(v31);
  _FrameLayout.init(width:height:alignment:)(&v67, 0x4030000000000000, 0, 0, 1, v32, v33);
  v34 = v67;
  LOBYTE(v15) = v68;
  v58 = v69;
  v57 = v70;
  v56 = v71;
  v55 = v72;
  v35 = (uint64_t *)(v59 + *(int *)(type metadata accessor for WidgetContentView(0) + 36));
  v37 = *v35;
  v36 = v35[1];
  v64 = v37;
  v65 = v36;
  v38 = sub_100005D40(&qword_1001C10E8);
  State.projectedValue.getter(v73, v38);
  v39 = *(_QWORD *)v73;
  v59 = *(_OWORD *)&v73[8];
  sub_10000F7C4(v61, (uint64_t)v6, type metadata accessor for DailyViewAttributes);
  v40 = &v6[*(int *)(v60 + 20)];
  *(_QWORD *)v40 = v39;
  *(_OWORD *)(v40 + 8) = v59;
  v42 = GeometryProxy.size.getter(v41) * 0.5;
  GeometryProxy.size.getter(v43);
  v45 = v44;
  v47 = static Alignment.leading.getter(v46);
  _FrameLayout.init(width:height:alignment:)(v73, *(_QWORD *)&v42, 0, v45, 0, v47, v48);
  sub_10000F7C4((uint64_t)v6, (uint64_t)v9, type metadata accessor for DailyView);
  v49 = &v9[*(int *)(v62 + 36)];
  v50 = *(_OWORD *)&v73[16];
  *(_OWORD *)v49 = *(_OWORD *)v73;
  *((_OWORD *)v49 + 1) = v50;
  *((_OWORD *)v49 + 2) = v74;
  sub_100011894((uint64_t)v6, type metadata accessor for DailyView);
  sub_1000168AC((uint64_t)v9, (uint64_t)v11, &qword_1001C1338);
  sub_1000168D8((uint64_t)v20, (uint64_t)v18, &qword_1001C1340);
  sub_1000168D8((uint64_t)v11, (uint64_t)v9, &qword_1001C1338);
  v51 = v63;
  sub_1000168D8((uint64_t)v18, v63, &qword_1001C1340);
  v52 = sub_100005D40(&qword_1001C1348);
  v53 = v51 + *(int *)(v52 + 48);
  *(_QWORD *)v53 = 0;
  *(_BYTE *)(v53 + 8) = 1;
  *(_QWORD *)(v53 + 16) = v34;
  *(_BYTE *)(v53 + 24) = v15;
  *(_QWORD *)(v53 + 32) = v58;
  *(_BYTE *)(v53 + 40) = v57;
  v54 = v55;
  *(_QWORD *)(v53 + 48) = v56;
  *(_QWORD *)(v53 + 56) = v54;
  sub_1000168D8((uint64_t)v9, v51 + *(int *)(v52 + 64), &qword_1001C1338);
  sub_100016904((uint64_t)v11, &qword_1001C1338);
  sub_100016904((uint64_t)v20, &qword_1001C1340);
  sub_100016904((uint64_t)v9, &qword_1001C1338);
  sub_100016904((uint64_t)v18, &qword_1001C1340);
}

void sub_10007C1FC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55[3];
  __n128 v56[3];
  __int128 v57;
  char v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[3];
  char v65;
  _OWORD v66[3];
  char v67;
  uint64_t v68[7];
  _QWORD v69[3];

  v54 = a2;
  v52 = sub_100005D40(&qword_1001C1398);
  __chkstk_darwin(v52);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100005D40(&qword_1001C13A0);
  __chkstk_darwin(v53);
  v49 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100005D40(&qword_1001C1320);
  __chkstk_darwin(v6);
  v50 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DailyViewAttributes(0);
  __chkstk_darwin(v8);
  v48 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001C1288);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v47 - v14;
  v16 = type metadata accessor for CurrentObservationViewAttributes(0);
  v17 = __chkstk_darwin(v16);
  v51 = (uint64_t)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v47 - v20;
  GeometryProxy.size.getter(v19);
  sub_1000785A4(v55);
  sub_1000168AC((uint64_t)v55, (uint64_t)v68, &qword_1001C12E8);
  v22 = v68[0];
  if (v68[0])
  {
    v69[0] = v68[0];
    sub_100081500(v69);
    sub_1000813D0((uint64_t *)v55);
    v47 = *(_QWORD *)(v22 + 16);
    v23 = sub_100081528(v69);
    GeometryProxy.size.getter(v23);
    sub_1000785A4(v56);
    sub_1000168AC((uint64_t)v56, (uint64_t)v64, &qword_1001C12E8);
    if (*(_QWORD *)&v64[0])
    {
      v66[0] = v64[0];
      v66[1] = v64[1];
      v66[2] = v64[2];
      v67 = v65;
      sub_100078DE0(0, 0xE000000000000000, 1, (uint64_t)v15);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v16) == 1)
      {
        sub_1000813D0((uint64_t *)v56);
        v24 = &qword_1001C1288;
        v25 = (uint64_t)v15;
      }
      else
      {
        v26 = (uint64_t)v15;
        v27 = (uint64_t)v21;
        sub_100011868(v26, (uint64_t)v21, type metadata accessor for CurrentObservationViewAttributes);
        v28 = a1 + *(int *)(type metadata accessor for WidgetContentView(0) + 32);
        v29 = type metadata accessor for ForecastEntry(0);
        sub_100078DE0(*(_QWORD *)(v28 + *(int *)(v29 + 24) + 16), *(_QWORD *)(v28 + *(int *)(v29 + 24) + 24), 1, (uint64_t)v13);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v16) == 1)
        {
          sub_1000813D0((uint64_t *)v56);
          sub_100011894((uint64_t)v21, type metadata accessor for CurrentObservationViewAttributes);
          v24 = &qword_1001C1288;
        }
        else
        {
          v30 = v51;
          sub_100011868((uint64_t)v13, v51, type metadata accessor for CurrentObservationViewAttributes);
          v13 = v50;
          sub_100078258(v47, (uint64_t)v50);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v8) != 1)
          {
            v39 = v48;
            sub_100011868((uint64_t)v13, v48, type metadata accessor for DailyViewAttributes);
            v41 = static HorizontalAlignment.center.getter(v40);
            v42 = (uint64_t)v49;
            *v49 = v41;
            *(_QWORD *)(v42 + 8) = 0;
            *(_BYTE *)(v42 + 16) = 0;
            v43 = sub_100005D40(&qword_1001C13B0);
            sub_10007C76C(v27, a1, v30, v66, v39, v42 + *(int *)(v43 + 44));
            sub_1000168D8(v42, (uint64_t)v4, &qword_1001C13A0);
            swift_storeEnumTagMultiPayload(v4, v52, 0);
            sub_100082DEC((uint64_t)&unk_1001C13A8);
            v45 = v44;
            v46 = sub_10008053C();
            _ConditionalContent<>.init(storage:)(v4, v53, &type metadata for WidgetContentView.GenericErrorView, v45, v46);
            sub_1000813D0((uint64_t *)v56);
            sub_100016904(v42, &qword_1001C13A0);
            sub_100011894(v39, type metadata accessor for DailyViewAttributes);
            sub_100011894(v30, type metadata accessor for CurrentObservationViewAttributes);
            sub_100011894(v27, type metadata accessor for CurrentObservationViewAttributes);
            return;
          }
          sub_1000813D0((uint64_t *)v56);
          sub_100011894(v30, type metadata accessor for CurrentObservationViewAttributes);
          sub_100011894((uint64_t)v21, type metadata accessor for CurrentObservationViewAttributes);
          v24 = &qword_1001C1320;
        }
        v25 = (uint64_t)v13;
      }
      sub_100016904(v25, v24);
    }
  }
  sub_100079168(&v57);
  v31 = v58;
  v32 = v59;
  v33 = v62;
  v34 = v63;
  *(_OWORD *)v4 = v57;
  v4[16] = v31;
  *((_QWORD *)v4 + 3) = v32;
  v35 = v61;
  *((_OWORD *)v4 + 2) = v60;
  *((_OWORD *)v4 + 3) = v35;
  *((_QWORD *)v4 + 8) = v33;
  *((_QWORD *)v4 + 9) = v34;
  swift_storeEnumTagMultiPayload(v4, v52, 1);
  sub_100082DEC((uint64_t)&unk_1001C13A8);
  v37 = v36;
  v38 = sub_10008053C();
  _ConditionalContent<>.init(storage:)(v4, v53, &type metadata for WidgetContentView.GenericErrorView, v37, v38);
}

void sub_10007C76C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t KeyPath;
  uint64_t v83;
  uint64_t *v84;
  _OWORD *v85;
  __int128 v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  __int128 v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v124 = a5;
  v121 = a4;
  v118 = a3;
  *(_QWORD *)&v138 = a2;
  v135 = (char *)a1;
  v130 = a6;
  v123 = type metadata accessor for DailyView(0);
  __chkstk_darwin(v123);
  v125 = (uint64_t)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005D40(&qword_1001C13B8);
  v8 = __chkstk_darwin(v7);
  v129 = (uint64_t)&v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v127 = (uint64_t)&v116 - v10;
  v120 = type metadata accessor for HourlyBannerView(0);
  v11 = __chkstk_darwin(v120);
  v128 = (uint64_t)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v122 = (char *)&v116 - v13;
  v14 = type metadata accessor for DescriptionView(0);
  v15 = __chkstk_darwin(v14);
  v117 = (uint64_t)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v116 = (uint64_t)&v116 - v17;
  v18 = type metadata accessor for Divider(0);
  v133 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100005D40(&qword_1001C1388);
  v21 = __chkstk_darwin(v134);
  v126 = (uint64_t)&v116 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v139 = (char *)&v116 - v24;
  v25 = __chkstk_darwin(v23);
  v132 = (char *)&v116 - v26;
  __chkstk_darwin(v25);
  v140 = (uint64_t)&v116 - v27;
  v28 = type metadata accessor for WidgetContentView(0);
  __chkstk_darwin(v28);
  v30 = (char *)&v116 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100005D40(&qword_1001C13C0);
  v32 = __chkstk_darwin(v31);
  v141 = (uint64_t)&v116 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v137 = (uint64_t)&v116 - v34;
  v35 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v35);
  v37 = (char *)&v116 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for CurrentObservationBannerView(0);
  v39 = __chkstk_darwin(v38);
  v41 = (char *)&v116 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v43 = (char *)&v116 - v42;
  sub_10000F7C4((uint64_t)v135, (uint64_t)v37, type metadata accessor for CurrentObservationViewAttributes);
  v44 = &v41[*(int *)(v38 + 20)];
  *(_QWORD *)v44 = swift_getKeyPath(&unk_10017CFD0);
  v119 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v44, v119, 0);
  v45 = (uint64_t)v37;
  v46 = v138;
  sub_100011868(v45, (uint64_t)v41, type metadata accessor for CurrentObservationViewAttributes);
  v136 = v41;
  v135 = v43;
  sub_100011868((uint64_t)v41, (uint64_t)v43, type metadata accessor for CurrentObservationBannerView);
  v131 = v28;
  v47 = v46 + *(int *)(v28 + 32);
  v48 = type metadata accessor for ForecastEntry(0);
  v49 = *(unsigned __int8 *)(v47 + *(int *)(v48 + 24) + 48);
  if ((v49 - 3) < 2)
  {
    sub_10000F7C4(v46, (uint64_t)v30, type metadata accessor for WidgetContentView);
LABEL_4:
    sub_100011894((uint64_t)v30, type metadata accessor for WidgetContentView);
    v51 = v140;
    v52 = v134;
    v53 = v133;
    v54 = v20;
    goto LABEL_5;
  }
  v50 = v48;
  sub_10000F7C4(v46, (uint64_t)v30, type metadata accessor for WidgetContentView);
  if (v49 == 5)
    goto LABEL_4;
  v112 = v30[*(int *)(v131 + 32) + 48 + (uint64_t)*(int *)(v50 + 24)];
  sub_100011894((uint64_t)v30, type metadata accessor for WidgetContentView);
  v51 = v140;
  v52 = v134;
  v53 = v133;
  v54 = v20;
  if (v112 != 2)
  {
    v113 = sub_100005D40(&qword_1001C13C8);
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v137, 1, 1, v113);
    v70 = v18;
    v64 = v54;
    goto LABEL_6;
  }
LABEL_5:
  v55 = ((uint64_t (*)(void))Divider.init())();
  v56 = static Color.white.getter(v55);
  v57 = Color.opacity(_:)(0.45);
  v58 = swift_release(v56);
  LOBYTE(v56) = static Edge.Set.all.getter(v58);
  v59 = (uint64_t)v132;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v132, v54, v18);
  v60 = v59 + *(int *)(v52 + 36);
  *(_QWORD *)v60 = v57;
  *(_BYTE *)(v60 + 8) = v56;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v18);
  sub_1000168AC(v59, v51, &qword_1001C1388);
  v61 = v116;
  sub_10000F7C4(v118, v116, type metadata accessor for CurrentObservationViewAttributes);
  sub_1000168D8(v51, v59, &qword_1001C1388);
  v62 = v117;
  sub_10000F7C4(v61, v117, type metadata accessor for DescriptionView);
  v63 = v18;
  v64 = v54;
  v65 = v141;
  sub_1000168D8(v59, v141, &qword_1001C1388);
  v66 = (int *)sub_100005D40(&qword_1001C13D0);
  v67 = v65 + v66[12];
  *(_QWORD *)v67 = 0x4018000000000000;
  *(_BYTE *)(v67 + 8) = 0;
  sub_10000F7C4(v62, v65 + v66[16], type metadata accessor for DescriptionView);
  v68 = v65 + v66[20];
  *(_QWORD *)v68 = 0x4018000000000000;
  v51 = v140;
  *(_BYTE *)(v68 + 8) = 0;
  v69 = v61;
  v70 = v63;
  sub_100011894(v69, type metadata accessor for DescriptionView);
  sub_100016904(v51, &qword_1001C1388);
  v71 = v62;
  v52 = v134;
  sub_100011894(v71, type metadata accessor for DescriptionView);
  v53 = v133;
  sub_100016904(v59, &qword_1001C1388);
  v72 = sub_100005D40(&qword_1001C13C8);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v65, 0, 1, v72);
  sub_1000168AC(v65, v137, &qword_1001C13C0);
LABEL_6:
  v73 = ((uint64_t (*)(void))Divider.init())();
  v74 = static Color.white.getter(v73);
  v75 = Color.opacity(_:)(0.45);
  v76 = swift_release(v74);
  LOBYTE(v74) = static Edge.Set.all.getter(v76);
  v77 = v53;
  v78 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
  v79 = (uint64_t)v132;
  v78(v132, v64, v70);
  v80 = v79 + *(int *)(v52 + 36);
  *(_QWORD *)v80 = v75;
  *(_BYTE *)(v80 + 8) = v74;
  v81 = *(void (**)(char *, uint64_t))(v77 + 8);
  v81(v64, v70);
  sub_1000168AC(v79, v51, &qword_1001C1388);
  KeyPath = swift_getKeyPath(&unk_10017CFD0);
  v83 = (uint64_t)v122;
  v84 = (uint64_t *)&v122[*(int *)(v120 + 20)];
  *v84 = KeyPath;
  swift_storeEnumTagMultiPayload(v84, v119, 0);
  v85 = v121;
  v86 = v121[1];
  *(_OWORD *)v83 = *v121;
  *(_OWORD *)(v83 + 16) = v86;
  *(_OWORD *)(v83 + 32) = v85[2];
  *(_BYTE *)(v83 + 48) = *((_BYTE *)v85 + 48);
  v87 = sub_1000814B0(v85);
  v88 = Divider.init()(v87);
  v89 = static Color.white.getter(v88);
  v90 = Color.opacity(_:)(0.45);
  v91 = swift_release(v89);
  LOBYTE(v89) = static Edge.Set.all.getter(v91);
  v92 = (uint64_t)v139;
  v78(v139, v64, v70);
  v93 = v92 + *(int *)(v52 + 36);
  *(_QWORD *)v93 = v90;
  *(_BYTE *)(v93 + 8) = v89;
  v81(v64, v70);
  sub_1000168AC(v92, v79, &qword_1001C1388);
  v94 = (uint64_t *)(v138 + *(int *)(v131 + 36));
  v96 = *v94;
  v95 = v94[1];
  v157 = v96;
  v158 = v95;
  v97 = sub_100005D40(&qword_1001C10E8);
  State.projectedValue.getter(&v148, v97);
  v98 = v148;
  v138 = v149;
  v99 = v125;
  sub_10000F7C4(v124, v125, type metadata accessor for DailyViewAttributes);
  v100 = v99 + *(int *)(v123 + 20);
  *(_QWORD *)v100 = v98;
  *(_OWORD *)(v100 + 8) = v138;
  v102 = static Alignment.center.getter(v101);
  LOBYTE(v115) = 0;
  LOBYTE(v114) = 1;
  v103 = v129;
  sub_100077B04(0, v129, 0, v114, 0x4063000000000000, v115, v102, v104, type metadata accessor for DailyView, &qword_1001C13B8);
  sub_100011894(v99, type metadata accessor for DailyView);
  v105 = v127;
  sub_1000168AC(v103, v127, &qword_1001C13B8);
  v106 = (uint64_t)v136;
  sub_10000F7C4((uint64_t)v135, (uint64_t)v136, type metadata accessor for CurrentObservationBannerView);
  v157 = 0x4028000000000000;
  LOBYTE(v158) = 0;
  v148 = v106;
  *(_QWORD *)&v149 = &v157;
  v107 = v137;
  v108 = v141;
  sub_1000168D8(v137, v141, &qword_1001C13C0);
  *((_QWORD *)&v149 + 1) = v108;
  v109 = v140;
  sub_1000168D8(v140, v92, &qword_1001C1388);
  v146 = 0x4018000000000000;
  v147 = 0;
  v150 = v92;
  v151 = &v146;
  v110 = v128;
  sub_10000F7C4(v83, v128, type metadata accessor for HourlyBannerView);
  v144 = 0x4018000000000000;
  v145 = 0;
  v152 = v110;
  v153 = &v144;
  v111 = v126;
  sub_1000168D8(v79, v126, &qword_1001C1388);
  v142 = 0x4018000000000000;
  v143 = 0;
  v154 = v111;
  v155 = &v142;
  sub_1000168D8(v105, v103, &qword_1001C13B8);
  v156 = v103;
  sub_1000774A8(&v148, v130);
  sub_100016904(v105, &qword_1001C13B8);
  sub_100016904(v79, &qword_1001C1388);
  sub_100011894(v83, type metadata accessor for HourlyBannerView);
  sub_100016904(v109, &qword_1001C1388);
  sub_100016904(v107, &qword_1001C13C0);
  sub_100011894((uint64_t)v135, type metadata accessor for CurrentObservationBannerView);
  sub_100016904(v103, &qword_1001C13B8);
  sub_100016904(v111, &qword_1001C1388);
  sub_100011894(v110, type metadata accessor for HourlyBannerView);
  sub_100016904((uint64_t)v139, &qword_1001C1388);
  sub_100016904(v141, &qword_1001C13C0);
  sub_100011894((uint64_t)v136, type metadata accessor for CurrentObservationBannerView);
}

void sub_10007D304(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30[3];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[3];
  char v38;

  v29 = a2;
  v3 = sub_100005D40(&qword_1001C1350);
  __chkstk_darwin(v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005D40(&qword_1001C1358);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001C1288);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100078DE0(0, 0xE000000000000000, 1, (uint64_t)v11);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v11, 1, v12) == 1)
  {
    sub_100016904((uint64_t)v11, &qword_1001C1288);
  }
  else
  {
    sub_100011868((uint64_t)v11, (uint64_t)v14, type metadata accessor for CurrentObservationViewAttributes);
    GeometryProxy.size.getter(v15);
    sub_1000785A4(v30);
    sub_1000168AC((uint64_t)v30, (uint64_t)v37, &qword_1001C12E8);
    if (*(_QWORD *)&v37[0])
    {
      v31 = v37[0];
      v32 = v37[1];
      v33 = v37[2];
      LOBYTE(v34) = v38;
      *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v16);
      *((_QWORD *)v8 + 1) = 0;
      v8[16] = 1;
      v17 = sub_100005D40(&qword_1001C1368);
      sub_10007D648((uint64_t)v14, a1, &v31, (uint64_t)&v8[*(int *)(v17 + 44)]);
      sub_1000168D8((uint64_t)v8, (uint64_t)v5, &qword_1001C1358);
      swift_storeEnumTagMultiPayload(v5, v3, 0);
      sub_100082DEC((uint64_t)&unk_1001C1360);
      v19 = v18;
      v20 = sub_10008053C();
      _ConditionalContent<>.init(storage:)(v5, v6, &type metadata for WidgetContentView.GenericErrorView, v19, v20);
      sub_1000813D0((uint64_t *)v30);
      sub_100016904((uint64_t)v8, &qword_1001C1358);
      sub_100011894((uint64_t)v14, type metadata accessor for CurrentObservationViewAttributes);
      return;
    }
    sub_100011894((uint64_t)v14, type metadata accessor for CurrentObservationViewAttributes);
  }
  sub_100079168(&v31);
  v21 = v32;
  v22 = *((_QWORD *)&v32 + 1);
  v23 = v35;
  v24 = v36;
  *(_OWORD *)v5 = v31;
  v5[16] = v21;
  *((_QWORD *)v5 + 3) = v22;
  v25 = v34;
  *((_OWORD *)v5 + 2) = v33;
  *((_OWORD *)v5 + 3) = v25;
  *((_QWORD *)v5 + 8) = v23;
  *((_QWORD *)v5 + 9) = v24;
  swift_storeEnumTagMultiPayload(v5, v3, 1);
  sub_100082DEC((uint64_t)&unk_1001C1360);
  v27 = v26;
  v28 = sub_10008053C();
  _ConditionalContent<>.init(storage:)(v5, v6, &type metadata for WidgetContentView.GenericErrorView, v27, v28);
}

void sub_10007D648(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;

  v41 = a3;
  v42 = a4;
  v6 = sub_100005D40(&qword_1001C1370);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v37 - v10;
  v12 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CurrentObservationBannerView(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v37 - v19;
  sub_10000F7C4(a1, (uint64_t)v14, type metadata accessor for CurrentObservationViewAttributes);
  v21 = &v18[*(int *)(v15 + 20)];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_10017CFD0);
  v22 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  sub_100011868((uint64_t)v14, (uint64_t)v18, type metadata accessor for CurrentObservationViewAttributes);
  sub_100011868((uint64_t)v18, (uint64_t)v20, type metadata accessor for CurrentObservationBannerView);
  v23 = type metadata accessor for WidgetContentView(0);
  v24 = a2;
  if (*(_BYTE *)(a2 + *(int *)(v23 + 40)))
    v25 = 0x4034000000000000;
  else
    v25 = 0x402E000000000000;
  v26 = static Alignment.center.getter(v23);
  v28 = _FrameLayout.init(width:height:alignment:)(&v43, 0, 1, v25, 0, v26, v27);
  v40 = v43;
  v29 = v44;
  v30 = v45;
  v39 = v46;
  v31 = v47;
  v38 = v48;
  *(_QWORD *)v11 = static HorizontalAlignment.leading.getter(v28);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 0;
  v32 = sub_100005D40(&qword_1001C1378);
  sub_10007D93C(v24, v41, (uint64_t)&v11[*(int *)(v32 + 44)]);
  sub_10000F7C4((uint64_t)v20, (uint64_t)v18, type metadata accessor for CurrentObservationBannerView);
  sub_1000168D8((uint64_t)v11, (uint64_t)v9, &qword_1001C1370);
  v33 = v42;
  sub_10000F7C4((uint64_t)v18, v42, type metadata accessor for CurrentObservationBannerView);
  v34 = sub_100005D40(&qword_1001C1380);
  v35 = v33 + *(int *)(v34 + 48);
  *(_QWORD *)v35 = 0;
  *(_BYTE *)(v35 + 8) = 1;
  *(_QWORD *)(v35 + 16) = v40;
  *(_BYTE *)(v35 + 24) = v29;
  *(_QWORD *)(v35 + 32) = v30;
  *(_BYTE *)(v35 + 40) = v39;
  v36 = v38;
  *(_QWORD *)(v35 + 48) = v31;
  *(_QWORD *)(v35 + 56) = v36;
  sub_1000168D8((uint64_t)v9, v33 + *(int *)(v34 + 64), &qword_1001C1370);
  sub_100016904((uint64_t)v11, &qword_1001C1370);
  sub_100011894((uint64_t)v20, type metadata accessor for CurrentObservationBannerView);
  sub_100016904((uint64_t)v9, &qword_1001C1370);
  sub_100011894((uint64_t)v18, type metadata accessor for CurrentObservationBannerView);
}

void sub_10007D93C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[7];
  uint64_t v111;
  unsigned __int8 v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  uint64_t v119;
  unsigned __int8 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 v124;
  uint64_t v125;
  unsigned __int8 v126;
  uint64_t v127;
  uint64_t v128;

  v81 = a2;
  v79 = a3;
  v77 = type metadata accessor for HourlyBannerView(0);
  v4 = __chkstk_darwin(v77);
  v78 = (uint64_t)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v54 - v6;
  v8 = type metadata accessor for Divider(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001C1388);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v54 - v16;
  v18 = type metadata accessor for PrecipitationChartView(0);
  v19 = __chkstk_darwin(v18);
  v80 = (uint64_t)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v54 - v21;
  v76 = (uint64_t)&v54 - v21;
  v23 = type metadata accessor for WidgetContentView(0);
  sub_10000F7C4(a1 + *(int *)(v23 + 32), (uint64_t)v22, type metadata accessor for ForecastEntry);
  v25 = static Alignment.center.getter(v24);
  _FrameLayout.init(width:height:alignment:)(&v111, 0, 1, 0x4018000000000000, 0, v25, v26);
  v75 = v111;
  v74 = v112;
  v73 = v113;
  v72 = v114;
  v70 = v116;
  v71 = v115;
  v69 = sub_1000788F0();
  v66 = v27;
  v67 = v28;
  v68 = v29;
  v30 = static Alignment.center.getter(v69);
  v32 = _FrameLayout.init(width:height:alignment:)(&v117, 0, 1, 0x4028000000000000, 0, v30, v31);
  v65 = v117;
  v64 = v118;
  v63 = v119;
  v62 = v120;
  v60 = v122;
  v61 = v121;
  v33 = Divider.init()(v32);
  v34 = static Color.white.getter(v33);
  v35 = Color.opacity(_:)(0.45);
  v36 = swift_release(v34);
  LOBYTE(v34) = static Edge.Set.all.getter(v36);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v15, v11, v8);
  v37 = &v15[*(int *)(v12 + 36)];
  *(_QWORD *)v37 = v35;
  v37[8] = v34;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v38 = (uint64_t)v17;
  sub_1000168AC((uint64_t)v15, (uint64_t)v17, &qword_1001C1388);
  v40 = static Alignment.center.getter(v39);
  _FrameLayout.init(width:height:alignment:)(&v123, 0, 1, 0x4028000000000000, 0, v40, v41);
  v42 = v123;
  v59 = v124;
  v58 = v125;
  v57 = v126;
  v55 = v128;
  v56 = v127;
  KeyPath = swift_getKeyPath(&unk_10017CFD0);
  v44 = (uint64_t *)&v7[*(int *)(v77 + 20)];
  *v44 = KeyPath;
  v45 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v44, v45, 0);
  v47 = v80;
  v46 = v81;
  v48 = *((_OWORD *)v81 + 1);
  *(_OWORD *)v7 = *(_OWORD *)v81;
  *((_OWORD *)v7 + 1) = v48;
  *((_OWORD *)v7 + 2) = *((_OWORD *)v46 + 2);
  v7[48] = *((_BYTE *)v46 + 48);
  v49 = v76;
  sub_10000F7C4(v76, v47, type metadata accessor for PrecipitationChartView);
  v102 = 0;
  v103 = 1;
  v104 = v75;
  v105 = v74;
  v106 = v73;
  v107 = v72;
  v108 = v71;
  v109 = v70;
  v110[0] = v47;
  v110[1] = (uint64_t)&v102;
  v50 = v66;
  v51 = v67;
  v98 = v69;
  v99 = v66;
  v100 = v67;
  v101 = v68 & 1;
  v90 = 0;
  v91 = 1;
  v92 = v65;
  v93 = v64;
  v94 = v63;
  v95 = v62;
  v96 = v61;
  v97 = v60;
  v110[2] = (uint64_t)&v98;
  v110[3] = (uint64_t)&v90;
  sub_1000168D8(v38, (uint64_t)v15, &qword_1001C1388);
  v82 = 0;
  v83 = 1;
  v84 = v42;
  v85 = v59;
  v86 = v58;
  v87 = v57;
  v88 = v56;
  v89 = v55;
  v110[4] = (uint64_t)v15;
  v110[5] = (uint64_t)&v82;
  v52 = v78;
  sub_10000F7C4((uint64_t)v7, v78, type metadata accessor for HourlyBannerView);
  v110[6] = v52;
  sub_1000775CC(v110, v79);
  sub_1000814B0(v81);
  swift_bridgeObjectRetain(v50);
  swift_retain(v51);
  sub_100011894((uint64_t)v7, type metadata accessor for HourlyBannerView);
  sub_100016904(v38, &qword_1001C1388);
  swift_release(v51);
  swift_bridgeObjectRelease(v50);
  sub_100011894(v49, type metadata accessor for PrecipitationChartView);
  sub_100011894(v52, type metadata accessor for HourlyBannerView);
  sub_100016904((uint64_t)v15, &qword_1001C1388);
  v53 = v99;
  swift_release(v100);
  swift_bridgeObjectRelease(v53);
  sub_100011894(v80, type metadata accessor for PrecipitationChartView);
}

void sub_10007DE74(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t OpaqueTypeConformance2;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (**v65)(uint64_t *);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[5];

  v3 = type metadata accessor for ContainerBackgroundPlacement(0);
  v79 = *(_QWORD *)(v3 - 8);
  v80 = v3;
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_1000230E0();
  v69 = v5;
  v6 = type metadata accessor for WidgetContentView(0);
  v81 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v82 = v8;
  v83 = (uint64_t)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v66 - v9;
  sub_100005D40(&qword_1001C10A0);
  sub_100029068();
  __chkstk_darwin(v11);
  sub_10002325C();
  v14 = (_QWORD *)(v13 - v12);
  v15 = sub_100005D40(&qword_1001C10A8);
  sub_100029068();
  __chkstk_darwin(v16);
  sub_1000230E0();
  v18 = v17;
  v73 = sub_100005D40(&qword_1001C10B0);
  v71 = *(_QWORD *)(v73 - 8);
  sub_1000230F4();
  __chkstk_darwin(v19);
  sub_1000230E0();
  v70 = v20;
  v78 = sub_100005D40(&qword_1001C10B8);
  v76 = *(_QWORD *)(v78 - 8);
  sub_1000230F4();
  __chkstk_darwin(v21);
  sub_1000830D4(v22, v66);
  v72 = sub_100005D40(&qword_1001C10C0);
  sub_100029068();
  __chkstk_darwin(v23);
  sub_1000230E0();
  v74 = v24;
  *v14 = static Alignment.leading.getter(v25);
  v14[1] = v26;
  v27 = sub_100005D40(&qword_1001C10C8);
  sub_10007E350(v1, (uint64_t)v14 + *(int *)(v27 + 44));
  v28 = v1 + *(int *)(v6 + 24);
  v29 = *(_QWORD *)v28;
  v30 = *(_BYTE *)(v28 + 8);
  sub_10001961C(*(_QWORD *)v28, v30);
  v31 = sub_1000C5274(v29, v30);
  sub_100019A78(v29, v30);
  v32 = v1;
  sub_10000F7C4(v1, (uint64_t)v10, type metadata accessor for WidgetContentView);
  v84 = a1;
  v77 = v6;
  if ((v31 & 1) == 0)
  {
    sub_100011894((uint64_t)v10, type metadata accessor for WidgetContentView);
    goto LABEL_5;
  }
  v33 = *(int *)(v6 + 32);
  v34 = v33 + *(int *)(sub_10008307C() + 24);
  LOBYTE(v34) = v10[v34 + 8 + *(int *)(sub_100083198() + 44)];
  sub_100011894((uint64_t)v10, type metadata accessor for WidgetContentView);
  if ((v34 & 1) == 0)
  {
LABEL_5:
    v37 = static Color.clear.getter(v35);
    goto LABEL_6;
  }
  v36 = static Color.black.getter();
  v37 = Color.opacity(_:)(0.3);
  swift_release(v36);
LABEL_6:
  v38 = v18;
  sub_1000168D8((uint64_t)v14, v18, &qword_1001C10A0);
  v68 = v15;
  v39 = v18 + *(int *)(v15 + 36);
  *(_QWORD *)v39 = v37;
  *(_OWORD *)(v39 + 8) = xmmword_10017CEB0;
  *(_QWORD *)(v39 + 24) = 0x4000000000000000;
  sub_100016904((uint64_t)v14, &qword_1001C10A0);
  v40 = v69;
  v41 = static ContainerBackgroundPlacement.widget.getter();
  v42 = __chkstk_darwin(v41);
  v67 = v32;
  v43 = static Alignment.center.getter(v42);
  v45 = v44;
  v46 = type metadata accessor for BackgroundView(0);
  v47 = sub_10008045C();
  sub_10008070C((uint64_t)&unk_1001C10E0);
  v49 = v48;
  v50 = v70;
  v51 = v43;
  v52 = v68;
  View.containerBackground<A>(for:alignment:content:)(v40, v51, v45, sub_100080440, &v66 - 4, v68, v46, v47, v48);
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v40, v80);
  sub_100016904(v38, &qword_1001C10A8);
  v53 = v67;
  v54 = v67 + *(int *)(v77 + 32);
  v55 = *(int *)(sub_10008307C() + 24);
  v56 = v54 + v55 + *(int *)(sub_100083198() + 40);
  v85[0] = v52;
  v85[1] = v46;
  v85[2] = v47;
  v85[3] = v49;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v85, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v58 = v75;
  View.widgetURL(_:)(v56, v73, OpaqueTypeConformance2);
  sub_100083168(v50, *(uint64_t (**)(uint64_t, uint64_t))(v71 + 8));
  v59 = v83;
  sub_10000F7C4(v53, v83, type metadata accessor for WidgetContentView);
  v60 = *(unsigned __int8 *)(v81 + 80);
  v61 = (v60 + 16) & ~v60;
  v62 = swift_allocObject(&unk_1001B61B8, v61 + v82, v60 | 7);
  sub_100011868(v59, v62 + v61, type metadata accessor for WidgetContentView);
  v63 = v76;
  v64 = v74;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v74, v58, v78);
  v65 = (void (**)(uint64_t *))(v64 + *(int *)(v72 + 36));
  *v65 = sub_1000804E4;
  v65[1] = (void (*)(uint64_t *))v62;
  sub_100083168(v58, *(uint64_t (**)(uint64_t, uint64_t))(v63 + 8));
  sub_1000168AC(v64, v84, &qword_1001C10C0);
  sub_10001C770();
}

void sub_10007E350(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v35;
  uint64_t (**v36)(uint64_t);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  _OWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (**v74)(uint64_t);
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _OWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  BOOL v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  _OWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  char v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  _OWORD *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t (**v153)(uint64_t);
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  __int16 v170;
  __int128 v171;
  char v172;
  char v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;

  v167 = a2;
  v148 = sub_100005D40(&qword_1001C10F0);
  __chkstk_darwin(v148);
  v146 = (uint64_t)&v142 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100005D40(&qword_1001C10F8);
  __chkstk_darwin(v147);
  v150 = (char *)&v142 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100005D40(&qword_1001C1100);
  __chkstk_darwin(v149);
  v145 = (uint64_t)&v142 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_100005D40(&qword_1001C1108);
  __chkstk_darwin(v166);
  v159 = (char *)&v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WidgetContentView(0);
  v154 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v155 = v8;
  v158 = (char *)&v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_100005D40(&qword_1001C1110);
  __chkstk_darwin(v151);
  v153 = (uint64_t (**)(uint64_t))((char *)&v142 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v152 = sub_100005D40(&qword_1001C1118);
  __chkstk_darwin(v152);
  v157 = (char *)&v142 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_100005D40(&qword_1001C1120);
  __chkstk_darwin(v160);
  v156 = (char *)&v142 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100005D40(&qword_1001C1128);
  __chkstk_darwin(v164);
  v168 = (uint64_t)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100005D40(&qword_1001C1130);
  __chkstk_darwin(v161);
  v163 = (_OWORD *)((char *)&v142 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_100005D40(&qword_1001C1138);
  __chkstk_darwin(v14);
  v16 = (char *)&v142 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_100005D40(&qword_1001C1140);
  __chkstk_darwin(v162);
  v18 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100005D40(&qword_1001C1148);
  __chkstk_darwin(v165);
  v20 = (char *)&v142 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v142 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1;
  v25 = a1 + *(int *)(v7 + 32);
  v26 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v25 + *(int *)(v26 + 28), (uint64_t)v23, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v23, v21) != 1)
  {
    sub_100079168(&v171);
    v40 = v172;
    v41 = v174;
    v42 = v177;
    v43 = v178;
    *(_OWORD *)v16 = v171;
    v16[16] = v40;
    *((_QWORD *)v16 + 3) = v41;
    v44 = v176;
    *((_OWORD *)v16 + 2) = v175;
    *((_OWORD *)v16 + 3) = v44;
    *((_QWORD *)v16 + 8) = v42;
    *((_QWORD *)v16 + 9) = v43;
    swift_storeEnumTagMultiPayload(v16, v14, 0);
    sub_100082140((uint64_t)&v171);
    v45 = sub_10008053C();
    v46 = sub_100080578();
    _ConditionalContent<>.init(storage:)(v16, &type metadata for WidgetContentView.GenericErrorView, v160, v45, v46);
    v47 = v163;
    sub_1000168D8((uint64_t)v18, (uint64_t)v163, &qword_1001C1140);
    swift_storeEnumTagMultiPayload(v47, v161, 0);
    v48 = sub_100005D40(&qword_1001C11B0);
    v49 = sub_1000807C0();
    v50 = sub_1000807E4();
    _ConditionalContent<>.init(storage:)(v47, v162, v48, v49, v50);
    sub_100016904((uint64_t)v18, &qword_1001C1140);
    v51 = v168;
    sub_1000168D8((uint64_t)v20, v168, &qword_1001C1148);
    swift_storeEnumTagMultiPayload(v51, v164, 0);
    v52 = sub_10008061C((uint64_t)&unk_1001C1208);
    v53 = sub_10008061C((uint64_t)&unk_1001C1210);
    _ConditionalContent<>.init(storage:)(v51, v165, v166, v52, v53);
    sub_100016904((uint64_t)v20, &qword_1001C1148);
    sub_100080B68((uint64_t)&v171);
    return;
  }
  v27 = (uint64_t)v157;
  v143 = v14;
  v28 = (uint64_t)v158;
  v29 = (uint64_t)v159;
  v144 = v20;
  v30 = v168;
  sub_100011894((uint64_t)v23, type metadata accessor for ForecastEntry.Model);
  if (sub_100077D98())
  {
    v31 = v25 + *(int *)(v26 + 24);
    v32 = *(unsigned __int8 *)(v31 + 48);
    v33 = *(unsigned __int8 *)(v31 + 49);
    if (v32 == 6 || v33 == 6)
    {
      v35 = v27;
      sub_10007AD5C(v27);
      v36 = v153;
      sub_1000168D8(v27, (uint64_t)v153, &qword_1001C1118);
      swift_storeEnumTagMultiPayload(v36, v151, 0);
      v37 = sub_100005D40(&qword_1001C11A8);
      v38 = sub_10008061C((uint64_t)&unk_1001C1160);
      sub_100082DEC((uint64_t)&unk_1001C11A0);
      v77 = (uint64_t)v156;
      _ConditionalContent<>.init(storage:)(v36, v152, v37, v38, v39);
      sub_100016904(v35, &qword_1001C1118);
    }
    else
    {
      sub_10000F7C4(v24, v28, type metadata accessor for WidgetContentView);
      v71 = *(unsigned __int8 *)(v154 + 80);
      v72 = (v71 + 16) & ~v71;
      v73 = swift_allocObject(&unk_1001B6258, v72 + v155, v71 | 7);
      sub_100011868(v28, v73 + v72, type metadata accessor for WidgetContentView);
      v74 = v153;
      *v153 = sub_10008133C;
      v74[1] = (uint64_t (*)(uint64_t))v73;
      swift_storeEnumTagMultiPayload(v74, v151, 1);
      v75 = sub_100005D40(&qword_1001C11A8);
      v76 = sub_10008061C((uint64_t)&unk_1001C1160);
      sub_100082DEC((uint64_t)&unk_1001C11A0);
      v77 = (uint64_t)v156;
      _ConditionalContent<>.init(storage:)(v74, v152, v75, v76, v78);
    }
    v79 = v164;
    v80 = v161;
    v81 = (uint64_t)v18;
    v82 = v160;
    v83 = v143;
    sub_1000168D8(v77, (uint64_t)v16, &qword_1001C1120);
    swift_storeEnumTagMultiPayload(v16, v83, 1);
    v84 = sub_10008053C();
    v85 = sub_100080578();
    _ConditionalContent<>.init(storage:)(v16, &type metadata for WidgetContentView.GenericErrorView, v82, v84, v85);
    v86 = v163;
    sub_1000168D8((uint64_t)v18, (uint64_t)v163, &qword_1001C1140);
    swift_storeEnumTagMultiPayload(v86, v80, 0);
    v87 = sub_100005D40(&qword_1001C11B0);
    v88 = sub_1000807C0();
    v89 = sub_1000807E4();
    v90 = (uint64_t)v144;
    _ConditionalContent<>.init(storage:)(v86, v162, v87, v88, v89);
    sub_100016904(v81, &qword_1001C1140);
    sub_1000168D8(v90, v30, &qword_1001C1148);
    swift_storeEnumTagMultiPayload(v30, v79, 0);
    v91 = sub_10008061C((uint64_t)&unk_1001C1208);
    v92 = sub_10008061C((uint64_t)&unk_1001C1210);
    _ConditionalContent<>.init(storage:)(v30, v165, v166, v91, v92);
    sub_100016904(v90, &qword_1001C1148);
    v93 = (uint64_t)v156;
    v94 = &qword_1001C1120;
  }
  else
  {
    if (sub_100077F68())
    {
      sub_10000F7C4(v24, v28, type metadata accessor for WidgetContentView);
      v54 = *(unsigned __int8 *)(v154 + 80);
      v55 = (v54 + 16) & ~v54;
      v56 = swift_allocObject(&unk_1001B6230, v55 + v155, v54 | 7);
      sub_100011868(v28, v56 + v55, type metadata accessor for WidgetContentView);
      *(_QWORD *)&v169 = sub_10008132C;
      *((_QWORD *)&v169 + 1) = v56;
      v170 = 0;
      swift_retain(v56);
      v57 = sub_100005D40(&qword_1001C11D0);
      v58 = sub_100005D40(&qword_1001C11E0);
      sub_100082DEC((uint64_t)&unk_1001C11C8);
      v60 = v59;
      v61 = sub_100080868();
      _ConditionalContent<>.init(storage:)(&v169, v57, v58, v60, v61);
      v62 = v172;
      v63 = v173;
      v64 = v163;
      *v163 = v171;
      *((_BYTE *)v64 + 16) = v62;
      *((_BYTE *)v64 + 17) = v63;
      swift_storeEnumTagMultiPayload(v64, v161, 1);
      v65 = sub_100005D40(&qword_1001C11B0);
      v66 = sub_1000807C0();
      v67 = sub_1000807E4();
      v68 = (uint64_t)v144;
      _ConditionalContent<>.init(storage:)(v64, v162, v65, v66, v67);
      sub_1000168D8(v68, v30, &qword_1001C1148);
      swift_storeEnumTagMultiPayload(v30, v164, 0);
      v69 = sub_10008061C((uint64_t)&unk_1001C1208);
      v70 = sub_10008061C((uint64_t)&unk_1001C1210);
      _ConditionalContent<>.init(storage:)(v30, v165, v166, v69, v70);
      sub_100016904(v68, &qword_1001C1148);
      swift_release(v56);
      return;
    }
    v95 = sub_100078138();
    v96 = v25 + *(int *)(v26 + 24);
    v97 = *(unsigned __int8 *)(v96 + 48);
    if (v95)
    {
      v98 = *(unsigned __int8 *)(v96 + 49);
      sub_10000F7C4(v24, v28, type metadata accessor for WidgetContentView);
      v99 = *(unsigned __int8 *)(v154 + 80);
      v100 = (v99 + 16) & ~v99;
      v101 = v100 + v155;
      v102 = v99 | 7;
      v103 = v97 == 6 || v98 == 6;
      v104 = v163;
      if (v103)
      {
        v105 = swift_allocObject(&unk_1001B6208, v101, v102);
        sub_100011868(v28, v105 + v100, type metadata accessor for WidgetContentView);
        *(_QWORD *)&v169 = sub_1000812D8;
        *((_QWORD *)&v169 + 1) = v105;
        LOBYTE(v170) = 0;
      }
      else
      {
        v117 = swift_allocObject(&unk_1001B61E0, v101, v102);
        sub_100011868(v28, v117 + v100, type metadata accessor for WidgetContentView);
        *(_QWORD *)&v169 = sub_1000812B8;
        *((_QWORD *)&v169 + 1) = v117;
        LOBYTE(v170) = 1;
      }
      v118 = sub_100005D40(&qword_1001C11F0);
      v119 = sub_100005D40(&qword_1001C1200);
      sub_100082DEC((uint64_t)&unk_1001C11E8);
      v121 = v120;
      sub_100082DEC((uint64_t)&unk_1001C11F8);
      _ConditionalContent<>.init(storage:)(&v169, v118, v119, v121, v122);
      v123 = v171;
      v169 = v171;
      LOBYTE(v170) = v172;
      HIBYTE(v170) = 1;
      sub_1000812C4(v171, *((uint64_t *)&v171 + 1));
      v124 = sub_100005D40(&qword_1001C11D0);
      v125 = sub_100005D40(&qword_1001C11E0);
      sub_100082DEC((uint64_t)&unk_1001C11C8);
      v127 = v126;
      v128 = sub_100080868();
      _ConditionalContent<>.init(storage:)(&v169, v124, v125, v127, v128);
      v129 = v172;
      v130 = v173;
      *v104 = v171;
      *((_BYTE *)v104 + 16) = v129;
      *((_BYTE *)v104 + 17) = v130;
      swift_storeEnumTagMultiPayload(v104, v161, 1);
      v131 = sub_100005D40(&qword_1001C11B0);
      v132 = sub_1000807C0();
      v133 = sub_1000807E4();
      v134 = v104;
      v135 = (uint64_t)v144;
      _ConditionalContent<>.init(storage:)(v134, v162, v131, v132, v133);
      sub_1000168D8(v135, v30, &qword_1001C1148);
      swift_storeEnumTagMultiPayload(v30, v164, 0);
      v136 = sub_10008061C((uint64_t)&unk_1001C1208);
      v137 = sub_10008061C((uint64_t)&unk_1001C1210);
      _ConditionalContent<>.init(storage:)(v30, v165, v166, v136, v137);
      sub_1000812CC(v123, *((uint64_t *)&v123 + 1));
      v93 = v135;
      v94 = &qword_1001C1148;
    }
    else
    {
      v106 = v24;
      v107 = v30;
      v108 = v148;
      v109 = (uint64_t)v150;
      v110 = v149;
      v111 = v147;
      if (v97 == 6)
      {
        v112 = v145;
        sub_100079878(v106, v145);
        v113 = &qword_1001C1100;
        sub_1000168D8(v112, v109, &qword_1001C1100);
        v114 = v109;
        v115 = v111;
        v116 = 0;
      }
      else
      {
        v112 = v146;
        sub_100079538(v146);
        v113 = &qword_1001C10F0;
        sub_1000168D8(v112, v109, &qword_1001C10F0);
        v114 = v109;
        v115 = v111;
        v116 = 1;
      }
      swift_storeEnumTagMultiPayload(v114, v115, v116);
      v138 = sub_10008090C();
      v139 = sub_100080A60();
      _ConditionalContent<>.init(storage:)(v109, v110, v108, v138, v139);
      sub_100016904(v112, v113);
      sub_1000168D8(v29, v107, &qword_1001C1108);
      swift_storeEnumTagMultiPayload(v107, v164, 1);
      v140 = sub_10008061C((uint64_t)&unk_1001C1208);
      v141 = sub_10008061C((uint64_t)&unk_1001C1210);
      _ConditionalContent<>.init(storage:)(v107, v165, v166, v140, v141);
      v93 = v29;
      v94 = &qword_1001C1108;
    }
  }
  sub_100016904(v93, v94);
}

uint64_t sub_10007F340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v4 = type metadata accessor for BackgroundView(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + *(int *)(type metadata accessor for WidgetContentView(0) + 32);
  v8 = *(int *)(type metadata accessor for ForecastEntry(0) + 24);
  v9 = (uint64_t *)(v7 + v8 + *(int *)(type metadata accessor for WidgetContext(0) + 44));
  v10 = *v9;
  LOBYTE(v9) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v6 = v10;
  v6[8] = (char)v9;
  v11 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v11 = swift_getKeyPath(&unk_10017CF70);
  v12 = sub_100005D40(&qword_1001BF490);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  v13 = &v6[*(int *)(v4 + 24)];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_10017CFA0);
  v13[8] = 0;
  sub_100011868((uint64_t)v6, a2, type metadata accessor for BackgroundView);
  return swift_bridgeObjectRetain(v10);
}

void sub_10007F45C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for WidgetContentView(0) + 36));
    v5 = *v4;
    v6 = v4[1];
    swift_bridgeObjectRetain(v2);
    v7 = (uint64_t *)(v2 + 64);
    while (1)
    {
      v8 = *(v7 - 4);
      v9 = *(v7 - 3);
      v10 = *(v7 - 2);
      v11 = *(v7 - 1);
      v12 = *v7;
      v18 = v5;
      v19 = v6;
      swift_bridgeObjectRetain(v5);
      swift_retain(v6);
      v13 = sub_100005D40(&qword_1001C10E8);
      State.wrappedValue.getter(&v20);
      v14 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) != 0)
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_9;
      }
      else
      {
        sub_100080520();
        v14 = v16;
        if ((v8 & 0x8000000000000000) != 0)
        {
LABEL_9:
          __break(1u);
LABEL_10:
          swift_bridgeObjectRelease(v2);
          return;
        }
      }
      if (v8 >= *(_QWORD *)(v14 + 16))
        break;
      v15 = (_QWORD *)(v14 + 32 * v8);
      v15[4] = v9;
      v15[5] = v10;
      v15[6] = v11;
      v15[7] = v12;
      v18 = v5;
      v19 = v6;
      v17 = v14;
      State.wrappedValue.setter(&v17, v13);
      swift_release(v6);
      swift_bridgeObjectRelease(v5);
      v7 += 5;
      if (!--v3)
        goto LABEL_10;
    }
    __break(1u);
  }
}

__n128 sub_10007F5A4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;

  v4 = static Alignment.center.getter(a1);
  v6 = v5;
  sub_10007F5FC(v2, v11);
  v7 = v12;
  v8 = v13;
  result = (__n128)v11[0];
  v10 = v11[1];
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v10;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = v8;
  return result;
}

uint64_t sub_10007F5FC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t result;
  uint64_t v25;
  _QWORD v26[5];

  v25 = type metadata accessor for Color.RGBColorSpace(0);
  v4 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v6 = (char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (char *)a1 + *(int *)(type metadata accessor for BackgroundView(0) + 24);
  v8 = *(_QWORD *)v7;
  v9 = v7[8];
  sub_10001961C(*(_QWORD *)v7, v9);
  v10 = sub_1000C5274(v8, v9);
  sub_100019A78(v8, v9);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  if ((v10 & 1) == 0)
  {
    v16 = *a1;
    v17 = swift_bridgeObjectRetain(*a1);
    v18 = static UnitPoint.top.getter(v17);
    v20 = v19;
    v21 = static UnitPoint.bottom.getter();
    LinearGradient.init(gradient:startPoint:endPoint:)(v26, v16, v18, v20, v21, v22);
    v11 = v26[0];
    v12 = v26[1];
    v13 = v26[2];
    v14 = v26[3];
    v15 = v26[4];
  }
  v23 = sub_10007F760();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Color.RGBColorSpace.sRGB(_:), v25);
  result = Color.init(_:white:opacity:)(v6, 0.0, v23);
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v13;
  a2[3] = v14;
  a2[4] = v15;
  a2[5] = result;
  return result;
}

double sub_10007F760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  double result;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for ColorSchemeContrast(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  v9 = v0 + *(int *)(type metadata accessor for BackgroundView(0) + 24);
  v10 = *(_QWORD *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  sub_10001961C(*(_QWORD *)v9, v11);
  v12 = sub_1000C5274(v10, v11);
  sub_100019A78(v10, v11);
  result = 1.0;
  if ((v12 & 1) == 0)
  {
    sub_1000C548C(v8);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for ColorSchemeContrast.increased(_:), v2);
    v14 = static ColorSchemeContrast.== infix(_:_:)(v8, v6);
    v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v6, v2);
    v15(v8, v2);
    if ((v14 & 1) != 0)
    {
      return 0.2;
    }
    else
    {
      result = 0.1;
      if (!*(_BYTE *)(v1 + 8))
        return 0.0;
    }
  }
  return result;
}

void sub_10007F8C4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t KeyPath;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v91 = a1;
  v83 = sub_100005D40(&qword_1001C15F0);
  v81 = *(_QWORD *)(v83 - 8);
  sub_1000230F4();
  __chkstk_darwin(v2);
  sub_1000230E0();
  v79 = v3;
  v90 = sub_100005D40(&qword_1001C15F8);
  sub_100029068();
  __chkstk_darwin(v4);
  sub_100023150();
  v77 = v5;
  __chkstk_darwin(v6);
  v84 = (char *)&v71 - v7;
  v88 = sub_100005D40(&qword_1001C1600);
  sub_100029068();
  __chkstk_darwin(v8);
  sub_1000230E0();
  v89 = v9;
  v82 = type metadata accessor for ColorScheme(0);
  v80 = *(_QWORD *)(v82 - 8);
  sub_1000230F4();
  __chkstk_darwin(v10);
  sub_1000830D4(v11, v71);
  v12 = type metadata accessor for ColorSchemeContrast(0);
  v85 = *(_QWORD *)(v12 - 8);
  v86 = v12;
  sub_1000230F4();
  __chkstk_darwin(v13);
  sub_10002325C();
  v14 = type metadata accessor for ConditionImage(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = sub_100005D40(&qword_1001C1608);
  v73 = *(_QWORD *)(v17 - 8);
  v74 = v17;
  sub_1000230F4();
  __chkstk_darwin(v18);
  sub_10002325C();
  v21 = v20 - v19;
  v72 = sub_100005D40(&qword_1001C1610);
  sub_100029068();
  __chkstk_darwin(v22);
  sub_10002325C();
  v25 = v24 - v23;
  v87 = sub_100005D40(&qword_1001C1618);
  sub_100029068();
  __chkstk_darwin(v26);
  sub_100023150();
  v75 = v27;
  __chkstk_darwin(v28);
  v76 = (char *)&v71 - v29;
  v30 = *(unsigned __int8 *)(v1 + *(int *)(v14 + 24));
  v31 = (uint64_t *)(v1 + *(int *)(v14 + 20));
  v32 = *v31;
  v33 = v31[1];
  sub_10000F7C4(v1, (uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ConditionImage);
  v34 = *(unsigned __int8 *)(v15 + 80);
  v35 = (v34 + 16) & ~v34;
  v36 = v35 + v16;
  v37 = v34 | 7;
  if (v30 == 1)
  {
    v38 = swift_allocObject(&unk_1001B6328, v36, v37);
    sub_100011868((uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v38 + v35, type metadata accessor for ConditionImage);
    swift_bridgeObjectRetain(v33);
    v39 = sub_100005D40(&qword_1001C1668);
    v40 = sub_100082B74();
    WidgetAccentableIconView.init(symbol:modifier:)(v32, v33, sub_100082B40, v38, v39, v40);
    KeyPath = swift_getKeyPath(&unk_10017D190);
    sub_100083068(KeyPath, enum case for ColorSchemeContrast.standard(_:));
    v42 = (uint64_t *)(v25 + *(int *)(v72 + 36));
    v43 = sub_100005D40(&qword_1001C1620);
    sub_100083100((uint64_t)v42 + *(int *)(v43 + 28));
    *v42 = KeyPath;
    v45 = v73;
    v44 = v74;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v25, v21, v74);
    sub_1000830F0();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v21, v44);
    v46 = swift_getKeyPath(&unk_10017D1C0);
    v47 = v80;
    v48 = v78;
    v49 = v82;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v80 + 104))(v78, enum case for ColorScheme.dark(_:), v82);
    v50 = v87;
    v51 = v75;
    v52 = (uint64_t *)(v75 + *(int *)(v87 + 36));
    v53 = sub_100005D40(&qword_1001C1650);
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))((char *)v52 + *(int *)(v53 + 28), v48, v49);
    *v52 = v46;
    sub_100083190(v25, v51);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v49);
    sub_100016904(v25, &qword_1001C1610);
    v54 = &qword_1001C1618;
    v55 = (uint64_t)v76;
    sub_1000831D0(v51);
    v56 = v89;
    sub_100083190(v55, v89);
    swift_storeEnumTagMultiPayload(v56, v88, 0);
    v57 = sub_1000828E4();
    v58 = sub_100082A04();
    v59 = v90;
    v60 = v56;
    v61 = v50;
  }
  else
  {
    v62 = swift_allocObject(&unk_1001B6300, v36, v37);
    sub_100011868((uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v62 + v35, type metadata accessor for ConditionImage);
    swift_bridgeObjectRetain(v33);
    v63 = v79;
    WidgetAccentableIconView.init(symbol:modifier:)(v32, v33, sub_10008288C, v62, &type metadata for Image, &protocol witness table for Image);
    v64 = swift_getKeyPath(&unk_10017D190);
    sub_100083068(v64, enum case for ColorSchemeContrast.standard(_:));
    v65 = v90;
    v66 = v77;
    v67 = (uint64_t *)(v77 + *(int *)(v90 + 36));
    v68 = sub_100005D40(&qword_1001C1620);
    sub_100083100((uint64_t)v67 + *(int *)(v68 + 28));
    *v67 = v64;
    v69 = v81;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v66, v63, v83);
    sub_1000830F0();
    sub_100083168(v63, *(uint64_t (**)(uint64_t, uint64_t))(v69 + 8));
    v54 = &qword_1001C15F8;
    v55 = (uint64_t)v84;
    sub_1000831D0(v66);
    v70 = v89;
    sub_100083190(v55, v89);
    swift_storeEnumTagMultiPayload(v70, v88, 1);
    v57 = sub_1000828E4();
    v58 = sub_100082A04();
    v60 = v70;
    v61 = v87;
    v59 = v65;
  }
  _ConditionalContent<>.init(storage:)(v60, v61, v59, v57, v58);
  sub_100016904(v55, v54);
  sub_10001C770();
}

uint64_t sub_10007FE1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v6 = type metadata accessor for WidgetRenderingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (_DWORD *)((char *)&v25 - v11);
  v13 = sub_100005D40(&qword_1001C1680);
  __chkstk_darwin(v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C5250(v12);
  static WidgetRenderingMode.fullColor.getter();
  v16 = static WidgetRenderingMode.== infix(_:_:)(v12, v10);
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v10, v6);
  v18 = ((uint64_t (*)(_DWORD *, uint64_t))v17)(v12, v6);
  if ((v16 & 1) != 0)
    static SymbolRenderingMode.multicolor.getter(v18);
  else
    static SymbolRenderingMode.monochrome.getter(v18);
  v19 = type metadata accessor for SymbolRenderingMode(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v15, 0, 1, v19);
  v20 = Image.symbolRenderingMode(_:)(v15, a1);
  sub_100016904((uint64_t)v15, &qword_1001C1680);
  v21 = (uint64_t *)(a2 + *(int *)(type metadata accessor for ConditionImage(0) + 20));
  v23 = *v21;
  v22 = v21[1];
  *a3 = v20;
  a3[1] = v23;
  a3[2] = v22;
  return swift_bridgeObjectRetain(v22);
}

uint64_t sub_10007FF9C()
{
  return EnvironmentValues._colorSchemeContrast.getter();
}

void sub_10007FFBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for ColorSchemeContrast(0);
  __chkstk_darwin(v3);
  sub_1000443F0();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v1, a1);
  EnvironmentValues._colorSchemeContrast.setter(v1);
  sub_1000443A4();
}

void sub_100080020(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for WidgetRenderingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (_DWORD *)((char *)&v19 - v9);
  v11 = sub_100005D40(&qword_1001C1680);
  __chkstk_darwin(v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C5250(v10);
  static WidgetRenderingMode.fullColor.getter();
  v14 = static WidgetRenderingMode.== infix(_:_:)(v10, v8);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  v16 = ((uint64_t (*)(_DWORD *, uint64_t))v15)(v10, v4);
  if ((v14 & 1) != 0)
    static SymbolRenderingMode.multicolor.getter(v16);
  else
    static SymbolRenderingMode.monochrome.getter(v16);
  v17 = type metadata accessor for SymbolRenderingMode(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v13, 0, 1, v17);
  v18 = Image.symbolRenderingMode(_:)(v13, a1);
  sub_100016904((uint64_t)v13, &qword_1001C1680);
  *a2 = v18;
}

void sub_100080180(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v32[2];

  v32[1] = a4;
  v7 = sub_100005D40(&qword_1001C1698);
  __chkstk_darwin(v7);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001C16A0);
  __chkstk_darwin(v10);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005D40(&qword_1001C16A8);
  __chkstk_darwin(v13);
  v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100082C78();
  v16 = static UIColor.macSafeSystemCyan.getter();
  v17 = Color.init(uiColor:)(v16);
  v18 = v17;
  if (a2 == 0xD000000000000014 && a3 == 0x8000000100186F60
    || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0xD000000000000014, 0x8000000100186F60, 0),
        (v17 & 1) != 0))
  {
    v19 = static Color.white.getter(v17);
    v20 = static Color.white.getter(v19);
    v21 = sub_100005D40(&qword_1001C16B8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v15, a1, v21);
    v22 = (uint64_t *)&v15[*(int *)(v13 + 36)];
    *v22 = v19;
    v22[1] = v20;
    v22[2] = v18;
    v23 = &qword_1001C16A8;
    sub_1000168D8((uint64_t)v15, (uint64_t)v12, &qword_1001C16A8);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v24 = sub_100082CB4();
    v25 = sub_100082D50();
    _ConditionalContent<>.init(storage:)(v12, v13, v7, v24, v25);
    v26 = (uint64_t)v15;
  }
  else
  {
    v27 = static Color.white.getter(v17);
    v28 = sub_100005D40(&qword_1001C16B8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v9, a1, v28);
    v29 = (uint64_t *)&v9[*(int *)(v7 + 36)];
    *v29 = v27;
    v29[1] = v18;
    v23 = &qword_1001C1698;
    sub_1000168D8((uint64_t)v9, (uint64_t)v12, &qword_1001C1698);
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v30 = sub_100082CB4();
    v31 = sub_100082D50();
    _ConditionalContent<>.init(storage:)(v12, v13, v7, v30, v31);
    v26 = (uint64_t)v9;
  }
  sub_100016904(v26, v23);
}

uint64_t sub_100080420()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

void sub_100080438(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_100080180(a1, *v2, v2[1], a2);
}

uint64_t sub_100080440@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007F340(*(_QWORD *)(v1 + 16), a1);
}

uint64_t type metadata accessor for BackgroundView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C1490, (uint64_t)&nominal type descriptor for BackgroundView);
}

unint64_t sub_10008045C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C10D0;
  if (!qword_1001C10D0)
  {
    v1 = sub_100005DC4(&qword_1001C10A8);
    sub_100082DEC((uint64_t)&unk_1001C10D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C10D0);
  }
  return result;
}

void sub_1000804E4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WidgetContentView(0) - 8) + 80);
  sub_10007F45C(a1, v1 + ((v3 + 16) & ~v3));
}

void sub_100080520()
{
  sub_10006F990();
}

unint64_t sub_10008053C()
{
  unint64_t result;

  result = qword_1001C1150;
  if (!qword_1001C1150)
  {
    result = swift_getWitnessTable(&unk_10017D074, &type metadata for WidgetContentView.GenericErrorView);
    atomic_store(result, (unint64_t *)&qword_1001C1150);
  }
  return result;
}

unint64_t sub_100080578()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1158;
  if (!qword_1001C1158)
  {
    v1 = sub_100005DC4(&qword_1001C1120);
    sub_10008061C((uint64_t)&unk_1001C1160);
    sub_100082DEC((uint64_t)&unk_1001C11A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1158);
  }
  return result;
}

unint64_t sub_10008061C(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;
  uint64_t *v3;
  void (*v4)(void);
  void (*v5)(void);
  void (*v6)(void);
  void (*v7)(void);
  uint64_t v8;

  result = sub_1000831B8(a1);
  if (!result)
  {
    v6 = v5;
    v7 = v4;
    v8 = sub_100005DC4(v3);
    v7();
    v6();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_100080688()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1168;
  if (!qword_1001C1168)
  {
    v1 = sub_100005DC4(&qword_1001C1170);
    sub_10008070C((uint64_t)&unk_1001C1178);
    sub_10008053C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1168);
  }
  return result;
}

void sub_10008070C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  if (!sub_1000831B8(a1))
  {
    v3 = v2(255);
    atomic_store(sub_100016CCC(v3), v1);
  }
  sub_100006338();
}

unint64_t sub_10008073C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1180;
  if (!qword_1001C1180)
  {
    v1 = sub_100005DC4(&qword_1001C1188);
    sub_100082DEC((uint64_t)&unk_1001C1190);
    sub_10008053C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1180);
  }
  return result;
}

unint64_t sub_1000807C0()
{
  return sub_10008061C((uint64_t)&unk_1001C11B8);
}

unint64_t sub_1000807E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C11C0;
  if (!qword_1001C11C0)
  {
    v1 = sub_100005DC4(&qword_1001C11B0);
    sub_100082DEC((uint64_t)&unk_1001C11C8);
    sub_100080868();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C11C0);
  }
  return result;
}

unint64_t sub_100080868()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C11D8;
  if (!qword_1001C11D8)
  {
    v1 = sub_100005DC4(&qword_1001C11E0);
    sub_100082DEC((uint64_t)&unk_1001C11E8);
    sub_100082DEC((uint64_t)&unk_1001C11F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C11D8);
  }
  return result;
}

unint64_t sub_10008090C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1218;
  if (!qword_1001C1218)
  {
    v1 = sub_100005DC4(&qword_1001C1100);
    sub_100080970();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1218);
  }
  return result;
}

unint64_t sub_100080970()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  result = qword_1001C1220;
  if (!qword_1001C1220)
  {
    v1 = sub_100005DC4(&qword_1001C1228);
    v2 = sub_100005DC4(&qword_1001C1230);
    v3 = sub_100005DC4(&qword_1001BF358);
    sub_100082DEC((uint64_t)&unk_1001C1238);
    v5 = v4;
    sub_100082DEC((uint64_t)&qword_1001BF458);
    v7[0] = v2;
    v7[1] = v3;
    v7[2] = v5;
    v7[3] = v6;
    swift_getOpaqueTypeConformance2(v7, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_10008053C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1220);
  }
  return result;
}

unint64_t sub_100080A60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1240;
  if (!qword_1001C1240)
  {
    v1 = sub_100005DC4(&qword_1001C10F0);
    sub_10008061C((uint64_t)&unk_1001C1248);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1240);
  }
  return result;
}

unint64_t sub_100080AE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1258;
  if (!qword_1001C1258)
  {
    v1 = sub_100005DC4(&qword_1001C1260);
    sub_10008070C((uint64_t)&unk_1001C1268);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1258);
  }
  return result;
}

uint64_t sub_100080B68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  sub_100016868(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  sub_100016838(v3, v4, v5, v6);
  swift_release(v7);
  return a1;
}

uint64_t sub_100080BE4()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  int *v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t);
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  void (*v96)(uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (*v135)(uint64_t, uint64_t);
  uint64_t (*v136)(uint64_t, uint64_t);
  uint64_t (*v137)(uint64_t, uint64_t);
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;

  v1 = v0;
  v2 = (int *)type metadata accessor for WidgetContentView(0);
  v3 = *((_QWORD *)v2 - 1);
  v138 = *(_QWORD *)(v3 + 64);
  v139 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v140 = *(unsigned __int8 *)(v3 + 80);
  v4 = (_QWORD *)(v0 + v139);
  v5 = sub_100005D40(&qword_1001BFA18);
  if (sub_1000831A0(v5) == 1)
  {
    v6 = type metadata accessor for WidgetFamily(0);
    sub_100083090(v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)v4 + v2[5]);
  v8 = sub_100005D40(&qword_1001C0290);
  if (sub_10001C950(v8) == 1)
  {
    v9 = type metadata accessor for ContentSizeCategory(0);
    sub_100016C04(v9);
  }
  else
  {
    swift_release(*v7);
  }
  sub_100019A78(*(_QWORD *)((char *)v4 + v2[6]), *((_BYTE *)v4 + v2[6] + 8));
  v10 = (_QWORD *)((char *)v4 + v2[7]);
  v11 = sub_100005D40(&qword_1001BF0C8);
  if (sub_10001C950(v11) == 1)
  {
    v12 = type metadata accessor for Font.Context(0);
    sub_100016C04(v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (char *)v4 + v2[8];
  v14 = type metadata accessor for Date(0);
  v135 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v135((uint64_t)v13, v14);
  v15 = (int *)sub_10008307C();
  v16 = (uint64_t)&v13[v15[5]];
  v17 = type metadata accessor for TimelineEntryRelevance(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v16, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = &v13[v15[6]];
  swift_bridgeObjectRelease(*((_QWORD *)v18 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v18 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v18 + 5));
  v19 = sub_100083198();
  v20 = (uint64_t)&v18[*(int *)(v19 + 40)];
  v21 = type metadata accessor for URL(0);
  if (!sub_100016AC4(v20))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  swift_bridgeObjectRelease(*(_QWORD *)&v18[*(int *)(v19 + 44)]);
  v22 = (uint64_t)&v13[v15[7]];
  v23 = type metadata accessor for ForecastEntry.Model(0);
  if (sub_1000831AC(v23) == 1)
  {
    v24 = type metadata accessor for WeatherDataViewModel(0);
    v25 = sub_1000831AC(v24);
    switch(v25)
    {
      case 2:
        type metadata accessor for SunriseSunsetViewModel(0);
        sub_100083030();
        v77(v22, v76);
        break;
      case 1:
        sub_10008313C();
        sub_100083134(v22);
        v78 = type metadata accessor for InstantWeatherViewModel(0);
        v79 = v22 + *(int *)(v78 + 20);
        type metadata accessor for Location(0);
        sub_100083030();
        v80(v79);
        v81 = v22 + *(int *)(v78 + 24);
        sub_100083134(v81);
        v82 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        sub_1000831C4(v81 + v82[5], v83, v84, v85, v86, v87, v88, v89, v122, v125, v129, v132, v135);
        ((void (*)(uint64_t, uint64_t))v78)(v81 + v82[6], v14);
        v90 = v81 + v82[7];
        sub_100005D40(&qword_1001BF090);
        sub_100083008(v90);
        sub_100083008(v81 + v82[8]);
        sub_100016A8C(v81 + v82[9]);
        v91 = v81 + v82[10];
        if (!sub_100082F7C())
          sub_100083008(v91);
        v92 = v81 + v82[11];
        if (!sub_100082F7C())
          sub_100083008(v92);
        v93 = v81 + v82[12];
        sub_100083134(v93);
        v94 = (int *)type metadata accessor for ConditionViewModel(0);
        v95 = v93 + v94[5];
        type metadata accessor for WeatherCondition(0);
        sub_100083030();
        v96(v95);
        sub_100082FD8(v94[6]);
        sub_100082FD8(v94[7]);
        v97 = sub_100083178();
        v98 = type metadata accessor for CloudAltitudeKind(v97);
        sub_100016BF0(v98);
        v99 = sub_100082F6C();
        if (!(_DWORD)v99)
          sub_100082F5C(v99, v100, v101, v102, v103, v104, v105, v106, v124, v128, v131, v134, v137);
        v107 = sub_100082F6C();
        v1 = v134;
        if (!(_DWORD)v107)
          sub_100082F5C(v107, v108, v109, v110, v111, v112, v113, v114, v124, v128, v131, v134, v137);
        v115 = sub_100083178();
        v116 = type metadata accessor for UVIndex(v115);
        sub_100016BF0(v116);
        v117 = sub_100083178();
        v118 = type metadata accessor for Wind(v117);
        sub_100016BF0(v118);
        v119 = *(_QWORD *)(v81 + v82[20] + 8);
        if (v119)
        {
          swift_bridgeObjectRelease(v119);
          sub_100083184();
        }
        break;
      case 0:
        v26 = sub_10008313C();
        v27 = *(_QWORD *)(*(_QWORD *)(v26 - 8) + 8);
        sub_100083008(v22);
        v28 = type metadata accessor for AggregateWeatherViewModel(0);
        v29 = sub_100083178();
        v30 = type metadata accessor for Location(v29);
        sub_100016BF0(v30);
        v126 = v27;
        v31 = v22 + *(int *)(v28 + 24);
        sub_100083008(v31);
        v32 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        sub_1000831C4(v31 + v32[5], v33, v34, v35, v36, v37, v38, v39, v28, v126, v26, v132, v135);
        ((void (*)(uint64_t, uint64_t))v18)(v31 + v32[6], v14);
        v40 = sub_100005D40(&qword_1001BF090);
        v41 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8);
        sub_100083084();
        v41(v31 + v32[8], v40);
        sub_100016A8C(v31 + v32[9]);
        if (!sub_100082F7C())
          sub_100083084();
        if (!sub_100082F7C())
          sub_100083084();
        v42 = v31 + v32[12];
        v127(v42, v130);
        v43 = (int *)type metadata accessor for ConditionViewModel(0);
        v44 = v42 + v43[5];
        type metadata accessor for WeatherCondition(0);
        sub_100083030();
        v45(v44);
        sub_100082FD8(v43[6]);
        sub_100082FD8(v43[7]);
        v46 = type metadata accessor for CloudAltitudeKind(0);
        sub_100016BF0(v46);
        v47 = sub_100082F6C();
        if (!(_DWORD)v47)
          sub_100082F5C(v47, v48, v49, v50, v51, v52, v53, v54, v123, (uint64_t)v127, v130, v133, v136);
        v55 = sub_100082F6C();
        v63 = (int *)v123;
        if (!(_DWORD)v55)
          sub_100082F5C(v55, v56, v57, v58, v59, v60, v61, v62, v123, (uint64_t)v127, v130, v133, v136);
        v64 = type metadata accessor for UVIndex(0);
        sub_100016BF0(v64);
        v65 = type metadata accessor for Wind(0);
        sub_100016BF0(v65);
        v66 = *(_QWORD *)(v31 + v32[20] + 8);
        if (v66)
        {
          swift_bridgeObjectRelease(v66);
          sub_100083184();
        }
        sub_100083170(v63[7]);
        sub_100083170(v63[8]);
        v67 = v22 + v63[9];
        v68 = type metadata accessor for AirQualityViewModel(0);
        v1 = v133;
        if (!sub_100083054(v68))
        {
          v127(v67, v130);
          v136(v67 + *(int *)(v31 + 20), v14);
          v69 = type metadata accessor for AirQualityScale(0);
          sub_100016BF0(v69);
          v70 = type metadata accessor for AirQualityScaleCategory(0);
          sub_100016BF0(v70);
        }
        v71 = v22 + v63[10];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (!sub_100083054(HourPrecipitationChartViewModel))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v71, v31);
        sub_100083170(v63[11]);
        v73 = v22 + v63[13];
        if (!sub_100016AC4(v73))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v73, v21);
        v74 = v22 + v63[14];
        v75 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v74, 1, v75))
          v136(v74, v14);
        break;
    }
  }
  v120 = (_QWORD *)((char *)v4 + v2[9]);
  swift_bridgeObjectRelease(*v120);
  swift_release(v120[1]);
  return swift_deallocObject(v1, v139 + v138, v140 | 7);
}

uint64_t sub_1000812B8(uint64_t a1)
{
  return sub_1000812E4(a1, (uint64_t (*)(uint64_t))sub_10007C1FC);
}

uint64_t sub_1000812C4(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t sub_1000812CC(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

uint64_t sub_1000812D8(uint64_t a1)
{
  return sub_1000812E4(a1, (uint64_t (*)(uint64_t))sub_10007D304);
}

uint64_t sub_1000812E4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for WidgetContentView(0);
  v2 = sub_100082ECC();
  return a2(v2);
}

uint64_t sub_10008132C(uint64_t a1)
{
  return sub_1000812E4(a1, (uint64_t (*)(uint64_t))sub_10007B92C);
}

uint64_t sub_10008133C(uint64_t a1)
{
  return sub_1000812E4(a1, (uint64_t (*)(uint64_t))sub_10007A4C8);
}

unint64_t sub_10008134C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C12B8;
  if (!qword_1001C12B8)
  {
    v1 = sub_100005DC4(&qword_1001C12A0);
    sub_100082DEC((uint64_t)&unk_1001C12C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C12B8);
  }
  return result;
}

uint64_t *sub_1000813D0(uint64_t *a1)
{
  sub_100081408(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t sub_100081408(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_release(a2);
    swift_release(a3);
    return swift_release(a4);
  }
  return result;
}

unint64_t sub_100081454()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1300;
  if (!qword_1001C1300)
  {
    v1 = sub_100005DC4(&qword_1001C12F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1300);
  }
  return result;
}

_QWORD *sub_1000814B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  swift_bridgeObjectRetain(*a1);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *sub_100081500(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

_QWORD *sub_100081528(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_100081558(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)(a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    swift_bridgeObjectRetain(v5);
    v11 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = 1;
    }
    else
    {
      v14 = *v10;
      *v9 = *v10;
      swift_retain(v14);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v13);
    v15 = *(int *)(a3 + 24);
    v16 = a1 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    sub_10001961C(*(_QWORD *)v17, v19);
    *(_QWORD *)v16 = v18;
    *(_BYTE *)(v16 + 8) = v19;
  }
  return a1;
}

uint64_t sub_100081664(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*a1);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v5 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  return sub_100019A78(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24)), *((_BYTE *)a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_1000816F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)((char *)a2 + v7);
  swift_bridgeObjectRetain(v6);
  v10 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
    v12 = 1;
  }
  else
  {
    v13 = *v9;
    *v8 = *v9;
    swift_retain(v13);
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v10, v12);
  v14 = *(int *)(a3 + 24);
  v15 = a1 + v14;
  v16 = (uint64_t)a2 + v14;
  v17 = *(_QWORD *)v16;
  v18 = *(_BYTE *)(v16 + 8);
  sub_10001961C(*(_QWORD *)v16, v18);
  *(_QWORD *)v15 = v17;
  *(_BYTE *)(v15 + 8) = v18;
  return a1;
}

uint64_t *sub_1000817DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    sub_100016904((uint64_t)a1 + v8, &qword_1001BF490);
    v11 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = 1;
    }
    else
    {
      v14 = *v10;
      *v9 = *v10;
      swift_retain(v14);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v13);
  }
  v15 = *(int *)(a3 + 24);
  v16 = (uint64_t)a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v18 = *(_QWORD *)v17;
  v19 = *(_BYTE *)(v17 + 8);
  sub_10001961C(*(_QWORD *)v17, v19);
  v20 = *(_QWORD *)v16;
  v21 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = v19;
  sub_100019A78(v20, v21);
  return a1;
}

uint64_t sub_1000818F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  return a1;
}

uint64_t *sub_1000819D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_100016904((uint64_t)a1 + v7, &qword_1001BF490);
    v10 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = *v14;
  LOBYTE(v14) = *((_BYTE *)v14 + 8);
  v16 = *(_QWORD *)v13;
  v17 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = (_BYTE)v14;
  sub_100019A78(v16, v17);
  return a1;
}

uint64_t sub_100081AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100081AE4);
}

void sub_100081AE4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_100044448(*a1);
    sub_1000443A4();
  }
  else
  {
    v6 = sub_100005D40(&qword_1001BF4A8);
    sub_100016B50((uint64_t)a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t sub_100081B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100081B4C);
}

void sub_100081B4C(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    sub_1000443A4();
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BF4A8);
    sub_100016B44((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

void sub_100081BAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\t";
  sub_10001C028(319, (unint64_t *)&qword_1001BF528, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = "\t";
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t destroy for ErrorViewAttributes(uint64_t a1)
{
  uint64_t v2;

  sub_100016868(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    sub_100016868(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    swift_bridgeObjectRelease(v2);
  }
  return swift_release(*(_QWORD *)(a1 + 64));
}

uint64_t initializeWithCopy for ErrorViewAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_100016828(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v7);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v11 = *(_BYTE *)(a2 + 48);
    sub_100016828(v9, v10, v11);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v8;
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
  }
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  swift_retain(v13);
  return a1;
}

uint64_t assignWithCopy for ErrorViewAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_100016828(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_100016868(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = (_OWORD *)(a1 + 32);
  v13 = (_OWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 32);
      v16 = *(_QWORD *)(a2 + 40);
      v17 = *(_BYTE *)(a2 + 48);
      sub_100016828(v15, v16, v17);
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(_QWORD *)(a1 + 40);
      v20 = *(_BYTE *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 40) = v16;
      *(_BYTE *)(a1 + 48) = v17;
      sub_100016868(v18, v19, v20);
      v21 = *(_QWORD *)(a2 + 56);
      v22 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v21;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      sub_10004A284(a1 + 32);
      v27 = *(_OWORD *)(a2 + 48);
      *v12 = *v13;
      *(_OWORD *)(a1 + 48) = v27;
    }
  }
  else if (v14)
  {
    v23 = *(_QWORD *)(a2 + 32);
    v24 = *(_QWORD *)(a2 + 40);
    v25 = *(_BYTE *)(a2 + 48);
    sub_100016828(v23, v24, v25);
    *(_QWORD *)(a1 + 32) = v23;
    *(_QWORD *)(a1 + 40) = v24;
    *(_BYTE *)(a1 + 48) = v25;
    v26 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v26;
    swift_bridgeObjectRetain(v26);
  }
  else
  {
    v28 = *(_OWORD *)(a2 + 48);
    *v12 = *v13;
    *(_OWORD *)(a1 + 48) = v28;
  }
  v29 = *(_QWORD *)(a2 + 64);
  v30 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v29;
  swift_retain(v29);
  swift_release(v30);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

void *initializeWithTake for ErrorViewAttributes(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for ErrorViewAttributes(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_100016868(v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a1 + 56);
  if (!v9)
    goto LABEL_5;
  v10 = *(_QWORD *)(a2 + 56);
  if (!v10)
  {
    sub_10004A284(a1 + 32);
LABEL_5:
    v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v15;
    goto LABEL_6;
  }
  v11 = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_BYTE *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v11;
  sub_100016868(v12, v13, v14);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v9);
LABEL_6:
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release(v16);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ErrorViewAttributes(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ErrorViewAttributes(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetContentView.GenericErrorView()
{
  return &type metadata for WidgetContentView.GenericErrorView;
}

unint64_t sub_100082008()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = qword_1001C14D0;
  if (!qword_1001C14D0)
  {
    v1 = sub_100005DC4(&qword_1001C10C0);
    v2 = sub_100005DC4(&qword_1001C10B0);
    v3 = sub_100005DC4(&qword_1001C10A8);
    v4 = type metadata accessor for BackgroundView(255);
    v5 = sub_10008045C();
    sub_10008070C((uint64_t)&unk_1001C10E0);
    v8 = v3;
    v9 = v4;
    v10 = v5;
    v11 = v6;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    v8 = v2;
    v9 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    sub_100082DEC((uint64_t)&unk_1001C14D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C14D0);
  }
  return result;
}

uint64_t sub_100082120(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F188, 1);
}

uint64_t sub_100082130(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F160, 1);
}

uint64_t sub_100082140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_1000831B8(a1);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  sub_100016828(v2, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  swift_bridgeObjectRetain(v3);
  sub_1000167F8(v4, v5, v6, v7);
  swift_retain(v8);
  return v1;
}

void sub_1000821B4()
{
  sub_100082DEC((uint64_t)&unk_1001C1510);
}

unint64_t sub_1000821E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1520;
  if (!qword_1001C1520)
  {
    v1 = sub_100005DC4(&qword_1001C14F8);
    sub_10008070C((uint64_t)&unk_1001C1528);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1520);
  }
  return result;
}

_QWORD *sub_100082268(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = *(int *)(a3 + 24);
    v16 = (_QWORD *)((char *)a1 + v14);
    v17 = (_QWORD *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
    swift_bridgeObjectRetain(v18);
  }
  return a1;
}

double sub_100082354(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20) + 8)).n128_u64[0];
  return result;
}

_QWORD *sub_1000823C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  swift_bridgeObjectRetain(v16);
  return a1;
}

_QWORD *sub_100082488(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BF3C0);
    v6 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

char *sub_100082578(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  a1[v8] = a2[v8];
  return a1;
}

char *sub_100082628(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BF3C0);
    v6 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  v13 = *((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease(v13);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_100082704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100082710);
}

void sub_100082710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005D40(&qword_1001BF4B0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    sub_100016B50(a1, a2, v6);
  }
  else
  {
    sub_100044448(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8));
    sub_1000443A4();
  }
}

uint64_t sub_100082774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100082780);
}

void sub_100082780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  sub_100083154();
  sub_100005D40(&qword_1001BF4B0);
  sub_10001C6D0();
  if (v4)
  {
    sub_100016B44(v1, v0, v0, v3);
  }
  else
  {
    *(_QWORD *)(v1 + *(int *)(v2 + 20) + 8) = (v0 - 1);
    sub_1000443A4();
  }
}

uint64_t type metadata accessor for ConditionImage(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C15B0, (uint64_t)&nominal type descriptor for ConditionImage);
}

void sub_1000827EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10001C028(319, &qword_1001BF530, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_10017CEF0;
    v4[2] = &unk_10017D128;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_100082878(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F1FC, 1);
}

void sub_10008288C()
{
  uint64_t v0;
  uint64_t *v1;

  type metadata accessor for ConditionImage(0);
  v0 = sub_100082ECC();
  sub_100080020(v0, v1);
}

uint64_t sub_1000828C0()
{
  return EnvironmentValues._colorSchemeContrast.getter();
}

unint64_t sub_1000828E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1628;
  if (!qword_1001C1628)
  {
    v1 = sub_100005DC4(&qword_1001C1618);
    sub_100082968();
    sub_100082DEC((uint64_t)&unk_1001C1648);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1628);
  }
  return result;
}

unint64_t sub_100082968()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1630;
  if (!qword_1001C1630)
  {
    v1 = sub_100005DC4(&qword_1001C1610);
    sub_100082DEC((uint64_t)&unk_1001C1638);
    sub_100082DEC((uint64_t)&unk_1001C1640);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1630);
  }
  return result;
}

unint64_t sub_100082A04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1658;
  if (!qword_1001C1658)
  {
    v1 = sub_100005DC4(&qword_1001C15F8);
    sub_100082DEC((uint64_t)&unk_1001C1660);
    sub_100082DEC((uint64_t)&unk_1001C1640);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1658);
  }
  return result;
}

uint64_t sub_100082AA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for ConditionImage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100005D40(&qword_1001BF3C0);
  if (sub_1000831A0(v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    sub_100083090(v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_100016A8C((uint64_t)v6 + *(int *)(v1 + 20));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100082B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  type metadata accessor for ConditionImage(0);
  v0 = sub_100082ECC();
  return sub_10007FE1C(v0, v1, v2);
}

unint64_t sub_100082B74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1670;
  if (!qword_1001C1670)
  {
    v1 = sub_100005DC4(&qword_1001C1668);
    sub_100082BE0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1670);
  }
  return result;
}

unint64_t sub_100082BE0()
{
  unint64_t result;

  result = qword_1001C1678;
  if (!qword_1001C1678)
  {
    result = swift_getWitnessTable(&unk_10017D20C, &type metadata for ConditionImagePaletteStyle);
    atomic_store(result, (unint64_t *)&qword_1001C1678);
  }
  return result;
}

ValueMetadata *type metadata accessor for ConditionImagePaletteStyle()
{
  return &type metadata for ConditionImagePaletteStyle;
}

unint64_t sub_100082C34()
{
  return sub_10008061C((uint64_t)&unk_1001C1688);
}

uint64_t sub_100082C68(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F224, 1);
}

unint64_t sub_100082C78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C16B0;
  if (!qword_1001C16B0)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001C16B0);
  }
  return result;
}

unint64_t sub_100082CB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C16C0;
  if (!qword_1001C16C0)
  {
    v1 = sub_100005DC4(&qword_1001C16A8);
    sub_100082DEC((uint64_t)&unk_1001C16C8);
    sub_100082DEC((uint64_t)&unk_1001C16D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C16C0);
  }
  return result;
}

unint64_t sub_100082D50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C16E0;
  if (!qword_1001C16E0)
  {
    v1 = sub_100005DC4(&qword_1001C1698);
    sub_100082DEC((uint64_t)&unk_1001C16C8);
    sub_100082DEC((uint64_t)&unk_1001C16E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C16E0);
  }
  return result;
}

void sub_100082DEC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  if (!sub_1000831B8(a1))
  {
    v3 = sub_100005DC4(v2);
    atomic_store(sub_100016CCC(v3), v1);
  }
  sub_100006338();
}

unint64_t sub_100082E1C()
{
  return sub_10008061C((uint64_t)&unk_1001C16F8);
}

void sub_100082E50(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, void *a10)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  LOBYTE(a6) = v13;
  LOBYTE(a4) = v11;
  sub_1000779E0(a1, a2, v10, a4, v12, a6, v14, v15, a9, a10);
}

__n128 sub_100082E68@<Q0>(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  unsigned __int8 v2;
  unint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  unsigned __int8 v6;
  __n128 result;

  v2 = (*a1)->n128_u8[8];
  v3 = (*a1)[1].n128_u64[0];
  v4 = (*a1)[1].n128_u8[8];
  v5 = (*a1)[2].n128_u64[0];
  v6 = (*a1)[2].n128_u8[8];
  result = (*a1)[3];
  a2->n128_u64[0] = (*a1)->n128_u64[0];
  a2->n128_u8[8] = v2;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u8[8] = v4;
  a2[2].n128_u64[0] = v5;
  a2[2].n128_u8[8] = v6;
  a2[3] = result;
  return result;
}

double sub_100082EB0(uint64_t a1)
{
  return *(double *)&a1;
}

uint64_t sub_100082ECC()
{
  uint64_t v0;

  return v0;
}

void sub_100082F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = v0 + *(int *)(v2 + 96);
  v6 = *(uint64_t **)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v7 = *v6;
  LOBYTE(v6) = *((_BYTE *)v6 + 8);
  *(_QWORD *)v4 = v7;
  *(_BYTE *)(v4 + 8) = (_BYTE)v6;
  sub_10000F7C4(v5, v0 + *(int *)(v2 + 112), v3);
}

void sub_100082F30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = v0 + *(int *)(v2 + 64);
  v6 = *(uint64_t **)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v7 = *v6;
  LOBYTE(v6) = *((_BYTE *)v6 + 8);
  *(_QWORD *)v4 = v7;
  *(_BYTE *)(v4 + 8) = (_BYTE)v6;
  sub_10000F7C4(v5, v0 + *(int *)(v2 + 80), v3);
}

uint64_t sub_100082F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;

  return a13(v13, v14);
}

uint64_t sub_100082F6C()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v0, 1, v1);
}

uint64_t sub_100082F7C()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v0, 1, v1);
}

_QWORD *sub_100082F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;

  LOBYTE(a12) = v33;
  LOBYTE(a10) = v32;
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&a26, a1, a2, a3, a4, a5, v30, a7, v31, v27, a10, v26, a12, v29, v28);
}

uint64_t sub_100082FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  HIDWORD(a16) = a4;
  return static os_log_type_t.fault.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, v16);
}

uint64_t sub_100082FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, 42, 2);
}

uint64_t sub_100082FD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8));
}

void sub_100083000(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10000F7C4(a1, a2, v2);
}

uint64_t sub_100083008(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_100083010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  return a23;
}

uint64_t sub_100083040()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_100083054(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
}

uint64_t sub_100083068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 144) + 104))(v2, a2, *(_QWORD *)(v3 - 136));
}

uint64_t sub_10008307C()
{
  return type metadata accessor for ForecastEntry(0);
}

uint64_t sub_100083084()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t sub_100083090(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void *sub_1000830C0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char __src)
{
  uint64_t v26;

  return memcpy((void *)(v26 + *(int *)(a1 + 36)), &__src, 0x70uLL);
}

void sub_1000830D4(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000830F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_100083100(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(a1, v3, v1);
}

double sub_100083118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return *(double *)&a7;
}

void *sub_100083128(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char __src)
{
  return memcpy(a1, &__src, 0x70uLL);
}

uint64_t sub_100083134(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10008313C()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_100083148()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t sub_100083168@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100083170@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1));
}

uint64_t sub_100083178()
{
  return 0;
}

uint64_t sub_100083184()
{
  uint64_t v0;

  return sub_100007458(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

void sub_100083190(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000168D8(a1, a2, v2);
}

uint64_t sub_100083198()
{
  return type metadata accessor for WidgetContext(0);
}

uint64_t sub_1000831A0(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

uint64_t sub_1000831AC(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

uint64_t sub_1000831B8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1000831C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t))
{
  uint64_t v13;

  return a13(a1, v13);
}

void sub_1000831D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_1000168AC(a1, v2, v1);
}

uint64_t sub_1000831DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;

  v4 = sub_100005D40(&qword_1001C1708);
  v54 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10002325C();
  v7 = v6 - v5;
  v55 = sub_100005D40(&qword_1001C1710);
  v56 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  sub_10002325C();
  v10 = v9 - v8;
  v57 = sub_100005D40(&qword_1001C1718);
  v58 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  sub_10002325C();
  v13 = v12 - v11;
  v14 = type metadata accessor for WeatherTimelineProvider();
  swift_allocObject(v14, 248, 7);
  swift_bridgeObjectRetain_n(a2, 2);
  v59 = sub_100165A84(1, a1, a2);
  v15 = type metadata accessor for LocationContentView(0);
  v16 = sub_1000061B0(&qword_1001C1720, type metadata accessor for LocationContentView, (uint64_t)&unk_100182484);
  v17 = sub_1000061B0(&qword_1001C0640, (uint64_t (*)(uint64_t))type metadata accessor for WeatherTimelineProvider, (uint64_t)&unk_100185D00);
  StaticConfiguration.init<A>(kind:provider:content:)(a1, a2, &v59, sub_10008359C, 0, v15, v14, v16, v17);
  v18 = LocalizedStringKey.init(stringLiteral:)(0x6E6F697461636F4CLL, 0xE800000000000000);
  v22 = sub_100045174(v18, v20, v19 & 1, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = sub_100083734();
  WidgetConfiguration.configurationDisplayName(_:)(v22, v24, v28, v26, v4, v29);
  sub_100016868(v22, v24, v28);
  v30 = swift_bridgeObjectRelease(v26);
  (*(void (**)(uint64_t, uint64_t, __n128))(v54 + 8))(v7, v4, v30);
  v31 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003ALL, 0x8000000100186FE0);
  v35 = sub_100045174(v31, v33, v32 & 1, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v59 = v4;
  v60 = v29;
  v42 = sub_100083814(v35, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.description(_:)(v35, v37, v41, v39, v55, v42);
  sub_100016868(v35, v37, v41);
  v43 = swift_bridgeObjectRelease(v39);
  (*(void (**)(uint64_t, uint64_t, __n128))(v56 + 8))(v10, v55, v43);
  v44 = sub_100005D40(&qword_1001C0280);
  v45 = type metadata accessor for WidgetFamily(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(unsigned __int8 *)(v46 + 80);
  v48 = (v47 + 32) & ~v47;
  v49 = swift_allocObject(v44, v48 + *(_QWORD *)(v46 + 72), v47 | 7);
  *(_OWORD *)(v49 + 16) = xmmword_10017BD10;
  v50 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v46 + 104))(v49 + v48, enum case for WidgetFamily.accessoryInline(_:), v45);
  v59 = v55;
  v60 = v42;
  v51 = sub_100083814(v50, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  WidgetConfiguration.supportedFamilies(_:)(v49, v57, v51);
  v52 = swift_bridgeObjectRelease(v49);
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v58 + 8))(v13, v57, v52);
}

uint64_t sub_10008359C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044F34(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath(&unk_10017D2C0);
  v7 = sub_100005D40(&qword_1001BFA18);
  swift_storeEnumTagMultiPayload(a2, v7, 0);
  v8 = type metadata accessor for LocationContentView(0);
  return sub_100044FCC((uint64_t)v6, (uint64_t)a2 + *(int *)(v8 + 20));
}

uint64_t sub_10008364C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = type metadata accessor for WidgetNames(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10002325C();
  v4 = v3 - v2;
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v3 - v2, enum case for WidgetNames.LocationComplication(_:), v0);
  v6 = WidgetNames.rawValue.getter(v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

ValueMetadata *type metadata accessor for LocationComplicationWidget()
{
  return &type metadata for LocationComplicationWidget;
}

uint64_t sub_1000836F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F268, 1);
}

uint64_t sub_100083708@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10008364C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10008372C()
{
  uint64_t *v0;

  return sub_1000831DC(*v0, v0[1]);
}

unint64_t sub_100083734()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1728;
  if (!qword_1001C1728)
  {
    v1 = sub_100005DC4(&qword_1001C1708);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1728);
  }
  return result;
}

uint64_t sub_10008377C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v0 = sub_100005DC4(&qword_1001C1718);
  v1 = sub_100005DC4(&qword_1001C1710);
  v2 = sub_100005DC4(&qword_1001C1708);
  v3 = sub_100083734();
  v10 = sub_100083808(v3, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, v4, v5, v6, v7, v8, v9, v2);
  v24 = sub_100083808(v10, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, v11, v12, v13, v14, v15, v16, v1);
  return sub_100083808(v24, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, v17, v18, v19, v20, v21, v22, v0);
}

uint64_t sub_100083808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_getOpaqueTypeConformance2(&a9, a2, 1);
}

uint64_t sub_100083814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getOpaqueTypeConformance2(v2 - 112, a2, 1);
}

uint64_t sub_100083820@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v29;

  v3 = sub_100087ED4();
  sub_100029068();
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WeatherDataViewModel(0);
  sub_100029068();
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v29 - v12;
  v14 = type metadata accessor for ForecastEntry.Model(0);
  sub_100029068();
  __chkstk_darwin(v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v1 + *(int *)(v18 + 28), (uint64_t)v17, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v17, v14) == 1)
  {
    sub_100011868((uint64_t)v17, (uint64_t)v13, type metadata accessor for WeatherDataViewModel);
    sub_10000F7C4((uint64_t)v13, (uint64_t)v11, type metadata accessor for WeatherDataViewModel);
    if (swift_getEnumCaseMultiPayload(v11, v7))
    {
      sub_100029030((uint64_t)v11, type metadata accessor for WeatherDataViewModel);
      if (qword_1001BEE98 != -1)
        swift_once(&qword_1001BEE98, sub_100097BD0);
      v19 = type metadata accessor for Logger(0);
      sub_100025184(v19, (uint64_t)qword_1001D9FF0);
      v20 = Logger.logObject.getter();
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)sub_1000290AC();
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Expected aggregate but got instant or sunriseSunset", v22, 2u);
        sub_10002534C((uint64_t)v22);
      }

      sub_100029030((uint64_t)v13, type metadata accessor for WeatherDataViewModel);
      v23 = 1;
    }
    else
    {
      sub_100011868((uint64_t)v11, (uint64_t)v6, type metadata accessor for AggregateWeatherViewModel);
      if (qword_1001BEE98 != -1)
        swift_once(&qword_1001BEE98, sub_100097BD0);
      v24 = type metadata accessor for Logger(0);
      sub_100025184(v24, (uint64_t)qword_1001D9FF0);
      v25 = Logger.logObject.getter();
      v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)sub_1000290AC();
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Making Rain complication view model entry from aggregate weather", v27, 2u);
        sub_10002534C((uint64_t)v27);
      }

      sub_100029030((uint64_t)v13, type metadata accessor for WeatherDataViewModel);
      sub_100011868((uint64_t)v6, a1, type metadata accessor for AggregateWeatherViewModel);
      v23 = 0;
    }
  }
  else if (*v17)
  {
    v23 = 1;
  }
  else
  {
    v23 = 2;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, v23, 2, v3);
}

uint64_t *initializeBufferWithCopyOfBuffer for AdaptiveConditionsComplicationDataStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  _BOOL8 v123;
  uint64_t *v125;
  uint64_t v126;
  int *v127;
  void (*v128)(char *, char *, uint64_t);
  uint64_t v129;
  void (*v130)(char *, char *, uint64_t);

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for AggregateWeatherViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = type metadata accessor for UUID(0);
      v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
      v10(a1, a2, v9);
      v11 = *(int *)(v7 + 20);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      v127 = (int *)v7;
      v128 = (void (*)(char *, char *, uint64_t))v10;
      v15 = *(int *)(v7 + 24);
      v16 = (char *)a1 + v15;
      v125 = a2;
      v17 = (char *)a2 + v15;
      v129 = v9;
      v10((uint64_t *)((char *)a1 + v15), (uint64_t *)v17, v9);
      v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v19 = v18[5];
      v20 = &v16[v19];
      v21 = &v17[v19];
      v22 = type metadata accessor for Date(0);
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
      v23(v20, v21, v22);
      v126 = v22;
      v130 = v23;
      v23(&v16[v18[6]], &v17[v18[6]], v22);
      v24 = v18[7];
      v25 = &v16[v24];
      v26 = &v17[v24];
      v27 = sub_100005D40(&qword_1001BF090);
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      v28(v25, v26, v27);
      v28(&v16[v18[8]], &v17[v18[8]], v27);
      v29 = v18[9];
      v30 = &v16[v29];
      v31 = &v17[v29];
      v32 = *((_QWORD *)v31 + 1);
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *((_QWORD *)v30 + 1) = v32;
      v33 = v18[10];
      v34 = &v16[v33];
      v35 = &v17[v33];
      swift_bridgeObjectRetain(v32);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 1, v27))
      {
        v36 = sub_100005D40(&qword_1001BF098);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        v28(v34, v35, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v27);
      }
      v37 = v18[11];
      v38 = &v16[v37];
      v39 = &v17[v37];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v37], 1, v27))
      {
        v40 = sub_100005D40(&qword_1001BF098);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        v28(v38, v39, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v38, 0, 1, v27);
      }
      v41 = v18[12];
      v42 = &v16[v41];
      v43 = &v17[v41];
      v128(&v16[v41], &v17[v41], v129);
      v44 = (int *)type metadata accessor for ConditionViewModel(0);
      v45 = v44[5];
      v46 = &v42[v45];
      v47 = &v43[v45];
      v48 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
      v49 = v44[6];
      v50 = &v42[v49];
      v51 = &v43[v49];
      v52 = *((_QWORD *)v51 + 1);
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *((_QWORD *)v50 + 1) = v52;
      v53 = v44[7];
      v54 = &v42[v53];
      v55 = &v43[v53];
      v56 = *((_QWORD *)v55 + 1);
      *(_QWORD *)v54 = *(_QWORD *)v55;
      *((_QWORD *)v54 + 1) = v56;
      v42[v44[8]] = v43[v44[8]];
      v42[v44[9]] = v43[v44[9]];
      v42[v44[10]] = v43[v44[10]];
      *(_QWORD *)&v16[v18[13]] = *(_QWORD *)&v17[v18[13]];
      v57 = v18[14];
      v58 = &v16[v57];
      v59 = &v17[v57];
      v60 = type metadata accessor for CloudAltitudeKind(0);
      v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRetain(v56);
      v61(v58, v59, v60);
      v62 = v18[15];
      v63 = &v16[v62];
      v64 = &v17[v62];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v62], 1, v126))
      {
        v65 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        v130(v63, v64, v126);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v126);
      }
      v66 = v18[16];
      v67 = &v16[v66];
      v68 = &v17[v66];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v66], 1, v126))
      {
        v69 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        v130(v67, v68, v126);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v126);
      }
      v70 = v18[17];
      v71 = &v16[v70];
      v72 = &v17[v70];
      v73 = type metadata accessor for UVIndex(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
      v74 = v18[18];
      v75 = &v16[v74];
      v76 = &v17[v74];
      v77 = type metadata accessor for Wind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
      *(_QWORD *)&v16[v18[19]] = *(_QWORD *)&v17[v18[19]];
      v78 = v18[20];
      v79 = &v16[v78];
      v80 = &v17[v78];
      v81 = *((_QWORD *)v80 + 1);
      if (v81)
      {
        *(_QWORD *)v79 = *(_QWORD *)v80;
        *((_QWORD *)v79 + 1) = v81;
        v82 = *((_QWORD *)v80 + 2);
        v83 = *((_QWORD *)v80 + 3);
        v84 = v80[32];
        swift_bridgeObjectRetain(v81);
        sub_100006E58(v82, v83, v84);
        *((_QWORD *)v79 + 2) = v82;
        *((_QWORD *)v79 + 3) = v83;
        v79[32] = v84;
      }
      else
      {
        v85 = *((_OWORD *)v80 + 1);
        *(_OWORD *)v79 = *(_OWORD *)v80;
        *((_OWORD *)v79 + 1) = v85;
        v79[32] = v80[32];
      }
      v86 = v127[7];
      v87 = *(uint64_t *)((char *)v125 + v86);
      *(uint64_t *)((char *)a1 + v86) = v87;
      v88 = v127[8];
      v89 = *(uint64_t *)((char *)v125 + v88);
      *(uint64_t *)((char *)a1 + v88) = v89;
      v90 = v127[9];
      v91 = (char *)a1 + v90;
      v92 = (char *)v125 + v90;
      v93 = (int *)type metadata accessor for AirQualityViewModel(0);
      swift_bridgeObjectRetain(v87);
      swift_bridgeObjectRetain(v89);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v92, 1, (uint64_t)v93))
      {
        v94 = sub_100005D40(&qword_1001BFA30);
        memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        v128(v91, v92, v129);
        v130(&v91[v93[5]], &v92[v93[5]], v126);
        *(_QWORD *)&v91[v93[6]] = *(_QWORD *)&v92[v93[6]];
        v95 = v93[7];
        v96 = &v91[v95];
        v97 = &v92[v95];
        v98 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v96, v97, v98);
        v99 = v93[8];
        v100 = &v91[v99];
        v101 = &v92[v99];
        v102 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v100, v101, v102);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v91, 0, 1, (uint64_t)v93);
      }
      v103 = v127[10];
      v104 = (char *)a1 + v103;
      v105 = (char *)v125 + v103;
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v105, 1, HourPrecipitationChartViewModel))
      {
        v107 = sub_100005D40(&qword_1001BFA38);
        memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v104, v105, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v104, 0, 1, HourPrecipitationChartViewModel);
      }
      v108 = v127[11];
      v109 = *(uint64_t *)((char *)v125 + v108);
      *(uint64_t *)((char *)a1 + v108) = v109;
      v110 = v127[12];
      v111 = (char *)a1 + v110;
      v112 = (char *)v125 + v110;
      *(_QWORD *)v111 = *(_QWORD *)v112;
      *((_WORD *)v111 + 4) = *((_WORD *)v112 + 4);
      v113 = v127[13];
      v114 = (char *)a1 + v113;
      v115 = (char *)v125 + v113;
      v116 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain(v109);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v115, 1, v116))
      {
        v117 = sub_100005D40(&qword_1001BFA28);
        memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 16))(v114, v115, v116);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v114, 0, 1, v116);
      }
      v118 = v127[14];
      v119 = (char *)a1 + v118;
      v120 = (char *)v125 + v118;
      v121 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v120, 1, v121))
      {
        v122 = sub_100005D40(&qword_1001BFA40);
        memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
      }
      else
      {
        v123 = swift_getEnumCaseMultiPayload(v120, v121) == 1;
        v130(v119, v120, v126);
        swift_storeEnumTagMultiPayload(v119, v121, v123);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v119, 0, 1, v121);
      }
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)a1, 0, 2, (uint64_t)v127);
    }
  }
  return a1;
}

uint64_t destroy for AdaptiveConditionsComplicationDataStatus(uint64_t a1)
{
  int *v2;
  uint64_t result;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);

  v2 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  result = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 2, (uint64_t)v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for UUID(0);
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v5(a1, v4);
    v6 = a1 + v2[5];
    v7 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    v8 = a1 + v2[6];
    v5(v8, v4);
    v9 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v10 = v8 + v9[5];
    v11 = type metadata accessor for Date(0);
    v43 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v43(v10, v11);
    v43(v8 + v9[6], v11);
    v12 = v8 + v9[7];
    v13 = sub_100005D40(&qword_1001BF090);
    v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
    v14(v12, v13);
    v14(v8 + v9[8], v13);
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[9] + 8));
    v15 = v8 + v9[10];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v15, 1, v13))
      v14(v15, v13);
    v16 = v8 + v9[11];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v16, 1, v13))
      v14(v16, v13);
    v17 = v8 + v9[12];
    v5(v17, v4);
    v18 = (int *)type metadata accessor for ConditionViewModel(0);
    v19 = v17 + v18[5];
    v20 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
    swift_bridgeObjectRelease(*(_QWORD *)(v17 + v18[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v17 + v18[7] + 8));
    v21 = v8 + v9[14];
    v22 = type metadata accessor for CloudAltitudeKind(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
    v23 = v8 + v9[15];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v23, 1, v11))
      v43(v23, v11);
    v24 = v8 + v9[16];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v24, 1, v11))
      v43(v24, v11);
    v25 = v8 + v9[17];
    v26 = type metadata accessor for UVIndex(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
    v27 = v8 + v9[18];
    v28 = type metadata accessor for Wind(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
    v29 = v8 + v9[20];
    v30 = *(_QWORD *)(v29 + 8);
    if (v30)
    {
      swift_bridgeObjectRelease(v30);
      sub_100007458(*(_QWORD *)(v29 + 16), *(_QWORD *)(v29 + 24), *(_BYTE *)(v29 + 32));
    }
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v2[7]));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v2[8]));
    v31 = a1 + v2[9];
    v32 = (int *)type metadata accessor for AirQualityViewModel(0);
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v31, 1, (uint64_t)v32))
    {
      v5(v31, v4);
      v43(v31 + v32[5], v11);
      v33 = v31 + v32[7];
      v34 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
      v35 = v31 + v32[8];
      v36 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
    }
    v37 = a1 + v2[10];
    HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v37, 1, HourPrecipitationChartViewModel))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v37, HourPrecipitationChartViewModel);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v2[11]));
    v39 = a1 + v2[13];
    v40 = type metadata accessor for URL(0);
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v39, 1, v40))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
    v41 = a1 + v2[14];
    v42 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
    result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v41, 1, v42);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v43)(v41, v11);
  }
  return result;
}

char *initializeWithCopy for AdaptiveConditionsComplicationDataStatus(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  char *v103;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  _BOOL8 v121;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  void (*v126)(char *, char *, uint64_t);
  uint64_t v127;
  void (*v128)(char *, char *, uint64_t);

  v6 = type metadata accessor for AggregateWeatherViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(v6 + 20);
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v124 = (int *)v6;
    v13 = *(int *)(v6 + 24);
    v14 = &a1[v13];
    v15 = &a2[v13];
    v126 = v8;
    v127 = v7;
    v8(&a1[v13], &a2[v13], v7);
    v16 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v17 = v16[5];
    v18 = &v14[v17];
    v19 = &v15[v17];
    v20 = type metadata accessor for Date(0);
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v21(v18, v19, v20);
    v123 = v20;
    v128 = v21;
    v21(&v14[v16[6]], &v15[v16[6]], v20);
    v22 = v16[7];
    v23 = &v14[v22];
    v24 = &v15[v22];
    v25 = sub_100005D40(&qword_1001BF090);
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v26(v23, v24, v25);
    v26(&v14[v16[8]], &v15[v16[8]], v25);
    v27 = v16[9];
    v28 = &v14[v27];
    v29 = &v15[v27];
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    v31 = v16[10];
    v32 = &v14[v31];
    v33 = &v15[v31];
    swift_bridgeObjectRetain(v30);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v33, 1, v25))
    {
      v34 = sub_100005D40(&qword_1001BF098);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v26(v32, v33, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v32, 0, 1, v25);
    }
    v35 = v16[11];
    v36 = &v14[v35];
    v37 = &v15[v35];
    v125 = (uint64_t)a1;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v35], 1, v25))
    {
      v38 = sub_100005D40(&qword_1001BF098);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v26(v36, v37, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v36, 0, 1, v25);
    }
    v39 = v16[12];
    v40 = &v14[v39];
    v41 = &v15[v39];
    v126(&v14[v39], &v15[v39], v127);
    v42 = (int *)type metadata accessor for ConditionViewModel(0);
    v43 = v42[5];
    v44 = &v40[v43];
    v45 = &v41[v43];
    v46 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
    v47 = v42[6];
    v48 = &v40[v47];
    v49 = &v41[v47];
    v50 = *((_QWORD *)v49 + 1);
    *(_QWORD *)v48 = *(_QWORD *)v49;
    *((_QWORD *)v48 + 1) = v50;
    v51 = v42[7];
    v52 = &v40[v51];
    v53 = &v41[v51];
    v54 = *((_QWORD *)v53 + 1);
    *(_QWORD *)v52 = *(_QWORD *)v53;
    *((_QWORD *)v52 + 1) = v54;
    v40[v42[8]] = v41[v42[8]];
    v40[v42[9]] = v41[v42[9]];
    v40[v42[10]] = v41[v42[10]];
    *(_QWORD *)&v14[v16[13]] = *(_QWORD *)&v15[v16[13]];
    v55 = v16[14];
    v56 = &v14[v55];
    v57 = &v15[v55];
    v58 = type metadata accessor for CloudAltitudeKind(0);
    v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRetain(v54);
    v59(v56, v57, v58);
    v60 = v16[15];
    v61 = &v14[v60];
    v62 = &v15[v60];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v60], 1, v123))
    {
      v63 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      v128(v61, v62, v123);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v61, 0, 1, v123);
    }
    v64 = v16[16];
    v65 = &v14[v64];
    v66 = &v15[v64];
    a1 = (char *)v125;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v64], 1, v123))
    {
      v67 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      v128(v65, v66, v123);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v65, 0, 1, v123);
    }
    v68 = v16[17];
    v69 = &v14[v68];
    v70 = &v15[v68];
    v71 = type metadata accessor for UVIndex(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
    v72 = v16[18];
    v73 = &v14[v72];
    v74 = &v15[v72];
    v75 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
    *(_QWORD *)&v14[v16[19]] = *(_QWORD *)&v15[v16[19]];
    v76 = v16[20];
    v77 = &v14[v76];
    v78 = &v15[v76];
    v79 = *((_QWORD *)v78 + 1);
    if (v79)
    {
      *(_QWORD *)v77 = *(_QWORD *)v78;
      *((_QWORD *)v77 + 1) = v79;
      v80 = *((_QWORD *)v78 + 2);
      v81 = *((_QWORD *)v78 + 3);
      v82 = v78[32];
      swift_bridgeObjectRetain(v79);
      sub_100006E58(v80, v81, v82);
      *((_QWORD *)v77 + 2) = v80;
      *((_QWORD *)v77 + 3) = v81;
      v77[32] = v82;
    }
    else
    {
      v83 = *((_OWORD *)v78 + 1);
      *(_OWORD *)v77 = *(_OWORD *)v78;
      *((_OWORD *)v77 + 1) = v83;
      v77[32] = v78[32];
    }
    v84 = v124[7];
    v85 = *(_QWORD *)&a2[v84];
    *(_QWORD *)(v125 + v84) = v85;
    v86 = v124[8];
    v87 = *(_QWORD *)&a2[v86];
    *(_QWORD *)(v125 + v86) = v87;
    v88 = v124[9];
    v89 = (char *)(v125 + v88);
    v90 = &a2[v88];
    v91 = (int *)type metadata accessor for AirQualityViewModel(0);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v87);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v90, 1, (uint64_t)v91))
    {
      v92 = sub_100005D40(&qword_1001BFA30);
      memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    }
    else
    {
      v126(v89, v90, v127);
      v128(&v89[v91[5]], &v90[v91[5]], v123);
      *(_QWORD *)&v89[v91[6]] = *(_QWORD *)&v90[v91[6]];
      v93 = v91[7];
      v94 = &v89[v93];
      v95 = &v90[v93];
      v96 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v94, v95, v96);
      v97 = v91[8];
      v98 = &v89[v97];
      v99 = &v90[v97];
      v100 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 16))(v98, v99, v100);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v89, 0, 1, (uint64_t)v91);
    }
    v101 = v124[10];
    v102 = (void *)(v125 + v101);
    v103 = &a2[v101];
    HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v103, 1, HourPrecipitationChartViewModel))
    {
      v105 = sub_100005D40(&qword_1001BFA38);
      memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v102, v103, HourPrecipitationChartViewModel);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v102, 0, 1, HourPrecipitationChartViewModel);
    }
    v106 = v124[11];
    v107 = *(_QWORD *)&a2[v106];
    *(_QWORD *)(v125 + v106) = v107;
    v108 = v124[12];
    v109 = v125 + v108;
    v110 = &a2[v108];
    *(_QWORD *)v109 = *(_QWORD *)v110;
    *(_WORD *)(v109 + 8) = *((_WORD *)v110 + 4);
    v111 = v124[13];
    v112 = (void *)(v125 + v111);
    v113 = &a2[v111];
    v114 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v107);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v113, 1, v114))
    {
      v115 = sub_100005D40(&qword_1001BFA28);
      memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(v112, v113, v114);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v112, 0, 1, v114);
    }
    v116 = v124[14];
    v117 = (void *)(v125 + v116);
    v118 = &a2[v116];
    v119 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v118, 1, v119))
    {
      v120 = sub_100005D40(&qword_1001BFA40);
      memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    }
    else
    {
      v121 = swift_getEnumCaseMultiPayload(v118, v119) == 1;
      v128((char *)v117, v118, v123);
      swift_storeEnumTagMultiPayload(v117, v119, v121);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v117, 0, 1, v119);
    }
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v125, 0, 2, (uint64_t)v124);
  }
  return a1;
}

uint64_t sub_100084FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  size_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  int v68;
  uint64_t v69;
  void *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  void *v95;
  const void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const void *v138;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  const void *v154;
  uint64_t v155;
  uint64_t v156;
  _BOOL8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  const void *v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  const void *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  const void *v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  char v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  int *v239;
  int v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  const void *v252;
  uint64_t v253;
  int v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _BYTE *v262;
  _BYTE *v263;
  uint64_t v264;
  void *v265;
  const void *v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  int v276;
  _BOOL8 v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  int EnumCaseMultiPayload;
  uint64_t v287;
  void (*v288)(void *, const void *, uint64_t);
  uint64_t v289;
  int *v290;
  uint64_t v291;
  uint64_t v292;
  void (*v293)(uint64_t, uint64_t, uint64_t);
  void (*v294)(uint64_t, uint64_t, uint64_t);
  uint64_t v295;
  uint64_t v296;
  void (*v297)(void *, const void *, uint64_t);
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;

  v6 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  v7 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 2, (uint64_t)v6);
  v8 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a2, 2, (uint64_t)v6);
  if (v7)
  {
    if (!v8)
    {
      v9 = type metadata accessor for UUID(0);
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
      v10(a1, a2, v9);
      v11 = v6[5];
      v12 = a1 + v11;
      v13 = a2 + v11;
      v14 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      v15 = v6[6];
      v16 = a1 + v15;
      v299 = a2;
      v17 = a2 + v15;
      v293 = v10;
      v295 = v9;
      v10(a1 + v15, v17, v9);
      v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v19 = v18[5];
      v20 = v16 + v19;
      v21 = v17 + v19;
      v22 = type metadata accessor for Date(0);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
      v23(v20, v21, v22);
      v291 = v22;
      v297 = (void (*)(void *, const void *, uint64_t))v23;
      v23(v16 + v18[6], v17 + v18[6], v22);
      v24 = v18[7];
      v25 = v16 + v24;
      v26 = v17 + v24;
      v27 = sub_100005D40(&qword_1001BF090);
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      v28(v25, v26, v27);
      v28(v16 + v18[8], v17 + v18[8], v27);
      v29 = v18[9];
      v30 = (_QWORD *)(v16 + v29);
      v31 = (_QWORD *)(v17 + v29);
      *v30 = *v31;
      v32 = v31[1];
      v30[1] = v32;
      v33 = v18[10];
      v34 = (void *)(v16 + v33);
      v35 = (const void *)(v17 + v33);
      swift_bridgeObjectRetain(v32);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 1, v27))
      {
        v36 = sub_100005D40(&qword_1001BF098);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        v28((uint64_t)v34, (uint64_t)v35, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v27);
      }
      v69 = v18[11];
      v70 = (void *)(v16 + v69);
      v71 = (const void *)(v17 + v69);
      v290 = v6;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v69, 1, v27))
      {
        v72 = sub_100005D40(&qword_1001BF098);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        v28((uint64_t)v70, (uint64_t)v71, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v70, 0, 1, v27);
      }
      v73 = v18[12];
      v74 = v16 + v73;
      v75 = v17 + v73;
      v293(v16 + v73, v17 + v73, v295);
      v76 = (int *)type metadata accessor for ConditionViewModel(0);
      v77 = v76[5];
      v78 = v74 + v77;
      v79 = v75 + v77;
      v80 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v78, v79, v80);
      v81 = v76[6];
      v82 = (_QWORD *)(v74 + v81);
      v83 = (_QWORD *)(v75 + v81);
      *v82 = *v83;
      v84 = v83[1];
      v82[1] = v84;
      v85 = v76[7];
      v86 = (_QWORD *)(v74 + v85);
      v87 = (_QWORD *)(v75 + v85);
      *v86 = *v87;
      v88 = v87[1];
      v86[1] = v88;
      *(_BYTE *)(v74 + v76[8]) = *(_BYTE *)(v75 + v76[8]);
      *(_BYTE *)(v74 + v76[9]) = *(_BYTE *)(v75 + v76[9]);
      *(_BYTE *)(v74 + v76[10]) = *(_BYTE *)(v75 + v76[10]);
      *(_QWORD *)(v16 + v18[13]) = *(_QWORD *)(v17 + v18[13]);
      v89 = v18[14];
      v90 = v16 + v89;
      v91 = v17 + v89;
      v92 = type metadata accessor for CloudAltitudeKind(0);
      v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 16);
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRetain(v88);
      v93(v90, v91, v92);
      v94 = v18[15];
      v95 = (void *)(v16 + v94);
      v96 = (const void *)(v17 + v94);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v94, 1, v291))
      {
        v97 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
      }
      else
      {
        v297(v95, v96, v291);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v291);
      }
      v98 = v18[16];
      v99 = (void *)(v16 + v98);
      v100 = (const void *)(v17 + v98);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v98, 1, v291))
      {
        v101 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
      }
      else
      {
        v297(v99, v100, v291);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v291);
      }
      v102 = v18[17];
      v103 = v16 + v102;
      v104 = v17 + v102;
      v105 = type metadata accessor for UVIndex(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v103, v104, v105);
      v106 = v18[18];
      v107 = v16 + v106;
      v108 = v17 + v106;
      v109 = type metadata accessor for Wind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 16))(v107, v108, v109);
      *(_QWORD *)(v16 + v18[19]) = *(_QWORD *)(v17 + v18[19]);
      v110 = v18[20];
      v111 = v16 + v110;
      v112 = (__int128 *)(v17 + v110);
      if (*((_QWORD *)v112 + 1))
      {
        *(_QWORD *)v111 = *(_QWORD *)v112;
        v113 = *((_QWORD *)v112 + 1);
        *(_QWORD *)(v111 + 8) = v113;
        v114 = *((_QWORD *)v112 + 2);
        v115 = *((_QWORD *)v112 + 3);
        v116 = *((_BYTE *)v112 + 32);
        swift_bridgeObjectRetain(v113);
        sub_100006E58(v114, v115, v116);
        *(_QWORD *)(v111 + 16) = v114;
        *(_QWORD *)(v111 + 24) = v115;
        *(_BYTE *)(v111 + 32) = v116;
      }
      else
      {
        v117 = *v112;
        v118 = v112[1];
        *(_BYTE *)(v111 + 32) = *((_BYTE *)v112 + 32);
        *(_OWORD *)v111 = v117;
        *(_OWORD *)(v111 + 16) = v118;
      }
      v119 = v290[7];
      v120 = *(_QWORD *)(v299 + v119);
      *(_QWORD *)(a1 + v119) = v120;
      v121 = v290[8];
      v122 = *(_QWORD *)(v299 + v121);
      *(_QWORD *)(a1 + v121) = v122;
      v123 = v290[9];
      v124 = (char *)(a1 + v123);
      v125 = (char *)(v299 + v123);
      v126 = (int *)type metadata accessor for AirQualityViewModel(0);
      swift_bridgeObjectRetain(v120);
      swift_bridgeObjectRetain(v122);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v125, 1, (uint64_t)v126))
      {
        v127 = sub_100005D40(&qword_1001BFA30);
        memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
      }
      else
      {
        v293((uint64_t)v124, (uint64_t)v125, v295);
        v297(&v124[v126[5]], &v125[v126[5]], v291);
        *(_QWORD *)&v124[v126[6]] = *(_QWORD *)&v125[v126[6]];
        v128 = v126[7];
        v129 = &v124[v128];
        v130 = &v125[v128];
        v131 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
        v132 = v126[8];
        v133 = &v124[v132];
        v134 = &v125[v132];
        v135 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16))(v133, v134, v135);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v124, 0, 1, (uint64_t)v126);
      }
      v136 = v290[10];
      v137 = (void *)(a1 + v136);
      v138 = (const void *)(v299 + v136);
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v138, 1, HourPrecipitationChartViewModel))
      {
        v140 = sub_100005D40(&qword_1001BFA38);
        memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v137, v138, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v137, 0, 1, HourPrecipitationChartViewModel);
      }
      v141 = v290[11];
      v142 = *(_QWORD *)(v299 + v141);
      *(_QWORD *)(a1 + v141) = v142;
      v143 = v290[12];
      v144 = a1 + v143;
      v145 = (uint64_t *)(v299 + v143);
      v146 = *v145;
      *(_WORD *)(v144 + 8) = *((_WORD *)v145 + 4);
      *(_QWORD *)v144 = v146;
      v147 = v290[13];
      v148 = (void *)(a1 + v147);
      v149 = (const void *)(v299 + v147);
      v150 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain(v142);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v149, 1, v150))
      {
        v151 = sub_100005D40(&qword_1001BFA28);
        memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v148, 0, 1, v150);
      }
      v152 = v290[14];
      v153 = (void *)(a1 + v152);
      v154 = (const void *)(v299 + v152);
      v155 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v154, 1, v155))
      {
        v156 = sub_100005D40(&qword_1001BFA40);
        memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
      }
      else
      {
        v157 = swift_getEnumCaseMultiPayload(v154, v155) == 1;
        v297(v153, v154, v291);
        swift_storeEnumTagMultiPayload(v153, v155, v157);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v153, 0, 1, v155);
      }
      v158 = a1;
      v159 = 2;
      v160 = (uint64_t)v290;
      goto LABEL_38;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_100029030(a1, type metadata accessor for AggregateWeatherViewModel);
LABEL_7:
    v37 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
    v38 = (void *)a1;
    v39 = (const void *)a2;
LABEL_8:
    memcpy(v38, v39, v37);
    return a1;
  }
  v40 = type metadata accessor for UUID(0);
  v287 = *(_QWORD *)(v40 - 8);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v287 + 24);
  v41(a1, a2, v40);
  v42 = v6[5];
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v43, v44, v45);
  v46 = v6[6];
  v47 = a1 + v46;
  v300 = a2;
  v48 = a2 + v46;
  v294 = v41;
  v296 = v40;
  v41(a1 + v46, v48, v40);
  v49 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v50 = v49[5];
  v51 = v47 + v50;
  v52 = v48 + v50;
  v53 = type metadata accessor for Date(0);
  v298 = *(_QWORD *)(v53 - 8);
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v298 + 24);
  v54(v51, v52, v53);
  v292 = v53;
  v288 = (void (*)(void *, const void *, uint64_t))v54;
  v54(v47 + v49[6], v48 + v49[6], v53);
  v55 = v49[7];
  v56 = v47 + v55;
  v57 = v48 + v55;
  v58 = sub_100005D40(&qword_1001BF090);
  v289 = *(_QWORD *)(v58 - 8);
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v289 + 24);
  v59(v56, v57, v58);
  v59(v47 + v49[8], v48 + v49[8], v58);
  v60 = v49[9];
  v61 = (_QWORD *)(v47 + v60);
  v62 = (_QWORD *)(v48 + v60);
  *v61 = *v62;
  v63 = v62[1];
  v64 = v61[1];
  v61[1] = v63;
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRelease(v64);
  v65 = v49[10];
  v66 = (void *)(v47 + v65);
  v67 = (const void *)(v48 + v65);
  LODWORD(v54) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v47 + v65, 1, v58);
  v68 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v58);
  if ((_DWORD)v54)
  {
    if (!v68)
    {
      (*(void (**)(void *, const void *, uint64_t))(v289 + 16))(v66, v67, v58);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v58);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v68)
  {
    (*(void (**)(void *, uint64_t))(v289 + 8))(v66, v58);
LABEL_42:
    v162 = sub_100005D40(&qword_1001BF098);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_43;
  }
  v59((uint64_t)v66, (uint64_t)v67, v58);
LABEL_43:
  v163 = v49[11];
  v164 = (void *)(v47 + v163);
  v165 = (const void *)(v48 + v163);
  v166 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v47 + v163, 1, v58);
  v167 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v165, 1, v58);
  if (v166)
  {
    if (!v167)
    {
      (*(void (**)(void *, const void *, uint64_t))(v289 + 16))(v164, v165, v58);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v164, 0, 1, v58);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v167)
  {
    (*(void (**)(void *, uint64_t))(v289 + 8))(v164, v58);
LABEL_48:
    v168 = sub_100005D40(&qword_1001BF098);
    memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
    goto LABEL_49;
  }
  v59((uint64_t)v164, (uint64_t)v165, v58);
LABEL_49:
  v169 = v49[12];
  v170 = v47 + v169;
  v171 = v48 + v169;
  v294(v47 + v169, v48 + v169, v296);
  v172 = (int *)type metadata accessor for ConditionViewModel(0);
  v173 = v172[5];
  v174 = v170 + v173;
  v175 = v171 + v173;
  v176 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v176 - 8) + 24))(v174, v175, v176);
  v177 = v172[6];
  v178 = (_QWORD *)(v170 + v177);
  v179 = (_QWORD *)(v171 + v177);
  *v178 = *v179;
  v180 = v179[1];
  v181 = v178[1];
  v178[1] = v180;
  swift_bridgeObjectRetain(v180);
  swift_bridgeObjectRelease(v181);
  v182 = v172[7];
  v183 = (_QWORD *)(v170 + v182);
  v184 = (_QWORD *)(v171 + v182);
  *v183 = *v184;
  v185 = v184[1];
  v186 = v183[1];
  v183[1] = v185;
  swift_bridgeObjectRetain(v185);
  swift_bridgeObjectRelease(v186);
  *(_BYTE *)(v170 + v172[8]) = *(_BYTE *)(v171 + v172[8]);
  *(_BYTE *)(v170 + v172[9]) = *(_BYTE *)(v171 + v172[9]);
  *(_BYTE *)(v170 + v172[10]) = *(_BYTE *)(v171 + v172[10]);
  *(_QWORD *)(v47 + v49[13]) = *(_QWORD *)(v48 + v49[13]);
  v187 = v49[14];
  v188 = v47 + v187;
  v189 = v48 + v187;
  v190 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v190 - 8) + 24))(v188, v189, v190);
  v191 = v49[15];
  v192 = (void *)(v47 + v191);
  v193 = (const void *)(v48 + v191);
  LODWORD(v188) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v47 + v191, 1, v292);
  v194 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v193, 1, v292);
  if ((_DWORD)v188)
  {
    if (!v194)
    {
      (*(void (**)(void *, const void *, uint64_t))(v298 + 16))(v192, v193, v292);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v192, 0, 1, v292);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v194)
  {
    (*(void (**)(void *, uint64_t))(v298 + 8))(v192, v292);
LABEL_54:
    v195 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v192, v193, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
    goto LABEL_55;
  }
  v288(v192, v193, v292);
LABEL_55:
  v196 = v49[16];
  v197 = (void *)(v47 + v196);
  v198 = (const void *)(v48 + v196);
  v199 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v47 + v196, 1, v292);
  v200 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v198, 1, v292);
  if (v199)
  {
    if (!v200)
    {
      (*(void (**)(void *, const void *, uint64_t))(v298 + 16))(v197, v198, v292);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v197, 0, 1, v292);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v200)
  {
    (*(void (**)(void *, uint64_t))(v298 + 8))(v197, v292);
LABEL_60:
    v201 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
    goto LABEL_61;
  }
  v288(v197, v198, v292);
LABEL_61:
  v202 = v49[17];
  v203 = v47 + v202;
  v204 = v48 + v202;
  v205 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v205 - 8) + 24))(v203, v204, v205);
  v206 = v49[18];
  v207 = v47 + v206;
  v208 = v48 + v206;
  v209 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v209 - 8) + 24))(v207, v208, v209);
  *(_QWORD *)(v47 + v49[19]) = *(_QWORD *)(v48 + v49[19]);
  v210 = v49[20];
  v211 = v47 + v210;
  v212 = (__int128 *)(v48 + v210);
  v213 = *(_QWORD *)(v211 + 8);
  v214 = *((_QWORD *)v212 + 1);
  if (v213)
  {
    if (v214)
    {
      *(_QWORD *)v211 = *(_QWORD *)v212;
      v215 = *((_QWORD *)v212 + 1);
      *(_QWORD *)(v211 + 8) = v215;
      swift_bridgeObjectRetain(v215);
      swift_bridgeObjectRelease(v213);
      v216 = *((_QWORD *)v212 + 2);
      v217 = *((_QWORD *)v212 + 3);
      v218 = *((_BYTE *)v212 + 32);
      sub_100006E58(v216, v217, v218);
      v219 = *(_QWORD *)(v211 + 16);
      v220 = *(_QWORD *)(v211 + 24);
      v221 = *(_BYTE *)(v211 + 32);
      *(_QWORD *)(v211 + 16) = v216;
      *(_QWORD *)(v211 + 24) = v217;
      *(_BYTE *)(v211 + 32) = v218;
      sub_100007458(v219, v220, v221);
    }
    else
    {
      sub_100008EC4(v211);
      v226 = *((_BYTE *)v212 + 32);
      v227 = v212[1];
      *(_OWORD *)v211 = *v212;
      *(_OWORD *)(v211 + 16) = v227;
      *(_BYTE *)(v211 + 32) = v226;
    }
  }
  else if (v214)
  {
    *(_QWORD *)v211 = *(_QWORD *)v212;
    v222 = *((_QWORD *)v212 + 1);
    *(_QWORD *)(v211 + 8) = v222;
    v223 = *((_QWORD *)v212 + 2);
    v224 = *((_QWORD *)v212 + 3);
    v225 = *((_BYTE *)v212 + 32);
    swift_bridgeObjectRetain(v222);
    sub_100006E58(v223, v224, v225);
    *(_QWORD *)(v211 + 16) = v223;
    *(_QWORD *)(v211 + 24) = v224;
    *(_BYTE *)(v211 + 32) = v225;
  }
  else
  {
    v228 = *v212;
    v229 = v212[1];
    *(_BYTE *)(v211 + 32) = *((_BYTE *)v212 + 32);
    *(_OWORD *)v211 = v228;
    *(_OWORD *)(v211 + 16) = v229;
  }
  v230 = v6[7];
  v231 = *(_QWORD *)(v300 + v230);
  v232 = *(_QWORD *)(a1 + v230);
  *(_QWORD *)(a1 + v230) = v231;
  swift_bridgeObjectRetain(v231);
  swift_bridgeObjectRelease(v232);
  v233 = v6[8];
  v234 = *(_QWORD *)(v300 + v233);
  v235 = *(_QWORD *)(a1 + v233);
  *(_QWORD *)(a1 + v233) = v234;
  swift_bridgeObjectRetain(v234);
  swift_bridgeObjectRelease(v235);
  v236 = v6[9];
  v237 = (char *)(a1 + v236);
  v238 = (char *)(v300 + v236);
  v239 = (int *)type metadata accessor for AirQualityViewModel(0);
  LODWORD(v235) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v237, 1, (uint64_t)v239);
  v240 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v238, 1, (uint64_t)v239);
  if ((_DWORD)v235)
  {
    if (!v240)
    {
      (*(void (**)(char *, char *, uint64_t))(v287 + 16))(v237, v238, v296);
      (*(void (**)(char *, char *, uint64_t))(v298 + 16))(&v237[v239[5]], &v238[v239[5]], v292);
      *(_QWORD *)&v237[v239[6]] = *(_QWORD *)&v238[v239[6]];
      v241 = v239[7];
      v242 = &v237[v241];
      v243 = &v238[v241];
      v244 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v244 - 8) + 16))(v242, v243, v244);
      v245 = v239[8];
      v246 = &v237[v245];
      v247 = &v238[v245];
      v248 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 16))(v246, v247, v248);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v237, 0, 1, (uint64_t)v239);
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  if (v240)
  {
    sub_100029030((uint64_t)v237, type metadata accessor for AirQualityViewModel);
LABEL_77:
    v249 = sub_100005D40(&qword_1001BFA30);
    memcpy(v237, v238, *(_QWORD *)(*(_QWORD *)(v249 - 8) + 64));
    goto LABEL_78;
  }
  v294((uint64_t)v237, (uint64_t)v238, v296);
  v288(&v237[v239[5]], &v238[v239[5]], v292);
  *(_QWORD *)&v237[v239[6]] = *(_QWORD *)&v238[v239[6]];
  v278 = v239[7];
  v279 = &v237[v278];
  v280 = &v238[v278];
  v281 = type metadata accessor for AirQualityScale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v281 - 8) + 24))(v279, v280, v281);
  v282 = v239[8];
  v283 = &v237[v282];
  v284 = &v238[v282];
  v285 = type metadata accessor for AirQualityScaleCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v285 - 8) + 24))(v283, v284, v285);
LABEL_78:
  v250 = v6[10];
  v251 = (void *)(a1 + v250);
  v252 = (const void *)(v300 + v250);
  v253 = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v254 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v251, 1, v253);
  v255 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v252, 1, v253);
  if (v254)
  {
    if (!v255)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v253 - 8) + 16))(v251, v252, v253);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v251, 0, 1, v253);
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  v256 = *(_QWORD *)(v253 - 8);
  if (v255)
  {
    (*(void (**)(void *, uint64_t))(v256 + 8))(v251, v253);
LABEL_83:
    v257 = sub_100005D40(&qword_1001BFA38);
    memcpy(v251, v252, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
    goto LABEL_84;
  }
  (*(void (**)(void *, const void *, uint64_t))(v256 + 24))(v251, v252, v253);
LABEL_84:
  v258 = v6[11];
  v259 = *(_QWORD *)(v300 + v258);
  v260 = *(_QWORD *)(a1 + v258);
  *(_QWORD *)(a1 + v258) = v259;
  swift_bridgeObjectRetain(v259);
  swift_bridgeObjectRelease(v260);
  v261 = v6[12];
  v262 = (_BYTE *)(a1 + v261);
  v263 = (_BYTE *)(v300 + v261);
  *v262 = *v263;
  v262[1] = v263[1];
  v262[2] = v263[2];
  v262[3] = v263[3];
  v262[4] = v263[4];
  v262[5] = v263[5];
  v262[6] = v263[6];
  v262[7] = v263[7];
  v262[8] = v263[8];
  v262[9] = v263[9];
  v264 = v6[13];
  v265 = (void *)(a1 + v264);
  v266 = (const void *)(v300 + v264);
  v267 = type metadata accessor for URL(0);
  LODWORD(v260) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v265, 1, v267);
  v268 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v266, 1, v267);
  if ((_DWORD)v260)
  {
    if (!v268)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v267 - 8) + 16))(v265, v266, v267);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v265, 0, 1, v267);
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  v269 = *(_QWORD *)(v267 - 8);
  if (v268)
  {
    (*(void (**)(void *, uint64_t))(v269 + 8))(v265, v267);
LABEL_89:
    v270 = sub_100005D40(&qword_1001BFA28);
    memcpy(v265, v266, *(_QWORD *)(*(_QWORD *)(v270 - 8) + 64));
    goto LABEL_90;
  }
  (*(void (**)(void *, const void *, uint64_t))(v269 + 24))(v265, v266, v267);
LABEL_90:
  v271 = v6[14];
  v272 = a1 + v271;
  v273 = v300 + v271;
  v274 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  v275 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v272, 1, v274);
  v276 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v273, 1, v274);
  if (v275)
  {
    if (!v276)
    {
      v277 = swift_getEnumCaseMultiPayload(v273, v274) == 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v298 + 16))(v272, v273, v292);
      swift_storeEnumTagMultiPayload(v272, v274, v277);
      v158 = v272;
      v159 = 1;
      v160 = v274;
LABEL_38:
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v158, 0, v159, v160);
      return a1;
    }
    goto LABEL_95;
  }
  if (v276)
  {
    sub_100029030(v272, type metadata accessor for AggregateWeatherViewModel.SunEvent);
LABEL_95:
    v37 = *(_QWORD *)(*(_QWORD *)(sub_100005D40(&qword_1001BFA40) - 8) + 64);
    v38 = (void *)v272;
    v39 = (const void *)v273;
    goto LABEL_8;
  }
  if (a1 != v300)
  {
    sub_100029030(v272, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v273, v274);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v298 + 16))(v272, v273, v292);
    swift_storeEnumTagMultiPayload(v272, v274, EnumCaseMultiPayload == 1);
  }
  return a1;
}

char *initializeWithTake for AdaptiveConditionsComplicationDataStatus(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v100;
  int *v101;
  void (*v102)(char *, char *, uint64_t);
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);

  v6 = type metadata accessor for AggregateWeatherViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    v9 = *(int *)(v6 + 20);
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    v101 = (int *)v6;
    v102 = v8;
    v13 = *(int *)(v6 + 24);
    v14 = &a1[v13];
    v15 = &a2[v13];
    v103 = v7;
    v8(&a1[v13], &a2[v13], v7);
    v16 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v17 = v16[5];
    v18 = &v14[v17];
    v19 = &v15[v17];
    v20 = type metadata accessor for Date(0);
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
    v21(v18, v19, v20);
    v100 = v20;
    v104 = v21;
    v21(&v14[v16[6]], &v15[v16[6]], v20);
    v22 = v16[7];
    v23 = &v14[v22];
    v24 = &v15[v22];
    v25 = sub_100005D40(&qword_1001BF090);
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
    v26(v23, v24, v25);
    v26(&v14[v16[8]], &v15[v16[8]], v25);
    *(_OWORD *)&v14[v16[9]] = *(_OWORD *)&v15[v16[9]];
    v27 = v16[10];
    v28 = &v14[v27];
    v29 = &v15[v27];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v27], 1, v25))
    {
      v30 = sub_100005D40(&qword_1001BF098);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v26(v28, v29, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v28, 0, 1, v25);
    }
    v31 = v16[11];
    v32 = &v14[v31];
    v33 = &v15[v31];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v31], 1, v25))
    {
      v34 = sub_100005D40(&qword_1001BF098);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v26(v32, v33, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v32, 0, 1, v25);
    }
    v35 = v16[12];
    v36 = &v14[v35];
    v37 = &v15[v35];
    v102(&v14[v35], &v15[v35], v103);
    v38 = (int *)type metadata accessor for ConditionViewModel(0);
    v39 = v38[5];
    v40 = &v36[v39];
    v41 = &v37[v39];
    v42 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
    *(_OWORD *)&v36[v38[6]] = *(_OWORD *)&v37[v38[6]];
    *(_OWORD *)&v36[v38[7]] = *(_OWORD *)&v37[v38[7]];
    v36[v38[8]] = v37[v38[8]];
    v36[v38[9]] = v37[v38[9]];
    v36[v38[10]] = v37[v38[10]];
    *(_QWORD *)&v14[v16[13]] = *(_QWORD *)&v15[v16[13]];
    v43 = v16[14];
    v44 = &v14[v43];
    v45 = &v15[v43];
    v46 = type metadata accessor for CloudAltitudeKind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
    v47 = v16[15];
    v48 = &v14[v47];
    v49 = &v15[v47];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v47], 1, v100))
    {
      v50 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      v104(v48, v49, v100);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v48, 0, 1, v100);
    }
    v51 = v16[16];
    v52 = &v14[v51];
    v53 = &v15[v51];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v51], 1, v100))
    {
      v54 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      v104(v52, v53, v100);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v52, 0, 1, v100);
    }
    v55 = v16[17];
    v56 = &v14[v55];
    v57 = &v15[v55];
    v58 = type metadata accessor for UVIndex(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v56, v57, v58);
    v59 = v16[18];
    v60 = &v14[v59];
    v61 = &v15[v59];
    v62 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v60, v61, v62);
    *(_QWORD *)&v14[v16[19]] = *(_QWORD *)&v15[v16[19]];
    v63 = v16[20];
    v64 = &v14[v63];
    v65 = &v15[v63];
    v64[32] = v65[32];
    v66 = *((_OWORD *)v65 + 1);
    *(_OWORD *)v64 = *(_OWORD *)v65;
    *((_OWORD *)v64 + 1) = v66;
    *(_QWORD *)&a1[v101[7]] = *(_QWORD *)&a2[v101[7]];
    *(_QWORD *)&a1[v101[8]] = *(_QWORD *)&a2[v101[8]];
    v67 = v101[9];
    v68 = &a1[v67];
    v69 = &a2[v67];
    v70 = (int *)type metadata accessor for AirQualityViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v69, 1, (uint64_t)v70))
    {
      v71 = sub_100005D40(&qword_1001BFA30);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      v102(v68, v69, v103);
      v104(&v68[v70[5]], &v69[v70[5]], v100);
      *(_QWORD *)&v68[v70[6]] = *(_QWORD *)&v69[v70[6]];
      v72 = v70[7];
      v73 = &v68[v72];
      v74 = &v69[v72];
      v75 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
      v76 = v70[8];
      v77 = &v68[v76];
      v78 = &v69[v76];
      v79 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v68, 0, 1, (uint64_t)v70);
    }
    v80 = v101[10];
    v81 = &a1[v80];
    v82 = &a2[v80];
    HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v82, 1, HourPrecipitationChartViewModel))
    {
      v84 = sub_100005D40(&qword_1001BFA38);
      memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v81, v82, HourPrecipitationChartViewModel);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v81, 0, 1, HourPrecipitationChartViewModel);
    }
    *(_QWORD *)&a1[v101[11]] = *(_QWORD *)&a2[v101[11]];
    v85 = v101[12];
    v86 = &a1[v85];
    v87 = &a2[v85];
    *(_QWORD *)v86 = *(_QWORD *)v87;
    *((_WORD *)v86 + 4) = *((_WORD *)v87 + 4);
    v88 = v101[13];
    v89 = &a1[v88];
    v90 = &a2[v88];
    v91 = type metadata accessor for URL(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v90, 1, v91))
    {
      v92 = sub_100005D40(&qword_1001BFA28);
      memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 32))(v89, v90, v91);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v89, 0, 1, v91);
    }
    v93 = v101[14];
    v94 = &a1[v93];
    v95 = &a2[v93];
    v96 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v95, 1, v96))
    {
      v97 = sub_100005D40(&qword_1001BFA40);
      memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      v98 = swift_getEnumCaseMultiPayload(v95, v96) == 1;
      v104(v94, v95, v100);
      swift_storeEnumTagMultiPayload(v94, v96, v98);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v94, 0, 1, v96);
    }
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)a1, 0, 2, (uint64_t)v101);
  }
  return a1;
}

uint64_t sub_100086B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  int v65;
  uint64_t v66;
  void *v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const void *v117;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const void *v130;
  uint64_t v131;
  uint64_t v132;
  _BOOL8 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  const void *v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  const void *v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  const void *v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  int *v205;
  int v206;
  int v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  const void *v219;
  uint64_t v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  const void *v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  _BOOL8 v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  int EnumCaseMultiPayload;
  uint64_t v254;
  void (*v255)(void *, const void *, uint64_t);
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void (*v259)(uint64_t, uint64_t, uint64_t);
  void (*v260)(uint64_t, uint64_t, uint64_t);
  uint64_t v261;
  uint64_t v262;
  void (*v263)(void *, const void *, uint64_t);
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;

  v6 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  v7 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 2, (uint64_t)v6);
  v8 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a2, 2, (uint64_t)v6);
  if (v7)
  {
    if (!v8)
    {
      v9 = type metadata accessor for UUID(0);
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
      v10(a1, a2, v9);
      v11 = v6[5];
      v12 = a1 + v11;
      v13 = a2 + v11;
      v14 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      v15 = v6[6];
      v16 = a1 + v15;
      v265 = a2;
      v17 = a2 + v15;
      v259 = v10;
      v261 = v9;
      v10(a1 + v15, a2 + v15, v9);
      v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v19 = v18[5];
      v20 = v16 + v19;
      v21 = v17 + v19;
      v22 = type metadata accessor for Date(0);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
      v23(v20, v21, v22);
      v257 = v22;
      v263 = (void (*)(void *, const void *, uint64_t))v23;
      v23(v16 + v18[6], v17 + v18[6], v22);
      v24 = v18[7];
      v25 = v16 + v24;
      v26 = v17 + v24;
      v27 = sub_100005D40(&qword_1001BF090);
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
      v28(v25, v26, v27);
      v28(v16 + v18[8], v17 + v18[8], v27);
      *(_OWORD *)(v16 + v18[9]) = *(_OWORD *)(v17 + v18[9]);
      v29 = v18[10];
      v30 = (void *)(v16 + v29);
      v31 = (const void *)(v17 + v29);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v29, 1, v27))
      {
        v32 = sub_100005D40(&qword_1001BF098);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        v28((uint64_t)v30, (uint64_t)v31, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v27);
      }
      v66 = v18[11];
      v67 = (void *)(v16 + v66);
      v68 = (const void *)(v17 + v66);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v66, 1, v27))
      {
        v69 = sub_100005D40(&qword_1001BF098);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        v28((uint64_t)v67, (uint64_t)v68, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v27);
      }
      v70 = v18[12];
      v71 = v16 + v70;
      v72 = v17 + v70;
      v259(v16 + v70, v17 + v70, v261);
      v73 = (int *)type metadata accessor for ConditionViewModel(0);
      v74 = v73[5];
      v75 = v71 + v74;
      v76 = v72 + v74;
      v77 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
      *(_OWORD *)(v71 + v73[6]) = *(_OWORD *)(v72 + v73[6]);
      *(_OWORD *)(v71 + v73[7]) = *(_OWORD *)(v72 + v73[7]);
      *(_BYTE *)(v71 + v73[8]) = *(_BYTE *)(v72 + v73[8]);
      *(_BYTE *)(v71 + v73[9]) = *(_BYTE *)(v72 + v73[9]);
      *(_BYTE *)(v71 + v73[10]) = *(_BYTE *)(v72 + v73[10]);
      *(_QWORD *)(v16 + v18[13]) = *(_QWORD *)(v17 + v18[13]);
      v78 = v18[14];
      v79 = v16 + v78;
      v80 = v17 + v78;
      v81 = type metadata accessor for CloudAltitudeKind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v79, v80, v81);
      v82 = v18[15];
      v83 = (void *)(v16 + v82);
      v84 = (const void *)(v17 + v82);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v82, 1, v257))
      {
        v85 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v263(v83, v84, v257);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v83, 0, 1, v257);
      }
      v86 = v18[16];
      v87 = (void *)(v16 + v86);
      v88 = (const void *)(v17 + v86);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v86, 1, v257))
      {
        v89 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
      }
      else
      {
        v263(v87, v88, v257);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v87, 0, 1, v257);
      }
      v90 = v18[17];
      v91 = v16 + v90;
      v92 = v17 + v90;
      v93 = type metadata accessor for UVIndex(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(v91, v92, v93);
      v94 = v18[18];
      v95 = v16 + v94;
      v96 = v17 + v94;
      v97 = type metadata accessor for Wind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 32))(v95, v96, v97);
      *(_QWORD *)(v16 + v18[19]) = *(_QWORD *)(v17 + v18[19]);
      v98 = v18[20];
      v99 = v16 + v98;
      v100 = v17 + v98;
      *(_BYTE *)(v99 + 32) = *(_BYTE *)(v100 + 32);
      v101 = *(_OWORD *)(v100 + 16);
      *(_OWORD *)v99 = *(_OWORD *)v100;
      *(_OWORD *)(v99 + 16) = v101;
      *(_QWORD *)(a1 + v6[7]) = *(_QWORD *)(v265 + v6[7]);
      *(_QWORD *)(a1 + v6[8]) = *(_QWORD *)(v265 + v6[8]);
      v102 = v6[9];
      v103 = (char *)(a1 + v102);
      v104 = (char *)(v265 + v102);
      v105 = (int *)type metadata accessor for AirQualityViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v104, 1, (uint64_t)v105))
      {
        v106 = sub_100005D40(&qword_1001BFA30);
        memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
      }
      else
      {
        v259((uint64_t)v103, (uint64_t)v104, v261);
        v263(&v103[v105[5]], &v104[v105[5]], v257);
        *(_QWORD *)&v103[v105[6]] = *(_QWORD *)&v104[v105[6]];
        v107 = v105[7];
        v108 = &v103[v107];
        v109 = &v104[v107];
        v110 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 32))(v108, v109, v110);
        v111 = v105[8];
        v112 = &v103[v111];
        v113 = &v104[v111];
        v114 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 32))(v112, v113, v114);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v103, 0, 1, (uint64_t)v105);
      }
      v115 = v6[10];
      v116 = (void *)(a1 + v115);
      v117 = (const void *)(v265 + v115);
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v117, 1, HourPrecipitationChartViewModel))
      {
        v119 = sub_100005D40(&qword_1001BFA38);
        memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v116, v117, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v116, 0, 1, HourPrecipitationChartViewModel);
      }
      *(_QWORD *)(a1 + v6[11]) = *(_QWORD *)(v265 + v6[11]);
      v120 = v6[12];
      v121 = a1 + v120;
      v122 = v265 + v120;
      *(_QWORD *)v121 = *(_QWORD *)v122;
      *(_WORD *)(v121 + 8) = *(_WORD *)(v122 + 8);
      v123 = v6[13];
      v124 = (void *)(a1 + v123);
      v125 = (const void *)(v265 + v123);
      v126 = type metadata accessor for URL(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v125, 1, v126))
      {
        v127 = sub_100005D40(&qword_1001BFA28);
        memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v126 - 8) + 32))(v124, v125, v126);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v124, 0, 1, v126);
      }
      v128 = v6[14];
      v129 = (void *)(a1 + v128);
      v130 = (const void *)(v265 + v128);
      v131 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v130, 1, v131))
      {
        v132 = sub_100005D40(&qword_1001BFA40);
        memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
      }
      else
      {
        v133 = swift_getEnumCaseMultiPayload(v130, v131) == 1;
        v263(v129, v130, v257);
        swift_storeEnumTagMultiPayload(v129, v131, v133);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v129, 0, 1, v131);
      }
      v134 = a1;
      v135 = 2;
      v136 = (uint64_t)v6;
      goto LABEL_35;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_100029030(a1, type metadata accessor for AggregateWeatherViewModel);
LABEL_7:
    v33 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
    v34 = (void *)a1;
    v35 = (const void *)a2;
LABEL_8:
    memcpy(v34, v35, v33);
    return a1;
  }
  v36 = type metadata accessor for UUID(0);
  v254 = *(_QWORD *)(v36 - 8);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v254 + 40);
  v37(a1, a2, v36);
  v38 = v6[5];
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 40))(v39, v40, v41);
  v42 = v6[6];
  v43 = a1 + v42;
  v266 = a2;
  v44 = a2 + v42;
  v260 = v37;
  v262 = v36;
  v37(a1 + v42, a2 + v42, v36);
  v45 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v46 = v45[5];
  v47 = v43 + v46;
  v48 = v44 + v46;
  v49 = type metadata accessor for Date(0);
  v264 = *(_QWORD *)(v49 - 8);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 40);
  v50(v47, v48, v49);
  v258 = v49;
  v255 = (void (*)(void *, const void *, uint64_t))v50;
  v50(v43 + v45[6], v44 + v45[6], v49);
  v51 = v45[7];
  v52 = v43 + v51;
  v53 = v44 + v51;
  v54 = sub_100005D40(&qword_1001BF090);
  v256 = *(_QWORD *)(v54 - 8);
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v256 + 40);
  v55(v52, v53, v54);
  v55(v43 + v45[8], v44 + v45[8], v54);
  v56 = v45[9];
  v57 = (_QWORD *)(v43 + v56);
  v58 = (uint64_t *)(v44 + v56);
  v60 = *v58;
  v59 = v58[1];
  v61 = v57[1];
  *v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease(v61);
  v62 = v45[10];
  v63 = (void *)(v43 + v62);
  v64 = (const void *)(v44 + v62);
  LODWORD(v50) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v43 + v62, 1, v54);
  v65 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v64, 1, v54);
  if ((_DWORD)v50)
  {
    if (!v65)
    {
      (*(void (**)(void *, const void *, uint64_t))(v256 + 32))(v63, v64, v54);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v54);
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (v65)
  {
    (*(void (**)(void *, uint64_t))(v256 + 8))(v63, v54);
LABEL_39:
    v138 = sub_100005D40(&qword_1001BF098);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
    goto LABEL_40;
  }
  v55((uint64_t)v63, (uint64_t)v64, v54);
LABEL_40:
  v139 = v45[11];
  v140 = (void *)(v43 + v139);
  v141 = (const void *)(v44 + v139);
  v142 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v43 + v139, 1, v54);
  v143 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v141, 1, v54);
  if (v142)
  {
    if (!v143)
    {
      (*(void (**)(void *, const void *, uint64_t))(v256 + 32))(v140, v141, v54);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v140, 0, 1, v54);
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if (v143)
  {
    (*(void (**)(void *, uint64_t))(v256 + 8))(v140, v54);
LABEL_45:
    v144 = sub_100005D40(&qword_1001BF098);
    memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
    goto LABEL_46;
  }
  v55((uint64_t)v140, (uint64_t)v141, v54);
LABEL_46:
  v145 = v45[12];
  v146 = v43 + v145;
  v147 = v44 + v145;
  v260(v43 + v145, v44 + v145, v262);
  v148 = (int *)type metadata accessor for ConditionViewModel(0);
  v149 = v148[5];
  v150 = v146 + v149;
  v151 = v147 + v149;
  v152 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 40))(v150, v151, v152);
  v153 = v148[6];
  v154 = (_QWORD *)(v146 + v153);
  v155 = (uint64_t *)(v147 + v153);
  v157 = *v155;
  v156 = v155[1];
  v158 = v154[1];
  *v154 = v157;
  v154[1] = v156;
  swift_bridgeObjectRelease(v158);
  v159 = v148[7];
  v160 = (_QWORD *)(v146 + v159);
  v161 = (uint64_t *)(v147 + v159);
  v163 = *v161;
  v162 = v161[1];
  v164 = v160[1];
  *v160 = v163;
  v160[1] = v162;
  swift_bridgeObjectRelease(v164);
  *(_BYTE *)(v146 + v148[8]) = *(_BYTE *)(v147 + v148[8]);
  *(_BYTE *)(v146 + v148[9]) = *(_BYTE *)(v147 + v148[9]);
  *(_BYTE *)(v146 + v148[10]) = *(_BYTE *)(v147 + v148[10]);
  *(_QWORD *)(v43 + v45[13]) = *(_QWORD *)(v44 + v45[13]);
  v165 = v45[14];
  v166 = v43 + v165;
  v167 = v44 + v165;
  v168 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v168 - 8) + 40))(v166, v167, v168);
  v169 = v45[15];
  v170 = (void *)(v43 + v169);
  v171 = (const void *)(v44 + v169);
  LODWORD(v166) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v43 + v169, 1, v258);
  v172 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v171, 1, v258);
  if ((_DWORD)v166)
  {
    if (!v172)
    {
      (*(void (**)(void *, const void *, uint64_t))(v264 + 32))(v170, v171, v258);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v170, 0, 1, v258);
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (v172)
  {
    (*(void (**)(void *, uint64_t))(v264 + 8))(v170, v258);
LABEL_51:
    v173 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    goto LABEL_52;
  }
  v255(v170, v171, v258);
LABEL_52:
  v174 = v45[16];
  v175 = (void *)(v43 + v174);
  v176 = (const void *)(v44 + v174);
  v177 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v43 + v174, 1, v258);
  v178 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v176, 1, v258);
  if (v177)
  {
    if (!v178)
    {
      (*(void (**)(void *, const void *, uint64_t))(v264 + 32))(v175, v176, v258);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v175, 0, 1, v258);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v178)
  {
    (*(void (**)(void *, uint64_t))(v264 + 8))(v175, v258);
LABEL_57:
    v179 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
    goto LABEL_58;
  }
  v255(v175, v176, v258);
LABEL_58:
  v180 = v45[17];
  v181 = v43 + v180;
  v182 = v44 + v180;
  v183 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v183 - 8) + 40))(v181, v182, v183);
  v184 = v45[18];
  v185 = v43 + v184;
  v186 = v44 + v184;
  v187 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v187 - 8) + 40))(v185, v186, v187);
  *(_QWORD *)(v43 + v45[19]) = *(_QWORD *)(v44 + v45[19]);
  v188 = v45[20];
  v189 = v43 + v188;
  v190 = v44 + v188;
  v191 = *(_QWORD *)(v43 + v188 + 8);
  if (v191)
  {
    v192 = *(_QWORD *)(v190 + 8);
    if (v192)
    {
      *(_QWORD *)v189 = *(_QWORD *)v190;
      *(_QWORD *)(v189 + 8) = v192;
      swift_bridgeObjectRelease(v191);
      v193 = *(_BYTE *)(v190 + 32);
      v194 = *(_QWORD *)(v189 + 16);
      v195 = *(_QWORD *)(v189 + 24);
      v196 = *(_BYTE *)(v189 + 32);
      *(_OWORD *)(v189 + 16) = *(_OWORD *)(v190 + 16);
      *(_BYTE *)(v189 + 32) = v193;
      sub_100007458(v194, v195, v196);
      goto LABEL_63;
    }
    sub_100008EC4(v189);
  }
  v197 = *(_OWORD *)(v190 + 16);
  *(_OWORD *)v189 = *(_OWORD *)v190;
  *(_OWORD *)(v189 + 16) = v197;
  *(_BYTE *)(v189 + 32) = *(_BYTE *)(v190 + 32);
LABEL_63:
  v198 = v6[7];
  v199 = *(_QWORD *)(a1 + v198);
  *(_QWORD *)(a1 + v198) = *(_QWORD *)(v266 + v198);
  swift_bridgeObjectRelease(v199);
  v200 = v6[8];
  v201 = *(_QWORD *)(a1 + v200);
  *(_QWORD *)(a1 + v200) = *(_QWORD *)(v266 + v200);
  swift_bridgeObjectRelease(v201);
  v202 = v6[9];
  v203 = (char *)(a1 + v202);
  v204 = (char *)(v266 + v202);
  v205 = (int *)type metadata accessor for AirQualityViewModel(0);
  v206 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v203, 1, (uint64_t)v205);
  v207 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v204, 1, (uint64_t)v205);
  if (v206)
  {
    if (!v207)
    {
      (*(void (**)(char *, char *, uint64_t))(v254 + 32))(v203, v204, v262);
      (*(void (**)(char *, char *, uint64_t))(v264 + 32))(&v203[v205[5]], &v204[v205[5]], v258);
      *(_QWORD *)&v203[v205[6]] = *(_QWORD *)&v204[v205[6]];
      v208 = v205[7];
      v209 = &v203[v208];
      v210 = &v204[v208];
      v211 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v211 - 8) + 32))(v209, v210, v211);
      v212 = v205[8];
      v213 = &v203[v212];
      v214 = &v204[v212];
      v215 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v215 - 8) + 32))(v213, v214, v215);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v203, 0, 1, (uint64_t)v205);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v207)
  {
    sub_100029030((uint64_t)v203, type metadata accessor for AirQualityViewModel);
LABEL_68:
    v216 = sub_100005D40(&qword_1001BFA30);
    memcpy(v203, v204, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
    goto LABEL_69;
  }
  v260((uint64_t)v203, (uint64_t)v204, v262);
  v255(&v203[v205[5]], &v204[v205[5]], v258);
  *(_QWORD *)&v203[v205[6]] = *(_QWORD *)&v204[v205[6]];
  v245 = v205[7];
  v246 = &v203[v245];
  v247 = &v204[v245];
  v248 = type metadata accessor for AirQualityScale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 40))(v246, v247, v248);
  v249 = v205[8];
  v250 = &v203[v249];
  v251 = &v204[v249];
  v252 = type metadata accessor for AirQualityScaleCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v252 - 8) + 40))(v250, v251, v252);
LABEL_69:
  v217 = v6[10];
  v218 = (void *)(a1 + v217);
  v219 = (const void *)(v266 + v217);
  v220 = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v221 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v218, 1, v220);
  v222 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v219, 1, v220);
  if (v221)
  {
    if (!v222)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v220 - 8) + 32))(v218, v219, v220);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v218, 0, 1, v220);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  v223 = *(_QWORD *)(v220 - 8);
  if (v222)
  {
    (*(void (**)(void *, uint64_t))(v223 + 8))(v218, v220);
LABEL_74:
    v224 = sub_100005D40(&qword_1001BFA38);
    memcpy(v218, v219, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(void *, const void *, uint64_t))(v223 + 40))(v218, v219, v220);
LABEL_75:
  v225 = v6[11];
  v226 = *(_QWORD *)(a1 + v225);
  *(_QWORD *)(a1 + v225) = *(_QWORD *)(v266 + v225);
  swift_bridgeObjectRelease(v226);
  v227 = v6[12];
  v228 = a1 + v227;
  v229 = v266 + v227;
  *(_QWORD *)v228 = *(_QWORD *)v229;
  *(_WORD *)(v228 + 8) = *(_WORD *)(v229 + 8);
  v230 = v6[13];
  v231 = (void *)(a1 + v230);
  v232 = (const void *)(v266 + v230);
  v233 = type metadata accessor for URL(0);
  v234 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v231, 1, v233);
  v235 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v232, 1, v233);
  if (v234)
  {
    if (!v235)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v233 - 8) + 32))(v231, v232, v233);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v231, 0, 1, v233);
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  v236 = *(_QWORD *)(v233 - 8);
  if (v235)
  {
    (*(void (**)(void *, uint64_t))(v236 + 8))(v231, v233);
LABEL_80:
    v237 = sub_100005D40(&qword_1001BFA28);
    memcpy(v231, v232, *(_QWORD *)(*(_QWORD *)(v237 - 8) + 64));
    goto LABEL_81;
  }
  (*(void (**)(void *, const void *, uint64_t))(v236 + 40))(v231, v232, v233);
LABEL_81:
  v238 = v6[14];
  v239 = a1 + v238;
  v240 = v266 + v238;
  v241 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  v242 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v239, 1, v241);
  v243 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v240, 1, v241);
  if (v242)
  {
    if (!v243)
    {
      v244 = swift_getEnumCaseMultiPayload(v240, v241) == 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 32))(v239, v240, v258);
      swift_storeEnumTagMultiPayload(v239, v241, v244);
      v134 = v239;
      v135 = 1;
      v136 = v241;
LABEL_35:
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v134, 0, v135, v136);
      return a1;
    }
    goto LABEL_86;
  }
  if (v243)
  {
    sub_100029030(v239, type metadata accessor for AggregateWeatherViewModel.SunEvent);
LABEL_86:
    v33 = *(_QWORD *)(*(_QWORD *)(sub_100005D40(&qword_1001BFA40) - 8) + 64);
    v34 = (void *)v239;
    v35 = (const void *)v240;
    goto LABEL_8;
  }
  if (a1 != v266)
  {
    sub_100029030(v239, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v240, v241);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 32))(v239, v240, v258);
    swift_storeEnumTagMultiPayload(v239, v241, EnumCaseMultiPayload == 1);
  }
  return a1;
}

uint64_t sub_100087D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100087D4C);
}

uint64_t sub_100087D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_100087ED4();
  v5 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t sub_100087D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100087D98);
}

uint64_t sub_100087D98(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = sub_100087ED4();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, v5, a3, v6);
}

uint64_t sub_100087DE0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AggregateWeatherViewModel(0);
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 2, v2);
}

uint64_t sub_100087E10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AggregateWeatherViewModel(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, 2, v4);
}

uint64_t type metadata accessor for RainComplicationDataStatus(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C17A0;
  if (!qword_1001C17A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RainComplicationDataStatus);
  return result;
}

uint64_t sub_100087E80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for AggregateWeatherViewModel(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 2);
    return 0;
  }
  return result;
}

uint64_t sub_100087ED4()
{
  return type metadata accessor for AggregateWeatherViewModel(0);
}

void sub_100087EDC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100087F10()
{
  uint64_t v0;
  uint64_t v1;

  ((void (*)(float, double))TimelineEntryRelevance.init(score:duration:))(10.0, 0.0);
  v1 = type metadata accessor for TimelineEntryRelevance(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 0, 1, v1);
}

uint64_t sub_100087F50()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for RelevanceProvider()
{
  return objc_opt_self(_TtC13WeatherWidget17RelevanceProvider);
}

uint64_t sub_100087F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100087FF4(a1, 0x2C657369726E7553, (void *)0xEB00000000402520, 0x2E657369726E7573, 0xEC0000006C6C6966, a2);
}

uint64_t sub_100087FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100087FF4(a1, 0x202C7465736E7553, (void *)0xEA00000000004025, 0x662E7465736E7573, 0xEB000000006C6C69, a2);
}

uint64_t sub_100087FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  id v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  char v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD *v31;
  uint64_t *v32;
  Swift::String v33;

  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v12 = (id)qword_1001DA1E8;
  v33._object = (void *)0x80000001001870B0;
  v13._countAndFlagsBits = a2;
  v13._object = a3;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v33._countAndFlagsBits = 0xD000000000000058;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v33);

  UUID.init()(v16);
  v17 = sub_100005D40(&qword_1001C1848);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_10017BD10;
  v19 = WeatherCondition.description.getter();
  v21 = v20;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_1000881BC();
  *(_QWORD *)(v18 + 32) = v19;
  *(_QWORD *)(v18 + 40) = v21;
  v22 = static String.localizedStringWithFormat(_:_:)(v15._countAndFlagsBits, v15._object, v18);
  v24 = v23;
  swift_bridgeObjectRelease(v18);
  v25 = swift_bridgeObjectRelease(v15._object);
  v26 = WeatherCondition.isPrecipitation.getter(v25);
  v27 = (int *)type metadata accessor for ConditionViewModel(0);
  v28 = a6 + v27[5];
  v29 = type metadata accessor for WeatherCondition(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v28, a1, v29);
  v31 = (_QWORD *)(a6 + v27[6]);
  *v31 = a4;
  v31[1] = a5;
  v32 = (uint64_t *)(a6 + v27[7]);
  *v32 = v22;
  v32[1] = v24;
  *(_BYTE *)(a6 + v27[8]) = 1;
  *(_BYTE *)(a6 + v27[9]) = v26 & 1;
  *(_BYTE *)(a6 + v27[10]) = 0;
  return result;
}

unint64_t sub_1000881BC()
{
  unint64_t result;

  result = qword_1001C1850;
  if (!qword_1001C1850)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001C1850);
  }
  return result;
}

ValueMetadata *type metadata accessor for ConditionViewModelFactory()
{
  return &type metadata for ConditionViewModelFactory;
}

uint64_t sub_100088208@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  char *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = a1;
  v2 = type metadata accessor for TimeZone(0);
  v57 = *(_QWORD *)(v2 - 8);
  v58 = v2;
  sub_1000230F4();
  __chkstk_darwin(v3);
  sub_100023150();
  v56 = v4;
  __chkstk_darwin(v5);
  v55 = (char *)&v52 - v6;
  v7 = type metadata accessor for SunriseSunsetEvent(0);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_100023150();
  v52 = v9;
  __chkstk_darwin(v10);
  v12 = (char *)&v52 - v11;
  type metadata accessor for AggregateWeatherViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for WeatherDataViewModel(0);
  sub_1000230F4();
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v52 - v21;
  v23 = type metadata accessor for ForecastEntry.Model(0);
  sub_1000230F4();
  __chkstk_darwin(v24);
  v26 = (unsigned __int8 *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v1 + *(int *)(v27 + 28), (uint64_t)v26, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v26, v23) != 1)
  {
    v34 = *v26;
    v33 = sub_100088668();
    if (!v34)
    {
      v35 = v59;
      v36 = 2;
      return _s13WeatherWidget20WeatherDataViewModelOwst_0(v35, v36, 2, v33);
    }
    goto LABEL_9;
  }
  sub_100011868((uint64_t)v26, (uint64_t)v22, type metadata accessor for WeatherDataViewModel);
  sub_10000F7C4((uint64_t)v22, (uint64_t)v20, type metadata accessor for WeatherDataViewModel);
  if (swift_getEnumCaseMultiPayload(v20, v16))
  {
    sub_100029030((uint64_t)v20, type metadata accessor for WeatherDataViewModel);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_100025184(v28, (uint64_t)qword_1001D9FF0);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)sub_1000290AC();
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Expected aggregate but got instant or sunriseSunset", v32, 2u);
      sub_10002534C((uint64_t)v32);
    }

    sub_100029030((uint64_t)v22, type metadata accessor for WeatherDataViewModel);
    v33 = sub_100088668();
LABEL_9:
    v35 = v59;
    v36 = 1;
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v35, v36, 2, v33);
  }
  sub_100011868((uint64_t)v20, (uint64_t)v15, type metadata accessor for AggregateWeatherViewModel);
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v37 = type metadata accessor for Logger(0);
  v38 = sub_100025184(v37, (uint64_t)qword_1001D9FF0);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)sub_1000290AC();
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Making Sun complication view model entry from aggregate weather", v41, 2u);
    sub_10002534C((uint64_t)v41);
  }

  v42 = sub_10008B0B4((uint64_t)v12);
  v43 = v55;
  v44 = Location.timeZone.getter(v42);
  v45 = v52;
  v46 = v53;
  v47 = v54;
  (*(void (**)(uint64_t, char *, uint64_t, __n128))(v53 + 16))(v52, v12, v54, v44);
  v49 = v56;
  v48 = v57;
  v50 = v58;
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 16))(v56, v43, v58);
  SunComplicationViewModel.init(from:timeZone:)(v45, v49);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v50);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v47);
  sub_100029030((uint64_t)v15, type metadata accessor for AggregateWeatherViewModel);
  sub_100029030((uint64_t)v22, type metadata accessor for WeatherDataViewModel);
  v33 = sub_100088668();
  v35 = v59;
  v36 = 0;
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v35, v36, 2, v33);
}

uint64_t sub_100088668()
{
  return type metadata accessor for SunComplicationViewModel(0);
}

uint64_t sub_100088670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008867C);
}

uint64_t sub_10008867C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = type metadata accessor for ForecastEntry(0);
    v8 = a1 + *(int *)(a3 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
}

uint64_t sub_1000886E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000886F4);
}

uint64_t sub_1000886F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = type metadata accessor for ForecastEntry(0);
    v10 = a1 + *(int *)(a4 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for SunEventsContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C18B0;
  if (!qword_1001C18B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SunEventsContentView);
  return result;
}

uint64_t sub_1000887A0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F338, 1);
}

uint64_t sub_1000887B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000887B8(v1, a1);
}

uint64_t sub_1000887B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(char *, uint64_t);
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  Swift::String v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  void *object;
  __n128 v51;
  Swift::String v52;
  uint64_t v53;
  unint64_t v54;
  Swift::String v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  void *v60;
  __n128 v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;

  v81 = a2;
  v71 = sub_100005D40(&qword_1001C18E8);
  __chkstk_darwin(v71);
  v72 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100005D40(&qword_1001C18F0);
  __chkstk_darwin(v80);
  v76 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SunInlineContentView(0);
  v74 = *(_QWORD *)(v5 - 8);
  v75 = v5;
  __chkstk_darwin(v5);
  v73 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for SunEventsContentView(0);
  v7 = __chkstk_darwin(v77);
  v67 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v64 = (uint64_t)&v63 - v9;
  v78 = sub_100005D40(&qword_1001C18F8);
  __chkstk_darwin(v78);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100005D40(&qword_1001C1900);
  __chkstk_darwin(v69);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100005D40(&qword_1001C1908);
  __chkstk_darwin(v79);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SunComplicationDataStatus(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SunCircularContentView(0);
  v70 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for WidgetFamily(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v65 = (_DWORD *)((char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v24);
  v27 = (char *)&v63 - v26;
  sub_1000C54B0((uint64_t *)((char *)&v63 - v26));
  v66 = v23;
  v28 = *(uint64_t (**)(char *, uint64_t))(v23 + 88);
  v68 = v22;
  v29 = v28(v27, v22);
  if (v29 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_100088208((uint64_t)v18);
    SunCircularContentView.init(status:)(v18);
    v30 = v70;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v13, v21, v19);
    swift_storeEnumTagMultiPayload(v13, v69, 0);
    sub_10002EF14(&qword_1001C1920, (uint64_t (*)(uint64_t))&type metadata accessor for SunCircularContentView, (uint64_t)&protocol conformance descriptor for SunCircularContentView);
    _ConditionalContent<>.init(storage:)(v13, v19, &type metadata for Never, v31, &protocol witness table for Never);
    sub_10002EFD4((uint64_t)v15, (uint64_t)v11, &qword_1001C1908);
    swift_storeEnumTagMultiPayload(v11, v78, 0);
    v32 = sub_100088F20();
    v33 = sub_100088FA4();
    _ConditionalContent<>.init(storage:)(v11, v79, v80, v32, v33);
    sub_10002F014((uint64_t)v15, &qword_1001C1908);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v21, v19);
  }
  v35 = v78;
  if (v29 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    sub_100088EDC(a1, v64);
    v82 = 0;
    v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(68);
    v45._countAndFlagsBits = 0xD000000000000022;
    v45._object = (void *)0x80000001001862F0;
    String.append(_:)(v45);
    v46 = v65;
    sub_1000C54B0(v65);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v47 = v68;
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v68, v48);
    object = v49._object;
    String.append(_:)(v49);
    v51 = swift_bridgeObjectRelease(object);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v66 + 8))(v46, v47, v51);
    v52._object = (void *)0x8000000100187140;
    v52._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v52);
    v53 = v82;
    v54 = v83;
LABEL_9:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v53, v54, "WeatherWidget/SunEventsContentView.swift", 40, 2);
    __break(1u);
    return result;
  }
  if (v29 != enum case for WidgetFamily.accessoryInline(_:))
  {
    sub_100088EDC(a1, v67);
    v82 = 0;
    v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(68);
    v55._countAndFlagsBits = 0xD000000000000022;
    v55._object = (void *)0x80000001001862F0;
    String.append(_:)(v55);
    v56 = v65;
    sub_1000C54B0(v65);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v57 = v68;
    v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v68, v58);
    v60 = v59._object;
    String.append(_:)(v59);
    v61 = swift_bridgeObjectRelease(v60);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v66 + 8))(v56, v57, v61);
    v62._object = (void *)0x8000000100187140;
    v62._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v62);
    v53 = v82;
    v54 = v83;
    goto LABEL_9;
  }
  v36 = (uint64_t)v11;
  sub_100088208((uint64_t)v18);
  v37 = v73;
  SunInlineContentView.init(status:)(v18);
  v39 = v74;
  v38 = v75;
  v40 = v72;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v72, v37, v75);
  swift_storeEnumTagMultiPayload(v40, v71, 0);
  sub_10002EF14(&qword_1001C1910, (uint64_t (*)(uint64_t))&type metadata accessor for SunInlineContentView, (uint64_t)&protocol conformance descriptor for SunInlineContentView);
  v41 = (uint64_t)v76;
  _ConditionalContent<>.init(storage:)(v40, v38, &type metadata for Never, v42, &protocol witness table for Never);
  sub_10002EFD4(v41, v36, &qword_1001C18F0);
  swift_storeEnumTagMultiPayload(v36, v35, 1);
  v43 = sub_100088F20();
  v44 = sub_100088FA4();
  _ConditionalContent<>.init(storage:)(v36, v79, v80, v43, v44);
  sub_10002F014(v41, &qword_1001C18F0);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v37, v38);
}

uint64_t sub_100088EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SunEventsContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100088F20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1918;
  if (!qword_1001C1918)
  {
    v1 = sub_100005DC4(&qword_1001C1908);
    sub_10002EF14(&qword_1001C1920, (uint64_t (*)(uint64_t))&type metadata accessor for SunCircularContentView, (uint64_t)&protocol conformance descriptor for SunCircularContentView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1918);
  }
  return result;
}

unint64_t sub_100088FA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1928;
  if (!qword_1001C1928)
  {
    v1 = sub_100005DC4(&qword_1001C18F0);
    sub_10002EF14(&qword_1001C1910, (uint64_t (*)(uint64_t))&type metadata accessor for SunInlineContentView, (uint64_t)&protocol conformance descriptor for SunInlineContentView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1928);
  }
  return result;
}

unint64_t sub_10008902C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1930;
  if (!qword_1001C1930)
  {
    v1 = sub_100005DC4(&qword_1001C1938);
    sub_100089090();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1930);
  }
  return result;
}

unint64_t sub_100089090()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1940;
  if (!qword_1001C1940)
  {
    v1 = sub_100005DC4(&qword_1001C1948);
    sub_100088F20();
    sub_100088FA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1940);
  }
  return result;
}

BOOL sub_1000890FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v60 = sub_100005D40(&qword_1001BF090);
  v58 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v55 = (uint64_t)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001BF830);
  __chkstk_darwin(v5);
  sub_100023150();
  v59 = v6;
  sub_100023164();
  __chkstk_darwin(v7);
  v9 = (char *)&v53 - v8;
  v10 = sub_100005D40(&qword_1001BF098);
  __chkstk_darwin(v10);
  sub_100023150();
  v54 = v11;
  sub_100023164();
  __chkstk_darwin(v12);
  v56 = (uint64_t)&v53 - v13;
  sub_100023164();
  __chkstk_darwin(v14);
  v57 = (uint64_t)&v53 - v15;
  sub_100023164();
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v53 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v53 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v53 - v23;
  sub_10008A8E8();
  sub_10008A7CC();
  sub_10008A8F0();
  sub_10008A8F0();
  if (v62 != v61)
    return 0;
  v25 = (int *)type metadata accessor for DailyViewAttributes(0);
  sub_10008D238(*(_QWORD *)(a1 + v25[5]), *(_QWORD *)(a2 + v25[5]), v26, v27, v28, v29, v30, v31, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63,
    v64);
  if ((v32 & 1) == 0)
    return 0;
  if (!static ActiveEvent.__derived_struct_equals(_:_:)(*(_WORD *)(a1 + v25[6]), *(_WORD *)(a2 + v25[6])))
    return 0;
  sub_10008A8CC();
  if (!v34)
    return 0;
  sub_10008A8B4();
  if (!v34)
    return 0;
  sub_10008A8B4();
  if (!v34)
    return 0;
  sub_10008A8B4();
  if (!v34)
    return 0;
  sub_10008A8CC();
  if (!v34)
    return 0;
  sub_10008A8B4();
  if (!v34)
    return 0;
  sub_10008A8B4();
  if (!v34)
    return 0;
  sub_10008A8B4();
  if (!v34)
    return 0;
  sub_10008A8B4();
  if (!v34)
    return 0;
  sub_10008A8CC();
  if (!v34)
    return 0;
  if ((sub_10008A8DC(v25[17]) & 1) == 0)
    return 0;
  if ((sub_10008A8DC(v25[18]) & 1) == 0)
    return 0;
  if ((sub_10008A8DC(v25[19]) & 1) == 0)
    return 0;
  if ((static Font.Weight.== infix(_:_:)(*(double *)(a1 + v25[20]), *(double *)(a2 + v25[20])) & 1) == 0)
    return 0;
  sub_10008A8CC();
  if (!v34)
    return 0;
  sub_10008A80C(a1 + v25[22], (uint64_t)v24);
  sub_10008A80C(a2 + v25[22], (uint64_t)v22);
  v33 = (uint64_t)&v9[*(int *)(v5 + 48)];
  sub_10008A80C((uint64_t)v24, (uint64_t)v9);
  sub_10008A80C((uint64_t)v22, v33);
  sub_10008A898((uint64_t)v9);
  if (v34)
  {
    sub_10002FBAC((uint64_t)v22, &qword_1001BF098);
    sub_10002FBAC((uint64_t)v24, &qword_1001BF098);
    sub_10008A898(v33);
    if (v34)
    {
      sub_10002FBAC((uint64_t)v9, &qword_1001BF098);
      goto LABEL_40;
    }
LABEL_38:
    v35 = (uint64_t)v9;
LABEL_49:
    sub_10002FBAC(v35, &qword_1001BF830);
    return 0;
  }
  sub_10008A80C((uint64_t)v9, (uint64_t)v19);
  sub_10008A898(v33);
  if (v34)
  {
    sub_10008A8C4((uint64_t)v22);
    sub_10008A8C4((uint64_t)v24);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v19, v60);
    goto LABEL_38;
  }
  v36 = v55;
  v37 = v33;
  v38 = v60;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v55, v37, v60);
  sub_10008A854();
  HIDWORD(v53) = dispatch thunk of static Equatable.== infix(_:_:)(v19, v36, v38);
  v39 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
  v39(v55, v38);
  sub_10002FBAC((uint64_t)v22, &qword_1001BF098);
  sub_10002FBAC((uint64_t)v24, &qword_1001BF098);
  v39((uint64_t)v19, v38);
  sub_10002FBAC((uint64_t)v9, &qword_1001BF098);
  if ((v53 & 0x100000000) == 0)
    return 0;
LABEL_40:
  v40 = v57;
  sub_10008A80C(a1 + v25[23], v57);
  v41 = a2 + v25[23];
  v42 = v56;
  sub_10008A80C(v41, v56);
  v43 = v59;
  v44 = v59 + *(int *)(v5 + 48);
  sub_10008A80C(v40, v59);
  sub_10008A80C(v42, v44);
  sub_10008A898(v43);
  if (v34)
  {
    sub_10008A8C4(v56);
    sub_10008A8C4(v57);
    sub_10008A898(v44);
    if (v34)
    {
      sub_10002FBAC(v59, &qword_1001BF098);
      return 1;
    }
    goto LABEL_48;
  }
  sub_10008A80C(v59, v54);
  sub_10008A898(v44);
  if (v45)
  {
    sub_10002FBAC(v56, &qword_1001BF098);
    sub_10002FBAC(v57, &qword_1001BF098);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v54, v60);
LABEL_48:
    v35 = v59;
    goto LABEL_49;
  }
  v47 = v58;
  v48 = v55;
  v49 = v60;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v55, v44, v60);
  sub_10008A854();
  v50 = v54;
  v51 = dispatch thunk of static Equatable.== infix(_:_:)(v54, v48, v49);
  v52 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
  v52(v48, v49);
  sub_10008A8C4(v56);
  sub_10008A8C4(v57);
  v52(v50, v49);
  sub_10008A8C4(v59);
  return (v51 & 1) != 0;
}

uint64_t sub_1000896A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v28;
  int *v29;

  v28 = sub_10008A8E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(a9, a1, v28);
  v29 = (int *)type metadata accessor for DailyViewAttributes(0);
  *(_QWORD *)(a9 + v29[5]) = a2;
  *(_WORD *)(a9 + v29[6]) = a3;
  *(_QWORD *)(a9 + v29[7]) = a4;
  *(_BYTE *)(a9 + v29[8]) = a5;
  *(_BYTE *)(a9 + v29[9]) = a6;
  *(_BYTE *)(a9 + v29[10]) = a7;
  *(_QWORD *)(a9 + v29[11]) = a8;
  *(_BYTE *)(a9 + v29[12]) = a11;
  *(_BYTE *)(a9 + v29[13]) = a12;
  *(_BYTE *)(a9 + v29[14]) = a13;
  *(_BYTE *)(a9 + v29[15]) = a14;
  *(_QWORD *)(a9 + v29[16]) = a15;
  *(_QWORD *)(a9 + v29[17]) = a16;
  *(_QWORD *)(a9 + v29[18]) = a17;
  *(_QWORD *)(a9 + v29[19]) = a18;
  *(double *)(a9 + v29[20]) = a10;
  *(_QWORD *)(a9 + v29[21]) = a19;
  sub_10008987C(a20, a9 + v29[22]);
  return sub_10008987C(a21, a9 + v29[23]);
}

uint64_t type metadata accessor for DailyViewAttributes(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C19A8;
  if (!qword_1001C19A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DailyViewAttributes);
  return result;
}

uint64_t sub_10008987C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001BF098);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1000898C4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v28);
  }
  else
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(_QWORD *)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v10;
    *(_WORD *)((char *)a1 + v9) = *(_WORD *)((char *)a2 + v9);
    v11 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
    v12 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    v13 = a3[12];
    *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
    *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
    v14 = a3[14];
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[16];
    *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
    v16 = a3[17];
    v17 = a3[18];
    v18 = *(_QWORD *)((char *)a2 + v16);
    *(_QWORD *)((char *)a1 + v16) = v18;
    v19 = *(_QWORD *)((char *)a2 + v17);
    *(_QWORD *)((char *)a1 + v17) = v19;
    v20 = a3[19];
    v21 = a3[20];
    v22 = *(_QWORD *)((char *)a2 + v20);
    *(_QWORD *)((char *)a1 + v20) = v22;
    *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
    v23 = a3[22];
    *(_QWORD *)((char *)a1 + a3[21]) = *(_QWORD *)((char *)a2 + a3[21]);
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    swift_bridgeObjectRetain(v10);
    swift_retain(v18);
    swift_retain(v19);
    swift_retain(v22);
    v26 = sub_100005D40(&qword_1001BF090);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v26))
    {
      v27 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v26);
    }
    v29 = a3[23];
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v26))
    {
      v32 = sub_100005D40(&qword_1001BF098);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v30, v31, v26);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t sub_100089B04(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5]));
  swift_release(*(_QWORD *)(a1 + a2[17]));
  swift_release(*(_QWORD *)(a1 + a2[18]));
  swift_release(*(_QWORD *)(a1 + a2[19]));
  v5 = a1 + a2[22];
  v6 = sub_100005D40(&qword_1001BF090);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[23];
  result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v7, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v7, v6);
  return result;
}

uint64_t sub_100089BF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  *(_WORD *)(a1 + v8) = *(_WORD *)(a2 + v8);
  v10 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[17];
  v16 = a3[18];
  v17 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v18;
  v19 = a3[19];
  v20 = a3[20];
  v21 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v21;
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  v22 = a3[22];
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  swift_bridgeObjectRetain(v9);
  swift_retain(v17);
  swift_retain(v18);
  swift_retain(v21);
  v25 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v25))
  {
    v26 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v25);
  }
  v27 = a3[23];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, v25))
  {
    v30 = sub_100005D40(&qword_1001BF098);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v28, v29, v25);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v28, 0, 1, v25);
  }
  return a1;
}

uint64_t sub_100089E08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (_BYTE *)(a1 + v10);
  v12 = (_BYTE *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  v13 = a3[17];
  v14 = *(_QWORD *)(a2 + v13);
  v15 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = a3[18];
  v17 = *(_QWORD *)(a2 + v16);
  v18 = *(_QWORD *)(a1 + v16);
  *(_QWORD *)(a1 + v16) = v17;
  swift_retain(v17);
  swift_release(v18);
  v19 = a3[19];
  v20 = *(_QWORD *)(a2 + v19);
  v21 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  swift_retain(v20);
  swift_release(v21);
  *(_QWORD *)(a1 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  v22 = a3[22];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v25 = sub_100005D40(&qword_1001BF090);
  v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v23, 1, v25);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v25);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v28 = *(_QWORD *)(v25 - 8);
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v28 + 8))(v23, v25);
LABEL_6:
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v28 + 24))(v23, v24, v25);
LABEL_7:
  v30 = a3[23];
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v30, 1, v25);
  v34 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v25);
  if (!v33)
  {
    v35 = *(_QWORD *)(v25 - 8);
    if (!v34)
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 24))(v31, v32, v25);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v35 + 8))(v31, v25);
    goto LABEL_12;
  }
  if (v34)
  {
LABEL_12:
    v36 = sub_100005D40(&qword_1001BF098);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v31, v32, v25);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v25);
  return a1;
}

uint64_t sub_10008A104(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_WORD *)(a1 + v7) = *(_WORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[18];
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[22];
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v17, 1, v18))
  {
    v19 = sub_100005D40(&qword_1001BF098);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v16, 0, 1, v18);
  }
  v20 = a3[23];
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v22, 1, v18))
  {
    v23 = sub_100005D40(&qword_1001BF098);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v21, v22, v18);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v21, 0, 1, v18);
  }
  return a1;
}

uint64_t sub_10008A2F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  v9 = a3[7];
  *(_WORD *)(a1 + a3[6]) = *(_WORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  v15 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v15);
  v16 = a3[18];
  v17 = *(_QWORD *)(a1 + v16);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  swift_release(v17);
  v18 = a3[19];
  v19 = *(_QWORD *)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  swift_release(v19);
  v20 = a3[21];
  *(_QWORD *)(a1 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  v21 = a3[22];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = sub_100005D40(&qword_1001BF090);
  v25 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v22, 1, v24);
  v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v23, 1, v24);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v22, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v27 = *(_QWORD *)(v24 - 8);
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v27 + 8))(v22, v24);
LABEL_6:
    v28 = sub_100005D40(&qword_1001BF098);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v27 + 40))(v22, v23, v24);
LABEL_7:
  v29 = a3[23];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v29, 1, v24);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v24);
  if (!v32)
  {
    v34 = *(_QWORD *)(v24 - 8);
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v34 + 40))(v30, v31, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v30, v24);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    v35 = sub_100005D40(&qword_1001BF098);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v30, v31, v24);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v24);
  return a1;
}

uint64_t sub_10008A5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008A5B0);
}

uint64_t sub_10008A5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = sub_10008A8E8();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v7 = sub_100005D40(&qword_1001BF098);
    v8 = a1 + *(int *)(a3 + 88);
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
  }
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10008A64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008A658);
}

uint64_t sub_10008A658(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = sub_10008A8E8();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v9 = sub_100005D40(&qword_1001BF098);
    v10 = a1 + *(int *)(a4 + 88);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, a2, a2, v9);
}

void sub_10008A6F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[18];
  uint64_t v7;
  uint64_t v8;

  v2 = type metadata accessor for WidgetFamily(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[2] = &unk_10017D3E8;
    v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[4] = &unk_10017D400;
    v6[5] = &unk_10017D400;
    v6[6] = &unk_10017D400;
    v6[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[8] = &unk_10017D400;
    v6[9] = &unk_10017D400;
    v6[10] = &unk_10017D400;
    v6[11] = &unk_10017D400;
    v6[12] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[14] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[15] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[16] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[17] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_10001EB64(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      swift_initStructMetadata(a1, 256, 20, v6, a1 + 16);
    }
  }
}

unint64_t sub_10008A7CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1430;
  if (!qword_1001C1430)
  {
    v1 = type metadata accessor for WidgetFamily(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WidgetFamily, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1430);
  }
  return result;
}

uint64_t sub_10008A80C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001BF098);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10008A854()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BF840;
  if (!qword_1001BF840)
  {
    v1 = sub_100005DC4(&qword_1001BF090);
    result = swift_getWitnessTable(&protocol conformance descriptor for Measurement<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BF840);
  }
  return result;
}

uint64_t sub_10008A898(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, *(_QWORD *)(v1 - 104));
}

uint64_t sub_10008A8C4(uint64_t a1)
{
  uint64_t *v1;

  return sub_10002FBAC(a1, v1);
}

uint64_t sub_10008A8DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return static Font.== infix(_:_:)(*(_QWORD *)(v2 + a1), *(_QWORD *)(v1 + a1));
}

uint64_t sub_10008A8E8()
{
  return type metadata accessor for WidgetFamily(0);
}

uint64_t sub_10008A8F0()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_10008A8FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = type metadata accessor for AirQualityScaleCategory(0);
  v50 = *(_QWORD *)(v1 - 8);
  v51 = v1;
  sub_1000230F4();
  __chkstk_darwin(v2);
  sub_1000230E0();
  v49 = v3;
  v4 = type metadata accessor for AirQualityScale(0);
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_1000230E0();
  v46 = v6;
  v7 = type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_1000230E0();
  v10 = v9;
  v11 = type metadata accessor for WeatherMetadata(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10002325C();
  v15 = v14 - v13;
  v16 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v16 - 8);
  v43 = v16;
  sub_1000230F4();
  __chkstk_darwin(v17);
  sub_10002325C();
  v20 = v19 - v18;
  sub_100005D40(&qword_1001BFB60);
  sub_1000230F4();
  __chkstk_darwin(v21);
  sub_10002325C();
  v24 = v23 - v22;
  v25 = type metadata accessor for AirQuality(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  sub_10002325C();
  v29 = v28 - v27;
  WeatherDataModel.airQuality.getter(v30);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v24, 1, v25) == 1)
  {
    sub_10008ABC8(v24);
    v31 = type metadata accessor for AirQualityViewModel(0);
    v32 = a1;
    v33 = 1;
  }
  else
  {
    v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v29, v24, v25);
    v35 = UUID.init()(v34);
    v36 = AirQuality.metadata.getter(v35);
    WeatherMetadata.date.getter(v36);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
    v38 = AirQuality.index.getter(v37);
    v39 = AirQuality.scale.getter(v38);
    AirQuality.currentScaleCategory.getter(v39);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(a1, v20, v43);
    v40 = (int *)type metadata accessor for AirQualityViewModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(a1 + v40[5], v10, v45);
    *(_QWORD *)(a1 + v40[6]) = v38;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(a1 + v40[7], v46, v48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(a1 + v40[8], v49, v51);
    v32 = a1;
    v33 = 0;
    v31 = (uint64_t)v40;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v32, v33, 1, v31);
}

uint64_t sub_10008ABC8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001BFB60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for AirQualityViewModelFactory()
{
  return &type metadata for AirQualityViewModelFactory;
}

id sub_10008AC18()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for WeatherSettingsState()), "init");
  qword_1001D9F70 = (uint64_t)result;
  return result;
}

id sub_10008AC44()
{
  if (qword_1001BEE60 != -1)
    swift_once(&qword_1001BEE60, sub_10008AC18);
  return (id)qword_1001D9F70;
}

id sub_10008ACB8()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13WeatherWidget20WeatherSettingsState_units);
}

id sub_10008AD0C()
{
  return sub_10008ADD4(0x80000001001872B0, 0);
}

void sub_10008AD6C()
{
  sub_10008AFEC();
}

id sub_10008ADBC()
{
  return sub_10008ADD4(0x8000000100187280, 1);
}

id sub_10008ADD4(uint64_t a1, char a2)
{
  void *v3;
  NSString v4;
  id v5;

  v3 = (void *)objc_opt_self(WSPreferences);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "readBoolFromContainerPreferenceValueForKey:defaultValue:", v4, a2 & 1);

  return v5;
}

void sub_10008AE8C()
{
  sub_10008AFEC();
}

void sub_10008AE98()
{
  void *v0;
  NSString v1;
  Class isa;

  v0 = (void *)objc_opt_self(WSPreferences);
  v1 = String._bridgeToObjectiveC()();
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v0, "writePreferenceForKey:value:", v1, isa);

}

id sub_10008AF18()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  id v3;
  char *v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = OBJC_IVAR____TtC13WeatherWidget20WeatherSettingsState_units;
  v3 = objc_allocWithZone((Class)type metadata accessor for WeatherSettingsUnits());
  v4 = v0;
  *(_QWORD *)&v0[v2] = objc_msgSend(v3, "init");

  v6.receiver = v4;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "init");
}

uint64_t type metadata accessor for WeatherSettingsState()
{
  return objc_opt_self(_TtC13WeatherWidget20WeatherSettingsState);
}

void sub_10008AFEC()
{
  sub_10008AE98();
}

void sub_10008AFF8(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  sub_100005D40(&qword_1001C1D90);
  sub_100029068();
  __chkstk_darwin(v2);
  sub_10002325C();
  v5 = v4 - v3;
  sub_10008B6C0();
  v6 = sub_10001C804();
  v7 = sub_100093674();
  v9 = sub_10002879C(v7, v8, v6);
  if (v10)
  {
    sub_10009366C(v9, &qword_1001C1D90);
    v11 = type metadata accessor for MoonEvents(0);
    _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 1, 1, v11);
  }
  else
  {
    sub_1000168D8(v5 + *(int *)(v6 + 68), a1, &qword_1001BF0B0);
    sub_100011894(v5, type metadata accessor for DailyForecastViewModel);
  }
  sub_1000443A4();
}

uint64_t sub_10008B0B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a1;
  v4 = type metadata accessor for TimeZone(0);
  v36 = *(_QWORD *)(v4 - 8);
  v37 = v4;
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_1000230E0();
  v35 = v6;
  v7 = sub_100093378();
  v8 = type metadata accessor for Date(v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10003C164();
  sub_100093528();
  sub_100029068();
  __chkstk_darwin(v10);
  v11 = sub_10009345C();
  v12 = type metadata accessor for AggregateWeatherViewModel.SunEvent(v11);
  sub_100029068();
  __chkstk_darwin(v13);
  sub_100049D00();
  v16 = v14 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v35 - v18;
  v20 = sub_100087ED4();
  sub_1000168D8(v1 + *(int *)(v20 + 56), v3, &qword_1001BFA40);
  sub_10002879C(v3, 1, v12);
  if (v21)
  {
    sub_100016904(v3, &qword_1001BFA40);
    if (qword_1001BEE68 != -1)
      swift_once(&qword_1001BEE68, sub_10008B320);
    v22 = type metadata accessor for SunriseSunsetEventCalculator(0);
    v23 = sub_100025184(v22, (uint64_t)qword_1001C1A58);
    v24 = Location.coordinate.getter(v23);
    v26 = v25;
    v28 = Date.init()(v27);
    v29 = v35;
    Location.timeZone.getter(v28);
    SunriseSunsetEventCalculator.nextEvent(coordinate:date:timeZone:)(v2, v29, v24, v26);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v29, v37);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v2, v8);
  }
  else
  {
    sub_100093658(v3, (uint64_t)v19);
    sub_100093658((uint64_t)v19, v16);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v12);
    v32 = v38;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v38, v16, v8);
    v33 = type metadata accessor for SunriseSunsetEvent(0);
    if (EnumCaseMultiPayload == 1)
      v34 = (unsigned int *)&enum case for SunriseSunsetEvent.sunset(_:);
    else
      v34 = (unsigned int *)&enum case for SunriseSunsetEvent.sunrise(_:);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v32, *v34, v33);
  }
}

uint64_t sub_10008B320()
{
  uint64_t v0;

  v0 = type metadata accessor for SunriseSunsetEventCalculator(0);
  sub_100093228(v0, qword_1001C1A58);
  sub_100025184(v0, (uint64_t)qword_1001C1A58);
  return SunriseSunsetEventCalculator.init()();
}

void sub_10008B368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  sub_100070E5C();
  v5 = v4;
  sub_10001C804();
  sub_100093604();
  __chkstk_darwin(v6);
  sub_1000934B0();
  __chkstk_darwin(v7);
  sub_100093368();
  sub_100005D40(&qword_1001C1D90);
  sub_100029068();
  __chkstk_darwin(v8);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AggregateWeatherViewModel(0) + 32));
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
    sub_100093448();
    goto LABEL_12;
  }
  sub_1000933FC();
  sub_1000935DC(v13, v14, type metadata accessor for DailyForecastViewModel);
  v15 = swift_bridgeObjectRetain(v11);
  if (v12 == 1)
  {
LABEL_9:
    sub_100093508(v15, v16, type metadata accessor for DailyForecastViewModel);
    sub_100093424();
    sub_10002879C((uint64_t)v10, 1, v3);
    if (!v19)
    {
      v20 = sub_100005D40(&qword_1001BF090);
      sub_10009331C(v20);
      sub_100011894((uint64_t)v10, type metadata accessor for DailyForecastViewModel);
      v21 = sub_1000935E8();
LABEL_13:
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v21, v22, v23, v24);
      sub_10001C770();
      return;
    }
LABEL_12:
    sub_100016904((uint64_t)v10, &qword_1001C1D90);
    sub_100005D40(&qword_1001BF090);
    v21 = sub_100093384();
    goto LABEL_13;
  }
  v17 = 1;
  while (v17 < *(_QWORD *)(v11 + 16))
  {
    sub_100093360(v5 + *(_QWORD *)(v25[3] + 72) * v17, v1);
    v10 = (char *)v3;
    v18 = sub_100093680();
    if ((sub_100093398(v18) & 1) != 0)
    {
      sub_1000933C8(v2);
      sub_100093518();
    }
    else
    {
      sub_1000933C8(v1);
    }
    if (v12 == ++v17)
      goto LABEL_9;
  }
  __break(1u);
}

void sub_10008B514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  sub_100070E5C();
  v5 = v4;
  sub_10001C804();
  sub_100093604();
  __chkstk_darwin(v6);
  sub_1000934B0();
  __chkstk_darwin(v7);
  sub_100093368();
  sub_100005D40(&qword_1001C1D90);
  sub_100029068();
  __chkstk_darwin(v8);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AggregateWeatherViewModel(0) + 32));
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
    sub_100093448();
    goto LABEL_12;
  }
  sub_1000933FC();
  sub_1000935DC(v13, v14, type metadata accessor for DailyForecastViewModel);
  v15 = swift_bridgeObjectRetain(v11);
  if (v12 == 1)
  {
LABEL_9:
    sub_100093508(v15, v16, type metadata accessor for DailyForecastViewModel);
    sub_100093424();
    sub_10002879C((uint64_t)v10, 1, v3);
    if (!v19)
    {
      v20 = sub_100005D40(&qword_1001BF090);
      sub_10009331C(v20);
      sub_100011894((uint64_t)v10, type metadata accessor for DailyForecastViewModel);
      v21 = sub_1000935E8();
LABEL_13:
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v21, v22, v23, v24);
      sub_10001C770();
      return;
    }
LABEL_12:
    sub_100016904((uint64_t)v10, &qword_1001C1D90);
    sub_100005D40(&qword_1001BF090);
    v21 = sub_100093384();
    goto LABEL_13;
  }
  v17 = 1;
  while (v17 < *(_QWORD *)(v11 + 16))
  {
    sub_100093360(v5 + *(_QWORD *)(v25[3] + 72) * v17, v1);
    v10 = (char *)v3;
    v18 = sub_100093680();
    if ((sub_100093398(v18) & 1) != 0)
    {
      sub_1000933C8(v2);
      sub_100093518();
    }
    else
    {
      sub_1000933C8(v1);
    }
    if (v12 == ++v17)
      goto LABEL_9;
  }
  __break(1u);
}

void sub_10008B6C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  sub_100070E5C();
  v3 = v2;
  v4 = type metadata accessor for Calendar(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10002325C();
  v8 = v7 - v6;
  v9 = sub_10001C804();
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005D40(&qword_1001C1D90);
  sub_100029068();
  __chkstk_darwin(v13);
  sub_1000935B0();
  v14 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AggregateWeatherViewModel(0) + 32));
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v23 = v1;
    v24 = v3;
    v16 = v14 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    v22[1] = v14;
    sub_100093690();
    while (1)
    {
      sub_10000F7C4(v16, (uint64_t)v12, type metadata accessor for DailyForecastViewModel);
      static Calendar.current.getter();
      v18 = Calendar.isDateInToday(_:)(&v12[*(int *)(v9 + 20)]);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
      if ((v18 & 1) != 0)
        break;
      sub_100011894((uint64_t)v12, type metadata accessor for DailyForecastViewModel);
      v16 += v17;
      if (!--v15)
      {
        v19 = 1;
        v1 = v23;
        v3 = v24;
        goto LABEL_8;
      }
    }
    v1 = v23;
    sub_100011868((uint64_t)v12, v23, type metadata accessor for DailyForecastViewModel);
    v19 = 0;
    v3 = v24;
  }
  else
  {
    sub_100093690();
    v19 = 1;
  }
LABEL_8:
  sub_100093634(v1, v19);
  sub_10002548C();
  sub_10002879C(v1, 1, v9);
  if (v20)
  {
    sub_100016904(v1, &qword_1001C1D90);
    v21 = 1;
  }
  else
  {
    sub_100011868(v1, v3, type metadata accessor for DailyForecastViewModel);
    v21 = 0;
  }
  sub_100093634(v3, v21);
  sub_10001C770();
}

void sub_10008B898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;

  sub_100070E5C();
  v28 = v2;
  v4 = v3;
  v5 = sub_10002338C();
  v29 = *(_QWORD *)(v5 - 8);
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_100049D00();
  v9 = v7 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - v11;
  type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  sub_100029068();
  __chkstk_darwin(v13);
  sub_100049D00();
  v16 = v14 - v15;
  __chkstk_darwin(v17);
  sub_100093368();
  sub_100005D40(&qword_1001C1D98);
  sub_100029068();
  __chkstk_darwin(v18);
  sub_100093598();
  v20 = v0 + *(int *)(v19 + 48);
  sub_100093360(v4, v0);
  sub_100093360(v28, v20);
  if (sub_1000935FC(v0) != 1)
  {
    sub_10000F7C4(v0, v1, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    if (sub_1000935FC(v20) != 1)
    {
      v23 = v29;
      sub_100093618((uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 32));
      static Date.== infix(_:_:)(v1, v12);
      v24 = *(void (**)(char *, uint64_t))(v23 + 8);
      v24(v12, v5);
      v25 = sub_1000934FC();
      ((void (*)(uint64_t))v24)(v25);
      goto LABEL_6;
    }
LABEL_7:
    v26 = sub_1000934FC();
    v27(v26);
    sub_100016904(v0, &qword_1001C1D98);
    goto LABEL_8;
  }
  sub_10000F7C4(v0, v16, type metadata accessor for AggregateWeatherViewModel.SunEvent);
  if (sub_1000935FC(v20) != 1)
    goto LABEL_7;
  v21 = v29;
  sub_100093618(v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 32));
  static Date.== infix(_:_:)(v16, v9);
  v22 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v22(v9, v5);
  v22(v16, v5);
LABEL_6:
  sub_100011894(v0, type metadata accessor for AggregateWeatherViewModel.SunEvent);
LABEL_8:
  sub_10001C770();
}

uint64_t sub_10008BA98(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x657369726E7573 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657369726E7573, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7465736E7573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7465736E7573, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10008BB7C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7465736E7573;
  else
    return 0x657369726E7573;
}

void sub_10008BBB0()
{
  _QWORD v0[9];

  Hasher.init(_seed:)(v0);
  sub_1000233CC();
  Hasher._finalize()();
  sub_1000231EC();
}

void sub_10008BBE0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;

  v3 = sub_100005D40(&qword_1001C1D38);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_1000230E0();
  v44 = v5;
  v6 = sub_100005D40(&qword_1001C1D40);
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_1000230E0();
  v41 = v8;
  v9 = sub_100093378();
  v10 = type metadata accessor for Date(v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100023150();
  v40 = v12;
  sub_100023164();
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - v14;
  v16 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  sub_100029068();
  __chkstk_darwin(v17);
  sub_1000935B0();
  v49 = sub_100005D40(&qword_1001C1D48);
  v47 = *(_QWORD *)(v49 - 8);
  sub_1000230F4();
  __chkstk_darwin(v18);
  sub_10003C164();
  v20 = a1[3];
  v19 = a1[4];
  sub_100022330(a1, v20);
  v21 = sub_1000929C8();
  v22 = v19;
  v23 = v11;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AggregateWeatherViewModel.SunEvent.CodingKeys, &type metadata for AggregateWeatherViewModel.SunEvent.CodingKeys, v21, v20, v22);
  sub_10000F7C4(v48, v1, type metadata accessor for AggregateWeatherViewModel.SunEvent);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v16);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  if (EnumCaseMultiPayload == 1)
  {
    v15 = v40;
    sub_100093560(v25);
    sub_1000936A4();
    v26 = v44;
    sub_1000933B0((uint64_t)&type metadata for AggregateWeatherViewModel.SunEvent.SunsetCodingKeys, (uint64_t)&v51);
    sub_10002EF14(&qword_1001BF780, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v27 = v46;
    sub_1000934E8((uint64_t)v15, v29, v30, v31, v28);
    v32 = v45;
  }
  else
  {
    sub_100093560(v25);
    v50 = 0;
    sub_100092A40();
    v26 = v41;
    sub_1000933B0((uint64_t)&type metadata for AggregateWeatherViewModel.SunEvent.SunriseCodingKeys, (uint64_t)&v50);
    sub_10002EF14(&qword_1001BF780, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v27 = v43;
    sub_1000934E8((uint64_t)v15, v34, v35, v36, v33);
    v32 = v42;
  }
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v26, v27);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v10);
  v37 = sub_1000935C8();
  v38(v37);
  sub_100023114();
}

void sub_10008BE58(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char v68;
  char v69;

  v58 = a2;
  v4 = sub_100005D40(&qword_1001C1D68);
  v61 = *(_QWORD *)(v4 - 8);
  v62 = v4;
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_1000230E0();
  v64 = v6;
  v7 = sub_100005D40(&qword_1001C1D70);
  v59 = *(_QWORD *)(v7 - 8);
  v60 = v7;
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_1000230E0();
  v63 = v9;
  v10 = sub_100005D40(&qword_1001C1D78);
  v65 = *(_QWORD *)(v10 - 8);
  v66 = v10;
  sub_1000230F4();
  __chkstk_darwin(v11);
  v12 = sub_1000253B8();
  v13 = type metadata accessor for AggregateWeatherViewModel.SunEvent(v12);
  sub_100029068();
  __chkstk_darwin(v14);
  sub_100049D00();
  v17 = v15 - v16;
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v54 - v20;
  __chkstk_darwin(v19);
  sub_100093368();
  v22 = a1[3];
  v23 = a1[4];
  sub_100022330(a1, v22);
  v24 = sub_1000929C8();
  v25 = v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AggregateWeatherViewModel.SunEvent.CodingKeys, &type metadata for AggregateWeatherViewModel.SunEvent.CodingKeys, v24, v22, v23);
  if (v25)
    goto LABEL_8;
  v55 = v17;
  v56 = v21;
  v54 = v2;
  v57 = v13;
  v67 = a1;
  v26 = v66;
  v27 = KeyedDecodingContainer.allKeys.getter(v66);
  v28 = v27;
  v29 = *(_QWORD *)(v27 + 16);
  if (!v29
    || (v30 = *(_BYTE *)(v27 + 32),
        sub_1000E5028(1, v29, v27, v27 + 32, 0, (2 * v29) | 1),
        v32 = v31,
        v34 = v33,
        swift_bridgeObjectRelease(v28),
        v32 != v34 >> 1))
  {
    v39 = v65;
    v40 = v57;
    v41 = type metadata accessor for DecodingError(0);
    swift_allocError(v41, &protocol witness table for DecodingError, 0, 0);
    v43 = v42;
    sub_100005D40(&qword_1001BF898);
    *v43 = v40;
    v44 = KeyedDecodingContainer.codingPath.getter(v26);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v44, 0xD00000000000002BLL, 0x80000001001861A0, 0);
    v45 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v43, enum case for DecodingError.typeMismatch(_:), v41);
    swift_willThrow(v45);
    sub_100023214();
    sub_1000933F0(*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
    a1 = v67;
LABEL_8:
    v49 = a1;
    goto LABEL_9;
  }
  if ((v30 & 1) != 0)
  {
    sub_1000936A4();
    sub_100093348((uint64_t)&type metadata for AggregateWeatherViewModel.SunEvent.SunsetCodingKeys, (uint64_t)&v69);
    v35 = type metadata accessor for Date(0);
    sub_10002EF14(&qword_1001BF7C8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v36 = v55;
    sub_1000933DC(v35, v37);
    v38 = v65;
    sub_100093338(v61);
    sub_100023214();
    sub_1000933F0(*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
    v50 = v36;
    v51 = v57;
    v52 = 1;
  }
  else
  {
    v68 = 0;
    sub_100092A40();
    sub_100093348((uint64_t)&type metadata for AggregateWeatherViewModel.SunEvent.SunriseCodingKeys, (uint64_t)&v68);
    v46 = type metadata accessor for Date(0);
    sub_10002EF14(&qword_1001BF7C8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v36 = (uint64_t)v56;
    sub_1000933DC(v46, v47);
    v48 = v65;
    sub_100093338(v59);
    sub_100023214();
    sub_1000933F0(*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8));
    v50 = v36;
    v51 = v57;
    v52 = 0;
  }
  swift_storeEnumTagMultiPayload(v50, v51, v52);
  v53 = v54;
  sub_100011868(v36, v54, type metadata accessor for AggregateWeatherViewModel.SunEvent);
  sub_100011868(v53, v58, type metadata accessor for AggregateWeatherViewModel.SunEvent);
  v49 = v67;
LABEL_9:
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v49);
  sub_100023114();
}

uint64_t sub_10008C274()
{
  char *v0;

  return sub_10008BB7C(*v0);
}

uint64_t sub_10008C27C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10008BA98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10008C2A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000929C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008C2C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000929C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10008C2F0()
{
  sub_10008BBB0();
}

uint64_t sub_10008C308(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092A40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008C330(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092A40();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10008C358()
{
  _QWORD v0[9];

  Hasher.init(_seed:)(v0);
  sub_1000233CC();
  Hasher._finalize()();
  sub_1000231EC();
}

uint64_t sub_10008C384(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092A04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008C3AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092A04();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10008C3D4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10008BE58(a1, a2);
}

void sub_10008C3E8(_QWORD *a1)
{
  sub_10008BBE0(a1);
}

void static AggregateWeatherViewModel.__derived_struct_equals(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t *v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int *v149;
  uint64_t v150;

  sub_100070E5C();
  v2 = v1;
  v4 = v3;
  v132 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  sub_100029068();
  __chkstk_darwin(v5);
  sub_1000230E0();
  v129 = v6;
  v131 = sub_100005D40(&qword_1001C1A70);
  sub_100029068();
  __chkstk_darwin(v7);
  sub_100093478(v8, v126);
  sub_100005D40(&qword_1001BFA40);
  sub_100029068();
  __chkstk_darwin(v9);
  sub_100023150();
  v136 = v10;
  sub_100023164();
  __chkstk_darwin(v11);
  v144 = (char *)&v126 - v12;
  sub_100023164();
  __chkstk_darwin(v13);
  v139 = (char *)&v126 - v14;
  v15 = sub_100093378();
  v138 = type metadata accessor for URL(v15);
  v134 = *(_QWORD *)(v138 - 8);
  sub_1000230F4();
  __chkstk_darwin(v16);
  sub_1000230E0();
  v130 = v17;
  v137 = sub_100005D40(&qword_1001C1A78);
  sub_100029068();
  __chkstk_darwin(v18);
  sub_1000230E0();
  v140 = v19;
  sub_100005D40(&qword_1001BFA28);
  sub_100029068();
  __chkstk_darwin(v20);
  sub_100023150();
  v135 = v21;
  sub_100023164();
  __chkstk_darwin(v22);
  v150 = (uint64_t)&v126 - v23;
  sub_100023164();
  __chkstk_darwin(v24);
  v145 = (uint64_t)&v126 - v25;
  v26 = sub_100093378();
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(v26);
  v143 = *(_QWORD *)(HourPrecipitationChartViewModel - 8);
  sub_1000230F4();
  __chkstk_darwin(v28);
  sub_1000230E0();
  v141 = v29;
  v146 = sub_100005D40(&qword_1001C1A80);
  sub_100029068();
  __chkstk_darwin(v30);
  sub_100093494(v31, v126);
  sub_100005D40(&qword_1001BFA38);
  sub_100029068();
  __chkstk_darwin(v32);
  sub_100023150();
  v142 = v33;
  sub_100023164();
  __chkstk_darwin(v34);
  v147 = (uint64_t)&v126 - v35;
  sub_100023164();
  __chkstk_darwin(v36);
  v148 = (uint64_t)&v126 - v37;
  v38 = sub_100093378();
  v39 = (int *)type metadata accessor for AirQualityViewModel(v38);
  sub_100029068();
  __chkstk_darwin(v40);
  sub_100093598();
  v41 = sub_100005D40(&qword_1001C1A88);
  sub_100029068();
  __chkstk_darwin(v42);
  sub_10002325C();
  v45 = v44 - v43;
  sub_100005D40(&qword_1001BFA30);
  sub_100029068();
  __chkstk_darwin(v46);
  sub_100049D00();
  v49 = v47 - v48;
  v51 = __chkstk_darwin(v50);
  v53 = (char *)&v126 - v52;
  __chkstk_darwin(v51);
  v55 = (char *)&v126 - v54;
  if ((sub_1000936B0() & 1) == 0)
    goto LABEL_33;
  v128 = HourPrecipitationChartViewModel;
  v56 = (int *)sub_100087ED4();
  v57 = sub_10009364C(v56[5]);
  if ((static Location.== infix(_:_:)(v57) & 1) == 0)
    goto LABEL_33;
  v58 = sub_10009364C(v56[6]);
  if (!sub_10001F940(v58, v59))
    goto LABEL_33;
  sub_10008CEDC();
  if ((v64 & 1) == 0)
    goto LABEL_33;
  sub_10008D594(*(_QWORD *)(v4 + v56[8]), *(_QWORD *)(v2 + v56[8]), (uint64_t)type metadata accessor for DailyForecastViewModel, (uint64_t)sub_10013DB1C, v60, v61, v62, v63, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136,
    v137);
  if ((v65 & 1) == 0)
    goto LABEL_33;
  v66 = v56[9];
  v126 = v4;
  sub_100093558(v4 + v66, (uint64_t)v55);
  v67 = v56[9];
  v127 = v2;
  sub_100093558(v2 + v67, (uint64_t)v53);
  v68 = v45 + *(int *)(v41 + 48);
  sub_100093558((uint64_t)v55, v45);
  sub_100093558((uint64_t)v53, v68);
  sub_10002879C(v45, 1, (uint64_t)v39);
  v69 = v56;
  if (v87)
  {
    sub_10002310C((uint64_t)v53);
    sub_10002310C((uint64_t)v55);
    sub_10002879C(v68, 1, (uint64_t)v39);
    v70 = v150;
    v71 = v128;
    if (v87)
    {
      sub_100016904(v45, &qword_1001BFA30);
      goto LABEL_11;
    }
    goto LABEL_19;
  }
  sub_1000168D8(v45, v49, &qword_1001BFA30);
  sub_10002879C(v68, 1, (uint64_t)v39);
  v70 = v150;
  v71 = v128;
  if (v87)
  {
    sub_10002310C((uint64_t)v53);
    sub_10002310C((uint64_t)v55);
    sub_100011894(v49, type metadata accessor for AirQualityViewModel);
LABEL_19:
    v88 = &qword_1001C1A88;
    v89 = v45;
LABEL_32:
    sub_100016904(v89, v88);
    goto LABEL_33;
  }
  sub_100011868(v68, v0, type metadata accessor for AirQualityViewModel);
  v90 = static UUID.== infix(_:_:)(v49, v0);
  if ((v90 & 1) == 0
    || (static Date.== infix(_:_:)(v49 + v39[5], v0 + v39[5]) & 1) == 0
    || *(_QWORD *)(v49 + v39[6]) != *(_QWORD *)(v0 + v39[6])
    || (static AirQualityScale.== infix(_:_:)(v49 + v39[7], v0 + v39[7]) & 1) == 0)
  {
    sub_100011894(v0, type metadata accessor for AirQualityViewModel);
    sub_10002310C((uint64_t)v53);
    sub_10002310C((uint64_t)v55);
    sub_100011894(v49, type metadata accessor for AirQualityViewModel);
    v89 = v45;
    v88 = &qword_1001BFA30;
    goto LABEL_32;
  }
  v91 = static AirQualityScaleCategory.== infix(_:_:)(v49 + v39[8], v0 + v39[8]);
  sub_100011894(v0, type metadata accessor for AirQualityViewModel);
  sub_10002310C((uint64_t)v53);
  sub_10002310C((uint64_t)v55);
  sub_100011894(v49, type metadata accessor for AirQualityViewModel);
  sub_10002310C(v45);
  if ((v91 & 1) == 0)
    goto LABEL_33;
LABEL_11:
  v72 = v126;
  v73 = v148;
  sub_1000932D8(v126 + v69[10], v148);
  v74 = v127;
  v75 = v147;
  sub_1000932D8(v127 + v69[10], v147);
  v76 = (uint64_t)v149;
  v77 = (uint64_t)v149 + *(int *)(v146 + 48);
  sub_1000932D8(v73, (uint64_t)v149);
  sub_1000932D8(v75, v77);
  v78 = sub_100093674();
  sub_10002879C(v78, v79, v71);
  if (v87)
  {
    sub_10002310C(v75);
    sub_10002310C(v73);
    v80 = sub_10002879C(v77, 1, v71);
    v82 = (uint64_t)v144;
    v81 = v145;
    if (v87)
    {
      sub_10009366C(v80, &qword_1001BFA38);
      goto LABEL_35;
    }
LABEL_30:
    v88 = &qword_1001C1A80;
LABEL_31:
    v89 = v76;
    goto LABEL_32;
  }
  v92 = v142;
  sub_1000168D8(v76, v142, &qword_1001BFA38);
  sub_10002879C(v77, 1, v71);
  if (v93)
  {
    sub_1000231E4(v75);
    sub_1000231E4(v73);
    (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v92, v71);
    goto LABEL_30;
  }
  v94 = v141;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v143 + 32))(v141, v77, v71);
  sub_10002EF14(&qword_1001C1A98, (uint64_t (*)(uint64_t))&type metadata accessor for NextHourPrecipitationChartViewModel, (uint64_t)&protocol conformance descriptor for NextHourPrecipitationChartViewModel);
  LODWORD(v146) = dispatch thunk of static Equatable.== infix(_:_:)(v92, v94, v71);
  v95 = v94;
  v74 = v127;
  sub_100093578(v95);
  sub_100016904(v75, &qword_1001BFA38);
  sub_100016904(v73, &qword_1001BFA38);
  sub_100093578(v92);
  v82 = (uint64_t)v144;
  sub_100016904(v76, &qword_1001BFA38);
  v72 = v126;
  v81 = v145;
  if ((v146 & 1) == 0)
    goto LABEL_33;
LABEL_35:
  sub_10008D594(*(_QWORD *)(v72 + v69[11]), *(_QWORD *)(v74 + v69[11]), (uint64_t)type metadata accessor for EventViewModel, (uint64_t)sub_100046874, v83, v84, v85, v86, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136,
    v137);
  if ((v96 & 1) == 0
    || !sub_100106CD0(*(_QWORD *)(v72 + v69[12]), *(_WORD *)(v72 + v69[12] + 8), *(_QWORD *)(v74 + v69[12]), *(_WORD *)(v74 + v69[12] + 8)))
  {
    goto LABEL_33;
  }
  sub_1000932D8(v72 + v69[13], v81);
  v149 = v69;
  sub_1000932D8(v74 + v69[13], v70);
  v97 = v140;
  v98 = v140 + *(int *)(v137 + 48);
  sub_1000932D8(v81, v140);
  v99 = sub_1000934FC();
  v100 = v97;
  sub_1000168D8(v99, v101, &qword_1001BFA28);
  v102 = sub_100093674();
  v103 = v138;
  sub_10002879C(v102, v104, v138);
  if (v87)
  {
    sub_10002310C(v70);
    v100 = v140;
    sub_100016904(v81, &qword_1001BFA28);
    sub_10002879C(v98, 1, v103);
    v105 = v136;
    v106 = (uint64_t)v139;
    if (v87)
    {
      sub_100016904(v100, &qword_1001BFA28);
LABEL_47:
      v118 = (uint64_t)v149;
      sub_1000932D8(v72 + v149[14], v106);
      sub_1000932D8(v74 + *(int *)(v118 + 56), v82);
      v76 = v133;
      v119 = v133 + *(int *)(v131 + 48);
      sub_1000932D8(v106, v133);
      sub_1000932D8(v82, v119);
      v120 = sub_100093674();
      v121 = v132;
      sub_10002879C(v120, v122, v132);
      if (v87)
      {
        sub_10002310C(v82);
        sub_10002310C(v106);
        v123 = sub_10002879C(v119, 1, v121);
        if (v87)
        {
          sub_10009366C(v123, &qword_1001BFA40);
          goto LABEL_33;
        }
      }
      else
      {
        sub_1000168D8(v76, v105, &qword_1001BFA40);
        sub_10002879C(v119, 1, v121);
        if (!v124)
        {
          v125 = v129;
          sub_100093658(v119, v129);
          sub_10008B898();
          sub_100093580(v125);
          sub_100049BFC(v82);
          sub_100049BFC(v106);
          sub_100093580(v105);
          sub_100049BFC(v76);
          goto LABEL_33;
        }
        sub_1000231E4(v82);
        sub_1000231E4(v106);
        sub_100011894(v105, type metadata accessor for AggregateWeatherViewModel.SunEvent);
      }
      v88 = &qword_1001C1A70;
      goto LABEL_31;
    }
LABEL_45:
    v88 = &qword_1001C1A78;
    v89 = v100;
    goto LABEL_32;
  }
  v107 = v135;
  sub_1000168D8(v100, v135, &qword_1001BFA28);
  sub_10002879C(v98, 1, v103);
  v106 = (uint64_t)v139;
  if (v108)
  {
    sub_1000231E4(v70);
    sub_1000231E4(v81);
    (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v107, v103);
    goto LABEL_45;
  }
  v109 = v134;
  v110 = v74;
  v111 = v130;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 32))(v130, v98, v103);
  sub_10002EF14(&qword_1001C1A90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  LODWORD(v148) = dispatch thunk of static Equatable.== infix(_:_:)(v107, v111, v103);
  v112 = v107;
  v113 = v72;
  v114 = v103;
  v115 = *(void (**)(uint64_t, uint64_t))(v109 + 8);
  v116 = v111;
  v74 = v110;
  v115(v116, v114);
  sub_10002310C(v150);
  sub_10002310C(v145);
  v117 = v114;
  v72 = v113;
  v115(v112, v117);
  sub_10002310C(v140);
  v105 = v136;
  if ((v148 & 1) != 0)
    goto LABEL_47;
LABEL_33:
  sub_10001C770();
}

void sub_10008CEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t (*v53)(_QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  sub_100070E5C();
  v2 = v1;
  v4 = v3;
  v5 = (int *)type metadata accessor for HourlyForecastViewModel(0);
  sub_100093588();
  __chkstk_darwin(v6);
  sub_1000934CC();
  __chkstk_darwin(v7);
  v10 = (char *)&v54 - v9;
  v11 = *(_QWORD *)(v4 + 16);
  if (v11 == *(_QWORD *)(v2 + 16) && v11 && v4 != v2)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v55 = *(_QWORD *)(v8 + 72);
    v13 = v11 - 1;
    v56 = v4;
    v57 = v2;
    while (1)
    {
      v59 = v13;
      sub_100093360(v4 + v12, (uint64_t)v10);
      v58 = v12;
      sub_100093360(v2 + v12, v0);
      if ((sub_1000936B0() & 1) == 0)
        break;
      v14 = sub_10009364C(v5[5]);
      if ((static Date.== infix(_:_:)(v14, v15) & 1) == 0)
        break;
      v16 = v5[6];
      v17 = &v10[v16];
      v18 = v0 + v16;
      v19 = sub_100093680();
      if ((static Measurement.== infix<A, B>(_:_:)(v17, v18, v19, v19, v19) & 1) == 0)
        break;
      v20 = sub_100093304(v5[7]);
      v24 = v24 && v21 == v23;
      if (!v24 && (sub_1000232C8(v20, v21, v22, v23) & 1) == 0)
        break;
      v25 = sub_100093304(v5[8]);
      v29 = v24 && v26 == v28;
      if (!v29 && (sub_1000232C8(v25, v26, v27, v28) & 1) == 0
        || (static UUID.== infix(_:_:)(&v10[v5[9]], v0 + v5[9]) & 1) == 0)
      {
        break;
      }
      v30 = type metadata accessor for ConditionViewModel(0);
      type metadata accessor for WeatherCondition(0);
      sub_10002EF14(&qword_1001C1DA0, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherCondition, (uint64_t)&protocol conformance descriptor for WeatherCondition);
      sub_100093640();
      sub_100093640();
      if (v62 == v60 && v63 == v61)
      {
        sub_100093698();
      }
      else
      {
        v32 = sub_1000232C8(v62, v63, v60, v61);
        sub_10002548C();
        sub_1000935D4();
        if ((v32 & 1) == 0)
          break;
      }
      v33 = sub_100093540(*(int *)(v30 + 24));
      v37 = v24 && v34 == v36;
      if (!v37 && (sub_1000232C8(v33, v34, v35, v36) & 1) == 0)
        break;
      v38 = sub_100093540(*(int *)(v30 + 28));
      v42 = v24 && v39 == v41;
      if (!v42 && (sub_1000232C8(v38, v39, v40, v41) & 1) == 0)
        break;
      sub_100093530();
      if (!v24)
        break;
      sub_100093530();
      if (!v24)
        break;
      sub_100093530();
      if (!v24 || *(double *)&v10[v5[10]] != *(double *)(v0 + v5[10]))
        break;
      v43 = sub_100093304(v5[11]);
      v47 = v24 && v44 == v46;
      if (!v47 && (sub_1000232C8(v43, v44, v45, v46) & 1) == 0)
        break;
      type metadata accessor for Precipitation(0);
      sub_10002EF14(&qword_1001C1DA8, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation, (uint64_t)&protocol conformance descriptor for Precipitation);
      sub_100093660();
      sub_100093660();
      if (v62 == v60 && v63 == v61)
      {
        sub_100093698();
      }
      else
      {
        v49 = sub_1000232C8(v62, v63, v60, v61);
        sub_10002548C();
        sub_1000935D4();
        if ((v49 & 1) == 0)
          break;
      }
      v50 = sub_10009364C(v5[13]);
      v51 = static Wind.== infix(_:_:)(v50);
      sub_1000933C8(v0);
      sub_1000933C8((uint64_t)v10);
      v13 = v59 - 1;
      if ((v51 & 1) != 0)
      {
        v2 = v57;
        v4 = v56;
        v12 = v58 + v55;
        if (v59)
          continue;
      }
      goto LABEL_60;
    }
    v52 = sub_1000934FC();
    sub_100011894(v52, v53);
    sub_100093570((uint64_t)v10);
  }
LABEL_60:
  sub_10001C770();
}

void sub_10008D238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10008D594(a1, a2, (uint64_t)type metadata accessor for DailyForecastViewModel, (uint64_t)sub_10013DB1C, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_10008D24C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  sub_100070E5C();
  v2 = v1;
  v4 = v3;
  v5 = sub_10002338C();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100093494(v7, v47);
  sub_100005D40(&qword_1001BF0A0);
  sub_100029068();
  __chkstk_darwin(v8);
  sub_10002325C();
  v11 = v10 - v9;
  v54 = sub_100005D40(&qword_1001BF828);
  sub_100029068();
  __chkstk_darwin(v12);
  v13 = sub_1000253B8();
  v53 = type metadata accessor for TemplateDescriptions(v13);
  sub_100093588();
  v15 = __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v20 = (uint64_t *)((char *)&v47 - v19);
  v21 = *(_QWORD *)(v4 + 16);
  if (v21 == *(_QWORD *)(v2 + 16) && v21 && v4 != v2)
  {
    v48 = v6;
    v22 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    v49 = *(_QWORD *)(v18 + 72);
    v50 = v4;
    v51 = v2;
    v47 = v0;
    while (1)
    {
      sub_10000F7C4(v4 + v22, (uint64_t)v20, type metadata accessor for TemplateDescriptions);
      sub_10000F7C4(v2 + v22, (uint64_t)v17, type metadata accessor for TemplateDescriptions);
      v23 = v20[1];
      v24 = v17[1];
      v25 = *v20 == *v17 && v23 == v24;
      if (!v25 && (sub_1000232C8(*v20, v23, *v17, v24) & 1) == 0)
        break;
      v26 = v20[2];
      v27 = v20[3];
      v28 = v17[2];
      v29 = v17[3];
      v30 = v26 == v28 && v27 == v29;
      if (!v30 && (sub_1000232C8(v26, v27, v28, v29) & 1) == 0)
        break;
      v31 = v20[4];
      v32 = v17[4];
      if (v31)
      {
        if (!v32)
          break;
        swift_bridgeObjectRetain(v17[4]);
        swift_bridgeObjectRetain(v31);
        sub_100092A7C();
        v34 = v33;
        swift_bridgeObjectRelease(v31);
        sub_1000935D4();
        if ((v34 & 1) == 0)
          break;
      }
      else if (v32)
      {
        break;
      }
      v35 = *(int *)(v53 + 28);
      v36 = (uint64_t)v17 + v35;
      v37 = v0 + *(int *)(v54 + 48);
      sub_100093688((uint64_t)v20 + v35, v0);
      sub_100093688(v36, v37);
      sub_10002879C(v0, 1, v5);
      if (v25)
      {
        sub_10002879C(v37, 1, v5);
        if (!v25)
          goto LABEL_30;
        sub_100049BFC(v0);
      }
      else
      {
        v38 = sub_1000935C8();
        sub_100093688(v38, v39);
        sub_10002879C(v37, 1, v5);
        if (v40)
        {
          (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v11, v5);
LABEL_30:
          sub_100016904(v0, &qword_1001BF828);
          break;
        }
        v41 = v11;
        v42 = v52;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v52, v37, v5);
        sub_10002EF14(&qword_1001BF838, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v43 = sub_1000935C8();
        v45 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v44, v5);
        v46 = v42;
        v11 = v41;
        v0 = v47;
        sub_100093578(v46);
        sub_100093578(v11);
        sub_100016904(v0, &qword_1001BF0A0);
        if ((v45 & 1) == 0)
          break;
      }
      sub_100011894((uint64_t)v17, type metadata accessor for TemplateDescriptions);
      sub_100011894((uint64_t)v20, type metadata accessor for TemplateDescriptions);
      v4 = v50;
      v22 += v49;
      --v21;
      v2 = v51;
      if (!v21)
        goto LABEL_32;
    }
    sub_100093570((uint64_t)v17);
    sub_100093570((uint64_t)v20);
  }
LABEL_32:
  sub_10001C770();
}

void sub_10008D594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  void (*v25)(_QWORD);
  uint64_t (*v26)(_QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  BOOL v43;

  sub_100070E5C();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v26 = (uint64_t (*)(_QWORD))v25;
  v28 = v27;
  v30 = v29;
  v25(0);
  sub_100093588();
  __chkstk_darwin(v31);
  sub_1000934CC();
  __chkstk_darwin(v32);
  v35 = (char *)&a9 - v34;
  v36 = *(_QWORD *)(v30 + 16);
  if (v36 == *(_QWORD *)(v28 + 16) && v36 && v30 != v28)
  {
    v37 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    v38 = *(_QWORD *)(v33 + 72);
    v39 = v36 - 1;
    do
    {
      sub_10000F7C4(v30 + v37, (uint64_t)v35, v26);
      sub_10000F7C4(v28 + v37, v20, v26);
      v40 = sub_1000935C8();
      v41 = v24(v40);
      sub_100093580(v20);
      sub_100093580((uint64_t)v35);
      v43 = v39-- != 0;
      if ((v41 & 1) == 0)
        break;
      v37 += v38;
    }
    while (v43);
  }
  sub_10001C770();
}

uint64_t sub_10008D68C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v20;
  unint64_t v22;
  char v23;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001001872E0)
  {
    v9 = 0x80000001001872E0;
LABEL_22:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001001872E0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x6F46796C72756F68 && a2 == 0xEF73747361636572)
  {
    v11 = 0xEF73747361636572;
    goto LABEL_30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F46796C72756F68, 0xEF73747361636572, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_30:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0x726F46796C696164 && a2 == 0xEE00737473616365)
  {
    v13 = 0xEE00737473616365;
    goto LABEL_38;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F46796C696164, 0xEE00737473616365, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_38:
    swift_bridgeObjectRelease(v13);
    return 4;
  }
  if (a1 == 0x696C617551726961 && a2 == 0xEA00000000007974)
  {
    v15 = 0xEA00000000007974;
    goto LABEL_46;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C617551726961, 0xEA00000000007974, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_46:
    swift_bridgeObjectRelease(v15);
    return 5;
  }
  if (a1 == 0xD000000000000015)
  {
    v16 = 0x8000000100187300;
    if (a2 == 0x8000000100187300)
      goto LABEL_51;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100187300, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_51:
    swift_bridgeObjectRelease(v16);
    return 6;
  }
  if (a1 == 0x73746E657665 && a2 == 0xE600000000000000)
  {
    v18 = 0xE600000000000000;
    goto LABEL_59;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73746E657665, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_59:
    swift_bridgeObjectRelease(v18);
    return 7;
  }
  if (a1 == 0x736E654461746164 && a2 == 0xEE00656C62615465)
  {
    v20 = 0xEE00656C62615465;
    goto LABEL_67;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E654461746164, 0xEE00656C62615465, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_67:
    swift_bridgeObjectRelease(v20);
    return 8;
  }
  if (a1 == 0x5255656372756F73 && a2 == 0xE90000000000004CLL)
  {
    v22 = 0xE90000000000004CLL;
    goto LABEL_75;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5255656372756F73, 0xE90000000000004CLL, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_75:
    swift_bridgeObjectRelease(v22);
    return 9;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100187320)
  {
    swift_bridgeObjectRelease(0x8000000100187320);
    return 10;
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100187320, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v23 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_10008DB30()
{
  return 11;
}

uint64_t sub_10008DB38(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10008DB60
                                                            + 4 * asc_10017D480[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_10008DB60()
{
  return 0x6E6F697461636F6CLL;
}

unint64_t sub_10008DB78()
{
  return 0xD000000000000012;
}

uint64_t sub_10008DB98()
{
  return 0x6F46796C72756F68;
}

uint64_t sub_10008DBBC()
{
  return 0x726F46796C696164;
}

uint64_t sub_10008DBE0()
{
  return 0x696C617551726961;
}

unint64_t sub_10008DBFC()
{
  return 0xD000000000000015;
}

uint64_t sub_10008DC54()
{
  return 0x736E654461746164;
}

uint64_t sub_10008DC78()
{
  unsigned __int8 *v0;

  return sub_10008DB38(*v0);
}

uint64_t sub_10008DC80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10008D68C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10008DCA4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10008DB30();
  *a1 = result;
  return result;
}

uint64_t sub_10008DCC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008EB18();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008DCF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008EB18();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AggregateWeatherViewModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  __int16 v33;
  char v34;

  v3 = v1;
  v5 = sub_100005D40(&qword_1001C1AA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002325C();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_100022330(a1, v10);
  v12 = sub_10008EB18();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AggregateWeatherViewModel.CodingKeys, &type metadata for AggregateWeatherViewModel.CodingKeys, v12, v10, v11);
  LOBYTE(v32) = 0;
  type metadata accessor for UUID(0);
  sub_10002EF14(&qword_1001BF778, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_100049D40();
  if (!v2)
  {
    v13 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
    v14 = sub_100093418(1);
    type metadata accessor for Location(v14);
    sub_10002EF14(&qword_1001C1AB0, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
    sub_100049D40();
    v15 = sub_100093418(2);
    type metadata accessor for CurrentObservationViewModel(v15);
    sub_10002EF14(&qword_1001C1AB8, type metadata accessor for CurrentObservationViewModel, (uint64_t)&unk_10017ABB0);
    sub_100049D40();
    v32 = *(_QWORD *)(v3 + v13[7]);
    v34 = 3;
    sub_100005D40(&qword_1001C1AC0);
    v16 = sub_10008EB54();
    sub_100093298(v16);
    v32 = *(_QWORD *)(v3 + v13[8]);
    v34 = 4;
    sub_100005D40(&qword_1001C1AD8);
    v17 = sub_10008EBD0();
    sub_100093298(v17);
    v18 = sub_100093418(5);
    type metadata accessor for AirQualityViewModel(v18);
    sub_10002EF14(&qword_1001C1AF0, type metadata accessor for AirQualityViewModel, (uint64_t)&unk_10017E4BC);
    sub_1000932B8(v19);
    v20 = sub_100093418(6);
    type metadata accessor for NextHourPrecipitationChartViewModel(v20);
    sub_10002EF14(&qword_1001C1AF8, (uint64_t (*)(uint64_t))&type metadata accessor for NextHourPrecipitationChartViewModel, (uint64_t)&protocol conformance descriptor for NextHourPrecipitationChartViewModel);
    sub_1000932B8(v21);
    v32 = *(_QWORD *)(v3 + v13[11]);
    v34 = 7;
    sub_100005D40(&qword_1001C1B00);
    v22 = sub_10008EC4C();
    sub_100093298(v22);
    v23 = (uint64_t *)(v3 + v13[12]);
    v24 = *((_WORD *)v23 + 4);
    v32 = *v23;
    v33 = v24;
    v34 = 8;
    sub_10008ECC8();
    sub_100049D40();
    v25 = sub_100093418(9);
    type metadata accessor for URL(v25);
    sub_10002EF14(&qword_1001C1B20, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    sub_1000932B8(v26);
    v27 = v3 + v13[14];
    v28 = sub_100093418(10);
    v29 = type metadata accessor for AggregateWeatherViewModel.SunEvent(v28);
    sub_10002EF14(&qword_1001C1B28, type metadata accessor for AggregateWeatherViewModel.SunEvent, (uint64_t)&unk_10017D6B4);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v27, &v32, v5, v29, v30);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void AggregateWeatherViewModel.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  __int16 v70;
  char v71;

  sub_100005D40(&qword_1001BFA40);
  sub_100029068();
  __chkstk_darwin(v4);
  sub_1000230E0();
  v55 = v5;
  sub_100005D40(&qword_1001BFA28);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_100093478(v7, v53);
  sub_100005D40(&qword_1001BFA38);
  sub_100029068();
  __chkstk_darwin(v8);
  sub_1000230E0();
  v57 = v9;
  sub_100005D40(&qword_1001BFA30);
  sub_100029068();
  __chkstk_darwin(v10);
  sub_1000230E0();
  v58 = v11;
  v12 = sub_100093378();
  v60 = type metadata accessor for CurrentObservationViewModel(v12);
  sub_100029068();
  __chkstk_darwin(v13);
  sub_1000230E0();
  v59 = v14;
  v15 = sub_100093378();
  v16 = type metadata accessor for Location(v15);
  v62 = *(_QWORD *)(v16 - 8);
  v63 = v16;
  sub_1000230F4();
  __chkstk_darwin(v17);
  v18 = sub_10009345C();
  v19 = type metadata accessor for UUID(v18);
  v64 = *(_QWORD *)(v19 - 8);
  sub_1000230F4();
  __chkstk_darwin(v20);
  sub_1000230E0();
  v61 = v21;
  v65 = sub_100005D40(&qword_1001C1B30);
  v22 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  type metadata accessor for AggregateWeatherViewModel(0);
  sub_100029068();
  __chkstk_darwin(v23);
  sub_10002325C();
  v67 = v26 - v25;
  v68 = v24;
  v27 = v26 - v25 + v24[14];
  v28 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v27, 1, 1, v28);
  v29 = a1[3];
  v30 = a1[4];
  sub_100022330(a1, v29);
  v31 = sub_10008EB18();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AggregateWeatherViewModel.CodingKeys, &type metadata for AggregateWeatherViewModel.CodingKeys, v31, v29, v30);
  if (v66)
  {
    sub_10009362C();
    sub_100016904(v27, &qword_1001BFA40);
  }
  else
  {
    sub_10002EF14(&qword_1001BF7C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    sub_1000933D0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v32, v65, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v67, v61, v19);
    sub_10002EF14(&qword_1001C1B38, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
    sub_1000933D0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v63, v33, v65, v63);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v67 + v68[5], v2, v63);
    LOBYTE(v69) = 2;
    sub_10002EF14(&qword_1001C1B40, type metadata accessor for CurrentObservationViewModel, (uint64_t)&unk_10017AB88);
    sub_1000933D0();
    sub_1000932F8(v60, v34, v65, v60);
    sub_100011868(v59, v67 + v68[6], type metadata accessor for CurrentObservationViewModel);
    sub_100005D40(&qword_1001C1AC0);
    v71 = 3;
    sub_10008ED04();
    sub_100093274();
    *(_QWORD *)(v67 + v68[7]) = v69;
    sub_100005D40(&qword_1001C1AD8);
    v71 = 4;
    sub_10008ED80();
    sub_100093274();
    *(_QWORD *)(v67 + v68[8]) = v69;
    type metadata accessor for AirQualityViewModel(0);
    sub_10002EF14(&qword_1001C1B68, type metadata accessor for AirQualityViewModel, (uint64_t)&unk_10017E494);
    sub_1000933D0();
    sub_1000932E0(v35, v36, v37, v38, v39);
    sub_1000168AC(v58, v67 + v68[9], &qword_1001BFA30);
    type metadata accessor for NextHourPrecipitationChartViewModel(0);
    LOBYTE(v69) = 6;
    sub_10002EF14(&qword_1001C1B70, (uint64_t (*)(uint64_t))&type metadata accessor for NextHourPrecipitationChartViewModel, (uint64_t)&protocol conformance descriptor for NextHourPrecipitationChartViewModel);
    sub_1000933D0();
    sub_1000932E0(v40, v41, v42, v43, v44);
    sub_1000168AC(v57, v67 + v68[10], &qword_1001BFA38);
    sub_100005D40(&qword_1001C1B00);
    v71 = 7;
    sub_10008EDFC();
    sub_100093274();
    *(_QWORD *)(v67 + v68[11]) = v69;
    v71 = 8;
    sub_10008EE78();
    sub_1000932F8((uint64_t)&unk_1001B89D8, (uint64_t)&v71, v65, (uint64_t)&unk_1001B89D8);
    v45 = v67 + v68[12];
    *(_QWORD *)v45 = v69;
    *(_WORD *)(v45 + 8) = v70;
    type metadata accessor for URL(0);
    sub_10002EF14(&qword_1001C1B90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    sub_1000933D0();
    sub_1000932E0(v46, v47, v48, v49, v50);
    sub_1000168AC(v56, v67 + v68[13], &qword_1001BFA28);
    sub_10002EF14(&qword_1001C1B98, type metadata accessor for AggregateWeatherViewModel.SunEvent, (uint64_t)&unk_10017D68C);
    sub_1000933D0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v28, v51, v65, v28, v52);
    sub_100093268(*(uint64_t (**)(uint64_t, _QWORD))(v22 + 8));
    sub_10008EEB4(v55, v27);
    sub_10000F7C4(v67, a2, type metadata accessor for AggregateWeatherViewModel);
    sub_10009362C();
    sub_100011894(v67, type metadata accessor for AggregateWeatherViewModel);
  }
  sub_100023114();
}

void sub_10008E8E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int16 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(a9, a1, v20);
  v21 = (int *)sub_100087ED4();
  v22 = a9 + v21[5];
  v23 = sub_100070DE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22, a2, v23);
  sub_100011868(a3, a9 + v21[6], type metadata accessor for CurrentObservationViewModel);
  *(_QWORD *)(a9 + v21[7]) = a4;
  *(_QWORD *)(a9 + v21[8]) = a5;
  sub_1000168AC(a6, a9 + v21[9], &qword_1001BFA30);
  sub_1000168AC(a7, a9 + v21[10], &qword_1001BFA38);
  *(_QWORD *)(a9 + v21[11]) = a8;
  v24 = a9 + v21[12];
  *(_QWORD *)v24 = a10;
  *(_WORD *)(v24 + 8) = a11;
  sub_1000168AC(a12, a9 + v21[13], &qword_1001BFA28);
  sub_1000168AC(a13, a9 + v21[14], &qword_1001BFA40);
}

void sub_10008EAC8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AggregateWeatherViewModel.init(from:)(a1, a2);
}

uint64_t sub_10008EADC(_QWORD *a1)
{
  return AggregateWeatherViewModel.encode(to:)(a1);
}

uint64_t type metadata accessor for AggregateWeatherViewModel.SunEvent(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C1CE8, (uint64_t)&nominal type descriptor for AggregateWeatherViewModel.SunEvent);
}

uint64_t type metadata accessor for AggregateWeatherViewModel(uint64_t a1)
{
  return sub_10000F804(a1, (uint64_t *)&unk_1001C1BF8, (uint64_t)&nominal type descriptor for AggregateWeatherViewModel);
}

unint64_t sub_10008EB18()
{
  unint64_t result;

  result = qword_1001C1AA8;
  if (!qword_1001C1AA8)
  {
    result = swift_getWitnessTable(&unk_10017D6DC, &type metadata for AggregateWeatherViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1AA8);
  }
  return result;
}

unint64_t sub_10008EB54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1AC8;
  if (!qword_1001C1AC8)
  {
    v1 = sub_100005DC4(&qword_1001C1AC0);
    sub_10002EF14(&qword_1001C1AD0, type metadata accessor for HourlyForecastViewModel, (uint64_t)&unk_10017E918);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001C1AC8);
  }
  return result;
}

unint64_t sub_10008EBD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1AE0;
  if (!qword_1001C1AE0)
  {
    v1 = sub_100005DC4(&qword_1001C1AD8);
    sub_10002EF14(&qword_1001C1AE8, type metadata accessor for DailyForecastViewModel, (uint64_t)&unk_100184F50);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001C1AE0);
  }
  return result;
}

unint64_t sub_10008EC4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1B08;
  if (!qword_1001C1B08)
  {
    v1 = sub_100005DC4(&qword_1001C1B00);
    sub_10002EF14(&qword_1001C1B10, type metadata accessor for EventViewModel, (uint64_t)&unk_10017C3B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001C1B08);
  }
  return result;
}

unint64_t sub_10008ECC8()
{
  unint64_t result;

  result = qword_1001C1B18;
  if (!qword_1001C1B18)
  {
    result = swift_getWitnessTable(&unk_100180DA8, &unk_1001B89D8);
    atomic_store(result, (unint64_t *)&qword_1001C1B18);
  }
  return result;
}

unint64_t sub_10008ED04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1B48;
  if (!qword_1001C1B48)
  {
    v1 = sub_100005DC4(&qword_1001C1AC0);
    sub_10002EF14(&qword_1001C1B50, type metadata accessor for HourlyForecastViewModel, (uint64_t)&unk_10017E8F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001C1B48);
  }
  return result;
}

unint64_t sub_10008ED80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1B58;
  if (!qword_1001C1B58)
  {
    v1 = sub_100005DC4(&qword_1001C1AD8);
    sub_10002EF14(&qword_1001C1B60, type metadata accessor for DailyForecastViewModel, (uint64_t)&unk_100184F28);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001C1B58);
  }
  return result;
}

unint64_t sub_10008EDFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1B78;
  if (!qword_1001C1B78)
  {
    v1 = sub_100005DC4(&qword_1001C1B00);
    sub_10002EF14(&qword_1001C1B80, type metadata accessor for EventViewModel, (uint64_t)&unk_10017C390);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001C1B78);
  }
  return result;
}

unint64_t sub_10008EE78()
{
  unint64_t result;

  result = qword_1001C1B88;
  if (!qword_1001C1B88)
  {
    result = swift_getWitnessTable(&unk_100180D80, &unk_1001B89D8);
    atomic_store(result, (unint64_t *)&qword_1001C1B88);
  }
  return result;
}

uint64_t sub_10008EEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001BFA40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10008EEFC()
{
  sub_10002EF14(&qword_1001BF760, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

char *initializeBufferWithCopyOfBuffer for AggregateWeatherViewModel(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  _BOOL8 v122;
  uint64_t v124;
  int *v125;
  _QWORD *v126;
  void (*v127)(char *, char *, uint64_t);
  uint64_t v128;
  void (*v129)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v35 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v35 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v35);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[6];
    v14 = &a1[v13];
    v126 = a2;
    v127 = v8;
    v15 = &a2[v13];
    v128 = v7;
    v8(&a1[v13], &a2[v13], v7);
    v16 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v17 = v16[5];
    v18 = &v14[v17];
    v19 = &v15[v17];
    v20 = type metadata accessor for Date(0);
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v21(v18, v19, v20);
    v124 = v20;
    v129 = v21;
    v21(&v14[v16[6]], &v15[v16[6]], v20);
    v22 = v16[7];
    v23 = &v14[v22];
    v24 = &v15[v22];
    v25 = sub_100005D40(&qword_1001BF090);
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v26(v23, v24, v25);
    v26(&v14[v16[8]], &v15[v16[8]], v25);
    v27 = v16[9];
    v28 = &v14[v27];
    v29 = &v15[v27];
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    v31 = v16[10];
    v32 = &v14[v31];
    v33 = &v15[v31];
    swift_bridgeObjectRetain(v30);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v33, 1, v25))
    {
      v34 = sub_100005D40(&qword_1001BF098);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v26(v32, v33, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v32, 0, 1, v25);
    }
    v36 = v16[11];
    v37 = &v14[v36];
    v38 = &v15[v36];
    v125 = a3;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v36], 1, v25))
    {
      v39 = sub_100005D40(&qword_1001BF098);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v26(v37, v38, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v37, 0, 1, v25);
    }
    v40 = v16[12];
    v41 = &v14[v40];
    v42 = &v15[v40];
    v127(&v14[v40], &v15[v40], v128);
    v43 = (int *)type metadata accessor for ConditionViewModel(0);
    v44 = v43[5];
    v45 = &v41[v44];
    v46 = &v42[v44];
    v47 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    v48 = v43[6];
    v49 = &v41[v48];
    v50 = &v42[v48];
    v51 = *((_QWORD *)v50 + 1);
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *((_QWORD *)v49 + 1) = v51;
    v52 = v43[7];
    v53 = &v41[v52];
    v54 = &v42[v52];
    v55 = *((_QWORD *)v54 + 1);
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *((_QWORD *)v53 + 1) = v55;
    v41[v43[8]] = v42[v43[8]];
    v41[v43[9]] = v42[v43[9]];
    v41[v43[10]] = v42[v43[10]];
    *(_QWORD *)&v14[v16[13]] = *(_QWORD *)&v15[v16[13]];
    v56 = v16[14];
    v57 = &v14[v56];
    v58 = &v15[v56];
    v59 = type metadata accessor for CloudAltitudeKind(0);
    v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v55);
    v60(v57, v58, v59);
    v61 = v16[15];
    v62 = &v14[v61];
    v63 = &v15[v61];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v61], 1, v124))
    {
      v64 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      v129(v62, v63, v124);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v62, 0, 1, v124);
    }
    v65 = v16[16];
    v66 = &v14[v65];
    v67 = &v15[v65];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v65], 1, v124))
    {
      v68 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v129(v66, v67, v124);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v124);
    }
    v69 = v16[17];
    v70 = &v14[v69];
    v71 = &v15[v69];
    v72 = type metadata accessor for UVIndex(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
    v73 = v16[18];
    v74 = &v14[v73];
    v75 = &v15[v73];
    v76 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
    *(_QWORD *)&v14[v16[19]] = *(_QWORD *)&v15[v16[19]];
    v77 = v16[20];
    v78 = &v14[v77];
    v79 = &v15[v77];
    v80 = *((_QWORD *)v79 + 1);
    if (v80)
    {
      *(_QWORD *)v78 = *(_QWORD *)v79;
      *((_QWORD *)v78 + 1) = v80;
      v81 = *((_QWORD *)v79 + 2);
      v82 = *((_QWORD *)v79 + 3);
      v83 = v79[32];
      swift_bridgeObjectRetain(v80);
      sub_100006E58(v81, v82, v83);
      *((_QWORD *)v78 + 2) = v81;
      *((_QWORD *)v78 + 3) = v82;
      v78[32] = v83;
    }
    else
    {
      v84 = *((_OWORD *)v79 + 1);
      *(_OWORD *)v78 = *(_OWORD *)v79;
      *((_OWORD *)v78 + 1) = v84;
      v78[32] = v79[32];
    }
    v85 = v125[7];
    v86 = v125[8];
    v87 = *(_QWORD *)((char *)v126 + v85);
    *(_QWORD *)&a1[v85] = v87;
    v88 = *(_QWORD *)((char *)v126 + v86);
    *(_QWORD *)&a1[v86] = v88;
    v89 = v125[9];
    v90 = &a1[v89];
    v91 = (char *)v126 + v89;
    v92 = (int *)type metadata accessor for AirQualityViewModel(0);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v88);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v91, 1, (uint64_t)v92))
    {
      v93 = sub_100005D40(&qword_1001BFA30);
      memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    }
    else
    {
      v127(v90, v91, v128);
      v129(&v90[v92[5]], &v91[v92[5]], v124);
      *(_QWORD *)&v90[v92[6]] = *(_QWORD *)&v91[v92[6]];
      v94 = v92[7];
      v95 = &v90[v94];
      v96 = &v91[v94];
      v97 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v95, v96, v97);
      v98 = v92[8];
      v99 = &v90[v98];
      v100 = &v91[v98];
      v101 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v99, v100, v101);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v90, 0, 1, (uint64_t)v92);
    }
    v102 = v125[10];
    v103 = &a1[v102];
    v104 = (char *)v126 + v102;
    HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v104, 1, HourPrecipitationChartViewModel))
    {
      v106 = sub_100005D40(&qword_1001BFA38);
      memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v103, v104, HourPrecipitationChartViewModel);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v103, 0, 1, HourPrecipitationChartViewModel);
    }
    v107 = v125[11];
    v108 = v125[12];
    v109 = *(_QWORD *)((char *)v126 + v107);
    *(_QWORD *)&a1[v107] = v109;
    v110 = &a1[v108];
    v111 = (char *)v126 + v108;
    *(_QWORD *)v110 = *(_QWORD *)v111;
    *((_WORD *)v110 + 4) = *((_WORD *)v111 + 4);
    v112 = v125[13];
    v113 = &a1[v112];
    v114 = (char *)v126 + v112;
    v115 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v109);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v114, 1, v115))
    {
      v116 = sub_100005D40(&qword_1001BFA28);
      memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 16))(v113, v114, v115);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v113, 0, 1, v115);
    }
    v117 = v125[14];
    v118 = &a1[v117];
    v119 = (char *)v126 + v117;
    v120 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v119, 1, v120))
    {
      v121 = sub_100005D40(&qword_1001BFA40);
      memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    }
    else
    {
      v122 = swift_getEnumCaseMultiPayload(v119, v120) == 1;
      v129(v118, v119, v124);
      swift_storeEnumTagMultiPayload(v118, v120, v122);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v118, 0, 1, v120);
    }
  }
  return a1;
}

uint64_t destroy for AggregateWeatherViewModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  void (*v44)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[6];
  v5(v8, v4);
  v9 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v10 = v8 + v9[5];
  v11 = type metadata accessor for Date(0);
  v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v44(v10, v11);
  v44(v8 + v9[6], v11);
  v12 = v8 + v9[7];
  v13 = sub_100005D40(&qword_1001BF090);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(v12, v13);
  v14(v8 + v9[8], v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[9] + 8));
  v15 = v8 + v9[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v15, 1, v13))
    v14(v15, v13);
  v16 = v8 + v9[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v16, 1, v13))
    v14(v16, v13);
  v17 = v8 + v9[12];
  v5(v17, v4);
  v18 = (int *)type metadata accessor for ConditionViewModel(0);
  v19 = v17 + v18[5];
  v20 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v18[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v18[7] + 8));
  v21 = v8 + v9[14];
  v22 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = v8 + v9[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v23, 1, v11))
    v44(v23, v11);
  v24 = v8 + v9[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v24, 1, v11))
    v44(v24, v11);
  v25 = v8 + v9[17];
  v26 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v27 = v8 + v9[18];
  v28 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  v29 = v8 + v9[20];
  v30 = *(_QWORD *)(v29 + 8);
  if (v30)
  {
    swift_bridgeObjectRelease(v30);
    sub_100007458(*(_QWORD *)(v29 + 16), *(_QWORD *)(v29 + 24), *(_BYTE *)(v29 + 32));
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
  v31 = a1 + a2[9];
  v32 = (int *)type metadata accessor for AirQualityViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v31, 1, (uint64_t)v32))
  {
    v5(v31, v4);
    v44(v31 + v32[5], v11);
    v33 = v31 + v32[7];
    v34 = type metadata accessor for AirQualityScale(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
    v35 = v31 + v32[8];
    v36 = type metadata accessor for AirQualityScaleCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
  }
  v37 = a1 + a2[10];
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v37, 1, HourPrecipitationChartViewModel))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v37, HourPrecipitationChartViewModel);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
  v39 = a1 + a2[13];
  v40 = type metadata accessor for URL(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v39, 1, v40))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
  v41 = a1 + a2[14];
  v42 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v41, 1, v42);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v44)(v41, v11);
  return result;
}

uint64_t initializeWithCopy for AggregateWeatherViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  void *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  const void *v102;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  const void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  _BOOL8 v120;
  uint64_t v122;
  int *v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t, uint64_t);
  uint64_t v126;
  void (*v127)(void *, const void *, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v123 = a3;
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v125 = v7;
  v126 = v6;
  v7(a1 + v12, a2 + v12, v6);
  v15 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v16 = v15[5];
  v17 = v13 + v16;
  v18 = v14 + v16;
  v19 = type metadata accessor for Date(0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
  v20(v17, v18, v19);
  v122 = v19;
  v127 = (void (*)(void *, const void *, uint64_t))v20;
  v20(v13 + v15[6], v14 + v15[6], v19);
  v21 = v15[7];
  v22 = v13 + v21;
  v23 = v14 + v21;
  v24 = sub_100005D40(&qword_1001BF090);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
  v25(v22, v23, v24);
  v25(v13 + v15[8], v14 + v15[8], v24);
  v26 = v15[9];
  v27 = (_QWORD *)(v13 + v26);
  v28 = (_QWORD *)(v14 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = v15[10];
  v31 = (void *)(v13 + v30);
  v32 = (const void *)(v14 + v30);
  swift_bridgeObjectRetain(v29);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v24))
  {
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v25((uint64_t)v31, (uint64_t)v32, v24);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v24);
  }
  v34 = v15[11];
  v35 = (void *)(v13 + v34);
  v36 = (const void *)(v14 + v34);
  v124 = a1;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v34, 1, v24))
  {
    v37 = sub_100005D40(&qword_1001BF098);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v25((uint64_t)v35, (uint64_t)v36, v24);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v35, 0, 1, v24);
  }
  v38 = v15[12];
  v39 = v13 + v38;
  v40 = v14 + v38;
  v125(v13 + v38, v14 + v38, v126);
  v41 = (int *)type metadata accessor for ConditionViewModel(0);
  v42 = v41[5];
  v43 = v39 + v42;
  v44 = v40 + v42;
  v45 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
  v46 = v41[6];
  v47 = (_QWORD *)(v39 + v46);
  v48 = (_QWORD *)(v40 + v46);
  v49 = v48[1];
  *v47 = *v48;
  v47[1] = v49;
  v50 = v41[7];
  v51 = (_QWORD *)(v39 + v50);
  v52 = (_QWORD *)(v40 + v50);
  v53 = v52[1];
  *v51 = *v52;
  v51[1] = v53;
  *(_BYTE *)(v39 + v41[8]) = *(_BYTE *)(v40 + v41[8]);
  *(_BYTE *)(v39 + v41[9]) = *(_BYTE *)(v40 + v41[9]);
  *(_BYTE *)(v39 + v41[10]) = *(_BYTE *)(v40 + v41[10]);
  *(_QWORD *)(v13 + v15[13]) = *(_QWORD *)(v14 + v15[13]);
  v54 = v15[14];
  v55 = v13 + v54;
  v56 = v14 + v54;
  v57 = type metadata accessor for CloudAltitudeKind(0);
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 16);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v53);
  v58(v55, v56, v57);
  v59 = v15[15];
  v60 = (void *)(v13 + v59);
  v61 = (const void *)(v14 + v59);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v59, 1, v122))
  {
    v62 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    v127(v60, v61, v122);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v60, 0, 1, v122);
  }
  v63 = v15[16];
  v64 = (void *)(v13 + v63);
  v65 = (const void *)(v14 + v63);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v63, 1, v122))
  {
    v66 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    v127(v64, v65, v122);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v122);
  }
  v67 = v15[17];
  v68 = v13 + v67;
  v69 = v14 + v67;
  v70 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
  v71 = v15[18];
  v72 = v13 + v71;
  v73 = v14 + v71;
  v74 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v72, v73, v74);
  *(_QWORD *)(v13 + v15[19]) = *(_QWORD *)(v14 + v15[19]);
  v75 = v15[20];
  v76 = v13 + v75;
  v77 = v14 + v75;
  v78 = *(_QWORD *)(v77 + 8);
  if (v78)
  {
    *(_QWORD *)v76 = *(_QWORD *)v77;
    *(_QWORD *)(v76 + 8) = v78;
    v79 = *(_QWORD *)(v77 + 16);
    v80 = *(_QWORD *)(v77 + 24);
    v81 = *(_BYTE *)(v77 + 32);
    swift_bridgeObjectRetain(v78);
    sub_100006E58(v79, v80, v81);
    *(_QWORD *)(v76 + 16) = v79;
    *(_QWORD *)(v76 + 24) = v80;
    *(_BYTE *)(v76 + 32) = v81;
  }
  else
  {
    v82 = *(_OWORD *)(v77 + 16);
    *(_OWORD *)v76 = *(_OWORD *)v77;
    *(_OWORD *)(v76 + 16) = v82;
    *(_BYTE *)(v76 + 32) = *(_BYTE *)(v77 + 32);
  }
  v83 = v123[7];
  v84 = v123[8];
  v85 = *(_QWORD *)(a2 + v83);
  *(_QWORD *)(v124 + v83) = v85;
  v86 = *(_QWORD *)(a2 + v84);
  *(_QWORD *)(v124 + v84) = v86;
  v87 = v123[9];
  v88 = (char *)(v124 + v87);
  v89 = (char *)(a2 + v87);
  v90 = (int *)type metadata accessor for AirQualityViewModel(0);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v86);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v89, 1, (uint64_t)v90))
  {
    v91 = sub_100005D40(&qword_1001BFA30);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    v125((uint64_t)v88, (uint64_t)v89, v126);
    v127(&v88[v90[5]], &v89[v90[5]], v122);
    *(_QWORD *)&v88[v90[6]] = *(_QWORD *)&v89[v90[6]];
    v92 = v90[7];
    v93 = &v88[v92];
    v94 = &v89[v92];
    v95 = type metadata accessor for AirQualityScale(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v93, v94, v95);
    v96 = v90[8];
    v97 = &v88[v96];
    v98 = &v89[v96];
    v99 = type metadata accessor for AirQualityScaleCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(v97, v98, v99);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v88, 0, 1, (uint64_t)v90);
  }
  v100 = v123[10];
  v101 = (void *)(v124 + v100);
  v102 = (const void *)(a2 + v100);
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v102, 1, HourPrecipitationChartViewModel))
  {
    v104 = sub_100005D40(&qword_1001BFA38);
    memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v101, v102, HourPrecipitationChartViewModel);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v101, 0, 1, HourPrecipitationChartViewModel);
  }
  v105 = v123[11];
  v106 = v123[12];
  v107 = *(_QWORD *)(a2 + v105);
  *(_QWORD *)(v124 + v105) = v107;
  v108 = v124 + v106;
  v109 = a2 + v106;
  *(_QWORD *)v108 = *(_QWORD *)v109;
  *(_WORD *)(v108 + 8) = *(_WORD *)(v109 + 8);
  v110 = v123[13];
  v111 = (void *)(v124 + v110);
  v112 = (const void *)(a2 + v110);
  v113 = type metadata accessor for URL(0);
  swift_bridgeObjectRetain(v107);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v112, 1, v113))
  {
    v114 = sub_100005D40(&qword_1001BFA28);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(v111, v112, v113);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v111, 0, 1, v113);
  }
  v115 = v123[14];
  v116 = (void *)(v124 + v115);
  v117 = (const void *)(a2 + v115);
  v118 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v117, 1, v118))
  {
    v119 = sub_100005D40(&qword_1001BFA40);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
  }
  else
  {
    v120 = swift_getEnumCaseMultiPayload(v117, v118) == 1;
    v127(v116, v117, v122);
    swift_storeEnumTagMultiPayload(v116, v118, v120);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v116, 0, 1, v118);
  }
  return v124;
}

uint64_t assignWithCopy for AggregateWeatherViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const void *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  int *v113;
  int v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  const void *v126;
  uint64_t HourPrecipitationChartViewModel;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  _BYTE *v137;
  uint64_t v138;
  void *v139;
  const void *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  const void *v147;
  uint64_t v148;
  int v149;
  int v150;
  _BOOL8 v151;
  uint64_t v152;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  int EnumCaseMultiPayload;
  uint64_t v163;
  void (*v164)(void *, const void *, uint64_t);
  int *v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t, uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;

  v6 = type metadata accessor for UUID(0);
  v163 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v163 + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v165 = a3;
  v166 = a2;
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v168 = v7;
  v169 = v6;
  v7(a1 + v12, a2 + v12, v6);
  v15 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v16 = v15[5];
  v17 = v13 + v16;
  v18 = v14 + v16;
  v19 = type metadata accessor for Date(0);
  v170 = *(_QWORD *)(v19 - 8);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v170 + 24);
  v20(v17, v18, v19);
  v167 = v19;
  v164 = (void (*)(void *, const void *, uint64_t))v20;
  v20(v13 + v15[6], v14 + v15[6], v19);
  v21 = v15[7];
  v22 = v13 + v21;
  v23 = v14 + v21;
  v24 = sub_100005D40(&qword_1001BF090);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24);
  v26(v22, v23, v24);
  v26(v13 + v15[8], v14 + v15[8], v24);
  v27 = v15[9];
  v28 = (_QWORD *)(v13 + v27);
  v29 = (_QWORD *)(v14 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = v15[10];
  v33 = (void *)(v13 + v32);
  v34 = (const void *)(v14 + v32);
  LODWORD(v20) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v32, 1, v24);
  v35 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v34, 1, v24);
  if ((_DWORD)v20)
  {
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v33, v34, v24);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v33, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v35)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v33, v24);
LABEL_6:
    v36 = sub_100005D40(&qword_1001BF098);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_7;
  }
  v26((uint64_t)v33, (uint64_t)v34, v24);
LABEL_7:
  v37 = v15[11];
  v38 = (void *)(v13 + v37);
  v39 = (const void *)(v14 + v37);
  v40 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v37, 1, v24);
  v41 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v39, 1, v24);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v38, v39, v24);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v38, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v41)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v38, v24);
LABEL_12:
    v42 = sub_100005D40(&qword_1001BF098);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  v26((uint64_t)v38, (uint64_t)v39, v24);
LABEL_13:
  v43 = v15[12];
  v44 = v13 + v43;
  v45 = v14 + v43;
  v168(v13 + v43, v14 + v43, v169);
  v46 = (int *)type metadata accessor for ConditionViewModel(0);
  v47 = v46[5];
  v48 = v44 + v47;
  v49 = v45 + v47;
  v50 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 24))(v48, v49, v50);
  v51 = v46[6];
  v52 = (_QWORD *)(v44 + v51);
  v53 = (_QWORD *)(v45 + v51);
  *v52 = *v53;
  v54 = v53[1];
  v55 = v52[1];
  v52[1] = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v56 = v46[7];
  v57 = (_QWORD *)(v44 + v56);
  v58 = (_QWORD *)(v45 + v56);
  *v57 = *v58;
  v59 = v58[1];
  v60 = v57[1];
  v57[1] = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  *(_BYTE *)(v44 + v46[8]) = *(_BYTE *)(v45 + v46[8]);
  *(_BYTE *)(v44 + v46[9]) = *(_BYTE *)(v45 + v46[9]);
  *(_BYTE *)(v44 + v46[10]) = *(_BYTE *)(v45 + v46[10]);
  *(_QWORD *)(v13 + v15[13]) = *(_QWORD *)(v14 + v15[13]);
  v61 = v15[14];
  v62 = v13 + v61;
  v63 = v14 + v61;
  v64 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 24))(v62, v63, v64);
  v65 = v15[15];
  v66 = (void *)(v13 + v65);
  v67 = (const void *)(v14 + v65);
  LODWORD(v62) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v65, 1, v167);
  v68 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v167);
  if ((_DWORD)v62)
  {
    if (!v68)
    {
      (*(void (**)(void *, const void *, uint64_t))(v170 + 16))(v66, v67, v167);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v167);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v68)
  {
    (*(void (**)(void *, uint64_t))(v170 + 8))(v66, v167);
LABEL_18:
    v69 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_19;
  }
  v164(v66, v67, v167);
LABEL_19:
  v70 = v15[16];
  v71 = (void *)(v13 + v70);
  v72 = (const void *)(v14 + v70);
  v73 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v70, 1, v167);
  v74 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v72, 1, v167);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(void *, const void *, uint64_t))(v170 + 16))(v71, v72, v167);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v71, 0, 1, v167);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v74)
  {
    (*(void (**)(void *, uint64_t))(v170 + 8))(v71, v167);
LABEL_24:
    v75 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_25;
  }
  v164(v71, v72, v167);
LABEL_25:
  v76 = v15[17];
  v77 = v13 + v76;
  v78 = v14 + v76;
  v79 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 24))(v77, v78, v79);
  v80 = v15[18];
  v81 = v13 + v80;
  v82 = v14 + v80;
  v83 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 24))(v81, v82, v83);
  *(_QWORD *)(v13 + v15[19]) = *(_QWORD *)(v14 + v15[19]);
  v84 = v15[20];
  v85 = v13 + v84;
  v86 = (__int128 *)(v14 + v84);
  v87 = *(_QWORD *)(v85 + 8);
  v88 = *(_QWORD *)(v14 + v84 + 8);
  if (v87)
  {
    if (v88)
    {
      *(_QWORD *)v85 = *(_QWORD *)v86;
      v89 = *((_QWORD *)v86 + 1);
      *(_QWORD *)(v85 + 8) = v89;
      swift_bridgeObjectRetain(v89);
      swift_bridgeObjectRelease(v87);
      v90 = *((_QWORD *)v86 + 2);
      v91 = *((_QWORD *)v86 + 3);
      v92 = *((_BYTE *)v86 + 32);
      sub_100006E58(v90, v91, v92);
      v93 = *(_QWORD *)(v85 + 16);
      v94 = *(_QWORD *)(v85 + 24);
      v95 = *(_BYTE *)(v85 + 32);
      *(_QWORD *)(v85 + 16) = v90;
      *(_QWORD *)(v85 + 24) = v91;
      *(_BYTE *)(v85 + 32) = v92;
      sub_100007458(v93, v94, v95);
    }
    else
    {
      sub_100008EC4(v85);
      v100 = *((_BYTE *)v86 + 32);
      v101 = v86[1];
      *(_OWORD *)v85 = *v86;
      *(_OWORD *)(v85 + 16) = v101;
      *(_BYTE *)(v85 + 32) = v100;
    }
  }
  else if (v88)
  {
    *(_QWORD *)v85 = *(_QWORD *)v86;
    v96 = *((_QWORD *)v86 + 1);
    *(_QWORD *)(v85 + 8) = v96;
    v97 = *((_QWORD *)v86 + 2);
    v98 = *((_QWORD *)v86 + 3);
    v99 = *((_BYTE *)v86 + 32);
    swift_bridgeObjectRetain(v96);
    sub_100006E58(v97, v98, v99);
    *(_QWORD *)(v85 + 16) = v97;
    *(_QWORD *)(v85 + 24) = v98;
    *(_BYTE *)(v85 + 32) = v99;
  }
  else
  {
    v102 = *v86;
    v103 = v86[1];
    *(_BYTE *)(v85 + 32) = *((_BYTE *)v86 + 32);
    *(_OWORD *)v85 = v102;
    *(_OWORD *)(v85 + 16) = v103;
  }
  v104 = v165[7];
  v105 = *(_QWORD *)(v166 + v104);
  v106 = *(_QWORD *)(a1 + v104);
  *(_QWORD *)(a1 + v104) = v105;
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRelease(v106);
  v107 = v165[8];
  v108 = *(_QWORD *)(v166 + v107);
  v109 = *(_QWORD *)(a1 + v107);
  *(_QWORD *)(a1 + v107) = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v109);
  v110 = v165[9];
  v111 = (char *)(a1 + v110);
  v112 = (char *)(v166 + v110);
  v113 = (int *)type metadata accessor for AirQualityViewModel(0);
  LODWORD(v109) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v111, 1, (uint64_t)v113);
  v114 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v112, 1, (uint64_t)v113);
  if ((_DWORD)v109)
  {
    if (!v114)
    {
      (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v111, v112, v169);
      (*(void (**)(char *, char *, uint64_t))(v170 + 16))(&v111[v113[5]], &v112[v113[5]], v167);
      *(_QWORD *)&v111[v113[6]] = *(_QWORD *)&v112[v113[6]];
      v115 = v113[7];
      v116 = &v111[v115];
      v117 = &v112[v115];
      v118 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v118 - 8) + 16))(v116, v117, v118);
      v119 = v113[8];
      v120 = &v111[v119];
      v121 = &v112[v119];
      v122 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v111, 0, 1, (uint64_t)v113);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v114)
  {
    sub_100011894((uint64_t)v111, type metadata accessor for AirQualityViewModel);
LABEL_41:
    v123 = sub_100005D40(&qword_1001BFA30);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    goto LABEL_42;
  }
  v168((uint64_t)v111, (uint64_t)v112, v169);
  v164(&v111[v113[5]], &v112[v113[5]], v167);
  *(_QWORD *)&v111[v113[6]] = *(_QWORD *)&v112[v113[6]];
  v154 = v113[7];
  v155 = &v111[v154];
  v156 = &v112[v154];
  v157 = type metadata accessor for AirQualityScale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 24))(v155, v156, v157);
  v158 = v113[8];
  v159 = &v111[v158];
  v160 = &v112[v158];
  v161 = type metadata accessor for AirQualityScaleCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 24))(v159, v160, v161);
LABEL_42:
  v124 = v165[10];
  v125 = (void *)(a1 + v124);
  v126 = (const void *)(v166 + v124);
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v128 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v125, 1, HourPrecipitationChartViewModel);
  v129 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v126, 1, HourPrecipitationChartViewModel);
  if (v128)
  {
    if (!v129)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v125, v126, HourPrecipitationChartViewModel);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v125, 0, 1, HourPrecipitationChartViewModel);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v130 = *(_QWORD *)(HourPrecipitationChartViewModel - 8);
  if (v129)
  {
    (*(void (**)(void *, uint64_t))(v130 + 8))(v125, HourPrecipitationChartViewModel);
LABEL_47:
    v131 = sub_100005D40(&qword_1001BFA38);
    memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v130 + 24))(v125, v126, HourPrecipitationChartViewModel);
LABEL_48:
  v132 = v165[11];
  v133 = *(_QWORD *)(v166 + v132);
  v134 = *(_QWORD *)(a1 + v132);
  *(_QWORD *)(a1 + v132) = v133;
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRelease(v134);
  v135 = v165[12];
  v136 = (_BYTE *)(a1 + v135);
  v137 = (_BYTE *)(v166 + v135);
  *v136 = *v137;
  v136[1] = v137[1];
  v136[2] = v137[2];
  v136[3] = v137[3];
  v136[4] = v137[4];
  v136[5] = v137[5];
  v136[6] = v137[6];
  v136[7] = v137[7];
  v136[8] = v137[8];
  v136[9] = v137[9];
  v138 = v165[13];
  v139 = (void *)(a1 + v138);
  v140 = (const void *)(v166 + v138);
  v141 = type metadata accessor for URL(0);
  LODWORD(v134) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v139, 1, v141);
  v142 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v140, 1, v141);
  if ((_DWORD)v134)
  {
    if (!v142)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v141 - 8) + 16))(v139, v140, v141);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v139, 0, 1, v141);
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  v143 = *(_QWORD *)(v141 - 8);
  if (v142)
  {
    (*(void (**)(void *, uint64_t))(v143 + 8))(v139, v141);
LABEL_53:
    v144 = sub_100005D40(&qword_1001BFA28);
    memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(void *, const void *, uint64_t))(v143 + 24))(v139, v140, v141);
LABEL_54:
  v145 = v165[14];
  v146 = (void *)(a1 + v145);
  v147 = (const void *)(v166 + v145);
  v148 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  v149 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v146, 1, v148);
  v150 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v147, 1, v148);
  if (v149)
  {
    if (!v150)
    {
      v151 = swift_getEnumCaseMultiPayload(v147, v148) == 1;
      (*(void (**)(void *, const void *, uint64_t))(v170 + 16))(v146, v147, v167);
      swift_storeEnumTagMultiPayload(v146, v148, v151);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v146, 0, 1, v148);
      return a1;
    }
LABEL_59:
    v152 = sub_100005D40(&qword_1001BFA40);
    memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
    return a1;
  }
  if (v150)
  {
    sub_100011894((uint64_t)v146, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    goto LABEL_59;
  }
  if (a1 != v166)
  {
    sub_100011894((uint64_t)v146, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v147, v148);
    (*(void (**)(void *, const void *, uint64_t))(v170 + 16))(v146, v147, v167);
    swift_storeEnumTagMultiPayload(v146, v148, EnumCaseMultiPayload == 1);
  }
  return a1;
}

uint64_t initializeWithTake for AggregateWeatherViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const void *v82;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const void *v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v100;
  int *v101;
  void (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  void (*v104)(void *, const void *, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v101 = a3;
  v102 = v7;
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v103 = v6;
  v7(a1 + v12, a2 + v12, v6);
  v15 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v16 = v15[5];
  v17 = v13 + v16;
  v18 = v14 + v16;
  v19 = type metadata accessor for Date(0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
  v20(v17, v18, v19);
  v100 = v19;
  v104 = (void (*)(void *, const void *, uint64_t))v20;
  v20(v13 + v15[6], v14 + v15[6], v19);
  v21 = v15[7];
  v22 = v13 + v21;
  v23 = v14 + v21;
  v24 = sub_100005D40(&qword_1001BF090);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v25(v22, v23, v24);
  v25(v13 + v15[8], v14 + v15[8], v24);
  *(_OWORD *)(v13 + v15[9]) = *(_OWORD *)(v14 + v15[9]);
  v26 = v15[10];
  v27 = (void *)(v13 + v26);
  v28 = (const void *)(v14 + v26);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v26, 1, v24))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v25((uint64_t)v27, (uint64_t)v28, v24);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v24);
  }
  v30 = v15[11];
  v31 = (void *)(v13 + v30);
  v32 = (const void *)(v14 + v30);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v30, 1, v24))
  {
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v25((uint64_t)v31, (uint64_t)v32, v24);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v24);
  }
  v34 = v15[12];
  v35 = v13 + v34;
  v36 = v14 + v34;
  v102(v13 + v34, v14 + v34, v103);
  v37 = (int *)type metadata accessor for ConditionViewModel(0);
  v38 = v37[5];
  v39 = v35 + v38;
  v40 = v36 + v38;
  v41 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
  *(_OWORD *)(v35 + v37[6]) = *(_OWORD *)(v36 + v37[6]);
  *(_OWORD *)(v35 + v37[7]) = *(_OWORD *)(v36 + v37[7]);
  *(_BYTE *)(v35 + v37[8]) = *(_BYTE *)(v36 + v37[8]);
  *(_BYTE *)(v35 + v37[9]) = *(_BYTE *)(v36 + v37[9]);
  *(_BYTE *)(v35 + v37[10]) = *(_BYTE *)(v36 + v37[10]);
  *(_QWORD *)(v13 + v15[13]) = *(_QWORD *)(v14 + v15[13]);
  v42 = v15[14];
  v43 = v13 + v42;
  v44 = v14 + v42;
  v45 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
  v46 = v15[15];
  v47 = (void *)(v13 + v46);
  v48 = (const void *)(v14 + v46);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v46, 1, v100))
  {
    v49 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    v104(v47, v48, v100);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v47, 0, 1, v100);
  }
  v50 = v15[16];
  v51 = (void *)(v13 + v50);
  v52 = (const void *)(v14 + v50);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v14 + v50, 1, v100))
  {
    v53 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    v104(v51, v52, v100);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v51, 0, 1, v100);
  }
  v54 = v15[17];
  v55 = v13 + v54;
  v56 = v14 + v54;
  v57 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
  v58 = v15[18];
  v59 = v13 + v58;
  v60 = v14 + v58;
  v61 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
  *(_QWORD *)(v13 + v15[19]) = *(_QWORD *)(v14 + v15[19]);
  v62 = v15[20];
  v63 = v13 + v62;
  v64 = v14 + v62;
  *(_BYTE *)(v63 + 32) = *(_BYTE *)(v64 + 32);
  v65 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)v63 = *(_OWORD *)v64;
  *(_OWORD *)(v63 + 16) = v65;
  v66 = v101[8];
  *(_QWORD *)(a1 + v101[7]) = *(_QWORD *)(a2 + v101[7]);
  *(_QWORD *)(a1 + v66) = *(_QWORD *)(a2 + v66);
  v67 = v101[9];
  v68 = (char *)(a1 + v67);
  v69 = (char *)(a2 + v67);
  v70 = (int *)type metadata accessor for AirQualityViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v69, 1, (uint64_t)v70))
  {
    v71 = sub_100005D40(&qword_1001BFA30);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    v102((uint64_t)v68, (uint64_t)v69, v103);
    v104(&v68[v70[5]], &v69[v70[5]], v100);
    *(_QWORD *)&v68[v70[6]] = *(_QWORD *)&v69[v70[6]];
    v72 = v70[7];
    v73 = &v68[v72];
    v74 = &v69[v72];
    v75 = type metadata accessor for AirQualityScale(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
    v76 = v70[8];
    v77 = &v68[v76];
    v78 = &v69[v76];
    v79 = type metadata accessor for AirQualityScaleCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v68, 0, 1, (uint64_t)v70);
  }
  v80 = v101[10];
  v81 = (void *)(a1 + v80);
  v82 = (const void *)(a2 + v80);
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v82, 1, HourPrecipitationChartViewModel))
  {
    v84 = sub_100005D40(&qword_1001BFA38);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v81, v82, HourPrecipitationChartViewModel);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v81, 0, 1, HourPrecipitationChartViewModel);
  }
  v85 = v101[12];
  *(_QWORD *)(a1 + v101[11]) = *(_QWORD *)(a2 + v101[11]);
  v86 = a1 + v85;
  v87 = a2 + v85;
  *(_QWORD *)v86 = *(_QWORD *)v87;
  *(_WORD *)(v86 + 8) = *(_WORD *)(v87 + 8);
  v88 = v101[13];
  v89 = (void *)(a1 + v88);
  v90 = (const void *)(a2 + v88);
  v91 = type metadata accessor for URL(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v90, 1, v91))
  {
    v92 = sub_100005D40(&qword_1001BFA28);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v91 - 8) + 32))(v89, v90, v91);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v89, 0, 1, v91);
  }
  v93 = v101[14];
  v94 = (void *)(a1 + v93);
  v95 = (const void *)(a2 + v93);
  v96 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v95, 1, v96))
  {
    v97 = sub_100005D40(&qword_1001BFA40);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
  }
  else
  {
    v98 = swift_getEnumCaseMultiPayload(v95, v96) == 1;
    v104(v94, v95, v100);
    swift_storeEnumTagMultiPayload(v94, v96, v98);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v94, 0, 1, v96);
  }
  return a1;
}

uint64_t assignWithTake for AggregateWeatherViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const void *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const void *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  int *v104;
  int v105;
  int v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  const void *v118;
  uint64_t HourPrecipitationChartViewModel;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  const void *v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  const void *v139;
  uint64_t v140;
  int v141;
  int v142;
  _BOOL8 v143;
  uint64_t v144;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  int EnumCaseMultiPayload;
  uint64_t v155;
  void (*v156)(void *, const void *, uint64_t);
  uint64_t v157;
  int *v158;
  uint64_t v159;
  void (*v160)(uint64_t, uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;

  v6 = type metadata accessor for UUID(0);
  v155 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v155 + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v157 = a2;
  v158 = a3;
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v160 = v7;
  v161 = v6;
  v7(a1 + v12, a2 + v12, v6);
  v15 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v16 = v15[5];
  v17 = v13 + v16;
  v18 = v14 + v16;
  v19 = type metadata accessor for Date(0);
  v162 = *(_QWORD *)(v19 - 8);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v162 + 40);
  v20(v17, v18, v19);
  v159 = v19;
  v156 = (void (*)(void *, const void *, uint64_t))v20;
  v20(v13 + v15[6], v14 + v15[6], v19);
  v21 = v15[7];
  v22 = v13 + v21;
  v23 = v14 + v21;
  v24 = sub_100005D40(&qword_1001BF090);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 40);
  v26(v22, v23, v24);
  v26(v13 + v15[8], v14 + v15[8], v24);
  v27 = v15[9];
  v28 = (_QWORD *)(v13 + v27);
  v29 = (uint64_t *)(v14 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v15[10];
  v34 = (void *)(v13 + v33);
  v35 = (const void *)(v14 + v33);
  LODWORD(v20) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v33, 1, v24);
  v36 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 1, v24);
  if ((_DWORD)v20)
  {
    if (!v36)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v34, v35, v24);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v36)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v34, v24);
LABEL_6:
    v37 = sub_100005D40(&qword_1001BF098);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_7;
  }
  v26((uint64_t)v34, (uint64_t)v35, v24);
LABEL_7:
  v38 = v15[11];
  v39 = (void *)(v13 + v38);
  v40 = (const void *)(v14 + v38);
  v41 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v38, 1, v24);
  v42 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v40, 1, v24);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v39, v40, v24);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v39, v24);
LABEL_12:
    v43 = sub_100005D40(&qword_1001BF098);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_13;
  }
  v26((uint64_t)v39, (uint64_t)v40, v24);
LABEL_13:
  v44 = v15[12];
  v45 = v13 + v44;
  v46 = v14 + v44;
  v160(v13 + v44, v14 + v44, v161);
  v47 = (int *)type metadata accessor for ConditionViewModel(0);
  v48 = v47[5];
  v49 = v45 + v48;
  v50 = v46 + v48;
  v51 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 40))(v49, v50, v51);
  v52 = v47[6];
  v53 = (_QWORD *)(v45 + v52);
  v54 = (uint64_t *)(v46 + v52);
  v56 = *v54;
  v55 = v54[1];
  v57 = v53[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease(v57);
  v58 = v47[7];
  v59 = (_QWORD *)(v45 + v58);
  v60 = (uint64_t *)(v46 + v58);
  v62 = *v60;
  v61 = v60[1];
  v63 = v59[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  *(_BYTE *)(v45 + v47[8]) = *(_BYTE *)(v46 + v47[8]);
  *(_BYTE *)(v45 + v47[9]) = *(_BYTE *)(v46 + v47[9]);
  *(_BYTE *)(v45 + v47[10]) = *(_BYTE *)(v46 + v47[10]);
  *(_QWORD *)(v13 + v15[13]) = *(_QWORD *)(v14 + v15[13]);
  v64 = v15[14];
  v65 = v13 + v64;
  v66 = v14 + v64;
  v67 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 40))(v65, v66, v67);
  v68 = v15[15];
  v69 = (void *)(v13 + v68);
  v70 = (const void *)(v14 + v68);
  LODWORD(v65) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v68, 1, v159);
  v71 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v70, 1, v159);
  if ((_DWORD)v65)
  {
    if (!v71)
    {
      (*(void (**)(void *, const void *, uint64_t))(v162 + 32))(v69, v70, v159);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v69, 0, 1, v159);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v71)
  {
    (*(void (**)(void *, uint64_t))(v162 + 8))(v69, v159);
LABEL_18:
    v72 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_19;
  }
  v156(v69, v70, v159);
LABEL_19:
  v73 = v15[16];
  v74 = (void *)(v13 + v73);
  v75 = (const void *)(v14 + v73);
  v76 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v13 + v73, 1, v159);
  v77 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v75, 1, v159);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(void *, const void *, uint64_t))(v162 + 32))(v74, v75, v159);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v74, 0, 1, v159);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v77)
  {
    (*(void (**)(void *, uint64_t))(v162 + 8))(v74, v159);
LABEL_24:
    v78 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_25;
  }
  v156(v74, v75, v159);
LABEL_25:
  v79 = v15[17];
  v80 = v13 + v79;
  v81 = v14 + v79;
  v82 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 40))(v80, v81, v82);
  v83 = v15[18];
  v84 = v13 + v83;
  v85 = v14 + v83;
  v86 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 40))(v84, v85, v86);
  *(_QWORD *)(v13 + v15[19]) = *(_QWORD *)(v14 + v15[19]);
  v87 = v15[20];
  v88 = v13 + v87;
  v89 = v14 + v87;
  v90 = *(_QWORD *)(v13 + v87 + 8);
  if (v90)
  {
    v91 = *(_QWORD *)(v89 + 8);
    if (v91)
    {
      *(_QWORD *)v88 = *(_QWORD *)v89;
      *(_QWORD *)(v88 + 8) = v91;
      swift_bridgeObjectRelease(v90);
      v92 = *(_BYTE *)(v89 + 32);
      v93 = *(_QWORD *)(v88 + 16);
      v94 = *(_QWORD *)(v88 + 24);
      v95 = *(_BYTE *)(v88 + 32);
      *(_OWORD *)(v88 + 16) = *(_OWORD *)(v89 + 16);
      *(_BYTE *)(v88 + 32) = v92;
      sub_100007458(v93, v94, v95);
      goto LABEL_30;
    }
    sub_100008EC4(v88);
  }
  v96 = *(_OWORD *)(v89 + 16);
  *(_OWORD *)v88 = *(_OWORD *)v89;
  *(_OWORD *)(v88 + 16) = v96;
  *(_BYTE *)(v88 + 32) = *(_BYTE *)(v89 + 32);
LABEL_30:
  v97 = v158[7];
  v98 = *(_QWORD *)(a1 + v97);
  *(_QWORD *)(a1 + v97) = *(_QWORD *)(v157 + v97);
  swift_bridgeObjectRelease(v98);
  v99 = v158[8];
  v100 = *(_QWORD *)(a1 + v99);
  *(_QWORD *)(a1 + v99) = *(_QWORD *)(v157 + v99);
  swift_bridgeObjectRelease(v100);
  v101 = v158[9];
  v102 = (char *)(a1 + v101);
  v103 = (char *)(v157 + v101);
  v104 = (int *)type metadata accessor for AirQualityViewModel(0);
  v105 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v102, 1, (uint64_t)v104);
  v106 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v103, 1, (uint64_t)v104);
  if (v105)
  {
    if (!v106)
    {
      (*(void (**)(char *, char *, uint64_t))(v155 + 32))(v102, v103, v161);
      (*(void (**)(char *, char *, uint64_t))(v162 + 32))(&v102[v104[5]], &v103[v104[5]], v159);
      *(_QWORD *)&v102[v104[6]] = *(_QWORD *)&v103[v104[6]];
      v107 = v104[7];
      v108 = &v102[v107];
      v109 = &v103[v107];
      v110 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 32))(v108, v109, v110);
      v111 = v104[8];
      v112 = &v102[v111];
      v113 = &v103[v111];
      v114 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 32))(v112, v113, v114);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v102, 0, 1, (uint64_t)v104);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v106)
  {
    sub_100011894((uint64_t)v102, type metadata accessor for AirQualityViewModel);
LABEL_35:
    v115 = sub_100005D40(&qword_1001BFA30);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
    goto LABEL_36;
  }
  v160((uint64_t)v102, (uint64_t)v103, v161);
  v156(&v102[v104[5]], &v103[v104[5]], v159);
  *(_QWORD *)&v102[v104[6]] = *(_QWORD *)&v103[v104[6]];
  v146 = v104[7];
  v147 = &v102[v146];
  v148 = &v103[v146];
  v149 = type metadata accessor for AirQualityScale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 40))(v147, v148, v149);
  v150 = v104[8];
  v151 = &v102[v150];
  v152 = &v103[v150];
  v153 = type metadata accessor for AirQualityScaleCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 40))(v151, v152, v153);
LABEL_36:
  v116 = v158[10];
  v117 = (void *)(a1 + v116);
  v118 = (const void *)(v157 + v116);
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v120 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v117, 1, HourPrecipitationChartViewModel);
  v121 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v118, 1, HourPrecipitationChartViewModel);
  if (v120)
  {
    if (!v121)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v117, v118, HourPrecipitationChartViewModel);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v117, 0, 1, HourPrecipitationChartViewModel);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v122 = *(_QWORD *)(HourPrecipitationChartViewModel - 8);
  if (v121)
  {
    (*(void (**)(void *, uint64_t))(v122 + 8))(v117, HourPrecipitationChartViewModel);
LABEL_41:
    v123 = sub_100005D40(&qword_1001BFA38);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v122 + 40))(v117, v118, HourPrecipitationChartViewModel);
LABEL_42:
  v124 = v158[11];
  v125 = *(_QWORD *)(a1 + v124);
  *(_QWORD *)(a1 + v124) = *(_QWORD *)(v157 + v124);
  swift_bridgeObjectRelease(v125);
  v126 = v158[12];
  v127 = v158[13];
  v128 = a1 + v126;
  v129 = v157 + v126;
  *(_QWORD *)v128 = *(_QWORD *)v129;
  *(_WORD *)(v128 + 8) = *(_WORD *)(v129 + 8);
  v130 = (void *)(a1 + v127);
  v131 = (const void *)(v157 + v127);
  v132 = type metadata accessor for URL(0);
  v133 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v130, 1, v132);
  v134 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v131, 1, v132);
  if (v133)
  {
    if (!v134)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v132 - 8) + 32))(v130, v131, v132);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v130, 0, 1, v132);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v135 = *(_QWORD *)(v132 - 8);
  if (v134)
  {
    (*(void (**)(void *, uint64_t))(v135 + 8))(v130, v132);
LABEL_47:
    v136 = sub_100005D40(&qword_1001BFA28);
    memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v135 + 40))(v130, v131, v132);
LABEL_48:
  v137 = v158[14];
  v138 = (void *)(a1 + v137);
  v139 = (const void *)(v157 + v137);
  v140 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  v141 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v138, 1, v140);
  v142 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v139, 1, v140);
  if (v141)
  {
    if (!v142)
    {
      v143 = swift_getEnumCaseMultiPayload(v139, v140) == 1;
      (*(void (**)(void *, const void *, uint64_t))(v162 + 32))(v138, v139, v159);
      swift_storeEnumTagMultiPayload(v138, v140, v143);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v138, 0, 1, v140);
      return a1;
    }
LABEL_53:
    v144 = sub_100005D40(&qword_1001BFA40);
    memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
    return a1;
  }
  if (v142)
  {
    sub_100011894((uint64_t)v138, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    goto LABEL_53;
  }
  if (a1 != v157)
  {
    sub_100011894((uint64_t)v138, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v139, v140);
    (*(void (**)(void *, const void *, uint64_t))(v162 + 32))(v138, v139, v159);
    swift_storeEnumTagMultiPayload(v138, v140, EnumCaseMultiPayload == 1);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AggregateWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000920C0);
}

uint64_t sub_1000920C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  sub_100023394();
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
  }
  sub_100070DE8();
  sub_10001C6C0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_23:
    v8 = v4 + v11;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
  }
  type metadata accessor for CurrentObservationViewModel(0);
  sub_10001C6C0();
  if (v12)
  {
    v7 = v13;
    v11 = a3[6];
    goto LABEL_23;
  }
  if ((_DWORD)v3 != 0x7FFFFFFF)
  {
    sub_100005D40(&qword_1001BFA30);
    sub_10001C6C0();
    if (v9)
    {
      v7 = v16;
      v11 = a3[9];
    }
    else
    {
      sub_100005D40(&qword_1001BFA38);
      sub_10001C6C0();
      if (v17)
      {
        v7 = v18;
        v11 = a3[10];
      }
      else
      {
        sub_100005D40(&qword_1001BFA28);
        sub_10001C6C0();
        if (v19)
        {
          v7 = v20;
          v11 = a3[13];
        }
        else
        {
          v7 = sub_100005D40(&qword_1001BFA40);
          v11 = a3[14];
        }
      }
    }
    goto LABEL_23;
  }
  v14 = *(_QWORD *)(v4 + a3[7]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for AggregateWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000921EC);
}

void sub_1000921EC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  sub_100023394();
  sub_10001C6D0();
  if (v11)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    sub_100070DE8();
    sub_10001C6D0();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      type metadata accessor for CurrentObservationViewModel(0);
      sub_10001C6D0();
      if (v14)
      {
        v9 = v15;
        v13 = a4[6];
      }
      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(v5 + a4[7]) = (v4 - 1);
          sub_1000443A4();
          return;
        }
        sub_100005D40(&qword_1001BFA30);
        sub_10001C6D0();
        if (v11)
        {
          v9 = v16;
          v13 = a4[9];
        }
        else
        {
          sub_100005D40(&qword_1001BFA38);
          sub_10001C6D0();
          if (v17)
          {
            v9 = v18;
            v13 = a4[10];
          }
          else
          {
            sub_100005D40(&qword_1001BFA28);
            sub_10001C6D0();
            if (v19)
            {
              v9 = v20;
              v13 = a4[13];
            }
            else
            {
              v9 = sub_100005D40(&qword_1001BFA40);
              v13 = a4[14];
            }
          }
        }
      }
    }
    v10 = v5 + v13;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, v4, v4, v9);
}

void sub_100092300(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[11];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v16[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Location(319);
    if (v5 <= 0x3F)
    {
      v16[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for CurrentObservationViewModel(319);
      if (v7 <= 0x3F)
      {
        v16[2] = *(_QWORD *)(v6 - 8) + 64;
        v16[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v16[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
        sub_1000463A4(319, &qword_1001C1C08, type metadata accessor for AirQualityViewModel);
        if (v9 <= 0x3F)
        {
          v16[5] = *(_QWORD *)(v8 - 8) + 64;
          sub_1000463A4(319, &qword_1001C1C10, (uint64_t (*)(uint64_t))&type metadata accessor for NextHourPrecipitationChartViewModel);
          if (v11 <= 0x3F)
          {
            v16[6] = *(_QWORD *)(v10 - 8) + 64;
            v16[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
            v16[8] = "\n";
            sub_1000463A4(319, (unint64_t *)&qword_1001C1C18, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
            if (v13 <= 0x3F)
            {
              v16[9] = *(_QWORD *)(v12 - 8) + 64;
              sub_1000463A4(319, (unint64_t *)&unk_1001C1C20, type metadata accessor for AggregateWeatherViewModel.SunEvent);
              if (v15 <= 0x3F)
              {
                v16[10] = *(_QWORD *)(v14 - 8) + 64;
                swift_initStructMetadata(a1, 256, 11, v16, a1 + 16);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for AggregateWeatherViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 10) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v5 = v6 - 11;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AggregateWeatherViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100092544 + 4 * byte_10017D490[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100092578 + 4 * byte_10017D48B[v4]))();
}

uint64_t sub_100092578(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100092580(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100092588);
  return result;
}

uint64_t sub_100092594(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009259CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1000925A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000925A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AggregateWeatherViewModel.CodingKeys()
{
  return &type metadata for AggregateWeatherViewModel.CodingKeys;
}

uint64_t *sub_1000925C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v8 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload == 1);
  }
  return a1;
}

uint64_t sub_100092670(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1000926A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;

  v6 = swift_getEnumCaseMultiPayload(a2, a3) == 1;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, a3, v6);
  return a1;
}

uint64_t sub_100092718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_100011894(a1, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    v6 = swift_getEnumCaseMultiPayload(a2, a3) == 1;
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, v6);
  }
  return a1;
}

uint64_t sub_1000927A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;

  v6 = swift_getEnumCaseMultiPayload(a2, a3) == 1;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, a3, v6);
  return a1;
}

uint64_t sub_100092818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_100011894(a1, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    v6 = swift_getEnumCaseMultiPayload(a2, a3) == 1;
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, v6);
  }
  return a1;
}

uint64_t sub_1000928A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

unint64_t sub_10009290C()
{
  unint64_t result;

  result = qword_1001C1D20;
  if (!qword_1001C1D20)
  {
    result = swift_getWitnessTable(&unk_10017D664, &type metadata for AggregateWeatherViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1D20);
  }
  return result;
}

unint64_t sub_10009294C()
{
  unint64_t result;

  result = qword_1001C1D28;
  if (!qword_1001C1D28)
  {
    result = swift_getWitnessTable(&unk_10017D5D4, &type metadata for AggregateWeatherViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1D28);
  }
  return result;
}

unint64_t sub_10009298C()
{
  unint64_t result;

  result = qword_1001C1D30;
  if (!qword_1001C1D30)
  {
    result = swift_getWitnessTable(&unk_10017D5FC, &type metadata for AggregateWeatherViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1D30);
  }
  return result;
}

unint64_t sub_1000929C8()
{
  unint64_t result;

  result = qword_1001C1D50;
  if (!qword_1001C1D50)
  {
    result = swift_getWitnessTable(&unk_10017DA2C, &type metadata for AggregateWeatherViewModel.SunEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1D50);
  }
  return result;
}

unint64_t sub_100092A04()
{
  unint64_t result;

  result = qword_1001C1D58;
  if (!qword_1001C1D58)
  {
    result = swift_getWitnessTable(&unk_10017D9DC, &type metadata for AggregateWeatherViewModel.SunEvent.SunsetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1D58);
  }
  return result;
}

unint64_t sub_100092A40()
{
  unint64_t result;

  result = qword_1001C1D60;
  if (!qword_1001C1D60)
  {
    result = swift_getWitnessTable(&unk_10017D98C, &type metadata for AggregateWeatherViewModel.SunEvent.SunriseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1D60);
  }
  return result;
}

void sub_100092A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  void *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  char v54;
  char v55;
  __n128 v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  void (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;

  sub_100070E5C();
  v1 = v0;
  v3 = v2;
  v4 = sub_10002338C();
  v69 = *(_QWORD *)(v4 - 8);
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_100023150();
  v68 = v6;
  sub_100023164();
  __chkstk_darwin(v7);
  v9 = (char *)&v62 - v8;
  sub_100005D40(&qword_1001C1D80);
  sub_100029068();
  __chkstk_darwin(v10);
  sub_100049D00();
  v13 = (char *)(v11 - v12);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v62 - v15);
  if (v3 == v1)
  {
    v71 = 1;
LABEL_40:
    sub_10001C770();
    return;
  }
  if (*(_QWORD *)(v3 + 16) != *(_QWORD *)(v1 + 16))
  {
LABEL_39:
    v71 = 0;
    goto LABEL_40;
  }
  v70 = 0;
  v66 = v3;
  v67 = v1;
  v19 = *(_QWORD *)(v3 + 64);
  v18 = v3 + 64;
  v17 = v19;
  v20 = 1 << *(_BYTE *)(v18 - 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v17;
  v64 = v18;
  v65 = (unint64_t)(v20 + 63) >> 6;
  v63 = v65 - 1;
  v23 = &unk_1001C1D88;
  v72 = v4;
  while (1)
  {
    if (v22)
    {
      v24 = __clz(__rbit64(v22));
      v25 = (v22 - 1) & v22;
      v26 = v69;
      v27 = v24 | (v70 << 6);
LABEL_8:
      v28 = *(_QWORD *)(v66 + 56);
      v29 = (_QWORD *)(*(_QWORD *)(v66 + 48) + 16 * v27);
      v30 = v29[1];
      *(_QWORD *)v13 = *v29;
      *((_QWORD *)v13 + 1) = v30;
      v31 = v28 + *(_QWORD *)(v26 + 72) * v27;
      v32 = sub_100093528();
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(&v13[*(int *)(v32 + 48)], v31, v72);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v13, 0, 1, v32);
      sub_100093690();
      goto LABEL_30;
    }
    v33 = v70 + 1;
    if (__OFADD__(v70, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    v26 = v69;
    if (v33 < v65)
    {
      v34 = *(_QWORD *)(v64 + 8 * v33);
      if (v34)
        goto LABEL_12;
      v35 = v70 + 2;
      ++v70;
      if (v33 + 1 < v65)
      {
        v34 = *(_QWORD *)(v64 + 8 * v35);
        if (v34)
          goto LABEL_15;
        v70 = v33 + 1;
        if (v33 + 2 < v65)
        {
          v34 = *(_QWORD *)(v64 + 8 * (v33 + 2));
          if (v34)
          {
            v33 += 2;
            goto LABEL_12;
          }
          v70 = v33 + 2;
          if (v33 + 3 < v65)
          {
            v34 = *(_QWORD *)(v64 + 8 * (v33 + 3));
            if (v34)
            {
              v33 += 3;
              goto LABEL_12;
            }
            v35 = v33 + 4;
            v70 = v33 + 3;
            if (v33 + 4 < v65)
              break;
          }
        }
      }
    }
LABEL_29:
    sub_100093528();
    v36 = sub_100093384();
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v36, v37, v38, v39);
    v25 = 0;
LABEL_30:
    sub_1000168AC((uint64_t)v13, (uint64_t)v16, &qword_1001C1D80);
    v40 = sub_100093528();
    sub_10002879C((uint64_t)v16, 1, v40);
    if (v41)
      v42 = 1;
    else
      v42 = 0;
    v71 = v42;
    if (v41)
      goto LABEL_40;
    v73 = v25;
    v43 = v23;
    v44 = v13;
    v45 = (char *)v16 + *(int *)(v40 + 48);
    v46 = *v16;
    v47 = v16[1];
    v48 = v16;
    v49 = v72;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v9, v45, v72);
    v50 = v46;
    v51 = v67;
    v52 = v9;
    v53 = sub_1001122BC(v50, v47);
    v55 = v54;
    v56 = swift_bridgeObjectRelease(v47);
    if ((v55 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, __n128))(v26 + 8))(v52, v49, v56);
      goto LABEL_39;
    }
    v57 = *(_QWORD *)(v51 + 56) + *(_QWORD *)(v26 + 72) * v53;
    v58 = v68;
    (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v26 + 16))(v68, v57, v49, v56);
    sub_10002EF14(&qword_1001BF838, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v59 = dispatch thunk of static Equatable.== infix(_:_:)(v58, v52, v49);
    v60 = *(void (**)(uint64_t))(v26 + 8);
    v61 = sub_1000935C8();
    v60(v61);
    ((void (*)(char *, uint64_t))v60)(v52, v49);
    v9 = v52;
    v13 = v44;
    v16 = v48;
    v23 = v43;
    v22 = v73;
    if ((v59 & 1) == 0)
      goto LABEL_40;
  }
  v34 = *(_QWORD *)(v64 + 8 * v35);
  if (v34)
  {
LABEL_15:
    v33 = v35;
LABEL_12:
    v25 = (v34 - 1) & v34;
    v27 = __clz(__rbit64(v34)) + (v33 << 6);
    v70 = v33;
    goto LABEL_8;
  }
  while (1)
  {
    v33 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v33 >= v65)
    {
      v70 = v63;
      goto LABEL_29;
    }
    v34 = *(_QWORD *)(v64 + 8 * v33);
    ++v35;
    if (v34)
      goto LABEL_12;
  }
LABEL_42:
  __break(1u);
}

uint64_t storeEnumTagSinglePayload for AggregateWeatherViewModel.SunEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100092EB8 + 4 * byte_10017D49A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100092EEC + 4 * byte_10017D495[v4]))();
}

uint64_t sub_100092EEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100092EF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100092EFCLL);
  return result;
}

uint64_t sub_100092F08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100092F10);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100092F14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100092F1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AggregateWeatherViewModel.SunEvent.CodingKeys()
{
  return &type metadata for AggregateWeatherViewModel.SunEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for AggregateWeatherViewModel.SunEvent.SunriseCodingKeys()
{
  return &type metadata for AggregateWeatherViewModel.SunEvent.SunriseCodingKeys;
}

uint64_t _s13WeatherWidget25AggregateWeatherViewModelV8SunEventO17SunriseCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100092F8C + 4 * byte_10017D49F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100092FAC + 4 * byte_10017D4A4[v4]))();
}

_BYTE *sub_100092F8C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100092FAC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100092FB4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100092FBC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100092FC4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100092FCC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AggregateWeatherViewModel.SunEvent.SunsetCodingKeys()
{
  return &type metadata for AggregateWeatherViewModel.SunEvent.SunsetCodingKeys;
}

unint64_t sub_100092FEC()
{
  unint64_t result;

  result = qword_1001C1DB0;
  if (!qword_1001C1DB0)
  {
    result = swift_getWitnessTable(&unk_10017D7F4, &type metadata for AggregateWeatherViewModel.SunEvent.SunsetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1DB0);
  }
  return result;
}

unint64_t sub_10009302C()
{
  unint64_t result;

  result = qword_1001C1DB8;
  if (!qword_1001C1DB8)
  {
    result = swift_getWitnessTable(&unk_10017D8AC, &type metadata for AggregateWeatherViewModel.SunEvent.SunriseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1DB8);
  }
  return result;
}

unint64_t sub_10009306C()
{
  unint64_t result;

  result = qword_1001C1DC0;
  if (!qword_1001C1DC0)
  {
    result = swift_getWitnessTable(&unk_10017D964, &type metadata for AggregateWeatherViewModel.SunEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1DC0);
  }
  return result;
}

unint64_t sub_1000930AC()
{
  unint64_t result;

  result = qword_1001C1DC8;
  if (!qword_1001C1DC8)
  {
    result = swift_getWitnessTable(&unk_10017D81C, &type metadata for AggregateWeatherViewModel.SunEvent.SunriseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1DC8);
  }
  return result;
}

unint64_t sub_1000930EC()
{
  unint64_t result;

  result = qword_1001C1DD0;
  if (!qword_1001C1DD0)
  {
    result = swift_getWitnessTable(&unk_10017D844, &type metadata for AggregateWeatherViewModel.SunEvent.SunriseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1DD0);
  }
  return result;
}

unint64_t sub_10009312C()
{
  unint64_t result;

  result = qword_1001C1DD8;
  if (!qword_1001C1DD8)
  {
    result = swift_getWitnessTable(&unk_10017D764, &type metadata for AggregateWeatherViewModel.SunEvent.SunsetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1DD8);
  }
  return result;
}

unint64_t sub_10009316C()
{
  unint64_t result;

  result = qword_1001C1DE0;
  if (!qword_1001C1DE0)
  {
    result = swift_getWitnessTable(&unk_10017D78C, &type metadata for AggregateWeatherViewModel.SunEvent.SunsetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1DE0);
  }
  return result;
}

unint64_t sub_1000931AC()
{
  unint64_t result;

  result = qword_1001C1DE8;
  if (!qword_1001C1DE8)
  {
    result = swift_getWitnessTable(&unk_10017D8D4, &type metadata for AggregateWeatherViewModel.SunEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1DE8);
  }
  return result;
}

unint64_t sub_1000931EC()
{
  unint64_t result;

  result = qword_1001C1DF0;
  if (!qword_1001C1DF0)
  {
    result = swift_getWitnessTable(&unk_10017D8FC, &type metadata for AggregateWeatherViewModel.SunEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C1DF0);
  }
  return result;
}

uint64_t *sub_100093228(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100093268@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 152));
}

uint64_t sub_100093274()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v0, v1 - 65, *(_QWORD *)(v1 - 152), v0);
}

uint64_t sub_100093298(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 80, v3 - 65, v1, v2, a1);
}

uint64_t sub_1000932B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v2, v4 - 80, v1, v3, a1);
}

void sub_1000932D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000168D8(a1, a2, v2);
}

uint64_t sub_1000932E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v5, a2, *(_QWORD *)(v6 - 152), v5, a5);
}

uint64_t sub_1000932F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_100093304@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_10009331C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v2, v1, a1);
}

uint64_t sub_100093338@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_100093348(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

void sub_100093360(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10000F7C4(a1, a2, v2);
}

uint64_t sub_100093378()
{
  return 0;
}

uint64_t sub_100093384()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100093398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return static Measurement.< infix<A, B>(_:_:)(v1, v2, a1, a1, a1);
}

uint64_t sub_1000933B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 96), a1);
}

void sub_1000933C8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_100011894(a1, v1);
}

uint64_t sub_1000933DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v3, v2);
}

uint64_t sub_1000933F0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

void sub_1000933FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 104) = v0;
  *(_QWORD *)(v3 - 96) = v1;
  *(_QWORD *)(v3 - 88) = v2;
}

uint64_t sub_100093418@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 80) = a1;
  return 0;
}

double sub_100093424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 0, 1, v2);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v1).n128_u64[0];
  return result;
}

uint64_t sub_100093448()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 1, 1, v1);
}

uint64_t sub_10009345C()
{
  return 0;
}

void sub_100093478(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 232) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_100093494(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000934E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v6, v5, a5);
}

uint64_t sub_1000934FC()
{
  uint64_t v0;

  return v0;
}

void sub_100093508(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_100011868(v3, *(_QWORD *)(v4 - 104), a3);
}

void sub_100093518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_100011868(v0, v1, v2);
}

uint64_t sub_100093528()
{
  uint64_t *v0;

  return sub_100005D40(v0);
}

uint64_t sub_100093540@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

void sub_100093558(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000168D8(a1, a2, v2);
}

uint64_t sub_100093560@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v3, v2, v1);
}

void sub_100093570(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_100011894(a1, v1);
}

uint64_t sub_100093578(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_100093580(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_100011894(a1, v1);
}

uint64_t sub_1000935C8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000935D4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_1000935DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_10000F7C4(v4, v3, a3);
}

uint64_t sub_1000935E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000935FC(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, v1);
}

uint64_t sub_100093618@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_100093624@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1));
}

uint64_t sub_10009362C()
{
  uint64_t v0;

  return _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(*(_QWORD **)(v0 - 128));
}

uint64_t sub_100093634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, 1, v2);
}

uint64_t sub_100093640()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_10009364C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

void sub_100093658(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100011868(a1, a2, v2);
}

uint64_t sub_100093660()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

void sub_10009366C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100016904(v2, a2);
}

uint64_t sub_100093674()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_100093680()
{
  return sub_10001EB28();
}

void sub_100093688(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000168D8(a1, a2, v2);
}

uint64_t sub_100093690()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100093698()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

unint64_t sub_1000936A4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_100092A04();
}

uint64_t sub_1000936B0()
{
  uint64_t v0;
  uint64_t v1;

  return static UUID.== infix(_:_:)(v1, v0);
}

uint64_t sub_1000936BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = swift_bridgeObjectRetain(*(_QWORD *)(a1 + 40));
  static Font.footnote.getter(v2);
  return v1;
}

uint64_t sub_100093708(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v8 = type metadata accessor for ContentSizeCategory(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetFamily(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v16 = sub_100067564((uint64_t)v15, (uint64_t)v11, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  return v16;
}

uint64_t sub_100093834()
{
  uint64_t v0;

  v0 = sub_100067780();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100093854()
{
  return type metadata accessor for LargePrecipitationViewAttributesFactory(0);
}

uint64_t type metadata accessor for LargePrecipitationViewAttributesFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C1E20;
  if (!qword_1001C1E20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LargePrecipitationViewAttributesFactory);
  return result;
}

uint64_t sub_100093894(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 136);
}

void sub_1000938C8()
{
  _BYTE *v0;

  *v0 = sub_100094380() & 1;
  sub_100006338();
}

uint64_t sub_1000938E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v4 = sub_100005D40(&qword_1001C1ED0);
  v57 = *(_QWORD *)(v4 - 8);
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_10002325C();
  v8 = v7 - v6;
  v59 = sub_100005D40(&qword_1001C1ED8);
  v61 = *(_QWORD *)(v59 - 8);
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_10002325C();
  v12 = v11 - v10;
  v63 = sub_100005D40(&qword_1001C1EE0);
  v64 = *(_QWORD *)(v63 - 8);
  sub_1000230F4();
  __chkstk_darwin(v13);
  sub_1000230E0();
  v58 = v14;
  v65 = sub_100005D40(&qword_1001C1EE8);
  v66 = *(_QWORD *)(v65 - 8);
  sub_1000230F4();
  __chkstk_darwin(v15);
  sub_1000230E0();
  v62 = v16;
  v17 = type metadata accessor for WeatherTimelineProvider();
  swift_allocObject(v17, 248, 7);
  swift_bridgeObjectRetain(a2);
  v67 = sub_100165A84(192, a1, a2);
  v60 = v67;
  v18 = type metadata accessor for SunriseSunsetContentView(0);
  v19 = sub_1000061B0(&qword_1001C1EF0, type metadata accessor for SunriseSunsetContentView, (uint64_t)&unk_100184B90);
  v20 = sub_1000061B0(&qword_1001C0640, (uint64_t (*)(uint64_t))type metadata accessor for WeatherTimelineProvider, (uint64_t)&unk_100185D00);
  swift_bridgeObjectRetain(a2);
  swift_retain(v67);
  StaticConfiguration.init<A>(kind:provider:content:)(a1, a2, &v67, sub_100093D4C, 0, v18, v17, v19, v20);
  v21 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x8000000100187380);
  v25 = sub_100045174(v21, v23, v22 & 1, v24);
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = sub_100094158();
  WidgetConfiguration.configurationDisplayName(_:)(v25, v27, v31, v29, v4, v32);
  sub_100016868(v25, v27, v31);
  v33 = swift_bridgeObjectRelease(v29);
  (*(void (**)(uint64_t, uint64_t, __n128))(v57 + 8))(v8, v4, v33);
  v34 = sub_100005D40(&qword_1001C0280);
  v35 = type metadata accessor for WidgetFamily(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = (v37 + 32) & ~v37;
  v39 = swift_allocObject(v34, v38 + *(_QWORD *)(v36 + 72), v37 | 7);
  *(_OWORD *)(v39 + 16) = xmmword_10017BD10;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v36 + 104))(v39 + v38, enum case for WidgetFamily.systemSmall(_:), v35);
  v67 = v4;
  v68 = v32;
  v40 = sub_10004516C((uint64_t)&v67, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.supportedFamilies(_:)(v39, v59, v40);
  v41 = swift_bridgeObjectRelease(v39);
  (*(void (**)(uint64_t, uint64_t, __n128))(v61 + 8))(v12, v59, v41);
  v42 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000036, 0x8000000100187400);
  v46 = sub_100045174(v42, v44, v43 & 1, v45);
  v48 = v47;
  v50 = v49;
  v52 = v51 & 1;
  v67 = v59;
  v68 = v40;
  v53 = sub_10004516C((uint64_t)&v67, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>);
  WidgetConfiguration.description(_:)(v46, v48, v52, v50, v63, v53);
  sub_100016868(v46, v48, v52);
  v54 = swift_bridgeObjectRelease(v50);
  (*(void (**)(uint64_t, uint64_t, __n128))(v64 + 8))(v58, v63, v54);
  v67 = v63;
  v68 = v53;
  v55 = sub_10004516C((uint64_t)&v67, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  WidgetConfiguration.enableContentMarginsForFirstParty(_:)(1, v65, v55);
  swift_release(v60);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 8))(v62, v65);
}

uint64_t sub_100093D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t result;
  uint64_t v35;

  v4 = sub_100005D40(&qword_1001BF4B0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100005D40(&qword_1001BF0D0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100005D40(&qword_1001C0288);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_100005D40(&qword_1001BFA48);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044F34(a1, (uint64_t)v18);
  *v15 = swift_getKeyPath(&unk_10017DB08);
  v19 = sub_100005D40(&qword_1001BFA18);
  swift_storeEnumTagMultiPayload(v15, v19, 0);
  *v12 = swift_getKeyPath(&unk_10017DB38);
  v20 = sub_100005D40(&qword_1001C0290);
  swift_storeEnumTagMultiPayload(v12, v20, 0);
  KeyPath = swift_getKeyPath(&unk_10017DB68);
  *v9 = swift_getKeyPath(&unk_10017DB90);
  v22 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v9, v22, 0);
  *v6 = swift_getKeyPath(&unk_10017DBC0);
  v23 = sub_100005D40(&qword_1001BF3C0);
  swift_storeEnumTagMultiPayload(v6, v23, 0);
  v24 = swift_getKeyPath(&unk_10017DBF0);
  sub_100094280((uint64_t)v15, a2, &qword_1001BFA48);
  v25 = (int *)type metadata accessor for SunriseSunsetContentView(0);
  sub_100094280((uint64_t)v12, a2 + v25[5], &qword_1001C0288);
  v26 = a2 + v25[6];
  *(_QWORD *)v26 = KeyPath;
  *(_BYTE *)(v26 + 8) = 0;
  sub_100094280((uint64_t)v9, a2 + v25[7], &qword_1001BF0D0);
  sub_100094280((uint64_t)v6, a2 + v25[8], &qword_1001BF4B0);
  v27 = a2 + v25[9];
  *(_QWORD *)v27 = v24;
  *(_BYTE *)(v27 + 8) = 0;
  sub_100044FCC((uint64_t)v18, a2 + v25[10]);
  v28 = v25[11];
  v29 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v29, "bounds");
  v31 = v30;
  v33 = v32;

  result = sub_100005B38(v31, v33);
  *(_BYTE *)(a2 + v28) = result;
  return result;
}

uint64_t sub_100094070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = type metadata accessor for WidgetNames(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10002325C();
  v4 = v3 - v2;
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v3 - v2, enum case for WidgetNames.SunriseSunset(_:), v0);
  v6 = WidgetNames.rawValue.getter(v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

ValueMetadata *type metadata accessor for SunriseSunsetWidget()
{
  return &type metadata for SunriseSunsetWidget;
}

uint64_t sub_10009411C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F514, 1);
}

uint64_t sub_10009412C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100094070();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100094150()
{
  uint64_t *v0;

  return sub_1000938E8(*v0, v0[1]);
}

unint64_t sub_100094158()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1EF8;
  if (!qword_1001C1EF8)
  {
    v1 = sub_100005DC4(&qword_1001C1ED0);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1EF8);
  }
  return result;
}

void sub_1000941A8()
{
  EnvironmentValues.widgetRenderingMode.getter();
  sub_100006338();
}

uint64_t sub_1000941C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for WidgetRenderingMode(0);
  __chkstk_darwin(v2);
  sub_10002325C();
  v5 = v4 - v3;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v4 - v3, a1);
  return EnvironmentValues.widgetRenderingMode.setter(v5);
}

void sub_100094240()
{
  EnvironmentValues.widgetRenderingMode.getter();
  sub_100006338();
}

void sub_100094260()
{
  _BYTE *v0;

  *v0 = sub_100094380() & 1;
  sub_100006338();
}

uint64_t sub_100094280(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005D40(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000942C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;

  v0 = sub_100005DC4(&qword_1001C1EE8);
  v1 = sub_100005DC4(&qword_1001C1EE0);
  v2 = sub_100005DC4(&qword_1001C1ED8);
  v7 = sub_100005DC4(&qword_1001C1ED0);
  v8 = sub_100094158();
  v3 = sub_10004516C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v7 = v2;
  v8 = v3;
  v4 = sub_10004516C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>);
  v7 = v1;
  v8 = v4;
  v5 = sub_10004516C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  v7 = v0;
  v8 = v5;
  return sub_10004516C((uint64_t)&v7, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.enableContentMarginsForFirstParty(_:)>>);
}

uint64_t sub_100094380()
{
  return EnvironmentValues.accessibilityInvertColors.getter();
}

uint64_t sub_10009438C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v4 = sub_100005D40(&qword_1001C1F00);
  v53 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10002325C();
  v7 = v6 - v5;
  v54 = sub_100005D40(&qword_1001C1F08);
  v55 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  sub_10002325C();
  v10 = v9 - v8;
  v56 = sub_100005D40(&qword_1001C1F10);
  v57 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  sub_10002325C();
  v13 = v12 - v11;
  v14 = type metadata accessor for WeatherTimelineProvider();
  swift_allocObject(v14, 248, 7);
  swift_bridgeObjectRetain_n(a2, 2);
  v58 = sub_100165A84(1, a1, a2);
  v15 = type metadata accessor for TemperatureContentView(0);
  v16 = sub_1000061B0(&qword_1001C1F18, type metadata accessor for TemperatureContentView, (uint64_t)&unk_100181C18);
  v17 = sub_1000061B0(&qword_1001C0640, (uint64_t (*)(uint64_t))type metadata accessor for WeatherTimelineProvider, (uint64_t)&unk_100185D00);
  StaticConfiguration.init<A>(kind:provider:content:)(a1, a2, &v58, sub_10009475C, 0, v15, v14, v16, v17);
  v18 = LocalizedStringKey.init(stringLiteral:)(0x74617265706D6554, 0xEB00000000657275);
  v22 = sub_100045174(v18, v20, v19 & 1, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = sub_1000948F4();
  WidgetConfiguration.configurationDisplayName(_:)(v22, v24, v28, v26, v4, v29);
  sub_100016868(v22, v24, v28);
  v30 = swift_bridgeObjectRelease(v26);
  (*(void (**)(uint64_t, uint64_t, __n128))(v53 + 8))(v7, v4, v30);
  v31 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x8000000100187510);
  v35 = sub_100045174(v31, v33, v32 & 1, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v58 = v4;
  v59 = v29;
  v42 = sub_10004516C((uint64_t)&v58, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.description(_:)(v35, v37, v41, v39, v54, v42);
  sub_100016868(v35, v37, v41);
  v43 = swift_bridgeObjectRelease(v39);
  (*(void (**)(uint64_t, uint64_t, __n128))(v55 + 8))(v10, v54, v43);
  v44 = sub_100005D40(&qword_1001C0280);
  v45 = type metadata accessor for WidgetFamily(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(unsigned __int8 *)(v46 + 80);
  v48 = (v47 + 32) & ~v47;
  v49 = swift_allocObject(v44, v48 + *(_QWORD *)(v46 + 72), v47 | 7);
  *(_OWORD *)(v49 + 16) = xmmword_10017BD10;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104))(v49 + v48, enum case for WidgetFamily.accessoryCircular(_:), v45);
  v58 = v54;
  v59 = v42;
  v50 = sub_10004516C((uint64_t)&v58, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  WidgetConfiguration.supportedFamilies(_:)(v49, v56, v50);
  v51 = swift_bridgeObjectRelease(v49);
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v57 + 8))(v13, v56, v51);
}

uint64_t sub_10009475C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044F34(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath(&unk_10017DC80);
  v7 = sub_100005D40(&qword_1001BFA18);
  swift_storeEnumTagMultiPayload(a2, v7, 0);
  v8 = type metadata accessor for TemperatureContentView(0);
  return sub_100044FCC((uint64_t)v6, (uint64_t)a2 + *(int *)(v8 + 20));
}

uint64_t sub_10009480C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = type metadata accessor for WidgetNames(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10002325C();
  v4 = v3 - v2;
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v3 - v2, enum case for WidgetNames.TemperatureComplication(_:), v0);
  v6 = WidgetNames.rawValue.getter(v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

ValueMetadata *type metadata accessor for TemperatureComplicationWidget()
{
  return &type metadata for TemperatureComplicationWidget;
}

uint64_t sub_1000948B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F558, 1);
}

uint64_t sub_1000948C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10009480C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000948EC()
{
  uint64_t *v0;

  return sub_10009438C(*v0, v0[1]);
}

unint64_t sub_1000948F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1F20;
  if (!qword_1001C1F20)
  {
    v1 = sub_100005DC4(&qword_1001C1F00);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1F20);
  }
  return result;
}

uint64_t sub_10009493C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v0 = sub_100005DC4(&qword_1001C1F10);
  v1 = sub_100005DC4(&qword_1001C1F08);
  v5 = sub_100005DC4(&qword_1001C1F00);
  v6 = sub_1000948F4();
  v2 = sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v5 = v1;
  v6 = v2;
  v3 = sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  v5 = v0;
  v6 = v3;
  return sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>);
}

void sub_1000949D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t OpaqueTypeConformance2;
  __n128 v26;
  _QWORD v27[3];

  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10003C234();
  v5 = sub_100005D40(&qword_1001C0770);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_100093598();
  v7 = sub_100005D40(&qword_1001C1F28);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  *v0 = sub_10009638C();
  v0[1] = v9;
  v10 = sub_100005D40(&qword_1001C1F30);
  v11 = sub_100095488((char *)v0 + *(int *)(v10 + 44));
  static AccessibilityChildBehavior.ignore.getter(v11);
  sub_10004AFE0((unint64_t *)&qword_1001C0778, &qword_1001C0770, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v13 = v12;
  View.accessibilityElement(children:)(v2, v5, v12);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_10002F014((uint64_t)v0, &qword_1001C0770);
  v14 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001001875A0);
  v18 = Text.init(_:tableName:bundle:comment:)(v14, v16, v15 & 1, v17, 0, 0, 0);
  v20 = v19;
  v22 = v21;
  v24 = v23 & 1;
  v27[0] = v5;
  v27[1] = v13;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v27, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityLabel(_:)(v18, v20, v24, v22, v7, OpaqueTypeConformance2);
  sub_100016868(v18, v20, v24);
  v26 = swift_bridgeObjectRelease(v22);
  (*(void (**)(uint64_t, uint64_t, __n128))(v8 + 8))(v1, v7, v26);
  sub_10001C770();
}

void sub_100094BAC(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[2];

  v35 = a1;
  v32 = type metadata accessor for AccessibilityChildBehavior(0);
  v4 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005D40(&qword_1001C2000);
  sub_100029068();
  __chkstk_darwin(v8);
  sub_100093598();
  v9 = sub_100005D40(&qword_1001C2008);
  v33 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10003C234();
  v34 = sub_100005D40(&qword_1001C2010);
  sub_100029068();
  __chkstk_darwin(v10);
  *v1 = sub_10009638C();
  v1[1] = v11;
  v12 = sub_100005D40(&qword_1001C2018);
  v13 = sub_100094E18(v1, (char *)v1 + *(int *)(v12 + 44));
  static AccessibilityChildBehavior.ignore.getter(v13);
  sub_10004AFE0(&qword_1001C2020, &qword_1001C2000, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v15 = v14;
  View.accessibilityElement(children:)(v6, v7, v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v32);
  sub_10002F014((uint64_t)v1, &qword_1001C2000);
  v16 = (uint64_t *)((char *)v1 + *(int *)(type metadata accessor for RainInlineContentViewModel(0) + 28));
  v18 = *v16;
  v17 = v16[1];
  v37[0] = v18;
  v37[1] = v17;
  v36[0] = v7;
  v36[1] = v15;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v36, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v20 = sub_10001692C();
  View.accessibilityValue<A>(_:)(v37, v9, &type metadata for String, OpaqueTypeConformance2, v20);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v3, v9);
  v21 = LocalizedStringKey.init(stringLiteral:)(0x7469706963657250, 0xED00006E6F697461);
  v25 = Text.init(_:tableName:bundle:comment:)(v21, v23, v22 & 1, v24, 0, 0, 0);
  v27 = v26;
  v29 = v28;
  LOBYTE(v9) = v30 & 1;
  ModifiedContent<>.accessibilityLabel(_:)();
  sub_100016868(v25, v27, v9);
  swift_bridgeObjectRelease(v29);
  sub_10002F014(v2, &qword_1001C2010);
  sub_10001C770();
}

uint64_t sub_100094E18@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v4 = sub_100005D40(&qword_1001C2028);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v24 - v8;
  v10 = type metadata accessor for AccessoryWidgetBackground(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v24 - v16;
  v18 = AccessoryWidgetBackground.init()(v15);
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v18);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v19 = sub_100005D40(&qword_1001C2030);
  sub_100094FC4(a1, (uint64_t *)&v9[*(int *)(v19 + 44)]);
  v20 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v20(v14, v17, v10);
  sub_10002EFD4((uint64_t)v9, (uint64_t)v7, &qword_1001C2028);
  v20(a2, v14, v10);
  v21 = sub_100005D40(&qword_1001C2038);
  sub_10002EFD4((uint64_t)v7, (uint64_t)&a2[*(int *)(v21 + 48)], &qword_1001C2028);
  sub_10002F014((uint64_t)v9, &qword_1001C2028);
  v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v17, v10);
  sub_10002F014((uint64_t)v7, &qword_1001C2028);
  return ((uint64_t (*)(char *, uint64_t))v22)(v14, v10);
}

uint64_t sub_100094FC4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  double v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  _BYTE __src[136];

  v62 = a2;
  v55 = sub_100005D40(&qword_1001C2040);
  __chkstk_darwin(v55);
  v4 = (uint64_t *)((char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100005D40(&qword_1001C2048);
  __chkstk_darwin(v5);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100005D40(&qword_1001C2050);
  __chkstk_darwin(v54);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100005D40(&qword_1001C2058);
  __chkstk_darwin(v57);
  v56 = (uint64_t)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005D40(&qword_1001C2060);
  v60 = *(_QWORD *)(v14 - 8);
  v61 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v59 = (char *)&v54 - v19;
  v20 = a1[1];
  if (v20)
  {
    v21 = *a1;
    swift_bridgeObjectRetain(a1[1]);
    v18 = Image.init(systemName:)(v21, v20);
    v58 = v18;
  }
  else
  {
    v58 = 0;
  }
  v22 = static Alignment.center.getter(v18);
  LOBYTE(v53) = 0;
  LOBYTE(v52) = 1;
  sub_100077BF8(0, (uint64_t)__src, 0, v52, 0x4008000000000000, v53, v22, v23, 0, 1);
  v24 = type metadata accessor for RainInlineContentViewModel(0);
  v25 = static Font.caption.getter(v24);
  AttributedString.with(font:)();
  swift_release(v25);
  v26 = Text.init(_:)(v10);
  v28 = v27;
  v30 = v29;
  LOBYTE(v25) = v31 & 1;
  v32 = enum case for Text.Case.uppercase(_:);
  v33 = type metadata accessor for Text.Case(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v7, v32, v33);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v7, 0, 1, v33);
  KeyPath = swift_getKeyPath(&unk_10017DD48);
  sub_10002EFD4((uint64_t)v7, (uint64_t)v4 + *(int *)(v55 + 28), &qword_1001C2048);
  *v4 = KeyPath;
  sub_10002EFD4((uint64_t)v4, (uint64_t)&v12[*(int *)(v54 + 36)], &qword_1001C2040);
  *(_QWORD *)v12 = v26;
  *((_QWORD *)v12 + 1) = v28;
  v12[16] = v25;
  *((_QWORD *)v12 + 3) = v30;
  sub_100016828(v26, v28, v25);
  swift_bridgeObjectRetain(v30);
  sub_10002F014((uint64_t)v4, &qword_1001C2040);
  sub_10002F014((uint64_t)v7, &qword_1001C2048);
  sub_100016868(v26, v28, v25);
  swift_bridgeObjectRelease(v30);
  v35 = swift_getKeyPath(&unk_10017DCB0);
  v36 = v56;
  sub_10002EFD4((uint64_t)v12, v56, &qword_1001C2050);
  v37 = v57;
  v38 = v36 + *(int *)(v57 + 36);
  *(_QWORD *)v38 = v35;
  *(_BYTE *)(v38 + 8) = 1;
  sub_10002F014((uint64_t)v12, &qword_1001C2050);
  v40 = static Font.Weight.semibold.getter(v39);
  v41 = sub_100096170();
  View.fontWeight(_:)(*(_QWORD *)&v40, 0, v37, v41);
  sub_10002F014(v36, &qword_1001C2058);
  v43 = v59;
  v42 = v60;
  v44 = v61;
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v59, v17, v61);
  v45 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
  v45(v17, v43, v44);
  v46 = v62;
  v47 = v62;
  v48 = v58;
  *v62 = v58;
  memcpy(v47 + 1, __src, 0x80uLL);
  v49 = sub_100005D40(&qword_1001C2080);
  v45((char *)v46 + *(int *)(v49 + 64), v17, v44);
  v50 = *(void (**)(char *, uint64_t))(v42 + 8);
  swift_retain(v48);
  v50(v43, v44);
  v50(v17, v44);
  return swift_release(v48);
}

uint64_t sub_100095488@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v2 = sub_100005D40(&qword_1001C1F38);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v22 - v6;
  v8 = type metadata accessor for AccessoryWidgetBackground(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v22 - v14;
  v16 = AccessoryWidgetBackground.init()(v13);
  *(_QWORD *)v7 = static HorizontalAlignment.center.getter(v16);
  *((_QWORD *)v7 + 1) = 0x4008000000000000;
  v7[16] = 0;
  v17 = sub_100005D40(&qword_1001C1F40);
  sub_10009562C((uint64_t *)&v7[*(int *)(v17 + 44)]);
  v18 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v18(v12, v15, v8);
  sub_10002EFD4((uint64_t)v7, (uint64_t)v5, &qword_1001C1F38);
  v18(a1, v12, v8);
  v19 = sub_100005D40(&qword_1001C1F48);
  sub_10002EFD4((uint64_t)v5, (uint64_t)&a1[*(int *)(v19 + 48)], &qword_1001C1F38);
  sub_10002F014((uint64_t)v7, &qword_1001C1F38);
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v15, v8);
  sub_10002F014((uint64_t)v5, &qword_1001C1F38);
  return ((uint64_t (*)(char *, uint64_t))v20)(v12, v8);
}

uint64_t sub_10009562C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t KeyPath;
  __n128 v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t, __n128);
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v37 = a1;
  v1 = sub_100005D40(&qword_1001C1F50);
  v36 = *(_QWORD *)(v1 - 8);
  v2 = __chkstk_darwin(v1);
  v38 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v5 = (char *)&v35 - v4;
  v35 = Image.init(systemName:)(0x616C6C6572626D75, 0xED00006C6C69662ELL);
  v6 = LocalizedStringKey.init(stringLiteral:)(2436397, 0xE300000000000000);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v13 = qword_1001DA1E8;
  v14 = (id)qword_1001DA1E8;
  v15 = Text.init(_:tableName:bundle:comment:)(v6, v8, v10 & 1, v12, 0, 0, v13);
  v17 = v16;
  v19 = v18;
  LOBYTE(v13) = v20 & 1;
  KeyPath = swift_getKeyPath(&unk_10017DCB0);
  v39 = v15;
  v40 = v17;
  v41 = v13;
  v42 = v19;
  v43 = KeyPath;
  v44 = 1;
  v23 = static Font.Weight.semibold.getter(v22);
  v24 = sub_100005D40(&qword_1001C1F58);
  v25 = sub_100096214((unint64_t *)&qword_1001C1F60, &qword_1001C1F58, &qword_1001C05F8, &qword_1001C0600);
  View.fontWeight(_:)(*(_QWORD *)&v23, 0, v24, v25);
  sub_100016868(v15, v17, v13);
  swift_release(KeyPath);
  v26 = swift_bridgeObjectRelease(v19);
  v27 = v36;
  v28 = *(void (**)(char *, char *, uint64_t, __n128))(v36 + 16);
  v29 = v38;
  v28(v38, v5, v1, v26);
  v30 = v37;
  v31 = v35;
  *v37 = v35;
  v32 = sub_100005D40(&qword_1001C1F68);
  ((void (*)(char *, char *, uint64_t))v28)((char *)v30 + *(int *)(v32 + 48), v29, v1);
  v33 = *(void (**)(char *, uint64_t))(v27 + 8);
  swift_retain(v31);
  v33(v5, v1);
  v33(v29, v1);
  return swift_release(v31);
}

void sub_1000958B0()
{
  _BYTE *v0;

  *v0 = sub_1000963B4();
  sub_100006338();
}

void sub_1000958CC()
{
  _BYTE *v0;

  *v0 = sub_1000963B4();
  sub_100006338();
}

void sub_1000958E8(unsigned __int8 *a1)
{
  sub_1000963C0(a1);
  sub_100006338();
}

void sub_100095900(unsigned __int8 *a1)
{
  sub_1000963C0(a1);
  sub_100006338();
}

uint64_t *sub_100095918(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v4 = type metadata accessor for RainInlineContentViewModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v6 = v4;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(v4 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for AttributedString(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = *(int *)(v6 + 24);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v13, 1, v11))
    {
      v16 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
    }
    v18 = *(int *)(v6 + 28);
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain(v21);
  }
  return a1;
}

double sub_100095A4C(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v2 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for AttributedString(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v6 = a1 + v2[6];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v6, 1, v4))
    v5(v6, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + v2[7] + 8)).n128_u64[0];
  return result;
}

_QWORD *sub_100095AE8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v6 = v5[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v10(v7, v8, v9);
  v11 = v5[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v11, 1, v9))
  {
    v14 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 0, 1, v9);
  }
  v15 = v5[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  return a1;
}

_QWORD *sub_100095BF0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = v6[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a1 + v13, 1, v10);
  v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v10);
  if (!v16)
  {
    if (!v17)
    {
      v12(v14, v15, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v15, v10);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v10);
LABEL_7:
  v19 = v6[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

_OWORD *sub_100095D68(_OWORD *a1, _OWORD *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v5 = v4[5];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for AttributedString(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(v6, v7, v8);
  v10 = v4[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v10, 1, v8))
  {
    v13 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v9(v11, v12, v8);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v11, 0, 1, v8);
  }
  *(_OWORD *)((char *)a1 + v4[7]) = *(_OWORD *)((char *)a2 + v4[7]);
  return a1;
}

_QWORD *sub_100095E5C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = v6[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a1 + v13, 1, v10);
  v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v10);
  if (!v16)
  {
    if (!v17)
    {
      v12(v14, v15, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v10);
LABEL_7:
  v19 = v6[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  return a1;
}

uint64_t sub_100095FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100095FC0);
}

uint64_t sub_100095FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000963A4();
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, v0, v2);
}

uint64_t sub_100095FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100095FF4);
}

uint64_t sub_100095FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000963A4();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, v0, v0, v2);
}

uint64_t type metadata accessor for RainCircularContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C1FC8;
  if (!qword_1001C1FC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RainCircularContentView);
  return result;
}

uint64_t sub_100096058(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for RainInlineContentViewModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000960C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F5A8, 1);
}

void sub_1000960D0()
{
  EnvironmentValues.textCase.getter();
  sub_100006338();
}

uint64_t sub_1000960EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100005D40(&qword_1001C2048);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EFD4(a1, (uint64_t)v4, &qword_1001C2048);
  return EnvironmentValues.textCase.setter(v4);
}

unint64_t sub_100096170()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2068;
  if (!qword_1001C2068)
  {
    v1 = sub_100005DC4(&qword_1001C2058);
    sub_100096214(&qword_1001C2070, &qword_1001C2050, &qword_1001C2078, &qword_1001C2040);
    sub_10004AFE0(&qword_1001C05F8, &qword_1001C0600, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2068);
  }
  return result;
}

uint64_t sub_100096214(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005DC4(a2);
    sub_10004AFE0(a3, a4, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100096298()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1001C2088;
  if (!qword_1001C2088)
  {
    v1 = sub_100005DC4(&qword_1001C2010);
    v2 = sub_100005DC4(&qword_1001C2000);
    sub_10004AFE0(&qword_1001C2020, &qword_1001C2000, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10009634C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2088);
  }
  return result;
}

unint64_t sub_10009634C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0228;
  if (!qword_1001C0228)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0228);
  }
  return result;
}

uint64_t sub_10009638C()
{
  return static Alignment.center.getter();
}

uint64_t sub_1000963A4()
{
  return type metadata accessor for RainInlineContentViewModel(0);
}

uint64_t sub_1000963B4()
{
  return EnvironmentValues.multilineTextAlignment.getter();
}

uint64_t sub_1000963C0(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t LocalSearchRequestService.__allocating_init(appConfigurationManager:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 56, 7);
  sub_100096428(a1, v3 + 16);
  return v3;
}

uint64_t LocalSearchRequestService.init(appConfigurationManager:)(__int128 *a1)
{
  uint64_t v1;

  sub_100096428(a1, v1 + 16);
  return v1;
}

uint64_t sub_100096428(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void LocalSearchRequestService.performLocalSearch(with:calloutTitle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  _QWORD v7[6];

  v5 = objc_msgSend(objc_allocWithZone((Class)MKLocalSearchRequest), "initWithCompletion:", a1);
  v7[2] = v5;
  v7[3] = a2;
  v7[4] = a3;
  v6 = sub_100005D40(&qword_1001C2090);
  sub_100097B00(v6);
  Promise.init(resolver:)(sub_1000966EC, v7);

  sub_100097AF0();
}

void LocalSearchRequestService.performLocalSearch(with:)(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  _QWORD v6[6];

  sub_100070744(0, &qword_1001C2098, MKLocalSearchRequest_ptr);
  swift_bridgeObjectRetain(a2);
  v4 = sub_100096550(a1, a2);
  v6[2] = v4;
  v6[3] = a1;
  v6[4] = a2;
  v5 = sub_100005D40(&qword_1001C2090);
  sub_100097B00(v5);
  Promise.init(resolver:)(sub_100097AE8, v6);

  sub_100097AF0();
}

id sub_100096550(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  NSString v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = objc_msgSend(v4, "initWithNaturalLanguageQuery:", v5);

  return v6;
}

void sub_1000965C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD v18[5];
  _QWORD *v19;

  sub_10009774C(a6, a7, a5);
  v14 = objc_msgSend(objc_allocWithZone((Class)MKLocalSearch), "initWithRequest:", a5);
  v15 = (_QWORD *)swift_allocObject(&unk_1001B6AE0, 64, 7);
  v15[2] = a6;
  v15[3] = a7;
  v15[4] = a3;
  v15[5] = a4;
  v15[6] = a1;
  v15[7] = a2;
  v18[4] = sub_1000977C4;
  v19 = v15;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_100097674;
  v18[3] = &unk_1001B6AF8;
  v16 = _Block_copy(v18);
  v17 = v19;
  swift_bridgeObjectRetain(a7);
  swift_retain(a4);
  swift_retain(a2);
  swift_release(v17);
  objc_msgSend(v14, "startWithCompletionHandler:", v16);
  _Block_release(v16);

}

void sub_1000966EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1000965C0(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

void sub_1000966F8(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void), uint64_t a6, void (*a7)(char *), uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  id v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  double v101;
  double v102;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  char *v112;
  id v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  id v137;
  NSObject *v138;
  os_log_type_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  __n128 v147;
  void (*v148)(char *, uint64_t, __n128);
  id v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  void (*v153)(void);
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(char *);
  uint64_t v174;
  id v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  void (*v179)(void);
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184[2];

  v172 = a8;
  v173 = a7;
  v178 = a6;
  v179 = a5;
  v180 = a4;
  v177 = a3;
  v175 = a1;
  v9 = sub_100005D40(&qword_1001BF0A0);
  __chkstk_darwin(v9);
  v176 = (char *)&v160 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = type metadata accessor for Location(0);
  v171 = *(_QWORD *)(v174 - 8);
  v11 = __chkstk_darwin(v174);
  v170 = (char *)&v160 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v160 - v13;
  v15 = sub_100005D40(&qword_1001C0F18);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v160 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v160 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v160 - v22;
  v24 = type metadata accessor for TimeZone(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v160 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v160 - v29;
  v31 = type metadata accessor for Logger(0);
  v181 = *(_QWORD *)(v31 - 8);
  v182 = v31;
  v32 = __chkstk_darwin(v31);
  v33 = __chkstk_darwin(v32);
  v34 = __chkstk_darwin(v33);
  __chkstk_darwin(v34);
  if (a2)
  {
    v39 = (char *)&v160 - v36;
    v40 = a2;
    v41 = swift_errorRetain(a2);
    static Logger.geocode.getter(v41);
    swift_errorRetain(a2);
    v42 = v180;
    swift_bridgeObjectRetain(v180);
    swift_errorRetain(a2);
    v43 = swift_bridgeObjectRetain(v42);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = swift_slowAlloc(32, -1);
      v47 = swift_slowAlloc(64, -1);
      *(_DWORD *)v46 = 141558531;
      v183 = 1752392040;
      v184[0] = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v46 + 4);
      *(_WORD *)(v46 + 12) = 2085;
      swift_bridgeObjectRetain(v42);
      v183 = sub_10016EC84(v177, v42, v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v46 + 14);
      swift_bridgeObjectRelease_n(v42, 3);
      *(_WORD *)(v46 + 22) = 2082;
      v183 = a2;
      swift_errorRetain(a2);
      v48 = sub_100005D40(&qword_1001C0FC8);
      v49 = String.init<A>(describing:)(&v183, v48);
      v51 = v50;
      v183 = sub_10016EC84(v49, v50, v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v46 + 24);
      swift_bridgeObjectRelease(v51);
      swift_errorRelease(v40);
      swift_errorRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Failed to geocode. searchString=%{sensitive,mask.hash}s, error=%{public}s", (uint8_t *)v46, 0x20u);
      swift_arrayDestroy(v47, 2);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v42, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v181 + 8))(v39, v182);
    v75 = sub_1000977EC();
    v76 = swift_allocError(&type metadata for LocalSearchRequestService.LocalSearchRequestError, v75, 0, 0);
    *v77 = v40;
    swift_errorRetain(v40);
    ((void (*)(uint64_t))v179)(v76);
    swift_errorRelease(v76);
    v78 = v40;
LABEL_20:
    swift_errorRelease(v78);
    return;
  }
  v162 = (uint64_t)v18;
  v169 = v21;
  v164 = v23;
  v168 = (uint64_t)v28;
  v52 = v176;
  v165 = v30;
  v166 = v25;
  v167 = v24;
  v163 = v14;
  v53 = v180;
  if (!v175)
  {
LABEL_16:
    v79 = v35;
    ((void (*)(void))static Logger.geocode.getter)();
    v80 = swift_bridgeObjectRetain_n(v53, 2);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = swift_slowAlloc(22, -1);
      v84 = swift_slowAlloc(32, -1);
      *(_DWORD *)v83 = 141558275;
      v183 = 1752392040;
      v184[0] = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v83 + 4);
      *(_WORD *)(v83 + 12) = 2085;
      swift_bridgeObjectRetain(v53);
      v183 = sub_10016EC84(v177, v53, v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v83 + 14);
      swift_bridgeObjectRelease_n(v53, 3);
      swift_arrayDestroy(v84, 1);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v83, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v53, 2);
    }
    (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v79, v182);
    v85 = sub_1000977EC();
    v86 = swift_allocError(&type metadata for LocalSearchRequestService.LocalSearchRequestError, v85, 0, 0);
    *v87 = 0;
    v179();
    v78 = v86;
    goto LABEL_20;
  }
  v54 = v35;
  v55 = v38;
  v161 = v37;
  v56 = objc_msgSend(v175, "mapItems");
  v57 = sub_100070744(0, &qword_1001C2148, MKMapItem_ptr);
  v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v56, v57);

  if ((unint64_t)v58 >> 62)
  {
    if (v58 < 0)
      v158 = v58;
    else
      v158 = v58 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v58);
    v59 = _CocoaArrayWrapper.endIndex.getter(v158);
    swift_bridgeObjectRelease(v58);
  }
  else
  {
    v59 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v60 = (uint64_t)v52;
  v62 = v168;
  v61 = (uint64_t)v169;
  if (!v59)
  {
    swift_bridgeObjectRelease(v58);
    v35 = v54;
    goto LABEL_16;
  }
  sub_10006F588(0, (v58 & 0xC000000000000001) == 0, v58);
  if ((v58 & 0xC000000000000001) != 0)
    v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v58);
  else
    v63 = *(id *)(v58 + 32);
  v64 = v63;
  v65 = objc_msgSend(v63, "placemark", swift_bridgeObjectRelease(v58).n128_f64[0]);
  v66 = objc_msgSend(v65, "timeZone");

  if (!v66)
  {
    v88 = v61;
    v71 = v167;
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v88, 1, 1, v167);
    v67 = v166;
    v73 = v165;
    goto LABEL_22;
  }
  static TimeZone._unconditionallyBridgeFromObjectiveC(_:)(v66);

  v67 = v166;
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 32);
  v69 = v61;
  v70 = v61;
  v71 = v167;
  v68(v69, v62, v167);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v70, 0, 1, v71);
  v72 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v70, 1, v71);
  v73 = v165;
  if (v72 == 1)
  {
LABEL_22:
    v89 = objc_msgSend(v64, "timeZone");
    if (v89)
    {
      v90 = v89;
      v91 = v162;
      static TimeZone._unconditionallyBridgeFromObjectiveC(_:)(v89);

      v92 = v91;
      v93 = 0;
      v74 = (uint64_t)v164;
    }
    else
    {
      v93 = 1;
      v74 = (uint64_t)v164;
      v92 = v162;
    }
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v92, v93, 1, v71);
    sub_100097828(v92, v74);
    sub_100097870((uint64_t)v169);
    goto LABEL_26;
  }
  v74 = (uint64_t)v164;
  v68((uint64_t)v164, (uint64_t)v169, v71);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v74, 0, 1, v71);
LABEL_26:
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v74, 1, v71) == 1)
  {
    v94 = sub_100097870(v74);
    static Logger.geocode.getter(v94);
    v95 = swift_bridgeObjectRetain_n(v53, 2);
    v96 = Logger.logObject.getter(v95);
    v97 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v96, v97))
    {
      v98 = swift_slowAlloc(22, -1);
      v99 = swift_slowAlloc(32, -1);
      *(_DWORD *)v98 = 141558275;
      v183 = 1752392040;
      v184[0] = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v98 + 4);
      *(_WORD *)(v98 + 12) = 2085;
      swift_bridgeObjectRetain(v53);
      v183 = sub_10016EC84(v177, v53, v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v98 + 14);
      swift_bridgeObjectRelease_n(v53, 3);
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "Time zone missing while geocoding, searchString=%{sensitive,mask.hash}s.", (uint8_t *)v98, 0x16u);
      swift_arrayDestroy(v99, 1);
      swift_slowDealloc(v99, -1, -1);
      swift_slowDealloc(v98, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v53, 2);
    }
    (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v55, v182);
    v155 = sub_1000977EC();
    v156 = swift_allocError(&type metadata for LocalSearchRequestService.LocalSearchRequestError, v155, 0, 0);
    *v157 = 1;
    v179();
    swift_errorRelease(v156);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v73, v74, v71);
    v100 = objc_msgSend(v64, "placemark");
    objc_msgSend(v100, "coordinate");
    v102 = v101;
    v104 = v103;

    v105 = CLLocationCoordinate2D.id.getter(v102, v104);
    v178 = v106;
    v179 = (void (*)(void))v105;
    v107 = objc_msgSend(v64, "wc_weatherDisplayName");
    v175 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v169 = (char *)v108;

    v109 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v67 + 16))(v62, v73, v71);
    Date.init()(v109);
    v110 = type metadata accessor for Date(0);
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v60, 0, 1, v110);
    v111 = objc_msgSend(v64, "placemark");
    v168 = MKPlacemark.safeTitle.getter();
    v164 = v112;

    v113 = objc_msgSend(v64, "placemark");
    v162 = MKPlacemark.safeSubtitle.getter();
    v160 = v114;

    v115 = objc_msgSend(v64, "wc_weatherLocationName");
    v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v118 = v117;

    v119 = objc_msgSend(v64, "wc_weatherLocationName");
    v120 = v62;
    v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v123 = v122;

    v124 = objc_msgSend(v64, "wc_weatherDisplayName");
    v125 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v127 = v126;

    v128 = static Location.sanitizedSecondaryName(_:name:)(v121, v123, v125, v127);
    v130 = v129;
    swift_bridgeObjectRelease(v123);
    swift_bridgeObjectRelease(v127);
    v159 = v130;
    v131 = v163;
    v132 = Location.init(id:name:timeZone:coordinate:lastRefreshDate:searchTitle:searchSubtitle:preciseName:secondaryName:)(v179, v178, v175, v169, v120, v176, v168, v164, v102, v104, v162, v160, v116, v118, v128, v159);
    v133 = v161;
    static Logger.geocode.getter(v132);
    v135 = v170;
    v134 = v171;
    v136 = v174;
    (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v170, v131, v174);
    swift_bridgeObjectRetain_n(v53, 2);
    v137 = v64;
    v138 = Logger.logObject.getter(v137);
    v139 = static os_log_type_t.default.getter();
    v140 = v139;
    if (os_log_type_enabled(v138, v139))
    {
      v141 = swift_slowAlloc(62, -1);
      v142 = swift_slowAlloc(96, -1);
      v179 = (void (*)(void))v142;
      *(_DWORD *)v141 = 141559299;
      v183 = 1752392040;
      v184[0] = v142;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v141 + 4);
      *(_WORD *)(v141 + 12) = 2085;
      LODWORD(v178) = v140;
      swift_bridgeObjectRetain(v53);
      v183 = sub_10016EC84(v177, v53, v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v141 + 14);
      swift_bridgeObjectRelease_n(v53, 3);
      *(_WORD *)(v141 + 22) = 2160;
      v183 = 1752392040;
      v143 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v141 + 24);
      *(_WORD *)(v141 + 32) = 2081;
      v144 = Location.id.getter(v143);
      v146 = v145;
      v183 = sub_10016EC84(v144, v145, v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v141 + 34);
      v147 = swift_bridgeObjectRelease(v146);
      v148 = *(void (**)(char *, uint64_t, __n128))(v134 + 8);
      v148(v135, v174, v147);
      *(_WORD *)(v141 + 42) = 2160;
      v183 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v141 + 44);
      *(_WORD *)(v141 + 52) = 2081;
      v149 = objc_msgSend(v137, "wc_weatherLocationName");
      v150 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v152 = v151;

      v183 = sub_10016EC84(v150, v152, v184);
      v131 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v141 + 54);

      swift_bridgeObjectRelease(v152);
      _os_log_impl((void *)&_mh_execute_header, v138, (os_log_type_t)v178, "Successfully geocoded location. searchString=%{sensitive,mask.hash}s, location=%{private,mask.hash}s, unsanitizedSecondaryName=%{private,mask.hash}s", (uint8_t *)v141, 0x3Eu);
      v153 = v179;
      swift_arrayDestroy(v179, 3);
      swift_slowDealloc(v153, -1, -1);
      v154 = v141;
      v136 = v174;
      swift_slowDealloc(v154, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(v53, 2);
      v148 = *(void (**)(char *, uint64_t, __n128))(v134 + 8);
      ((void (*)(char *, uint64_t))v148)(v135, v136);

    }
    (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v133, v182);
    v173(v131);

    ((void (*)(char *, uint64_t))v148)(v131, v136);
    (*(void (**)(char *, uint64_t))(v166 + 8))(v165, v167);
  }
}

void sub_100097674(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t LocalSearchRequestService.deinit()
{
  uint64_t v0;

  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return v0;
}

void sub_100097704(uint64_t a1, uint64_t a2)
{
  LocalSearchRequestService.performLocalSearch(with:)(a1, a2);
}

void sub_100097718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LocalSearchRequestService.performLocalSearch(with:calloutTitle:)(a1, a2, a3);
}

uint64_t type metadata accessor for LocalSearchRequestService()
{
  return objc_opt_self(_TtC13WeatherWidget25LocalSearchRequestService);
}

void sub_10009774C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "setNaturalLanguageQuery:", v4);

}

uint64_t sub_100097790()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_1000977C4(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000966F8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(void))(v2 + 32), *(_QWORD *)(v2 + 40), *(void (**)(char *))(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_1000977D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000977E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000977EC()
{
  unint64_t result;

  result = qword_1001C2140;
  if (!qword_1001C2140)
  {
    result = swift_getWitnessTable(&unk_10017DE08, &type metadata for LocalSearchRequestService.LocalSearchRequestError);
    atomic_store(result, (unint64_t *)&qword_1001C2140);
  }
  return result;
}

uint64_t sub_100097828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001C0F18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100097870(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001C0F18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for LocalSearchRequestService.LocalSearchRequestError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL)
    swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for LocalSearchRequestService.LocalSearchRequestError(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_errorRelease(result);
  return result;
}

unint64_t *assignWithCopy for LocalSearchRequestService.LocalSearchRequestError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
      swift_errorRetain(*a2);
    *a1 = v4;
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain(*a2);
    v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }
  return a1;
}

unint64_t *assignWithTake for LocalSearchRequestService.LocalSearchRequestError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalSearchRequestService.LocalSearchRequestError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LocalSearchRequestService.LocalSearchRequestError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_100097AA0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100097AB8(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for LocalSearchRequestService.LocalSearchRequestError()
{
  return &type metadata for LocalSearchRequestService.LocalSearchRequestError;
}

uint64_t sub_100097B00(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_100097B0C(uint64_t a1)
{
  return sub_100097BF8(a1, qword_1001D9F78, 0x6544746567646957, 0xEA00000000006F6DLL);
}

uint64_t sub_100097B30(uint64_t a1)
{
  return sub_100097BF8(a1, qword_1001D9F90, 0xD00000000000001ALL, 0x80000001001876A0);
}

uint64_t sub_100097B54(uint64_t a1)
{
  return sub_100097BF8(a1, qword_1001D9FA8, 0x6F4C746567646957, 0xEE006E6F69746163);
}

uint64_t sub_100097B80(uint64_t a1)
{
  return sub_100097C6C(a1, qword_1001D9FC0, 0x7469706963657250, 0x6E6F697461);
}

uint64_t sub_100097BA8(uint64_t a1)
{
  return sub_100097C6C(a1, qword_1001D9FD8, 0x6552746567646957, 0x6873657266);
}

uint64_t sub_100097BD0(uint64_t a1)
{
  return sub_100097C6C(a1, qword_1001D9FF0, 0x5772656874616557, 0x7465676469);
}

uint64_t sub_100097BF8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_100093228(v7, a2);
  sub_100025184(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x8000000100186DD0, a3, a4);
}

uint64_t sub_100097C6C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100097BF8(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xED00000000000000);
}

unint64_t static LocalSearchRequestManager.dependencyKey.getter()
{
  return 0xD00000000000001DLL;
}

double sub_100097C90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double refreshed;
  uint64_t v10;

  v1 = type metadata accessor for AppConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0[5];
  v6 = v0[6];
  sub_100022330(v0 + 2, v5);
  v7 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v5, v6);
  refreshed = AppConfiguration.reverseGeocodingRefreshTimeInterval.getter(v7);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return refreshed;
}

uint64_t sub_100097D40@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  _BYTE v4[24];
  _BYTE v5[24];
  uint64_t v6;
  _BYTE v7[24];

  swift_beginAccess(v1 + 10, v7, 0, 0);
  sub_10002EFD4((uint64_t)(v1 + 10), (uint64_t)v5, &qword_1001C2150);
  if (v6 != 1)
    return sub_100099328((uint64_t)v5, a1);
  sub_10002F014((uint64_t)v5, &qword_1001C2150);
  sub_100097E0C(v1, a1);
  sub_10002EFD4(a1, (uint64_t)v5, &qword_1001C2228);
  swift_beginAccess(v1 + 10, v4, 33, 0);
  sub_1000992E0((uint64_t)v5, (uint64_t)(v1 + 10));
  return swift_endAccess(v4);
}

uint64_t sub_100097E0C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v18[16];
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v4 = *a1;
  v5 = type metadata accessor for Logger(0);
  v6 = __chkstk_darwin(v5);
  ((void (*)(_QWORD *__return_ptr, uint64_t))a1[15])(v19, v6);
  v7 = type metadata accessor for SettingReader(0);
  v8 = static SettingReader.shared.getter(v7);
  v9 = ((uint64_t (*)(void))static Settings.Geocoding.clearGeocodingCacheOnNextLaunch.getter)();
  SettingReader.read<A>(_:)(v18);
  swift_release(v8);
  swift_release(v9);
  v10 = v18[0];
  v11 = v20;
  v12 = v21;
  sub_100022330(v19, v20);
  if (v10 == 1)
  {
    v13 = dispatch thunk of GeocodeStoreType.deleteAllLocations(satisfying:)(static WeatherLocation.supportsSecureCoding.getter, 0, v11, v12);
    v14 = static Settings.Geocoding.clearGeocodingCacheOnNextLaunch.getter(v13);
    v18[0] = 0;
    sub_1000993FC(&qword_1001C2230, v15, (uint64_t (*)(uint64_t))type metadata accessor for LocalSearchRequestManager, (uint64_t)&protocol conformance descriptor for LocalSearchRequestManager);
    Updatable.save<A>(setting:value:)(v14, v18, v4, v16);
    swift_release(v14);
  }
  else
  {
    dispatch thunk of GeocodeStoreType.deleteAllLocations(satisfying:)(sub_100099370, a1, v11, v12);
  }
  sub_100099380((uint64_t)v19, a2);
  return _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v19);
}

BOOL sub_100098114()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v12;
  uint64_t v13;
  double v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;

  v0 = sub_100005D40(&qword_1001BF0A0);
  __chkstk_darwin(v0);
  v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v16 - v9;
  Location.lastRefreshDate.getter(v8);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v2, 1, v3) == 1)
  {
    sub_10002F014((uint64_t)v2, &qword_1001BF0A0);
    return 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v10, v2, v3);
    v12 = sub_100097C90();
    Date.init()(v13);
    v14 = Date.timeIntervalSince(_:)(v10);
    v15 = *(void (**)(char *, uint64_t))(v4 + 8);
    v15(v7, v3);
    v15(v10, v3);
    return v12 <= v14;
  }
}

uint64_t LocalSearchRequestManager.__allocating_init(service:store:appConfigurationManager:queue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100099450(a1);
  v1 = sub_10009946C();
  return sub_100098E24(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t LocalSearchRequestManager.init(service:store:appConfigurationManager:queue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100099450(a1);
  v1 = sub_10009946C();
  return sub_100098EA0(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t LocalSearchRequestManager.performLocalSearch(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *v2;
  v6 = v2[17];
  v7 = (_QWORD *)swift_allocObject(&unk_1001B6BE8, 40, 7);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = v2;
  type metadata accessor for Location(0);
  sub_100099498();
  swift_retain(v2);
  v8 = firstly<A, B>(on:disposeOn:closure:)(v6, v2, sub_1000991E4, v7, a1, v5);
  swift_release(v7);
  return v8;
}

uint64_t sub_100098384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[6];
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  return PromiseDeduper.promise(key:createBlock:)(v6, sub_100099374, v5);
}

uint64_t sub_1000983D0(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD v48[3];
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;

  v46 = *a4;
  v47 = a4;
  v7 = sub_100005D40(&qword_1001C0E90);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Location(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v40 - v15;
  v17 = type metadata accessor for SettingReader(0);
  v18 = static SettingReader.shared.getter(v17);
  v19 = static Settings.Geocoding.bypassGeocodingCache.getter();
  SettingReader.read<A>(_:)(v51);
  swift_release(v18);
  v20 = v19;
  v21 = a1;
  swift_release(v20);
  if ((v51[0] & 1) != 0)
    goto LABEL_9;
  v40 = v14;
  v41 = v16;
  v42 = v11;
  v43 = a3;
  v44 = v10;
  v45 = a2;
  sub_100097D40((uint64_t)v51);
  if (!v52)
  {
    sub_10002F014((uint64_t)v51, &qword_1001C2228);
    v10 = v44;
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 1, 1, v44);
    a3 = v43;
    goto LABEL_8;
  }
  sub_100099380((uint64_t)v51, (uint64_t)v48);
  sub_10002F014((uint64_t)v51, &qword_1001C2228);
  v22 = a1;
  v24 = v49;
  v23 = v50;
  sub_100022330(v48, v49);
  a3 = v43;
  v25 = v24;
  v21 = v22;
  dispatch thunk of GeocodeStoreType.queryLocation(for:)(v45, v43, v25, v23);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v48);
  v10 = v44;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v44) == 1)
  {
LABEL_8:
    sub_10002F014((uint64_t)v9, &qword_1001C0E90);
    a2 = v45;
    goto LABEL_9;
  }
  v26 = v41;
  v27 = v42;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v9, v10);
  if (!sub_100098114())
  {
    v38 = v40;
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v40, v26, v10);
    v39 = sub_100005D40(&qword_1001C2090);
    swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
    v36 = Promise.init(value:)(v38);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v10);
    return v36;
  }
  sub_100097D40((uint64_t)v51);
  if (v52)
  {
    sub_100099380((uint64_t)v51, (uint64_t)v48);
    sub_10002F014((uint64_t)v51, &qword_1001C2228);
    v28 = v49;
    v29 = v50;
    sub_100022330(v48, v49);
    v30 = v29;
    v21 = v22;
    dispatch thunk of GeocodeStoreType.deleteLocation(for:)(v45, a3, v28, v30);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v10);
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v48);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v10);
    sub_10002F014((uint64_t)v51, &qword_1001C2228);
  }
  v10 = v44;
  a2 = v45;
  a3 = v43;
LABEL_9:
  v31 = v21[8];
  ObjectType = swift_getObjectType(v21[7]);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8))(a2, a3, ObjectType, v31);
  v34 = v21[17];
  v35 = swift_allocObject(&unk_1001B6C78, 32, 7);
  *(_QWORD *)(v35 + 16) = a2;
  *(_QWORD *)(v35 + 24) = a3;
  swift_bridgeObjectRetain(a3);
  v36 = Promise.then<A, B>(on:disposeOn:closure:)(v34, v47, sub_10009943C, v35, v10, v46);
  swift_release(v33);
  swift_release(v35);
  return v36;
}

uint64_t LocalSearchRequestManager.performLocalSearch(with:calloutTitle:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;

  v7 = *v3;
  v8 = v3[17];
  v9 = (_QWORD *)swift_allocObject(&unk_1001B6C10, 48, 7);
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a1;
  v9[5] = v3;
  type metadata accessor for Location(0);
  sub_100099498();
  v10 = a1;
  swift_retain(v3);
  v11 = firstly<A, B>(on:disposeOn:closure:)(v8, v3, sub_100099230, v9, a2, v7);
  swift_release(v9);
  return v11;
}

uint64_t sub_10009881C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a1;
  v6[5] = a4;
  v6[6] = a5;
  return PromiseDeduper.promise(key:createBlock:)(v7, sub_100099298, v6);
}

uint64_t sub_10009886C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;

  v46 = a4;
  v47 = a5;
  v48 = *a5;
  v8 = sub_100005D40(&qword_1001C0E90);
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Location(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v40 - v16;
  v18 = type metadata accessor for SettingReader(0);
  v19 = static SettingReader.shared.getter(v18);
  v20 = static Settings.Geocoding.bypassGeocodingCache.getter();
  SettingReader.read<A>(_:)(v52);
  swift_release(v19);
  v21 = v20;
  v22 = v48;
  swift_release(v21);
  if ((v52[0] & 1) != 0)
    goto LABEL_9;
  v40 = v15;
  v41 = v17;
  v42 = v12;
  v43 = a2;
  v44 = v11;
  v45 = a1;
  v23 = v22;
  sub_100097D40((uint64_t)v52);
  if (!v53)
  {
    sub_10002F014((uint64_t)v52, &qword_1001C2228);
    v11 = v44;
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 1, 1, v44);
    a2 = v43;
    goto LABEL_8;
  }
  sub_100099380((uint64_t)v52, (uint64_t)v49);
  sub_10002F014((uint64_t)v52, &qword_1001C2228);
  v25 = v50;
  v24 = v51;
  sub_100022330(v49, v50);
  a2 = v43;
  dispatch thunk of GeocodeStoreType.queryLocation(for:)(v45, v43, v25, v24);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v49);
  v11 = v44;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v44) == 1)
  {
LABEL_8:
    sub_10002F014((uint64_t)v10, &qword_1001C0E90);
    v22 = v23;
    a1 = v45;
    goto LABEL_9;
  }
  v27 = v41;
  v26 = v42;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v10, v11);
  if (!sub_100098114())
  {
    v38 = v40;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v40, v27, v11);
    v39 = sub_100005D40(&qword_1001C2090);
    swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
    v36 = Promise.init(value:)(v38);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v11);
    return v36;
  }
  sub_100097D40((uint64_t)v52);
  v28 = a3;
  if (v53)
  {
    sub_100099380((uint64_t)v52, (uint64_t)v49);
    sub_10002F014((uint64_t)v52, &qword_1001C2228);
    v29 = v50;
    v30 = v51;
    sub_100022330(v49, v50);
    dispatch thunk of GeocodeStoreType.deleteLocation(for:)(v45, a2, v29, v30);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v11);
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v49);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v11);
    sub_10002F014((uint64_t)v52, &qword_1001C2228);
  }
  v22 = v23;
  v11 = v44;
  a1 = v45;
  a2 = v43;
  a3 = v28;
LABEL_9:
  v31 = a3[8];
  ObjectType = swift_getObjectType(a3[7]);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 16))(v46, a1, a2, ObjectType, v31);
  v34 = a3[17];
  v35 = swift_allocObject(&unk_1001B6C50, 32, 7);
  *(_QWORD *)(v35 + 16) = a1;
  *(_QWORD *)(v35 + 24) = a2;
  swift_bridgeObjectRetain(a2);
  v36 = Promise.then<A, B>(on:disposeOn:closure:)(v34, v47, sub_1000992C8, v35, v11, v22);
  swift_release(v33);
  swift_release(v35);
  return v36;
}

uint64_t sub_100098C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  uint64_t v20;
  uint64_t v21;

  v8 = type metadata accessor for Location(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100097D40((uint64_t)v19);
  if (v20)
  {
    sub_100099380((uint64_t)v19, (uint64_t)v16);
    sub_10002F014((uint64_t)v19, &qword_1001C2228);
    v21 = v4;
    v12 = v17;
    v13 = v18;
    sub_100022330(v16, v17);
    dispatch thunk of GeocodeStoreType.saveLocation(_:for:)(a1, a3, a4, v12, v13);
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v16);
  }
  else
  {
    sub_10002F014((uint64_t)v19, &qword_1001C2228);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v14 = sub_100005D40(&qword_1001C2090);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  return Promise.init(value:)(v11);
}

uint64_t LocalSearchRequestManager.deinit()
{
  uint64_t v0;

  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  sub_10002F014(v0 + 80, &qword_1001C2150);
  swift_release(*(_QWORD *)(v0 + 128));

  return v0;
}

uint64_t LocalSearchRequestManager.__deallocating_deinit()
{
  uint64_t v0;

  LocalSearchRequestManager.deinit();
  return swift_deallocClassInstance(v0, 144, 7);
}

uint64_t sub_100098DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  return Updatable.save<A>(setting:value:)(a1, a2, *v6, a6);
}

uint64_t sub_100098DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  return Updatable.reset<A>(setting:)(a1, *v5, a5);
}

uint64_t sub_100098DEC(uint64_t a1)
{
  _QWORD *v1;

  return Updatable.apply(preset:)(a1, *v1);
}

uint64_t sub_100098DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  return Configurable.setting<A>(_:)(a1, *v5, a5);
}

uint64_t sub_100098E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  return Configurable.setting<A>(_:defaultValue:)(a1, a2, *v6, a6);
}

uint64_t sub_100098E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  return Configurable.setting<A>(_:_:)(a1, a2, a3, *v7, a7);
}

uint64_t sub_100098E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  return Configurable.setting<A>(_:defaultValue:_:)(a1, a2, a3, a4, *v8, a8);
}

uint64_t sub_100098E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;

  v15 = swift_allocObject(a6, 144, 7);
  return sub_100098EA0(a1, a2, a3, a4, a5, v15, a7, a8);
}

uint64_t sub_100098EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;

  v46 = a2;
  v47 = a8;
  v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v43 = *(_QWORD *)(v13 - 8);
  v44 = v13;
  __chkstk_darwin(v13);
  v45 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v41);
  v42 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v16);
  v40 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PromiseDeduperFlags(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = &_swiftEmptyArrayStorage;
  sub_1000993FC(&qword_1001BEF70, 255, v21, (uint64_t)&protocol conformance descriptor for PromiseDeduperFlags);
  v23 = v22;
  v24 = sub_100005D40(&qword_1001BEF78);
  sub_100070708((unint64_t *)&qword_1001BEF80, &qword_1001BEF78);
  v25 = v23;
  v26 = (_QWORD *)a4;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v24, v27, v18, v25);
  v28 = sub_100005D40(&qword_1001BEF88);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  *(_QWORD *)(a6 + 72) = PromiseDeduper.init(options:)(v20);
  *(_QWORD *)(a6 + 80) = 0;
  *(_QWORD *)(a6 + 88) = 0;
  *(_QWORD *)(a6 + 96) = 0;
  *(_OWORD *)(a6 + 104) = xmmword_10017A3F0;
  v29 = v47;
  *(_QWORD *)(a6 + 56) = a1;
  *(_QWORD *)(a6 + 64) = v29;
  *(_QWORD *)(a6 + 120) = v46;
  *(_QWORD *)(a6 + 128) = a3;
  sub_100099380(a4, a6 + 16);
  if (!a5)
  {
    sub_1000993C0();
    swift_unknownObjectRetain(a1);
    v30 = swift_retain(a3);
    v31 = v40;
    static DispatchQoS.unspecified.getter(v30);
    v48 = &_swiftEmptyArrayStorage;
    sub_1000993FC(&qword_1001C2240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v33 = v32;
    v34 = sub_100005D40(&qword_1001C2248);
    sub_100070708(&qword_1001C2250, &qword_1001C2248);
    v35 = v42;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v34, v36, v41, v33);
    v37 = v45;
    (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v45, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v44);
    a5 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x8000000100187770, v31, v35, v37, 0);
    swift_unknownObjectRelease(a1);
    swift_release(a3);
  }
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v26);
  *(_QWORD *)(a6 + 136) = a5;
  return a6;
}

uint64_t sub_1000991BC()
{
  uint64_t v0;

  sub_100099490();
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000991E4(uint64_t a1)
{
  uint64_t *v1;

  return sub_100098384(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100099200()
{
  uint64_t v0;

  sub_100099490();

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100099230(uint64_t a1)
{
  uint64_t *v1;

  return sub_10009881C(a1, v1[2], v1[3], v1[4], v1[5]);
}

void sub_10009924C(uint64_t a1, uint64_t a2)
{
  sub_1000993FC(&qword_1001C2158, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalSearchRequestManager, (uint64_t)&protocol conformance descriptor for LocalSearchRequestManager);
}

uint64_t type metadata accessor for LocalSearchRequestManager()
{
  return objc_opt_self(_TtC13WeatherWidget25LocalSearchRequestManager);
}

uint64_t sub_100099298()
{
  uint64_t v0;

  return sub_10009886C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD **)(v0 + 48));
}

uint64_t sub_1000992A8()
{
  uint64_t v0;

  sub_100099490();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000992C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100098C24(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000992E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001C2150);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100099328(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001C2228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100099374()
{
  uint64_t v0;

  return sub_1000983D0(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD **)(v0 + 40));
}

void sub_100099380(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_100006338();
}

unint64_t sub_1000993C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2238;
  if (!qword_1001C2238)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001C2238);
  }
  return result;
}

void sub_1000993FC(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }
  sub_100006338();
}

uint64_t sub_10009943C(uint64_t a1, uint64_t a2)
{
  return sub_1000992C8(a1, a2);
}

uint64_t sub_100099450(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_10009946C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100099490()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100099498()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000994A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A4268(a1, a2, a3, &qword_1001BF3C0, &type metadata accessor for WidgetRenderingMode);
}

uint64_t sub_1000994B8(uint64_t a1, uint64_t a2)
{
  return sub_1000A468C(a1, a2, (uint64_t)&qword_1001BF3C0, (uint64_t)&type metadata accessor for WidgetRenderingMode);
}

uint64_t sub_1000994CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A4B24(a1, a2, a3, &qword_1001BF3C0, &type metadata accessor for WidgetRenderingMode);
}

uint64_t sub_1000994E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A4F10(a1, a2, a3, &qword_1001BF3C0, &type metadata accessor for WidgetRenderingMode);
}

uint64_t sub_1000994F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A56FC(a1, a2, a3, &qword_1001BF3C0, &type metadata accessor for WidgetRenderingMode);
}

uint64_t sub_100099508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A5CA4(a1, a2, a3, &qword_1001BF3C0, &type metadata accessor for WidgetRenderingMode);
}

uint64_t sub_10009951C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100099528);
}

uint64_t sub_100099528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A6334(a1, a2, a3);
}

uint64_t sub_100099534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100099540);
}

uint64_t sub_100099540(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1000A63A0(a1, a2, a3);
}

uint64_t type metadata accessor for SmallCurrentObservationView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C22B0, (uint64_t)&nominal type descriptor for SmallCurrentObservationView);
}

void sub_100099560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000A6424(a1, a2, a3, &qword_1001BF530, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
}

uint64_t sub_100099574(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F740, 1);
}

void sub_100099584(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *a2 = static Alignment.center.getter(a1);
  a2[1] = v4;
  v5 = sub_100005D40(&qword_1001C22E8);
  v6 = (char *)a2 + *(int *)(v5 + 44);
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v5);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v7 = sub_100005D40(&qword_1001C22F0);
  sub_1000995E0(v2, (uint64_t)&v6[*(int *)(v7 + 44)]);
  sub_100006338();
}

void sub_1000995E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;

  v68 = a2;
  v65 = type metadata accessor for SmallConditionDescriptionView(0);
  __chkstk_darwin(v65);
  v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100005D40(&qword_1001C22F8);
  __chkstk_darwin(v63);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100005D40(&qword_1001C2300);
  __chkstk_darwin(v64);
  v62 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D40(&qword_1001C2308);
  v9 = __chkstk_darwin(v8);
  v67 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v61 - v11;
  v13 = sub_100005D40(&qword_1001C2310);
  __chkstk_darwin(v13);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005D40(&qword_1001C2318);
  v17 = __chkstk_darwin(v16);
  v66 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v61 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v61 - v23;
  *v15 = static Axis.Set.horizontal.getter(v22);
  v25 = sub_100005D40(&qword_1001C2320);
  sub_100099B10(a1, (uint64_t)&v15[*(int *)(v25 + 44)]);
  v26 = static Edge.Set.bottom.getter();
  v27 = EdgeInsets.init(_all:)(8.0);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  sub_10001C5BC((uint64_t)v15, (uint64_t)v21, &qword_1001C2310);
  v34 = &v21[*(int *)(v16 + 36)];
  *v34 = v26;
  *((double *)v34 + 1) = v27;
  *((_QWORD *)v34 + 2) = v29;
  *((_QWORD *)v34 + 3) = v31;
  *((_QWORD *)v34 + 4) = v33;
  v34[40] = 0;
  sub_100016904((uint64_t)v15, &qword_1001C2310);
  sub_10001C660((uint64_t)v21, (uint64_t)v24, &qword_1001C2318);
  v35 = type metadata accessor for CurrentObservationViewAttributes(0);
  v36 = (uint64_t *)(a1 + *(int *)(v35 + 32));
  v38 = *v36;
  v37 = v36[1];
  v39 = HIBYTE(v37) & 0xF;
  if ((v37 & 0x2000000000000000) == 0)
    v39 = v38 & 0xFFFFFFFFFFFFLL;
  if (v39)
  {
    sub_10001C590(a1, (uint64_t)v4, type metadata accessor for CurrentObservationViewAttributes);
    v40 = v65;
    v41 = &v4[*(int *)(v65 + 20)];
    *(_QWORD *)v41 = v38;
    *((_QWORD *)v41 + 1) = v37;
    sub_10001C590((uint64_t)v4, (uint64_t)v6, type metadata accessor for SmallConditionDescriptionView);
    swift_storeEnumTagMultiPayload(v6, v63, 1);
    v42 = sub_10009A1E8();
    sub_100016878(&qword_1001C2330, type metadata accessor for SmallConditionDescriptionView);
    v44 = v43;
    swift_bridgeObjectRetain(v37);
    _ConditionalContent<>.init(storage:)(v6, v64, v40, v42, v44);
    sub_100011894((uint64_t)v4, type metadata accessor for SmallConditionDescriptionView);
    v46 = (uint64_t)v67;
    v45 = v68;
    v47 = (uint64_t)v66;
  }
  else
  {
    v45 = v68;
    v48 = v65;
    v47 = (uint64_t)v66;
    v49 = v63;
    v50 = v64;
    v51 = v62;
    if (*(_BYTE *)(a1 + *(int *)(v35 + 92)) == 1)
    {
      sub_10001C590(a1, v62, type metadata accessor for CurrentObservationViewAttributes);
      v52 = a1 + *(int *)(type metadata accessor for CurrentObservationViewModel(0) + 48);
      v53 = (uint64_t *)(v52 + *(int *)(type metadata accessor for ConditionViewModel(0) + 28));
      v54 = *v53;
      v55 = v53[1];
      v56 = (_QWORD *)(v51 + *(int *)(v48 + 20));
      *v56 = v54;
      v56[1] = v55;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v51, 0, 1, v48);
      swift_bridgeObjectRetain(v55);
    }
    else
    {
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v62, 1, 1, v65);
    }
    sub_10001C5BC(v51, (uint64_t)v6, &qword_1001C2300);
    swift_storeEnumTagMultiPayload(v6, v49, 0);
    v57 = sub_10009A1E8();
    sub_100016878(&qword_1001C2330, type metadata accessor for SmallConditionDescriptionView);
    _ConditionalContent<>.init(storage:)(v6, v50, v48, v57, v58);
    sub_100016904(v51, &qword_1001C2300);
    v46 = (uint64_t)v67;
  }
  sub_10001C5BC((uint64_t)v24, v47, &qword_1001C2318);
  sub_10001C5BC((uint64_t)v12, v46, &qword_1001C2308);
  sub_10001C5BC(v47, v45, &qword_1001C2318);
  v59 = sub_100005D40(&qword_1001C2338);
  sub_10001C5BC(v46, v45 + *(int *)(v59 + 48), &qword_1001C2308);
  v60 = v45 + *(int *)(v59 + 64);
  *(_QWORD *)v60 = 0;
  *(_BYTE *)(v60 + 8) = 1;
  sub_100016904((uint64_t)v12, &qword_1001C2308);
  sub_100016904((uint64_t)v24, &qword_1001C2318);
  sub_100016904(v46, &qword_1001C2308);
  sub_100016904(v47, &qword_1001C2318);
}

void sub_100099B10(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for SmallLocationView(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v19 - v8;
  v10 = sub_100005D40(&qword_1001C2340);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v19 - v15;
  *(_QWORD *)v16 = static VerticalAlignment.center.getter(v14);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 1;
  v17 = sub_100005D40(&qword_1001C2348);
  sub_100099CBC(a1, (uint64_t)&v16[*(int *)(v17 + 44)]);
  sub_10001C590(a1, (uint64_t)v9, type metadata accessor for CurrentObservationViewAttributes);
  sub_10001C5BC((uint64_t)v16, (uint64_t)v13, &qword_1001C2340);
  sub_10001C590((uint64_t)v9, (uint64_t)v7, type metadata accessor for SmallLocationView);
  sub_10001C5BC((uint64_t)v13, a2, &qword_1001C2340);
  v18 = sub_100005D40(&qword_1001C2350);
  sub_10001C590((uint64_t)v7, a2 + *(int *)(v18 + 48), type metadata accessor for SmallLocationView);
  sub_100011894((uint64_t)v9, type metadata accessor for SmallLocationView);
  sub_100016904((uint64_t)v16, &qword_1001C2340);
  sub_100011894((uint64_t)v7, type metadata accessor for SmallLocationView);
  sub_100016904((uint64_t)v13, &qword_1001C2340);
}

void sub_100099CBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;

  v57 = a2;
  v56 = sub_100005D40(&qword_1001C2358);
  __chkstk_darwin(v56);
  v66 = (uint64_t *)((char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for WidgetRenderingMode(0);
  v61 = *(_QWORD *)(v4 - 8);
  v62 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (_DWORD *)((char *)&v54 - v8);
  v10 = sub_100005D40(&qword_1001C1680);
  __chkstk_darwin(v10);
  v55 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for SmallCurrentObservationView(0);
  __chkstk_darwin(v59);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100005D40(&qword_1001C2360);
  v14 = __chkstk_darwin(v60);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (uint64_t *)((char *)&v54 - v18);
  __chkstk_darwin(v17);
  v65 = (uint64_t)&v54 - v20;
  v21 = type metadata accessor for SmallLocationView(0);
  v22 = __chkstk_darwin(v21);
  v64 = (uint64_t)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v63 = (uint64_t)&v54 - v24;
  sub_10001C590(a1, (uint64_t)&v54 - v24, type metadata accessor for CurrentObservationViewAttributes);
  v25 = type metadata accessor for CurrentObservationViewAttributes(0);
  v26 = (uint64_t *)(a1 + *(int *)(v25 + 100));
  v27 = *v26;
  v28 = v26[1];
  sub_10001C590(a1, (uint64_t)v13, type metadata accessor for SmallCurrentObservationView);
  v67 = v16;
  if (v28)
  {
    v29 = v28;
  }
  else
  {
    v30 = *(int *)(type metadata accessor for CurrentObservationViewModel(0) + 48);
    v31 = &v13[v30 + *(int *)(type metadata accessor for ConditionViewModel(0) + 24)];
    v27 = *(_QWORD *)v31;
    v29 = *((_QWORD *)v31 + 1);
    swift_bridgeObjectRetain(v29);
  }
  swift_bridgeObjectRetain(v28);
  sub_100011894((uint64_t)v13, type metadata accessor for SmallCurrentObservationView);
  v58 = Image.init(systemName:)(v27, v29);
  v32 = static Color.white.getter(v58);
  KeyPath = swift_getKeyPath(&unk_10017DFC0);
  v34 = *(_QWORD *)(a1 + *(int *)(v25 + 52));
  v35 = swift_getKeyPath(&unk_10017DFF0);
  swift_retain(v34);
  sub_1000C5250(v9);
  static WidgetRenderingMode.fullColor.getter();
  v36 = static WidgetRenderingMode.== infix(_:_:)(v9, v7);
  v37 = v62;
  v38 = *(void (**)(char *, uint64_t))(v61 + 8);
  v38(v7, v62);
  v39 = ((uint64_t (*)(_DWORD *, uint64_t))v38)(v9, v37);
  v40 = (uint64_t)v55;
  if ((v36 & 1) != 0)
    static SymbolRenderingMode.multicolor.getter(v39);
  else
    static SymbolRenderingMode.monochrome.getter(v39);
  v41 = v56;
  v42 = v57;
  v43 = type metadata accessor for SymbolRenderingMode(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v40, 0, 1, v43);
  v44 = swift_getKeyPath(&unk_10017E020);
  v45 = *(int *)(v41 + 28);
  v46 = v66;
  sub_10001C5BC(v40, (uint64_t)v66 + v45, &qword_1001C1680);
  *v46 = v44;
  sub_10001C5BC((uint64_t)v46, (uint64_t)v19 + *(int *)(v60 + 36), &qword_1001C2358);
  v47 = v58;
  *v19 = v58;
  v19[1] = KeyPath;
  v19[2] = v32;
  v19[3] = v35;
  v19[4] = v34;
  swift_retain(v34);
  swift_retain(v47);
  swift_retain(KeyPath);
  swift_retain(v32);
  swift_retain(v35);
  sub_100016904((uint64_t)v46, &qword_1001C2358);
  sub_100016904(v40, &qword_1001C1680);
  swift_release(v34);
  swift_release(v35);
  swift_release(v32);
  swift_release(KeyPath);
  swift_release(v47);
  v48 = v65;
  sub_10001C660((uint64_t)v19, v65, &qword_1001C2360);
  v50 = v63;
  v49 = v64;
  sub_10001C590(v63, v64, type metadata accessor for SmallLocationView);
  v51 = (uint64_t)v67;
  sub_10001C5BC(v48, (uint64_t)v67, &qword_1001C2360);
  sub_10001C590(v49, v42, type metadata accessor for SmallLocationView);
  v52 = sub_100005D40(&qword_1001C2368);
  v53 = v42 + *(int *)(v52 + 48);
  *(_QWORD *)v53 = 0x4010000000000000;
  *(_BYTE *)(v53 + 8) = 0;
  sub_10001C5BC(v51, v42 + *(int *)(v52 + 64), &qword_1001C2360);
  sub_100016904(v48, &qword_1001C2360);
  sub_100011894(v50, type metadata accessor for SmallLocationView);
  sub_100016904(v51, &qword_1001C2360);
  sub_100011894(v49, type metadata accessor for SmallLocationView);
}

uint64_t type metadata accessor for SmallConditionDescriptionView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C23C8, (uint64_t)&nominal type descriptor for SmallConditionDescriptionView);
}

unint64_t sub_10009A1E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2328;
  if (!qword_1001C2328)
  {
    v1 = sub_100005DC4(&qword_1001C2300);
    sub_100016878(&qword_1001C2330, type metadata accessor for SmallConditionDescriptionView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2328);
  }
  return result;
}

uint64_t type metadata accessor for SmallLocationView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C2458, (uint64_t)&nominal type descriptor for SmallLocationView);
}

void sub_10009A278(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  sub_100005D40(&qword_1001C24A0);
  sub_10009A2B8(v2);
  sub_100006338();
}

void sub_10009A2B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SmallLocationText(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D40(&qword_1001C24A8);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005D40(&qword_1001C24B0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + *(int *)(v2 + 36)) == 1)
  {
    *(_QWORD *)v14 = static VerticalAlignment.center.getter(v12);
    *((_QWORD *)v14 + 1) = 0;
    v14[16] = 1;
    v15 = sub_100005D40(&qword_1001C24C8);
    sub_10009A588(a1, (uint64_t)&v14[*(int *)(v15 + 44)]);
    sub_10001C5BC((uint64_t)v14, (uint64_t)v10, &qword_1001C24B0);
    swift_storeEnumTagMultiPayload(v10, v8, 0);
    sub_100016A54(&qword_1001C24B8, &qword_1001C24B0);
    v17 = v16;
    sub_100016878(&qword_1001C24C0, type metadata accessor for SmallLocationText);
    _ConditionalContent<>.init(storage:)(v10, v11, v5, v17, v18);
    sub_100016904((uint64_t)v14, &qword_1001C24B0);
  }
  else
  {
    sub_10001C590(a1, (uint64_t)v4, type metadata accessor for CurrentObservationViewAttributes);
    KeyPath = swift_getKeyPath(&unk_10017E178);
    v20 = (uint64_t *)&v7[*(int *)(v5 + 20)];
    *v20 = KeyPath;
    v21 = sub_100005D40(&qword_1001BF0C8);
    swift_storeEnumTagMultiPayload(v20, v21, 0);
    sub_10009F940((uint64_t)v4, (uint64_t)v7);
    sub_10001C590((uint64_t)v7, (uint64_t)v10, type metadata accessor for SmallLocationText);
    swift_storeEnumTagMultiPayload(v10, v8, 1);
    sub_100016A54(&qword_1001C24B8, &qword_1001C24B0);
    v23 = v22;
    sub_100016878(&qword_1001C24C0, type metadata accessor for SmallLocationText);
    _ConditionalContent<>.init(storage:)(v10, v11, v5, v23, v24);
    sub_100011894((uint64_t)v7, type metadata accessor for SmallLocationText);
  }
}

void sub_10009A588(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t KeyPath;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;

  v58 = a2;
  v56 = sub_100005D40(&qword_1001C24D0);
  __chkstk_darwin(v56);
  v54 = (uint64_t *)((char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = type metadata accessor for Image.Scale(0);
  v4 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100005D40(&qword_1001C24D8);
  v7 = __chkstk_darwin(v53);
  v9 = (uint64_t *)((char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v57 = (uint64_t)&v44 - v10;
  v11 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SmallLocationText(0);
  v15 = __chkstk_darwin(v14);
  v55 = (uint64_t)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v44 - v17;
  sub_10001C590(a1, (uint64_t)v13, type metadata accessor for CurrentObservationViewAttributes);
  KeyPath = swift_getKeyPath(&unk_10017E178);
  v20 = (uint64_t *)&v18[*(int *)(v14 + 20)];
  v45 = v18;
  *v20 = KeyPath;
  v21 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  v22 = sub_10009F940((uint64_t)v13, (uint64_t)v18);
  v23 = static Alignment.center.getter(v22);
  _FrameLayout.init(width:height:alignment:)(&v59, 0x4010000000000000, 0, 0, 1, v23, v24);
  v51 = v59;
  v50 = v60;
  v49 = v61;
  v48 = v62;
  v46 = v64;
  v47 = v63;
  v25 = (uint64_t *)(a1 + *(int *)(v11 + 48));
  v26 = *v25;
  v27 = v25[1];
  swift_bridgeObjectRetain(v27);
  v44 = Image.init(systemName:)(v26, v27);
  v28 = static Color.white.getter(v44);
  v29 = swift_getKeyPath(&unk_10017DFC0);
  v30 = *(_QWORD *)(a1 + *(int *)(v11 + 52));
  v31 = swift_getKeyPath(&unk_10017DFF0);
  v32 = v52;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Image.Scale.small(_:), v52);
  v33 = swift_getKeyPath(&unk_10017E1A8);
  v34 = v54;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v54 + *(int *)(v56 + 28), v6, v32);
  *v34 = v33;
  v35 = (uint64_t)v34;
  sub_10001C5BC((uint64_t)v34, (uint64_t)v9 + *(int *)(v53 + 36), &qword_1001C24D0);
  v36 = v44;
  *v9 = v44;
  v9[1] = v29;
  v9[2] = v28;
  v9[3] = v31;
  v9[4] = v30;
  swift_retain_n(v30, 2);
  swift_retain(v36);
  swift_retain(v29);
  swift_retain(v28);
  swift_retain(v31);
  sub_100016904(v35, &qword_1001C24D0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v32);
  swift_release(v30);
  swift_release(v31);
  swift_release(v28);
  swift_release(v29);
  swift_release(v36);
  v37 = v57;
  sub_10001C660((uint64_t)v9, v57, &qword_1001C24D8);
  v38 = (uint64_t)v45;
  v39 = v55;
  sub_10001C590((uint64_t)v45, v55, type metadata accessor for SmallLocationText);
  sub_10001C5BC(v37, (uint64_t)v9, &qword_1001C24D8);
  v40 = v58;
  sub_10001C590(v39, v58, type metadata accessor for SmallLocationText);
  v41 = sub_100005D40(&qword_1001C24E0);
  v42 = v40 + *(int *)(v41 + 48);
  *(_QWORD *)v42 = 0;
  *(_BYTE *)(v42 + 8) = 1;
  *(_QWORD *)(v42 + 16) = v51;
  *(_BYTE *)(v42 + 24) = v50;
  *(_QWORD *)(v42 + 32) = v49;
  *(_BYTE *)(v42 + 40) = v48;
  v43 = v46;
  *(_QWORD *)(v42 + 48) = v47;
  *(_QWORD *)(v42 + 56) = v43;
  sub_10001C5BC((uint64_t)v9, v40 + *(int *)(v41 + 64), &qword_1001C24D8);
  sub_100016904(v37, &qword_1001C24D8);
  sub_100011894(v38, type metadata accessor for SmallLocationText);
  sub_100016904((uint64_t)v9, &qword_1001C24D8);
  sub_100011894(v39, type metadata accessor for SmallLocationText);
}

double sub_10009AA28@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t *v45;
  double result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;

  v50 = a1;
  v1 = type metadata accessor for Font.Context(0);
  v52 = *(_QWORD *)(v1 - 8);
  v53 = v1;
  __chkstk_darwin(v1);
  v51 = (_DWORD *)((char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for CurrentObservationViewAttributes(0);
  v54 = Location.name.getter();
  v55 = v4;
  v5 = sub_10001692C();
  v6 = Text.init<A>(_:)(&v54, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Color.white.getter(v6);
  v14 = Text.foregroundColor(_:)(v13, v6, v8, v12, v10);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release(v13);
  v21 = v18 & 1;
  sub_100016868(v6, v8, v12);
  swift_bridgeObjectRelease(v10);
  v22 = v48;
  v49 = *(_QWORD *)(v48 + *(int *)(v3 + 76));
  v23 = Text.font(_:)(v49, v14, v16, v21, v20);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  sub_100016868(v14, v16, v21);
  swift_bridgeObjectRelease(v20);
  v30 = Text.fontWeight(_:)(*(_QWORD *)(v22 + *(int *)(v3 + 80)), 0, v23, v25, v29, v27);
  v32 = v31;
  LOBYTE(v21) = v33;
  v35 = v34;
  sub_100016868(v23, v25, v29);
  swift_bridgeObjectRelease(v27);
  type metadata accessor for SmallLocationText(0);
  v36 = v51;
  sub_1000C5030(v51);
  v37 = Font.capHeight(in:)(v36, v49);
  v38 = (*(uint64_t (**)(_DWORD *, uint64_t))(v52 + 8))(v36, v53);
  v39 = static Alignment.center.getter(v38);
  _FrameLayout.init(width:height:alignment:)(&v54, 0, 1, *(_QWORD *)&v37, 0, v39, v40);
  v41 = v54;
  v42 = v55;
  v43 = v56;
  v44 = v57;
  v45 = v50;
  *v50 = v30;
  v45[1] = v32;
  *((_BYTE *)v45 + 16) = v21 & 1;
  v45[3] = v35;
  v45[4] = v41;
  *((_BYTE *)v45 + 40) = v42;
  v45[6] = v43;
  *((_BYTE *)v45 + 56) = v44;
  result = *(double *)&v58;
  *((_OWORD *)v45 + 4) = v58;
  return result;
}

uint64_t sub_10009AC7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v3 = sub_100005D40(&qword_1001BF4B0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C590(v1, (uint64_t)v8, v9);
  v10 = (uint64_t *)(v1 + *(int *)(type metadata accessor for SmallConditionDescriptionView(0) + 20));
  v12 = *v10;
  v11 = v10[1];
  *v5 = swift_getKeyPath(&unk_10017E148);
  v13 = sub_100005D40(&qword_1001BF3C0);
  swift_storeEnumTagMultiPayload(v5, v13, 0);
  KeyPath = swift_getKeyPath(&unk_10017E178);
  v15 = (int *)type metadata accessor for SmallConditionDescription(0);
  v16 = (uint64_t *)(a1 + v15[5]);
  *v16 = KeyPath;
  v17 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v16, v17, 0);
  sub_10001C660((uint64_t)v5, a1, &qword_1001BF4B0);
  sub_10009F940((uint64_t)v8, a1 + v15[6]);
  v18 = (_QWORD *)(a1 + v15[7]);
  *v18 = v12;
  v18[1] = v11;
  return swift_bridgeObjectRetain(v11);
}

void sub_10009AE00(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  double v59;
  void (*v60)(_DWORD *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  double v63;
  unsigned int v64;
  _DWORD *v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *KeyPath;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[3];

  v2 = v1;
  v115 = a1;
  v3 = type metadata accessor for ColorSchemeContrast(0);
  v113 = *(_QWORD *)(v3 - 8);
  v114 = v3;
  __chkstk_darwin(v3);
  v112 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100005D40(&qword_1001C2358);
  __chkstk_darwin(v109);
  v111 = (uint64_t *)((char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for WidgetRenderingMode(0);
  v106 = *(_QWORD *)(v6 - 8);
  v107 = v6;
  v7 = __chkstk_darwin(v6);
  v104 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v103 = (_DWORD *)((char *)&v91 - v9);
  v10 = sub_100005D40(&qword_1001C1680);
  __chkstk_darwin(v10);
  v116 = (uint64_t)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for Font.Context(0);
  v100 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v98 = (_DWORD *)((char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = type metadata accessor for Font.Leading(0);
  v99 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  KeyPath = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100005D40(&qword_1001C2628);
  __chkstk_darwin(v105);
  v15 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100005D40(&qword_1001C2630);
  __chkstk_darwin(v108);
  v110 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SmallConditionDescription(0);
  v18 = *(int *)(v17 + 28);
  v95 = v17;
  v19 = (_QWORD *)(v1 + v18);
  v94 = v1;
  v20 = v19[1];
  v117[0] = *v19;
  v117[1] = v20;
  v21 = sub_10001692C();
  swift_bridgeObjectRetain(v20);
  v22 = Text.init<A>(_:)(v117, &type metadata for String, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = static Color.white.getter(v22);
  v93 = Text.foregroundColor(_:)(v29, v22, v24, v28, v26);
  v31 = v30;
  v33 = v32;
  v96 = v34;
  swift_release(v29);
  v35 = v33 & 1;
  sub_100016868(v22, v24, v28);
  swift_bridgeObjectRelease(v26);
  v91 = v2 + *(int *)(v17 + 24);
  v36 = v91;
  v92 = type metadata accessor for CurrentObservationViewAttributes(0);
  v37 = *(_QWORD *)(v36 + *(int *)(v92 + 56));
  v38 = v99;
  v39 = KeyPath;
  v40 = v101;
  (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(KeyPath, enum case for Font.Leading.tight(_:), v101);
  v41 = Font.leading(_:)(v39, v37);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  v42 = v93;
  v43 = v96;
  v44 = Text.font(_:)(v41, v93, v31, v35, v96);
  v46 = v45;
  LOBYTE(v38) = v47;
  v49 = v48;
  swift_release(v41);
  sub_100016868(v42, v31, v35);
  swift_bridgeObjectRelease(v43);
  v51 = static Font.Weight.medium.getter(v50);
  v93 = Text.fontWeight(_:)(*(_QWORD *)&v51, 0, v44, v46, v38 & 1, v49);
  v99 = v52;
  LODWORD(v96) = v53;
  v101 = v54;
  sub_100016868(v44, v46, v38 & 1);
  swift_bridgeObjectRelease(v49);
  KeyPath = (char *)swift_getKeyPath(&unk_10017E2B8);
  v55 = *(int *)(v92 + 52);
  v56 = v91;
  v57 = *(_QWORD *)(v91 + v55);
  v58 = v98;
  sub_1000C5030(v98);
  v59 = Font.pointSize(in:)(v58, v57);
  v60 = *(void (**)(_DWORD *, uint64_t))(v100 + 8);
  v61 = v102;
  v60(v58, v102);
  v62 = *(_QWORD *)(v56 + v55);
  sub_1000C5030(v58);
  v63 = Font.pointSize(in:)(v58, v62);
  v60(v58, v61);
  v102 = swift_getKeyPath(&unk_10017E2E8);
  v64 = objc_msgSend((id)objc_opt_self(UIFont), "wu_systemUsesExuberatedLineHeight");
  v100 = swift_getKeyPath(&unk_10017E318);
  v65 = v103;
  sub_1000C5250(v103);
  v66 = v104;
  static WidgetRenderingMode.fullColor.getter();
  LOBYTE(v62) = static WidgetRenderingMode.== infix(_:_:)(v65, v66);
  v67 = *(void (**)(char *, uint64_t))(v106 + 8);
  v68 = v66;
  v69 = v107;
  v67(v68, v107);
  v70 = ((uint64_t (*)(_DWORD *, uint64_t))v67)(v65, v69);
  if ((v62 & 1) != 0)
    static SymbolRenderingMode.multicolor.getter(v70);
  else
    static SymbolRenderingMode.monochrome.getter(v70);
  v71 = v96 & 1;
  v72 = 2;
  if (!v64)
    v72 = 3;
  v107 = v72;
  v73 = type metadata accessor for SymbolRenderingMode(0);
  v74 = v116;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v116, 0, 1, v73);
  v75 = swift_getKeyPath(&unk_10017E020);
  v76 = v111;
  sub_10001C5BC(v74, (uint64_t)v111 + *(int *)(v109 + 28), &qword_1001C1680);
  *v76 = v75;
  sub_10001C5BC((uint64_t)v76, (uint64_t)&v15[*(int *)(v105 + 36)], &qword_1001C2358);
  v77 = v93;
  v78 = v99;
  *(_QWORD *)v15 = v93;
  *((_QWORD *)v15 + 1) = v78;
  v15[16] = v71;
  v79 = v101;
  v80 = KeyPath;
  *((_QWORD *)v15 + 3) = v101;
  *((_QWORD *)v15 + 4) = v80;
  v15[40] = 0;
  v81 = v102;
  *((_QWORD *)v15 + 6) = v102;
  *((double *)v15 + 7) = (v59 + -1.0) / v63;
  v82 = v100;
  v83 = v107;
  *((_QWORD *)v15 + 8) = v100;
  *((_QWORD *)v15 + 9) = v83;
  v15[80] = 0;
  sub_100016828(v77, v78, v71);
  swift_bridgeObjectRetain(v79);
  swift_retain(v80);
  swift_retain(v81);
  swift_retain(v82);
  sub_100016904((uint64_t)v76, &qword_1001C2358);
  sub_100016904(v74, &qword_1001C1680);
  sub_100016868(v77, v78, v71);
  swift_release(v82);
  swift_release(v81);
  swift_release(v80);
  swift_bridgeObjectRelease(v79);
  v84 = swift_getKeyPath(&unk_10017E348);
  v86 = v112;
  v85 = v113;
  v87 = v114;
  (*(void (**)(char *, _QWORD, uint64_t))(v113 + 104))(v112, enum case for ColorSchemeContrast.standard(_:), v114);
  v88 = (uint64_t)v110;
  v89 = (uint64_t *)&v110[*(int *)(v108 + 36)];
  v90 = sub_100005D40(&qword_1001C1620);
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))((char *)v89 + *(int *)(v90 + 28), v86, v87);
  *v89 = v84;
  sub_10001C5BC((uint64_t)v15, v88, &qword_1001C2628);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v87);
  sub_100016904((uint64_t)v15, &qword_1001C2628);
  sub_10001C660(v88, v115, &qword_1001C2630);
}

void sub_10009B5DC()
{
  uint64_t *v0;

  *v0 = sub_1000A7604();
  sub_100006338();
}

void sub_10009B5F8()
{
  uint64_t *v0;

  *v0 = sub_1000A7604();
  sub_100006338();
}

void sub_10009B614(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  EnvironmentValues.foregroundColor.setter(v1);
  sub_100006338();
}

void sub_10009B644()
{
  EnvironmentValues.symbolRenderingMode.getter();
  sub_100006338();
}

uint64_t sub_10009B660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100005D40(&qword_1001C1680);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C5BC(a1, (uint64_t)v4, &qword_1001C1680);
  return EnvironmentValues.symbolRenderingMode.setter(v4);
}

_QWORD *sub_10009B6E4(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  int *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  char *v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, char *, uint64_t);
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  void (*v183)(char *, char *);
  uint64_t v184;
  int *v185;
  void (*v186)(char *, char *);
  uint64_t v187;
  void (*v188)(char *, char *, uint64_t);
  uint64_t v189;
  _QWORD *v191;
  void (*v192)(char *, char *, uint64_t);
  char *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v28 = (_QWORD *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v27);
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v192 = v13;
    v194 = v12;
    v13(&a1[v8[6]], &a2[v8[6]], v12);
    v14 = v8[7];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = sub_100005D40(&qword_1001BF090);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v18(&a1[v8[8]], &a2[v8[8]], v17);
    v19 = v8[9];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = v8[10];
    v24 = &a1[v23];
    v25 = &a2[v23];
    swift_bridgeObjectRetain(v22);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v17))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v18(v24, v25, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v17);
    }
    v29 = v8[11];
    v30 = &a1[v29];
    v31 = &a2[v29];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v29], 1, v17))
    {
      v32 = sub_100005D40(&qword_1001BF098);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v18(v30, v31, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v17);
    }
    v33 = v8[12];
    v34 = &a1[v33];
    v35 = &a2[v33];
    v188 = v7;
    v189 = v6;
    v7(&a1[v33], &a2[v33], v6);
    v36 = (int *)type metadata accessor for ConditionViewModel(0);
    v37 = v36[5];
    v38 = &v34[v37];
    v196 = a2;
    v39 = &v35[v37];
    v40 = type metadata accessor for WeatherCondition(0);
    v183 = *(void (**)(char *, char *))(*(_QWORD *)(v40 - 8) + 16);
    v184 = v40;
    v183(v38, v39);
    v41 = v36[6];
    v42 = &v34[v41];
    v43 = &v35[v41];
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = v36[7];
    v46 = &v34[v45];
    v47 = &v35[v45];
    v48 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    v34[v36[8]] = v35[v36[8]];
    v34[v36[9]] = v35[v36[9]];
    v185 = v36;
    v34[v36[10]] = v35[v36[10]];
    *(_QWORD *)&a1[v8[13]] = *(_QWORD *)&a2[v8[13]];
    v49 = v8[14];
    v50 = &a1[v49];
    v51 = &a2[v49];
    v52 = type metadata accessor for CloudAltitudeKind(0);
    v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v48);
    v53(v50, v51, v52);
    v54 = v8[15];
    v55 = &a1[v54];
    v56 = &v196[v54];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v196[v54], 1, v194))
    {
      v57 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v192(v55, v56, v194);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v55, 0, 1, v194);
    }
    v58 = v8[16];
    v59 = &a1[v58];
    v60 = &v196[v58];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v196[v58], 1, v194))
    {
      v61 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      v192(v59, v60, v194);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v194);
    }
    v62 = v8[17];
    v63 = &a1[v62];
    v64 = &v196[v62];
    v65 = type metadata accessor for UVIndex(0);
    v186 = *(void (**)(char *, char *))(*(_QWORD *)(v65 - 8) + 16);
    v187 = v65;
    v186(v63, v64);
    v66 = v8[18];
    v67 = &a1[v66];
    v68 = &v196[v66];
    v69 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
    *(_QWORD *)&a1[v8[19]] = *(_QWORD *)&v196[v8[19]];
    v70 = v8[20];
    v71 = &a1[v70];
    v72 = &v196[v70];
    v73 = *((_QWORD *)v72 + 1);
    if (v73)
    {
      *(_QWORD *)v71 = *(_QWORD *)v72;
      *((_QWORD *)v71 + 1) = v73;
      v74 = *((_QWORD *)v72 + 2);
      v75 = *((_QWORD *)v72 + 3);
      v76 = v72[32];
      swift_bridgeObjectRetain(v73);
      sub_100006E58(v74, v75, v76);
      *((_QWORD *)v71 + 2) = v74;
      *((_QWORD *)v71 + 3) = v75;
      v71[32] = v76;
    }
    else
    {
      v77 = *((_OWORD *)v72 + 1);
      *(_OWORD *)v71 = *(_OWORD *)v72;
      *((_OWORD *)v71 + 1) = v77;
      v71[32] = v72[32];
    }
    v78 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
    v79 = v78[5];
    v191 = a1;
    v80 = &a1[v79];
    v81 = &v196[v79];
    v188(&a1[v79], &v196[v79], v189);
    v82 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v192(&v80[v82[5]], &v81[v82[5]], v194);
    v18(&v80[v82[6]], &v81[v82[6]], v17);
    v18(&v80[v82[7]], &v81[v82[7]], v17);
    v83 = v82[8];
    v84 = &v80[v83];
    v85 = &v81[v83];
    v188(&v80[v83], &v81[v83], v189);
    ((void (*)(char *, char *, uint64_t))v183)(&v84[v185[5]], &v85[v185[5]], v184);
    v86 = v185[6];
    v87 = &v84[v86];
    v88 = &v85[v86];
    v89 = *((_QWORD *)v88 + 1);
    *(_QWORD *)v87 = *(_QWORD *)v88;
    *((_QWORD *)v87 + 1) = v89;
    v90 = v185[7];
    v91 = &v84[v90];
    v92 = &v85[v90];
    v93 = *((_QWORD *)v92 + 1);
    *(_QWORD *)v91 = *(_QWORD *)v92;
    *((_QWORD *)v91 + 1) = v93;
    v84[v185[8]] = v85[v185[8]];
    v84[v185[9]] = v85[v185[9]];
    v84[v185[10]] = v85[v185[10]];
    v94 = v82[9];
    v95 = &v80[v94];
    v96 = &v81[v94];
    v97 = type metadata accessor for Precipitation(0);
    v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v93);
    v98(v95, v96, v97);
    *(_QWORD *)&v80[v82[10]] = *(_QWORD *)&v81[v82[10]];
    v99 = v82[11];
    v100 = &v80[v99];
    v101 = &v81[v99];
    v102 = *((_QWORD *)v101 + 1);
    *(_QWORD *)v100 = *(_QWORD *)v101;
    *((_QWORD *)v100 + 1) = v102;
    v103 = v82[12];
    v104 = &v80[v103];
    v105 = &v81[v103];
    v106 = *((_QWORD *)v105 + 1);
    *(_QWORD *)v104 = *(_QWORD *)v105;
    *((_QWORD *)v104 + 1) = v106;
    v107 = v82[13];
    v108 = &v80[v107];
    v109 = &v81[v107];
    v110 = *((_QWORD *)v109 + 1);
    *(_QWORD *)v108 = *(_QWORD *)v109;
    *((_QWORD *)v108 + 1) = v110;
    v111 = v82[14];
    v112 = &v80[v111];
    v113 = &v81[v111];
    v114 = *((_QWORD *)v113 + 1);
    *(_QWORD *)v112 = *(_QWORD *)v113;
    *((_QWORD *)v112 + 1) = v114;
    v115 = v82[15];
    v193 = &v81[v115];
    v195 = &v80[v115];
    v116 = type metadata accessor for TemperatureScaleConfiguration(0);
    v117 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 16);
    swift_bridgeObjectRetain(v102);
    swift_bridgeObjectRetain(v106);
    swift_bridgeObjectRetain(v110);
    swift_bridgeObjectRetain(v114);
    v117(v195, v193, v116);
    v118 = v82[16];
    v119 = &v80[v118];
    v120 = &v81[v118];
    v121 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v120, 1, v121))
    {
      v122 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v119, v120, v121);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v119, 0, 1, v121);
    }
    v123 = v82[17];
    v124 = &v80[v123];
    v125 = &v81[v123];
    v126 = type metadata accessor for MoonEvents(0);
    v28 = v191;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v125, 1, v126))
    {
      v127 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v124, v125, v126);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v124, 0, 1, v126);
    }
    ((void (*)(char *, char *, uint64_t))v186)(&v80[v82[18]], &v81[v82[18]], v187);
    *(_QWORD *)&v80[v82[19]] = *(_QWORD *)&v81[v82[19]];
    v128 = v78[6];
    v129 = (_QWORD *)((char *)v191 + v128);
    v130 = v196;
    v131 = &v196[v128];
    v132 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v131, 1, (uint64_t)v132))
    {
      v133 = sub_100005D40(&qword_1001BF0C0);
      memcpy(v129, v131, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    }
    else
    {
      v134 = *((_QWORD *)v131 + 1);
      *v129 = *(_QWORD *)v131;
      v129[1] = v134;
      v135 = v132[5];
      v136 = (char *)v129 + v135;
      v137 = &v131[v135];
      v138 = type metadata accessor for AttributedString(0);
      v139 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 16);
      swift_bridgeObjectRetain(v134);
      v139(v136, v137, v138);
      v140 = v132[6];
      v141 = (char *)v129 + v140;
      v142 = &v131[v140];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v131[v140], 1, v138))
      {
        v143 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
      }
      else
      {
        v139(v141, v142, v138);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v141, 0, 1, v138);
      }
      v144 = v132[7];
      v145 = (_QWORD *)((char *)v129 + v144);
      v146 = &v131[v144];
      v147 = *((_QWORD *)v146 + 1);
      *v145 = *(_QWORD *)v146;
      v145[1] = v147;
      swift_bridgeObjectRetain(v147);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v129, 0, 1, (uint64_t)v132);
      v130 = v196;
    }
    v148 = v78[7];
    v149 = (char *)v191 + v148;
    v150 = (uint64_t)v130 + v148;
    v151 = type metadata accessor for Location(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 16))(v149, v150, v151);
    v152 = v78[8];
    v153 = (_QWORD *)((char *)v191 + v152);
    v154 = (_QWORD *)((char *)v130 + v152);
    v155 = v154[1];
    *v153 = *v154;
    v153[1] = v155;
    *((_BYTE *)v191 + v78[9]) = *((_BYTE *)v130 + v78[9]);
    *((_BYTE *)v191 + v78[10]) = *((_BYTE *)v130 + v78[10]);
    v156 = v78[11];
    v157 = *(_QWORD *)((char *)v130 + v156);
    *(_QWORD *)((char *)v191 + v156) = v157;
    v158 = v78[12];
    v159 = (_QWORD *)((char *)v191 + v158);
    v160 = (_QWORD *)((char *)v130 + v158);
    v161 = v160[1];
    *v159 = *v160;
    v159[1] = v161;
    v162 = v78[13];
    v163 = *(_QWORD *)((char *)v130 + v162);
    *(_QWORD *)((char *)v191 + v162) = v163;
    v164 = v78[14];
    v165 = v130;
    v166 = *(_QWORD *)((char *)v130 + v164);
    *(_QWORD *)((char *)v191 + v164) = v166;
    v167 = v78[15];
    v168 = *(_QWORD *)((char *)v130 + v167);
    *(_QWORD *)((char *)v191 + v167) = v168;
    v169 = v78[16];
    v197 = *(_QWORD *)((char *)v130 + v169);
    *(_QWORD *)((char *)v191 + v169) = v197;
    *((_BYTE *)v191 + v78[17]) = *((_BYTE *)v130 + v78[17]);
    v170 = v78[18];
    v171 = *(_QWORD *)((char *)v130 + v170);
    *(_QWORD *)((char *)v191 + v170) = v171;
    v172 = v78[19];
    v173 = *(_QWORD *)((char *)v130 + v172);
    *(_QWORD *)((char *)v191 + v172) = v173;
    *(_QWORD *)((char *)v191 + v78[20]) = *(_QWORD *)((char *)v165 + v78[20]);
    *((_BYTE *)v191 + v78[21]) = *((_BYTE *)v165 + v78[21]);
    *((_BYTE *)v191 + v78[22]) = *((_BYTE *)v165 + v78[22]);
    *((_BYTE *)v191 + v78[23]) = *((_BYTE *)v165 + v78[23]);
    *((_BYTE *)v191 + v78[24]) = *((_BYTE *)v165 + v78[24]);
    v174 = v78[25];
    v175 = (_QWORD *)((char *)v191 + v174);
    v176 = (_QWORD *)((char *)v165 + v174);
    v177 = v176[1];
    *v175 = *v176;
    v175[1] = v177;
    *((_BYTE *)v191 + v78[26]) = *((_BYTE *)v165 + v78[26]);
    *(_QWORD *)((char *)v191 + v78[27]) = *(_QWORD *)((char *)v165 + v78[27]);
    *(_QWORD *)((char *)v191 + v78[28]) = *(_QWORD *)((char *)v165 + v78[28]);
    v178 = *(int *)(a3 + 20);
    v179 = (_QWORD *)((char *)v191 + v178);
    v180 = (_QWORD *)((char *)v165 + v178);
    v181 = v180[1];
    *v179 = *v180;
    v179[1] = v181;
    swift_bridgeObjectRetain(v155);
    swift_retain(v157);
    swift_bridgeObjectRetain(v161);
    swift_retain(v163);
    swift_retain(v166);
    swift_retain(v168);
    swift_retain(v197);
    swift_retain(v171);
    swift_retain(v173);
    swift_bridgeObjectRetain(v177);
    swift_bridgeObjectRetain(v181);
  }
  return v28;
}

double sub_10009C18C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double result;
  void (*v49)(uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;

  v3 = type metadata accessor for UUID(0);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(a1, v3);
  v5 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v6 = a1 + v5[5];
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + v5[6], v7);
  v9 = a1 + v5[7];
  v10 = sub_100005D40(&qword_1001BF090);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(a1 + v5[8], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[9] + 8));
  v12 = a1 + v5[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v12, 1, v10))
    v11(v12, v10);
  v13 = a1 + v5[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v13, 1, v10))
    v11(v13, v10);
  v14 = a1 + v5[12];
  v53 = v4;
  v54 = v3;
  v4(v14, v3);
  v15 = (int *)type metadata accessor for ConditionViewModel(0);
  v16 = v14 + v15[5];
  v17 = type metadata accessor for WeatherCondition(0);
  v49 = *(void (**)(uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v50 = v17;
  v49(v16);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[7] + 8));
  v18 = a1 + v5[14];
  v19 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = a1 + v5[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v20, 1, v7))
    v8(v20, v7);
  v21 = a1 + v5[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v21, 1, v7))
    v8(v21, v7);
  v22 = a1 + v5[17];
  v23 = type metadata accessor for UVIndex(0);
  v51 = *(void (**)(uint64_t))(*(_QWORD *)(v23 - 8) + 8);
  v52 = v23;
  v51(v22);
  v24 = a1 + v5[18];
  v25 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = a1 + v5[20];
  v27 = *(_QWORD *)(v26 + 8);
  if (v27)
  {
    swift_bridgeObjectRelease(v27);
    sub_100007458(*(_QWORD *)(v26 + 16), *(_QWORD *)(v26 + 24), *(_BYTE *)(v26 + 32));
  }
  v28 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v29 = a1 + v28[5];
  v53(v29, v54);
  v30 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v8(v29 + v30[5], v7);
  v11(v29 + v30[6], v10);
  v11(v29 + v30[7], v10);
  v31 = v29 + v30[8];
  v53(v31, v54);
  ((void (*)(uint64_t, uint64_t))v49)(v31 + v15[5], v50);
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v15[7] + 8));
  v32 = v29 + v30[9];
  v33 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[14] + 8));
  v34 = v29 + v30[15];
  v35 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
  v36 = v29 + v30[16];
  v37 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v36, 1, v37))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
  v38 = v29 + v30[17];
  v39 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, v39))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  ((void (*)(uint64_t, uint64_t))v51)(v29 + v30[18], v52);
  v40 = a1 + v28[6];
  v41 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v40, 1, (uint64_t)v41))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + 8));
    v42 = v40 + v41[5];
    v43 = type metadata accessor for AttributedString(0);
    v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8);
    v44(v42, v43);
    v45 = v40 + v41[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v45, 1, v43))
      v44(v45, v43);
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + v41[7] + 8));
  }
  v46 = a1 + v28[7];
  v47 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[8] + 8));
  swift_release(*(_QWORD *)(a1 + v28[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[12] + 8));
  swift_release(*(_QWORD *)(a1 + v28[13]));
  swift_release(*(_QWORD *)(a1 + v28[14]));
  swift_release(*(_QWORD *)(a1 + v28[15]));
  swift_release(*(_QWORD *)(a1 + v28[16]));
  swift_release(*(_QWORD *)(a1 + v28[18]));
  swift_release(*(_QWORD *)(a1 + v28[19]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[25] + 8));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10009C724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  void *v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  const void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  void (*v180)(uint64_t, uint64_t);
  uint64_t v181;
  int *v182;
  void (*v183)(uint64_t, uint64_t);
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v188;
  void (*v189)(void *, const void *, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v189 = v12;
  v191 = v11;
  v12((void *)(a1 + v7[6]), (const void *)(a2 + v7[6]), v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  v18 = v7[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v7[10];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  swift_bridgeObjectRetain(v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[11];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v26, 1, v16))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v27, (uint64_t)v28, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v16);
  }
  v30 = v7[12];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v185 = v6;
  v186 = v5;
  v6(a1 + v30, a2 + v30, v5);
  v33 = (int *)type metadata accessor for ConditionViewModel(0);
  v34 = v33[5];
  v35 = v31 + v34;
  v193 = a2;
  v36 = v32 + v34;
  v37 = type metadata accessor for WeatherCondition(0);
  v180 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
  v181 = v37;
  v180(v35, v36);
  v38 = v33[6];
  v39 = (_QWORD *)(v31 + v38);
  v40 = (_QWORD *)(v32 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = v33[7];
  v43 = (_QWORD *)(v31 + v42);
  v44 = (_QWORD *)(v32 + v42);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  *(_BYTE *)(v31 + v33[8]) = *(_BYTE *)(v32 + v33[8]);
  *(_BYTE *)(v31 + v33[9]) = *(_BYTE *)(v32 + v33[9]);
  v182 = v33;
  *(_BYTE *)(v31 + v33[10]) = *(_BYTE *)(v32 + v33[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v46 = v7[14];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for CloudAltitudeKind(0);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  v50(v47, v48, v49);
  v51 = v7[15];
  v52 = (void *)(a1 + v51);
  v53 = (const void *)(v193 + v51);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v193 + v51, 1, v191))
  {
    v54 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    v189(v52, v53, v191);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v52, 0, 1, v191);
  }
  v55 = v7[16];
  v56 = (void *)(a1 + v55);
  v57 = (const void *)(v193 + v55);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v193 + v55, 1, v191))
  {
    v58 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v189(v56, v57, v191);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v191);
  }
  v59 = v7[17];
  v60 = a1 + v59;
  v61 = v193 + v59;
  v62 = type metadata accessor for UVIndex(0);
  v183 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
  v184 = v62;
  v183(v60, v61);
  v63 = v7[18];
  v64 = a1 + v63;
  v65 = v193 + v63;
  v66 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(v193 + v7[19]);
  v67 = v7[20];
  v68 = a1 + v67;
  v69 = v193 + v67;
  v70 = *(_QWORD *)(v69 + 8);
  if (v70)
  {
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *(_QWORD *)(v68 + 8) = v70;
    v71 = *(_QWORD *)(v69 + 16);
    v72 = *(_QWORD *)(v69 + 24);
    v73 = *(_BYTE *)(v69 + 32);
    swift_bridgeObjectRetain(v70);
    sub_100006E58(v71, v72, v73);
    *(_QWORD *)(v68 + 16) = v71;
    *(_QWORD *)(v68 + 24) = v72;
    *(_BYTE *)(v68 + 32) = v73;
  }
  else
  {
    v74 = *(_OWORD *)(v69 + 16);
    *(_OWORD *)v68 = *(_OWORD *)v69;
    *(_OWORD *)(v68 + 16) = v74;
    *(_BYTE *)(v68 + 32) = *(_BYTE *)(v69 + 32);
  }
  v75 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v76 = v75[5];
  v188 = a1;
  v77 = a1 + v76;
  v78 = v193 + v76;
  v185(a1 + v76, v193 + v76, v186);
  v79 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v189((void *)(v77 + v79[5]), (const void *)(v78 + v79[5]), v191);
  v17(v77 + v79[6], v78 + v79[6], v16);
  v17(v77 + v79[7], v78 + v79[7], v16);
  v80 = v79[8];
  v81 = v77 + v80;
  v82 = v78 + v80;
  v185(v77 + v80, v78 + v80, v186);
  ((void (*)(uint64_t, uint64_t, uint64_t))v180)(v81 + v182[5], v82 + v182[5], v181);
  v83 = v182[6];
  v84 = (_QWORD *)(v81 + v83);
  v85 = (_QWORD *)(v82 + v83);
  v86 = v85[1];
  *v84 = *v85;
  v84[1] = v86;
  v87 = v182[7];
  v88 = (_QWORD *)(v81 + v87);
  v89 = (_QWORD *)(v82 + v87);
  v90 = v89[1];
  *v88 = *v89;
  v88[1] = v90;
  *(_BYTE *)(v81 + v182[8]) = *(_BYTE *)(v82 + v182[8]);
  *(_BYTE *)(v81 + v182[9]) = *(_BYTE *)(v82 + v182[9]);
  *(_BYTE *)(v81 + v182[10]) = *(_BYTE *)(v82 + v182[10]);
  v91 = v79[9];
  v92 = v77 + v91;
  v93 = v78 + v91;
  v94 = type metadata accessor for Precipitation(0);
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 16);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v90);
  v95(v92, v93, v94);
  *(_QWORD *)(v77 + v79[10]) = *(_QWORD *)(v78 + v79[10]);
  v96 = v79[11];
  v97 = (_QWORD *)(v77 + v96);
  v98 = (_QWORD *)(v78 + v96);
  v99 = v98[1];
  *v97 = *v98;
  v97[1] = v99;
  v100 = v79[12];
  v101 = (_QWORD *)(v77 + v100);
  v102 = (_QWORD *)(v78 + v100);
  v103 = v102[1];
  *v101 = *v102;
  v101[1] = v103;
  v104 = v79[13];
  v105 = (_QWORD *)(v77 + v104);
  v106 = (_QWORD *)(v78 + v104);
  v107 = v106[1];
  *v105 = *v106;
  v105[1] = v107;
  v108 = v79[14];
  v109 = (_QWORD *)(v77 + v108);
  v110 = (_QWORD *)(v78 + v108);
  v111 = v110[1];
  *v109 = *v110;
  v109[1] = v111;
  v112 = v79[15];
  v190 = v78 + v112;
  v192 = v77 + v112;
  v113 = type metadata accessor for TemperatureScaleConfiguration(0);
  v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 16);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v111);
  v114(v192, v190, v113);
  v115 = v79[16];
  v116 = (void *)(v77 + v115);
  v117 = (const void *)(v78 + v115);
  v118 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v117, 1, v118))
  {
    v119 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v118 - 8) + 16))(v116, v117, v118);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v116, 0, 1, v118);
  }
  v120 = v79[17];
  v121 = (void *)(v77 + v120);
  v122 = (const void *)(v78 + v120);
  v123 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v122, 1, v123))
  {
    v124 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v123 - 8) + 16))(v121, v122, v123);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v121, 0, 1, v123);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v183)(v77 + v79[18], v78 + v79[18], v184);
  *(_QWORD *)(v77 + v79[19]) = *(_QWORD *)(v78 + v79[19]);
  v125 = v75[6];
  v126 = (_QWORD *)(v188 + v125);
  v127 = v193;
  v128 = (_QWORD *)(v193 + v125);
  v129 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128, 1, (uint64_t)v129))
  {
    v130 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v126, v128, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
  }
  else
  {
    v131 = v128[1];
    *v126 = *v128;
    v126[1] = v131;
    v132 = v129[5];
    v133 = (char *)v126 + v132;
    v134 = (char *)v128 + v132;
    v135 = type metadata accessor for AttributedString(0);
    v136 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16);
    swift_bridgeObjectRetain(v131);
    v136(v133, v134, v135);
    v137 = v129[6];
    v138 = (char *)v126 + v137;
    v139 = (char *)v128 + v137;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128 + v137, 1, v135))
    {
      v140 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
    }
    else
    {
      v136(v138, v139, v135);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v138, 0, 1, v135);
    }
    v141 = v129[7];
    v142 = (_QWORD *)((char *)v126 + v141);
    v143 = (_QWORD *)((char *)v128 + v141);
    v144 = v143[1];
    *v142 = *v143;
    v142[1] = v144;
    swift_bridgeObjectRetain(v144);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v126, 0, 1, (uint64_t)v129);
    v127 = v193;
  }
  v145 = v75[7];
  v146 = v188 + v145;
  v147 = v127 + v145;
  v148 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 16))(v146, v147, v148);
  v149 = v75[8];
  v150 = (_QWORD *)(v188 + v149);
  v151 = (_QWORD *)(v127 + v149);
  v152 = v151[1];
  *v150 = *v151;
  v150[1] = v152;
  *(_BYTE *)(v188 + v75[9]) = *(_BYTE *)(v127 + v75[9]);
  *(_BYTE *)(v188 + v75[10]) = *(_BYTE *)(v127 + v75[10]);
  v153 = v75[11];
  v154 = *(_QWORD *)(v127 + v153);
  *(_QWORD *)(v188 + v153) = v154;
  v155 = v75[12];
  v156 = (_QWORD *)(v188 + v155);
  v157 = (_QWORD *)(v127 + v155);
  v158 = v157[1];
  *v156 = *v157;
  v156[1] = v158;
  v159 = v75[13];
  v160 = *(_QWORD *)(v127 + v159);
  *(_QWORD *)(v188 + v159) = v160;
  v161 = v75[14];
  v162 = v127;
  v163 = *(_QWORD *)(v127 + v161);
  *(_QWORD *)(v188 + v161) = v163;
  v164 = v75[15];
  v165 = *(_QWORD *)(v127 + v164);
  *(_QWORD *)(v188 + v164) = v165;
  v166 = v75[16];
  v194 = *(_QWORD *)(v127 + v166);
  *(_QWORD *)(v188 + v166) = v194;
  *(_BYTE *)(v188 + v75[17]) = *(_BYTE *)(v127 + v75[17]);
  v167 = v75[18];
  v168 = *(_QWORD *)(v127 + v167);
  *(_QWORD *)(v188 + v167) = v168;
  v169 = v75[19];
  v170 = *(_QWORD *)(v127 + v169);
  *(_QWORD *)(v188 + v169) = v170;
  *(_QWORD *)(v188 + v75[20]) = *(_QWORD *)(v162 + v75[20]);
  *(_BYTE *)(v188 + v75[21]) = *(_BYTE *)(v162 + v75[21]);
  *(_BYTE *)(v188 + v75[22]) = *(_BYTE *)(v162 + v75[22]);
  *(_BYTE *)(v188 + v75[23]) = *(_BYTE *)(v162 + v75[23]);
  *(_BYTE *)(v188 + v75[24]) = *(_BYTE *)(v162 + v75[24]);
  v171 = v75[25];
  v172 = (_QWORD *)(v188 + v171);
  v173 = (_QWORD *)(v162 + v171);
  v174 = v173[1];
  *v172 = *v173;
  v172[1] = v174;
  *(_BYTE *)(v188 + v75[26]) = *(_BYTE *)(v162 + v75[26]);
  *(_QWORD *)(v188 + v75[27]) = *(_QWORD *)(v162 + v75[27]);
  *(_QWORD *)(v188 + v75[28]) = *(_QWORD *)(v162 + v75[28]);
  v175 = *(int *)(a3 + 20);
  v176 = (_QWORD *)(v188 + v175);
  v177 = (_QWORD *)(v162 + v175);
  v178 = v177[1];
  *v176 = *v177;
  v176[1] = v178;
  swift_bridgeObjectRetain(v152);
  swift_retain(v154);
  swift_bridgeObjectRetain(v158);
  swift_retain(v160);
  swift_retain(v163);
  swift_retain(v165);
  swift_retain(v194);
  swift_retain(v168);
  swift_retain(v170);
  swift_bridgeObjectRetain(v174);
  swift_bridgeObjectRetain(v178);
  return v188;
}

uint64_t sub_10009D1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const void *v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  int *v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  void (*v167)(char *, char *, uint64_t);
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  int v182;
  int v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v240;
  void (*v241)(uint64_t, uint64_t, uint64_t);
  uint64_t v242;
  uint64_t v243;
  int *v245;
  void (*v246)(uint64_t, uint64_t);
  uint64_t v247;
  void (*v248)(void *, const void *, uint64_t);
  void (*v249)(void *, const void *, uint64_t);
  void (*v250)(char *, char *, uint64_t);
  void (*v251)(uint64_t, uint64_t, uint64_t);
  char *v252;
  uint64_t v253;

  v5 = type metadata accessor for UUID(0);
  v251 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24);
  v251(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v240 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v240 + 24);
  v11(v8, v9, v10);
  v249 = (void (*)(void *, const void *, uint64_t))v11;
  v11(a1 + v6[6], a2 + v6[6], v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  v248 = (void (*)(void *, const void *, uint64_t))v17;
  v17(a1 + v6[8], a2 + v6[8], v15);
  v18 = v6[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = v6[10];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  LODWORD(v17) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v23, 1, v15);
  v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v15);
  if ((_DWORD)v17)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v24, v25, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v24, v15);
LABEL_6:
    v27 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v248(v24, v25, v15);
LABEL_7:
  v28 = v6[11];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v28, 1, v15);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v15);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v29, v30, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v29, v15);
LABEL_12:
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  v248(v29, v30, v15);
LABEL_13:
  v34 = v6[12];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v242 = v5;
  v251(a1 + v34, a2 + v34, v5);
  v37 = (int *)type metadata accessor for ConditionViewModel(0);
  v38 = v37[5];
  v39 = v35 + v38;
  v40 = v36 + v38;
  v41 = type metadata accessor for WeatherCondition(0);
  v246 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24);
  v247 = v41;
  v246(v39, v40);
  v42 = v37[6];
  v43 = (_QWORD *)(v35 + v42);
  v44 = (_QWORD *)(v36 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = v37[7];
  v48 = (_QWORD *)(v35 + v47);
  v49 = (_QWORD *)(v36 + v47);
  *v48 = *v49;
  v50 = v49[1];
  v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  *(_BYTE *)(v35 + v37[8]) = *(_BYTE *)(v36 + v37[8]);
  *(_BYTE *)(v35 + v37[9]) = *(_BYTE *)(v36 + v37[9]);
  *(_BYTE *)(v35 + v37[10]) = *(_BYTE *)(v36 + v37[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v52 = v6[14];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 24))(v53, v54, v55);
  v56 = v6[15];
  v57 = (void *)(a1 + v56);
  v58 = (const void *)(a2 + v56);
  LODWORD(v51) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v56, 1, v10);
  v59 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v58, 1, v10);
  v245 = v37;
  if ((_DWORD)v51)
  {
    if (!v59)
    {
      (*(void (**)(void *, const void *, uint64_t))(v240 + 16))(v57, v58, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v57, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v59)
  {
    (*(void (**)(void *, uint64_t))(v240 + 8))(v57, v10);
LABEL_18:
    v60 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_19;
  }
  v249(v57, v58, v10);
LABEL_19:
  v61 = v242;
  v62 = v6[16];
  v63 = (void *)(a1 + v62);
  v64 = (const void *)(a2 + v62);
  v65 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v62, 1, v10);
  v66 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v64, 1, v10);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v240 + 16))(v63, v64, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v240 + 8))(v63, v10);
LABEL_24:
    v67 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_25;
  }
  v249(v63, v64, v10);
LABEL_25:
  v68 = v6[17];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = type metadata accessor for UVIndex(0);
  v241 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 24);
  v241(v69, v70, v71);
  v72 = v6[18];
  v73 = a1 + v72;
  v74 = a2 + v72;
  v75 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 24))(v73, v74, v75);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v76 = v6[20];
  v77 = a1 + v76;
  v78 = (__int128 *)(a2 + v76);
  v79 = *(_QWORD *)(a1 + v76 + 8);
  v80 = *(_QWORD *)(a2 + v76 + 8);
  v243 = v71;
  if (v79)
  {
    if (v80)
    {
      *(_QWORD *)v77 = *(_QWORD *)v78;
      v81 = *((_QWORD *)v78 + 1);
      *(_QWORD *)(v77 + 8) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v79);
      v82 = *((_QWORD *)v78 + 2);
      v83 = *((_QWORD *)v78 + 3);
      v84 = *((_BYTE *)v78 + 32);
      sub_100006E58(v82, v83, v84);
      v85 = *(_QWORD *)(v77 + 16);
      v86 = *(_QWORD *)(v77 + 24);
      v87 = *(_BYTE *)(v77 + 32);
      *(_QWORD *)(v77 + 16) = v82;
      *(_QWORD *)(v77 + 24) = v83;
      *(_BYTE *)(v77 + 32) = v84;
      sub_100007458(v85, v86, v87);
    }
    else
    {
      sub_100008EC4(v77);
      v92 = *((_BYTE *)v78 + 32);
      v93 = v78[1];
      *(_OWORD *)v77 = *v78;
      *(_OWORD *)(v77 + 16) = v93;
      *(_BYTE *)(v77 + 32) = v92;
    }
  }
  else if (v80)
  {
    *(_QWORD *)v77 = *(_QWORD *)v78;
    v88 = *((_QWORD *)v78 + 1);
    *(_QWORD *)(v77 + 8) = v88;
    v89 = *((_QWORD *)v78 + 2);
    v90 = *((_QWORD *)v78 + 3);
    v91 = *((_BYTE *)v78 + 32);
    swift_bridgeObjectRetain(v88);
    sub_100006E58(v89, v90, v91);
    *(_QWORD *)(v77 + 16) = v89;
    *(_QWORD *)(v77 + 24) = v90;
    *(_BYTE *)(v77 + 32) = v91;
  }
  else
  {
    v94 = *v78;
    v95 = v78[1];
    *(_BYTE *)(v77 + 32) = *((_BYTE *)v78 + 32);
    *(_OWORD *)v77 = v94;
    *(_OWORD *)(v77 + 16) = v95;
  }
  v96 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v97 = v96[5];
  v98 = a1 + v97;
  v99 = a2 + v97;
  v251(a1 + v97, a2 + v97, v61);
  v100 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v249((void *)(v98 + v100[5]), (const void *)(v99 + v100[5]), v10);
  v248((void *)(v98 + v100[6]), (const void *)(v99 + v100[6]), v15);
  v248((void *)(v98 + v100[7]), (const void *)(v99 + v100[7]), v15);
  v101 = v100[8];
  v102 = v98 + v101;
  v103 = v99 + v101;
  v251(v98 + v101, v99 + v101, v61);
  ((void (*)(uint64_t, uint64_t, uint64_t))v246)(v102 + v245[5], v103 + v245[5], v247);
  v104 = v245[6];
  v105 = (_QWORD *)(v102 + v104);
  v106 = (_QWORD *)(v103 + v104);
  *v105 = *v106;
  v107 = v106[1];
  v108 = v105[1];
  v105[1] = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108);
  v109 = v245[7];
  v110 = (_QWORD *)(v102 + v109);
  v111 = (_QWORD *)(v103 + v109);
  *v110 = *v111;
  v112 = v111[1];
  v113 = v110[1];
  v110[1] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease(v113);
  *(_BYTE *)(v102 + v245[8]) = *(_BYTE *)(v103 + v245[8]);
  *(_BYTE *)(v102 + v245[9]) = *(_BYTE *)(v103 + v245[9]);
  *(_BYTE *)(v102 + v245[10]) = *(_BYTE *)(v103 + v245[10]);
  v114 = v100[9];
  v115 = v98 + v114;
  v116 = v99 + v114;
  v117 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 24))(v115, v116, v117);
  *(_QWORD *)(v98 + v100[10]) = *(_QWORD *)(v99 + v100[10]);
  v118 = v100[11];
  v119 = (_QWORD *)(v98 + v118);
  v120 = (_QWORD *)(v99 + v118);
  *v119 = *v120;
  v121 = v120[1];
  v122 = v119[1];
  v119[1] = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  v123 = v100[12];
  v124 = (_QWORD *)(v98 + v123);
  v125 = (_QWORD *)(v99 + v123);
  *v124 = *v125;
  v126 = v125[1];
  v127 = v124[1];
  v124[1] = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  v128 = v100[13];
  v129 = (_QWORD *)(v98 + v128);
  v130 = (_QWORD *)(v99 + v128);
  *v129 = *v130;
  v131 = v130[1];
  v132 = v129[1];
  v129[1] = v131;
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRelease(v132);
  v133 = v100[14];
  v134 = (_QWORD *)(v98 + v133);
  v135 = (_QWORD *)(v99 + v133);
  *v134 = *v135;
  v136 = v135[1];
  v137 = v134[1];
  v134[1] = v136;
  swift_bridgeObjectRetain(v136);
  swift_bridgeObjectRelease(v137);
  v138 = v100[15];
  v139 = v98 + v138;
  v140 = v99 + v138;
  v141 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v100[16];
  v143 = (void *)(v98 + v142);
  v144 = (const void *)(v99 + v142);
  v145 = type metadata accessor for SunEvents(0);
  LODWORD(v113) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v145);
  v146 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145);
  if ((_DWORD)v113)
  {
    if (!v146)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v147 = *(_QWORD *)(v145 - 8);
  if (v146)
  {
    (*(void (**)(void *, uint64_t))(v147 + 8))(v143, v145);
LABEL_41:
    v148 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v147 + 24))(v143, v144, v145);
LABEL_42:
  v149 = v100[17];
  v150 = (void *)(v98 + v149);
  v151 = (const void *)(v99 + v149);
  v152 = type metadata accessor for MoonEvents(0);
  v153 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, v152);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v152);
  if (v153)
  {
    if (!v154)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v152 - 8) + 16))(v150, v151, v152);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v150, 0, 1, v152);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v155 = *(_QWORD *)(v152 - 8);
  if (v154)
  {
    (*(void (**)(void *, uint64_t))(v155 + 8))(v150, v152);
LABEL_47:
    v156 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v155 + 24))(v150, v151, v152);
LABEL_48:
  v241(v98 + v100[18], v99 + v100[18], v243);
  *(_QWORD *)(v98 + v100[19]) = *(_QWORD *)(v99 + v100[19]);
  v157 = v96[6];
  v158 = (_QWORD *)(a1 + v157);
  v159 = (_QWORD *)(a2 + v157);
  v160 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v161 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, (uint64_t)v160);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, (uint64_t)v160);
  if (!v161)
  {
    if (v162)
    {
      sub_100011894((uint64_t)v158, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_54;
    }
    *v158 = *v159;
    v173 = v159[1];
    v174 = v158[1];
    v158[1] = v173;
    swift_bridgeObjectRetain(v173);
    swift_bridgeObjectRelease(v174);
    v175 = v160[5];
    v176 = (char *)v158 + v175;
    v177 = (char *)v159 + v175;
    v178 = type metadata accessor for AttributedString(0);
    v253 = *(_QWORD *)(v178 - 8);
    v250 = *(void (**)(char *, char *, uint64_t))(v253 + 24);
    v250(v176, v177, v178);
    v179 = v160[6];
    v180 = (char *)v158 + v179;
    v181 = (char *)v159 + v179;
    v182 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158 + v179, 1, v178);
    v183 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v181, 1, v178);
    if (v182)
    {
      if (!v183)
      {
        (*(void (**)(char *, char *, uint64_t))(v253 + 16))(v180, v181, v178);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v180, 0, 1, v178);
LABEL_65:
        v189 = v160[7];
        v190 = (_QWORD *)((char *)v158 + v189);
        v191 = (_QWORD *)((char *)v159 + v189);
        *v190 = *v191;
        v192 = v191[1];
        v193 = v190[1];
        v190[1] = v192;
        swift_bridgeObjectRetain(v192);
        swift_bridgeObjectRelease(v193);
        goto LABEL_66;
      }
    }
    else
    {
      if (!v183)
      {
        v250(v180, v181, v178);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v253 + 8))(v180, v178);
    }
    v188 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
    goto LABEL_65;
  }
  if (v162)
  {
LABEL_54:
    v172 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
    goto LABEL_66;
  }
  *v158 = *v159;
  v163 = v159[1];
  v158[1] = v163;
  v164 = v160[5];
  v165 = (char *)v158 + v164;
  v252 = (char *)v159 + v164;
  v166 = type metadata accessor for AttributedString(0);
  v167 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 16);
  swift_bridgeObjectRetain(v163);
  v167(v165, v252, v166);
  v168 = v160[6];
  v169 = (char *)v158 + v168;
  v170 = (char *)v159 + v168;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159 + v168, 1, v166))
  {
    v171 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
  }
  else
  {
    v167(v169, v170, v166);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v169, 0, 1, v166);
  }
  v184 = v160[7];
  v185 = (_QWORD *)((char *)v158 + v184);
  v186 = (_QWORD *)((char *)v159 + v184);
  *v185 = *v186;
  v187 = v186[1];
  v185[1] = v187;
  swift_bridgeObjectRetain(v187);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v158, 0, 1, (uint64_t)v160);
LABEL_66:
  v194 = v96[7];
  v195 = a1 + v194;
  v196 = a2 + v194;
  v197 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v197 - 8) + 24))(v195, v196, v197);
  v198 = v96[8];
  v199 = (_QWORD *)(a1 + v198);
  v200 = (_QWORD *)(a2 + v198);
  *v199 = *v200;
  v201 = v200[1];
  v202 = v199[1];
  v199[1] = v201;
  swift_bridgeObjectRetain(v201);
  swift_bridgeObjectRelease(v202);
  *(_BYTE *)(a1 + v96[9]) = *(_BYTE *)(a2 + v96[9]);
  *(_BYTE *)(a1 + v96[10]) = *(_BYTE *)(a2 + v96[10]);
  v203 = v96[11];
  v204 = *(_QWORD *)(a1 + v203);
  v205 = *(_QWORD *)(a2 + v203);
  *(_QWORD *)(a1 + v203) = v205;
  swift_retain(v205);
  swift_release(v204);
  v206 = v96[12];
  v207 = (_QWORD *)(a1 + v206);
  v208 = (_QWORD *)(a2 + v206);
  *v207 = *v208;
  v209 = v208[1];
  v210 = v207[1];
  v207[1] = v209;
  swift_bridgeObjectRetain(v209);
  swift_bridgeObjectRelease(v210);
  v211 = v96[13];
  v212 = *(_QWORD *)(a2 + v211);
  v213 = *(_QWORD *)(a1 + v211);
  *(_QWORD *)(a1 + v211) = v212;
  swift_retain(v212);
  swift_release(v213);
  v214 = v96[14];
  v215 = *(_QWORD *)(a2 + v214);
  v216 = *(_QWORD *)(a1 + v214);
  *(_QWORD *)(a1 + v214) = v215;
  swift_retain(v215);
  swift_release(v216);
  v217 = v96[15];
  v218 = *(_QWORD *)(a2 + v217);
  v219 = *(_QWORD *)(a1 + v217);
  *(_QWORD *)(a1 + v217) = v218;
  swift_retain(v218);
  swift_release(v219);
  v220 = v96[16];
  v221 = *(_QWORD *)(a2 + v220);
  v222 = *(_QWORD *)(a1 + v220);
  *(_QWORD *)(a1 + v220) = v221;
  swift_retain(v221);
  swift_release(v222);
  *(_BYTE *)(a1 + v96[17]) = *(_BYTE *)(a2 + v96[17]);
  v223 = v96[18];
  v224 = *(_QWORD *)(a2 + v223);
  v225 = *(_QWORD *)(a1 + v223);
  *(_QWORD *)(a1 + v223) = v224;
  swift_retain(v224);
  swift_release(v225);
  v226 = v96[19];
  v227 = *(_QWORD *)(a2 + v226);
  v228 = *(_QWORD *)(a1 + v226);
  *(_QWORD *)(a1 + v226) = v227;
  swift_retain(v227);
  swift_release(v228);
  *(_QWORD *)(a1 + v96[20]) = *(_QWORD *)(a2 + v96[20]);
  *(_BYTE *)(a1 + v96[21]) = *(_BYTE *)(a2 + v96[21]);
  *(_BYTE *)(a1 + v96[22]) = *(_BYTE *)(a2 + v96[22]);
  *(_BYTE *)(a1 + v96[23]) = *(_BYTE *)(a2 + v96[23]);
  *(_BYTE *)(a1 + v96[24]) = *(_BYTE *)(a2 + v96[24]);
  v229 = v96[25];
  v230 = (_QWORD *)(a1 + v229);
  v231 = (_QWORD *)(a2 + v229);
  *v230 = *v231;
  v232 = v231[1];
  v233 = v230[1];
  v230[1] = v232;
  swift_bridgeObjectRetain(v232);
  swift_bridgeObjectRelease(v233);
  *(_BYTE *)(a1 + v96[26]) = *(_BYTE *)(a2 + v96[26]);
  *(_QWORD *)(a1 + v96[27]) = *(_QWORD *)(a2 + v96[27]);
  *(_QWORD *)(a1 + v96[28]) = *(_QWORD *)(a2 + v96[28]);
  v234 = *(int *)(a3 + 20);
  v235 = (_QWORD *)(a1 + v234);
  v236 = (_QWORD *)(a2 + v234);
  *v235 = *v236;
  v237 = v236[1];
  v238 = v235[1];
  v235[1] = v237;
  swift_bridgeObjectRetain(v237);
  swift_bridgeObjectRelease(v238);
  return a1;
}

uint64_t sub_10009E0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  _OWORD *v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v111 = v11;
  v12(a1 + v7[6], a2 + v7[6], v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
  v18 = v7[10];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v18, 1, v16))
  {
    v21 = sub_100005D40(&qword_1001BF098);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v19, (uint64_t)v20, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v19, 0, 1, v16);
  }
  v22 = v7[11];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v107 = v17;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v22, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[12];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v108 = v5;
  v109 = v6;
  v6(a1 + v26, a2 + v26, v5);
  v29 = (int *)type metadata accessor for ConditionViewModel(0);
  v30 = v29[5];
  v31 = v27 + v30;
  v32 = v28 + v30;
  v33 = type metadata accessor for WeatherCondition(0);
  v103 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
  v104 = v33;
  v103(v31, v32);
  *(_OWORD *)(v27 + v29[6]) = *(_OWORD *)(v28 + v29[6]);
  *(_OWORD *)(v27 + v29[7]) = *(_OWORD *)(v28 + v29[7]);
  *(_BYTE *)(v27 + v29[8]) = *(_BYTE *)(v28 + v29[8]);
  *(_BYTE *)(v27 + v29[9]) = *(_BYTE *)(v28 + v29[9]);
  *(_BYTE *)(v27 + v29[10]) = *(_BYTE *)(v28 + v29[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v34 = v7[14];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  v38 = v7[15];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v38, 1, v111))
  {
    v41 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v39, (uint64_t)v40, v111);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v111);
  }
  v42 = v7[16];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v42, 1, v111))
  {
    v45 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v43, (uint64_t)v44, v111);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v43, 0, 1, v111);
  }
  v46 = v7[17];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for UVIndex(0);
  v105 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 32);
  v106 = v49;
  v105(v47, v48);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  v54 = v7[20];
  v55 = a1 + v54;
  v56 = a2 + v54;
  *(_BYTE *)(v55 + 32) = *(_BYTE *)(v56 + 32);
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  v58 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v59 = v58[5];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v109(a1 + v59, a2 + v59, v108);
  v62 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v12(v60 + v62[5], v61 + v62[5], v111);
  v107(v60 + v62[6], v61 + v62[6], v16);
  v107(v60 + v62[7], v61 + v62[7], v16);
  v63 = v62[8];
  v64 = v60 + v63;
  v65 = v61 + v63;
  v109(v60 + v63, v61 + v63, v108);
  ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v64 + v29[5], v65 + v29[5], v104);
  *(_OWORD *)(v64 + v29[6]) = *(_OWORD *)(v65 + v29[6]);
  *(_OWORD *)(v64 + v29[7]) = *(_OWORD *)(v65 + v29[7]);
  *(_BYTE *)(v64 + v29[8]) = *(_BYTE *)(v65 + v29[8]);
  *(_BYTE *)(v64 + v29[9]) = *(_BYTE *)(v65 + v29[9]);
  *(_BYTE *)(v64 + v29[10]) = *(_BYTE *)(v65 + v29[10]);
  v66 = v62[9];
  v67 = v60 + v66;
  v68 = v61 + v66;
  v69 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
  *(_QWORD *)(v60 + v62[10]) = *(_QWORD *)(v61 + v62[10]);
  *(_OWORD *)(v60 + v62[11]) = *(_OWORD *)(v61 + v62[11]);
  *(_OWORD *)(v60 + v62[12]) = *(_OWORD *)(v61 + v62[12]);
  *(_OWORD *)(v60 + v62[13]) = *(_OWORD *)(v61 + v62[13]);
  *(_OWORD *)(v60 + v62[14]) = *(_OWORD *)(v61 + v62[14]);
  v70 = v62[15];
  v71 = v60 + v70;
  v72 = v61 + v70;
  v73 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
  v74 = v62[16];
  v75 = (void *)(v60 + v74);
  v76 = (const void *)(v61 + v74);
  v77 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v76, 1, v77))
  {
    v78 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v75, 0, 1, v77);
  }
  v79 = v62[17];
  v80 = (void *)(v60 + v79);
  v81 = (const void *)(v61 + v79);
  v82 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v81, 1, v82))
  {
    v83 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v80, v81, v82);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v80, 0, 1, v82);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v105)(v60 + v62[18], v61 + v62[18], v106);
  *(_QWORD *)(v60 + v62[19]) = *(_QWORD *)(v61 + v62[19]);
  v84 = v58[6];
  v85 = (_OWORD *)(a1 + v84);
  v86 = (_OWORD *)(a2 + v84);
  v87 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86, 1, (uint64_t)v87))
  {
    v88 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    *v85 = *v86;
    v89 = v87[5];
    v90 = (char *)v85 + v89;
    v91 = (char *)v86 + v89;
    v92 = type metadata accessor for AttributedString(0);
    v93 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32);
    v93(v90, v91, v92);
    v94 = v87[6];
    v95 = (char *)v85 + v94;
    v96 = (char *)v86 + v94;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86 + v94, 1, v92))
    {
      v97 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      v93(v95, v96, v92);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v92);
    }
    *(_OWORD *)((char *)v85 + v87[7]) = *(_OWORD *)((char *)v86 + v87[7]);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v85, 0, 1, (uint64_t)v87);
  }
  v98 = v58[7];
  v99 = a1 + v98;
  v100 = a2 + v98;
  v101 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v99, v100, v101);
  *(_OWORD *)(a1 + v58[8]) = *(_OWORD *)(a2 + v58[8]);
  *(_BYTE *)(a1 + v58[9]) = *(_BYTE *)(a2 + v58[9]);
  *(_BYTE *)(a1 + v58[10]) = *(_BYTE *)(a2 + v58[10]);
  *(_QWORD *)(a1 + v58[11]) = *(_QWORD *)(a2 + v58[11]);
  *(_OWORD *)(a1 + v58[12]) = *(_OWORD *)(a2 + v58[12]);
  *(_QWORD *)(a1 + v58[13]) = *(_QWORD *)(a2 + v58[13]);
  *(_QWORD *)(a1 + v58[14]) = *(_QWORD *)(a2 + v58[14]);
  *(_QWORD *)(a1 + v58[15]) = *(_QWORD *)(a2 + v58[15]);
  *(_QWORD *)(a1 + v58[16]) = *(_QWORD *)(a2 + v58[16]);
  *(_BYTE *)(a1 + v58[17]) = *(_BYTE *)(a2 + v58[17]);
  *(_QWORD *)(a1 + v58[18]) = *(_QWORD *)(a2 + v58[18]);
  *(_QWORD *)(a1 + v58[19]) = *(_QWORD *)(a2 + v58[19]);
  *(_QWORD *)(a1 + v58[20]) = *(_QWORD *)(a2 + v58[20]);
  *(_BYTE *)(a1 + v58[21]) = *(_BYTE *)(a2 + v58[21]);
  *(_BYTE *)(a1 + v58[22]) = *(_BYTE *)(a2 + v58[22]);
  *(_BYTE *)(a1 + v58[23]) = *(_BYTE *)(a2 + v58[23]);
  *(_BYTE *)(a1 + v58[24]) = *(_BYTE *)(a2 + v58[24]);
  *(_OWORD *)(a1 + v58[25]) = *(_OWORD *)(a2 + v58[25]);
  *(_BYTE *)(a1 + v58[26]) = *(_BYTE *)(a2 + v58[26]);
  *(_QWORD *)(a1 + v58[27]) = *(_QWORD *)(a2 + v58[27]);
  *(_QWORD *)(a1 + v58[28]) = *(_QWORD *)(a2 + v58[28]);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10009E9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const void *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  int *v161;
  int v162;
  int v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v235;
  void (*v236)(uint64_t, uint64_t, uint64_t);
  uint64_t v237;
  uint64_t v238;
  int *v240;
  void (*v241)(uint64_t, uint64_t);
  uint64_t v242;
  void (*v243)(void *, const void *, uint64_t);
  void (*v244)(void *, const void *, uint64_t);
  void (*v245)(char *, char *, uint64_t);
  void (*v246)(uint64_t, uint64_t, uint64_t);
  uint64_t v247;

  v5 = type metadata accessor for UUID(0);
  v246 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40);
  v246(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v235 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v235 + 40);
  v11(v8, v9, v10);
  v244 = (void (*)(void *, const void *, uint64_t))v11;
  v11(a1 + v6[6], a2 + v6[6], v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40);
  v17(v13, v14, v15);
  v243 = (void (*)(void *, const void *, uint64_t))v17;
  v17(a1 + v6[8], a2 + v6[8], v15);
  v18 = v6[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = v6[10];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  LODWORD(v17) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v24, 1, v15);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v15);
  if ((_DWORD)v17)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v25, v26, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v25, v15);
LABEL_6:
    v28 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  v243(v25, v26, v15);
LABEL_7:
  v29 = v6[11];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v29, 1, v15);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v15);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v30, v31, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v30, v15);
LABEL_12:
    v34 = sub_100005D40(&qword_1001BF098);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  v243(v30, v31, v15);
LABEL_13:
  v35 = v6[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v237 = v5;
  v246(a1 + v35, a2 + v35, v5);
  v38 = (int *)type metadata accessor for ConditionViewModel(0);
  v39 = v38[5];
  v40 = v36 + v39;
  v41 = v37 + v39;
  v42 = type metadata accessor for WeatherCondition(0);
  v241 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40);
  v242 = v42;
  v241(v40, v41);
  v43 = v38[6];
  v44 = (_QWORD *)(v36 + v43);
  v45 = (uint64_t *)(v37 + v43);
  v47 = *v45;
  v46 = v45[1];
  v48 = v44[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease(v48);
  v49 = v38[7];
  v50 = (_QWORD *)(v36 + v49);
  v51 = (uint64_t *)(v37 + v49);
  v53 = *v51;
  v52 = v51[1];
  v54 = v50[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease(v54);
  *(_BYTE *)(v36 + v38[8]) = *(_BYTE *)(v37 + v38[8]);
  *(_BYTE *)(v36 + v38[9]) = *(_BYTE *)(v37 + v38[9]);
  *(_BYTE *)(v36 + v38[10]) = *(_BYTE *)(v37 + v38[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v55 = v6[14];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  v59 = v6[15];
  v60 = (void *)(a1 + v59);
  v61 = (const void *)(a2 + v59);
  LODWORD(v40) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v59, 1, v10);
  v62 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v61, 1, v10);
  v240 = v38;
  if ((_DWORD)v40)
  {
    if (!v62)
    {
      (*(void (**)(void *, const void *, uint64_t))(v235 + 32))(v60, v61, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v60, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v62)
  {
    (*(void (**)(void *, uint64_t))(v235 + 8))(v60, v10);
LABEL_18:
    v63 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_19;
  }
  v244(v60, v61, v10);
LABEL_19:
  v64 = v237;
  v65 = v6[16];
  v66 = (void *)(a1 + v65);
  v67 = (const void *)(a2 + v65);
  v68 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v65, 1, v10);
  v69 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(void *, const void *, uint64_t))(v235 + 32))(v66, v67, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v69)
  {
    (*(void (**)(void *, uint64_t))(v235 + 8))(v66, v10);
LABEL_24:
    v70 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_25;
  }
  v244(v66, v67, v10);
LABEL_25:
  v71 = v6[17];
  v72 = a1 + v71;
  v73 = a2 + v71;
  v74 = type metadata accessor for UVIndex(0);
  v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 40);
  v75(v72, v73, v74);
  v76 = v6[18];
  v77 = a1 + v76;
  v78 = a2 + v76;
  v79 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 40))(v77, v78, v79);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v80 = v6[20];
  v81 = a1 + v80;
  v82 = a2 + v80;
  v83 = *(_QWORD *)(a1 + v80 + 8);
  v236 = v75;
  v238 = v74;
  if (v83)
  {
    v84 = *(_QWORD *)(v82 + 8);
    if (v84)
    {
      *(_QWORD *)v81 = *(_QWORD *)v82;
      *(_QWORD *)(v81 + 8) = v84;
      swift_bridgeObjectRelease(v83);
      v85 = *(_BYTE *)(v82 + 32);
      v86 = *(_QWORD *)(v81 + 16);
      v87 = *(_QWORD *)(v81 + 24);
      v88 = *(_BYTE *)(v81 + 32);
      *(_OWORD *)(v81 + 16) = *(_OWORD *)(v82 + 16);
      *(_BYTE *)(v81 + 32) = v85;
      sub_100007458(v86, v87, v88);
      goto LABEL_30;
    }
    sub_100008EC4(v81);
  }
  v89 = *(_OWORD *)(v82 + 16);
  *(_OWORD *)v81 = *(_OWORD *)v82;
  *(_OWORD *)(v81 + 16) = v89;
  *(_BYTE *)(v81 + 32) = *(_BYTE *)(v82 + 32);
LABEL_30:
  v90 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v91 = v90[5];
  v92 = a1 + v91;
  v93 = a2 + v91;
  v246(a1 + v91, a2 + v91, v64);
  v94 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v244((void *)(v92 + v94[5]), (const void *)(v93 + v94[5]), v10);
  v243((void *)(v92 + v94[6]), (const void *)(v93 + v94[6]), v15);
  v243((void *)(v92 + v94[7]), (const void *)(v93 + v94[7]), v15);
  v95 = v94[8];
  v96 = v92 + v95;
  v97 = v93 + v95;
  v246(v92 + v95, v93 + v95, v64);
  ((void (*)(uint64_t, uint64_t, uint64_t))v241)(v96 + v240[5], v97 + v240[5], v242);
  v98 = v240[6];
  v99 = (_QWORD *)(v96 + v98);
  v100 = (uint64_t *)(v97 + v98);
  v102 = *v100;
  v101 = v100[1];
  v103 = v99[1];
  *v99 = v102;
  v99[1] = v101;
  swift_bridgeObjectRelease(v103);
  v104 = v240[7];
  v105 = (_QWORD *)(v96 + v104);
  v106 = (uint64_t *)(v97 + v104);
  v108 = *v106;
  v107 = v106[1];
  v109 = v105[1];
  *v105 = v108;
  v105[1] = v107;
  swift_bridgeObjectRelease(v109);
  *(_BYTE *)(v96 + v240[8]) = *(_BYTE *)(v97 + v240[8]);
  *(_BYTE *)(v96 + v240[9]) = *(_BYTE *)(v97 + v240[9]);
  *(_BYTE *)(v96 + v240[10]) = *(_BYTE *)(v97 + v240[10]);
  v110 = v94[9];
  v111 = v92 + v110;
  v112 = v93 + v110;
  v113 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 40))(v111, v112, v113);
  *(_QWORD *)(v92 + v94[10]) = *(_QWORD *)(v93 + v94[10]);
  v114 = v94[11];
  v115 = (_QWORD *)(v92 + v114);
  v116 = (uint64_t *)(v93 + v114);
  v118 = *v116;
  v117 = v116[1];
  v119 = v115[1];
  *v115 = v118;
  v115[1] = v117;
  swift_bridgeObjectRelease(v119);
  v120 = v94[12];
  v121 = (_QWORD *)(v92 + v120);
  v122 = (uint64_t *)(v93 + v120);
  v124 = *v122;
  v123 = v122[1];
  v125 = v121[1];
  *v121 = v124;
  v121[1] = v123;
  swift_bridgeObjectRelease(v125);
  v126 = v94[13];
  v127 = (_QWORD *)(v92 + v126);
  v128 = (uint64_t *)(v93 + v126);
  v130 = *v128;
  v129 = v128[1];
  v131 = v127[1];
  *v127 = v130;
  v127[1] = v129;
  swift_bridgeObjectRelease(v131);
  v132 = v94[14];
  v133 = (_QWORD *)(v92 + v132);
  v134 = (uint64_t *)(v93 + v132);
  v136 = *v134;
  v135 = v134[1];
  v137 = v133[1];
  *v133 = v136;
  v133[1] = v135;
  swift_bridgeObjectRelease(v137);
  v138 = v94[15];
  v139 = v92 + v138;
  v140 = v93 + v138;
  v141 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 40))(v139, v140, v141);
  v142 = v94[16];
  v143 = (void *)(v92 + v142);
  v144 = (const void *)(v93 + v142);
  v145 = type metadata accessor for SunEvents(0);
  v146 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v145);
  v147 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145);
  if (v146)
  {
    if (!v147)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v148 = *(_QWORD *)(v145 - 8);
  if (v147)
  {
    (*(void (**)(void *, uint64_t))(v148 + 8))(v143, v145);
LABEL_35:
    v149 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(void *, const void *, uint64_t))(v148 + 40))(v143, v144, v145);
LABEL_36:
  v150 = v94[17];
  v151 = (void *)(v92 + v150);
  v152 = (const void *)(v93 + v150);
  v153 = type metadata accessor for MoonEvents(0);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v153);
  v155 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v152, 1, v153);
  if (v154)
  {
    if (!v155)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v153 - 8) + 32))(v151, v152, v153);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v151, 0, 1, v153);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v156 = *(_QWORD *)(v153 - 8);
  if (v155)
  {
    (*(void (**)(void *, uint64_t))(v156 + 8))(v151, v153);
LABEL_41:
    v157 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v156 + 40))(v151, v152, v153);
LABEL_42:
  v236(v92 + v94[18], v93 + v94[18], v238);
  *(_QWORD *)(v92 + v94[19]) = *(_QWORD *)(v93 + v94[19]);
  v158 = v90[6];
  v159 = (_QWORD *)(a1 + v158);
  v160 = (_QWORD *)(a2 + v158);
  v161 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, (uint64_t)v161);
  v163 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v160, 1, (uint64_t)v161);
  if (!v162)
  {
    if (v163)
    {
      sub_100011894((uint64_t)v159, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_48;
    }
    v174 = v160[1];
    v175 = v159[1];
    *v159 = *v160;
    v159[1] = v174;
    swift_bridgeObjectRelease(v175);
    v176 = v161[5];
    v177 = (char *)v159 + v176;
    v178 = (char *)v160 + v176;
    v179 = type metadata accessor for AttributedString(0);
    v247 = *(_QWORD *)(v179 - 8);
    v245 = *(void (**)(char *, char *, uint64_t))(v247 + 40);
    v245(v177, v178, v179);
    v180 = v161[6];
    v181 = (char *)v159 + v180;
    v182 = (char *)v160 + v180;
    v183 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159 + v180, 1, v179);
    v184 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v182, 1, v179);
    if (v183)
    {
      if (!v184)
      {
        (*(void (**)(char *, char *, uint64_t))(v247 + 32))(v181, v182, v179);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v181, 0, 1, v179);
LABEL_63:
        v186 = v161[7];
        v187 = (_QWORD *)((char *)v159 + v186);
        v188 = (_QWORD *)((char *)v160 + v186);
        v190 = *v188;
        v189 = v188[1];
        v191 = v187[1];
        *v187 = v190;
        v187[1] = v189;
        swift_bridgeObjectRelease(v191);
        goto LABEL_64;
      }
    }
    else
    {
      if (!v184)
      {
        v245(v181, v182, v179);
        goto LABEL_63;
      }
      (*(void (**)(char *, uint64_t))(v247 + 8))(v181, v179);
    }
    v185 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
    goto LABEL_63;
  }
  if (v163)
  {
LABEL_48:
    v173 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    goto LABEL_64;
  }
  *(_OWORD *)v159 = *(_OWORD *)v160;
  v164 = v161[5];
  v165 = (char *)v159 + v164;
  v166 = (char *)v160 + v164;
  v167 = type metadata accessor for AttributedString(0);
  v168 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 32);
  v168(v165, v166, v167);
  v169 = v161[6];
  v170 = (char *)v159 + v169;
  v171 = (char *)v160 + v169;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v160 + v169, 1, v167))
  {
    v172 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
  }
  else
  {
    v168(v170, v171, v167);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v170, 0, 1, v167);
  }
  *(_OWORD *)((char *)v159 + v161[7]) = *(_OWORD *)((char *)v160 + v161[7]);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v159, 0, 1, (uint64_t)v161);
LABEL_64:
  v192 = v90[7];
  v193 = a1 + v192;
  v194 = a2 + v192;
  v195 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v195 - 8) + 40))(v193, v194, v195);
  v196 = v90[8];
  v197 = (_QWORD *)(a1 + v196);
  v198 = (uint64_t *)(a2 + v196);
  v200 = *v198;
  v199 = v198[1];
  v201 = v197[1];
  *v197 = v200;
  v197[1] = v199;
  swift_bridgeObjectRelease(v201);
  *(_BYTE *)(a1 + v90[9]) = *(_BYTE *)(a2 + v90[9]);
  *(_BYTE *)(a1 + v90[10]) = *(_BYTE *)(a2 + v90[10]);
  v202 = v90[11];
  v203 = *(_QWORD *)(a1 + v202);
  *(_QWORD *)(a1 + v202) = *(_QWORD *)(a2 + v202);
  swift_release(v203);
  v204 = v90[12];
  v205 = (_QWORD *)(a1 + v204);
  v206 = (uint64_t *)(a2 + v204);
  v208 = *v206;
  v207 = v206[1];
  v209 = v205[1];
  *v205 = v208;
  v205[1] = v207;
  swift_bridgeObjectRelease(v209);
  v210 = v90[13];
  v211 = *(_QWORD *)(a1 + v210);
  *(_QWORD *)(a1 + v210) = *(_QWORD *)(a2 + v210);
  swift_release(v211);
  v212 = v90[14];
  v213 = *(_QWORD *)(a1 + v212);
  *(_QWORD *)(a1 + v212) = *(_QWORD *)(a2 + v212);
  swift_release(v213);
  v214 = v90[15];
  v215 = *(_QWORD *)(a1 + v214);
  *(_QWORD *)(a1 + v214) = *(_QWORD *)(a2 + v214);
  swift_release(v215);
  v216 = v90[16];
  v217 = *(_QWORD *)(a1 + v216);
  *(_QWORD *)(a1 + v216) = *(_QWORD *)(a2 + v216);
  swift_release(v217);
  *(_BYTE *)(a1 + v90[17]) = *(_BYTE *)(a2 + v90[17]);
  v218 = v90[18];
  v219 = *(_QWORD *)(a1 + v218);
  *(_QWORD *)(a1 + v218) = *(_QWORD *)(a2 + v218);
  swift_release(v219);
  v220 = v90[19];
  v221 = *(_QWORD *)(a1 + v220);
  *(_QWORD *)(a1 + v220) = *(_QWORD *)(a2 + v220);
  swift_release(v221);
  *(_QWORD *)(a1 + v90[20]) = *(_QWORD *)(a2 + v90[20]);
  *(_BYTE *)(a1 + v90[21]) = *(_BYTE *)(a2 + v90[21]);
  *(_BYTE *)(a1 + v90[22]) = *(_BYTE *)(a2 + v90[22]);
  *(_BYTE *)(a1 + v90[23]) = *(_BYTE *)(a2 + v90[23]);
  *(_BYTE *)(a1 + v90[24]) = *(_BYTE *)(a2 + v90[24]);
  v222 = v90[25];
  v223 = (_QWORD *)(a1 + v222);
  v224 = (uint64_t *)(a2 + v222);
  v226 = *v224;
  v225 = v224[1];
  v227 = v223[1];
  *v223 = v226;
  v223[1] = v225;
  swift_bridgeObjectRelease(v227);
  *(_BYTE *)(a1 + v90[26]) = *(_BYTE *)(a2 + v90[26]);
  *(_QWORD *)(a1 + v90[27]) = *(_QWORD *)(a2 + v90[27]);
  *(_QWORD *)(a1 + v90[28]) = *(_QWORD *)(a2 + v90[28]);
  v228 = *(int *)(a3 + 20);
  v229 = (_QWORD *)(a1 + v228);
  v230 = (uint64_t *)(a2 + v228);
  v232 = *v230;
  v231 = v230[1];
  v233 = v229[1];
  *v229 = v232;
  v229[1] = v231;
  swift_bridgeObjectRelease(v233);
  return a1;
}

uint64_t sub_10009F730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009F73C);
}

void sub_10009F73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100016B00();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    sub_100016B50(a1, a2, v6);
  }
  else
  {
    sub_1000A74A8(a1 + *(int *)(a3 + 20));
    sub_1000443A4();
  }
}

uint64_t sub_10009F794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009F7A0);
}

void sub_10009F7A0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100083154();
  sub_100016B00();
  sub_10001C6D0();
  if (v3)
  {
    sub_1000A75F8();
    sub_100016B44(v4, v5, v6, v7);
  }
  else
  {
    *(_QWORD *)(v1 + *(int *)(v2 + 20) + 8) = (v0 - 1);
    sub_1000443A4();
  }
}

uint64_t sub_10009F7EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for CurrentObservationViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10017E070;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10009F85C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009F868);
}

uint64_t sub_10009F868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100016B00();
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, v4);
}

uint64_t sub_10009F898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009F8A4);
}

uint64_t sub_10009F8A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100016B00();
  sub_1000A75F8();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, v1, v2, v3);
}

void sub_10009F8D4()
{
  sub_100016A54(&qword_1001C2490, &qword_1001C2498);
}

uint64_t sub_10009F900(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F7F0, 1);
}

uint64_t sub_10009F910(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F7C8, 1);
}

uint64_t type metadata accessor for SmallConditionDescription(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C2540, (uint64_t)&nominal type descriptor for SmallConditionDescription);
}

uint64_t sub_10009F940(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CurrentObservationViewAttributes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SmallLocationText(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C25D8, (uint64_t)&nominal type descriptor for SmallLocationText);
}

_QWORD *sub_10009F9A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  int *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  int *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  void (*v159)(char *, char *, uint64_t);
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  void (*v204)(char *, char *);
  uint64_t v205;
  void (*v206)(char *, char *, uint64_t);
  int *v207;
  void (*v208)(char *, char *);
  uint64_t v209;
  void (*v210)(char *, char *, uint64_t);
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  void (*v215)(char *, char *, uint64_t);
  char *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = *(int *)(a3 + 20);
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = v16;
      v21 = v18;
      v22 = 1;
    }
    else
    {
      v23 = *v17;
      *v16 = *v17;
      swift_retain(v23);
      v20 = v16;
      v21 = v18;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    v212 = a3;
    v24 = *(int *)(a3 + 24);
    v214 = a1;
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = type metadata accessor for UUID(0);
    v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
    v28(v25, v26, v27);
    v29 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v30 = v29[5];
    v31 = &v25[v30];
    v32 = &v26[v30];
    v33 = type metadata accessor for Date(0);
    v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
    v34(v31, v32, v33);
    v215 = v34;
    v217 = v33;
    v34(&v25[v29[6]], &v26[v29[6]], v33);
    v35 = v29[7];
    v36 = &v25[v35];
    v37 = &v26[v35];
    v38 = sub_100005D40(&qword_1001BF090);
    v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
    v39(v36, v37, v38);
    v39(&v25[v29[8]], &v26[v29[8]], v38);
    v40 = v29[9];
    v41 = &v25[v40];
    v42 = &v26[v40];
    v43 = *((_QWORD *)v42 + 1);
    *(_QWORD *)v41 = *(_QWORD *)v42;
    *((_QWORD *)v41 + 1) = v43;
    v44 = v29[10];
    v45 = &v25[v44];
    v46 = &v26[v44];
    swift_bridgeObjectRetain(v43);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v46, 1, v38))
    {
      v47 = sub_100005D40(&qword_1001BF098);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      v39(v45, v46, v38);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v45, 0, 1, v38);
    }
    v48 = v29[11];
    v49 = &v25[v48];
    v50 = &v26[v48];
    v206 = v39;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v26[v48], 1, v38))
    {
      v51 = sub_100005D40(&qword_1001BF098);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      v39(v49, v50, v38);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v49, 0, 1, v38);
    }
    v52 = v29[12];
    v53 = &v25[v52];
    v54 = &v26[v52];
    v210 = v28;
    v211 = v27;
    v28(&v25[v52], &v26[v52], v27);
    v55 = (int *)type metadata accessor for ConditionViewModel(0);
    v56 = v55[5];
    v57 = &v53[v56];
    v58 = &v54[v56];
    v59 = type metadata accessor for WeatherCondition(0);
    v204 = *(void (**)(char *, char *))(*(_QWORD *)(v59 - 8) + 16);
    v205 = v59;
    v204(v57, v58);
    v60 = v55[6];
    v61 = &v53[v60];
    v62 = &v54[v60];
    v63 = *((_QWORD *)v62 + 1);
    *(_QWORD *)v61 = *(_QWORD *)v62;
    *((_QWORD *)v61 + 1) = v63;
    v64 = v55[7];
    v65 = &v53[v64];
    v66 = &v54[v64];
    v67 = *((_QWORD *)v66 + 1);
    *(_QWORD *)v65 = *(_QWORD *)v66;
    *((_QWORD *)v65 + 1) = v67;
    v53[v55[8]] = v54[v55[8]];
    v53[v55[9]] = v54[v55[9]];
    v207 = v55;
    v53[v55[10]] = v54[v55[10]];
    *(_QWORD *)&v25[v29[13]] = *(_QWORD *)&v26[v29[13]];
    v68 = v29[14];
    v69 = &v25[v68];
    v70 = &v26[v68];
    v219 = v26;
    v220 = v25;
    v71 = type metadata accessor for CloudAltitudeKind(0);
    v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v67);
    v72(v69, v70, v71);
    v73 = v29[15];
    v74 = &v220[v73];
    v75 = &v219[v73];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v219[v73], 1, v217))
    {
      v76 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    }
    else
    {
      v215(v74, v75, v217);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v74, 0, 1, v217);
    }
    v77 = v29[16];
    v78 = &v220[v77];
    v79 = &v219[v77];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v219[v77], 1, v217))
    {
      v80 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      v215(v78, v79, v217);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v78, 0, 1, v217);
    }
    v81 = v29[17];
    v82 = &v220[v81];
    v83 = &v219[v81];
    v84 = type metadata accessor for UVIndex(0);
    v208 = *(void (**)(char *, char *))(*(_QWORD *)(v84 - 8) + 16);
    v209 = v84;
    v208(v82, v83);
    v85 = v29[18];
    v86 = &v220[v85];
    v87 = &v219[v85];
    v88 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v86, v87, v88);
    *(_QWORD *)&v220[v29[19]] = *(_QWORD *)&v219[v29[19]];
    v89 = v29[20];
    v90 = &v220[v89];
    v91 = &v219[v89];
    v92 = *((_QWORD *)v91 + 1);
    v213 = a2;
    if (v92)
    {
      *(_QWORD *)v90 = *(_QWORD *)v91;
      *((_QWORD *)v90 + 1) = v92;
      v93 = *((_QWORD *)v91 + 2);
      v94 = *((_QWORD *)v91 + 3);
      v95 = v91[32];
      swift_bridgeObjectRetain(v92);
      sub_100006E58(v93, v94, v95);
      *((_QWORD *)v90 + 2) = v93;
      *((_QWORD *)v90 + 3) = v94;
      v90[32] = v95;
    }
    else
    {
      v96 = *((_OWORD *)v91 + 1);
      *(_OWORD *)v90 = *(_OWORD *)v91;
      *((_OWORD *)v90 + 1) = v96;
      v90[32] = v91[32];
    }
    v97 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
    v98 = v97[5];
    v99 = &v220[v98];
    v100 = &v219[v98];
    v210(&v220[v98], &v219[v98], v211);
    v101 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v215(&v99[v101[5]], &v100[v101[5]], v217);
    v206(&v99[v101[6]], &v100[v101[6]], v38);
    v206(&v99[v101[7]], &v100[v101[7]], v38);
    v102 = v101[8];
    v103 = &v99[v102];
    v104 = &v100[v102];
    v210(&v99[v102], &v100[v102], v211);
    ((void (*)(char *, char *, uint64_t))v204)(&v103[v55[5]], &v104[v55[5]], v205);
    v105 = v55[6];
    v106 = &v103[v105];
    v107 = &v104[v105];
    v108 = *((_QWORD *)v107 + 1);
    *(_QWORD *)v106 = *(_QWORD *)v107;
    *((_QWORD *)v106 + 1) = v108;
    v109 = v55[7];
    v110 = &v103[v109];
    v111 = &v104[v109];
    v112 = *((_QWORD *)v111 + 1);
    *(_QWORD *)v110 = *(_QWORD *)v111;
    *((_QWORD *)v110 + 1) = v112;
    v103[v207[8]] = v104[v207[8]];
    v103[v207[9]] = v104[v207[9]];
    v103[v207[10]] = v104[v207[10]];
    v113 = v101[9];
    v114 = &v99[v113];
    v115 = &v100[v113];
    v116 = type metadata accessor for Precipitation(0);
    v117 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 16);
    swift_bridgeObjectRetain(v108);
    swift_bridgeObjectRetain(v112);
    v117(v114, v115, v116);
    *(_QWORD *)&v99[v101[10]] = *(_QWORD *)&v100[v101[10]];
    v118 = v101[11];
    v119 = &v99[v118];
    v120 = &v100[v118];
    v121 = *((_QWORD *)v120 + 1);
    *(_QWORD *)v119 = *(_QWORD *)v120;
    *((_QWORD *)v119 + 1) = v121;
    v122 = v101[12];
    v123 = &v99[v122];
    v124 = &v100[v122];
    v125 = *((_QWORD *)v124 + 1);
    *(_QWORD *)v123 = *(_QWORD *)v124;
    *((_QWORD *)v123 + 1) = v125;
    v126 = v101[13];
    v127 = &v99[v126];
    v128 = &v100[v126];
    v129 = *((_QWORD *)v128 + 1);
    *(_QWORD *)v127 = *(_QWORD *)v128;
    *((_QWORD *)v127 + 1) = v129;
    v130 = v101[14];
    v131 = &v99[v130];
    v132 = &v100[v130];
    v133 = *((_QWORD *)v132 + 1);
    *(_QWORD *)v131 = *(_QWORD *)v132;
    *((_QWORD *)v131 + 1) = v133;
    v134 = v101[15];
    v216 = &v100[v134];
    v218 = &v99[v134];
    v135 = type metadata accessor for TemperatureScaleConfiguration(0);
    v136 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16);
    swift_bridgeObjectRetain(v121);
    swift_bridgeObjectRetain(v125);
    swift_bridgeObjectRetain(v129);
    swift_bridgeObjectRetain(v133);
    v136(v218, v216, v135);
    v137 = v101[16];
    v138 = &v99[v137];
    v139 = &v100[v137];
    v140 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v139, 1, v140))
    {
      v141 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v138, 0, 1, v140);
    }
    v142 = v101[17];
    v143 = &v99[v142];
    v144 = &v100[v142];
    v145 = type metadata accessor for MoonEvents(0);
    v146 = v220;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145))
    {
      v147 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
    }
    ((void (*)(char *, char *, uint64_t))v208)(&v99[v101[18]], &v100[v101[18]], v209);
    *(_QWORD *)&v99[v101[19]] = *(_QWORD *)&v100[v101[19]];
    v148 = v97[6];
    v149 = &v220[v148];
    v150 = v219;
    v151 = &v219[v148];
    v152 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, (uint64_t)v152))
    {
      v153 = sub_100005D40(&qword_1001BF0C0);
      memcpy(v149, v151, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
    }
    else
    {
      v154 = *((_QWORD *)v151 + 1);
      *(_QWORD *)v149 = *(_QWORD *)v151;
      *((_QWORD *)v149 + 1) = v154;
      v155 = v152[5];
      v156 = &v149[v155];
      v157 = &v151[v155];
      v158 = type metadata accessor for AttributedString(0);
      v159 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v158 - 8) + 16);
      swift_bridgeObjectRetain(v154);
      v159(v156, v157, v158);
      v160 = v152[6];
      v161 = &v149[v160];
      v162 = &v151[v160];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v151[v160], 1, v158))
      {
        v163 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
      }
      else
      {
        v159(v161, v162, v158);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v161, 0, 1, v158);
      }
      v164 = v152[7];
      v165 = &v149[v164];
      v166 = &v151[v164];
      v167 = *((_QWORD *)v166 + 1);
      *(_QWORD *)v165 = *(_QWORD *)v166;
      *((_QWORD *)v165 + 1) = v167;
      swift_bridgeObjectRetain(v167);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v149, 0, 1, (uint64_t)v152);
      v150 = v219;
      v146 = v220;
    }
    v168 = v97[7];
    v169 = &v146[v168];
    v170 = &v150[v168];
    v171 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v171 - 8) + 16))(v169, v170, v171);
    v172 = v97[8];
    v173 = &v146[v172];
    v174 = &v150[v172];
    v175 = *((_QWORD *)v174 + 1);
    *(_QWORD *)v173 = *(_QWORD *)v174;
    *((_QWORD *)v173 + 1) = v175;
    v146[v97[9]] = v150[v97[9]];
    v146[v97[10]] = v150[v97[10]];
    v176 = v97[11];
    v177 = *(_QWORD *)&v150[v176];
    *(_QWORD *)&v146[v176] = v177;
    v178 = v97[12];
    v179 = &v146[v178];
    v180 = &v150[v178];
    v181 = *((_QWORD *)v180 + 1);
    *(_QWORD *)v179 = *(_QWORD *)v180;
    *((_QWORD *)v179 + 1) = v181;
    v182 = v97[13];
    v183 = *(_QWORD *)&v150[v182];
    *(_QWORD *)&v146[v182] = v183;
    v184 = v97[14];
    v185 = v150;
    v186 = *(_QWORD *)&v150[v184];
    *(_QWORD *)&v146[v184] = v186;
    v187 = v97[15];
    v188 = *(_QWORD *)&v150[v187];
    *(_QWORD *)&v146[v187] = v188;
    v189 = v97[16];
    v221 = *(_QWORD *)&v150[v189];
    *(_QWORD *)&v146[v189] = v221;
    v146[v97[17]] = v150[v97[17]];
    v190 = v97[18];
    v191 = *(_QWORD *)&v150[v190];
    *(_QWORD *)&v146[v190] = v191;
    v192 = v97[19];
    v193 = *(_QWORD *)&v150[v192];
    *(_QWORD *)&v146[v192] = v193;
    *(_QWORD *)&v146[v97[20]] = *(_QWORD *)&v185[v97[20]];
    v146[v97[21]] = v185[v97[21]];
    v146[v97[22]] = v185[v97[22]];
    v146[v97[23]] = v185[v97[23]];
    v146[v97[24]] = v185[v97[24]];
    v194 = v97[25];
    v195 = &v146[v194];
    v196 = &v185[v194];
    v197 = v146;
    v198 = *((_QWORD *)v196 + 1);
    *(_QWORD *)v195 = *(_QWORD *)v196;
    *((_QWORD *)v195 + 1) = v198;
    v197[v97[26]] = v185[v97[26]];
    *(_QWORD *)&v197[v97[27]] = *(_QWORD *)&v185[v97[27]];
    *(_QWORD *)&v197[v97[28]] = *(_QWORD *)&v185[v97[28]];
    v199 = *(int *)(v212 + 28);
    v13 = v214;
    v200 = (_QWORD *)((char *)v214 + v199);
    v201 = (_QWORD *)((char *)v213 + v199);
    v202 = v201[1];
    *v200 = *v201;
    v200[1] = v202;
    swift_bridgeObjectRetain(v175);
    swift_retain(v177);
    swift_bridgeObjectRetain(v181);
    swift_retain(v183);
    swift_retain(v186);
    swift_retain(v188);
    swift_retain(v221);
    swift_retain(v191);
    swift_retain(v193);
    swift_bridgeObjectRetain(v198);
    swift_bridgeObjectRetain(v202);
  }
  return v13;
}

double sub_1000A0558(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  int *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int *v35;
  char *v36;
  int *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  double result;
  void (*v56)(char *);
  uint64_t v57;
  void (*v58)(char *);
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  _QWORD *v62;

  v4 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v61 = a2;
  v9 = (char *)a1 + *(int *)(a2 + 24);
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v12 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v13 = &v9[v12[5]];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  v15(&v9[v12[6]], v14);
  v16 = &v9[v12[7]];
  v17 = sub_100005D40(&qword_1001BF090);
  v18 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(v16, v17);
  v18(&v9[v12[8]], v17);
  swift_bridgeObjectRelease(*(_QWORD *)&v9[v12[9] + 8]);
  v19 = (uint64_t)&v9[v12[10]];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v19, 1, v17))
    v18((char *)v19, v17);
  v62 = a1;
  v20 = (uint64_t)&v9[v12[11]];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v20, 1, v17))
    v18((char *)v20, v17);
  v21 = &v9[v12[12]];
  v60 = v11;
  v11(v21, v10);
  v22 = (int *)type metadata accessor for ConditionViewModel(0);
  v23 = &v21[v22[5]];
  v24 = type metadata accessor for WeatherCondition(0);
  v56 = *(void (**)(char *))(*(_QWORD *)(v24 - 8) + 8);
  v57 = v24;
  v56(v23);
  swift_bridgeObjectRelease(*(_QWORD *)&v21[v22[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v21[v22[7] + 8]);
  v25 = &v9[v12[14]];
  v26 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v27 = (uint64_t)&v9[v12[15]];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v27, 1, v14))
    v15((char *)v27, v14);
  v28 = (uint64_t)&v9[v12[16]];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v28, 1, v14))
    v15((char *)v28, v14);
  v29 = &v9[v12[17]];
  v30 = type metadata accessor for UVIndex(0);
  v58 = *(void (**)(char *))(*(_QWORD *)(v30 - 8) + 8);
  v59 = v30;
  v58(v29);
  v31 = &v9[v12[18]];
  v32 = type metadata accessor for Wind(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  v33 = &v9[v12[20]];
  v34 = *((_QWORD *)v33 + 1);
  if (v34)
  {
    swift_bridgeObjectRelease(v34);
    sub_100007458(*((_QWORD *)v33 + 2), *((_QWORD *)v33 + 3), v33[32]);
  }
  v35 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v36 = &v9[v35[5]];
  v60(v36, v10);
  v37 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v15(&v36[v37[5]], v14);
  v18(&v36[v37[6]], v17);
  v18(&v36[v37[7]], v17);
  v38 = &v36[v37[8]];
  v60(v38, v10);
  ((void (*)(char *, uint64_t))v56)(&v38[v22[5]], v57);
  swift_bridgeObjectRelease(*(_QWORD *)&v38[v22[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v38[v22[7] + 8]);
  v39 = &v36[v37[9]];
  v40 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
  swift_bridgeObjectRelease(*(_QWORD *)&v36[v37[11] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v36[v37[12] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v36[v37[13] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v36[v37[14] + 8]);
  v41 = &v36[v37[15]];
  v42 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
  v43 = (uint64_t)&v36[v37[16]];
  v44 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v43, 1, v44))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
  v45 = (uint64_t)&v36[v37[17]];
  v46 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v45, 1, v46))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v45, v46);
  ((void (*)(char *, uint64_t))v58)(&v36[v37[18]], v59);
  v47 = (uint64_t)&v9[v35[6]];
  v48 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v47, 1, (uint64_t)v48))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v47 + 8));
    v49 = v47 + v48[5];
    v50 = type metadata accessor for AttributedString(0);
    v51 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8);
    v51(v49, v50);
    v52 = v47 + v48[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v52, 1, v50))
      v51(v52, v50);
    swift_bridgeObjectRelease(*(_QWORD *)(v47 + v48[7] + 8));
  }
  v53 = &v9[v35[7]];
  v54 = type metadata accessor for Location(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v53, v54);
  swift_bridgeObjectRelease(*(_QWORD *)&v9[v35[8] + 8]);
  swift_release(*(_QWORD *)&v9[v35[11]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v9[v35[12] + 8]);
  swift_release(*(_QWORD *)&v9[v35[13]]);
  swift_release(*(_QWORD *)&v9[v35[14]]);
  swift_release(*(_QWORD *)&v9[v35[15]]);
  swift_release(*(_QWORD *)&v9[v35[16]]);
  swift_release(*(_QWORD *)&v9[v35[18]]);
  swift_release(*(_QWORD *)&v9[v35[19]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v9[v35[25] + 8]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)((char *)v62 + *(int *)(v61 + 28) + 8)).n128_u64[0];
  return result;
}

_QWORD *sub_1000A0B9C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  int *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  int *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t);
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  void (*v155)(char *, char *, uint64_t);
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  void (*v200)(char *, char *);
  uint64_t v201;
  int *v202;
  void (*v203)(char *, char *);
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  void (*v208)(char *, char *, uint64_t);
  uint64_t v209;
  void (*v210)(char *, char *);
  char *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  char *v215;
  uint64_t v216;

  v6 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v205 = a3;
  v21 = *(int *)(a3 + 24);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for UUID(0);
  v210 = *(void (**)(char *, char *))(*(_QWORD *)(v24 - 8) + 16);
  v212 = v24;
  v210(v22, v23);
  v25 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v26 = v25[5];
  v27 = &v22[v26];
  v28 = &v23[v26];
  v29 = type metadata accessor for Date(0);
  v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
  v30(v27, v28, v29);
  v208 = v30;
  v209 = v29;
  v30(&v22[v25[6]], &v23[v25[6]], v29);
  v31 = v25[7];
  v32 = &v22[v31];
  v33 = &v23[v31];
  v34 = sub_100005D40(&qword_1001BF090);
  v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
  v35(v32, v33, v34);
  v35(&v22[v25[8]], &v23[v25[8]], v34);
  v36 = v25[9];
  v37 = &v22[v36];
  v38 = &v23[v36];
  v39 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *((_QWORD *)v37 + 1) = v39;
  v40 = v25[10];
  v41 = &v22[v40];
  v42 = &v23[v40];
  swift_bridgeObjectRetain(v39);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v42, 1, v34))
  {
    v43 = sub_100005D40(&qword_1001BF098);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v35(v41, v42, v34);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v41, 0, 1, v34);
  }
  v44 = v25[11];
  v45 = &v22[v44];
  v46 = &v23[v44];
  v207 = a1;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v23[v44], 1, v34))
  {
    v47 = sub_100005D40(&qword_1001BF098);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v35(v45, v46, v34);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v45, 0, 1, v34);
  }
  v48 = v25[12];
  v49 = &v22[v48];
  v50 = &v23[v48];
  ((void (*)(char *, char *, uint64_t))v210)(&v22[v48], &v23[v48], v212);
  v51 = (int *)type metadata accessor for ConditionViewModel(0);
  v52 = v51[5];
  v53 = &v49[v52];
  v215 = v23;
  v54 = &v50[v52];
  v55 = type metadata accessor for WeatherCondition(0);
  v200 = *(void (**)(char *, char *))(*(_QWORD *)(v55 - 8) + 16);
  v201 = v55;
  v200(v53, v54);
  v56 = v51[6];
  v57 = &v49[v56];
  v58 = &v50[v56];
  v59 = *((_QWORD *)v58 + 1);
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *((_QWORD *)v57 + 1) = v59;
  v60 = v51[7];
  v61 = &v49[v60];
  v62 = &v50[v60];
  v63 = *((_QWORD *)v62 + 1);
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *((_QWORD *)v61 + 1) = v63;
  v49[v51[8]] = v50[v51[8]];
  v49[v51[9]] = v50[v51[9]];
  v202 = v51;
  v49[v51[10]] = v50[v51[10]];
  *(_QWORD *)&v22[v25[13]] = *(_QWORD *)&v215[v25[13]];
  v64 = v25[14];
  v65 = &v22[v64];
  v66 = &v215[v64];
  v214 = v22;
  v67 = type metadata accessor for CloudAltitudeKind(0);
  v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v63);
  v68(v65, v66, v67);
  v69 = v25[15];
  v70 = &v214[v69];
  v71 = &v215[v69];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v215[v69], 1, v209))
  {
    v72 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
  }
  else
  {
    v208(v70, v71, v209);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v70, 0, 1, v209);
  }
  v73 = v25[16];
  v74 = &v214[v73];
  v75 = &v215[v73];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v215[v73], 1, v209))
  {
    v76 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
  }
  else
  {
    v208(v74, v75, v209);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v74, 0, 1, v209);
  }
  v77 = v25[17];
  v78 = &v214[v77];
  v79 = &v215[v77];
  v80 = type metadata accessor for UVIndex(0);
  v203 = *(void (**)(char *, char *))(*(_QWORD *)(v80 - 8) + 16);
  v204 = v80;
  v203(v78, v79);
  v81 = v25[18];
  v82 = &v214[v81];
  v83 = &v215[v81];
  v84 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v82, v83, v84);
  *(_QWORD *)&v214[v25[19]] = *(_QWORD *)&v215[v25[19]];
  v85 = v25[20];
  v86 = &v214[v85];
  v87 = &v215[v85];
  v88 = *((_QWORD *)v87 + 1);
  v206 = a2;
  if (v88)
  {
    *(_QWORD *)v86 = *(_QWORD *)v87;
    *((_QWORD *)v86 + 1) = v88;
    v89 = *((_QWORD *)v87 + 2);
    v90 = *((_QWORD *)v87 + 3);
    v91 = v87[32];
    swift_bridgeObjectRetain(v88);
    sub_100006E58(v89, v90, v91);
    *((_QWORD *)v86 + 2) = v89;
    *((_QWORD *)v86 + 3) = v90;
    v86[32] = v91;
  }
  else
  {
    v92 = *((_OWORD *)v87 + 1);
    *(_OWORD *)v86 = *(_OWORD *)v87;
    *((_OWORD *)v86 + 1) = v92;
    v86[32] = v87[32];
  }
  v93 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v94 = v93[5];
  v95 = &v214[v94];
  v96 = &v215[v94];
  ((void (*)(char *, char *, uint64_t))v210)(&v214[v94], &v215[v94], v212);
  v97 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v208(&v95[v97[5]], &v96[v97[5]], v209);
  v35(&v95[v97[6]], &v96[v97[6]], v34);
  v35(&v95[v97[7]], &v96[v97[7]], v34);
  v98 = v97[8];
  v99 = &v95[v98];
  v100 = &v96[v98];
  ((void (*)(char *, char *, uint64_t))v210)(&v95[v98], &v96[v98], v212);
  ((void (*)(char *, char *, uint64_t))v200)(&v99[v202[5]], &v100[v202[5]], v201);
  v101 = v202[6];
  v102 = &v99[v101];
  v103 = &v100[v101];
  v104 = *((_QWORD *)v103 + 1);
  *(_QWORD *)v102 = *(_QWORD *)v103;
  *((_QWORD *)v102 + 1) = v104;
  v105 = v202[7];
  v106 = &v99[v105];
  v107 = &v100[v105];
  v108 = *((_QWORD *)v107 + 1);
  *(_QWORD *)v106 = *(_QWORD *)v107;
  *((_QWORD *)v106 + 1) = v108;
  v99[v202[8]] = v100[v202[8]];
  v99[v202[9]] = v100[v202[9]];
  v99[v202[10]] = v100[v202[10]];
  v109 = v97[9];
  v110 = &v95[v109];
  v111 = &v96[v109];
  v112 = type metadata accessor for Precipitation(0);
  v113 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 16);
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRetain(v108);
  v113(v110, v111, v112);
  *(_QWORD *)&v95[v97[10]] = *(_QWORD *)&v96[v97[10]];
  v114 = v97[11];
  v115 = &v95[v114];
  v116 = &v96[v114];
  v117 = *((_QWORD *)v116 + 1);
  *(_QWORD *)v115 = *(_QWORD *)v116;
  *((_QWORD *)v115 + 1) = v117;
  v118 = v97[12];
  v119 = &v95[v118];
  v120 = &v96[v118];
  v121 = *((_QWORD *)v120 + 1);
  *(_QWORD *)v119 = *(_QWORD *)v120;
  *((_QWORD *)v119 + 1) = v121;
  v122 = v97[13];
  v123 = &v95[v122];
  v124 = &v96[v122];
  v125 = *((_QWORD *)v124 + 1);
  *(_QWORD *)v123 = *(_QWORD *)v124;
  *((_QWORD *)v123 + 1) = v125;
  v126 = v97[14];
  v127 = &v95[v126];
  v128 = &v96[v126];
  v129 = *((_QWORD *)v128 + 1);
  *(_QWORD *)v127 = *(_QWORD *)v128;
  *((_QWORD *)v127 + 1) = v129;
  v130 = v97[15];
  v211 = &v96[v130];
  v213 = &v95[v130];
  v131 = type metadata accessor for TemperatureScaleConfiguration(0);
  v132 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16);
  swift_bridgeObjectRetain(v117);
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRetain(v125);
  swift_bridgeObjectRetain(v129);
  v132(v213, v211, v131);
  v133 = v97[16];
  v134 = &v95[v133];
  v135 = &v96[v133];
  v136 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v135, 1, v136))
  {
    v137 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 16))(v134, v135, v136);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v134, 0, 1, v136);
  }
  v138 = v97[17];
  v139 = &v95[v138];
  v140 = &v96[v138];
  v141 = type metadata accessor for MoonEvents(0);
  v142 = v215;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v140, 1, v141))
  {
    v143 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 16))(v139, v140, v141);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v139, 0, 1, v141);
  }
  ((void (*)(char *, char *, uint64_t))v203)(&v95[v97[18]], &v96[v97[18]], v204);
  *(_QWORD *)&v95[v97[19]] = *(_QWORD *)&v96[v97[19]];
  v144 = v93[6];
  v145 = v214;
  v146 = &v214[v144];
  v147 = &v215[v144];
  v148 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v147, 1, (uint64_t)v148))
  {
    v149 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
  }
  else
  {
    v150 = *((_QWORD *)v147 + 1);
    *(_QWORD *)v146 = *(_QWORD *)v147;
    *((_QWORD *)v146 + 1) = v150;
    v151 = v148[5];
    v152 = &v146[v151];
    v153 = &v147[v151];
    v154 = type metadata accessor for AttributedString(0);
    v155 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v154 - 8) + 16);
    swift_bridgeObjectRetain(v150);
    v155(v152, v153, v154);
    v156 = v148[6];
    v157 = &v146[v156];
    v158 = &v147[v156];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v147[v156], 1, v154))
    {
      v159 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    }
    else
    {
      v155(v157, v158, v154);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v157, 0, 1, v154);
    }
    v160 = v148[7];
    v161 = &v146[v160];
    v162 = &v147[v160];
    v163 = *((_QWORD *)v162 + 1);
    *(_QWORD *)v161 = *(_QWORD *)v162;
    *((_QWORD *)v161 + 1) = v163;
    swift_bridgeObjectRetain(v163);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v146, 0, 1, (uint64_t)v148);
    v145 = v214;
    v142 = v215;
  }
  v164 = v93[7];
  v165 = &v145[v164];
  v166 = &v142[v164];
  v167 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 16))(v165, v166, v167);
  v168 = v93[8];
  v169 = &v145[v168];
  v170 = &v142[v168];
  v171 = *((_QWORD *)v170 + 1);
  *(_QWORD *)v169 = *(_QWORD *)v170;
  *((_QWORD *)v169 + 1) = v171;
  v145[v93[9]] = v142[v93[9]];
  v145[v93[10]] = v142[v93[10]];
  v172 = v93[11];
  v173 = *(_QWORD *)&v142[v172];
  *(_QWORD *)&v145[v172] = v173;
  v174 = v93[12];
  v175 = &v145[v174];
  v176 = &v142[v174];
  v177 = *((_QWORD *)v176 + 1);
  *(_QWORD *)v175 = *(_QWORD *)v176;
  *((_QWORD *)v175 + 1) = v177;
  v178 = v93[13];
  v179 = v142;
  v180 = *(_QWORD *)&v142[v178];
  *(_QWORD *)&v145[v178] = v180;
  v181 = v93[14];
  v182 = v145;
  v183 = *(_QWORD *)&v179[v181];
  *(_QWORD *)&v145[v181] = v183;
  v184 = v93[15];
  v185 = *(_QWORD *)&v179[v184];
  *(_QWORD *)&v145[v184] = v185;
  v186 = v93[16];
  v216 = *(_QWORD *)&v179[v186];
  *(_QWORD *)&v145[v186] = v216;
  v145[v93[17]] = v179[v93[17]];
  v187 = v93[18];
  v188 = *(_QWORD *)&v179[v187];
  *(_QWORD *)&v145[v187] = v188;
  v189 = v93[19];
  v190 = *(_QWORD *)&v179[v189];
  *(_QWORD *)&v145[v189] = v190;
  *(_QWORD *)&v145[v93[20]] = *(_QWORD *)&v179[v93[20]];
  v145[v93[21]] = v179[v93[21]];
  v145[v93[22]] = v179[v93[22]];
  v145[v93[23]] = v179[v93[23]];
  v145[v93[24]] = v179[v93[24]];
  v191 = v93[25];
  v192 = &v145[v191];
  v193 = &v179[v191];
  v194 = *((_QWORD *)v193 + 1);
  *(_QWORD *)v192 = *(_QWORD *)v193;
  *((_QWORD *)v192 + 1) = v194;
  v182[v93[26]] = v179[v93[26]];
  *(_QWORD *)&v182[v93[27]] = *(_QWORD *)&v179[v93[27]];
  *(_QWORD *)&v182[v93[28]] = *(_QWORD *)&v179[v93[28]];
  v195 = *(int *)(v205 + 28);
  v196 = (_QWORD *)((char *)v207 + v195);
  v197 = (_QWORD *)((char *)v206 + v195);
  v198 = v197[1];
  *v196 = *v197;
  v196[1] = v198;
  swift_bridgeObjectRetain(v171);
  swift_retain(v173);
  swift_bridgeObjectRetain(v177);
  swift_retain(v180);
  swift_retain(v183);
  swift_retain(v185);
  swift_retain(v216);
  swift_retain(v188);
  swift_retain(v190);
  swift_bridgeObjectRetain(v194);
  swift_bridgeObjectRetain(v198);
  return v207;
}

_QWORD *sub_1000A1728(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  int *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  int *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  int *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  int v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  int *v179;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  void (*v186)(char *, char *, uint64_t);
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  int v202;
  int v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v260;
  void (*v261)(char *, char *, uint64_t);
  uint64_t v262;
  uint64_t v263;
  void (*v264)(char *, char *);
  uint64_t v265;
  void (*v266)(char *, char *);
  int *v267;
  uint64_t v268;
  _QWORD *v269;
  void (*v270)(char *, char *, uint64_t);
  void (*v271)(char *, char *, uint64_t);
  uint64_t v272;
  void (*v273)(char *, char *, uint64_t);
  uint64_t v274;
  char *v275;
  uint64_t v276;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BF3C0);
    v6 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = *(int *)(a3 + 20);
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_100016904((uint64_t)a1 + v12, &qword_1001BF0C8);
    v15 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v268 = a3;
  v269 = a2;
  v21 = *(int *)(a3 + 24);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v272 = type metadata accessor for UUID(0);
  v266 = *(void (**)(char *, char *))(*(_QWORD *)(v272 - 8) + 24);
  v266(v22, v23);
  v24 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v25 = v24[5];
  v26 = &v22[v25];
  v27 = &v23[v25];
  v28 = type metadata accessor for Date(0);
  v262 = *(_QWORD *)(v28 - 8);
  v29 = *(void (**)(char *, char *, uint64_t))(v262 + 24);
  v29(v26, v27, v28);
  v271 = v29;
  v29(&v22[v24[6]], &v23[v24[6]], v28);
  v30 = v24[7];
  v31 = &v22[v30];
  v32 = &v23[v30];
  v33 = sub_100005D40(&qword_1001BF090);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(void (**)(char *, char *, uint64_t))(v34 + 24);
  v35(v31, v32, v33);
  v270 = v35;
  v35(&v22[v24[8]], &v23[v24[8]], v33);
  v36 = v24[9];
  v37 = &v22[v36];
  v38 = &v23[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  v40 = *((_QWORD *)v37 + 1);
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = v24[10];
  v42 = &v22[v41];
  v43 = &v23[v41];
  LODWORD(v35) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v22[v41], 1, v33);
  v274 = v33;
  v44 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v43, 1, v33);
  if ((_DWORD)v35)
  {
    if (v44)
    {
      v45 = sub_100005D40(&qword_1001BF098);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v42, v43, v33);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v42, 0, 1, v33);
    }
  }
  else if (v44)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v42, v33);
    v46 = sub_100005D40(&qword_1001BF098);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    v270(v42, v43, v33);
  }
  v47 = v24[11];
  v48 = &v22[v47];
  v49 = &v23[v47];
  v50 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v22[v47], 1, v33);
  v51 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v49, 1, v33);
  v260 = a1;
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v48, v49, v33);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v48, 0, 1, v33);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v48, v33);
LABEL_21:
    v52 = sub_100005D40(&qword_1001BF098);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_22;
  }
  v270(v48, v49, v33);
LABEL_22:
  v53 = (void (*)(char *, char *, uint64_t))v266;
  v54 = v24[12];
  v55 = &v22[v54];
  v56 = &v23[v54];
  ((void (*)(char *, char *, uint64_t))v266)(&v22[v54], &v23[v54], v272);
  v57 = (int *)type metadata accessor for ConditionViewModel(0);
  v58 = v57[5];
  v59 = &v55[v58];
  v60 = &v56[v58];
  v61 = type metadata accessor for WeatherCondition(0);
  v264 = *(void (**)(char *, char *))(*(_QWORD *)(v61 - 8) + 24);
  v265 = v61;
  v264(v59, v60);
  v62 = v57[6];
  v63 = &v55[v62];
  v64 = &v56[v62];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v65 = *((_QWORD *)v64 + 1);
  v66 = *((_QWORD *)v63 + 1);
  *((_QWORD *)v63 + 1) = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  v67 = v57[7];
  v68 = &v55[v67];
  v69 = &v56[v67];
  *(_QWORD *)v68 = *(_QWORD *)v69;
  v70 = *((_QWORD *)v69 + 1);
  v71 = *((_QWORD *)v68 + 1);
  *((_QWORD *)v68 + 1) = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRelease(v71);
  v55[v57[8]] = v56[v57[8]];
  v55[v57[9]] = v56[v57[9]];
  v55[v57[10]] = v56[v57[10]];
  *(_QWORD *)&v22[v24[13]] = *(_QWORD *)&v23[v24[13]];
  v72 = v24[14];
  v73 = &v22[v72];
  v74 = &v23[v72];
  v75 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 24))(v73, v74, v75);
  v76 = v24[15];
  v77 = &v22[v76];
  v78 = &v23[v76];
  LODWORD(v74) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v22[v76], 1, v28);
  v79 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v78, 1, v28);
  if ((_DWORD)v74)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v262 + 16))(v77, v78, v28);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v77, 0, 1, v28);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v262 + 8))(v77, v28);
LABEL_27:
    v80 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_28;
  }
  v271(v77, v78, v28);
LABEL_28:
  v81 = v24[16];
  v82 = &v22[v81];
  v83 = &v23[v81];
  v84 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v22[v81], 1, v28);
  v85 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v83, 1, v28);
  v267 = v57;
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v262 + 16))(v82, v83, v28);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v82, 0, 1, v28);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v262 + 8))(v82, v28);
LABEL_33:
    v86 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_34;
  }
  v271(v82, v83, v28);
LABEL_34:
  v87 = v24[17];
  v88 = &v22[v87];
  v89 = &v23[v87];
  v90 = type metadata accessor for UVIndex(0);
  v261 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 24);
  v261(v88, v89, v90);
  v91 = v24[18];
  v92 = &v22[v91];
  v93 = &v23[v91];
  v94 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 24))(v92, v93, v94);
  *(_QWORD *)&v22[v24[19]] = *(_QWORD *)&v23[v24[19]];
  v95 = v24[20];
  v96 = (uint64_t)&v22[v95];
  v97 = &v23[v95];
  v98 = *(_QWORD *)&v22[v95 + 8];
  v99 = *(_QWORD *)&v23[v95 + 8];
  v263 = v90;
  if (v98)
  {
    if (v99)
    {
      *(_QWORD *)v96 = *(_QWORD *)v97;
      v100 = *((_QWORD *)v97 + 1);
      *(_QWORD *)(v96 + 8) = v100;
      swift_bridgeObjectRetain(v100);
      swift_bridgeObjectRelease(v98);
      v101 = *((_QWORD *)v97 + 2);
      v102 = *((_QWORD *)v97 + 3);
      v103 = v97[32];
      sub_100006E58(v101, v102, v103);
      v104 = *(_QWORD *)(v96 + 16);
      v105 = *(_QWORD *)(v96 + 24);
      v106 = *(_BYTE *)(v96 + 32);
      *(_QWORD *)(v96 + 16) = v101;
      *(_QWORD *)(v96 + 24) = v102;
      *(_BYTE *)(v96 + 32) = v103;
      sub_100007458(v104, v105, v106);
    }
    else
    {
      sub_100008EC4(v96);
      v111 = v97[32];
      v112 = *((_OWORD *)v97 + 1);
      *(_OWORD *)v96 = *(_OWORD *)v97;
      *(_OWORD *)(v96 + 16) = v112;
      *(_BYTE *)(v96 + 32) = v111;
    }
  }
  else if (v99)
  {
    *(_QWORD *)v96 = *(_QWORD *)v97;
    v107 = *((_QWORD *)v97 + 1);
    *(_QWORD *)(v96 + 8) = v107;
    v108 = *((_QWORD *)v97 + 2);
    v109 = *((_QWORD *)v97 + 3);
    v110 = v97[32];
    swift_bridgeObjectRetain(v107);
    sub_100006E58(v108, v109, v110);
    *(_QWORD *)(v96 + 16) = v108;
    *(_QWORD *)(v96 + 24) = v109;
    *(_BYTE *)(v96 + 32) = v110;
  }
  else
  {
    v113 = *(_OWORD *)v97;
    v114 = *((_OWORD *)v97 + 1);
    *(_BYTE *)(v96 + 32) = v97[32];
    *(_OWORD *)v96 = v113;
    *(_OWORD *)(v96 + 16) = v114;
  }
  v115 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v116 = v115[5];
  v117 = &v22[v116];
  v118 = &v23[v116];
  v53(&v22[v116], &v23[v116], v272);
  v119 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v271(&v117[v119[5]], &v118[v119[5]], v28);
  v270(&v117[v119[6]], &v118[v119[6]], v274);
  v270(&v117[v119[7]], &v118[v119[7]], v274);
  v120 = v119[8];
  v121 = &v117[v120];
  v122 = &v118[v120];
  v53(&v117[v120], &v118[v120], v272);
  ((void (*)(char *, char *, uint64_t))v264)(&v121[v267[5]], &v122[v267[5]], v265);
  v123 = v267[6];
  v124 = &v121[v123];
  v125 = &v122[v123];
  *(_QWORD *)v124 = *(_QWORD *)v125;
  v126 = *((_QWORD *)v125 + 1);
  v127 = *((_QWORD *)v124 + 1);
  *((_QWORD *)v124 + 1) = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  v128 = v267[7];
  v129 = &v121[v128];
  v130 = &v122[v128];
  *(_QWORD *)v129 = *(_QWORD *)v130;
  v131 = *((_QWORD *)v130 + 1);
  v132 = *((_QWORD *)v129 + 1);
  *((_QWORD *)v129 + 1) = v131;
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRelease(v132);
  v121[v267[8]] = v122[v267[8]];
  v121[v267[9]] = v122[v267[9]];
  v121[v267[10]] = v122[v267[10]];
  v133 = v119[9];
  v134 = &v117[v133];
  v135 = &v118[v133];
  v136 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 24))(v134, v135, v136);
  *(_QWORD *)&v117[v119[10]] = *(_QWORD *)&v118[v119[10]];
  v137 = v119[11];
  v138 = &v117[v137];
  v139 = &v118[v137];
  *(_QWORD *)v138 = *(_QWORD *)v139;
  v140 = *((_QWORD *)v139 + 1);
  v141 = *((_QWORD *)v138 + 1);
  *((_QWORD *)v138 + 1) = v140;
  swift_bridgeObjectRetain(v140);
  swift_bridgeObjectRelease(v141);
  v142 = v119[12];
  v143 = &v117[v142];
  v144 = &v118[v142];
  *(_QWORD *)v143 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  v146 = *((_QWORD *)v143 + 1);
  *((_QWORD *)v143 + 1) = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146);
  v147 = v119[13];
  v148 = &v117[v147];
  v149 = &v118[v147];
  *(_QWORD *)v148 = *(_QWORD *)v149;
  v150 = *((_QWORD *)v149 + 1);
  v151 = *((_QWORD *)v148 + 1);
  *((_QWORD *)v148 + 1) = v150;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRelease(v151);
  v152 = v119[14];
  v153 = &v117[v152];
  v154 = &v118[v152];
  *(_QWORD *)v153 = *(_QWORD *)v154;
  v155 = *((_QWORD *)v154 + 1);
  v156 = *((_QWORD *)v153 + 1);
  *((_QWORD *)v153 + 1) = v155;
  swift_bridgeObjectRetain(v155);
  swift_bridgeObjectRelease(v156);
  v157 = v119[15];
  v158 = &v117[v157];
  v159 = &v118[v157];
  v160 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 24))(v158, v159, v160);
  v161 = v119[16];
  v162 = &v117[v161];
  v163 = &v118[v161];
  v164 = type metadata accessor for SunEvents(0);
  LODWORD(v132) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v162, 1, v164);
  v165 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v163, 1, v164);
  if ((_DWORD)v132)
  {
    if (!v165)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 16))(v162, v163, v164);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v162, 0, 1, v164);
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  v166 = *(_QWORD *)(v164 - 8);
  if (v165)
  {
    (*(void (**)(char *, uint64_t))(v166 + 8))(v162, v164);
LABEL_49:
    v167 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
    goto LABEL_50;
  }
  (*(void (**)(char *, char *, uint64_t))(v166 + 24))(v162, v163, v164);
LABEL_50:
  v168 = v119[17];
  v169 = &v117[v168];
  v170 = &v118[v168];
  v171 = type metadata accessor for MoonEvents(0);
  v172 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v169, 1, v171);
  v173 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v170, 1, v171);
  if (v172)
  {
    if (!v173)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v171 - 8) + 16))(v169, v170, v171);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v169, 0, 1, v171);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  v174 = *(_QWORD *)(v171 - 8);
  if (v173)
  {
    (*(void (**)(char *, uint64_t))(v174 + 8))(v169, v171);
LABEL_55:
    v175 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
    goto LABEL_56;
  }
  (*(void (**)(char *, char *, uint64_t))(v174 + 24))(v169, v170, v171);
LABEL_56:
  v261(&v117[v119[18]], &v118[v119[18]], v263);
  *(_QWORD *)&v117[v119[19]] = *(_QWORD *)&v118[v119[19]];
  v176 = v115[6];
  v177 = &v22[v176];
  v178 = &v23[v176];
  v179 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v180 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v177, 1, (uint64_t)v179);
  v181 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v178, 1, (uint64_t)v179);
  if (!v180)
  {
    if (v181)
    {
      sub_100011894((uint64_t)v177, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_62;
    }
    *(_QWORD *)v177 = *(_QWORD *)v178;
    v193 = *((_QWORD *)v178 + 1);
    v194 = *((_QWORD *)v177 + 1);
    *((_QWORD *)v177 + 1) = v193;
    swift_bridgeObjectRetain(v193);
    swift_bridgeObjectRelease(v194);
    v195 = v179[5];
    v196 = &v177[v195];
    v197 = &v178[v195];
    v198 = type metadata accessor for AttributedString(0);
    v276 = *(_QWORD *)(v198 - 8);
    v273 = *(void (**)(char *, char *, uint64_t))(v276 + 24);
    v273(v196, v197, v198);
    v199 = v179[6];
    v200 = &v177[v199];
    v201 = &v178[v199];
    v202 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v177[v199], 1, v198);
    v203 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v201, 1, v198);
    if (v202)
    {
      if (!v203)
      {
        (*(void (**)(char *, char *, uint64_t))(v276 + 16))(v200, v201, v198);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v200, 0, 1, v198);
LABEL_73:
        v192 = v260;
        v209 = v179[7];
        v210 = &v177[v209];
        v211 = &v178[v209];
        *(_QWORD *)v210 = *(_QWORD *)v211;
        v212 = *((_QWORD *)v211 + 1);
        v213 = *((_QWORD *)v210 + 1);
        *((_QWORD *)v210 + 1) = v212;
        swift_bridgeObjectRetain(v212);
        swift_bridgeObjectRelease(v213);
        goto LABEL_74;
      }
    }
    else
    {
      if (!v203)
      {
        v273(v200, v201, v198);
        goto LABEL_73;
      }
      (*(void (**)(char *, uint64_t))(v276 + 8))(v200, v198);
    }
    v208 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
    goto LABEL_73;
  }
  if (v181)
  {
LABEL_62:
    v191 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
    v192 = v260;
    goto LABEL_74;
  }
  *(_QWORD *)v177 = *(_QWORD *)v178;
  v182 = *((_QWORD *)v178 + 1);
  *((_QWORD *)v177 + 1) = v182;
  v183 = v179[5];
  v184 = &v177[v183];
  v275 = &v178[v183];
  v185 = type metadata accessor for AttributedString(0);
  v186 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v185 - 8) + 16);
  swift_bridgeObjectRetain(v182);
  v186(v184, v275, v185);
  v187 = v179[6];
  v188 = &v177[v187];
  v189 = &v178[v187];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v178[v187], 1, v185))
  {
    v190 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
  }
  else
  {
    v186(v188, v189, v185);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v188, 0, 1, v185);
  }
  v192 = v260;
  v204 = v179[7];
  v205 = &v177[v204];
  v206 = &v178[v204];
  *(_QWORD *)v205 = *(_QWORD *)v206;
  v207 = *((_QWORD *)v206 + 1);
  *((_QWORD *)v205 + 1) = v207;
  swift_bridgeObjectRetain(v207);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v177, 0, 1, (uint64_t)v179);
LABEL_74:
  v214 = v115[7];
  v215 = &v22[v214];
  v216 = &v23[v214];
  v217 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v217 - 8) + 24))(v215, v216, v217);
  v218 = v115[8];
  v219 = &v22[v218];
  v220 = &v23[v218];
  *(_QWORD *)v219 = *(_QWORD *)v220;
  v221 = *((_QWORD *)v220 + 1);
  v222 = *((_QWORD *)v219 + 1);
  *((_QWORD *)v219 + 1) = v221;
  swift_bridgeObjectRetain(v221);
  swift_bridgeObjectRelease(v222);
  v22[v115[9]] = v23[v115[9]];
  v22[v115[10]] = v23[v115[10]];
  v223 = v115[11];
  v224 = *(_QWORD *)&v22[v223];
  v225 = *(_QWORD *)&v23[v223];
  *(_QWORD *)&v22[v223] = v225;
  swift_retain(v225);
  swift_release(v224);
  v226 = v115[12];
  v227 = &v22[v226];
  v228 = &v23[v226];
  *(_QWORD *)v227 = *(_QWORD *)v228;
  v229 = *((_QWORD *)v228 + 1);
  v230 = *((_QWORD *)v227 + 1);
  *((_QWORD *)v227 + 1) = v229;
  swift_bridgeObjectRetain(v229);
  swift_bridgeObjectRelease(v230);
  v231 = v115[13];
  v232 = *(_QWORD *)&v23[v231];
  v233 = *(_QWORD *)&v22[v231];
  *(_QWORD *)&v22[v231] = v232;
  swift_retain(v232);
  swift_release(v233);
  v234 = v115[14];
  v235 = *(_QWORD *)&v23[v234];
  v236 = *(_QWORD *)&v22[v234];
  *(_QWORD *)&v22[v234] = v235;
  swift_retain(v235);
  swift_release(v236);
  v237 = v115[15];
  v238 = *(_QWORD *)&v23[v237];
  v239 = *(_QWORD *)&v22[v237];
  *(_QWORD *)&v22[v237] = v238;
  swift_retain(v238);
  swift_release(v239);
  v240 = v115[16];
  v241 = *(_QWORD *)&v23[v240];
  v242 = *(_QWORD *)&v22[v240];
  *(_QWORD *)&v22[v240] = v241;
  swift_retain(v241);
  swift_release(v242);
  v22[v115[17]] = v23[v115[17]];
  v243 = v115[18];
  v244 = *(_QWORD *)&v23[v243];
  v245 = *(_QWORD *)&v22[v243];
  *(_QWORD *)&v22[v243] = v244;
  swift_retain(v244);
  swift_release(v245);
  v246 = v115[19];
  v247 = *(_QWORD *)&v23[v246];
  v248 = *(_QWORD *)&v22[v246];
  *(_QWORD *)&v22[v246] = v247;
  swift_retain(v247);
  swift_release(v248);
  *(_QWORD *)&v22[v115[20]] = *(_QWORD *)&v23[v115[20]];
  v22[v115[21]] = v23[v115[21]];
  v22[v115[22]] = v23[v115[22]];
  v22[v115[23]] = v23[v115[23]];
  v22[v115[24]] = v23[v115[24]];
  v249 = v115[25];
  v250 = &v22[v249];
  v251 = &v23[v249];
  *(_QWORD *)v250 = *(_QWORD *)v251;
  v252 = *((_QWORD *)v251 + 1);
  v253 = *((_QWORD *)v250 + 1);
  *((_QWORD *)v250 + 1) = v252;
  swift_bridgeObjectRetain(v252);
  swift_bridgeObjectRelease(v253);
  v22[v115[26]] = v23[v115[26]];
  *(_QWORD *)&v22[v115[27]] = *(_QWORD *)&v23[v115[27]];
  *(_QWORD *)&v22[v115[28]] = *(_QWORD *)&v23[v115[28]];
  v254 = *(int *)(v268 + 28);
  v255 = (_QWORD *)((char *)v192 + v254);
  v256 = (_QWORD *)((char *)v269 + v254);
  *v255 = *v256;
  v257 = v256[1];
  v258 = v255[1];
  v255[1] = v257;
  swift_bridgeObjectRetain(v257);
  swift_bridgeObjectRelease(v258);
  return v192;
}

char *sub_1000A27C0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *result;
  void (*v116)(char *, char *);
  uint64_t v117;
  int *v118;
  void (*v119)(char *, char *);
  uint64_t v120;
  void (*v121)(char *, char *, uint64_t);
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t);
  uint64_t v124;
  char *v125;
  char *v126;
  void (*v127)(char *, char *, uint64_t);

  v6 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for Font.Context(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v124 = a3;
  v125 = a2;
  v13 = *(int *)(a3 + 24);
  v126 = a1;
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for UUID(0);
  v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v14, v15, v16);
  v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v19 = v18[5];
  v20 = &v14[v19];
  v21 = &v15[v19];
  v22 = type metadata accessor for Date(0);
  v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
  v23(v20, v21, v22);
  v24 = v22;
  v127 = v23;
  v23(&v14[v18[6]], &v15[v18[6]], v22);
  v25 = v18[7];
  v26 = &v14[v25];
  v27 = &v15[v25];
  v28 = sub_100005D40(&qword_1001BF090);
  v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32);
  v29(v26, v27, v28);
  v29(&v14[v18[8]], &v15[v18[8]], v28);
  *(_OWORD *)&v14[v18[9]] = *(_OWORD *)&v15[v18[9]];
  v30 = v18[10];
  v31 = &v14[v30];
  v32 = &v15[v30];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v30], 1, v28))
  {
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v29(v31, v32, v28);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v28);
  }
  v34 = v18[11];
  v35 = &v14[v34];
  v36 = &v15[v34];
  v121 = v29;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v34], 1, v28))
  {
    v37 = sub_100005D40(&qword_1001BF098);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v29(v35, v36, v28);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v35, 0, 1, v28);
  }
  v38 = v18[12];
  v39 = &v14[v38];
  v40 = &v15[v38];
  v122 = v16;
  v123 = v17;
  v17(&v14[v38], &v15[v38], v16);
  v41 = (int *)type metadata accessor for ConditionViewModel(0);
  v42 = v41[5];
  v43 = &v39[v42];
  v44 = &v40[v42];
  v45 = type metadata accessor for WeatherCondition(0);
  v116 = *(void (**)(char *, char *))(*(_QWORD *)(v45 - 8) + 32);
  v117 = v45;
  v116(v43, v44);
  *(_OWORD *)&v39[v41[6]] = *(_OWORD *)&v40[v41[6]];
  *(_OWORD *)&v39[v41[7]] = *(_OWORD *)&v40[v41[7]];
  v39[v41[8]] = v40[v41[8]];
  v39[v41[9]] = v40[v41[9]];
  v118 = v41;
  v39[v41[10]] = v40[v41[10]];
  *(_QWORD *)&v14[v18[13]] = *(_QWORD *)&v15[v18[13]];
  v46 = v18[14];
  v47 = &v14[v46];
  v48 = &v15[v46];
  v49 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
  v50 = v18[15];
  v51 = &v14[v50];
  v52 = &v15[v50];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v50], 1, v24))
  {
    v53 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    v54 = v127;
  }
  else
  {
    v54 = v127;
    v127(v51, v52, v24);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v51, 0, 1, v24);
  }
  v55 = v18[16];
  v56 = &v14[v55];
  v57 = &v15[v55];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v15[v55], 1, v24))
  {
    v58 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v54(v56, v57, v24);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v24);
  }
  v59 = v18[17];
  v60 = &v14[v59];
  v61 = &v15[v59];
  v62 = type metadata accessor for UVIndex(0);
  v119 = *(void (**)(char *, char *))(*(_QWORD *)(v62 - 8) + 32);
  v120 = v62;
  v119(v60, v61);
  v63 = v18[18];
  v64 = &v14[v63];
  v65 = &v15[v63];
  v66 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
  *(_QWORD *)&v14[v18[19]] = *(_QWORD *)&v15[v18[19]];
  v67 = v18[20];
  v68 = &v14[v67];
  v69 = &v15[v67];
  v68[32] = v69[32];
  v70 = *((_OWORD *)v69 + 1);
  *(_OWORD *)v68 = *(_OWORD *)v69;
  *((_OWORD *)v68 + 1) = v70;
  v71 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v72 = v71[5];
  v73 = &v14[v72];
  v74 = &v15[v72];
  v123(&v14[v72], &v15[v72], v122);
  v75 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v127(&v73[v75[5]], &v74[v75[5]], v24);
  v121(&v73[v75[6]], &v74[v75[6]], v28);
  v121(&v73[v75[7]], &v74[v75[7]], v28);
  v76 = v75[8];
  v77 = &v73[v76];
  v78 = &v74[v76];
  v123(&v73[v76], &v74[v76], v122);
  ((void (*)(char *, char *, uint64_t))v116)(&v77[v118[5]], &v78[v118[5]], v117);
  *(_OWORD *)&v77[v118[6]] = *(_OWORD *)&v78[v118[6]];
  *(_OWORD *)&v77[v118[7]] = *(_OWORD *)&v78[v118[7]];
  v77[v118[8]] = v78[v118[8]];
  v77[v118[9]] = v78[v118[9]];
  v77[v118[10]] = v78[v118[10]];
  v79 = v75[9];
  v80 = &v73[v79];
  v81 = &v74[v79];
  v82 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v80, v81, v82);
  *(_QWORD *)&v73[v75[10]] = *(_QWORD *)&v74[v75[10]];
  *(_OWORD *)&v73[v75[11]] = *(_OWORD *)&v74[v75[11]];
  *(_OWORD *)&v73[v75[12]] = *(_OWORD *)&v74[v75[12]];
  *(_OWORD *)&v73[v75[13]] = *(_OWORD *)&v74[v75[13]];
  *(_OWORD *)&v73[v75[14]] = *(_OWORD *)&v74[v75[14]];
  v83 = v75[15];
  v84 = &v73[v83];
  v85 = &v74[v83];
  v86 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v84, v85, v86);
  v87 = v75[16];
  v88 = &v73[v87];
  v89 = &v74[v87];
  v90 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v89, 1, v90))
  {
    v91 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v88, v89, v90);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v88, 0, 1, v90);
  }
  v92 = v75[17];
  v93 = &v73[v92];
  v94 = &v74[v92];
  v95 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v94, 1, v95))
  {
    v96 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 32))(v93, v94, v95);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v93, 0, 1, v95);
  }
  ((void (*)(char *, char *, uint64_t))v119)(&v73[v75[18]], &v74[v75[18]], v120);
  *(_QWORD *)&v73[v75[19]] = *(_QWORD *)&v74[v75[19]];
  v97 = v71[6];
  v98 = &v14[v97];
  v99 = &v15[v97];
  v100 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v99, 1, (uint64_t)v100))
  {
    v101 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v98 = *(_OWORD *)v99;
    v102 = v100[5];
    v103 = &v98[v102];
    v104 = &v99[v102];
    v105 = type metadata accessor for AttributedString(0);
    v106 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 32);
    v106(v103, v104, v105);
    v107 = v100[6];
    v108 = &v98[v107];
    v109 = &v99[v107];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v99[v107], 1, v105))
    {
      v110 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    }
    else
    {
      v106(v108, v109, v105);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v108, 0, 1, v105);
    }
    *(_OWORD *)&v98[v100[7]] = *(_OWORD *)&v99[v100[7]];
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v98, 0, 1, (uint64_t)v100);
  }
  v111 = v71[7];
  v112 = &v14[v111];
  v113 = &v15[v111];
  v114 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 32))(v112, v113, v114);
  *(_OWORD *)&v14[v71[8]] = *(_OWORD *)&v15[v71[8]];
  v14[v71[9]] = v15[v71[9]];
  v14[v71[10]] = v15[v71[10]];
  *(_QWORD *)&v14[v71[11]] = *(_QWORD *)&v15[v71[11]];
  *(_OWORD *)&v14[v71[12]] = *(_OWORD *)&v15[v71[12]];
  *(_QWORD *)&v14[v71[13]] = *(_QWORD *)&v15[v71[13]];
  *(_QWORD *)&v14[v71[14]] = *(_QWORD *)&v15[v71[14]];
  *(_QWORD *)&v14[v71[15]] = *(_QWORD *)&v15[v71[15]];
  *(_QWORD *)&v14[v71[16]] = *(_QWORD *)&v15[v71[16]];
  v14[v71[17]] = v15[v71[17]];
  *(_QWORD *)&v14[v71[18]] = *(_QWORD *)&v15[v71[18]];
  *(_QWORD *)&v14[v71[19]] = *(_QWORD *)&v15[v71[19]];
  *(_QWORD *)&v14[v71[20]] = *(_QWORD *)&v15[v71[20]];
  v14[v71[21]] = v15[v71[21]];
  v14[v71[22]] = v15[v71[22]];
  v14[v71[23]] = v15[v71[23]];
  v14[v71[24]] = v15[v71[24]];
  *(_OWORD *)&v14[v71[25]] = *(_OWORD *)&v15[v71[25]];
  v14[v71[26]] = v15[v71[26]];
  *(_QWORD *)&v14[v71[27]] = *(_QWORD *)&v15[v71[27]];
  *(_QWORD *)&v14[v71[28]] = *(_QWORD *)&v15[v71[28]];
  result = v126;
  *(_OWORD *)&v126[*(int *)(v124 + 28)] = *(_OWORD *)&v125[*(int *)(v124 + 28)];
  return result;
}

char *sub_1000A31C0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *);
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  int *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  int *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  int *v171;
  int v172;
  int v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  void (*v178)(char *, char *, uint64_t);
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v246;
  void (*v247)(char *, char *, uint64_t);
  void (*v248)(char *, char *);
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  char *v253;
  void (*v254)(char *, char *, uint64_t);
  void (*v255)(char *, char *, uint64_t);
  uint64_t v256;
  void (*v257)(char *, char *, uint64_t);
  uint64_t v258;
  uint64_t v259;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BF3C0);
    v6 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100016904((uint64_t)&a1[v8], &qword_1001BF0C8);
    v11 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for Font.Context(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v252 = a3;
  v253 = a2;
  v13 = *(int *)(a3 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for UUID(0);
  v17 = *(void (**)(char *, char *))(*(_QWORD *)(v16 - 8) + 40);
  v258 = v16;
  v17(v14, v15);
  v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v19 = v18[5];
  v20 = &v14[v19];
  v21 = &v15[v19];
  v22 = type metadata accessor for Date(0);
  v250 = *(_QWORD *)(v22 - 8);
  v23 = *(void (**)(char *, char *, uint64_t))(v250 + 40);
  v23(v20, v21, v22);
  v255 = v23;
  v256 = v22;
  v23(&v14[v18[6]], &v15[v18[6]], v22);
  v24 = v18[7];
  v25 = &v14[v24];
  v26 = &v15[v24];
  v27 = sub_100005D40(&qword_1001BF090);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(void (**)(char *, char *, uint64_t))(v28 + 40);
  v29(v25, v26, v27);
  v254 = v29;
  v29(&v14[v18[8]], &v15[v18[8]], v27);
  v30 = v18[9];
  v31 = &v14[v30];
  v32 = &v15[v30];
  v34 = *(_QWORD *)v32;
  v33 = *((_QWORD *)v32 + 1);
  v35 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v31 = v34;
  *((_QWORD *)v31 + 1) = v33;
  swift_bridgeObjectRelease(v35);
  v36 = v18[10];
  v37 = &v14[v36];
  v38 = &v15[v36];
  LODWORD(v29) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v14[v36], 1, v27);
  v39 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v38, 1, v27);
  if ((_DWORD)v29)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v37, v38, v27);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v37, 0, 1, v27);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v37, v27);
LABEL_13:
    v40 = sub_100005D40(&qword_1001BF098);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_14;
  }
  v254(v37, v38, v27);
LABEL_14:
  v41 = v18[11];
  v42 = &v14[v41];
  v43 = &v15[v41];
  v44 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v14[v41], 1, v27);
  v45 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v43, 1, v27);
  v246 = a1;
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v42, v43, v27);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v42, 0, 1, v27);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v42, v27);
LABEL_19:
    v46 = sub_100005D40(&qword_1001BF098);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_20;
  }
  v254(v42, v43, v27);
LABEL_20:
  v47 = v18[12];
  v48 = &v14[v47];
  v49 = &v15[v47];
  ((void (*)(char *, char *, uint64_t))v17)(&v14[v47], &v15[v47], v258);
  v50 = (int *)type metadata accessor for ConditionViewModel(0);
  v51 = v50[5];
  v52 = &v48[v51];
  v53 = &v49[v51];
  v54 = type metadata accessor for WeatherCondition(0);
  v248 = *(void (**)(char *, char *))(*(_QWORD *)(v54 - 8) + 40);
  v249 = v54;
  v248(v52, v53);
  v55 = v50[6];
  v56 = &v48[v55];
  v57 = &v49[v55];
  v59 = *(_QWORD *)v57;
  v58 = *((_QWORD *)v57 + 1);
  v60 = *((_QWORD *)v56 + 1);
  *(_QWORD *)v56 = v59;
  *((_QWORD *)v56 + 1) = v58;
  swift_bridgeObjectRelease(v60);
  v61 = v50[7];
  v62 = &v48[v61];
  v63 = &v49[v61];
  v65 = *(_QWORD *)v63;
  v64 = *((_QWORD *)v63 + 1);
  v66 = *((_QWORD *)v62 + 1);
  *(_QWORD *)v62 = v65;
  *((_QWORD *)v62 + 1) = v64;
  swift_bridgeObjectRelease(v66);
  v48[v50[8]] = v49[v50[8]];
  v48[v50[9]] = v49[v50[9]];
  v48[v50[10]] = v49[v50[10]];
  *(_QWORD *)&v14[v18[13]] = *(_QWORD *)&v15[v18[13]];
  v67 = v18[14];
  v68 = &v14[v67];
  v69 = &v15[v67];
  v70 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 40))(v68, v69, v70);
  v71 = v18[15];
  v72 = &v14[v71];
  v73 = &v15[v71];
  LODWORD(v69) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v14[v71], 1, v256);
  v74 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v73, 1, v256);
  if ((_DWORD)v69)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v250 + 32))(v72, v73, v256);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v72, 0, 1, v256);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v250 + 8))(v72, v256);
LABEL_25:
    v75 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_26;
  }
  v255(v72, v73, v256);
LABEL_26:
  v76 = v18[16];
  v77 = &v14[v76];
  v78 = &v15[v76];
  v79 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v14[v76], 1, v256);
  v80 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v78, 1, v256);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v250 + 32))(v77, v78, v256);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v77, 0, 1, v256);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v250 + 8))(v77, v256);
LABEL_31:
    v81 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    goto LABEL_32;
  }
  v255(v77, v78, v256);
LABEL_32:
  v82 = v18[17];
  v83 = &v14[v82];
  v84 = &v15[v82];
  v85 = type metadata accessor for UVIndex(0);
  v247 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 40);
  v247(v83, v84, v85);
  v86 = v18[18];
  v87 = &v14[v86];
  v88 = &v15[v86];
  v89 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 40))(v87, v88, v89);
  *(_QWORD *)&v14[v18[19]] = *(_QWORD *)&v15[v18[19]];
  v90 = v18[20];
  v91 = (uint64_t)&v14[v90];
  v92 = &v15[v90];
  v93 = *(_QWORD *)&v14[v90 + 8];
  if (v93)
  {
    v94 = *((_QWORD *)v92 + 1);
    if (v94)
    {
      *(_QWORD *)v91 = *(_QWORD *)v92;
      *(_QWORD *)(v91 + 8) = v94;
      swift_bridgeObjectRelease(v93);
      v95 = v92[32];
      v96 = *(_QWORD *)(v91 + 16);
      v97 = *(_QWORD *)(v91 + 24);
      v98 = *(_BYTE *)(v91 + 32);
      *(_OWORD *)(v91 + 16) = *((_OWORD *)v92 + 1);
      *(_BYTE *)(v91 + 32) = v95;
      sub_100007458(v96, v97, v98);
      goto LABEL_37;
    }
    sub_100008EC4(v91);
  }
  v99 = *((_OWORD *)v92 + 1);
  *(_OWORD *)v91 = *(_OWORD *)v92;
  *(_OWORD *)(v91 + 16) = v99;
  *(_BYTE *)(v91 + 32) = v92[32];
LABEL_37:
  v100 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v101 = v100[5];
  v102 = &v14[v101];
  v251 = v15;
  v103 = &v15[v101];
  ((void (*)(char *, char *, uint64_t))v17)(&v14[v101], &v15[v101], v258);
  v104 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v255(&v102[v104[5]], &v103[v104[5]], v256);
  v254(&v102[v104[6]], &v103[v104[6]], v27);
  v254(&v102[v104[7]], &v103[v104[7]], v27);
  v105 = v104[8];
  v106 = &v102[v105];
  v107 = &v103[v105];
  ((void (*)(char *, char *, uint64_t))v17)(&v102[v105], &v103[v105], v258);
  ((void (*)(char *, char *, uint64_t))v248)(&v106[v50[5]], &v107[v50[5]], v249);
  v108 = v50[6];
  v109 = &v106[v108];
  v110 = (uint64_t *)&v107[v108];
  v112 = *v110;
  v111 = v110[1];
  v113 = *((_QWORD *)v109 + 1);
  *(_QWORD *)v109 = v112;
  *((_QWORD *)v109 + 1) = v111;
  swift_bridgeObjectRelease(v113);
  v114 = v50[7];
  v115 = &v106[v114];
  v116 = (uint64_t *)&v107[v114];
  v118 = *v116;
  v117 = v116[1];
  v119 = *((_QWORD *)v115 + 1);
  *(_QWORD *)v115 = v118;
  *((_QWORD *)v115 + 1) = v117;
  swift_bridgeObjectRelease(v119);
  v106[v50[8]] = v107[v50[8]];
  v106[v50[9]] = v107[v50[9]];
  v106[v50[10]] = v107[v50[10]];
  v120 = v104[9];
  v121 = &v102[v120];
  v122 = &v103[v120];
  v123 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 40))(v121, v122, v123);
  *(_QWORD *)&v102[v104[10]] = *(_QWORD *)&v103[v104[10]];
  v124 = v104[11];
  v125 = &v102[v124];
  v126 = &v103[v124];
  v128 = *(_QWORD *)v126;
  v127 = *((_QWORD *)v126 + 1);
  v129 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v125 = v128;
  *((_QWORD *)v125 + 1) = v127;
  swift_bridgeObjectRelease(v129);
  v130 = v104[12];
  v131 = &v102[v130];
  v132 = &v103[v130];
  v134 = *(_QWORD *)v132;
  v133 = *((_QWORD *)v132 + 1);
  v135 = *((_QWORD *)v131 + 1);
  *(_QWORD *)v131 = v134;
  *((_QWORD *)v131 + 1) = v133;
  swift_bridgeObjectRelease(v135);
  v136 = v104[13];
  v137 = &v102[v136];
  v138 = &v103[v136];
  v140 = *(_QWORD *)v138;
  v139 = *((_QWORD *)v138 + 1);
  v141 = *((_QWORD *)v137 + 1);
  *(_QWORD *)v137 = v140;
  *((_QWORD *)v137 + 1) = v139;
  swift_bridgeObjectRelease(v141);
  v142 = v104[14];
  v143 = &v102[v142];
  v144 = &v103[v142];
  v146 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  v147 = *((_QWORD *)v143 + 1);
  *(_QWORD *)v143 = v146;
  *((_QWORD *)v143 + 1) = v145;
  swift_bridgeObjectRelease(v147);
  v148 = v104[15];
  v149 = &v102[v148];
  v150 = &v103[v148];
  v151 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 40))(v149, v150, v151);
  v152 = v104[16];
  v153 = &v102[v152];
  v154 = &v103[v152];
  v155 = type metadata accessor for SunEvents(0);
  v156 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v153, 1, v155);
  v157 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v154, 1, v155);
  if (v156)
  {
    if (!v157)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 32))(v153, v154, v155);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v153, 0, 1, v155);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  v158 = *(_QWORD *)(v155 - 8);
  if (v157)
  {
    (*(void (**)(char *, uint64_t))(v158 + 8))(v153, v155);
LABEL_42:
    v159 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v158 + 40))(v153, v154, v155);
LABEL_43:
  v160 = v104[17];
  v161 = &v102[v160];
  v162 = &v103[v160];
  v163 = type metadata accessor for MoonEvents(0);
  v164 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v161, 1, v163);
  v165 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v162, 1, v163);
  if (v164)
  {
    if (!v165)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v163 - 8) + 32))(v161, v162, v163);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v161, 0, 1, v163);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  v166 = *(_QWORD *)(v163 - 8);
  if (v165)
  {
    (*(void (**)(char *, uint64_t))(v166 + 8))(v161, v163);
LABEL_48:
    v167 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v166 + 40))(v161, v162, v163);
LABEL_49:
  v247(&v102[v104[18]], &v103[v104[18]], v85);
  *(_QWORD *)&v102[v104[19]] = *(_QWORD *)&v103[v104[19]];
  v168 = v100[6];
  v169 = &v14[v168];
  v170 = &v251[v168];
  v171 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v172 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v169, 1, (uint64_t)v171);
  v173 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v170, 1, (uint64_t)v171);
  if (!v172)
  {
    if (v173)
    {
      sub_100011894((uint64_t)v169, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_55;
    }
    v185 = *((_QWORD *)v170 + 1);
    v186 = *((_QWORD *)v169 + 1);
    *(_QWORD *)v169 = *(_QWORD *)v170;
    *((_QWORD *)v169 + 1) = v185;
    swift_bridgeObjectRelease(v186);
    v187 = v171[5];
    v188 = &v169[v187];
    v189 = &v170[v187];
    v190 = type metadata accessor for AttributedString(0);
    v259 = *(_QWORD *)(v190 - 8);
    v257 = *(void (**)(char *, char *, uint64_t))(v259 + 40);
    v257(v188, v189, v190);
    v191 = v171[6];
    v192 = &v169[v191];
    v193 = &v170[v191];
    v194 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v169[v191], 1, v190);
    v195 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v193, 1, v190);
    if (v194)
    {
      if (!v195)
      {
        (*(void (**)(char *, char *, uint64_t))(v259 + 32))(v192, v193, v190);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v192, 0, 1, v190);
LABEL_70:
        v184 = v246;
        v197 = v171[7];
        v198 = &v169[v197];
        v199 = (uint64_t *)&v170[v197];
        v201 = *v199;
        v200 = v199[1];
        v202 = *((_QWORD *)v198 + 1);
        *(_QWORD *)v198 = v201;
        *((_QWORD *)v198 + 1) = v200;
        swift_bridgeObjectRelease(v202);
        goto LABEL_71;
      }
    }
    else
    {
      if (!v195)
      {
        v257(v192, v193, v190);
        goto LABEL_70;
      }
      (*(void (**)(char *, uint64_t))(v259 + 8))(v192, v190);
    }
    v196 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v192, v193, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
    goto LABEL_70;
  }
  if (v173)
  {
LABEL_55:
    v183 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
    v184 = v246;
    goto LABEL_71;
  }
  *(_OWORD *)v169 = *(_OWORD *)v170;
  v174 = v171[5];
  v175 = &v169[v174];
  v176 = &v170[v174];
  v177 = type metadata accessor for AttributedString(0);
  v178 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v177 - 8) + 32);
  v178(v175, v176, v177);
  v179 = v171[6];
  v180 = &v169[v179];
  v181 = &v170[v179];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v170[v179], 1, v177))
  {
    v182 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
  }
  else
  {
    v178(v180, v181, v177);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v180, 0, 1, v177);
  }
  v184 = v246;
  *(_OWORD *)&v169[v171[7]] = *(_OWORD *)&v170[v171[7]];
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v169, 0, 1, (uint64_t)v171);
LABEL_71:
  v203 = v100[7];
  v204 = &v14[v203];
  v205 = &v251[v203];
  v206 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v206 - 8) + 40))(v204, v205, v206);
  v207 = v100[8];
  v208 = &v14[v207];
  v209 = &v251[v207];
  v211 = *(_QWORD *)v209;
  v210 = *((_QWORD *)v209 + 1);
  v212 = *((_QWORD *)v208 + 1);
  *(_QWORD *)v208 = v211;
  *((_QWORD *)v208 + 1) = v210;
  swift_bridgeObjectRelease(v212);
  v14[v100[9]] = v251[v100[9]];
  v14[v100[10]] = v251[v100[10]];
  v213 = v100[11];
  v214 = *(_QWORD *)&v14[v213];
  *(_QWORD *)&v14[v213] = *(_QWORD *)&v251[v213];
  swift_release(v214);
  v215 = v100[12];
  v216 = &v14[v215];
  v217 = &v251[v215];
  v219 = *(_QWORD *)v217;
  v218 = *((_QWORD *)v217 + 1);
  v220 = *((_QWORD *)v216 + 1);
  *(_QWORD *)v216 = v219;
  *((_QWORD *)v216 + 1) = v218;
  swift_bridgeObjectRelease(v220);
  v221 = v100[13];
  v222 = *(_QWORD *)&v14[v221];
  *(_QWORD *)&v14[v221] = *(_QWORD *)&v251[v221];
  swift_release(v222);
  v223 = v100[14];
  v224 = *(_QWORD *)&v14[v223];
  *(_QWORD *)&v14[v223] = *(_QWORD *)&v251[v223];
  swift_release(v224);
  v225 = v100[15];
  v226 = *(_QWORD *)&v14[v225];
  *(_QWORD *)&v14[v225] = *(_QWORD *)&v251[v225];
  swift_release(v226);
  v227 = v100[16];
  v228 = *(_QWORD *)&v14[v227];
  *(_QWORD *)&v14[v227] = *(_QWORD *)&v251[v227];
  swift_release(v228);
  v14[v100[17]] = v251[v100[17]];
  v229 = v100[18];
  v230 = *(_QWORD *)&v14[v229];
  *(_QWORD *)&v14[v229] = *(_QWORD *)&v251[v229];
  swift_release(v230);
  v231 = v100[19];
  v232 = *(_QWORD *)&v14[v231];
  *(_QWORD *)&v14[v231] = *(_QWORD *)&v251[v231];
  swift_release(v232);
  *(_QWORD *)&v14[v100[20]] = *(_QWORD *)&v251[v100[20]];
  v14[v100[21]] = v251[v100[21]];
  v14[v100[22]] = v251[v100[22]];
  v14[v100[23]] = v251[v100[23]];
  v14[v100[24]] = v251[v100[24]];
  v233 = v100[25];
  v234 = &v14[v233];
  v235 = &v251[v233];
  v237 = *(_QWORD *)v235;
  v236 = *((_QWORD *)v235 + 1);
  v238 = *((_QWORD *)v234 + 1);
  *(_QWORD *)v234 = v237;
  *((_QWORD *)v234 + 1) = v236;
  swift_bridgeObjectRelease(v238);
  v14[v100[26]] = v251[v100[26]];
  *(_QWORD *)&v14[v100[27]] = *(_QWORD *)&v251[v100[27]];
  *(_QWORD *)&v14[v100[28]] = *(_QWORD *)&v251[v100[28]];
  v239 = *(int *)(v252 + 28);
  v240 = &v184[v239];
  v241 = &v253[v239];
  v243 = *(_QWORD *)v241;
  v242 = *((_QWORD *)v241 + 1);
  v244 = *((_QWORD *)v240 + 1);
  *(_QWORD *)v240 = v243;
  *((_QWORD *)v240 + 1) = v242;
  swift_bridgeObjectRelease(v244);
  return v184;
}

uint64_t sub_1000A4050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A405C);
}

void sub_1000A405C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  sub_100005D40(&qword_1001BF4B0);
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    sub_100005D40(&qword_1001BF0D0);
    sub_10001C6C0();
    if (v9)
    {
      v7 = v10;
      v11 = a3[5];
    }
    else
    {
      sub_100016B00();
      sub_10001C6C0();
      if (!v12)
      {
        sub_1000A74A8(a1 + a3[7]);
        sub_1000443A4();
        return;
      }
      v7 = v13;
      v11 = a3[6];
    }
    v8 = a1 + v11;
  }
  sub_100016B50(v8, a2, v7);
}

uint64_t sub_1000A40F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A40FC);
}

void sub_1000A40FC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100083154();
  sub_100005D40(&qword_1001BF4B0);
  sub_10001C6D0();
  if (v3 || (sub_100005D40(&qword_1001BF0D0), sub_10001C6D0(), v3 || (sub_100016B00(), sub_10001C6D0(), v4)))
  {
    sub_1000A75F8();
    sub_100016B44(v5, v6, v7, v8);
  }
  else
  {
    *(_QWORD *)(v1 + *(int *)(v2 + 28) + 8) = (v0 - 1);
    sub_1000443A4();
  }
}

void sub_1000A418C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_10001C028(319, &qword_1001BF530, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001C028(319, (unint64_t *)&qword_1001BF140, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for CurrentObservationViewAttributes(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = &unk_10017E070;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1000A4254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A4268(a1, a2, a3, &qword_1001BF0C8, &type metadata accessor for Font.Context);
}

#error "1000A43D8: call analysis failed (funcsize=251)"

uint64_t sub_1000A4678(uint64_t a1, uint64_t a2)
{
  return sub_1000A468C(a1, a2, (uint64_t)&qword_1001BF0C8, (uint64_t)&type metadata accessor for Font.Context);
}

uint64_t sub_1000A468C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t EnumCaseMultiPayload;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(_QWORD);
  void (*v78)(uint64_t);
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t);
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t (*v93)(uint64_t, uint64_t);

  v76 = a4;
  v89 = a2;
  v91 = a3;
  v5 = sub_1000A726C();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(a1, v5);
  v7 = (int *)sub_1000A7264();
  v8 = a1 + v7[5];
  v9 = sub_10002338C();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v93 = v10;
  v10(a1 + v7[6], v9);
  v11 = a1 + v7[7];
  sub_100005D40(&qword_1001BF090);
  sub_1000A72E4(v11);
  sub_1000A72E4(a1 + v7[8]);
  sub_100016A8C(a1 + v7[9]);
  v12 = a1 + v7[10];
  if (!sub_1000A6B44(v12))
    sub_1000A72E4(v12);
  v13 = a1 + v7[11];
  if (!sub_1000A6B44(v13))
    sub_1000A72E4(v13);
  v14 = a1 + v7[12];
  v88 = v6;
  v6(v14, v5);
  v15 = (int *)sub_1000A7274();
  v16 = v14 + v15[5];
  v17 = sub_1000A727C();
  v78 = *(void (**)(uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v80 = v17;
  v78(v16);
  sub_100016A8C(v14 + v15[6]);
  sub_100016A8C(v14 + v15[7]);
  v18 = type metadata accessor for CloudAltitudeKind(0);
  sub_100016BF0(v18);
  v19 = a1 + v7[15];
  if (!sub_1000A6DAC(v19))
    sub_1000A7330(v19, v20, v21, v22, v23, v24, v25, v26, v74, v76, (uint64_t)v78, v80, v82, v85, (uint64_t)v88, v89, v91, v93);
  v27 = a1 + v7[16];
  if (!sub_1000A6DAC(v27))
    sub_1000A7330(v27, v28, v29, v30, v31, v32, v33, v34, v74, v76, (uint64_t)v78, v80, v82, v85, (uint64_t)v88, v89, v91, v93);
  v35 = a1 + v7[17];
  v36 = sub_1000234CC();
  v83 = *(void (**)(uint64_t))(*(_QWORD *)(v36 - 8) + 8);
  v86 = v36;
  v83(v35);
  v37 = sub_1000234C4();
  sub_100016BF0(v37);
  v38 = a1 + v7[20];
  v39 = *(_QWORD *)(v38 + 8);
  if (v39)
  {
    swift_bridgeObjectRelease(v39);
    sub_100007458(*(_QWORD *)(v38 + 16), *(_QWORD *)(v38 + 24), *(_BYTE *)(v38 + 32));
  }
  v40 = (int *)sub_100016B00();
  v41 = a1 + v40[5];
  v42 = v5;
  v43 = v5;
  v44 = v88;
  v88(v41, v42);
  v45 = (int *)sub_10001C804();
  sub_1000A7330(v41 + v45[5], v46, v47, v48, v49, v50, v51, v52, v74, v76, (uint64_t)v78, v80, (uint64_t)v83, v86, (uint64_t)v88, v89, v91, v93);
  sub_1000A72E4(v41 + v45[6]);
  sub_1000A72E4(v41 + v45[7]);
  v53 = v41 + v45[8];
  v44(v53, v43);
  v79(v53 + v15[5], v81);
  sub_100016A8C(v53 + v15[6]);
  sub_100016A8C(v53 + v15[7]);
  v54 = type metadata accessor for Precipitation(0);
  sub_100016A94(v54);
  sub_100016A8C(v41 + v45[11]);
  sub_100016A8C(v41 + v45[12]);
  sub_100016A8C(v41 + v45[13]);
  sub_100016A8C(v41 + v45[14]);
  v55 = type metadata accessor for TemperatureScaleConfiguration(0);
  sub_100016A94(v55);
  v56 = sub_1000A7254();
  if (!sub_1000A744C(v56))
    sub_1000A73AC();
  v57 = sub_1000A725C();
  if (!sub_1000A744C(v57))
    sub_1000A73AC();
  v84(v41 + v45[18], v87);
  v58 = a1 + v40[6];
  v59 = type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v58, 1, v59))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v58 + 8));
    v60 = type metadata accessor for AttributedString(0);
    sub_1000A75EC();
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v58 + *(int *)(v59 + 24), 1, v60))
      sub_1000A75EC();
    sub_100016A8C(v58 + *(int *)(v59 + 28));
  }
  v61 = sub_100070DE8();
  sub_100016A94(v61);
  sub_100016A8C(a1 + v40[8]);
  sub_100016B34(v40[11]);
  sub_100016A8C(a1 + v40[12]);
  sub_100016B34(v40[13]);
  sub_100016B34(v40[14]);
  sub_100016B34(v40[15]);
  sub_100016B34(v40[16]);
  sub_100016B34(v40[18]);
  sub_100016B34(v40[19]);
  sub_100016A8C(a1 + v40[25]);
  v62 = (_QWORD *)(a1 + *(int *)(v90 + 20));
  v63 = sub_100005D40(v92);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v62, v63);
  if ((_DWORD)EnumCaseMultiPayload != 1)
    return swift_release(*v62);
  v72 = sub_1000A717C(EnumCaseMultiPayload, v65, v66, v67, v68, v69, v70, v71, v75, v77);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v72 - 8) + 8))(v62, v72);
}

uint64_t sub_1000A4B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A4B24(a1, a2, a3, &qword_1001BF0C8, &type metadata accessor for Font.Context);
}

#error "1000A4C68: call analysis failed (funcsize=237)"

uint64_t sub_1000A4EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A4F10(a1, a2, a3, &qword_1001BF0C8, &type metadata accessor for Font.Context);
}

#error "1000A5204: call analysis failed (funcsize=491)"

uint64_t sub_1000A56E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A56FC(a1, a2, a3, &qword_1001BF0C8, &type metadata accessor for Font.Context);
}

#error "1000A5C6C: call analysis failed (funcsize=348)"

uint64_t sub_1000A5C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A5CA4(a1, a2, a3, &qword_1001BF0C8, &type metadata accessor for Font.Context);
}

#error "1000A6134: call analysis failed (funcsize=403)"

uint64_t sub_1000A631C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A6328);
}

uint64_t sub_1000A6328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A6334(a1, a2, a3);
}

uint64_t sub_1000A6334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  sub_100016B00();
  sub_10001C6C0();
  if (v7)
  {
    v8 = v6;
    v9 = a1;
  }
  else
  {
    v8 = sub_100093528();
    v9 = a1 + *(int *)(a3 + 20);
  }
  return sub_100016B50(v9, a2, v8);
}

uint64_t sub_1000A6388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A6394);
}

uint64_t sub_1000A6394(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1000A63A0(a1, a2, a3);
}

uint64_t sub_1000A63A0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)(*(_QWORD *)(sub_100016B00() - 8) + 84) != a3)
    sub_100093528();
  sub_1000A75F8();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v3, v4, v5, v6);
}

void sub_1000A6410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000A6424(a1, a2, a3, (unint64_t *)&qword_1001BF140, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context);
}

void sub_1000A6424(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[2];

  v8 = type metadata accessor for CurrentObservationViewAttributes(319);
  if (v9 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v8 - 8) + 64;
    sub_10001C028(319, a4, a5);
    if (v11 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v10 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v12, a1 + 16);
    }
  }
}

void sub_1000A64C0()
{
  sub_100016878(&qword_1001C2610, type metadata accessor for SmallConditionDescription);
}

void sub_1000A64EC()
{
  sub_100016A54(&qword_1001C2618, &qword_1001C2620);
}

uint64_t sub_1000A6518(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F840, 1);
}

uint64_t sub_1000A6528(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F818, 1);
}

unint64_t sub_1000A655C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2638;
  if (!qword_1001C2638)
  {
    v1 = sub_100005DC4(&qword_1001C2640);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2638);
  }
  return result;
}

unint64_t sub_1000A65C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2648;
  if (!qword_1001C2648)
  {
    v1 = sub_100005DC4(&qword_1001C2630);
    sub_1000A6648();
    sub_100016A54(&qword_1001C1640, &qword_1001C1620);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2648);
  }
  return result;
}

unint64_t sub_1000A6648()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2650;
  if (!qword_1001C2650)
  {
    v1 = sub_100005DC4(&qword_1001C2628);
    sub_1000A66CC();
    sub_100016A54(&qword_1001C2698, &qword_1001C2358);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2650);
  }
  return result;
}

unint64_t sub_1000A66CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2658;
  if (!qword_1001C2658)
  {
    v1 = sub_100005DC4(&qword_1001C2660);
    sub_1000A6750();
    sub_100016A54(&qword_1001C2688, &qword_1001C2690);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2658);
  }
  return result;
}

unint64_t sub_1000A6750()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2668;
  if (!qword_1001C2668)
  {
    v1 = sub_100005DC4(&qword_1001C2670);
    sub_1000A67D4();
    sub_100016A54(&qword_1001C2678, &qword_1001C2680);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2668);
  }
  return result;
}

unint64_t sub_1000A67D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C1F60;
  if (!qword_1001C1F60)
  {
    v1 = sub_100005DC4(&qword_1001C1F58);
    sub_100016A54(&qword_1001C05F8, &qword_1001C0600);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C1F60);
  }
  return result;
}

uint64_t sub_1000A6858()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = v1[8];
  v5 = (_QWORD *)(v0 + v4);
  v6 = (_QWORD *)(v2 + v4);
  v7 = v6[1];
  *v5 = *v6;
  v5[1] = v7;
  *(_BYTE *)(v0 + v1[9]) = *(_BYTE *)(v2 + v1[9]);
  *(_BYTE *)(v0 + v1[10]) = *(_BYTE *)(v2 + v1[10]);
  *(_QWORD *)(v0 + v1[11]) = *(_QWORD *)(v2 + v1[11]);
  v8 = v1[12];
  v9 = (_QWORD *)(v0 + v8);
  v10 = (_QWORD *)(v2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_QWORD *)(v0 + v1[13]) = *(_QWORD *)(v2 + v1[13]);
  *(_QWORD *)(v0 + v1[14]) = *(_QWORD *)(v2 + v1[14]);
  *(_QWORD *)(v0 + v1[15]) = *(_QWORD *)(v2 + v1[15]);
  v12 = v1[16];
  v13 = *(_QWORD *)(v2 + v12);
  *(_QWORD *)(v3 - 88) = v13;
  *(_QWORD *)(v0 + v12) = v13;
  *(_BYTE *)(v0 + v1[17]) = *(_BYTE *)(v2 + v1[17]);
  *(_QWORD *)(v0 + v1[18]) = *(_QWORD *)(v2 + v1[18]);
  *(_QWORD *)(v0 + v1[19]) = *(_QWORD *)(v2 + v1[19]);
  *(_QWORD *)(v0 + v1[20]) = *(_QWORD *)(v2 + v1[20]);
  *(_BYTE *)(v0 + v1[21]) = *(_BYTE *)(v2 + v1[21]);
  *(_BYTE *)(v0 + v1[22]) = *(_BYTE *)(v2 + v1[22]);
  *(_BYTE *)(v0 + v1[23]) = *(_BYTE *)(v2 + v1[23]);
  *(_BYTE *)(v0 + v1[24]) = *(_BYTE *)(v2 + v1[24]);
  v14 = v1[25];
  v15 = (_QWORD *)(v0 + v14);
  v16 = (_QWORD *)(v2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  *(_BYTE *)(v0 + v1[26]) = *(_BYTE *)(v2 + v1[26]);
  *(_QWORD *)(v0 + v1[27]) = *(_QWORD *)(v2 + v1[27]);
  *(_QWORD *)(v0 + v1[28]) = *(_QWORD *)(v2 + v1[28]);
  return swift_bridgeObjectRetain(v7);
}

void *sub_1000A6988(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

void *sub_1000A699C@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(a1 + 64));
}

uint64_t sub_1000A69AC()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 0, 1, v1);
}

uint64_t sub_1000A69C0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = *a1;
  v2 = a1[1];
  v1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000A69D8(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 0, 1, v1);
}

uint64_t sub_1000A69E8@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = v1[1];
  *v1 = v2;
  v1[1] = v3;
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000A69F8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  *(_QWORD *)(v0 + v2[10]) = *(_QWORD *)(v1 + v2[10]);
  v3 = v2[11];
  v4 = (_QWORD *)(v0 + v3);
  v5 = (_QWORD *)(v1 + v3);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  v7 = v2[12];
  v8 = (_QWORD *)(v0 + v7);
  v9 = (_QWORD *)(v1 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = v2[13];
  v12 = (_QWORD *)(v0 + v11);
  v13 = (_QWORD *)(v1 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = v2[14];
  v16 = (_QWORD *)(v0 + v15);
  v17 = (_QWORD *)(v1 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  return type metadata accessor for TemperatureScaleConfiguration(0);
}

uint64_t sub_1000A6A6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3 + a1;
  _s13WeatherWidget20WeatherDataViewModelOwet_0(v1 + a1, 1, v2);
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v4, 1, v2);
}

uint64_t sub_1000A6AA0()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 0, 1, v1);
}

uint64_t sub_1000A6AB4(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 0, 1, v1);
}

uint64_t sub_1000A6AC4@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t sub_1000A6AD4()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v6 = v0[6];
  v7 = (_QWORD *)(v1 + v6);
  v8 = (_QWORD *)(v3 + v6);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = v0[7];
  v11 = (_QWORD *)(v1 + v10);
  v12 = (_QWORD *)(v3 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  *(_BYTE *)(v1 + v0[8]) = *(_BYTE *)(v3 + v0[8]);
  *(_BYTE *)(v1 + v0[9]) = *(_BYTE *)(v3 + v0[9]);
  *(_BYTE *)(v1 + v0[10]) = *(_BYTE *)(v3 + v0[10]);
  *(_QWORD *)(v2 + *(int *)(v4 + 52)) = *(_QWORD *)(v5 + *(int *)(v4 + 52));
  return type metadata accessor for CloudAltitudeKind(0);
}

uint64_t sub_1000A6B44(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_1000A6B50()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v0[8]) = *(_BYTE *)(v2 + v0[8]);
  *(_BYTE *)(v1 + v0[9]) = *(_BYTE *)(v2 + v0[9]);
  *(_BYTE *)(v1 + v0[10]) = *(_BYTE *)(v2 + v0[10]);
  return type metadata accessor for Precipitation(0);
}

uint64_t sub_1000A6B88(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 0, 1, v1);
}

uint64_t sub_1000A6B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v0 + *(int *)(v1 + 24), 1, v2);
}

uint64_t sub_1000A6BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

uint64_t sub_1000A6BE0()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = v0[6];
  v4 = (_QWORD *)(v1 + v3);
  v5 = (_QWORD *)(v2 + v3);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  v7 = v0[7];
  v8 = (_QWORD *)(v1 + v7);
  v9 = (_QWORD *)(v2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  *(_BYTE *)(v1 + v0[8]) = *(_BYTE *)(v2 + v0[8]);
  *(_BYTE *)(v1 + v0[9]) = *(_BYTE *)(v2 + v0[9]);
  *(_BYTE *)(v1 + v0[10]) = *(_BYTE *)(v2 + v0[10]);
  return type metadata accessor for Precipitation(0);
}

void *sub_1000A6C40(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

void *sub_1000A6C54(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

uint64_t sub_1000A6C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;

  *(_BYTE *)(v1 + v5[8]) = *(_BYTE *)(v4 + v5[8]);
  *(_BYTE *)(v1 + v5[9]) = *(_BYTE *)(v4 + v5[9]);
  *(_BYTE *)(v1 + v5[10]) = *(_BYTE *)(v4 + v5[10]);
  *(_QWORD *)(v0 + *(int *)(v3 + 52)) = *(_QWORD *)(v2 + *(int *)(v3 + 52));
  return type metadata accessor for CloudAltitudeKind(0);
}

uint64_t sub_1000A6CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

double sub_1000A6CB8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  double result;

  v3 = v2[20];
  result = *(double *)(v1 + v3);
  *(double *)(v0 + v3) = result;
  *(_BYTE *)(v0 + v2[21]) = *(_BYTE *)(v1 + v2[21]);
  *(_BYTE *)(v0 + v2[22]) = *(_BYTE *)(v1 + v2[22]);
  *(_BYTE *)(v0 + v2[23]) = *(_BYTE *)(v1 + v2[23]);
  *(_BYTE *)(v0 + v2[24]) = *(_BYTE *)(v1 + v2[24]);
  return result;
}

void *sub_1000A6D04(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

uint64_t sub_1000A6D18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + a1);
  *(_QWORD *)(v1 + a1) = *(_QWORD *)(v2 + a1);
  return swift_release(v3);
}

uint64_t sub_1000A6D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v1, v2);
}

uint64_t sub_1000A6D38()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v1, v2, v3);
}

uint64_t sub_1000A6D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
}

uint64_t sub_1000A6D60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + a1);
  *(_QWORD *)(v1 + a1) = v3;
  return swift_retain(v3);
}

uint64_t sub_1000A6D70(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_1000A6D7C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000A6D88@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000A6D94(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000A6D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1000A6DA4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1000A6DAC(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_1000A6DB8()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v0, 1, v1);
}

uint64_t sub_1000A6DC8()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, v0);
}

uint64_t sub_1000A6DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t (*a19)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  return a19(v19, v20, v21);
}

uint64_t sub_1000A6DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t (*a20)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  return a20(v21, v22, v20);
}

void *sub_1000A6E04(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

void *sub_1000A6E18(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

uint64_t sub_1000A6E2C()
{
  return type metadata accessor for AttributedString(0);
}

uint64_t sub_1000A6E40()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return v0(v1 + *(int *)(v2 + 32), v4 + *(int *)(v2 + 32), v3);
}

uint64_t sub_1000A6E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a14 + 8))(v15, v14);
}

void sub_1000A6E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v0 + *(int *)(v2 + 36)) = *(_BYTE *)(v1 + *(int *)(v2 + 36));
  *(_BYTE *)(v0 + *(int *)(v2 + 40)) = *(_BYTE *)(v1 + *(int *)(v2 + 40));
}

uint64_t sub_1000A6E90(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000A6E98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

uint64_t sub_1000A6EB0()
{
  return type metadata accessor for AttributedString(0);
}

uint64_t sub_1000A6EBC()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_1000A6ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(int *)(v2 + 44);
  v5 = v1 + v4;
  _s13WeatherWidget20WeatherDataViewModelOwet_0(v0 + v4, 1, v3);
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v5, 1, v3);
}

uint64_t sub_1000A6F30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 88))(v0 + *(int *)(v2 + 48), v1 + *(int *)(v2 + 48), v3);
}

uint64_t sub_1000A6F58@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v3, v1);
}

uint64_t sub_1000A6F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 - 88))(v18 + *(int *)(a1 + 20), v19 + *(int *)(a1 + 20), a18);
}

uint64_t sub_1000A6F90()
{
  return type metadata accessor for Wind(0);
}

uint64_t sub_1000A6FA4()
{
  return type metadata accessor for UVIndex(0);
}

uint64_t sub_1000A6FB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(int *)(v1 + 36);
  v4 = (_QWORD *)(v0 + v3);
  v5 = (_QWORD *)(v2 + v3);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_1000A6FDC()
{
  return type metadata accessor for Location(0);
}

uint64_t sub_1000A6FF0()
{
  return type metadata accessor for RainInlineContentViewModel(0);
}

uint64_t sub_1000A7004@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000A7010()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 0, 1, v1);
}

uint64_t sub_1000A7024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + *(int *)(v2 + 76)) = *(_QWORD *)(v1 + *(int *)(v2 + 76));
  return type metadata accessor for RainInlineContentViewModel(0);
}

uint64_t sub_1000A7048()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return v1(v0 + *(int *)(v2 + 28), v4 + *(int *)(v2 + 28), v3);
}

uint64_t sub_1000A705C()
{
  return type metadata accessor for WeatherCondition(0);
}

uint64_t sub_1000A7070(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v2 + *(int *)(a1 + 20), v3 + *(int *)(a1 + 20), v1);
}

uint64_t sub_1000A7094()
{
  return type metadata accessor for MoonEvents(0);
}

uint64_t sub_1000A70A8()
{
  return type metadata accessor for SunEvents(0);
}

double sub_1000A70BC()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  double result;

  *(_BYTE *)(v0 + v2[26]) = *(_BYTE *)(v1 + v2[26]);
  *(_QWORD *)(v0 + v2[27]) = *(_QWORD *)(v1 + v2[27]);
  v3 = v2[28];
  result = *(double *)(v1 + v3);
  *(double *)(v0 + v3) = result;
  return result;
}

uint64_t sub_1000A70E8()
{
  return type metadata accessor for TemperatureScaleConfiguration(0);
}

uint64_t sub_1000A70FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v21 + *(int *)(v20 + 60), 1, a20);
}

void sub_1000A711C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + a1) = *(_QWORD *)(v2 + a1);
}

uint64_t sub_1000A7128(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_1000A7144(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2);
}

uint64_t sub_1000A7160(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2);
}

uint64_t sub_1000A717C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(_QWORD))
{
  return a10(0);
}

uint64_t sub_1000A7188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v0, v1, v3);
}

uint64_t sub_1000A7198()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000A71A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v1 + *(int *)(v3 + 32), v2 + *(int *)(v3 + 32), v0);
}

uint64_t sub_1000A71BC()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_1000A71CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + *(int *)(v1 + 76)) = *(_QWORD *)(v2 + *(int *)(v1 + 76));
  return *(_QWORD *)(v2 + *(int *)(v1 + 80) + 8);
}

uint64_t sub_1000A71EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t (*a15)(uint64_t, uint64_t, uint64_t), uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;

  return a15(v17 + *(int *)(a17 + 20), v18 + *(int *)(a17 + 20), a16);
}

uint64_t sub_1000A7204()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000A720C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = v1;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000A7224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(int *)(v2 + 28);
  v4 = (_QWORD *)(v0 + v3);
  v5 = (_QWORD *)(v1 + v3);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_1000A723C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v2, v1, a1);
}

uint64_t sub_1000A7254()
{
  return type metadata accessor for SunEvents(0);
}

uint64_t sub_1000A725C()
{
  return type metadata accessor for MoonEvents(0);
}

uint64_t sub_1000A7264()
{
  return type metadata accessor for CurrentObservationViewModel(0);
}

uint64_t sub_1000A726C()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_1000A7274()
{
  return type metadata accessor for ConditionViewModel(0);
}

uint64_t sub_1000A727C()
{
  return type metadata accessor for WeatherCondition(0);
}

uint64_t sub_1000A7284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t), uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  return a10(v12 + *(int *)(a12 + 20), v13 + *(int *)(a12 + 20), a11);
}

uint64_t sub_1000A729C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(v1 + *(int *)(v3 + 24), v4 + *(int *)(v3 + 24), v0);
}

uint64_t sub_1000A72B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v0 + *(int *)(v3 + 24), v1 + *(int *)(v3 + 24), v2);
}

uint64_t sub_1000A72CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t (*a19)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  return a19(v19 + *(int *)(v20 + 24), v22 + *(int *)(v20 + 24), v21);
}

uint64_t sub_1000A72E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000A72EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t (*a19)(uint64_t, uint64_t, uint64_t), uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;

  return a19(v20 + *(int *)(a1 + 20), v21 + *(int *)(a1 + 20), a20);
}

uint64_t sub_1000A7304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t (*a20)(uint64_t, uint64_t, uint64_t),uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;

  return a20(v21 + *(int *)(a1 + 20), v22 + *(int *)(a1 + 20), a21);
}

uint64_t sub_1000A731C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *v2 = *a2;
  v2[1] = a1;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000A7330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(uint64_t, uint64_t))
{
  uint64_t v18;

  return a18(a1, v18);
}

uint64_t sub_1000A733C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t, uint64_t), uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return a13(v14 + *(int *)(v15 + 72), v16 + *(int *)(v15 + 72), a14);
}

double sub_1000A7350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v3 = *(int *)(v1 + 40);
  result = *(double *)(v2 + v3);
  *(double *)(v0 + v3) = result;
  return result;
}

uint64_t sub_1000A736C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 88) + 8))(v0, v1);
}

uint64_t sub_1000A7380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v2 + *(int *)(v0 + 64), 1, v1);
}

uint64_t sub_1000A73AC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_1000A73C0()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v1, v2, v3);
}

uint64_t sub_1000A73D4@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v3, v1);
}

uint64_t sub_1000A73E8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000A73FC@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 88) = a1;
  return a1(v1, v2, v3);
}

uint64_t sub_1000A7410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v0 + *(int *)(v2 + 32), v1 + *(int *)(v2 + 32), v3);
}

void *sub_1000A7424(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

uint64_t sub_1000A7438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t, uint64_t), uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return a13(v14 + *(int *)(v16 + 72), v15 + *(int *)(v16 + 72), a14);
}

uint64_t sub_1000A744C(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
}

uint64_t sub_1000A7460@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v3, v2);
}

uint64_t sub_1000A7474@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1000A7480(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

double sub_1000A7490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v3 = *(int *)(v2 + 76);
  result = *(double *)(v1 + v3);
  *(double *)(v0 + v3) = result;
  return result;
}

uint64_t sub_1000A74A8@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1000A74C0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  return sub_100006E58(v0, v1, v2);
}

uint64_t sub_1000A74E0(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

uint64_t sub_1000A74F0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v3, v0);
}

uint64_t sub_1000A7500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v1, v2);
}

uint64_t sub_1000A7510()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, v1, 1);
}

void sub_1000A7520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + *(int *)(v2 + 76)) = *(_QWORD *)(v1 + *(int *)(v2 + 76));
}

__n128 sub_1000A7534@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v2 + a1);
  *(__n128 *)(v1 + a1) = result;
  return result;
}

uint64_t sub_1000A7540()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;

  result = sub_100006E58(v0, v1, v2);
  *(_QWORD *)(v3 + 16) = v0;
  *(_QWORD *)(v3 + 24) = v1;
  *(_BYTE *)(v3 + 32) = v2;
  return result;
}

uint64_t sub_1000A7564(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
}

uint64_t sub_1000A7588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(_QWORD))
{
  return a9(0);
}

void sub_1000A7594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + *(int *)(v2 + 52)) = *(_QWORD *)(v1 + *(int *)(v2 + 52));
}

__n128 sub_1000A75A8@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v2 + a1);
  *(__n128 *)(v1 + a1) = result;
  return result;
}

uint64_t sub_1000A75B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v0;
  *v1 = *v0;
  return swift_retain(v2);
}

uint64_t sub_1000A75C0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000A75C8()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 0, 1, v1);
}

uint64_t sub_1000A75EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000A7604()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t sub_1000A7610()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t result;

  *v0 = *v1;
  result = v1[1];
  v0[1] = result;
  return result;
}

__n128 sub_1000A7624@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 32) = *(_BYTE *)(a1 + 32);
  return result;
}

uint64_t sub_1000A7638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;

  return v20(a20, a19, v21);
}

uint64_t destroy for AggregateWeatherViewModelFactory(_QWORD *a1)
{
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1 + 5);
  swift_release(a1[10]);
  return _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1 + 11);
}

uint64_t initializeWithCopy for AggregateWeatherViewModelFactory(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v6;
  v7 = a2 + 88;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_retain(v6);
  v10(a1 + 88, v7, v9);
  return a1;
}

_QWORD *assignWithCopy for AggregateWeatherViewModelFactory(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1000A777C(a1, a2);
  sub_1000A777C(a1 + 5, a2 + 5);
  v4 = a2[10];
  v5 = a1[10];
  a1[10] = v4;
  swift_retain(v4);
  swift_release(v5);
  sub_1000A777C(a1 + 11, a2 + 11);
  return a1;
}

_QWORD *sub_1000A777C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

void *initializeWithTake for AggregateWeatherViewModelFactory(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80uLL);
}

uint64_t assignWithTake for AggregateWeatherViewModelFactory(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  swift_release(v6);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for AggregateWeatherViewModelFactory(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 128))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AggregateWeatherViewModelFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AggregateWeatherViewModelFactory()
{
  return &type metadata for AggregateWeatherViewModelFactory;
}

uint64_t sub_1000A7A1C@<X0>(void (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t (*)(uint64_t, uint64_t), uint64_t);
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t);
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t result;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t (*v109)(_QWORD, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  void (*v125)(uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t (*v141)(uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v123 = a3;
  v125 = a1;
  v119 = a4;
  v5 = type metadata accessor for URL(0);
  v120 = *(_QWORD *)(v5 - 8);
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_100023150();
  v117 = v7;
  sub_100023164();
  __chkstk_darwin(v8);
  sub_1000232B4();
  v129 = v9;
  sub_100023164();
  __chkstk_darwin(v10);
  sub_1000232B4();
  v132 = v11;
  sub_100023164();
  __chkstk_darwin(v12);
  v133 = (uint64_t)&v108 - v13;
  v14 = sub_100093378();
  v115 = type metadata accessor for WeatherAttribution(v14);
  v114 = *(_QWORD *)(v115 - 8);
  sub_1000230F4();
  __chkstk_darwin(v15);
  sub_1000230E0();
  v113 = v16;
  sub_100005D40(&qword_1001BFA28);
  sub_1000230F4();
  __chkstk_darwin(v17);
  sub_100023150();
  v121 = v18;
  sub_100023164();
  __chkstk_darwin(v19);
  sub_1000232B4();
  v128 = v20;
  sub_100023164();
  __chkstk_darwin(v21);
  sub_1000232B4();
  v126 = v22;
  sub_100023164();
  __chkstk_darwin(v23);
  sub_1000232B4();
  v122 = v24;
  sub_100023164();
  __chkstk_darwin(v25);
  v118 = (char *)&v108 - v26;
  v27 = sub_100093378();
  v28 = type metadata accessor for Location(v27);
  v139 = *(_QWORD *)(v28 - 8);
  v140 = v28;
  sub_1000230F4();
  __chkstk_darwin(v29);
  sub_1000230E0();
  v138 = v30;
  v31 = sub_100093378();
  v112 = type metadata accessor for UUID(v31);
  v111 = *(_QWORD *)(v112 - 8);
  sub_1000230F4();
  __chkstk_darwin(v32);
  sub_1000230E0();
  v136 = v33;
  sub_100005D40(&qword_1001BFA38);
  sub_1000230F4();
  __chkstk_darwin(v34);
  sub_100023150();
  v137 = v35;
  sub_100023164();
  __chkstk_darwin(v36);
  v38 = (char *)&v108 - v37;
  type metadata accessor for CurrentObservationViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v39);
  sub_100023150();
  v135 = v40;
  sub_100023164();
  __chkstk_darwin(v41);
  v43 = (uint64_t *)((char *)&v108 - v42);
  sub_100005D40(&qword_1001BFA30);
  sub_1000230F4();
  __chkstk_darwin(v44);
  sub_100023150();
  v134 = v45;
  sub_100023164();
  __chkstk_darwin(v46);
  v142 = (uint64_t)&v108 - v47;
  v48 = sub_100093378();
  v49 = type metadata accessor for TimeZone(v48);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = __chkstk_darwin(v49);
  v53 = (char *)&v108 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __chkstk_darwin(v51);
  v56 = (char *)&v108 - v55;
  v57 = __chkstk_darwin(v54);
  v59 = (uint64_t (*)(uint64_t, uint64_t))((char *)&v108 - v58);
  v127 = a2;
  Location.timeZone.getter(v57);
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v60 = type metadata accessor for Logger(0);
  v61 = sub_100025184(v60, (uint64_t)qword_1001D9FF0);
  v62 = *(uint64_t (**)(char *, uint64_t (*)(uint64_t, uint64_t), uint64_t))(v50 + 16);
  v141 = v59;
  v63 = v62(v56, v59, v49);
  v110 = v61;
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.default.getter(v64);
  v66 = os_log_type_enabled(v64, v65);
  v130 = v43;
  v131 = v38;
  v116 = v49;
  if (v66)
  {
    v67 = (uint8_t *)sub_100025358(12);
    v68 = sub_100025358(32);
    v108 = v5;
    v69 = v68;
    v144 = v68;
    *(_DWORD *)v67 = 136446210;
    v109 = (uint64_t (*)(_QWORD, uint64_t))(v67 + 4);
    v62(v53, (uint64_t (*)(uint64_t, uint64_t))v56, v49);
    v70 = String.init<A>(reflecting:)(v53, v49);
    v72 = v71;
    v143 = sub_10016EC84(v70, v71, &v144);
    v38 = v131;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v109);
    swift_bridgeObjectRelease(v72);
    sub_1000A86F8();
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "Building aggregate weather data model. - timeZone: %{public}s", v67, 0xCu);
    swift_arrayDestroy(v69, 1);
    v73 = v69;
    v5 = v108;
    sub_10002534C(v73);
    v74 = (uint64_t)v67;
    v43 = v130;
    sub_10002534C(v74);
  }
  else
  {
    sub_1000A86F8();
  }

  v75 = v125;
  v76 = v126;
  v77 = v142;
  sub_10008A8FC(v142);
  v78 = v141;
  v79 = v123;
  sub_100102BFC((uint64_t)v75, v141, (uint64_t)v123, v43);
  v126 = sub_1000B9754(v75, (uint64_t)v78, (uint64_t)v79);
  v80 = v124;
  v123 = sub_1000FB87C((uint64_t)v75, (uint64_t)v78);
  v81 = v127;
  sub_1000A838C(v127, (uint64_t)v38);
  v124 = sub_1000255C8((uint64_t)v75, (uint64_t)v78, 0, v80[10]);
  v82 = sub_10002F450();
  v84 = v83;
  UUID.init()(v82);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 16))(v138, v81, v140);
  sub_10002246C((uint64_t)v43, v135);
  sub_1000168D8(v77, v134, &qword_1001BFA30);
  sub_1000168D8((uint64_t)v38, v137, &qword_1001BFA38);
  sub_1000A8718();
  v85 = v122;
  URL.init(string:)(0xD000000000000033);
  result = sub_1000A86DC(v85);
  v87 = v128;
  v88 = v129;
  if (v89)
  {
    __break(1u);
    goto LABEL_14;
  }
  sub_1000A8710(v133, v85);
  sub_1000A8718();
  URL.init(string:)(v90);
  result = sub_1000A86DC(v76);
  v91 = v121;
  if (v89)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1000A8710(v132, v76);
  sub_1000A8718();
  URL.init(string:)(v92);
  result = sub_1000A86DC(v87);
  if (v89)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_1000A8710(v88, v87);
  sub_1000A8718();
  URL.init(string:)(v93);
  result = sub_1000A86DC(v91);
  if (v89)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  v94 = v84;
  LODWORD(v128) = v84 >> 8;
  v127 = HIBYTE(v82);
  v125 = (void (*)(uint64_t, uint64_t))HIWORD(v82);
  v122 = v82 >> 40;
  v95 = v117;
  sub_1000A8710(v117, v91);
  v96 = v113;
  v97 = WeatherAttribution.init(serviceName:legalPageURL:squareMarkURL:combinedMarkDarkURL:combinedMarkLightURL:)(0x655720656C707041, 0xED00007265687461, v133, v132, v88, v95);
  v98 = (uint64_t)v118;
  WeatherAttribution.legalPageURL.getter(v97);
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v96, v115);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v98, 0, 1, v5);
  v99 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  v100 = v119;
  v101 = v119 + v99[14];
  v102 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v101, 1, 1, v102);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 32))(v100, v136, v112);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 32))(v100 + v99[5], v138, v140);
  sub_1000A865C(v135, v100 + v99[6]);
  *(_QWORD *)(v100 + v99[7]) = v126;
  *(_QWORD *)(v100 + v99[8]) = v123;
  sub_1000168AC(v134, v100 + v99[9], &qword_1001BFA30);
  sub_1000168AC(v137, v100 + v99[10], &qword_1001BFA38);
  *(_QWORD *)(v100 + v99[11]) = v124;
  v103 = v100 + v99[12];
  *(_WORD *)v103 = v82;
  *(_BYTE *)(v103 + 2) = BYTE2(v82);
  *(_BYTE *)(v103 + 3) = BYTE3(v82);
  *(_BYTE *)(v103 + 4) = BYTE4(v82);
  *(_BYTE *)(v103 + 5) = v122;
  *(_BYTE *)(v103 + 6) = (_BYTE)v125;
  *(_BYTE *)(v103 + 7) = v127;
  *(_BYTE *)(v103 + 8) = v94;
  *(_BYTE *)(v103 + 9) = v128;
  sub_1000168AC(v98, v100 + v99[13], &qword_1001BFA28);
  v105 = Logger.logObject.getter(v104);
  v106 = static os_log_type_t.default.getter(v105);
  if (os_log_type_enabled(v105, v106))
  {
    v107 = (uint8_t *)sub_100025358(2);
    *(_WORD *)v107 = 0;
    _os_log_impl((void *)&_mh_execute_header, v105, v106, "Built aggregate weather data model.", v107, 2u);
    sub_10002534C((uint64_t)v107);
  }

  sub_10002F014((uint64_t)v131, &qword_1001BFA38);
  sub_1000A86A0((uint64_t)v130);
  sub_10002F014(v142, &qword_1001BFA30);
  return v109(v141, v116);
}

uint64_t sub_1000A838C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t HourPrecipitationChartPlacement;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a1;
  v36 = a2;
  v35 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  HourPrecipitationChartPlacement = type metadata accessor for NextHourPrecipitationChartPlacement(0);
  v31 = *(_QWORD *)(HourPrecipitationChartPlacement - 8);
  v32 = HourPrecipitationChartPlacement;
  __chkstk_darwin(HourPrecipitationChartPlacement);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PrecipitationRelevancyWindow(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005D40(&qword_1001BF9E8);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005D40(&qword_1001BF9F0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  WeatherDataModel.minuteForecast.getter(v16);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v14) == 1)
  {
    sub_10002F014((uint64_t)v13, &qword_1001BF9E8);
LABEL_6:
    v26 = 1;
    v25 = v36;
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for PrecipitationRelevancyWindow.default(_:), v7);
  v19 = Forecast<>.isRelevant(in:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    goto LABEL_6;
  }
  v20 = v30 + 5;
  v21 = v30[8];
  v30 = (_QWORD *)v30[9];
  sub_100022330(v20, v21);
  v22 = v31;
  v23 = v32;
  v24 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v31 + 104))(v6, enum case for NextHourPrecipitationChartPlacement.component(_:), v32);
  Date.init()(v24);
  v25 = v36;
  dispatch thunk of NextHourPrecipitationChartViewModelFactoryType.makeViewModel(for:precipitation:placement:currentTime:)(v34, v18, v6, v3, v21, v30);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v3, v35);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v23);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v26 = 0;
LABEL_7:
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v25, v26, 1, HourPrecipitationChartViewModel);
}

uint64_t sub_1000A865C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CurrentObservationViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A86A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CurrentObservationViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A86DC(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_1000A86F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  *(_QWORD *)(v3 - 376) = v4;
  return v4(v1, v0);
}

uint64_t sub_1000A8710(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000A8724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A8730);
}

uint64_t sub_1000A8730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = type metadata accessor for ForecastEntry(0);
    v8 = a1 + *(int *)(a3 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
}

uint64_t sub_1000A879C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A87A8);
}

uint64_t sub_1000A87A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = type metadata accessor for ForecastEntry(0);
    v10 = a1 + *(int *)(a4 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for MoonContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C26F8;
  if (!qword_1001C26F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MoonContentView);
  return result;
}

uint64_t sub_1000A8854(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F8AC, 1);
}

uint64_t sub_1000A8864@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000A886C(v1, a1);
}

uint64_t sub_1000A886C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t result;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  Swift::String v45;
  _DWORD *v46;
  uint64_t v47;
  Swift::String v48;
  void *object;
  __n128 v50;
  Swift::String v51;
  uint64_t v52;
  unint64_t v53;
  Swift::String v54;
  _DWORD *v55;
  uint64_t v56;
  Swift::String v57;
  void *v58;
  __n128 v59;
  Swift::String v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;

  v77 = a2;
  v67 = sub_100005D40(&qword_1001C2730);
  __chkstk_darwin(v67);
  v68 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100005D40(&qword_1001C2738);
  __chkstk_darwin(v76);
  v72 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MoonInlineContentView(0);
  v70 = *(_QWORD *)(v5 - 8);
  v71 = v5;
  __chkstk_darwin(v5);
  v69 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100005D40(&qword_1001C2740);
  __chkstk_darwin(v74);
  v75 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100005D40(&qword_1001C2748);
  __chkstk_darwin(v64);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100005D40(&qword_1001C2750);
  __chkstk_darwin(v73);
  v66 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MoonComplicationDataStatus(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MoonRectangularContentView(0);
  v65 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MoonContentView(0);
  v18 = __chkstk_darwin(v17);
  v61 = (uint64_t)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v61 - v20;
  v22 = type metadata accessor for WidgetFamily(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v62 = (_DWORD *)((char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v24);
  v27 = (char *)&v61 - v26;
  sub_1000C54B0((uint64_t *)((char *)&v61 - v26));
  v63 = v23;
  v28 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v27, v22);
  if (v28 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_1000A8F78(a1, (uint64_t)v21);
    v78 = 0;
    v79 = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v45._countAndFlagsBits = 0xD000000000000021;
    v45._object = (void *)0x8000000100186340;
    String.append(_:)(v45);
    v46 = v62;
    sub_1000C54B0(v62);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v22, v47);
    object = v48._object;
    String.append(_:)(v48);
    v50 = swift_bridgeObjectRelease(object);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v63 + 8))(v46, v22, v50);
    v51._object = (void *)0x80000001001878E0;
    v51._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v51);
    v52 = v78;
    v53 = v79;
LABEL_9:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v52, v53, "WeatherWidget/MoonContentView.swift", 35, 2);
    __break(1u);
    return result;
  }
  if (v28 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    sub_100028BF8((uint64_t)v13);
    MoonRectangularContentView.init(status:)(v13);
    v29 = v65;
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v9, v16, v14);
    swift_storeEnumTagMultiPayload(v9, v64, 1);
    sub_10002EF14(&qword_1001C2768, (uint64_t (*)(uint64_t))&type metadata accessor for MoonRectangularContentView, (uint64_t)&protocol conformance descriptor for MoonRectangularContentView);
    v30 = (uint64_t)v66;
    _ConditionalContent<>.init(storage:)(v9, &type metadata for Never, v14, &protocol witness table for Never, v31);
    v32 = v75;
    sub_10002EFD4(v30, v75, &qword_1001C2750);
    swift_storeEnumTagMultiPayload(v32, v74, 0);
    v33 = sub_1000A8FBC();
    v34 = sub_1000A9040();
    _ConditionalContent<>.init(storage:)(v32, v73, v76, v33, v34);
    sub_10002F014(v30, &qword_1001C2750);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v16, v14);
  }
  if (v28 != enum case for WidgetFamily.accessoryInline(_:))
  {
    sub_1000A8F78(a1, v61);
    v78 = 0;
    v79 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v54._countAndFlagsBits = 0xD000000000000022;
    v54._object = (void *)0x80000001001862F0;
    String.append(_:)(v54);
    v55 = v62;
    sub_1000C54B0(v62);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v22, v56);
    v58 = v57._object;
    String.append(_:)(v57);
    v59 = swift_bridgeObjectRelease(v58);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v63 + 8))(v55, v22, v59);
    v60._object = (void *)0x80000001001878E0;
    v60._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v60);
    v52 = v78;
    v53 = v79;
    goto LABEL_9;
  }
  sub_100028BF8((uint64_t)v13);
  v36 = v69;
  MoonInlineContentView.init(status:)(v13);
  v38 = v70;
  v37 = v71;
  v39 = v68;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v68, v36, v71);
  swift_storeEnumTagMultiPayload(v39, v67, 0);
  sub_10002EF14(&qword_1001C2758, (uint64_t (*)(uint64_t))&type metadata accessor for MoonInlineContentView, (uint64_t)&protocol conformance descriptor for MoonInlineContentView);
  v40 = (uint64_t)v72;
  _ConditionalContent<>.init(storage:)(v39, v37, &type metadata for Never, v41, &protocol witness table for Never);
  v42 = v75;
  sub_10002EFD4(v40, v75, &qword_1001C2738);
  swift_storeEnumTagMultiPayload(v42, v74, 1);
  v43 = sub_1000A8FBC();
  v44 = sub_1000A9040();
  _ConditionalContent<>.init(storage:)(v42, v73, v76, v43, v44);
  sub_10002F014(v40, &qword_1001C2738);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v36, v37);
}

uint64_t sub_1000A8F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MoonContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A8FBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2760;
  if (!qword_1001C2760)
  {
    v1 = sub_100005DC4(&qword_1001C2750);
    sub_10002EF14(&qword_1001C2768, (uint64_t (*)(uint64_t))&type metadata accessor for MoonRectangularContentView, (uint64_t)&protocol conformance descriptor for MoonRectangularContentView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2760);
  }
  return result;
}

unint64_t sub_1000A9040()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2770;
  if (!qword_1001C2770)
  {
    v1 = sub_100005DC4(&qword_1001C2738);
    sub_10002EF14(&qword_1001C2758, (uint64_t (*)(uint64_t))&type metadata accessor for MoonInlineContentView, (uint64_t)&protocol conformance descriptor for MoonInlineContentView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2770);
  }
  return result;
}

unint64_t sub_1000A90C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2778;
  if (!qword_1001C2778)
  {
    v1 = sub_100005DC4(&qword_1001C2780);
    sub_1000A912C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2778);
  }
  return result;
}

unint64_t sub_1000A912C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2788;
  if (!qword_1001C2788)
  {
    v1 = sub_100005DC4(&qword_1001C2790);
    sub_1000A8FBC();
    sub_1000A9040();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2788);
  }
  return result;
}

uint64_t *sub_1000A9198(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for AirQualityScale(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[8];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for AirQualityScaleCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t sub_1000A92A8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for AirQualityScale(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[8];
  v10 = type metadata accessor for AirQualityScaleCategory(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t sub_1000A9354(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for AirQualityScale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for AirQualityScaleCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t sub_1000A9438(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for AirQualityScale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for AirQualityScaleCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t sub_1000A9520(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for AirQualityScale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for AirQualityScaleCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t sub_1000A9604(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for AirQualityScale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for AirQualityScaleCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t sub_1000A96E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A96F4);
}

uint64_t sub_1000A96F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  sub_100023394();
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    type metadata accessor for Date(0);
    sub_10001C6C0();
    if (v9)
    {
      v7 = v10;
      v11 = a3[5];
    }
    else
    {
      type metadata accessor for AirQualityScale(0);
      sub_10001C6C0();
      if (v12)
      {
        v7 = v13;
        v11 = a3[7];
      }
      else
      {
        v7 = type metadata accessor for AirQualityScaleCategory(0);
        v11 = a3[8];
      }
    }
    v8 = v4 + v11;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
}

uint64_t sub_1000A9780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A978C);
}

uint64_t sub_1000A978C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_100023394();
  sub_10001C6D0();
  if (v10)
  {
    v8 = v7;
    v9 = v5;
  }
  else
  {
    type metadata accessor for Date(0);
    sub_10001C6D0();
    if (v10)
    {
      v8 = v11;
      v12 = a4[5];
    }
    else
    {
      type metadata accessor for AirQualityScale(0);
      sub_10001C6D0();
      if (v13)
      {
        v8 = v14;
        v12 = a4[7];
      }
      else
      {
        v8 = type metadata accessor for AirQualityScaleCategory(0);
        v12 = a4[8];
      }
    }
    v9 = v5 + v12;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v9, v4, v4, v8);
}

uint64_t type metadata accessor for AirQualityViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C27F0;
  if (!qword_1001C27F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirQualityViewModel);
  return result;
}

uint64_t sub_1000A9858(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v7[1] = *(_QWORD *)(result - 8) + 64;
      v7[2] = (char *)&value witness table for Builtin.Int64 + 64;
      result = type metadata accessor for AirQualityScale(319);
      if (v5 <= 0x3F)
      {
        v7[3] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for AirQualityScaleCategory(319);
        if (v6 <= 0x3F)
        {
          v7[4] = *(_QWORD *)(result - 8) + 64;
          swift_initStructMetadata(a1, 256, 5, v7, a1 + 16);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000A9920(uint64_t a1, uint64_t a2)
{
  int *v4;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0
    && (v4 = (int *)type metadata accessor for AirQualityViewModel(0),
        (static Date.== infix(_:_:)(a1 + v4[5], a2 + v4[5]) & 1) != 0)
    && *(_QWORD *)(a1 + v4[6]) == *(_QWORD *)(a2 + v4[6])
    && (static AirQualityScale.== infix(_:_:)(a1 + v4[7], a2 + v4[7]) & 1) != 0)
  {
    return static AirQualityScaleCategory.== infix(_:_:)(a1 + v4[8], a2 + v4[8]);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000A99B8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  char v13;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    v10 = 0xE500000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x656C616373 && a2 == 0xE500000000000000)
  {
    v12 = 0xE500000000000000;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C616373, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100187900)
  {
    swift_bridgeObjectRelease(0x8000000100187900);
    return 4;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100187900, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1000A9B94()
{
  return 5;
}

uint64_t sub_1000A9B9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A9BC4 + 4 * byte_10017E410[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1000A9BC4()
{
  return 1702125924;
}

uint64_t sub_1000A9BD4()
{
  return 0x7865646E69;
}

uint64_t sub_1000A9BE8()
{
  return 0x656C616373;
}

unint64_t sub_1000A9BFC()
{
  return 0xD000000000000014;
}

uint64_t sub_1000A9C18(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v3 = v1;
  v5 = sub_100005D40(&qword_1001C2838);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002325C();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_100022330(a1, v10);
  v12 = sub_1000AA3C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirQualityViewModel.CodingKeys, &type metadata for AirQualityViewModel.CodingKeys, v12, v10, v11);
  type metadata accessor for UUID(0);
  sub_1000061B0(&qword_1001BF778, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_100049D40();
  if (!v2)
  {
    v13 = type metadata accessor for AirQualityViewModel(0);
    type metadata accessor for Date(0);
    sub_1000061B0(&qword_1001BF780, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    sub_100049D40();
    KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)(v3 + *(int *)(v13 + 24)));
    type metadata accessor for AirQualityScale(0);
    sub_1000061B0(&qword_1001C2848, (uint64_t (*)(uint64_t))&type metadata accessor for AirQualityScale, (uint64_t)&protocol conformance descriptor for AirQualityScale);
    sub_100049D40();
    type metadata accessor for AirQualityScaleCategory(0);
    sub_1000061B0(&qword_1001C2850, (uint64_t (*)(uint64_t))&type metadata accessor for AirQualityScaleCategory, (uint64_t)&protocol conformance descriptor for AirQualityScaleCategory);
    sub_100049D40();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000A9E64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v23 = type metadata accessor for AirQualityScaleCategory(0);
  v20 = *(_QWORD *)(v23 - 8);
  sub_1000230F4();
  __chkstk_darwin(v3);
  sub_1000230E0();
  v22 = v4;
  v29 = type metadata accessor for AirQualityScale(0);
  v25 = *(_QWORD *)(v29 - 8);
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_1000230E0();
  v24 = v6;
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_1000230E0();
  v26 = v8;
  v32 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_1000230E0();
  v31 = v10;
  v30 = sub_100005D40(&qword_1001C2858);
  __chkstk_darwin(v30);
  sub_10002325C();
  v11 = (int *)type metadata accessor for AirQualityViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v12);
  sub_10002325C();
  v15 = v14 - v13;
  v16 = a1[3];
  v17 = a1[4];
  sub_100022330(a1, v16);
  v18 = sub_1000AA3C0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AirQualityViewModel.CodingKeys, &type metadata for AirQualityViewModel.CodingKeys, v18, v16, v17);
  if (v33)
    return _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
  v38 = 0;
  sub_1000061B0(&qword_1001BF7C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_1000AA618(v32, (uint64_t)&v38, v30, v32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v15, v31, v32);
  v37 = 1;
  sub_1000061B0(&qword_1001BF7C8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  sub_1000AA618(v27, (uint64_t)&v37, v30, v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v15 + v11[5], v26, v27);
  v36 = 2;
  *(_QWORD *)(v15 + v11[6]) = KeyedDecodingContainer.decode(_:forKey:)(&v36, v30);
  v35 = 3;
  sub_1000061B0(&qword_1001C2860, (uint64_t (*)(uint64_t))&type metadata accessor for AirQualityScale, (uint64_t)&protocol conformance descriptor for AirQualityScale);
  sub_1000AA618(v29, (uint64_t)&v35, v30, v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v15 + v11[7], v24, v29);
  v34 = 4;
  sub_1000061B0(&qword_1001C2868, (uint64_t (*)(uint64_t))&type metadata accessor for AirQualityScaleCategory, (uint64_t)&protocol conformance descriptor for AirQualityScaleCategory);
  sub_1000AA618(v23, (uint64_t)&v34, v30, v23);
  sub_1000AA608();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v15 + v11[8], v22, v23);
  sub_1000AA3FC(v15, a2);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
  return sub_1000AA440(v15);
}

uint64_t sub_1000AA2C8()
{
  unsigned __int8 *v0;

  return sub_1000A9B9C(*v0);
}

uint64_t sub_1000AA2D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000A99B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000AA2F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000A9B94();
  *a1 = result;
  return result;
}

uint64_t sub_1000AA318(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AA3C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AA340(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AA3C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AA36C()
{
  return sub_1000061B0(&qword_1001BF760, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_1000AA398@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A9E64(a1, a2);
}

uint64_t sub_1000AA3AC(_QWORD *a1)
{
  return sub_1000A9C18(a1);
}

unint64_t sub_1000AA3C0()
{
  unint64_t result;

  result = qword_1001C2840;
  if (!qword_1001C2840)
  {
    result = swift_getWitnessTable(&unk_10017E5A8, &type metadata for AirQualityViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2840);
  }
  return result;
}

uint64_t sub_1000AA3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AirQualityViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AA440(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AirQualityViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AirQualityViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000AA4C8 + 4 * byte_10017E41A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000AA4FC + 4 * byte_10017E415[v4]))();
}

uint64_t sub_1000AA4FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AA504(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AA50CLL);
  return result;
}

uint64_t sub_1000AA518(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AA520);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000AA524(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AA52C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirQualityViewModel.CodingKeys()
{
  return &type metadata for AirQualityViewModel.CodingKeys;
}

unint64_t sub_1000AA54C()
{
  unint64_t result;

  result = qword_1001C2870;
  if (!qword_1001C2870)
  {
    result = swift_getWitnessTable(&unk_10017E580, &type metadata for AirQualityViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2870);
  }
  return result;
}

unint64_t sub_1000AA58C()
{
  unint64_t result;

  result = qword_1001C2878;
  if (!qword_1001C2878)
  {
    result = swift_getWitnessTable(&unk_10017E4F0, &type metadata for AirQualityViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2878);
  }
  return result;
}

unint64_t sub_1000AA5CC()
{
  unint64_t result;

  result = qword_1001C2880;
  if (!qword_1001C2880)
  {
    result = swift_getWitnessTable(&unk_10017E518, &type metadata for AirQualityViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2880);
  }
  return result;
}

uint64_t sub_1000AA608()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 88) + 8))(*(_QWORD *)(v0 - 96), *(_QWORD *)(v0 - 120));
}

uint64_t sub_1000AA618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000AA624()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 88) + 8))(*(_QWORD *)(v1 - 96), v0);
}

uint64_t sub_1000AA634(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, uint64_t);
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;

  v4 = sub_100005D40(&qword_1001C2888);
  v57 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10002325C();
  v7 = v6 - v5;
  v58 = sub_100005D40(&qword_1001C2890);
  v59 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  sub_10002325C();
  v10 = v9 - v8;
  v60 = sub_100005D40(&qword_1001C2898);
  v61 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  sub_10002325C();
  v13 = v12 - v11;
  v14 = type metadata accessor for WeatherTimelineProvider();
  swift_allocObject(v14, 248, 7);
  swift_bridgeObjectRetain_n(a2, 2);
  v62 = sub_100165A84(0, a1, a2);
  v15 = type metadata accessor for WindContentView(0);
  v16 = sub_1000061B0(&qword_1001C28A0, type metadata accessor for WindContentView, (uint64_t)&unk_1001844F8);
  v17 = sub_1000061B0(&qword_1001C0640, (uint64_t (*)(uint64_t))type metadata accessor for WeatherTimelineProvider, (uint64_t)&unk_100185D00);
  StaticConfiguration.init<A>(kind:provider:content:)(a1, a2, &v62, sub_1000AAA08, 0, v15, v14, v16, v17);
  v18 = LocalizedStringKey.init(stringLiteral:)(1684957527, 0xE400000000000000);
  v22 = sub_100045174(v18, v20, v19 & 1, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = sub_1000AAB28();
  WidgetConfiguration.configurationDisplayName(_:)(v22, v24, v28, v26, v4, v29);
  sub_100016868(v22, v24, v28);
  v30 = swift_bridgeObjectRelease(v26);
  (*(void (**)(uint64_t, uint64_t, __n128))(v57 + 8))(v7, v4, v30);
  v31 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000033, 0x80000001001879A0);
  v35 = sub_100045174(v31, v33, v32 & 1, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v62 = v4;
  v63 = v29;
  v42 = sub_100083814(v35, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.description(_:)(v35, v37, v41, v39, v58, v42);
  sub_100016868(v35, v37, v41);
  v43 = swift_bridgeObjectRelease(v39);
  (*(void (**)(uint64_t, uint64_t, __n128))(v59 + 8))(v10, v58, v43);
  v44 = sub_100005D40(&qword_1001C0280);
  v45 = type metadata accessor for WidgetFamily(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(_QWORD *)(v46 + 72);
  v48 = *(unsigned __int8 *)(v46 + 80);
  v49 = (v48 + 32) & ~v48;
  v50 = swift_allocObject(v44, v49 + 2 * v47, v48 | 7);
  *(_OWORD *)(v50 + 16) = xmmword_10017BD00;
  v51 = v50 + v49;
  v52 = *(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104);
  v52(v51, enum case for WidgetFamily.accessoryCircular(_:), v45);
  v53 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v52)(v51 + v47, enum case for WidgetFamily.accessoryInline(_:), v45);
  v62 = v58;
  v63 = v42;
  v54 = sub_100083814(v53, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  WidgetConfiguration.supportedFamilies(_:)(v50, v60, v54);
  v55 = swift_bridgeObjectRelease(v50);
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v61 + 8))(v13, v60, v55);
}

uint64_t sub_1000AAA08@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044F34(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath(&unk_10017E658);
  v7 = sub_100005D40(&qword_1001BFA18);
  swift_storeEnumTagMultiPayload(a2, v7, 0);
  v8 = type metadata accessor for WindContentView(0);
  return sub_100044FCC((uint64_t)v6, (uint64_t)a2 + *(int *)(v8 + 20));
}

unint64_t sub_1000AAAB8()
{
  return 0xD000000000000023;
}

ValueMetadata *type metadata accessor for WindComplicationWidget()
{
  return &type metadata for WindComplicationWidget;
}

uint64_t sub_1000AAAE4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F93C, 1);
}

unint64_t sub_1000AAAF4@<X0>(_QWORD *a1@<X8>)
{
  unint64_t result;
  uint64_t v3;

  result = sub_1000AAAB8();
  *a1 = 0xD000000000000023;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000AAB20()
{
  uint64_t *v0;

  return sub_1000AA634(*v0, v0[1]);
}

unint64_t sub_1000AAB28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C28A8;
  if (!qword_1001C28A8)
  {
    v1 = sub_100005DC4(&qword_1001C2888);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C28A8);
  }
  return result;
}

uint64_t sub_1000AAB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v0 = sub_100005DC4(&qword_1001C2898);
  v1 = sub_100005DC4(&qword_1001C2890);
  v2 = sub_100005DC4(&qword_1001C2888);
  v3 = sub_1000AAB28();
  v10 = sub_100083808(v3, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, v4, v5, v6, v7, v8, v9, v2);
  v24 = sub_100083808(v10, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, v11, v12, v13, v14, v15, v16, v1);
  return sub_100083808(v24, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, v17, v18, v19, v20, v21, v22, v0);
}

uint64_t DateComponents.hour(for:)(uint64_t a1)
{
  return sub_1000AAC14(a1, (unsigned int *)&enum case for Calendar.Component.hour(_:));
}

uint64_t DateComponents.minute(for:)(uint64_t a1)
{
  return sub_1000AAC14(a1, (unsigned int *)&enum case for Calendar.Component.minute(_:));
}

uint64_t sub_1000AAC14(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v2 = type metadata accessor for Calendar.Component(0);
  v33 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  sub_1000230F4();
  __chkstk_darwin(v3);
  sub_1000230E0();
  v32 = v4;
  sub_100005D40(&qword_1001BF0A0);
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_10002325C();
  v8 = v7 - v6;
  v36 = type metadata accessor for Date(0);
  v37 = *(_QWORD *)(v36 - 8);
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_1000230E0();
  v30 = v10;
  v11 = type metadata accessor for TimeZone(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10002325C();
  v15 = v14 - v13;
  sub_100005D40(&qword_1001C28B0);
  sub_1000230F4();
  __chkstk_darwin(v16);
  sub_10002325C();
  v19 = v18 - v17;
  v20 = type metadata accessor for Calendar(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_10002325C();
  v24 = v23 - v22;
  DateComponents.calendar.getter();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v19, 1, v20) == 1)
  {
    v25 = &qword_1001C28B0;
    v26 = v19;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v24, v19, v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
    v27 = Calendar.timeZone.setter(v15);
    DateComponents.date.getter(v27);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v8, 1, v36) != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v30, v8, v36);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v33 + 104))(v32, *a2, v34);
      v28 = Calendar.component(_:from:)(v32, v30);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v30, v36);
      sub_1000AAEA4();
      return v28;
    }
    sub_1000AAEA4();
    v25 = &qword_1001BF0A0;
    v26 = v8;
  }
  sub_10002FBAC(v26, v25);
  return 0;
}

uint64_t DateComponents.day(for:)(uint64_t a1)
{
  return sub_1000AAC14(a1, &enum case for Calendar.Component.weekday(_:));
}

uint64_t sub_1000AAEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

ValueMetadata *type metadata accessor for LargePrecipitationDescriptionView()
{
  return &type metadata for LargePrecipitationDescriptionView;
}

uint64_t *sub_1000AAEC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t EnumCaseMultiPayload;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  int *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  void (*v158)(char *, char *, uint64_t);
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  int *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  _BOOL8 v219;
  uint64_t v221;
  void (*v222)(char *, char *, uint64_t);
  uint64_t v223;
  int *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void (*v229)(uint64_t *, uint64_t *, uint64_t);
  char *__dst;
  char *__dsta;
  uint64_t *v232;

  v4 = type metadata accessor for ForecastEntry(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = (int *)v4;
    v228 = type metadata accessor for Date(0);
    v229 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v228 - 8) + 16);
    v229(a1, a2, v228);
    v7 = v6[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for TimelineEntryRelevance(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v10))
    {
      v11 = sub_100005D40(&qword_1001BFA20);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v8, 0, 1, v10);
    }
    v14 = v6[6];
    v232 = a1;
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(uint64_t *)((char *)a2 + v14 + 8);
    *(_QWORD *)v15 = *(uint64_t *)((char *)a2 + v14);
    *((_QWORD *)v15 + 1) = v17;
    v18 = *(uint64_t *)((char *)a2 + v14 + 24);
    *((_QWORD *)v15 + 2) = *(uint64_t *)((char *)a2 + v14 + 16);
    *((_QWORD *)v15 + 3) = v18;
    v19 = *(uint64_t *)((char *)a2 + v14 + 40);
    *((_QWORD *)v15 + 4) = *(uint64_t *)((char *)a2 + v14 + 32);
    *((_QWORD *)v15 + 5) = v19;
    *((_DWORD *)v15 + 12) = *(_DWORD *)((char *)a2 + v14 + 48);
    v20 = type metadata accessor for WidgetContext(0);
    v21 = *(int *)(v20 + 40);
    __dst = &v15[v21];
    v22 = &v16[v21];
    v23 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v22, 1, v23))
    {
      v24 = sub_100005D40(&qword_1001BFA28);
      memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(__dst, v22, v23);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)__dst, 0, 1, v23);
    }
    v25 = *(int *)(v20 + 44);
    v26 = &v15[v25];
    v27 = &v16[v25];
    v28 = *(_QWORD *)v27;
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
    v29 = v6[7];
    v13 = v232;
    v30 = (char *)v232 + v29;
    v31 = (char *)a2 + v29;
    v32 = type metadata accessor for ForecastEntry.Model(0);
    swift_bridgeObjectRetain(v28);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, v33);
      v35 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v60 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v30, v31, v60);
      }
      else
      {
        __dsta = v30;
        v226 = v33;
        v227 = v32;
        v225 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v36 = type metadata accessor for UUID(0);
          v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
          v37(v30, v31, v36);
          v38 = type metadata accessor for InstantWeatherViewModel(0);
          v39 = *(int *)(v38 + 20);
          v40 = &v30[v39];
          v41 = &v31[v39];
          v42 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
          v43 = *(int *)(v38 + 24);
          v44 = &v30[v43];
          v45 = &v31[v43];
          v37(&v30[v43], &v31[v43], v36);
          v46 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v229((uint64_t *)&v44[v46[5]], (uint64_t *)&v45[v46[5]], v228);
          v229((uint64_t *)&v44[v46[6]], (uint64_t *)&v45[v46[6]], v228);
          v47 = v46[7];
          v48 = &v44[v47];
          v49 = &v45[v47];
          v50 = sub_100005D40(&qword_1001BF090);
          v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
          v51(v48, v49, v50);
          v51(&v44[v46[8]], &v45[v46[8]], v50);
          v52 = v46[9];
          v53 = &v44[v52];
          v54 = &v45[v52];
          v55 = *((_QWORD *)v54 + 1);
          *(_QWORD *)v53 = *(_QWORD *)v54;
          *((_QWORD *)v53 + 1) = v55;
          v56 = v46[10];
          v57 = &v44[v56];
          v58 = &v45[v56];
          swift_bridgeObjectRetain(v55);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v58, 1, v50))
          {
            v59 = sub_100005D40(&qword_1001BF098);
            memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
          }
          else
          {
            v51(v57, v58, v50);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v57, 0, 1, v50);
          }
          v85 = v46[11];
          v86 = &v44[v85];
          v87 = &v45[v85];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v45[v85], 1, v50))
          {
            v88 = sub_100005D40(&qword_1001BF098);
            memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
          }
          else
          {
            v51(v86, v87, v50);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v86, 0, 1, v50);
          }
          v89 = v46[12];
          v90 = &v44[v89];
          v91 = &v45[v89];
          v37(&v44[v89], &v45[v89], v36);
          v92 = (int *)type metadata accessor for ConditionViewModel(0);
          v93 = v92[5];
          v94 = &v90[v93];
          v95 = &v91[v93];
          v96 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v94, v95, v96);
          v97 = v92[6];
          v98 = &v90[v97];
          v99 = &v91[v97];
          v100 = *((_QWORD *)v99 + 1);
          *(_QWORD *)v98 = *(_QWORD *)v99;
          *((_QWORD *)v98 + 1) = v100;
          v101 = v92[7];
          v102 = &v90[v101];
          v103 = &v91[v101];
          v104 = *((_QWORD *)v103 + 1);
          *(_QWORD *)v102 = *(_QWORD *)v103;
          *((_QWORD *)v102 + 1) = v104;
          v90[v92[8]] = v91[v92[8]];
          v90[v92[9]] = v91[v92[9]];
          v90[v92[10]] = v91[v92[10]];
          *(_QWORD *)&v44[v46[13]] = *(_QWORD *)&v45[v46[13]];
          v105 = v46[14];
          v106 = &v44[v105];
          v107 = &v45[v105];
          v108 = type metadata accessor for CloudAltitudeKind(0);
          v109 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 16);
          swift_bridgeObjectRetain(v100);
          swift_bridgeObjectRetain(v104);
          v109(v106, v107, v108);
          v110 = v46[15];
          v111 = &v44[v110];
          v112 = &v45[v110];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v45[v110], 1, v228))
          {
            v113 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
          }
          else
          {
            v229((uint64_t *)v111, (uint64_t *)v112, v228);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v111, 0, 1, v228);
          }
          v30 = __dsta;
          v32 = v227;
          v114 = v46[16];
          v115 = &v44[v114];
          v116 = &v45[v114];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v45[v114], 1, v228))
          {
            v117 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            v229((uint64_t *)v115, (uint64_t *)v116, v228);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v228);
          }
          v118 = v46[17];
          v119 = &v44[v118];
          v120 = &v45[v118];
          v121 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v119, v120, v121);
          v122 = v46[18];
          v123 = &v44[v122];
          v124 = &v45[v122];
          v125 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 16))(v123, v124, v125);
          *(_QWORD *)&v44[v46[19]] = *(_QWORD *)&v45[v46[19]];
          v126 = v46[20];
          v127 = &v44[v126];
          v128 = &v45[v126];
          v129 = *((_QWORD *)v128 + 1);
          if (v129)
          {
            *(_QWORD *)v127 = *(_QWORD *)v128;
            *((_QWORD *)v127 + 1) = v129;
            v130 = *((_QWORD *)v128 + 2);
            v131 = *((_QWORD *)v128 + 3);
            v132 = v128[32];
            swift_bridgeObjectRetain(v129);
            sub_100006E58(v130, v131, v132);
            *((_QWORD *)v127 + 2) = v130;
            *((_QWORD *)v127 + 3) = v131;
            v127[32] = v132;
          }
          else
          {
            v133 = *((_OWORD *)v128 + 1);
            *(_OWORD *)v127 = *(_OWORD *)v128;
            *((_OWORD *)v127 + 1) = v133;
            v127[32] = v128[32];
          }
          v13 = v232;
          v33 = v226;
        }
        else
        {
          v221 = v23;
          v61 = type metadata accessor for UUID(0);
          v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
          v62(v30, v31, v61);
          v63 = type metadata accessor for AggregateWeatherViewModel(0);
          v64 = *(int *)(v63 + 20);
          v65 = &v30[v64];
          v66 = &v31[v64];
          v67 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
          v223 = v61;
          v224 = (int *)v63;
          v68 = *(int *)(v63 + 24);
          v69 = &v30[v68];
          v70 = &v31[v68];
          v222 = v62;
          v62(&v30[v68], &v31[v68], v61);
          v71 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v229((uint64_t *)&v69[v71[5]], (uint64_t *)&v70[v71[5]], v228);
          v229((uint64_t *)&v69[v71[6]], (uint64_t *)&v70[v71[6]], v228);
          v72 = v71[7];
          v73 = &v69[v72];
          v74 = &v70[v72];
          v75 = sub_100005D40(&qword_1001BF090);
          v76 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16);
          v76(v73, v74, v75);
          v76(&v69[v71[8]], &v70[v71[8]], v75);
          v77 = v71[9];
          v78 = &v69[v77];
          v79 = &v70[v77];
          v80 = *((_QWORD *)v79 + 1);
          *(_QWORD *)v78 = *(_QWORD *)v79;
          *((_QWORD *)v78 + 1) = v80;
          v81 = v71[10];
          v82 = &v69[v81];
          v83 = &v70[v81];
          swift_bridgeObjectRetain(v80);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v83, 1, v75))
          {
            v84 = sub_100005D40(&qword_1001BF098);
            memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
          }
          else
          {
            v76(v82, v83, v75);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v82, 0, 1, v75);
          }
          v134 = v71[11];
          v135 = &v69[v134];
          v136 = &v70[v134];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v70[v134], 1, v75))
          {
            v137 = sub_100005D40(&qword_1001BF098);
            memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
          }
          else
          {
            v76(v135, v136, v75);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v135, 0, 1, v75);
          }
          v138 = v71[12];
          v139 = &v69[v138];
          v140 = &v70[v138];
          v62(&v69[v138], &v70[v138], v223);
          v141 = (int *)type metadata accessor for ConditionViewModel(0);
          v142 = v141[5];
          v143 = &v139[v142];
          v144 = &v140[v142];
          v145 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
          v146 = v141[6];
          v147 = &v139[v146];
          v148 = &v140[v146];
          v149 = *((_QWORD *)v148 + 1);
          *(_QWORD *)v147 = *(_QWORD *)v148;
          *((_QWORD *)v147 + 1) = v149;
          v150 = v141[7];
          v151 = &v139[v150];
          v152 = &v140[v150];
          v153 = *((_QWORD *)v152 + 1);
          *(_QWORD *)v151 = *(_QWORD *)v152;
          *((_QWORD *)v151 + 1) = v153;
          v139[v141[8]] = v140[v141[8]];
          v139[v141[9]] = v140[v141[9]];
          v139[v141[10]] = v140[v141[10]];
          *(_QWORD *)&v69[v71[13]] = *(_QWORD *)&v70[v71[13]];
          v154 = v71[14];
          v155 = &v69[v154];
          v156 = &v70[v154];
          v157 = type metadata accessor for CloudAltitudeKind(0);
          v158 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 16);
          swift_bridgeObjectRetain(v149);
          swift_bridgeObjectRetain(v153);
          v158(v155, v156, v157);
          v159 = v71[15];
          v160 = &v69[v159];
          v161 = &v70[v159];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v70[v159], 1, v228))
          {
            v162 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
          }
          else
          {
            v229((uint64_t *)v160, (uint64_t *)v161, v228);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v160, 0, 1, v228);
          }
          v30 = __dsta;
          v163 = v71[16];
          v164 = &v69[v163];
          v165 = &v70[v163];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v70[v163], 1, v228))
          {
            v166 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
          }
          else
          {
            v229((uint64_t *)v164, (uint64_t *)v165, v228);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v164, 0, 1, v228);
          }
          v167 = v71[17];
          v168 = &v69[v167];
          v169 = &v70[v167];
          v170 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 16))(v168, v169, v170);
          v171 = v71[18];
          v172 = &v69[v171];
          v173 = &v70[v171];
          v174 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v174 - 8) + 16))(v172, v173, v174);
          *(_QWORD *)&v69[v71[19]] = *(_QWORD *)&v70[v71[19]];
          v175 = v71[20];
          v176 = &v69[v175];
          v177 = &v70[v175];
          v178 = *((_QWORD *)v177 + 1);
          if (v178)
          {
            *(_QWORD *)v176 = *(_QWORD *)v177;
            *((_QWORD *)v176 + 1) = v178;
            v179 = *((_QWORD *)v177 + 2);
            v180 = *((_QWORD *)v177 + 3);
            v181 = v177[32];
            swift_bridgeObjectRetain(v178);
            sub_100006E58(v179, v180, v181);
            *((_QWORD *)v176 + 2) = v179;
            *((_QWORD *)v176 + 3) = v180;
            v176[32] = v181;
          }
          else
          {
            v182 = *((_OWORD *)v177 + 1);
            *(_OWORD *)v176 = *(_OWORD *)v177;
            *((_OWORD *)v176 + 1) = v182;
            v176[32] = v177[32];
          }
          v13 = v232;
          v183 = v224[7];
          v184 = *(_QWORD *)&v31[v183];
          *(_QWORD *)&__dsta[v183] = v184;
          v185 = v224[8];
          v186 = *(_QWORD *)&v31[v185];
          *(_QWORD *)&__dsta[v185] = v186;
          v187 = v224[9];
          v188 = &__dsta[v187];
          v189 = &v31[v187];
          v190 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v184);
          swift_bridgeObjectRetain(v186);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v189, 1, (uint64_t)v190))
          {
            v191 = sub_100005D40(&qword_1001BFA30);
            memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
          }
          else
          {
            v222(v188, v189, v223);
            v229((uint64_t *)&v188[v190[5]], (uint64_t *)&v189[v190[5]], v228);
            *(_QWORD *)&v188[v190[6]] = *(_QWORD *)&v189[v190[6]];
            v192 = v190[7];
            v193 = &v188[v192];
            v194 = &v189[v192];
            v195 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v193, v194, v195);
            v196 = v190[8];
            v197 = &v188[v196];
            v198 = &v189[v196];
            v199 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v199 - 8) + 16))(v197, v198, v199);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v188, 0, 1, (uint64_t)v190);
          }
          v33 = v226;
          v200 = v224[10];
          v201 = &__dsta[v200];
          v202 = &v31[v200];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v202, 1, HourPrecipitationChartViewModel))
          {
            v204 = sub_100005D40(&qword_1001BFA38);
            memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v201, v202, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v201, 0, 1, HourPrecipitationChartViewModel);
          }
          v205 = v224[11];
          v206 = *(_QWORD *)&v31[v205];
          *(_QWORD *)&__dsta[v205] = v206;
          v207 = v224[12];
          v208 = &__dsta[v207];
          v209 = &v31[v207];
          *(_QWORD *)v208 = *(_QWORD *)v209;
          *((_WORD *)v208 + 4) = *((_WORD *)v209 + 4);
          v210 = v224[13];
          v211 = &__dsta[v210];
          v212 = &v31[v210];
          swift_bridgeObjectRetain(v206);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v212, 1, v221))
          {
            v213 = sub_100005D40(&qword_1001BFA28);
            memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v221 - 8) + 16))(v211, v212, v221);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v211, 0, 1, v221);
          }
          v214 = v224[14];
          v215 = &__dsta[v214];
          v216 = &v31[v214];
          v217 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v216, 1, v217))
          {
            v218 = sub_100005D40(&qword_1001BFA40);
            memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
          }
          else
          {
            v219 = swift_getEnumCaseMultiPayload(v216, v217) == 1;
            v229((uint64_t *)v215, (uint64_t *)v216, v228);
            swift_storeEnumTagMultiPayload(v215, v217, v219);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v215, 0, 1, v217);
          }
          v32 = v227;
        }
        v35 = v225;
      }
      swift_storeEnumTagMultiPayload(v30, v33, v35);
      swift_storeEnumTagMultiPayload(v30, v32, 1);
    }
    else
    {
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
  }
  return v13;
}

uint64_t sub_1000ABD80(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  void (*v80)(uint64_t, uint64_t);

  v2 = type metadata accessor for Date(0);
  v80 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v80(a1, v2);
  v3 = (int *)type metadata accessor for ForecastEntry(0);
  v4 = a1 + v3[5];
  v5 = type metadata accessor for TimelineEntryRelevance(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (_QWORD *)(a1 + v3[6]);
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[3]);
  swift_bridgeObjectRelease(v6[5]);
  v7 = type metadata accessor for WidgetContext(0);
  v8 = (uint64_t)v6 + *(int *)(v7 + 40);
  v9 = type metadata accessor for URL(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + *(int *)(v7 + 44)));
  v10 = a1 + v3[7];
  v11 = type metadata accessor for ForecastEntry.Model(0);
  result = swift_getEnumCaseMultiPayload(v10, v11);
  if ((_DWORD)result == 1)
  {
    v13 = type metadata accessor for WeatherDataViewModel(0);
    result = swift_getEnumCaseMultiPayload(v10, v13);
    switch((_DWORD)result)
    {
      case 2:
        v52 = type metadata accessor for SunriseSunsetViewModel(0);
        v53 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8);
        v51 = v10;
        return v53(v51, v52);
      case 1:
        v54 = type metadata accessor for UUID(0);
        v55 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8);
        v55(v10, v54);
        v56 = type metadata accessor for InstantWeatherViewModel(0);
        v57 = v10 + *(int *)(v56 + 20);
        v58 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v57, v58);
        v59 = v10 + *(int *)(v56 + 24);
        v55(v59, v54);
        v60 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v80(v59 + v60[5], v2);
        v80(v59 + v60[6], v2);
        v61 = v59 + v60[7];
        v62 = sub_100005D40(&qword_1001BF090);
        v63 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 8);
        v63(v61, v62);
        v63(v59 + v60[8], v62);
        swift_bridgeObjectRelease(*(_QWORD *)(v59 + v60[9] + 8));
        v64 = v59 + v60[10];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v64, 1, v62))
          v63(v64, v62);
        v65 = v59 + v60[11];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v65, 1, v62))
          v63(v65, v62);
        v66 = v59 + v60[12];
        v55(v66, v54);
        v67 = (int *)type metadata accessor for ConditionViewModel(0);
        v68 = v66 + v67[5];
        v69 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v68, v69);
        swift_bridgeObjectRelease(*(_QWORD *)(v66 + v67[6] + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v66 + v67[7] + 8));
        v70 = v59 + v60[14];
        v71 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v70, v71);
        v72 = v59 + v60[15];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v72, 1, v2))
          v80(v72, v2);
        v73 = v59 + v60[16];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v73, 1, v2))
          v80(v73, v2);
        v74 = v59 + v60[17];
        v75 = type metadata accessor for UVIndex(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 8))(v74, v75);
        v76 = v59 + v60[18];
        v77 = type metadata accessor for Wind(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 8))(v76, v77);
        v78 = v59 + v60[20];
        result = *(_QWORD *)(v78 + 8);
        if (result)
        {
          swift_bridgeObjectRelease(result);
          return sub_100007458(*(_QWORD *)(v78 + 16), *(_QWORD *)(v78 + 24), *(_BYTE *)(v78 + 32));
        }
        break;
      case 0:
        v14 = type metadata accessor for UUID(0);
        v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
        v15(v10, v14);
        v16 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        v17 = v10 + v16[5];
        v18 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
        v19 = v10 + v16[6];
        v79 = v15;
        v15(v19, v14);
        v20 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v80(v19 + v20[5], v2);
        v80(v19 + v20[6], v2);
        v21 = v19 + v20[7];
        v22 = sub_100005D40(&qword_1001BF090);
        v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
        v23(v21, v22);
        v23(v19 + v20[8], v22);
        swift_bridgeObjectRelease(*(_QWORD *)(v19 + v20[9] + 8));
        v24 = v19 + v20[10];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v24, 1, v22))
          v23(v24, v22);
        v25 = v19 + v20[11];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v25, 1, v22))
          v23(v25, v22);
        v26 = v19 + v20[12];
        v79(v26, v14);
        v27 = (int *)type metadata accessor for ConditionViewModel(0);
        v28 = v26 + v27[5];
        v29 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
        swift_bridgeObjectRelease(*(_QWORD *)(v26 + v27[6] + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v26 + v27[7] + 8));
        v30 = v19 + v20[14];
        v31 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
        v32 = v19 + v20[15];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v32, 1, v2))
          v80(v32, v2);
        v33 = v19 + v20[16];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v33, 1, v2))
          v80(v33, v2);
        v34 = v19 + v20[17];
        v35 = type metadata accessor for UVIndex(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
        v36 = v19 + v20[18];
        v37 = type metadata accessor for Wind(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
        v38 = v19 + v20[20];
        v39 = *(_QWORD *)(v38 + 8);
        if (v39)
        {
          swift_bridgeObjectRelease(v39);
          sub_100007458(*(_QWORD *)(v38 + 16), *(_QWORD *)(v38 + 24), *(_BYTE *)(v38 + 32));
        }
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + v16[7]));
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + v16[8]));
        v40 = v10 + v16[9];
        v41 = (int *)type metadata accessor for AirQualityViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v40, 1, (uint64_t)v41))
        {
          v79(v40, v14);
          v80(v40 + v41[5], v2);
          v42 = v40 + v41[7];
          v43 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v42, v43);
          v44 = v40 + v41[8];
          v45 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v44, v45);
        }
        v46 = v10 + v16[10];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v46, 1, HourPrecipitationChartViewModel))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v46, HourPrecipitationChartViewModel);
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + v16[11]));
        v48 = v10 + v16[13];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v48, 1, v9))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v48, v9);
        v49 = v10 + v16[14];
        v50 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v49, 1, v50);
        if (!(_DWORD)result)
        {
          v51 = v49;
          v52 = v2;
          v53 = (uint64_t (*)(uint64_t, uint64_t))v80;
          return v53(v51, v52);
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1000AC59C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  int *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  __int128 v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  int *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  void (*v157)(char *, char *, uint64_t);
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  int *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  _BOOL8 v219;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(char *, char *, uint64_t);
  int *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  void (*v228)(uint64_t, uint64_t);
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;

  v4 = type metadata accessor for Date(0);
  v228 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
  v229 = v4;
  v228(a1, a2);
  v5 = type metadata accessor for ForecastEntry(0);
  v6 = *(int *)(v5 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for TimelineEntryRelevance(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_100005D40(&qword_1001BFA20);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v230 = v5;
  v232 = a1;
  v11 = *(int *)(v5 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_QWORD *)(a2 + v11 + 8);
  *(_QWORD *)v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(v12 + 8) = v14;
  v15 = *(_QWORD *)(a2 + v11 + 24);
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 + v11 + 16);
  *(_QWORD *)(v12 + 24) = v15;
  v16 = *(_QWORD *)(a2 + v11 + 40);
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(a2 + v11 + 32);
  *(_QWORD *)(v12 + 40) = v16;
  *(_DWORD *)(v12 + 48) = *(_DWORD *)(a2 + v11 + 48);
  v17 = type metadata accessor for WidgetContext(0);
  v18 = *(int *)(v17 + 40);
  v19 = (void *)(v12 + v18);
  v20 = (const void *)(v13 + v18);
  v21 = type metadata accessor for URL(0);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v20, 1, v21))
  {
    v22 = sub_100005D40(&qword_1001BFA28);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v19, 0, 1, v21);
  }
  v23 = *(int *)(v17 + 44);
  v24 = v12 + v23;
  v25 = (uint64_t *)(v13 + v23);
  v26 = *v25;
  *(_QWORD *)v24 = *v25;
  *(_BYTE *)(v24 + 8) = *((_BYTE *)v25 + 8);
  v27 = v232;
  v28 = *(int *)(v230 + 28);
  v29 = (char *)(v232 + v28);
  v30 = (char *)(a2 + v28);
  v31 = type metadata accessor for ForecastEntry.Model(0);
  swift_bridgeObjectRetain(v26);
  if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
  {
    v32 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v30, v32);
    v34 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v59 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v29, v30, v59);
    }
    else
    {
      v231 = v29;
      v226 = v32;
      v227 = v31;
      v225 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v35 = type metadata accessor for UUID(0);
        v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
        v36(v29, v30, v35);
        v37 = type metadata accessor for InstantWeatherViewModel(0);
        v38 = *(int *)(v37 + 20);
        v39 = &v29[v38];
        v40 = &v30[v38];
        v41 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
        v42 = *(int *)(v37 + 24);
        v43 = &v29[v42];
        v44 = &v30[v42];
        v36(&v29[v42], &v30[v42], v35);
        v45 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        ((void (*)(char *, char *, uint64_t))v228)(&v43[v45[5]], &v44[v45[5]], v229);
        ((void (*)(char *, char *, uint64_t))v228)(&v43[v45[6]], &v44[v45[6]], v229);
        v46 = v45[7];
        v47 = &v43[v46];
        v48 = &v44[v46];
        v49 = sub_100005D40(&qword_1001BF090);
        v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
        v50(v47, v48, v49);
        v50(&v43[v45[8]], &v44[v45[8]], v49);
        v51 = v45[9];
        v52 = &v43[v51];
        v53 = &v44[v51];
        v54 = *((_QWORD *)v53 + 1);
        *(_QWORD *)v52 = *(_QWORD *)v53;
        *((_QWORD *)v52 + 1) = v54;
        v55 = v45[10];
        v56 = &v43[v55];
        v57 = &v44[v55];
        swift_bridgeObjectRetain(v54);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v57, 1, v49))
        {
          v58 = sub_100005D40(&qword_1001BF098);
          memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        }
        else
        {
          v50(v56, v57, v49);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v49);
        }
        v84 = v45[11];
        v85 = &v43[v84];
        v86 = &v44[v84];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v44[v84], 1, v49))
        {
          v87 = sub_100005D40(&qword_1001BF098);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
        }
        else
        {
          v50(v85, v86, v49);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v85, 0, 1, v49);
        }
        v88 = v45[12];
        v89 = &v43[v88];
        v90 = &v44[v88];
        v36(&v43[v88], &v44[v88], v35);
        v91 = (int *)type metadata accessor for ConditionViewModel(0);
        v92 = v91[5];
        v93 = &v89[v92];
        v94 = &v90[v92];
        v95 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v93, v94, v95);
        v96 = v91[6];
        v97 = &v89[v96];
        v98 = &v90[v96];
        v99 = *((_QWORD *)v98 + 1);
        *(_QWORD *)v97 = *(_QWORD *)v98;
        *((_QWORD *)v97 + 1) = v99;
        v100 = v91[7];
        v101 = &v89[v100];
        v102 = &v90[v100];
        v103 = *((_QWORD *)v102 + 1);
        *(_QWORD *)v101 = *(_QWORD *)v102;
        *((_QWORD *)v101 + 1) = v103;
        v89[v91[8]] = v90[v91[8]];
        v89[v91[9]] = v90[v91[9]];
        v89[v91[10]] = v90[v91[10]];
        *(_QWORD *)&v43[v45[13]] = *(_QWORD *)&v44[v45[13]];
        v104 = v45[14];
        v105 = &v43[v104];
        v106 = &v44[v104];
        v107 = type metadata accessor for CloudAltitudeKind(0);
        v108 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16);
        swift_bridgeObjectRetain(v99);
        swift_bridgeObjectRetain(v103);
        v108(v105, v106, v107);
        v109 = v45[15];
        v110 = &v43[v109];
        v111 = &v44[v109];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v44[v109], 1, v229))
        {
          v112 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v228)(v110, v111, v229);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v110, 0, 1, v229);
        }
        v29 = v231;
        v27 = v232;
        v113 = v45[16];
        v114 = &v43[v113];
        v115 = &v44[v113];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v44[v113], 1, v229))
        {
          v116 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v228)(v114, v115, v229);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v114, 0, 1, v229);
        }
        v117 = v45[17];
        v118 = &v43[v117];
        v119 = &v44[v117];
        v120 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v118, v119, v120);
        v121 = v45[18];
        v122 = &v43[v121];
        v123 = &v44[v121];
        v124 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(v122, v123, v124);
        *(_QWORD *)&v43[v45[19]] = *(_QWORD *)&v44[v45[19]];
        v125 = v45[20];
        v126 = &v43[v125];
        v127 = &v44[v125];
        v128 = *((_QWORD *)v127 + 1);
        if (v128)
        {
          *(_QWORD *)v126 = *(_QWORD *)v127;
          *((_QWORD *)v126 + 1) = v128;
          v129 = *((_QWORD *)v127 + 2);
          v130 = *((_QWORD *)v127 + 3);
          v131 = v127[32];
          swift_bridgeObjectRetain(v128);
          sub_100006E58(v129, v130, v131);
          *((_QWORD *)v126 + 2) = v129;
          *((_QWORD *)v126 + 3) = v130;
          v126[32] = v131;
        }
        else
        {
          v132 = *((_OWORD *)v127 + 1);
          *(_OWORD *)v126 = *(_OWORD *)v127;
          *((_OWORD *)v126 + 1) = v132;
          v126[32] = v127[32];
        }
        v32 = v226;
        v31 = v227;
      }
      else
      {
        v222 = v21;
        v60 = type metadata accessor for UUID(0);
        v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
        v61(v29, v30, v60);
        v62 = type metadata accessor for AggregateWeatherViewModel(0);
        v63 = *(int *)(v62 + 20);
        v64 = &v29[v63];
        v65 = &v30[v63];
        v66 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
        v223 = v61;
        v224 = (int *)v62;
        v67 = *(int *)(v62 + 24);
        v68 = &v29[v67];
        v69 = &v30[v67];
        v61(&v29[v67], &v30[v67], v60);
        v70 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        ((void (*)(char *, char *, uint64_t))v228)(&v68[v70[5]], &v69[v70[5]], v229);
        ((void (*)(char *, char *, uint64_t))v228)(&v68[v70[6]], &v69[v70[6]], v229);
        v71 = v70[7];
        v72 = &v68[v71];
        v73 = &v69[v71];
        v74 = sub_100005D40(&qword_1001BF090);
        v75 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16);
        v75(v72, v73, v74);
        v75(&v68[v70[8]], &v69[v70[8]], v74);
        v76 = v70[9];
        v77 = &v68[v76];
        v78 = &v69[v76];
        v79 = *((_QWORD *)v78 + 1);
        *(_QWORD *)v77 = *(_QWORD *)v78;
        *((_QWORD *)v77 + 1) = v79;
        v80 = v70[10];
        v81 = &v68[v80];
        v82 = &v69[v80];
        swift_bridgeObjectRetain(v79);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v82, 1, v74))
        {
          v83 = sub_100005D40(&qword_1001BF098);
          memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
        }
        else
        {
          v75(v81, v82, v74);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v81, 0, 1, v74);
        }
        v133 = v70[11];
        v134 = &v68[v133];
        v135 = &v69[v133];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v69[v133], 1, v74))
        {
          v136 = sub_100005D40(&qword_1001BF098);
          memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
        }
        else
        {
          v75(v134, v135, v74);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v134, 0, 1, v74);
        }
        v137 = v70[12];
        v138 = &v68[v137];
        v139 = &v69[v137];
        v221 = v60;
        v223(&v68[v137], &v69[v137], v60);
        v140 = (int *)type metadata accessor for ConditionViewModel(0);
        v141 = v140[5];
        v142 = &v138[v141];
        v143 = &v139[v141];
        v144 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 16))(v142, v143, v144);
        v145 = v140[6];
        v146 = &v138[v145];
        v147 = &v139[v145];
        v148 = *((_QWORD *)v147 + 1);
        *(_QWORD *)v146 = *(_QWORD *)v147;
        *((_QWORD *)v146 + 1) = v148;
        v149 = v140[7];
        v150 = &v138[v149];
        v151 = &v139[v149];
        v152 = *((_QWORD *)v151 + 1);
        *(_QWORD *)v150 = *(_QWORD *)v151;
        *((_QWORD *)v150 + 1) = v152;
        v138[v140[8]] = v139[v140[8]];
        v138[v140[9]] = v139[v140[9]];
        v138[v140[10]] = v139[v140[10]];
        *(_QWORD *)&v68[v70[13]] = *(_QWORD *)&v69[v70[13]];
        v153 = v70[14];
        v154 = &v68[v153];
        v155 = &v69[v153];
        v156 = type metadata accessor for CloudAltitudeKind(0);
        v157 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v156 - 8) + 16);
        swift_bridgeObjectRetain(v148);
        swift_bridgeObjectRetain(v152);
        v157(v154, v155, v156);
        v158 = v70[15];
        v159 = &v68[v158];
        v160 = &v69[v158];
        v161 = v229;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v69[v158], 1, v229))
        {
          v162 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v228)(v159, v160, v229);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v159, 0, 1, v229);
        }
        v29 = v231;
        v27 = v232;
        v163 = v70[16];
        v164 = &v68[v163];
        v165 = &v69[v163];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v69[v163], 1, v229))
        {
          v166 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v228)(v164, v165, v229);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v164, 0, 1, v229);
        }
        v167 = v70[17];
        v168 = &v68[v167];
        v169 = &v69[v167];
        v170 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 16))(v168, v169, v170);
        v171 = v70[18];
        v172 = &v68[v171];
        v173 = &v69[v171];
        v174 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v174 - 8) + 16))(v172, v173, v174);
        *(_QWORD *)&v68[v70[19]] = *(_QWORD *)&v69[v70[19]];
        v175 = v70[20];
        v176 = &v68[v175];
        v177 = &v69[v175];
        v178 = *((_QWORD *)v177 + 1);
        if (v178)
        {
          *(_QWORD *)v176 = *(_QWORD *)v177;
          *((_QWORD *)v176 + 1) = v178;
          v179 = *((_QWORD *)v177 + 2);
          v180 = *((_QWORD *)v177 + 3);
          v181 = v177[32];
          swift_bridgeObjectRetain(v178);
          sub_100006E58(v179, v180, v181);
          *((_QWORD *)v176 + 2) = v179;
          *((_QWORD *)v176 + 3) = v180;
          v176[32] = v181;
          v161 = v229;
        }
        else
        {
          v182 = *((_OWORD *)v177 + 1);
          *(_OWORD *)v176 = *(_OWORD *)v177;
          *((_OWORD *)v176 + 1) = v182;
          v176[32] = v177[32];
        }
        v183 = v224[7];
        v184 = *(_QWORD *)&v30[v183];
        *(_QWORD *)&v231[v183] = v184;
        v185 = v224[8];
        v186 = *(_QWORD *)&v30[v185];
        *(_QWORD *)&v231[v185] = v186;
        v187 = v224[9];
        v188 = &v231[v187];
        v189 = &v30[v187];
        v190 = (int *)type metadata accessor for AirQualityViewModel(0);
        swift_bridgeObjectRetain(v184);
        swift_bridgeObjectRetain(v186);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v189, 1, (uint64_t)v190))
        {
          v191 = sub_100005D40(&qword_1001BFA30);
          memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
        }
        else
        {
          v223(v188, v189, v221);
          ((void (*)(char *, char *, uint64_t))v228)(&v188[v190[5]], &v189[v190[5]], v161);
          *(_QWORD *)&v188[v190[6]] = *(_QWORD *)&v189[v190[6]];
          v192 = v190[7];
          v193 = &v188[v192];
          v194 = &v189[v192];
          v195 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v193, v194, v195);
          v196 = v190[8];
          v197 = &v188[v196];
          v198 = &v189[v196];
          v199 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v199 - 8) + 16))(v197, v198, v199);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v188, 0, 1, (uint64_t)v190);
        }
        v200 = v224[10];
        v201 = &v231[v200];
        v202 = &v30[v200];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v202, 1, HourPrecipitationChartViewModel))
        {
          v204 = sub_100005D40(&qword_1001BFA38);
          memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v201, v202, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v201, 0, 1, HourPrecipitationChartViewModel);
        }
        v32 = v226;
        v205 = v224[11];
        v206 = *(_QWORD *)&v30[v205];
        *(_QWORD *)&v231[v205] = v206;
        v207 = v224[12];
        v208 = &v231[v207];
        v209 = &v30[v207];
        *(_QWORD *)v208 = *(_QWORD *)v209;
        *((_WORD *)v208 + 4) = *((_WORD *)v209 + 4);
        v210 = v224[13];
        v211 = &v231[v210];
        v212 = &v30[v210];
        swift_bridgeObjectRetain(v206);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v212, 1, v222))
        {
          v213 = sub_100005D40(&qword_1001BFA28);
          memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v222 - 8) + 16))(v211, v212, v222);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v211, 0, 1, v222);
        }
        v214 = v224[14];
        v215 = &v231[v214];
        v216 = &v30[v214];
        v217 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v216, 1, v217))
        {
          v218 = sub_100005D40(&qword_1001BFA40);
          memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
        }
        else
        {
          v219 = swift_getEnumCaseMultiPayload(v216, v217) == 1;
          ((void (*)(char *, char *, uint64_t))v228)(v215, v216, v161);
          swift_storeEnumTagMultiPayload(v215, v217, v219);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v215, 0, 1, v217);
        }
        v31 = v227;
      }
      v34 = v225;
    }
    swift_storeEnumTagMultiPayload(v29, v32, v34);
    swift_storeEnumTagMultiPayload(v29, v31, 1);
  }
  else
  {
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  return v27;
}

uint64_t sub_1000AD41C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t EnumCaseMultiPayload;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int *v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  int *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t);
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  int *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  void (*v149)(char *, char *, uint64_t);
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  int *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  _BOOL8 v233;
  int *v235;
  void (*v236)(char *, char *, uint64_t);
  uint64_t v237;
  void (*v238)(char *, char *, uint64_t);
  void (*v239)(char *, char *, uint64_t);
  void (*v240)(char *, char *, uint64_t);
  char *v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;

  v246 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v246 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, a2, v246);
  v5 = (int *)type metadata accessor for ForecastEntry(0);
  v6 = v5[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for TimelineEntryRelevance(0);
  v10 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v7, 1, v9);
  v11 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = sub_100005D40(&qword_1001BFA20);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = v5[6];
  v247 = a1;
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)(a2 + v14);
  v17 = *(_QWORD *)(a2 + v14 + 8);
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  v19 = *(_QWORD *)(v16 + 24);
  v20 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v15 + 24) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 + 32);
  v21 = *(_QWORD *)(v16 + 40);
  v22 = *(_QWORD *)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  *(_BYTE *)(v15 + 48) = *(_BYTE *)(v16 + 48);
  *(_BYTE *)(v15 + 49) = *(_BYTE *)(v16 + 49);
  *(_BYTE *)(v15 + 50) = *(_BYTE *)(v16 + 50);
  *(_BYTE *)(v15 + 51) = *(_BYTE *)(v16 + 51);
  v23 = type metadata accessor for WidgetContext(0);
  v24 = *(int *)(v23 + 40);
  v25 = (void *)(v15 + v24);
  v26 = (const void *)(v16 + v24);
  v27 = type metadata accessor for URL(0);
  v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v27);
  v29 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v27);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v30 = *(_QWORD *)(v27 - 8);
  if (v29)
  {
    (*(void (**)(void *, uint64_t))(v30 + 8))(v25, v27);
LABEL_12:
    v31 = sub_100005D40(&qword_1001BFA28);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v30 + 24))(v25, v26, v27);
LABEL_13:
  v32 = *(int *)(v23 + 44);
  v33 = (uint64_t *)(v15 + v32);
  v34 = (uint64_t *)(v16 + v32);
  v35 = *v34;
  v36 = *v33;
  *v33 = *v34;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  *((_BYTE *)v33 + 8) = *((_BYTE *)v34 + 8);
  v37 = v247;
  if (v247 != a2)
  {
    v38 = v5[7];
    v39 = (char *)(v247 + v38);
    v40 = (char *)(a2 + v38);
    sub_100011894(v247 + v38, type metadata accessor for ForecastEntry.Model);
    v41 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v40, v41) == 1)
    {
      v42 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v40, v42);
      v44 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v70 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v39, v40, v70);
      }
      else
      {
        v244 = v41;
        v245 = v39;
        v243 = v42;
        v242 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v45 = type metadata accessor for UUID(0);
          v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16);
          v46(v39, v40, v45);
          v47 = type metadata accessor for InstantWeatherViewModel(0);
          v48 = *(int *)(v47 + 20);
          v49 = &v39[v48];
          v50 = &v40[v48];
          v51 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
          v52 = *(int *)(v47 + 24);
          v53 = &v39[v52];
          v54 = &v40[v52];
          v240 = v46;
          v46(&v39[v52], v54, v45);
          v55 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v56 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
          v56(&v53[v55[5]], &v54[v55[5]], v246);
          v238 = v56;
          v56(&v53[v55[6]], &v54[v55[6]], v246);
          v57 = v55[7];
          v58 = &v53[v57];
          v59 = &v54[v57];
          v60 = sub_100005D40(&qword_1001BF090);
          v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
          v61(v58, v59, v60);
          v61(&v53[v55[8]], &v54[v55[8]], v60);
          v62 = v55[9];
          v63 = &v53[v62];
          v64 = &v54[v62];
          *(_QWORD *)v63 = *(_QWORD *)v64;
          v65 = *((_QWORD *)v64 + 1);
          *((_QWORD *)v63 + 1) = v65;
          v66 = v55[10];
          v67 = &v53[v66];
          v68 = &v54[v66];
          swift_bridgeObjectRetain(v65);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v68, 1, v60))
          {
            v69 = sub_100005D40(&qword_1001BF098);
            memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
          }
          else
          {
            v61(v67, v68, v60);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v60);
          }
          v96 = v55[11];
          v97 = &v53[v96];
          v98 = &v54[v96];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v54[v96], 1, v60))
          {
            v99 = sub_100005D40(&qword_1001BF098);
            memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
          }
          else
          {
            v61(v97, v98, v60);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v97, 0, 1, v60);
          }
          v104 = v55[12];
          v105 = &v53[v104];
          v106 = &v54[v104];
          v240(&v53[v104], &v54[v104], v45);
          v107 = (int *)type metadata accessor for ConditionViewModel(0);
          v108 = v107[5];
          v109 = &v105[v108];
          v110 = &v106[v108];
          v111 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(v109, v110, v111);
          v112 = v107[6];
          v113 = &v105[v112];
          v114 = &v106[v112];
          *(_QWORD *)v113 = *(_QWORD *)v114;
          v115 = *((_QWORD *)v114 + 1);
          *((_QWORD *)v113 + 1) = v115;
          v116 = v107[7];
          v117 = &v105[v116];
          v118 = &v106[v116];
          *(_QWORD *)v117 = *(_QWORD *)v118;
          v119 = *((_QWORD *)v118 + 1);
          *((_QWORD *)v117 + 1) = v119;
          v105[v107[8]] = v106[v107[8]];
          v105[v107[9]] = v106[v107[9]];
          v105[v107[10]] = v106[v107[10]];
          *(_QWORD *)&v53[v55[13]] = *(_QWORD *)&v54[v55[13]];
          v120 = v55[14];
          v121 = &v53[v120];
          v122 = &v54[v120];
          v123 = type metadata accessor for CloudAltitudeKind(0);
          v124 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 16);
          swift_bridgeObjectRetain(v115);
          swift_bridgeObjectRetain(v119);
          v124(v121, v122, v123);
          v125 = v55[15];
          v126 = &v53[v125];
          v127 = &v54[v125];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v54[v125], 1, v246))
          {
            v128 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
          }
          else
          {
            v238(v126, v127, v246);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v126, 0, 1, v246);
          }
          v39 = v245;
          v154 = v55[16];
          v155 = &v53[v154];
          v156 = &v54[v154];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v54[v154], 1, v246))
          {
            v157 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
          }
          else
          {
            v238(v155, v156, v246);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v155, 0, 1, v246);
          }
          v162 = v55[17];
          v163 = &v53[v162];
          v164 = &v54[v162];
          v165 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v165 - 8) + 16))(v163, v164, v165);
          v166 = v55[18];
          v167 = &v53[v166];
          v168 = &v54[v166];
          v169 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 16))(v167, v168, v169);
          *(_QWORD *)&v53[v55[19]] = *(_QWORD *)&v54[v55[19]];
          v170 = v55[20];
          v171 = &v53[v170];
          v172 = &v54[v170];
          if (*((_QWORD *)v172 + 1))
          {
            *(_QWORD *)v171 = *(_QWORD *)v172;
            v173 = *((_QWORD *)v172 + 1);
            *((_QWORD *)v171 + 1) = v173;
            v174 = *((_QWORD *)v172 + 2);
            v175 = *((_QWORD *)v172 + 3);
            v176 = v172[32];
            swift_bridgeObjectRetain(v173);
            sub_100006E58(v174, v175, v176);
            *((_QWORD *)v171 + 2) = v174;
            *((_QWORD *)v171 + 3) = v175;
            v171[32] = v176;
          }
          else
          {
            v192 = *(_OWORD *)v172;
            v193 = *((_OWORD *)v172 + 1);
            v171[32] = v172[32];
            *(_OWORD *)v171 = v192;
            *((_OWORD *)v171 + 1) = v193;
          }
          v37 = v247;
          v41 = v244;
        }
        else
        {
          v71 = type metadata accessor for UUID(0);
          v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
          v72(v39, v40, v71);
          v73 = type metadata accessor for AggregateWeatherViewModel(0);
          v74 = *(int *)(v73 + 20);
          v75 = &v39[v74];
          v76 = &v40[v74];
          v77 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
          v235 = (int *)v73;
          v236 = v72;
          v78 = *(int *)(v73 + 24);
          v79 = &v39[v78];
          v241 = v40;
          v80 = &v40[v78];
          v237 = v71;
          v72(&v39[v78], v80, v71);
          v81 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v82 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
          v82(&v79[v81[5]], &v80[v81[5]], v246);
          v239 = v82;
          v82(&v79[v81[6]], &v80[v81[6]], v246);
          v83 = v81[7];
          v84 = &v79[v83];
          v85 = &v80[v83];
          v86 = sub_100005D40(&qword_1001BF090);
          v87 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 16);
          v87(v84, v85, v86);
          v87(&v79[v81[8]], &v80[v81[8]], v86);
          v88 = v81[9];
          v89 = &v79[v88];
          v90 = &v80[v88];
          *(_QWORD *)v89 = *(_QWORD *)v90;
          v91 = *((_QWORD *)v90 + 1);
          *((_QWORD *)v89 + 1) = v91;
          v92 = v81[10];
          v93 = &v79[v92];
          v94 = &v80[v92];
          swift_bridgeObjectRetain(v91);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v94, 1, v86))
          {
            v95 = sub_100005D40(&qword_1001BF098);
            memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
          }
          else
          {
            v87(v93, v94, v86);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v93, 0, 1, v86);
          }
          v100 = v81[11];
          v101 = &v79[v100];
          v102 = &v80[v100];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v80[v100], 1, v86))
          {
            v103 = sub_100005D40(&qword_1001BF098);
            memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
          }
          else
          {
            v87(v101, v102, v86);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v101, 0, 1, v86);
          }
          v129 = v81[12];
          v130 = &v79[v129];
          v131 = &v80[v129];
          v236(&v79[v129], &v80[v129], v237);
          v132 = (int *)type metadata accessor for ConditionViewModel(0);
          v133 = v132[5];
          v134 = &v130[v133];
          v135 = &v131[v133];
          v136 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 16))(v134, v135, v136);
          v137 = v132[6];
          v138 = &v130[v137];
          v139 = &v131[v137];
          *(_QWORD *)v138 = *(_QWORD *)v139;
          v140 = *((_QWORD *)v139 + 1);
          *((_QWORD *)v138 + 1) = v140;
          v141 = v132[7];
          v142 = &v130[v141];
          v143 = &v131[v141];
          *(_QWORD *)v142 = *(_QWORD *)v143;
          v144 = *((_QWORD *)v143 + 1);
          *((_QWORD *)v142 + 1) = v144;
          v130[v132[8]] = v131[v132[8]];
          v130[v132[9]] = v131[v132[9]];
          v130[v132[10]] = v131[v132[10]];
          *(_QWORD *)&v79[v81[13]] = *(_QWORD *)&v80[v81[13]];
          v145 = v81[14];
          v146 = &v79[v145];
          v147 = &v80[v145];
          v148 = type metadata accessor for CloudAltitudeKind(0);
          v149 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v148 - 8) + 16);
          swift_bridgeObjectRetain(v140);
          swift_bridgeObjectRetain(v144);
          v149(v146, v147, v148);
          v150 = v81[15];
          v151 = &v79[v150];
          v152 = &v80[v150];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v80[v150], 1, v246))
          {
            v153 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
          }
          else
          {
            v239(v151, v152, v246);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v151, 0, 1, v246);
          }
          v158 = v81[16];
          v159 = &v79[v158];
          v160 = &v80[v158];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v80[v158], 1, v246))
          {
            v161 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
          }
          else
          {
            v239(v159, v160, v246);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v159, 0, 1, v246);
          }
          v177 = v81[17];
          v178 = &v79[v177];
          v179 = &v80[v177];
          v180 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v180 - 8) + 16))(v178, v179, v180);
          v181 = v81[18];
          v182 = &v79[v181];
          v183 = &v80[v181];
          v184 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v184 - 8) + 16))(v182, v183, v184);
          *(_QWORD *)&v79[v81[19]] = *(_QWORD *)&v80[v81[19]];
          v185 = v81[20];
          v186 = &v79[v185];
          v187 = &v80[v185];
          if (*((_QWORD *)v187 + 1))
          {
            *(_QWORD *)v186 = *(_QWORD *)v187;
            v188 = *((_QWORD *)v187 + 1);
            *((_QWORD *)v186 + 1) = v188;
            v189 = *((_QWORD *)v187 + 2);
            v190 = *((_QWORD *)v187 + 3);
            v191 = v187[32];
            swift_bridgeObjectRetain(v188);
            sub_100006E58(v189, v190, v191);
            *((_QWORD *)v186 + 2) = v189;
            *((_QWORD *)v186 + 3) = v190;
            v186[32] = v191;
          }
          else
          {
            v194 = *(_OWORD *)v187;
            v195 = *((_OWORD *)v187 + 1);
            v186[32] = v187[32];
            *(_OWORD *)v186 = v194;
            *((_OWORD *)v186 + 1) = v195;
          }
          v39 = v245;
          v196 = v235[7];
          v197 = *(_QWORD *)&v241[v196];
          *(_QWORD *)&v245[v196] = v197;
          v198 = v235[8];
          v199 = *(_QWORD *)&v241[v198];
          *(_QWORD *)&v245[v198] = v199;
          v200 = v235[9];
          v201 = &v245[v200];
          v202 = &v241[v200];
          v203 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v197);
          swift_bridgeObjectRetain(v199);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v202, 1, (uint64_t)v203))
          {
            v204 = sub_100005D40(&qword_1001BFA30);
            memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
          }
          else
          {
            v236(v201, v202, v237);
            v239(&v201[v203[5]], &v202[v203[5]], v246);
            *(_QWORD *)&v201[v203[6]] = *(_QWORD *)&v202[v203[6]];
            v205 = v203[7];
            v206 = &v201[v205];
            v207 = &v202[v205];
            v208 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v208 - 8) + 16))(v206, v207, v208);
            v209 = v203[8];
            v210 = &v201[v209];
            v211 = &v202[v209];
            v212 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v212 - 8) + 16))(v210, v211, v212);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v201, 0, 1, (uint64_t)v203);
          }
          v213 = v235[10];
          v214 = &v245[v213];
          v215 = &v241[v213];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          v37 = v247;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v215, 1, HourPrecipitationChartViewModel))
          {
            v217 = sub_100005D40(&qword_1001BFA38);
            memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v214, v215, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v214, 0, 1, HourPrecipitationChartViewModel);
          }
          v41 = v244;
          v218 = v235[11];
          v219 = *(_QWORD *)&v241[v218];
          *(_QWORD *)&v245[v218] = v219;
          v220 = v235[12];
          v221 = &v245[v220];
          v222 = &v241[v220];
          v223 = *(_QWORD *)v222;
          *((_WORD *)v221 + 4) = *((_WORD *)v222 + 4);
          *(_QWORD *)v221 = v223;
          v224 = v235[13];
          v225 = &v245[v224];
          v226 = &v241[v224];
          swift_bridgeObjectRetain(v219);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v226, 1, v27))
          {
            v227 = sub_100005D40(&qword_1001BFA28);
            memcpy(v225, v226, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v225, v226, v27);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v225, 0, 1, v27);
          }
          v228 = v235[14];
          v229 = &v245[v228];
          v230 = &v241[v228];
          v231 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v230, 1, v231))
          {
            v232 = sub_100005D40(&qword_1001BFA40);
            memcpy(v229, v230, *(_QWORD *)(*(_QWORD *)(v232 - 8) + 64));
          }
          else
          {
            v233 = swift_getEnumCaseMultiPayload(v230, v231) == 1;
            v239(v229, v230, v246);
            swift_storeEnumTagMultiPayload(v229, v231, v233);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v229, 0, 1, v231);
          }
        }
        v42 = v243;
        v44 = v242;
      }
      swift_storeEnumTagMultiPayload(v39, v42, v44);
      swift_storeEnumTagMultiPayload(v39, v41, 1);
    }
    else
    {
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
  }
  return v37;
}

uint64_t sub_1000AE3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t EnumCaseMultiPayload;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  __int128 v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  int *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  __int128 v148;
  int *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  int *v153;
  uint64_t v154;
  void (*v155)(char *, char *, uint64_t);
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  _BOOL8 v183;
  void (*v185)(char *, char *, uint64_t);
  uint64_t v186;
  int *v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  void (*v193)(uint64_t, uint64_t);
  uint64_t v194;

  v4 = type metadata accessor for Date(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
  v194 = v4;
  v5(a1, a2);
  v6 = (int *)type metadata accessor for ForecastEntry(0);
  v7 = v6[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for TimelineEntryRelevance(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_100005D40(&qword_1001BFA20);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v12 = v6[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_OWORD *)(a2 + v12 + 16);
  *(_OWORD *)v13 = *(_OWORD *)(a2 + v12);
  *(_OWORD *)(v13 + 16) = v15;
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(a2 + v12 + 32);
  *(_DWORD *)(v13 + 48) = *(_DWORD *)(a2 + v12 + 48);
  v16 = type metadata accessor for WidgetContext(0);
  v17 = *(int *)(v16 + 40);
  v18 = (void *)(v13 + v17);
  v19 = (const void *)(v14 + v17);
  v20 = type metadata accessor for URL(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v20))
  {
    v21 = sub_100005D40(&qword_1001BFA28);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v18, 0, 1, v20);
  }
  v22 = *(int *)(v16 + 44);
  v23 = v13 + v22;
  v24 = v14 + v22;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  v25 = v6[7];
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = type metadata accessor for ForecastEntry.Model(0);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    v29 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v27, v29);
    v31 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v54 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v26, v27, v54);
    }
    else
    {
      v192 = v26;
      v193 = v5;
      v190 = v28;
      v191 = a1;
      v189 = v29;
      v188 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v32 = type metadata accessor for UUID(0);
        v33 = (void (*)(char *, char *, uint64_t))v5;
        v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
        v34(v26, v27, v32);
        v35 = type metadata accessor for InstantWeatherViewModel(0);
        v36 = *(int *)(v35 + 20);
        v37 = v26;
        v38 = &v26[v36];
        v39 = &v27[v36];
        v40 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
        v41 = *(int *)(v35 + 24);
        v42 = &v37[v41];
        v43 = &v27[v41];
        v34(v42, &v27[v41], v32);
        v44 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v33(&v42[v44[5]], &v43[v44[5]], v194);
        v33(&v42[v44[6]], &v43[v44[6]], v194);
        v45 = v44[7];
        v46 = &v42[v45];
        v47 = &v43[v45];
        v48 = sub_100005D40(&qword_1001BF090);
        v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32);
        v49(v46, v47, v48);
        v49(&v42[v44[8]], &v43[v44[8]], v48);
        *(_OWORD *)&v42[v44[9]] = *(_OWORD *)&v43[v44[9]];
        v50 = v44[10];
        v51 = &v42[v50];
        v52 = &v43[v50];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v43[v50], 1, v48))
        {
          v53 = sub_100005D40(&qword_1001BF098);
          memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
        }
        else
        {
          v49(v51, v52, v48);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v51, 0, 1, v48);
        }
        v76 = v44[11];
        v77 = &v42[v76];
        v78 = &v43[v76];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v43[v76], 1, v48))
        {
          v79 = sub_100005D40(&qword_1001BF098);
          memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        }
        else
        {
          v49(v77, v78, v48);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v77, 0, 1, v48);
        }
        v80 = v44[12];
        v81 = &v42[v80];
        v82 = &v43[v80];
        v34(&v42[v80], &v43[v80], v32);
        v83 = (int *)type metadata accessor for ConditionViewModel(0);
        v84 = v83[5];
        v85 = &v81[v84];
        v86 = &v82[v84];
        v87 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32))(v85, v86, v87);
        *(_OWORD *)&v81[v83[6]] = *(_OWORD *)&v82[v83[6]];
        *(_OWORD *)&v81[v83[7]] = *(_OWORD *)&v82[v83[7]];
        v81[v83[8]] = v82[v83[8]];
        v81[v83[9]] = v82[v83[9]];
        v81[v83[10]] = v82[v83[10]];
        *(_QWORD *)&v42[v44[13]] = *(_QWORD *)&v43[v44[13]];
        v88 = v44[14];
        v89 = &v42[v88];
        v90 = &v43[v88];
        v91 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 32))(v89, v90, v91);
        v92 = v44[15];
        v93 = &v42[v92];
        v94 = &v43[v92];
        a1 = v191;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v43[v92], 1, v194))
        {
          v95 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
          v96 = (void (*)(char *, char *, uint64_t))v193;
        }
        else
        {
          v96 = (void (*)(char *, char *, uint64_t))v193;
          ((void (*)(char *, char *, uint64_t))v193)(v93, v94, v194);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v93, 0, 1, v194);
        }
        v97 = v44[16];
        v98 = &v42[v97];
        v99 = &v43[v97];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v43[v97], 1, v194))
        {
          v100 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
        }
        else
        {
          v96(v98, v99, v194);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v98, 0, 1, v194);
        }
        v28 = v190;
        v101 = v44[17];
        v102 = &v42[v101];
        v103 = &v43[v101];
        v104 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 32))(v102, v103, v104);
        v105 = v44[18];
        v106 = &v42[v105];
        v107 = &v43[v105];
        v108 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 32))(v106, v107, v108);
        *(_QWORD *)&v42[v44[19]] = *(_QWORD *)&v43[v44[19]];
        v109 = v44[20];
        v110 = &v42[v109];
        v111 = &v43[v109];
        v110[32] = v111[32];
        v112 = *((_OWORD *)v111 + 1);
        *(_OWORD *)v110 = *(_OWORD *)v111;
        *((_OWORD *)v110 + 1) = v112;
        v26 = v192;
      }
      else
      {
        v55 = type metadata accessor for UUID(0);
        v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32);
        v56(v26, v27, v55);
        v57 = type metadata accessor for AggregateWeatherViewModel(0);
        v58 = *(int *)(v57 + 20);
        v59 = v26;
        v60 = &v26[v58];
        v61 = &v27[v58];
        v62 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v60, v61, v62);
        v186 = v55;
        v187 = (int *)v57;
        v63 = *(int *)(v57 + 24);
        v64 = &v59[v63];
        v65 = &v27[v63];
        v185 = v56;
        v56(&v59[v63], &v27[v63], v55);
        v66 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        ((void (*)(char *, char *, uint64_t))v193)(&v64[v66[5]], &v65[v66[5]], v194);
        ((void (*)(char *, char *, uint64_t))v193)(&v64[v66[6]], &v65[v66[6]], v194);
        v67 = v66[7];
        v68 = &v64[v67];
        v69 = &v65[v67];
        v70 = sub_100005D40(&qword_1001BF090);
        v71 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32);
        v71(v68, v69, v70);
        v71(&v64[v66[8]], &v65[v66[8]], v70);
        *(_OWORD *)&v64[v66[9]] = *(_OWORD *)&v65[v66[9]];
        v72 = v66[10];
        v73 = &v64[v72];
        v74 = &v65[v72];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v72], 1, v70))
        {
          v75 = sub_100005D40(&qword_1001BF098);
          memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
        }
        else
        {
          v71(v73, v74, v70);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v73, 0, 1, v70);
        }
        v113 = v66[11];
        v114 = &v64[v113];
        v115 = &v65[v113];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v113], 1, v70))
        {
          v116 = sub_100005D40(&qword_1001BF098);
          memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
        }
        else
        {
          v71(v114, v115, v70);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v114, 0, 1, v70);
        }
        v117 = v66[12];
        v118 = &v64[v117];
        v119 = &v65[v117];
        v185(&v64[v117], &v65[v117], v186);
        v120 = (int *)type metadata accessor for ConditionViewModel(0);
        v121 = v120[5];
        v122 = &v118[v121];
        v123 = &v119[v121];
        v124 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 32))(v122, v123, v124);
        *(_OWORD *)&v118[v120[6]] = *(_OWORD *)&v119[v120[6]];
        *(_OWORD *)&v118[v120[7]] = *(_OWORD *)&v119[v120[7]];
        v118[v120[8]] = v119[v120[8]];
        v118[v120[9]] = v119[v120[9]];
        v118[v120[10]] = v119[v120[10]];
        *(_QWORD *)&v64[v66[13]] = *(_QWORD *)&v65[v66[13]];
        v125 = v66[14];
        v126 = &v64[v125];
        v127 = &v65[v125];
        v128 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 32))(v126, v127, v128);
        v129 = v66[15];
        v130 = &v64[v129];
        v131 = &v65[v129];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v129], 1, v194))
        {
          v132 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v193)(v130, v131, v194);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v130, 0, 1, v194);
        }
        a1 = v191;
        v133 = v66[16];
        v134 = &v64[v133];
        v135 = &v65[v133];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v133], 1, v194))
        {
          v136 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v193)(v134, v135, v194);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v134, 0, 1, v194);
        }
        v137 = v66[17];
        v138 = &v64[v137];
        v139 = &v65[v137];
        v140 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 32))(v138, v139, v140);
        v141 = v66[18];
        v142 = &v64[v141];
        v143 = &v65[v141];
        v144 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 32))(v142, v143, v144);
        *(_QWORD *)&v64[v66[19]] = *(_QWORD *)&v65[v66[19]];
        v145 = v66[20];
        v146 = &v64[v145];
        v147 = &v65[v145];
        v146[32] = v147[32];
        v148 = *((_OWORD *)v147 + 1);
        *(_OWORD *)v146 = *(_OWORD *)v147;
        *((_OWORD *)v146 + 1) = v148;
        v149 = v187;
        v26 = v192;
        *(_QWORD *)&v192[v187[7]] = *(_QWORD *)&v27[v187[7]];
        *(_QWORD *)&v192[v187[8]] = *(_QWORD *)&v27[v187[8]];
        v150 = v187[9];
        v151 = &v192[v150];
        v152 = &v27[v150];
        v153 = (int *)type metadata accessor for AirQualityViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v152, 1, (uint64_t)v153))
        {
          v154 = sub_100005D40(&qword_1001BFA30);
          memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
          v155 = (void (*)(char *, char *, uint64_t))v193;
        }
        else
        {
          v185(v151, v152, v186);
          v155 = (void (*)(char *, char *, uint64_t))v193;
          ((void (*)(char *, char *, uint64_t))v193)(&v151[v153[5]], &v152[v153[5]], v194);
          *(_QWORD *)&v151[v153[6]] = *(_QWORD *)&v152[v153[6]];
          v156 = v153[7];
          v157 = &v151[v156];
          v158 = &v152[v156];
          v159 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 32))(v157, v158, v159);
          v160 = v153[8];
          v161 = &v151[v160];
          v162 = &v152[v160];
          v163 = type metadata accessor for AirQualityScaleCategory(0);
          v164 = v161;
          v149 = v187;
          v165 = v162;
          v26 = v192;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v163 - 8) + 32))(v164, v165, v163);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v151, 0, 1, (uint64_t)v153);
        }
        v166 = v149[10];
        v167 = &v26[v166];
        v168 = &v27[v166];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v168, 1, HourPrecipitationChartViewModel))
        {
          v170 = sub_100005D40(&qword_1001BFA38);
          memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v167, v168, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v167, 0, 1, HourPrecipitationChartViewModel);
        }
        *(_QWORD *)&v26[v149[11]] = *(_QWORD *)&v27[v149[11]];
        v171 = v149[12];
        v172 = &v26[v171];
        v173 = &v27[v171];
        *(_QWORD *)v172 = *(_QWORD *)v173;
        *((_WORD *)v172 + 4) = *((_WORD *)v173 + 4);
        v174 = v149[13];
        v175 = &v26[v174];
        v176 = &v27[v174];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v27[v174], 1, v20))
        {
          v177 = sub_100005D40(&qword_1001BFA28);
          memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v175, v176, v20);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v175, 0, 1, v20);
        }
        v178 = v149[14];
        v179 = &v26[v178];
        v180 = &v27[v178];
        v181 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v180, 1, v181))
        {
          v182 = sub_100005D40(&qword_1001BFA40);
          memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
        }
        else
        {
          v183 = swift_getEnumCaseMultiPayload(v180, v181) == 1;
          v155(v179, v180, v194);
          swift_storeEnumTagMultiPayload(v179, v181, v183);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v179, 0, 1, v181);
        }
        v28 = v190;
      }
      v29 = v189;
      v31 = v188;
    }
    swift_storeEnumTagMultiPayload(v26, v29, v31);
    swift_storeEnumTagMultiPayload(v26, v28, 1);
  }
  else
  {
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000AF154(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t EnumCaseMultiPayload;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int *v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  int *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  int *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  __int128 v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  __int128 v159;
  int *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  int *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  _BOOL8 v192;
  uint64_t v194;
  char *v195;
  void (*v196)(char *, char *, uint64_t);
  void (*v197)(char *, char *, uint64_t);
  int *v198;
  void (*v199)(char *, char *, uint64_t);
  void (*v200)(char *, char *, uint64_t);
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v205 = v4;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a1, a2);
  v6 = (int *)type metadata accessor for ForecastEntry(0);
  v7 = v6[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for TimelineEntryRelevance(0);
  v11 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v8, 1, v10);
  v12 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v10);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    v14 = sub_100005D40(&qword_1001BFA20);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  v15 = v6[6];
  v206 = a1;
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a2 + v15 + 8);
  v19 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)v16 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(v16 + 8) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(v17 + 24);
  v21 = *(_QWORD *)(v16 + 24);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v16 + 24) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(v17 + 40);
  v23 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
  *(_QWORD *)(v16 + 40) = v22;
  swift_bridgeObjectRelease(v23);
  *(_WORD *)(v16 + 48) = *(_WORD *)(v17 + 48);
  *(_BYTE *)(v16 + 50) = *(_BYTE *)(v17 + 50);
  *(_BYTE *)(v16 + 51) = *(_BYTE *)(v17 + 51);
  v24 = type metadata accessor for WidgetContext(0);
  v25 = *(int *)(v24 + 40);
  v26 = (void *)(v16 + v25);
  v27 = (const void *)(v17 + v25);
  v28 = type metadata accessor for URL(0);
  v29 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v28);
  v30 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v27, 1, v28);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v31 = *(_QWORD *)(v28 - 8);
  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v31 + 8))(v26, v28);
LABEL_12:
    v32 = sub_100005D40(&qword_1001BFA28);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v31 + 40))(v26, v27, v28);
LABEL_13:
  v33 = *(int *)(v24 + 44);
  v34 = (uint64_t *)(v16 + v33);
  v35 = (uint64_t *)(v17 + v33);
  v36 = *v34;
  *v34 = *v35;
  swift_bridgeObjectRelease(v36);
  *((_BYTE *)v34 + 8) = *((_BYTE *)v35 + 8);
  v37 = v206;
  if (v206 != a2)
  {
    v38 = v6[7];
    v39 = (char *)(v206 + v38);
    v40 = (char *)(a2 + v38);
    sub_100011894(v206 + v38, type metadata accessor for ForecastEntry.Model);
    v41 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v40, v41) == 1)
    {
      v42 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v40, v42);
      v44 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v66 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v39, v40, v66);
      }
      else
      {
        v203 = v41;
        v204 = v39;
        v202 = v42;
        v201 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v45 = type metadata accessor for UUID(0);
          v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32);
          v46(v39, v40, v45);
          v47 = type metadata accessor for InstantWeatherViewModel(0);
          v48 = *(int *)(v47 + 20);
          v49 = &v39[v48];
          v50 = &v40[v48];
          v51 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v49, v50, v51);
          v52 = *(int *)(v47 + 24);
          v53 = &v39[v52];
          v54 = &v40[v52];
          v199 = v46;
          v46(&v39[v52], v54, v45);
          v55 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v56 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
          v56(&v53[v55[5]], &v54[v55[5]], v205);
          v197 = v56;
          v56(&v53[v55[6]], &v54[v55[6]], v205);
          v57 = v55[7];
          v58 = &v53[v57];
          v59 = &v54[v57];
          v60 = sub_100005D40(&qword_1001BF090);
          v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32);
          v61(v58, v59, v60);
          v61(&v53[v55[8]], &v54[v55[8]], v60);
          *(_OWORD *)&v53[v55[9]] = *(_OWORD *)&v54[v55[9]];
          v62 = v55[10];
          v63 = &v53[v62];
          v64 = &v54[v62];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v54[v62], 1, v60))
          {
            v65 = sub_100005D40(&qword_1001BF098);
            memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
          }
          else
          {
            v61(v63, v64, v60);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v60);
          }
          v88 = v55[11];
          v89 = &v53[v88];
          v90 = &v54[v88];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v54[v88], 1, v60))
          {
            v91 = sub_100005D40(&qword_1001BF098);
            memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
          }
          else
          {
            v61(v89, v90, v60);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v89, 0, 1, v60);
          }
          v96 = v55[12];
          v97 = &v53[v96];
          v98 = &v54[v96];
          v199(&v53[v96], &v54[v96], v45);
          v99 = (int *)type metadata accessor for ConditionViewModel(0);
          v100 = v99[5];
          v101 = &v97[v100];
          v102 = &v98[v100];
          v103 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v101, v102, v103);
          *(_OWORD *)&v97[v99[6]] = *(_OWORD *)&v98[v99[6]];
          *(_OWORD *)&v97[v99[7]] = *(_OWORD *)&v98[v99[7]];
          v97[v99[8]] = v98[v99[8]];
          v97[v99[9]] = v98[v99[9]];
          v97[v99[10]] = v98[v99[10]];
          *(_QWORD *)&v53[v55[13]] = *(_QWORD *)&v54[v55[13]];
          v104 = v55[14];
          v105 = &v53[v104];
          v106 = &v54[v104];
          v107 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 32))(v105, v106, v107);
          v108 = v55[15];
          v109 = &v53[v108];
          v110 = &v54[v108];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v54[v108], 1, v205))
          {
            v111 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
          }
          else
          {
            v197(v109, v110, v205);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v109, 0, 1, v205);
          }
          v39 = v204;
          v128 = v55[16];
          v129 = &v53[v128];
          v130 = &v54[v128];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v54[v128], 1, v205))
          {
            v131 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
          }
          else
          {
            v197(v129, v130, v205);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v129, 0, 1, v205);
          }
          v136 = v55[17];
          v137 = &v53[v136];
          v138 = &v54[v136];
          v139 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v139 - 8) + 32))(v137, v138, v139);
          v140 = v55[18];
          v141 = &v53[v140];
          v142 = &v54[v140];
          v143 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 32))(v141, v142, v143);
          *(_QWORD *)&v53[v55[19]] = *(_QWORD *)&v54[v55[19]];
          v144 = v55[20];
          v145 = &v53[v144];
          v146 = &v54[v144];
          v145[32] = v146[32];
          v147 = *((_OWORD *)v146 + 1);
          *(_OWORD *)v145 = *(_OWORD *)v146;
          *((_OWORD *)v145 + 1) = v147;
          v37 = v206;
          v41 = v203;
        }
        else
        {
          v67 = type metadata accessor for UUID(0);
          v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32);
          v68(v39, v40, v67);
          v69 = type metadata accessor for AggregateWeatherViewModel(0);
          v70 = *(int *)(v69 + 20);
          v71 = &v39[v70];
          v72 = &v40[v70];
          v73 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
          v196 = v68;
          v198 = (int *)v69;
          v74 = *(int *)(v69 + 24);
          v75 = &v39[v74];
          v195 = v40;
          v76 = &v40[v74];
          v68(&v39[v74], v76, v67);
          v77 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v78 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
          v78(&v75[v77[5]], &v76[v77[5]], v205);
          v200 = v78;
          v78(&v75[v77[6]], &v76[v77[6]], v205);
          v79 = v77[7];
          v80 = &v75[v79];
          v81 = &v76[v79];
          v82 = sub_100005D40(&qword_1001BF090);
          v83 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 32);
          v83(v80, v81, v82);
          v83(&v75[v77[8]], &v76[v77[8]], v82);
          *(_OWORD *)&v75[v77[9]] = *(_OWORD *)&v76[v77[9]];
          v84 = v77[10];
          v85 = &v75[v84];
          v86 = &v76[v84];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v76[v84], 1, v82))
          {
            v87 = sub_100005D40(&qword_1001BF098);
            memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
          }
          else
          {
            v83(v85, v86, v82);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v85, 0, 1, v82);
          }
          v92 = v77[11];
          v93 = &v75[v92];
          v94 = &v76[v92];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v76[v92], 1, v82))
          {
            v95 = sub_100005D40(&qword_1001BF098);
            memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
          }
          else
          {
            v83(v93, v94, v82);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v93, 0, 1, v82);
          }
          v112 = v77[12];
          v113 = &v75[v112];
          v114 = &v76[v112];
          v194 = v67;
          v196(&v75[v112], &v76[v112], v67);
          v115 = (int *)type metadata accessor for ConditionViewModel(0);
          v116 = v115[5];
          v117 = &v113[v116];
          v118 = &v114[v116];
          v119 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 32))(v117, v118, v119);
          *(_OWORD *)&v113[v115[6]] = *(_OWORD *)&v114[v115[6]];
          *(_OWORD *)&v113[v115[7]] = *(_OWORD *)&v114[v115[7]];
          v113[v115[8]] = v114[v115[8]];
          v113[v115[9]] = v114[v115[9]];
          v113[v115[10]] = v114[v115[10]];
          *(_QWORD *)&v75[v77[13]] = *(_QWORD *)&v76[v77[13]];
          v120 = v77[14];
          v121 = &v75[v120];
          v122 = &v76[v120];
          v123 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 32))(v121, v122, v123);
          v124 = v77[15];
          v125 = &v75[v124];
          v126 = &v76[v124];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v76[v124], 1, v205))
          {
            v127 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
          }
          else
          {
            v200(v125, v126, v205);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v125, 0, 1, v205);
          }
          v132 = v77[16];
          v133 = &v75[v132];
          v134 = &v76[v132];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v76[v132], 1, v205))
          {
            v135 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
          }
          else
          {
            v200(v133, v134, v205);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v133, 0, 1, v205);
          }
          v148 = v77[17];
          v149 = &v75[v148];
          v150 = &v76[v148];
          v151 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 32))(v149, v150, v151);
          v152 = v77[18];
          v153 = &v75[v152];
          v154 = &v76[v152];
          v155 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 32))(v153, v154, v155);
          *(_QWORD *)&v75[v77[19]] = *(_QWORD *)&v76[v77[19]];
          v156 = v77[20];
          v157 = &v75[v156];
          v158 = &v76[v156];
          v157[32] = v158[32];
          v159 = *((_OWORD *)v158 + 1);
          *(_OWORD *)v157 = *(_OWORD *)v158;
          *((_OWORD *)v157 + 1) = v159;
          v160 = v198;
          v39 = v204;
          *(_QWORD *)&v204[v198[7]] = *(_QWORD *)&v195[v198[7]];
          *(_QWORD *)&v204[v198[8]] = *(_QWORD *)&v195[v198[8]];
          v161 = v198[9];
          v162 = &v204[v161];
          v163 = &v195[v161];
          v164 = (int *)type metadata accessor for AirQualityViewModel(0);
          v41 = v203;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v163, 1, (uint64_t)v164))
          {
            v165 = sub_100005D40(&qword_1001BFA30);
            memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
          }
          else
          {
            v196(v162, v163, v194);
            v200(&v162[v164[5]], &v163[v164[5]], v205);
            *(_QWORD *)&v162[v164[6]] = *(_QWORD *)&v163[v164[6]];
            v166 = v164[7];
            v167 = &v162[v166];
            v168 = &v163[v166];
            v169 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 32))(v167, v168, v169);
            v170 = v164[8];
            v171 = &v162[v170];
            v172 = &v163[v170];
            v173 = type metadata accessor for AirQualityScaleCategory(0);
            v174 = v171;
            v160 = v198;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32))(v174, v172, v173);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v162, 0, 1, (uint64_t)v164);
          }
          v175 = v160[10];
          v176 = &v204[v175];
          v177 = &v195[v175];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          v37 = v206;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v177, 1, HourPrecipitationChartViewModel))
          {
            v179 = sub_100005D40(&qword_1001BFA38);
            memcpy(v176, v177, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v176, v177, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v176, 0, 1, HourPrecipitationChartViewModel);
          }
          *(_QWORD *)&v204[v160[11]] = *(_QWORD *)&v195[v160[11]];
          v180 = v160[12];
          v181 = &v204[v180];
          v182 = &v195[v180];
          *(_QWORD *)v181 = *(_QWORD *)v182;
          *((_WORD *)v181 + 4) = *((_WORD *)v182 + 4);
          v183 = v160[13];
          v184 = &v204[v183];
          v185 = &v195[v183];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v195[v183], 1, v28))
          {
            v186 = sub_100005D40(&qword_1001BFA28);
            memcpy(v184, v185, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v184, v185, v28);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v184, 0, 1, v28);
          }
          v187 = v160[14];
          v188 = &v204[v187];
          v189 = &v195[v187];
          v190 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v189, 1, v190))
          {
            v191 = sub_100005D40(&qword_1001BFA40);
            memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
          }
          else
          {
            v192 = swift_getEnumCaseMultiPayload(v189, v190) == 1;
            v200(v188, v189, v205);
            swift_storeEnumTagMultiPayload(v188, v190, v192);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v188, 0, 1, v190);
          }
        }
        v42 = v202;
        v44 = v201;
      }
      swift_storeEnumTagMultiPayload(v39, v42, v44);
      swift_storeEnumTagMultiPayload(v39, v41, 1);
    }
    else
    {
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
  }
  return v37;
}

uint64_t sub_1000AFFB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AFFC4);
}

uint64_t sub_1000AFFC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000B19C8();
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, v0, v2);
}

uint64_t sub_1000AFFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AFFF8);
}

uint64_t sub_1000AFFF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000B19C8();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, v0, v0, v2);
}

uint64_t type metadata accessor for PrecipitationChartView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C2910;
  if (!qword_1001C2910)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrecipitationChartView);
  return result;
}

uint64_t sub_1000B005C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ForecastEntry(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000B00C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F9D0, 1);
}

uint64_t sub_1000B00D4()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000B00F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for ColorScheme(0);
  __chkstk_darwin(v2);
  sub_10002325C();
  v5 = v4 - v3;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v4 - v3, a1);
  return EnvironmentValues.colorScheme.setter(v5);
}

void sub_1000B0168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v48 = type metadata accessor for AccessibilityChildBehavior(0);
  v1 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  sub_100049C1C();
  v2 = sub_100005D40(&qword_1001C29A8);
  sub_100029068();
  __chkstk_darwin(v3);
  sub_10002325C();
  v6 = v5 - v4;
  v7 = sub_100005D40(&qword_1001C29B0);
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  __chkstk_darwin(v7);
  sub_10002325C();
  v10 = v9 - v8;
  sub_100005D40(&qword_1001C29B8);
  sub_100029068();
  __chkstk_darwin(v11);
  sub_10002325C();
  v14 = v13 - v12;
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100025184(v15, (uint64_t)qword_1001D9FF0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Precipitation chart rendering", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v20);
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) = 0;
  v21 = sub_100005D40(&qword_1001C29C0);
  v22 = sub_1000B04D8(v51, (char *)(v6 + *(int *)(v21 + 44)));
  static AccessibilityChildBehavior.combine.getter(v22);
  sub_100016A54(&qword_1001C29C8, &qword_1001C29A8);
  v24 = v23;
  View.accessibilityElement(children:)(v0, v2, v23);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v48);
  sub_100016904(v6, &qword_1001C29A8);
  v25 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x8000000100187A50);
  v29 = Text.init(_:tableName:bundle:comment:)(v25, v27, v26 & 1, v28, 0, 0, 0);
  v31 = v30;
  v33 = v32;
  v35 = v34 & 1;
  v52 = v2;
  v53 = v24;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibility(label:)(v29, v31, v35, v33, v50, OpaqueTypeConformance2);
  sub_100016868(v29, v31, v35);
  v37 = swift_bridgeObjectRelease(v33);
  (*(void (**)(uint64_t, uint64_t, __n128))(v49 + 8))(v10, v50, v37);
  v38 = v51 + *(int *)(type metadata accessor for ForecastEntry(0) + 24);
  v39 = *(_QWORD *)(v38 + 40);
  v52 = *(_QWORD *)(v38 + 32);
  v53 = v39;
  v40 = sub_10001692C();
  swift_bridgeObjectRetain(v39);
  v41 = Text.init<A>(_:)(&v52, &type metadata for String, v40);
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  ModifiedContent<>.accessibility(value:)();
  sub_100016868(v41, v43, v47);
  swift_bridgeObjectRelease(v45);
  sub_100016904(v14, &qword_1001C29B8);
  sub_10001C770();
}

uint64_t sub_1000B04D8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  char *v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int EnumCaseMultiPayload;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t HourPrecipitationChartView;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t KeyPath;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD v147[2];
  char v148;

  KeyPath = a1;
  v137 = a2;
  v118 = type metadata accessor for ColorScheme(0);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v116 = (char *)&v110 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005D40(&qword_1001C29D0);
  __chkstk_darwin(v3);
  v111 = (uint64_t)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  HourPrecipitationChartView = type metadata accessor for NextHourPrecipitationChartView(0);
  v114 = *(_QWORD *)(HourPrecipitationChartView - 8);
  __chkstk_darwin(HourPrecipitationChartView);
  v113 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100005D40(&qword_1001C29D8);
  __chkstk_darwin(v136);
  v112 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005D40(&qword_1001BFA38);
  __chkstk_darwin(v7);
  v120 = (uint64_t)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v122 = *(_QWORD *)(HourPrecipitationChartViewModel - 8);
  v9 = __chkstk_darwin(HourPrecipitationChartViewModel);
  v110 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v121 = (char *)&v110 - v11;
  v12 = sub_100005D40(&qword_1001BF9B0);
  __chkstk_darwin(v12);
  v133 = (uint64_t)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v119);
  v123 = (uint64_t)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005D40(&qword_1001C29E0);
  v16 = __chkstk_darwin(v15);
  v135 = (uint64_t)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v140 = (uint64_t)&v110 - v18;
  v130 = sub_100005D40(&qword_1001BF358);
  __chkstk_darwin(v130);
  v20 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100005D40(&qword_1001C29E8);
  v139 = *(_QWORD *)(v132 - 8);
  v21 = __chkstk_darwin(v132);
  v138 = (char *)&v110 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v131 = (char *)&v110 - v23;
  v24 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x8000000100187AB0);
  v28 = Text.init(_:tableName:bundle:comment:)(v24, v26, v25 & 1, v27, 0, 0, 0);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v35 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  v36 = objc_msgSend(v35, "colorWithAlphaComponent:", 0.5);

  v37 = Color.init(_:)(v36);
  v38 = Text.foregroundColor(_:)(v37, v28, v30, v34, v32);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  swift_release(v37);
  v45 = v42 & 1;
  sub_100016868(v28, v30, v34);
  v46 = swift_bridgeObjectRelease(v32);
  v47 = static Font.caption2.getter(v46);
  v48 = Text.font(_:)(v47, v38, v40, v45, v44);
  v50 = v49;
  LOBYTE(v30) = v51;
  v53 = v52;
  swift_release(v47);
  LOBYTE(v47) = v30 & 1;
  sub_100016868(v38, v40, v45);
  v54 = swift_bridgeObjectRelease(v44);
  v55 = static Font.Weight.semibold.getter(v54);
  v56 = Text.fontWeight(_:)(*(_QWORD *)&v55, 0, v48, v50, v30 & 1, v53);
  v58 = v57;
  LOBYTE(v30) = v59;
  v61 = v60;
  sub_100016868(v48, v50, v47);
  swift_bridgeObjectRelease(v53);
  v141 = v56;
  v142 = v58;
  LOBYTE(v143) = v30 & 1;
  v144 = v61;
  v62 = enum case for DynamicTypeSize.large(_:);
  v63 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 104))(v20, v62, v63);
  sub_100016878(&qword_1001BF468, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v20, v20, v63);
  if ((result & 1) != 0)
  {
    sub_100016A54(&qword_1001BF458, &qword_1001BF358);
    v65 = v138;
    View.dynamicTypeSize<A>(_:)(v20, &type metadata for Text, v130, &protocol witness table for Text, v66);
    sub_100016904((uint64_t)v20, &qword_1001BF358);
    sub_100016868(v141, v142, v143);
    v67 = swift_bridgeObjectRelease(v144);
    v68 = v139;
    v69 = v131;
    v70 = v132;
    v71 = (*(uint64_t (**)(char *, char *, uint64_t, __n128))(v139 + 32))(v131, v65, v132, v67);
    v72 = static Alignment.center.getter(v71);
    _FrameLayout.init(width:height:alignment:)(&v141, 0, 1, 0x4008000000000000, 0, v72, v73);
    v130 = v141;
    v129 = v142;
    v128 = v143;
    v127 = v144;
    v126 = v145;
    v125 = v146;
    v74 = v133;
    sub_10002FC48(v133);
    v75 = type metadata accessor for WeatherDataViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v74, 1, v75) == 1)
    {
      sub_100016904(v74, &qword_1001BF9B0);
      v76 = 1;
      v77 = v136;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v74, v75);
      v77 = v136;
      if (EnumCaseMultiPayload)
      {
        sub_100011894(v74, type metadata accessor for WeatherDataViewModel);
      }
      else
      {
        v79 = v123;
        sub_1000B17C0(v74, v123);
        v80 = v120;
        sub_10002EFD4(v79 + *(int *)(v119 + 40), v120, &qword_1001BFA38);
        v81 = HourPrecipitationChartViewModel;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v80, 1, HourPrecipitationChartViewModel) != 1)
        {
          v94 = v122;
          v95 = v121;
          (*(void (**)(char *, uint64_t, uint64_t))(v122 + 32))(v121, v80, v81);
          v96 = v110;
          (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v110, v95, v81);
          memset(v147, 0, sizeof(v147));
          v148 = 0;
          v97 = sub_100005D40(&qword_1001C29F8);
          v98 = v111;
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v111, 1, 1, v97);
          v99 = v113;
          NextHourPrecipitationChartView.init(model:lollipopPoint:selectedData:lollipopEnabled:)(v96, v147, v98, 0);
          KeyPath = swift_getKeyPath(&unk_10017E808);
          v100 = v117;
          v101 = v116;
          v102 = v118;
          (*(void (**)(char *, _QWORD, uint64_t))(v117 + 104))(v116, enum case for ColorScheme.dark(_:), v118);
          v103 = (uint64_t)v112;
          v104 = (uint64_t *)&v112[*(int *)(v77 + 36)];
          v105 = sub_100005D40(&qword_1001C1650);
          (*(void (**)(char *, char *, uint64_t))(v100 + 16))((char *)v104 + *(int *)(v105 + 28), v101, v102);
          *v104 = KeyPath;
          v106 = v70;
          v107 = v114;
          v108 = HourPrecipitationChartView;
          (*(void (**)(uint64_t, char *, uint64_t))(v114 + 16))(v103, v99, HourPrecipitationChartView);
          (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v102);
          v109 = *(void (**)(char *, uint64_t))(v107 + 8);
          v70 = v106;
          v65 = v138;
          v68 = v139;
          v109(v99, v108);
          (*(void (**)(char *, uint64_t))(v122 + 8))(v121, HourPrecipitationChartViewModel);
          sub_100011894(v123, type metadata accessor for AggregateWeatherViewModel);
          sub_1000B1828(v103, v140);
          v76 = 0;
          goto LABEL_9;
        }
        sub_100011894(v79, type metadata accessor for AggregateWeatherViewModel);
        sub_100016904(v80, &qword_1001BFA38);
      }
      v76 = 1;
    }
LABEL_9:
    v82 = v140;
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v140, v76, 1, v77);
    v83 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
    v83(v65, v69, v70);
    v84 = v69;
    v85 = v68;
    v86 = v65;
    v87 = v70;
    v88 = v135;
    sub_10002EFD4(v82, v135, &qword_1001C29E0);
    v89 = v137;
    v83(v137, v86, v87);
    v90 = sub_100005D40(&qword_1001C29F0);
    v91 = &v89[*(int *)(v90 + 48)];
    *(_QWORD *)v91 = 0;
    v91[8] = 1;
    *((_QWORD *)v91 + 2) = v130;
    v91[24] = v129;
    *((_QWORD *)v91 + 4) = v128;
    v91[40] = v127;
    v92 = v125;
    *((_QWORD *)v91 + 6) = v126;
    *((_QWORD *)v91 + 7) = v92;
    sub_10002EFD4(v88, (uint64_t)&v89[*(int *)(v90 + 64)], &qword_1001C29E0);
    sub_100016904(v82, &qword_1001C29E0);
    v93 = *(void (**)(char *, uint64_t))(v85 + 8);
    v93(v84, v87);
    sub_100016904(v88, &qword_1001C29E0);
    return ((uint64_t (*)(char *, uint64_t))v93)(v86, v87);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B0F48(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019F9A8, 1);
}

uint64_t sub_1000B0F58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[2];

  v10 = sub_100005D40(&qword_1001C2988);
  __chkstk_darwin(v10);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005D40(&qword_1001C2980);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 1) != 0)
  {
    v27[1] = a5;
    __chkstk_darwin(v15);
    v27[-4] = a1;
    v27[-3] = a2;
    v27[-2] = a3;
    LOBYTE(v27[-1]) = 1;
    v18 = sub_100005D40(&qword_1001C2990);
    v19 = sub_1000B1734();
    Label.init(title:icon:)(sub_1000B1724, &v27[-6], sub_1000B1214, 0, &type metadata for Text, v18, &protocol witness table for Text, v19);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v12, v17, v13);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    sub_100016A54(&qword_1001C2978, &qword_1001C2980);
    _ConditionalContent<>.init(storage:)(v12, v13, &type metadata for Text, v20, &protocol witness table for Text);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  else
  {
    v28[0] = a1;
    v28[1] = a2;
    v22 = sub_10001692C();
    swift_bridgeObjectRetain(a2);
    *(_QWORD *)v12 = Text.init<A>(_:)(v28, &type metadata for String, v22);
    *((_QWORD *)v12 + 1) = v23;
    v12[16] = v24 & 1;
    *((_QWORD *)v12 + 3) = v25;
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    sub_100016A54(&qword_1001C2978, &qword_1001C2980);
    return _ConditionalContent<>.init(storage:)(v12, v13, &type metadata for Text, v26, &protocol witness table for Text);
  }
}

uint64_t sub_1000B11AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v5 = sub_10001692C();
  swift_bridgeObjectRetain(a2);
  result = Text.init<A>(_:)(v10, &type metadata for String, v5);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = v8 & 1;
  *(_QWORD *)(a3 + 24) = v9;
  return result;
}

uint64_t sub_1000B1214@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v13;

  v2 = sub_100005D40(&qword_1001C24D0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Image.Scale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Image.init(systemName:)(0xD00000000000001DLL, 0x8000000100187A30);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Image.Scale.small(_:), v5);
  KeyPath = swift_getKeyPath(&unk_10017E7D8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v4 + *(int *)(v2 + 28), v8, v5);
  *v4 = KeyPath;
  v11 = sub_100005D40(&qword_1001C2990);
  sub_10002EFD4((uint64_t)v4, (uint64_t)a1 + *(int *)(v11 + 36), &qword_1001C24D0);
  *a1 = v9;
  swift_retain(v9);
  sub_100016904((uint64_t)v4, &qword_1001C24D0);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v9);
}

void sub_1000B1384(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = type metadata accessor for Font.Leading(0);
  v32 = *(_QWORD *)(v9 - 8);
  v33 = v9;
  __chkstk_darwin(v9);
  sub_10002325C();
  v12 = v11 - v10;
  sub_100005D40(&qword_1001C2948);
  sub_100029068();
  __chkstk_darwin(v13);
  sub_100049C1C();
  v14 = sub_100005D40(&qword_1001C2950);
  sub_100029068();
  __chkstk_darwin(v15);
  sub_10002325C();
  v18 = v17 - v16;
  v19 = sub_100005D40(&qword_1001C2958);
  sub_100029068();
  __chkstk_darwin(v20);
  sub_10002325C();
  v23 = v22 - v21;
  v24 = sub_1000B0F58(a1, a2, a3, a4, v4);
  v25 = static Color.white.getter(v24);
  KeyPath = swift_getKeyPath(&unk_10017E778);
  sub_10002EFD4(v4, v18, &qword_1001C2948);
  v27 = (uint64_t *)(v18 + *(int *)(v14 + 36));
  *v27 = KeyPath;
  v27[1] = v25;
  sub_100016904(v4, &qword_1001C2948);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v12, enum case for Font.Leading.tight(_:), v33);
  v28 = Font.leading(_:)(v12, a3);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v12, v33);
  v29 = swift_getKeyPath(&unk_10017E7A8);
  sub_10002EFD4(v18, v23, &qword_1001C2950);
  v30 = (uint64_t *)(v23 + *(int *)(v19 + 36));
  *v30 = v29;
  v30[1] = v28;
  sub_100016904(v18, &qword_1001C2950);
  v31 = sub_1000B1598();
  View.accessibility(hidden:)(1, v19, v31);
  sub_100016904(v23, &qword_1001C2958);
  sub_10001C770();
}

void sub_1000B1578()
{
  uint64_t v0;

  sub_1000B1384(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

unint64_t sub_1000B1598()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2960;
  if (!qword_1001C2960)
  {
    v1 = sub_100005DC4(&qword_1001C2958);
    sub_1000B161C();
    sub_100016A54(&qword_1001BF3F0, &qword_1001BF3F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2960);
  }
  return result;
}

unint64_t sub_1000B161C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2968;
  if (!qword_1001C2968)
  {
    v1 = sub_100005DC4(&qword_1001C2950);
    sub_1000B16A0();
    sub_100016A54(&qword_1001BF3E0, &qword_1001BF3E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2968);
  }
  return result;
}

unint64_t sub_1000B16A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2970;
  if (!qword_1001C2970)
  {
    v1 = sub_100005DC4(&qword_1001C2948);
    sub_100016A54(&qword_1001C2978, &qword_1001C2980);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2970);
  }
  return result;
}

uint64_t sub_1000B1724@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B11AC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1000B1734()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2998;
  if (!qword_1001C2998)
  {
    v1 = sub_100005DC4(&qword_1001C2990);
    sub_100016A54(&qword_1001C29A0, &qword_1001C24D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2998);
  }
  return result;
}

uint64_t sub_1000B17C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AggregateWeatherViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B1804()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000B1828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001C29D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000B1874()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2A00;
  if (!qword_1001C2A00)
  {
    v1 = sub_100005DC4(&qword_1001C2A08);
    sub_1000B1598();
    sub_100016878((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2A00);
  }
  return result;
}

unint64_t sub_1000B18FC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1001C2A10;
  if (!qword_1001C2A10)
  {
    v1 = sub_100005DC4(&qword_1001C29B8);
    v2 = sub_100005DC4(&qword_1001C29A8);
    sub_100016A54(&qword_1001C29C8, &qword_1001C29A8);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100016878((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2A10);
  }
  return result;
}

uint64_t sub_1000B19C8()
{
  return type metadata accessor for ForecastEntry(0);
}

uint64_t *sub_1000B19D8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v54 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v54 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v54);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_100005D40(&qword_1001BF090);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[7];
    v18 = a3[8];
    v19 = (uint64_t *)((char *)a1 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = (uint64_t *)((char *)a1 + v18);
    v23 = (uint64_t *)((char *)a2 + v18);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = a3[9];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v24);
    v8((uint64_t *)v26, (uint64_t *)v27, v7);
    v28 = (int *)type metadata accessor for ConditionViewModel(0);
    v29 = v28[5];
    v30 = &v26[v29];
    v31 = &v27[v29];
    v32 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    v33 = v28[6];
    v34 = &v26[v33];
    v35 = &v27[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = v28[7];
    v38 = &v26[v37];
    v39 = &v27[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v26[v28[8]] = v27[v28[8]];
    v26[v28[9]] = v27[v28[9]];
    v26[v28[10]] = v27[v28[10]];
    v41 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    v42 = (uint64_t *)((char *)a1 + v41);
    v43 = (uint64_t *)((char *)a2 + v41);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = a3[12];
    v46 = (char *)a1 + v45;
    v47 = (char *)a2 + v45;
    v48 = type metadata accessor for Precipitation(0);
    v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v44);
    v49(v46, v47, v48);
    v50 = a3[13];
    v51 = (char *)a1 + v50;
    v52 = (char *)a2 + v50;
    v53 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
  }
  return a1;
}

uint64_t sub_1000B1C2C(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[6];
  v9 = sub_100005D40(&qword_1001BF090);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  v10 = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  v11 = a1 + a2[9];
  ((void (*)(uint64_t, uint64_t, __n128))v5)(v11, v4, v10);
  v12 = (int *)type metadata accessor for ConditionViewModel(0);
  v13 = v11 + v12[5];
  v14 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + v12[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + v12[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  v15 = a1 + a2[12];
  v16 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[13];
  v18 = type metadata accessor for Wind(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
}

uint64_t sub_1000B1DA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[7];
  v17 = a3[8];
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = (_QWORD *)(a1 + v17);
  v22 = (_QWORD *)(a2 + v17);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = a3[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v23);
  v7(v25, v26, v6);
  v27 = (int *)type metadata accessor for ConditionViewModel(0);
  v28 = v27[5];
  v29 = v25 + v28;
  v30 = v26 + v28;
  v31 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  v32 = v27[6];
  v33 = (_QWORD *)(v25 + v32);
  v34 = (_QWORD *)(v26 + v32);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = v27[7];
  v37 = (_QWORD *)(v25 + v36);
  v38 = (_QWORD *)(v26 + v36);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  *(_BYTE *)(v25 + v27[8]) = *(_BYTE *)(v26 + v27[8]);
  *(_BYTE *)(v25 + v27[9]) = *(_BYTE *)(v26 + v27[9]);
  *(_BYTE *)(v25 + v27[10]) = *(_BYTE *)(v26 + v27[10]);
  v40 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v41 = (_QWORD *)(a1 + v40);
  v42 = (_QWORD *)(a2 + v40);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  v44 = a3[12];
  v45 = a1 + v44;
  v46 = a2 + v44;
  v47 = type metadata accessor for Precipitation(0);
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v43);
  v48(v45, v46, v47);
  v49 = a3[13];
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
  return a1;
}

uint64_t sub_1000B1FC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[8];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  v26 = swift_bridgeObjectRelease(v25);
  v27 = a3[9];
  v28 = a1 + v27;
  v29 = a2 + v27;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v7)(a1 + v27, a2 + v27, v6, v26);
  v30 = (int *)type metadata accessor for ConditionViewModel(0);
  v31 = v30[5];
  v32 = v28 + v31;
  v33 = v29 + v31;
  v34 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = v30[6];
  v36 = (_QWORD *)(v28 + v35);
  v37 = (_QWORD *)(v29 + v35);
  *v36 = *v37;
  v38 = v37[1];
  v39 = v36[1];
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  v40 = v30[7];
  v41 = (_QWORD *)(v28 + v40);
  v42 = (_QWORD *)(v29 + v40);
  *v41 = *v42;
  v43 = v42[1];
  v44 = v41[1];
  v41[1] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  *(_BYTE *)(v28 + v30[8]) = *(_BYTE *)(v29 + v30[8]);
  *(_BYTE *)(v28 + v30[9]) = *(_BYTE *)(v29 + v30[9]);
  *(_BYTE *)(v28 + v30[10]) = *(_BYTE *)(v29 + v30[10]);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v45 = a3[11];
  v46 = (_QWORD *)(a1 + v45);
  v47 = (_QWORD *)(a2 + v45);
  *v46 = *v47;
  v48 = v47[1];
  v49 = v46[1];
  v46[1] = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  v50 = a3[12];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 24))(v51, v52, v53);
  v54 = a3[13];
  v55 = a1 + v54;
  v56 = a2 + v54;
  v57 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 24))(v55, v56, v57);
  return a1;
}

uint64_t sub_1000B2240(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v7(a1 + v17, a2 + v17, v6);
  v20 = (int *)type metadata accessor for ConditionViewModel(0);
  v21 = v20[5];
  v22 = v18 + v21;
  v23 = v19 + v21;
  v24 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  *(_OWORD *)(v18 + v20[6]) = *(_OWORD *)(v19 + v20[6]);
  *(_OWORD *)(v18 + v20[7]) = *(_OWORD *)(v19 + v20[7]);
  *(_BYTE *)(v18 + v20[8]) = *(_BYTE *)(v19 + v20[8]);
  *(_BYTE *)(v18 + v20[9]) = *(_BYTE *)(v19 + v20[9]);
  *(_BYTE *)(v18 + v20[10]) = *(_BYTE *)(v19 + v20[10]);
  v25 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v25) = *(_OWORD *)(a2 + v25);
  v26 = a3[12];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
  v30 = a3[13];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  return a1;
}

uint64_t sub_1000B2410(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  v21 = v17[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  v27 = v23[1];
  *v23 = v26;
  v23[1] = v25;
  v28 = swift_bridgeObjectRelease(v27);
  v29 = a3[9];
  v30 = a1 + v29;
  v31 = a2 + v29;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v7)(a1 + v29, a2 + v29, v6, v28);
  v32 = (int *)type metadata accessor for ConditionViewModel(0);
  v33 = v32[5];
  v34 = v30 + v33;
  v35 = v31 + v33;
  v36 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 40))(v34, v35, v36);
  v37 = v32[6];
  v38 = (_QWORD *)(v30 + v37);
  v39 = (uint64_t *)(v31 + v37);
  v41 = *v39;
  v40 = v39[1];
  v42 = v38[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease(v42);
  v43 = v32[7];
  v44 = (_QWORD *)(v30 + v43);
  v45 = (uint64_t *)(v31 + v43);
  v47 = *v45;
  v46 = v45[1];
  v48 = v44[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease(v48);
  *(_BYTE *)(v30 + v32[8]) = *(_BYTE *)(v31 + v32[8]);
  *(_BYTE *)(v30 + v32[9]) = *(_BYTE *)(v31 + v32[9]);
  *(_BYTE *)(v30 + v32[10]) = *(_BYTE *)(v31 + v32[10]);
  v49 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v50 = (_QWORD *)(a1 + v49);
  v51 = (uint64_t *)(a2 + v49);
  v53 = *v51;
  v52 = v51[1];
  v54 = v50[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease(v54);
  v55 = a3[12];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  v59 = a3[13];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 40))(v60, v61, v62);
  return a1;
}

uint64_t sub_1000B2634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B2640);
}

uint64_t sub_1000B2640(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;

  sub_100023394();
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
  }
  type metadata accessor for Date(0);
  sub_10001C6C0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_20:
    v8 = v4 + v11;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
  }
  sub_100005D40(&qword_1001BF090);
  sub_10001C6C0();
  if (v12)
  {
    v7 = v13;
    v11 = a3[6];
    goto LABEL_20;
  }
  if ((_DWORD)v3 != 0x7FFFFFFF)
  {
    type metadata accessor for ConditionViewModel(0);
    sub_10001C6C0();
    if (v9)
    {
      v7 = v16;
      v11 = a3[9];
    }
    else
    {
      type metadata accessor for Precipitation(0);
      sub_10001C6C0();
      if (v17)
      {
        v7 = v18;
        v11 = a3[12];
      }
      else
      {
        v7 = type metadata accessor for Wind(0);
        v11 = a3[13];
      }
    }
    goto LABEL_20;
  }
  v14 = *(_QWORD *)(v4 + a3[7] + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1000B2740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B274C);
}

void sub_1000B274C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  sub_100023394();
  sub_10001C6D0();
  if (v11)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    type metadata accessor for Date(0);
    sub_10001C6D0();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      sub_100005D40(&qword_1001BF090);
      sub_10001C6D0();
      if (v14)
      {
        v9 = v15;
        v13 = a4[6];
      }
      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(v5 + a4[7] + 8) = (v4 - 1);
          return;
        }
        type metadata accessor for ConditionViewModel(0);
        sub_10001C6D0();
        if (v11)
        {
          v9 = v16;
          v13 = a4[9];
        }
        else
        {
          type metadata accessor for Precipitation(0);
          sub_10001C6D0();
          if (v17)
          {
            v9 = v18;
            v13 = a4[12];
          }
          else
          {
            v9 = type metadata accessor for Wind(0);
            v13 = a4[13];
          }
        }
      }
    }
    v10 = v5 + v13;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, v4, v4, v9);
}

uint64_t type metadata accessor for HourlyForecastViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C2A70;
  if (!qword_1001C2A70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HourlyForecastViewModel);
  return result;
}

void sub_1000B2880(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[10];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000B2990(319);
      if (v7 <= 0x3F)
      {
        v14[2] = *(_QWORD *)(v6 - 8) + 64;
        v14[3] = &unk_10017E878;
        v14[4] = &unk_10017E878;
        v8 = type metadata accessor for ConditionViewModel(319);
        if (v9 <= 0x3F)
        {
          v14[5] = *(_QWORD *)(v8 - 8) + 64;
          v14[6] = (char *)&value witness table for Builtin.Int64 + 64;
          v14[7] = &unk_10017E878;
          v10 = type metadata accessor for Precipitation(319);
          if (v11 <= 0x3F)
          {
            v14[8] = *(_QWORD *)(v10 - 8) + 64;
            v12 = type metadata accessor for Wind(319);
            if (v13 <= 0x3F)
            {
              v14[9] = *(_QWORD *)(v12 - 8) + 64;
              swift_initStructMetadata(a1, 256, 10, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

void sub_1000B2990(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001BF6D8)
  {
    v2 = sub_10001EB28();
    v3 = type metadata accessor for Measurement(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001BF6D8);
  }
}

uint64_t sub_1000B29E4(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for HourlyForecastViewModel(0);
  v5 = sub_1000B3D68(v4[5]);
  if ((static Date.== infix(_:_:)(v5, v6) & 1) == 0)
    return 0;
  v7 = v4[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_10001EB28();
  if ((static Measurement.== infix<A, B>(_:_:)(v8, v9, v10, v10, v10) & 1) == 0)
    return 0;
  v11 = sub_1000B3D10(v4[7]);
  v15 = v15 && v12 == v14;
  if (!v15 && (sub_1000232C8(v11, v12, v13, v14) & 1) == 0)
    return 0;
  v16 = sub_1000B3D10(v4[8]);
  v20 = v15 && v17 == v19;
  if (!v20 && (sub_1000232C8(v16, v17, v18, v19) & 1) == 0)
    return 0;
  v21 = sub_1000B3D68(v4[9]);
  static ConditionViewModel.__derived_struct_equals(_:_:)(v21, v22);
  if ((v23 & 1) == 0 || *(double *)(a1 + v4[10]) != *(double *)(a2 + v4[10]))
    return 0;
  v24 = sub_1000B3D10(v4[11]);
  v28 = v15 && v25 == v27;
  if (!v28 && (sub_1000232C8(v24, v25, v26, v27) & 1) == 0)
    return 0;
  v29 = sub_1000B3D68(v4[12]);
  if ((sub_1000B788C(v29, v30) & 1) == 0)
    return 0;
  v31 = sub_1000B3D68(v4[13]);
  return static Wind.== infix(_:_:)(v31);
}

uint64_t sub_1000B2B04(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  char v21;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x74617265706D6574 && a2 == 0xEB00000000657275)
  {
    v10 = 0xEB00000000657275;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74617265706D6574, 0xEB00000000657275, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x6972745372756F68 && a2 == 0xEA0000000000676ELL)
  {
    v12 = 0xEA0000000000676ELL;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6972745372756F68, 0xEA0000000000676ELL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0xD000000000000017)
  {
    v13 = 0x8000000100187B10;
    if (a2 == 0x8000000100187B10)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100187B10, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4;
  }
  if (a1 == 0x6F697469646E6F63 && a2 == 0xE90000000000006ELL)
  {
    v15 = 0xE90000000000006ELL;
    goto LABEL_45;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v15);
    return 5;
  }
  if (a1 == 0xD000000000000013)
  {
    v16 = 0x8000000100187B30;
    if (a2 == 0x8000000100187B30)
      goto LABEL_50;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100187B30, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_50:
    swift_bridgeObjectRelease(v16);
    return 6;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100186180)
  {
    v17 = 0x8000000100186180;
LABEL_56:
    swift_bridgeObjectRelease(v17);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100186180, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_56;
  }
  if (a1 == 0x7469706963657270 && a2 == 0xED00006E6F697461)
  {
    v19 = 0xED00006E6F697461;
    goto LABEL_64;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7469706963657270, 0xED00006E6F697461, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
LABEL_64:
    swift_bridgeObjectRelease(v19);
    return 8;
  }
  if (a1 == 1684957559 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 9;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(1684957559, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_1000B2EFC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B2F24 + 4 * byte_10017E840[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1000B2F24()
{
  return 1702125924;
}

uint64_t sub_1000B2F34()
{
  return 0x74617265706D6574;
}

uint64_t sub_1000B2F54()
{
  return 0x6972745372756F68;
}

unint64_t sub_1000B2F70()
{
  return 0xD000000000000017;
}

uint64_t sub_1000B2FE0()
{
  return 0x7469706963657270;
}

uint64_t sub_1000B3004()
{
  return 1684957559;
}

uint64_t sub_1000B3014(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  _BYTE v43[2];

  v3 = v1;
  v5 = sub_100005D40(&qword_1001C2AC8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002325C();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_100022330(a1, v10);
  v12 = sub_1000B3AEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HourlyForecastViewModel.CodingKeys, &type metadata for HourlyForecastViewModel.CodingKeys, v12, v10, v11);
  v43[1] = 0;
  type metadata accessor for UUID(0);
  sub_100016878(&qword_1001BF778, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  sub_100049D40();
  if (!v2)
  {
    v13 = (int *)type metadata accessor for HourlyForecastViewModel(0);
    v43[0] = 1;
    type metadata accessor for Date(0);
    sub_100016878(&qword_1001BF780, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    sub_1000B3CF8(v14, (uint64_t)v43, v15, v16, v14);
    v42 = 2;
    sub_100005D40(&qword_1001BF090);
    sub_100022668(&qword_1001BF788);
    sub_1000B3CF8(v17, (uint64_t)&v42, v18, v19, v17);
    v20 = (uint64_t *)(v3 + v13[7]);
    v21 = *v20;
    v22 = v20[1];
    v41 = 3;
    sub_100049C0C(v21, v22, (uint64_t)&v41);
    v23 = (uint64_t *)(v3 + v13[8]);
    v24 = *v23;
    v25 = v23[1];
    v40 = 4;
    sub_100049C0C(v24, v25, (uint64_t)&v40);
    v39 = 5;
    type metadata accessor for ConditionViewModel(0);
    sub_100016878(&qword_1001BF790, type metadata accessor for ConditionViewModel);
    sub_1000B3CF8(v26, (uint64_t)&v39, v27, v28, v26);
    v38 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(&v38, v5);
    v29 = (uint64_t *)(v3 + v13[11]);
    v30 = *v29;
    v31 = v29[1];
    v37 = 7;
    sub_100049C0C(v30, v31, (uint64_t)&v37);
    v36 = 8;
    type metadata accessor for Precipitation(0);
    sub_100016878(&qword_1001C2AD8, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation);
    sub_1000B3CF8(v32, (uint64_t)&v36, v33, v34, v32);
    type metadata accessor for Wind(0);
    sub_100016878(&qword_1001BF7A8, (uint64_t (*)(uint64_t))&type metadata accessor for Wind);
    sub_100049D40();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void sub_1000B3348(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  char v58;
  char v59[9];
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;

  v43 = type metadata accessor for Wind(0);
  v40 = *(_QWORD *)(v43 - 8);
  sub_1000230F4();
  __chkstk_darwin(v3);
  sub_1000230E0();
  v42 = v4;
  v5 = type metadata accessor for Precipitation(0);
  v48 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_1000230E0();
  v44 = v7;
  v45 = type metadata accessor for ConditionViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_1000230E0();
  v46 = v9;
  v52 = sub_100005D40(&qword_1001BF090);
  v50 = *(_QWORD *)(v52 - 8);
  sub_1000230F4();
  __chkstk_darwin(v10);
  sub_10002325C();
  v13 = v12 - v11;
  v53 = type metadata accessor for Date(0);
  v51 = *(_QWORD *)(v53 - 8);
  sub_1000230F4();
  __chkstk_darwin(v14);
  sub_10002325C();
  v17 = v16 - v15;
  v18 = type metadata accessor for UUID(0);
  v54 = *(_QWORD *)(v18 - 8);
  sub_1000230F4();
  __chkstk_darwin(v19);
  sub_10002325C();
  v22 = v21 - v20;
  v47 = sub_100005D40(&qword_1001C2AE0);
  __chkstk_darwin(v47);
  sub_10002325C();
  v57 = (int *)type metadata accessor for HourlyForecastViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v23);
  sub_1000230E0();
  v56 = v24;
  v25 = a1[3];
  v26 = a1[4];
  sub_100022330(a1, v25);
  v27 = sub_1000B3AEC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HourlyForecastViewModel.CodingKeys, &type metadata for HourlyForecastViewModel.CodingKeys, v27, v25, v26);
  if (v55)
  {
    sub_10009362C();
  }
  else
  {
    v67 = 0;
    sub_100016878(&qword_1001BF7C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, &v67, v47, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v56, v22, v18);
    v66 = 1;
    sub_100016878(&qword_1001BF7C8, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    sub_1000B3D38(v28, (uint64_t)&v66);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v56 + v57[5], v17, v53);
    v65 = 2;
    sub_100022668(&qword_1001BF7D0);
    sub_1000B3D38(v29, (uint64_t)&v65);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v56 + v57[6], v13, v52);
    v64 = 3;
    v30 = sub_1000B3D4C((uint64_t)&v64);
    v31 = (uint64_t *)(v56 + v57[7]);
    *v31 = v30;
    v31[1] = v32;
    v63 = 4;
    v33 = sub_1000B3D4C((uint64_t)&v63);
    v34 = (uint64_t *)(v56 + v57[8]);
    *v34 = v33;
    v34[1] = v35;
    v62 = 5;
    sub_100016878(&qword_1001BF7D8, type metadata accessor for ConditionViewModel);
    sub_1000B3D28(v45, (uint64_t)&v62);
    sub_1000223EC(v46, v56 + v57[9]);
    v61 = 6;
    KeyedDecodingContainer.decode(_:forKey:)(&v61, v47);
    *(_QWORD *)(v56 + v57[10]) = v36;
    v60 = 7;
    v37 = sub_1000B3D4C((uint64_t)&v60);
    v38 = (uint64_t *)(v56 + v57[11]);
    *v38 = v37;
    v38[1] = v39;
    v59[0] = 8;
    sub_100016878(&qword_1001C2AE8, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation);
    sub_1000B3D28(v49, (uint64_t)v59);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v56 + v57[12], v44, v49);
    v58 = 9;
    sub_100016878(&qword_1001BF7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Wind);
    sub_1000B3D28(v43, (uint64_t)&v58);
    sub_1000B3D58();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v56 + v57[13], v42, v43);
    sub_1000B3B28(v56, a2);
    sub_10009362C();
    sub_100029030(v56, type metadata accessor for HourlyForecastViewModel);
  }
}

uint64_t sub_1000B3A44()
{
  unsigned __int8 *v0;

  return sub_1000B2EFC(*v0);
}

uint64_t sub_1000B3A4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B2B04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B3A70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B3AEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B3A98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B3AEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000B3AC4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000B3348(a1, a2);
}

uint64_t sub_1000B3AD8(_QWORD *a1)
{
  return sub_1000B3014(a1);
}

unint64_t sub_1000B3AEC()
{
  unint64_t result;

  result = qword_1001C2AD0;
  if (!qword_1001C2AD0)
  {
    result = swift_getWitnessTable(&unk_10017EA04, &type metadata for HourlyForecastViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2AD0);
  }
  return result;
}

uint64_t sub_1000B3B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HourlyForecastViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for HourlyForecastViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1000B3BB8 + 4 * byte_10017E84F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1000B3BEC + 4 * byte_10017E84A[v4]))();
}

uint64_t sub_1000B3BEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B3BF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B3BFCLL);
  return result;
}

uint64_t sub_1000B3C08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B3C10);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1000B3C14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B3C1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HourlyForecastViewModel.CodingKeys()
{
  return &type metadata for HourlyForecastViewModel.CodingKeys;
}

unint64_t sub_1000B3C3C()
{
  unint64_t result;

  result = qword_1001C2AF0;
  if (!qword_1001C2AF0)
  {
    result = swift_getWitnessTable(&unk_10017E9DC, &type metadata for HourlyForecastViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2AF0);
  }
  return result;
}

unint64_t sub_1000B3C7C()
{
  unint64_t result;

  result = qword_1001C2AF8;
  if (!qword_1001C2AF8)
  {
    result = swift_getWitnessTable(&unk_10017E94C, &type metadata for HourlyForecastViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2AF8);
  }
  return result;
}

unint64_t sub_1000B3CBC()
{
  unint64_t result;

  result = qword_1001C2B00;
  if (!qword_1001C2B00)
  {
    result = swift_getWitnessTable(&unk_10017E974, &type metadata for HourlyForecastViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2B00);
  }
  return result;
}

uint64_t sub_1000B3CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v6, a2, v5, v7, a5);
}

uint64_t sub_1000B3D10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_1000B3D28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000B3D38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v2, a2, v3, v2);
}

uint64_t sub_1000B3D4C(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1000B3D58()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 120) + 8))(*(_QWORD *)(v0 - 208), *(_QWORD *)(v0 - 200));
}

uint64_t sub_1000B3D68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

void sub_1000B3D74()
{
  EnvironmentValues.fontResolutionContext.getter();
  sub_100006338();
}

void sub_1000B3D90()
{
  EnvironmentValues.sizeCategory.getter();
  sub_100006338();
}

uint64_t sub_1000B3DAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v2);
  sub_10002325C();
  v5 = v4 - v3;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v4 - v3, a1);
  return EnvironmentValues.sizeCategory.setter(v5);
}

uint64_t sub_1000B3E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = type metadata accessor for WidgetNames(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10002325C();
  v4 = v3 - v2;
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v3 - v2, enum case for WidgetNames.DataDense(_:), v0);
  v6 = WidgetNames.rawValue.getter(v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

ValueMetadata *type metadata accessor for DataDenseWidget()
{
  return &type metadata for DataDenseWidget;
}

uint64_t sub_1000B3ECC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019FA60, 1);
}

uint64_t sub_1000B3EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;

  v4 = sub_100005D40(&qword_1001C2B08);
  v58 = *(_QWORD *)(v4 - 8);
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_10002325C();
  v8 = v7 - v6;
  v61 = sub_100005D40(&qword_1001C2B10);
  v62 = *(_QWORD *)(v61 - 8);
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_1000230E0();
  v57 = v10;
  v64 = sub_100005D40(&qword_1001C2B18);
  v65 = *(_QWORD *)(v64 - 8);
  sub_1000230F4();
  __chkstk_darwin(v11);
  sub_1000230E0();
  v59 = v12;
  v66 = sub_100005D40(&qword_1001C2B20);
  v67 = *(_QWORD *)(v66 - 8);
  sub_1000230F4();
  __chkstk_darwin(v13);
  sub_1000230E0();
  v63 = v14;
  v15 = type metadata accessor for WeatherTimelineProvider();
  swift_allocObject(v15, 248, 7);
  swift_bridgeObjectRetain(a2);
  v16 = sub_100165A84(65, a1, a2);
  v17 = type metadata accessor for WeatherIntent();
  v68 = v16;
  v60 = v16;
  v18 = type metadata accessor for DataDenseContentView(0);
  v19 = sub_1000061B0(&qword_1001C2B28, type metadata accessor for DataDenseContentView, (uint64_t)&unk_10017F4F8);
  v20 = sub_1000061B0(&qword_1001C0270, (uint64_t (*)(uint64_t))type metadata accessor for WeatherTimelineProvider, (uint64_t)&unk_100185C98);
  swift_bridgeObjectRetain(a2);
  swift_retain(v16);
  IntentConfiguration.init<A>(kind:intent:provider:content:)(a1, a2, v17, &v68, sub_1000B434C, 0, v17, v18, v15, v19, v20);
  v21 = LocalizedStringKey.init(stringLiteral:)(0x736C6961746544, 0xE700000000000000);
  v25 = sub_100045174(v21, v23, v22 & 1, v24);
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = sub_1000B45BC();
  WidgetConfiguration.configurationDisplayName(_:)(v25, v27, v31, v29, v4, v32);
  sub_100016868(v25, v27, v31);
  v33 = swift_bridgeObjectRelease(v29);
  (*(void (**)(uint64_t, uint64_t, __n128))(v58 + 8))(v8, v4, v33);
  v34 = sub_100005D40(&qword_1001C0280);
  v35 = type metadata accessor for WidgetFamily(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = (v37 + 32) & ~v37;
  v39 = swift_allocObject(v34, v38 + *(_QWORD *)(v36 + 72), v37 | 7);
  *(_OWORD *)(v39 + 16) = xmmword_10017BD10;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v36 + 104))(v39 + v38, enum case for WidgetFamily.systemSmall(_:), v35);
  v68 = v4;
  v69 = v32;
  v40 = sub_10004516C((uint64_t)&v68, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.supportedFamilies(_:)(v39, v61, v40);
  v41 = swift_bridgeObjectRelease(v39);
  (*(void (**)(uint64_t, uint64_t, __n128))(v62 + 8))(v57, v61, v41);
  v42 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003ALL, 0x8000000100187BC0);
  v46 = sub_100045174(v42, v44, v43 & 1, v45);
  v48 = v47;
  v50 = v49;
  v52 = v51 & 1;
  v68 = v61;
  v69 = v40;
  v53 = sub_10004516C((uint64_t)&v68, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>);
  WidgetConfiguration.description(_:)(v46, v48, v52, v50, v64, v53);
  sub_100016868(v46, v48, v52);
  v54 = swift_bridgeObjectRelease(v50);
  (*(void (**)(uint64_t, uint64_t, __n128))(v65 + 8))(v59, v64, v54);
  v68 = v64;
  v69 = v53;
  v55 = sub_10004516C((uint64_t)&v68, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  WidgetConfiguration.enableContentMarginsForFirstParty(_:)(1, v66, v55);
  swift_release(v60);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v63, v66);
}

uint64_t sub_1000B434C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t result;
  uint64_t v28;

  v4 = sub_100005D40(&qword_1001C0288);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100005D40(&qword_1001BFA48);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044F34(a1, (uint64_t)v12);
  *v9 = swift_getKeyPath(&unk_10017EAA8);
  v13 = sub_100005D40(&qword_1001BFA18);
  swift_storeEnumTagMultiPayload(v9, v13, 0);
  *v6 = swift_getKeyPath(&unk_10017EAD8);
  v14 = sub_100005D40(&qword_1001C0290);
  swift_storeEnumTagMultiPayload(v6, v14, 0);
  KeyPath = swift_getKeyPath(&unk_10017EB08);
  v16 = swift_getKeyPath(&unk_10017EB30);
  v17 = (int *)type metadata accessor for DataDenseContentView(0);
  v18 = (uint64_t *)(a2 + v17[7]);
  *v18 = v16;
  v19 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  sub_100094280((uint64_t)v9, a2, &qword_1001BFA48);
  sub_100094280((uint64_t)v6, a2 + v17[5], &qword_1001C0288);
  v20 = a2 + v17[6];
  *(_QWORD *)v20 = KeyPath;
  *(_BYTE *)(v20 + 8) = 0;
  sub_100044FCC((uint64_t)v12, a2 + v17[8]);
  v21 = v17[9];
  v22 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v22, "bounds");
  v24 = v23;
  v26 = v25;

  result = sub_100005B38(v24, v26);
  *(_BYTE *)(a2 + v21) = result;
  return result;
}

uint64_t sub_1000B4590@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000B3E20();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000B45B4()
{
  uint64_t *v0;

  return sub_1000B3EDC(*v0, v0[1]);
}

unint64_t sub_1000B45BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2B30;
  if (!qword_1001C2B30)
  {
    v1 = sub_100005DC4(&qword_1001C2B08);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentConfiguration<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2B30);
  }
  return result;
}

void sub_1000B4600()
{
  EnvironmentValues.widgetFamily.getter();
  sub_100006338();
}

void sub_1000B461C()
{
  EnvironmentValues.widgetFamily.getter();
  sub_100006338();
}

void sub_1000B4638()
{
  EnvironmentValues.sizeCategory.getter();
  sub_100006338();
}

uint64_t sub_1000B4658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v1 = sub_1000061B0(&qword_1001C2B38, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  EnvironmentValues.subscript.getter(&v3, v0, v0, v1);
  return v3;
}

void sub_1000B46B8()
{
  _BYTE *v0;

  *v0 = sub_1000B47C0() & 1;
  sub_100006338();
}

void sub_1000B46D8()
{
  _BYTE *v0;

  *v0 = sub_1000B47C0() & 1;
  sub_100006338();
}

void sub_1000B46F8()
{
  EnvironmentValues.fontResolutionContext.getter();
  sub_100006338();
}

uint64_t sub_1000B4714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v0 = sub_100005DC4(&qword_1001C2B20);
  v1 = sub_100005DC4(&qword_1001C2B18);
  v2 = sub_100005DC4(&qword_1001C2B10);
  v3 = sub_100005DC4(&qword_1001C2B08);
  v4 = sub_1000B45BC();
  v11 = sub_100083808(v4, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, v5, v6, v7, v8, v9, v10, v3);
  v18 = sub_100083808(v11, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, v12, v13, v14, v15, v16, v17, v2);
  v32 = sub_100083808(v18, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, v19, v20, v21, v22, v23, v24, v1);
  return sub_100083808(v32, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.enableContentMarginsForFirstParty(_:)>>, v25, v26, v27, v28, v29, v30, v0);
}

uint64_t sub_1000B47C0()
{
  return sub_1000B4658();
}

uint64_t sub_1000B47CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v47;
  uint64_t v48;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100023374();
  v7 = sub_100005D40(&qword_1001C1A78);
  sub_100029068();
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005D40(&qword_1001BFA28);
  sub_100029068();
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v47 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v47 - v18;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a2 + 8);
  v22 = *(_QWORD *)a1 == *(_QWORD *)a2 && v20 == v21;
  if (v22 || (v23 = sub_1000232C8(*(_QWORD *)a1, v20, *(_QWORD *)a2, v21), v24 = 0, (v23 & 1) != 0))
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_QWORD *)(a1 + 24);
    v27 = *(_QWORD *)(a2 + 16);
    v28 = *(_QWORD *)(a2 + 24);
    v29 = v25 == v27 && v26 == v28;
    if (v29 || (v30 = sub_1000232C8(v25, v26, v27, v28), v24 = 0, (v30 & 1) != 0))
    {
      v31 = *(_QWORD *)(a1 + 32);
      v32 = *(_QWORD *)(a1 + 40);
      v33 = *(_QWORD *)(a2 + 32);
      v34 = *(_QWORD *)(a2 + 40);
      v35 = v31 == v33 && v32 == v34;
      if (v35 || (v36 = sub_1000232C8(v31, v32, v33, v34), v24 = 0, (v36 & 1) != 0))
      {
        if (!static ActiveEvent.__derived_struct_equals(_:_:)(*(_WORD *)(a1 + 48), *(_WORD *)(a2 + 48))
          || *(unsigned __int8 *)(a1 + 50) != *(unsigned __int8 *)(a2 + 50)
          || *(unsigned __int8 *)(a1 + 51) != *(unsigned __int8 *)(a2 + 51))
        {
          goto LABEL_30;
        }
        v48 = type metadata accessor for WidgetContext(0);
        sub_1000B6EA4(a1 + *(int *)(v48 + 40), (uint64_t)v19);
        sub_1000B6EA4(a2 + *(int *)(v48 + 40), (uint64_t)v17);
        v37 = (uint64_t)&v10[*(int *)(v7 + 48)];
        sub_1000B6EA4((uint64_t)v19, (uint64_t)v10);
        sub_1000B6EA4((uint64_t)v17, v37);
        sub_100049BC4((uint64_t)v10);
        if (v22)
        {
          sub_1000B77A0((uint64_t)v17);
          sub_1000B77A0((uint64_t)v19);
          sub_100049BC4(v37);
          if (v22)
          {
            sub_10002FBAC((uint64_t)v10, &qword_1001BFA28);
LABEL_29:
            v41 = *(int *)(v48 + 44);
            v42 = *(_QWORD *)(a1 + v41);
            v43 = *(_BYTE *)(a1 + v41 + 8);
            v44 = a2 + v41;
            v45 = *(_BYTE *)(v44 + 8);
            v24 = static Gradient.== infix(_:_:)(v42, *(_QWORD *)v44) & (v43 ^ v45 ^ 1);
            return v24 & 1;
          }
        }
        else
        {
          sub_1000B6EA4((uint64_t)v10, (uint64_t)v14);
          sub_100049BC4(v37);
          if (!v38)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v2, v37, v5);
            sub_1000B70A4(&qword_1001C1A90, (uint64_t)&protocol conformance descriptor for URL);
            v39 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v2, v5);
            v40 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
            v40(v2, v5);
            sub_1000B77A0((uint64_t)v17);
            sub_1000B77A0((uint64_t)v19);
            v40((uint64_t)v14, v5);
            sub_1000B77A0((uint64_t)v10);
            if ((v39 & 1) != 0)
              goto LABEL_29;
LABEL_30:
            v24 = 0;
            return v24 & 1;
          }
          sub_10002FBAC((uint64_t)v17, &qword_1001BFA28);
          sub_10002FBAC((uint64_t)v19, &qword_1001BFA28);
          (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
        }
        sub_10002FBAC((uint64_t)v10, &qword_1001C1A78);
        goto LABEL_30;
      }
    }
  }
  return v24 & 1;
}

uint64_t sub_1000B4B14(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v15;
  char v16;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000100187C70)
  {
    v4 = 0x8000000100187C70;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100187C70, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x63736544676E6F6CLL && a2 == 0xEF6E6F6974706972)
  {
    v7 = 0xEF6E6F6974706972;
    goto LABEL_14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63736544676E6F6CLL, 0xEF6E6F6974706972, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x8000000100187C90)
  {
    v8 = 0x8000000100187C90;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100187C90, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x7645657669746361 && a2 == 0xEB00000000746E65)
  {
    v10 = 0xEB00000000746E65;
    goto LABEL_28;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7645657669746361, 0xEB00000000746E65, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_28:
    swift_bridgeObjectRelease(v10);
    return 3;
  }
  if (a1 == 0xD000000000000011)
  {
    v11 = 0x8000000100187CB0;
    if (a2 == 0x8000000100187CB0)
      goto LABEL_33;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100187CB0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_33:
    swift_bridgeObjectRelease(v11);
    return 4;
  }
  if (a1 == 0x656C6174537369 && a2 == 0xE700000000000000)
  {
    v13 = 0xE700000000000000;
    goto LABEL_41;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C6174537369, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_41:
    swift_bridgeObjectRelease(v13);
    return 5;
  }
  if (a1 == 1802398060 && a2 == 0xE400000000000000)
  {
    v15 = 0xE400000000000000;
    goto LABEL_49;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1802398060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_49:
    swift_bridgeObjectRelease(v15);
    return 6;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100187CD0)
  {
    swift_bridgeObjectRelease(0x8000000100187CD0);
    return 7;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100187CD0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_1000B4E58()
{
  return 8;
}

uint64_t sub_1000B4E60(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000B4E9C + 4 * byte_10017EB60[a1]))(0xD000000000000010, 0x8000000100187C70);
}

uint64_t sub_1000B4E9C()
{
  return 0x63736544676E6F6CLL;
}

uint64_t sub_1000B4EC0()
{
  uint64_t v0;

  return v0 + 6;
}

uint64_t sub_1000B4ED8()
{
  return 0x7645657669746361;
}

unint64_t sub_1000B4EF8()
{
  return 0xD000000000000011;
}

void sub_1000B4F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;

  v2 = v0;
  v3 = sub_100005D40(&qword_1001C2CA0);
  sub_1000B76F8();
  __chkstk_darwin(v4);
  sub_1000B7780();
  v5 = sub_1000B6EEC();
  sub_1000232D0((uint64_t)&type metadata for WidgetContext.CodingKeys, v6, v5);
  v7 = *(_QWORD *)v0;
  v8 = *(_QWORD *)(v0 + 8);
  LOBYTE(v23) = 0;
  sub_100049C0C(v7, v8, (uint64_t)&v23);
  if (!v1)
  {
    v9 = *(_QWORD *)(v0 + 16);
    v10 = *(_QWORD *)(v0 + 24);
    LOBYTE(v23) = 1;
    sub_100049C0C(v9, v10, (uint64_t)&v23);
    v11 = *(_QWORD *)(v0 + 32);
    v12 = *(_QWORD *)(v0 + 40);
    LOBYTE(v23) = 2;
    sub_100049C0C(v11, v12, (uint64_t)&v23);
    LOWORD(v23) = *(_WORD *)(v0 + 48);
    v25 = 3;
    v13 = sub_1000B7068();
    sub_1000B7710((uint64_t)&v23, (uint64_t)&v25, v14, (uint64_t)&type metadata for ActiveEvent, v13);
    sub_1000B7730(*(unsigned __int8 *)(v0 + 50), 4);
    sub_1000B7730(*(unsigned __int8 *)(v0 + 51), 5);
    v15 = type metadata accessor for WidgetContext(0);
    v16 = v0 + *(int *)(v15 + 40);
    LOBYTE(v23) = 6;
    v17 = type metadata accessor for URL(0);
    v18 = sub_1000B70A4(&qword_1001C1B20, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v23, v3, v17, v18);
    v19 = (uint64_t *)(v2 + *(int *)(v15 + 44));
    v20 = *v19;
    LOBYTE(v19) = *((_BYTE *)v19 + 8);
    v23 = v20;
    v24 = (char)v19;
    v25 = 7;
    v21 = sub_1000B70E4();
    sub_1000B7710((uint64_t)&v23, (uint64_t)&v25, v22, (uint64_t)&type metadata for WidgetBackgroundContext, v21);
  }
  sub_1000B7720();
  sub_1000B77B4();
}

void sub_1000B5124(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char v28;
  char v29;

  v23 = a2;
  sub_100005D40(&qword_1001BFA28);
  sub_100029068();
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100005D40(&qword_1001C2C80);
  __chkstk_darwin(v24);
  sub_10003C164();
  v25 = type metadata accessor for WidgetContext(0);
  sub_100029068();
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v10 = a1[4];
  v26 = a1;
  sub_100022330(a1, v11);
  v12 = sub_1000B6EEC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WidgetContext.CodingKeys, &type metadata for WidgetContext.CodingKeys, v12, v11, v10);
  if (v2)
  {
    sub_1000B7708();
  }
  else
  {
    v13 = (uint64_t)v6;
    v14 = v23;
    v15 = v24;
    LOBYTE(v27) = 0;
    *(_QWORD *)v9 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v24);
    *((_QWORD *)v9 + 1) = v16;
    *((_QWORD *)v9 + 2) = sub_1000B77C8(1);
    *((_QWORD *)v9 + 3) = v17;
    *((_QWORD *)v9 + 4) = sub_1000B77C8(2);
    *((_QWORD *)v9 + 5) = v18;
    v29 = 3;
    sub_1000B6F28();
    sub_1000B7748((uint64_t)&type metadata for ActiveEvent);
    *((_WORD *)v9 + 24) = v27;
    v9[50] = sub_1000B77DC(4) & 1;
    v9[51] = sub_1000B77DC(5) & 1;
    v19 = type metadata accessor for URL(0);
    LOBYTE(v27) = 6;
    v20 = sub_1000B70A4(&qword_1001C1B90, (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v19, &v27, v15, v19, v20);
    sub_1000B6F64(v13, (uint64_t)&v9[*(int *)(v25 + 40)]);
    v29 = 7;
    sub_1000B6FAC();
    sub_1000B7748((uint64_t)&type metadata for WidgetBackgroundContext);
    sub_1000B76D8();
    v21 = v28;
    v22 = &v9[*(int *)(v25 + 44)];
    *(_QWORD *)v22 = v27;
    v22[8] = v21;
    sub_1000B6FE8((uint64_t)v9, v14);
    sub_1000B7708();
    sub_1000B702C((uint64_t)v9);
  }
  sub_100023114();
}

uint64_t sub_1000B5484(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return static Gradient.== infix(_:_:)(a1, a3) & ~(a2 ^ a4) & 1;
}

uint64_t sub_1000B54B8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x746E656964617267 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E656964617267, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F43776F4C7369 && a2 == 0xED00007473617274)
  {
    swift_bridgeObjectRelease(0xED00007473617274);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F43776F4C7369, 0xED00007473617274, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000B55C8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F43776F4C7369;
  else
    return 0x746E656964617267;
}

void sub_1000B560C(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;

  v8 = sub_100005D40(&qword_1001C2CE8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100023374();
  v10 = a1[3];
  v11 = a1[4];
  sub_100022330(a1, v10);
  v12 = sub_1000B7494();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WidgetBackgroundContext.CodingKeys, &type metadata for WidgetBackgroundContext.CodingKeys, v12, v10, v11);
  v16 = a2;
  v15 = 0;
  v13 = sub_1000B750C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v15, v8, &type metadata for Gradient, v13);
  if (!v3)
  {
    v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3 & 1, &v14, v8);
  }
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v8);
  sub_100023114();
}

uint64_t sub_1000B571C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;
  char v9;
  uint64_t v10;

  v4 = sub_100005D40(&qword_1001C2CD0);
  sub_1000B76F8();
  __chkstk_darwin(v5);
  sub_1000B7760();
  v6 = sub_1000B7494();
  sub_1000B77A8((uint64_t)&type metadata for WidgetBackgroundContext.CodingKeys, (uint64_t)&type metadata for WidgetBackgroundContext.CodingKeys, v6);
  if (v1)
  {
    sub_1000B7708();
  }
  else
  {
    v9 = 0;
    sub_1000B74D0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Gradient, &v9, v4, &type metadata for Gradient);
    v2 = v10;
    v8 = 1;
    swift_bridgeObjectRetain(v10);
    KeyedDecodingContainer.decode(_:forKey:)(&v8, v4);
    sub_1000B77F0();
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
    sub_1000935D4();
  }
  return v2;
}

uint64_t sub_1000B5864()
{
  unsigned __int8 *v0;

  return sub_1000B4E60(*v0);
}

uint64_t sub_1000B586C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B4B14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B5890@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000B4E58();
  *a1 = result;
  return result;
}

uint64_t sub_1000B58B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B6EEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B58DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B6EEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000B5908(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000B5124(a1, a2);
}

void sub_1000B591C()
{
  sub_1000B4F48();
}

uint64_t sub_1000B5930()
{
  char *v0;

  return sub_1000B55C8(*v0);
}

uint64_t sub_1000B5938@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B54B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B595C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B7494();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B5984(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B7494();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B59AC(uint64_t a1, uint64_t a2)
{
  return sub_1000B5484(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
}

uint64_t sub_1000B59C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = sub_1000B571C(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }
  return result;
}

void sub_1000B59F8(_QWORD *a1)
{
  uint64_t v1;

  sub_1000B560C(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t Gradient.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_100005D40(&qword_1001C2B40);
  sub_1000B76F8();
  __chkstk_darwin(v3);
  sub_100023374();
  sub_1000B7760();
  v4 = sub_1000B5B20();
  sub_1000B77A8((uint64_t)&_s10CodingKeysON_0, (uint64_t)&_s10CodingKeysON_0, v4);
  if (!v1)
  {
    v5 = sub_100005D40(&qword_1001C2B50);
    sub_1000B5C64(&qword_1001C2B58, (void (*)(void))sub_1000B5B5C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v6, v2, v5);
    v0 = ((uint64_t (*)())Gradient.init(stops:))();
    sub_1000B7800();
  }
  sub_1000B7708();
  return v0;
}

unint64_t sub_1000B5B20()
{
  unint64_t result;

  result = qword_1001C2B48;
  if (!qword_1001C2B48)
  {
    result = swift_getWitnessTable(&unk_10017EE80, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1001C2B48);
  }
  return result;
}

unint64_t sub_1000B5B5C()
{
  unint64_t result;

  result = qword_1001C2B60;
  if (!qword_1001C2B60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Gradient.Stop, &type metadata for Gradient.Stop);
    atomic_store(result, (unint64_t *)&qword_1001C2B60);
  }
  return result;
}

void Gradient.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_100005D40(&qword_1001C2B68);
  sub_1000B76F8();
  __chkstk_darwin(v4);
  sub_10003C164();
  sub_1000B7780();
  v5 = sub_1000B5B20();
  sub_1000232D0((uint64_t)&_s10CodingKeysON_0, v6, v5);
  v10 = a2;
  v7 = sub_100005D40(&qword_1001C2B50);
  v8 = sub_1000B5C64(&qword_1001C2B70, (void (*)(void))sub_1000B5CCC, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v10, v9, v3, v7, v8);
  sub_1000B76E8();
  sub_1000B77B4();
}

uint64_t sub_1000B5C64(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100005DC4(&qword_1001C2B50);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B5CCC()
{
  unint64_t result;

  result = qword_1001C2B78;
  if (!qword_1001C2B78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Gradient.Stop, &type metadata for Gradient.Stop);
    atomic_store(result, (unint64_t *)&qword_1001C2B78);
  }
  return result;
}

BOOL sub_1000B5D08(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001B4408, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

BOOL sub_1000B5D4C(Swift::String a1)
{
  return sub_1000B5D08(a1);
}

uint64_t sub_1000B5D64()
{
  return 0x73706F7473;
}

BOOL sub_1000B5D84@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_1000B5D08(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B5DB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000B5D64();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL sub_1000B5DDC@<W0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_1000B5D4C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B5E04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B5B20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B5E2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B5B20();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B5E54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = Gradient.init(from:)();
  if (!v1)
    *a1 = result;
  return result;
}

void sub_1000B5E7C(uint64_t a1)
{
  uint64_t *v1;

  Gradient.encode(to:)(a1, *v1);
}

double Gradient.Stop.init(from:)()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v9;
  char v10;
  char v11;

  v2 = sub_100005D40(&qword_1001C2B80);
  sub_1000B76F8();
  __chkstk_darwin(v3);
  sub_1000B7760();
  v4 = sub_1000B5FE4();
  sub_1000B77A8((uint64_t)&_s10CodingKeysON, (uint64_t)&_s10CodingKeysON, v4);
  if (v0)
  {
    sub_1000B7708();
  }
  else
  {
    v11 = 0;
    v5 = KeyedDecodingContainer.decode(_:forKey:)(&v11, v2);
    v7 = sub_10002F120(v5, v6);
    v10 = 1;
    sub_1000B6020();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for CGFloat, &v10, v2, &type metadata for CGFloat);
    ((void (*)(uint64_t))Gradient.Stop.init(color:location:))(v7);
    v1 = v9;
    sub_1000B76E8();
    sub_1000B7708();
  }
  return v1;
}

unint64_t sub_1000B5FE4()
{
  unint64_t result;

  result = qword_1001C2B88;
  if (!qword_1001C2B88)
  {
    result = swift_getWitnessTable(&unk_10017EE30, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1001C2B88);
  }
  return result;
}

unint64_t sub_1000B6020()
{
  unint64_t result;

  result = qword_1001C2B90;
  if (!qword_1001C2B90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1001C2B90);
  }
  return result;
}

void Gradient.Stop.encode(to:)(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  char v16;

  sub_100005D40(&qword_1001C2B98);
  sub_1000B76F8();
  __chkstk_darwin(v6);
  sub_1000B7780();
  v7 = sub_1000B5FE4();
  sub_1000232D0((uint64_t)&_s10CodingKeysON, v8, v7);
  v9 = Color.hex.getter(a3);
  v11 = v10;
  v16 = 0;
  sub_100049C0C(v9, v10, (uint64_t)&v16);
  if (v3)
  {
    sub_1000B7720();
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    swift_bridgeObjectRelease(v11);
    v14 = a1;
    v15 = 1;
    v12 = sub_1000B6168();
    sub_1000B7710((uint64_t)&v14, (uint64_t)&v15, v13, (uint64_t)&type metadata for CGFloat, v12);
    sub_1000B7720();
  }
}

unint64_t sub_1000B6168()
{
  unint64_t result;

  result = qword_1001C2BA0;
  if (!qword_1001C2BA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1001C2BA0);
  }
  return result;
}

uint64_t sub_1000B61A4(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001B4440, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_1000B61F8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F697461636F6CLL;
  else
    return 7890280;
}

void sub_1000B6228(char *a1, unsigned __int8 *a2)
{
  sub_1000B7810(*a1, *a2);
}

void sub_1000B6234()
{
  char *v0;

  sub_100046430(*v0);
}

uint64_t sub_1000B623C(uint64_t a1)
{
  char *v1;

  return sub_1000464B4(a1, *v1);
}

void sub_1000B6244(uint64_t a1)
{
  char *v1;

  sub_1000466F8(a1, *v1);
}

uint64_t sub_1000B624C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000B61A4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B6278@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000B61F8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000B62A0()
{
  char *v0;

  return sub_1000B61F8(*v0);
}

uint64_t sub_1000B62A8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000B61F4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B62CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B5FE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B62F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B5FE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000B631C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  double v4;

  v4 = Gradient.Stop.init(from:)();
  if (!v1)
  {
    *(_QWORD *)a1 = v3;
    *(double *)(a1 + 8) = v4;
  }
}

void sub_1000B6348(uint64_t a1)
{
  uint64_t v1;

  Gradient.Stop.encode(to:)(*(double *)(v1 + 8), a1, *(_QWORD *)v1);
}

ValueMetadata *_s10CodingKeysOMa()
{
  return &_s10CodingKeysON;
}

uint64_t _s10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000B63B8 + 4 * byte_10017EB68[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000B63D8 + 4 * byte_10017EB6D[v4]))();
}

_BYTE *sub_1000B63B8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000B63D8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B63E0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B63E8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B63F0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B63F8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s10CodingKeysOMa_0()
{
  return &_s10CodingKeysON_0;
}

unint64_t sub_1000B6418()
{
  unint64_t result;

  result = qword_1001C2BA8;
  if (!qword_1001C2BA8)
  {
    result = swift_getWitnessTable(&unk_10017ED18, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1001C2BA8);
  }
  return result;
}

unint64_t sub_1000B6458()
{
  unint64_t result;

  result = qword_1001C2BB0;
  if (!qword_1001C2BB0)
  {
    result = swift_getWitnessTable(&unk_10017EE08, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1001C2BB0);
  }
  return result;
}

unint64_t sub_1000B6498()
{
  unint64_t result;

  result = qword_1001C2BB8;
  if (!qword_1001C2BB8)
  {
    result = swift_getWitnessTable(&unk_10017ED40, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1001C2BB8);
  }
  return result;
}

unint64_t sub_1000B64D8()
{
  unint64_t result;

  result = qword_1001C2BC0;
  if (!qword_1001C2BC0)
  {
    result = swift_getWitnessTable(&unk_10017ED68, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1001C2BC0);
  }
  return result;
}

unint64_t sub_1000B6518()
{
  unint64_t result;

  result = qword_1001C2BC8;
  if (!qword_1001C2BC8)
  {
    result = swift_getWitnessTable(&unk_10017EC50, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1001C2BC8);
  }
  return result;
}

unint64_t sub_1000B6558()
{
  unint64_t result;

  result = qword_1001C2BD0;
  if (!qword_1001C2BD0)
  {
    result = swift_getWitnessTable(&unk_10017EC78, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1001C2BD0);
  }
  return result;
}

_QWORD *sub_1000B6594(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[4];
    v10 = a2[5];
    *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
    v11 = *(int *)(a3 + 40);
    v12 = (void *)(a1 + v11);
    v13 = (char *)a2 + v11;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    v14 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v14))
    {
      v15 = sub_100005D40(&qword_1001BFA28);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 0, 1, v14);
    }
    v17 = *(int *)(a3 + 44);
    v18 = (char *)v4 + v17;
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = *v19;
    *(_QWORD *)v18 = *v19;
    v18[8] = *((_BYTE *)v19 + 8);
    swift_bridgeObjectRetain(v20);
  }
  return v4;
}

double sub_1000B66DC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (uint64_t)a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for URL(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 44))).n128_u64[0];
  return result;
}

uint64_t sub_1000B6760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v10 = *(int *)(a3 + 40);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v13 = type metadata accessor for URL(0);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v13))
  {
    v14 = sub_100005D40(&qword_1001BFA28);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v11, 0, 1, v13);
  }
  v15 = *(int *)(a3 + 44);
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  *(_QWORD *)v16 = *v17;
  *(_BYTE *)(v16 + 8) = *((_BYTE *)v17 + 8);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_1000B687C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  v12 = *(int *)(a3 + 40);
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for URL(0);
  v16 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v15);
  v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v15);
  if (!v16)
  {
    v18 = *(_QWORD *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 24))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v19 = sub_100005D40(&qword_1001BFA28);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v13, 0, 1, v15);
LABEL_7:
  v20 = *(int *)(a3 + 44);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20);
  v24 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  return a1;
}

uint64_t sub_1000B6A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v7 = *(int *)(a3 + 40);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_100005D40(&qword_1001BFA28);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v12 = *(int *)(a3 + 44);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  return a1;
}

uint64_t sub_1000B6B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  v12 = *(int *)(a3 + 40);
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for URL(0);
  v16 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v15);
  v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v15);
  if (!v16)
  {
    v18 = *(_QWORD *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v19 = sub_100005D40(&qword_1001BFA28);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v13, 0, 1, v15);
LABEL_7:
  v20 = *(int *)(a3 + 44);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)v22;
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  return a1;
}

uint64_t sub_1000B6C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B6C90);
}

uint64_t sub_1000B6C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100005D40(&qword_1001BFA28);
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_1000B6D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B6D14);
}

uint64_t sub_1000B6D14(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BFA28);
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for WidgetContext(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C2C30;
  if (!qword_1001C2C30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WidgetContext);
  return result;
}

void sub_1000B6DBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_10017EEE0;
  v4[1] = &unk_10017EEE0;
  v4[2] = &unk_10017EEE0;
  v4[3] = &unk_10017EEF8;
  v4[4] = &unk_10017EF10;
  v4[5] = &unk_10017EF10;
  sub_1000B6E50(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    v4[7] = &unk_10017EF28;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
  }
}

void sub_1000B6E50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001C1C18)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001C1C18);
  }
}

uint64_t sub_1000B6EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001BFA28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000B6EEC()
{
  unint64_t result;

  result = qword_1001C2C88;
  if (!qword_1001C2C88)
  {
    result = swift_getWitnessTable(&unk_10017F108, &type metadata for WidgetContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2C88);
  }
  return result;
}

unint64_t sub_1000B6F28()
{
  unint64_t result;

  result = qword_1001C2C90;
  if (!qword_1001C2C90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActiveEvent, &type metadata for ActiveEvent);
    atomic_store(result, (unint64_t *)&qword_1001C2C90);
  }
  return result;
}

uint64_t sub_1000B6F64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001BFA28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000B6FAC()
{
  unint64_t result;

  result = qword_1001C2C98;
  if (!qword_1001C2C98)
  {
    result = swift_getWitnessTable(&unk_10017F0E0, &type metadata for WidgetBackgroundContext);
    atomic_store(result, (unint64_t *)&qword_1001C2C98);
  }
  return result;
}

uint64_t sub_1000B6FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B702C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WidgetContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000B7068()
{
  unint64_t result;

  result = qword_1001C2CA8;
  if (!qword_1001C2CA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActiveEvent, &type metadata for ActiveEvent);
    atomic_store(result, (unint64_t *)&qword_1001C2CA8);
  }
  return result;
}

uint64_t sub_1000B70A4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B70E4()
{
  unint64_t result;

  result = qword_1001C2CB0;
  if (!qword_1001C2CB0)
  {
    result = swift_getWitnessTable(&unk_10017F0B8, &type metadata for WidgetBackgroundContext);
    atomic_store(result, (unint64_t *)&qword_1001C2CB0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WidgetContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 7) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v5 = v6 - 8;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1000B71F4 + 4 * byte_10017EB77[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000B7228 + 4 * byte_10017EB72[v4]))();
}

uint64_t sub_1000B7228(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B7230(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B7238);
  return result;
}

uint64_t sub_1000B7244(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B724CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1000B7250(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B7258(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WidgetContext.CodingKeys()
{
  return &type metadata for WidgetContext.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for WidgetBackgroundContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for WidgetBackgroundContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t initializeWithTake for WidgetBackgroundContext(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for WidgetBackgroundContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetBackgroundContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 9))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetBackgroundContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetBackgroundContext()
{
  return &type metadata for WidgetBackgroundContext;
}

unint64_t sub_1000B73D8()
{
  unint64_t result;

  result = qword_1001C2CB8;
  if (!qword_1001C2CB8)
  {
    result = swift_getWitnessTable(&unk_10017F090, &type metadata for WidgetContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2CB8);
  }
  return result;
}

unint64_t sub_1000B7418()
{
  unint64_t result;

  result = qword_1001C2CC0;
  if (!qword_1001C2CC0)
  {
    result = swift_getWitnessTable(&unk_10017F000, &type metadata for WidgetContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2CC0);
  }
  return result;
}

unint64_t sub_1000B7458()
{
  unint64_t result;

  result = qword_1001C2CC8;
  if (!qword_1001C2CC8)
  {
    result = swift_getWitnessTable(&unk_10017F028, &type metadata for WidgetContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2CC8);
  }
  return result;
}

unint64_t sub_1000B7494()
{
  unint64_t result;

  result = qword_1001C2CD8;
  if (!qword_1001C2CD8)
  {
    result = swift_getWitnessTable(&unk_10017F210, &type metadata for WidgetBackgroundContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2CD8);
  }
  return result;
}

unint64_t sub_1000B74D0()
{
  unint64_t result;

  result = qword_1001C2CE0;
  if (!qword_1001C2CE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Gradient, &type metadata for Gradient);
    atomic_store(result, (unint64_t *)&qword_1001C2CE0);
  }
  return result;
}

unint64_t sub_1000B750C()
{
  unint64_t result;

  result = qword_1001C2CF0;
  if (!qword_1001C2CF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Gradient, &type metadata for Gradient);
    atomic_store(result, (unint64_t *)&qword_1001C2CF0);
  }
  return result;
}

uint64_t _s10CodingKeysOwst_1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000B7594 + 4 * byte_10017EB81[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000B75C8 + 4 * byte_10017EB7C[v4]))();
}

uint64_t sub_1000B75C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B75D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B75D8);
  return result;
}

uint64_t sub_1000B75E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B75ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000B75F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B75F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WidgetBackgroundContext.CodingKeys()
{
  return &type metadata for WidgetBackgroundContext.CodingKeys;
}

unint64_t sub_1000B7618()
{
  unint64_t result;

  result = qword_1001C2CF8;
  if (!qword_1001C2CF8)
  {
    result = swift_getWitnessTable(&unk_10017F1E8, &type metadata for WidgetBackgroundContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2CF8);
  }
  return result;
}

unint64_t sub_1000B7658()
{
  unint64_t result;

  result = qword_1001C2D00;
  if (!qword_1001C2D00)
  {
    result = swift_getWitnessTable(&unk_10017F158, &type metadata for WidgetBackgroundContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2D00);
  }
  return result;
}

unint64_t sub_1000B7698()
{
  unint64_t result;

  result = qword_1001C2D08;
  if (!qword_1001C2D08)
  {
    result = swift_getWitnessTable(&unk_10017F180, &type metadata for WidgetBackgroundContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2D08);
  }
  return result;
}

uint64_t sub_1000B76D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000B76E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000B7708()
{
  _QWORD *v0;

  return _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v0);
}

uint64_t sub_1000B7710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v5, a4, a5);
}

uint64_t sub_1000B7720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000B7730@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 80) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 80, v2);
}

uint64_t sub_1000B7748(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, v2 - 65, v1, a1);
}

_QWORD *sub_1000B7760()
{
  _QWORD *v0;

  return sub_100022330(v0, v0[3]);
}

_QWORD *sub_1000B7780()
{
  _QWORD *v0;

  return sub_100022330(v0, v0[3]);
}

uint64_t sub_1000B77A0(uint64_t a1)
{
  uint64_t *v1;

  return sub_10002FBAC(a1, v1);
}

uint64_t sub_1000B77A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

uint64_t sub_1000B77C8@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 96) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 96, v1);
}

uint64_t sub_1000B77DC@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 96) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 96, v1);
}

uint64_t sub_1000B77F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000B7800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_1000B7810(char a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6E6F697461636F6CLL;
  else
    v3 = 7890280;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6E6F697461636F6CLL;
  else
    v5 = 7890280;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE300000000000000;
  if (v3 != v5 || v4 != v6)
    sub_1000B8FA4(v3, a2, v5);
  sub_1000287D8();
  sub_10002548C();
  sub_1000443A4();
}

uint64_t sub_1000B788C(uint64_t a1, uint64_t a2)
{
  return sub_1000B78A8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation, &qword_1001C1DA8, (uint64_t)&protocol conformance descriptor for Precipitation);
}

uint64_t sub_1000B78A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  a3(0);
  sub_1000061B0(a4, a3, a5);
  sub_1000B8FD8();
  sub_1000B8FD8();
  if (v14 == v12 && v15 == v13)
    v10 = 1;
  else
    v10 = sub_1000B8FA4(v14, v8, v12);
  sub_1000287D8();
  sub_10002548C();
  return v10 & 1;
}

void sub_1000B7958(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0x737569736C6563;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x65686E6572686166;
    else
      v4 = 0x7953726F7272696DLL;
    if (v3 == 1)
      v5 = 0xEA00000000007469;
    else
      v5 = 0xEC0000006D657473;
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x737569736C6563;
  }
  if ((_BYTE)a2)
  {
    if (a2 == 1)
      v2 = 0x65686E6572686166;
    else
      v2 = 0x7953726F7272696DLL;
    if (a2 == 1)
      v6 = 0xEA00000000007469;
    else
      v6 = 0xEC0000006D657473;
  }
  else
  {
    v6 = 0xE700000000000000;
  }
  if (v4 != v2 || v5 != v6)
    sub_1000B8FA4(v4, a2, v2);
  sub_1000287D8();
  sub_10002548C();
  sub_1000443A4();
}

BOOL sub_1000B7A5C(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void static ConditionViewModel.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0)
  {
    v4 = (int *)type metadata accessor for ConditionViewModel(0);
    if ((sub_1000B78A8(a1 + v4[5], a2 + v4[5], (uint64_t (*)(uint64_t))&type metadata accessor for WeatherCondition, &qword_1001C1DA0, (uint64_t)&protocol conformance descriptor for WeatherCondition) & 1) != 0)
    {
      v5 = sub_1000B3D10(v4[6]);
      v9 = v9 && v6 == v8;
      if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0) & 1) != 0)
      {
        v10 = sub_1000B3D10(v4[7]);
        if (!v9 || v11 != v13)
          _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0);
      }
    }
  }
  sub_1000443A4();
}

uint64_t type metadata accessor for ConditionViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C2D90;
  if (!qword_1001C2D90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConditionViewModel);
  return result;
}

uint64_t sub_1000B7B90(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  char v18;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F697469646E6F63 && a2 == 0xED0000646E694B6ELL)
  {
    v8 = 0xED0000646E694B6ELL;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63, 0xED0000646E694B6ELL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6F697469646E6F63 && a2 == 0xEF6C6F626D79536ELL)
  {
    v10 = 0xEF6C6F626D79536ELL;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63, 0xEF6C6F626D79536ELL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x6F697469646E6F63 && a2 == 0xEF676E697274536ELL)
  {
    v12 = 0xEF676E697274536ELL;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63, 0xEF676E697274536ELL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x7961447369 && a2 == 0xE500000000000000)
  {
    v14 = 0xE500000000000000;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7961447369, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4;
  }
  if (a1 == 0x7069636572507369 && a2 == 0xEF6E6F6974617469)
  {
    v16 = 0xEF6E6F6974617469;
    goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7069636572507369, 0xEF6E6F6974617469, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v16);
    return 5;
  }
  if (a1 == 0x527361486E6F6369 && a2 == 0xEB000000006E6961)
  {
    swift_bridgeObjectRelease(0xEB000000006E6961);
    return 6;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(0x527361486E6F6369, 0xEB000000006E6961, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v18 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1000B7ECC()
{
  return 7;
}

uint64_t sub_1000B7ED4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B7EFC + 4 * byte_10017F260[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1000B7EFC()
{
  return 0x6F697469646E6F63;
}

uint64_t sub_1000B7F48()
{
  return 0x7961447369;
}

uint64_t sub_1000B7F5C()
{
  return 0x7069636572507369;
}

uint64_t sub_1000B7F80()
{
  return 0x527361486E6F6369;
}

uint64_t sub_1000B7FA0()
{
  unsigned __int8 *v0;

  return sub_1000B7ED4(*v0);
}

uint64_t sub_1000B7FA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B7B90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B7FCC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000B7ECC();
  *a1 = result;
  return result;
}

uint64_t sub_1000B7FF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B8258();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8018(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B8258();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ConditionViewModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  char v25;
  char v26;
  char v27;
  _BYTE v28[3];

  v3 = v1;
  v5 = sub_100005D40(&qword_1001C2D10);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002325C();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_100022330(a1, v10);
  v12 = sub_1000B8258();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ConditionViewModel.CodingKeys, &type metadata for ConditionViewModel.CodingKeys, v12, v10, v11);
  v28[2] = 0;
  type metadata accessor for UUID(0);
  sub_1000061B0(&qword_1001BF778, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_10003C1C4();
  if (!v2)
  {
    v13 = (int *)type metadata accessor for ConditionViewModel(0);
    v28[1] = 1;
    type metadata accessor for WeatherCondition(0);
    sub_1000061B0(&qword_1001C2D20, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherCondition, (uint64_t)&protocol conformance descriptor for WeatherCondition);
    sub_10003C1C4();
    v14 = (uint64_t *)(v3 + v13[6]);
    v15 = *v14;
    v16 = v14[1];
    v28[0] = 2;
    sub_1000B8FC0(v15, v16, (uint64_t)v28);
    v17 = (uint64_t *)(v3 + v13[7]);
    v18 = *v17;
    v19 = v17[1];
    v27 = 3;
    sub_1000B8FC0(v18, v19, (uint64_t)&v27);
    v20 = *(unsigned __int8 *)(v3 + v13[8]);
    v26 = 4;
    sub_1000B8F94(v20, (uint64_t)&v26);
    v21 = *(unsigned __int8 *)(v3 + v13[9]);
    v25 = 5;
    sub_1000B8F94(v21, (uint64_t)&v25);
    v22 = *(unsigned __int8 *)(v3 + v13[10]);
    v24 = 6;
    sub_1000B8F94(v22, (uint64_t)&v24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_1000B8258()
{
  unint64_t result;

  result = qword_1001C2D18;
  if (!qword_1001C2D18)
  {
    result = swift_getWitnessTable(&unk_10017F43C, &type metadata for ConditionViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2D18);
  }
  return result;
}

uint64_t ConditionViewModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;

  v3 = type metadata accessor for WeatherCondition(0);
  v30 = *(_QWORD *)(v3 - 8);
  v31 = v3;
  __chkstk_darwin(v3);
  sub_10002325C();
  v6 = v5 - v4;
  v7 = type metadata accessor for UUID(0);
  v32 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10002325C();
  v10 = v9 - v8;
  v34 = sub_100005D40(&qword_1001C2D28);
  v11 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_10002325C();
  v14 = v13 - v12;
  v33 = (int *)type metadata accessor for ConditionViewModel(0);
  __chkstk_darwin(v33);
  sub_10002325C();
  v17 = v16 - v15;
  v19 = a1[3];
  v18 = a1[4];
  sub_100022330(a1, v19);
  v20 = sub_1000B8258();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ConditionViewModel.CodingKeys, &type metadata for ConditionViewModel.CodingKeys, v20, v19, v18);
  if (v35)
    return sub_1000B8FD0();
  v36 = v11;
  v43 = 0;
  sub_1000061B0(&qword_1001BF7C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v7, &v43, v34, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v17, v10, v7);
  v42 = 1;
  sub_1000061B0(&qword_1001C2D30, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherCondition, (uint64_t)&protocol conformance descriptor for WeatherCondition);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, &v42, v34, v31);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v17 + v33[5], v6, v31);
  v41 = 2;
  v21 = sub_1000B8FE4((uint64_t)&v41);
  v22 = (uint64_t *)(v17 + v33[6]);
  *v22 = v21;
  v22[1] = v23;
  v40 = 3;
  v24 = sub_1000B8FE4((uint64_t)&v40);
  v25 = (uint64_t *)(v17 + v33[7]);
  *v25 = v24;
  v25[1] = v26;
  v39 = 4;
  *(_BYTE *)(v17 + v33[8]) = sub_1000B8FB4((uint64_t)&v39) & 1;
  v38 = 5;
  *(_BYTE *)(v17 + v33[9]) = sub_1000B8FB4((uint64_t)&v38) & 1;
  v37 = 6;
  v27 = sub_1000B8FB4((uint64_t)&v37);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v14, v34);
  *(_BYTE *)(v17 + v33[10]) = v27 & 1;
  sub_1000B8688(v17, a2);
  sub_1000B8FD0();
  return sub_1000B86CC(v17);
}

uint64_t sub_1000B8688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConditionViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B86CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ConditionViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B870C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ConditionViewModel.init(from:)(a1, a2);
}

uint64_t sub_1000B8720(_QWORD *a1)
{
  return ConditionViewModel.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for ConditionViewModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = a3[7];
    v14 = (_QWORD *)((char *)a1 + v12);
    v15 = (_QWORD *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = (_QWORD *)((char *)a1 + v13);
    v18 = (_QWORD *)((char *)a2 + v13);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)a1 + v20) = *((_BYTE *)a2 + v20);
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v19);
  }
  return a1;
}

uint64_t destroy for ConditionViewModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
}

uint64_t initializeWithCopy for ConditionViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v11);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)(a1 + v12);
  v17 = (_QWORD *)(a2 + v12);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t assignWithCopy for ConditionViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for ConditionViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t assignWithTake for ConditionViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  v16 = v12[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  v22 = v18[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  v23 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B8C2C);
}

void sub_1000B8C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_100023394();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
LABEL_5:
    _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
    return;
  }
  v9 = type metadata accessor for WeatherCondition(0);
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v9;
    v8 = v4 + *(int *)(a3 + 20);
    goto LABEL_5;
  }
  sub_1000443A4();
}

uint64_t storeEnumTagSinglePayload for ConditionViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B8CC8);
}

uint64_t sub_1000B8CC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = sub_100023394();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, v4, v4, v9);
  }
  result = type metadata accessor for WeatherCondition(0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = v5 + *(int *)(a4 + 20);
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, v4, v4, v9);
  }
  *(_QWORD *)(v5 + *(int *)(a4 + 24) + 8) = (v4 - 1);
  return result;
}

uint64_t sub_1000B8D5C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for WeatherCondition(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_10017F348;
      v5[3] = &unk_10017F348;
      v5[4] = &unk_10017F360;
      v5[5] = &unk_10017F360;
      v5[6] = &unk_10017F360;
      swift_initStructMetadata(a1, 256, 7, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ConditionViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000B8E44 + 4 * byte_10017F26C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000B8E78 + 4 * byte_10017F267[v4]))();
}

uint64_t sub_1000B8E78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B8E80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B8E88);
  return result;
}

uint64_t sub_1000B8E94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B8E9CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000B8EA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B8EA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConditionViewModel.CodingKeys()
{
  return &type metadata for ConditionViewModel.CodingKeys;
}

unint64_t sub_1000B8EC8()
{
  unint64_t result;

  result = qword_1001C2DE0;
  if (!qword_1001C2DE0)
  {
    result = swift_getWitnessTable(&unk_10017F414, &type metadata for ConditionViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2DE0);
  }
  return result;
}

unint64_t sub_1000B8F08()
{
  unint64_t result;

  result = qword_1001C2DE8;
  if (!qword_1001C2DE8)
  {
    result = swift_getWitnessTable(&unk_10017F384, &type metadata for ConditionViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2DE8);
  }
  return result;
}

unint64_t sub_1000B8F48()
{
  unint64_t result;

  result = qword_1001C2DF0;
  if (!qword_1001C2DF0)
  {
    result = swift_getWitnessTable(&unk_10017F3AC, &type metadata for ConditionViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2DF0);
  }
  return result;
}

uint64_t sub_1000B8F84()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 88) + 8))(*(_QWORD *)(v0 - 112), *(_QWORD *)(v0 - 104));
}

uint64_t sub_1000B8F94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

uint64_t sub_1000B8FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0);
}

uint64_t sub_1000B8FB4(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, *(_QWORD *)(v1 - 104));
}

uint64_t sub_1000B8FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000B8FD0()
{
  uint64_t v0;

  return _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(*(_QWORD **)(v0 - 96));
}

uint64_t sub_1000B8FD8()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_1000B8FE4(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, *(_QWORD *)(v1 - 104));
}

uint64_t sub_1000B8FF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_100005D40(&qword_1001C2DF8);
  __chkstk_darwin(v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  sub_100016A54(&qword_1001C2E08, &qword_1001C2DF8);
  v10 = dispatch thunk of Sequence._copyToContiguousArray()(v3, v6);
  sub_1000BB71C(&v10, (uint64_t (*)(_QWORD))&type metadata accessor for HourWeather, (uint64_t (*)(uint64_t))sub_100028714, (uint64_t (*)(_QWORD *))sub_1000BC11C);
  v7 = v10;
  if (v1)
    swift_release(v10);
  return v7;
}

void sub_1000B90E4(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(_QWORD *, _QWORD);
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t (*v39)(char *);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _QWORD v44[4];
  uint64_t v45;

  v39 = a1;
  v40 = a2;
  v34 = a3;
  v43 = type metadata accessor for DayWeather(0);
  v4 = *(_QWORD *)(v43 - 8);
  v5 = __chkstk_darwin(v43);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v38 = (char *)&v34 - v8;
  v9 = sub_100005D40(&qword_1001BF9D0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005D40(&qword_1001C2E30);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v10;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v35(v12, v3, v9);
  sub_100016A54(&qword_1001C2E38, &qword_1001BF9D0);
  v36 = v12;
  dispatch thunk of Sequence.makeIterator()(v9, v16);
  v17 = &v15[*(int *)(v13 + 36)];
  sub_100016A54(&qword_1001C2E40, &qword_1001BF9D0);
  v19 = v18;
  v41 = v17;
  v42 = v15;
  v20 = *(_QWORD *)v17;
  dispatch thunk of Collection.endIndex.getter(v9, v18);
  if (v20 == v44[0])
  {
    v21 = (uint64_t)v42;
    v22 = v43;
LABEL_7:
    sub_100016904(v21, &qword_1001C2E30);
    v32 = 1;
    v33 = v34;
  }
  else
  {
    v23 = v4;
    v21 = (uint64_t)v42;
    v22 = v43;
    v24 = v41;
    v25 = v38;
    while (1)
    {
      v26 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v44, v24, v9, v19);
      (*(void (**)(char *))(v23 + 16))(v25);
      v26(v44, 0);
      v27 = v36;
      v35(v36, v21, v9);
      dispatch thunk of Collection.formIndex(after:)(v24, v9, v19);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v9);
      v28 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
      v28(v7, v25, v22);
      v29 = v45;
      v30 = v39(v7);
      if (v29)
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v43);
        sub_100016904((uint64_t)v42, &qword_1001C2E30);
        return;
      }
      v45 = 0;
      if ((v30 & 1) != 0)
        break;
      v22 = v43;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v43);
      v24 = v41;
      v21 = (uint64_t)v42;
      v31 = *(_QWORD *)v41;
      dispatch thunk of Collection.endIndex.getter(v9, v19);
      if (v31 == v44[0])
        goto LABEL_7;
    }
    sub_100016904((uint64_t)v42, &qword_1001C2E30);
    v33 = v34;
    v22 = v43;
    v28((char *)v34, v7, v43);
    v32 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v33, v32, 1, v22);
}

void sub_1000B941C(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(_QWORD *, _QWORD);
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t (*v39)(char *);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _QWORD v44[4];
  uint64_t v45;

  v39 = a1;
  v40 = a2;
  v34 = a3;
  v43 = type metadata accessor for HourWeather(0);
  v4 = *(_QWORD *)(v43 - 8);
  v5 = __chkstk_darwin(v43);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v38 = (char *)&v34 - v8;
  v9 = sub_100005D40(&qword_1001C2DF8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005D40(&qword_1001C2E20);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v10;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v35(v12, v3, v9);
  sub_100016A54(&qword_1001C2E08, &qword_1001C2DF8);
  v36 = v12;
  dispatch thunk of Sequence.makeIterator()(v9, v16);
  v17 = &v15[*(int *)(v13 + 36)];
  sub_100016A54((unint64_t *)&qword_1001C2E28, &qword_1001C2DF8);
  v19 = v18;
  v41 = v17;
  v42 = v15;
  v20 = *(_QWORD *)v17;
  dispatch thunk of Collection.endIndex.getter(v9, v18);
  if (v20 == v44[0])
  {
    v21 = (uint64_t)v42;
    v22 = v43;
LABEL_7:
    sub_100016904(v21, &qword_1001C2E20);
    v32 = 1;
    v33 = v34;
  }
  else
  {
    v23 = v4;
    v21 = (uint64_t)v42;
    v22 = v43;
    v24 = v41;
    v25 = v38;
    while (1)
    {
      v26 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v44, v24, v9, v19);
      (*(void (**)(char *))(v23 + 16))(v25);
      v26(v44, 0);
      v27 = v36;
      v35(v36, v21, v9);
      dispatch thunk of Collection.formIndex(after:)(v24, v9, v19);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v9);
      v28 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
      v28(v7, v25, v22);
      v29 = v45;
      v30 = v39(v7);
      if (v29)
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v43);
        sub_100016904((uint64_t)v42, &qword_1001C2E20);
        return;
      }
      v45 = 0;
      if ((v30 & 1) != 0)
        break;
      v22 = v43;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v43);
      v24 = v41;
      v21 = (uint64_t)v42;
      v31 = *(_QWORD *)v41;
      dispatch thunk of Collection.endIndex.getter(v9, v19);
      if (v31 == v44[0])
        goto LABEL_7;
    }
    sub_100016904((uint64_t)v42, &qword_1001C2E20);
    v33 = v34;
    v22 = v43;
    v28((char *)v34, v7, v43);
    v32 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v33, v32, 1, v22);
}

uint64_t sub_1000B9754(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  uint8_t *v83;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105[2];
  _QWORD *v106;

  v98 = a1;
  v99 = a3;
  v4 = type metadata accessor for HourWeather(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10002325C();
  v8 = v7 - v6;
  v9 = sub_100005D40(&qword_1001BF9D0);
  v96 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1000230E0();
  v92 = v10;
  v95 = type metadata accessor for CurrentWeather(0);
  v91 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  sub_1000230E0();
  v90 = v11;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_1000230E0();
  v103 = v14;
  v101 = sub_100005D40(&qword_1001C2DF8);
  v93 = *(_QWORD *)(v101 - 8);
  v15 = __chkstk_darwin(v101);
  v89 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v102 = (uint64_t)&v85 - v17;
  v18 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v18);
  sub_10002325C();
  v21 = v20 - v19;
  v106 = _swiftEmptyArrayStorage;
  v23 = *(void (**)(uint64_t, uint64_t))(v22 + 16);
  v100 = a2;
  v23(v21, a2);
  v24 = type metadata accessor for WidgetDateFormatter(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v94 = WidgetDateFormatter.init(timeZone:)(v21);
  if (qword_1001BEE98 != -1)
    goto LABEL_14;
  while (1)
  {
    v25 = type metadata accessor for Logger(0);
    v86 = sub_100025184(v25, (uint64_t)qword_1001D9FF0);
    v26 = Logger.logObject.getter(v86);
    v27 = static os_log_type_t.default.getter(v26);
    v28 = os_log_type_enabled(v26, v27);
    v87 = v13;
    v88 = v12;
    v97 = v9;
    if (v28)
    {
      v29 = (uint8_t *)sub_100025358(12);
      v30 = sub_100025358(32);
      v105[0] = v30;
      *(_DWORD *)v29 = 136446210;
      v85 = v29 + 4;
      v31 = type metadata accessor for UnitManager(0);
      v32 = static UnitManager.standard.getter(v31);
      v33 = UnitManager.temperature.getter();
      swift_release(v32);
      v104 = v33;
      v34 = sub_10001EB28();
      v35 = String.init<A>(reflecting:)(&v104, v34);
      v37 = v36;
      v104 = sub_10016EC84(v35, v36, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v85);
      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Building hourly forecast model. - unit: %{public}s", v29, 0xCu);
      swift_arrayDestroy(v30, 1);
      sub_10002534C(v30);
      sub_10002534C((uint64_t)v29);
    }

    v38 = ((uint64_t (*)(void))WeatherDataModel.hourlyForecast.getter)();
    v39 = v90;
    v40 = WeatherDataModel.currentWeather.getter(v38);
    CurrentWeather.date.getter(v40);
    v41 = *(uint64_t (**)(uint64_t, uint64_t))(v91 + 8);
    v42 = v95;
    v43 = v41(v39, v95);
    v44 = WeatherDataModel.currentWeather.getter(v43);
    v45 = (uint64_t)v89;
    v46 = WeatherDataModel.hourlyForecast.getter(v44);
    v47 = v92;
    WeatherDataModel.dailyForecast.getter(v46);
    v48 = sub_1000B9E20(v100, v39, v45);
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v47, v97);
    v98 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
    v98(v45, v101);
    v49 = v41(v39, v42);
    __chkstk_darwin(v49);
    v50 = v103;
    *(&v85 - 2) = v103;
    v12 = 0;
    sub_100026CE8((uint64_t (*)(char *))sub_1000BB6DC, (uint64_t)(&v85 - 4), (uint64_t)v48);
    v52 = v51;
    v53 = sub_1000B8FF0(v102);
    __chkstk_darwin(v53);
    *(&v85 - 2) = v50;
    sub_1000BAD5C((uint64_t (*)(char *))sub_1000BB6F8, (uint64_t)(&v85 - 4), v54);
    sub_1000BDAA8();
    sub_1000BDA94();
    sub_1001609E0(v55, v56, v57, v58, v59);
    sub_1000BDAA8();
    sub_1000BDA94();
    v65 = sub_10010A914(v60, v61, v62, v63, v64);
    if (v67 == v68 >> 1)
      break;
    v9 = v66;
    v70 = v67;
    v99 = v52;
    v13 = v68 >> 1;
    swift_unknownObjectRetain(v65);
    v69 = v94;
    v71 = v100;
    while (v70 < v13)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, v9 + *(_QWORD *)(v5 + 72) * v70, v4);
      sub_1000BAEE8(v8, v69, v71, (uint64_t *)&v106);
      ++v70;
      sub_1000BDA84();
      if (v13 == v70)
      {
        sub_1000BDABC();
        v52 = v99;
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_once(&qword_1001BEE98, sub_100097BD0);
  }
  v69 = v94;
LABEL_10:
  sub_1000BDABC();
  v105[0] = (uint64_t)v106;
  swift_bridgeObjectRetain(v106);
  sub_1000BB50C(v52);
  v72 = v105[0];
  swift_bridgeObjectRetain(v105[0]);
  sub_1000BB71C(v105, type metadata accessor for HourlyForecastViewModel, (uint64_t (*)(uint64_t))sub_100028700, (uint64_t (*)(_QWORD *))sub_1000BB7AC);
  swift_bridgeObjectRelease(v72);
  v73 = v105[0];
  v74 = sub_100005D40(&qword_1001C1AC0);
  v75 = type metadata accessor for UUID(0);
  sub_100016A54(&qword_1001C2E00, &qword_1001C1AC0);
  v77 = v76;
  sub_100016878(&qword_1001BF760, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  v79 = Sequence.unique<A>(by:)(sub_1000BB378, 0, v74, v75, v77, v78);
  v80 = swift_release(v73);
  v81 = Logger.logObject.getter(v80);
  v82 = static os_log_type_t.default.getter(v81);
  if (os_log_type_enabled(v81, (os_log_type_t)v82))
  {
    v83 = (uint8_t *)sub_100025358(2);
    *(_WORD *)v83 = 0;
    _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v82, "Built hourly forecast model", v83, 2u);
    sub_10002534C((uint64_t)v83);
  }

  swift_release(v69);
  v98(v102, v101);
  (*(void (**)(uint8_t *, uint64_t))(v87 + 8))(v103, v88);
  swift_bridgeObjectRelease(v106);
  return v79;
}

_QWORD *sub_1000B9E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void (**v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(char *, uint64_t, uint64_t);
  char *v64;
  uint64_t v65;
  char *v66;
  char v67;
  uint64_t (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(char *, uint64_t, uint64_t);
  char *v107;
  uint64_t v108;
  char *v109;
  char v110;
  uint64_t (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  double v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  void (**v142)(char *, uint64_t);
  unint64_t v143;
  unint64_t v144;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t (*v152)(char *, uint64_t);
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  void (**v185)(char *, uint64_t);
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char v193[8];
  char *v194;

  v178 = a3;
  v188 = a2;
  v168 = type metadata accessor for WeatherCondition(0);
  v167 = *(_QWORD *)(v168 - 8);
  __chkstk_darwin(v168);
  v166 = (char *)&v149 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ConditionViewModel(0);
  __chkstk_darwin(v5);
  v180 = (uint64_t)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_100005D40(&qword_1001BF090);
  v173 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v177 = (char *)&v149 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = type metadata accessor for UUID(0);
  v170 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v169 = (char *)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = type metadata accessor for HourlyForecastViewModel(0);
  v176 = *(_QWORD *)(v172 - 8);
  v9 = __chkstk_darwin(v172);
  v161 = (uint64_t)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v160 = (char *)&v149 - v12;
  v13 = __chkstk_darwin(v11);
  v158 = (uint64_t)&v149 - v14;
  __chkstk_darwin(v13);
  v163 = (uint64_t)&v149 - v15;
  v16 = sub_100005D40(&qword_1001C2E10);
  v17 = __chkstk_darwin(v16);
  v164 = (uint64_t)&v149 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v162 = (uint64_t)&v149 - v19;
  v183 = type metadata accessor for HourWeather(0);
  v179 = *(_QWORD *)(v183 - 8);
  v20 = __chkstk_darwin(v183);
  v175 = (char *)&v149 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v157 = (char *)&v149 - v22;
  v23 = sub_100005D40(&qword_1001BF0A0);
  v24 = __chkstk_darwin(v23);
  v187 = (char *)&v149 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v185 = (void (**)(char *, uint64_t))((char *)&v149 - v26);
  v192 = type metadata accessor for SunEvents(0);
  v184 = *(_QWORD *)(v192 - 8);
  v27 = __chkstk_darwin(v192);
  v186 = (char *)&v149 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v30 = (char *)&v149 - v29;
  v31 = type metadata accessor for Date(0);
  v189 = *(_QWORD *)(v31 - 8);
  v190 = v31;
  v32 = __chkstk_darwin(v31);
  v182 = (char *)&v149 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v191 = (char *)&v149 - v35;
  __chkstk_darwin(v34);
  v181 = (char *)&v149 - v36;
  v37 = sub_100005D40(&qword_1001C2E18);
  __chkstk_darwin(v37);
  v39 = (char *)&v149 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for DayWeather(0);
  v41 = *(char **)(v40 - 8);
  __chkstk_darwin(v40);
  v43 = (char *)&v149 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for Calendar(0);
  v45 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v47 = (char *)&v149 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = a1;
  static Calendar.currentCalendar(with:)(a1);
  v194 = v47;
  sub_1000B90E4((uint64_t (*)(char *))sub_1000BDA1C, (uint64_t)v193, (uint64_t)v39);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v39, 1, v40) != 1)
  {
    v155 = v45;
    v156 = v47;
    v159 = v44;
    v49 = (uint64_t (*)(char *, char *, uint64_t))*((_QWORD *)v41 + 4);
    v154 = v40;
    v50 = v49(v43, v39, v40);
    v51 = DayWeather.sun.getter(v50);
    v52 = (uint64_t)v185;
    SunEvents.sunrise.getter(v51);
    v53 = v30;
    v54 = v192;
    v184 = *(_QWORD *)(v184 + 8);
    ((void (*)(char *, uint64_t))v184)(v53, v192);
    v55 = v190;
    v56 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v52, 1, v190);
    v57 = (void (**)(char *, uint64_t))v41;
    v153 = v43;
    if (v56 == 1)
    {
      v58 = v43;
      sub_100016904(v52, &qword_1001BF0A0);
      v48 = _swiftEmptyArrayStorage;
      v60 = v159;
      v61 = (uint64_t)v187;
      goto LABEL_13;
    }
    v62 = v189;
    v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v189 + 32);
    v64 = v181;
    v65 = v63(v181, v52, v55);
    v66 = v191;
    CurrentWeather.date.getter(v65);
    v67 = static Date.< infix(_:_:)(v66, v64);
    v68 = *(uint64_t (**)(char *, uint64_t))(v62 + 8);
    v69 = v68(v66, v55);
    if ((v67 & 1) != 0)
    {
      __chkstk_darwin(v69);
      *(&v149 - 2) = (uint64_t)v64;
      v70 = v162;
      sub_1000B941C((uint64_t (*)(char *))sub_1000BDA38, (uint64_t)(&v149 - 4), v162);
      v71 = v183;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v70, 1, v183) != 1)
      {
        v152 = v68;
        v185 = v57;
        v72 = v157;
        (*(void (**)(char *, uint64_t, uint64_t))(v179 + 32))(v157, v70, v71);
        v162 = Date.formattedTime(timeZone:)(v165);
        v73 = v64;
        v75 = v74;
        v76 = v169;
        UUID.init()(v162);
        v77 = v191;
        v78 = (*(uint64_t (**)(char *, char *, uint64_t))(v189 + 16))(v191, v73, v55);
        HourWeather.temperature.getter(v78);
        v79 = swift_bridgeObjectRetain(v75);
        v80 = (uint64_t)v166;
        HourWeather.condition.getter(v79);
        sub_100087F80(v80, v180);
        v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v167 + 8))(v80, v168);
        v82 = HourWeather.precipitationChance.getter(v81);
        v83 = Double.roundedPrecipitationPercent.getter(v82);
        v84 = type metadata accessor for UnitManager(0);
        v85 = static UnitManager.standard.getter(v84);
        v86 = (void *)UnitManager.temperature.getter();
        swift_release(v85);
        v151 = sub_100028958();
        v150 = v87;

        v88 = (int *)v172;
        v89 = v163;
        v90 = HourWeather.precipitation.getter();
        HourWeather.wind.getter(v90);
        (*(void (**)(uint64_t, char *, uint64_t))(v170 + 32))(v89, v76, v171);
        v91 = v55;
        v63((char *)(v89 + v88[5]), (uint64_t)v77, v55);
        (*(void (**)(uint64_t, char *, uint64_t))(v173 + 32))(v89 + v88[6], v177, v174);
        v92 = (_QWORD *)(v89 + v88[7]);
        v93 = v162;
        *v92 = v162;
        v92[1] = v75;
        v94 = (uint64_t *)(v89 + v88[8]);
        *v94 = v93;
        v94[1] = v75;
        sub_100011868(v180, v89 + v88[9], type metadata accessor for ConditionViewModel);
        *(double *)(v89 + v88[10]) = v83;
        v95 = (uint64_t *)(v89 + v88[11]);
        v96 = v150;
        *v95 = v151;
        v95[1] = v96;
        v97 = v158;
        sub_10000F7C4(v89, v158, type metadata accessor for HourlyForecastViewModel);
        sub_10006FA3C(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
        v48 = (_QWORD *)v98;
        v100 = *(_QWORD *)(v98 + 16);
        v99 = *(_QWORD *)(v98 + 24);
        if (v100 >= v99 >> 1)
        {
          sub_10006FA3C(v99 > 1, v100 + 1, 1, v98);
          v48 = v146;
        }
        v60 = v159;
        v61 = (uint64_t)v187;
        v54 = v192;
        v48[2] = v100 + 1;
        sub_100011868(v97, (uint64_t)v48+ ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80))+ *(_QWORD *)(v176 + 72) * v100, type metadata accessor for HourlyForecastViewModel);
        sub_100011894(v163, type metadata accessor for HourlyForecastViewModel);
        (*(void (**)(char *, uint64_t))(v179 + 8))(v72, v183);
        v55 = v91;
        v59 = v152(v181, v91);
        v57 = v185;
        v58 = v153;
LABEL_13:
        v101 = v186;
        v102 = DayWeather.sun.getter(v59);
        SunEvents.sunset.getter(v102);
        ((void (*)(char *, uint64_t))v184)(v101, v54);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v61, 1, v55) == 1)
        {
          v57[1](v58, v154);
          (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v60);
          v103 = &qword_1001BF0A0;
          v104 = v61;
LABEL_18:
          sub_100016904(v104, v103);
          return v48;
        }
        v185 = v57;
        v105 = v189;
        v106 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v189 + 32);
        v107 = v182;
        v108 = v106(v182, v61, v55);
        v109 = v191;
        CurrentWeather.date.getter(v108);
        v110 = static Date.< infix(_:_:)(v109, v107);
        v111 = *(uint64_t (**)(char *, uint64_t))(v105 + 8);
        v112 = v111(v109, v55);
        if ((v110 & 1) != 0)
        {
          __chkstk_darwin(v112);
          *(&v149 - 2) = (uint64_t)v107;
          v113 = v164;
          sub_1000B941C((uint64_t (*)(char *))sub_1000BDA6C, (uint64_t)(&v149 - 4), v164);
          v114 = v183;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v113, 1, v183) == 1)
          {
            v185[1](v153, v154);
            v111(v107, v55);
            (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v60);
            v103 = &qword_1001C2E10;
            v104 = v113;
            goto LABEL_18;
          }
          (*(void (**)(char *, uint64_t, uint64_t))(v179 + 32))(v175, v113, v114);
          v192 = Date.formattedTime(timeZone:)(v165);
          v118 = v117;
          v119 = v169;
          UUID.init()(v192);
          v120 = (*(uint64_t (**)(char *, char *, uint64_t))(v189 + 16))(v191, v107, v190);
          v121 = v177;
          HourWeather.temperature.getter(v120);
          v122 = swift_bridgeObjectRetain(v118);
          v123 = (uint64_t)v166;
          HourWeather.condition.getter(v122);
          sub_100087FBC(v123, v180);
          v124 = (*(uint64_t (**)(uint64_t, uint64_t))(v167 + 8))(v123, v168);
          v125 = HourWeather.precipitationChance.getter(v124);
          v126 = Double.roundedPrecipitationPercent.getter(v125);
          v127 = type metadata accessor for UnitManager(0);
          v128 = static UnitManager.standard.getter(v127);
          v129 = (void *)UnitManager.temperature.getter();
          swift_release(v128);
          v130 = sub_100028958();
          v188 = v131;
          v189 = v130;

          v132 = (int *)v172;
          v133 = (uint64_t)v160;
          v134 = HourWeather.precipitation.getter();
          v135 = v190;
          HourWeather.wind.getter(v134);
          (*(void (**)(uint64_t, char *, uint64_t))(v170 + 32))(v133, v119, v171);
          v106((char *)(v133 + v132[5]), (uint64_t)v191, v135);
          (*(void (**)(uint64_t, char *, uint64_t))(v173 + 32))(v133 + v132[6], v121, v174);
          v136 = (uint64_t *)(v133 + v132[7]);
          v137 = v192;
          *v136 = v192;
          v136[1] = v118;
          v138 = (uint64_t *)(v133 + v132[8]);
          *v138 = v137;
          v138[1] = v118;
          sub_100011868(v180, v133 + v132[9], type metadata accessor for ConditionViewModel);
          *(double *)(v133 + v132[10]) = v126;
          v139 = (uint64_t *)(v133 + v132[11]);
          v140 = v188;
          *v139 = v189;
          v139[1] = v140;
          v141 = v161;
          sub_10000F7C4(v133, v161, type metadata accessor for HourlyForecastViewModel);
          if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
          {
            sub_10006FA3C(0, v48[2] + 1, 1, (uint64_t)v48);
            v48 = v147;
          }
          v142 = v185;
          v144 = v48[2];
          v143 = v48[3];
          v60 = v159;
          if (v144 >= v143 >> 1)
          {
            sub_10006FA3C(v143 > 1, v144 + 1, 1, (uint64_t)v48);
            v48 = v148;
          }
          v48[2] = v144 + 1;
          sub_100011868(v141, (uint64_t)v48+ ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80))+ *(_QWORD *)(v176 + 72) * v144, type metadata accessor for HourlyForecastViewModel);
          sub_100011894(v133, type metadata accessor for HourlyForecastViewModel);
          (*(void (**)(char *, uint64_t))(v179 + 8))(v175, v183);
          v142[1](v153, v154);
          v115 = v182;
          v116 = v135;
        }
        else
        {
          v185[1](v153, v154);
          v115 = v107;
          v116 = v55;
        }
        v111(v115, v116);
        (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v60);
        return v48;
      }
      v68(v64, v55);
      sub_100016904(v70, &qword_1001C2E10);
    }
    else
    {
      v59 = v68(v64, v55);
    }
    v48 = _swiftEmptyArrayStorage;
    v60 = v159;
    v58 = v153;
    v61 = (uint64_t)v187;
    v54 = v192;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v44);
  sub_100016904((uint64_t)v39, &qword_1001C2E18);
  return _swiftEmptyArrayStorage;
}

BOOL sub_1000BACD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + *(int *)(type metadata accessor for HourlyForecastViewModel(0) + 20);
  v4 = type metadata accessor for Date(0);
  sub_100016878((unint64_t *)&qword_1001BF9C8, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  return (dispatch thunk of static Comparable.< infix(_:_:)(v3, a2, v4, v5) & 1) == 0;
}

uint64_t sub_1000BAD5C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *);
  uint64_t v22;

  v21 = a1;
  v5 = type metadata accessor for HourWeather(0);
  result = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v11 = 0;
    v12 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v13 = *(_QWORD *)(v7 + 72);
    v19 = a3;
    v20 = v13;
    v22 = v7;
    a3 = *(_QWORD *)(v7 + 16);
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))a3)(v9, v12, v5);
      v14 = v21(v9);
      if (v3)
      {
        swift_bridgeObjectRelease(v19);
        (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v5);
        return a3;
      }
      v15 = v14;
      result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v9, v5);
      if ((v15 & 1) == 0)
        break;
      ++v11;
      v12 += v20;
      if (v10 == v11)
      {
        v11 = v10;
LABEL_10:
        a3 = v19;
        v16 = *(_QWORD *)(v19 + 16);
        goto LABEL_11;
      }
    }
    if (v10 >= v11)
      goto LABEL_10;
    __break(1u);
  }
  else
  {
    v16 = 0;
    v11 = 0;
LABEL_11:
    if (v16 >= v11 && v16 >= v10)
      return a3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BAEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Bool v24;
  Swift::String_optional v25;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v28;
  __n128 v29;
  char v30;
  char v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;

  v77 = a4;
  v74 = a2;
  v75 = a3;
  v76 = type metadata accessor for HourlyForecastViewModel(0);
  v78 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimeZone(0);
  v72 = *(_QWORD *)(v7 - 8);
  v73 = v7;
  __chkstk_darwin(v7);
  v71 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WeatherDateType(0);
  v69 = *(_QWORD *)(v9 - 8);
  v70 = v9;
  __chkstk_darwin(v9);
  v68 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WeatherCondition(0);
  v12 = *(_QWORD *)(v11 - 8);
  v65 = v11;
  v66 = v12;
  v13 = v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for ConditionViewModel(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Date(0);
  v80 = *(_QWORD *)(v19 - 8);
  v81 = v19;
  v20 = __chkstk_darwin(v19);
  v79 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = a1;
  v22 = HourWeather.date.getter(v20);
  v23 = HourWeather.condition.getter(v22);
  v24 = HourWeather.isDaylight.getter(v23) & 1;
  v25 = WeatherCondition.conditionIconName(isDaytime:)(v24);
  if (v25.value._object)
    countAndFlagsBits = v25.value._countAndFlagsBits;
  else
    countAndFlagsBits = 0x6E61636972727568;
  object = (void *)0xE900000000000065;
  if (v25.value._object)
    object = v25.value._object;
  v63 = object;
  v64 = countAndFlagsBits;
  UUID.init()(v25.value._countAndFlagsBits);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(&v18[v16[5]], v15, v11);
  v28 = WeatherCondition.description(isDaylight:)(v24);
  v30 = WeatherCondition.isPrecipitation.getter(v29);
  v31 = WeatherCondition.iconHasRain.getter();
  v32 = &v18[v16[6]];
  v33 = v65;
  v34 = v63;
  *(_QWORD *)v32 = v64;
  *((_QWORD *)v32 + 1) = v34;
  *(Swift::String *)&v18[v16[7]] = v28;
  v18[v16[8]] = v24;
  v18[v16[9]] = v30 & 1;
  v18[v16[10]] = v31 & 1;
  (*(void (**)(char *, uint64_t))(v66 + 8))(v15, v33);
  v36 = v68;
  v35 = v69;
  v37 = v70;
  v38 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v69 + 104))(v68, enum case for WeatherDateType.hour(_:), v70);
  v39 = v71;
  static TimeZone.current.getter(v38);
  v40 = v79;
  v74 = WidgetDateFormatter.format(date:dateType:timeZone:)(v79, v36, v39);
  v66 = v41;
  (*(void (**)(char *, uint64_t))(v72 + 8))(v39, v73);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  v75 = Date.formattedHours(timeZone:forAccessibility:)(v75, 1);
  v43 = v42;
  UUID.init()(v75);
  v44 = (int *)v76;
  v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v80 + 16))(&v6[*(int *)(v76 + 20)], v40, v81);
  HourWeather.temperature.getter(v45);
  sub_10000F7C4((uint64_t)v18, (uint64_t)&v6[v44[9]], type metadata accessor for ConditionViewModel);
  v47 = HourWeather.precipitationChance.getter(v46);
  v48 = type metadata accessor for UnitManager(0);
  v49 = static UnitManager.standard.getter(v48);
  v50 = (void *)UnitManager.temperature.getter();
  swift_release(v49);
  v51 = sub_100028958();
  v53 = v52;

  v54 = HourWeather.precipitation.getter();
  HourWeather.wind.getter(v54);
  v55 = (uint64_t *)&v6[v44[7]];
  v56 = v66;
  *v55 = v74;
  v55[1] = v56;
  v57 = (uint64_t *)&v6[v44[8]];
  *v57 = v75;
  v57[1] = v43;
  *(double *)&v6[v44[10]] = v47;
  v58 = (uint64_t *)&v6[v44[11]];
  *v58 = v51;
  v58[1] = v53;
  v59 = v77;
  sub_10006F68C();
  v60 = *(_QWORD *)(*v59 + 16);
  sub_10006F76C(v60);
  v61 = *v59;
  *(_QWORD *)(v61 + 16) = v60 + 1;
  sub_10000F7C4((uint64_t)v6, v61+ ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))+ *(_QWORD *)(v78 + 72) * v60, type metadata accessor for HourlyForecastViewModel);
  sub_100011894((uint64_t)v6, type metadata accessor for HourlyForecastViewModel);
  sub_100011894((uint64_t)v18, type metadata accessor for ConditionViewModel);
  return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v79, v81);
}

uint64_t sub_1000BB378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_1000BB3C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v7;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DayWeather.date.getter(v2);
  v5 = Calendar.isDateInToday(_:)(v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v5 & 1;
}

uint64_t sub_1000BB468(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002325C();
  v9 = v8 - v7;
  HourWeather.date.getter(v10);
  LOBYTE(a3) = a3(v9, a2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  return a3 & 1;
}

void sub_1000BB50C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!isUniquelyReferenced_nonNull_native || v5 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (v4 <= v5)
      v8 = v4 + v2;
    else
      v8 = v4;
    sub_10006FA3C(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v3 = v9;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(v3 + 16);
  v11 = (*(_QWORD *)(v3 + 24) >> 1) - v10;
  v12 = type metadata accessor for HourlyForecastViewModel(0);
  if (v11 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  sub_10012266C(a1 + v14, v2, v3 + v14 + *(_QWORD *)(v13 + 72) * v10);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFADD__(v15, v2);
  v17 = v15 + v2;
  if (!v16)
  {
    *(_QWORD *)(v3 + 16) = v17;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

void sub_1000BB600(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || v4 + v2 > *(_QWORD *)(v3 + 24) >> 1)
  {
    sub_10006FC24();
    v3 = v6;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_11;
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_100122748((char *)(a1 + 32), v2, (char *)(v3 + 40 * v7 + 32));
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

BOOL sub_1000BB6DC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BACD4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000BB6F8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BB468(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t, uint64_t))&static Date.< infix(_:_:)) & 1;
}

uint64_t sub_1000BB71C(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t), uint64_t (*a4)(_QWORD *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v7 = *(_QWORD *)(a2(0) - 8);
  v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v8 = a3(v8);
  v9 = *(_QWORD *)(v8 + 16);
  v11[0] = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v11[1] = v9;
  result = a4(v11);
  *a1 = v8;
  return result;
}

void sub_1000BB7AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  Swift::Int v13;
  unint64_t v14;
  Swift::Int v15;
  char *v16;
  Swift::Int v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  Swift::Int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  Swift::Int v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  Swift::Int v100;
  uint64_t v101;
  Swift::Int v102;
  uint64_t v103;
  Swift::Int v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  Swift::Int v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  Swift::Int v124;
  uint64_t v125;
  uint64_t v126;
  Swift::Int v127;
  char *v128;
  Swift::Int v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  Swift::Int v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v139 = type metadata accessor for HourlyForecastViewModel(0);
  v3 = *(_QWORD *)(v139 - 8);
  v4 = __chkstk_darwin(v139);
  v130 = (uint64_t)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v140 = (uint64_t)&v123 - v7;
  v8 = __chkstk_darwin(v6);
  v137 = (uint64_t)&v123 - v9;
  __chkstk_darwin(v8);
  v136 = (uint64_t)&v123 - v10;
  v11 = a1[1];
  v12 = _minimumMergeRunLength(_:)(v11);
  if (v12 >= v11)
  {
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (v11)
        sub_1000BCC0C(0, v11, 1, a1);
      return;
    }
    goto LABEL_143;
  }
  v13 = v12;
  v133 = v1;
  v138 = a1;
  v125 = sub_10012240C(v11 / 2);
  v126 = v11;
  v131 = v14;
  v132 = v3;
  if (v11 <= 0)
  {
LABEL_106:
    v16 = (char *)_swiftEmptyArrayStorage;
    v48 = _swiftEmptyArrayStorage[2];
LABEL_107:
    if (v48 < 2)
    {
LABEL_118:
      swift_bridgeObjectRelease(v16);
      if (v126 >= -1)
        goto LABEL_119;
      goto LABEL_147;
    }
    v114 = *v138;
    v115 = v133;
    while (1)
    {
      v116 = v48 - 2;
      if (v48 < 2)
        break;
      if (!v114)
        goto LABEL_151;
      v117 = v16;
      v118 = *(_QWORD *)&v16[16 * v116 + 32];
      v119 = *(_QWORD *)&v16[16 * v48 + 24];
      sub_1000BD124(v114 + *(_QWORD *)(v132 + 72) * v118, v114 + *(_QWORD *)(v132 + 72) * *(_QWORD *)&v16[16 * v48 + 16], v114 + *(_QWORD *)(v132 + 72) * v119, v131);
      if (v115)
      {
        v113 = v117;
        goto LABEL_104;
      }
      if (v119 < v118)
        goto LABEL_138;
      if ((swift_isUniquelyReferenced_nonNull_native(v117) & 1) == 0)
        v117 = sub_100028664((uint64_t)v117);
      if (v116 >= *((_QWORD *)v117 + 2))
        goto LABEL_139;
      v120 = &v117[16 * v116 + 32];
      *(_QWORD *)v120 = v118;
      *((_QWORD *)v120 + 1) = v119;
      v121 = *((_QWORD *)v117 + 2);
      if (v48 > v121)
        goto LABEL_140;
      memmove(&v117[16 * v48 + 16], &v117[16 * v48 + 32], 16 * (v121 - v48));
      v16 = v117;
      *((_QWORD *)v117 + 2) = v121 - 1;
      v48 = v121 - 1;
      if (v121 <= 2)
        goto LABEL_118;
    }
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
    return;
  }
  v124 = v13;
  v15 = 0;
  v16 = (char *)_swiftEmptyArrayStorage;
  v17 = v11;
  while (1)
  {
    v18 = v15;
    v19 = v15 + 1;
    v128 = v16;
    if (v15 + 1 >= v17)
    {
      ++v15;
LABEL_29:
      v39 = v138;
      goto LABEL_30;
    }
    v20 = *v138;
    v21 = *(_QWORD *)(v3 + 72);
    v22 = v136;
    sub_10000F7C4(*v138 + v21 * v19, v136, type metadata accessor for HourlyForecastViewModel);
    v23 = v20 + v21 * v15;
    v24 = v137;
    sub_10000F7C4(v23, v137, type metadata accessor for HourlyForecastViewModel);
    LODWORD(v135) = static Date.< infix(_:_:)(v22 + *(int *)(v139 + 20), v24 + *(int *)(v139 + 20));
    sub_100011894(v24, type metadata accessor for HourlyForecastViewModel);
    sub_100011894(v22, type metadata accessor for HourlyForecastViewModel);
    v15 = v18 + 2;
    v134 = v20;
    v141 = v21;
    if (v18 + 2 < v17)
    {
      v129 = v18;
      v25 = v21 * v19;
      v26 = v20;
      v27 = v21 * v15;
      while (1)
      {
        v28 = v17;
        v29 = v15;
        v30 = v136;
        sub_10000F7C4(v26 + v27, v136, type metadata accessor for HourlyForecastViewModel);
        v31 = v137;
        sub_10000F7C4(v26 + v25, v137, type metadata accessor for HourlyForecastViewModel);
        v32 = static Date.< infix(_:_:)(v30 + *(int *)(v139 + 20), v31 + *(int *)(v139 + 20));
        sub_100011894(v31, type metadata accessor for HourlyForecastViewModel);
        sub_100011894(v30, type metadata accessor for HourlyForecastViewModel);
        if (((v135 ^ v32) & 1) != 0)
          break;
        v15 = v29 + 1;
        v21 = v141;
        v26 += v141;
        v17 = v28;
        if (v15 >= v28)
        {
          v15 = v28;
          v3 = v132;
          v18 = v129;
          goto LABEL_12;
        }
      }
      v3 = v132;
      v15 = v29;
      v18 = v129;
      v17 = v28;
      v21 = v141;
    }
LABEL_12:
    v16 = v128;
    if ((v135 & 1) == 0)
      goto LABEL_29;
    if (v15 < v18)
      goto LABEL_144;
    if (v18 >= v15)
      goto LABEL_29;
    v135 = v17;
    v33 = 0;
    v34 = v18;
    v35 = v21 * (v15 - 1);
    v36 = v15 * v21;
    v37 = v34;
    v129 = v34;
    v38 = v34 * v21;
    v39 = v138;
    do
    {
      if (v37 != v15 + v33 - 1)
      {
        v40 = v134;
        if (!v134)
          goto LABEL_150;
        v41 = v134 + v38;
        v42 = v134 + v35;
        sub_100011868(v134 + v38, v130, type metadata accessor for HourlyForecastViewModel);
        if (v38 < v35 || v41 >= v40 + v36)
        {
          swift_arrayInitWithTakeFrontToBack(v40 + v38, v40 + v35, 1, v139);
          v21 = v141;
        }
        else
        {
          v21 = v141;
          if (v38 != v35)
            swift_arrayInitWithTakeBackToFront(v41);
        }
        sub_100011868(v130, v42, type metadata accessor for HourlyForecastViewModel);
        v16 = v128;
        v39 = v138;
      }
      ++v37;
      --v33;
      v35 -= v21;
      v36 -= v21;
      v38 += v21;
    }
    while (v37 < v15 + v33);
    v3 = v132;
    v17 = v135;
    v18 = v129;
LABEL_30:
    if (v15 >= v17)
      goto LABEL_39;
    if (__OFSUB__(v15, v18))
      goto LABEL_142;
    if (v15 - v18 >= v124)
      goto LABEL_39;
    if (__OFADD__(v18, v124))
      goto LABEL_145;
    if (v18 + v124 >= v17)
      v44 = v17;
    else
      v44 = v18 + v124;
    if (v44 < v18)
      goto LABEL_146;
    if (v15 == v44)
    {
LABEL_39:
      v45 = v133;
    }
    else
    {
      v99 = *(_QWORD *)(v3 + 72);
      v141 = v99 * (v15 - 1);
      v134 = v99;
      v100 = v15 * v99;
      v129 = v18;
      v127 = v44;
      do
      {
        v101 = 0;
        v102 = v18;
        v135 = v15;
        while (1)
        {
          v103 = *v39;
          v104 = v100;
          v105 = v100 + v101 + *v39;
          v106 = v136;
          v107 = v39;
          sub_10000F7C4(v105, v136, type metadata accessor for HourlyForecastViewModel);
          v108 = v137;
          sub_10000F7C4(v141 + v101 + v103, v137, type metadata accessor for HourlyForecastViewModel);
          LOBYTE(v103) = static Date.< infix(_:_:)(v106 + *(int *)(v139 + 20), v108 + *(int *)(v139 + 20));
          sub_100011894(v108, type metadata accessor for HourlyForecastViewModel);
          sub_100011894(v106, type metadata accessor for HourlyForecastViewModel);
          if ((v103 & 1) == 0)
            break;
          v109 = *v107;
          if (!*v107)
            goto LABEL_148;
          v100 = v104;
          v110 = v109 + v104 + v101;
          v111 = v109 + v141 + v101;
          sub_100011868(v110, v140, type metadata accessor for HourlyForecastViewModel);
          swift_arrayInitWithTakeFrontToBack(v110, v111, 1, v139);
          sub_100011868(v140, v111, type metadata accessor for HourlyForecastViewModel);
          v112 = v135;
          v101 -= v134;
          ++v102;
          v39 = v138;
          if (v135 == v102)
            goto LABEL_97;
        }
        v112 = v135;
        v100 = v104;
        v39 = v107;
LABEL_97:
        v15 = v112 + 1;
        v141 += v134;
        v100 += v134;
        v18 = v129;
      }
      while (v15 != v127);
      v15 = v127;
      v45 = v133;
      v16 = v128;
    }
    if (v15 < v18)
      goto LABEL_141;
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) != 0)
      v16 = v128;
    else
      v16 = sub_100028574(0, *((_QWORD *)v128 + 2) + 1, 1, v128);
    v47 = *((_QWORD *)v16 + 2);
    v46 = *((_QWORD *)v16 + 3);
    v48 = v47 + 1;
    if (v47 >= v46 >> 1)
      v16 = sub_100028574((char *)(v46 > 1), v47 + 1, 1, v16);
    v133 = v45;
    *((_QWORD *)v16 + 2) = v48;
    v49 = v16 + 32;
    v50 = &v16[16 * v47 + 32];
    *(_QWORD *)v50 = v18;
    *((_QWORD *)v50 + 1) = v15;
    if (v47)
      break;
    v48 = 1;
LABEL_88:
    v17 = v138[1];
    v3 = v132;
    if (v15 >= v17)
      goto LABEL_107;
  }
  while (1)
  {
    v51 = v48 - 1;
    if (v48 >= 4)
    {
      v56 = &v49[16 * v48];
      v57 = *((_QWORD *)v56 - 8);
      v58 = *((_QWORD *)v56 - 7);
      v62 = __OFSUB__(v58, v57);
      v59 = v58 - v57;
      if (v62)
        goto LABEL_126;
      v61 = *((_QWORD *)v56 - 6);
      v60 = *((_QWORD *)v56 - 5);
      v62 = __OFSUB__(v60, v61);
      v54 = v60 - v61;
      v55 = v62;
      if (v62)
        goto LABEL_127;
      v63 = v48 - 2;
      v64 = &v49[16 * v48 - 32];
      v66 = *(_QWORD *)v64;
      v65 = *((_QWORD *)v64 + 1);
      v62 = __OFSUB__(v65, v66);
      v67 = v65 - v66;
      if (v62)
        goto LABEL_128;
      v62 = __OFADD__(v54, v67);
      v68 = v54 + v67;
      if (v62)
        goto LABEL_130;
      if (v68 >= v59)
      {
        v86 = &v49[16 * v51];
        v88 = *(_QWORD *)v86;
        v87 = *((_QWORD *)v86 + 1);
        v62 = __OFSUB__(v87, v88);
        v89 = v87 - v88;
        if (v62)
          goto LABEL_136;
        v79 = v54 < v89;
        goto LABEL_77;
      }
    }
    else
    {
      if (v48 != 3)
      {
        v80 = *((_QWORD *)v16 + 4);
        v81 = *((_QWORD *)v16 + 5);
        v62 = __OFSUB__(v81, v80);
        v73 = v81 - v80;
        v74 = v62;
        goto LABEL_71;
      }
      v53 = *((_QWORD *)v16 + 4);
      v52 = *((_QWORD *)v16 + 5);
      v62 = __OFSUB__(v52, v53);
      v54 = v52 - v53;
      v55 = v62;
    }
    if ((v55 & 1) != 0)
      goto LABEL_129;
    v63 = v48 - 2;
    v69 = &v49[16 * v48 - 32];
    v71 = *(_QWORD *)v69;
    v70 = *((_QWORD *)v69 + 1);
    v72 = __OFSUB__(v70, v71);
    v73 = v70 - v71;
    v74 = v72;
    if (v72)
      goto LABEL_131;
    v75 = &v49[16 * v51];
    v77 = *(_QWORD *)v75;
    v76 = *((_QWORD *)v75 + 1);
    v62 = __OFSUB__(v76, v77);
    v78 = v76 - v77;
    if (v62)
      goto LABEL_133;
    if (__OFADD__(v73, v78))
      goto LABEL_135;
    if (v73 + v78 >= v54)
    {
      v79 = v54 < v78;
LABEL_77:
      if (v79)
        v51 = v63;
      goto LABEL_79;
    }
LABEL_71:
    if ((v74 & 1) != 0)
      goto LABEL_132;
    v82 = &v49[16 * v51];
    v84 = *(_QWORD *)v82;
    v83 = *((_QWORD *)v82 + 1);
    v62 = __OFSUB__(v83, v84);
    v85 = v83 - v84;
    if (v62)
      goto LABEL_134;
    if (v85 < v73)
      goto LABEL_88;
LABEL_79:
    v90 = v15;
    v91 = v51 - 1;
    if (v51 - 1 >= v48)
    {
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
      goto LABEL_137;
    }
    if (!*v138)
      goto LABEL_149;
    v92 = v16;
    v93 = &v49[16 * v91];
    v94 = *(_QWORD *)v93;
    v95 = &v49[16 * v51];
    v96 = *((_QWORD *)v95 + 1);
    v97 = v133;
    sub_1000BD124(*v138 + *(_QWORD *)(v132 + 72) * *(_QWORD *)v93, *v138 + *(_QWORD *)(v132 + 72) * *(_QWORD *)v95, *v138 + *(_QWORD *)(v132 + 72) * v96, v131);
    v133 = v97;
    if (v97)
      break;
    if (v96 < v94)
      goto LABEL_123;
    if (v51 > *((_QWORD *)v92 + 2))
      goto LABEL_124;
    *(_QWORD *)v93 = v94;
    *(_QWORD *)&v49[16 * v91 + 8] = v96;
    v98 = *((_QWORD *)v92 + 2);
    if (v51 >= v98)
      goto LABEL_125;
    v48 = v98 - 1;
    memmove(&v49[16 * v51], v95 + 16, 16 * (v98 - 1 - v51));
    v16 = v92;
    *((_QWORD *)v92 + 2) = v98 - 1;
    v79 = v98 > 2;
    v15 = v90;
    if (!v79)
      goto LABEL_88;
  }
  v113 = v92;
LABEL_104:
  swift_bridgeObjectRelease(v113);
  if (v126 < -1)
  {
    __break(1u);
    goto LABEL_106;
  }
LABEL_119:
  v122 = v125;
  *(_QWORD *)(v125 + 16) = 0;
  swift_bridgeObjectRelease(v122);
}

void sub_1000BC11C(int64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  unint64_t v16;
  void (*v17)(void);
  char *v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  char *v22;
  void (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  Swift::Int v37;
  Swift::Int v38;
  char *v39;
  void (*v40)(void);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  Swift::Int v60;
  char *v61;
  uint64_t v62;
  Swift::Int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  char *v78;
  uint64_t v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  char *v83;
  char *v84;
  void (*v85)(char *, char *, uint64_t);
  void (*v86)(void);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  void (*v93)(void);
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  char v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  Swift::Int v151;
  uint64_t v152;
  Swift::Int v153;
  char *v154;
  char *v155;
  void (*v156)(void);
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  void (*v161)(char *, uint64_t);
  void (*v162)(char *, uint64_t, uint64_t, char *);
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  _QWORD *v168;
  uint64_t v169;
  void (*v170)(void);
  char *v171;
  char *v172;
  Swift::Int v173;
  _QWORD *v174;

  v2 = v1;
  v166 = type metadata accessor for Date(0);
  v159 = *(_QWORD *)(v166 - 8);
  v4 = __chkstk_darwin(v166);
  v165 = (char *)&v147 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v164 = (char *)&v147 - v6;
  v169 = type metadata accessor for HourWeather(0);
  v174 = *(_QWORD **)(v169 - 8);
  v7 = __chkstk_darwin(v169);
  v155 = (char *)&v147 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v171 = (char *)&v147 - v10;
  v11 = __chkstk_darwin(v9);
  v163 = (char *)&v147 - v12;
  __chkstk_darwin(v11);
  v167 = (char *)&v147 - v13;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = _minimumMergeRunLength(_:)(v14);
  if (v15 >= v14)
  {
    if ((v14 & 0x8000000000000000) == 0)
    {
      if (v14)
        sub_1000BCE38(0, v14, 1, (_QWORD *)a1);
      return;
    }
    goto LABEL_140;
  }
  v151 = v15;
  v149 = sub_100122418(v14 / 2);
  v157 = v16;
  v150 = v14;
  if (v14 <= 0)
  {
LABEL_103:
    v18 = (char *)_swiftEmptyArrayStorage;
    v90 = _swiftEmptyArrayStorage[2];
LABEL_104:
    if (v90 < 2)
    {
LABEL_115:
      swift_bridgeObjectRelease(v18);
      if (v150 >= -1)
        goto LABEL_116;
      goto LABEL_144;
    }
    v140 = *(_QWORD *)a1;
    while (1)
    {
      a1 = v90 - 2;
      if (v90 < 2)
        break;
      if (!v140)
        goto LABEL_148;
      v141 = v18;
      v142 = *(_QWORD *)&v18[16 * a1 + 32];
      v143 = *(_QWORD *)&v18[16 * v90 + 24];
      sub_1000BD4FC(v140 + v174[9] * v142, v140 + v174[9] * *(_QWORD *)&v18[16 * v90 + 16], v140 + v174[9] * v143, v157);
      if (v2)
      {
        v139 = v141;
        goto LABEL_101;
      }
      if (v143 < v142)
        goto LABEL_135;
      if ((swift_isUniquelyReferenced_nonNull_native(v141) & 1) == 0)
        v141 = sub_100028664((uint64_t)v141);
      if ((unint64_t)a1 >= *((_QWORD *)v141 + 2))
        goto LABEL_136;
      v144 = &v141[16 * a1 + 32];
      *(_QWORD *)v144 = v142;
      *((_QWORD *)v144 + 1) = v143;
      v145 = *((_QWORD *)v141 + 2);
      if (v90 > v145)
        goto LABEL_137;
      memmove(&v141[16 * v90 + 16], &v141[16 * v90 + 32], 16 * (v145 - v90));
      v18 = v141;
      *((_QWORD *)v141 + 2) = v145 - 1;
      v90 = v145 - 1;
      if (v145 <= 2)
        goto LABEL_115;
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
    return;
  }
  v17 = 0;
  v18 = (char *)_swiftEmptyArrayStorage;
  v168 = (_QWORD *)a1;
  while (1)
  {
    v19 = (Swift::Int)v17;
    v20 = (Swift::Int)v17 + 1;
    v154 = v18;
    v156 = v17;
    if ((uint64_t)v17 + 1 < v14)
    {
      v152 = *(_QWORD *)a1;
      v21 = v152;
      v172 = (char *)v174[9];
      v22 = v172;
      v173 = (Swift::Int)v17 + 1;
      v23 = (void (*)(void))v174[2];
      v24 = v169;
      v23();
      v25 = v21 + (_QWORD)v22 * v19;
      v26 = v163;
      v170 = v23;
      v27 = ((uint64_t (*)(char *, uint64_t, uint64_t))v23)(v163, v25, v24);
      v28 = v164;
      v29 = HourWeather.date.getter(v27);
      v30 = v165;
      HourWeather.date.getter(v29);
      LODWORD(v162) = static Date.< infix(_:_:)(v28, v30);
      v31 = *(void (**)(char *, uint64_t))(v159 + 8);
      v32 = v166;
      v31(v30, v166);
      v33 = v28;
      v19 = (Swift::Int)v156;
      v161 = v31;
      v31(v33, v32);
      v34 = v172;
      v35 = (void (*)(char *, uint64_t))v174[1];
      v35(v26, v24);
      v160 = (char *)v35;
      v35(v167, v24);
      v20 = v19 + 2;
      if (v19 + 2 < v14)
      {
        v148 = v2;
        v158 = (_QWORD)v34 * v173;
        v36 = v152;
        v153 = (_QWORD)v34 * v20;
        while (1)
        {
          v37 = v14;
          v38 = v20;
          v39 = v167;
          v41 = v169;
          v40 = v170;
          ((void (*)(char *, uint64_t, uint64_t))v170)(v167, v36 + v153, v169);
          v42 = v163;
          v43 = ((uint64_t (*)(char *, uint64_t, uint64_t))v40)(v163, v36 + v158, v41);
          v44 = v164;
          v45 = HourWeather.date.getter(v43);
          v46 = v165;
          HourWeather.date.getter(v45);
          LODWORD(v173) = static Date.< infix(_:_:)(v44, v46);
          v47 = v46;
          v48 = v166;
          v49 = v161;
          v161(v47, v166);
          v49(v44, v48);
          v50 = (void (*)(char *, uint64_t))v160;
          ((void (*)(char *, uint64_t))v160)(v42, v41);
          v50(v39, v41);
          if (((v162 ^ v173) & 1) != 0)
            break;
          v20 = v38 + 1;
          v34 = v172;
          v36 += (uint64_t)v172;
          v14 = v37;
          if (v20 >= v37)
          {
            v20 = v37;
            a1 = (int64_t)v168;
            v2 = v148;
            v19 = (Swift::Int)v156;
            goto LABEL_11;
          }
        }
        a1 = (int64_t)v168;
        v2 = v148;
        v20 = v38;
        v19 = (Swift::Int)v156;
        v14 = v37;
        v34 = v172;
      }
LABEL_11:
      v18 = v154;
      if ((v162 & 1) != 0)
      {
        if (v20 < v19)
          goto LABEL_141;
        if (v19 < v20)
        {
          v161 = (void (*)(char *, uint64_t))v14;
          v51 = 0;
          v52 = (_QWORD)v34 * (v20 - 1);
          v53 = v20 * (_QWORD)v34;
          v54 = v19 * (_QWORD)v34;
          v170 = (void (*)(void))v20;
          do
          {
            if (v19 != v20 + v51 - 1)
            {
              v55 = v152;
              if (!v152)
                goto LABEL_147;
              v56 = v2;
              v57 = v152 + v54;
              v173 = v152 + v52;
              v58 = v169;
              v162 = (void (*)(char *, uint64_t, uint64_t, char *))v174[4];
              v162(v155, v152 + v54, v169, v18);
              if (v54 < v52 || v57 >= v55 + v53)
              {
                swift_arrayInitWithTakeFrontToBack(v55 + v54, v173, 1, v58);
                v34 = v172;
              }
              else
              {
                v34 = v172;
                if (v54 != v52)
                  swift_arrayInitWithTakeBackToFront(v57);
              }
              ((void (*)(Swift::Int, char *, uint64_t))v162)(v173, v155, v58);
              v18 = v154;
              v2 = v56;
              v20 = (Swift::Int)v170;
            }
            ++v19;
            --v51;
            v52 -= (uint64_t)v34;
            v53 -= (uint64_t)v34;
            v54 += (uint64_t)v34;
          }
          while (v19 < v20 + v51);
          a1 = (int64_t)v168;
          v19 = (Swift::Int)v156;
          v14 = (Swift::Int)v161;
        }
      }
    }
    if (v20 < v14)
    {
      if (__OFSUB__(v20, v19))
        goto LABEL_139;
      if (v20 - v19 < v151)
      {
        if (__OFADD__(v19, v151))
          goto LABEL_142;
        if (v19 + v151 >= v14)
          v60 = v14;
        else
          v60 = v19 + v151;
        if (v60 < v19)
          goto LABEL_143;
        if (v20 != v60)
        {
          v148 = v2;
          v61 = (char *)v174[9];
          v158 = v174[2];
          v62 = (_QWORD)v61 * (v20 - 1);
          v160 = v61;
          v63 = v20 * (_QWORD)v61;
          v64 = v169;
          v153 = v60;
          do
          {
            v65 = 0;
            v170 = (void (*)(void))v20;
            v161 = (void (*)(char *, uint64_t))v63;
            v162 = (void (*)(char *, uint64_t, uint64_t, char *))v62;
            while (1)
            {
              v66 = *(_QWORD *)a1;
              v172 = (char *)(v63 + v65);
              v173 = v19;
              v67 = (char *)(v63 + v65 + v66);
              v68 = v167;
              v69 = (uint64_t (*)(char *, uint64_t, uint64_t))v158;
              ((void (*)(char *, char *, uint64_t, char *))v158)(v167, v67, v64, v18);
              v70 = v62 + v65 + v66;
              v71 = (uint64_t *)a1;
              v72 = v163;
              v73 = v69(v163, v70, v64);
              v74 = v164;
              v75 = HourWeather.date.getter(v73);
              v76 = v165;
              HourWeather.date.getter(v75);
              LOBYTE(v66) = static Date.< infix(_:_:)(v74, v76);
              v77 = *(void (**)(char *, uint64_t))(v159 + 8);
              v78 = v76;
              v79 = v166;
              v77(v78, v166);
              v80 = v74;
              v64 = v169;
              v77(v80, v79);
              v81 = (void (*)(char *, uint64_t))v174[1];
              v81(v72, v64);
              v81(v68, v64);
              if ((v66 & 1) == 0)
                break;
              v82 = *v71;
              if (!*v71)
                goto LABEL_145;
              v63 = (Swift::Int)v161;
              v62 = (uint64_t)v162;
              v83 = (char *)v161 + v82 + v65;
              v84 = (char *)v162 + v82 + v65;
              v85 = (void (*)(char *, char *, uint64_t))v174[4];
              v85(v171, v83, v64);
              swift_arrayInitWithTakeFrontToBack(v83, v84, 1, v64);
              v85(v84, v171, v64);
              v65 -= (uint64_t)v160;
              v19 = v173 + 1;
              v86 = v170;
              a1 = (int64_t)v168;
              if (v170 == (void (*)(void))(v173 + 1))
                goto LABEL_44;
            }
            v86 = v170;
            a1 = (int64_t)v71;
            v63 = (Swift::Int)v161;
            v62 = (uint64_t)v162;
LABEL_44:
            v20 = (Swift::Int)v86 + 1;
            v62 += (uint64_t)v160;
            v63 += (Swift::Int)v160;
            v19 = (Swift::Int)v156;
          }
          while (v20 != v153);
          v20 = v153;
          v2 = v148;
          v18 = v154;
        }
      }
    }
    if (v20 < v19)
      goto LABEL_138;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v170 = (void (*)(void))v20;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      v18 = v154;
    else
      v18 = sub_100028574(0, *((_QWORD *)v154 + 2) + 1, 1, v154);
    v89 = *((_QWORD *)v18 + 2);
    v88 = *((_QWORD *)v18 + 3);
    v90 = v89 + 1;
    if (v89 >= v88 >> 1)
      v18 = sub_100028574((char *)(v88 > 1), v89 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v90;
    v91 = v18 + 32;
    v92 = &v18[16 * v89 + 32];
    v93 = v170;
    *(_QWORD *)v92 = v19;
    *((_QWORD *)v92 + 1) = v93;
    if (v89)
      break;
    v90 = 1;
LABEL_94:
    a1 = (int64_t)v168;
    v14 = v168[1];
    v17 = v170;
    if ((uint64_t)v170 >= v14)
      goto LABEL_104;
  }
  while (1)
  {
    v94 = v90 - 1;
    if (v90 >= 4)
    {
      v99 = &v91[16 * v90];
      v100 = *((_QWORD *)v99 - 8);
      v101 = *((_QWORD *)v99 - 7);
      v105 = __OFSUB__(v101, v100);
      v102 = v101 - v100;
      if (v105)
        goto LABEL_123;
      v104 = *((_QWORD *)v99 - 6);
      v103 = *((_QWORD *)v99 - 5);
      v105 = __OFSUB__(v103, v104);
      v97 = v103 - v104;
      v98 = v105;
      if (v105)
        goto LABEL_124;
      v106 = v90 - 2;
      v107 = &v91[16 * v90 - 32];
      v109 = *(_QWORD *)v107;
      v108 = *((_QWORD *)v107 + 1);
      v105 = __OFSUB__(v108, v109);
      v110 = v108 - v109;
      if (v105)
        goto LABEL_125;
      v105 = __OFADD__(v97, v110);
      v111 = v97 + v110;
      if (v105)
        goto LABEL_127;
      if (v111 >= v102)
      {
        v129 = &v91[16 * v94];
        v131 = *(_QWORD *)v129;
        v130 = *((_QWORD *)v129 + 1);
        v105 = __OFSUB__(v130, v131);
        v132 = v130 - v131;
        if (v105)
          goto LABEL_133;
        v122 = v97 < v132;
        goto LABEL_83;
      }
    }
    else
    {
      if (v90 != 3)
      {
        v123 = *((_QWORD *)v18 + 4);
        v124 = *((_QWORD *)v18 + 5);
        v105 = __OFSUB__(v124, v123);
        v116 = v124 - v123;
        v117 = v105;
        goto LABEL_77;
      }
      v96 = *((_QWORD *)v18 + 4);
      v95 = *((_QWORD *)v18 + 5);
      v105 = __OFSUB__(v95, v96);
      v97 = v95 - v96;
      v98 = v105;
    }
    if ((v98 & 1) != 0)
      goto LABEL_126;
    v106 = v90 - 2;
    v112 = &v91[16 * v90 - 32];
    v114 = *(_QWORD *)v112;
    v113 = *((_QWORD *)v112 + 1);
    v115 = __OFSUB__(v113, v114);
    v116 = v113 - v114;
    v117 = v115;
    if (v115)
      goto LABEL_128;
    v118 = &v91[16 * v94];
    v120 = *(_QWORD *)v118;
    v119 = *((_QWORD *)v118 + 1);
    v105 = __OFSUB__(v119, v120);
    v121 = v119 - v120;
    if (v105)
      goto LABEL_130;
    if (__OFADD__(v116, v121))
      goto LABEL_132;
    if (v116 + v121 >= v97)
    {
      v122 = v97 < v121;
LABEL_83:
      if (v122)
        v94 = v106;
      goto LABEL_85;
    }
LABEL_77:
    if ((v117 & 1) != 0)
      goto LABEL_129;
    v125 = &v91[16 * v94];
    v127 = *(_QWORD *)v125;
    v126 = *((_QWORD *)v125 + 1);
    v105 = __OFSUB__(v126, v127);
    v128 = v126 - v127;
    if (v105)
      goto LABEL_131;
    if (v128 < v116)
      goto LABEL_94;
LABEL_85:
    v133 = v94 - 1;
    if (v94 - 1 >= v90)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if (!*v168)
      goto LABEL_146;
    v134 = v18;
    v135 = (uint64_t *)&v91[16 * v133];
    v136 = *v135;
    v137 = &v91[16 * v94];
    a1 = *((_QWORD *)v137 + 1);
    sub_1000BD4FC(*v168 + v174[9] * *v135, *v168 + v174[9] * *(_QWORD *)v137, *v168 + v174[9] * a1, v157);
    if (v2)
      break;
    if (a1 < v136)
      goto LABEL_120;
    if (v94 > *((_QWORD *)v134 + 2))
      goto LABEL_121;
    *v135 = v136;
    *(_QWORD *)&v91[16 * v133 + 8] = a1;
    v138 = *((_QWORD *)v134 + 2);
    if (v94 >= v138)
      goto LABEL_122;
    v90 = v138 - 1;
    memmove(&v91[16 * v94], v137 + 16, 16 * (v138 - 1 - v94));
    v18 = v134;
    *((_QWORD *)v134 + 2) = v138 - 1;
    if (v138 <= 2)
      goto LABEL_94;
  }
  v139 = v134;
LABEL_101:
  swift_bridgeObjectRelease(v139);
  if (v150 < -1)
  {
    __break(1u);
    goto LABEL_103;
  }
LABEL_116:
  v146 = v149;
  *(_QWORD *)(v149 + 16) = 0;
  swift_bridgeObjectRelease(v146);
}

void sub_1000BCC0C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v25 = a1;
  v29 = type metadata accessor for HourlyForecastViewModel(0);
  v7 = __chkstk_darwin(v29);
  v30 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v26 = (uint64_t)&v23 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v23 - v12;
  v28 = a3;
  v24 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v11 + 72);
    v32 = v14 * (v28 - 1);
    v27 = v14;
    v31 = v14 * v28;
    while (2)
    {
      v15 = 0;
      v16 = v25;
      do
      {
        v17 = *a4;
        sub_10000F7C4(v31 + v15 + *a4, (uint64_t)v13, type metadata accessor for HourlyForecastViewModel);
        v18 = v26;
        sub_10000F7C4(v32 + v15 + v17, v26, type metadata accessor for HourlyForecastViewModel);
        LOBYTE(v17) = static Date.< infix(_:_:)(&v13[*(int *)(v29 + 20)], v18 + *(int *)(v29 + 20));
        sub_100011894(v18, type metadata accessor for HourlyForecastViewModel);
        sub_100011894((uint64_t)v13, type metadata accessor for HourlyForecastViewModel);
        if ((v17 & 1) == 0)
          break;
        v19 = *a4;
        if (!*a4)
        {
          __break(1u);
          return;
        }
        v20 = a4;
        v21 = v19 + v31 + v15;
        v22 = v19 + v32 + v15;
        sub_100011868(v21, v30, type metadata accessor for HourlyForecastViewModel);
        swift_arrayInitWithTakeFrontToBack(v21, v22, 1, v29);
        sub_100011868(v30, v22, type metadata accessor for HourlyForecastViewModel);
        v15 -= v27;
        ++v16;
        a4 = v20;
      }
      while (v28 != v16);
      v32 += v27;
      v31 += v27;
      if (++v28 != v24)
        continue;
      break;
    }
  }
}

uint64_t sub_1000BCE38(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;

  v46 = a1;
  v7 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  v8 = __chkstk_darwin(v7);
  v52 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v51 = (char *)&v44 - v10;
  v11 = type metadata accessor for HourWeather(0);
  v61 = *(_QWORD **)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v59 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v50 = (char *)&v44 - v15;
  result = __chkstk_darwin(v14);
  v49 = (char *)&v44 - v17;
  v58 = a3;
  v45 = a2;
  if (a3 != a2)
  {
    v18 = v61[9];
    v47 = (uint64_t (*)(char *, uint64_t, uint64_t))v61[2];
    v48 = v11;
    v19 = v18 * (v58 - 1);
    v55 = v18;
    v20 = v18 * v58;
    while (2)
    {
      v21 = 0;
      v62 = v46;
      v56 = v20;
      v57 = v19;
      do
      {
        v22 = *a4;
        v60 = v20 + v21;
        v23 = v20 + v21 + v22;
        v24 = v49;
        v25 = v47;
        v47(v49, v23, v11);
        v26 = v19 + v21 + v22;
        v27 = v50;
        v28 = v25(v50, v26, v11);
        v29 = v51;
        v30 = HourWeather.date.getter(v28);
        v31 = a4;
        v32 = v52;
        HourWeather.date.getter(v30);
        LOBYTE(v22) = static Date.< infix(_:_:)(v29, v32);
        v33 = *(void (**)(char *, uint64_t))(v53 + 8);
        v34 = v32;
        v35 = v54;
        v33(v34, v54);
        v36 = v35;
        a4 = v31;
        v11 = v48;
        v33(v29, v36);
        v37 = (void (*)(char *, uint64_t))v61[1];
        v38 = v27;
        v19 = v57;
        v37(v38, v11);
        v39 = v24;
        v20 = v56;
        result = ((uint64_t (*)(char *, uint64_t))v37)(v39, v11);
        if ((v22 & 1) == 0)
          break;
        v40 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }
        v41 = v40 + v20 + v21;
        v42 = v40 + v19 + v21;
        v43 = (void (*)(char *, uint64_t, uint64_t))v61[4];
        v43(v59, v41, v11);
        swift_arrayInitWithTakeFrontToBack(v41, v42, 1, v11);
        result = ((uint64_t (*)(uint64_t, char *, uint64_t))v43)(v42, v59, v11);
        v21 -= v55;
        ++v62;
      }
      while (v58 != v62);
      v19 += v55;
      v20 += v55;
      if (++v58 != v45)
        continue;
      break;
    }
  }
  return result;
}

void sub_1000BD124(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  int64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v26;
  BOOL v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int64_t v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = type metadata accessor for HourlyForecastViewModel(0);
  v8 = __chkstk_darwin(v51);
  v50 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v44 - v11;
  v13 = *(_QWORD *)(v10 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v14 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_75;
  v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_76;
  v18 = v14 / v13;
  v19 = v16 / v13;
  v45 = *(_QWORD *)(v10 + 72);
  if (v14 / v13 >= v16 / v13)
  {
    sub_1000704E4(a2, v16 / v13, a4);
    v20 = a4 + v19 * v13;
    if (v19 * v13 >= 1 && a1 < a2)
    {
      v47 = a4;
      v48 = -v13;
      v46 = a1;
      do
      {
        v30 = a3;
        v31 = v48;
        a3 += v48;
        v49 = v20 + v48;
        v32 = v20;
        sub_10000F7C4(v20 + v48, (uint64_t)v12, type metadata accessor for HourlyForecastViewModel);
        v33 = a2 + v31;
        v34 = a2 + v31;
        v35 = (uint64_t)v12;
        v36 = v50;
        sub_10000F7C4(v34, v50, type metadata accessor for HourlyForecastViewModel);
        v37 = static Date.< infix(_:_:)(v35 + *(int *)(v51 + 20), v36 + *(int *)(v51 + 20));
        v38 = v36;
        v12 = (char *)v35;
        sub_100011894(v38, type metadata accessor for HourlyForecastViewModel);
        sub_100011894(v35, type metadata accessor for HourlyForecastViewModel);
        if ((v37 & 1) != 0)
        {
          if (v30 < a2 || a3 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack(a3, v33, 1, v51);
          }
          else if (v30 != a2)
          {
            swift_arrayInitWithTakeBackToFront(a3);
          }
          a2 = v33;
          a4 = v47;
          v20 = v32;
        }
        else
        {
          if (v30 < v32 || a3 >= v32)
          {
            v20 = v49;
            swift_arrayInitWithTakeFrontToBack(a3, v49, 1, v51);
          }
          else
          {
            v20 = v49;
            if (v30 != v32)
              swift_arrayInitWithTakeBackToFront(a3);
          }
          a4 = v47;
        }
      }
      while (v20 > a4 && a2 > v46);
      v13 = v45;
    }
  }
  else
  {
    sub_1000704E4(a1, v14 / v13, a4);
    v20 = a4 + v18 * v13;
    v49 = a3;
    if (v18 * v13 >= 1 && a2 < a3)
    {
      v22 = v50;
      do
      {
        sub_10000F7C4(a2, (uint64_t)v12, type metadata accessor for HourlyForecastViewModel);
        sub_10000F7C4(a4, v22, type metadata accessor for HourlyForecastViewModel);
        v23 = static Date.< infix(_:_:)(&v12[*(int *)(v51 + 20)], v22 + *(int *)(v51 + 20));
        sub_100011894(v22, type metadata accessor for HourlyForecastViewModel);
        sub_100011894((uint64_t)v12, type metadata accessor for HourlyForecastViewModel);
        if ((v23 & 1) != 0)
        {
          v24 = a2 + v13;
          if (a1 < a2 || a1 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(a1, a2, 1, v51);
          }
          else if (a1 != a2)
          {
            swift_arrayInitWithTakeBackToFront(a1);
          }
        }
        else
        {
          v26 = a4 + v13;
          if (a1 < a4 || a1 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack(a1, a4, 1, v51);
          }
          else if (a1 != a4)
          {
            swift_arrayInitWithTakeBackToFront(a1);
          }
          v24 = a2;
          a4 = v26;
          v13 = v45;
        }
        a1 += v13;
        v28 = a4 >= v20 || v24 >= v49;
        a2 = v24;
      }
      while (!v28);
    }
    a2 = a1;
  }
  v42 = v20 - a4;
  if (v13 != -1 || v42 != 0x8000000000000000)
  {
    sub_1000704E4(a4, v42 / v13, a2);
    return;
  }
LABEL_77:
  __break(1u);
}

uint64_t sub_1000BD4FC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  unint64_t v39;
  uint64_t (*v44)(char *);
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t (*v49)(char *);
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  uint64_t (*v71)(char *);
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;

  v82 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v82 - 8);
  v9 = __chkstk_darwin(v82);
  v81 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v80 = (char *)&v69 - v11;
  v86 = type metadata accessor for HourWeather(0);
  v12 = __chkstk_darwin(v86);
  v79 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v78 = (char *)&v69 - v15;
  v83 = v16;
  v17 = *(_QWORD *)(v16 + 72);
  if (!v17)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v18 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v17 == -1)
    goto LABEL_75;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v17 == -1)
    goto LABEL_76;
  v85 = a3;
  v22 = v18 / v17;
  v23 = v20 / v17;
  v77 = v17;
  if (v18 / v17 >= v20 / v17)
  {
    result = sub_1000704FC(a2, v20 / v17, a4);
    v24 = (char *)(a4 + v23 * v17);
    if (v23 * v17 < 1 || a1 >= a2)
      goto LABEL_69;
    v72 = -v17;
    v44 = *(uint64_t (**)(char *))(v83 + 16);
    v70 = a4;
    v71 = v44;
    v45 = (char *)v85;
    v76 = v8;
    v84 = a1;
    v46 = v86;
    while (1)
    {
      v47 = v45;
      v49 = v71;
      v48 = v72;
      v75 = v47;
      v85 = (unint64_t)&v47[v72];
      v50 = v78;
      v74 = (unint64_t)&v24[v72];
      v71(v78);
      v51 = v79;
      v73 = a2 + v48;
      v52 = v49(v79);
      v53 = v80;
      v54 = HourWeather.date.getter(v52);
      v55 = (char *)a2;
      v56 = v81;
      HourWeather.date.getter(v54);
      LOBYTE(v48) = static Date.< infix(_:_:)(v53, v56);
      v57 = *(void (**)(char *, uint64_t))(v8 + 8);
      v58 = v56;
      v59 = v82;
      v57(v58, v82);
      v57(v53, v59);
      v60 = *(void (**)(char *, uint64_t))(v83 + 8);
      v60(v51, v46);
      result = ((uint64_t (*)(char *, uint64_t))v60)(v50, v46);
      if ((v48 & 1) != 0)
        break;
      v45 = (char *)v85;
      v64 = v75 < v24 || v85 >= (unint64_t)v24;
      a2 = (unint64_t)v55;
      if (v64)
      {
        v62 = v85;
        v24 = (char *)v74;
        v63 = v74;
LABEL_58:
        result = swift_arrayInitWithTakeFrontToBack(v62, v63, 1, v86);
        a4 = v70;
        v8 = v76;
        v17 = v77;
        v65 = v84;
        goto LABEL_65;
      }
      a4 = v70;
      v8 = v76;
      v17 = v77;
      v65 = v84;
      if (v75 == v24)
      {
        v24 = (char *)v74;
      }
      else
      {
        v24 = (char *)v74;
        result = swift_arrayInitWithTakeBackToFront(v85);
      }
LABEL_65:
      if ((unint64_t)v24 <= a4 || a2 <= v65)
        goto LABEL_69;
    }
    v45 = (char *)v85;
    if (v75 >= v55 && v85 < (unint64_t)v55)
    {
      v8 = v76;
      v17 = v77;
      v65 = v84;
      a2 = v73;
      if (v75 != v55)
        result = swift_arrayInitWithTakeBackToFront(v85);
      a4 = v70;
      goto LABEL_65;
    }
    v62 = v85;
    a2 = v73;
    v63 = v73;
    goto LABEL_58;
  }
  result = sub_1000704FC(a1, v18 / v17, a4);
  v24 = (char *)(a4 + v22 * v17);
  if (v22 * v17 >= 1 && a2 < v85)
  {
    v75 = *(char **)(v83 + 16);
    v76 = v8;
    v74 = a4 + v22 * v17;
    v26 = v86;
    v27 = v79;
    do
    {
      v84 = a1;
      v28 = v78;
      v29 = v75;
      ((void (*)(char *, unint64_t, uint64_t))v75)(v78, a2, v26);
      v30 = ((uint64_t (*)(char *, unint64_t, uint64_t))v29)(v27, a4, v26);
      v31 = a2;
      v32 = v80;
      v33 = HourWeather.date.getter(v30);
      v34 = v81;
      HourWeather.date.getter(v33);
      LOBYTE(v29) = static Date.< infix(_:_:)(v32, v34);
      v35 = *(void (**)(char *, uint64_t))(v76 + 8);
      v36 = v34;
      v37 = v82;
      v35(v36, v82);
      v35(v32, v37);
      v38 = *(void (**)(char *, uint64_t))(v83 + 8);
      v38(v27, v26);
      result = ((uint64_t (*)(char *, uint64_t))v38)(v28, v26);
      if ((v29 & 1) != 0)
      {
        v17 = v77;
        a2 = v31 + v77;
        v39 = v84;
        if (v84 < v31 || v84 >= a2)
        {
          result = swift_arrayInitWithTakeFrontToBack(v84, v31, 1, v86);
        }
        else if (v84 != v31)
        {
          result = swift_arrayInitWithTakeBackToFront(v84);
        }
      }
      else
      {
        v17 = v77;
        v39 = v84;
        if (v84 < a4 || v84 >= a4 + v77)
        {
          result = swift_arrayInitWithTakeFrontToBack(v84, a4, 1, v86);
        }
        else if (v84 != a4)
        {
          result = swift_arrayInitWithTakeBackToFront(v84);
        }
        a2 = v31;
        a4 += v17;
      }
      v24 = (char *)v74;
      a1 = v39 + v17;
    }
    while (a4 < v74 && a2 < v85);
  }
  a2 = a1;
LABEL_69:
  v67 = &v24[-a4];
  if (v17 != -1 || v67 != (char *)0x8000000000000000)
  {
    sub_1000704FC(a4, (uint64_t)v67 / v17, a2);
    return 1;
  }
LABEL_77:
  __break(1u);
  return result;
}

uint64_t sub_1000BDA1C()
{
  return sub_1000BB3C8() & 1;
}

uint64_t sub_1000BDA38(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BB468(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t, uint64_t))&static Date.> infix(_:_:)) & 1;
}

ValueMetadata *type metadata accessor for HourlyForecastViewModelFactory()
{
  return &type metadata for HourlyForecastViewModelFactory;
}

uint64_t sub_1000BDA6C(uint64_t a1)
{
  return sub_1000BDA38(a1) & 1;
}

uint64_t sub_1000BDA84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000BDABC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

_QWORD *sub_1000BDAC4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t EnumCaseMultiPayload;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, char *, uint64_t);
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  int *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  __int128 v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  int *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  void (*v192)(char *, char *, uint64_t);
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  int *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  _BOOL8 v253;
  uint64_t v255;
  void (*v256)(char *, char *, uint64_t);
  void (*v257)(char *, char *, uint64_t);
  uint64_t v258;
  int *v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  void (*v263)(char *, char *, uint64_t);
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  char *v267;
  int *v268;
  _QWORD *v269;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = a3[5];
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = sub_100005D40(&qword_1001C0290);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = v16;
      v21 = v18;
      v22 = 1;
    }
    else
    {
      v23 = *v17;
      *v16 = *v17;
      swift_retain(v23);
      v20 = v16;
      v21 = v18;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    v24 = a3[6];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = *(_QWORD *)v26;
    v28 = v26[8];
    sub_10001961C(*(_QWORD *)v26, v28);
    *(_QWORD *)v25 = v27;
    v25[8] = v28;
    v29 = a3[7];
    v30 = (_QWORD *)((char *)a1 + v29);
    v31 = (_QWORD *)((char *)a2 + v29);
    v32 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
      v34 = 1;
    }
    else
    {
      v35 = *v31;
      *v30 = *v31;
      swift_retain(v35);
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v32, v34);
    v268 = a3;
    v36 = a3[8];
    v265 = a1;
    v37 = (char *)a1 + v36;
    v269 = a2;
    v38 = (char *)a2 + v36;
    v264 = type metadata accessor for Date(0);
    v263 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v264 - 8) + 16);
    v263(v37, v38, v264);
    v39 = type metadata accessor for ForecastEntry(0);
    v40 = *(int *)(v39 + 20);
    v41 = &v37[v40];
    v42 = &v38[v40];
    v43 = type metadata accessor for TimelineEntryRelevance(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v42, 1, v43))
    {
      v44 = sub_100005D40(&qword_1001BFA20);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v41, 0, 1, v43);
    }
    v266 = v39;
    v45 = *(int *)(v39 + 24);
    v46 = &v37[v45];
    v47 = &v38[v45];
    v48 = *(_QWORD *)&v38[v45 + 8];
    *(_QWORD *)v46 = *(_QWORD *)&v38[v45];
    *((_QWORD *)v46 + 1) = v48;
    v49 = *(_QWORD *)&v38[v45 + 24];
    *((_QWORD *)v46 + 2) = *(_QWORD *)&v38[v45 + 16];
    *((_QWORD *)v46 + 3) = v49;
    v50 = *(_QWORD *)&v38[v45 + 40];
    *((_QWORD *)v46 + 4) = *(_QWORD *)&v38[v45 + 32];
    *((_QWORD *)v46 + 5) = v50;
    *((_DWORD *)v46 + 12) = *(_DWORD *)&v38[v45 + 48];
    v51 = type metadata accessor for WidgetContext(0);
    v52 = *(int *)(v51 + 40);
    v53 = &v46[v52];
    v54 = &v47[v52];
    v55 = type metadata accessor for URL(0);
    v56 = v48;
    v57 = v55;
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v50);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v54, 1, v57))
    {
      v58 = sub_100005D40(&qword_1001BFA28);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v53, v54, v57);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v53, 0, 1, v57);
    }
    v59 = *(int *)(v51 + 44);
    v60 = &v46[v59];
    v61 = &v47[v59];
    v62 = *(_QWORD *)v61;
    *(_QWORD *)v60 = *(_QWORD *)v61;
    v60[8] = v61[8];
    v63 = *(int *)(v266 + 28);
    v64 = &v37[v63];
    v65 = &v38[v63];
    v66 = type metadata accessor for ForecastEntry.Model(0);
    swift_bridgeObjectRetain(v62);
    if (swift_getEnumCaseMultiPayload(v65, v66) == 1)
    {
      v67 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v65, v67);
      v69 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v94 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v64, v65, v94);
        v13 = v265;
      }
      else
      {
        v261 = v67;
        v262 = v66;
        v267 = v64;
        v260 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v70 = type metadata accessor for UUID(0);
          v71 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16);
          v71(v64, v65, v70);
          v72 = type metadata accessor for InstantWeatherViewModel(0);
          v73 = *(int *)(v72 + 20);
          v74 = &v64[v73];
          v75 = &v65[v73];
          v76 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
          v77 = *(int *)(v72 + 24);
          v78 = &v64[v77];
          v79 = &v65[v77];
          v257 = v71;
          v71(&v64[v77], &v65[v77], v70);
          v80 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v263(&v78[v80[5]], &v79[v80[5]], v264);
          v263(&v78[v80[6]], &v79[v80[6]], v264);
          v81 = v80[7];
          v82 = &v78[v81];
          v83 = &v79[v81];
          v84 = sub_100005D40(&qword_1001BF090);
          v85 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16);
          v85(v82, v83, v84);
          v85(&v78[v80[8]], &v79[v80[8]], v84);
          v86 = v80[9];
          v87 = &v78[v86];
          v88 = &v79[v86];
          v89 = *((_QWORD *)v88 + 1);
          *(_QWORD *)v87 = *(_QWORD *)v88;
          *((_QWORD *)v87 + 1) = v89;
          v90 = v80[10];
          v91 = &v78[v90];
          v92 = &v79[v90];
          swift_bridgeObjectRetain(v89);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v92, 1, v84))
          {
            v93 = sub_100005D40(&qword_1001BF098);
            memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
          }
          else
          {
            v85(v91, v92, v84);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v91, 0, 1, v84);
          }
          v119 = v80[11];
          v120 = &v78[v119];
          v121 = &v79[v119];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v79[v119], 1, v84))
          {
            v122 = sub_100005D40(&qword_1001BF098);
            memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
          }
          else
          {
            v85(v120, v121, v84);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v120, 0, 1, v84);
          }
          v123 = v80[12];
          v124 = &v78[v123];
          v125 = &v79[v123];
          v257(&v78[v123], &v79[v123], v70);
          v126 = (int *)type metadata accessor for ConditionViewModel(0);
          v127 = v126[5];
          v128 = &v124[v127];
          v129 = &v125[v127];
          v130 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(v128, v129, v130);
          v131 = v126[6];
          v132 = &v124[v131];
          v133 = &v125[v131];
          v134 = *((_QWORD *)v133 + 1);
          *(_QWORD *)v132 = *(_QWORD *)v133;
          *((_QWORD *)v132 + 1) = v134;
          v135 = v126[7];
          v136 = &v124[v135];
          v137 = &v125[v135];
          v138 = *((_QWORD *)v137 + 1);
          *(_QWORD *)v136 = *(_QWORD *)v137;
          *((_QWORD *)v136 + 1) = v138;
          v124[v126[8]] = v125[v126[8]];
          v124[v126[9]] = v125[v126[9]];
          v124[v126[10]] = v125[v126[10]];
          *(_QWORD *)&v78[v80[13]] = *(_QWORD *)&v79[v80[13]];
          v139 = v80[14];
          v140 = &v78[v139];
          v141 = &v79[v139];
          v142 = type metadata accessor for CloudAltitudeKind(0);
          v143 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 16);
          swift_bridgeObjectRetain(v134);
          swift_bridgeObjectRetain(v138);
          v143(v140, v141, v142);
          v144 = v80[15];
          v145 = &v78[v144];
          v146 = &v79[v144];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v79[v144], 1, v264))
          {
            v147 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
          }
          else
          {
            v263(v145, v146, v264);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v145, 0, 1, v264);
          }
          v13 = v265;
          v148 = v80[16];
          v149 = &v78[v148];
          v150 = &v79[v148];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v79[v148], 1, v264))
          {
            v151 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
          }
          else
          {
            v263(v149, v150, v264);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v149, 0, 1, v264);
          }
          v152 = v80[17];
          v153 = &v78[v152];
          v154 = &v79[v152];
          v155 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v153, v154, v155);
          v156 = v80[18];
          v157 = &v78[v156];
          v158 = &v79[v156];
          v159 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 16))(v157, v158, v159);
          *(_QWORD *)&v78[v80[19]] = *(_QWORD *)&v79[v80[19]];
          v160 = v80[20];
          v161 = &v78[v160];
          v162 = &v79[v160];
          v163 = *((_QWORD *)v162 + 1);
          if (v163)
          {
            *(_QWORD *)v161 = *(_QWORD *)v162;
            *((_QWORD *)v161 + 1) = v163;
            v164 = *((_QWORD *)v162 + 2);
            v165 = *((_QWORD *)v162 + 3);
            v166 = v162[32];
            swift_bridgeObjectRetain(v163);
            sub_100006E58(v164, v165, v166);
            *((_QWORD *)v161 + 2) = v164;
            *((_QWORD *)v161 + 3) = v165;
            v161[32] = v166;
          }
          else
          {
            v167 = *((_OWORD *)v162 + 1);
            *(_OWORD *)v161 = *(_OWORD *)v162;
            *((_OWORD *)v161 + 1) = v167;
            v161[32] = v162[32];
          }
          v64 = v267;
          v67 = v261;
          v66 = v262;
        }
        else
        {
          v255 = v57;
          v95 = type metadata accessor for UUID(0);
          v96 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16);
          v96(v64, v65, v95);
          v97 = type metadata accessor for AggregateWeatherViewModel(0);
          v98 = *(int *)(v97 + 20);
          v99 = &v64[v98];
          v100 = &v65[v98];
          v101 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v99, v100, v101);
          v258 = v95;
          v259 = (int *)v97;
          v102 = *(int *)(v97 + 24);
          v103 = &v64[v102];
          v104 = &v65[v102];
          v256 = v96;
          v96(v103, &v65[v102], v95);
          v105 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v263(&v103[v105[5]], &v104[v105[5]], v264);
          v263(&v103[v105[6]], &v104[v105[6]], v264);
          v106 = v105[7];
          v107 = &v103[v106];
          v108 = &v104[v106];
          v109 = sub_100005D40(&qword_1001BF090);
          v110 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 16);
          v110(v107, v108, v109);
          v110(&v103[v105[8]], &v104[v105[8]], v109);
          v111 = v105[9];
          v112 = &v103[v111];
          v113 = &v104[v111];
          v114 = *((_QWORD *)v113 + 1);
          *(_QWORD *)v112 = *(_QWORD *)v113;
          *((_QWORD *)v112 + 1) = v114;
          v115 = v105[10];
          v116 = &v103[v115];
          v117 = &v104[v115];
          swift_bridgeObjectRetain(v114);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v117, 1, v109))
          {
            v118 = sub_100005D40(&qword_1001BF098);
            memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
          }
          else
          {
            v110(v116, v117, v109);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v116, 0, 1, v109);
          }
          v168 = v105[11];
          v169 = &v103[v168];
          v170 = &v104[v168];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v104[v168], 1, v109))
          {
            v171 = sub_100005D40(&qword_1001BF098);
            memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
          }
          else
          {
            v110(v169, v170, v109);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v169, 0, 1, v109);
          }
          v172 = v105[12];
          v173 = &v103[v172];
          v174 = &v104[v172];
          v256(&v103[v172], &v104[v172], v258);
          v175 = (int *)type metadata accessor for ConditionViewModel(0);
          v176 = v175[5];
          v177 = &v173[v176];
          v178 = &v174[v176];
          v179 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v179 - 8) + 16))(v177, v178, v179);
          v180 = v175[6];
          v181 = &v173[v180];
          v182 = &v174[v180];
          v183 = *((_QWORD *)v182 + 1);
          *(_QWORD *)v181 = *(_QWORD *)v182;
          *((_QWORD *)v181 + 1) = v183;
          v184 = v175[7];
          v185 = &v173[v184];
          v186 = &v174[v184];
          v187 = *((_QWORD *)v186 + 1);
          *(_QWORD *)v185 = *(_QWORD *)v186;
          *((_QWORD *)v185 + 1) = v187;
          v173[v175[8]] = v174[v175[8]];
          v173[v175[9]] = v174[v175[9]];
          v173[v175[10]] = v174[v175[10]];
          *(_QWORD *)&v103[v105[13]] = *(_QWORD *)&v104[v105[13]];
          v188 = v105[14];
          v189 = &v103[v188];
          v190 = &v104[v188];
          v191 = type metadata accessor for CloudAltitudeKind(0);
          v192 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v191 - 8) + 16);
          swift_bridgeObjectRetain(v183);
          swift_bridgeObjectRetain(v187);
          v192(v189, v190, v191);
          v193 = v105[15];
          v194 = &v103[v193];
          v195 = &v104[v193];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v104[v193], 1, v264))
          {
            v196 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
          }
          else
          {
            v263(v194, v195, v264);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v194, 0, 1, v264);
          }
          v197 = v105[16];
          v198 = &v103[v197];
          v199 = &v104[v197];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v104[v197], 1, v264))
          {
            v200 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
          }
          else
          {
            v263(v198, v199, v264);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v198, 0, 1, v264);
          }
          v201 = v105[17];
          v202 = &v103[v201];
          v203 = &v104[v201];
          v204 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v204 - 8) + 16))(v202, v203, v204);
          v205 = v105[18];
          v206 = &v103[v205];
          v207 = &v104[v205];
          v208 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v208 - 8) + 16))(v206, v207, v208);
          *(_QWORD *)&v103[v105[19]] = *(_QWORD *)&v104[v105[19]];
          v209 = v105[20];
          v210 = &v103[v209];
          v211 = &v104[v209];
          v212 = *((_QWORD *)v211 + 1);
          if (v212)
          {
            *(_QWORD *)v210 = *(_QWORD *)v211;
            *((_QWORD *)v210 + 1) = v212;
            v213 = *((_QWORD *)v211 + 2);
            v214 = *((_QWORD *)v211 + 3);
            v215 = v211[32];
            swift_bridgeObjectRetain(v212);
            sub_100006E58(v213, v214, v215);
            *((_QWORD *)v210 + 2) = v213;
            *((_QWORD *)v210 + 3) = v214;
            v210[32] = v215;
          }
          else
          {
            v216 = *((_OWORD *)v211 + 1);
            *(_OWORD *)v210 = *(_OWORD *)v211;
            *((_OWORD *)v210 + 1) = v216;
            v210[32] = v211[32];
          }
          v64 = v267;
          v217 = v259[7];
          v218 = *(_QWORD *)&v65[v217];
          *(_QWORD *)&v267[v217] = v218;
          v219 = v259[8];
          v220 = *(_QWORD *)&v65[v219];
          *(_QWORD *)&v267[v219] = v220;
          v221 = v259[9];
          v222 = &v267[v221];
          v223 = &v65[v221];
          v224 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v218);
          swift_bridgeObjectRetain(v220);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v223, 1, (uint64_t)v224))
          {
            v225 = sub_100005D40(&qword_1001BFA30);
            memcpy(v222, v223, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
          }
          else
          {
            v256(v222, v223, v258);
            v263(&v222[v224[5]], &v223[v224[5]], v264);
            *(_QWORD *)&v222[v224[6]] = *(_QWORD *)&v223[v224[6]];
            v226 = v224[7];
            v227 = &v222[v226];
            v228 = &v223[v226];
            v229 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v229 - 8) + 16))(v227, v228, v229);
            v230 = v224[8];
            v231 = &v222[v230];
            v232 = &v223[v230];
            v233 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v233 - 8) + 16))(v231, v232, v233);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v222, 0, 1, (uint64_t)v224);
          }
          v67 = v261;
          v234 = v259[10];
          v235 = &v267[v234];
          v236 = &v65[v234];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v236, 1, HourPrecipitationChartViewModel))
          {
            v238 = sub_100005D40(&qword_1001BFA38);
            memcpy(v235, v236, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v235, v236, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v235, 0, 1, HourPrecipitationChartViewModel);
          }
          v239 = v259[11];
          v240 = *(_QWORD *)&v65[v239];
          *(_QWORD *)&v267[v239] = v240;
          v241 = v259[12];
          v242 = &v267[v241];
          v243 = &v65[v241];
          *(_QWORD *)v242 = *(_QWORD *)v243;
          *((_WORD *)v242 + 4) = *((_WORD *)v243 + 4);
          v244 = v259[13];
          v245 = &v267[v244];
          v246 = &v65[v244];
          swift_bridgeObjectRetain(v240);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v246, 1, v255))
          {
            v247 = sub_100005D40(&qword_1001BFA28);
            memcpy(v245, v246, *(_QWORD *)(*(_QWORD *)(v247 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v255 - 8) + 16))(v245, v246, v255);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v245, 0, 1, v255);
          }
          v248 = v259[14];
          v249 = &v267[v248];
          v250 = &v65[v248];
          v251 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v250, 1, v251))
          {
            v252 = sub_100005D40(&qword_1001BFA40);
            memcpy(v249, v250, *(_QWORD *)(*(_QWORD *)(v252 - 8) + 64));
          }
          else
          {
            v253 = swift_getEnumCaseMultiPayload(v250, v251) == 1;
            v263(v249, v250, v264);
            swift_storeEnumTagMultiPayload(v249, v251, v253);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v249, 0, 1, v251);
          }
          v13 = v265;
          v66 = v262;
        }
        v69 = v260;
      }
      swift_storeEnumTagMultiPayload(v64, v67, v69);
      swift_storeEnumTagMultiPayload(v64, v66, 1);
    }
    else
    {
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      v13 = v265;
    }
    *((_BYTE *)v13 + v268[9]) = *((_BYTE *)v269 + v268[9]);
  }
  return v13;
}

uint64_t sub_1000BEB3C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  int *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  int *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  void (*v91)(char *, uint64_t);

  v4 = sub_100005D40(&qword_1001BFA18);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_100005D40(&qword_1001C0290);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_100019A78(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  v9 = (_QWORD *)((char *)a1 + a2[7]);
  v10 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (char *)a1 + a2[8];
  v13 = type metadata accessor for Date(0);
  v91 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v91(v12, v13);
  v14 = (int *)type metadata accessor for ForecastEntry(0);
  v15 = (uint64_t)&v12[v14[5]];
  v16 = type metadata accessor for TimelineEntryRelevance(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v15, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = &v12[v14[6]];
  swift_bridgeObjectRelease(*((_QWORD *)v17 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v17 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v17 + 5));
  v18 = type metadata accessor for WidgetContext(0);
  v19 = (uint64_t)&v17[*(int *)(v18 + 40)];
  v20 = type metadata accessor for URL(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v19, 1, v20))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  swift_bridgeObjectRelease(*(_QWORD *)&v17[*(int *)(v18 + 44)]);
  v21 = &v12[v14[7]];
  v22 = type metadata accessor for ForecastEntry.Model(0);
  result = swift_getEnumCaseMultiPayload(v21, v22);
  if ((_DWORD)result == 1)
  {
    v24 = type metadata accessor for WeatherDataViewModel(0);
    result = swift_getEnumCaseMultiPayload(v21, v24);
    switch((_DWORD)result)
    {
      case 2:
        v63 = type metadata accessor for SunriseSunsetViewModel(0);
        v64 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 8);
        v62 = (uint64_t)v21;
        return v64(v62, v63);
      case 1:
        v65 = type metadata accessor for UUID(0);
        v66 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v65 - 8) + 8);
        v66(v21, v65);
        v67 = type metadata accessor for InstantWeatherViewModel(0);
        v68 = &v21[*(int *)(v67 + 20)];
        v69 = type metadata accessor for Location(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v68, v69);
        v70 = &v21[*(int *)(v67 + 24)];
        v66(v70, v65);
        v71 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v91(&v70[v71[5]], v13);
        v91(&v70[v71[6]], v13);
        v72 = &v70[v71[7]];
        v73 = sub_100005D40(&qword_1001BF090);
        v74 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v73 - 8) + 8);
        v74(v72, v73);
        v74(&v70[v71[8]], v73);
        swift_bridgeObjectRelease(*(_QWORD *)&v70[v71[9] + 8]);
        v75 = (uint64_t)&v70[v71[10]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v75, 1, v73))
          v74((char *)v75, v73);
        v76 = (uint64_t)&v70[v71[11]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v76, 1, v73))
          v74((char *)v76, v73);
        v77 = &v70[v71[12]];
        v66(v77, v65);
        v78 = (int *)type metadata accessor for ConditionViewModel(0);
        v79 = &v77[v78[5]];
        v80 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v79, v80);
        swift_bridgeObjectRelease(*(_QWORD *)&v77[v78[6] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v77[v78[7] + 8]);
        v81 = &v70[v71[14]];
        v82 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v82 - 8) + 8))(v81, v82);
        v83 = (uint64_t)&v70[v71[15]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v83, 1, v13))
          v91((char *)v83, v13);
        v84 = (uint64_t)&v70[v71[16]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v84, 1, v13))
          v91((char *)v84, v13);
        v85 = &v70[v71[17]];
        v86 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v86 - 8) + 8))(v85, v86);
        v87 = &v70[v71[18]];
        v88 = type metadata accessor for Wind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v88 - 8) + 8))(v87, v88);
        v89 = &v70[v71[20]];
        result = *((_QWORD *)v89 + 1);
        if (result)
        {
          swift_bridgeObjectRelease(result);
          return sub_100007458(*((_QWORD *)v89 + 2), *((_QWORD *)v89 + 3), v89[32]);
        }
        break;
      case 0:
        v25 = type metadata accessor for UUID(0);
        v26 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8);
        v26(v21, v25);
        v27 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        v28 = &v21[v27[5]];
        v29 = type metadata accessor for Location(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
        v30 = &v21[v27[6]];
        v90 = v26;
        v26(v30, v25);
        v31 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v91(&v30[v31[5]], v13);
        v91(&v30[v31[6]], v13);
        v32 = &v30[v31[7]];
        v33 = sub_100005D40(&qword_1001BF090);
        v34 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8);
        v34(v32, v33);
        v34(&v30[v31[8]], v33);
        swift_bridgeObjectRelease(*(_QWORD *)&v30[v31[9] + 8]);
        v35 = (uint64_t)&v30[v31[10]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v35, 1, v33))
          v34((char *)v35, v33);
        v36 = (uint64_t)&v30[v31[11]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v36, 1, v33))
          v34((char *)v36, v33);
        v37 = &v30[v31[12]];
        v90(v37, v25);
        v38 = (int *)type metadata accessor for ConditionViewModel(0);
        v39 = &v37[v38[5]];
        v40 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
        swift_bridgeObjectRelease(*(_QWORD *)&v37[v38[6] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v37[v38[7] + 8]);
        v41 = &v30[v31[14]];
        v42 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
        v43 = (uint64_t)&v30[v31[15]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v43, 1, v13))
          v91((char *)v43, v13);
        v44 = (uint64_t)&v30[v31[16]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v44, 1, v13))
          v91((char *)v44, v13);
        v45 = &v30[v31[17]];
        v46 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v45, v46);
        v47 = &v30[v31[18]];
        v48 = type metadata accessor for Wind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v47, v48);
        v49 = &v30[v31[20]];
        v50 = *((_QWORD *)v49 + 1);
        if (v50)
        {
          swift_bridgeObjectRelease(v50);
          sub_100007458(*((_QWORD *)v49 + 2), *((_QWORD *)v49 + 3), v49[32]);
        }
        swift_bridgeObjectRelease(*(_QWORD *)&v21[v27[7]]);
        swift_bridgeObjectRelease(*(_QWORD *)&v21[v27[8]]);
        v51 = (uint64_t)&v21[v27[9]];
        v52 = (int *)type metadata accessor for AirQualityViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v51, 1, (uint64_t)v52))
        {
          v90((char *)v51, v25);
          v91((char *)(v51 + v52[5]), v13);
          v53 = v51 + v52[7];
          v54 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v53, v54);
          v55 = v51 + v52[8];
          v56 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v55, v56);
        }
        v57 = (uint64_t)&v21[v27[10]];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v57, 1, HourPrecipitationChartViewModel))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v57, HourPrecipitationChartViewModel);
        swift_bridgeObjectRelease(*(_QWORD *)&v21[v27[11]]);
        v59 = (uint64_t)&v21[v27[13]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v59, 1, v20))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v59, v20);
        v60 = (uint64_t)&v21[v27[14]];
        v61 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v60, 1, v61);
        if (!(_DWORD)result)
        {
          v62 = v60;
          v63 = v13;
          v64 = (uint64_t (*)(uint64_t, uint64_t))v91;
          return v64(v62, v63);
        }
        break;
    }
  }
  return result;
}

_QWORD *sub_1000BF460(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t EnumCaseMultiPayload;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  int *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  void (*v142)(char *, char *, uint64_t);
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  __int128 v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  int *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  void (*v191)(char *, char *, uint64_t);
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  int *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  _BOOL8 v252;
  uint64_t v254;
  void (*v255)(char *, char *, uint64_t);
  uint64_t v256;
  int *v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void (*v262)(char *, char *, uint64_t);
  _QWORD *v263;
  _QWORD *v264;
  uint64_t v265;
  char *v266;
  int *v267;

  v6 = sub_100005D40(&qword_1001BFA18);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_100005D40(&qword_1001C0290);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_10001961C(*(_QWORD *)v23, v25);
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  v26 = a3[7];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v29 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
    v31 = 1;
  }
  else
  {
    v32 = *v28;
    *v27 = *v28;
    swift_retain(v32);
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v29, v31);
  v33 = a3[8];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v261 = type metadata accessor for Date(0);
  v262 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v261 - 8) + 16);
  v262(v34, v35, v261);
  v36 = type metadata accessor for ForecastEntry(0);
  v37 = *(int *)(v36 + 20);
  v38 = &v34[v37];
  v39 = &v35[v37];
  v40 = type metadata accessor for TimelineEntryRelevance(0);
  v263 = a2;
  v264 = a1;
  v267 = a3;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v39, 1, v40))
  {
    v41 = sub_100005D40(&qword_1001BFA20);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v38, 0, 1, v40);
  }
  v265 = v36;
  v42 = *(int *)(v36 + 24);
  v43 = &v34[v42];
  v44 = &v35[v42];
  v45 = *(_QWORD *)&v35[v42 + 8];
  *(_QWORD *)v43 = *(_QWORD *)&v35[v42];
  *((_QWORD *)v43 + 1) = v45;
  v46 = *(_QWORD *)&v35[v42 + 24];
  *((_QWORD *)v43 + 2) = *(_QWORD *)&v35[v42 + 16];
  *((_QWORD *)v43 + 3) = v46;
  v47 = *(_QWORD *)&v35[v42 + 40];
  *((_QWORD *)v43 + 4) = *(_QWORD *)&v35[v42 + 32];
  *((_QWORD *)v43 + 5) = v47;
  *((_DWORD *)v43 + 12) = *(_DWORD *)&v35[v42 + 48];
  v48 = type metadata accessor for WidgetContext(0);
  v49 = *(int *)(v48 + 40);
  v50 = &v43[v49];
  v51 = &v44[v49];
  v52 = type metadata accessor for URL(0);
  v53 = v45;
  v54 = v52;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v47);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v51, 1, v54))
  {
    v55 = sub_100005D40(&qword_1001BFA28);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v50, v51, v54);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v50, 0, 1, v54);
  }
  v56 = *(int *)(v48 + 44);
  v57 = &v43[v56];
  v58 = &v44[v56];
  v59 = *(_QWORD *)v58;
  *(_QWORD *)v57 = *(_QWORD *)v58;
  v57[8] = v58[8];
  v60 = *(int *)(v265 + 28);
  v61 = &v34[v60];
  v62 = &v35[v60];
  v63 = type metadata accessor for ForecastEntry.Model(0);
  swift_bridgeObjectRetain(v59);
  if (swift_getEnumCaseMultiPayload(v62, v63) == 1)
  {
    v64 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v62, v64);
    v66 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v93 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(v61, v62, v93);
      v92 = v263;
      v91 = v264;
    }
    else
    {
      v259 = v64;
      v260 = v63;
      v266 = v61;
      v258 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v67 = type metadata accessor for UUID(0);
        v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16);
        v68(v61, v62, v67);
        v69 = type metadata accessor for InstantWeatherViewModel(0);
        v70 = *(int *)(v69 + 20);
        v71 = &v61[v70];
        v72 = &v62[v70];
        v73 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
        v74 = *(int *)(v69 + 24);
        v75 = &v61[v74];
        v76 = &v62[v74];
        v68(&v61[v74], &v62[v74], v67);
        v77 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v262(&v75[v77[5]], &v76[v77[5]], v261);
        v262(&v75[v77[6]], &v76[v77[6]], v261);
        v78 = v77[7];
        v79 = &v75[v78];
        v80 = &v76[v78];
        v81 = sub_100005D40(&qword_1001BF090);
        v82 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16);
        v82(v79, v80, v81);
        v82(&v75[v77[8]], &v76[v77[8]], v81);
        v83 = v77[9];
        v84 = &v75[v83];
        v85 = &v76[v83];
        v86 = *((_QWORD *)v85 + 1);
        *(_QWORD *)v84 = *(_QWORD *)v85;
        *((_QWORD *)v84 + 1) = v86;
        v87 = v77[10];
        v88 = &v75[v87];
        v89 = &v76[v87];
        swift_bridgeObjectRetain(v86);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v89, 1, v81))
        {
          v90 = sub_100005D40(&qword_1001BF098);
          memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
        }
        else
        {
          v82(v88, v89, v81);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v88, 0, 1, v81);
        }
        v118 = v77[11];
        v119 = &v75[v118];
        v120 = &v76[v118];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v76[v118], 1, v81))
        {
          v121 = sub_100005D40(&qword_1001BF098);
          memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
        }
        else
        {
          v82(v119, v120, v81);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v119, 0, 1, v81);
        }
        v122 = v77[12];
        v123 = &v75[v122];
        v124 = &v76[v122];
        v68(&v75[v122], &v76[v122], v67);
        v125 = (int *)type metadata accessor for ConditionViewModel(0);
        v126 = v125[5];
        v127 = &v123[v126];
        v128 = &v124[v126];
        v129 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 16))(v127, v128, v129);
        v130 = v125[6];
        v131 = &v123[v130];
        v132 = &v124[v130];
        v133 = *((_QWORD *)v132 + 1);
        *(_QWORD *)v131 = *(_QWORD *)v132;
        *((_QWORD *)v131 + 1) = v133;
        v134 = v125[7];
        v135 = &v123[v134];
        v136 = &v124[v134];
        v137 = *((_QWORD *)v136 + 1);
        *(_QWORD *)v135 = *(_QWORD *)v136;
        *((_QWORD *)v135 + 1) = v137;
        v123[v125[8]] = v124[v125[8]];
        v123[v125[9]] = v124[v125[9]];
        v123[v125[10]] = v124[v125[10]];
        *(_QWORD *)&v75[v77[13]] = *(_QWORD *)&v76[v77[13]];
        v138 = v77[14];
        v139 = &v75[v138];
        v140 = &v76[v138];
        v141 = type metadata accessor for CloudAltitudeKind(0);
        v142 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 16);
        swift_bridgeObjectRetain(v133);
        swift_bridgeObjectRetain(v137);
        v142(v139, v140, v141);
        v143 = v77[15];
        v144 = &v75[v143];
        v145 = &v76[v143];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v76[v143], 1, v261))
        {
          v146 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
        }
        else
        {
          v262(v144, v145, v261);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v144, 0, 1, v261);
        }
        v92 = v263;
        v91 = v264;
        v147 = v77[16];
        v148 = &v75[v147];
        v149 = &v76[v147];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v76[v147], 1, v261))
        {
          v150 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
        }
        else
        {
          v262(v148, v149, v261);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v148, 0, 1, v261);
        }
        v151 = v77[17];
        v152 = &v75[v151];
        v153 = &v76[v151];
        v154 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v154 - 8) + 16))(v152, v153, v154);
        v155 = v77[18];
        v156 = &v75[v155];
        v157 = &v76[v155];
        v158 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v158 - 8) + 16))(v156, v157, v158);
        *(_QWORD *)&v75[v77[19]] = *(_QWORD *)&v76[v77[19]];
        v159 = v77[20];
        v160 = &v75[v159];
        v161 = &v76[v159];
        v162 = *((_QWORD *)v161 + 1);
        if (v162)
        {
          *(_QWORD *)v160 = *(_QWORD *)v161;
          *((_QWORD *)v160 + 1) = v162;
          v163 = *((_QWORD *)v161 + 2);
          v164 = *((_QWORD *)v161 + 3);
          v165 = v161[32];
          swift_bridgeObjectRetain(v162);
          sub_100006E58(v163, v164, v165);
          *((_QWORD *)v160 + 2) = v163;
          *((_QWORD *)v160 + 3) = v164;
          v160[32] = v165;
        }
        else
        {
          v166 = *((_OWORD *)v161 + 1);
          *(_OWORD *)v160 = *(_OWORD *)v161;
          *((_OWORD *)v160 + 1) = v166;
          v160[32] = v161[32];
        }
        v61 = v266;
        v63 = v260;
      }
      else
      {
        v254 = v54;
        v94 = type metadata accessor for UUID(0);
        v95 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16);
        v95(v61, v62, v94);
        v96 = type metadata accessor for AggregateWeatherViewModel(0);
        v97 = *(int *)(v96 + 20);
        v98 = &v61[v97];
        v99 = &v62[v97];
        v100 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 16))(v98, v99, v100);
        v256 = v94;
        v257 = (int *)v96;
        v101 = *(int *)(v96 + 24);
        v102 = &v61[v101];
        v103 = &v62[v101];
        v255 = v95;
        v95(v102, &v62[v101], v94);
        v104 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v262(&v102[v104[5]], &v103[v104[5]], v261);
        v262(&v102[v104[6]], &v103[v104[6]], v261);
        v105 = v104[7];
        v106 = &v102[v105];
        v107 = &v103[v105];
        v108 = sub_100005D40(&qword_1001BF090);
        v109 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 16);
        v109(v106, v107, v108);
        v109(&v102[v104[8]], &v103[v104[8]], v108);
        v110 = v104[9];
        v111 = &v102[v110];
        v112 = &v103[v110];
        v113 = *((_QWORD *)v112 + 1);
        *(_QWORD *)v111 = *(_QWORD *)v112;
        *((_QWORD *)v111 + 1) = v113;
        v114 = v104[10];
        v115 = &v102[v114];
        v116 = &v103[v114];
        swift_bridgeObjectRetain(v113);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v116, 1, v108))
        {
          v117 = sub_100005D40(&qword_1001BF098);
          memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
        }
        else
        {
          v109(v115, v116, v108);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v108);
        }
        v167 = v104[11];
        v168 = &v102[v167];
        v169 = &v103[v167];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v103[v167], 1, v108))
        {
          v170 = sub_100005D40(&qword_1001BF098);
          memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
        }
        else
        {
          v109(v168, v169, v108);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v168, 0, 1, v108);
        }
        v171 = v104[12];
        v172 = &v102[v171];
        v173 = &v103[v171];
        v255(&v102[v171], &v103[v171], v256);
        v174 = (int *)type metadata accessor for ConditionViewModel(0);
        v175 = v174[5];
        v176 = &v172[v175];
        v177 = &v173[v175];
        v178 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v178 - 8) + 16))(v176, v177, v178);
        v179 = v174[6];
        v180 = &v172[v179];
        v181 = &v173[v179];
        v182 = *((_QWORD *)v181 + 1);
        *(_QWORD *)v180 = *(_QWORD *)v181;
        *((_QWORD *)v180 + 1) = v182;
        v183 = v174[7];
        v184 = &v172[v183];
        v185 = &v173[v183];
        v186 = *((_QWORD *)v185 + 1);
        *(_QWORD *)v184 = *(_QWORD *)v185;
        *((_QWORD *)v184 + 1) = v186;
        v172[v174[8]] = v173[v174[8]];
        v172[v174[9]] = v173[v174[9]];
        v172[v174[10]] = v173[v174[10]];
        *(_QWORD *)&v102[v104[13]] = *(_QWORD *)&v103[v104[13]];
        v187 = v104[14];
        v188 = &v102[v187];
        v189 = &v103[v187];
        v190 = type metadata accessor for CloudAltitudeKind(0);
        v191 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v190 - 8) + 16);
        swift_bridgeObjectRetain(v182);
        swift_bridgeObjectRetain(v186);
        v191(v188, v189, v190);
        v192 = v104[15];
        v193 = &v102[v192];
        v194 = &v103[v192];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v103[v192], 1, v261))
        {
          v195 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v193, v194, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
        }
        else
        {
          v262(v193, v194, v261);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v193, 0, 1, v261);
        }
        v196 = v104[16];
        v197 = &v102[v196];
        v198 = &v103[v196];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v103[v196], 1, v261))
        {
          v199 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v199 - 8) + 64));
        }
        else
        {
          v262(v197, v198, v261);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v197, 0, 1, v261);
        }
        v200 = v104[17];
        v201 = &v102[v200];
        v202 = &v103[v200];
        v203 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v203 - 8) + 16))(v201, v202, v203);
        v204 = v104[18];
        v205 = &v102[v204];
        v206 = &v103[v204];
        v207 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v207 - 8) + 16))(v205, v206, v207);
        *(_QWORD *)&v102[v104[19]] = *(_QWORD *)&v103[v104[19]];
        v208 = v104[20];
        v209 = &v102[v208];
        v210 = &v103[v208];
        v211 = *((_QWORD *)v210 + 1);
        if (v211)
        {
          *(_QWORD *)v209 = *(_QWORD *)v210;
          *((_QWORD *)v209 + 1) = v211;
          v212 = *((_QWORD *)v210 + 2);
          v213 = *((_QWORD *)v210 + 3);
          v214 = v210[32];
          swift_bridgeObjectRetain(v211);
          sub_100006E58(v212, v213, v214);
          *((_QWORD *)v209 + 2) = v212;
          *((_QWORD *)v209 + 3) = v213;
          v209[32] = v214;
        }
        else
        {
          v215 = *((_OWORD *)v210 + 1);
          *(_OWORD *)v209 = *(_OWORD *)v210;
          *((_OWORD *)v209 + 1) = v215;
          v209[32] = v210[32];
        }
        v61 = v266;
        v63 = v260;
        v216 = v257[7];
        v217 = *(_QWORD *)&v62[v216];
        *(_QWORD *)&v266[v216] = v217;
        v218 = v257[8];
        v219 = *(_QWORD *)&v62[v218];
        *(_QWORD *)&v266[v218] = v219;
        v220 = v257[9];
        v221 = &v266[v220];
        v222 = &v62[v220];
        v223 = (int *)type metadata accessor for AirQualityViewModel(0);
        swift_bridgeObjectRetain(v217);
        swift_bridgeObjectRetain(v219);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v222, 1, (uint64_t)v223))
        {
          v224 = sub_100005D40(&qword_1001BFA30);
          memcpy(v221, v222, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
        }
        else
        {
          v255(v221, v222, v256);
          v262(&v221[v223[5]], &v222[v223[5]], v261);
          *(_QWORD *)&v221[v223[6]] = *(_QWORD *)&v222[v223[6]];
          v225 = v223[7];
          v226 = &v221[v225];
          v227 = &v222[v225];
          v228 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v228 - 8) + 16))(v226, v227, v228);
          v229 = v223[8];
          v230 = &v221[v229];
          v231 = &v222[v229];
          v232 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v232 - 8) + 16))(v230, v231, v232);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v221, 0, 1, (uint64_t)v223);
        }
        v233 = v257[10];
        v234 = &v266[v233];
        v235 = &v62[v233];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v235, 1, HourPrecipitationChartViewModel))
        {
          v237 = sub_100005D40(&qword_1001BFA38);
          memcpy(v234, v235, *(_QWORD *)(*(_QWORD *)(v237 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v234, v235, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v234, 0, 1, HourPrecipitationChartViewModel);
        }
        v238 = v257[11];
        v239 = *(_QWORD *)&v62[v238];
        *(_QWORD *)&v266[v238] = v239;
        v240 = v257[12];
        v241 = &v266[v240];
        v242 = &v62[v240];
        *(_QWORD *)v241 = *(_QWORD *)v242;
        *((_WORD *)v241 + 4) = *((_WORD *)v242 + 4);
        v243 = v257[13];
        v244 = &v266[v243];
        v245 = &v62[v243];
        swift_bridgeObjectRetain(v239);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v245, 1, v254))
        {
          v246 = sub_100005D40(&qword_1001BFA28);
          memcpy(v244, v245, *(_QWORD *)(*(_QWORD *)(v246 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v254 - 8) + 16))(v244, v245, v254);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v244, 0, 1, v254);
        }
        v247 = v257[14];
        v248 = &v266[v247];
        v249 = &v62[v247];
        v250 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v249, 1, v250))
        {
          v251 = sub_100005D40(&qword_1001BFA40);
          memcpy(v248, v249, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
        }
        else
        {
          v252 = swift_getEnumCaseMultiPayload(v249, v250) == 1;
          v262(v248, v249, v261);
          swift_storeEnumTagMultiPayload(v248, v250, v252);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v248, 0, 1, v250);
        }
        v92 = v263;
        v91 = v264;
      }
      v64 = v259;
      v66 = v258;
    }
    swift_storeEnumTagMultiPayload(v61, v64, v66);
    swift_storeEnumTagMultiPayload(v61, v63, 1);
  }
  else
  {
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    v92 = v263;
    v91 = v264;
  }
  *((_BYTE *)v91 + v267[9]) = *((_BYTE *)v92 + v267[9]);
  return v91;
}

_QWORD *sub_1000C04A4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t EnumCaseMultiPayload;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  int *v89;
  void (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  int *v116;
  void (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  void (*v122)(char *, char *, uint64_t);
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  int *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  void (*v159)(char *, char *, uint64_t);
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  int *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  void (*v184)(char *, char *, uint64_t);
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  int *v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  _BOOL8 v268;
  uint64_t v270;
  void (*v271)(char *, char *, uint64_t);
  int *v272;
  char *v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  int *v279;
  uint64_t v280;
  void (*v281)(char *, char *, uint64_t);
  uint64_t v282;
  int *v283;
  _QWORD *v284;
  _QWORD *v285;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BFA18);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_100016904((uint64_t)a1 + v12, &qword_1001C0290);
    v15 = sub_100005D40(&qword_1001C0290);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_10001961C(*(_QWORD *)v23, v25);
  v26 = *(_QWORD *)v22;
  v27 = v22[8];
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  sub_100019A78(v26, v27);
  if (a1 != a2)
  {
    v28 = a3[7];
    v29 = (_QWORD *)((char *)a1 + v28);
    v30 = (_QWORD *)((char *)a2 + v28);
    sub_100016904((uint64_t)a1 + v28, &qword_1001BF0C8);
    v31 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = 1;
    }
    else
    {
      v34 = *v30;
      *v29 = *v30;
      swift_retain(v34);
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v31, v33);
  }
  v283 = a3;
  v35 = a3[8];
  v36 = (char *)a1 + v35;
  v285 = a2;
  v37 = (char *)a2 + v35;
  v282 = type metadata accessor for Date(0);
  v278 = *(_QWORD *)(v282 - 8);
  (*(void (**)(char *, char *, uint64_t))(v278 + 24))(v36, v37, v282);
  v38 = (int *)type metadata accessor for ForecastEntry(0);
  v39 = v38[5];
  v40 = &v36[v39];
  v41 = &v37[v39];
  v42 = type metadata accessor for TimelineEntryRelevance(0);
  v43 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v40, 1, v42);
  v44 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v41, 1, v42);
  v284 = a1;
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v40, 0, 1, v42);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  v45 = *(_QWORD *)(v42 - 8);
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v40, v42);
LABEL_19:
    v46 = sub_100005D40(&qword_1001BFA20);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v40, v41, v42);
LABEL_20:
  v47 = v38[6];
  v48 = &v36[v47];
  v49 = &v37[v47];
  *(_QWORD *)v48 = *(_QWORD *)&v37[v47];
  v50 = *(_QWORD *)&v37[v47 + 8];
  v51 = *(_QWORD *)&v36[v47 + 8];
  *((_QWORD *)v48 + 1) = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  *((_QWORD *)v48 + 2) = *((_QWORD *)v49 + 2);
  v52 = *((_QWORD *)v49 + 3);
  v53 = *((_QWORD *)v48 + 3);
  *((_QWORD *)v48 + 3) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  *((_QWORD *)v48 + 4) = *((_QWORD *)v49 + 4);
  v54 = *((_QWORD *)v49 + 5);
  v55 = *((_QWORD *)v48 + 5);
  *((_QWORD *)v48 + 5) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v48[48] = v49[48];
  v48[49] = v49[49];
  v48[50] = v49[50];
  v48[51] = v49[51];
  v56 = type metadata accessor for WidgetContext(0);
  v57 = *(int *)(v56 + 40);
  v58 = &v48[v57];
  v59 = &v49[v57];
  v60 = type metadata accessor for URL(0);
  v61 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v58, 1, v60);
  v62 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v59, 1, v60);
  v280 = v60;
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v60);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v63 = *(_QWORD *)(v60 - 8);
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v58, v60);
LABEL_25:
    v64 = sub_100005D40(&qword_1001BFA28);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 24))(v58, v59, v60);
LABEL_26:
  v65 = *(int *)(v56 + 44);
  v66 = &v48[v65];
  v67 = &v49[v65];
  v68 = *(_QWORD *)&v49[v65];
  v69 = *(_QWORD *)v66;
  *(_QWORD *)v66 = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRelease(v69);
  v66[8] = v67[8];
  v70 = v284;
  v71 = v285;
  if (v284 != v285)
  {
    v72 = v38[7];
    v73 = &v36[v72];
    v74 = &v37[v72];
    sub_100011894((uint64_t)&v36[v72], type metadata accessor for ForecastEntry.Model);
    v75 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v74, v75) == 1)
    {
      v76 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v74, v76);
      v78 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v104 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v73, v74, v104);
      }
      else
      {
        v276 = v75;
        v277 = v73;
        v275 = v76;
        v274 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v79 = type metadata accessor for UUID(0);
          v80 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16);
          v80(v73, v74, v79);
          v81 = type metadata accessor for InstantWeatherViewModel(0);
          v82 = *(int *)(v81 + 20);
          v83 = &v73[v82];
          v84 = &v74[v82];
          v85 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v83, v84, v85);
          v86 = *(int *)(v81 + 24);
          v87 = &v73[v86];
          v88 = &v74[v86];
          v80(&v73[v86], v88, v79);
          v89 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v90 = *(void (**)(char *, char *, uint64_t))(v278 + 16);
          v90(&v87[v89[5]], &v88[v89[5]], v282);
          v281 = v90;
          v90(&v87[v89[6]], &v88[v89[6]], v282);
          v91 = v89[7];
          v92 = &v87[v91];
          v93 = &v88[v91];
          v94 = sub_100005D40(&qword_1001BF090);
          v95 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16);
          v95(v92, v93, v94);
          v95(&v87[v89[8]], &v88[v89[8]], v94);
          v96 = v89[9];
          v97 = &v87[v96];
          v98 = &v88[v96];
          *(_QWORD *)v97 = *(_QWORD *)v98;
          v99 = *((_QWORD *)v98 + 1);
          *((_QWORD *)v97 + 1) = v99;
          v100 = v89[10];
          v101 = &v87[v100];
          v102 = &v88[v100];
          swift_bridgeObjectRetain(v99);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v102, 1, v94))
          {
            v103 = sub_100005D40(&qword_1001BF098);
            memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
          }
          else
          {
            v95(v101, v102, v94);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v101, 0, 1, v94);
          }
          v131 = v89[11];
          v132 = &v87[v131];
          v133 = &v88[v131];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v88[v131], 1, v94))
          {
            v134 = sub_100005D40(&qword_1001BF098);
            memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
          }
          else
          {
            v95(v132, v133, v94);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v132, 0, 1, v94);
          }
          v139 = v89[12];
          v140 = &v87[v139];
          v141 = &v88[v139];
          v80(&v87[v139], &v88[v139], v79);
          v142 = (int *)type metadata accessor for ConditionViewModel(0);
          v143 = v142[5];
          v144 = &v140[v143];
          v145 = &v141[v143];
          v146 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v146 - 8) + 16))(v144, v145, v146);
          v147 = v142[6];
          v148 = &v140[v147];
          v149 = &v141[v147];
          *(_QWORD *)v148 = *(_QWORD *)v149;
          v150 = *((_QWORD *)v149 + 1);
          *((_QWORD *)v148 + 1) = v150;
          v151 = v142[7];
          v152 = &v140[v151];
          v153 = &v141[v151];
          *(_QWORD *)v152 = *(_QWORD *)v153;
          v154 = *((_QWORD *)v153 + 1);
          *((_QWORD *)v152 + 1) = v154;
          v140[v142[8]] = v141[v142[8]];
          v140[v142[9]] = v141[v142[9]];
          v140[v142[10]] = v141[v142[10]];
          *(_QWORD *)&v87[v89[13]] = *(_QWORD *)&v88[v89[13]];
          v155 = v89[14];
          v156 = &v87[v155];
          v157 = &v88[v155];
          v158 = type metadata accessor for CloudAltitudeKind(0);
          v159 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v158 - 8) + 16);
          swift_bridgeObjectRetain(v150);
          swift_bridgeObjectRetain(v154);
          v159(v156, v157, v158);
          v160 = v89[15];
          v161 = &v87[v160];
          v162 = &v88[v160];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v88[v160], 1, v282))
          {
            v163 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
          }
          else
          {
            v281(v161, v162, v282);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v161, 0, 1, v282);
          }
          v71 = v285;
          v189 = v89[16];
          v190 = &v87[v189];
          v191 = &v88[v189];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v88[v189], 1, v282))
          {
            v192 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
          }
          else
          {
            v281(v190, v191, v282);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v190, 0, 1, v282);
          }
          v197 = v89[17];
          v198 = &v87[v197];
          v199 = &v88[v197];
          v200 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v200 - 8) + 16))(v198, v199, v200);
          v201 = v89[18];
          v202 = &v87[v201];
          v203 = &v88[v201];
          v204 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v204 - 8) + 16))(v202, v203, v204);
          *(_QWORD *)&v87[v89[19]] = *(_QWORD *)&v88[v89[19]];
          v205 = v89[20];
          v206 = &v87[v205];
          v207 = &v88[v205];
          if (*((_QWORD *)v207 + 1))
          {
            *(_QWORD *)v206 = *(_QWORD *)v207;
            v208 = *((_QWORD *)v207 + 1);
            *((_QWORD *)v206 + 1) = v208;
            v209 = *((_QWORD *)v207 + 2);
            v210 = *((_QWORD *)v207 + 3);
            v211 = v207[32];
            swift_bridgeObjectRetain(v208);
            sub_100006E58(v209, v210, v211);
            *((_QWORD *)v206 + 2) = v209;
            *((_QWORD *)v206 + 3) = v210;
            v206[32] = v211;
          }
          else
          {
            v227 = *(_OWORD *)v207;
            v228 = *((_OWORD *)v207 + 1);
            v206[32] = v207[32];
            *(_OWORD *)v206 = v227;
            *((_OWORD *)v206 + 1) = v228;
          }
          v75 = v276;
          v73 = v277;
          v76 = v275;
          v78 = 1;
        }
        else
        {
          v105 = type metadata accessor for UUID(0);
          v106 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 16);
          v106(v73, v74, v105);
          v107 = type metadata accessor for AggregateWeatherViewModel(0);
          v108 = *(int *)(v107 + 20);
          v109 = &v73[v108];
          v110 = &v74[v108];
          v111 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(v109, v110, v111);
          v112 = *(int *)(v107 + 24);
          v113 = v74;
          v114 = &v73[v112];
          v272 = (int *)v107;
          v273 = v113;
          v115 = &v113[v112];
          v271 = v106;
          v106(v114, &v113[v112], v105);
          v116 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v117 = *(void (**)(char *, char *, uint64_t))(v278 + 16);
          v117(&v114[v116[5]], &v115[v116[5]], v282);
          v117(&v114[v116[6]], &v115[v116[6]], v282);
          v118 = v116[7];
          v119 = &v114[v118];
          v120 = &v115[v118];
          v121 = sub_100005D40(&qword_1001BF090);
          v122 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 16);
          v122(v119, v120, v121);
          v122(&v114[v116[8]], &v115[v116[8]], v121);
          v123 = v116[9];
          v124 = &v114[v123];
          v125 = &v115[v123];
          *(_QWORD *)v124 = *(_QWORD *)v125;
          v126 = *((_QWORD *)v125 + 1);
          *((_QWORD *)v124 + 1) = v126;
          v279 = v116;
          v127 = v116[10];
          v128 = &v114[v127];
          v129 = &v115[v127];
          swift_bridgeObjectRetain(v126);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v129, 1, v121))
          {
            v130 = sub_100005D40(&qword_1001BF098);
            memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
          }
          else
          {
            v122(v128, v129, v121);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v128, 0, 1, v121);
          }
          v135 = v116[11];
          v136 = &v114[v135];
          v137 = &v115[v135];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v115[v135], 1, v121))
          {
            v138 = sub_100005D40(&qword_1001BF098);
            memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
          }
          else
          {
            v122(v136, v137, v121);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v136, 0, 1, v121);
          }
          v164 = v116[12];
          v165 = &v114[v164];
          v166 = &v115[v164];
          v270 = v105;
          v271(&v114[v164], &v115[v164], v105);
          v167 = (int *)type metadata accessor for ConditionViewModel(0);
          v168 = v167[5];
          v169 = &v165[v168];
          v170 = &v166[v168];
          v171 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v171 - 8) + 16))(v169, v170, v171);
          v172 = v167[6];
          v173 = &v165[v172];
          v174 = &v166[v172];
          *(_QWORD *)v173 = *(_QWORD *)v174;
          v175 = *((_QWORD *)v174 + 1);
          *((_QWORD *)v173 + 1) = v175;
          v176 = v167[7];
          v177 = &v165[v176];
          v178 = &v166[v176];
          *(_QWORD *)v177 = *(_QWORD *)v178;
          v179 = *((_QWORD *)v178 + 1);
          *((_QWORD *)v177 + 1) = v179;
          v165[v167[8]] = v166[v167[8]];
          v165[v167[9]] = v166[v167[9]];
          v165[v167[10]] = v166[v167[10]];
          *(_QWORD *)&v114[v279[13]] = *(_QWORD *)&v115[v279[13]];
          v180 = v279[14];
          v181 = &v114[v180];
          v182 = &v115[v180];
          v183 = type metadata accessor for CloudAltitudeKind(0);
          v184 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v183 - 8) + 16);
          swift_bridgeObjectRetain(v175);
          swift_bridgeObjectRetain(v179);
          v184(v181, v182, v183);
          v185 = v279[15];
          v186 = &v114[v185];
          v187 = &v115[v185];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v115[v185], 1, v282))
          {
            v188 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
          }
          else
          {
            v117(v186, v187, v282);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v186, 0, 1, v282);
          }
          v193 = v279[16];
          v194 = &v114[v193];
          v195 = &v115[v193];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v115[v193], 1, v282))
          {
            v196 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
          }
          else
          {
            v117(v194, v195, v282);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v194, 0, 1, v282);
          }
          v212 = v279[17];
          v213 = &v114[v212];
          v214 = &v115[v212];
          v215 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v215 - 8) + 16))(v213, v214, v215);
          v216 = v279[18];
          v217 = &v114[v216];
          v218 = &v115[v216];
          v219 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v219 - 8) + 16))(v217, v218, v219);
          *(_QWORD *)&v114[v279[19]] = *(_QWORD *)&v115[v279[19]];
          v220 = v279[20];
          v221 = &v114[v220];
          v222 = &v115[v220];
          if (*((_QWORD *)v222 + 1))
          {
            *(_QWORD *)v221 = *(_QWORD *)v222;
            v223 = *((_QWORD *)v222 + 1);
            *((_QWORD *)v221 + 1) = v223;
            v224 = *((_QWORD *)v222 + 2);
            v225 = *((_QWORD *)v222 + 3);
            v226 = v222[32];
            swift_bridgeObjectRetain(v223);
            sub_100006E58(v224, v225, v226);
            *((_QWORD *)v221 + 2) = v224;
            *((_QWORD *)v221 + 3) = v225;
            v221[32] = v226;
          }
          else
          {
            v229 = *(_OWORD *)v222;
            v230 = *((_OWORD *)v222 + 1);
            v221[32] = v222[32];
            *(_OWORD *)v221 = v229;
            *((_OWORD *)v221 + 1) = v230;
          }
          v73 = v277;
          v231 = v272[7];
          v232 = *(_QWORD *)&v273[v231];
          *(_QWORD *)&v277[v231] = v232;
          v233 = v272[8];
          v234 = *(_QWORD *)&v273[v233];
          *(_QWORD *)&v277[v233] = v234;
          v235 = v272[9];
          v236 = &v277[v235];
          v237 = &v273[v235];
          v238 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v232);
          swift_bridgeObjectRetain(v234);
          v75 = v276;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v237, 1, (uint64_t)v238))
          {
            v239 = sub_100005D40(&qword_1001BFA30);
            memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
          }
          else
          {
            v271(v236, v237, v270);
            v117(&v236[v238[5]], &v237[v238[5]], v282);
            *(_QWORD *)&v236[v238[6]] = *(_QWORD *)&v237[v238[6]];
            v240 = v238[7];
            v241 = &v236[v240];
            v242 = &v237[v240];
            v243 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v243 - 8) + 16))(v241, v242, v243);
            v244 = v238[8];
            v245 = &v236[v244];
            v246 = &v237[v244];
            v247 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v247 - 8) + 16))(v245, v246, v247);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v236, 0, 1, (uint64_t)v238);
          }
          v248 = v272[10];
          v249 = &v277[v248];
          v250 = &v273[v248];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v250, 1, HourPrecipitationChartViewModel))
          {
            v252 = sub_100005D40(&qword_1001BFA38);
            memcpy(v249, v250, *(_QWORD *)(*(_QWORD *)(v252 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v249, v250, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v249, 0, 1, HourPrecipitationChartViewModel);
          }
          v253 = v272[11];
          v254 = *(_QWORD *)&v273[v253];
          *(_QWORD *)&v277[v253] = v254;
          v255 = v272[12];
          v256 = &v277[v255];
          v257 = &v273[v255];
          v258 = *(_QWORD *)v257;
          *((_WORD *)v256 + 4) = *((_WORD *)v257 + 4);
          *(_QWORD *)v256 = v258;
          v259 = v272[13];
          v260 = &v277[v259];
          v261 = &v273[v259];
          swift_bridgeObjectRetain(v254);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v261, 1, v280))
          {
            v262 = sub_100005D40(&qword_1001BFA28);
            memcpy(v260, v261, *(_QWORD *)(*(_QWORD *)(v262 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v280 - 8) + 16))(v260, v261, v280);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v260, 0, 1, v280);
          }
          v263 = v272[14];
          v264 = &v277[v263];
          v265 = &v273[v263];
          v266 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v265, 1, v266))
          {
            v267 = sub_100005D40(&qword_1001BFA40);
            memcpy(v264, v265, *(_QWORD *)(*(_QWORD *)(v267 - 8) + 64));
          }
          else
          {
            v268 = swift_getEnumCaseMultiPayload(v265, v266) == 1;
            v117(v264, v265, v282);
            swift_storeEnumTagMultiPayload(v264, v266, v268);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v264, 0, 1, v266);
          }
          v76 = v275;
          v78 = v274;
          v70 = v284;
        }
      }
      swift_storeEnumTagMultiPayload(v73, v76, v78);
      swift_storeEnumTagMultiPayload(v73, v75, 1);
    }
    else
    {
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
  }
  *((_BYTE *)v70 + v283[9]) = *((_BYTE *)v71 + v283[9]);
  return v70;
}

char *sub_1000C1698(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  int *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  int *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  __int128 v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  int *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  __int128 v165;
  uint64_t v166;
  char *v167;
  char *v168;
  int *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  _BOOL8 v196;
  void (*v198)(char *, char *, uint64_t);
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  void (*v206)(char *, char *);
  uint64_t v207;
  char *v208;
  int *v209;

  v6 = sub_100005D40(&qword_1001BFA18);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100005D40(&qword_1001C0290);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = &a1[v14];
  v18 = &a2[v14];
  v19 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for Font.Context(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for Date(0);
  v206 = *(void (**)(char *, char *))(*(_QWORD *)(v24 - 8) + 32);
  v207 = v24;
  v206(v22, v23);
  v25 = (int *)type metadata accessor for ForecastEntry(0);
  v26 = v25[5];
  v27 = &v22[v26];
  v28 = &v23[v26];
  v29 = type metadata accessor for TimelineEntryRelevance(0);
  v208 = a1;
  v209 = a3;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v28, 1, v29))
  {
    v30 = sub_100005D40(&qword_1001BFA20);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v29);
  }
  v31 = v25[6];
  v32 = &v22[v31];
  v33 = &v23[v31];
  v34 = *(_OWORD *)&v23[v31 + 16];
  *(_OWORD *)v32 = *(_OWORD *)&v23[v31];
  *((_OWORD *)v32 + 1) = v34;
  *((_OWORD *)v32 + 2) = *(_OWORD *)&v23[v31 + 32];
  *((_DWORD *)v32 + 12) = *(_DWORD *)&v23[v31 + 48];
  v35 = type metadata accessor for WidgetContext(0);
  v36 = *(int *)(v35 + 40);
  v37 = &v32[v36];
  v38 = &v33[v36];
  v39 = type metadata accessor for URL(0);
  v205 = v39;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v38, 1, v39))
  {
    v40 = sub_100005D40(&qword_1001BFA28);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v37, 0, 1, v39);
  }
  v41 = *(int *)(v35 + 44);
  v42 = &v32[v41];
  v43 = &v33[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = v25[7];
  v45 = &v22[v44];
  v46 = &v23[v44];
  v47 = type metadata accessor for ForecastEntry.Model(0);
  if (swift_getEnumCaseMultiPayload(v46, v47) == 1)
  {
    v48 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v46, v48);
    v50 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v73 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v45, v46, v73);
      v72 = v209;
    }
    else
    {
      v203 = a2;
      v204 = v45;
      v201 = v48;
      v202 = v47;
      v200 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v51 = type metadata accessor for UUID(0);
        v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32);
        v52(v45, v46, v51);
        v53 = type metadata accessor for InstantWeatherViewModel(0);
        v54 = *(int *)(v53 + 20);
        v55 = &v45[v54];
        v56 = &v46[v54];
        v57 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
        v58 = *(int *)(v53 + 24);
        v59 = &v45[v58];
        v60 = &v46[v58];
        v52(&v45[v58], &v46[v58], v51);
        v61 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        ((void (*)(char *, char *, uint64_t))v206)(&v59[v61[5]], &v60[v61[5]], v207);
        ((void (*)(char *, char *, uint64_t))v206)(&v59[v61[6]], &v60[v61[6]], v207);
        v62 = v61[7];
        v63 = &v59[v62];
        v64 = &v60[v62];
        v65 = sub_100005D40(&qword_1001BF090);
        v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32);
        v66(v63, v64, v65);
        v66(&v59[v61[8]], &v60[v61[8]], v65);
        *(_OWORD *)&v59[v61[9]] = *(_OWORD *)&v60[v61[9]];
        v67 = v61[10];
        v68 = &v59[v67];
        v69 = &v60[v67];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v67], 1, v65))
        {
          v70 = sub_100005D40(&qword_1001BF098);
          memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
        }
        else
        {
          v66(v68, v69, v65);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v68, 0, 1, v65);
        }
        v94 = v61[11];
        v95 = &v59[v94];
        v96 = &v60[v94];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v94], 1, v65))
        {
          v97 = sub_100005D40(&qword_1001BF098);
          memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
        }
        else
        {
          v66(v95, v96, v65);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v65);
        }
        v98 = v61[12];
        v99 = &v59[v98];
        v100 = &v60[v98];
        v52(&v59[v98], &v60[v98], v51);
        v101 = (int *)type metadata accessor for ConditionViewModel(0);
        v102 = v101[5];
        v103 = &v99[v102];
        v104 = &v100[v102];
        v105 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 32))(v103, v104, v105);
        *(_OWORD *)&v99[v101[6]] = *(_OWORD *)&v100[v101[6]];
        *(_OWORD *)&v99[v101[7]] = *(_OWORD *)&v100[v101[7]];
        v99[v101[8]] = v100[v101[8]];
        v99[v101[9]] = v100[v101[9]];
        v99[v101[10]] = v100[v101[10]];
        *(_QWORD *)&v59[v61[13]] = *(_QWORD *)&v60[v61[13]];
        v106 = v61[14];
        v107 = &v59[v106];
        v108 = &v60[v106];
        v109 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 32))(v107, v108, v109);
        v110 = v61[15];
        v111 = &v59[v110];
        v112 = &v60[v110];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v110], 1, v207))
        {
          v113 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v206)(v111, v112, v207);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v111, 0, 1, v207);
        }
        a2 = v203;
        v71 = v208;
        v72 = v209;
        v114 = v61[16];
        v115 = &v59[v114];
        v116 = &v60[v114];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v114], 1, v207))
        {
          v117 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v206)(v115, v116, v207);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v207);
        }
        v118 = v61[17];
        v119 = &v59[v118];
        v120 = &v60[v118];
        v121 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 32))(v119, v120, v121);
        v122 = v61[18];
        v123 = &v59[v122];
        v124 = &v60[v122];
        v125 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v123, v124, v125);
        *(_QWORD *)&v59[v61[19]] = *(_QWORD *)&v60[v61[19]];
        v126 = v61[20];
        v127 = &v59[v126];
        v128 = &v60[v126];
        v127[32] = v128[32];
        v129 = *((_OWORD *)v128 + 1);
        *(_OWORD *)v127 = *(_OWORD *)v128;
        *((_OWORD *)v127 + 1) = v129;
        v45 = v204;
        v48 = v201;
        v47 = v202;
        v50 = 1;
        goto LABEL_60;
      }
      v74 = type metadata accessor for UUID(0);
      v75 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32);
      v75(v45, v46, v74);
      v76 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
      v77 = v76[5];
      v78 = &v45[v77];
      v79 = &v46[v77];
      v80 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v78, v79, v80);
      v81 = v76[6];
      v82 = &v45[v81];
      v83 = &v46[v81];
      v198 = v75;
      v199 = v74;
      v75(v82, &v46[v81], v74);
      v84 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      ((void (*)(char *, char *, uint64_t))v206)(&v82[v84[5]], &v83[v84[5]], v207);
      ((void (*)(char *, char *, uint64_t))v206)(&v82[v84[6]], &v83[v84[6]], v207);
      v85 = v84[7];
      v86 = &v82[v85];
      v87 = &v83[v85];
      v88 = sub_100005D40(&qword_1001BF090);
      v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32);
      v89(v86, v87, v88);
      v89(&v82[v84[8]], &v83[v84[8]], v88);
      *(_OWORD *)&v82[v84[9]] = *(_OWORD *)&v83[v84[9]];
      v90 = v84[10];
      v91 = &v82[v90];
      v92 = &v83[v90];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v83[v90], 1, v88))
      {
        v93 = sub_100005D40(&qword_1001BF098);
        memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
      }
      else
      {
        v89(v91, v92, v88);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v91, 0, 1, v88);
      }
      v130 = v84[11];
      v131 = &v82[v130];
      v132 = &v83[v130];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v83[v130], 1, v88))
      {
        v133 = sub_100005D40(&qword_1001BF098);
        memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
      }
      else
      {
        v89(v131, v132, v88);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v131, 0, 1, v88);
      }
      v134 = v84[12];
      v135 = &v82[v134];
      v136 = &v83[v134];
      v198(&v82[v134], &v83[v134], v199);
      v137 = (int *)type metadata accessor for ConditionViewModel(0);
      v138 = v137[5];
      v139 = &v135[v138];
      v140 = &v136[v138];
      v141 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 32))(v139, v140, v141);
      *(_OWORD *)&v135[v137[6]] = *(_OWORD *)&v136[v137[6]];
      *(_OWORD *)&v135[v137[7]] = *(_OWORD *)&v136[v137[7]];
      v135[v137[8]] = v136[v137[8]];
      v135[v137[9]] = v136[v137[9]];
      v135[v137[10]] = v136[v137[10]];
      *(_QWORD *)&v82[v84[13]] = *(_QWORD *)&v83[v84[13]];
      v142 = v84[14];
      v143 = &v82[v142];
      v144 = &v83[v142];
      v145 = type metadata accessor for CloudAltitudeKind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
      v146 = v84[15];
      v147 = &v82[v146];
      v148 = &v83[v146];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v83[v146], 1, v207))
      {
        v149 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v206)(v147, v148, v207);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v147, 0, 1, v207);
      }
      a2 = v203;
      v150 = v84[16];
      v151 = &v82[v150];
      v152 = &v83[v150];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v83[v150], 1, v207))
      {
        v153 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v206)(v151, v152, v207);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v151, 0, 1, v207);
      }
      v154 = v84[17];
      v155 = &v82[v154];
      v156 = &v83[v154];
      v157 = type metadata accessor for UVIndex(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 32))(v155, v156, v157);
      v158 = v84[18];
      v159 = &v82[v158];
      v160 = &v83[v158];
      v161 = type metadata accessor for Wind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 32))(v159, v160, v161);
      *(_QWORD *)&v82[v84[19]] = *(_QWORD *)&v83[v84[19]];
      v162 = v84[20];
      v163 = &v82[v162];
      v164 = &v83[v162];
      v163[32] = v164[32];
      v165 = *((_OWORD *)v164 + 1);
      *(_OWORD *)v163 = *(_OWORD *)v164;
      *((_OWORD *)v163 + 1) = v165;
      v45 = v204;
      *(_QWORD *)&v204[v76[7]] = *(_QWORD *)&v46[v76[7]];
      *(_QWORD *)&v204[v76[8]] = *(_QWORD *)&v46[v76[8]];
      v166 = v76[9];
      v167 = &v204[v166];
      v168 = &v46[v166];
      v169 = (int *)type metadata accessor for AirQualityViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v168, 1, (uint64_t)v169))
      {
        v170 = sub_100005D40(&qword_1001BFA30);
        memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
      }
      else
      {
        v198(v167, v168, v199);
        ((void (*)(char *, char *, uint64_t))v206)(&v167[v169[5]], &v168[v169[5]], v207);
        *(_QWORD *)&v167[v169[6]] = *(_QWORD *)&v168[v169[6]];
        v171 = v169[7];
        v172 = &v167[v171];
        v173 = &v168[v171];
        v174 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v174 - 8) + 32))(v172, v173, v174);
        v175 = v169[8];
        v176 = &v167[v175];
        v177 = &v168[v175];
        v178 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v178 - 8) + 32))(v176, v177, v178);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v167, 0, 1, (uint64_t)v169);
      }
      v179 = v76[10];
      v180 = &v204[v179];
      v181 = &v46[v179];
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v181, 1, HourPrecipitationChartViewModel))
      {
        v183 = sub_100005D40(&qword_1001BFA38);
        memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v180, v181, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v180, 0, 1, HourPrecipitationChartViewModel);
      }
      *(_QWORD *)&v204[v76[11]] = *(_QWORD *)&v46[v76[11]];
      v184 = v76[12];
      v185 = &v204[v184];
      v186 = &v46[v184];
      *(_QWORD *)v185 = *(_QWORD *)v186;
      *((_WORD *)v185 + 4) = *((_WORD *)v186 + 4);
      v187 = v76[13];
      v188 = &v204[v187];
      v189 = &v46[v187];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v46[v187], 1, v205))
      {
        v190 = sub_100005D40(&qword_1001BFA28);
        memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v205 - 8) + 32))(v188, v189, v205);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v188, 0, 1, v205);
      }
      v50 = v200;
      v191 = v76[14];
      v192 = &v204[v191];
      v193 = &v46[v191];
      v194 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v193, 1, v194))
      {
        v195 = sub_100005D40(&qword_1001BFA40);
        memcpy(v192, v193, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
      }
      else
      {
        v196 = swift_getEnumCaseMultiPayload(v193, v194) == 1;
        ((void (*)(char *, char *, uint64_t))v206)(v192, v193, v207);
        swift_storeEnumTagMultiPayload(v192, v194, v196);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v192, 0, 1, v194);
      }
      v72 = v209;
      v48 = v201;
      v47 = v202;
    }
    v71 = v208;
LABEL_60:
    swift_storeEnumTagMultiPayload(v45, v48, v50);
    swift_storeEnumTagMultiPayload(v45, v47, 1);
    goto LABEL_61;
  }
  memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  v71 = v208;
  v72 = v209;
LABEL_61:
  v71[v72[9]] = a2[v72[9]];
  return v71;
}

char *sub_1000C2594(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t EnumCaseMultiPayload;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int *v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  int *v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  int *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  int *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  __int128 v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  __int128 v183;
  uint64_t v184;
  char *v185;
  char *v186;
  int *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  _BOOL8 v214;
  uint64_t v216;
  int *v217;
  void (*v218)(char *, char *, uint64_t);
  uint64_t v219;
  void (*v220)(char *, char *, uint64_t);
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  void (*v226)(char *, char *, uint64_t);
  char *v227;
  uint64_t v228;
  int *v229;
  char *v230;
  char *v231;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BFA18);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100016904((uint64_t)&a1[v8], &qword_1001C0290);
    v11 = sub_100005D40(&qword_1001C0290);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  v18 = v14[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  sub_100019A78(v17, v18);
  if (a1 != a2)
  {
    v19 = a3[7];
    v20 = &a1[v19];
    v21 = &a2[v19];
    sub_100016904((uint64_t)&a1[v19], &qword_1001BF0C8);
    v22 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for Font.Context(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
  }
  v229 = a3;
  v24 = a3[8];
  v25 = &a1[v24];
  v231 = a2;
  v26 = &a2[v24];
  v27 = type metadata accessor for Date(0);
  v225 = *(_QWORD *)(v27 - 8);
  v228 = v27;
  (*(void (**)(char *, char *, uint64_t))(v225 + 40))(v25, v26, v27);
  v28 = (int *)type metadata accessor for ForecastEntry(0);
  v29 = v28[5];
  v30 = &v25[v29];
  v31 = &v26[v29];
  v32 = type metadata accessor for TimelineEntryRelevance(0);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v32);
  v34 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v32);
  v230 = a1;
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v32);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v35 = *(_QWORD *)(v32 - 8);
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v32);
LABEL_17:
    v36 = sub_100005D40(&qword_1001BFA20);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 40))(v30, v31, v32);
LABEL_18:
  v37 = v28[6];
  v38 = &v25[v37];
  v39 = &v26[v37];
  v40 = *(_QWORD *)&v26[v37 + 8];
  v41 = *(_QWORD *)&v25[v37 + 8];
  *(_QWORD *)v38 = *(_QWORD *)&v26[v37];
  *((_QWORD *)v38 + 1) = v40;
  swift_bridgeObjectRelease(v41);
  v42 = *((_QWORD *)v39 + 3);
  v43 = *((_QWORD *)v38 + 3);
  *((_QWORD *)v38 + 2) = *((_QWORD *)v39 + 2);
  *((_QWORD *)v38 + 3) = v42;
  swift_bridgeObjectRelease(v43);
  v44 = *((_QWORD *)v39 + 5);
  v45 = *((_QWORD *)v38 + 5);
  *((_QWORD *)v38 + 4) = *((_QWORD *)v39 + 4);
  *((_QWORD *)v38 + 5) = v44;
  swift_bridgeObjectRelease(v45);
  *((_WORD *)v38 + 24) = *((_WORD *)v39 + 24);
  v38[50] = v39[50];
  v38[51] = v39[51];
  v46 = type metadata accessor for WidgetContext(0);
  v47 = *(int *)(v46 + 40);
  v48 = &v38[v47];
  v49 = &v39[v47];
  v50 = type metadata accessor for URL(0);
  v51 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v48, 1, v50);
  v52 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v49, 1, v50);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v48, 0, 1, v50);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  v53 = *(_QWORD *)(v50 - 8);
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v48, v50);
LABEL_23:
    v54 = sub_100005D40(&qword_1001BFA28);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v48, v49, v50);
LABEL_24:
  v55 = v230;
  v56 = *(int *)(v46 + 44);
  v57 = &v38[v56];
  v58 = &v39[v56];
  v59 = *(_QWORD *)v57;
  *(_QWORD *)v57 = *(_QWORD *)&v39[v56];
  swift_bridgeObjectRelease(v59);
  v57[8] = v58[8];
  v60 = v231;
  if (v230 != v231)
  {
    v61 = v28[7];
    v62 = &v25[v61];
    v63 = &v26[v61];
    sub_100011894((uint64_t)&v25[v61], type metadata accessor for ForecastEntry.Model);
    v64 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v63, v64) == 1)
    {
      v65 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v63, v65);
      v67 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v89 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v62, v63, v89);
      }
      else
      {
        v223 = v64;
        v224 = v62;
        v222 = v65;
        v221 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v68 = type metadata accessor for UUID(0);
          v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32);
          v69(v62, v63, v68);
          v70 = type metadata accessor for InstantWeatherViewModel(0);
          v71 = *(int *)(v70 + 20);
          v72 = &v62[v71];
          v73 = &v63[v71];
          v74 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
          v75 = *(int *)(v70 + 24);
          v76 = &v62[v75];
          v77 = &v63[v75];
          v69(&v62[v75], v77, v68);
          v78 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v79 = *(void (**)(char *, char *, uint64_t))(v225 + 32);
          v79(&v76[v78[5]], &v77[v78[5]], v228);
          v226 = v79;
          v79(&v76[v78[6]], &v77[v78[6]], v228);
          v80 = v78[7];
          v81 = &v76[v80];
          v82 = &v77[v80];
          v83 = sub_100005D40(&qword_1001BF090);
          v84 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32);
          v84(v81, v82, v83);
          v84(&v76[v78[8]], &v77[v78[8]], v83);
          *(_OWORD *)&v76[v78[9]] = *(_OWORD *)&v77[v78[9]];
          v85 = v78[10];
          v86 = &v76[v85];
          v87 = &v77[v85];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v77[v85], 1, v83))
          {
            v88 = sub_100005D40(&qword_1001BF098);
            memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
          }
          else
          {
            v84(v86, v87, v83);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v86, 0, 1, v83);
          }
          v112 = v78[11];
          v113 = &v76[v112];
          v114 = &v77[v112];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v77[v112], 1, v83))
          {
            v115 = sub_100005D40(&qword_1001BF098);
            memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
          }
          else
          {
            v84(v113, v114, v83);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v113, 0, 1, v83);
          }
          v120 = v78[12];
          v121 = &v76[v120];
          v122 = &v77[v120];
          v69(&v76[v120], &v77[v120], v68);
          v123 = (int *)type metadata accessor for ConditionViewModel(0);
          v124 = v123[5];
          v125 = &v121[v124];
          v126 = &v122[v124];
          v127 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 32))(v125, v126, v127);
          *(_OWORD *)&v121[v123[6]] = *(_OWORD *)&v122[v123[6]];
          *(_OWORD *)&v121[v123[7]] = *(_OWORD *)&v122[v123[7]];
          v121[v123[8]] = v122[v123[8]];
          v121[v123[9]] = v122[v123[9]];
          v121[v123[10]] = v122[v123[10]];
          *(_QWORD *)&v76[v78[13]] = *(_QWORD *)&v77[v78[13]];
          v128 = v78[14];
          v129 = &v76[v128];
          v130 = &v77[v128];
          v131 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 32))(v129, v130, v131);
          v132 = v78[15];
          v133 = &v76[v132];
          v134 = &v77[v132];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v77[v132], 1, v228))
          {
            v135 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
          }
          else
          {
            v226(v133, v134, v228);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v133, 0, 1, v228);
          }
          v60 = v231;
          v67 = 1;
          v152 = v78[16];
          v153 = &v76[v152];
          v154 = &v77[v152];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v77[v152], 1, v228))
          {
            v155 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
          }
          else
          {
            v226(v153, v154, v228);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v153, 0, 1, v228);
          }
          v64 = v223;
          v160 = v78[17];
          v161 = &v76[v160];
          v162 = &v77[v160];
          v163 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v163 - 8) + 32))(v161, v162, v163);
          v164 = v78[18];
          v165 = &v76[v164];
          v166 = &v77[v164];
          v167 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 32))(v165, v166, v167);
          *(_QWORD *)&v76[v78[19]] = *(_QWORD *)&v77[v78[19]];
          v168 = v78[20];
          v169 = &v76[v168];
          v170 = &v77[v168];
          v169[32] = v170[32];
          v171 = *((_OWORD *)v170 + 1);
          *(_OWORD *)v169 = *(_OWORD *)v170;
          *((_OWORD *)v169 + 1) = v171;
          v62 = v224;
          v65 = v222;
        }
        else
        {
          v216 = v50;
          v90 = type metadata accessor for UUID(0);
          v91 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 32);
          v91(v62, v63, v90);
          v92 = type metadata accessor for AggregateWeatherViewModel(0);
          v93 = *(int *)(v92 + 20);
          v94 = &v62[v93];
          v95 = &v63[v93];
          v96 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v94, v95, v96);
          v217 = (int *)v92;
          v218 = v91;
          v97 = *(int *)(v92 + 24);
          v98 = &v62[v97];
          v99 = &v63[v97];
          v219 = v90;
          v91(v98, &v63[v97], v90);
          v100 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v101 = *(void (**)(char *, char *, uint64_t))(v225 + 32);
          v101(&v98[v100[5]], &v99[v100[5]], v228);
          v220 = v101;
          v101(&v98[v100[6]], &v99[v100[6]], v228);
          v102 = v100[7];
          v103 = &v98[v102];
          v104 = &v99[v102];
          v105 = sub_100005D40(&qword_1001BF090);
          v106 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 32);
          v106(v103, v104, v105);
          v106(&v98[v100[8]], &v99[v100[8]], v105);
          *(_OWORD *)&v98[v100[9]] = *(_OWORD *)&v99[v100[9]];
          v107 = v100;
          v108 = v100[10];
          v109 = &v98[v108];
          v110 = &v99[v108];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v99[v108], 1, v105))
          {
            v111 = sub_100005D40(&qword_1001BF098);
            memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
          }
          else
          {
            v106(v109, v110, v105);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v109, 0, 1, v105);
          }
          v116 = v100[11];
          v117 = &v98[v116];
          v118 = &v99[v116];
          v227 = v63;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v99[v116], 1, v105))
          {
            v119 = sub_100005D40(&qword_1001BF098);
            memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
          }
          else
          {
            v106(v117, v118, v105);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v117, 0, 1, v105);
          }
          v136 = v100[12];
          v137 = &v98[v136];
          v138 = &v99[v136];
          v218(&v98[v136], &v99[v136], v219);
          v139 = (int *)type metadata accessor for ConditionViewModel(0);
          v140 = v139[5];
          v141 = &v137[v140];
          v142 = &v138[v140];
          v143 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 32))(v141, v142, v143);
          *(_OWORD *)&v137[v139[6]] = *(_OWORD *)&v138[v139[6]];
          *(_OWORD *)&v137[v139[7]] = *(_OWORD *)&v138[v139[7]];
          v137[v139[8]] = v138[v139[8]];
          v137[v139[9]] = v138[v139[9]];
          v137[v139[10]] = v138[v139[10]];
          *(_QWORD *)&v98[v107[13]] = *(_QWORD *)&v99[v107[13]];
          v144 = v107[14];
          v145 = &v98[v144];
          v146 = &v99[v144];
          v147 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 32))(v145, v146, v147);
          v148 = v107[15];
          v149 = &v98[v148];
          v150 = &v99[v148];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v99[v148], 1, v228))
          {
            v151 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
          }
          else
          {
            v220(v149, v150, v228);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v149, 0, 1, v228);
          }
          v156 = v107[16];
          v157 = &v98[v156];
          v158 = &v99[v156];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v99[v156], 1, v228))
          {
            v159 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
          }
          else
          {
            v220(v157, v158, v228);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v157, 0, 1, v228);
          }
          v172 = v107[17];
          v173 = &v98[v172];
          v174 = &v99[v172];
          v175 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v175 - 8) + 32))(v173, v174, v175);
          v176 = v107[18];
          v177 = &v98[v176];
          v178 = &v99[v176];
          v179 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v179 - 8) + 32))(v177, v178, v179);
          *(_QWORD *)&v98[v107[19]] = *(_QWORD *)&v99[v107[19]];
          v180 = v107[20];
          v181 = &v98[v180];
          v182 = &v99[v180];
          v181[32] = v182[32];
          v183 = *((_OWORD *)v182 + 1);
          *(_OWORD *)v181 = *(_OWORD *)v182;
          *((_OWORD *)v181 + 1) = v183;
          v62 = v224;
          *(_QWORD *)&v224[v217[7]] = *(_QWORD *)&v227[v217[7]];
          *(_QWORD *)&v224[v217[8]] = *(_QWORD *)&v227[v217[8]];
          v184 = v217[9];
          v185 = &v224[v184];
          v186 = &v227[v184];
          v187 = (int *)type metadata accessor for AirQualityViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v186, 1, (uint64_t)v187))
          {
            v188 = sub_100005D40(&qword_1001BFA30);
            memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
          }
          else
          {
            v218(v185, v186, v219);
            v220(&v185[v187[5]], &v186[v187[5]], v228);
            *(_QWORD *)&v185[v187[6]] = *(_QWORD *)&v186[v187[6]];
            v189 = v187[7];
            v190 = &v185[v189];
            v191 = &v186[v189];
            v192 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v192 - 8) + 32))(v190, v191, v192);
            v193 = v187[8];
            v194 = &v185[v193];
            v195 = &v186[v193];
            v196 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v196 - 8) + 32))(v194, v195, v196);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v185, 0, 1, (uint64_t)v187);
          }
          v197 = v217[10];
          v198 = &v224[v197];
          v199 = &v227[v197];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v199, 1, HourPrecipitationChartViewModel))
          {
            v201 = sub_100005D40(&qword_1001BFA38);
            memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v198, v199, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v198, 0, 1, HourPrecipitationChartViewModel);
          }
          v55 = v230;
          *(_QWORD *)&v224[v217[11]] = *(_QWORD *)&v227[v217[11]];
          v202 = v217[12];
          v203 = &v224[v202];
          v204 = &v227[v202];
          *(_QWORD *)v203 = *(_QWORD *)v204;
          *((_WORD *)v203 + 4) = *((_WORD *)v204 + 4);
          v205 = v217[13];
          v206 = &v224[v205];
          v207 = &v227[v205];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v227[v205], 1, v216))
          {
            v208 = sub_100005D40(&qword_1001BFA28);
            memcpy(v206, v207, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v216 - 8) + 32))(v206, v207, v216);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v206, 0, 1, v216);
          }
          v209 = v217[14];
          v210 = &v224[v209];
          v211 = &v227[v209];
          v212 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          v67 = v221;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v211, 1, v212))
          {
            v213 = sub_100005D40(&qword_1001BFA40);
            memcpy(v210, v211, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
          }
          else
          {
            v214 = swift_getEnumCaseMultiPayload(v211, v212) == 1;
            v220(v210, v211, v228);
            swift_storeEnumTagMultiPayload(v210, v212, v214);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v210, 0, 1, v212);
          }
          v65 = v222;
          v64 = v223;
        }
      }
      swift_storeEnumTagMultiPayload(v62, v65, v67);
      swift_storeEnumTagMultiPayload(v62, v64, 1);
    }
    else
    {
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
  }
  v55[v229[9]] = v60[v229[9]];
  return v55;
}

uint64_t sub_1000C35F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C3604);
}

uint64_t sub_1000C3604(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;

  sub_100005D40(&qword_1001BFA48);
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
  }
  sub_100005D40(&qword_1001C0288);
  sub_10001C6C0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_14:
    v8 = a1 + v11;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
  }
  if ((_DWORD)a2 != 254)
  {
    sub_100005D40(&qword_1001BF0D0);
    sub_10001C6C0();
    if (v9)
    {
      v7 = v14;
      v11 = a3[7];
    }
    else
    {
      v7 = sub_10008307C();
      v11 = a3[8];
    }
    goto LABEL_14;
  }
  v12 = *(unsigned __int8 *)(a1 + a3[6] + 8);
  if (v12 > 1)
    return (v12 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_1000C36D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C36E0);
}

void sub_1000C36E0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_100005D40(&qword_1001BFA48);
  sub_10001C6D0();
  if (v11)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    sub_100005D40(&qword_1001C0288);
    sub_10001C6D0();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      if (a3 == 254)
      {
        *(_BYTE *)(a1 + a4[6] + 8) = -(char)a2;
        return;
      }
      sub_100005D40(&qword_1001BF0D0);
      sub_10001C6D0();
      if (v11)
      {
        v9 = v14;
        v13 = a4[7];
      }
      else
      {
        v9 = sub_10008307C();
        v13 = a4[8];
      }
    }
    v10 = a1 + v13;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for DataDenseContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C2EA0;
  if (!qword_1001C2EA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DataDenseContentView);
  return result;
}

void sub_1000C37E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[6];

  sub_10001C028(319, (unint64_t *)&qword_1001BFAB8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001C028(319, (unint64_t *)&unk_1001C1058, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = "\t";
      sub_10001C028(319, (unint64_t *)&qword_1001BF140, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for ForecastEntry(319);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = &unk_10017F4E0;
          swift_initStructMetadata(a1, 256, 6, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_1000C38E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019FC20, 1);
}

uint64_t sub_1000C38F4()
{
  return EnvironmentValues.colorSchemeContrast.getter();
}

uint64_t sub_1000C3914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v5 = v4;
  v58 = a3;
  v59 = a1;
  v60 = a2;
  v63 = a4;
  v6 = type metadata accessor for RainInlineContentViewModel(0);
  __chkstk_darwin(v6);
  v62 = (uint64_t)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CurrentObservationViewAttributes(0);
  v9 = __chkstk_darwin(v8);
  v61 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v57 = (uint64_t)&v54 - v11;
  v12 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v12);
  v56 = (_DWORD *)((char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v14);
  v55 = (_DWORD *)((char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100005D40(&qword_1001BF9B0);
  __chkstk_darwin(v19);
  v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v22);
  v24 = (void (*)(uint64_t, uint64_t))((char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = (int *)type metadata accessor for DataDenseContentView(0);
  v26 = v5 + v25[8];
  v27 = type metadata accessor for ForecastEntry(0);
  sub_10004D258(v26 + *(int *)(v27 + 28), (uint64_t)v18, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
  {
    sub_10004D278((uint64_t)v18, (uint64_t)v21, type metadata accessor for WeatherDataViewModel);
    v28 = type metadata accessor for WeatherDataViewModel(0);
    v29 = (uint64_t)v21;
    v30 = 0;
  }
  else
  {
    v28 = type metadata accessor for WeatherDataViewModel(0);
    v29 = (uint64_t)v21;
    v30 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v29, v30, 1, v28);
  type metadata accessor for WeatherDataViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v28) == 1)
  {
    sub_100016904((uint64_t)v21, &qword_1001BF9B0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload(v21, v28))
    {
      sub_10004D278((uint64_t)v21, (uint64_t)v24, type metadata accessor for AggregateWeatherViewModel);
      v34 = v55;
      sub_1000C508C(&qword_1001BFA18, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v55);
      v35 = v56;
      sub_1000C508C(&qword_1001C0290, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x8000000100187CF0, v56);
      v36 = v25[9];
      v37 = v5 + v25[6];
      v38 = *(_QWORD *)v37;
      v39 = *(_BYTE *)(v37 + 8);
      v40 = *(_BYTE *)(v5 + v36);
      sub_10001961C(*(_QWORD *)v37, v39);
      v41 = sub_1000C5274(v38, v39);
      sub_100019A78(v38, v39);
      v42 = type metadata accessor for CurrentObservationViewAttributesFactory(0);
      swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
      v43 = sub_1000D7DC8((uint64_t)v34, (uint64_t)v35, v40, v41 & 1);
      v44 = v57;
      sub_1000D6DB8((uint64_t)v24, v26 + *(int *)(v27 + 24), (uint64_t)v24 + *(int *)(v22 + 20), v59, v60, *(unsigned __int8 *)(v26 + *(int *)(v27 + 24) + 50), *(unsigned __int8 *)(v26 + *(int *)(v27 + 24) + 51), 1, v57, v58 & 1, 1u);
      v45 = v61;
      sub_10004D258(v44, v61, type metadata accessor for CurrentObservationViewAttributes);
      v46 = (char *)v24 + *(int *)(v22 + 48);
      v47 = *((_WORD *)v46 + 4);
      v48 = *(_QWORD *)v46;
      v49 = v62;
      sub_1000D94D4(v24, 1, v62);
      swift_release(v43);
      sub_100011894(v44, type metadata accessor for CurrentObservationViewAttributes);
      sub_100011894((uint64_t)v24, type metadata accessor for AggregateWeatherViewModel);
      v50 = v63;
      sub_10004D278(v45, v63, type metadata accessor for CurrentObservationViewAttributes);
      v51 = type metadata accessor for DataDenseViewAttributes(0);
      v52 = v50 + *(int *)(v51 + 20);
      *(_QWORD *)v52 = v48;
      *(_WORD *)(v52 + 8) = v47;
      sub_10004D278(v49, v50 + *(int *)(v51 + 24), type metadata accessor for RainInlineContentViewModel);
      v32 = v50;
      v33 = 0;
      v31 = v51;
      return _s13WeatherWidget20WeatherDataViewModelOwst_0(v32, v33, 1, v31);
    }
    sub_100011894((uint64_t)v21, type metadata accessor for WeatherDataViewModel);
  }
  v31 = type metadata accessor for DataDenseViewAttributes(0);
  v32 = v63;
  v33 = 1;
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v32, v33, 1, v31);
}

void *sub_1000C3E28@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[12];
  int v22;
  uint64_t v23;
  void *v24;
  _BYTE __src[80];

  v2 = v1;
  v24 = a1;
  v23 = type metadata accessor for Font.Context(0);
  v3 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v6);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v9);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = sub_1000C407C(v1);
  sub_1000C508C(&qword_1001BFA18, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v11);
  v12 = type metadata accessor for DataDenseContentView(0);
  sub_1000C508C(&qword_1001C0290, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x8000000100187CF0, v8);
  v13 = v1 + *(int *)(v12 + 24);
  v14 = *(_QWORD *)v13;
  v15 = *(_BYTE *)(v13 + 8);
  v16 = *(_BYTE *)(v2 + *(int *)(v12 + 36));
  sub_10001961C(*(_QWORD *)v13, v15);
  v17 = sub_1000C5274(v14, v15);
  sub_100019A78(v14, v15);
  v18 = type metadata accessor for ErrorViewAttributesFactory(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = sub_100093708((uint64_t)v11, (uint64_t)v8, v16, v17 & 1);
  sub_1000C508C(&qword_1001BF0C8, (uint64_t (*)(_QWORD))&type metadata accessor for Font.Context, 0x747865746E6F43, 0xE700000000000000, v5);
  sub_1000D91F4(v22, (uint64_t)v5, (uint64_t)__src);
  swift_release(v19);
  (*(void (**)(_DWORD *, uint64_t))(v3 + 8))(v5, v23);
  return memcpy(v24, __src, 0x50uLL);
}

uint64_t sub_1000C407C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v2);
  v4 = (unsigned __int8 *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1 + *(int *)(type metadata accessor for DataDenseContentView(0) + 32);
  v6 = type metadata accessor for ForecastEntry(0);
  sub_10004D258(v5 + *(int *)(v6 + 28), (uint64_t)v4, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v4, v2) != 1)
    return *v4;
  sub_100011894((uint64_t)v4, type metadata accessor for ForecastEntry.Model);
  return 3;
}

void sub_1000C4140(uint64_t a1@<X8>)
{
  const void *v1;
  char *v2;
  const void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1;
  v5 = type metadata accessor for ErrorView(0);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_1000443F0();
  memcpy(v2, v3, 0x50uLL);
  v7 = &v2[*(int *)(v5 + 20)];
  *(_QWORD *)v7 = swift_getKeyPath(&unk_10017F548);
  v8 = sub_100005D40(&qword_1001BF490);
  swift_storeEnumTagMultiPayload(v7, v8, 0);
  v9 = sub_1000C5634((uint64_t)v3);
  LOBYTE(v3) = static Edge.Set.all.getter(v9);
  sub_10004D258((uint64_t)v2, a1, type metadata accessor for ErrorView);
  v10 = a1 + *(int *)(sub_100005D40(&qword_1001C14F8) + 36);
  *(_BYTE *)v10 = (_BYTE)v3;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_BYTE *)(v10 + 40) = 1;
  sub_100011894((uint64_t)v2, type metadata accessor for ErrorView);
}

void sub_1000C4238(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE v3[80];

  memcpy(v3, v1, sizeof(v3));
  sub_1000C4140(a1);
}

void sub_1000C4278(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = a1;
  v2 = type metadata accessor for ContainerBackgroundPlacement(0);
  v45 = *(_QWORD *)(v2 - 8);
  v46 = v2;
  __chkstk_darwin(v2);
  sub_1000230E0();
  v4 = v3;
  v5 = type metadata accessor for DataDenseContentView(0);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_10002325C();
  v9 = v8 - v7;
  sub_100005D40(&qword_1001C2EE8);
  sub_100029068();
  __chkstk_darwin(v10);
  sub_10002325C();
  v13 = (_QWORD *)(v12 - v11);
  v14 = sub_100005D40(&qword_1001C2EF0);
  sub_100029068();
  __chkstk_darwin(v15);
  sub_10002325C();
  v18 = v17 - v16;
  v19 = sub_100005D40(&qword_1001C2EF8);
  v43 = *(_QWORD *)(v19 - 8);
  v44 = v19;
  __chkstk_darwin(v19);
  sub_1000230E0();
  v42 = v20;
  *v13 = static Alignment.leading.getter(v21);
  v13[1] = v22;
  sub_100005D40(&qword_1001C2F00);
  sub_1000C4598(v1);
  v23 = v1 + *(int *)(v5 + 24);
  v24 = *(_QWORD *)v23;
  v25 = *(_BYTE *)(v23 + 8);
  sub_10001961C(*(_QWORD *)v23, v25);
  v26 = sub_1000C5274(v24, v25);
  sub_100019A78(v24, v25);
  sub_10004D258(v1, v9, type metadata accessor for DataDenseContentView);
  if ((v26 & 1) == 0)
  {
    sub_100011894(v9, type metadata accessor for DataDenseContentView);
    goto LABEL_5;
  }
  v27 = *(int *)(v5 + 32);
  v28 = v27 + *(int *)(sub_10008307C() + 24);
  LOBYTE(v28) = *(_BYTE *)(v9 + v28 + *(int *)(type metadata accessor for WidgetContext(0) + 44) + 8);
  sub_100011894(v9, type metadata accessor for DataDenseContentView);
  if ((v28 & 1) == 0)
  {
LABEL_5:
    v31 = static Color.clear.getter(v29);
    goto LABEL_6;
  }
  v30 = static Color.black.getter();
  v31 = Color.opacity(_:)(0.3);
  swift_release(v30);
LABEL_6:
  sub_10003EB70((uint64_t)v13, v18, &qword_1001C2EE8);
  v32 = v18 + *(int *)(v14 + 36);
  *(_QWORD *)v32 = v31;
  *(_OWORD *)(v32 + 8) = xmmword_10017CEB0;
  *(_QWORD *)(v32 + 24) = 0x4000000000000000;
  sub_100016904((uint64_t)v13, &qword_1001C2EE8);
  v33 = static ContainerBackgroundPlacement.widget.getter();
  v34 = __chkstk_darwin(v33);
  v35 = static Alignment.center.getter(v34);
  v37 = v36;
  v38 = type metadata accessor for BackgroundView(0);
  v39 = sub_1000C53E4();
  sub_100016878(&qword_1001C10E0, type metadata accessor for BackgroundView);
  v40 = v42;
  View.containerBackground<A>(for:alignment:content:)(v4, v35, v37, sub_1000C53DC, &v42 - 4, v14, v38, v39, v41);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v4, v46);
  sub_100016904(v18, &qword_1001C2EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v47, v40, v44);
  sub_10001C770();
}

void sub_1000C4598(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v2 = sub_100005D40(&qword_1001C2F18);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001C2F20);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D40(&qword_1001C2F28);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DataDenseViewAttributes(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + *(int *)(type metadata accessor for DataDenseContentView(0) + 32);
  v15 = type metadata accessor for ForecastEntry(0);
  sub_1000C3914(*(_QWORD *)(v14 + *(int *)(v15 + 24)), *(_QWORD *)(v14 + *(int *)(v15 + 24) + 8), 1, (uint64_t)v10);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11) == 1)
  {
    sub_100016904((uint64_t)v10, &qword_1001C2F28);
    sub_1000C3E28(&v29);
    v16 = v30;
    v17 = v31;
    v18 = v34;
    v19 = v35;
    *(_OWORD *)v7 = v29;
    v7[16] = v16;
    *((_QWORD *)v7 + 3) = v17;
    v20 = v33;
    *((_OWORD *)v7 + 2) = v32;
    *((_OWORD *)v7 + 3) = v20;
    *((_QWORD *)v7 + 8) = v18;
    *((_QWORD *)v7 + 9) = v19;
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    sub_100016A54(&qword_1001C2F30, &qword_1001C2F18);
    v22 = v21;
    v23 = sub_1000C5504();
    _ConditionalContent<>.init(storage:)(v7, v2, &type metadata for DataDenseContentView.GenericErrorView, v22, v23);
  }
  else
  {
    sub_10004D278((uint64_t)v10, (uint64_t)v13, type metadata accessor for DataDenseViewAttributes);
    *(_QWORD *)v4 = static HorizontalAlignment.leading.getter(v24);
    *((_QWORD *)v4 + 1) = 0;
    v4[16] = 1;
    v25 = sub_100005D40(&qword_1001C2F40);
    sub_1000C4874((uint64_t)v13, (uint64_t)&v4[*(int *)(v25 + 44)]);
    sub_10003EB70((uint64_t)v4, (uint64_t)v7, &qword_1001C2F18);
    swift_storeEnumTagMultiPayload(v7, v5, 0);
    sub_100016A54(&qword_1001C2F30, &qword_1001C2F18);
    v27 = v26;
    v28 = sub_1000C5504();
    _ConditionalContent<>.init(storage:)(v7, v2, &type metadata for DataDenseContentView.GenericErrorView, v27, v28);
    sub_100016904((uint64_t)v4, &qword_1001C2F18);
    sub_100011894((uint64_t)v13, type metadata accessor for DataDenseViewAttributes);
  }
}

void sub_1000C4874(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];

  v42 = a1;
  v50 = a2;
  v48 = type metadata accessor for DataDenseTableView(0);
  v3 = __chkstk_darwin(v48);
  v49 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v47 = (uint64_t)&v41 - v5;
  v6 = type metadata accessor for AccessibilityChildBehavior(0);
  v44 = *(_QWORD *)(v6 - 8);
  v45 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001C2F48);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001C2F50);
  v43 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100005D40(&qword_1001C2F58);
  v15 = __chkstk_darwin(v46);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v41 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v41 - v22;
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v21);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v24 = sub_100005D40(&qword_1001C2F60);
  sub_1000C4C70(a1, (uint64_t)&v11[*(int *)(v24 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v25);
  sub_100016A54(&qword_1001C2F68, &qword_1001C2F48);
  v27 = v26;
  View.accessibilityElement(children:)(v8, v9, v26);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v45);
  sub_100016904((uint64_t)v11, &qword_1001C2F48);
  v51[0] = v9;
  v51[1] = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v51, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityRespondsToUserInteraction(_:)(1, v12, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v12);
  v29 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
  v30 = swift_allocObject(v29, 48, 7);
  *(_OWORD *)(v30 + 16) = xmmword_10017BD10;
  type metadata accessor for CurrentObservationViewAttributes(0);
  v31 = v42;
  *(_QWORD *)(v30 + 32) = Location.name.getter();
  *(_QWORD *)(v30 + 40) = v32;
  v33 = sub_10001692C();
  ModifiedContent<>.accessibilityInputLabels<A>(_:)(v30, v46, &type metadata for String, v33);
  swift_bridgeObjectRelease(v30);
  sub_100016904((uint64_t)v17, &qword_1001C2F58);
  sub_1000C5540((uint64_t)v20, (uint64_t)v23);
  v34 = v31;
  v35 = v31;
  v36 = v47;
  sub_10004D258(v35, v47, type metadata accessor for DataDenseViewAttributes);
  v37 = type metadata accessor for DataDenseViewAttributes(0);
  sub_10004D258(v34 + *(int *)(v37 + 24), v36 + *(int *)(v48 + 20), type metadata accessor for RainInlineContentViewModel);
  sub_10003EB70((uint64_t)v23, (uint64_t)v20, &qword_1001C2F58);
  v38 = v49;
  sub_10004D258(v36, v49, type metadata accessor for DataDenseTableView);
  v39 = v50;
  sub_10003EB70((uint64_t)v20, v50, &qword_1001C2F58);
  v40 = sub_100005D40(&qword_1001C2F70);
  sub_10004D258(v38, v39 + *(int *)(v40 + 48), type metadata accessor for DataDenseTableView);
  sub_100011894(v36, type metadata accessor for DataDenseTableView);
  sub_100016904((uint64_t)v23, &qword_1001C2F58);
  sub_100011894(v38, type metadata accessor for DataDenseTableView);
  sub_100016904((uint64_t)v20, &qword_1001C2F58);
}

void sub_1000C4C70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t KeyPath;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;

  v35 = a2;
  v3 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DegreesConditionView(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v30 - v10;
  v12 = type metadata accessor for LocationIconView(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v30 - v16;
  sub_10004D258(a1, (uint64_t)&v30 - v16, type metadata accessor for CurrentObservationViewAttributes);
  v19 = static Alignment.center.getter(v18);
  _FrameLayout.init(width:height:alignment:)(&v36, 0, 1, 0x4014000000000000, 0, v19, v20);
  v21 = v36;
  v22 = v37;
  v34 = v39;
  v33 = v40;
  v31 = v38;
  v32 = v41;
  sub_10004D258(a1, (uint64_t)v5, type metadata accessor for CurrentObservationViewAttributes);
  KeyPath = swift_getKeyPath(&unk_10017F5A8);
  v24 = (uint64_t *)&v11[*(int *)(v6 + 20)];
  *v24 = KeyPath;
  v25 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  sub_10004D278((uint64_t)v5, (uint64_t)v11, type metadata accessor for CurrentObservationViewAttributes);
  sub_10004D258((uint64_t)v17, (uint64_t)v15, type metadata accessor for LocationIconView);
  sub_10004D258((uint64_t)v11, (uint64_t)v9, type metadata accessor for DegreesConditionView);
  v26 = v35;
  sub_10004D258((uint64_t)v15, v35, type metadata accessor for LocationIconView);
  v27 = sub_100005D40(&qword_1001C2F78);
  v28 = v26 + *(int *)(v27 + 48);
  *(_QWORD *)v28 = 0;
  *(_BYTE *)(v28 + 8) = 1;
  *(_QWORD *)(v28 + 16) = v21;
  *(_BYTE *)(v28 + 24) = v22;
  *(_QWORD *)(v28 + 32) = v31;
  *(_BYTE *)(v28 + 40) = v34;
  v29 = v32;
  *(_QWORD *)(v28 + 48) = v33;
  *(_QWORD *)(v28 + 56) = v29;
  sub_10004D258((uint64_t)v9, v26 + *(int *)(v27 + 64), type metadata accessor for DegreesConditionView);
  sub_100011894((uint64_t)v11, type metadata accessor for DegreesConditionView);
  sub_100011894((uint64_t)v17, type metadata accessor for LocationIconView);
  sub_100011894((uint64_t)v9, type metadata accessor for DegreesConditionView);
  sub_100011894((uint64_t)v15, type metadata accessor for LocationIconView);
}

uint64_t sub_1000C4F10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v4 = type metadata accessor for BackgroundView(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + *(int *)(type metadata accessor for DataDenseContentView(0) + 32);
  v8 = *(int *)(type metadata accessor for ForecastEntry(0) + 24);
  v9 = (uint64_t *)(v7 + v8 + *(int *)(type metadata accessor for WidgetContext(0) + 44));
  v10 = *v9;
  LOBYTE(v9) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v6 = v10;
  v6[8] = (char)v9;
  v11 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v11 = swift_getKeyPath(&unk_10017F548);
  v12 = sub_100005D40(&qword_1001BF490);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  v13 = &v6[*(int *)(v4 + 24)];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_10017F578);
  v13[8] = 0;
  sub_10004D278((uint64_t)v6, a2, type metadata accessor for BackgroundView);
  return swift_bridgeObjectRetain(v10);
}

void sub_1000C5030(_DWORD *a1@<X8>)
{
  sub_1000C508C(&qword_1001BF0C8, (uint64_t (*)(_QWORD))&type metadata accessor for Font.Context, 0x747865746E6F43, 0xE700000000000000, a1);
}

void sub_1000C5058(_DWORD *a1@<X8>)
{
  sub_1000C508C(&qword_1001BF488, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, a1);
}

void sub_1000C508C(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1000443F0();
  v13 = sub_100005D40(a1);
  sub_100029068();
  __chkstk_darwin(v14);
  sub_10002325C();
  v17 = (uint64_t *)(v16 - v15);
  sub_10003EB70(v5, v16 - v15, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v13);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v26 = a2(0);
    (*(void (**)(_DWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(a5, v17, v26);
  }
  else
  {
    v27 = *v17;
    v28 = static os_log_type_t.fault.getter(EnumCaseMultiPayload, v19, v20, v21, v22, v23, v24, v25);
    v29 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v29, v28))
    {
      sub_1000C56F8();
      v30 = sub_1000C56BC();
      v35 = v30;
      *a5 = 136315138;
      v31 = sub_10016EC84(a3, a4, &v35);
      v32 = sub_1000C56E4(v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v33, a5 + 1);
      sub_1000C56CC((void *)&_mh_execute_header, v29, v28, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.");
      swift_arrayDestroy(v30, 1);
      sub_10002534C(v30);
      sub_10002534C((uint64_t)a5);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v6, v27);
    swift_release(v27);
    sub_1000C56D8(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  }
  sub_10001C770();
}

void sub_1000C5250(_DWORD *a1@<X8>)
{
  sub_1000C56B0(&qword_1001BF3C0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0x8000000100187D10, a1);
}

uint64_t sub_1000C5274(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v5 = type metadata accessor for EnvironmentValues(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1000443F0();
  if ((a2 & 1) != 0)
    return a1 & 1;
  v7 = swift_retain(a1);
  v15 = (_DWORD *)static os_log_type_t.fault.getter(v7, v8, v9, v10, v11, v12, v13, v14);
  v16 = static Log.runtimeIssuesLog.getter();
  if (os_log_type_enabled(v16, (os_log_type_t)v15))
  {
    sub_1000C56F8();
    v17 = sub_1000C56BC();
    v22 = v17;
    *v15 = 136315138;
    v18 = sub_10016EC84(1819242306, 0xE400000000000000, &v22);
    v19 = sub_1000C56E4(v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, v20, v15 + 1);
    sub_1000C56CC((void *)&_mh_execute_header, v16, (os_log_type_t)v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.");
    swift_arrayDestroy(v17, 1);
    sub_10002534C(v17);
    sub_10002534C((uint64_t)v15);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v2, a1);
  sub_100019A78(a1, 0);
  sub_1000C56D8(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  return v22;
}

uint64_t sub_1000C53DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C4F10(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000C53E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C2F08;
  if (!qword_1001C2F08)
  {
    v1 = sub_100005DC4(&qword_1001C2EF0);
    sub_100016A54(&qword_1001C2F10, &qword_1001C2EE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C2F08);
  }
  return result;
}

uint64_t sub_1000C5468()
{
  return EnvironmentValues.colorSchemeContrast.getter();
}

void sub_1000C548C(_DWORD *a1@<X8>)
{
  sub_1000C56B0(&qword_1001BF490, (uint64_t (*)(_QWORD))&type metadata accessor for ColorSchemeContrast, 0x8000000100187D30, a1);
}

void sub_1000C54B0(_DWORD *a1@<X8>)
{
  sub_1000C508C(&qword_1001BFA18, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, a1);
}

void sub_1000C54E0(_DWORD *a1@<X8>)
{
  sub_1000C56B0(&qword_1001C0290, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, 0x8000000100187CF0, a1);
}

unint64_t sub_1000C5504()
{
  unint64_t result;

  result = qword_1001C2F38;
  if (!qword_1001C2F38)
  {
    result = swift_getWitnessTable(&unk_10017F5F4, &type metadata for DataDenseContentView.GenericErrorView);
    atomic_store(result, (unint64_t *)&qword_1001C2F38);
  }
  return result;
}

uint64_t sub_1000C5540(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001C2F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for DataDenseContentView.GenericErrorView()
{
  return &type metadata for DataDenseContentView.GenericErrorView;
}

uint64_t sub_1000C559C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v0 = sub_100005DC4(&qword_1001C2EF0);
  v1 = type metadata accessor for BackgroundView(255);
  v2 = sub_1000C53E4();
  sub_100016878(&qword_1001C10E0, type metadata accessor for BackgroundView);
  v5[0] = v0;
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  return swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

uint64_t sub_1000C5624(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019FC48, 1);
}

uint64_t sub_1000C5634(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  sub_100016828(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  sub_1000167F8(v3, v4, v5, v6);
  swift_retain(v7);
  return a1;
}

void sub_1000C56B0(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, unint64_t a3@<X3>, _DWORD *a4@<X8>)
{
  sub_1000C508C(a1, a2, 0xD000000000000013, a3, a4);
}

uint64_t sub_1000C56BC()
{
  return swift_slowAlloc(32, -1);
}

void sub_1000C56CC(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000C56D8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000C56E4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_1000C56F8()
{
  return swift_slowAlloc(12, -1);
}

ValueMetadata *type metadata accessor for InstantWeatherViewModelFactory()
{
  return &type metadata for InstantWeatherViewModelFactory;
}

uint64_t sub_1000C5714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __n128 v30;
  void (*v31)(char *, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v45;
  uint8_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v49 = a1;
  v51 = a3;
  v4 = type metadata accessor for CurrentObservationViewModel(0);
  __chkstk_darwin(v4);
  v52 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TimeZone(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v45 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v45 - v15;
  v50 = a2;
  Location.timeZone.getter(v14);
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100025184(v17, (uint64_t)qword_1001D9FF0);
  v19 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 16);
  v20 = v19(v13, v16, v6);
  v48 = v18;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = sub_100025358(12);
    v47 = v16;
    v24 = v6;
    v25 = (uint8_t *)v23;
    v26 = sub_100025358(32);
    v54 = v26;
    *(_DWORD *)v25 = 136446210;
    v46 = v25 + 4;
    v19(v10, v13, v24);
    v27 = String.init<A>(reflecting:)(v10, v24);
    v29 = v28;
    v53 = sub_10016EC84(v27, v28, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v46);
    v30 = swift_bridgeObjectRelease(v29);
    v31 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
    v32 = v24;
    v33 = v24;
    v16 = v47;
    v31(v13, v33, v30);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Building instant weather data model. - timeZone: %{public}s", v25, 0xCu);
    swift_arrayDestroy(v26, 1);
    sub_10002534C(v26);
    sub_10002534C((uint64_t)v25);
  }
  else
  {
    v31 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
    v32 = v6;
    ((void (*)(char *, uint64_t))v31)(v13, v6);
  }

  v34 = v52;
  sub_100104C94(v52);
  v35 = v51;
  UUID.init()(v36);
  v37 = type metadata accessor for InstantWeatherViewModel(0);
  v38 = v35 + *(int *)(v37 + 20);
  v39 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v38, v50, v39);
  v40 = sub_10002246C(v34, v35 + *(int *)(v37 + 24));
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)sub_100025358(2);
    *(_WORD *)v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Built instant weather data model.", v43, 2u);
    sub_10002534C((uint64_t)v43);
  }

  sub_1000A86A0(v34);
  return ((uint64_t (*)(char *, uint64_t))v31)(v16, v32);
}

BOOL static ActiveEvent.__derived_struct_equals(_:_:)(__int16 a1, __int16 a2)
{
  return a1 == a2;
}

uint64_t sub_1000C5A80(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x457972616D697270 && a2 == 0xEC000000746E6576)
  {
    v5 = 0xEC000000746E6576;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x457972616D697270, 0xEC000000746E6576, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7261646E6F636573 && a2 == 0xEE00746E65764579)
  {
    swift_bridgeObjectRelease(0xEE00746E65764579);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7261646E6F636573, 0xEE00746E65764579, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000C5BA8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7261646E6F636573;
  else
    return 0x457972616D697270;
}

uint64_t sub_1000C5BF4()
{
  char *v0;

  return sub_1000C5BA8(*v0);
}

uint64_t sub_1000C5BFC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C5A80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C5C20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C5D90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C5C48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C5D90();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ActiveEvent.encode(to:)(_QWORD *a1, __int16 a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v5 = sub_100005D40(&qword_1001C2F80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100022330(a1, v9);
  v11 = sub_1000C5D90();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ActiveEvent.CodingKeys, &type metadata for ActiveEvent.CodingKeys, v11, v9, v10);
  v19 = a2;
  v18 = 0;
  sub_100048B58();
  sub_1000C625C((uint64_t)&v19, (uint64_t)&v18, v12, (uint64_t)&type metadata for EventType);
  if (!v2)
  {
    v17 = HIBYTE(a2);
    v16 = 1;
    sub_1000C625C((uint64_t)&v17, (uint64_t)&v16, v13, (uint64_t)&type metadata for EventType);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000C5D90()
{
  unint64_t result;

  result = qword_1001C2F88;
  if (!qword_1001C2F88)
  {
    result = swift_getWitnessTable(&unk_10017F7D0, &type metadata for ActiveEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2F88);
  }
  return result;
}

uint64_t ActiveEvent.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  _BYTE v10[2];
  _BYTE v11[2];

  v3 = sub_100005D40(&qword_1001C2F90);
  __chkstk_darwin(v3);
  v4 = a1[3];
  v5 = a1[4];
  sub_100022330(a1, v4);
  v6 = sub_1000C5D90();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ActiveEvent.CodingKeys, &type metadata for ActiveEvent.CodingKeys, v6, v4, v5);
  if (v1)
    return _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
  v11[0] = 0;
  sub_100048BE4();
  sub_1000C6244((uint64_t)&type metadata for EventType, (uint64_t)v11);
  v7 = v11[1];
  v10[0] = 1;
  sub_1000C6244((uint64_t)&type metadata for EventType, (uint64_t)v10);
  sub_1000B76E8();
  v8 = v10[1];
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
  return v7 | (v8 << 8);
}

BOOL sub_1000C5F08(__int16 *a1, __int16 *a2)
{
  return static ActiveEvent.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t sub_1000C5F14@<X0>(_QWORD *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = ActiveEvent.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1000C5F3C(_QWORD *a1)
{
  __int16 *v1;

  return ActiveEvent.encode(to:)(a1, *v1);
}

_WORD *initializeBufferWithCopyOfBuffer for ActiveEvent(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ActiveEvent(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 65286 <= 0xFFFEFFFF)
      v2 = 2;
    else
      v2 = 4;
    if (a2 + 65286 < 0xFF0000)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    else
    {
      v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((_BYTE *)a1 + 2))
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 16)) - 65287;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 7;
  v5 = v6 - 7;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ActiveEvent(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65286 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65286 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000C6038 + 4 * byte_10017F675[v4]))();
  *a1 = a2 - 250;
  return ((uint64_t (*)(void))((char *)sub_1000C606C + 4 * asc_10017F670[v4]))();
}

uint64_t sub_1000C606C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000C6074(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1000C607CLL);
  return result;
}

uint64_t sub_1000C6088(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1000C6090);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000C6094(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000C609C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActiveEvent()
{
  return &type metadata for ActiveEvent;
}

uint64_t storeEnumTagSinglePayload for ActiveEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000C6104 + 4 * byte_10017F67F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C6138 + 4 * byte_10017F67A[v4]))();
}

uint64_t sub_1000C6138(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6140(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C6148);
  return result;
}

uint64_t sub_1000C6154(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C615CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000C6160(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6168(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActiveEvent.CodingKeys()
{
  return &type metadata for ActiveEvent.CodingKeys;
}

unint64_t sub_1000C6188()
{
  unint64_t result;

  result = qword_1001C2F98;
  if (!qword_1001C2F98)
  {
    result = swift_getWitnessTable(&unk_10017F7A8, &type metadata for ActiveEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2F98);
  }
  return result;
}

unint64_t sub_1000C61C8()
{
  unint64_t result;

  result = qword_1001C2FA0;
  if (!qword_1001C2FA0)
  {
    result = swift_getWitnessTable(&unk_10017F718, &type metadata for ActiveEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2FA0);
  }
  return result;
}

unint64_t sub_1000C6208()
{
  unint64_t result;

  result = qword_1001C2FA8;
  if (!qword_1001C2FA8)
  {
    result = swift_getWitnessTable(&unk_10017F740, &type metadata for ActiveEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C2FA8);
  }
  return result;
}

uint64_t sub_1000C6244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000C625C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v4, a4, v5);
}

uint64_t type metadata accessor for WeatherDataOperation(uint64_t a1)
{
  return sub_10000F804(a1, (uint64_t *)&unk_1001C2FF8, (uint64_t)&nominal type descriptor for WeatherDataOperation);
}

uint64_t sub_1000C6284(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v2 = qword_1001DA008;
  result = type metadata accessor for Location(319);
  if (v4 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[2] = "(";
    v6[3] = "(";
    v6[4] = &unk_10017F880;
    v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(result - 8) + 64;
      v6[7] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[8] = (char *)&value witness table for Builtin.Int64 + 64;
      result = swift_initClassMetadata2(a1, 0, 9, v6, a1 + v2);
      if (!result)
        return 0;
    }
  }
  return result;
}

id sub_1000C6348()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  objc_class *v31;
  id v32;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  objc_super v42;
  uint64_t v43;
  uint64_t v44;

  sub_100070E5C();
  v43 = v1;
  v44 = v2;
  v38 = v3;
  v37 = (_QWORD *)v4;
  v6 = (uint64_t)v5;
  v34 = v5;
  v35 = v7;
  v41 = v8;
  v9 = sub_1000CD4D8();
  v39 = *(_QWORD *)(v9 - 8);
  v40 = v9;
  sub_1000230F4();
  __chkstk_darwin(v10);
  sub_10002325C();
  v13 = v12 - v11;
  v14 = sub_10002338C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v34 - v19;
  v21 = qword_1001C2FD8;
  v22 = ((uint64_t (*)(_QWORD))type metadata accessor for ProductRequirementsFactory)(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = v0;
  *(_QWORD *)&v0[v21] = ((uint64_t (*)(void))ProductRequirementsFactory.init())();
  *(_QWORD *)&v23[qword_1001C2FE8] = 0x40F5180000000000;
  *(_QWORD *)&v23[qword_1001C2FF0] = 0x40AC200000000000;
  v24 = (uint64_t)&v23[qword_1001C2FB0];
  v25 = sub_100070DE8();
  v36 = *(_QWORD *)(v25 - 8);
  sub_1000CD5A0(v24, v41, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 16));
  v26 = v35;
  *(_QWORD *)&v23[qword_1001C2FB8] = v35;
  sub_100099380(v6, (uint64_t)&v23[qword_1001C2FC0]);
  v27 = v37;
  sub_100099380((uint64_t)v37, (uint64_t)&v23[qword_1001C2FC8]);
  v23[qword_1001C2FD0] = v38;
  v28 = swift_retain(v26);
  v29 = static Date.now.getter(v28);
  v30 = Location.timeZone.getter(v29);
  ((void (*)(uint64_t, __n128))Date.zeroMinutes(timeZone:))(v13, v30);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v13, v40);
  sub_1000232E0((uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v23[qword_1001C2FE0], v20, v14);

  v31 = (objc_class *)type metadata accessor for WeatherDataOperation(0);
  v42.receiver = v23;
  v42.super_class = v31;
  v32 = objc_msgSendSuper2(&v42, "init");
  sub_1000CD56C();
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v27);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v34);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v41, v25);
  return v32;
}

void sub_1000C6594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  void (*v107)(char *, char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  void (*v112)(char *, uint64_t, uint64_t);
  void (*v113)(void);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;

  sub_1000CD49C();
  a21 = v24;
  a22 = v25;
  v118 = v26;
  v122 = v27;
  v28 = sub_1000CD4E8();
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v30 = sub_1000CD210();
  v128 = type metadata accessor for WeatherServiceLocationOptions(v30);
  v125 = *(_QWORD *)(v128 - 8);
  v31 = *(_QWORD *)(v125 + 64);
  v32 = __chkstk_darwin(v128);
  v117 = (char *)&v103 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  sub_100023434();
  v127 = v33;
  sub_100005D40(&qword_1001C0F18);
  sub_1000230F4();
  __chkstk_darwin(v34);
  v36 = (char *)&v103 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_1000CD290();
  v123 = *(_QWORD *)(v37 - 8);
  v124 = v37;
  v38 = __chkstk_darwin(v37);
  v120 = (char *)&v103 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = v39;
  __chkstk_darwin(v38);
  sub_100023434();
  v126 = v40;
  v119 = v22;
  v41 = (void (*)(char *, uint64_t, uint64_t))(v22 + qword_1001C2FB0);
  Location.coordinate.getter(v42);
  Location.coordinate.getter(v43);
  v44 = sub_1000CD5BC(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:");
  v45 = sub_100070EA4((uint64_t)&unk_1001B7B30, 32);
  *(_QWORD *)(v45 + 16) = 0;
  *(_QWORD *)(v45 + 24) = 0;
  v121 = v45;
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v46 = sub_10002538C();
  sub_100025184(v46, (uint64_t)qword_1001D9FF0);
  v47 = v44;
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.default.getter();
  v50 = v49;
  v51 = os_log_type_enabled(v48, v49);
  v116 = (uint64_t)v47;
  if (v51)
  {
    v52 = sub_100025358(22);
    v114 = v31;
    v53 = v52;
    v111 = (_QWORD *)sub_100025358(8);
    *(_DWORD *)v53 = 141558275;
    sub_1000CD580();
    v129 = v54;
    v113 = (void (*)(void))v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v55);
    *(_WORD *)(v53 + 12) = 2113;
    LODWORD(v110) = v50;
    v112 = v41;
    v129 = v47;
    v56 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v53 + 14);
    v57 = (uint64_t)v111;
    *v111 = v47;

    sub_100070F7C((void *)&_mh_execute_header, v48, (os_log_type_t)v110, "About to fetch weather data; location=%{private,mask.hash}@",
      (uint8_t *)v53);
    sub_100005D40(&qword_1001C3188);
    sub_100025444(v57);
    sub_10002534C(v57);
    v58 = v53;
    v31 = v114;
    sub_10002534C(v58);

  }
  else
  {

  }
  v59 = v119;
  v60 = sub_1000CBC4C();
  LODWORD(v114) = v60;
  Location.timeZone.getter(v60);
  v61 = sub_1000CD4D8();
  sub_1000CD3E4(v61);
  v62 = v126;
  v63 = ProductRequirementsFactory.widgetRequiredProducts(for:)(v36);
  sub_1000CD564(v63, &qword_1001C0F18);
  v64 = *(_QWORD *)(v59 + qword_1001C2FC0 + 24);
  v65 = *(_QWORD *)(v59 + qword_1001C2FC0 + 32);
  sub_100022330((_QWORD *)(v59 + qword_1001C2FC0), v64);
  v66 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v64, v65);
  AppConfiguration.locationDecimalPrecision.getter(v66);
  sub_1000232E0(v23, *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
  v67 = sub_1000CD428();
  __chkstk_darwin(v67);
  *(&v103 - 2) = v59;
  v68 = sub_100005D40(&qword_1001C3180);
  v111 = (_QWORD *)firstly<A>(closure:)(sub_1000CCC04, &v103 - 4, v68);
  v69 = sub_100070EA4((uint64_t)&unk_1001B7B58, 24);
  swift_unknownObjectWeakInit(v69 + 16, v59);
  v70 = v125;
  v113 = *(void (**)(void))(v125 + 16);
  v71 = v117;
  v113();
  v72 = v123;
  v112 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 16);
  v112(v120, v62, v124);
  v73 = *(unsigned __int8 *)(v70 + 80);
  v74 = v72;
  v75 = *(unsigned __int8 *)(v72 + 80);
  v76 = (v73 + 56) & ~v73;
  v110 = v76;
  v77 = (v31 + v75 + v76) & ~v75;
  v78 = v77 + v115;
  v108 = v77;
  v115 = v73 | v75 | 7;
  v109 = v78 + 1;
  v105 = v78;
  v79 = (_QWORD *)swift_allocObject(&unk_1001B7B80, v78 + 1, v115);
  v81 = v121;
  v80 = v122;
  v79[2] = v69;
  v79[3] = v80;
  v82 = v118;
  v79[4] = v118;
  v79[5] = v81;
  v83 = (void *)v116;
  v79[6] = v116;
  v84 = (char *)v79 + v76;
  v107 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
  v85 = v71;
  v107(v84, v71, v128);
  v86 = (char *)v79 + v77;
  v106 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
  v87 = v120;
  v88 = v124;
  v106(v86, v120, v124);
  LODWORD(v114) = v114 & 1;
  *((_BYTE *)v79 + v78) = v114;
  v104 = v83;
  swift_retain(v82);
  v89 = swift_retain(v81);
  v90 = (void *)zalgo.getter(v89);
  v91 = v111;
  v116 = Promise.then<A>(on:closure:)(v90, sub_1000CCC90, v79, (char *)&type metadata for () + 8);
  swift_release(v91);
  swift_release(v79);

  v92 = sub_100070EA4((uint64_t)&unk_1001B7B58, 24);
  swift_unknownObjectWeakInit(v92 + 16, v119);
  ((void (*)(char *, uint64_t, uint64_t))v113)(v85, v127, v128);
  v112(v87, v126, v88);
  v93 = (_QWORD *)swift_allocObject(&unk_1001B7BA8, v109, v115);
  v95 = v121;
  v94 = v122;
  v93[2] = v92;
  v93[3] = v94;
  v96 = v104;
  v93[4] = v82;
  v93[5] = v96;
  v93[6] = v95;
  sub_1000CD288((uint64_t)&a17);
  sub_1000CD288((uint64_t)&a16);
  *((_BYTE *)v93 + v105) = v114;
  v97 = v96;
  swift_retain(v82);
  v98 = v95;
  swift_retain(v95);
  v99 = swift_retain(v92);
  v100 = (void *)zalgo.getter(v99);
  v101 = v116;
  v102 = Promise.error(on:closure:)(v100, sub_1000CCD74, v93);

  swift_release(v102);
  swift_release(v101);
  swift_release(v93);

  sub_1000232E0(v127, *(uint64_t (**)(uint64_t, uint64_t))(v125 + 8));
  (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v126, v88);
  swift_release(v98);
  sub_1000CD56C();
  sub_1000CD1DC();
}

uint64_t sub_1000C6C94(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(a1 + qword_1001C2FC8);
  v3 = v2[3];
  v4 = v2[4];
  sub_100022330(v2, v3);
  v5 = dispatch thunk of LocationMetadataManagerType.resolveCountryCode(for:)(a1 + qword_1001C2FB0, v3, v4);
  v6 = Promise.asOptional()();
  swift_release(v5);
  return v6;
}

double sub_1000C6D10(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  void *Strong;
  unsigned __int8 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint8_t *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  double result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t *);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[3];
  _BYTE v90[24];
  char v91[32];
  uint64_t v92;
  uint64_t v93;

  v87 = a4;
  v82 = a7;
  v83 = a8;
  v81 = a6;
  v86 = a3;
  v12 = sub_100005D40(&qword_1001C3190);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for Logger(0);
  v84 = *(_QWORD *)(v15 - 8);
  v85 = v15;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v79 = (char *)&v75 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v75 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v75 - v24;
  v26 = *a1;
  v27 = a1[1];
  a2 += 16;
  swift_beginAccess(a2, v91, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v29 = a9;
    v30 = (_QWORD *)(a5 + 16);
    v80 = Strong;
    v31 = a5 + 16;
    if (!v27)
    {
      swift_beginAccess(v31, v90, 1, 0);
      v47 = *(_QWORD *)(a5 + 24);
      *v30 = 0;
      *(_QWORD *)(a5 + 24) = 0;
      swift_bridgeObjectRelease(v47);
      v49 = static Logger.geocode.getter(v48);
      v50 = Logger.logObject.getter(v49);
      v51 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "countryCode unresolvable", v52, 2u);
        v53 = v52;
        v29 = a9;
        swift_slowDealloc(v53, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v84 + 8))(v18, v85);
      goto LABEL_17;
    }
    if (v27 == 1)
    {
      swift_beginAccess(v31, v90, 1, 0);
      v32 = *(_QWORD *)(a5 + 24);
      *v30 = 0;
      *(_QWORD *)(a5 + 24) = 0;
      swift_bridgeObjectRelease(v32);
      v34 = static Logger.geocode.getter(v33);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "countryCode = nil", v37, 2u);
        v38 = v37;
        v29 = a9;
        swift_slowDealloc(v38, -1, -1);
      }

    }
    else
    {
      swift_beginAccess(v31, v90, 1, 0);
      v54 = *(_QWORD *)(a5 + 24);
      v55 = v26;
      *(_QWORD *)(a5 + 16) = v26;
      *(_QWORD *)(a5 + 24) = v27;
      sub_1000CCE24(v26, v27);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(v54);
      v23 = v79;
      static Logger.geocode.getter(v56);
      v57 = v80;
      sub_1000CCE24(v26, v27);
      v58 = v57;
      v59 = Logger.logObject.getter(v58);
      v60 = static os_log_type_t.default.getter();
      v61 = v60;
      if (os_log_type_enabled(v59, v60))
      {
        v62 = swift_slowAlloc(42, -1);
        v78 = a5;
        HIDWORD(v77) = a9;
        v63 = v62;
        v76 = swift_slowAlloc(64, -1);
        v89[0] = v76;
        *(_DWORD *)v63 = 141558787;
        v92 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v63 + 4);
        *(_WORD *)(v63 + 12) = 2081;
        HIDWORD(v75) = v61;
        swift_bridgeObjectRetain(v27);
        v92 = sub_10016EC84(v55, v27, v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v63 + 14);
        sub_1000CCE38(v55, v27);
        sub_1000CCE38(v55, v27);
        swift_bridgeObjectRelease(v27);
        *(_WORD *)(v63 + 22) = 2160;
        v92 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v63 + 24);
        *(_WORD *)(v63 + 32) = 2081;
        v64 = v59;
        v65 = type metadata accessor for Location(0);
        sub_10002EF14(&qword_1001C31A0, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
        v67 = dispatch thunk of CustomStringConvertible.description.getter(v65, v66);
        v69 = v68;
        v92 = sub_10016EC84(v67, v68, v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v63 + 34);

        swift_bridgeObjectRelease(v69);
        _os_log_impl((void *)&_mh_execute_header, v59, BYTE4(v75), "resolved countryCode=%{private,mask.hash}s for location=%{private,mask.hash}s", (uint8_t *)v63, 0x2Au);
        v70 = v76;
        swift_arrayDestroy(v76, 2);
        swift_slowDealloc(v70, -1, -1);
        v71 = v63;
        v29 = BYTE4(v77);
        a5 = v78;
        swift_slowDealloc(v71, -1, -1);

        (*(void (**)(char *, uint64_t))(v84 + 8))(v79, v85);
LABEL_17:
        swift_beginAccess(v30, v89, 0, 0);
        v73 = *(_QWORD *)(a5 + 16);
        v72 = *(_QWORD *)(a5 + 24);
        swift_bridgeObjectRetain(v72);
        v74 = v80;
        sub_1000C7768(v81, v73, v72, v82, v83, v29 & 1, (uint64_t)v86, v87, v75, v76, v77, v78, (uint64_t)v79, (uint64_t)v80, v81, v82, v83, v84, v85,
          (uint64_t)v86,
          v87,
          v88);

        *(_QWORD *)&result = swift_bridgeObjectRelease(v72).n128_u64[0];
        return result;
      }
      sub_1000CCE38(v55, v27);
      sub_1000CCE38(v55, v27);

    }
    (*(void (**)(char *, uint64_t))(v84 + 8))(v23, v85);
    goto LABEL_17;
  }
  v39 = static Logger.geocode.getter(0);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "countryCode unresolvable; object was released", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v84 + 8))(v25, v85);
  v43 = sub_1000CCDE8();
  v44 = swift_allocError(&type metadata for WeatherDataOperationError, v43, 0, 0);
  *v45 = 0;
  *v14 = v44;
  swift_storeEnumTagMultiPayload(v14, v12, 1);
  v86(v14);
  sub_100016904((uint64_t)v14, &qword_1001C3190);
  return result;
}

void sub_1000C7398(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  void (*v34)(char *, uint64_t);
  uint64_t Strong;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint8_t *v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[8];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[4];

  v56 = a7;
  v57 = a8;
  v54 = a6;
  v55 = a5;
  v53 = sub_100005D40(&qword_1001C3190);
  __chkstk_darwin(v53);
  v14 = (uint64_t *)((char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for Logger(0);
  v59 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v58 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v49 - v19;
  v21 = a2 + 16;
  static Logger.geocode.getter(v18);
  swift_errorRetain(a1);
  v22 = swift_errorRetain(a1);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(12, -1);
    v51 = v14;
    v26 = (uint8_t *)v25;
    v27 = swift_slowAlloc(32, -1);
    v49 = v21;
    v28 = v27;
    v66[0] = v27;
    v52 = a4;
    *(_DWORD *)v26 = 136380675;
    v50 = v15;
    swift_getErrorValue(a1, v63, &v60);
    v29 = Error.localizedDescription.getter(v61, v62);
    v31 = v30;
    v64 = sub_10016EC84(v29, v30, v66);
    v15 = v50;
    a4 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v26 + 4);
    swift_bridgeObjectRelease(v31);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error resolving the country code, using a nil country code; error=%{private}s",
      v26,
      0xCu);
    swift_arrayDestroy(v28, 1);
    v32 = v28;
    v21 = v49;
    swift_slowDealloc(v32, -1, -1);
    v33 = v26;
    v14 = v51;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v34 = *(void (**)(char *, uint64_t))(v59 + 8);
  v34(v20, v15);
  swift_beginAccess(v21, v66, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v21);
  if (Strong)
  {
    v36 = (void *)Strong;
    v37 = v54;
    swift_beginAccess(v54 + 16, &v64, 0, 0);
    v38 = *(_QWORD *)(v37 + 16);
    v39 = *(_QWORD *)(v37 + 24);
    swift_bridgeObjectRetain(v39);
    sub_1000C7768(v55, v38, v39, v56, v57, a9 & 1, (uint64_t)a3, a4, v49, v50, (uint64_t)v51, v52, v53, v54, v55, v56, v57, (uint64_t)v58, v59,
      v60,
      v61,
      v62);

    swift_bridgeObjectRelease(v39);
  }
  else
  {
    v40 = static Logger.geocode.getter(0);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = v15;
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "cannot fetch weather; object was released", v44, 2u);
      v45 = v44;
      v15 = v43;
      swift_slowDealloc(v45, -1, -1);
    }

    v34(v58, v15);
    v46 = sub_1000CCDE8();
    v47 = swift_allocError(&type metadata for WeatherDataOperationError, v46, 0, 0);
    *v48 = 0;
    *v14 = v47;
    swift_storeEnumTagMultiPayload(v14, v53, 1);
    a3(v14);
    sub_100016904((uint64_t)v14, &qword_1001C3190);
  }
}

void sub_1000C7768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[8];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[2];
  _QWORD v121[3];
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  _QWORD v129[2];
  _QWORD v130[2];

  sub_1000CD49C();
  a21 = v25;
  a22 = v26;
  v27 = v22;
  v119 = v28;
  v120[0] = v29;
  v128 = v30;
  v118 = v31;
  v126 = v33;
  v127 = v32;
  v35 = v34;
  v122 = v34;
  v120[1] = v36;
  v37 = sub_1000CD290();
  v38 = sub_10002886C(v37, (uint64_t)v120);
  v114[3] = v39;
  __chkstk_darwin(v38);
  v114[2] = v40;
  v41 = sub_1000232E8((uint64_t)v114 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = type metadata accessor for InstantWeatherQueryOptions.Stride(v41);
  sub_10002886C(v42, (uint64_t)&a20);
  sub_1000CD168(v43);
  __chkstk_darwin(v44);
  sub_1000230E0();
  v46 = sub_1000232E8(v45);
  v47 = type metadata accessor for DateInterval(v46);
  sub_10002886C(v47, (uint64_t)v121);
  sub_1000CD168(v48);
  __chkstk_darwin(v49);
  sub_1000230E0();
  v51 = sub_1000232E8(v50);
  v52 = type metadata accessor for Date(v51);
  sub_10002886C(v52, (uint64_t)&a16);
  sub_1000CD168(v53);
  __chkstk_darwin(v54);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v55);
  sub_100023434();
  sub_100023440(v56);
  v57 = sub_100005D40(&qword_1001C31B8);
  sub_10002886C(v57, (uint64_t)v129);
  sub_1000CD168(v58);
  __chkstk_darwin(v59);
  sub_1000230E0();
  sub_100023440(v60);
  v61 = sub_100005D40(&qword_1001C31C0);
  sub_10002886C(v61, (uint64_t)&v126);
  sub_1000CD168(v62);
  __chkstk_darwin(v63);
  sub_100023440((uint64_t)v114 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65 = sub_100005D40(&qword_1001C31C8);
  sub_10002886C(v65, (uint64_t)&v123);
  sub_1000CD168(v66);
  __chkstk_darwin(v67);
  sub_1000230E0();
  v117 = v68;
  v69 = sub_100005D40(&qword_1001C31D0);
  sub_10002886C(v69, (uint64_t)&a11);
  sub_1000CD168(v70);
  __chkstk_darwin(v71);
  sub_1000230E0();
  v121[2] = v72;
  v73 = sub_100005D40(&qword_1001C31F0);
  sub_10002886C(v73, (uint64_t)&a9);
  sub_1000CD168(v74);
  __chkstk_darwin(v75);
  sub_1000230E0();
  v121[1] = v76;
  v115 = sub_100005D40(&qword_1001C31D8);
  sub_1000CD168(*(_QWORD *)(v115 - 8));
  __chkstk_darwin(v77);
  sub_1000230E0();
  v116 = v78;
  v79 = sub_100005D40(&qword_1001C31E0);
  sub_10002886C(v79, (uint64_t)v130);
  sub_1000CD168(v80);
  __chkstk_darwin(v81);
  sub_1000CD39C(v82, v114[0]);
  sub_100005D40(&qword_1001C31F8);
  sub_1000230F4();
  __chkstk_darwin(v83);
  sub_1000230E0();
  v125 = v84;
  v85 = sub_1000CD4E8();
  v123 = *(_QWORD *)(v85 - 8);
  v124 = v85;
  sub_1000230F4();
  __chkstk_darwin(v86);
  v87 = sub_1000CD210();
  v88 = type metadata accessor for WeatherServiceCaching.Options(v87);
  sub_1000230F4();
  __chkstk_darwin(v89);
  v91 = (char *)v114 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005D40(&qword_1001C3200);
  sub_1000230F4();
  __chkstk_darwin(v92);
  sub_100023374();
  sub_100005D40(&qword_1001C0F18);
  sub_1000230F4();
  __chkstk_darwin(v93);
  v95 = (char *)v114 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_1000CD4E0();
  v129[0] = *(_QWORD *)(v96 - 8);
  v129[1] = v96;
  v97 = *(_QWORD *)(v129[0] + 64);
  __chkstk_darwin(v96);
  sub_100023440((uint64_t)v114 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v98);
  v99 = swift_bridgeObjectRetain(v35);
  Location.timeZone.getter(v99);
  v100 = sub_1000CD4D8();
  sub_1000CD3E4(v100);
  v101 = sub_1000CD32C();
  sub_1000CD634(v23, v126, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 16));
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v23, 0, 1, v101);
  v130[0] = &_swiftEmptyArrayStorage;
  sub_10002EF14((unint64_t *)&qword_1001C3210, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherServiceCaching.Options, (uint64_t)&protocol conformance descriptor for WeatherServiceCaching.Options);
  v103 = v102;
  v104 = sub_100005D40(&qword_1001C3218);
  v105 = sub_1000CCE4C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v130, v104, v105, v88, v103);
  v106 = *(_QWORD *)(v27 + qword_1001C2FC0 + 24);
  v107 = *(_QWORD *)(v27 + qword_1001C2FC0 + 32);
  sub_100022330((_QWORD *)(v27 + qword_1001C2FC0), v106);
  v108 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v106, v107);
  v109 = AppConfiguration.treatmentIDs.getter(v108);
  (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v24, v124);
  v110 = type metadata accessor for WeatherNetworkActivity(0);
  v111 = v125;
  sub_1000CD60C(v125, v112, v113, v110);
  WeatherServiceFetchOptions.init(countryCode:timeZone:locationOptions:cachingOptions:treatmentIdentifiers:networkActivity:needsMarineData:needsTwilightData:)(v127, v122, v95, v23, v91, v109, v111, 0, (_BYTE)v128);
  __asm { BR              X11 }
}

void sub_1000C7C98()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD);
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void (*v21)(char *, _QWORD, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD);
  uint64_t v27;
  uint64_t (*v28)(uint64_t, _QWORD);

  v5 = *(_QWORD *)(v4 - 320);
  static Date.now.getter();
  v6 = *(double *)&v1[qword_1001C2FF0] * 4.0;
  sub_1000CD3D8();
  v7 = *(_QWORD *)(v4 - 504);
  sub_1000CD5C8(v7, v5, v8);
  DateInterval.init(start:duration:)(v7, v6);
  *(_QWORD *)(v4 - 144) = *(_QWORD *)&v1[qword_1001C2FB8];
  **(_QWORD **)(v4 - 280) = 10;
  v9 = *(void (**)(void))(*(_QWORD *)(v4 - 272) + 104);
  *(_QWORD *)(v4 - 136) = v3;
  v9();
  v10 = *(_QWORD *)(v4 - 488);
  v11 = *(_QWORD *)(v4 - 480);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v10 + 16))(*(_QWORD *)(v4 - 312), *(_QWORD *)(v4 - 240), v11);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v4 - 328), *(_QWORD *)(v4 - 136), *(_QWORD *)(v4 - 120));
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = v0;
  v14 = (v12 + 48) & ~v12;
  v15 = *(unsigned __int8 *)(v13 + 80);
  v16 = (*(_QWORD *)(v4 - 496) + v15 + v14) & ~v15;
  v17 = (char *)swift_allocObject(&unk_1001B7BD0, v16 + v2, v12 | v15 | 7);
  v18 = *(_QWORD *)(v4 - 232);
  v19 = *(_QWORD *)(v4 - 224);
  *((_QWORD *)v17 + 2) = v1;
  *((_QWORD *)v17 + 3) = v18;
  v20 = *(void **)(v4 - 216);
  *((_QWORD *)v17 + 4) = v19;
  *((_QWORD *)v17 + 5) = v20;
  v21 = *(void (**)(char *, _QWORD, uint64_t))(v10 + 32);
  v22 = *(_QWORD *)(v4 - 120);
  v21(&v17[v14], *(_QWORD *)(v4 - 312), v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 32))(&v17[v16], *(_QWORD *)(v4 - 328), v22);
  v23 = v1;
  swift_retain(v19);
  WeatherService.fetchInstantWeather(for:spanning:stride:with:completion:)(v20, *(_QWORD *)(v4 - 288), *(_QWORD *)(v4 - 280), *(_QWORD *)(v4 - 136), sub_1000CCF1C, v17);
  sub_1000CD56C();
  v24 = sub_1000CD460();
  v25 = *(_QWORD *)(v4 - 136);
  v26(v24, *(_QWORD *)(v4 - 264));
  v27 = sub_1000CD450();
  sub_100028948(v27, v28);
  sub_100028948(*(_QWORD *)(v4 - 320), *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 304) + 8));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v25, v22);
  sub_1000CD1DC();
}

void sub_1000C816C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, _QWORD *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  void (*v49)(void);
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  void (*v71)(char *, char *, uint64_t);
  void (*v72)(void);
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  void (*v96)(uint64_t *);

  v96 = a3;
  v89 = a2;
  v94 = sub_100005D40(&qword_1001C3190);
  __chkstk_darwin(v94);
  v7 = (uint64_t *)((char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v87 = type metadata accessor for WeatherDataOperationResult(0);
  __chkstk_darwin(v87);
  v92 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WeatherDataModel(0);
  v90 = *(_QWORD *)(v9 - 8);
  v91 = v9;
  __chkstk_darwin(v9);
  v88 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005D40(&qword_1001C3230);
  v12 = __chkstk_darwin(v11);
  v86 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v95 = (char *)&v70 - v15;
  v16 = __chkstk_darwin(v14);
  v93 = (char *)&v70 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v70 - v18;
  v20 = sub_100005D40(&qword_1001C3238);
  __chkstk_darwin(v20);
  v22 = (void (**)(char *, char *, uint64_t))((char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000CD008(a1, (uint64_t)v22, &qword_1001C3238);
  if (swift_getEnumCaseMultiPayload(v22, v20) == 1)
  {
    swift_errorRelease(*v22);
    v23 = sub_1000CCDE8();
    v24 = swift_allocError(&type metadata for WeatherDataOperationError, v23, 0, 0);
    *v25 = 0;
    *v7 = v24;
    swift_storeEnumTagMultiPayload(v7, v94, 1);
    v96(v7);
    v26 = &qword_1001C3190;
    v27 = (uint64_t)v7;
  }
  else
  {
    v28 = *(int *)(v11 + 48);
    v29 = &v19[v28];
    v30 = *(int *)(v11 + 64);
    v31 = &v19[v30];
    v84 = &v19[v30];
    v85 = &v19[v28];
    v83 = a4;
    v32 = (char *)v22 + v28;
    v80 = (char *)v22 + v30;
    v33 = type metadata accessor for CurrentWeather(0);
    v82 = v7;
    v74 = v33;
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(void (**)(char *, _QWORD *, uint64_t))(v34 + 32);
    v78 = v34;
    v35(v19, v22, v33);
    v36 = sub_100005D40(&qword_1001C2DF8);
    v37 = *(_QWORD *)(v36 - 8);
    v38 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v76 = v37;
    v38(v29, v32, v36);
    v39 = sub_100005D40(&qword_1001BF9D0);
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    v77 = v40;
    v41(v31, v80, v39);
    v42 = &v93[*(int *)(v11 + 48)];
    v79 = &v93[*(int *)(v11 + 64)];
    v43 = v79;
    v80 = v42;
    v72 = *(void (**)(void))(v34 + 16);
    v44 = v74;
    v72();
    v71 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
    v45 = v85;
    v71(v42, v85, v36);
    v70 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
    v46 = v84;
    v70(v43, v84, v39);
    v73 = &v95[*(int *)(v11 + 48)];
    v47 = v73;
    v75 = &v95[*(int *)(v11 + 64)];
    v48 = v75;
    v81 = v19;
    v49 = v72;
    v72();
    v50 = v47;
    v51 = v45;
    v52 = v36;
    v53 = v71;
    v71(v50, v51, v36);
    v54 = v70;
    v70(v48, v46, v39);
    v55 = v86;
    v56 = &v86[*(int *)(v11 + 48)];
    v57 = &v86[*(int *)(v11 + 64)];
    ((void (*)(char *, char *, uint64_t))v49)(v86, v19, v44);
    v53(v56, v85, v52);
    v54(v57, v84, v39);
    v58 = v88;
    WeatherDataModel.init(currentWeather:hourlyForecast:dailyForecast:)(v93, v73, v57);
    v59 = *(void (**)(char *, uint64_t))(v76 + 8);
    v59(v56, v52);
    v60 = *(void (**)(char *, uint64_t))(v78 + 8);
    v60(v55, v44);
    v61 = *(void (**)(char *, uint64_t))(v77 + 8);
    v61(v75, v39);
    v60(v95, v44);
    v61(v79, v39);
    v59(v80, v52);
    v63 = v90;
    v62 = v91;
    v64 = (uint64_t)v92;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v92, v58, v91);
    v65 = type metadata accessor for WeatherDataOperationResult.Data(0);
    swift_storeEnumTagMultiPayload(v64, v65, 2);
    v66 = v89 + qword_1001C2FB0;
    v67 = v64 + *(int *)(v87 + 20);
    v68 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v67, v66, v68);
    v69 = (uint64_t)v82;
    sub_1000CCFC4(v64, (uint64_t)v82);
    swift_storeEnumTagMultiPayload(v69, v94, 0);
    v96((uint64_t *)v69);
    sub_100016904(v69, &qword_1001C3190);
    sub_100011894(v64, type metadata accessor for WeatherDataOperationResult);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v58, v62);
    v26 = &qword_1001C3230;
    v27 = (uint64_t)v81;
  }
  sub_100016904(v27, v26);
}

void sub_1000C8708(uint64_t a1, char a2, char *a3, void (*a4)(_QWORD), uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  _QWORD *v41;
  id v42;
  void (*v43)(_QWORD);
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  void (*v97)(_QWORD);
  uint64_t v98;
  uint64_t v99;

  v91 = a8;
  v75 = a6;
  v92 = a5;
  v97 = a4;
  v11 = sub_100005D40(&qword_1001C31B8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v90 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005D40(&qword_1001C31C0);
  v88 = *(_QWORD *)(v14 - 8);
  v89 = v14;
  __chkstk_darwin(v14);
  v87 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005D40(&qword_1001C31C8);
  v85 = *(_QWORD *)(v16 - 8);
  v86 = v16;
  __chkstk_darwin(v16);
  v84 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005D40(&qword_1001C31D0);
  v82 = *(_QWORD *)(v18 - 8);
  v83 = v18;
  __chkstk_darwin(v18);
  v96 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005D40(&qword_1001C31F0);
  v80 = *(_QWORD *)(v20 - 8);
  v81 = v20;
  __chkstk_darwin(v20);
  v95 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100005D40(&qword_1001C31D8);
  v78 = *(_QWORD *)(v22 - 8);
  v79 = v22;
  __chkstk_darwin(v22);
  v94 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100005D40(&qword_1001C31E0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v93 = (char *)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100005D40(&qword_1001C3190);
  __chkstk_darwin(v25);
  v27 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for WeatherDataOperationResult(0);
  __chkstk_darwin(v28);
  v30 = (char **)((char *)&v72 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a2 & 1) != 0)
  {
    v72 = a3;
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v73 = v12;
    v74 = v11;
    v35 = type metadata accessor for Logger(0);
    sub_100025184(v35, (uint64_t)qword_1001D9FF0);
    v36 = v75;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    v39 = os_log_type_enabled(v37, v38);
    v75 = v36;
    if (v39)
    {
      v40 = swift_slowAlloc(22, -1);
      v41 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v40 = 141558275;
      v98 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v40 + 4);
      *(_WORD *)(v40 + 12) = 2113;
      v98 = (uint64_t)v36;
      v42 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v40 + 14);
      *v41 = v36;

      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed to interpolate, falling back to aggregate fetch from WDS; location=%{private,mask.hash}@",
        (uint8_t *)v40,
        0x16u);
      sub_100005D40(&qword_1001C3188);
      swift_arrayDestroy(v41, 1);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

    }
    v43 = v97;
    v44 = v72;
    v97 = *(void (**)(_QWORD))&v72[qword_1001C2FB8];
    v45 = v92;
    v46 = ProductRequirementsFactory.WidgetRequiredProducts.current.getter();
    v47 = ProductRequirementsFactory.WidgetRequiredProducts.minutely.getter(v46);
    v48 = ProductRequirementsFactory.WidgetRequiredProducts.hourly.getter(v47);
    v49 = ProductRequirementsFactory.WidgetRequiredProducts.daily.getter(v48);
    v50 = v84;
    v51 = ProductRequirementsFactory.WidgetRequiredProducts.airQuality.getter(v49);
    v52 = v87;
    v53 = ProductRequirementsFactory.WidgetRequiredProducts.changes.getter(v51);
    v54 = v90;
    ProductRequirementsFactory.WidgetRequiredProducts.alerts.getter(v53);
    v55 = (_QWORD *)swift_allocObject(&unk_1001B7C48, 40, 7);
    v55[2] = v44;
    v55[3] = v43;
    v55[4] = v45;
    v56 = type metadata accessor for CurrentWeather(0);
    v57 = v44;
    swift_retain(v45);
    v58 = sub_100005D40(&qword_1001BF9E8);
    v59 = sub_100005D40(&qword_1001C2DF8);
    v60 = sub_100005D40(&qword_1001BF9D0);
    v61 = sub_100005D40(&qword_1001BFB60);
    v62 = sub_100005D40(&qword_1001BF9D8);
    v63 = sub_100005D40(&qword_1001C3228);
    v70 = v60;
    v71 = v61;
    v69 = v59;
    v68 = v56;
    v64 = v93;
    v65 = v94;
    v66 = v95;
    v67 = v96;
    WeatherService.fetchWeather<A, B, C, D, E, F, G>(for:including:_:_:_:_:_:_:options:completion:)(v75, v93, v94, v95, v96, v50, v52, v54, v91, sub_1000CD164, v55, v68, v58, v69, v70, v71, v62, v63);
    swift_release(v55);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v54, v74);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v52, v89);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v50, v86);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v67, v83);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v66, v81);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v65, v79);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v64, v77);
  }
  else
  {
    *v30 = a1;
    v31 = type metadata accessor for WeatherDataOperationResult.Data(0);
    swift_storeEnumTagMultiPayload(v30, v31, 1);
    v32 = &a3[qword_1001C2FB0];
    v33 = (char *)v30 + *(int *)(v28 + 20);
    v34 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v33, v32, v34);
    sub_1000CCFC4((uint64_t)v30, (uint64_t)v27);
    swift_storeEnumTagMultiPayload(v27, v25, 0);
    swift_bridgeObjectRetain(a1);
    v97(v27);
    sub_100016904((uint64_t)v27, &qword_1001C3190);
    sub_100011894((uint64_t)v30, type metadata accessor for WeatherDataOperationResult);
  }
}

void sub_1000C8DD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD *);
  uint64_t v56;
  void (*v57)(uint64_t, char *);
  uint64_t v58;
  void (*v59)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t));
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(void);
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD v168[2];
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void (*v180)(uint64_t *);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void (*v195)(uint64_t, uint64_t, uint64_t);
  void (*v196)(uint64_t, uint64_t, uint64_t);
  void (*v197)(void);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;

  sub_100070E5C();
  v203 = v1;
  v204 = v2;
  v180 = v3;
  v181 = v4;
  v175 = v5;
  v7 = v6;
  v179 = sub_100005D40(&qword_1001C3190);
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_10002325C();
  v11 = (uint64_t *)(v10 - v9);
  v173 = sub_1000CD648();
  sub_1000230F4();
  __chkstk_darwin(v12);
  v13 = sub_1000CD210();
  v14 = type metadata accessor for WeatherDataModel(v13);
  sub_10002886C(v14, (uint64_t)&v202);
  sub_1000CD168(v15);
  __chkstk_darwin(v16);
  sub_100023440((uint64_t)&v134 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = (int *)sub_100005D40(&qword_1001C31A8);
  sub_1000230F4();
  __chkstk_darwin(v19);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v20);
  sub_1000232B4();
  v187 = v21;
  sub_100023164();
  __chkstk_darwin(v22);
  sub_1000232B4();
  v188 = v23;
  sub_100023164();
  __chkstk_darwin(v24);
  sub_1000232B4();
  v189 = v25;
  sub_100023164();
  __chkstk_darwin(v26);
  sub_1000232B4();
  v190 = v27;
  sub_100023164();
  __chkstk_darwin(v28);
  sub_1000232B4();
  v191 = v29;
  sub_100023164();
  __chkstk_darwin(v30);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v31);
  sub_100023434();
  v33 = v32;
  v34 = sub_100005D40(&qword_1001C31B0);
  sub_1000230F4();
  __chkstk_darwin(v35);
  sub_10002325C();
  v38 = (_QWORD *)(v37 - v36);
  sub_1000CD008(v7, v37 - v36, &qword_1001C31B0);
  if (swift_getEnumCaseMultiPayload(v38, v34) == 1)
  {
    swift_errorRelease(*v38);
    v39 = sub_1000CCDE8();
    v40 = swift_allocError(&type metadata for WeatherDataOperationError, v39, 0, 0);
    *v41 = 0;
    *v11 = v40;
    swift_storeEnumTagMultiPayload(v11, v179, 1);
    v180(v11);
    v42 = &qword_1001C3190;
    v43 = (uint64_t)v11;
  }
  else
  {
    v44 = v18[12];
    v45 = v33 + v44;
    v198 = v33 + v44;
    v46 = v18[16];
    v47 = v33 + v46;
    v48 = v18[20];
    v193 = v33 + v48;
    v49 = v18[24];
    v50 = v33 + v49;
    v51 = v18[28];
    v182 = v33 + v49;
    v183 = v33 + v51;
    v52 = (uint64_t)v38 + v44;
    v162 = v0;
    v197 = (void (*)(void))v18[32];
    v53 = (char *)v38 + v46;
    v195 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)v38 + v48);
    v163 = v11;
    v54 = (uint64_t)v38 + v49;
    v196 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)v38 + v51);
    v194 = type metadata accessor for CurrentWeather(0);
    sub_1000CD4FC(*(_QWORD *)(v194 - 8));
    v55(v33, v38);
    sub_1000168AC(v52, v45, &qword_1001BF9E8);
    v192 = sub_100005D40(&qword_1001C2DF8);
    sub_1000CD4FC(*(_QWORD *)(v192 - 8));
    v56 = v47;
    v184 = v47;
    v57(v47, v53);
    v185 = sub_100005D40(&qword_1001BF9D0);
    sub_1000CD4FC(*(_QWORD *)(v185 - 8));
    v58 = v193;
    v59(v193, v195);
    sub_1000168AC(v54, v50, &qword_1001BFB60);
    v60 = v183;
    sub_1000168AC((uint64_t)v196, v183, &qword_1001BF9D8);
    v186 = *(_QWORD *)((char *)v197 + (_QWORD)v38);
    v199 = v33;
    *(_QWORD *)((char *)v197 + v33) = v186;
    v61 = v178;
    v161 = v178 + v18[12];
    v62 = v161;
    v160 = v178 + v18[16];
    v63 = v160;
    v159 = v178 + v18[20];
    v64 = v159;
    v158 = v178 + v18[24];
    v65 = v158;
    sub_1000CD518(v178 + v18[28]);
    v169 = v66;
    sub_1000CD3D8();
    v197 = (void (*)(void))v67;
    sub_1000CD634(v61, v68, v67);
    sub_1000CD008(v198, v62, &qword_1001BF9E8);
    sub_1000CD3D8();
    v195 = v69;
    v69(v63, v56, v192);
    sub_1000CD3D8();
    v196 = v70;
    v70(v64, v58, v185);
    v71 = v182;
    sub_1000CD008(v182, v65, &qword_1001BFB60);
    v72 = v60;
    sub_1000CD008(v60, v171, &qword_1001BF9D8);
    *(_QWORD *)(v61 + v169) = v186;
    v149 = v191 + v18[12];
    v73 = v149;
    v157 = v191 + v18[16];
    v156 = v191 + v18[20];
    v155 = v191 + v18[24];
    v74 = v155;
    sub_1000CD628();
    sub_1000CD518(v75);
    v167 = v76;
    v197();
    sub_1000CD008(v198, v73, &qword_1001BF9E8);
    sub_1000CD440();
    sub_1000CD438();
    sub_1000CD008(v71, v74, &qword_1001BFB60);
    sub_1000CD008(v72, v169, &qword_1001BF9D8);
    v77 = v186;
    v78 = v190;
    *(_QWORD *)(v191 + v167) = v186;
    v154 = v78 + v18[12];
    v79 = v154;
    v147 = v78 + v18[16];
    v153 = v78 + v18[20];
    v152 = v78 + v18[24];
    v80 = v152;
    sub_1000CD628();
    sub_1000CD518(v81);
    v166 = v82;
    sub_1000CD414(v83, v199);
    v84 = v198;
    sub_1000CD008(v198, v79, &qword_1001BF9E8);
    sub_1000CD440();
    sub_1000CD438();
    v85 = v182;
    sub_1000CD008(v182, v80, &qword_1001BFB60);
    v86 = v183;
    sub_1000CD008(v183, v167, &qword_1001BF9D8);
    v87 = v189;
    *(_QWORD *)(v190 + v166) = v77;
    v151 = v87 + v18[12];
    v88 = v151;
    v150 = v87 + v18[16];
    v89 = v150;
    v142 = v87 + v18[20];
    v148 = v87 + v18[24];
    v90 = v148;
    sub_1000CD628();
    sub_1000CD518(v91);
    v165 = v92;
    sub_1000CD414(v93, v199);
    sub_1000CD008(v84, v88, &qword_1001BF9E8);
    v94 = v89;
    v95 = v192;
    v96 = v195;
    v195(v94, v184, v192);
    sub_1000CD438();
    sub_1000CD008(v85, v90, &qword_1001BFB60);
    sub_1000CD008(v86, v166, &qword_1001BF9D8);
    sub_1000CD65C(v189);
    v99 = v97 + v98;
    v146 = v97 + v98;
    v145 = v97 + v18[16];
    v100 = v145;
    v144 = v97 + v18[20];
    v101 = v144;
    v138 = v97 + v18[24];
    v102 = v138;
    v143 = v97 + v18[28];
    v103 = v143;
    v165 = v18[32];
    v104 = v197;
    v197();
    sub_1000CD008(v198, v99, &qword_1001BF9E8);
    v96(v100, v184, v95);
    v105 = v193;
    v106 = v196;
    v196(v101, v193, v185);
    v107 = v182;
    sub_1000CD008(v182, v102, &qword_1001BFB60);
    sub_1000CD008(v183, v103, &qword_1001BF9D8);
    sub_1000CD65C(v188);
    v110 = v108 + v109;
    v141 = v108 + v109;
    v140 = v108 + v18[16];
    v139 = v108 + v18[20];
    v111 = v139;
    v165 = v108 + v18[24];
    sub_1000CD628();
    sub_1000CD518(v112);
    v137 = v113;
    v104();
    sub_1000CD008(v198, v110, &qword_1001BF9E8);
    sub_1000CD440();
    v106(v111, v105, v185);
    sub_1000CD008(v107, v165, &qword_1001BFB60);
    v114 = v183;
    sub_1000CD008(v183, v164, &qword_1001BF9D8);
    v115 = v186;
    *(_QWORD *)(v187 + v137) = v186;
    v116 = v172;
    v137 = v172 + v18[12];
    v117 = v137;
    v118 = v172 + v18[16];
    v136 = v172 + v18[20];
    v134 = v172 + v18[24];
    v135 = v172 + v18[28];
    v119 = v18[32];
    sub_1000CD414(v172, v199);
    sub_1000CD008(v198, v117, &qword_1001BF9E8);
    v120 = v118;
    sub_1000CD440();
    sub_1000CD438();
    v121 = v134;
    sub_1000CD008(v182, v134, &qword_1001BFB60);
    v122 = v114;
    v123 = v135;
    sub_1000CD008(v122, v135, &qword_1001BF9D8);
    *(_QWORD *)(v116 + v119) = v115;
    swift_bridgeObjectRetain(v115);
    v124 = v174;
    sub_1000CD650(v178, v149, v147, v142, v138);
    sub_100016904(v123, &qword_1001BF9D8);
    sub_100016904(v121, &qword_1001BFB60);
    sub_1000CD204((uint64_t)v168);
    (*(void (**)(uint64_t, uint64_t))(v168[1] + 8))(v120, v192);
    sub_100016904(v137, &qword_1001BF9E8);
    sub_1000CD324(v116);
    sub_1000CD25C((uint64_t)&v196);
    sub_1000CD204((uint64_t)&v170);
    sub_1000CD178((uint64_t)&v171);
    sub_1000CD244((uint64_t)&v172);
    sub_1000CD324(v187);
    sub_1000CD184((uint64_t)&v174);
    sub_1000CD204((uint64_t)&v175);
    sub_1000CD178((uint64_t)&v176);
    sub_1000CD244((uint64_t)&v177);
    sub_1000CD324(v188);
    sub_1000CD184((uint64_t)&v197);
    sub_1000CD25C((uint64_t)&v179);
    sub_1000CD178((uint64_t)&v181);
    sub_1000CD244((uint64_t)&v182);
    sub_1000CD324(v189);
    sub_1000CD184((uint64_t)&v198);
    sub_1000CD25C((uint64_t)&v183);
    sub_1000CD204((uint64_t)&v184);
    sub_1000CD244((uint64_t)&v185);
    sub_1000CD324(v190);
    sub_1000CD184((uint64_t)&v200);
    sub_1000CD25C((uint64_t)&v186);
    sub_1000CD204((uint64_t)&v187);
    sub_1000CD178((uint64_t)&v188);
    sub_1000CD324(v191);
    sub_1000CD184((uint64_t)&v201);
    sub_1000CD25C((uint64_t)&v189);
    sub_1000CD204((uint64_t)&v190);
    sub_1000CD178((uint64_t)&v191);
    sub_1000CD244((uint64_t)&v192);
    v125 = v176;
    v126 = v162;
    v127 = v177;
    sub_1000CD5A0(v162, v124, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v176 + 16));
    v128 = type metadata accessor for WeatherDataOperationResult.Data(0);
    sub_1000CD618(v126, v128);
    v129 = v175 + qword_1001C2FB0;
    v130 = v126 + *(int *)(v173 + 20);
    sub_100070DE8();
    sub_1000CD4C8();
    v131(v130, v129);
    v132 = (uint64_t)v163;
    sub_1000CCFC4(v126, (uint64_t)v163);
    sub_1000CD618(v132, v179);
    v133 = ((uint64_t (*)(uint64_t))v180)(v132);
    sub_1000CD564(v133, &qword_1001C3190);
    sub_100011894(v126, type metadata accessor for WeatherDataOperationResult);
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v124, v127);
    v42 = &qword_1001C31A8;
    v43 = v199;
  }
  sub_100016904(v43, v42);
}

void sub_1000C9A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(void);
  uint64_t HourlyRelative;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(void);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  NSObject *v119;
  os_log_type_t v120;
  _BOOL4 v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  void *v130;
  uint64_t v131;
  os_log_type_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  unsigned int v151;
  NSObject *v152;
  NSObject *v153;
  os_log_type_t v154;
  _BOOL4 v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  NSObject *v162;
  uint64_t v163;
  void (*v164)(_QWORD);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)(void);
  uint64_t (*v180)(void);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  __int128 v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  NSObject *v193;
  char *v194;
  os_log_type_t v195;
  _BOOL4 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  NSObject *v209;
  id v210;
  NSObject *v211;
  os_log_type_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  id v216;
  uint64_t v217;
  id v218;
  os_log_type_t v219;
  uint64_t v221;
  id v222;
  uint64_t v223;
  uint64_t (*v224)(uint64_t, _QWORD);
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  id v229;
  id v230;
  NSObject *v231;
  os_log_type_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  id v237;
  uint64_t v238;
  int *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void (*v253)(uint64_t, uint64_t);
  void (*v254)(uint64_t, uint64_t);
  uint64_t v255;
  void (*v256)(uint64_t, void (*)(void));
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t (*v264)(uint64_t, uint64_t, uint64_t);
  uint64_t v265;
  void (*v266)(void);
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void (*v296)(uint64_t, uint64_t, uint64_t);
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  void (*v305)(void);
  uint64_t v306;
  void (*v307)(void);
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t (*v327)(uint64_t, _QWORD);
  uint64_t v328;
  uint64_t (*v329)(uint64_t, uint64_t, _QWORD);
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t (*v335)(uint64_t, uint64_t, _QWORD);
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  void (*v339)(uint64_t);
  int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t v348;
  int *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  char *v359;
  NSObject *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t v365;
  __int128 v366;
  uint64_t v367;
  uint64_t v368;
  void (*v369)(void);
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  id v380;
  void (*v381)(uint64_t, _QWORD, void (*)(void));
  uint64_t v382;
  NSObject *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  NSObject *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  void (*v405)(void);
  char *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  void (*v416)(void (*)(void), uint64_t);
  void (*v417)(void);
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  _QWORD v426[2];

  sub_1000CD49C();
  a21 = v23;
  a22 = v24;
  v25 = v22;
  v27 = v26;
  v364 = v28;
  v29 = type metadata accessor for WeatherDataModel(0);
  sub_10002886C(v29, (uint64_t)&v376);
  sub_1000CD168(v30);
  __chkstk_darwin(v31);
  sub_1000230E0();
  sub_100023440(v32);
  v349 = (int *)sub_100005D40(&qword_1001C31A8);
  sub_1000230F4();
  __chkstk_darwin(v33);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v34);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v35);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v36);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v37);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v38);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v39);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v40);
  sub_100023434();
  sub_100023440(v41);
  v412 = sub_100005D40(&qword_1001C31B0);
  sub_1000230F4();
  __chkstk_darwin(v42);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v43);
  v45 = (char *)&v341 - v44;
  v46 = sub_100005D40(&qword_1001C31B8);
  sub_10002886C(v46, (uint64_t)&a15);
  sub_1000CD168(v47);
  __chkstk_darwin(v48);
  sub_1000230E0();
  sub_100023440(v49);
  v50 = sub_100005D40(&qword_1001C31C0);
  sub_10002886C(v50, (uint64_t)&a13);
  sub_1000CD168(v51);
  __chkstk_darwin(v52);
  sub_1000230E0();
  sub_100023440(v53);
  v54 = sub_100005D40(&qword_1001C31C8);
  sub_10002886C(v54, (uint64_t)&a11);
  sub_1000CD168(v55);
  __chkstk_darwin(v56);
  sub_1000230E0();
  sub_100023440(v57);
  v58 = sub_100005D40(&qword_1001C31D0);
  sub_10002886C(v58, (uint64_t)&a9);
  sub_1000CD168(v59);
  __chkstk_darwin(v60);
  sub_1000230E0();
  sub_100023440(v61);
  v62 = sub_100005D40(&qword_1001C31D8);
  sub_10002886C(v62, (uint64_t)v426);
  sub_1000CD168(v63);
  __chkstk_darwin(v64);
  sub_1000230E0();
  sub_100023440(v65);
  v66 = sub_100005D40(&qword_1001C31E0);
  sub_10002886C(v66, (uint64_t)&v425);
  sub_1000CD168(v67);
  __chkstk_darwin(v68);
  sub_1000230E0();
  sub_100023440(v69);
  sub_100005D40(&qword_1001C31E8);
  sub_1000230F4();
  __chkstk_darwin(v70);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v71);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v72);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v73);
  v75 = (void (*)(void))((char *)&v341 - v74);
  HourlyRelative = type metadata accessor for WeatherQueryHourlyRelativeRange.RelativeTo(0);
  sub_10002886C(HourlyRelative, (uint64_t)&a17);
  sub_1000CD168(v77);
  __chkstk_darwin(v78);
  sub_100023440((uint64_t)&v341 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0));
  v80 = sub_100005D40(&qword_1001C31F0);
  sub_10002886C(v80, (uint64_t)&v423);
  sub_1000CD168(v81);
  __chkstk_darwin(v82);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v83);
  sub_100023434();
  v419 = v84;
  v418 = sub_10002338C();
  v410 = *(_QWORD *)(v418 - 8);
  sub_1000230F4();
  __chkstk_darwin(v85);
  sub_100023150();
  v417 = v86;
  sub_100023164();
  __chkstk_darwin(v87);
  sub_100023434();
  v409 = v88;
  v89 = sub_1000CD290();
  sub_10002886C(v89, (uint64_t)&v391);
  sub_1000CD168(v90);
  __chkstk_darwin(v91);
  sub_1000CD39C(v92, v341);
  sub_100005D40(&qword_1001C31F8);
  sub_1000230F4();
  __chkstk_darwin(v93);
  sub_1000230E0();
  v95 = sub_1000232E8(v94);
  v387 = type metadata accessor for WeatherServiceCaching.Options(v95);
  sub_1000CD168(*(_QWORD *)(v387 - 8));
  __chkstk_darwin(v96);
  sub_1000230E0();
  sub_100023440(v97);
  sub_100005D40(&qword_1001C3200);
  sub_1000230F4();
  __chkstk_darwin(v98);
  sub_100023440((uint64_t)&v341 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100005D40(&qword_1001C0F18);
  sub_1000230F4();
  __chkstk_darwin(v100);
  sub_10002325C();
  v103 = v102 - v101;
  v104 = sub_1000CD4E0();
  sub_10002886C(v104, (uint64_t)&v394);
  sub_1000CD168(v105);
  __chkstk_darwin(v106);
  sub_1000230E0();
  v414 = v107;
  v416 = (void (*)(void (*)(void), uint64_t))sub_1000CD4E8();
  sub_1000CD168(*((_QWORD *)v416 - 1));
  __chkstk_darwin(v108);
  v109 = sub_1000CD32C();
  sub_10002886C(v109, (uint64_t)&v399);
  sub_1000CD168(v110);
  __chkstk_darwin(v111);
  sub_1000230E0();
  sub_100023440(v112);
  Location.coordinate.getter(v113);
  v406 = (char *)v27;
  Location.coordinate.getter(v114);
  v115 = (char *)sub_1000CD5BC(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:");
  if (qword_1001BEE98 != -1)
LABEL_54:
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v116 = sub_10002538C();
  v117 = sub_100025184(v116, (uint64_t)qword_1001D9FF0);
  v118 = v115;
  v411 = v117;
  v119 = v117;
  Logger.logObject.getter(v118);
  v120 = sub_1000253F8();
  v121 = os_log_type_enabled(v119, v120);
  v413 = v25;
  v369 = v75;
  v359 = v45;
  v383 = v118;
  if (v121)
  {
    v122 = sub_100025358(22);
    v123 = sub_100025358(8);
    v381 = (void (*)(uint64_t, _QWORD, void (*)(void)))v103;
    v124 = (_QWORD *)v123;
    *(_DWORD *)v122 = 141558275;
    v423 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v423, &v424, v122 + 4);
    *(_WORD *)(v122 + 12) = 2113;
    v423 = (uint64_t)v118;
    v125 = v118;
    v25 = v413;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v423, &v424, v122 + 14);
    *v124 = v118;

    sub_100070F7C((void *)&_mh_execute_header, v119, v120, "About to retrieve cached weather data; location=%{private,mask.hash}@",
      (uint8_t *)v122);
    sub_100005D40(&qword_1001C3188);
    sub_100025444((uint64_t)v124);
    v126 = (uint64_t)v124;
    v103 = (uint64_t)v381;
    sub_10002534C(v126);
    sub_10002534C(v122);

  }
  else
  {

  }
  LODWORD(v381) = sub_1000CBC4C();
  v127 = sub_1000CD2A0();
  AppConfiguration.locationDecimalPrecision.getter(v127);
  sub_1000CD298(*(uint64_t (**)(void))(v382 + 8));
  v128 = sub_1000CD428();
  v129 = (id)WCCountryCodeEstimate(v128);
  if (v129)
  {
    v130 = v129;
    v380 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v379 = v131;

  }
  else
  {
    v380 = 0;
    v379 = 0;
  }
  Location.timeZone.getter(v129);
  v132 = sub_1000CD4D8();
  sub_1000CD3F8();
  sub_1000CD3D8();
  v133 = v388;
  v134 = v367;
  v135(v388, v368, v367);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v133, 0, 1, v134);
  v136 = sub_100005D40(&qword_1001C3208);
  v137 = swift_allocObject(v136, ((*(unsigned __int8 *)(v384 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v384 + 80))+ *(_QWORD *)(v384 + 72), *(unsigned __int8 *)(v384 + 80) | 7);
  *(_OWORD *)(v137 + 16) = xmmword_10017BD10;
  static WeatherServiceCaching.Options.allowsExpiredData.getter();
  v423 = v137;
  sub_10002EF14((unint64_t *)&qword_1001C3210, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherServiceCaching.Options, (uint64_t)&protocol conformance descriptor for WeatherServiceCaching.Options);
  v139 = v138;
  v140 = sub_100005D40(&qword_1001C3218);
  v141 = sub_1000CCE4C();
  v142 = v389;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v423, v140, v141, v387, v139);
  v143 = sub_1000CD2A0();
  v144 = AppConfiguration.treatmentIDs.getter(v143);
  sub_1000CD288((uint64_t)&v414);
  v145 = type metadata accessor for WeatherNetworkActivity(0);
  v146 = v390;
  sub_1000CD60C(v390, v147, v148, v145);
  LOBYTE(v340) = v381 & 1;
  v149 = WeatherServiceFetchOptions.init(countryCode:timeZone:locationOptions:cachingOptions:treatmentIdentifiers:networkActivity:needsMarineData:needsTwilightData:)(v380, v379, v103, v133, v142, v144, v146, 0, v340);
  v150 = v413;
  Location.timeZone.getter(v149);
  sub_1000CD3F8();
  ProductRequirementsFactory.widgetRequiredProducts(for:)(v103);
  sub_100016904(v103, &qword_1001C0F18);
  v151 = v150[qword_1001C2FD0];
  v152 = v383;
  if (v151 >> 6 >= 2 && (v151 >> 6 != 3 || v151 != 192))
  {

    goto LABEL_35;
  }
  v347 = v151 >> 6;
  v384 = *(_QWORD *)(v410 + 16);
  ((void (*)(uint64_t, char *, uint64_t))v384)(v409, &v150[qword_1001C2FE0], v418);
  v426[0] = 0;
  v153 = v152;
  sub_1000CD340();
  v154 = sub_1000253F8();
  v155 = sub_1000CD4B8(v154);
  v406 = (char *)v153;
  if (v155)
  {
    v156 = sub_100025358(22);
    v157 = (_QWORD *)sub_100025358(8);
    *(_DWORD *)v156 = 141558275;
    sub_1000CD580();
    v423 = v158;
    sub_1000CD5E4((uint64_t)&v423, v159, v160);
    *(_WORD *)(v156 + 12) = 2113;
    v25 = (char *)(v156 + 14);
    v423 = (uint64_t)v153;
    v161 = v153;
    v162 = v153;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v423, &v424, v156 + 14);
    *v157 = v161;

    sub_100070F7C((void *)&_mh_execute_header, v152, v132, "Attempting to retrieve cached weather data; location=%{private,mask.hash}@",
      (uint8_t *)v156);
    sub_100005D40(&qword_1001C3188);
    sub_100025444((uint64_t)v157);
    sub_10002534C((uint64_t)v157);
    sub_10002534C(v156);
  }
  else
  {

  }
  sub_1000CD58C();
  v163 = v378;
  v164 = *(void (**)(_QWORD))(v378 + 104);
  LODWORD(v382) = enum case for WeatherQueryHourlyRelativeRange.RelativeTo.now(_:);
  v381 = (void (*)(uint64_t, _QWORD, void (*)(void)))v164;
  v164(v25);
  if (!__OFADD__(v426[0], 24))
  {
    v346 = v151;
    static WeatherQuery<A>.hourly(relativeTo:start:end:)(v25, v426[0], v426[0] + 24);
    v165 = sub_1000CD298(*(uint64_t (**)(void))(v163 + 8));
    v388 = *(_QWORD *)&v413[qword_1001C2FB8];
    v166 = ProductRequirementsFactory.WidgetRequiredProducts.current.getter(v165);
    v167 = ProductRequirementsFactory.WidgetRequiredProducts.minutely.getter(v166);
    v168 = ProductRequirementsFactory.WidgetRequiredProducts.daily.getter(v167);
    v169 = ProductRequirementsFactory.WidgetRequiredProducts.airQuality.getter(v168);
    LOBYTE(v170) = v400;
    v171 = ProductRequirementsFactory.WidgetRequiredProducts.changes.getter(v169);
    v103 = v402;
    ProductRequirementsFactory.WidgetRequiredProducts.alerts.getter(v171);
    v172 = type metadata accessor for CurrentWeather(0);
    v173 = sub_100005D40(&qword_1001BF9E8);
    v174 = sub_100005D40(&qword_1001C2DF8);
    v175 = sub_100005D40(&qword_1001BF9D0);
    v176 = sub_100005D40(&qword_1001BFB60);
    v177 = sub_100005D40(&qword_1001BF9D8);
    v376 = sub_100005D40(&qword_1001C3228);
    v377 = v177;
    v340 = v177;
    v378 = v176;
    v387 = v175;
    v390 = v174;
    v379 = v173;
    v389 = v172;
    v178 = v407;
    sub_1000CD574();
    sub_1000CD450();
    sub_1000CD298(v179);
    sub_1000CD298(*(uint64_t (**)(void))(v374 + 8));
    sub_1000CD298(*(uint64_t (**)(void))(v373 + 8));
    sub_1000CD470();
    sub_1000CD298(v180);
    v181 = (uint64_t)v369;
    sub_1000CD298(*(uint64_t (**)(void))(v371 + 8));
    sub_1000CD298(*(uint64_t (**)(void))(v370 + 8));
    v383 = qword_1001C2FF0;
    swift_beginAccess(v426, &v423, 1, 0);
    v182 = sub_1000CD5D0();
    sub_1000CD008(v182, v183, v184);
    v185 = sub_1000CD480(v178);
    if (v187)
    {
      *(_QWORD *)&v186 = 134218499;
      v366 = v186;
      while (1)
      {
        sub_100016904(v178, &qword_1001C31E8);
        if (v426[0] > 18)
          break;
        v75 = v417;
        v188 = v409;
        static Date.- infix(_:_:)(v409, *(double *)((char *)&v383->isa + (_QWORD)v413));
        v25 = *(char **)(v410 + 8);
        ((void (*)(uint64_t, uint64_t))v25)(v188, v418);
        sub_1000CD63C();
        sub_1000CD288((uint64_t)&v416);
        v115 = (char *)(v426[0] + 1);
        v45 = v406;
        if (__OFADD__(v426[0], 1))
        {
          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        ++v426[0];
        v189 = v404;
        v75 = v405;
        v381(v404, v382, v405);
        if (__OFADD__(v115, 24))
          goto LABEL_53;
        v190 = v385;
        static WeatherQuery<A>.hourly(relativeTo:start:end:)(v189, v115, v115 + 24);
        sub_1000CD63C();
        sub_1000CD288((uint64_t)&v412);
        v191 = v391;
        v192 = v419;
        v193 = v392;
        (*(void (**)(uint64_t, NSObject *))(v391 + 8))(v419, v392);
        sub_1000CD634(v192, v190, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v191 + 32));
        v194 = v45;
        sub_1000CD340();
        v195 = sub_1000253F8();
        v196 = os_log_type_enabled(v193, v195);
        v416 = (void (*)(void (*)(void), uint64_t))v25;
        if (v196)
        {
          v197 = sub_100025358(32);
          v198 = sub_100025358(8);
          *(_DWORD *)v197 = v366;
          *(_QWORD *)(v197 + 4) = v426[0];
          *(_WORD *)(v197 + 12) = 2160;
          sub_1000CD580();
          *(_QWORD *)(v197 + 14) = v199;
          *(_WORD *)(v197 + 22) = 2113;
          *(_QWORD *)(v197 + 24) = v194;
          *v200 = v45;

          sub_1000CD538((void *)&_mh_execute_header, v193, v195, "Cache retrieval attempt #%ld; location=%{private,mask.hash}@",
            (uint8_t *)v197);
          sub_100005D40(&qword_1001C3188);
          sub_100025444(v198);
          sub_10002534C(v198);
          v181 = (uint64_t)v369;
          sub_10002534C(v197);
        }
        else
        {

          v193 = v194;
        }

        LOBYTE(v170) = v407;
        v202 = ProductRequirementsFactory.WidgetRequiredProducts.current.getter(v201);
        v176 = v408;
        v203 = ProductRequirementsFactory.WidgetRequiredProducts.minutely.getter(v202);
        v204 = ProductRequirementsFactory.WidgetRequiredProducts.daily.getter(v203);
        v205 = ProductRequirementsFactory.WidgetRequiredProducts.airQuality.getter(v204);
        v103 = v400;
        v206 = ProductRequirementsFactory.WidgetRequiredProducts.changes.getter(v205);
        ProductRequirementsFactory.WidgetRequiredProducts.alerts.getter(v206);
        v340 = v377;
        v178 = v386;
        sub_1000CD574();
        sub_1000CD288((uint64_t)&v407);
        sub_1000CD288((uint64_t)&v406);
        sub_1000CD288((uint64_t)&v405);
        sub_1000CD288((uint64_t)&v404);
        sub_1000CD288((uint64_t)&v403);
        sub_1000CD288((uint64_t)&v402);
        v416(v417, v418);
        sub_100016904(v181, &qword_1001C31E8);
        sub_1000168AC(v178, v181, &qword_1001C31E8);
        v207 = sub_1000CD5D0();
        sub_1000CD008(v207, v208, &qword_1001C31E8);
        v185 = sub_1000CD480(v178);
        if (!v187)
          goto LABEL_26;
      }
    }
    else
    {
LABEL_26:
      sub_1000CD564(v185, &qword_1001C31E8);
    }
    v209 = v360;
    sub_1000CD008(v181, (uint64_t)v360, &qword_1001C31E8);
    sub_1000CD480((uint64_t)v209);
    if (!v187)
    {
      v217 = (uint64_t)v359;
      sub_1000168AC((uint64_t)v209, (uint64_t)v359, &qword_1001C31B0);
      v218 = sub_1000CD600();
      sub_1000CD340();
      v219 = sub_1000253F8();
      if (os_log_type_enabled(v209, v219))
      {
        v221 = sub_100025358(32);
        v176 = sub_100025358(8);
        *(_DWORD *)v221 = 134218499;
        swift_beginAccess(v426, &v420, 0, 0);
        v422 = v426[0];
        v170 = &v423;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v422, &v423, v221 + 4);
        *(_WORD *)(v221 + 12) = 2160;
        v422 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v422, &v423, v221 + 14);
        *(_WORD *)(v221 + 22) = 2113;
        v422 = (uint64_t)v218;
        v222 = v218;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v422, &v423, v221 + 24);
        *(_QWORD *)v176 = v218;

        sub_1000CD538((void *)&_mh_execute_header, v209, v219, "Successfully retrieved for cached weather after %ld iteration; location=%{private,mask.hash}@",
          (uint8_t *)v221);
        sub_100005D40(&qword_1001C3188);
        sub_100025444(v176);
        sub_10002534C(v176);
        sub_10002534C(v221);
      }
      else
      {

      }
      sub_1000CD58C();
      sub_1000CD008(v217, v176, &qword_1001C31B0);
      if (swift_getEnumCaseMultiPayload(v176, v412) != 1)
      {
        v239 = v349;
        v240 = v349[12];
        v241 = v361;
        v242 = v361 + v240;
        v412 = v361 + v240;
        v243 = v349[16];
        v244 = v361 + v243;
        v406 = (char *)(v361 + v243);
        v245 = v349[20];
        v246 = v361 + v245;
        v247 = v349[24];
        v248 = v361 + v247;
        v411 = v361 + v247;
        v249 = v349[28];
        v250 = v361 + v249;
        v417 = (void (*)(void))v349[32];
        v380 = v218;
        v251 = v176 + v240;
        v252 = v176 + v243;
        v405 = (void (*)(void))(v176 + v245);
        v407 = v176 + v247;
        v416 = (void (*)(void (*)(void), uint64_t))(v176 + v249);
        sub_1000CD4FC(*(_QWORD *)(v389 - 8));
        v253(v241, v176);
        sub_1000168AC(v251, v242, &qword_1001BF9E8);
        sub_1000CD4FC(*(_QWORD *)(v390 - 8));
        v254(v244, v252);
        v255 = *(_QWORD *)(v387 - 8);
        v256 = *(void (**)(uint64_t, void (*)(void)))(v255 + 32);
        v378 = v255;
        v256(v246, v405);
        sub_1000168AC(v407, v248, &qword_1001BFB60);
        v257 = v250;
        v408 = v250;
        sub_1000168AC((uint64_t)v416, v250, &qword_1001BF9D8);
        v407 = *(_QWORD *)((char *)v417 + v176);
        *(_QWORD *)((char *)v417 + v241) = v407;
        v258 = v353;
        v393 = v353 + v239[12];
        v259 = v393;
        v388 = v353 + v239[16];
        v260 = v388;
        v386 = v353 + v239[20];
        v261 = v386;
        v385 = v353 + v239[24];
        v262 = v385;
        sub_1000CD334(v353 + v239[28]);
        v402 = v263;
        sub_1000CD3D8();
        v417 = (void (*)(void))v264;
        sub_1000CD5A0(v258, v265, v264);
        sub_1000CD008(v412, v259, &qword_1001BF9E8);
        v266 = *(void (**)(void))(v400 + 16);
        sub_1000CD3B8(v260);
        v405 = v266;
        v416 = *(void (**)(void (*)(void), uint64_t))(v255 + 16);
        v404 = v246;
        v267 = v246;
        v268 = v387;
        ((void (*)(uint64_t, uint64_t, uint64_t))v416)(v261, v267, v387);
        sub_1000CD008(v411, v262, &qword_1001BFB60);
        sub_1000CD008(v257, v403, &qword_1001BF9D8);
        v269 = v407;
        *(_QWORD *)(v258 + v402) = v407;
        v373 = v358 + v239[12];
        v270 = v373;
        v384 = v358 + v239[16];
        v271 = v384;
        v383 = (v358 + v239[20]);
        v382 = v358 + v239[24];
        v272 = v382;
        sub_1000CD4F0();
        sub_1000CD334(v273);
        sub_1000CD508(v274);
        v417();
        v275 = v412;
        sub_1000CD008(v412, v270, &qword_1001BF9E8);
        sub_1000CD3B8(v271);
        sub_1000CD524();
        v276 = v411;
        sub_1000CD008(v411, v272, &qword_1001BFB60);
        v277 = v408;
        sub_1000CD008(v408, v402, &qword_1001BF9D8);
        *(_QWORD *)(v358 + v399) = v269;
        v381 = (void (*)(uint64_t, _QWORD, void (*)(void)))(v357 + v239[12]);
        v278 = (uint64_t)v381;
        *(_QWORD *)&v366 = v357 + v239[16];
        v379 = v357 + v239[20];
        v377 = v357 + v239[24];
        v279 = v377;
        sub_1000CD4F0();
        sub_1000CD334(v280);
        sub_1000CD508(v281);
        sub_1000CD3CC(v282, v283);
        sub_1000CD008(v275, v278, &qword_1001BF9E8);
        sub_1000CD5EC();
        sub_1000CD2CC(v284, v285);
        v286 = v404;
        sub_1000CD524();
        sub_1000CD008(v276, v279, &qword_1001BFB60);
        sub_1000CD008(v277, v399, &qword_1001BF9D8);
        *(_QWORD *)(v357 + v398) = v407;
        v376 = v356 + v239[12];
        v287 = v376;
        v375 = v356 + v239[16];
        v288 = v375;
        v344 = v356 + v239[20];
        v289 = v344;
        v374 = v356 + v239[24];
        v290 = v374;
        sub_1000CD4F0();
        sub_1000CD334(v291);
        sub_1000CD508(v292);
        sub_1000CD3CC(v293, v294);
        sub_1000CD008(v412, v287, &qword_1001BF9E8);
        sub_1000CD2CC(v288, v275);
        v295 = v268;
        v296 = (void (*)(uint64_t, uint64_t, uint64_t))v416;
        ((void (*)(uint64_t, uint64_t, uint64_t))v416)(v289, v286, v295);
        v297 = v411;
        sub_1000CD008(v411, v290, &qword_1001BFB60);
        v298 = sub_1000CD52C();
        sub_1000CD008(v298, v398, &qword_1001BF9D8);
        v299 = v407;
        *(_QWORD *)(v356 + v397) = v407;
        v372 = v355 + v239[12];
        v300 = v372;
        v371 = v355 + v239[16];
        v301 = v371;
        v370 = v355 + v239[20];
        v302 = v370;
        v396 = v355 + v239[24];
        sub_1000CD4F0();
        sub_1000CD334(v303);
        v395 = v304;
        v305 = v417;
        v417();
        v306 = v412;
        sub_1000CD008(v412, v300, &qword_1001BF9E8);
        sub_1000CD5EC();
        v307 = v405;
        v405();
        v296(v302, v404, v387);
        sub_1000CD008(v297, v396, &qword_1001BFB60);
        v308 = sub_1000CD52C();
        sub_1000CD008(v308, v397, &qword_1001BF9D8);
        *(_QWORD *)(v355 + v395) = v299;
        v360 = (v354 + v239[12]);
        v309 = (uint64_t)v360;
        v352 = v354 + v239[16];
        v310 = v352;
        v345 = v354 + v239[20];
        v395 = v354 + v239[24];
        sub_1000CD4F0();
        sub_1000CD334(v311);
        v343 = v312;
        v305();
        sub_1000CD008(v306, v309, &qword_1001BF9E8);
        ((void (*)(uint64_t, uint64_t, uint64_t))v307)(v310, v301, v390);
        v313 = v387;
        sub_1000CD524();
        sub_1000CD008(v411, v395, &qword_1001BFB60);
        v314 = sub_1000CD52C();
        sub_1000CD008(v314, v394, &qword_1001BF9D8);
        *(_QWORD *)(v354 + v343) = v407;
        v315 = v350;
        v343 = v350 + v239[12];
        v316 = v343;
        v342 = v350 + v239[16];
        v317 = v342;
        v318 = v350 + v239[20];
        v319 = v350 + v239[24];
        sub_1000CD334(v350 + v239[28]);
        v349 = v320;
        v321 = v361;
        sub_1000CD3CC(v315, v361);
        sub_1000CD008(v412, v316, &qword_1001BF9E8);
        sub_1000CD2CC(v317, (uint64_t)v406);
        sub_1000CD524();
        sub_1000CD008(v411, v319, &qword_1001BFB60);
        v322 = sub_1000CD52C();
        v323 = v341;
        sub_1000CD008(v322, v341, &qword_1001BF9D8);
        v324 = v407;
        *(_QWORD *)((char *)v349 + v315) = v407;
        swift_bridgeObjectRetain(v324);
        sub_1000CD650(v353, v373, v366, v344, v396);

        sub_100016904(v321, &qword_1001C31A8);
        sub_100016904((uint64_t)v359, &qword_1001C31B0);
        sub_1000CD594(v325, &qword_1001C31E8);
        sub_100028948(v419, *(uint64_t (**)(uint64_t, _QWORD))(v391 + 8));
        sub_1000CD2FC();
        sub_100028948(v415, *(uint64_t (**)(uint64_t, _QWORD))(v362 + 8));
        sub_100028948(v414, *(uint64_t (**)(uint64_t, _QWORD))(v365 + 8));
        v326 = sub_1000CD348();
        sub_100028948(v326, v327);
        sub_100016904(v323, &qword_1001BF9D8);
        sub_100016904(v319, &qword_1001BFB60);
        (*(void (**)(uint64_t, uint64_t))(v378 + 8))(v318, v313);
        sub_1000CD1F8((uint64_t)&v370);
        sub_100016904(v343, &qword_1001BF9E8);
        (*(void (**)(uint64_t, uint64_t))(v401 + 8))(v315, v389);
        sub_1000CD22C((uint64_t)v426);
        sub_1000CD178((uint64_t)&v373);
        sub_1000CD1F8((uint64_t)&v380);
        sub_1000CD238((uint64_t)&v388);
        sub_1000CD250((uint64_t)&v382);
        sub_1000CD184((uint64_t)&a9);
        sub_1000CD178((uint64_t)&v402);
        sub_1000CD1F8((uint64_t)&v403);
        sub_1000CD238((uint64_t)&v404);
        sub_1000CD250((uint64_t)&v383);
        sub_1000CD184((uint64_t)&a10);
        sub_1000CD22C((uint64_t)&v406);
        sub_1000CD1F8((uint64_t)&v407);
        sub_1000CD238((uint64_t)&v408);
        sub_1000CD250((uint64_t)&v384);
        sub_1000CD184((uint64_t)&a11);
        sub_1000CD22C((uint64_t)&v409);
        sub_1000CD178((uint64_t)&v411);
        sub_1000CD238((uint64_t)&v413);
        sub_1000CD250((uint64_t)&v385);
        sub_1000CD184((uint64_t)&a14);
        sub_1000CD22C((uint64_t)&v414);
        sub_1000CD178((uint64_t)&v415);
        sub_1000CD1F8((uint64_t)&v416);
        sub_1000CD250((uint64_t)&v386);
        sub_1000CD184((uint64_t)&a15);
        sub_1000CD22C((uint64_t)&v417);
        sub_1000CD178((uint64_t)&v418);
        sub_1000CD1F8((uint64_t)&v420);
        sub_1000CD238((uint64_t)&v424);
        if (v347 >= 2)
        {
          if (v347 == 2 || v346 != 192)
          {
            v224 = *(uint64_t (**)(uint64_t, _QWORD))(v348 + 8);
            v223 = v351;
            goto LABEL_37;
          }
          v333 = sub_1000CD380();
          sub_1000CD5C8(v333, v334, v335);
          v336 = type metadata accessor for WeatherDataOperationResult.Data(0);
          swift_storeEnumTagMultiPayload(&qword_1001BF9E8, v336, 2);
        }
        else
        {
          v328 = sub_1000CD380();
          sub_1000CD5C8(v328, v351, v329);
          v330 = type metadata accessor for WeatherDataOperationResult.Data(0);
          sub_1000CD618((uint64_t)&qword_1001BF9E8, v330);
        }
        v337 = sub_1000CD648();
        sub_100070DE8();
        sub_1000CD4C8();
        v338 = sub_1000CD63C();
        v339(v338);
        v226 = &qword_1001BF9E8;
        v227 = 0;
        v225 = v337;
        goto LABEL_38;
      }
      v228 = *(_QWORD *)v176;
      v229 = v218;
      sub_1000CD620();
      v230 = v229;
      sub_1000CD620();
      v231 = sub_1000CD340();
      v232 = static os_log_type_t.error.getter();
      if (sub_1000CD4B8(v232))
      {
        v176 = sub_100025358(32);
        v233 = (_QWORD *)sub_100025358(16);
        *(_DWORD *)v176 = 141558531;
        sub_1000CD580();
        v422 = v234;
        sub_1000CD5E4((uint64_t)&v422, v235, v236);
        *(_WORD *)(v176 + 12) = 2113;
        v422 = (uint64_t)v230;
        v237 = v230;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v422, &v423, v176 + 14);
        *v233 = v230;

        *(_WORD *)(v176 + 22) = 2112;
        sub_1000CD620();
        v238 = _swift_stdlib_bridgeErrorToNSError(v228);
        v422 = v238;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v422, &v423, v176 + 24);
        v233[1] = v238;
        v217 = (uint64_t)v359;
        sub_1000CD40C();
        sub_1000CD40C();
        sub_1000CD538((void *)&_mh_execute_header, v231, (os_log_type_t)v170, "Aborting: unexpected error while fetching cached weather data; location=%{private,mask.hash}@, error=%@",
          (uint8_t *)v176);
        sub_100005D40(&qword_1001C3188);
        swift_arrayDestroy(v233, 2);
        sub_10002534C((uint64_t)v233);
        sub_10002534C(v176);
      }
      else
      {

        sub_1000CD40C();
        sub_1000CD40C();

      }
      v331 = v363;
      sub_1000CD58C();
      sub_1000CD40C();

      sub_100016904(v217, &qword_1001C31B0);
      sub_1000CD594(v332, &qword_1001C31E8);
      sub_100028948(v419, *(uint64_t (**)(uint64_t, _QWORD))(v391 + 8));
      sub_1000CD2FC();
      (*(void (**)(uint64_t, uint64_t))(v176 + 8))(v415, v331);
LABEL_36:
      sub_100028948(v414, *(uint64_t (**)(uint64_t, _QWORD))(v365 + 8));
      v223 = sub_1000CD348();
LABEL_37:
      sub_100028948(v223, v224);
      v225 = sub_1000CD648();
      v226 = v364;
      v227 = 1;
LABEL_38:
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v226, v227, 1, v225);
      sub_1000CD1DC();
      return;
    }
    sub_100016904((uint64_t)v209, &qword_1001C31E8);
    v210 = sub_1000CD600();
    v211 = sub_1000CD340();
    v212 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v211, v212))
    {
      v213 = sub_100025358(22);
      v214 = (_QWORD *)sub_100025358(8);
      *(_DWORD *)v213 = 141558275;
      v420 = 1752392040;
      sub_1000CD5E4((uint64_t)&v420, v215, v213 + 4);
      *(_WORD *)(v213 + 12) = 2113;
      v420 = (uint64_t)v210;
      v216 = v210;
      v181 = (uint64_t)v369;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v420, &v421, v213 + 14);
      *v214 = v210;

      sub_100070F7C((void *)&_mh_execute_header, v211, v212, "Aborting: NO cached weather data found; location=%{private,mask.hash}@,",
        (uint8_t *)v213);
      sub_100005D40(&qword_1001C3188);
      sub_100025444((uint64_t)v214);
      sub_10002534C((uint64_t)v214);
      sub_10002534C(v213);
    }
    else
    {

    }
    sub_100016904(v181, &qword_1001C31E8);
    sub_100028948(v419, *(uint64_t (**)(uint64_t, _QWORD))(v391 + 8));
    sub_1000CD2FC();
LABEL_35:
    (*(void (**)(uint64_t, uint64_t))(v362 + 8))(v415, v363);
    goto LABEL_36;
  }
  __break(1u);
}

uint64_t sub_1000CBC4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;

  sub_100070E5C();
  v2 = v1;
  v3 = ((uint64_t (*)(_QWORD))type metadata accessor for WeatherDataServiceConfiguration)(0);
  __chkstk_darwin(v3);
  v4 = sub_1000CD4E8();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100023374();
  if ((*(_BYTE *)(v2 + qword_1001C2FD0) & 0x81) != 1)
    return 0;
  v6 = *(_QWORD *)(v2 + qword_1001C2FC0 + 24);
  v7 = *(_QWORD *)(v2 + qword_1001C2FC0 + 32);
  sub_100022330((_QWORD *)(v2 + qword_1001C2FC0), v6);
  v8 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v6, v7);
  ((void (*)(uint64_t))AppConfiguration.weatherDataService.getter)(v8);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v0, v4);
  v10 = ((uint64_t (*)(uint64_t))WeatherDataServiceConfiguration.needsTwilightData.getter)(v9);
  v11 = sub_1000CD63C();
  v12(v11);
  if ((v10 & 1) == 0)
    return 0;
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v13 = sub_10002538C();
  v14 = sub_100025184(v13, (uint64_t)qword_1001D9FF0);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)sub_100025358(2);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Allowing twilight adjustment...", v17, 2u);
    sub_10002534C((uint64_t)v17);
  }

  return 1;
}

void sub_1000CBE04()
{
  _swift_stdlib_reportUnimplementedInitializer("WeatherWidget.WeatherDataOperation", 34, "init()", 6, 0);
  __break(1u);
}

void sub_1000CBE30()
{
  sub_1000CBE04();
}

uint64_t sub_1000CBE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = sub_100070DE8();
  sub_100016A94(v1);
  swift_release(*(_QWORD *)(v0 + qword_1001C2FB8));
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(v0 + qword_1001C2FC0));
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(v0 + qword_1001C2FC8));
  swift_release(*(_QWORD *)(v0 + qword_1001C2FD8));
  sub_10002338C();
  v2 = sub_1000CD5A8();
  return sub_1000CD420(v2, v3, v4);
}

id sub_1000CBEB8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WeatherDataOperation(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000CBEEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  v2 = a1 + qword_1001C2FB0;
  v3 = sub_100070DE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_release(*(_QWORD *)(a1 + qword_1001C2FB8));
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(a1 + qword_1001C2FC0));
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(a1 + qword_1001C2FC8));
  swift_release(*(_QWORD *)(a1 + qword_1001C2FD8));
  sub_10002338C();
  v4 = sub_1000CD5A8();
  return sub_1000CD420(v4, v5, v6);
}

uint64_t sub_1000CBF80()
{
  return type metadata accessor for WeatherDataOperation(0);
}

uint64_t *sub_1000CBF88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = type metadata accessor for WeatherDataOperationResult.Data(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v7);
    if (EnumCaseMultiPayload == 2)
    {
      v14 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v10 = a1;
      v11 = v7;
      v12 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v9);
      v10 = a1;
      v11 = v7;
      v12 = 1;
    }
    else
    {
      v15 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      v10 = a1;
      v11 = v7;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    v16 = *(int *)(a3 + 20);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t type metadata accessor for WeatherDataOperationResult.Data(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C3148, (uint64_t)&nominal type descriptor for WeatherDataOperationResult.Data);
}

uint64_t sub_1000CC0C8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v4 = type metadata accessor for WeatherDataOperationResult.Data(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v4);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease(*a1);
      break;
    case 0:
LABEL_4:
      v6 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      break;
  }
  v7 = (char *)a1 + *(int *)(a2 + 20);
  v8 = type metadata accessor for Location(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t *sub_1000CC158(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = type metadata accessor for WeatherDataOperationResult.Data(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v12 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
    v9 = a1;
    v10 = v6;
    v11 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v8 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v8);
    v9 = a1;
    v10 = v6;
    v11 = 1;
  }
  else
  {
    v13 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
    v9 = a1;
    v10 = v6;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t *sub_1000CC258(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_100011894((uint64_t)a1, type metadata accessor for WeatherDataOperationResult.Data);
    v6 = type metadata accessor for WeatherDataOperationResult.Data(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v12 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v9 = a1;
      v10 = v6;
      v11 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v8);
      v9 = a1;
      v10 = v6;
      v11 = 1;
    }
    else
    {
      v13 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v9 = a1;
      v10 = v6;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

char *sub_1000CC370(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for WeatherDataOperationResult.Data(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v12 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
    v9 = a1;
    v10 = v6;
    v11 = 2;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_7;
    }
    v8 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    v9 = a1;
    v10 = v6;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
LABEL_7:
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

char *sub_1000CC468(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_100011894((uint64_t)a1, type metadata accessor for WeatherDataOperationResult.Data);
    v6 = type metadata accessor for WeatherDataOperationResult.Data(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v12 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      v9 = a1;
      v10 = v6;
      v11 = 2;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        goto LABEL_8;
      }
      v8 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      v9 = a1;
      v10 = v6;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
LABEL_8:
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t sub_1000CC578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CC584);
}

uint64_t sub_1000CC584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1000CD540();
  if (v7 == (_DWORD)v3)
  {
    v8 = v6;
    v9 = v4;
  }
  else
  {
    v8 = sub_100070DE8();
    v9 = v4 + *(int *)(a3 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, v3, v8);
}

uint64_t sub_1000CC5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CC5E0);
}

uint64_t sub_1000CC5E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v8 = sub_1000CD540();
  if (v9 == a3)
  {
    v10 = v8;
    v11 = v5;
  }
  else
  {
    v10 = sub_100070DE8();
    v11 = v5 + *(int *)(a4 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v11, v4, v4, v10);
}

uint64_t type metadata accessor for WeatherDataOperationResult(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C30A0, (uint64_t)&nominal type descriptor for WeatherDataOperationResult);
}

uint64_t sub_1000CC64C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for WeatherDataOperationResult.Data(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Location(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1000CC6D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v13 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v9 = a1;
      v10 = a3;
      v11 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v8);
      v9 = a1;
      v10 = a3;
      v11 = 1;
    }
    else
    {
      v14 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v9 = a1;
      v10 = a3;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_1000CC7C4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
  {
LABEL_4:
    v4 = type metadata accessor for WeatherDataModel(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    goto LABEL_4;
  }
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *sub_1000CC82C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v11 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    v8 = a1;
    v9 = a3;
    v10 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v7);
    v8 = a1;
    v9 = a3;
    v10 = 1;
  }
  else
  {
    v12 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

uint64_t *sub_1000CC8F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_100011894((uint64_t)a1, type metadata accessor for WeatherDataOperationResult.Data);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = a3;
      v10 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      v12 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

void *sub_1000CC9D4(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v11 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    v8 = a1;
    v9 = a3;
    v10 = 2;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

void *sub_1000CCA94(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_100011894((uint64_t)a1, type metadata accessor for WeatherDataOperationResult.Data);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v8 = a1;
      v9 = a3;
      v10 = 2;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_1000CCB6C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for WeatherDataModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v4);
    return 0;
  }
  return result;
}

uint64_t sub_1000CCBE0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CCC04()
{
  uint64_t v0;

  return sub_1000C6C94(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000CCC1C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000CCC40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100070E5C();
  sub_1000CD32C();
  sub_1000CD268();
  sub_1000CD1A8();
  sub_1000CD448();
  swift_release(*(_QWORD *)(v0 + 40));

  sub_1000CD2EC();
  sub_1000CD2DC();
  return sub_1000CD190(v0, v2, v1);
}

double sub_1000CCC90(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = type metadata accessor for WeatherServiceLocationOptions(0);
  v4 = (*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  type metadata accessor for ProductRequirementsFactory.WidgetRequiredProducts(0);
  sub_1000CD364();
  return sub_1000C6D10(a1, v7, v8, v9, v10, v11, v1 + v4, v1 + v5, *(_BYTE *)(v1 + v6));
}

uint64_t sub_1000CCD24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100070E5C();
  sub_1000CD32C();
  sub_1000CD268();
  sub_1000CD1A8();
  sub_1000CD448();

  swift_release(*(_QWORD *)(v0 + 48));
  sub_1000CD2EC();
  sub_1000CD2DC();
  return sub_1000CD190(v0, v2, v1);
}

void sub_1000CCD74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = sub_1000CD32C();
  v4 = (*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  sub_1000CD290();
  sub_1000CD364();
  sub_1000C7398(a1, v7, v8, v9, v10, v11, v1 + v4, v1 + v5, *(_BYTE *)(v1 + v6));
}

unint64_t sub_1000CCDE8()
{
  unint64_t result;

  result = qword_1001C3198;
  if (!qword_1001C3198)
  {
    result = swift_getWitnessTable(&unk_10017F954, &type metadata for WeatherDataOperationError);
    atomic_store(result, (unint64_t *)&qword_1001C3198);
  }
  return result;
}

uint64_t sub_1000CCE24(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_1000CCE38(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

unint64_t sub_1000CCE4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C3220;
  if (!qword_1001C3220)
  {
    v1 = sub_100005DC4(&qword_1001C3218);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001C3220);
  }
  return result;
}

uint64_t sub_1000CCE90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100070E5C();
  v1 = *(_QWORD *)(sub_1000CD290() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(sub_1000CD4E0() - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((((v2 + 48) & ~v2) + v3 + v5) & ~v5) + *(_QWORD *)(v4 + 64);
  v7 = v2 | v5 | 7;

  sub_1000CD448();
  sub_1000CD2EC();
  sub_1000CD2DC();
  return sub_1000CD190(v0, v6, v7);
}

void sub_1000CCF1C(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(sub_1000CD290() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000CD4E0() - 8) + 80);
  sub_1000C8708(a1, v4, *(char **)(v2 + 16), *(void (**)(_QWORD))(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), v2 + v6, v2 + ((v6 + v7 + v8) & ~v8));
}

void sub_1000CCF98(uint64_t a1)
{
  uint64_t v1;

  sub_1000C816C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_1000CCFA8()
{
  sub_1000C8DD8();
}

uint64_t sub_1000CCFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeatherDataOperationResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000CD008(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t (*v3)(uint64_t, uint64_t);

  sub_100016C78(a1, a2, a3);
  sub_1000CD4C8();
  sub_100016B28(v3);
  sub_100006338();
}

uint64_t sub_1000CD030()
{
  uint64_t v0;

  sub_1000CD448();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t storeEnumTagSinglePayload for WeatherDataOperationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000CD0A4 + 4 * byte_10017F83D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000CD0D8 + 4 * byte_10017F838[v4]))();
}

uint64_t sub_1000CD0D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CD0E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CD0E8);
  return result;
}

uint64_t sub_1000CD0F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CD0FCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000CD100(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CD108(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WeatherDataOperationError()
{
  return &type metadata for WeatherDataOperationError;
}

unint64_t sub_1000CD128()
{
  unint64_t result;

  result = qword_1001C3240;
  if (!qword_1001C3240)
  {
    result = swift_getWitnessTable(&unk_10017F92C, &type metadata for WeatherDataOperationError);
    atomic_store(result, (unint64_t *)&qword_1001C3240);
  }
  return result;
}

void sub_1000CD168(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t sub_1000CD178@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(a1 - 256), v2);
}

void sub_1000CD184(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_100016904(*(_QWORD *)(a1 - 256), v1);
}

uint64_t sub_1000CD190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000CD1A8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000CD1F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(a1 - 256), v2);
}

uint64_t sub_1000CD204@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t);

  return v2(*(_QWORD *)(a1 - 256), v1);
}

uint64_t sub_1000CD210()
{
  return 0;
}

void sub_1000CD22C(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_100016904(*(_QWORD *)(a1 - 256), v1);
}

void sub_1000CD238(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_100016904(*(_QWORD *)(a1 - 256), v1);
}

void sub_1000CD244(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_100016904(*(_QWORD *)(a1 - 256), v1);
}

uint64_t sub_1000CD250@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(a1 - 256), v2);
}

void sub_1000CD25C(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_100016904(*(_QWORD *)(a1 - 256), v1);
}

uint64_t sub_1000CD268()
{
  return type metadata accessor for ProductRequirementsFactory.WidgetRequiredProducts(0);
}

uint64_t sub_1000CD288@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 - 256))();
}

uint64_t sub_1000CD290()
{
  return type metadata accessor for ProductRequirementsFactory.WidgetRequiredProducts(0);
}

uint64_t sub_1000CD298@<X0>(uint64_t (*a1)(void)@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return a1();
}

uint64_t sub_1000CD2A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_100022330(v0, v1);
  return dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v1, v2);
}

uint64_t sub_1000CD2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 288))(a1, a2, v2);
}

uint64_t sub_1000CD2DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
}

uint64_t sub_1000CD2EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_1000CD2FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 248) + 8))(*(_QWORD *)(v0 - 256), *(_QWORD *)(v0 - 184));
}

uint64_t sub_1000CD30C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 - 232);
  v4 = *(_QWORD *)(v2 - 224);
  a1[2] = v1;
  a1[3] = v3;
  a1[4] = v4;
  return type metadata accessor for CurrentWeather(0);
}

uint64_t sub_1000CD324(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000CD32C()
{
  return type metadata accessor for WeatherServiceLocationOptions(0);
}

void sub_1000CD334(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t sub_1000CD340()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000CD348()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 584);
}

uint64_t sub_1000CD380()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 648);
}

void sub_1000CD39C(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000CD3B8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, _QWORD, _QWORD);
  uint64_t v2;

  return v1(a1, *(_QWORD *)(v2 - 280), *(_QWORD *)(v2 - 408));
}

uint64_t sub_1000CD3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 192))(a1, a2, v2);
}

uint64_t sub_1000CD3E4(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, a1);
}

uint64_t sub_1000CD3F8()
{
  uint64_t v0;
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 0, 1, v1);
}

uint64_t sub_1000CD40C()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000CD414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 112))(a1, a2, v2);
}

uint64_t sub_1000CD420(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1000CD428()
{
  uint64_t v0;

  return WeatherServiceLocationOptions.init(decimalPrecision:limitsPrecision:)(v0, 0, 2);
}

uint64_t sub_1000CD438()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 120))();
}

uint64_t sub_1000CD440()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 128))();
}

uint64_t sub_1000CD448()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1000CD450()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CD460()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CD470()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CD480(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, *(_QWORD *)(v1 - 232));
}

BOOL sub_1000CD4B8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000CD4D8()
{
  return type metadata accessor for TimeZone(0);
}

uint64_t sub_1000CD4E0()
{
  return type metadata accessor for WeatherServiceFetchOptions(0);
}

uint64_t sub_1000CD4E8()
{
  return type metadata accessor for AppConfiguration(0);
}

void sub_1000CD4FC(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

void sub_1000CD508(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

void sub_1000CD518(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t sub_1000CD524()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 200))();
}

uint64_t sub_1000CD52C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 264);
}

void sub_1000CD538(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x20u);
}

uint64_t sub_1000CD540()
{
  return type metadata accessor for WeatherDataOperationResult.Data(0);
}

void sub_1000CD564(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100016904(v2, a2);
}

uint64_t sub_1000CD56C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000CD574()
{
  return WeatherService.cachedWeather<A, B, C, D, E, F, G>(for:including:_:_:_:_:_:_:options:)();
}

void sub_1000CD58C()
{
  void *v0;

}

void sub_1000CD594(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100016904(*(_QWORD *)(v2 - 576), a2);
}

uint64_t sub_1000CD5A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000CD5A8()
{
  uint64_t v0;

  return v0;
}

id sub_1000CD5BC(id a1, SEL a2)
{
  double v2;
  double v3;

  return objc_msgSend(a1, a2, v2, v3);
}

uint64_t sub_1000CD5C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 256));
}

uint64_t sub_1000CD5D0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CD5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v3, a3);
}

id sub_1000CD600()
{
  uint64_t v0;

  return *(id *)(v0 - 280);
}

uint64_t sub_1000CD60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 1, 1, a4);
}

uint64_t sub_1000CD618(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 0);
}

uint64_t sub_1000CD620()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_1000CD634@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000CD63C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CD648()
{
  return type metadata accessor for WeatherDataOperationResult(0);
}

uint64_t sub_1000CD650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return WeatherDataModel.init(currentWeather:minuteForecast:hourlyForecast:dailyForecast:airQuality:weatherChanges:weatherAlerts:)(a1, a2, a3, a4, a5, *(_QWORD *)(v5 - 256), v6);
}

void sub_1000CD65C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + *(_QWORD *)(v2 - 376)) = v1;
}

_QWORD *sub_1000CD670(_QWORD *a1, char *a2, uint64_t a3)
{
  char *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _BOOL8 v124;
  uint64_t v125;
  int *v127;
  uint64_t v128;
  char *v129;
  void (*v130)(char *, char *, uint64_t);
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t);
  uint64_t v133;

  v3 = a2;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = a3;
    v7 = type metadata accessor for AggregateWeatherViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v3, 2, v7))
    {
      v8 = type metadata accessor for AdaptiveConditionsComplicationDataStatus(0);
      memcpy(a1, v3, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v10 = type metadata accessor for UUID(0);
      v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
      v11((char *)a1, v3, v10);
      v12 = *(int *)(v7 + 20);
      v13 = (char *)a1 + v12;
      v14 = &v3[v12];
      v15 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      v127 = (int *)v7;
      v16 = *(int *)(v7 + 24);
      v17 = (char *)a1 + v16;
      v18 = &v3[v16];
      v130 = v11;
      v131 = v10;
      v11((char *)a1 + v16, &v3[v16], v10);
      v19 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v20 = v19[5];
      v21 = &v17[v20];
      v22 = &v18[v20];
      v23 = type metadata accessor for Date(0);
      v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      v24(v21, v22, v23);
      v132 = v24;
      v133 = v23;
      v24(&v17[v19[6]], &v18[v19[6]], v23);
      v25 = v19[7];
      v26 = &v17[v25];
      v27 = &v18[v25];
      v28 = sub_100005D40(&qword_1001BF090);
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      v29(v26, v27, v28);
      v29(&v17[v19[8]], &v18[v19[8]], v28);
      v30 = v19[9];
      v31 = &v17[v30];
      v32 = &v18[v30];
      v33 = *((_QWORD *)v32 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v33;
      v34 = v19[10];
      v35 = &v17[v34];
      v36 = &v18[v34];
      swift_bridgeObjectRetain(v33);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v36, 1, v28))
      {
        v37 = sub_100005D40(&qword_1001BF098);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        v29(v35, v36, v28);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v35, 0, 1, v28);
      }
      v38 = v19[11];
      v39 = &v17[v38];
      v40 = &v18[v38];
      v128 = v6;
      v129 = v3;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v18[v38], 1, v28))
      {
        v41 = sub_100005D40(&qword_1001BF098);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        v29(v39, v40, v28);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v28);
      }
      v42 = v19[12];
      v43 = &v17[v42];
      v44 = &v18[v42];
      v130(&v17[v42], &v18[v42], v131);
      v45 = (int *)type metadata accessor for ConditionViewModel(0);
      v46 = v45[5];
      v47 = &v43[v46];
      v48 = &v44[v46];
      v49 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
      v50 = v45[6];
      v51 = &v43[v50];
      v52 = &v44[v50];
      v53 = *((_QWORD *)v52 + 1);
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *((_QWORD *)v51 + 1) = v53;
      v54 = v45[7];
      v55 = &v43[v54];
      v56 = &v44[v54];
      v57 = *((_QWORD *)v56 + 1);
      *(_QWORD *)v55 = *(_QWORD *)v56;
      *((_QWORD *)v55 + 1) = v57;
      v43[v45[8]] = v44[v45[8]];
      v43[v45[9]] = v44[v45[9]];
      v43[v45[10]] = v44[v45[10]];
      *(_QWORD *)&v17[v19[13]] = *(_QWORD *)&v18[v19[13]];
      v58 = v19[14];
      v59 = &v17[v58];
      v60 = &v18[v58];
      v61 = type metadata accessor for CloudAltitudeKind(0);
      v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v57);
      v62(v59, v60, v61);
      v63 = v19[15];
      v64 = &v17[v63];
      v65 = &v18[v63];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v18[v63], 1, v133))
      {
        v66 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        v132(v64, v65, v133);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v133);
      }
      v67 = v19[16];
      v68 = &v17[v67];
      v69 = &v18[v67];
      v3 = v129;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v18[v67], 1, v133))
      {
        v70 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      }
      else
      {
        v132(v68, v69, v133);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v68, 0, 1, v133);
      }
      v71 = v19[17];
      v72 = &v17[v71];
      v73 = &v18[v71];
      v74 = type metadata accessor for UVIndex(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v72, v73, v74);
      v75 = v19[18];
      v76 = &v17[v75];
      v77 = &v18[v75];
      v78 = type metadata accessor for Wind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v76, v77, v78);
      *(_QWORD *)&v17[v19[19]] = *(_QWORD *)&v18[v19[19]];
      v79 = v19[20];
      v80 = &v17[v79];
      v81 = &v18[v79];
      v82 = *((_QWORD *)v81 + 1);
      if (v82)
      {
        *(_QWORD *)v80 = *(_QWORD *)v81;
        *((_QWORD *)v80 + 1) = v82;
        v83 = *((_QWORD *)v81 + 2);
        v84 = *((_QWORD *)v81 + 3);
        v85 = v81[32];
        swift_bridgeObjectRetain(v82);
        sub_100006E58(v83, v84, v85);
        *((_QWORD *)v80 + 2) = v83;
        *((_QWORD *)v80 + 3) = v84;
        v80[32] = v85;
      }
      else
      {
        v86 = *((_OWORD *)v81 + 1);
        *(_OWORD *)v80 = *(_OWORD *)v81;
        *((_OWORD *)v80 + 1) = v86;
        v80[32] = v81[32];
      }
      v87 = v127[7];
      v88 = *(_QWORD *)&v129[v87];
      *(_QWORD *)((char *)a1 + v87) = v88;
      v89 = v127[8];
      v90 = *(_QWORD *)&v129[v89];
      *(_QWORD *)((char *)a1 + v89) = v90;
      v91 = v127[9];
      v92 = (char *)a1 + v91;
      v93 = &v129[v91];
      v94 = (int *)type metadata accessor for AirQualityViewModel(0);
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRetain(v90);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v93, 1, (uint64_t)v94))
      {
        v95 = sub_100005D40(&qword_1001BFA30);
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
      }
      else
      {
        v130(v92, v93, v131);
        v132(&v92[v94[5]], &v93[v94[5]], v133);
        *(_QWORD *)&v92[v94[6]] = *(_QWORD *)&v93[v94[6]];
        v96 = v94[7];
        v97 = &v92[v96];
        v98 = &v93[v96];
        v99 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(v97, v98, v99);
        v100 = v94[8];
        v101 = &v92[v100];
        v102 = &v93[v100];
        v103 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v101, v102, v103);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v92, 0, 1, (uint64_t)v94);
      }
      v104 = v127[10];
      v105 = (char *)a1 + v104;
      v106 = &v129[v104];
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      v6 = v128;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v106, 1, HourPrecipitationChartViewModel))
      {
        v108 = sub_100005D40(&qword_1001BFA38);
        memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v105, v106, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v105, 0, 1, HourPrecipitationChartViewModel);
      }
      v109 = v127[11];
      v110 = *(_QWORD *)&v129[v109];
      *(_QWORD *)((char *)a1 + v109) = v110;
      v111 = v127[12];
      v112 = (char *)a1 + v111;
      v113 = &v129[v111];
      *(_QWORD *)v112 = *(_QWORD *)v113;
      *((_WORD *)v112 + 4) = *((_WORD *)v113 + 4);
      v114 = v127[13];
      v115 = (char *)a1 + v114;
      v116 = &v129[v114];
      v117 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain(v110);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v116, 1, v117))
      {
        v118 = sub_100005D40(&qword_1001BFA28);
        memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 16))(v115, v116, v117);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v117);
      }
      v119 = v127[14];
      v120 = (char *)a1 + v119;
      v121 = &v129[v119];
      v122 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v121, 1, v122))
      {
        v123 = sub_100005D40(&qword_1001BFA40);
        memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
      }
      else
      {
        v124 = swift_getEnumCaseMultiPayload(v121, v122) == 1;
        v132(v120, v121, v133);
        swift_storeEnumTagMultiPayload(v120, v122, v124);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v120, 0, 1, v122);
      }
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)a1, 0, 2, (uint64_t)v127);
    }
    v125 = *(int *)(v6 + 20);
    v9 = *(_QWORD *)&v3[v125];
    *(_QWORD *)((char *)a1 + v125) = v9;
  }
  swift_retain(v9);
  return a1;
}

uint64_t sub_1000CDEA8(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;

  v4 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 2, (uint64_t)v4))
  {
    v47 = a2;
    v5 = type metadata accessor for UUID(0);
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v6(a1, v5);
    v7 = a1 + v4[5];
    v8 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    v9 = a1 + v4[6];
    v6(v9, v5);
    v10 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v11 = v9 + v10[5];
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
    v13(v11, v12);
    v46 = v13;
    v13(v9 + v10[6], v12);
    v14 = v9 + v10[7];
    v15 = sub_100005D40(&qword_1001BF090);
    v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
    v16(v14, v15);
    v16(v9 + v10[8], v15);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[9] + 8));
    v17 = v9 + v10[10];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v17, 1, v15))
      v16(v17, v15);
    v18 = v9 + v10[11];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v18, 1, v15))
      v16(v18, v15);
    v19 = v9 + v10[12];
    v6(v19, v5);
    v20 = (int *)type metadata accessor for ConditionViewModel(0);
    v21 = v19 + v20[5];
    v22 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
    swift_bridgeObjectRelease(*(_QWORD *)(v19 + v20[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v19 + v20[7] + 8));
    v23 = v9 + v10[14];
    v24 = type metadata accessor for CloudAltitudeKind(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
    v25 = v9 + v10[15];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v25, 1, v12))
      v46(v25, v12);
    v26 = v9 + v10[16];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v26, 1, v12))
      v46(v26, v12);
    v27 = v9 + v10[17];
    v28 = type metadata accessor for UVIndex(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
    v29 = v9 + v10[18];
    v30 = type metadata accessor for Wind(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
    v31 = v9 + v10[20];
    v32 = *(_QWORD *)(v31 + 8);
    if (v32)
    {
      swift_bridgeObjectRelease(v32);
      sub_100007458(*(_QWORD *)(v31 + 16), *(_QWORD *)(v31 + 24), *(_BYTE *)(v31 + 32));
    }
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[7]));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[8]));
    v33 = a1 + v4[9];
    v34 = (int *)type metadata accessor for AirQualityViewModel(0);
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v33, 1, (uint64_t)v34))
    {
      v6(v33, v5);
      v46(v33 + v34[5], v12);
      v35 = v33 + v34[7];
      v36 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
      v37 = v33 + v34[8];
      v38 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
    }
    v39 = a1 + v4[10];
    HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v39, 1, HourPrecipitationChartViewModel))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v39, HourPrecipitationChartViewModel);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[11]));
    v41 = a1 + v4[13];
    v42 = type metadata accessor for URL(0);
    a2 = v47;
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v41, 1, v42))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
    v43 = a1 + v4[14];
    v44 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v43, 1, v44))
      v46(v43, v12);
  }
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

char *sub_1000CE2F8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  _BOOL8 v123;
  uint64_t v124;
  uint64_t v125;
  int *v127;
  uint64_t v128;
  char *v129;
  void (*v130)(char *, char *, uint64_t);
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t);
  uint64_t v133;

  v6 = type metadata accessor for AggregateWeatherViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2, 2, v6))
  {
    v7 = type metadata accessor for AdaptiveConditionsComplicationDataStatus(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v128 = a3;
    v8 = type metadata accessor for UUID(0);
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    v9(a1, a2, v8);
    v10 = *(int *)(v6 + 20);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v127 = (int *)v6;
    v14 = *(int *)(v6 + 24);
    v15 = &a1[v14];
    v16 = &a2[v14];
    v130 = v9;
    v131 = v8;
    v9(&a1[v14], &a2[v14], v8);
    v17 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v18 = v17[5];
    v19 = &v15[v18];
    v20 = &v16[v18];
    v21 = type metadata accessor for Date(0);
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
    v22(v19, v20, v21);
    v132 = v22;
    v22(&v15[v17[6]], &v16[v17[6]], v21);
    v23 = v17[7];
    v24 = &v15[v23];
    v25 = &v16[v23];
    v26 = sub_100005D40(&qword_1001BF090);
    v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
    v27(v24, v25, v26);
    v27(&v15[v17[8]], &v16[v17[8]], v26);
    v28 = v17[9];
    v29 = &v15[v28];
    v30 = &v16[v28];
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    v32 = v17[10];
    v33 = &v15[v32];
    v34 = &v16[v32];
    swift_bridgeObjectRetain(v31);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v34, 1, v26))
    {
      v35 = sub_100005D40(&qword_1001BF098);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v27(v33, v34, v26);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v33, 0, 1, v26);
    }
    v36 = v17[11];
    v37 = &v15[v36];
    v38 = &v16[v36];
    v133 = v21;
    v129 = a2;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v16[v36], 1, v26))
    {
      v39 = sub_100005D40(&qword_1001BF098);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v27(v37, v38, v26);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v37, 0, 1, v26);
    }
    v40 = v17[12];
    v41 = &v15[v40];
    v42 = &v16[v40];
    v130(&v15[v40], &v16[v40], v131);
    v43 = (int *)type metadata accessor for ConditionViewModel(0);
    v44 = v43[5];
    v45 = &v41[v44];
    v46 = &v42[v44];
    v47 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    v48 = v43[6];
    v49 = &v41[v48];
    v50 = &v42[v48];
    v51 = *((_QWORD *)v50 + 1);
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *((_QWORD *)v49 + 1) = v51;
    v52 = v43[7];
    v53 = &v41[v52];
    v54 = &v42[v52];
    v55 = *((_QWORD *)v54 + 1);
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *((_QWORD *)v53 + 1) = v55;
    v41[v43[8]] = v42[v43[8]];
    v41[v43[9]] = v42[v43[9]];
    v41[v43[10]] = v42[v43[10]];
    *(_QWORD *)&v15[v17[13]] = *(_QWORD *)&v16[v17[13]];
    v56 = v17[14];
    v57 = &v15[v56];
    v58 = &v16[v56];
    v59 = type metadata accessor for CloudAltitudeKind(0);
    v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v55);
    v60(v57, v58, v59);
    v61 = v17[15];
    v62 = &v15[v61];
    v63 = &v16[v61];
    v64 = v133;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v16[v61], 1, v133))
    {
      v65 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      v132(v62, v63, v133);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v62, 0, 1, v133);
    }
    v66 = v17[16];
    v67 = &v15[v66];
    v68 = &v16[v66];
    a2 = v129;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v16[v66], 1, v133))
    {
      v69 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
    else
    {
      v132(v67, v68, v133);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v133);
    }
    v70 = v17[17];
    v71 = &v15[v70];
    v72 = &v16[v70];
    v73 = type metadata accessor for UVIndex(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
    v74 = v17[18];
    v75 = &v15[v74];
    v76 = &v16[v74];
    v77 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
    *(_QWORD *)&v15[v17[19]] = *(_QWORD *)&v16[v17[19]];
    v78 = v17[20];
    v79 = &v15[v78];
    v80 = &v16[v78];
    v81 = *((_QWORD *)v80 + 1);
    if (v81)
    {
      *(_QWORD *)v79 = *(_QWORD *)v80;
      *((_QWORD *)v79 + 1) = v81;
      v82 = *((_QWORD *)v80 + 2);
      v83 = *((_QWORD *)v80 + 3);
      v84 = v80[32];
      swift_bridgeObjectRetain(v81);
      sub_100006E58(v82, v83, v84);
      *((_QWORD *)v79 + 2) = v82;
      *((_QWORD *)v79 + 3) = v83;
      v79[32] = v84;
      v64 = v133;
    }
    else
    {
      v85 = *((_OWORD *)v80 + 1);
      *(_OWORD *)v79 = *(_OWORD *)v80;
      *((_OWORD *)v79 + 1) = v85;
      v79[32] = v80[32];
    }
    v86 = v127[7];
    v87 = *(_QWORD *)&v129[v86];
    *(_QWORD *)&a1[v86] = v87;
    v88 = v127[8];
    v89 = *(_QWORD *)&v129[v88];
    *(_QWORD *)&a1[v88] = v89;
    v90 = v127[9];
    v91 = &a1[v90];
    v92 = &v129[v90];
    v93 = (int *)type metadata accessor for AirQualityViewModel(0);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v89);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v92, 1, (uint64_t)v93))
    {
      v94 = sub_100005D40(&qword_1001BFA30);
      memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    }
    else
    {
      v130(v91, v92, v131);
      v132(&v91[v93[5]], &v92[v93[5]], v64);
      *(_QWORD *)&v91[v93[6]] = *(_QWORD *)&v92[v93[6]];
      v95 = v93[7];
      v96 = &v91[v95];
      v97 = &v92[v95];
      v98 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v96, v97, v98);
      v99 = v93[8];
      v100 = &v91[v99];
      v101 = &v92[v99];
      v102 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v100, v101, v102);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v91, 0, 1, (uint64_t)v93);
    }
    v103 = v127[10];
    v104 = &a1[v103];
    v105 = &v129[v103];
    HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v105, 1, HourPrecipitationChartViewModel))
    {
      v107 = sub_100005D40(&qword_1001BFA38);
      memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v104, v105, HourPrecipitationChartViewModel);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v104, 0, 1, HourPrecipitationChartViewModel);
    }
    v108 = v127[11];
    v109 = *(_QWORD *)&v129[v108];
    *(_QWORD *)&a1[v108] = v109;
    v110 = v127[12];
    v111 = &a1[v110];
    v112 = &v129[v110];
    *(_QWORD *)v111 = *(_QWORD *)v112;
    *((_WORD *)v111 + 4) = *((_WORD *)v112 + 4);
    v113 = v127[13];
    v114 = &a1[v113];
    v115 = &v129[v113];
    v116 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v109);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v115, 1, v116))
    {
      v117 = sub_100005D40(&qword_1001BFA28);
      memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 16))(v114, v115, v116);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v114, 0, 1, v116);
    }
    a3 = v128;
    v118 = v127[14];
    v119 = &a1[v118];
    v120 = &v129[v118];
    v121 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v120, 1, v121))
    {
      v122 = sub_100005D40(&qword_1001BFA40);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
    }
    else
    {
      v123 = swift_getEnumCaseMultiPayload(v120, v121) == 1;
      v132(v119, v120, v64);
      swift_storeEnumTagMultiPayload(v119, v121, v123);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v119, 0, 1, v121);
    }
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)a1, 0, 2, (uint64_t)v127);
  }
  v124 = *(int *)(a3 + 20);
  v125 = *(_QWORD *)&a2[v124];
  *(_QWORD *)&a1[v124] = v125;
  swift_retain(v125);
  return a1;
}

uint64_t sub_1000CEB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  size_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  int v68;
  uint64_t v69;
  void *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  void *v95;
  const void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const void *v138;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  const void *v154;
  uint64_t v155;
  uint64_t v156;
  _BOOL8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  const void *v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  const void *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  const void *v201;
  int v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int128 *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  char v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  int *v242;
  int v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  const void *v255;
  uint64_t v256;
  int v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _BYTE *v265;
  _BYTE *v266;
  uint64_t v267;
  void *v268;
  const void *v269;
  uint64_t v270;
  int v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  int v280;
  _BOOL8 v281;
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  int EnumCaseMultiPayload;
  uint64_t v291;
  void (*v292)(void *, const void *, uint64_t);
  uint64_t v293;
  uint64_t v294;
  void (*v295)(uint64_t, uint64_t, uint64_t);
  void (*v296)(uint64_t, uint64_t, uint64_t);
  uint64_t v297;
  uint64_t v298;
  void (*v299)(void *, const void *, uint64_t);
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int *v303;
  int *v304;
  uint64_t v305;
  uint64_t v306;

  v6 = type metadata accessor for AggregateWeatherViewModel(0);
  v7 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 2, v6);
  v8 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a2, 2, v6);
  if (v7)
  {
    if (!v8)
    {
      v305 = a3;
      v9 = type metadata accessor for UUID(0);
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
      v10(a1, a2, v9);
      v11 = *(int *)(v6 + 20);
      v12 = a1 + v11;
      v13 = a2 + v11;
      v14 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      v303 = (int *)v6;
      v15 = *(int *)(v6 + 24);
      v16 = a1 + v15;
      v17 = a2 + v15;
      v295 = v10;
      v297 = v9;
      v10(a1 + v15, a2 + v15, v9);
      v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v19 = v18[5];
      v20 = v16 + v19;
      v21 = v17 + v19;
      v22 = type metadata accessor for Date(0);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
      v23(v20, v21, v22);
      v299 = (void (*)(void *, const void *, uint64_t))v23;
      v301 = v22;
      v23(v16 + v18[6], v17 + v18[6], v22);
      v24 = v18[7];
      v25 = v16 + v24;
      v26 = v17 + v24;
      v27 = sub_100005D40(&qword_1001BF090);
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      v28(v25, v26, v27);
      v28(v16 + v18[8], v17 + v18[8], v27);
      v29 = v18[9];
      v30 = (_QWORD *)(v16 + v29);
      v31 = (_QWORD *)(v17 + v29);
      *v30 = *v31;
      v32 = v31[1];
      v30[1] = v32;
      v33 = v18[10];
      v34 = (void *)(v16 + v33);
      v35 = (const void *)(v17 + v33);
      swift_bridgeObjectRetain(v32);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 1, v27))
      {
        v36 = sub_100005D40(&qword_1001BF098);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        v28((uint64_t)v34, (uint64_t)v35, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v27);
      }
      v69 = v18[11];
      v70 = (void *)(v16 + v69);
      v71 = (const void *)(v17 + v69);
      v294 = a2;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v69, 1, v27))
      {
        v72 = sub_100005D40(&qword_1001BF098);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        v28((uint64_t)v70, (uint64_t)v71, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v70, 0, 1, v27);
      }
      v73 = v18[12];
      v74 = v16 + v73;
      v75 = v17 + v73;
      v295(v16 + v73, v17 + v73, v297);
      v76 = (int *)type metadata accessor for ConditionViewModel(0);
      v77 = v76[5];
      v78 = v74 + v77;
      v79 = v75 + v77;
      v80 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v78, v79, v80);
      v81 = v76[6];
      v82 = (_QWORD *)(v74 + v81);
      v83 = (_QWORD *)(v75 + v81);
      *v82 = *v83;
      v84 = v83[1];
      v82[1] = v84;
      v85 = v76[7];
      v86 = (_QWORD *)(v74 + v85);
      v87 = (_QWORD *)(v75 + v85);
      *v86 = *v87;
      v88 = v87[1];
      v86[1] = v88;
      *(_BYTE *)(v74 + v76[8]) = *(_BYTE *)(v75 + v76[8]);
      *(_BYTE *)(v74 + v76[9]) = *(_BYTE *)(v75 + v76[9]);
      *(_BYTE *)(v74 + v76[10]) = *(_BYTE *)(v75 + v76[10]);
      *(_QWORD *)(v16 + v18[13]) = *(_QWORD *)(v17 + v18[13]);
      v89 = v18[14];
      v90 = v16 + v89;
      v91 = v17 + v89;
      v92 = type metadata accessor for CloudAltitudeKind(0);
      v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 16);
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRetain(v88);
      v93(v90, v91, v92);
      v94 = v18[15];
      v95 = (void *)(v16 + v94);
      v96 = (const void *)(v17 + v94);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v94, 1, v301))
      {
        v97 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
      }
      else
      {
        v299(v95, v96, v301);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v301);
      }
      a2 = v294;
      v98 = v18[16];
      v99 = (void *)(v16 + v98);
      v100 = (const void *)(v17 + v98);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v98, 1, v301))
      {
        v101 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
      }
      else
      {
        v299(v99, v100, v301);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v301);
      }
      v102 = v18[17];
      v103 = v16 + v102;
      v104 = v17 + v102;
      v105 = type metadata accessor for UVIndex(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v103, v104, v105);
      v106 = v18[18];
      v107 = v16 + v106;
      v108 = v17 + v106;
      v109 = type metadata accessor for Wind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 16))(v107, v108, v109);
      *(_QWORD *)(v16 + v18[19]) = *(_QWORD *)(v17 + v18[19]);
      v110 = v18[20];
      v111 = v16 + v110;
      v112 = (__int128 *)(v17 + v110);
      if (*((_QWORD *)v112 + 1))
      {
        *(_QWORD *)v111 = *(_QWORD *)v112;
        v113 = *((_QWORD *)v112 + 1);
        *(_QWORD *)(v111 + 8) = v113;
        v114 = *((_QWORD *)v112 + 2);
        v115 = *((_QWORD *)v112 + 3);
        v116 = *((_BYTE *)v112 + 32);
        swift_bridgeObjectRetain(v113);
        sub_100006E58(v114, v115, v116);
        *(_QWORD *)(v111 + 16) = v114;
        *(_QWORD *)(v111 + 24) = v115;
        *(_BYTE *)(v111 + 32) = v116;
      }
      else
      {
        v117 = *v112;
        v118 = v112[1];
        *(_BYTE *)(v111 + 32) = *((_BYTE *)v112 + 32);
        *(_OWORD *)v111 = v117;
        *(_OWORD *)(v111 + 16) = v118;
      }
      a3 = v305;
      v119 = v303[7];
      v120 = *(_QWORD *)(v294 + v119);
      *(_QWORD *)(a1 + v119) = v120;
      v121 = v303[8];
      v122 = *(_QWORD *)(v294 + v121);
      *(_QWORD *)(a1 + v121) = v122;
      v123 = v303[9];
      v124 = (char *)(a1 + v123);
      v125 = (char *)(v294 + v123);
      v126 = (int *)type metadata accessor for AirQualityViewModel(0);
      swift_bridgeObjectRetain(v120);
      swift_bridgeObjectRetain(v122);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v125, 1, (uint64_t)v126))
      {
        v127 = sub_100005D40(&qword_1001BFA30);
        memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
      }
      else
      {
        v295((uint64_t)v124, (uint64_t)v125, v297);
        v299(&v124[v126[5]], &v125[v126[5]], v301);
        *(_QWORD *)&v124[v126[6]] = *(_QWORD *)&v125[v126[6]];
        v128 = v126[7];
        v129 = &v124[v128];
        v130 = &v125[v128];
        v131 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
        v132 = v126[8];
        v133 = &v124[v132];
        v134 = &v125[v132];
        v135 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16))(v133, v134, v135);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v124, 0, 1, (uint64_t)v126);
      }
      v136 = v303[10];
      v137 = (void *)(a1 + v136);
      v138 = (const void *)(v294 + v136);
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v138, 1, HourPrecipitationChartViewModel))
      {
        v140 = sub_100005D40(&qword_1001BFA38);
        memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v137, v138, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v137, 0, 1, HourPrecipitationChartViewModel);
      }
      v141 = v303[11];
      v142 = *(_QWORD *)(v294 + v141);
      *(_QWORD *)(a1 + v141) = v142;
      v143 = v303[12];
      v144 = a1 + v143;
      v145 = (uint64_t *)(v294 + v143);
      v146 = *v145;
      *(_WORD *)(v144 + 8) = *((_WORD *)v145 + 4);
      *(_QWORD *)v144 = v146;
      v147 = v303[13];
      v148 = (void *)(a1 + v147);
      v149 = (const void *)(v294 + v147);
      v150 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain(v142);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v149, 1, v150))
      {
        v151 = sub_100005D40(&qword_1001BFA28);
        memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v148, 0, 1, v150);
      }
      v152 = v303[14];
      v153 = (void *)(a1 + v152);
      v154 = (const void *)(v294 + v152);
      v155 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v154, 1, v155))
      {
        v156 = sub_100005D40(&qword_1001BFA40);
        memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
      }
      else
      {
        v157 = swift_getEnumCaseMultiPayload(v154, v155) == 1;
        v299(v153, v154, v301);
        swift_storeEnumTagMultiPayload(v153, v155, v157);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v153, 0, 1, v155);
      }
      v158 = a1;
      v159 = 2;
      v160 = (uint64_t)v303;
      goto LABEL_38;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_100011894(a1, type metadata accessor for AggregateWeatherViewModel);
LABEL_7:
    v37 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AdaptiveConditionsComplicationDataStatus(0) - 8) + 64);
    v38 = (void *)a1;
    v39 = (const void *)a2;
LABEL_8:
    memcpy(v38, v39, v37);
    goto LABEL_39;
  }
  v306 = a3;
  v40 = type metadata accessor for UUID(0);
  v291 = *(_QWORD *)(v40 - 8);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v291 + 24);
  v41(a1, a2, v40);
  v42 = *(int *)(v6 + 20);
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v43, v44, v45);
  v304 = (int *)v6;
  v46 = *(int *)(v6 + 24);
  v47 = a1 + v46;
  v48 = a2 + v46;
  v296 = v41;
  v298 = v40;
  v41(a1 + v46, a2 + v46, v40);
  v49 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v50 = v49[5];
  v51 = v47 + v50;
  v52 = v48 + v50;
  v53 = type metadata accessor for Date(0);
  v300 = *(_QWORD *)(v53 - 8);
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v300 + 24);
  v54(v51, v52, v53);
  v302 = v53;
  v292 = (void (*)(void *, const void *, uint64_t))v54;
  v54(v47 + v49[6], v48 + v49[6], v53);
  v55 = v49[7];
  v56 = v47 + v55;
  v57 = v48 + v55;
  v58 = sub_100005D40(&qword_1001BF090);
  v293 = *(_QWORD *)(v58 - 8);
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v293 + 24);
  v59(v56, v57, v58);
  v59(v47 + v49[8], v48 + v49[8], v58);
  v60 = v49[9];
  v61 = (_QWORD *)(v47 + v60);
  v62 = (_QWORD *)(v48 + v60);
  *v61 = *v62;
  v63 = v62[1];
  v64 = v61[1];
  v61[1] = v63;
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRelease(v64);
  v65 = v49[10];
  v66 = (void *)(v47 + v65);
  v67 = (const void *)(v48 + v65);
  LODWORD(v54) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v47 + v65, 1, v58);
  v68 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v58);
  if ((_DWORD)v54)
  {
    if (!v68)
    {
      (*(void (**)(void *, const void *, uint64_t))(v293 + 16))(v66, v67, v58);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v58);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v68)
  {
    (*(void (**)(void *, uint64_t))(v293 + 8))(v66, v58);
LABEL_42:
    v165 = sub_100005D40(&qword_1001BF098);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
    goto LABEL_43;
  }
  v59((uint64_t)v66, (uint64_t)v67, v58);
LABEL_43:
  v166 = v49[11];
  v167 = (void *)(v47 + v166);
  v168 = (const void *)(v48 + v166);
  v169 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v47 + v166, 1, v58);
  v170 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v168, 1, v58);
  if (v169)
  {
    if (!v170)
    {
      (*(void (**)(void *, const void *, uint64_t))(v293 + 16))(v167, v168, v58);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v167, 0, 1, v58);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v170)
  {
    (*(void (**)(void *, uint64_t))(v293 + 8))(v167, v58);
LABEL_48:
    v171 = sub_100005D40(&qword_1001BF098);
    memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
    goto LABEL_49;
  }
  v59((uint64_t)v167, (uint64_t)v168, v58);
LABEL_49:
  v172 = v49[12];
  v173 = v47 + v172;
  v174 = v48 + v172;
  v296(v47 + v172, v48 + v172, v298);
  v175 = (int *)type metadata accessor for ConditionViewModel(0);
  v176 = v175[5];
  v177 = v173 + v176;
  v178 = v174 + v176;
  v179 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 24))(v177, v178, v179);
  v180 = v175[6];
  v181 = (_QWORD *)(v173 + v180);
  v182 = (_QWORD *)(v174 + v180);
  *v181 = *v182;
  v183 = v182[1];
  v184 = v181[1];
  v181[1] = v183;
  swift_bridgeObjectRetain(v183);
  swift_bridgeObjectRelease(v184);
  v185 = v175[7];
  v186 = (_QWORD *)(v173 + v185);
  v187 = (_QWORD *)(v174 + v185);
  *v186 = *v187;
  v188 = v187[1];
  v189 = v186[1];
  v186[1] = v188;
  swift_bridgeObjectRetain(v188);
  swift_bridgeObjectRelease(v189);
  *(_BYTE *)(v173 + v175[8]) = *(_BYTE *)(v174 + v175[8]);
  *(_BYTE *)(v173 + v175[9]) = *(_BYTE *)(v174 + v175[9]);
  *(_BYTE *)(v173 + v175[10]) = *(_BYTE *)(v174 + v175[10]);
  *(_QWORD *)(v47 + v49[13]) = *(_QWORD *)(v48 + v49[13]);
  v190 = v49[14];
  v191 = v47 + v190;
  v192 = v48 + v190;
  v193 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v193 - 8) + 24))(v191, v192, v193);
  v194 = v49[15];
  v195 = (void *)(v47 + v194);
  v196 = (const void *)(v48 + v194);
  LODWORD(v192) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v47 + v194, 1, v302);
  v197 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v196, 1, v302);
  if ((_DWORD)v192)
  {
    if (!v197)
    {
      (*(void (**)(void *, const void *, uint64_t))(v300 + 16))(v195, v196, v302);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v195, 0, 1, v302);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v197)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v195, v302);
LABEL_54:
    v198 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
    goto LABEL_55;
  }
  v292(v195, v196, v302);
LABEL_55:
  v199 = v49[16];
  v200 = (void *)(v47 + v199);
  v201 = (const void *)(v48 + v199);
  v202 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v47 + v199, 1, v302);
  v203 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v201, 1, v302);
  if (v202)
  {
    if (!v203)
    {
      (*(void (**)(void *, const void *, uint64_t))(v300 + 16))(v200, v201, v302);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v200, 0, 1, v302);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v203)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v200, v302);
LABEL_60:
    v204 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
    goto LABEL_61;
  }
  v292(v200, v201, v302);
LABEL_61:
  v205 = v49[17];
  v206 = v47 + v205;
  v207 = v48 + v205;
  v208 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v208 - 8) + 24))(v206, v207, v208);
  v209 = v49[18];
  v210 = v47 + v209;
  v211 = v48 + v209;
  v212 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v212 - 8) + 24))(v210, v211, v212);
  *(_QWORD *)(v47 + v49[19]) = *(_QWORD *)(v48 + v49[19]);
  v213 = v49[20];
  v214 = v47 + v213;
  v215 = (__int128 *)(v48 + v213);
  v216 = *(_QWORD *)(v214 + 8);
  v217 = *(_QWORD *)(v48 + v213 + 8);
  if (v216)
  {
    if (v217)
    {
      *(_QWORD *)v214 = *(_QWORD *)v215;
      v218 = *((_QWORD *)v215 + 1);
      *(_QWORD *)(v214 + 8) = v218;
      swift_bridgeObjectRetain(v218);
      swift_bridgeObjectRelease(v216);
      v219 = *((_QWORD *)v215 + 2);
      v220 = *((_QWORD *)v215 + 3);
      v221 = *((_BYTE *)v215 + 32);
      sub_100006E58(v219, v220, v221);
      v222 = *(_QWORD *)(v214 + 16);
      v223 = *(_QWORD *)(v214 + 24);
      v224 = *(_BYTE *)(v214 + 32);
      *(_QWORD *)(v214 + 16) = v219;
      *(_QWORD *)(v214 + 24) = v220;
      *(_BYTE *)(v214 + 32) = v221;
      sub_100007458(v222, v223, v224);
    }
    else
    {
      sub_100008EC4(v214);
      v229 = *((_BYTE *)v215 + 32);
      v230 = v215[1];
      *(_OWORD *)v214 = *v215;
      *(_OWORD *)(v214 + 16) = v230;
      *(_BYTE *)(v214 + 32) = v229;
    }
  }
  else if (v217)
  {
    *(_QWORD *)v214 = *(_QWORD *)v215;
    v225 = *((_QWORD *)v215 + 1);
    *(_QWORD *)(v214 + 8) = v225;
    v226 = *((_QWORD *)v215 + 2);
    v227 = *((_QWORD *)v215 + 3);
    v228 = *((_BYTE *)v215 + 32);
    swift_bridgeObjectRetain(v225);
    sub_100006E58(v226, v227, v228);
    *(_QWORD *)(v214 + 16) = v226;
    *(_QWORD *)(v214 + 24) = v227;
    *(_BYTE *)(v214 + 32) = v228;
  }
  else
  {
    v231 = *v215;
    v232 = v215[1];
    *(_BYTE *)(v214 + 32) = *((_BYTE *)v215 + 32);
    *(_OWORD *)v214 = v231;
    *(_OWORD *)(v214 + 16) = v232;
  }
  a3 = v306;
  v233 = v304[7];
  v234 = *(_QWORD *)(a2 + v233);
  v235 = *(_QWORD *)(a1 + v233);
  *(_QWORD *)(a1 + v233) = v234;
  swift_bridgeObjectRetain(v234);
  swift_bridgeObjectRelease(v235);
  v236 = v304[8];
  v237 = *(_QWORD *)(a2 + v236);
  v238 = *(_QWORD *)(a1 + v236);
  *(_QWORD *)(a1 + v236) = v237;
  swift_bridgeObjectRetain(v237);
  swift_bridgeObjectRelease(v238);
  v239 = v304[9];
  v240 = (char *)(a1 + v239);
  v241 = (char *)(a2 + v239);
  v242 = (int *)type metadata accessor for AirQualityViewModel(0);
  LODWORD(v238) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v240, 1, (uint64_t)v242);
  v243 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v241, 1, (uint64_t)v242);
  if ((_DWORD)v238)
  {
    if (!v243)
    {
      (*(void (**)(char *, char *, uint64_t))(v291 + 16))(v240, v241, v298);
      (*(void (**)(char *, char *, uint64_t))(v300 + 16))(&v240[v242[5]], &v241[v242[5]], v302);
      *(_QWORD *)&v240[v242[6]] = *(_QWORD *)&v241[v242[6]];
      v244 = v242[7];
      v245 = &v240[v244];
      v246 = &v241[v244];
      v247 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v247 - 8) + 16))(v245, v246, v247);
      v248 = v242[8];
      v249 = &v240[v248];
      v250 = &v241[v248];
      v251 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v251 - 8) + 16))(v249, v250, v251);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v240, 0, 1, (uint64_t)v242);
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  if (v243)
  {
    sub_100011894((uint64_t)v240, type metadata accessor for AirQualityViewModel);
LABEL_77:
    v252 = sub_100005D40(&qword_1001BFA30);
    memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v252 - 8) + 64));
    goto LABEL_78;
  }
  v296((uint64_t)v240, (uint64_t)v241, v298);
  v292(&v240[v242[5]], &v241[v242[5]], v302);
  *(_QWORD *)&v240[v242[6]] = *(_QWORD *)&v241[v242[6]];
  v282 = v242[7];
  v283 = &v240[v282];
  v284 = &v241[v282];
  v285 = type metadata accessor for AirQualityScale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v285 - 8) + 24))(v283, v284, v285);
  v286 = v242[8];
  v287 = &v240[v286];
  v288 = &v241[v286];
  v289 = type metadata accessor for AirQualityScaleCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v289 - 8) + 24))(v287, v288, v289);
LABEL_78:
  v253 = v304[10];
  v254 = (void *)(a1 + v253);
  v255 = (const void *)(a2 + v253);
  v256 = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v257 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v254, 1, v256);
  v258 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v255, 1, v256);
  if (v257)
  {
    if (!v258)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v256 - 8) + 16))(v254, v255, v256);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v254, 0, 1, v256);
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  v259 = *(_QWORD *)(v256 - 8);
  if (v258)
  {
    (*(void (**)(void *, uint64_t))(v259 + 8))(v254, v256);
LABEL_83:
    v260 = sub_100005D40(&qword_1001BFA38);
    memcpy(v254, v255, *(_QWORD *)(*(_QWORD *)(v260 - 8) + 64));
    goto LABEL_84;
  }
  (*(void (**)(void *, const void *, uint64_t))(v259 + 24))(v254, v255, v256);
LABEL_84:
  v261 = v304[11];
  v262 = *(_QWORD *)(a2 + v261);
  v263 = *(_QWORD *)(a1 + v261);
  *(_QWORD *)(a1 + v261) = v262;
  swift_bridgeObjectRetain(v262);
  swift_bridgeObjectRelease(v263);
  v264 = v304[12];
  v265 = (_BYTE *)(a1 + v264);
  v266 = (_BYTE *)(a2 + v264);
  *v265 = *v266;
  v265[1] = v266[1];
  v265[2] = v266[2];
  v265[3] = v266[3];
  v265[4] = v266[4];
  v265[5] = v266[5];
  v265[6] = v266[6];
  v265[7] = v266[7];
  v265[8] = v266[8];
  v265[9] = v266[9];
  v267 = v304[13];
  v268 = (void *)(a1 + v267);
  v269 = (const void *)(a2 + v267);
  v270 = type metadata accessor for URL(0);
  v271 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v268, 1, v270);
  v272 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v269, 1, v270);
  if (v271)
  {
    if (!v272)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v270 - 8) + 16))(v268, v269, v270);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v268, 0, 1, v270);
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  v273 = *(_QWORD *)(v270 - 8);
  if (v272)
  {
    (*(void (**)(void *, uint64_t))(v273 + 8))(v268, v270);
LABEL_89:
    v274 = sub_100005D40(&qword_1001BFA28);
    memcpy(v268, v269, *(_QWORD *)(*(_QWORD *)(v274 - 8) + 64));
    goto LABEL_90;
  }
  (*(void (**)(void *, const void *, uint64_t))(v273 + 24))(v268, v269, v270);
LABEL_90:
  v275 = v304[14];
  v276 = a1 + v275;
  v277 = a2 + v275;
  v278 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  v279 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v276, 1, v278);
  v280 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v277, 1, v278);
  if (v279)
  {
    if (!v280)
    {
      v281 = swift_getEnumCaseMultiPayload(v277, v278) == 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v300 + 16))(v276, v277, v302);
      swift_storeEnumTagMultiPayload(v276, v278, v281);
      v158 = v276;
      v159 = 1;
      v160 = v278;
LABEL_38:
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v158, 0, v159, v160);
      goto LABEL_39;
    }
    goto LABEL_95;
  }
  if (v280)
  {
    sub_100011894(v276, type metadata accessor for AggregateWeatherViewModel.SunEvent);
LABEL_95:
    v37 = *(_QWORD *)(*(_QWORD *)(sub_100005D40(&qword_1001BFA40) - 8) + 64);
    v38 = (void *)v276;
    v39 = (const void *)v277;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_100011894(v276, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v277, v278);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v300 + 16))(v276, v277, v302);
    swift_storeEnumTagMultiPayload(v276, v278, EnumCaseMultiPayload == 1);
  }
LABEL_39:
  v161 = *(int *)(a3 + 20);
  v162 = *(_QWORD *)(a2 + v161);
  v163 = *(_QWORD *)(a1 + v161);
  *(_QWORD *)(a1 + v161) = v162;
  swift_retain(v162);
  swift_release(v163);
  return a1;
}

char *sub_1000CFF08(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);

  v6 = type metadata accessor for AggregateWeatherViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2, 2, v6))
  {
    v7 = type metadata accessor for AdaptiveConditionsComplicationDataStatus(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v103 = a3;
    v8 = type metadata accessor for UUID(0);
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
    v9(a1, a2, v8);
    v10 = *(int *)(v6 + 20);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    v102 = (int *)v6;
    v14 = *(int *)(v6 + 24);
    v15 = &a1[v14];
    v16 = &a2[v14];
    v104 = v9;
    v105 = v8;
    v9(&a1[v14], &a2[v14], v8);
    v17 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v18 = v17[5];
    v19 = &v15[v18];
    v20 = &v16[v18];
    v21 = type metadata accessor for Date(0);
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
    v22(v19, v20, v21);
    v101 = v21;
    v106 = v22;
    v22(&v15[v17[6]], &v16[v17[6]], v21);
    v23 = v17[7];
    v24 = &v15[v23];
    v25 = &v16[v23];
    v26 = sub_100005D40(&qword_1001BF090);
    v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
    v27(v24, v25, v26);
    v27(&v15[v17[8]], &v16[v17[8]], v26);
    *(_OWORD *)&v15[v17[9]] = *(_OWORD *)&v16[v17[9]];
    v28 = v17[10];
    v29 = &v15[v28];
    v30 = &v16[v28];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v16[v28], 1, v26))
    {
      v31 = sub_100005D40(&qword_1001BF098);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v27(v29, v30, v26);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v26);
    }
    v32 = v17[11];
    v33 = &v15[v32];
    v34 = &v16[v32];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v16[v32], 1, v26))
    {
      v35 = sub_100005D40(&qword_1001BF098);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v27(v33, v34, v26);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v33, 0, 1, v26);
    }
    v36 = v17[12];
    v37 = &v15[v36];
    v38 = &v16[v36];
    v104(&v15[v36], &v16[v36], v105);
    v39 = (int *)type metadata accessor for ConditionViewModel(0);
    v40 = v39[5];
    v41 = &v37[v40];
    v42 = &v38[v40];
    v43 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
    *(_OWORD *)&v37[v39[6]] = *(_OWORD *)&v38[v39[6]];
    *(_OWORD *)&v37[v39[7]] = *(_OWORD *)&v38[v39[7]];
    v37[v39[8]] = v38[v39[8]];
    v37[v39[9]] = v38[v39[9]];
    v37[v39[10]] = v38[v39[10]];
    *(_QWORD *)&v15[v17[13]] = *(_QWORD *)&v16[v17[13]];
    v44 = v17[14];
    v45 = &v15[v44];
    v46 = &v16[v44];
    v47 = type metadata accessor for CloudAltitudeKind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v45, v46, v47);
    v48 = v17[15];
    v49 = &v15[v48];
    v50 = &v16[v48];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v16[v48], 1, v101))
    {
      v51 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      v106(v49, v50, v101);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v49, 0, 1, v101);
    }
    v52 = v17[16];
    v53 = &v15[v52];
    v54 = &v16[v52];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v16[v52], 1, v101))
    {
      v55 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      v106(v53, v54, v101);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v53, 0, 1, v101);
    }
    v56 = v17[17];
    v57 = &v15[v56];
    v58 = &v16[v56];
    v59 = type metadata accessor for UVIndex(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v57, v58, v59);
    v60 = v17[18];
    v61 = &v15[v60];
    v62 = &v16[v60];
    v63 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v61, v62, v63);
    *(_QWORD *)&v15[v17[19]] = *(_QWORD *)&v16[v17[19]];
    v64 = v17[20];
    v65 = &v15[v64];
    v66 = &v16[v64];
    v65[32] = v66[32];
    v67 = *((_OWORD *)v66 + 1);
    *(_OWORD *)v65 = *(_OWORD *)v66;
    *((_OWORD *)v65 + 1) = v67;
    *(_QWORD *)&a1[v102[7]] = *(_QWORD *)&a2[v102[7]];
    *(_QWORD *)&a1[v102[8]] = *(_QWORD *)&a2[v102[8]];
    v68 = v102[9];
    v69 = &a1[v68];
    v70 = &a2[v68];
    v71 = (int *)type metadata accessor for AirQualityViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v70, 1, (uint64_t)v71))
    {
      v72 = sub_100005D40(&qword_1001BFA30);
      memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      v104(v69, v70, v105);
      v106(&v69[v71[5]], &v70[v71[5]], v101);
      *(_QWORD *)&v69[v71[6]] = *(_QWORD *)&v70[v71[6]];
      v73 = v71[7];
      v74 = &v69[v73];
      v75 = &v70[v73];
      v76 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(v74, v75, v76);
      v77 = v71[8];
      v78 = &v69[v77];
      v79 = &v70[v77];
      v80 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v78, v79, v80);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v69, 0, 1, (uint64_t)v71);
    }
    v81 = v102[10];
    v82 = &a1[v81];
    v83 = &a2[v81];
    HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
    a3 = v103;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v83, 1, HourPrecipitationChartViewModel))
    {
      v85 = sub_100005D40(&qword_1001BFA38);
      memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v82, v83, HourPrecipitationChartViewModel);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v82, 0, 1, HourPrecipitationChartViewModel);
    }
    *(_QWORD *)&a1[v102[11]] = *(_QWORD *)&a2[v102[11]];
    v86 = v102[12];
    v87 = &a1[v86];
    v88 = &a2[v86];
    *(_QWORD *)v87 = *(_QWORD *)v88;
    *((_WORD *)v87 + 4) = *((_WORD *)v88 + 4);
    v89 = v102[13];
    v90 = &a1[v89];
    v91 = &a2[v89];
    v92 = type metadata accessor for URL(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v91, 1, v92))
    {
      v93 = sub_100005D40(&qword_1001BFA28);
      memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32))(v90, v91, v92);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v90, 0, 1, v92);
    }
    v94 = v102[14];
    v95 = &a1[v94];
    v96 = &a2[v94];
    v97 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v96, 1, v97))
    {
      v98 = sub_100005D40(&qword_1001BFA40);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    }
    else
    {
      v99 = swift_getEnumCaseMultiPayload(v96, v97) == 1;
      v106(v95, v96, v101);
      swift_storeEnumTagMultiPayload(v95, v97, v99);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v97);
    }
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)a1, 0, 2, (uint64_t)v102);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t sub_1000D069C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  int v65;
  uint64_t v66;
  void *v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const void *v117;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const void *v130;
  uint64_t v131;
  uint64_t v132;
  _BOOL8 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const void *v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  const void *v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  const void *v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  int *v207;
  int v208;
  int v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  const void *v221;
  uint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  const void *v234;
  uint64_t v235;
  int v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  int v245;
  _BOOL8 v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  int EnumCaseMultiPayload;
  uint64_t v256;
  void (*v257)(void *, const void *, uint64_t);
  uint64_t v258;
  void (*v259)(uint64_t, uint64_t, uint64_t);
  void (*v260)(uint64_t, uint64_t, uint64_t);
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void (*v265)(void *, const void *, uint64_t);
  uint64_t v266;
  int *v267;
  int *v268;
  uint64_t v269;
  uint64_t v270;

  v6 = type metadata accessor for AggregateWeatherViewModel(0);
  v7 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 2, v6);
  v8 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a2, 2, v6);
  if (v7)
  {
    if (!v8)
    {
      v269 = a3;
      v9 = type metadata accessor for UUID(0);
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
      v10(a1, a2, v9);
      v11 = *(int *)(v6 + 20);
      v12 = a1 + v11;
      v13 = a2 + v11;
      v14 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      v267 = (int *)v6;
      v15 = *(int *)(v6 + 24);
      v16 = a1 + v15;
      v17 = a2 + v15;
      v259 = v10;
      v261 = v9;
      v10(a1 + v15, a2 + v15, v9);
      v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v19 = v18[5];
      v20 = v16 + v19;
      v21 = v17 + v19;
      v22 = type metadata accessor for Date(0);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
      v23(v20, v21, v22);
      v263 = v22;
      v265 = (void (*)(void *, const void *, uint64_t))v23;
      v23(v16 + v18[6], v17 + v18[6], v22);
      v24 = v18[7];
      v25 = v16 + v24;
      v26 = v17 + v24;
      v27 = sub_100005D40(&qword_1001BF090);
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
      v28(v25, v26, v27);
      v28(v16 + v18[8], v17 + v18[8], v27);
      *(_OWORD *)(v16 + v18[9]) = *(_OWORD *)(v17 + v18[9]);
      v29 = v18[10];
      v30 = (void *)(v16 + v29);
      v31 = (const void *)(v17 + v29);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v29, 1, v27))
      {
        v32 = sub_100005D40(&qword_1001BF098);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        v28((uint64_t)v30, (uint64_t)v31, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v27);
      }
      v66 = v18[11];
      v67 = (void *)(v16 + v66);
      v68 = (const void *)(v17 + v66);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v66, 1, v27))
      {
        v69 = sub_100005D40(&qword_1001BF098);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        v28((uint64_t)v67, (uint64_t)v68, v27);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v27);
      }
      v70 = v18[12];
      v71 = v16 + v70;
      v72 = v17 + v70;
      v259(v16 + v70, v17 + v70, v261);
      v73 = (int *)type metadata accessor for ConditionViewModel(0);
      v74 = v73[5];
      v75 = v71 + v74;
      v76 = v72 + v74;
      v77 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
      *(_OWORD *)(v71 + v73[6]) = *(_OWORD *)(v72 + v73[6]);
      *(_OWORD *)(v71 + v73[7]) = *(_OWORD *)(v72 + v73[7]);
      *(_BYTE *)(v71 + v73[8]) = *(_BYTE *)(v72 + v73[8]);
      *(_BYTE *)(v71 + v73[9]) = *(_BYTE *)(v72 + v73[9]);
      *(_BYTE *)(v71 + v73[10]) = *(_BYTE *)(v72 + v73[10]);
      *(_QWORD *)(v16 + v18[13]) = *(_QWORD *)(v17 + v18[13]);
      v78 = v18[14];
      v79 = v16 + v78;
      v80 = v17 + v78;
      v81 = type metadata accessor for CloudAltitudeKind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v79, v80, v81);
      v82 = v18[15];
      v83 = (void *)(v16 + v82);
      v84 = (const void *)(v17 + v82);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v82, 1, v263))
      {
        v85 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v265(v83, v84, v263);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v83, 0, 1, v263);
      }
      v86 = v18[16];
      v87 = (void *)(v16 + v86);
      v88 = (const void *)(v17 + v86);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v17 + v86, 1, v263))
      {
        v89 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
      }
      else
      {
        v265(v87, v88, v263);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v87, 0, 1, v263);
      }
      v90 = v18[17];
      v91 = v16 + v90;
      v92 = v17 + v90;
      v93 = type metadata accessor for UVIndex(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(v91, v92, v93);
      v94 = v18[18];
      v95 = v16 + v94;
      v96 = v17 + v94;
      v97 = type metadata accessor for Wind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 32))(v95, v96, v97);
      *(_QWORD *)(v16 + v18[19]) = *(_QWORD *)(v17 + v18[19]);
      v98 = v18[20];
      v99 = v16 + v98;
      v100 = v17 + v98;
      *(_BYTE *)(v99 + 32) = *(_BYTE *)(v100 + 32);
      v101 = *(_OWORD *)(v100 + 16);
      *(_OWORD *)v99 = *(_OWORD *)v100;
      *(_OWORD *)(v99 + 16) = v101;
      *(_QWORD *)(a1 + v267[7]) = *(_QWORD *)(a2 + v267[7]);
      *(_QWORD *)(a1 + v267[8]) = *(_QWORD *)(a2 + v267[8]);
      v102 = v267[9];
      v103 = (char *)(a1 + v102);
      v104 = (char *)(a2 + v102);
      v105 = (int *)type metadata accessor for AirQualityViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v104, 1, (uint64_t)v105))
      {
        v106 = sub_100005D40(&qword_1001BFA30);
        memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
      }
      else
      {
        v259((uint64_t)v103, (uint64_t)v104, v261);
        v265(&v103[v105[5]], &v104[v105[5]], v263);
        *(_QWORD *)&v103[v105[6]] = *(_QWORD *)&v104[v105[6]];
        v107 = v105[7];
        v108 = &v103[v107];
        v109 = &v104[v107];
        v110 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 32))(v108, v109, v110);
        v111 = v105[8];
        v112 = &v103[v111];
        v113 = &v104[v111];
        v114 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 32))(v112, v113, v114);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v103, 0, 1, (uint64_t)v105);
      }
      a3 = v269;
      v115 = v267[10];
      v116 = (void *)(a1 + v115);
      v117 = (const void *)(a2 + v115);
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v117, 1, HourPrecipitationChartViewModel))
      {
        v119 = sub_100005D40(&qword_1001BFA38);
        memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v116, v117, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v116, 0, 1, HourPrecipitationChartViewModel);
      }
      *(_QWORD *)(a1 + v267[11]) = *(_QWORD *)(a2 + v267[11]);
      v120 = v267[12];
      v121 = a1 + v120;
      v122 = a2 + v120;
      *(_QWORD *)v121 = *(_QWORD *)v122;
      *(_WORD *)(v121 + 8) = *(_WORD *)(v122 + 8);
      v123 = v267[13];
      v124 = (void *)(a1 + v123);
      v125 = (const void *)(a2 + v123);
      v126 = type metadata accessor for URL(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v125, 1, v126))
      {
        v127 = sub_100005D40(&qword_1001BFA28);
        memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v126 - 8) + 32))(v124, v125, v126);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v124, 0, 1, v126);
      }
      v128 = v267[14];
      v129 = (void *)(a1 + v128);
      v130 = (const void *)(a2 + v128);
      v131 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v130, 1, v131))
      {
        v132 = sub_100005D40(&qword_1001BFA40);
        memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
      }
      else
      {
        v133 = swift_getEnumCaseMultiPayload(v130, v131) == 1;
        v265(v129, v130, v263);
        swift_storeEnumTagMultiPayload(v129, v131, v133);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v129, 0, 1, v131);
      }
      v134 = a1;
      v135 = 2;
      v136 = (uint64_t)v267;
      goto LABEL_35;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_100011894(a1, type metadata accessor for AggregateWeatherViewModel);
LABEL_7:
    v33 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AdaptiveConditionsComplicationDataStatus(0) - 8) + 64);
    v34 = (void *)a1;
    v35 = (const void *)a2;
LABEL_8:
    memcpy(v34, v35, v33);
    goto LABEL_36;
  }
  v270 = a3;
  v36 = type metadata accessor for UUID(0);
  v256 = *(_QWORD *)(v36 - 8);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v256 + 40);
  v37(a1, a2, v36);
  v38 = *(int *)(v6 + 20);
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 40))(v39, v40, v41);
  v268 = (int *)v6;
  v42 = *(int *)(v6 + 24);
  v43 = a1 + v42;
  v44 = a2 + v42;
  v264 = v36;
  v260 = v37;
  v37(a1 + v42, a2 + v42, v36);
  v45 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v46 = v45[5];
  v47 = v43 + v46;
  v48 = v44 + v46;
  v49 = type metadata accessor for Date(0);
  v266 = *(_QWORD *)(v49 - 8);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v266 + 40);
  v50(v47, v48, v49);
  v262 = v49;
  v257 = (void (*)(void *, const void *, uint64_t))v50;
  v50(v43 + v45[6], v44 + v45[6], v49);
  v51 = v45[7];
  v52 = v43 + v51;
  v53 = v44 + v51;
  v54 = sub_100005D40(&qword_1001BF090);
  v258 = *(_QWORD *)(v54 - 8);
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v258 + 40);
  v55(v52, v53, v54);
  v55(v43 + v45[8], v44 + v45[8], v54);
  v56 = v45[9];
  v57 = (_QWORD *)(v43 + v56);
  v58 = (uint64_t *)(v44 + v56);
  v60 = *v58;
  v59 = v58[1];
  v61 = v57[1];
  *v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease(v61);
  v62 = v45[10];
  v63 = (void *)(v43 + v62);
  v64 = (const void *)(v44 + v62);
  LODWORD(v50) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v43 + v62, 1, v54);
  v65 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v64, 1, v54);
  if ((_DWORD)v50)
  {
    if (!v65)
    {
      (*(void (**)(void *, const void *, uint64_t))(v258 + 32))(v63, v64, v54);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v54);
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (v65)
  {
    (*(void (**)(void *, uint64_t))(v258 + 8))(v63, v54);
LABEL_39:
    v140 = sub_100005D40(&qword_1001BF098);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
    goto LABEL_40;
  }
  v55((uint64_t)v63, (uint64_t)v64, v54);
LABEL_40:
  v141 = v45[11];
  v142 = (void *)(v43 + v141);
  v143 = (const void *)(v44 + v141);
  v144 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v43 + v141, 1, v54);
  v145 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v54);
  if (v144)
  {
    if (!v145)
    {
      (*(void (**)(void *, const void *, uint64_t))(v258 + 32))(v142, v143, v54);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v142, 0, 1, v54);
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if (v145)
  {
    (*(void (**)(void *, uint64_t))(v258 + 8))(v142, v54);
LABEL_45:
    v146 = sub_100005D40(&qword_1001BF098);
    memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
    goto LABEL_46;
  }
  v55((uint64_t)v142, (uint64_t)v143, v54);
LABEL_46:
  v147 = v45[12];
  v148 = v43 + v147;
  v149 = v44 + v147;
  v260(v43 + v147, v44 + v147, v264);
  v150 = (int *)type metadata accessor for ConditionViewModel(0);
  v151 = v150[5];
  v152 = v148 + v151;
  v153 = v149 + v151;
  v154 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 40))(v152, v153, v154);
  v155 = v150[6];
  v156 = (_QWORD *)(v148 + v155);
  v157 = (uint64_t *)(v149 + v155);
  v159 = *v157;
  v158 = v157[1];
  v160 = v156[1];
  *v156 = v159;
  v156[1] = v158;
  swift_bridgeObjectRelease(v160);
  v161 = v150[7];
  v162 = (_QWORD *)(v148 + v161);
  v163 = (uint64_t *)(v149 + v161);
  v165 = *v163;
  v164 = v163[1];
  v166 = v162[1];
  *v162 = v165;
  v162[1] = v164;
  swift_bridgeObjectRelease(v166);
  *(_BYTE *)(v148 + v150[8]) = *(_BYTE *)(v149 + v150[8]);
  *(_BYTE *)(v148 + v150[9]) = *(_BYTE *)(v149 + v150[9]);
  *(_BYTE *)(v148 + v150[10]) = *(_BYTE *)(v149 + v150[10]);
  *(_QWORD *)(v43 + v45[13]) = *(_QWORD *)(v44 + v45[13]);
  v167 = v45[14];
  v168 = v43 + v167;
  v169 = v44 + v167;
  v170 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v170 - 8) + 40))(v168, v169, v170);
  v171 = v45[15];
  v172 = (void *)(v43 + v171);
  v173 = (const void *)(v44 + v171);
  LODWORD(v169) = _s13WeatherWidget20WeatherDataViewModelOwet_0(v43 + v171, 1, v262);
  v174 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v173, 1, v262);
  if ((_DWORD)v169)
  {
    if (!v174)
    {
      (*(void (**)(void *, const void *, uint64_t))(v266 + 32))(v172, v173, v262);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v172, 0, 1, v262);
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (v174)
  {
    (*(void (**)(void *, uint64_t))(v266 + 8))(v172, v262);
LABEL_51:
    v175 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v172, v173, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
    goto LABEL_52;
  }
  v257(v172, v173, v262);
LABEL_52:
  v176 = v45[16];
  v177 = (void *)(v43 + v176);
  v178 = (const void *)(v44 + v176);
  v179 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v43 + v176, 1, v262);
  v180 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v178, 1, v262);
  if (v179)
  {
    if (!v180)
    {
      (*(void (**)(void *, const void *, uint64_t))(v266 + 32))(v177, v178, v262);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v177, 0, 1, v262);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v180)
  {
    (*(void (**)(void *, uint64_t))(v266 + 8))(v177, v262);
LABEL_57:
    v181 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v181 - 8) + 64));
    goto LABEL_58;
  }
  v257(v177, v178, v262);
LABEL_58:
  v182 = v45[17];
  v183 = v43 + v182;
  v184 = v44 + v182;
  v185 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v185 - 8) + 40))(v183, v184, v185);
  v186 = v45[18];
  v187 = v43 + v186;
  v188 = v44 + v186;
  v189 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v189 - 8) + 40))(v187, v188, v189);
  *(_QWORD *)(v43 + v45[19]) = *(_QWORD *)(v44 + v45[19]);
  v190 = v45[20];
  v191 = v43 + v190;
  v192 = v44 + v190;
  v193 = *(_QWORD *)(v43 + v190 + 8);
  if (v193)
  {
    v194 = *(_QWORD *)(v192 + 8);
    if (v194)
    {
      *(_QWORD *)v191 = *(_QWORD *)v192;
      *(_QWORD *)(v191 + 8) = v194;
      swift_bridgeObjectRelease(v193);
      v195 = *(_BYTE *)(v192 + 32);
      v196 = *(_QWORD *)(v191 + 16);
      v197 = *(_QWORD *)(v191 + 24);
      v198 = *(_BYTE *)(v191 + 32);
      *(_OWORD *)(v191 + 16) = *(_OWORD *)(v192 + 16);
      *(_BYTE *)(v191 + 32) = v195;
      sub_100007458(v196, v197, v198);
      goto LABEL_63;
    }
    sub_100008EC4(v191);
  }
  v199 = *(_OWORD *)(v192 + 16);
  *(_OWORD *)v191 = *(_OWORD *)v192;
  *(_OWORD *)(v191 + 16) = v199;
  *(_BYTE *)(v191 + 32) = *(_BYTE *)(v192 + 32);
LABEL_63:
  v200 = v268[7];
  v201 = *(_QWORD *)(a1 + v200);
  *(_QWORD *)(a1 + v200) = *(_QWORD *)(a2 + v200);
  swift_bridgeObjectRelease(v201);
  v202 = v268[8];
  v203 = *(_QWORD *)(a1 + v202);
  *(_QWORD *)(a1 + v202) = *(_QWORD *)(a2 + v202);
  swift_bridgeObjectRelease(v203);
  v204 = v268[9];
  v205 = (char *)(a1 + v204);
  v206 = (char *)(a2 + v204);
  v207 = (int *)type metadata accessor for AirQualityViewModel(0);
  v208 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v205, 1, (uint64_t)v207);
  v209 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v206, 1, (uint64_t)v207);
  if (v208)
  {
    if (!v209)
    {
      (*(void (**)(char *, char *, uint64_t))(v256 + 32))(v205, v206, v264);
      (*(void (**)(char *, char *, uint64_t))(v266 + 32))(&v205[v207[5]], &v206[v207[5]], v262);
      *(_QWORD *)&v205[v207[6]] = *(_QWORD *)&v206[v207[6]];
      v210 = v207[7];
      v211 = &v205[v210];
      v212 = &v206[v210];
      v213 = type metadata accessor for AirQualityScale(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v213 - 8) + 32))(v211, v212, v213);
      v214 = v207[8];
      v215 = &v205[v214];
      v216 = &v206[v214];
      v217 = type metadata accessor for AirQualityScaleCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v217 - 8) + 32))(v215, v216, v217);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v205, 0, 1, (uint64_t)v207);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v209)
  {
    sub_100011894((uint64_t)v205, type metadata accessor for AirQualityViewModel);
LABEL_68:
    v218 = sub_100005D40(&qword_1001BFA30);
    memcpy(v205, v206, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
    goto LABEL_69;
  }
  v260((uint64_t)v205, (uint64_t)v206, v264);
  v257(&v205[v207[5]], &v206[v207[5]], v262);
  *(_QWORD *)&v205[v207[6]] = *(_QWORD *)&v206[v207[6]];
  v247 = v207[7];
  v248 = &v205[v247];
  v249 = &v206[v247];
  v250 = type metadata accessor for AirQualityScale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v250 - 8) + 40))(v248, v249, v250);
  v251 = v207[8];
  v252 = &v205[v251];
  v253 = &v206[v251];
  v254 = type metadata accessor for AirQualityScaleCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v254 - 8) + 40))(v252, v253, v254);
LABEL_69:
  a3 = v270;
  v219 = v268[10];
  v220 = (void *)(a1 + v219);
  v221 = (const void *)(a2 + v219);
  v222 = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v223 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v220, 1, v222);
  v224 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v221, 1, v222);
  if (v223)
  {
    if (!v224)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v222 - 8) + 32))(v220, v221, v222);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v220, 0, 1, v222);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  v225 = *(_QWORD *)(v222 - 8);
  if (v224)
  {
    (*(void (**)(void *, uint64_t))(v225 + 8))(v220, v222);
LABEL_74:
    v226 = sub_100005D40(&qword_1001BFA38);
    memcpy(v220, v221, *(_QWORD *)(*(_QWORD *)(v226 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(void *, const void *, uint64_t))(v225 + 40))(v220, v221, v222);
LABEL_75:
  v227 = v268[11];
  v228 = *(_QWORD *)(a1 + v227);
  *(_QWORD *)(a1 + v227) = *(_QWORD *)(a2 + v227);
  swift_bridgeObjectRelease(v228);
  v229 = v268[12];
  v230 = a1 + v229;
  v231 = a2 + v229;
  *(_QWORD *)v230 = *(_QWORD *)v231;
  *(_WORD *)(v230 + 8) = *(_WORD *)(v231 + 8);
  v232 = v268[13];
  v233 = (void *)(a1 + v232);
  v234 = (const void *)(a2 + v232);
  v235 = type metadata accessor for URL(0);
  v236 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v233, 1, v235);
  v237 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v234, 1, v235);
  if (v236)
  {
    if (!v237)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v235 - 8) + 32))(v233, v234, v235);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v233, 0, 1, v235);
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  v238 = *(_QWORD *)(v235 - 8);
  if (v237)
  {
    (*(void (**)(void *, uint64_t))(v238 + 8))(v233, v235);
LABEL_80:
    v239 = sub_100005D40(&qword_1001BFA28);
    memcpy(v233, v234, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
    goto LABEL_81;
  }
  (*(void (**)(void *, const void *, uint64_t))(v238 + 40))(v233, v234, v235);
LABEL_81:
  v240 = v268[14];
  v241 = a1 + v240;
  v242 = a2 + v240;
  v243 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  v244 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v241, 1, v243);
  v245 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v242, 1, v243);
  if (v244)
  {
    if (!v245)
    {
      v246 = swift_getEnumCaseMultiPayload(v242, v243) == 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v266 + 32))(v241, v242, v262);
      swift_storeEnumTagMultiPayload(v241, v243, v246);
      v134 = v241;
      v135 = 1;
      v136 = v243;
LABEL_35:
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v134, 0, v135, v136);
      goto LABEL_36;
    }
    goto LABEL_86;
  }
  if (v245)
  {
    sub_100011894(v241, type metadata accessor for AggregateWeatherViewModel.SunEvent);
LABEL_86:
    v33 = *(_QWORD *)(*(_QWORD *)(sub_100005D40(&qword_1001BFA40) - 8) + 64);
    v34 = (void *)v241;
    v35 = (const void *)v242;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_100011894(v241, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v242, v243);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v266 + 32))(v241, v242, v262);
    swift_storeEnumTagMultiPayload(v241, v243, EnumCaseMultiPayload == 1);
  }
LABEL_36:
  v137 = *(int *)(a3 + 20);
  v138 = *(_QWORD *)(a1 + v137);
  *(_QWORD *)(a1 + v137) = *(_QWORD *)(a2 + v137);
  swift_release(v138);
  return a1;
}

uint64_t sub_1000D18FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D1908);
}

uint64_t sub_1000D1908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = type metadata accessor for AdaptiveConditionsComplicationDataStatus(0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_1000D1980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D198C);
}

uint64_t sub_1000D198C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for AdaptiveConditionsComplicationDataStatus(0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AdaptiveConditionsRectangularContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C32A0;
  if (!qword_1001C32A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AdaptiveConditionsRectangularContentView);
  return result;
}

uint64_t sub_1000D1A38(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for AdaptiveConditionsComplicationDataStatus(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000D1AAC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019FDD0, 1);
}

void sub_1000D1ABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10002325C();
  v5 = v4 - v3;
  v6 = sub_100005D40(&qword_1001C32D8);
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_10002325C();
  v10 = v9 - v8;
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v11);
  *(_QWORD *)(v10 + 8) = 0;
  *(_BYTE *)(v10 + 16) = 1;
  v12 = sub_100005D40(&qword_1001C32E0);
  sub_1000D1BDC(v0, v10 + *(int *)(v12 + 44));
  static AccessibilityChildBehavior.combine.getter(v13);
  sub_100016A54(&qword_1001C32E8, &qword_1001C32D8);
  View.accessibilityElement(children:)(v5, v6, v14);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  sub_100016904(v10, &qword_1001C32D8);
}

void sub_1000D1BDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (**v51)(char *, uint64_t, __n128);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  Swift::String v83;
  uint64_t v84;
  Swift::String v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t OpaqueTypeConformance2;
  uint64_t v109;
  uint64_t v110;
  __n128 v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[10];
  uint64_t HourPrecipitationChartViewModel;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  void (**v150)(char *, uint64_t, __n128);
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  __int16 v186;

  v181 = a1;
  v179 = a2;
  v2 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v2);
  v147 = (char *)v119 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_100005D40(&qword_1001C32F0);
  v150 = *(void (***)(char *, uint64_t, __n128))(v151 - 8);
  __chkstk_darwin(v151);
  v149 = (char *)v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100005D40(&qword_1001C32F8);
  v5 = __chkstk_darwin(v178);
  v148 = (char *)v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v152 = (char *)v119 - v7;
  v175 = sub_100005D40(&qword_1001C3300);
  __chkstk_darwin(v175);
  v177 = (uint64_t)v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100005D40(&qword_1001C3308);
  __chkstk_darwin(v169);
  v170 = (char *)v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100005D40(&qword_1001C3310);
  __chkstk_darwin(v176);
  v171 = (char *)v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100005D40(&qword_1001C3318);
  __chkstk_darwin(v140);
  v119[9] = (char *)v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v164 = *(_QWORD *)(HourPrecipitationChartViewModel - 8);
  __chkstk_darwin(HourPrecipitationChartViewModel);
  v159 = (char *)v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100005D40(&qword_1001C3320);
  __chkstk_darwin(v165);
  v157 = (char *)v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_100005D40(&qword_1001C3328);
  __chkstk_darwin(v155);
  v139 = (char *)v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100005D40(&qword_1001C3330);
  __chkstk_darwin(v134);
  v136 = (char *)v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100005D40(&qword_1001C3338);
  __chkstk_darwin(v135);
  v119[5] = (char *)v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100005D40(&qword_1001C3340);
  __chkstk_darwin(v138);
  v137 = (char *)v119 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for AccessibilityChildBehavior(0);
  v162 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v161 = (char *)v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100005D40(&qword_1001C3348);
  __chkstk_darwin(v128);
  v127 = (char *)v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100005D40(&qword_1001C3350);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v158 = (char *)v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100005D40(&qword_1001C3358);
  v21 = __chkstk_darwin(v146);
  v132 = (char *)v119 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v131 = (char *)v119 - v24;
  __chkstk_darwin(v23);
  v133 = (char *)v119 - v25;
  v124 = type metadata accessor for RainInlineContentViewModel(0);
  __chkstk_darwin(v124);
  v160 = (char *)v119 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_100005D40(&qword_1001C3360);
  __chkstk_darwin(v153);
  v154 = (char *)v119 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100005D40(&qword_1001C3368);
  __chkstk_darwin(v143);
  v144 = (char *)v119 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100005D40(&qword_1001C3370);
  __chkstk_darwin(v168);
  v145 = (char *)v119 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = type metadata accessor for NoWeatherDataRectangularErrorView(0);
  v167 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v166 = (char *)v119 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100005D40(&qword_1001C3378);
  __chkstk_darwin(v123);
  v126 = (char *)v119 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100005D40(&qword_1001C3380);
  __chkstk_darwin(v125);
  v119[4] = (char *)v119 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100005D40(&qword_1001BF098);
  v34 = __chkstk_darwin(v33);
  v119[7] = (char *)v119 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v122 = (char *)v119 - v37;
  v38 = __chkstk_darwin(v36);
  v119[6] = (char *)v119 - v39;
  __chkstk_darwin(v38);
  v121 = (char *)v119 - v40;
  v142 = sub_100005D40(&qword_1001BF090);
  v141 = *(_QWORD *)(v142 - 8);
  v41 = __chkstk_darwin(v142);
  v119[3] = (char *)v119 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v41);
  v119[8] = (char *)v119 - v44;
  v45 = __chkstk_darwin(v43);
  v119[2] = (char *)v119 - v46;
  __chkstk_darwin(v45);
  v48 = (char *)v119 - v47;
  v49 = sub_100005D40(&qword_1001C3388);
  __chkstk_darwin(v49);
  v51 = (void (**)(char *, uint64_t, __n128))((char *)v119 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  v172 = sub_100005D40(&qword_1001C3390);
  __chkstk_darwin(v172);
  v53 = (char *)v119 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for ConditionState(0);
  v54 = __chkstk_darwin(v156);
  v56 = (char *)v119 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  v58 = (_QWORD *)((char *)v119 - v57);
  v59 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v59);
  v61 = (char *)v119 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for AdaptiveConditionsComplicationDataStatus(0);
  __chkstk_darwin(v62);
  v64 = (char *)v119 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100005D40(&qword_1001C3398);
  v66 = __chkstk_darwin(v65);
  v174 = (uint64_t)v119 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v66);
  v180 = (char *)v119 - v68;
  sub_10000F7C4(v181, (uint64_t)v64, type metadata accessor for AdaptiveConditionsComplicationDataStatus);
  v69 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v64, 2, v59);
  if (!v69)
  {
    v149 = v48;
    v150 = v51;
    v151 = v49;
    v152 = v53;
    sub_100011868((uint64_t)v64, (uint64_t)v61, type metadata accessor for AggregateWeatherViewModel);
    type metadata accessor for AdaptiveConditionsRectangularContentView(0);
    sub_10010E4D8((uint64_t)v61, v58);
    sub_10000F7C4((uint64_t)v58, (uint64_t)v56, type metadata accessor for ConditionState);
    v81 = (char *)&loc_1000D282C + 4 * word_10017F9A0[swift_getEnumCaseMultiPayload(v56, v156)];
    v119[0] = v58;
    v119[1] = v61;
    __asm { BR              X10 }
  }
  if (v69 == 1)
  {
    v70 = v166;
    NoWeatherDataRectangularErrorView.init()();
    v71 = v167;
    v72 = v170;
    v73 = v173;
    (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v170, v70, v173);
    swift_storeEnumTagMultiPayload(v72, v169, 1);
    v74 = sub_1000D68F0();
    sub_100016878(&qword_1001C33D8, (uint64_t (*)(uint64_t))&type metadata accessor for NoWeatherDataRectangularErrorView);
    v75 = (uint64_t)v171;
    _ConditionalContent<>.init(storage:)(v72, v172, v73, v74, v76);
    v77 = v177;
    sub_1000168D8(v75, v177, &qword_1001C3310);
    swift_storeEnumTagMultiPayload(v77, v175, 0);
    v78 = sub_1000D686C();
    v79 = sub_1000D6BF0();
    v80 = (uint64_t)v180;
    _ConditionalContent<>.init(storage:)(v77, v176, v178, v78, v79);
    sub_100016904(v75, &qword_1001C3310);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v73);
  }
  else
  {
    v82 = v147;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(23, 1);
    v83._countAndFlagsBits = 0;
    v83._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v83);
    v84 = Image.init(systemName:)(0xD000000000000013, 0x8000000100187E60);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release(v84);
    v85._countAndFlagsBits = 0xD000000000000017;
    v85._object = (void *)0x8000000100187E80;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v85);
    v86 = LocalizedStringKey.init(stringInterpolation:)(v82);
    v182 = Text.init(_:tableName:bundle:comment:)(v86, v88, v87 & 1, v89, 0, 0, 0);
    v183 = v90;
    v184 = v91 & 1;
    v185 = v92;
    v186 = 256;
    v93 = v161;
    static AccessibilityChildBehavior.ignore.getter(v182);
    v94 = sub_100005D40(&qword_1001C33A0);
    v95 = sub_1000D6808();
    v96 = v149;
    View.accessibilityElement(children:)(v93, v94, v95);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v93, v163);
    sub_100016868(v182, v183, v184);
    swift_bridgeObjectRelease(v185);
    v97 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000033, 0x8000000100187F20);
    v101 = Text.init(_:tableName:bundle:comment:)(v97, v99, v98 & 1, v100, 0, 0, 0);
    v103 = v102;
    v105 = v104;
    v107 = v106 & 1;
    v182 = v94;
    v183 = v95;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v182, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v109 = (uint64_t)v148;
    v110 = v151;
    View.accessibilityLabel(_:)(v101, v103, v107, v105, v151, OpaqueTypeConformance2);
    sub_100016868(v101, v103, v107);
    v111 = swift_bridgeObjectRelease(v105);
    v150[1](v96, v110, v111);
    v112 = (uint64_t)v152;
    sub_1000168AC(v109, (uint64_t)v152, &qword_1001C32F8);
    v113 = v177;
    sub_1000168D8(v112, v177, &qword_1001C32F8);
    swift_storeEnumTagMultiPayload(v113, v175, 1);
    v114 = sub_1000D686C();
    v115 = sub_1000D6BF0();
    v80 = (uint64_t)v180;
    _ConditionalContent<>.init(storage:)(v113, v176, v178, v114, v115);
    sub_100016904(v112, &qword_1001C32F8);
  }
  v116 = v179;
  v117 = v174;
  sub_1000168D8(v80, v174, &qword_1001C3398);
  sub_1000168D8(v117, v116, &qword_1001C3398);
  v118 = v116 + *(int *)(sub_100005D40(&qword_1001C3418) + 48);
  *(_QWORD *)v118 = 0;
  *(_BYTE *)(v118 + 8) = 1;
  sub_100016904(v80, &qword_1001C3398);
  sub_100016904(v117, &qword_1001C3398);
}

void sub_1000D39EC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  void (*v92)(char *);
  unsigned int v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD v114[3];

  v107 = a3;
  v102 = a2;
  v112 = a4;
  v5 = type metadata accessor for TemperatureHighLowText.Style(0);
  v110 = *(_QWORD *)(v5 - 8);
  v111 = v5;
  __chkstk_darwin(v5);
  v109 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WeatherFormatPlaceholder(0);
  v96 = *(_QWORD *)(v7 - 8);
  v97 = v7;
  __chkstk_darwin(v7);
  v95 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v88 - v14;
  v108 = type metadata accessor for TemperatureHighLowText(0);
  v106 = *(_QWORD *)(v108 - 8);
  v16 = __chkstk_darwin(v108);
  v105 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v104 = (char *)&v88 - v18;
  v19 = sub_100005D40(&qword_1001C06F8);
  v20 = __chkstk_darwin(v19);
  v113 = (uint64_t)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v103 = (uint64_t)&v88 - v22;
  sub_1000D3FE4(a1);
  v23 = a1 + *(int *)(type metadata accessor for AggregateWeatherViewModel(0) + 24);
  v24 = *(int *)(type metadata accessor for CurrentObservationViewModel(0) + 48);
  v25 = (_QWORD *)(v23 + v24 + *(int *)(type metadata accessor for ConditionViewModel(0) + 28));
  v26 = v25[1];
  v114[0] = *v25;
  v114[1] = v26;
  v27 = sub_10001692C();
  swift_bridgeObjectRetain(v26);
  v28 = Text.init<A>(_:)(v114, &type metadata for String, v27);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v35 = static Font.body.getter(v28);
  v36 = Text.font(_:)(v35, v28, v30, v34, v32);
  v99 = v37;
  v100 = v36;
  v98 = v38;
  v101 = v39;
  swift_release(v35);
  sub_100016868(v28, v30, v34);
  swift_bridgeObjectRelease(v32);
  v40 = v15;
  v42 = static WeatherFormatStyle<>.weather.getter(v41);
  v43 = v13;
  NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v42);
  v90 = *(void (**)(char *, uint64_t))(v10 + 8);
  v44 = v40;
  v45 = v9;
  v90(v40, v9);
  v93 = enum case for WeatherFormatPlaceholder.none(_:);
  v46 = v96;
  v92 = *(void (**)(char *))(v96 + 104);
  v47 = v95;
  v48 = v97;
  v92(v95);
  v91 = type metadata accessor for UnitManager(0);
  v49 = static UnitManager.standard.getter(v91);
  v50 = sub_100005D40(&qword_1001BF090);
  v89 = v50;
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v51 = v47;
  v102 = Measurement.formatted<A>(_:placeholder:unitManager:)(v43, v47, v49, &protocol witness table for UnitManager, v50, v45);
  v94 = v52;
  swift_release(v49);
  v53 = *(void (**)(char *, uint64_t))(v46 + 8);
  v54 = v48;
  v53(v51, v48);
  v55 = v90;
  v56 = ((uint64_t (*)(char *, uint64_t))v90)(v43, v45);
  v57 = static WeatherFormatStyle<>.weather.getter(v56);
  v58 = v43;
  NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v57);
  v55(v44, v45);
  v59 = v54;
  v60 = ((uint64_t (*)(char *, _QWORD, uint64_t))v92)(v51, v93, v54);
  v61 = static UnitManager.standard.getter(v60);
  v62 = Measurement.formatted<A>(_:placeholder:unitManager:)(v58, v51, v61, &protocol witness table for UnitManager, v89, v45);
  v64 = v63;
  swift_release(v61);
  v53(v51, v59);
  v65 = ((uint64_t (*)(char *, uint64_t))v55)(v58, v45);
  v66 = static Font.body.getter(v65);
  v67 = static Color.secondary.getter();
  v68 = v109;
  v69 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v110 + 104))(v109, enum case for TemperatureHighLowText.Style.textLabels(_:), v111);
  v70 = static Alignment.leading.getter(v69);
  v71 = v104;
  TemperatureHighLowText.init(highTemperature:lowTemperature:font:foregroundColor:style:textAlignment:alignVertically:textHeightFrame:)(v102, v94, v62, v64, v66, v67, v68, v70, 0.0, v72, 0);
  v73 = v103;
  v74 = v113;
  sub_1000168D8(v103, v113, &qword_1001C06F8);
  LOBYTE(v114[0]) = v98 & 1;
  v75 = v105;
  v76 = v106;
  v77 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
  v78 = v108;
  v77(v105, v71, v108);
  v79 = v74;
  v80 = v112;
  sub_1000168D8(v79, v112, &qword_1001C06F8);
  v81 = sub_100005D40(&qword_1001C3448);
  v82 = v80 + *(int *)(v81 + 48);
  v83 = v80;
  LOBYTE(v80) = v114[0];
  v85 = v99;
  v84 = v100;
  *(_QWORD *)v82 = v100;
  *(_QWORD *)(v82 + 8) = v85;
  *(_BYTE *)(v82 + 16) = v80;
  v86 = v101;
  *(_QWORD *)(v82 + 24) = v101;
  v77((char *)(v83 + *(int *)(v81 + 64)), v75, v78);
  sub_100016828(v84, v85, v80);
  v87 = *(void (**)(char *, uint64_t))(v76 + 8);
  swift_bridgeObjectRetain(v86);
  v87(v71, v78);
  sub_100016904(v73, &qword_1001C06F8);
  v87(v75, v78);
  sub_100016868(v84, v85, v114[0]);
  swift_bridgeObjectRelease(v86);
  sub_100016904(v113, &qword_1001C06F8);
}

uint64_t sub_1000D3FE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  Swift::String v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  Swift::String v97;
  Swift::String v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t OpaqueTypeConformance2;
  __n128 v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, _QWORD, uint64_t);
  unsigned int v121;
  void (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  void *v145;
  char v146;
  uint64_t v147;

  sub_100005D40(&qword_1001C08A8);
  sub_1000230F4();
  __chkstk_darwin(v2);
  sub_1000230E0();
  v132 = v3;
  v4 = sub_100093378();
  v130 = type metadata accessor for AccessibilityChildBehavior(v4);
  v129 = *(_QWORD *)(v130 - 8);
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_1000230E0();
  v128 = v6;
  v7 = sub_100005D40(&qword_1001C3450);
  v135 = *(_QWORD *)(v7 - 8);
  v136 = v7;
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_1000230E0();
  v142 = v9;
  v10 = sub_100093378();
  v133 = type metadata accessor for WeatherFormatPlaceholder(v10);
  v119 = *(_QWORD *)(v133 - 8);
  sub_1000230F4();
  __chkstk_darwin(v11);
  sub_1000230E0();
  v139 = v12;
  v13 = sub_100093378();
  v116 = type metadata accessor for NSUnitTemperature.AttributedWeatherFormatStyle(v13);
  v117 = *(_QWORD *)(v116 - 8);
  sub_1000230F4();
  __chkstk_darwin(v14);
  sub_1000230E0();
  v16 = v15;
  v17 = sub_100093378();
  v141 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(v17);
  v18 = *(_QWORD *)(v141 - 8);
  sub_1000230F4();
  __chkstk_darwin(v19);
  sub_1000230E0();
  v137 = v20;
  v140 = sub_100005D40(&qword_1001BF090);
  v143 = *(_QWORD *)(v140 - 8);
  sub_1000230F4();
  __chkstk_darwin(v21);
  sub_1000230E0();
  v125 = v22;
  v23 = sub_100093378();
  v115 = type metadata accessor for AttributedString(v23);
  v114 = *(_QWORD *)(v115 - 8);
  sub_1000230F4();
  __chkstk_darwin(v24);
  sub_1000230E0();
  v113 = v25;
  v26 = sub_100093378();
  type metadata accessor for LocalizedStringKey.StringInterpolation(v26);
  sub_1000230F4();
  __chkstk_darwin(v27);
  sub_10002325C();
  v30 = v29 - v28;
  v31 = type metadata accessor for Locale.Language(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  sub_10002325C();
  v35 = v34 - v33;
  v36 = type metadata accessor for Locale(0);
  v37 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  sub_10002325C();
  v40 = v39 - v38;
  v42 = static Locale.current.getter(v41);
  Locale.language.getter(v42);
  v127 = v36;
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v40, v36);
  LOBYTE(v37) = Locale.Language.prefersFullTemperatureScale.getter(v43);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v35, v31);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 2);
  v44._countAndFlagsBits = 0;
  v44._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v44);
  v124 = type metadata accessor for AggregateWeatherViewModel(0);
  v131 = a1;
  v45 = a1 + *(int *)(v124 + 24);
  v46 = type metadata accessor for CurrentObservationViewModel(0);
  v47 = *(int *)(v46 + 48);
  v48 = (uint64_t *)(v45 + v47 + *(int *)(type metadata accessor for ConditionViewModel(0) + 24));
  v49 = *v48;
  v50 = v48[1];
  swift_bridgeObjectRetain(v50);
  Image.init(systemName:)(v49, v50);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  sub_1000D6DA4();
  v51._countAndFlagsBits = 32;
  v51._object = (void *)0xE100000000000000;
  v138 = v30;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v51);
  v123 = v46;
  v53 = v45 + *(int *)(v46 + 28);
  if ((v37 & 1) != 0)
  {
    v54 = v125;
    v55 = v140;
    v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v143 + 16))(v125, v53, v140);
    v57 = static WeatherFormatStyle<>.weather.getter(v56);
    NSUnitTemperature.BaseWeatherFormatStyle.attributed.getter(v57);
    sub_1000CD298(*(uint64_t (**)(void))(v18 + 8));
    v121 = enum case for WeatherFormatPlaceholder.none(_:);
    sub_1000D6DAC(*(uint64_t (**)(void))(v119 + 104));
    v58 = sub_1000D6D90();
    v59 = (void *)sub_1000D6D60(v58);
    sub_100016878(&qword_1001C3458, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.AttributedWeatherFormatStyle);
    Measurement.formatted<A>(_:placeholder:unitManager:)(v16, v139, v59, &protocol witness table for UnitManager, v140, v116, v60);
    sub_1000D6DA4();
    v61 = v133;
    sub_1000CD298(*(uint64_t (**)(void))(v119 + 8));
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v16, v116);
    (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v125, v140);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v113);
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v113, v115);
    sub_1000D6D98();
    v62 = LocalizedStringKey.init(stringInterpolation:)(v138);
    sub_100045174(v62, v64, v63 & 1, v65);
    sub_1000D6D70();
  }
  else
  {
    static WeatherFormatStyle<>.weather.getter(v52);
    v121 = enum case for WeatherFormatPlaceholder.none(_:);
    sub_1000D6DAC(*(uint64_t (**)(void))(v119 + 104));
    v69 = sub_1000D6D90();
    v55 = sub_1000D6D60(v69);
    sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
    v16 = v141;
    v70 = Measurement.formatted<A>(_:placeholder:unitManager:)(v137, v139, v55, &protocol witness table for UnitManager, v140, v141);
    v59 = v71;
    swift_release(v55);
    v61 = v133;
    sub_1000CD298(*(uint64_t (**)(void))(v119 + 8));
    sub_1000CD298(*(uint64_t (**)(void))(v18 + 8));
    v72._countAndFlagsBits = v70;
    v72._object = v59;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v72);
    swift_bridgeObjectRelease(v59);
    sub_1000D6D98();
    v73 = LocalizedStringKey.init(stringInterpolation:)(v138);
    sub_100045174(v73, v75, v74 & 1, v76);
    sub_1000D6D70();
    v54 = v125;
  }
  v118 = (uint64_t)v59;
  v126 = v55;
  v77 = v68 & 1;
  v134 = v68 & 1;
  v78 = static Font.headline.getter(v66, v67);
  v80 = Font.bold()(v78, v79);
  swift_release(v78);
  v81 = Text.font(_:)(v80, v59, v16, v77, v55);
  v83 = v82;
  v85 = v84;
  v87 = v86;
  v88 = swift_release(v80);
  v144 = (_QWORD *)v81;
  v145 = (void *)v83;
  v146 = v85 & 1;
  v147 = v87;
  static AccessibilityChildBehavior.ignore.getter(v88);
  View.accessibilityElement(children:)(v128, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v128, v130);
  sub_100016868(v81, v83, v85 & 1);
  swift_bridgeObjectRelease(v87);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 1);
  v89._countAndFlagsBits = 0;
  v89._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v89);
  v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v143 + 16))(v54, v131 + *(int *)(v124 + 24) + *(int *)(v123 + 28), v140);
  v91 = static Set<>.value.getter(v90);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v132, 1, 1, v127);
  static WeatherFormatStyle<>.weather(_:locale:)(v91, v132);
  swift_bridgeObjectRelease(v91);
  sub_100016904(v132, &qword_1001C08A8);
  v120(v139, v121, v61);
  v92 = sub_1000D6D90();
  v93 = static UnitManager.standard.getter(v92);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v94 = Measurement.formatted<A>(_:placeholder:unitManager:)(v137, v139, v93, &protocol witness table for UnitManager, v140, v141);
  v96 = v95;
  sub_1000D6DA4();
  ((void (*)(uint64_t, uint64_t))v119)(v139, v61);
  v122(v137, v141);
  (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v54, v140);
  v97._countAndFlagsBits = v94;
  v97._object = v96;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v97);
  swift_bridgeObjectRelease(v96);
  v98._countAndFlagsBits = 0x7365657267656420;
  v98._object = (void *)0xE800000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v98);
  v99 = LocalizedStringKey.init(stringInterpolation:)(v138);
  v103 = sub_100045174(v99, v101, v100 & 1, v102);
  v105 = v104;
  v107 = v106;
  v109 = v108 & 1;
  v144 = &type metadata for Text;
  v145 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v144, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityLabel(_:)(v103, v105, v109, v107, v136, OpaqueTypeConformance2);
  sub_100016868(v103, v105, v109);
  swift_bridgeObjectRelease(v107);
  sub_100016868(v118, v16, v134);
  v111 = swift_bridgeObjectRelease(v126);
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v135 + 8))(v142, v136, v111);
}

void sub_1000D4938(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;

  v62 = a3;
  v5 = type metadata accessor for AttributedString(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001C06F8);
  v10 = __chkstk_darwin(v9);
  v61 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v60 = (uint64_t)&v56 - v12;
  sub_1000D3FE4(a1);
  v13 = LocalizedStringKey.init(stringLiteral:)(0x6F2065636E616843, 0xEE006E6961522066);
  v17 = Text.init(_:tableName:bundle:comment:)(v13, v15, v14 & 1, v16, 0, 0, 0);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = static Font.headline.getter(v17, v18);
  v26 = Font.bold()(v24, v25);
  swift_release(v24);
  v27 = Text.font(_:)(v26, v17, v19, v23, v21);
  v58 = v28;
  v59 = v27;
  v57 = v29;
  LOBYTE(v24) = v30;
  swift_release(v26);
  LOBYTE(v24) = v24 & 1;
  sub_100016868(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  v31 = type metadata accessor for RainInlineContentViewModel(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2 + *(int *)(v31 + 20), v5);
  v32 = Text.init(_:)(v8);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  v39 = static Font.body.getter(v32);
  v40 = Text.font(_:)(v39, v32, v34, v38, v36);
  v42 = v41;
  LOBYTE(v5) = v43;
  v45 = v44;
  swift_release(v39);
  LOBYTE(v39) = v5 & 1;
  sub_100016868(v32, v34, v38);
  swift_bridgeObjectRelease(v36);
  v47 = v60;
  v46 = v61;
  sub_1000168D8(v60, v61, &qword_1001C06F8);
  v63 = v24;
  v48 = v62;
  sub_1000168D8(v46, v62, &qword_1001C06F8);
  v49 = sub_100005D40(&qword_1001C3460);
  v50 = v48 + *(int *)(v49 + 48);
  v52 = v58;
  v51 = v59;
  v53 = v57;
  *(_QWORD *)v50 = v59;
  *(_QWORD *)(v50 + 8) = v53;
  *(_BYTE *)(v50 + 16) = v24;
  *(_QWORD *)(v50 + 24) = v52;
  *(_OWORD *)(v50 + 32) = xmmword_10017FA60;
  v54 = v48 + *(int *)(v49 + 64);
  *(_QWORD *)v54 = v40;
  *(_QWORD *)(v54 + 8) = v42;
  *(_BYTE *)(v54 + 16) = v39;
  *(_QWORD *)(v54 + 24) = v45;
  v55 = v51;
  sub_100016828(v51, v53, v24);
  swift_bridgeObjectRetain(v52);
  sub_100016828(v40, v42, v39);
  swift_bridgeObjectRetain(v45);
  sub_100016904(v47, &qword_1001C06F8);
  sub_100016868(v40, v42, v39);
  swift_bridgeObjectRelease(v45);
  sub_100016868(v55, v53, v63);
  swift_bridgeObjectRelease(v52);
  sub_100016904(v46, &qword_1001C06F8);
}

void sub_1000D4C70(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD);
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  Swift::String v73;
  uint64_t v74;
  Swift::String *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD);
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  Swift::String v88;
  Swift::String v89;
  uint64_t v90;
  Swift::String v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  void *v105;
  void *v106;
  char v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  Swift::String v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  char *v129;
  void (*v130)(char *, uint64_t);
  void (*v131)(char *, uint64_t);
  Swift::String v132;
  Swift::String v133;
  uint64_t v134;
  Swift::String v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t OpaqueTypeConformance2;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t (*v159)(char *, _QWORD, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(char *, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(char *, char *, uint64_t);
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __n128 v188;
  void (*v189)(char *, uint64_t, __n128);
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char *v218;
  void (*v219)(char *, _QWORD, uint64_t);
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void (*v227)(char *, uint64_t);
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  _QWORD *v236;
  void *v237;
  char v238;
  uint64_t v239;

  v209 = a5;
  v208 = a4;
  v221 = a3;
  v234 = a2;
  v228 = a1;
  v215 = a6;
  v211 = type metadata accessor for TemperatureHighLowText.Style(0);
  v210 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v212 = (char *)&v190 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = type metadata accessor for TemperatureHighLowText(0);
  v214 = *(_QWORD *)(v217 - 8);
  v7 = __chkstk_darwin(v217);
  v216 = (char *)&v190 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v213 = (char *)&v190 - v9;
  v10 = sub_100005D40(&qword_1001C08A8);
  __chkstk_darwin(v10);
  v203 = (uint64_t)&v190 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = type metadata accessor for AccessibilityChildBehavior(0);
  v201 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v200 = (char *)&v190 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_100005D40(&qword_1001C3450);
  v204 = *(_QWORD *)(v205 - 8);
  __chkstk_darwin(v205);
  v222 = (char *)&v190 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005D40(&qword_1001C06F8);
  v15 = __chkstk_darwin(v14);
  v223 = (uint64_t)&v190 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v232 = (uint64_t)&v190 - v17;
  v233 = type metadata accessor for WeatherFormatPlaceholder(0);
  v226 = *(_QWORD *)(v233 - 8);
  __chkstk_darwin(v233);
  v231 = (char *)&v190 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = type metadata accessor for NSUnitTemperature.AttributedWeatherFormatStyle(0);
  v197 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v196 = (uint64_t)&v190 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v227 = *(void (**)(char *, uint64_t))(v230 - 8);
  v20 = __chkstk_darwin(v230);
  v206 = (char *)&v190 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v190 - v22;
  v235 = sub_100005D40(&qword_1001BF090);
  v224 = *(_QWORD *)(v235 - 8);
  __chkstk_darwin(v235);
  v218 = (char *)&v190 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = type metadata accessor for AttributedString(0);
  v193 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v192 = (char *)&v190 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v190 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = type metadata accessor for Locale.Language(0);
  v29 = *(_QWORD *)(v225 - 8);
  __chkstk_darwin(v225);
  v31 = (char *)&v190 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = type metadata accessor for Locale(0);
  v32 = *(_QWORD *)(v220 - 8);
  __chkstk_darwin(v220);
  v34 = (char *)&v190 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100005D40(&qword_1001C3468);
  v36 = __chkstk_darwin(v35);
  v207 = (uint64_t)&v190 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v36);
  v40 = (char *)&v190 - v39;
  v41 = __chkstk_darwin(v38);
  v229 = (uint64_t)&v190 - v42;
  v43 = static Axis.Set.horizontal.getter(v41);
  v44 = static Axis.Set.vertical.getter();
  v45 = Axis.Set.init(rawValue:)(0);
  v46 = Axis.Set.init(rawValue:)(v45);
  if (Axis.Set.init(rawValue:)(v46 & v43) != v43)
    v45 = Axis.Set.init(rawValue:)(v45 | v43);
  v47 = Axis.Set.init(rawValue:)(v45);
  if (Axis.Set.init(rawValue:)(v47 & v44) != v44)
    LOBYTE(v45) = Axis.Set.init(rawValue:)(v45 | v44);
  v48 = v233;
  *v40 = v45;
  v49 = sub_100005D40(&qword_1001C3470);
  sub_1000D5CA8(v228, v234, &v40[*(int *)(v49 + 44)]);
  sub_1000168AC((uint64_t)v40, v229, &qword_1001C3468);
  v51 = static Locale.current.getter(v50);
  Locale.language.getter(v51);
  v52 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v34, v220);
  v53 = Locale.Language.prefersFullTemperatureScale.getter(v52);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v225);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 2);
  v54._countAndFlagsBits = 0;
  v54._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v54);
  v195 = type metadata accessor for AggregateWeatherViewModel(0);
  v55 = v221 + *(int *)(v195 + 24);
  v56 = type metadata accessor for CurrentObservationViewModel(0);
  v225 = v56;
  v57 = v55 + *(int *)(v56 + 28);
  v199 = v23;
  if ((v53 & 1) != 0)
  {
    v58 = v224;
    v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v224 + 16);
    v191 = v28;
    v60 = v218;
    v61 = v235;
    v62 = v59(v218, v57, v235);
    v63 = static WeatherFormatStyle<>.weather.getter(v62);
    v190 = v55;
    v64 = v196;
    NSUnitTemperature.BaseWeatherFormatStyle.attributed.getter(v63);
    v227 = (void (*)(char *, uint64_t))*((_QWORD *)v227 + 1);
    v227(v23, v230);
    v65 = v226;
    v66 = *(void (**)(_QWORD))(v226 + 104);
    v67 = v231;
    LODWORD(v228) = enum case for WeatherFormatPlaceholder.none(_:);
    v219 = (void (*)(char *, _QWORD, uint64_t))v66;
    v66(v231);
    v234 = (void *)type metadata accessor for UnitManager(0);
    v68 = static UnitManager.standard.getter(v234);
    sub_100016878(&qword_1001C3458, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.AttributedWeatherFormatStyle);
    v69 = v192;
    v70 = v198;
    Measurement.formatted<A>(_:placeholder:unitManager:)(v64, v67, v68, &protocol witness table for UnitManager, v61, v198, v71);
    swift_release(v68);
    v226 = *(_QWORD *)(v65 + 8);
    ((void (*)(char *, uint64_t))v226)(v67, v233);
    (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v64, v70);
    v72 = v60;
    v28 = v191;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v72, v61);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v69);
    (*(void (**)(char *, uint64_t))(v193 + 8))(v69, v194);
    v73._countAndFlagsBits = 32;
    v73._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v73);
    v74 = *(int *)(v225 + 48);
    v193 = type metadata accessor for ConditionViewModel(0);
    v75 = (Swift::String *)(v190 + v74 + *(int *)(v193 + 28));
  }
  else
  {
    static WeatherFormatStyle<>.weather.getter(v56);
    v76 = v23;
    v77 = v48;
    v78 = v226;
    v79 = *(void (**)(_QWORD))(v226 + 104);
    v80 = v231;
    LODWORD(v228) = enum case for WeatherFormatPlaceholder.none(_:);
    v219 = (void (*)(char *, _QWORD, uint64_t))v79;
    v79(v231);
    v234 = (void *)type metadata accessor for UnitManager(0);
    v81 = static UnitManager.standard.getter(v234);
    sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
    v82 = v76;
    v83 = v76;
    v84 = v230;
    v85 = Measurement.formatted<A>(_:placeholder:unitManager:)(v82, v80, v81, &protocol witness table for UnitManager, v235, v230);
    v87 = v86;
    swift_release(v81);
    v226 = *(_QWORD *)(v78 + 8);
    ((void (*)(char *, uint64_t))v226)(v80, v77);
    v227 = (void (*)(char *, uint64_t))*((_QWORD *)v227 + 1);
    v227(v83, v84);
    v88._countAndFlagsBits = v85;
    v88._object = v87;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v88);
    swift_bridgeObjectRelease(v87);
    v89._countAndFlagsBits = 32;
    v89._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v89);
    v90 = *(int *)(v225 + 48);
    v193 = type metadata accessor for ConditionViewModel(0);
    v75 = (Swift::String *)(v55 + v90 + *(int *)(v193 + 28));
  }
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*v75);
  v91._countAndFlagsBits = 0;
  v91._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v91);
  v92 = LocalizedStringKey.init(stringInterpolation:)(v28);
  v96 = Text.init(_:tableName:bundle:comment:)(v92, v94, v93 & 1, v95, 0, 0, 0);
  v98 = v97;
  v100 = v99;
  v194 = v96;
  v196 = v97;
  v198 = v99;
  v102 = v101 & 1;
  LODWORD(v197) = v101 & 1;
  v103 = static Font.body.getter(v96);
  v104 = (_QWORD *)Text.font(_:)(v103, v96, v98, v102, v100);
  v106 = v105;
  v108 = v107;
  v110 = v109;
  v111 = swift_release(v103);
  v236 = v104;
  v237 = v106;
  v238 = v108 & 1;
  v239 = v110;
  v112 = v200;
  static AccessibilityChildBehavior.ignore.getter(v111);
  View.accessibilityElement(children:)(v112, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v201 + 8))(v112, v202);
  sub_100016868((uint64_t)v236, (uint64_t)v237, v238);
  swift_bridgeObjectRelease(v239);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 2);
  v113._countAndFlagsBits = 0;
  v113._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v113);
  v202 = v221 + *(int *)(v195 + 24);
  v114 = v218;
  v115 = v235;
  v116 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v224 + 16))(v218, v202 + *(int *)(v225 + 28), v235);
  v117 = static Set<>.value.getter(v116);
  v118 = v203;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v203, 1, 1, v220);
  v119 = v199;
  static WeatherFormatStyle<>.weather(_:locale:)(v117, v118);
  swift_bridgeObjectRelease(v117);
  sub_100016904(v118, &qword_1001C08A8);
  v120 = v231;
  v121 = v233;
  v219(v231, v228, v233);
  v122 = type metadata accessor for UnitManager(0);
  v123 = static UnitManager.standard.getter(v122);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v221 = v124;
  v125 = v230;
  v126 = Measurement.formatted<A>(_:placeholder:unitManager:)(v119, v120, v123, &protocol witness table for UnitManager, v115, v230);
  v128 = v127;
  swift_release(v123);
  ((void (*)(char *, uint64_t))v226)(v120, v121);
  v129 = v119;
  v130 = v227;
  v227(v119, v125);
  v131 = v130;
  v227 = v130;
  (*(void (**)(char *, uint64_t))(v224 + 8))(v114, v115);
  v132._countAndFlagsBits = v126;
  v132._object = v128;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v132);
  swift_bridgeObjectRelease(v128);
  v133._countAndFlagsBits = 0x7365657267656420;
  v133._object = (void *)0xEA0000000000202CLL;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v133);
  v134 = *(int *)(v225 + 48);
  type metadata accessor for ConditionViewModel(0);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v202 + v134 + *(int *)(v193 + 28)));
  v135._countAndFlagsBits = 0;
  v135._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v135);
  v136 = LocalizedStringKey.init(stringInterpolation:)(v28);
  v140 = Text.init(_:tableName:bundle:comment:)(v136, v138, v137 & 1, v139, 0, 0, 0);
  v142 = v141;
  v144 = v143;
  v146 = v145 & 1;
  v236 = &type metadata for Text;
  v237 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v236, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v148 = v222;
  v149 = v223;
  v150 = v205;
  View.accessibilityLabel(_:)(v140, v142, v146, v144, v205, OpaqueTypeConformance2);
  sub_100016868(v140, v142, v146);
  v151 = swift_bridgeObjectRelease(v144);
  (*(void (**)(char *, uint64_t, __n128))(v204 + 8))(v148, v150, v151);
  sub_1000168AC(v149, v232, &qword_1001C06F8);
  v153 = static WeatherFormatStyle<>.weather.getter(v152);
  v154 = v206;
  NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v153);
  v155 = v129;
  v156 = v230;
  v131(v129, v230);
  v157 = v231;
  v158 = v233;
  v159 = (uint64_t (*)(char *, _QWORD, uint64_t))v219;
  v160 = ((uint64_t (*)(char *, _QWORD, uint64_t))v219)(v231, v228, v233);
  v161 = static UnitManager.standard.getter(v160);
  v162 = Measurement.formatted<A>(_:placeholder:unitManager:)(v154, v157, v161, &protocol witness table for UnitManager, v235, v156);
  v224 = v163;
  v225 = v162;
  swift_release(v161);
  ((void (*)(char *, uint64_t))v226)(v157, v158);
  v164 = v227;
  v165 = ((uint64_t (*)(char *, uint64_t))v227)(v154, v156);
  v166 = static WeatherFormatStyle<>.weather.getter(v165);
  NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v166);
  v164(v155, v156);
  v167 = v159(v157, v228, v158);
  v168 = static UnitManager.standard.getter(v167);
  v169 = Measurement.formatted<A>(_:placeholder:unitManager:)(v154, v157, v168, &protocol witness table for UnitManager, v235, v156);
  v171 = v170;
  swift_release(v168);
  ((void (*)(char *, uint64_t))v226)(v157, v158);
  v172 = ((uint64_t (*)(char *, uint64_t))v164)(v154, v156);
  v173 = static Font.body.getter(v172);
  v174 = static Color.secondary.getter();
  v175 = v212;
  v176 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v210 + 104))(v212, enum case for TemperatureHighLowText.Style.textLabels(_:), v211);
  v177 = static Alignment.leading.getter(v176);
  v178 = v213;
  TemperatureHighLowText.init(highTemperature:lowTemperature:font:foregroundColor:style:textAlignment:alignVertically:textHeightFrame:)(v225, v224, v169, v171, v173, v174, v175, v177, 0.0, v179, 256);
  v180 = v207;
  sub_1000168D8(v229, v207, &qword_1001C3468);
  v181 = v223;
  sub_1000168D8(v232, v223, &qword_1001C06F8);
  v182 = v214;
  v183 = *(void (**)(char *, char *, uint64_t))(v214 + 16);
  v184 = v216;
  v185 = v217;
  v183(v216, v178, v217);
  v186 = v215;
  sub_1000168D8(v180, v215, &qword_1001C3468);
  v187 = sub_100005D40(&qword_1001C3478);
  sub_1000168D8(v181, v186 + *(int *)(v187 + 48), &qword_1001C06F8);
  v183((char *)(v186 + *(int *)(v187 + 64)), v184, v185);
  sub_100016868(v194, v196, v197);
  v188 = swift_bridgeObjectRelease(v198);
  v189 = *(void (**)(char *, uint64_t, __n128))(v182 + 8);
  v189(v178, v185, v188);
  sub_100016904(v232, &qword_1001C06F8);
  sub_100016904(v229, &qword_1001C3468);
  ((void (*)(char *, uint64_t))v189)(v184, v185);
  sub_100016904(v181, &qword_1001C06F8);
  sub_100016904(v180, &qword_1001C3468);
}

uint64_t sub_1000D5CA8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  __n128 v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  void (*v79)(char *, uint64_t);
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  _BYTE v94[24];
  __int128 v95;
  uint64_t v96;
  char v97;
  uint64_t v98;

  v89 = a3;
  v5 = sub_100005D40(&qword_1001C3480);
  v87 = *(_QWORD *)(v5 - 8);
  v88 = v5;
  v6 = __chkstk_darwin(v5);
  v85 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v86 = (char *)&v81 - v8;
  v9 = type metadata accessor for AccessibilityChildBehavior(0);
  v83 = *(_QWORD *)(v9 - 8);
  v84 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005D40(&qword_1001C3450);
  v91 = *(_QWORD *)(v15 - 8);
  v92 = v15;
  v16 = __chkstk_darwin(v15);
  v82 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v90 = (char *)&v81 - v18;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 2);
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v19);
  v20 = Image.init(systemName:)(0xD00000000000001DLL, 0x8000000100187A30);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  swift_release(v20);
  v21._countAndFlagsBits = 32;
  v21._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v21);
  v22._countAndFlagsBits = a1;
  v22._object = a2;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v22);
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v23);
  v24 = LocalizedStringKey.init(stringInterpolation:)(v14);
  v28 = Text.init(_:tableName:bundle:comment:)(v24, v26, v25 & 1, v27, 0, 0, 0);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v35 = static Font.headline.getter(v28, v29);
  v37 = Font.bold()(v35, v36);
  swift_release(v35);
  v38 = Text.font(_:)(v37, v28, v30, v34, v32);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  swift_release(v37);
  sub_100016868(v28, v30, v34);
  swift_bridgeObjectRelease(v32);
  *(_QWORD *)&v93 = v38;
  *((_QWORD *)&v93 + 1) = v40;
  v94[0] = v42 & 1;
  *(_QWORD *)&v94[8] = v44;
  static AccessibilityChildBehavior.ignore.getter(v45);
  v46 = v82;
  View.accessibilityElement(children:)(v11, &type metadata for Text, &protocol witness table for Text);
  v47 = v84;
  v48 = *(void (**)(char *, uint64_t))(v83 + 8);
  v48(v11, v84);
  sub_100016868(v93, *((uint64_t *)&v93 + 1), v94[0]);
  v49 = swift_bridgeObjectRelease(*(_QWORD *)&v94[8]);
  v50 = v90;
  v51 = (*(uint64_t (**)(char *, char *, uint64_t, __n128))(v91 + 32))(v90, v46, v92, v49);
  v52 = static VerticalAlignment.center.getter(v51);
  sub_1000D6148((uint64_t)&v93);
  v53 = *(_QWORD *)&v94[16];
  v54 = v95;
  v55 = *((_QWORD *)&v95 + 1);
  v57 = v93;
  v56 = *(_OWORD *)v94;
  *(_QWORD *)&v93 = v52;
  *((_QWORD *)&v93 + 1) = 0x4000000000000000;
  v94[0] = 0;
  *(_OWORD *)&v94[8] = v57;
  v95 = v56;
  v96 = v53;
  v97 = v54;
  v98 = v55;
  static AccessibilityChildBehavior.ignore.getter(v58);
  v59 = sub_100005D40(&qword_1001C3488);
  sub_100016A54(&qword_1001C3490, &qword_1001C3488);
  v60 = v85;
  View.accessibilityElement(children:)(v11, v59, v61);
  v48(v11, v47);
  v62 = *(_QWORD *)&v94[8];
  v63 = v95;
  v64 = v96;
  LOBYTE(v47) = v97;
  v65 = v98;
  swift_release(*(_QWORD *)&v94[16]);
  swift_release(v62);
  swift_release(v63);
  sub_100016868(*((uint64_t *)&v63 + 1), v64, v47);
  v66 = swift_bridgeObjectRelease(v65);
  v68 = v86;
  v67 = v87;
  v69 = v88;
  (*(void (**)(char *, char *, uint64_t, __n128))(v87 + 32))(v86, v60, v88, v66);
  v70 = v91;
  v71 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
  v72 = v50;
  v73 = v92;
  v71(v46, v72, v92);
  v74 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  v75 = v67;
  v74(v60, v68, v69);
  v76 = v89;
  v71(v89, v46, v73);
  v77 = sub_100005D40(&qword_1001C3498);
  v74(&v76[*(int *)(v77 + 48)], v60, v69);
  v78 = *(void (**)(char *, uint64_t))(v75 + 8);
  v78(v68, v69);
  v79 = *(void (**)(char *, uint64_t))(v70 + 8);
  v79(v90, v73);
  v78(v60, v69);
  return ((uint64_t (*)(char *, uint64_t))v79)(v46, v73);
}

double sub_1000D6148@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;

  v27 = Image.init(systemName:)(0xD00000000000001DLL, 0x8000000100187A30);
  v2 = static Font.subheadline.getter(v27);
  v26 = Font.bold()(v2, v3);
  swift_release(v2);
  KeyPath = swift_getKeyPath(&unk_10017FA30);
  v4 = LocalizedStringKey.init(stringLiteral:)(0x5720657265766553, 0xEE00726568746165);
  v8 = Text.init(_:tableName:bundle:comment:)(v4, v6, v5 & 1, v7, 0, 0, 0);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.headline.getter(v8, v9);
  v17 = Font.bold()(v15, v16);
  swift_release(v15);
  v18 = Text.font(_:)(v17, v8, v10, v14, v12);
  v20 = v19;
  LOBYTE(v2) = v21;
  v23 = v22;
  swift_release(v17);
  LOBYTE(v2) = v2 & 1;
  sub_100016868(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = KeyPath;
  *(_QWORD *)(a1 + 16) = v26;
  *(_QWORD *)(a1 + 24) = v18;
  *(_QWORD *)(a1 + 32) = v20;
  *(_BYTE *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 48) = v23;
  swift_retain(v27);
  swift_retain(KeyPath);
  swift_retain(v26);
  sub_100016828(v18, v20, v2);
  swift_bridgeObjectRetain(v23);
  sub_100016868(v18, v20, v2);
  swift_release(v26);
  swift_release(KeyPath);
  swift_release(v27);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v23).n128_u64[0];
  return result;
}

void sub_1000D6308(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v7;
  uint64_t HourPrecipitationChartView;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t OpaqueTypeConformance2;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v76 = a2;
  v82 = a3;
  v4 = type metadata accessor for AccessibilityChildBehavior(0);
  v78 = *(_QWORD *)(v4 - 8);
  v79 = v4;
  __chkstk_darwin(v4);
  v73 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v71 = *(_QWORD *)(HourPrecipitationChartViewModel - 8);
  v72 = HourPrecipitationChartViewModel;
  __chkstk_darwin(HourPrecipitationChartViewModel);
  v70 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  HourPrecipitationChartView = type metadata accessor for CompactNextHourPrecipitationChartView(0);
  v9 = *(_QWORD *)(HourPrecipitationChartView - 8);
  v74 = HourPrecipitationChartView;
  v75 = v9;
  __chkstk_darwin(HourPrecipitationChartView);
  v67 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005D40(&qword_1001C34A0);
  v12 = *(_QWORD *)(v11 - 8);
  v80 = v11;
  v81 = v12;
  __chkstk_darwin(v11);
  v69 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005D40(&qword_1001C34A8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v77 = (uint64_t)&v66 - v18;
  v19 = type metadata accessor for RainInlineTruncateFallbackText(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100005D40(&qword_1001C14E8);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v66 - v26;
  v68 = (uint64_t)&v66 - v26;
  sub_10000F7C4(a1, (uint64_t)v21, type metadata accessor for RainInlineContentViewModel);
  v28 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x8000000100188130);
  v32 = Text.init(_:tableName:bundle:comment:)(v28, v30, v29 & 1, v31, 0, 0, 0);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  sub_100016878(&qword_1001C34B0, type metadata accessor for RainInlineTruncateFallbackText);
  View.accessibilityLabel(_:)(v32, v34, v38, v36, v19, v39);
  sub_100016868(v32, v34, v38);
  swift_bridgeObjectRelease(v36);
  sub_100011894((uint64_t)v21, type metadata accessor for RainInlineTruncateFallbackText);
  sub_1000168AC((uint64_t)v25, (uint64_t)v27, &qword_1001C14E8);
  v40 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v70, v76, v72);
  v41 = v67;
  v42 = CompactNextHourPrecipitationChartView.init(model:)(v40);
  v43 = v73;
  static AccessibilityChildBehavior.ignore.getter(v42);
  sub_100016878(&qword_1001C34B8, (uint64_t (*)(uint64_t))&type metadata accessor for CompactNextHourPrecipitationChartView);
  v45 = v44;
  v46 = v69;
  v47 = v74;
  View.accessibilityElement(children:)(v43, v74, v44);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v43, v79);
  v48 = v47;
  v49 = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v41, v47);
  v83 = NextHourPrecipitationChartViewModel.accessibilitySummary.getter(v49);
  v84 = v50;
  v51 = sub_10001692C();
  v52 = Text.init<A>(_:)(&v83, &type metadata for String, v51);
  v54 = v53;
  v56 = v55;
  v58 = v57 & 1;
  v83 = v48;
  v84 = v45;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v83, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v60 = v80;
  View.accessibilityLabel(_:)(v52, v54, v58, v56, v80, OpaqueTypeConformance2);
  sub_100016868(v52, v54, v58);
  v61 = swift_bridgeObjectRelease(v56);
  (*(void (**)(char *, uint64_t, __n128))(v81 + 8))(v46, v60, v61);
  v62 = v77;
  sub_1000168AC((uint64_t)v17, v77, &qword_1001C34A8);
  v63 = v68;
  sub_1000168D8(v68, (uint64_t)v25, &qword_1001C14E8);
  sub_1000168D8(v62, (uint64_t)v17, &qword_1001C34A8);
  v64 = v82;
  sub_1000168D8((uint64_t)v25, v82, &qword_1001C14E8);
  v65 = sub_100005D40(&qword_1001C34C0);
  sub_1000168D8((uint64_t)v17, v64 + *(int *)(v65 + 48), &qword_1001C34A8);
  sub_100016904(v62, &qword_1001C34A8);
  sub_100016904(v63, &qword_1001C14E8);
  sub_100016904((uint64_t)v17, &qword_1001C34A8);
  sub_100016904((uint64_t)v25, &qword_1001C14E8);
}

unint64_t sub_1000D6808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C33A8;
  if (!qword_1001C33A8)
  {
    v1 = sub_100005DC4(&qword_1001C33A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C33A8);
  }
  return result;
}

unint64_t sub_1000D686C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C33B0;
  if (!qword_1001C33B0)
  {
    v1 = sub_100005DC4(&qword_1001C3310);
    sub_1000D68F0();
    sub_100016878(&qword_1001C33D8, (uint64_t (*)(uint64_t))&type metadata accessor for NoWeatherDataRectangularErrorView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C33B0);
  }
  return result;
}

unint64_t sub_1000D68F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C33B8;
  if (!qword_1001C33B8)
  {
    v1 = sub_100005DC4(&qword_1001C3390);
    sub_1000D695C();
    sub_1000D6B4C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C33B8);
  }
  return result;
}

unint64_t sub_1000D695C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C33C0;
  if (!qword_1001C33C0)
  {
    v1 = sub_100005DC4(&qword_1001C3370);
    sub_1000D69E8(&qword_1001C33C8, &qword_1001C3388, &qword_1001C33D0, &qword_1001C3380);
    sub_1000D6A80();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C33C0);
  }
  return result;
}

uint64_t sub_1000D69E8(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005DC4(a2);
    sub_100016A54(a3, a4);
    sub_100016878(&qword_1001C33D8, (uint64_t (*)(uint64_t))&type metadata accessor for NoWeatherDataRectangularErrorView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000D6A80()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1001C33E0;
  if (!qword_1001C33E0)
  {
    v1 = sub_100005DC4(&qword_1001C3358);
    v2 = sub_100005DC4(&qword_1001C3348);
    sub_100016A54(&qword_1001C33E8, &qword_1001C3348);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100016878((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C33E0);
  }
  return result;
}

unint64_t sub_1000D6B4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C33F0;
  if (!qword_1001C33F0)
  {
    v1 = sub_100005DC4(&qword_1001C3328);
    sub_1000D69E8(&qword_1001C33F8, &qword_1001C3340, &qword_1001C3400, &qword_1001C3338);
    sub_100016A54(&qword_1001C3408, &qword_1001C3318);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C33F0);
  }
  return result;
}

unint64_t sub_1000D6BF0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001C3410;
  if (!qword_1001C3410)
  {
    v1 = sub_100005DC4(&qword_1001C32F8);
    v2[0] = sub_100005DC4(&qword_1001C33A0);
    v2[1] = sub_1000D6808();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100016878((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C3410);
  }
  return result;
}

void sub_1000D6C9C()
{
  uint64_t *v0;

  *v0 = sub_1000D6D84();
  sub_100006338();
}

void sub_1000D6CB8()
{
  uint64_t *v0;

  *v0 = sub_1000D6D84();
  sub_100006338();
}

void sub_1000D6CD4(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  EnvironmentValues.font.setter(v1);
  sub_100006338();
}

uint64_t sub_1000D6CFC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];

  v0 = sub_100005DC4(&qword_1001C32D8);
  sub_100016A54(&qword_1001C32E8, &qword_1001C32D8);
  v3[0] = v0;
  v3[1] = v1;
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

uint64_t sub_1000D6D60(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 344) = a1;
  return static UnitManager.standard.getter();
}

uint64_t sub_1000D6D84()
{
  return EnvironmentValues.font.getter();
}

uint64_t sub_1000D6D90()
{
  return type metadata accessor for UnitManager(0);
}

void sub_1000D6D98()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v0);
}

uint64_t sub_1000D6DA4()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000D6DAC@<X0>(uint64_t (*a1)(void)@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 328) = a1;
  return a1();
}

void sub_1000D6DB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, char a10, unsigned __int8 a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  _BOOL4 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  char v189;

  v13 = v11;
  v178 = a8;
  v165 = a7;
  v172 = a6;
  v184 = a5;
  v185 = a4;
  v169 = a3;
  v161 = a2;
  v175 = a1;
  v173 = a9;
  v186 = a11;
  v168 = type metadata accessor for Location(0);
  v166 = *(_QWORD *)(v168 - 8);
  sub_1000230F4();
  __chkstk_darwin(v14);
  sub_1000230E0();
  v171 = v15;
  sub_100005D40(&qword_1001BF0C0);
  sub_1000230F4();
  __chkstk_darwin(v16);
  sub_100023150();
  v170 = v17;
  __chkstk_darwin(v18);
  v164 = (uint64_t *)((char *)&v150 - v19);
  v20 = sub_100093378();
  type metadata accessor for WidgetContext(v20);
  sub_1000230F4();
  __chkstk_darwin(v21);
  sub_1000230E0();
  v174 = v22;
  v23 = sub_100093378();
  v160 = *(_QWORD *)(type metadata accessor for DailyForecastViewModel(v23) - 8);
  sub_1000230F4();
  __chkstk_darwin(v24);
  sub_100023150();
  v167 = v25;
  __chkstk_darwin(v26);
  v181 = (uint64_t)&v150 - v27;
  v28 = sub_100093378();
  v155 = type metadata accessor for CurrentObservationViewModel(v28);
  sub_1000230F4();
  __chkstk_darwin(v29);
  sub_100023150();
  v163 = v30;
  __chkstk_darwin(v31);
  v177 = (char *)&v150 - v32;
  v33 = sub_100093378();
  v154 = type metadata accessor for ContentSizeCategory(v33);
  v153 = *(_QWORD *)(v154 - 8);
  sub_1000230F4();
  __chkstk_darwin(v34);
  sub_1000230E0();
  v152 = v35;
  v36 = sub_100093378();
  v37 = type metadata accessor for Locale.Language(v36);
  v38 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = sub_10009345C();
  v40 = type metadata accessor for Locale(v39);
  v41 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  sub_10002325C();
  v44 = v43 - v42;
  sub_100005D40(&qword_1001C35A8);
  sub_1000230F4();
  __chkstk_darwin(v45);
  sub_10002325C();
  v48 = v47 - v46;
  v49 = type metadata accessor for WidgetFamily(0);
  v179 = *(_QWORD *)(v49 - 8);
  v180 = v49;
  sub_1000230F4();
  __chkstk_darwin(v50);
  sub_10002325C();
  v53 = v52 - v51;
  v54 = static Font.subheadline.getter();
  v162 = v54;
  v55 = *(unsigned __int8 *)(v11 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize);
  v56 = (uint64_t)&OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_showsWidgetBackground;
  LODWORD(v183) = v55;
  if (v55)
  {
    v182 = static Font.footnote.getter(v54);
    v176 = v13;
    if ((*(_BYTE *)(v13 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_showsWidgetBackground) & 1) != 0)
      goto LABEL_91;
    v57 = v176 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetFamily;
    v159 = v44;
    v58 = v41;
    v59 = v40;
    v60 = v12;
    v61 = v38;
    v62 = v37;
    v63 = v179;
    v13 = v180;
    sub_1000D80B8(enum case for WidgetFamily.systemSmall(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v179 + 104));
    sub_1000D7F14(&qword_1001C35B0, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v56 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v53, v13);
    v64 = *(uint64_t (**)(uint64_t, uint64_t))(v63 + 8);
    v37 = v62;
    v38 = v61;
    v12 = v60;
    v40 = v59;
    v41 = v58;
    v44 = v159;
    sub_1000D8040(v53, v64);
    if ((v56 & 1) == 0)
    {
      if ((_DWORD)v183 == 1)
        goto LABEL_17;
      if ((v178 & 1) == 0)
        goto LABEL_17;
LABEL_91:
      sub_1000D80B8(enum case for WidgetFamily.systemSmall(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v179 + 104));
      sub_1000D7F14((unint64_t *)&qword_1001C1430, (uint64_t)&protocol conformance descriptor for WidgetFamily);
      v159 = v37;
      sub_1000D8094();
      sub_1000D8094();
      v83 = v187;
      v56 = v188;
      v84 = sub_1000D8040(v53, *(uint64_t (**)(uint64_t, uint64_t))(v179 + 8));
      if (v56 == v83)
      {
        v85 = static Locale.current.getter(v84);
        Locale.language.getter(v85);
        v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v44, v40);
        v56 = v12;
        v87 = Locale.Language.isArabic.getter(v86);
        v88 = sub_1000D8040(v12, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
        if ((v87 & 1) != 0)
          v89 = static Font.title.getter(v88);
        else
          v89 = static Font.largeTitle.getter(v88);
        v148 = sub_1000D80C4(v89);
        v13 = v176;
        v65 = (uint64_t)v177;
        v37 = v179;
        v149 = static Font.caption.getter(v148);
        v93 = sub_1000D8018(v149);
      }
      else
      {
LABEL_17:
        static Font.Weight.light.getter();
        v90 = sub_1000D800C();
        sub_1000D7FD8(v90);
        v91 = sub_1000D8060();
        sub_1000D80C4(v91);
        sub_100016904(v48, &qword_1001C35A8);
        v92 = static Font.subheadline.getter();
        v93 = sub_1000D8018(v92);
        v13 = v176;
        v65 = (uint64_t)v177;
        v37 = v179;
      }
      v69 = v184;
      v159 = static Font.footnote.getter(v93);
      v77 = static Font.Weight.semibold.getter(v94);
      v158 = 0;
    }
    else
    {
      v65 = (uint64_t)v177;
      if ((_DWORD)v183 == 1)
      {
        v66 = sub_1000D8038(72.0);
        v67 = sub_1000D80D0(v66);
        sub_1000D8018(v67);
        sub_1000D80A0();
        v69 = v184;
      }
      else
      {
        sub_1000D80A0();
        v69 = v184;
        if ((v178 & 1) != 0)
        {
          v96 = static Font.caption.getter(v95);
          sub_1000D8018(v96);
          v68 = sub_1000D8038(40.0);
          v97 = &v188;
        }
        else
        {
          v98 = sub_1000D8038(75.0);
          v68 = sub_1000D80D0(v98);
          v97 = (uint64_t *)&v189;
        }
        *(v97 - 32) = v68;
      }
      v159 = static Font.footnote.getter(v68);
      v158 = 1;
      v77 = static Font.Weight.semibold.getter(v99);
    }
  }
  else
  {
    v70 = ((uint64_t (*)(void))static Font.caption.getter)();
    v182 = v70;
    v37 = v179;
    if ((*(_BYTE *)(v13 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_showsWidgetBackground) & 1) != 0
      || (v71 = v13 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetFamily,
          sub_1000D8024(v70, enum case for WidgetFamily.systemSmall(_:)),
          sub_1000D7F14(&qword_1001C35B0, (uint64_t)&protocol conformance descriptor for WidgetFamily),
          v56 = dispatch thunk of static Equatable.== infix(_:_:)(v71, v53, v38),
          sub_1000D8050(),
          (v56 & 1) == 0))
    {
      static Font.Weight.light.getter();
      v78 = sub_1000D800C();
      sub_1000D7FD8(v78);
      v79 = sub_1000D8060();
      sub_1000D80C4(v79);
      sub_100016904(v48, &qword_1001C35A8);
      v80 = ((uint64_t (*)(void))static Font.caption.getter)();
      v81 = sub_1000D8080(v80);
      v82 = sub_1000D8018(v81);
      v77 = static Font.Weight.medium.getter(v82);
      v158 = 0;
    }
    else
    {
      v158 = 1;
      v72 = sub_1000D8038(50.0);
      v73 = sub_1000D80C4(v72);
      v74 = static Font.caption.getter(v73);
      v75 = sub_1000D8080(v74);
      sub_1000D8018(v75);
      v77 = static Font.Weight.semibold.getter(v76);
    }
    v65 = (uint64_t)v177;
    v69 = v184;
  }
  v100 = HIBYTE(v69) & 0xF;
  if ((static Settings.InternationalAuthenticity.verticalHeroEnabledForCurrentLocale.getter() & 1) == 0)
    goto LABEL_28;
  v101 = v185 & 0xFFFFFFFFFFFFLL;
  if ((v69 & 0x2000000000000000) != 0)
    v101 = HIBYTE(v69) & 0xF;
  if (!v101)
  {
    v151 = HIBYTE(v69) & 0xF;
    if ((v186 & 1) != 0)
    {
      LODWORD(v177) = 1;
    }
    else
    {
      v140 = v13 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
      v141 = v153;
      v142 = v152;
      sub_1000D8070(v152, enum case for ContentSizeCategory.extraLarge(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v153 + 104));
      LODWORD(v177) = sub_10015DC48(v140, v142);
      (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v142, v56);
    }
    v176 = v13;
    sub_1000D7FEC();
    sub_1000D7F14((unint64_t *)&qword_1001C1430, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    sub_1000D8000();
    sub_1000D8000();
    v143 = v37;
    v37 = v187;
    v144 = v188;
    v145 = *(void (**)(uint64_t, uint64_t))(v143 + 8);
    v145(v53, v12);
    if (v144 == v37 && (v177 & 1) != 0)
    {
      v108 = v65;
      LODWORD(v177) = 1;
      v109 = v184;
      if ((v178 & 1) != 0)
      {
        v37 = v179;
        goto LABEL_37;
      }
      v113 = 0;
      v112 = 10.0;
      v37 = v179;
      v115 = v174;
      v69 = v184;
      v65 = v108;
    }
    else
    {
      if ((v178 & 1) != 0)
      {
        sub_1000D7FEC();
        sub_1000D808C();
        sub_1000D8000();
        sub_1000D8000();
        v147 = v187;
        v146 = v188;
        v145(v53, v12);
        if (v146 == v147)
          v112 = 5.0;
        else
          v112 = 13.0;
        v113 = 1;
        v69 = v184;
        sub_1000D80A0();
        goto LABEL_41;
      }
      v113 = 1;
      v112 = 13.0;
      v69 = v184;
      sub_1000D80A0();
      v115 = v174;
    }
    v100 = v151;
  }
  else
  {
LABEL_28:
    v102 = static Settings.InternationalAuthenticity.verticalHeroEnabledForCurrentLocale.getter();
    if ((v102 & 1) != 0 && (v186 & 1) != 0)
    {
      LODWORD(v177) = 1;
    }
    else
    {
      v12 = v69;
      sub_1000D8024(v102, enum case for WidgetFamily.systemSmall(_:));
      sub_1000D7F14((unint64_t *)&qword_1001C1430, (uint64_t)&protocol conformance descriptor for WidgetFamily);
      sub_1000D8048(v38);
      sub_1000D8048(v38);
      v104 = v187;
      v103 = v188;
      sub_1000D8050();
      if (v103 == v104)
      {
        v105 = v13 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
        v106 = v153;
        v107 = v152;
        sub_1000D8070(v152, enum case for ContentSizeCategory.extraExtraLarge(_:), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v153 + 104));
        LODWORD(v177) = sub_10015DF50(v105, v107);
        (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v107, v104);
      }
      else
      {
        LODWORD(v177) = 0;
      }
      v69 = v12;
    }
    if ((v178 & 1) != 0)
    {
      v151 = v100;
      v108 = v65;
      v109 = v69;
LABEL_37:
      sub_1000D7FEC();
      sub_1000D7F14((unint64_t *)&qword_1001C1430, (uint64_t)&protocol conformance descriptor for WidgetFamily);
      sub_1000D808C();
      sub_1000D8048(v12);
      sub_1000D8048(v12);
      v111 = v187;
      v110 = v188;
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v53, v12);
      if (v110 == v111)
        v112 = 5.0;
      else
        v112 = 10.0;
      v69 = v109;
      v65 = v108;
      v113 = 0;
LABEL_41:
      v114 = sub_1000D7C50();
      LODWORD(v179) = v114;
      v115 = v174;
      v100 = v151;
      goto LABEL_44;
    }
    v113 = 0;
    v112 = 10.0;
    v115 = v174;
  }
  sub_1000D808C();
  v114 = sub_1000D7D1C();
  LODWORD(v179) = v114;
LABEL_44:
  if ((v69 & 0x2000000000000000) != 0)
    v116 = v100;
  else
    v116 = v185 & 0xFFFFFFFFFFFFLL;
  if (v116)
    v117 = static Color.white.getter(v114);
  else
    v117 = 0;
  v118 = v175;
  v119 = type metadata accessor for AggregateWeatherViewModel(0);
  sub_1000D7F50(v118 + *(int *)(v119 + 24), v65, type metadata accessor for CurrentObservationViewModel);
  v120 = *(_QWORD *)(v118 + *(int *)(v119 + 32));
  if (!*(_QWORD *)(v120 + 16))
  {
    __break(1u);
    return;
  }
  sub_1000D7F50(v120 + ((*(unsigned __int8 *)(v160 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80)), v181, type metadata accessor for DailyForecastViewModel);
  v121 = v161;
  sub_1000D7F50(v161, v115, type metadata accessor for WidgetContext);
  if ((_DWORD)v183 == 2)
  {
    LODWORD(v176) = *(unsigned __int8 *)(v115 + 48) == 2;
    sub_100011894(v115, type metadata accessor for WidgetContext);
  }
  else
  {
    sub_100011894(v115, type metadata accessor for WidgetContext);
    LODWORD(v176) = 0;
  }
  if ((v186 & 1) == 0)
  {
    v122 = *(unsigned __int8 *)(v121 + 48);
    if (v122 == 4)
    {
      v174 = 0x616C6C6572626D75;
      v161 = 0xED00006C6C69662ELL;
      if (v113)
        goto LABEL_60;
      goto LABEL_64;
    }
    if (v122 == 5)
    {
      v161 = 0xEB00000000726574;
      v174 = 0x656D6F6D72656874;
      if (!v113)
        goto LABEL_64;
LABEL_60:
      v123 = !sub_100005BB8(v183);
      goto LABEL_65;
    }
  }
  v174 = 0;
  v161 = 0;
  if (v113)
    goto LABEL_60;
LABEL_64:
  v123 = 1;
LABEL_65:
  LODWORD(v175) = v123;
  v183 = v117;
  v178 = v113;
  if (v116)
    goto LABEL_69;
  v124 = v65 + *(int *)(v155 + 48);
  if ((*(_BYTE *)(v124 + *(int *)(type metadata accessor for ConditionViewModel(0) + 36)) & 1) != 0)
    goto LABEL_69;
  v125 = v53;
  v126 = v53;
  v127 = v180;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v125, enum case for WidgetFamily.systemSmall(_:), v180);
  sub_1000D7F14((unint64_t *)&qword_1001C1430, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  sub_1000D80AC();
  sub_1000D80AC();
  v129 = v187;
  v128 = v188;
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v126, v127);
  if (v128 != v129)
  {
LABEL_69:
    v131 = type metadata accessor for RainInlineContentViewModel(0);
    v130 = v164;
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v164, 1, 1, v131);
  }
  else
  {
    v130 = v164;
    sub_1000D967C(v118, 1, 7, v164, 0.6);
  }
  v132 = 0xE800000000000000;
  if ((v165 & 1) == 0)
    v132 = 0xED00006C6C69662ELL;
  v180 = v132;
  v133 = v163;
  sub_1000D7F50(v65, v163, type metadata accessor for CurrentObservationViewModel);
  v134 = v65;
  v135 = v181;
  v136 = v167;
  sub_1000D7F50(v181, v167, type metadata accessor for DailyForecastViewModel);
  v137 = v170;
  sub_1000D7F90((uint64_t)v130, v170);
  v138 = v171;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 16))(v171, v169, v168);
  v139 = v184;
  swift_bridgeObjectRetain(v184);
  sub_100016904((uint64_t)v130, &qword_1001BF0C0);
  sub_100011894(v135, type metadata accessor for DailyForecastViewModel);
  sub_100011894(v134, type metadata accessor for CurrentObservationViewModel);
  sub_100159758(v133, v136, v137, v138, v185, v139, v172 & 1, v186 & 1, v173, v77, v112, 0.7, v183, 0x6E6F697461636F6CLL, v180, v182, v159, v157, v156,
    v158,
    v182,
    v162,
    v177 & 1,
    v178,
    v179 & 1,
    v175 & 1,
    v174,
    v161,
    v176);
}

uint64_t sub_1000D7C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unsigned int *v6;
  char v7;
  uint64_t v9;

  v1 = type metadata accessor for ContentSizeCategory(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v3) = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize);
  v5 = v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
  if ((_DWORD)v3)
    v6 = (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:);
  else
    v6 = (unsigned int *)&enum case for ContentSizeCategory.extraLarge(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *v6, v1);
  v7 = sub_10015E258(v5, v4);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v7 & 1;
}

uint64_t sub_1000D7D1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v1 = type metadata accessor for ContentSizeCategory(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for ContentSizeCategory.extraExtraLarge(_:), v1);
  LOBYTE(v5) = sub_10015E258(v5, v4);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v5 & 1;
}

uint64_t sub_1000D7DC8(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = type metadata accessor for ContentSizeCategory(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = sub_10009345C();
  v12 = type metadata accessor for WidgetFamily(v11);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10002325C();
  v16 = v15 - v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v15 - v14, a1, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v4, a2, v9);
  v17 = sub_100067564(v16, v4, a3, a4);
  sub_1000D8040(a2, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  return v17;
}

uint64_t sub_1000D7ED4()
{
  return type metadata accessor for CurrentObservationViewAttributesFactory(0);
}

uint64_t type metadata accessor for CurrentObservationViewAttributesFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C34F0;
  if (!qword_1001C34F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CurrentObservationViewAttributesFactory);
  return result;
}

void sub_1000D7F14(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for WidgetFamily(255);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }
  sub_100006338();
}

void sub_1000D7F50(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_100006338();
}

uint64_t sub_1000D7F90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001BF0C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D7FD8(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 1, 1, a1);
}

uint64_t sub_1000D7FEC()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, _QWORD);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v0, *(_QWORD *)(v3 - 176));
}

uint64_t sub_1000D8000()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_1000D800C()
{
  return type metadata accessor for Font.Design(0);
}

uint64_t sub_1000D8018(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 360) = result;
  return result;
}

uint64_t sub_1000D8024(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 104))(v2, a2, *(_QWORD *)(v4 - 176));
}

uint64_t sub_1000D8038(CGFloat a1)
{
  return sub_10004B324(1, a1);
}

uint64_t sub_1000D8040@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1000D8048(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(a1, v1);
}

uint64_t sub_1000D8050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000D8060()
{
  uint64_t v0;
  uint64_t v1;

  return static Font.system(size:weight:design:)(v1, 0, v0);
}

uint64_t sub_1000D8070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 384));
}

uint64_t sub_1000D8080(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 344) = a1;
  return static Font.callout.getter();
}

uint64_t sub_1000D808C()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 - 160));
}

uint64_t sub_1000D8094()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_1000D80AC()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_1000D80B8@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t sub_1000D80C4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 368) = result;
  return result;
}

uint64_t sub_1000D80D0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 368) = a1;
  return static Font.subheadline.getter();
}

uint64_t sub_1000D80DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D80E8);
}

uint64_t sub_1000D80E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000963A4();
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, v0, v2);
}

uint64_t sub_1000D8110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D811C);
}

uint64_t sub_1000D811C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000963A4();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, v0, v0, v2);
}

uint64_t type metadata accessor for RainInlineTruncateFallbackText(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C3610;
  if (!qword_1001C3610)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RainInlineTruncateFallbackText);
  return result;
}

uint64_t sub_1000D8180(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019FE78, 1);
}

void sub_1000D8190(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *a2 = static Axis.Set.horizontal.getter(a1);
  v4 = sub_100005D40(&qword_1001C3648);
  sub_1000D81D0(v2, (uint64_t)&a2[*(int *)(v4 + 44)]);
}

void sub_1000D81D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = a2;
  v3 = sub_100005D40(&qword_1001BF0B8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v38 = (uint64_t)&v35 - v7;
  v8 = sub_100005D40(&qword_1001C3650);
  v9 = __chkstk_darwin(v8);
  v41 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v40 = (uint64_t)&v35 - v11;
  v12 = type metadata accessor for AttributedString(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v37 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v35 - v16;
  v39 = sub_100005D40(&qword_1001C3658);
  v18 = __chkstk_darwin(v39);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v35 - v21;
  v23 = type metadata accessor for RainInlineContentViewModel(0);
  v24 = static Font.body.getter(v23);
  AttributedString.with(font:)();
  swift_release(v24);
  sub_1000D8598((uint64_t)v17, (uint64_t)v20);
  v36 = v13;
  v25 = *(void (**)(char *, uint64_t))(v13 + 8);
  v25(v17, v12);
  sub_1000D8980((uint64_t)v20, (uint64_t)v22);
  sub_10002EFD4(a1 + *(int *)(v23 + 24), (uint64_t)v6, &qword_1001BF0B8);
  v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v6, 1, v12);
  if ((_DWORD)v26 == 1)
  {
    sub_10002F014((uint64_t)v6, &qword_1001BF0B8);
    v27 = v38;
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v38, 1, 1, v12);
  }
  else
  {
    v28 = static Font.body.getter(v26);
    v27 = v38;
    AttributedString.with(font:)();
    swift_release(v28);
    v25(v6, v12);
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v27, 0, 1, v12);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v27, 1, v12) != 1)
    {
      v31 = (uint64_t)v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v37, v27, v12);
      sub_1000D8598(v31, (uint64_t)v20);
      v25((char *)v31, v12);
      v30 = v40;
      sub_1000D8980((uint64_t)v20, v40);
      v29 = 0;
      goto LABEL_6;
    }
  }
  sub_10002F014(v27, &qword_1001BF0B8);
  v29 = 1;
  v30 = v40;
LABEL_6:
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v30, v29, 1, v39);
  sub_10002EFD4((uint64_t)v22, (uint64_t)v20, &qword_1001C3658);
  v32 = v41;
  sub_10002EFD4(v30, v41, &qword_1001C3650);
  v33 = v42;
  sub_10002EFD4((uint64_t)v20, v42, &qword_1001C3658);
  v34 = sub_100005D40(&qword_1001C3660);
  sub_10002EFD4(v32, v33 + *(int *)(v34 + 48), &qword_1001C3650);
  sub_10002F014(v30, &qword_1001C3650);
  sub_10002F014((uint64_t)v22, &qword_1001C3658);
  sub_10002F014(v32, &qword_1001C3650);
  sub_10002F014((uint64_t)v20, &qword_1001C3658);
}

uint64_t sub_1000D8598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  unint64_t v28;
  _QWORD v30[2];
  _QWORD v31[2];
  __int128 v32;
  _BYTE v33[24];
  __int128 v34;
  char v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v30[1] = a2;
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001C3668);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = static VerticalAlignment.center.getter(v11);
  sub_1000D877C(v3, a1, (uint64_t)&v32);
  v15 = v33[16];
  v16 = v34;
  v17 = BYTE8(v34);
  v18 = v32;
  v19 = *(_OWORD *)v33;
  v32 = (unint64_t)v14;
  v33[0] = 1;
  *(_OWORD *)&v33[8] = v18;
  v34 = v19;
  v35 = v15;
  v36 = v16;
  v37 = v17;
  static AccessibilityChildBehavior.ignore.getter(v20);
  v21 = sub_100005D40(&qword_1001C3670);
  sub_10004AFE0(&qword_1001C3678, &qword_1001C3670, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v23 = v22;
  View.accessibilityElement(children:)(v8, v21, v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1000D89C8(*(uint64_t *)&v33[8], *(uint64_t *)&v33[16], v34, *((uint64_t *)&v34 + 1));
  v24 = (uint64_t *)((char *)v3 + *(int *)(type metadata accessor for RainInlineContentViewModel(0) + 28));
  v26 = *v24;
  v25 = v24[1];
  *(_QWORD *)&v32 = v26;
  *((_QWORD *)&v32 + 1) = v25;
  v31[0] = v21;
  v31[1] = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v31, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v28 = sub_10001692C();
  View.accessibilityValue<A>(_:)(&v32, v9, &type metadata for String, OpaqueTypeConformance2, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

double sub_1000D877C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  v6 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v6);
  v8 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v9);
  v12 = &v35[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = a1[1];
  if (v13)
  {
    v14 = *a1;
    swift_bridgeObjectRetain(v13);
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 2);
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v15);
    v16 = Image.init(systemName:)(v14, v13);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release(v16);
    v17._countAndFlagsBits = 32;
    v17._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v17);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(a2);
    v18._countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v18);
    v19 = LocalizedStringKey.init(stringInterpolation:)(v8);
    v36 = Text.init(_:tableName:bundle:comment:)(v19, v21, v20 & 1, v22, 0, 0, 0);
    v37 = v23;
    v38 = v24 & 1;
    v39 = v25;
    v40 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 16))(v12, a2);
    v36 = Text.init(_:)(v12);
    v37 = v27;
    v38 = v26 & 1;
    v39 = v28;
    v40 = 1;
  }
  _ConditionalContent<>.init(storage:)(&v36, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  v29 = v41;
  v30 = v42;
  v31 = v43;
  v32 = v44;
  v33 = v45;
  *(_QWORD *)a3 = v41;
  *(_QWORD *)(a3 + 8) = v30;
  *(_QWORD *)(a3 + 16) = v31;
  *(_QWORD *)(a3 + 24) = v32;
  *(_BYTE *)(a3 + 32) = v33;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 48) = 1;
  sub_1000D89F0(v29, v30, v31, v32);
  return sub_1000D89C8(v29, v30, v31, v32);
}

uint64_t sub_1000D8980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001C3658);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_1000D89C8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  sub_100016868(a1, a2, a3 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  return result;
}

uint64_t sub_1000D89F0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100016828(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain(a4);
}

void sub_1000D8A18()
{
  sub_10004AFE0(&qword_1001C3680, &qword_1001C3688, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
}

uint64_t sub_1000D8A44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  int *v49;
  uint8_t *v50;
  uint64_t v51;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v91 = a1;
  v2 = type metadata accessor for AirQualityScaleCategory(0);
  v86 = *(_QWORD *)(v2 - 8);
  v87 = v2;
  __chkstk_darwin(v2);
  sub_1000230E0();
  v88 = v3;
  v4 = type metadata accessor for AirQualityScale(0);
  v81 = *(_QWORD *)(v4 - 8);
  v82 = v4;
  __chkstk_darwin(v4);
  sub_1000230E0();
  v85 = v5;
  v6 = type metadata accessor for TimeZone(0);
  v83 = *(_QWORD *)(v6 - 8);
  v84 = v6;
  v7 = __chkstk_darwin(v6);
  v79 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v80 = (char *)&v78 - v9;
  sub_100005D40(&qword_1001BFA30);
  sub_100029068();
  __chkstk_darwin(v10);
  sub_10002325C();
  v13 = v12 - v11;
  v89 = type metadata accessor for AirQualityViewModel(0);
  sub_100029068();
  __chkstk_darwin(v14);
  sub_1000230E0();
  v90 = v15;
  v16 = type metadata accessor for AggregateWeatherViewModel(0);
  sub_100029068();
  __chkstk_darwin(v17);
  sub_10002325C();
  v20 = v19 - v18;
  v21 = type metadata accessor for WeatherDataViewModel(0);
  sub_100029068();
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v78 - v26;
  v28 = type metadata accessor for ForecastEntry.Model(0);
  sub_100029068();
  __chkstk_darwin(v29);
  sub_10002325C();
  v32 = (unsigned __int8 *)(v31 - v30);
  v33 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v1 + *(int *)(v33 + 28), (uint64_t)v32, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v32, v28) == 1)
  {
    sub_100011868((uint64_t)v32, (uint64_t)v27, type metadata accessor for WeatherDataViewModel);
    sub_10000F7C4((uint64_t)v27, (uint64_t)v25, type metadata accessor for WeatherDataViewModel);
    if (swift_getEnumCaseMultiPayload(v25, v21))
    {
      sub_100029030((uint64_t)v25, type metadata accessor for WeatherDataViewModel);
      if (qword_1001BEE98 != -1)
        swift_once(&qword_1001BEE98, sub_100097BD0);
      v34 = type metadata accessor for Logger(0);
      v35 = sub_100025184(v34, (uint64_t)qword_1001D9FF0);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)sub_1000290AC();
        *(_WORD *)v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unexpectedly got instant weather instead of aggregate weather", v38, 2u);
        sub_10002534C((uint64_t)v38);
      }

      sub_1000D9078(v39, type metadata accessor for WeatherDataViewModel);
      goto LABEL_16;
    }
    sub_100011868((uint64_t)v25, v20, type metadata accessor for AggregateWeatherViewModel);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v44 = type metadata accessor for Logger(0);
    v45 = sub_100025184(v44, (uint64_t)qword_1001D9FF0);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter(v46);
    v48 = os_log_type_enabled(v46, v47);
    v49 = (int *)v89;
    if (v48)
    {
      v50 = (uint8_t *)sub_1000290AC();
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Making AirQuality complication view model entry from aggregate weather", v50, 2u);
      sub_10002534C((uint64_t)v50);
    }

    sub_1000D8FF0(v20 + *(int *)(v16 + 36), v13);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v13, 1, (uint64_t)v49) == 1)
    {
      sub_100029030(v20, type metadata accessor for AggregateWeatherViewModel);
      sub_1000D9078(v51, type metadata accessor for WeatherDataViewModel);
      sub_1000D9038(v13);
LABEL_16:
      v41 = sub_1000D9080();
      goto LABEL_17;
    }
    sub_100011868(v13, v90, type metadata accessor for AirQualityViewModel);
    v53 = Location.kind.getter();
    v54 = Location.Identifier.Kind.rawValue.getter(v53 & 1);
    v56 = v55;
    v57 = 1;
    v58 = Location.Identifier.Kind.rawValue.getter(1);
    v60 = v54 == v58 && v56 == v59;
    v61 = v56;
    if (!v60)
    {
      v62 = v59;
      v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v56, v58, v59, 0);
      v61 = v62;
    }
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease(v61);
    v63 = v80;
    v65 = Location.timeZone.getter(v64);
    v67 = v83;
    v66 = v84;
    v68 = v79;
    (*(void (**)(char *, char *, uint64_t, __n128))(v83 + 16))(v79, v63, v84, v65);
    v69 = v49[7];
    v70 = v57;
    v71 = v90;
    v78 = *(_QWORD *)(v90 + v49[6]);
    v72 = v85;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v85, v90 + v69, v82);
    v73 = v71 + v49[8];
    v74 = v88;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v88, v73, v87);
    v75 = v70 & 1;
    v76 = v91;
    AirQualityComplicationViewModel.init(localWeather:timeZone:index:scale:currentScaleCategory:)(v75, v68, v78, v72, v74);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v63, v66);
    sub_100029030(v71, type metadata accessor for AirQualityViewModel);
    sub_100029030(v20, type metadata accessor for AggregateWeatherViewModel);
    sub_1000D9078(v77, type metadata accessor for WeatherDataViewModel);
    v41 = sub_1000D9080();
    v42 = v76;
    v43 = 0;
  }
  else
  {
    v40 = *v32;
    v41 = sub_1000D9080();
    if (v40)
    {
LABEL_17:
      v42 = v91;
      v43 = 1;
      return _s13WeatherWidget20WeatherDataViewModelOwst_0(v42, v43, 2, v41);
    }
    v42 = v91;
    v43 = 2;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v42, v43, 2, v41);
}

uint64_t sub_1000D8FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001BFA30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D9038(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001BFA30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000D9078(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_100029030(v2, a2);
}

uint64_t sub_1000D9080()
{
  return type metadata accessor for AirQualityComplicationViewModel(0);
}

unint64_t sub_1000D9088()
{
  return sub_1000D91EC(63);
}

unint64_t sub_1000D90B4()
{
  return sub_1000D91EC(80);
}

unint64_t sub_1000D90E0()
{
  return sub_1000D91EC(77);
}

unint64_t sub_1000D910C()
{
  return sub_1000D91EC(85);
}

id sub_1000D9138(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;

  a3();
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  return v5;
}

id sub_1000D9174()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for WeatherSettingsConstants()
{
  return objc_opt_self(_TtC13WeatherWidget24WeatherSettingsConstants);
}

unint64_t sub_1000D91EC(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

double sub_1000D91F4@<D0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  double result;

  v6 = a1;
  v7 = static Font.subheadline.getter();
  v8 = Font.pointSize(in:)(a2, v7);
  v9 = sub_1000D9308(a1);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  if (v6)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v20 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000016, 0x80000001001883F0);
    v16 = Text.init(_:tableName:bundle:comment:)(v20, v22, v21 & 1, v23, 0, 0, 0);
    v18 = v24 & 1;
  }
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v13 & 1;
  *(_QWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 32) = v16;
  *(_QWORD *)(a3 + 40) = v17;
  *(_QWORD *)(a3 + 48) = v18;
  result = fmin(15.0 / v8, 0.1);
  *(_QWORD *)(a3 + 56) = v19;
  *(_QWORD *)(a3 + 64) = v7;
  *(double *)(a3 + 72) = result;
  return result;
}

uint64_t sub_1000D9308(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  if (a1 - 1 < 2)
  {
    v1 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x8000000100188480);
    v5 = v4 & 1;
    return Text.init(_:tableName:bundle:comment:)(v1, v2, v5, v3, 0, 0, 0);
  }
  if (!a1)
  {
    v1 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000033, 0x8000000100187F20);
    v5 = v6 & 1;
    return Text.init(_:tableName:bundle:comment:)(v1, v2, v5, v3, 0, 0, 0);
  }
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100025184(v8, (uint64_t)qword_1001D9FF0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unexpected error while building a home screen widget", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  return 11565;
}

uint64_t sub_1000D9494()
{
  return type metadata accessor for ErrorViewAttributesFactory(0);
}

uint64_t type metadata accessor for ErrorViewAttributesFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C36E0;
  if (!qword_1001C36E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ErrorViewAttributesFactory);
  return result;
}

void sub_1000D94D4(void (*a1)(uint64_t, uint64_t)@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  sub_100005D40(&qword_1001BF0C0);
  sub_1000230F4();
  v7 = __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __chkstk_darwin(v7);
  v12 = (uint64_t *)((char *)&v18 - v11);
  __chkstk_darwin(v10);
  v14 = (char *)&v18 - v13;
  sub_1000D9CB8(a1, a2, 0, 0, (uint64_t *)((char *)&v18 - v13));
  v15 = sub_1000E01F0();
  sub_10002879C((uint64_t)v14, 1, v15);
  if (v16)
  {
    sub_100016904((uint64_t)v14, &qword_1001BF0C0);
    sub_1000D967C((uint64_t)a1, a2, 25, v12, 0.3);
    sub_10002879C((uint64_t)v12, 1, v15);
    if (v16)
    {
      sub_100016904((uint64_t)v12, &qword_1001BF0C0);
      sub_1000DAD24((uint64_t)a1, a2, v9);
      sub_10002879C((uint64_t)v9, 1, v15);
      if (v16)
      {
        sub_100016904((uint64_t)v9, &qword_1001BF0C0);
        sub_1000DBCE8(a2, a3);
        return;
      }
      v17 = (uint64_t)v9;
    }
    else
    {
      v17 = (uint64_t)v12;
    }
  }
  else
  {
    v17 = (uint64_t)v14;
  }
  sub_10004D278(v17, a3, type metadata accessor for RainInlineContentViewModel);
}

uint64_t sub_1000D967C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  int v42;
  double v43;
  Swift::String_optional v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  __n128 v59;
  id v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  NSDateComponentsFormatterUnitsStyle countAndFlagsBits;
  Swift::String v93;

  v87 = a3;
  v90 = a4;
  v91 = a1;
  v80 = a2;
  LODWORD(countAndFlagsBits) = a2;
  v8 = type metadata accessor for String.LocalizationValue(0);
  v82 = *(_QWORD *)(v8 - 8);
  v83 = v8;
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_1000230E0();
  v81 = v10;
  v11 = sub_100093378();
  v12 = type metadata accessor for AttributedString(v11);
  v84 = *(_QWORD *)(v12 - 8);
  v85 = v12;
  sub_1000230F4();
  __chkstk_darwin(v13);
  sub_1000230E0();
  v86 = v14;
  v15 = sub_100093378();
  v16 = type metadata accessor for HourlyForecastViewModel(v15);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_100023374();
  v18 = type metadata accessor for Locale.Language(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v93._object - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Locale(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v24 = sub_1000E0254();
  v25 = type metadata accessor for Date(v24);
  v88 = *(_QWORD *)(v25 - 8);
  v89 = v25;
  sub_1000230F4();
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v93._object - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = Date.init()(v27);
  if ((_DWORD)countAndFlagsBits)
  {
    v31 = 1;
  }
  else
  {
    v32 = static Locale.current.getter(v30);
    Locale.language.getter(v32);
    v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v5, v22);
    v34 = Locale.Language.isEnglish.getter(v33);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    v31 = 2;
    if ((v34 & 1) != 0)
      v31 = 5;
  }
  countAndFlagsBits = v31;
  v35 = *(_QWORD *)(v91 + *(int *)(type metadata accessor for AggregateWeatherViewModel(0) + 28));
  v36 = *(_QWORD *)(v35 + 16);
  if (!v36)
  {
LABEL_18:
    sub_1000E02D0();
    sub_1000E01F0();
    sub_1000E02A4();
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v45, v46, v47, v48);
  }
  v37 = (double)v87 * 60.0 * 60.0;
  v38 = v35 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v39 = *(_QWORD *)(v17 + 72);
  v91 = v35;
  swift_bridgeObjectRetain(v35);
  while (1)
  {
    sub_10004D258(v38, v6, type metadata accessor for HourlyForecastViewModel);
    v40 = Date.timeIntervalSince(_:)(v29);
    if (v40 <= 0.0)
      goto LABEL_14;
    if (v40 >= v37)
    {
      sub_100011894(v6, type metadata accessor for HourlyForecastViewModel);
LABEL_17:
      swift_bridgeObjectRelease(v91);
      goto LABEL_18;
    }
    v41 = v6 + *(int *)(v16 + 36);
    v42 = *(unsigned __int8 *)(v41 + *(int *)(type metadata accessor for ConditionViewModel(0) + 36));
    if (v42 == 1)
      break;
    if (a5 <= 0.0)
      goto LABEL_13;
LABEL_14:
    sub_100011894(v6, type metadata accessor for HourlyForecastViewModel);
    v38 += v39;
    if (!--v36)
      goto LABEL_17;
  }
  sub_1000E0360();
  if (v43 < a5)
    goto LABEL_14;
LABEL_13:
  v44 = Double.formatHourDuration(unitsStyle:)(countAndFlagsBits);
  if (!v44.value._object)
    goto LABEL_14;
  swift_bridgeObjectRelease(v91);
  if (v42)
    sub_1000E0360();
  v50 = Double.formattedPercent(roundToNearestPercent:)(1);
  v51 = v80;
  v52 = v81;
  countAndFlagsBits = v50._countAndFlagsBits;
  if (v80 == 2)
  {
    sub_1000E0284(0xD000000000000028, (uint64_t)"in ^[%@](styles: ['lowercaseSmallCaps'])");
    v53 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
    v54 = sub_100070EA4(v53, 48);
    *(_OWORD *)(v54 + 16) = xmmword_10017BD10;
    *(Swift::String_optional *)(v54 + 32) = v44;
    sub_100093690();
    v55 = v86;
    v56 = v52;
    v57 = 2;
  }
  else
  {
    sub_1000E0284(0xD00000000000003ALL, (uint64_t)"^[%@](styles: []) in ^[%@](styles: ['lowercaseSmallCaps'])");
    v58 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
    v54 = sub_100070EA4(v58, 64);
    *(_OWORD *)(v54 + 16) = xmmword_10017BD00;
    *(Swift::String *)(v54 + 32) = v50;
    *(Swift::String_optional *)(v54 + 48) = v44;
    sub_100093690();
    swift_bridgeObjectRetain(v50._object);
    v55 = v86;
    v56 = v52;
    v57 = v51;
  }
  sub_1000DF96C(v56, 0, v57, v54, v55);
  v59 = swift_bridgeObjectRelease(v54);
  (*(void (**)(uint64_t, uint64_t, __n128))(v82 + 8))(v52, v83, v59);
  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v60 = (id)qword_1001DA1E8;
  sub_1000E0294();
  v61._object = (void *)0x8000000100188580;
  v61._countAndFlagsBits = 0xD000000000000013;
  v62._countAndFlagsBits = 0;
  v62._object = (void *)0xE000000000000000;
  v63 = NSLocalizedString(_:tableName:bundle:value:comment:)(v61, (Swift::String_optional)0, (NSBundle)v60, v62, v93);

  v64 = sub_100005D40(&qword_1001C1848);
  v65 = sub_100070EA4(v64, 112);
  *(_OWORD *)(v65 + 16) = xmmword_10017BD00;
  *(_QWORD *)(v65 + 56) = &type metadata for String;
  v66 = sub_1000881BC();
  *(_QWORD *)(v65 + 32) = countAndFlagsBits;
  *(_QWORD *)(v65 + 40) = v50._object;
  *(_QWORD *)(v65 + 96) = &type metadata for String;
  *(_QWORD *)(v65 + 104) = v66;
  *(_QWORD *)(v65 + 64) = v66;
  *(Swift::String_optional *)(v65 + 72) = v44;
  v67 = String.init(format:_:)(v63._countAndFlagsBits, v63._object, v65);
  v69 = v68;
  swift_bridgeObjectRelease(v63._object);
  v70 = sub_1000E3C30();
  if (v71)
    v72 = v70;
  else
    v72 = 0x616C6C6572626D75;
  if (v71)
    v73 = v71;
  else
    v73 = 0xED00006C6C69662ELL;
  sub_100011894(v6, type metadata accessor for HourlyForecastViewModel);
  sub_1000E02D0();
  v74 = sub_1000E01F0();
  v75 = v90;
  sub_1000E02A4();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v76, v77, v78, v85);
  *v75 = v72;
  v75[1] = v73;
  sub_1000E02E0((uint64_t)v75 + *(int *)(v74 + 20), v86, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 32));
  v79 = (uint64_t *)((char *)v75 + *(int *)(v74 + 28));
  *v79 = v67;
  v79[1] = v69;
  v45 = (uint64_t)v75;
  v46 = 0;
  v47 = 1;
  v48 = v74;
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v45, v46, v47, v48);
}

void sub_1000D9C3C(unsigned __int8 a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  sub_1000231EC();
}

void sub_1000D9C78()
{
  unsigned __int8 *v0;

  sub_1000D9C3C(*v0);
}

void sub_1000D9C80()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_1000231EC();
}

uint64_t sub_1000D9CB8@<X0>(void (*a1)(uint64_t, uint64_t)@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  void (*v92)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __n128 *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t (*v159)(uint64_t, uint64_t, _QWORD);
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  void (*v163)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void (*v169)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _BYTE *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __n128 *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t (*v189)(uint64_t, uint64_t, uint64_t);
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  void (*v193)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void (*v214)(uint64_t, uint64_t, uint64_t);
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  _QWORD *v228;
  __n128 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  int *v235;
  char *v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  uint64_t v261;
  char *v262;
  void (*v263)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t);
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t (*v267)(uint64_t, uint64_t, uint64_t);
  uint64_t v268;
  void (*v269)(uint64_t, uint64_t);
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;

  v243 = a4;
  v250 = a3;
  v264 = a2;
  v9 = type metadata accessor for AttributedString(0);
  v257 = *(_QWORD *)(v9 - 8);
  sub_1000230F4();
  __chkstk_darwin(v10);
  sub_100023150();
  v242 = v11;
  sub_100023164();
  __chkstk_darwin(v12);
  sub_100023434();
  v258 = v13;
  v14 = sub_100093378();
  type metadata accessor for AttributeContainer(v14);
  sub_1000230F4();
  __chkstk_darwin(v15);
  sub_1000230E0();
  v255 = v16;
  v17 = sub_100093378();
  v254 = type metadata accessor for String.LocalizationValue(v17);
  v251 = *(_QWORD *)(v254 - 8);
  sub_1000230F4();
  __chkstk_darwin(v18);
  sub_1000230E0();
  v253 = v19;
  v20 = sub_100093378();
  v249 = type metadata accessor for Locale.Language(v20);
  v248 = *(_QWORD *)(v249 - 8);
  sub_1000230F4();
  __chkstk_darwin(v21);
  sub_1000230E0();
  v247 = v22;
  v23 = sub_100093378();
  v246 = type metadata accessor for Locale(v23);
  v245 = *(_QWORD *)(v246 - 8);
  sub_1000230F4();
  __chkstk_darwin(v24);
  sub_1000230E0();
  v244 = v25;
  sub_100005D40(&qword_1001BF0B8);
  sub_1000230F4();
  __chkstk_darwin(v26);
  sub_100023150();
  v256 = v27;
  sub_100023164();
  __chkstk_darwin(v28);
  v252 = (uint64_t)&v238 - v29;
  sub_100023164();
  __chkstk_darwin(v30);
  v261 = (uint64_t)&v238 - v31;
  sub_100023164();
  __chkstk_darwin(v32);
  sub_100023434();
  v259 = v33;
  sub_100005D40(&qword_1001BFA38);
  sub_1000230F4();
  __chkstk_darwin(v34);
  sub_1000230E0();
  *(_QWORD *)&v260 = v35;
  v36 = sub_100093378();
  v37 = type metadata accessor for TimeZone(v36);
  v265 = *(_QWORD *)(v37 - 8);
  v266 = v37;
  sub_1000230F4();
  __chkstk_darwin(v38);
  sub_100023374();
  sub_100005D40(&qword_1001C37E0);
  sub_1000230F4();
  __chkstk_darwin(v39);
  sub_1000230E0();
  v267 = v40;
  v272 = sub_100005D40(&qword_1001C37E8);
  sub_1000230F4();
  __chkstk_darwin(v41);
  sub_100023150();
  v263 = (void (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t))v42;
  sub_100023164();
  __chkstk_darwin(v43);
  v262 = (char *)&v238 - v44;
  sub_100023164();
  __chkstk_darwin(v45);
  sub_100023434();
  v268 = v46;
  sub_100005D40(&qword_1001C02A0);
  sub_1000230F4();
  __chkstk_darwin(v47);
  v48 = sub_1000E0254();
  v275 = type metadata accessor for PrecipitationShift(v48);
  v270 = *(_QWORD *)(v275 - 8);
  sub_1000230F4();
  __chkstk_darwin(v49);
  sub_1000230E0();
  v271 = v50;
  v51 = sub_100093378();
  v52 = type metadata accessor for EventViewModel(v51);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = __chkstk_darwin(v52);
  v56 = (char *)&v238 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __chkstk_darwin(v54);
  v59 = (char *)&v238 - v58;
  __chkstk_darwin(v57);
  sub_100023434();
  v274 = v60;
  v61 = sub_100093378();
  v62 = type metadata accessor for AggregateWeatherViewModel(v61);
  v63 = *(int *)(v62 + 44);
  v269 = a1;
  v64 = *(_QWORD *)((char *)a1 + v63);
  v65 = *(_QWORD *)(v64 + 16);
  if (!v65)
    goto LABEL_13;
  v241 = v62;
  v240 = v9;
  v273 = a5;
  v66 = v64 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
  v67 = *(_QWORD *)(v53 + 72);
  swift_bridgeObjectRetain(v64);
  while (1)
  {
    sub_10004D258(v66, (uint64_t)v56, type metadata accessor for EventViewModel);
    if (*v56 == 6)
      break;
    sub_100011894((uint64_t)v56, type metadata accessor for EventViewModel);
    v66 += v67;
    if (!--v65)
    {
      swift_bridgeObjectRelease(v64);
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease(v64);
  sub_1000E02F0((uint64_t)v56);
  v68 = (uint64_t)v59;
  v69 = v274;
  sub_1000E02F0(v68);
  sub_10003EB70(v69 + *(int *)(v52 + 52), v5, &qword_1001C02A0);
  v70 = v275;
  v71 = sub_10002879C(v5, 1, v275);
  if (v79)
  {
    sub_1000E02E8(v71, type metadata accessor for EventViewModel);
    v72 = &qword_1001C02A0;
    v73 = v5;
LABEL_12:
    sub_100016904(v73, v72);
LABEL_13:
    sub_1000E01F0();
    sub_1000E02A4();
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v81, v82, v83, v84);
  }
  v74 = v270;
  v75 = v271;
  v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v270 + 32))(v271, v5, v70);
  Location.timeZone.getter(v76);
  v77 = v267;
  sub_1000DC320(v6, (uint64_t)v267);
  (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v6, v266);
  v78 = v272;
  sub_10002879C((uint64_t)v77, 1, v272);
  if (v79)
  {
    v80 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 8))(v75, v70);
    sub_1000E02E8(v80, type metadata accessor for EventViewModel);
    v72 = &qword_1001C37E0;
    v73 = (uint64_t)v77;
    goto LABEL_12;
  }
  v86 = *(int *)(v78 + 48);
  v87 = v268;
  v88 = v268 + v86;
  v89 = (char *)v77 + v86;
  v90 = type metadata accessor for Precipitation(0);
  v91 = *(_QWORD **)(v90 - 8);
  v92 = (void (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t))v91[4];
  v92(v87, v77, v90);
  v93 = *(_QWORD *)v89;
  v94 = v89[8];
  *(_QWORD *)v88 = *(_QWORD *)v89;
  *(_BYTE *)(v88 + 8) = v94;
  v95 = v264;
  v96 = v78;
  v97 = (uint64_t)v262;
  v98 = &v262[*(int *)(v78 + 48)];
  v99 = v87;
  v100 = v93;
  v267 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v91[2];
  v267((uint64_t)v262, v99, v90);
  *(_QWORD *)v98 = v100;
  v98[8] = v94;
  v265 = v90;
  v266 = v100;
  if (v95 == 2)
  {
    v101 = (uint64_t)v263;
    v102 = (char *)v263 + *(int *)(v96 + 48);
    v92((uint64_t)v263, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v97, v90);
    *(_QWORD *)v102 = v100;
    v102[8] = v94;
    v103 = (void (*)(uint64_t, uint64_t))v91[1];
    v103(v101, v90);
    if ((_DWORD)v94 == 1)
    {
      v104 = 0xEE006C6C69662E6ELL;
      v105 = 0x75732E64756F6C63;
      v106 = v268;
      goto LABEL_20;
    }
  }
  else
  {
    sub_100016904(v97, &qword_1001C37E8);
  }
  v92 = v263;
  v107 = (char *)v263 + *(int *)(v272 + 48);
  v106 = v268;
  sub_1000E02E0((uint64_t)v263, v268, v267);
  *(_QWORD *)v107 = v100;
  v107[8] = v94;
  v105 = sub_1000E3C30();
  v104 = v108;
  v103 = (void (*)(uint64_t, uint64_t))v91[1];
  v103((uint64_t)v92, v90);
  if (!v104)
  {
LABEL_23:
    sub_100016904(v106, &qword_1001C37E8);
    v113 = (*(uint64_t (**)(uint64_t, uint64_t))(v270 + 8))(v271, v275);
    sub_1000E02E8(v113, type metadata accessor for EventViewModel);
    goto LABEL_13;
  }
LABEL_20:
  v109 = v260;
  sub_10003EB70((uint64_t)v269 + *(int *)(v241 + 40), v260, &qword_1001BFA38);
  HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
  v111 = sub_10002879C(v109, 1, HourPrecipitationChartViewModel);
  if (v79)
  {
    swift_bridgeObjectRelease(v104);
    sub_1000CD564(v112, &qword_1001BFA38);
    goto LABEL_23;
  }
  sub_1000CD564(v111, &qword_1001BFA38);
  v114 = 1;
  sub_1000E02A4();
  v118 = sub_1000E031C(v115, v116, v117);
  if (!(_BYTE)v264)
  {
    v119 = v244;
    v120 = static Locale.current.getter(v118);
    v69 = v247;
    Locale.language.getter(v120);
    v121 = sub_100028948(v119, *(uint64_t (**)(uint64_t, _QWORD))(v245 + 8));
    v92 = (void (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t))v69;
    v122 = Locale.Language.isEnglish.getter(v121);
    sub_100028948(v69, *(uint64_t (**)(uint64_t, _QWORD))(v248 + 8));
    if ((v122 & 1) != 0)
      v114 = 5;
    else
      v114 = 2;
  }
  v262 = (char *)v104;
  v239 = v105;
  if ((_DWORD)v94)
  {
    if ((_DWORD)v94 != 1)
    {
      sub_1000E01C8();
      v199 = v266;
      *(_QWORD *)v114 = v266;
      *(_BYTE *)(v114 + 8) = 2;
      sub_1000DF448(v97, v199, 2, v264);
      sub_1000E0240();
      v194 = v273;
      if (v92)
      {
        v200 = sub_100093690();
        AttributeContainer.init()(v200);
        v201 = sub_1000E0334();
        AttributedString.init(_:attributes:)(v201);
        v202 = v69;
        v203 = 0;
      }
      else
      {
        v69 = v259;
        v202 = v259;
        v203 = 1;
      }
      sub_1000E0270(v202, v203);
      goto LABEL_49;
    }
    v123 = sub_1000E02B0();
    if (v124)
    {
      v125 = v123;
      v126 = v124;
      v269 = v103;
      v127 = v253;
      String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ELL, 0x80000001001889E0);
      v128 = sub_100005D40(&qword_1001C37F0);
      v129 = *(_QWORD *)(sub_100005D40(&qword_1001C37F8) - 8);
      v130 = *(_QWORD *)(v129 + 72);
      v131 = *(unsigned __int8 *)(v129 + 80);
      v132 = (v131 + 32) & ~v131;
      v133 = swift_allocObject(v128, v132 + v130, v131 | 7);
      v260 = xmmword_10017BD10;
      *(_OWORD *)(v133 + 16) = xmmword_10017BD10;
      *(_BYTE *)(v133 + v132) = 2;
      sub_1000E0354(v133, 0x8000000100188680);
      v134 = sub_1000DFFAC();
      v135 = Dictionary.init(dictionaryLiteral:)(v133, &type metadata for RainInlineContentViewModelFactory.ContentLength, v254, v134);
      v136 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
      v137 = sub_100070EA4(v136, 48);
      *(_OWORD *)(v137 + 16) = v260;
      sub_1000E0348(v137);
      v138 = v252;
      v139 = v264;
      sub_1000DF96C(v127, v135, v264, v137, v252);
      sub_10002548C();
      swift_bridgeObjectRelease(v137);
      sub_1000E02FC();
      v140 = v240;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v138, 0, 1, v240);
      sub_1000DFF64(v138, v259);
      String.LocalizationValue.init(stringLiteral:)(0xD000000000000029, 0x8000000100188A10);
      v141 = sub_100070EA4(v136, 48);
      *(_OWORD *)(v141 + 16) = v260;
      *(_QWORD *)&v260 = v125;
      sub_1000E0348(v141);
      sub_1000DF96C(v127, 0, v139, v141, v138);
      swift_bridgeObjectRelease(v141);
      v142 = sub_1000E02FC();
      v143 = v261;
      sub_1000CD564(v142, &qword_1001BF0B8);
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v138, 0, 1, v140);
      sub_1000DFF64(v138, v143);
      if (qword_1001BEF68 != -1)
        swift_once(&qword_1001BEF68, sub_100173D84);
      v144 = (id)qword_1001DA1E8;
      sub_1000E0294();
      v152 = sub_1000E0228(v145, 0x8000000100188A40, v146, v147, v148, v149, v150, v151);
      v154 = v153;

      v155 = sub_100005D40(&qword_1001C1848);
      v156 = (__n128 *)sub_100070EA4(v155, 112);
      v157 = sub_1000E0208(v156, (__n128)xmmword_10017BD00);
      v160 = sub_1000E0328(v157, v158, v159);
      *(_QWORD *)v144 = v266;
      v144[8] = 1;
      Precipitation.accessibilityDescription.getter(v160);
      v156[3].n128_u64[1] = (unint64_t)&type metadata for String;
      v161 = sub_1000881BC();
      v162 = sub_1000E0308(v161);
      v269(v162, v125);
      v156[6].n128_u64[0] = (unint64_t)&type metadata for String;
      v156[6].n128_u64[1] = v138;
      v156[4].n128_u64[1] = v260;
      v156[5].n128_u64[0] = v126;
      v114 = String.init(format:_:)(v152, v154, v156);
      v92 = v163;
      v164 = v154;
LABEL_38:
      swift_bridgeObjectRelease(v164);
      v194 = v273;
      v104 = v240;
      v196 = v257;
      v195 = v258;
      v69 = v259;
      v197 = v275;
      v198 = v256;
      goto LABEL_50;
    }
    v204 = (uint64_t)v263;
    v114 = (uint64_t)v263 + *(int *)(v272 + 48);
    sub_1000E0328((uint64_t)v263, v268, v267);
    *(_QWORD *)v114 = v92;
    *(_BYTE *)(v114 + 8) = 1;
    v205 = v204;
    v206 = (uint64_t)v92;
    v207 = 1;
  }
  else
  {
    v165 = sub_1000E02B0();
    if (v166)
    {
      v167 = v165;
      v168 = v166;
      v169 = v92;
      v269 = v103;
      v170 = v253;
      sub_1000E0354(v165, 0x8000000100188680);
      v171 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
      v172 = sub_100070EA4(v171, 48);
      *(_OWORD *)(v172 + 16) = xmmword_10017BD10;
      *(_QWORD *)(v172 + 32) = v167;
      *(_QWORD *)(v172 + 40) = v168;
      swift_bridgeObjectRetain(v168);
      *(_QWORD *)&v260 = v167;
      v173 = v252;
      sub_1000DF96C(v170, 0, v264, v172, v252);
      sub_10002548C();
      sub_100028948(v170, *(uint64_t (**)(uint64_t, _QWORD))(v251 + 8));
      sub_1000E031C(v173, 0, 1);
      sub_1000DFF64(v173, v259);
      v174 = v265;
      if (qword_1001BEF68 != -1)
        swift_once(&qword_1001BEF68, sub_100173D84);
      v175 = (id)qword_1001DA1E8;
      sub_1000E0294();
      v182 = sub_1000E0228(0x206E692040243125, 0xEC00000040243225, v176, v177, v178, v179, v180, v181);
      v184 = v183;

      v185 = sub_100005D40(&qword_1001C1848);
      v186 = (__n128 *)sub_100070EA4(v185, 112);
      v187 = sub_1000E0208(v186, (__n128)xmmword_10017BD00);
      v190 = sub_1000E02E0(v187, v188, v189);
      *(_QWORD *)v175 = v169;
      v175[8] = 0;
      Precipitation.accessibilityDescription.getter(v190);
      v186[3].n128_u64[1] = (unint64_t)&type metadata for String;
      v191 = sub_1000881BC();
      v192 = sub_1000E0308(v191);
      v269(v192, v174);
      v186[6].n128_u64[0] = (unint64_t)&type metadata for String;
      v186[6].n128_u64[1] = v94;
      v186[4].n128_u64[1] = v260;
      v186[5].n128_u64[0] = v168;
      v114 = String.init(format:_:)(v182, v184, v186);
      v92 = v193;
      v164 = v184;
      goto LABEL_38;
    }
    sub_1000E01C8();
    *(_QWORD *)v114 = v92;
    *(_BYTE *)(v114 + 8) = 0;
    v205 = v97;
    v206 = (uint64_t)v92;
    v207 = 0;
  }
  sub_1000DF448(v205, v206, v207, v264);
  sub_1000E0240();
  if (v92)
  {
    v208 = sub_100093690();
    AttributeContainer.init()(v208);
    v209 = sub_1000E0334();
    AttributedString.init(_:attributes:)(v209);
    v210 = v69;
    v211 = 0;
  }
  else
  {
    v69 = v259;
    v210 = v259;
    v211 = 1;
  }
  sub_1000E0270(v210, v211);
  v194 = v273;
LABEL_49:
  v196 = v257;
  v195 = v258;
  v198 = v256;
  v197 = v275;
LABEL_50:
  sub_10003EB70(v69, v198, &qword_1001BF0B8);
  sub_10002879C(v198, 1, v104);
  if (v79)
  {
    swift_bridgeObjectRelease(v262);
    sub_10002548C();
    sub_1000231E4(v261);
    sub_1000231E4(v69);
    sub_1000E02C8(v212, &qword_1001C37E8);
    v213 = sub_1000E01F8();
    sub_1000E02C0(v213, type metadata accessor for EventViewModel);
    sub_1000231E4(v198);
    goto LABEL_13;
  }
  v214 = *(void (**)(uint64_t, uint64_t, uint64_t))(v196 + 32);
  v214(v195, v198, v104);
  if (!v92)
  {
    v229 = swift_bridgeObjectRelease(v262);
    (*(void (**)(uint64_t, uint64_t, __n128))(v196 + 8))(v195, v104, v229);
    sub_1000231E4(v261);
    sub_1000231E4(v69);
    sub_1000E02C8(v230, &qword_1001C37E8);
    v231 = sub_1000E01F8();
    sub_1000E02C0(v231, type metadata accessor for EventViewModel);
    goto LABEL_13;
  }
  v215 = v243;
  if (v243)
  {
    swift_bridgeObjectRetain_n(v243, 2);
    v216 = sub_10002548C();
    AttributeContainer.init()(v216);
    v217 = v197;
    v218 = v69;
    v219 = v242;
    AttributedString.init(_:attributes:)(v250);
    v220 = v240;
    (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v195, v240);
    sub_1000231E4(v261);
    sub_1000231E4(v218);
    sub_1000E02C8(v221, &qword_1001C37E8);
    v222 = (*(uint64_t (**)(uint64_t, uint64_t))(v270 + 8))(v271, v217);
    sub_1000E02C0(v222, type metadata accessor for EventViewModel);
    v223 = sub_1000E01F0();
    sub_1000E02A4();
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v224, v225, v226, v220);
    v227 = v262;
    *v194 = v239;
    v194[1] = (uint64_t)v227;
    v214((uint64_t)v194 + *(int *)(v223 + 20), v219, v220);
    v228 = (uint64_t *)((char *)v194 + *(int *)(v223 + 28));
    *v228 = v250;
    v228[1] = v215;
    v81 = (uint64_t)v194;
    v82 = 0;
    v83 = 1;
    v84 = v223;
  }
  else
  {
    sub_100016904(v69, &qword_1001BF0B8);
    sub_1000E02C8(v232, &qword_1001C37E8);
    v233 = sub_1000E01F8();
    sub_1000E02C0(v233, type metadata accessor for EventViewModel);
    v234 = v194;
    v235 = (int *)sub_1000E01F0();
    v214((uint64_t)v234 + v235[5], v195, v240);
    sub_1000DFF64(v261, (uint64_t)v234 + v235[6]);
    v236 = v262;
    *v234 = v239;
    v234[1] = (uint64_t)v236;
    v237 = (uint64_t *)((char *)v234 + v235[7]);
    *v237 = v114;
    v237[1] = (uint64_t)v92;
    v81 = (uint64_t)v234;
    v82 = 0;
    v83 = 1;
    v84 = (uint64_t)v235;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v81, v82, v83, v84);
}

uint64_t sub_1000DAD24@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t);
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  __int128 v36;
  char *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  __n128 v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char *v53;
  double v54;
  double v55;
  Swift::String_optional v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  const char *v63;
  uint8_t *v64;
  uint32_t v65;
  uint64_t v66;
  os_log_type_t v67;
  _BOOL4 v68;
  void (*v69)(char *, uint64_t, __n128);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  __n128 v78;
  Swift::String v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  Swift::String v83;
  Swift::String v84;
  uint64_t countAndFlagsBits;
  uint64_t v86;
  Swift::String v87;
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  Swift::String v95;
  Swift::String v96;
  Swift::String v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  id v101;
  Swift::String v102;
  Swift::String v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  int *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __n128 v126;
  id v127;
  Swift::String v128;
  Swift::String v129;
  Swift::String v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void (*v140)(char *, uint64_t);
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t (*v144)(char *, uint64_t);
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t *v161;
  NSDateComponentsFormatterUnitsStyle v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  void *object;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  int *v175;
  Swift::String v176;
  Swift::String v177;
  Swift::String v178;
  Swift::String v179;

  v163 = a2;
  v161 = a3;
  v149 = type metadata accessor for String.LocalizationValue(0);
  v148 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v147 = (char *)&v143 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v5);
  v151 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for AttributedString(0);
  v153 = *(_QWORD *)(v154 - 8);
  v7 = __chkstk_darwin(v154);
  v152 = (uint64_t)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v150 = (char *)&v143 - v9;
  v10 = type metadata accessor for DateComponents(0);
  v168 = *(_QWORD *)(v10 - 8);
  v169 = v10;
  __chkstk_darwin(v10);
  v157 = (char *)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = (int *)type metadata accessor for DailyForecastViewModel(0);
  *(_QWORD *)&v167 = *((_QWORD *)v175 - 1);
  __chkstk_darwin(v175);
  v170 = (char *)&v143 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v172 - 8);
  v14 = __chkstk_darwin(v172);
  v171 = (char *)&v143 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v143 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v143 - v19;
  v21 = type metadata accessor for TimeZone(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v143 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for Calendar(0);
  v158 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v26 = (char *)&v143 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for AggregateWeatherViewModel(0);
  Location.timeZone.getter(v27);
  static Calendar.currentCalendar(with:)(v24);
  v28 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
  v145 = v24;
  v146 = v21;
  v29 = v28(v24, v21);
  Date.init()(v29);
  v173 = v18;
  v159 = v20;
  v174 = v26;
  Calendar.startOfDay(for:)(v20);
  v31 = 1;
  if (!(_BYTE)v163)
    v31 = 2;
  v162 = v31;
  v32 = *(_QWORD *)(a1 + *(int *)(v27 + 32));
  v33 = *(_QWORD *)(v32 + 16);
  if (!v33)
  {
    v69 = *(void (**)(char *, uint64_t, __n128))(v13 + 8);
LABEL_25:
    v70 = (uint64_t)v161;
    v71 = v172;
    v69(v173, v172, v30);
    ((void (*)(char *, uint64_t))v69)(v159, v71);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v174, v160);
    v72 = type metadata accessor for RainInlineContentViewModel(0);
    v73 = v70;
LABEL_26:
    v74 = 1;
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v73, v74, 1, v72);
  }
  v144 = v28;
  v165 = v13;
  v34 = v32 + ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80));
  LODWORD(object) = enum case for Calendar.Component.day(_:);
  v164 = *(_QWORD *)(v167 + 72);
  v156 = v32;
  swift_bridgeObjectRetain(v32);
  v35 = type metadata accessor for DailyForecastViewModel;
  *((_QWORD *)&v36 + 1) = 2;
  v167 = xmmword_10017BD10;
  *(_QWORD *)&v36 = 134349056;
  v155 = v36;
  v37 = v157;
  v38 = (uint64_t)v170;
  while (1)
  {
    v39 = v35;
    sub_10004D258(v34, v38, v35);
    Calendar.startOfDay(for:)(v38 + v175[5]);
    v40 = sub_100005D40(&qword_1001C37C0);
    v41 = type metadata accessor for Calendar.Component(0);
    v42 = *(_QWORD *)(v41 - 8);
    v43 = *(unsigned __int8 *)(v42 + 80);
    v44 = (v43 + 32) & ~v43;
    v45 = swift_allocObject(v40, v44 + *(_QWORD *)(v42 + 72), v43 | 7);
    *(_OWORD *)(v45 + 16) = v167;
    v46 = v45 + v44;
    v47 = v171;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v42 + 104))(v46, object, v41);
    v48 = sub_1000DFCCC(v45);
    Calendar.dateComponents(_:from:to:)(v48, v173, v47);
    v49 = swift_bridgeObjectRelease(v48);
    v50 = DateComponents.day.getter(v49);
    if ((v51 & 1) != 0)
    {
      if (qword_1001BEE88 != -1)
        swift_once(&qword_1001BEE88, sub_100097B80);
      v66 = type metadata accessor for Logger(0);
      sub_100025184(v66, (uint64_t)qword_1001D9FC0);
      v58 = Logger.logObject.getter();
      v67 = static os_log_type_t.error.getter();
      v68 = os_log_type_enabled(v58, v67);
      v38 = (uint64_t)v170;
      if (v68)
      {
        v60 = swift_slowAlloc(2, -1);
        *(_WORD *)v60 = 0;
        v61 = v58;
        v62 = v67;
        v63 = "unexpectedly failed to obtain day difference";
        v64 = (uint8_t *)v60;
        v65 = 2;
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v61, v62, v63, v64, v65);
        swift_slowDealloc(v60, -1, -1);
      }
LABEL_21:

      goto LABEL_22;
    }
    v52 = v50;
    v38 = (uint64_t)v170;
    if ((v50 & 0x8000000000000000) == 0)
    {
      if (v50 > 0xA)
      {
        (*(void (**)(char *, uint64_t))(v168 + 8))(v37, v169);
        v76 = *(void (**)(char *, uint64_t))(v165 + 8);
        v77 = v172;
        v76(v47, v172);
        sub_100011894(v38, type metadata accessor for DailyForecastViewModel);
        v78 = swift_bridgeObjectRelease(v156);
        ((void (*)(char *, uint64_t, __n128))v76)(v173, v77, v78);
        v76(v159, v77);
        (*(void (**)(char *, uint64_t))(v158 + 8))(v174, v160);
        v72 = type metadata accessor for RainInlineContentViewModel(0);
        v73 = (uint64_t)v161;
        goto LABEL_26;
      }
      v53 = &v170[v175[8]];
      if (v53[*(int *)(type metadata accessor for ConditionViewModel(0) + 36)] == 1)
      {
        v54 = *(double *)(v38 + v175[10]);
        if (Double.roundedPrecipitationPercent.getter(v54) >= 0.3)
          break;
      }
    }
LABEL_22:
    (*(void (**)(char *, uint64_t))(v168 + 8))(v37, v169);
    v69 = *(void (**)(char *, uint64_t, __n128))(v165 + 8);
    ((void (*)(char *, uint64_t))v69)(v47, v172);
    v35 = v39;
    sub_100011894(v38, v39);
    v34 += v164;
    if (!--v33)
    {
      v30 = swift_bridgeObjectRelease(v156);
      goto LABEL_25;
    }
  }
  if (v52)
  {
    v55 = (double)v52 * 86400.0;
    v56 = Double.formatDayDuration(unitsStyle:)(v162);
    if (v56.value._object)
    {
      swift_bridgeObjectRelease(v156);
      Double.roundedPrecipitationPercent.getter(v54);
      v87 = Double.formattedPercent(roundToNearestPercent:)(1);
      v88 = v163;
      object = v56.value._object;
      if (v163 == 2)
      {
        v89 = v154;
        v90 = v165;
        if ((unint64_t)v52 > 6)
        {
          v123 = (uint64_t)v147;
          String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x8000000100188680);
          v124 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
          v125 = swift_allocObject(v124, 48, 7);
          *(_OWORD *)(v125 + 16) = v167;
          *(Swift::String_optional *)(v125 + 32) = v56;
          swift_bridgeObjectRetain(v56.value._object);
          sub_1000DF96C(v123, 0, 2u, v125, v152);
          v126 = swift_bridgeObjectRelease(v125);
          (*(void (**)(uint64_t, uint64_t, __n128))(v148 + 8))(v123, v149, v126);
        }
        else
        {
          v91 = v145;
          Calendar.timeZone.getter();
          v92 = Date.shortDayOfWeek(timeZone:isStandalone:)(v91, 1);
          v93 = v144(v91, v146);
          AttributeContainer.init()(v93);
          AttributedString.init(_:attributes:)(v92);
        }
      }
      else
      {
        v119 = (uint64_t)v147;
        String.LocalizationValue.init(stringLiteral:)(0xD00000000000003ALL, 0x8000000100188540);
        v120 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
        v121 = swift_allocObject(v120, 64, 7);
        *(_OWORD *)(v121 + 16) = xmmword_10017BD00;
        *(Swift::String *)(v121 + 32) = v87;
        *(Swift::String_optional *)(v121 + 48) = v56;
        swift_bridgeObjectRetain(v56.value._object);
        swift_bridgeObjectRetain(v87._object);
        sub_1000DF96C(v119, 0, v88, v121, v152);
        v122 = swift_bridgeObjectRelease(v121);
        (*(void (**)(uint64_t, uint64_t, __n128))(v148 + 8))(v119, v149, v122);
        v89 = v154;
        v90 = v165;
      }
      if (qword_1001BEF68 != -1)
        swift_once(&qword_1001BEF68, sub_100173D84);
      v127 = (id)qword_1001DA1E8;
      v179._countAndFlagsBits = 0xD0000000000000DELL;
      v179._object = (void *)0x80000001001885A0;
      v128._object = (void *)0x8000000100188580;
      v128._countAndFlagsBits = 0xD000000000000013;
      v129._countAndFlagsBits = 0;
      v129._object = (void *)0xE000000000000000;
      v130 = NSLocalizedString(_:tableName:bundle:value:comment:)(v128, (Swift::String_optional)0, (NSBundle)v127, v129, v179);

      v131 = sub_100005D40(&qword_1001C1848);
      v132 = swift_allocObject(v131, 112, 7);
      *(_OWORD *)(v132 + 16) = xmmword_10017BD00;
      *(_QWORD *)(v132 + 56) = &type metadata for String;
      v133 = sub_1000881BC();
      *(Swift::String *)(v132 + 32) = v87;
      *(_QWORD *)(v132 + 96) = &type metadata for String;
      *(_QWORD *)(v132 + 104) = v133;
      *(_QWORD *)(v132 + 64) = v133;
      *(_QWORD *)(v132 + 72) = v56.value._countAndFlagsBits;
      *(_QWORD *)(v132 + 80) = object;
      v107 = String.init(format:_:)(v130._countAndFlagsBits, v130._object, v132);
      v109 = v134;
      swift_bridgeObjectRelease(v130._object);
      v135 = (uint64_t)v170;
      v136 = sub_1000E3C30();
      if (v137)
        v138 = v136;
      else
        v138 = 0x616C6C6572626D75;
      if (v137)
        v139 = v137;
      else
        v139 = 0xED00006C6C69662ELL;
      (*(void (**)(char *, uint64_t))(v168 + 8))(v157, v169);
      v140 = *(void (**)(char *, uint64_t))(v90 + 8);
      v141 = v172;
      v140(v171, v172);
      sub_100011894(v135, type metadata accessor for DailyForecastViewModel);
      v140(v173, v141);
      v140(v159, v141);
      (*(void (**)(char *, uint64_t))(v158 + 8))(v174, v160);
      v117 = (int *)type metadata accessor for RainInlineContentViewModel(0);
      v118 = v161;
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v161 + v117[6], 1, 1, v89);
      *v118 = v138;
      v118[1] = v139;
      (*(void (**)(char *, uint64_t, uint64_t))(v153 + 32))((char *)v118 + v117[5], v152, v89);
      goto LABEL_59;
    }
    if (qword_1001BEE88 != -1)
      swift_once(&qword_1001BEE88, sub_100097B80);
    v57 = type metadata accessor for Logger(0);
    sub_100025184(v57, (uint64_t)qword_1001D9FC0);
    v58 = Logger.logObject.getter();
    v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = swift_slowAlloc(12, -1);
      *(_DWORD *)v60 = v155;
      *(double *)(v60 + 4) = v55;
      v61 = v58;
      v62 = v59;
      v63 = "unexpectedly failed to derive a day duration string. dayDuration=%{public}f";
      v64 = (uint8_t *)v60;
      v65 = 12;
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  swift_bridgeObjectRelease(v156);
  Double.roundedPrecipitationPercent.getter(v54);
  v79 = Double.formattedPercent(roundToNearestPercent:)(1);
  v80 = v154;
  v81 = v165;
  if (v163 == 2)
  {
    if (qword_1001BEF68 != -1)
      swift_once(&qword_1001BEF68, sub_100173D84);
    v82 = (id)qword_1001DA1E8;
    v176._countAndFlagsBits = 0xD000000000000033;
    v176._object = (void *)0x80000001001889A0;
    v83._countAndFlagsBits = 0x7961646F54;
    v83._object = (void *)0xE500000000000000;
    v84._countAndFlagsBits = 0;
    v84._object = (void *)0xE000000000000000;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v83, (Swift::String_optional)0, (NSBundle)v82, v84, v176)._countAndFlagsBits;

  }
  else
  {
    if (qword_1001BEF68 != -1)
      swift_once(&qword_1001BEF68, sub_100173D84);
    v94 = (id)qword_1001DA1E8;
    v177._countAndFlagsBits = 0xD00000000000008BLL;
    v177._object = (void *)0x8000000100188870;
    v95._countAndFlagsBits = 0x7961646F54204025;
    v95._object = (void *)0xE800000000000000;
    v96._countAndFlagsBits = 0;
    v96._object = (void *)0xE000000000000000;
    v97 = NSLocalizedString(_:tableName:bundle:value:comment:)(v95, (Swift::String_optional)0, (NSBundle)v94, v96, v177);

    v98 = sub_100005D40(&qword_1001C1848);
    v99 = swift_allocObject(v98, 72, 7);
    *(_OWORD *)(v99 + 16) = v167;
    *(_QWORD *)(v99 + 56) = &type metadata for String;
    *(_QWORD *)(v99 + 64) = sub_1000881BC();
    *(Swift::String *)(v99 + 32) = v79;
    swift_bridgeObjectRetain(v79._object);
    countAndFlagsBits = String.init(format:_:)(v97._countAndFlagsBits, v97._object, v99);
    swift_bridgeObjectRelease(v97._object);
    v80 = v154;
  }
  AttributeContainer.init()(v86);
  v100 = v150;
  AttributedString.init(_:attributes:)(countAndFlagsBits);
  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v101 = (id)qword_1001DA1E8;
  v178._countAndFlagsBits = 0xD000000000000099;
  v178._object = (void *)0x8000000100188900;
  v102._countAndFlagsBits = 0x636E616863204025;
  v102._object = (void *)0xEF7961646F742065;
  v103._countAndFlagsBits = 0;
  v103._object = (void *)0xE000000000000000;
  v104 = NSLocalizedString(_:tableName:bundle:value:comment:)(v102, (Swift::String_optional)0, (NSBundle)v101, v103, v178);

  v105 = sub_100005D40(&qword_1001C1848);
  v106 = swift_allocObject(v105, 72, 7);
  *(_OWORD *)(v106 + 16) = v167;
  *(_QWORD *)(v106 + 56) = &type metadata for String;
  *(_QWORD *)(v106 + 64) = sub_1000881BC();
  *(Swift::String *)(v106 + 32) = v79;
  v107 = String.init(format:_:)(v104._countAndFlagsBits, v104._object, v106);
  v109 = v108;
  swift_bridgeObjectRelease(v104._object);
  v110 = (uint64_t)v170;
  v111 = sub_1000E3C30();
  if (v112)
    v113 = v111;
  else
    v113 = 0x616C6C6572626D75;
  if (v112)
    v114 = v112;
  else
    v114 = 0xED00006C6C69662ELL;
  (*(void (**)(char *, uint64_t))(v168 + 8))(v157, v169);
  v115 = *(void (**)(char *, uint64_t))(v81 + 8);
  v116 = v172;
  v115(v171, v172);
  sub_100011894(v110, type metadata accessor for DailyForecastViewModel);
  v115(v173, v116);
  v115(v159, v116);
  (*(void (**)(char *, uint64_t))(v158 + 8))(v174, v160);
  v117 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v118 = v161;
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v161 + v117[6], 1, 1, v80);
  *v118 = v113;
  v118[1] = v114;
  (*(void (**)(char *, char *, uint64_t))(v153 + 32))((char *)v118 + v117[5], v100, v80);
LABEL_59:
  v142 = (uint64_t *)((char *)v118 + v117[7]);
  *v142 = v107;
  v142[1] = v109;
  v73 = (uint64_t)v118;
  v74 = 0;
  v72 = (uint64_t)v117;
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v73, v74, 1, v72);
}

uint64_t sub_1000DBCE8@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSDateComponentsFormatterUnitsStyle v14;
  Swift::String_optional v15;
  uint64_t countAndFlagsBits;
  void *object;
  objc_class *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  NSBundle v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  id v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  Swift::String v76;

  v71 = type metadata accessor for AttributedString.FormattingOptions(0);
  __chkstk_darwin(v71);
  v72 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001C08A8);
  __chkstk_darwin(v5);
  v70 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  v66 = *(_QWORD *)(v7 - 8);
  v67 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for AttributedString(0);
  v69 = *(_QWORD *)(v73 - 8);
  v10 = __chkstk_darwin(v73);
  v68 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v74 = (uint64_t)&v65 - v12;
  v13 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v13);
  if (a1)
    v14 = NSDateComponentsFormatterUnitsStyleAbbreviated;
  else
    v14 = NSDateComponentsFormatterUnitsStyleShort;
  v15 = Double.formatDayDuration(unitsStyle:)(v14);
  if (v15.value._object)
  {
    countAndFlagsBits = v15.value._countAndFlagsBits;
    object = v15.value._object;
  }
  else
  {
    if (a1)
    {
      if (qword_1001BEF68 != -1)
        swift_once(&qword_1001BEF68, sub_100173D84);
      v18 = (objc_class *)(id)qword_1001DA1E8;
      v19 = 0xD000000000000041;
      v63 = 0x8000000100188820;
      v20 = 6565937;
      v21 = 0xE300000000000000;
      v22.super.isa = v18;
      v23 = 0;
      v24 = 0xE000000000000000;
    }
    else
    {
      if (qword_1001BEF68 != -1)
        swift_once(&qword_1001BEF68, sub_100173D84);
      v18 = (objc_class *)(id)qword_1001DA1E8;
      v63 = 0x80000001001886B0;
      v20 = 0x73796164203031;
      v21 = 0xE700000000000000;
      v22.super.isa = v18;
      v23 = 0;
      v24 = 0xE000000000000000;
      v19 = 0xD000000000000014;
    }
    v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v20, (Swift::String_optional)0, v22, *(Swift::String *)&v23, *(Swift::String *)&v19);
    countAndFlagsBits = v25._countAndFlagsBits;
    object = v25._object;

  }
  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v26 = (id)qword_1001DA1E8;
  v76._countAndFlagsBits = 0xD0000000000000A6;
  v76._object = (void *)0x80000001001886D0;
  v27._countAndFlagsBits = 0x726F6620656E6F4ELL;
  v27._object = (void *)0xEB00000000402520;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, (Swift::String_optional)0, (NSBundle)v26, v28, v76);

  v30 = sub_100005D40(&qword_1001C1848);
  v31 = swift_allocObject(v30, 72, 7);
  v65 = xmmword_10017BD10;
  *(_OWORD *)(v31 + 16) = xmmword_10017BD10;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = sub_1000881BC();
  *(_QWORD *)(v31 + 32) = countAndFlagsBits;
  *(_QWORD *)(v31 + 40) = object;
  swift_bridgeObjectRetain(object);
  v32 = String.init(format:_:)(v29._countAndFlagsBits, v29._object, v31);
  v34 = v33;
  swift_bridgeObjectRelease(v29._object);
  if (a1 == 2)
  {
    swift_bridgeObjectRelease(object);
    v35 = Double.formattedPercent(roundToNearestPercent:)(1)._countAndFlagsBits;
    AttributeContainer.init()(v35);
    v36 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    AttributedString.init(_:attributes:)(v35);
    result = _s13WeatherWidget20WeatherDataViewModelOwst_0(a2 + v36[6], 1, 1, v73);
    *(_OWORD *)a2 = xmmword_10017FB90;
  }
  else
  {
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ELL, 0x8000000100188780);
    v38 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
    v39 = swift_allocObject(v38, 48, 7);
    *(_OWORD *)(v39 + 16) = v65;
    *(_QWORD *)(v39 + 32) = countAndFlagsBits;
    *(_QWORD *)(v39 + 40) = object;
    sub_1000DF96C((uint64_t)v9, 0, a1, v39, v74);
    v40 = swift_bridgeObjectRelease(v39);
    (*(void (**)(char *, uint64_t, __n128))(v66 + 8))(v9, v67, v40);
    String.LocalizationValue.init(stringLiteral:)(1701736270, 0xE400000000000000);
    v41 = (void *)qword_1001DA1E8;
    v42 = type metadata accessor for Locale(0);
    v67 = v34;
    v43 = a2;
    v44 = a1;
    v45 = v32;
    v46 = v70;
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v70, 1, 1, v42);
    v75 = &_swiftEmptyArrayStorage;
    sub_10002EF14(&qword_1001C37A8, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.FormattingOptions, (uint64_t)&protocol conformance descriptor for AttributedString.FormattingOptions);
    v48 = v47;
    v49 = v41;
    v50 = sub_100005D40(&qword_1001C37B0);
    v51 = sub_1000DFC88();
    v52 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v50, v51, v71, v48);
    LOWORD(v64) = 2;
    v53 = v68;
    v54 = v46;
    v32 = v45;
    AttributedString.init(localized:options:table:bundle:locale:comment:)(v9, v52, 0, 0, v41, v54, "Short fallback string for when no rain is expected, for inline rain widget and 'None for 10 days' won't fit.", 108, v64);
    v55 = v44 == 0;
    a2 = v43;
    v34 = v67;
    if (v55)
      v56 = 0x616C6C6572626D75;
    else
      v56 = 0;
    if (v55)
      v57 = 0xED00006C6C69662ELL;
    else
      v57 = 0;
    v36 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    v58 = a2 + v36[6];
    v59 = *(void (**)(uint64_t, char *, uint64_t))(v69 + 32);
    v60 = v53;
    v61 = v73;
    v59(v58, v60, v73);
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v58, 0, 1, v61);
    *(_QWORD *)a2 = v56;
    *(_QWORD *)(a2 + 8) = v57;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v59)(a2 + v36[5], v74, v61);
  }
  v62 = (uint64_t *)(a2 + v36[7]);
  *v62 = v32;
  v62[1] = v34;
  return result;
}

uint64_t sub_1000DC320@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int *v160;
  uint64_t result;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  __n128 v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  double v183;
  void (*v184)(char *, uint64_t);
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void (*v200)(char *, uint64_t);
  uint64_t (*v201)(char *, uint64_t);
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  __n128 v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  double v222;
  void (*v223)(char *, uint64_t);
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void (*v230)(char *, uint64_t);
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  __n128 v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  double v255;
  void (*v256)(char *, uint64_t);
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  BOOL v262;
  BOOL v263;
  uint64_t v268;
  void (*v269)(char *, uint64_t);
  char *v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  __n128 v281;
  uint64_t v282;
  char v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  char *v288;
  double v289;
  void (*v290)(char *, uint64_t);
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  void (*v297)(char *, uint64_t);
  char **v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  __n128 v314;
  uint64_t v315;
  char v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  char *v321;
  double v322;
  void (*v323)(char *, uint64_t);
  char *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  BOOL v339;
  BOOL v340;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  void (*v345)(char *, uint64_t);
  char *v346;
  uint64_t v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  __n128 v357;
  uint64_t v358;
  char v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  char *v364;
  double v365;
  void (*v366)(char *, uint64_t);
  char *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  void (*v373)(char *, uint64_t);
  char *v374;
  uint64_t v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  __n128 v385;
  uint64_t v386;
  char v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  char *v391;
  char *v392;
  double v393;
  void (*v394)(char *, uint64_t);
  char *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  void (*v401)(char *, uint64_t);
  uint64_t v405;
  uint64_t v406;
  char *v407;
  uint64_t v408;
  char *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  char *v417;
  __n128 v418;
  uint64_t v419;
  char v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  char *v425;
  double v426;
  void (*v427)(char *, uint64_t);
  char *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  void (*v434)(char *, uint64_t);
  uint64_t v435;
  uint64_t v436;
  char *v437;
  uint64_t v438;
  char *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  char *v447;
  __n128 v448;
  uint64_t v449;
  char v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  char *v454;
  char *v455;
  double v456;
  void (*v457)(char *, uint64_t);
  char *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  void (*v464)(char *, uint64_t);
  uint64_t v465;
  uint64_t v466;
  char *v467;
  uint64_t v468;
  char *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  char *v477;
  __n128 v478;
  uint64_t v479;
  char v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  char *v484;
  char *v485;
  double v486;
  void (*v487)(char *, uint64_t);
  char *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  void (*v494)(char *, uint64_t);
  uint64_t v496;
  uint64_t v497;
  char *v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  char *v508;
  __n128 v509;
  uint64_t v510;
  char v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  char *v515;
  char *v516;
  double v517;
  void (*v518)(char *, uint64_t);
  char *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  void (*v525)(char *, uint64_t);
  uint64_t v526;
  uint64_t v527;
  char *v528;
  uint64_t v529;
  char *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  char *v538;
  __n128 v539;
  uint64_t v540;
  char v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  char *v545;
  char *v546;
  double v547;
  void (*v548)(char *, uint64_t);
  char *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  void (*v555)(char *, uint64_t);
  int v556;
  uint64_t v557;
  char *v558;
  char *v559;
  char *v560;
  char *v561;
  char *v562;
  char *v563;
  char *v564;
  uint64_t v565;
  uint64_t v566;
  char *v567;
  char *v568;
  char *v569;
  uint64_t v570;
  char *v571;
  char *v572;
  uint64_t v573;
  char *v574;
  char *v575;
  char *v576;
  uint64_t v577;
  char *v578;
  char *v579;
  uint64_t v580;
  char *v581;
  char *v582;
  char *v583;
  char *v584;
  char *v585;
  uint64_t v586;
  uint64_t v587;
  char *v588;
  char *v589;
  char *v590;
  char *v591;
  char *v592;
  char *v593;
  char *v594;
  char *v595;
  char *v596;
  char *v597;
  char *v598;
  char *v599;
  char *v600;
  char *v601;
  char *v602;
  char *v603;
  char *v604;
  char *v605;
  char *v606;
  char *v607;
  char *v608;
  char *v609;
  char *v610;
  char *v611;
  char *v612;
  uint64_t v613;
  char *v614;
  char *v615;
  uint64_t v616;
  char *v617;
  char *v618;
  char *v619;
  char *v620;
  char *v621;
  char *v622;
  char *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  char *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;

  v624 = a1;
  v632 = a2;
  v2 = type metadata accessor for DateComponents(0);
  v625 = *(_QWORD *)(v2 - 8);
  v626 = v2;
  v3 = __chkstk_darwin(v2);
  v605 = (char *)&v558 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v604 = (char *)&v558 - v6;
  v7 = __chkstk_darwin(v5);
  v601 = (char *)&v558 - v8;
  v9 = __chkstk_darwin(v7);
  v600 = (char *)&v558 - v10;
  v11 = __chkstk_darwin(v9);
  v597 = (char *)&v558 - v12;
  v13 = __chkstk_darwin(v11);
  v596 = (char *)&v558 - v14;
  v15 = __chkstk_darwin(v13);
  v591 = (char *)&v558 - v16;
  v17 = __chkstk_darwin(v15);
  v590 = (char *)&v558 - v18;
  v19 = __chkstk_darwin(v17);
  v606 = (char *)&v558 - v20;
  v21 = __chkstk_darwin(v19);
  v607 = (char *)&v558 - v22;
  v23 = __chkstk_darwin(v21);
  v618 = (char *)&v558 - v24;
  __chkstk_darwin(v23);
  v623 = (char *)&v558 - v25;
  v26 = type metadata accessor for Calendar(0);
  v627 = *(_QWORD *)(v26 - 8);
  v628 = v26;
  v27 = __chkstk_darwin(v26);
  v603 = (char *)&v558 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v602 = (char *)&v558 - v30;
  v31 = __chkstk_darwin(v29);
  v599 = (char *)&v558 - v32;
  v33 = __chkstk_darwin(v31);
  v598 = (char *)&v558 - v34;
  v35 = __chkstk_darwin(v33);
  v595 = (char *)&v558 - v36;
  v37 = __chkstk_darwin(v35);
  v594 = (char *)&v558 - v38;
  v39 = __chkstk_darwin(v37);
  v585 = (char *)&v558 - v40;
  v41 = __chkstk_darwin(v39);
  v584 = (char *)&v558 - v42;
  v43 = __chkstk_darwin(v41);
  v610 = (char *)&v558 - v44;
  v45 = __chkstk_darwin(v43);
  v614 = (char *)&v558 - v46;
  v47 = __chkstk_darwin(v45);
  v622 = (char *)&v558 - v48;
  __chkstk_darwin(v47);
  v629 = (char *)&v558 - v49;
  v50 = sub_100005D40(&qword_1001BF0A0);
  v51 = __chkstk_darwin(v50);
  v587 = (uint64_t)&v558 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __chkstk_darwin(v51);
  v586 = (uint64_t)&v558 - v54;
  v55 = __chkstk_darwin(v53);
  v580 = (uint64_t)&v558 - v56;
  v57 = __chkstk_darwin(v55);
  v577 = (uint64_t)&v558 - v58;
  v59 = __chkstk_darwin(v57);
  v573 = (uint64_t)&v558 - v60;
  v61 = __chkstk_darwin(v59);
  v570 = (uint64_t)&v558 - v62;
  v63 = __chkstk_darwin(v61);
  v566 = (uint64_t)&v558 - v64;
  v65 = __chkstk_darwin(v63);
  v565 = (uint64_t)&v558 - v66;
  v67 = __chkstk_darwin(v65);
  v613 = (uint64_t)&v558 - v68;
  v69 = __chkstk_darwin(v67);
  v616 = (uint64_t)&v558 - v70;
  v71 = __chkstk_darwin(v69);
  v621 = (char *)&v558 - v72;
  __chkstk_darwin(v71);
  v74 = (char *)&v558 - v73;
  v75 = type metadata accessor for Date(0);
  v630 = *(_QWORD *)(v75 - 8);
  v631 = v75;
  v76 = __chkstk_darwin(v75);
  v592 = (char *)&v558 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __chkstk_darwin(v76);
  v593 = (char *)&v558 - v79;
  v80 = __chkstk_darwin(v78);
  v588 = (char *)&v558 - v81;
  v82 = __chkstk_darwin(v80);
  v589 = (char *)&v558 - v83;
  v84 = __chkstk_darwin(v82);
  v582 = (char *)&v558 - v85;
  v86 = __chkstk_darwin(v84);
  v583 = (char *)&v558 - v87;
  v88 = __chkstk_darwin(v86);
  v579 = (char *)&v558 - v89;
  v90 = __chkstk_darwin(v88);
  v581 = (char *)&v558 - v91;
  v92 = __chkstk_darwin(v90);
  v574 = (char *)&v558 - v93;
  v94 = __chkstk_darwin(v92);
  v575 = (char *)&v558 - v95;
  v96 = __chkstk_darwin(v94);
  v568 = (char *)&v558 - v97;
  v98 = __chkstk_darwin(v96);
  v569 = (char *)&v558 - v99;
  v100 = __chkstk_darwin(v98);
  v562 = (char *)&v558 - v101;
  v102 = __chkstk_darwin(v100);
  v563 = (char *)&v558 - v103;
  v104 = __chkstk_darwin(v102);
  v560 = (char *)&v558 - v105;
  v106 = __chkstk_darwin(v104);
  v561 = (char *)&v558 - v107;
  v108 = __chkstk_darwin(v106);
  v608 = (char *)&v558 - v109;
  v110 = __chkstk_darwin(v108);
  v609 = (char *)&v558 - v111;
  v112 = __chkstk_darwin(v110);
  v611 = (char *)&v558 - v113;
  v114 = __chkstk_darwin(v112);
  v612 = (char *)&v558 - v115;
  v116 = __chkstk_darwin(v114);
  v619 = (char *)&v558 - v117;
  v118 = __chkstk_darwin(v116);
  v620 = (char *)&v558 - v119;
  v120 = __chkstk_darwin(v118);
  v122 = (char *)&v558 - v121;
  __chkstk_darwin(v120);
  v124 = (char *)&v558 - v123;
  v125 = type metadata accessor for Precipitation(0);
  v633 = *(_QWORD *)(v125 - 8);
  v634 = v125;
  v126 = __chkstk_darwin(v125);
  v578 = (char *)&v558 - ((v127 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = __chkstk_darwin(v126);
  v576 = (char *)&v558 - v129;
  v130 = __chkstk_darwin(v128);
  v572 = (char *)&v558 - v131;
  v132 = __chkstk_darwin(v130);
  v571 = (char *)&v558 - v133;
  v134 = __chkstk_darwin(v132);
  v567 = (char *)&v558 - v135;
  v136 = __chkstk_darwin(v134);
  v564 = (char *)&v558 - v137;
  v138 = __chkstk_darwin(v136);
  v559 = (char *)&v558 - v139;
  v140 = __chkstk_darwin(v138);
  v558 = (char *)&v558 - v141;
  v142 = __chkstk_darwin(v140);
  v615 = (char *)&v558 - v143;
  v144 = __chkstk_darwin(v142);
  v617 = (char *)&v558 - v145;
  v146 = __chkstk_darwin(v144);
  v148 = (char *)&v558 - v147;
  __chkstk_darwin(v146);
  v150 = (char *)&v558 - v149;
  v151 = type metadata accessor for PrecipitationShift.Kind(0);
  v152 = *(_QWORD *)(v151 - 8);
  v153 = __chkstk_darwin(v151);
  v155 = (char *)&v558 - ((v154 + 15) & 0xFFFFFFFFFFFFFFF0);
  PrecipitationShift.kind.getter(v153);
  v156 = (*(uint64_t (**)(char *, uint64_t))(v152 + 88))(v155, v151);
  if (v156 == enum case for PrecipitationShift.Kind.possibleDrizzle(_:))
    goto LABEL_2;
  v162 = v156;
  if (v156 == enum case for PrecipitationShift.Kind.possibleDrizzleStart(_:))
  {
LABEL_5:
    v163 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v633 + 104))(v150, enum case for Precipitation.rain(_:), v634);
    PrecipitationShift.date.getter(v163);
    v164 = v631;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v74, 1, v631) == 1)
    {
      sub_100016904((uint64_t)v74, &qword_1001BF0A0);
    }
    else
    {
      v168 = (*(uint64_t (**)(char *, char *, uint64_t))(v630 + 32))(v124, v74, v164);
      Date.init()(v168);
      static Calendar.currentCalendar(with:)(v624);
      v169 = sub_100005D40(&qword_1001C37C0);
      v170 = type metadata accessor for Calendar.Component(0);
      v171 = *(_QWORD *)(v170 - 8);
      v172 = *(unsigned __int8 *)(v171 + 80);
      v173 = (v172 + 32) & ~v172;
      v174 = swift_allocObject(v169, v173 + *(_QWORD *)(v171 + 72), v172 | 7);
      *(_OWORD *)(v174 + 16) = xmmword_10017BD10;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v171 + 104))(v174 + v173, enum case for Calendar.Component.minute(_:), v170);
      v175 = sub_1000DFCCC(v174);
      v176 = v623;
      Calendar.dateComponents(_:from:to:)(v175, v122, v124);
      v177 = swift_bridgeObjectRelease(v175);
      v178 = DateComponents.minute.getter(v177);
      LOBYTE(v170) = v179;
      (*(void (**)(char *, uint64_t))(v625 + 8))(v176, v626);
      if ((v170 & 1) == 0 && (unint64_t)(v178 - 1) < 0x3B)
      {
        v180 = sub_100005D40(&qword_1001C37E8);
        v181 = v632;
        v182 = v632 + *(int *)(v180 + 48);
        (*(void (**)(uint64_t, char *, uint64_t))(v633 + 16))(v632, v150, v634);
        v183 = Date.timeIntervalSince(_:)(v122);
        (*(void (**)(char *, uint64_t))(v627 + 8))(v629, v628);
        v184 = *(void (**)(char *, uint64_t))(v630 + 8);
        v185 = v122;
        v186 = v631;
        v184(v185, v631);
        v184(v124, v186);
        *(double *)v182 = v183;
        *(_BYTE *)(v182 + 8) = 0;
        v187 = v181;
        v188 = 0;
        v189 = v180;
LABEL_57:
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v187, v188, 1, v189);
        v201 = *(uint64_t (**)(char *, uint64_t))(v633 + 8);
        v202 = v150;
        return v201(v202, v634);
      }
      (*(void (**)(char *, uint64_t))(v627 + 8))(v629, v628);
      v199 = v631;
      v200 = *(void (**)(char *, uint64_t))(v630 + 8);
      v200(v122, v631);
      v200(v124, v199);
    }
    v189 = sub_100005D40(&qword_1001C37E8);
    v187 = v632;
    v188 = 1;
    goto LABEL_57;
  }
  if (v156 == enum case for PrecipitationShift.Kind.possibleDrizzleStop(_:))
    goto LABEL_8;
  if (v156 == enum case for PrecipitationShift.Kind.possibleDrizzleStartStop(_:))
    goto LABEL_5;
  if (v156 == enum case for PrecipitationShift.Kind.possibleDrizzleStopStart(_:))
    goto LABEL_8;
  if (v156 == enum case for PrecipitationShift.Kind.drizzle(_:))
    goto LABEL_2;
  if (v156 == enum case for PrecipitationShift.Kind.drizzleStart(_:))
    goto LABEL_5;
  if (v156 == enum case for PrecipitationShift.Kind.drizzleStop(_:))
    goto LABEL_8;
  if (v156 == enum case for PrecipitationShift.Kind.drizzleStartStop(_:))
    goto LABEL_5;
  if (v156 == enum case for PrecipitationShift.Kind.drizzleStopStart(_:))
    goto LABEL_8;
  if (v156 == enum case for PrecipitationShift.Kind.rain(_:))
    goto LABEL_2;
  if (v156 == enum case for PrecipitationShift.Kind.rainStart(_:))
    goto LABEL_5;
  if (v156 == enum case for PrecipitationShift.Kind.rainStop(_:))
    goto LABEL_8;
  if (v156 == enum case for PrecipitationShift.Kind.rainStartStop(_:))
    goto LABEL_5;
  if (v156 == enum case for PrecipitationShift.Kind.rainStopStart(_:))
    goto LABEL_8;
  if (v156 == enum case for PrecipitationShift.Kind.heavyRain(_:))
  {
LABEL_2:
    v157 = sub_100005D40(&qword_1001C37E8);
    v158 = v632;
    v159 = v632 + *(int *)(v157 + 48);
    v160 = (unsigned int *)&enum case for Precipitation.rain(_:);
LABEL_3:
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v633 + 104))(v158, *v160, v634);
    *(_QWORD *)v159 = 0;
    *(_BYTE *)(v159 + 8) = 2;
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v158, 0, 1, v157);
  }
  if (v156 == enum case for PrecipitationShift.Kind.heavyRainStart(_:))
    goto LABEL_5;
  if (v156 == enum case for PrecipitationShift.Kind.heavyRainStop(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavyRainStopStart(_:))
  {
LABEL_8:
    v165 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v633 + 104))(v148, enum case for Precipitation.rain(_:), v634);
    v166 = (uint64_t)v621;
    PrecipitationShift.date.getter(v165);
    v167 = v631;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v166, 1, v631) == 1)
    {
      sub_100016904(v166, &qword_1001BF0A0);
    }
    else
    {
      v203 = v620;
      v204 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v630 + 32))(v620, v166, v167);
      v205 = v619;
      Date.init()(v204);
      static Calendar.currentCalendar(with:)(v624);
      v206 = sub_100005D40(&qword_1001C37C0);
      v207 = type metadata accessor for Calendar.Component(0);
      v208 = *(_QWORD *)(v207 - 8);
      v209 = *(unsigned __int8 *)(v208 + 80);
      v210 = (v209 + 32) & ~v209;
      v211 = swift_allocObject(v206, v210 + *(_QWORD *)(v208 + 72), v209 | 7);
      *(_OWORD *)(v211 + 16) = xmmword_10017BD10;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v208 + 104))(v211 + v210, enum case for Calendar.Component.minute(_:), v207);
      v212 = sub_1000DFCCC(v211);
      v213 = v618;
      Calendar.dateComponents(_:from:to:)(v212, v205, v203);
      v214 = swift_bridgeObjectRelease(v212);
      v215 = DateComponents.minute.getter(v214);
      LOBYTE(v207) = v216;
      (*(void (**)(char *, uint64_t))(v625 + 8))(v213, v626);
      if ((v207 & 1) == 0 && (unint64_t)(v215 - 1) < 0x3B)
      {
        v217 = sub_100005D40(&qword_1001C37E8);
        v218 = v632;
        v219 = v632 + *(int *)(v217 + 48);
        (*(void (**)(uint64_t, char *, uint64_t))(v633 + 16))(v632, v148, v634);
        v220 = v619;
        v221 = v620;
        v222 = Date.timeIntervalSince(_:)(v619);
        (*(void (**)(char *, uint64_t))(v627 + 8))(v622, v628);
        v223 = *(void (**)(char *, uint64_t))(v630 + 8);
        v224 = v220;
        v225 = v631;
        v223(v224, v631);
        v223(v221, v225);
        *(double *)v219 = v222;
        *(_BYTE *)(v219 + 8) = 1;
        v226 = v218;
        v227 = 0;
        v228 = v217;
LABEL_63:
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v226, v227, 1, v228);
        v201 = *(uint64_t (**)(char *, uint64_t))(v633 + 8);
        v202 = v148;
        return v201(v202, v634);
      }
      (*(void (**)(char *, uint64_t))(v627 + 8))(v622, v628);
      v229 = v631;
      v230 = *(void (**)(char *, uint64_t))(v630 + 8);
      v230(v619, v631);
      v230(v620, v229);
    }
    v228 = sub_100005D40(&qword_1001C37E8);
    v226 = v632;
    v227 = 1;
    goto LABEL_63;
  }
  if (v156 == enum case for PrecipitationShift.Kind.heavyRainStartStop(_:))
    goto LABEL_5;
  if (v156 == enum case for PrecipitationShift.Kind.drizzleToHeavyRain(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavyRainToDrizzle(_:)
    || v156 == enum case for PrecipitationShift.Kind.rainToHeavyRain(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavyRainToRain(_:))
  {
    goto LABEL_2;
  }
  if (v156 == enum case for PrecipitationShift.Kind.drizzleToHeavyRainStart(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavyRainToDrizzleStart(_:)
    || v156 == enum case for PrecipitationShift.Kind.rainToHeavyRainStart(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavyRainToRainStart(_:))
  {
    goto LABEL_53;
  }
  if (v156 == enum case for PrecipitationShift.Kind.drizzleToHeavyRainStop(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavyRainToDrizzleStop(_:)
    || v156 == enum case for PrecipitationShift.Kind.rainToHeavyRainStop(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavyRainToRainStop(_:))
  {
LABEL_77:
    v234 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v633 + 104))(v615, enum case for Precipitation.rain(_:), v634);
    v235 = v613;
    PrecipitationShift.date.getter(v234);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v235, 1, v631) == 1)
    {
      sub_100016904(v613, &qword_1001BF0A0);
    }
    else
    {
      v270 = v609;
      v271 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v630 + 32))(v609, v613, v631);
      v272 = v608;
      Date.init()(v271);
      static Calendar.currentCalendar(with:)(v624);
      v273 = sub_100005D40(&qword_1001C37C0);
      v274 = type metadata accessor for Calendar.Component(0);
      v275 = *(_QWORD *)(v274 - 8);
      v276 = *(unsigned __int8 *)(v275 + 80);
      v277 = (v276 + 32) & ~v276;
      v278 = swift_allocObject(v273, v277 + *(_QWORD *)(v275 + 72), v276 | 7);
      *(_OWORD *)(v278 + 16) = xmmword_10017BD10;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v275 + 104))(v278 + v277, enum case for Calendar.Component.minute(_:), v274);
      v279 = sub_1000DFCCC(v278);
      v280 = v606;
      Calendar.dateComponents(_:from:to:)(v279, v272, v270);
      v281 = swift_bridgeObjectRelease(v279);
      v282 = DateComponents.minute.getter(v281);
      LOBYTE(v274) = v283;
      (*(void (**)(char *, uint64_t))(v625 + 8))(v280, v626);
      if ((v274 & 1) == 0 && (unint64_t)(v282 - 1) < 0x3B)
      {
        v284 = sub_100005D40(&qword_1001C37E8);
        v285 = v632;
        v286 = v632 + *(int *)(v284 + 48);
        (*(void (**)(uint64_t, char *, uint64_t))(v633 + 16))(v632, v615, v634);
        v287 = v608;
        v288 = v609;
        v289 = Date.timeIntervalSince(_:)(v608);
        (*(void (**)(char *, uint64_t))(v627 + 8))(v610, v628);
        v290 = *(void (**)(char *, uint64_t))(v630 + 8);
        v291 = v287;
        v292 = v631;
        v290(v291, v631);
        v290(v288, v292);
        *(double *)v286 = v289;
        *(_BYTE *)(v286 + 8) = 1;
        v293 = v285;
        v294 = 0;
        v295 = v284;
LABEL_112:
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v293, v294, 1, v295);
        v201 = *(uint64_t (**)(char *, uint64_t))(v633 + 8);
        v298 = (char **)&v635;
LABEL_113:
        v202 = *(v298 - 32);
        return v201(v202, v634);
      }
      (*(void (**)(char *, uint64_t))(v627 + 8))(v610, v628);
      v296 = v631;
      v297 = *(void (**)(char *, uint64_t))(v630 + 8);
      v297(v608, v631);
      v297(v609, v296);
    }
    v295 = sub_100005D40(&qword_1001C37E8);
    v293 = v632;
    v294 = 1;
    goto LABEL_112;
  }
  v262 = v156 == enum case for PrecipitationShift.Kind.drizzleToHeavyRainStartStop(_:)
      || v156 == enum case for PrecipitationShift.Kind.heavyRainToDrizzleStartStop(_:);
  v263 = v262 || v156 == enum case for PrecipitationShift.Kind.rainToHeavyRainStartStop(_:);
  if (v263 || v156 == enum case for PrecipitationShift.Kind.heavyRainToRainStartStop(_:))
  {
LABEL_53:
    v197 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v633 + 104))(v617, enum case for Precipitation.rain(_:), v634);
    v198 = v616;
    PrecipitationShift.date.getter(v197);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v198, 1, v631) == 1)
    {
      sub_100016904(v616, &qword_1001BF0A0);
    }
    else
    {
      v236 = v612;
      v237 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v630 + 32))(v612, v616, v631);
      v238 = v611;
      Date.init()(v237);
      static Calendar.currentCalendar(with:)(v624);
      v239 = sub_100005D40(&qword_1001C37C0);
      v240 = type metadata accessor for Calendar.Component(0);
      v241 = *(_QWORD *)(v240 - 8);
      v242 = *(unsigned __int8 *)(v241 + 80);
      v243 = (v242 + 32) & ~v242;
      v244 = swift_allocObject(v239, v243 + *(_QWORD *)(v241 + 72), v242 | 7);
      *(_OWORD *)(v244 + 16) = xmmword_10017BD10;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v241 + 104))(v244 + v243, enum case for Calendar.Component.minute(_:), v240);
      v245 = sub_1000DFCCC(v244);
      v246 = v607;
      Calendar.dateComponents(_:from:to:)(v245, v238, v236);
      v247 = swift_bridgeObjectRelease(v245);
      v248 = DateComponents.minute.getter(v247);
      LOBYTE(v240) = v249;
      (*(void (**)(char *, uint64_t))(v625 + 8))(v246, v626);
      if ((v240 & 1) == 0 && (unint64_t)(v248 - 1) < 0x3B)
      {
        v250 = sub_100005D40(&qword_1001C37E8);
        v251 = v632;
        v252 = v632 + *(int *)(v250 + 48);
        (*(void (**)(uint64_t, char *, uint64_t))(v633 + 16))(v632, v617, v634);
        v253 = v611;
        v254 = v612;
        v255 = Date.timeIntervalSince(_:)(v611);
        (*(void (**)(char *, uint64_t))(v627 + 8))(v614, v628);
        v256 = *(void (**)(char *, uint64_t))(v630 + 8);
        v257 = v253;
        v258 = v631;
        v256(v257, v631);
        v256(v254, v258);
        *(double *)v252 = v255;
        *(_BYTE *)(v252 + 8) = 0;
        v259 = v251;
        v260 = 0;
        v261 = v250;
LABEL_106:
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v259, v260, 1, v261);
        v201 = *(uint64_t (**)(char *, uint64_t))(v633 + 8);
        v202 = v617;
        return v201(v202, v634);
      }
      (*(void (**)(char *, uint64_t))(v627 + 8))(v614, v628);
      v268 = v631;
      v269 = *(void (**)(char *, uint64_t))(v630 + 8);
      v269(v611, v631);
      v269(v612, v268);
    }
    v261 = sub_100005D40(&qword_1001C37E8);
    v259 = v632;
    v260 = 1;
    goto LABEL_106;
  }
  if (v156 == enum case for PrecipitationShift.Kind.drizzleToHeavyRainStopStart(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavyRainToDrizzleStopStart(_:)
    || v156 == enum case for PrecipitationShift.Kind.rainToHeavyRainStopStart(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavyRainToRainStopStart(_:))
  {
    goto LABEL_77;
  }
  if (v156 == enum case for PrecipitationShift.Kind.possibleFlurries(_:))
  {
LABEL_103:
    v157 = sub_100005D40(&qword_1001C37E8);
    v158 = v632;
    v159 = v632 + *(int *)(v157 + 48);
    v160 = (unsigned int *)&enum case for Precipitation.snow(_:);
    goto LABEL_3;
  }
  if (v156 == enum case for PrecipitationShift.Kind.possibleFlurriesStart(_:))
  {
LABEL_115:
    v299 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v633 + 104))(v558, enum case for Precipitation.snow(_:), v634);
    v300 = v565;
    PrecipitationShift.date.getter(v299);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v300, 1, v631) == 1)
    {
      sub_100016904(v565, &qword_1001BF0A0);
    }
    else
    {
      v303 = v561;
      v304 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v630 + 32))(v561, v565, v631);
      v305 = v560;
      Date.init()(v304);
      static Calendar.currentCalendar(with:)(v624);
      v306 = sub_100005D40(&qword_1001C37C0);
      v307 = type metadata accessor for Calendar.Component(0);
      v308 = *(_QWORD *)(v307 - 8);
      v309 = *(unsigned __int8 *)(v308 + 80);
      v310 = (v309 + 32) & ~v309;
      v311 = swift_allocObject(v306, v310 + *(_QWORD *)(v308 + 72), v309 | 7);
      *(_OWORD *)(v311 + 16) = xmmword_10017BD10;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v308 + 104))(v311 + v310, enum case for Calendar.Component.minute(_:), v307);
      v312 = sub_1000DFCCC(v311);
      v313 = v590;
      Calendar.dateComponents(_:from:to:)(v312, v305, v303);
      v314 = swift_bridgeObjectRelease(v312);
      v315 = DateComponents.minute.getter(v314);
      LOBYTE(v307) = v316;
      (*(void (**)(char *, uint64_t))(v625 + 8))(v313, v626);
      if ((v307 & 1) == 0 && (unint64_t)(v315 - 1) < 0x3B)
      {
        v317 = sub_100005D40(&qword_1001C37E8);
        v318 = v632;
        v319 = v632 + *(int *)(v317 + 48);
        (*(void (**)(uint64_t, char *, uint64_t))(v633 + 16))(v632, v558, v634);
        v320 = v560;
        v321 = v561;
        v322 = Date.timeIntervalSince(_:)(v560);
        (*(void (**)(char *, uint64_t))(v627 + 8))(v584, v628);
        v323 = *(void (**)(char *, uint64_t))(v630 + 8);
        v324 = v320;
        v325 = v631;
        v323(v324, v631);
        v323(v321, v325);
        *(double *)v319 = v322;
        *(_BYTE *)(v319 + 8) = 0;
        v326 = v318;
        v327 = 0;
        v328 = v317;
LABEL_187:
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v326, v327, 1, v328);
        v201 = *(uint64_t (**)(char *, uint64_t))(v633 + 8);
        v298 = &v590;
        goto LABEL_113;
      }
      (*(void (**)(char *, uint64_t))(v627 + 8))(v584, v628);
      v344 = v631;
      v345 = *(void (**)(char *, uint64_t))(v630 + 8);
      v345(v560, v631);
      v345(v561, v344);
    }
    v328 = sub_100005D40(&qword_1001C37E8);
    v326 = v632;
    v327 = 1;
    goto LABEL_187;
  }
  if (v156 == enum case for PrecipitationShift.Kind.possibleFlurriesStop(_:))
    goto LABEL_118;
  if (v156 == enum case for PrecipitationShift.Kind.possibleFlurriesStartStop(_:))
    goto LABEL_115;
  if (v156 == enum case for PrecipitationShift.Kind.possibleFlurriesStopStart(_:))
    goto LABEL_118;
  if (v156 == enum case for PrecipitationShift.Kind.flurries(_:))
    goto LABEL_103;
  if (v156 == enum case for PrecipitationShift.Kind.flurriesStart(_:))
    goto LABEL_115;
  if (v156 == enum case for PrecipitationShift.Kind.flurriesStop(_:))
    goto LABEL_118;
  if (v156 == enum case for PrecipitationShift.Kind.flurriesStartStop(_:))
    goto LABEL_115;
  if (v156 == enum case for PrecipitationShift.Kind.flurriesStopStart(_:))
    goto LABEL_118;
  if (v156 == enum case for PrecipitationShift.Kind.snow(_:))
    goto LABEL_103;
  if (v156 == enum case for PrecipitationShift.Kind.snowStart(_:))
    goto LABEL_115;
  if (v156 == enum case for PrecipitationShift.Kind.snowStop(_:))
    goto LABEL_118;
  if (v156 == enum case for PrecipitationShift.Kind.snowStartStop(_:))
    goto LABEL_115;
  if (v156 == enum case for PrecipitationShift.Kind.snowStopStart(_:))
    goto LABEL_118;
  if (v156 == enum case for PrecipitationShift.Kind.heavySnow(_:))
    goto LABEL_103;
  if (v156 == enum case for PrecipitationShift.Kind.heavySnowStart(_:))
    goto LABEL_115;
  if (v156 == enum case for PrecipitationShift.Kind.heavySnowStop(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavySnowStopStart(_:))
  {
LABEL_118:
    v301 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v633 + 104))(v559, enum case for Precipitation.snow(_:), v634);
    v302 = v566;
    PrecipitationShift.date.getter(v301);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v302, 1, v631) == 1)
    {
      sub_100016904(v566, &qword_1001BF0A0);
    }
    else
    {
      v346 = v563;
      v347 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v630 + 32))(v563, v566, v631);
      v348 = v562;
      Date.init()(v347);
      static Calendar.currentCalendar(with:)(v624);
      v349 = sub_100005D40(&qword_1001C37C0);
      v350 = type metadata accessor for Calendar.Component(0);
      v351 = *(_QWORD *)(v350 - 8);
      v352 = *(unsigned __int8 *)(v351 + 80);
      v353 = (v352 + 32) & ~v352;
      v354 = swift_allocObject(v349, v353 + *(_QWORD *)(v351 + 72), v352 | 7);
      *(_OWORD *)(v354 + 16) = xmmword_10017BD10;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v351 + 104))(v354 + v353, enum case for Calendar.Component.minute(_:), v350);
      v355 = sub_1000DFCCC(v354);
      v356 = v591;
      Calendar.dateComponents(_:from:to:)(v355, v348, v346);
      v357 = swift_bridgeObjectRelease(v355);
      v358 = DateComponents.minute.getter(v357);
      LOBYTE(v350) = v359;
      (*(void (**)(char *, uint64_t))(v625 + 8))(v356, v626);
      if ((v350 & 1) == 0 && (unint64_t)(v358 - 1) < 0x3B)
      {
        v360 = sub_100005D40(&qword_1001C37E8);
        v361 = v632;
        v362 = v632 + *(int *)(v360 + 48);
        (*(void (**)(uint64_t, char *, uint64_t))(v633 + 16))(v632, v559, v634);
        v363 = v562;
        v364 = v563;
        v365 = Date.timeIntervalSince(_:)(v562);
        (*(void (**)(char *, uint64_t))(v627 + 8))(v585, v628);
        v366 = *(void (**)(char *, uint64_t))(v630 + 8);
        v367 = v363;
        v368 = v631;
        v366(v367, v631);
        v366(v364, v368);
        *(double *)v362 = v365;
        *(_BYTE *)(v362 + 8) = 1;
        v369 = v361;
        v370 = 0;
        v371 = v360;
LABEL_193:
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v369, v370, 1, v371);
        v201 = *(uint64_t (**)(char *, uint64_t))(v633 + 8);
        v298 = &v591;
        goto LABEL_113;
      }
      (*(void (**)(char *, uint64_t))(v627 + 8))(v585, v628);
      v372 = v631;
      v373 = *(void (**)(char *, uint64_t))(v630 + 8);
      v373(v562, v631);
      v373(v563, v372);
    }
    v371 = sub_100005D40(&qword_1001C37E8);
    v369 = v632;
    v370 = 1;
    goto LABEL_193;
  }
  if (v156 == enum case for PrecipitationShift.Kind.heavySnowStartStop(_:))
    goto LABEL_115;
  if (v156 == enum case for PrecipitationShift.Kind.flurriesToHeavySnow(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavySnowToFlurries(_:)
    || v156 == enum case for PrecipitationShift.Kind.snowToHeavySnow(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavySnowToSnow(_:))
  {
    goto LABEL_103;
  }
  if (v156 == enum case for PrecipitationShift.Kind.flurriesToHeavySnowStart(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavySnowToFlurriesStart(_:)
    || v156 == enum case for PrecipitationShift.Kind.snowToHeavySnowStart(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavySnowToSnowStart(_:))
  {
    goto LABEL_183;
  }
  if (v156 == enum case for PrecipitationShift.Kind.flurriesToHeavySnowStop(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavySnowToFlurriesStop(_:)
    || v156 == enum case for PrecipitationShift.Kind.snowToHeavySnowStop(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavySnowToSnowStop(_:))
  {
LABEL_211:
    v405 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v633 + 104))(v567, enum case for Precipitation.snow(_:), v634);
    v406 = v573;
    PrecipitationShift.date.getter(v405);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v406, 1, v631) == 1)
    {
      sub_100016904(v573, &qword_1001BF0A0);
    }
    else
    {
      v407 = v575;
      v408 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v630 + 32))(v575, v573, v631);
      v409 = v574;
      Date.init()(v408);
      static Calendar.currentCalendar(with:)(v624);
      v410 = sub_100005D40(&qword_1001C37C0);
      v411 = type metadata accessor for Calendar.Component(0);
      v412 = *(_QWORD *)(v411 - 8);
      v413 = *(unsigned __int8 *)(v412 + 80);
      v414 = (v413 + 32) & ~v413;
      v415 = swift_allocObject(v410, v414 + *(_QWORD *)(v412 + 72), v413 | 7);
      *(_OWORD *)(v415 + 16) = xmmword_10017BD10;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v412 + 104))(v415 + v414, enum case for Calendar.Component.minute(_:), v411);
      v416 = sub_1000DFCCC(v415);
      v417 = v597;
      Calendar.dateComponents(_:from:to:)(v416, v409, v407);
      v418 = swift_bridgeObjectRelease(v416);
      v419 = DateComponents.minute.getter(v418);
      LOBYTE(v411) = v420;
      (*(void (**)(char *, uint64_t))(v625 + 8))(v417, v626);
      if ((v411 & 1) == 0 && (unint64_t)(v419 - 1) < 0x3B)
      {
        v421 = sub_100005D40(&qword_1001C37E8);
        v422 = v632;
        v423 = v632 + *(int *)(v421 + 48);
        (*(void (**)(uint64_t, char *, uint64_t))(v633 + 16))(v632, v567, v634);
        v424 = v574;
        v425 = v575;
        v426 = Date.timeIntervalSince(_:)(v574);
        (*(void (**)(char *, uint64_t))(v627 + 8))(v595, v628);
        v427 = *(void (**)(char *, uint64_t))(v630 + 8);
        v428 = v424;
        v429 = v631;
        v427(v428, v631);
        v427(v425, v429);
        *(double *)v423 = v426;
        *(_BYTE *)(v423 + 8) = 1;
        v430 = v422;
        v431 = 0;
        v432 = v421;
LABEL_218:
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v430, v431, 1, v432);
        v201 = *(uint64_t (**)(char *, uint64_t))(v633 + 8);
        v298 = &v599;
        goto LABEL_113;
      }
      (*(void (**)(char *, uint64_t))(v627 + 8))(v595, v628);
      v433 = v631;
      v434 = *(void (**)(char *, uint64_t))(v630 + 8);
      v434(v574, v631);
      v434(v575, v433);
    }
    v432 = sub_100005D40(&qword_1001C37E8);
    v430 = v632;
    v431 = 1;
    goto LABEL_218;
  }
  v339 = v156 == enum case for PrecipitationShift.Kind.flurriesToHeavySnowStartStop(_:)
      || v156 == enum case for PrecipitationShift.Kind.heavySnowToFlurriesStartStop(_:);
  v340 = v339 || v156 == enum case for PrecipitationShift.Kind.snowToHeavySnowStartStop(_:);
  if (v340 || v156 == enum case for PrecipitationShift.Kind.heavySnowToSnowStartStop(_:))
  {
LABEL_183:
    v342 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v633 + 104))(v564, enum case for Precipitation.snow(_:), v634);
    v343 = v570;
    PrecipitationShift.date.getter(v342);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v343, 1, v631) == 1)
    {
      sub_100016904(v570, &qword_1001BF0A0);
    }
    else
    {
      v374 = v569;
      v375 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v630 + 32))(v569, v570, v631);
      v376 = v568;
      Date.init()(v375);
      static Calendar.currentCalendar(with:)(v624);
      v377 = sub_100005D40(&qword_1001C37C0);
      v378 = type metadata accessor for Calendar.Component(0);
      v379 = *(_QWORD *)(v378 - 8);
      v380 = *(unsigned __int8 *)(v379 + 80);
      v381 = (v380 + 32) & ~v380;
      v382 = swift_allocObject(v377, v381 + *(_QWORD *)(v379 + 72), v380 | 7);
      *(_OWORD *)(v382 + 16) = xmmword_10017BD10;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v379 + 104))(v382 + v381, enum case for Calendar.Component.minute(_:), v378);
      v383 = sub_1000DFCCC(v382);
      v384 = v596;
      Calendar.dateComponents(_:from:to:)(v383, v376, v374);
      v385 = swift_bridgeObjectRelease(v383);
      v386 = DateComponents.minute.getter(v385);
      LOBYTE(v378) = v387;
      (*(void (**)(char *, uint64_t))(v625 + 8))(v384, v626);
      if ((v378 & 1) == 0 && (unint64_t)(v386 - 1) < 0x3B)
      {
        v388 = sub_100005D40(&qword_1001C37E8);
        v389 = v632;
        v390 = v632 + *(int *)(v388 + 48);
        (*(void (**)(uint64_t, char *, uint64_t))(v633 + 16))(v632, v564, v634);
        v391 = v568;
        v392 = v569;
        v393 = Date.timeIntervalSince(_:)(v568);
        (*(void (**)(char *, uint64_t))(v627 + 8))(v594, v628);
        v394 = *(void (**)(char *, uint64_t))(v630 + 8);
        v395 = v391;
        v396 = v631;
        v394(v395, v631);
        v394(v392, v396);
        *(double *)v390 = v393;
        *(_BYTE *)(v390 + 8) = 0;
        v397 = v389;
        v398 = 0;
        v399 = v388;
LABEL_199:
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v397, v398, 1, v399);
        v201 = *(uint64_t (**)(char *, uint64_t))(v633 + 8);
        v298 = &v596;
        goto LABEL_113;
      }
      (*(void (**)(char *, uint64_t))(v627 + 8))(v594, v628);
      v400 = v631;
      v401 = *(void (**)(char *, uint64_t))(v630 + 8);
      v401(v568, v631);
      v401(v569, v400);
    }
    v399 = sub_100005D40(&qword_1001C37E8);
    v397 = v632;
    v398 = 1;
    goto LABEL_199;
  }
  if (v156 == enum case for PrecipitationShift.Kind.flurriesToHeavySnowStopStart(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavySnowToFlurriesStopStart(_:)
    || v156 == enum case for PrecipitationShift.Kind.snowToHeavySnowStopStart(_:)
    || v156 == enum case for PrecipitationShift.Kind.heavySnowToSnowStopStart(_:))
  {
    goto LABEL_211;
  }
  if (v156 == enum case for PrecipitationShift.Kind.possibleSleet(_:))
  {
LABEL_220:
    v157 = sub_100005D40(&qword_1001C37E8);
    v158 = v632;
    v159 = v632 + *(int *)(v157 + 48);
    v160 = (unsigned int *)&enum case for Precipitation.sleet(_:);
    goto LABEL_3;
  }
  if (v156 == enum case for PrecipitationShift.Kind.possibleSleetStart(_:))
    goto LABEL_224;
  if (v156 == enum case for PrecipitationShift.Kind.possibleSleetStop(_:))
    goto LABEL_233;
  if (v156 == enum case for PrecipitationShift.Kind.possibleSleetStartStop(_:))
    goto LABEL_224;
  if (v156 == enum case for PrecipitationShift.Kind.possibleSleetStopStart(_:))
  {
LABEL_233:
    v465 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v633 + 104))(v572, enum case for Precipitation.sleet(_:), v634);
    v466 = v580;
    PrecipitationShift.date.getter(v465);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v466, 1, v631) == 1)
    {
      sub_100016904(v580, &qword_1001BF0A0);
    }
    else
    {
      v467 = v583;
      v468 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v630 + 32))(v583, v580, v631);
      v469 = v582;
      Date.init()(v468);
      static Calendar.currentCalendar(with:)(v624);
      v470 = sub_100005D40(&qword_1001C37C0);
      v471 = type metadata accessor for Calendar.Component(0);
      v472 = *(_QWORD *)(v471 - 8);
      v473 = *(unsigned __int8 *)(v472 + 80);
      v474 = (v473 + 32) & ~v473;
      v475 = swift_allocObject(v470, v474 + *(_QWORD *)(v472 + 72), v473 | 7);
      *(_OWORD *)(v475 + 16) = xmmword_10017BD10;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v472 + 104))(v475 + v474, enum case for Calendar.Component.minute(_:), v471);
      v476 = sub_1000DFCCC(v475);
      v477 = v601;
      Calendar.dateComponents(_:from:to:)(v476, v469, v467);
      v478 = swift_bridgeObjectRelease(v476);
      v479 = DateComponents.minute.getter(v478);
      LOBYTE(v471) = v480;
      (*(void (**)(char *, uint64_t))(v625 + 8))(v477, v626);
      if ((v471 & 1) == 0 && (unint64_t)(v479 - 1) < 0x3B)
      {
        v481 = sub_100005D40(&qword_1001C37E8);
        v482 = v632;
        v483 = v632 + *(int *)(v481 + 48);
        (*(void (**)(uint64_t, char *, uint64_t))(v633 + 16))(v632, v572, v634);
        v484 = v582;
        v485 = v583;
        v486 = Date.timeIntervalSince(_:)(v582);
        (*(void (**)(char *, uint64_t))(v627 + 8))(v599, v628);
        v487 = *(void (**)(char *, uint64_t))(v630 + 8);
        v488 = v484;
        v489 = v631;
        v487(v488, v631);
        v487(v485, v489);
        *(double *)v483 = v486;
        *(_BYTE *)(v483 + 8) = 1;
        v490 = v482;
        v491 = 0;
        v492 = v481;
LABEL_240:
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v490, v491, 1, v492);
        v201 = *(uint64_t (**)(char *, uint64_t))(v633 + 8);
        v298 = &v604;
        goto LABEL_113;
      }
      (*(void (**)(char *, uint64_t))(v627 + 8))(v599, v628);
      v493 = v631;
      v494 = *(void (**)(char *, uint64_t))(v630 + 8);
      v494(v582, v631);
      v494(v583, v493);
    }
    v492 = sub_100005D40(&qword_1001C37E8);
    v490 = v632;
    v491 = 1;
    goto LABEL_240;
  }
  if (v156 == enum case for PrecipitationShift.Kind.sleet(_:))
    goto LABEL_220;
  if (v156 == enum case for PrecipitationShift.Kind.sleetStart(_:))
    goto LABEL_224;
  if (v156 == enum case for PrecipitationShift.Kind.sleetStop(_:))
    goto LABEL_233;
  if (v156 == enum case for PrecipitationShift.Kind.sleetStartStop(_:))
  {
LABEL_224:
    v435 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v633 + 104))(v571, enum case for Precipitation.sleet(_:), v634);
    v436 = v577;
    PrecipitationShift.date.getter(v435);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v436, 1, v631) == 1)
    {
      sub_100016904(v577, &qword_1001BF0A0);
    }
    else
    {
      v437 = v581;
      v438 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v630 + 32))(v581, v577, v631);
      v439 = v579;
      Date.init()(v438);
      static Calendar.currentCalendar(with:)(v624);
      v440 = sub_100005D40(&qword_1001C37C0);
      v441 = type metadata accessor for Calendar.Component(0);
      v442 = *(_QWORD *)(v441 - 8);
      v443 = *(unsigned __int8 *)(v442 + 80);
      v444 = (v443 + 32) & ~v443;
      v445 = swift_allocObject(v440, v444 + *(_QWORD *)(v442 + 72), v443 | 7);
      *(_OWORD *)(v445 + 16) = xmmword_10017BD10;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v442 + 104))(v445 + v444, enum case for Calendar.Component.minute(_:), v441);
      v446 = sub_1000DFCCC(v445);
      v447 = v600;
      Calendar.dateComponents(_:from:to:)(v446, v439, v437);
      v448 = swift_bridgeObjectRelease(v446);
      v449 = DateComponents.minute.getter(v448);
      LOBYTE(v441) = v450;
      (*(void (**)(char *, uint64_t))(v625 + 8))(v447, v626);
      if ((v441 & 1) == 0 && (unint64_t)(v449 - 1) < 0x3B)
      {
        v451 = sub_100005D40(&qword_1001C37E8);
        v452 = v632;
        v453 = v632 + *(int *)(v451 + 48);
        (*(void (**)(uint64_t, char *, uint64_t))(v633 + 16))(v632, v571, v634);
        v454 = v579;
        v455 = v581;
        v456 = Date.timeIntervalSince(_:)(v579);
        (*(void (**)(char *, uint64_t))(v627 + 8))(v598, v628);
        v457 = *(void (**)(char *, uint64_t))(v630 + 8);
        v458 = v454;
        v459 = v631;
        v457(v458, v631);
        v457(v455, v459);
        *(double *)v453 = v456;
        *(_BYTE *)(v453 + 8) = 0;
        v460 = v452;
        v461 = 0;
        v462 = v451;
LABEL_231:
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v460, v461, 1, v462);
        v201 = *(uint64_t (**)(char *, uint64_t))(v633 + 8);
        v298 = &v603;
        goto LABEL_113;
      }
      (*(void (**)(char *, uint64_t))(v627 + 8))(v598, v628);
      v463 = v631;
      v464 = *(void (**)(char *, uint64_t))(v630 + 8);
      v464(v579, v631);
      v464(v581, v463);
    }
    v462 = sub_100005D40(&qword_1001C37E8);
    v460 = v632;
    v461 = 1;
    goto LABEL_231;
  }
  if (v156 == enum case for PrecipitationShift.Kind.sleetStopStart(_:))
    goto LABEL_233;
  if (v156 == enum case for PrecipitationShift.Kind.possibleHail(_:)
    || v156 == enum case for PrecipitationShift.Kind.possibleHailStart(_:))
  {
    goto LABEL_252;
  }
  if (v156 == enum case for PrecipitationShift.Kind.possibleHailStop(_:))
    goto LABEL_267;
  if (v156 == enum case for PrecipitationShift.Kind.possibleHailStartStop(_:))
    goto LABEL_252;
  if (v156 == enum case for PrecipitationShift.Kind.possibleHailStopStart(_:))
  {
LABEL_267:
    v526 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v633 + 104))(v578, enum case for Precipitation.hail(_:), v634);
    v527 = v587;
    PrecipitationShift.date.getter(v526);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v527, 1, v631) == 1)
    {
      sub_100016904(v587, &qword_1001BF0A0);
    }
    else
    {
      v528 = v593;
      v529 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v630 + 32))(v593, v587, v631);
      v530 = v592;
      Date.init()(v529);
      static Calendar.currentCalendar(with:)(v624);
      v531 = sub_100005D40(&qword_1001C37C0);
      v532 = type metadata accessor for Calendar.Component(0);
      v533 = *(_QWORD *)(v532 - 8);
      v534 = *(unsigned __int8 *)(v533 + 80);
      v535 = (v534 + 32) & ~v534;
      v536 = swift_allocObject(v531, v535 + *(_QWORD *)(v533 + 72), v534 | 7);
      *(_OWORD *)(v536 + 16) = xmmword_10017BD10;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v533 + 104))(v536 + v535, enum case for Calendar.Component.minute(_:), v532);
      v537 = sub_1000DFCCC(v536);
      v538 = v605;
      Calendar.dateComponents(_:from:to:)(v537, v530, v528);
      v539 = swift_bridgeObjectRelease(v537);
      v540 = DateComponents.minute.getter(v539);
      LOBYTE(v532) = v541;
      (*(void (**)(char *, uint64_t))(v625 + 8))(v538, v626);
      if ((v532 & 1) == 0 && (unint64_t)(v540 - 1) < 0x3B)
      {
        v542 = sub_100005D40(&qword_1001C37E8);
        v543 = v632;
        v544 = v632 + *(int *)(v542 + 48);
        (*(void (**)(uint64_t, char *, uint64_t))(v633 + 16))(v632, v578, v634);
        v545 = v592;
        v546 = v593;
        v547 = Date.timeIntervalSince(_:)(v592);
        (*(void (**)(char *, uint64_t))(v627 + 8))(v603, v628);
        v548 = *(void (**)(char *, uint64_t))(v630 + 8);
        v549 = v545;
        v550 = v631;
        v548(v549, v631);
        v548(v546, v550);
        *(double *)v544 = v547;
        *(_BYTE *)(v544 + 8) = 1;
        v551 = v543;
        v552 = 0;
        v553 = v542;
LABEL_274:
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v551, v552, 1, v553);
        v201 = *(uint64_t (**)(char *, uint64_t))(v633 + 8);
        v298 = &v610;
        goto LABEL_113;
      }
      (*(void (**)(char *, uint64_t))(v627 + 8))(v603, v628);
      v554 = v631;
      v555 = *(void (**)(char *, uint64_t))(v630 + 8);
      v555(v592, v631);
      v555(v593, v554);
    }
    v553 = sub_100005D40(&qword_1001C37E8);
    v551 = v632;
    v552 = 1;
    goto LABEL_274;
  }
  if (v156 == enum case for PrecipitationShift.Kind.hail(_:))
  {
    v157 = sub_100005D40(&qword_1001C37E8);
    v158 = v632;
    v159 = v632 + *(int *)(v157 + 48);
    v160 = (unsigned int *)&enum case for Precipitation.hail(_:);
    goto LABEL_3;
  }
  if (v156 == enum case for PrecipitationShift.Kind.hailStart(_:))
    goto LABEL_252;
  if (v156 == enum case for PrecipitationShift.Kind.hailStop(_:))
    goto LABEL_267;
  if (v156 == enum case for PrecipitationShift.Kind.hailStartStop(_:))
  {
LABEL_252:
    v496 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v633 + 104))(v576, enum case for Precipitation.hail(_:), v634);
    v497 = v586;
    PrecipitationShift.date.getter(v496);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v497, 1, v631) == 1)
    {
      sub_100016904(v586, &qword_1001BF0A0);
    }
    else
    {
      v498 = v589;
      v499 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v630 + 32))(v589, v586, v631);
      v500 = v588;
      Date.init()(v499);
      static Calendar.currentCalendar(with:)(v624);
      v501 = sub_100005D40(&qword_1001C37C0);
      v502 = type metadata accessor for Calendar.Component(0);
      v503 = *(_QWORD *)(v502 - 8);
      v504 = *(unsigned __int8 *)(v503 + 80);
      v505 = (v504 + 32) & ~v504;
      v506 = swift_allocObject(v501, v505 + *(_QWORD *)(v503 + 72), v504 | 7);
      *(_OWORD *)(v506 + 16) = xmmword_10017BD10;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v503 + 104))(v506 + v505, enum case for Calendar.Component.minute(_:), v502);
      v507 = sub_1000DFCCC(v506);
      v508 = v604;
      Calendar.dateComponents(_:from:to:)(v507, v500, v498);
      v509 = swift_bridgeObjectRelease(v507);
      v510 = DateComponents.minute.getter(v509);
      LOBYTE(v502) = v511;
      (*(void (**)(char *, uint64_t))(v625 + 8))(v508, v626);
      if ((v502 & 1) == 0 && (unint64_t)(v510 - 1) < 0x3B)
      {
        v512 = sub_100005D40(&qword_1001C37E8);
        v513 = v632;
        v514 = v632 + *(int *)(v512 + 48);
        (*(void (**)(uint64_t, char *, uint64_t))(v633 + 16))(v632, v576, v634);
        v515 = v588;
        v516 = v589;
        v517 = Date.timeIntervalSince(_:)(v588);
        (*(void (**)(char *, uint64_t))(v627 + 8))(v602, v628);
        v518 = *(void (**)(char *, uint64_t))(v630 + 8);
        v519 = v515;
        v520 = v631;
        v518(v519, v631);
        v518(v516, v520);
        *(double *)v514 = v517;
        *(_BYTE *)(v514 + 8) = 0;
        v521 = v513;
        v522 = 0;
        v523 = v512;
LABEL_259:
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v521, v522, 1, v523);
        v201 = *(uint64_t (**)(char *, uint64_t))(v633 + 8);
        v298 = &v608;
        goto LABEL_113;
      }
      (*(void (**)(char *, uint64_t))(v627 + 8))(v602, v628);
      v524 = v631;
      v525 = *(void (**)(char *, uint64_t))(v630 + 8);
      v525(v588, v631);
      v525(v589, v524);
    }
    v523 = sub_100005D40(&qword_1001C37E8);
    v521 = v632;
    v522 = 1;
    goto LABEL_259;
  }
  if (v156 == enum case for PrecipitationShift.Kind.hailStopStart(_:))
    goto LABEL_267;
  v556 = enum case for PrecipitationShift.Kind.clear(_:);
  v557 = sub_100005D40(&qword_1001C37E8);
  result = _s13WeatherWidget20WeatherDataViewModelOwst_0(v632, 1, 1, v557);
  if (v162 != v556)
    return (*(uint64_t (**)(char *, uint64_t))(v152 + 8))(v155, v151);
  return result;
}

uint64_t sub_1000DF448(uint64_t a1, uint64_t a2, char a3, unsigned __int8 a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(void);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t countAndFlagsBits;
  objc_class *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  NSBundle v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  id v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t v36;
  Swift::String v37;

  v6 = a4;
  v7 = type metadata accessor for Precipitation(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005D40(&qword_1001C37E8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = *(void (**)(void))(v8 + 16);
  v17 = (char *)&v36 - v16;
  v15();
  v18 = *(int *)(v11 + 48);
  v19 = &v17[v18];
  *(_QWORD *)v19 = a2;
  v19[8] = a3;
  if (v6)
  {
    v20 = &v14[v18];
    ((void (*)(char *, char *, uint64_t))v15)(v14, v17, v7);
    *(_QWORD *)v20 = a2;
    v20[8] = a3;
    if ((*(unsigned int (**)(char *, uint64_t))(v8 + 88))(v14, v7) == enum case for Precipitation.none(_:))
    {
      sub_100016904((uint64_t)v17, &qword_1001C37E8);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
      return 0;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
    if (qword_1001BEF68 != -1)
      swift_once(&qword_1001BEF68, sub_100173D84);
    v23 = (objc_class *)(id)qword_1001DA1E8;
    v24 = 0xD00000000000007ALL;
    v35 = 0x8000000100188C30;
    v25 = 7827278;
    v26 = 0xE300000000000000;
    goto LABEL_10;
  }
  ((void (*)(char *, char *, uint64_t))v15)(v10, v17, v7);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if (v21 == enum case for Precipitation.none(_:))
  {
    sub_100016904((uint64_t)v17, &qword_1001C37E8);
    return 0;
  }
  if (v21 == enum case for Precipitation.hail(_:))
  {
    if (qword_1001BEF68 != -1)
      swift_once(&qword_1001BEF68, sub_100173D84);
    v23 = (objc_class *)(id)qword_1001DA1E8;
    v35 = 0x8000000100188D40;
    v30 = 1818845512;
LABEL_20:
    v25 = v30 | 0x776F4E2000000000;
    v26 = 0xE800000000000000;
    v27.super.isa = v23;
    v28 = 0;
    v29 = 0xE000000000000000;
    v24 = 0xD000000000000022;
    goto LABEL_21;
  }
  if (v21 == enum case for Precipitation.mixed(_:) || v21 == enum case for Precipitation.rain(_:))
  {
    if (qword_1001BEF68 != -1)
      swift_once(&qword_1001BEF68, sub_100173D84);
    v23 = (objc_class *)(id)qword_1001DA1E8;
    v35 = 0x8000000100188CB0;
    v30 = 1852399954;
    goto LABEL_20;
  }
  if (v21 == enum case for Precipitation.sleet(_:))
  {
    if (qword_1001BEF68 != -1)
      swift_once(&qword_1001BEF68, sub_100173D84);
    v23 = (objc_class *)(id)qword_1001DA1E8;
    v24 = 0xD000000000000023;
    v35 = 0x8000000100188D10;
    v25 = 0x6F4E207465656C53;
    v26 = 0xE900000000000077;
LABEL_10:
    v27.super.isa = v23;
    v28 = 0;
    v29 = 0xE000000000000000;
LABEL_21:
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v25, (Swift::String_optional)0, v27, *(Swift::String *)&v28, *(Swift::String *)&v24)._countAndFlagsBits;

    sub_100016904((uint64_t)v17, &qword_1001C37E8);
    return countAndFlagsBits;
  }
  if (v21 == enum case for Precipitation.snow(_:))
  {
    if (qword_1001BEF68 != -1)
      swift_once(&qword_1001BEF68, sub_100173D84);
    v23 = (objc_class *)(id)qword_1001DA1E8;
    v35 = 0x8000000100188CE0;
    v30 = 2003791443;
    goto LABEL_20;
  }
  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v32 = (id)qword_1001DA1E8;
  v37._object = (void *)0x8000000100188CB0;
  v33._countAndFlagsBits = 0x776F4E206E696152;
  v33._object = (void *)0xE800000000000000;
  v34._countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  v37._countAndFlagsBits = 0xD000000000000022;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, (Swift::String_optional)0, (NSBundle)v32, v34, v37)._countAndFlagsBits;

  sub_100016904((uint64_t)v17, &qword_1001C37E8);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return countAndFlagsBits;
}

uint64_t sub_1000DF96C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v40 = a5;
  v41 = a4;
  v8 = type metadata accessor for Locale.Language(0);
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  v36 = *(_QWORD *)(v11 - 8);
  v37 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005D40(&qword_1001C3798);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.LocalizationValue(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v36 - v22;
  if (a2)
    sub_1001115D0(a3, a2, (uint64_t)v16);
  else
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v16, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, a1, v17);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v17) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v21, v17);
    sub_100016904((uint64_t)v16, &qword_1001C3798);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
  }
  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v24 = (id)qword_1001DA1E8;
  if (a3
    || (v25 = static Locale.current.getter(),
        Locale.language.getter(v25),
        v26 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v13, v37),
        v27 = Locale.Language.isEnglish.getter(v26),
        (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v39),
        (v27 & 1) == 0))
  {
    v29 = sub_100005D40(&qword_1001C37A0);
    v30 = type metadata accessor for StyledVariableAttribute.Style(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned __int8 *)(v31 + 80);
    v33 = (v32 + 32) & ~v32;
    v28 = (char *)swift_allocObject(v29, v33 + *(_QWORD *)(v31 + 72), v32 | 7);
    *((_OWORD *)v28 + 1) = xmmword_10017BD10;
    (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(&v28[v33], enum case for StyledVariableAttribute.Style.lowercaseSmallCaps(_:), v30);
  }
  else
  {
    v28 = (char *)&_swiftEmptyArrayStorage;
  }
  static AttributedString.makeStyledString(localized:bundle:ignoreStyles:arguments:)(v23, v24, v28, v41);

  v34 = swift_bridgeObjectRelease(v28);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v18 + 8))(v23, v17, v34);
}

unint64_t sub_1000DFC88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C37B8;
  if (!qword_1001C37B8)
  {
    v1 = sub_100005DC4(&qword_1001C37B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001C37B8);
  }
  return result;
}

uint64_t sub_1000DFCCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = type metadata accessor for Calendar.Component(0);
  v34 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v29 - v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
    v10 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }
  sub_100005D40(&qword_1001C37C8);
  result = static _SetStorage.allocate(capacity:)(v8);
  v10 = (_QWORD *)result;
  v31 = *(_QWORD *)(a1 + 16);
  if (!v31)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v10;
  }
  v11 = 0;
  v33 = result + 56;
  v12 = *(unsigned __int8 *)(v34 + 80);
  v29 = a1;
  v30 = a1 + ((v12 + 32) & ~v12);
  while (v11 < *(_QWORD *)(a1 + 16))
  {
    v13 = *(_QWORD *)(v34 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
    v14(v7, v30 + v13 * v11, v2);
    v15 = v10[5];
    sub_10002EF14(&qword_1001C37D0, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
    v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v2, v16);
    v18 = -1 << *((_BYTE *)v10 + 32);
    v19 = v17 & ~v18;
    v20 = v19 >> 6;
    v21 = *(_QWORD *)(v33 + 8 * (v19 >> 6));
    v22 = 1 << v19;
    if (((1 << v19) & v21) != 0)
    {
      v32 = v11;
      v23 = ~v18;
      while (1)
      {
        v14(v5, v10[6] + v19 * v13, v2);
        sub_10002EF14(&qword_1001C37D8, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
        v24 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v7, v2);
        v25 = *(void (**)(char *, uint64_t))(v34 + 8);
        v25(v5, v2);
        if ((v24 & 1) != 0)
          break;
        v19 = (v19 + 1) & v23;
        v20 = v19 >> 6;
        v21 = *(_QWORD *)(v33 + 8 * (v19 >> 6));
        v22 = 1 << v19;
        if ((v21 & (1 << v19)) == 0)
        {
          a1 = v29;
          v11 = v32;
          goto LABEL_10;
        }
      }
      result = ((uint64_t (*)(char *, uint64_t))v25)(v7, v2);
      a1 = v29;
      v11 = v32;
    }
    else
    {
LABEL_10:
      *(_QWORD *)(v33 + 8 * v20) = v22 | v21;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v34 + 32))(v10[6] + v19 * v13, v7, v2);
      v26 = v10[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        goto LABEL_18;
      v10[2] = v28;
    }
    if (++v11 == v31)
      goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1000DFF64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001BF0B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000DFFAC()
{
  unint64_t result;

  result = qword_1001C3800;
  if (!qword_1001C3800)
  {
    result = swift_getWitnessTable(&unk_10017FC30, &type metadata for RainInlineContentViewModelFactory.ContentLength);
    atomic_store(result, (unint64_t *)&qword_1001C3800);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RainInlineContentViewModelFactory.ContentLength(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000E0034 + 4 * byte_10017FBA5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E0068 + 4 * byte_10017FBA0[v4]))();
}

uint64_t sub_1000E0068(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E0070(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E0078);
  return result;
}

uint64_t sub_1000E0084(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E008CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000E0090(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E0098(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RainInlineContentViewModelFactory.ContentLength()
{
  return &type metadata for RainInlineContentViewModelFactory.ContentLength;
}

ValueMetadata *type metadata accessor for RainInlineContentViewModelFactory()
{
  return &type metadata for RainInlineContentViewModelFactory;
}

uint64_t getEnumTagSinglePayload for RainInlineContentViewModelFactory.PrecipitationStartStop(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RainInlineContentViewModelFactory.PrecipitationStartStop(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000E0148(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1000E0160(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RainInlineContentViewModelFactory.PrecipitationStartStop()
{
  return &type metadata for RainInlineContentViewModelFactory.PrecipitationStartStop;
}

unint64_t sub_1000E018C()
{
  unint64_t result;

  result = qword_1001C3808;
  if (!qword_1001C3808)
  {
    result = swift_getWitnessTable(&unk_10017FC08, &type metadata for RainInlineContentViewModelFactory.ContentLength);
    atomic_store(result, (unint64_t *)&qword_1001C3808);
  }
  return result;
}

uint64_t sub_1000E01C8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v1 - 160))(*(_QWORD *)(v1 - 192), v0, *(_QWORD *)(v1 - 176));
}

uint64_t sub_1000E01F0()
{
  return type metadata accessor for RainInlineContentViewModel(0);
}

uint64_t sub_1000E01F8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 136) + 8))(*(_QWORD *)(v1 - 128), v0);
}

uint64_t sub_1000E0208(__n128 *a1, __n128 a2)
{
  uint64_t v2;

  a1[1] = a2;
  return *(_QWORD *)(v2 - 192);
}

uint64_t sub_1000E0228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSBundle v8;
  Swift::String v9;

  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, (Swift::String_optional)0, v8, v9, *(Swift::String *)&a8)._countAndFlagsBits;
}

uint64_t sub_1000E0240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_1000E0254()
{
  return 0;
}

uint64_t sub_1000E0270(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 384));
}

uint64_t sub_1000E0284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.init(stringLiteral:)(a1, (a2 - 32) | 0x8000000000000000);
}

uint64_t sub_1000E02B0()
{
  NSDateComponentsFormatterUnitsStyle v0;

  return Double.formatMinuteDuration(unitsStyle:)(v0).value._countAndFlagsBits;
}

void sub_1000E02C0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_100011894(*(_QWORD *)(v2 - 104), a2);
}

void sub_1000E02C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100016904(*(_QWORD *)(v2 - 152), a2);
}

uint64_t sub_1000E02D0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 152) + 8))(v0, *(_QWORD *)(v1 - 144));
}

uint64_t sub_1000E02E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void sub_1000E02E8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_100011894(v2, a2);
}

void sub_1000E02F0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10004D278(a1, v2, v1);
}

uint64_t sub_1000E02FC()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1000E0308(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[8] = a1;
  v2[4] = v1;
  v2[5] = v3;
  return v4;
}

uint64_t sub_1000E031C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, a3, *(_QWORD *)(v3 - 384));
}

uint64_t sub_1000E0328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 176));
}

uint64_t sub_1000E0334()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000E0348(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = v1;
  *(_QWORD *)(a1 + 40) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000E0354(uint64_t a1, uint64_t a2)
{
  return String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, a2);
}

uint64_t sub_1000E0360()
{
  uint64_t v0;
  uint64_t v1;

  return Double.roundedPrecipitationPercent.getter(*(double *)(v0 + *(int *)(v1 + 40)));
}

uint64_t sub_1000E036C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const void *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const void *v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  int *v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  void (*v165)(char *, char *, uint64_t);
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  int v180;
  int v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  void (*v233)(uint64_t, uint64_t, uint64_t);
  uint64_t v234;
  uint64_t v235;
  void (*v236)(uint64_t, uint64_t);
  uint64_t v237;
  int *v238;
  uint64_t v239;
  void (*v240)(void *, const void *, uint64_t);
  void (*v241)(void *, const void *, uint64_t);
  void (*v242)(char *, char *, uint64_t);
  void (*v243)(uint64_t, uint64_t, uint64_t);
  char *v244;
  uint64_t v245;

  v4 = type metadata accessor for UUID(0);
  v243 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24);
  v243(a1, a2, v4);
  v5 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  v234 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v234 + 24);
  v10(v7, v8, v9);
  v241 = (void (*)(void *, const void *, uint64_t))v10;
  v10(a1 + v5[6], a2 + v5[6], v9);
  v11 = v5[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_100005D40(&qword_1001BF090);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24);
  v16(v12, v13, v14);
  v240 = (void (*)(void *, const void *, uint64_t))v16;
  v16(a1 + v5[8], a2 + v5[8], v14);
  v17 = v5[9];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = v5[10];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  LODWORD(v16) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v22, 1, v14);
  v25 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v14);
  if ((_DWORD)v16)
  {
    if (!v25)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v23, v24, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v23, v14);
LABEL_6:
    v26 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  v240(v23, v24, v14);
LABEL_7:
  v27 = v5[11];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  v30 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v27, 1, v14);
  v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, v14);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v28, v29, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v28, 0, 1, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v28, v14);
LABEL_12:
    v32 = sub_100005D40(&qword_1001BF098);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  v240(v28, v29, v14);
LABEL_13:
  v33 = v5[12];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v239 = v4;
  v243(a1 + v33, a2 + v33, v4);
  v36 = (int *)type metadata accessor for ConditionViewModel(0);
  v37 = v36[5];
  v38 = v34 + v37;
  v39 = v35 + v37;
  v40 = type metadata accessor for WeatherCondition(0);
  v236 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 24);
  v237 = v40;
  v236(v38, v39);
  v41 = v36[6];
  v42 = (_QWORD *)(v34 + v41);
  v43 = (_QWORD *)(v35 + v41);
  *v42 = *v43;
  v44 = v43[1];
  v45 = v42[1];
  v42[1] = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  v46 = v36[7];
  v47 = (_QWORD *)(v34 + v46);
  v48 = (_QWORD *)(v35 + v46);
  *v47 = *v48;
  v49 = v48[1];
  v50 = v47[1];
  v47[1] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  *(_BYTE *)(v34 + v36[8]) = *(_BYTE *)(v35 + v36[8]);
  *(_BYTE *)(v34 + v36[9]) = *(_BYTE *)(v35 + v36[9]);
  *(_BYTE *)(v34 + v36[10]) = *(_BYTE *)(v35 + v36[10]);
  *(_QWORD *)(a1 + v5[13]) = *(_QWORD *)(a2 + v5[13]);
  v51 = v5[14];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v52, v53, v54);
  v55 = v5[15];
  v56 = (void *)(a1 + v55);
  v57 = (const void *)(a2 + v55);
  LODWORD(v50) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v55, 1, v9);
  v58 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v57, 1, v9);
  if ((_DWORD)v50)
  {
    if (!v58)
    {
      (*(void (**)(void *, const void *, uint64_t))(v234 + 16))(v56, v57, v9);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v58)
  {
    (*(void (**)(void *, uint64_t))(v234 + 8))(v56, v9);
LABEL_18:
    v59 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_19;
  }
  v241(v56, v57, v9);
LABEL_19:
  v60 = v5[16];
  v61 = (void *)(a1 + v60);
  v62 = (const void *)(a2 + v60);
  v63 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v60, 1, v9);
  v64 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v62, 1, v9);
  v238 = v36;
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(void *, const void *, uint64_t))(v234 + 16))(v61, v62, v9);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v61, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v64)
  {
    (*(void (**)(void *, uint64_t))(v234 + 8))(v61, v9);
LABEL_24:
    v65 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_25;
  }
  v241(v61, v62, v9);
LABEL_25:
  v66 = v5[17];
  v67 = a1 + v66;
  v68 = a2 + v66;
  v69 = type metadata accessor for UVIndex(0);
  v233 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 24);
  v233(v67, v68, v69);
  v70 = v5[18];
  v71 = a1 + v70;
  v72 = a2 + v70;
  v73 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 24))(v71, v72, v73);
  *(_QWORD *)(a1 + v5[19]) = *(_QWORD *)(a2 + v5[19]);
  v74 = v5[20];
  v75 = a1 + v74;
  v76 = (__int128 *)(a2 + v74);
  v77 = *(_QWORD *)(a1 + v74 + 8);
  v78 = *(_QWORD *)(a2 + v74 + 8);
  v235 = v69;
  if (v77)
  {
    if (v78)
    {
      *(_QWORD *)v75 = *(_QWORD *)v76;
      v79 = *((_QWORD *)v76 + 1);
      *(_QWORD *)(v75 + 8) = v79;
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRelease(v77);
      v80 = *((_QWORD *)v76 + 2);
      v81 = *((_QWORD *)v76 + 3);
      v82 = *((_BYTE *)v76 + 32);
      sub_100006E58(v80, v81, v82);
      v83 = *(_QWORD *)(v75 + 16);
      v84 = *(_QWORD *)(v75 + 24);
      v85 = *(_BYTE *)(v75 + 32);
      *(_QWORD *)(v75 + 16) = v80;
      *(_QWORD *)(v75 + 24) = v81;
      *(_BYTE *)(v75 + 32) = v82;
      sub_100007458(v83, v84, v85);
    }
    else
    {
      sub_100008EC4(v75);
      v90 = *((_BYTE *)v76 + 32);
      v91 = v76[1];
      *(_OWORD *)v75 = *v76;
      *(_OWORD *)(v75 + 16) = v91;
      *(_BYTE *)(v75 + 32) = v90;
    }
  }
  else if (v78)
  {
    *(_QWORD *)v75 = *(_QWORD *)v76;
    v86 = *((_QWORD *)v76 + 1);
    *(_QWORD *)(v75 + 8) = v86;
    v87 = *((_QWORD *)v76 + 2);
    v88 = *((_QWORD *)v76 + 3);
    v89 = *((_BYTE *)v76 + 32);
    swift_bridgeObjectRetain(v86);
    sub_100006E58(v87, v88, v89);
    *(_QWORD *)(v75 + 16) = v87;
    *(_QWORD *)(v75 + 24) = v88;
    *(_BYTE *)(v75 + 32) = v89;
  }
  else
  {
    v92 = *v76;
    v93 = v76[1];
    *(_BYTE *)(v75 + 32) = *((_BYTE *)v76 + 32);
    *(_OWORD *)v75 = v92;
    *(_OWORD *)(v75 + 16) = v93;
  }
  v94 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v95 = v94[5];
  v96 = a1 + v95;
  v97 = a2 + v95;
  v243(a1 + v95, a2 + v95, v239);
  v98 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v241((void *)(v96 + v98[5]), (const void *)(v97 + v98[5]), v9);
  v240((void *)(v96 + v98[6]), (const void *)(v97 + v98[6]), v14);
  v240((void *)(v96 + v98[7]), (const void *)(v97 + v98[7]), v14);
  v99 = v98[8];
  v100 = v96 + v99;
  v101 = v97 + v99;
  v243(v96 + v99, v97 + v99, v239);
  ((void (*)(uint64_t, uint64_t, uint64_t))v236)(v100 + v238[5], v101 + v238[5], v237);
  v102 = v238[6];
  v103 = (_QWORD *)(v100 + v102);
  v104 = (_QWORD *)(v101 + v102);
  *v103 = *v104;
  v105 = v104[1];
  v106 = v103[1];
  v103[1] = v105;
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRelease(v106);
  v107 = v238[7];
  v108 = (_QWORD *)(v100 + v107);
  v109 = (_QWORD *)(v101 + v107);
  *v108 = *v109;
  v110 = v109[1];
  v111 = v108[1];
  v108[1] = v110;
  swift_bridgeObjectRetain(v110);
  swift_bridgeObjectRelease(v111);
  *(_BYTE *)(v100 + v238[8]) = *(_BYTE *)(v101 + v238[8]);
  *(_BYTE *)(v100 + v238[9]) = *(_BYTE *)(v101 + v238[9]);
  *(_BYTE *)(v100 + v238[10]) = *(_BYTE *)(v101 + v238[10]);
  v112 = v98[9];
  v113 = v96 + v112;
  v114 = v97 + v112;
  v115 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 24))(v113, v114, v115);
  *(_QWORD *)(v96 + v98[10]) = *(_QWORD *)(v97 + v98[10]);
  v116 = v98[11];
  v117 = (_QWORD *)(v96 + v116);
  v118 = (_QWORD *)(v97 + v116);
  *v117 = *v118;
  v119 = v118[1];
  v120 = v117[1];
  v117[1] = v119;
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRelease(v120);
  v121 = v98[12];
  v122 = (_QWORD *)(v96 + v121);
  v123 = (_QWORD *)(v97 + v121);
  *v122 = *v123;
  v124 = v123[1];
  v125 = v122[1];
  v122[1] = v124;
  swift_bridgeObjectRetain(v124);
  swift_bridgeObjectRelease(v125);
  v126 = v98[13];
  v127 = (_QWORD *)(v96 + v126);
  v128 = (_QWORD *)(v97 + v126);
  *v127 = *v128;
  v129 = v128[1];
  v130 = v127[1];
  v127[1] = v129;
  swift_bridgeObjectRetain(v129);
  swift_bridgeObjectRelease(v130);
  v131 = v98[14];
  v132 = (_QWORD *)(v96 + v131);
  v133 = (_QWORD *)(v97 + v131);
  *v132 = *v133;
  v134 = v133[1];
  v135 = v132[1];
  v132[1] = v134;
  swift_bridgeObjectRetain(v134);
  swift_bridgeObjectRelease(v135);
  v136 = v98[15];
  v137 = v96 + v136;
  v138 = v97 + v136;
  v139 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 24))(v137, v138, v139);
  v140 = v98[16];
  v141 = (void *)(v96 + v140);
  v142 = (const void *)(v97 + v140);
  v143 = type metadata accessor for SunEvents(0);
  LODWORD(v111) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v141, 1, v143);
  v144 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v142, 1, v143);
  if ((_DWORD)v111)
  {
    if (!v144)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v141, 0, 1, v143);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v145 = *(_QWORD *)(v143 - 8);
  if (v144)
  {
    (*(void (**)(void *, uint64_t))(v145 + 8))(v141, v143);
LABEL_41:
    v146 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v145 + 24))(v141, v142, v143);
LABEL_42:
  v147 = v98[17];
  v148 = (void *)(v96 + v147);
  v149 = (const void *)(v97 + v147);
  v150 = type metadata accessor for MoonEvents(0);
  v151 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v148, 1, v150);
  v152 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v149, 1, v150);
  if (v151)
  {
    if (!v152)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v148, 0, 1, v150);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v153 = *(_QWORD *)(v150 - 8);
  if (v152)
  {
    (*(void (**)(void *, uint64_t))(v153 + 8))(v148, v150);
LABEL_47:
    v154 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v153 + 24))(v148, v149, v150);
LABEL_48:
  v233(v96 + v98[18], v97 + v98[18], v235);
  *(_QWORD *)(v96 + v98[19]) = *(_QWORD *)(v97 + v98[19]);
  v155 = v94[6];
  v156 = (_QWORD *)(a1 + v155);
  v157 = (_QWORD *)(a2 + v155);
  v158 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v159 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v156, 1, (uint64_t)v158);
  v160 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157, 1, (uint64_t)v158);
  if (!v159)
  {
    if (v160)
    {
      sub_1000E1258((uint64_t)v156);
      goto LABEL_54;
    }
    *v156 = *v157;
    v171 = v157[1];
    v172 = v156[1];
    v156[1] = v171;
    swift_bridgeObjectRetain(v171);
    swift_bridgeObjectRelease(v172);
    v173 = v158[5];
    v174 = (char *)v156 + v173;
    v175 = (char *)v157 + v173;
    v176 = type metadata accessor for AttributedString(0);
    v245 = *(_QWORD *)(v176 - 8);
    v242 = *(void (**)(char *, char *, uint64_t))(v245 + 24);
    v242(v174, v175, v176);
    v177 = v158[6];
    v178 = (char *)v156 + v177;
    v179 = (char *)v157 + v177;
    v180 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v156 + v177, 1, v176);
    v181 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v179, 1, v176);
    if (v180)
    {
      if (!v181)
      {
        (*(void (**)(char *, char *, uint64_t))(v245 + 16))(v178, v179, v176);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v178, 0, 1, v176);
LABEL_65:
        v187 = v158[7];
        v188 = (_QWORD *)((char *)v156 + v187);
        v189 = (_QWORD *)((char *)v157 + v187);
        *v188 = *v189;
        v190 = v189[1];
        v191 = v188[1];
        v188[1] = v190;
        swift_bridgeObjectRetain(v190);
        swift_bridgeObjectRelease(v191);
        goto LABEL_66;
      }
    }
    else
    {
      if (!v181)
      {
        v242(v178, v179, v176);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v245 + 8))(v178, v176);
    }
    v186 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v178, v179, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
    goto LABEL_65;
  }
  if (v160)
  {
LABEL_54:
    v170 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
    goto LABEL_66;
  }
  *v156 = *v157;
  v161 = v157[1];
  v156[1] = v161;
  v162 = v158[5];
  v163 = (char *)v156 + v162;
  v244 = (char *)v157 + v162;
  v164 = type metadata accessor for AttributedString(0);
  v165 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 16);
  swift_bridgeObjectRetain(v161);
  v165(v163, v244, v164);
  v166 = v158[6];
  v167 = (char *)v156 + v166;
  v168 = (char *)v157 + v166;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157 + v166, 1, v164))
  {
    v169 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
  }
  else
  {
    v165(v167, v168, v164);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v167, 0, 1, v164);
  }
  v182 = v158[7];
  v183 = (_QWORD *)((char *)v156 + v182);
  v184 = (_QWORD *)((char *)v157 + v182);
  *v183 = *v184;
  v185 = v184[1];
  v183[1] = v185;
  swift_bridgeObjectRetain(v185);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v156, 0, 1, (uint64_t)v158);
LABEL_66:
  v192 = v94[7];
  v193 = a1 + v192;
  v194 = a2 + v192;
  v195 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v195 - 8) + 24))(v193, v194, v195);
  v196 = v94[8];
  v197 = (_QWORD *)(a1 + v196);
  v198 = (_QWORD *)(a2 + v196);
  *v197 = *v198;
  v199 = v198[1];
  v200 = v197[1];
  v197[1] = v199;
  swift_bridgeObjectRetain(v199);
  swift_bridgeObjectRelease(v200);
  *(_BYTE *)(a1 + v94[9]) = *(_BYTE *)(a2 + v94[9]);
  *(_BYTE *)(a1 + v94[10]) = *(_BYTE *)(a2 + v94[10]);
  v201 = v94[11];
  v202 = *(_QWORD *)(a1 + v201);
  v203 = *(_QWORD *)(a2 + v201);
  *(_QWORD *)(a1 + v201) = v203;
  swift_retain(v203);
  swift_release(v202);
  v204 = v94[12];
  v205 = (_QWORD *)(a1 + v204);
  v206 = (_QWORD *)(a2 + v204);
  *v205 = *v206;
  v207 = v206[1];
  v208 = v205[1];
  v205[1] = v207;
  swift_bridgeObjectRetain(v207);
  swift_bridgeObjectRelease(v208);
  v209 = v94[13];
  v210 = *(_QWORD *)(a2 + v209);
  v211 = *(_QWORD *)(a1 + v209);
  *(_QWORD *)(a1 + v209) = v210;
  swift_retain(v210);
  swift_release(v211);
  v212 = v94[14];
  v213 = *(_QWORD *)(a2 + v212);
  v214 = *(_QWORD *)(a1 + v212);
  *(_QWORD *)(a1 + v212) = v213;
  swift_retain(v213);
  swift_release(v214);
  v215 = v94[15];
  v216 = *(_QWORD *)(a2 + v215);
  v217 = *(_QWORD *)(a1 + v215);
  *(_QWORD *)(a1 + v215) = v216;
  swift_retain(v216);
  swift_release(v217);
  v218 = v94[16];
  v219 = *(_QWORD *)(a2 + v218);
  v220 = *(_QWORD *)(a1 + v218);
  *(_QWORD *)(a1 + v218) = v219;
  swift_retain(v219);
  swift_release(v220);
  *(_BYTE *)(a1 + v94[17]) = *(_BYTE *)(a2 + v94[17]);
  v221 = v94[18];
  v222 = *(_QWORD *)(a2 + v221);
  v223 = *(_QWORD *)(a1 + v221);
  *(_QWORD *)(a1 + v221) = v222;
  swift_retain(v222);
  swift_release(v223);
  v224 = v94[19];
  v225 = *(_QWORD *)(a2 + v224);
  v226 = *(_QWORD *)(a1 + v224);
  *(_QWORD *)(a1 + v224) = v225;
  swift_retain(v225);
  swift_release(v226);
  *(_QWORD *)(a1 + v94[20]) = *(_QWORD *)(a2 + v94[20]);
  *(_BYTE *)(a1 + v94[21]) = *(_BYTE *)(a2 + v94[21]);
  *(_BYTE *)(a1 + v94[22]) = *(_BYTE *)(a2 + v94[22]);
  *(_BYTE *)(a1 + v94[23]) = *(_BYTE *)(a2 + v94[23]);
  *(_BYTE *)(a1 + v94[24]) = *(_BYTE *)(a2 + v94[24]);
  v227 = v94[25];
  v228 = (_QWORD *)(a1 + v227);
  v229 = (_QWORD *)(a2 + v227);
  *v228 = *v229;
  v230 = v229[1];
  v231 = v228[1];
  v228[1] = v230;
  swift_bridgeObjectRetain(v230);
  swift_bridgeObjectRelease(v231);
  *(_BYTE *)(a1 + v94[26]) = *(_BYTE *)(a2 + v94[26]);
  *(_QWORD *)(a1 + v94[27]) = *(_QWORD *)(a2 + v94[27]);
  *(_QWORD *)(a1 + v94[28]) = *(_QWORD *)(a2 + v94[28]);
  return a1;
}

uint64_t sub_1000E1258(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RainInlineContentViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E1294(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const void *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  __int128 v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const void *v142;
  uint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const void *v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  int *v159;
  int v160;
  int v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  void (*v166)(char *, char *, uint64_t);
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void (*v227)(uint64_t, uint64_t, uint64_t);
  uint64_t v228;
  uint64_t v229;
  void (*v230)(uint64_t, uint64_t);
  uint64_t v231;
  int *v232;
  uint64_t v233;
  void (*v234)(void *, const void *, uint64_t);
  void (*v235)(void *, const void *, uint64_t);
  void (*v236)(char *, char *, uint64_t);
  void (*v237)(uint64_t, uint64_t, uint64_t);
  uint64_t v238;

  v4 = type metadata accessor for UUID(0);
  v237 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40);
  v237(a1, a2, v4);
  v5 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  v228 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v228 + 40);
  v10(v7, v8, v9);
  v235 = (void (*)(void *, const void *, uint64_t))v10;
  v10(a1 + v5[6], a2 + v5[6], v9);
  v11 = v5[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_100005D40(&qword_1001BF090);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40);
  v16(v12, v13, v14);
  v234 = (void (*)(void *, const void *, uint64_t))v16;
  v16(a1 + v5[8], a2 + v5[8], v14);
  v17 = v5[9];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  v22 = v18[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  v23 = v5[10];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  LODWORD(v16) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v23, 1, v14);
  v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v14);
  if ((_DWORD)v16)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v24, v25, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v24, v14);
LABEL_6:
    v27 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v234(v24, v25, v14);
LABEL_7:
  v28 = v5[11];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v28, 1, v14);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v14);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v29, v30, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v29, v14);
LABEL_12:
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  v234(v29, v30, v14);
LABEL_13:
  v34 = v5[12];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v233 = v4;
  v237(a1 + v34, a2 + v34, v4);
  v37 = (int *)type metadata accessor for ConditionViewModel(0);
  v38 = v37[5];
  v39 = v35 + v38;
  v40 = v36 + v38;
  v41 = type metadata accessor for WeatherCondition(0);
  v230 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 40);
  v231 = v41;
  v230(v39, v40);
  v42 = v37[6];
  v43 = (_QWORD *)(v35 + v42);
  v44 = (uint64_t *)(v36 + v42);
  v46 = *v44;
  v45 = v44[1];
  v47 = v43[1];
  *v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease(v47);
  v48 = v37[7];
  v49 = (_QWORD *)(v35 + v48);
  v50 = (uint64_t *)(v36 + v48);
  v52 = *v50;
  v51 = v50[1];
  v53 = v49[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease(v53);
  *(_BYTE *)(v35 + v37[8]) = *(_BYTE *)(v36 + v37[8]);
  *(_BYTE *)(v35 + v37[9]) = *(_BYTE *)(v36 + v37[9]);
  *(_BYTE *)(v35 + v37[10]) = *(_BYTE *)(v36 + v37[10]);
  *(_QWORD *)(a1 + v5[13]) = *(_QWORD *)(a2 + v5[13]);
  v54 = v5[14];
  v55 = a1 + v54;
  v56 = a2 + v54;
  v57 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 40))(v55, v56, v57);
  v58 = v5[15];
  v59 = (void *)(a1 + v58);
  v60 = (const void *)(a2 + v58);
  LODWORD(v40) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v58, 1, v9);
  v61 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v60, 1, v9);
  if ((_DWORD)v40)
  {
    if (!v61)
    {
      (*(void (**)(void *, const void *, uint64_t))(v228 + 32))(v59, v60, v9);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v61)
  {
    (*(void (**)(void *, uint64_t))(v228 + 8))(v59, v9);
LABEL_18:
    v62 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_19;
  }
  v235(v59, v60, v9);
LABEL_19:
  v63 = v5[16];
  v64 = (void *)(a1 + v63);
  v65 = (const void *)(a2 + v63);
  v66 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v63, 1, v9);
  v67 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v65, 1, v9);
  v232 = v37;
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(void *, const void *, uint64_t))(v228 + 32))(v64, v65, v9);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v67)
  {
    (*(void (**)(void *, uint64_t))(v228 + 8))(v64, v9);
LABEL_24:
    v68 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_25;
  }
  v235(v64, v65, v9);
LABEL_25:
  v69 = v5[17];
  v70 = a1 + v69;
  v71 = a2 + v69;
  v72 = type metadata accessor for UVIndex(0);
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 40);
  v73(v70, v71, v72);
  v74 = v5[18];
  v75 = a1 + v74;
  v76 = a2 + v74;
  v77 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 40))(v75, v76, v77);
  *(_QWORD *)(a1 + v5[19]) = *(_QWORD *)(a2 + v5[19]);
  v78 = v5[20];
  v79 = a1 + v78;
  v80 = a2 + v78;
  v81 = *(_QWORD *)(a1 + v78 + 8);
  v227 = v73;
  v229 = v72;
  if (v81)
  {
    v82 = *(_QWORD *)(v80 + 8);
    if (v82)
    {
      *(_QWORD *)v79 = *(_QWORD *)v80;
      *(_QWORD *)(v79 + 8) = v82;
      swift_bridgeObjectRelease(v81);
      v83 = *(_BYTE *)(v80 + 32);
      v84 = *(_QWORD *)(v79 + 16);
      v85 = *(_QWORD *)(v79 + 24);
      v86 = *(_BYTE *)(v79 + 32);
      *(_OWORD *)(v79 + 16) = *(_OWORD *)(v80 + 16);
      *(_BYTE *)(v79 + 32) = v83;
      sub_100007458(v84, v85, v86);
      goto LABEL_30;
    }
    sub_100008EC4(v79);
  }
  v87 = *(_OWORD *)(v80 + 16);
  *(_OWORD *)v79 = *(_OWORD *)v80;
  *(_OWORD *)(v79 + 16) = v87;
  *(_BYTE *)(v79 + 32) = *(_BYTE *)(v80 + 32);
LABEL_30:
  v88 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v89 = v88[5];
  v90 = a1 + v89;
  v91 = a2 + v89;
  v237(a1 + v89, a2 + v89, v233);
  v92 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v235((void *)(v90 + v92[5]), (const void *)(v91 + v92[5]), v9);
  v234((void *)(v90 + v92[6]), (const void *)(v91 + v92[6]), v14);
  v234((void *)(v90 + v92[7]), (const void *)(v91 + v92[7]), v14);
  v93 = v92[8];
  v94 = v90 + v93;
  v95 = v91 + v93;
  v237(v90 + v93, v91 + v93, v233);
  ((void (*)(uint64_t, uint64_t, uint64_t))v230)(v94 + v232[5], v95 + v232[5], v231);
  v96 = v232[6];
  v97 = (_QWORD *)(v94 + v96);
  v98 = (uint64_t *)(v95 + v96);
  v100 = *v98;
  v99 = v98[1];
  v101 = v97[1];
  *v97 = v100;
  v97[1] = v99;
  swift_bridgeObjectRelease(v101);
  v102 = v232[7];
  v103 = (_QWORD *)(v94 + v102);
  v104 = (uint64_t *)(v95 + v102);
  v106 = *v104;
  v105 = v104[1];
  v107 = v103[1];
  *v103 = v106;
  v103[1] = v105;
  swift_bridgeObjectRelease(v107);
  *(_BYTE *)(v94 + v232[8]) = *(_BYTE *)(v95 + v232[8]);
  *(_BYTE *)(v94 + v232[9]) = *(_BYTE *)(v95 + v232[9]);
  *(_BYTE *)(v94 + v232[10]) = *(_BYTE *)(v95 + v232[10]);
  v108 = v92[9];
  v109 = v90 + v108;
  v110 = v91 + v108;
  v111 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 40))(v109, v110, v111);
  *(_QWORD *)(v90 + v92[10]) = *(_QWORD *)(v91 + v92[10]);
  v112 = v92[11];
  v113 = (_QWORD *)(v90 + v112);
  v114 = (uint64_t *)(v91 + v112);
  v116 = *v114;
  v115 = v114[1];
  v117 = v113[1];
  *v113 = v116;
  v113[1] = v115;
  swift_bridgeObjectRelease(v117);
  v118 = v92[12];
  v119 = (_QWORD *)(v90 + v118);
  v120 = (uint64_t *)(v91 + v118);
  v122 = *v120;
  v121 = v120[1];
  v123 = v119[1];
  *v119 = v122;
  v119[1] = v121;
  swift_bridgeObjectRelease(v123);
  v124 = v92[13];
  v125 = (_QWORD *)(v90 + v124);
  v126 = (uint64_t *)(v91 + v124);
  v128 = *v126;
  v127 = v126[1];
  v129 = v125[1];
  *v125 = v128;
  v125[1] = v127;
  swift_bridgeObjectRelease(v129);
  v130 = v92[14];
  v131 = (_QWORD *)(v90 + v130);
  v132 = (uint64_t *)(v91 + v130);
  v134 = *v132;
  v133 = v132[1];
  v135 = v131[1];
  *v131 = v134;
  v131[1] = v133;
  swift_bridgeObjectRelease(v135);
  v136 = v92[15];
  v137 = v90 + v136;
  v138 = v91 + v136;
  v139 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 40))(v137, v138, v139);
  v140 = v92[16];
  v141 = (void *)(v90 + v140);
  v142 = (const void *)(v91 + v140);
  v143 = type metadata accessor for SunEvents(0);
  v144 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v141, 1, v143);
  v145 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v142, 1, v143);
  if (v144)
  {
    if (!v145)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v143 - 8) + 32))(v141, v142, v143);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v141, 0, 1, v143);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v146 = *(_QWORD *)(v143 - 8);
  if (v145)
  {
    (*(void (**)(void *, uint64_t))(v146 + 8))(v141, v143);
LABEL_35:
    v147 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(void *, const void *, uint64_t))(v146 + 40))(v141, v142, v143);
LABEL_36:
  v148 = v92[17];
  v149 = (void *)(v90 + v148);
  v150 = (const void *)(v91 + v148);
  v151 = type metadata accessor for MoonEvents(0);
  v152 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v149, 1, v151);
  v153 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, v151);
  if (v152)
  {
    if (!v153)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v151 - 8) + 32))(v149, v150, v151);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v149, 0, 1, v151);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v154 = *(_QWORD *)(v151 - 8);
  if (v153)
  {
    (*(void (**)(void *, uint64_t))(v154 + 8))(v149, v151);
LABEL_41:
    v155 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v154 + 40))(v149, v150, v151);
LABEL_42:
  v227(v90 + v92[18], v91 + v92[18], v229);
  *(_QWORD *)(v90 + v92[19]) = *(_QWORD *)(v91 + v92[19]);
  v156 = v88[6];
  v157 = (_QWORD *)(a1 + v156);
  v158 = (_QWORD *)(a2 + v156);
  v159 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v160 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157, 1, (uint64_t)v159);
  v161 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, (uint64_t)v159);
  if (!v160)
  {
    if (v161)
    {
      sub_1000E1258((uint64_t)v157);
      goto LABEL_48;
    }
    v172 = v158[1];
    v173 = v157[1];
    *v157 = *v158;
    v157[1] = v172;
    swift_bridgeObjectRelease(v173);
    v174 = v159[5];
    v175 = (char *)v157 + v174;
    v176 = (char *)v158 + v174;
    v177 = type metadata accessor for AttributedString(0);
    v238 = *(_QWORD *)(v177 - 8);
    v236 = *(void (**)(char *, char *, uint64_t))(v238 + 40);
    v236(v175, v176, v177);
    v178 = v159[6];
    v179 = (char *)v157 + v178;
    v180 = (char *)v158 + v178;
    v181 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157 + v178, 1, v177);
    v182 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v180, 1, v177);
    if (v181)
    {
      if (!v182)
      {
        (*(void (**)(char *, char *, uint64_t))(v238 + 32))(v179, v180, v177);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v179, 0, 1, v177);
LABEL_63:
        v184 = v159[7];
        v185 = (_QWORD *)((char *)v157 + v184);
        v186 = (_QWORD *)((char *)v158 + v184);
        v188 = *v186;
        v187 = v186[1];
        v189 = v185[1];
        *v185 = v188;
        v185[1] = v187;
        swift_bridgeObjectRelease(v189);
        goto LABEL_64;
      }
    }
    else
    {
      if (!v182)
      {
        v236(v179, v180, v177);
        goto LABEL_63;
      }
      (*(void (**)(char *, uint64_t))(v238 + 8))(v179, v177);
    }
    v183 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
    goto LABEL_63;
  }
  if (v161)
  {
LABEL_48:
    v171 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
    goto LABEL_64;
  }
  *(_OWORD *)v157 = *(_OWORD *)v158;
  v162 = v159[5];
  v163 = (char *)v157 + v162;
  v164 = (char *)v158 + v162;
  v165 = type metadata accessor for AttributedString(0);
  v166 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v165 - 8) + 32);
  v166(v163, v164, v165);
  v167 = v159[6];
  v168 = (char *)v157 + v167;
  v169 = (char *)v158 + v167;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158 + v167, 1, v165))
  {
    v170 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
  }
  else
  {
    v166(v168, v169, v165);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v168, 0, 1, v165);
  }
  *(_OWORD *)((char *)v157 + v159[7]) = *(_OWORD *)((char *)v158 + v159[7]);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v157, 0, 1, (uint64_t)v159);
LABEL_64:
  v190 = v88[7];
  v191 = a1 + v190;
  v192 = a2 + v190;
  v193 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v193 - 8) + 40))(v191, v192, v193);
  v194 = v88[8];
  v195 = (_QWORD *)(a1 + v194);
  v196 = (uint64_t *)(a2 + v194);
  v198 = *v196;
  v197 = v196[1];
  v199 = v195[1];
  *v195 = v198;
  v195[1] = v197;
  swift_bridgeObjectRelease(v199);
  *(_BYTE *)(a1 + v88[9]) = *(_BYTE *)(a2 + v88[9]);
  *(_BYTE *)(a1 + v88[10]) = *(_BYTE *)(a2 + v88[10]);
  v200 = v88[11];
  v201 = *(_QWORD *)(a1 + v200);
  *(_QWORD *)(a1 + v200) = *(_QWORD *)(a2 + v200);
  swift_release(v201);
  v202 = v88[12];
  v203 = (_QWORD *)(a1 + v202);
  v204 = (uint64_t *)(a2 + v202);
  v206 = *v204;
  v205 = v204[1];
  v207 = v203[1];
  *v203 = v206;
  v203[1] = v205;
  swift_bridgeObjectRelease(v207);
  v208 = v88[13];
  v209 = *(_QWORD *)(a1 + v208);
  *(_QWORD *)(a1 + v208) = *(_QWORD *)(a2 + v208);
  swift_release(v209);
  v210 = v88[14];
  v211 = *(_QWORD *)(a1 + v210);
  *(_QWORD *)(a1 + v210) = *(_QWORD *)(a2 + v210);
  swift_release(v211);
  v212 = v88[15];
  v213 = *(_QWORD *)(a1 + v212);
  *(_QWORD *)(a1 + v212) = *(_QWORD *)(a2 + v212);
  swift_release(v213);
  v214 = v88[16];
  v215 = *(_QWORD *)(a1 + v214);
  *(_QWORD *)(a1 + v214) = *(_QWORD *)(a2 + v214);
  swift_release(v215);
  *(_BYTE *)(a1 + v88[17]) = *(_BYTE *)(a2 + v88[17]);
  v216 = v88[18];
  v217 = *(_QWORD *)(a1 + v216);
  *(_QWORD *)(a1 + v216) = *(_QWORD *)(a2 + v216);
  swift_release(v217);
  v218 = v88[19];
  v219 = *(_QWORD *)(a1 + v218);
  *(_QWORD *)(a1 + v218) = *(_QWORD *)(a2 + v218);
  swift_release(v219);
  *(_QWORD *)(a1 + v88[20]) = *(_QWORD *)(a2 + v88[20]);
  *(_BYTE *)(a1 + v88[21]) = *(_BYTE *)(a2 + v88[21]);
  *(_BYTE *)(a1 + v88[22]) = *(_BYTE *)(a2 + v88[22]);
  *(_BYTE *)(a1 + v88[23]) = *(_BYTE *)(a2 + v88[23]);
  *(_BYTE *)(a1 + v88[24]) = *(_BYTE *)(a2 + v88[24]);
  v220 = v88[25];
  v221 = (_QWORD *)(a1 + v220);
  v222 = (uint64_t *)(a2 + v220);
  v224 = *v222;
  v223 = v222[1];
  v225 = v221[1];
  *v221 = v224;
  v221[1] = v223;
  swift_bridgeObjectRelease(v225);
  *(_BYTE *)(a1 + v88[26]) = *(_BYTE *)(a2 + v88[26]);
  *(_QWORD *)(a1 + v88[27]) = *(_QWORD *)(a2 + v88[27]);
  *(_QWORD *)(a1 + v88[28]) = *(_QWORD *)(a2 + v88[28]);
  return a1;
}

uint64_t sub_1000E1FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E1FD8);
}

uint64_t sub_1000E1FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100016B00();
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, v4);
}

uint64_t sub_1000E2008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E2014);
}

uint64_t sub_1000E2014(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100016B00();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DescriptionView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C3868;
  if (!qword_1001C3868)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DescriptionView);
  return result;
}

uint64_t sub_1000E2080(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019FFA8, 1);
}

void sub_1000E2090(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD v90[2];

  v86 = a1;
  v87 = sub_100005D40(&qword_1001C38E0);
  __chkstk_darwin(v87);
  v3 = (uint64_t *)((char *)&v79 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v84 = sub_100005D40(&qword_1001C38E8);
  __chkstk_darwin(v84);
  v83 = (uint64_t)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001C38F0);
  __chkstk_darwin(v5);
  v85 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005D40(&qword_1001C38F8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005D40(&qword_1001C3900);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (uint64_t *)((char *)&v79 - v15);
  v17 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v18 = v1;
  v19 = v17;
  v20 = *(unsigned __int8 *)(v1 + v17[26]);
  v88 = v5;
  v89 = v3;
  if (v20 == 1)
  {
    v82 = &v79;
    __chkstk_darwin(v17);
    *(&v79 - 2) = (uint64_t)v21;
    v80 = v21;
    v22 = sub_100005D40(&qword_1001C3920);
    v81 = v8;
    v23 = v22;
    v24 = sub_100005D40(&qword_1001C2990);
    v25 = sub_1000E3048();
    v26 = sub_1000B1734();
    Label.init(title:icon:)(sub_1000E3290, &v79 - 4, sub_1000E26C8, 0, v23, v24, v25, v26);
    v27 = *(uint64_t *)((char *)v80 + v19[13]);
    KeyPath = swift_getKeyPath(&unk_10017FD08);
    v29 = v81;
    (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v14, v10, v7);
    v30 = (uint64_t *)&v14[*(int *)(v11 + 36)];
    *v30 = KeyPath;
    v30[1] = v27;
    v31 = *(void (**)(char *, uint64_t))(v29 + 8);
    swift_retain(v27);
    v31(v10, v7);
    sub_1000168AC((uint64_t)v14, (uint64_t)v16, &qword_1001C3900);
    v32 = v83;
    sub_1000168D8((uint64_t)v16, v83, &qword_1001C3900);
    swift_storeEnumTagMultiPayload(v32, v84, 0);
    v33 = sub_1000E2F8C();
    v34 = (uint64_t)v85;
    _ConditionalContent<>.init(storage:)(v32, v11, v11, v33, v33);
    v35 = v89;
    sub_1000168D8(v34, (uint64_t)v89, &qword_1001C38F0);
    swift_storeEnumTagMultiPayload(v35, v87, 0);
    v36 = sub_1000E2F28();
    _ConditionalContent<>.init(storage:)(v35, v88, &type metadata for Text, v36, &protocol witness table for Text);
    sub_10002F014(v34, &qword_1001C38F0);
    v37 = (uint64_t)v16;
LABEL_5:
    sub_10002F014(v37, &qword_1001C3900);
    return;
  }
  v81 = v11;
  v82 = v16;
  if (*(_QWORD *)(v1 + v17[25] + 8))
  {
    v80 = &v79;
    v38 = __chkstk_darwin(v17);
    *(&v79 - 2) = v39;
    __chkstk_darwin(v38);
    *(&v79 - 2) = v41;
    *(&v79 - 1) = v40;
    v43 = v42;
    v79 = sub_100005D40(&qword_1001C3920);
    v44 = v8;
    v45 = sub_100005D40(&qword_1001C2990);
    v46 = sub_1000E3048();
    v47 = sub_1000B1734();
    Label.init(title:icon:)(sub_1000E3028, &v79 - 4, sub_1000E3040, &v79 - 4, v79, v45, v46, v47);
    v48 = *(_QWORD *)(v43 + v19[13]);
    v49 = swift_getKeyPath(&unk_10017FD08);
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v14, v10, v7);
    v50 = v81;
    v51 = (uint64_t *)&v14[*(int *)(v81 + 36)];
    *v51 = v49;
    v51[1] = v48;
    v52 = *(void (**)(char *, uint64_t))(v44 + 8);
    swift_retain(v48);
    v52(v10, v7);
    v53 = (uint64_t)v82;
    sub_1000168AC((uint64_t)v14, (uint64_t)v82, &qword_1001C3900);
    v54 = v83;
    sub_1000168D8(v53, v83, &qword_1001C3900);
    swift_storeEnumTagMultiPayload(v54, v84, 1);
    v55 = sub_1000E2F8C();
    v56 = (uint64_t)v85;
    _ConditionalContent<>.init(storage:)(v54, v50, v50, v55, v55);
    v57 = v89;
    sub_1000168D8(v56, (uint64_t)v89, &qword_1001C38F0);
    swift_storeEnumTagMultiPayload(v57, v87, 0);
    v58 = sub_1000E2F28();
    _ConditionalContent<>.init(storage:)(v57, v88, &type metadata for Text, v58, &protocol witness table for Text);
    sub_10002F014(v56, &qword_1001C38F0);
    v37 = v53;
    goto LABEL_5;
  }
  v59 = (_QWORD *)(v1 + v17[8]);
  v60 = v59[1];
  v90[0] = *v59;
  v90[1] = v60;
  v61 = v18;
  v62 = sub_10001692C();
  swift_bridgeObjectRetain(v60);
  v63 = Text.init<A>(_:)(v90, &type metadata for String, v62);
  v65 = v64;
  v67 = v66;
  v69 = v68 & 1;
  v70 = Text.font(_:)(*(_QWORD *)(v61 + v19[13]), v63, v64, v69, v66);
  v72 = v71;
  v74 = v73;
  v76 = v75;
  sub_100016868(v63, v65, v69);
  swift_bridgeObjectRelease(v67);
  v77 = v89;
  *v89 = v70;
  v77[1] = v72;
  *((_BYTE *)v77 + 16) = v74 & 1;
  v77[3] = v76;
  swift_storeEnumTagMultiPayload(v77, v87, 1);
  v78 = sub_1000E2F28();
  _ConditionalContent<>.init(storage:)(v77, v88, &type metadata for Text, v78, &protocol witness table for Text);
}

uint64_t sub_1000E26C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v13;

  v2 = sub_100005D40(&qword_1001C24D0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Image.Scale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Image.init(systemName:)(0xD00000000000001DLL, 0x8000000100187A30);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Image.Scale.small(_:), v5);
  KeyPath = swift_getKeyPath(&unk_10017FD38);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v4 + *(int *)(v2 + 28), v8, v5);
  *v4 = KeyPath;
  v11 = sub_100005D40(&qword_1001C2990);
  sub_1000168D8((uint64_t)v4, (uint64_t)a1 + *(int *)(v11 + 36), &qword_1001C24D0);
  *a1 = v9;
  swift_retain(v9);
  sub_10002F014((uint64_t)v4, &qword_1001C24D0);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v9);
}

uint64_t sub_1000E2838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[2];

  v3 = (_QWORD *)(a1 + *(int *)(sub_100016B00() + 32));
  v4 = v3[1];
  v14[0] = *v3;
  v14[1] = v4;
  v5 = sub_10001692C();
  swift_bridgeObjectRetain(v4);
  v6 = Text.init<A>(_:)(v14, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  result = swift_getKeyPath(&unk_10017FD68);
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v10 & 1;
  *(_QWORD *)(a2 + 24) = v12;
  *(_QWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 40) = 2;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_1000E28E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v17;

  v6 = sub_100005D40(&qword_1001C24D0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for Image.Scale(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a2);
  v13 = Image.init(systemName:)(a1, a2);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for Image.Scale.small(_:), v9);
  KeyPath = swift_getKeyPath(&unk_10017FD38);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v8 + *(int *)(v6 + 28), v12, v9);
  *v8 = KeyPath;
  v15 = sub_100005D40(&qword_1001C2990);
  sub_1000168D8((uint64_t)v8, (uint64_t)a3 + *(int *)(v15 + 36), &qword_1001C24D0);
  *a3 = v13;
  swift_retain(v13);
  sub_10002F014((uint64_t)v8, &qword_1001C24D0);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v13);
}

uint64_t sub_1000E2A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  __n128 v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = v0;
  v2 = type metadata accessor for AccessibilityChildBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_10002325C();
  v6 = v5 - v4;
  v7 = sub_100005D40(&qword_1001C38A0);
  __chkstk_darwin(v7);
  sub_10002325C();
  v10 = v9 - v8;
  v11 = sub_100005D40(&qword_1001C38A8);
  v33 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10002325C();
  v14 = v13 - v12;
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v15);
  *(_QWORD *)(v10 + 8) = 0;
  *(_BYTE *)(v10 + 16) = 1;
  v16 = sub_100005D40(&qword_1001C38B0);
  sub_1000E2C68(v1, v10 + *(int *)(v16 + 44));
  static AccessibilityChildBehavior.ignore.getter(v17);
  sub_10004AFE0(&qword_1001C38B8, &qword_1001C38A0, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v19 = v18;
  View.accessibilityElement(children:)(v6, v7, v18);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  sub_10002F014(v10, &qword_1001C38A0);
  v20 = (uint64_t *)(v1 + *(int *)(sub_100016B00() + 32));
  v21 = v20[1];
  v34 = *v20;
  v35 = v21;
  v22 = sub_10001692C();
  swift_bridgeObjectRetain(v21);
  v23 = Text.init<A>(_:)(&v34, &type metadata for String, v22);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v34 = v7;
  v35 = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v34, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibility(label:)(v23, v25, v29, v27, v11, OpaqueTypeConformance2);
  sub_100016868(v23, v25, v29);
  v31 = swift_bridgeObjectRelease(v27);
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v33 + 8))(v14, v11, v31);
}

void sub_1000E2C68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a2;
  v30 = type metadata accessor for Font.Leading(0);
  v28 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001C38C0);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D40(&qword_1001C38C8);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100005D40(&qword_1001C38D0);
  v11 = __chkstk_darwin(v29);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v28 - v14;
  sub_1000E2090((uint64_t)v7);
  v17 = static Color.white.getter(v16);
  KeyPath = swift_getKeyPath(&unk_10017FCD8);
  sub_1000168D8((uint64_t)v7, (uint64_t)v10, &qword_1001C38C0);
  v19 = (uint64_t *)&v10[*(int *)(v8 + 36)];
  *v19 = KeyPath;
  v19[1] = v17;
  sub_10002F014((uint64_t)v7, &qword_1001C38C0);
  v20 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for CurrentObservationViewAttributes(0) + 60));
  v21 = v28;
  v22 = v30;
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v4, enum case for Font.Leading.tight(_:), v30);
  v23 = Font.leading(_:)(v4, v20);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v22);
  v24 = swift_getKeyPath(&unk_10017FD08);
  sub_1000168D8((uint64_t)v10, (uint64_t)v13, &qword_1001C38C8);
  v25 = (uint64_t *)&v13[*(int *)(v29 + 36)];
  *v25 = v24;
  v25[1] = v23;
  sub_10002F014((uint64_t)v10, &qword_1001C38C8);
  sub_1000168AC((uint64_t)v13, (uint64_t)v15, &qword_1001C38D0);
  sub_1000168D8((uint64_t)v15, (uint64_t)v13, &qword_1001C38D0);
  v26 = v31;
  sub_1000168D8((uint64_t)v13, v31, &qword_1001C38D0);
  v27 = v26 + *(int *)(sub_100005D40(&qword_1001C38D8) + 48);
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = 1;
  sub_10002F014((uint64_t)v15, &qword_1001C38D0);
  sub_10002F014((uint64_t)v13, &qword_1001C38D0);
}

unint64_t sub_1000E2F28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C3908;
  if (!qword_1001C3908)
  {
    v1 = sub_100005DC4(&qword_1001C38F0);
    sub_1000E2F8C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C3908);
  }
  return result;
}

unint64_t sub_1000E2F8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C3910;
  if (!qword_1001C3910)
  {
    v1 = sub_100005DC4(&qword_1001C3900);
    sub_10004AFE0(&qword_1001C3918, &qword_1001C38F8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    sub_10004AFE0(&qword_1001BF3F0, &qword_1001BF3F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C3910);
  }
  return result;
}

uint64_t sub_1000E3028@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000E2838(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000E3040@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000E28E0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1000E3048()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C3928;
  if (!qword_1001C3928)
  {
    v1 = sub_100005DC4(&qword_1001C3920);
    sub_10004AFE0(&qword_1001C2688, &qword_1001C2690, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C3928);
  }
  return result;
}

void sub_1000E30CC(uint64_t a1@<X8>)
{
  char v2;

  *(_QWORD *)a1 = EnvironmentValues.lineLimit.getter();
  *(_BYTE *)(a1 + 8) = v2 & 1;
  sub_100006338();
}

void sub_1000E30F8(uint64_t a1)
{
  EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  sub_100006338();
}

void sub_1000E3120()
{
  EnvironmentValues.imageScale.getter();
  sub_100006338();
}

void sub_1000E313C()
{
  EnvironmentValues.imageScale.getter();
  sub_100006338();
}

uint64_t sub_1000E3158(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for Image.Scale(0);
  __chkstk_darwin(v2);
  sub_10002325C();
  v5 = v4 - v3;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v4 - v3, a1);
  return EnvironmentValues.imageScale.setter(v5);
}

unint64_t sub_1000E31DC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1001C3930;
  if (!qword_1001C3930)
  {
    v1 = sub_100005DC4(&qword_1001C3938);
    v2 = sub_100005DC4(&qword_1001C38A0);
    sub_10004AFE0(&qword_1001C38B8, &qword_1001C38A0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10009634C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C3930);
  }
  return result;
}

void sub_1000E3294(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int EnumCaseMultiPayload;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v144 = a1;
  v123 = type metadata accessor for InstantWeatherViewModel(0);
  sub_100029068();
  __chkstk_darwin(v2);
  sub_1000230E0();
  v142 = v3;
  v4 = sub_100093378();
  v143 = type metadata accessor for TemperatureComplicationViewModel(v4);
  v138 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  sub_1000230E0();
  v137 = v5;
  sub_100005D40(&qword_1001BF098);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_100023150();
  v130 = v7;
  sub_100023164();
  __chkstk_darwin(v8);
  sub_1000232B4();
  v125 = v9;
  sub_100023164();
  __chkstk_darwin(v10);
  sub_1000232B4();
  v128 = v11;
  sub_100023164();
  __chkstk_darwin(v12);
  v122 = (char *)&v116 - v13;
  v14 = sub_100005D40(&qword_1001BF090);
  v136 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_100023150();
  v126 = v15;
  sub_100023164();
  __chkstk_darwin(v16);
  sub_1000232B4();
  v129 = v17;
  sub_100023164();
  __chkstk_darwin(v18);
  sub_1000232B4();
  v119 = v19;
  sub_100023164();
  __chkstk_darwin(v20);
  sub_1000232B4();
  v132 = v21;
  sub_100023164();
  __chkstk_darwin(v22);
  sub_1000232B4();
  v127 = v23;
  sub_100023164();
  __chkstk_darwin(v24);
  sub_1000232B4();
  v135 = v25;
  sub_100023164();
  __chkstk_darwin(v26);
  sub_1000232B4();
  v134 = v27;
  sub_100023164();
  __chkstk_darwin(v28);
  sub_1000232B4();
  v133 = v29;
  sub_100023164();
  __chkstk_darwin(v30);
  sub_1000232B4();
  v120 = v31;
  sub_100023164();
  __chkstk_darwin(v32);
  sub_1000232B4();
  v124 = v33;
  sub_100023164();
  __chkstk_darwin(v34);
  sub_1000232B4();
  v118 = v35;
  sub_100023164();
  __chkstk_darwin(v36);
  sub_1000232B4();
  v131 = v37;
  sub_100023164();
  __chkstk_darwin(v38);
  v121 = (uint64_t)&v116 - v39;
  v40 = sub_100093378();
  v41 = type metadata accessor for CurrentObservationViewModel(v40);
  sub_100029068();
  __chkstk_darwin(v42);
  sub_100023150();
  v141 = v43;
  sub_100023164();
  __chkstk_darwin(v44);
  v140 = (uint64_t)&v116 - v45;
  v46 = sub_100093378();
  v47 = type metadata accessor for AggregateWeatherViewModel(v46);
  sub_100029068();
  __chkstk_darwin(v48);
  sub_1000230E0();
  v139 = v49;
  v50 = sub_100093378();
  v51 = type metadata accessor for WeatherDataViewModel(v50);
  sub_100029068();
  v53 = __chkstk_darwin(v52);
  v55 = (char *)&v116 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v57 = (char *)&v116 - v56;
  v58 = type metadata accessor for ForecastEntry.Model(0);
  sub_100029068();
  __chkstk_darwin(v59);
  v61 = (char *)&v116 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v1 + *(int *)(v62 + 28), (uint64_t)v61, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v61, v58) == 1)
  {
    sub_100011868((uint64_t)v61, (uint64_t)v57, type metadata accessor for WeatherDataViewModel);
    sub_10000F7C4((uint64_t)v57, (uint64_t)v55, type metadata accessor for WeatherDataViewModel);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v55, v51);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        sub_100029030((uint64_t)v57, type metadata accessor for WeatherDataViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v144, 1, 2, v143);
        sub_100029030((uint64_t)v55, type metadata accessor for WeatherDataViewModel);
        return;
      }
      v64 = v41;
      sub_100011868((uint64_t)v55, v142, type metadata accessor for InstantWeatherViewModel);
      if (qword_1001BEE98 != -1)
        swift_once(&qword_1001BEE98, sub_100097BD0);
      v65 = type metadata accessor for Logger(0);
      v66 = sub_100025184(v65, (uint64_t)qword_1001D9FF0);
      v67 = Logger.logObject.getter(v66);
      v68 = static os_log_type_t.default.getter(v67);
      v69 = os_log_type_enabled(v67, v68);
      v71 = v126;
      v70 = v127;
      v72 = v125;
      v73 = v119;
      if (v69)
      {
        v61 = (char *)sub_1000290AC();
        *(_WORD *)v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Making Temperature complication view model entry from interpolated instant weather", (uint8_t *)v61, 2u);
        sub_10002534C((uint64_t)v61);
      }

      v74 = v141;
      sub_10000F7C4(v142 + *(int *)(v123 + 24), v141, type metadata accessor for CurrentObservationViewModel);
      sub_1000E3C1C();
      sub_1000E3BF0(v70, v75);
      sub_10008A80C(v74 + *(int *)(v64 + 40), v72);
      sub_1000E3BF0(v73, v70);
      sub_1000E3C00(v72);
      if (v76)
      {
        sub_1000E3BF8(v132, v73);
        sub_1000E3BB0(v72);
      }
      else
      {
        sub_1000A6DA4(v73, *((uint64_t (**)(uint64_t, uint64_t))v61 + 1));
        sub_1000E3BF8(v132, v72);
      }
      v94 = v141 + *(int *)(v64 + 44);
      v95 = v130;
      sub_10008A80C(v94, v130);
      sub_1000E3BF0(v71, v70);
      sub_1000E3C00(v95);
      v96 = v129;
      v117 = v57;
      if (v76)
      {
        sub_1000E3BF8(v129, v71);
        sub_1000E3BB0(v95);
      }
      else
      {
        sub_1000A6DA4(v71, *((uint64_t (**)(uint64_t, uint64_t))v61 + 1));
        sub_1000E3BF8(v96, v95);
      }
      v100 = v133;
      sub_1000E3BF0(v133, v70);
      v101 = v70;
      v102 = v134;
      v103 = v132;
      sub_1000E3BF0(v134, v132);
      v104 = v135;
      sub_1000E3BF0(v135, v96);
      v105 = v137;
      TemperatureComplicationViewModel.init(temperature:maxTemperature:minTemperature:)(v100, v102, v104);
      sub_10001C8E8(v96);
      sub_10001C8E8(v103);
      sub_10001C8E8(v101);
      sub_100029030(v141, type metadata accessor for CurrentObservationViewModel);
      v106 = type metadata accessor for InstantWeatherViewModel;
      v107 = v142;
    }
    else
    {
      sub_100011868((uint64_t)v55, v139, type metadata accessor for AggregateWeatherViewModel);
      v80 = v41;
      if (qword_1001BEE98 != -1)
        swift_once(&qword_1001BEE98, sub_100097BD0);
      v81 = type metadata accessor for Logger(0);
      v82 = sub_100025184(v81, (uint64_t)qword_1001D9FF0);
      v83 = Logger.logObject.getter(v82);
      v84 = static os_log_type_t.default.getter(v83);
      v85 = v84;
      v86 = os_log_type_enabled(v83, v84);
      v87 = v124;
      v88 = (uint64_t)v122;
      v89 = v118;
      if (v86)
      {
        v90 = (uint8_t *)sub_1000290AC();
        *(_WORD *)v90 = 0;
        _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v85, "Making Temperature complication view model entry from aggregate weather", v90, 2u);
        sub_10002534C((uint64_t)v90);
      }

      v91 = v140;
      sub_10000F7C4(v139 + *(int *)(v47 + 24), v140, type metadata accessor for CurrentObservationViewModel);
      sub_1000E3C1C();
      v92 = v121;
      sub_1000E3BF0(v121, v93);
      sub_10008A80C(v91 + *(int *)(v80 + 40), v88);
      sub_1000E3BF0(v89, v92);
      sub_1000E3C00(v88);
      if (v76)
      {
        sub_1000E3BF8(v131, v89);
        sub_1000E3BB0(v88);
      }
      else
      {
        sub_1000A6DA4(v89, *(uint64_t (**)(uint64_t, uint64_t))(v85 + 8));
        sub_1000E3BF8(v131, v88);
      }
      v97 = v140 + *(int *)(v80 + 44);
      v98 = v128;
      sub_10008A80C(v97, v128);
      v99 = v120;
      sub_1000E3BF0(v120, v92);
      sub_1000E3C00(v98);
      v117 = v57;
      if (v76)
      {
        sub_1000E3BF8(v87, v99);
        sub_1000E3BB0(v98);
      }
      else
      {
        sub_1000A6DA4(v99, *(uint64_t (**)(uint64_t, uint64_t))(v85 + 8));
        sub_1000E3BF8(v87, v98);
      }
      v108 = v133;
      sub_1000E3BF0(v133, v92);
      v109 = v92;
      v110 = v134;
      v111 = v131;
      sub_1000E3BF0(v134, v131);
      v112 = v135;
      sub_1000E3BF0(v135, v87);
      v105 = v137;
      TemperatureComplicationViewModel.init(temperature:maxTemperature:minTemperature:)(v108, v110, v112);
      sub_10001C8E8(v87);
      sub_10001C8E8(v111);
      sub_10001C8E8(v109);
      sub_100029030(v140, type metadata accessor for CurrentObservationViewModel);
      v106 = type metadata accessor for AggregateWeatherViewModel;
      v107 = v139;
    }
    sub_100029030(v107, v106);
    sub_100029030((uint64_t)v117, type metadata accessor for WeatherDataViewModel);
    v113 = v144;
    v114 = v105;
    v115 = v143;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 32))(v144, v114, v143);
    v77 = v113;
    v78 = 0;
    v79 = v115;
  }
  else
  {
    v77 = v144;
    if (*v61)
      v78 = 1;
    else
      v78 = 2;
    v79 = v143;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v77, v78, 2, v79);
}

uint64_t sub_1000E3BB0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001BF098);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E3BF0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000E3BF8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000E3C00(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_1000E3C30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v9;

  v1 = v0;
  v2 = type metadata accessor for Precipitation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  v7 = 0;
  if (v6 != enum case for Precipitation.none(_:))
  {
    if (v6 == enum case for Precipitation.hail(_:))
    {
      return 0x61682E64756F6C63;
    }
    else if (v6 == enum case for Precipitation.mixed(_:))
    {
      return 0x616C6C6572626D75;
    }
    else
    {
      v7 = 0x61722E64756F6C63;
      if (v6 != enum case for Precipitation.rain(_:))
      {
        if (v6 == enum case for Precipitation.sleet(_:))
        {
          return 0xD000000000000010;
        }
        else if (v6 == enum case for Precipitation.snow(_:))
        {
          return 0x6B616C66776F6E73;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        }
      }
    }
  }
  return v7;
}

uint64_t static WeatherDataViewModel.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int EnumCaseMultiPayload;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = type metadata accessor for SunriseSunsetViewModel(0);
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_10002325C();
  v9 = v8 - v7;
  v43 = type metadata accessor for InstantWeatherViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v10);
  sub_1000230E0();
  v44 = v11;
  v12 = sub_100093378();
  type metadata accessor for AggregateWeatherViewModel(v12);
  sub_1000230F4();
  __chkstk_darwin(v13);
  sub_10002325C();
  v16 = v15 - v14;
  v17 = type metadata accessor for WeatherDataViewModel(0);
  sub_1000230F4();
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v43 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v43 - v25;
  sub_100005D40(&qword_1001C3940);
  sub_1000230F4();
  __chkstk_darwin(v27);
  sub_100049CE8();
  v29 = v2 + *(int *)(v28 + 48);
  sub_1000E4178(a1, v2);
  sub_1000E4178(a2, v29);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v17);
  if (!EnumCaseMultiPayload)
  {
    sub_1000E4178(v2, (uint64_t)v26);
    if (sub_1000E9B94())
    {
      v34 = type metadata accessor for AggregateWeatherViewModel;
      v35 = (uint64_t)v26;
LABEL_13:
      sub_100029030(v35, v34);
LABEL_15:
      sub_1000E41BC(v2);
LABEL_17:
      v33 = 0;
      return v33 & 1;
    }
    sub_1000E502C(v29, v16, type metadata accessor for AggregateWeatherViewModel);
    static AggregateWeatherViewModel.__derived_struct_equals(_:_:)();
    v33 = v41;
    sub_100029030(v16, type metadata accessor for AggregateWeatherViewModel);
    sub_100029030((uint64_t)v26, type metadata accessor for AggregateWeatherViewModel);
LABEL_19:
    sub_1000E9C04(v39, type metadata accessor for WeatherDataViewModel);
    return v33 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_1000E4178(v2, (uint64_t)v21);
    if (sub_1000E9B94() != 2)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v21, v46);
      goto LABEL_15;
    }
    v36 = v45;
    v37 = v46;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v9, v29, v46);
    v33 = static SunriseSunsetViewModel.== infix(_:_:)(v21, v9);
    v38 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v38(v9, v37);
    v39 = ((uint64_t (*)(char *, uint64_t))v38)(v21, v37);
    goto LABEL_19;
  }
  sub_1000E4178(v2, (uint64_t)v24);
  if (sub_1000E9B94() != 1)
  {
    v34 = type metadata accessor for InstantWeatherViewModel;
    v35 = (uint64_t)v24;
    goto LABEL_13;
  }
  v31 = v44;
  sub_1000E502C(v29, v44, type metadata accessor for InstantWeatherViewModel);
  if ((static UUID.== infix(_:_:)(v24, v31) & 1) == 0
    || (static Location.== infix(_:_:)(&v24[*(int *)(v43 + 20)]) & 1) == 0
    || !sub_10001F940((uint64_t)&v24[*(int *)(v43 + 24)], v31 + *(int *)(v43 + 24)))
  {
    sub_1000E9BF0(v31);
    sub_1000E9BF0((uint64_t)v24);
    sub_1000E9C04(v40, type metadata accessor for WeatherDataViewModel);
    goto LABEL_17;
  }
  sub_1000E9BF0(v31);
  sub_1000E9BF0((uint64_t)v24);
  sub_1000E9C04(v32, type metadata accessor for WeatherDataViewModel);
  v33 = 1;
  return v33 & 1;
}

uint64_t type metadata accessor for WeatherDataViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C3A48;
  if (!qword_1001C3A48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WeatherDataViewModel);
  return result;
}

uint64_t sub_1000E4178(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeatherDataViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E41BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001C3940);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E41FC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 0x7461676572676761 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461676572676761, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746E6174736E69 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E6174736E69, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x53657369726E7573 && a2 == 0xED00007465736E75)
  {
    swift_bridgeObjectRelease(0xED00007465736E75);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x53657369726E7573, 0xED00007465736E75, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1000E4378(char a1)
{
  if (!a1)
    return 0x7461676572676761;
  if (a1 == 1)
    return 0x746E6174736E69;
  return 0x53657369726E7573;
}

uint64_t sub_1000E43E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E4A24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E4408(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E4A24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E4430()
{
  char *v0;

  return sub_1000E4378(*v0);
}

uint64_t sub_1000E4438@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000E41FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000E445C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E4970();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E4484(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E4970();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E44AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E49E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E44D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E49E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E44FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E49AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E4524(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E49AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WeatherDataViewModel.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int EnumCaseMultiPayload;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;

  v53 = sub_100005D40(&qword_1001C3948);
  v39 = *(_QWORD *)(v53 - 8);
  sub_1000230F4();
  __chkstk_darwin(v2);
  sub_1000230E0();
  v51 = v3;
  v4 = sub_100093378();
  v52 = type metadata accessor for SunriseSunsetViewModel(v4);
  v50 = *(_QWORD *)(v52 - 8);
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_1000E9BB4(v6, v38);
  v7 = sub_100005D40(&qword_1001C3950);
  v47 = *(_QWORD *)(v7 - 8);
  v48 = v7;
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_1000230E0();
  v46 = v9;
  v10 = sub_100093378();
  v44 = type metadata accessor for InstantWeatherViewModel(v10);
  sub_1000230F4();
  __chkstk_darwin(v11);
  sub_1000230E0();
  v45 = v12;
  v13 = sub_100005D40(&qword_1001C3958);
  v42 = *(_QWORD *)(v13 - 8);
  v43 = v13;
  sub_1000230F4();
  __chkstk_darwin(v14);
  sub_1000230E0();
  v41 = v15;
  v16 = sub_100093378();
  v40 = type metadata accessor for AggregateWeatherViewModel(v16);
  sub_1000230F4();
  __chkstk_darwin(v17);
  sub_10002325C();
  v20 = v19 - v18;
  v21 = type metadata accessor for WeatherDataViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v22);
  sub_10002325C();
  v25 = v24 - v23;
  v26 = sub_100005D40(&qword_1001C3960);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  sub_10002325C();
  v30 = v29 - v28;
  v32 = a1[3];
  v31 = a1[4];
  sub_100022330(a1, v32);
  v33 = sub_1000E4970();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WeatherDataViewModel.CodingKeys, &type metadata for WeatherDataViewModel.CodingKeys, v33, v32, v31);
  sub_1000E4178(v54, v25);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v25, v21);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1000E502C(v25, v45, type metadata accessor for InstantWeatherViewModel);
      sub_1000E9C0C();
      sub_1000E9BE0((uint64_t)&type metadata for WeatherDataViewModel.InstantCodingKeys, (uint64_t)&v56);
      sub_10002EF14(&qword_1001C3988, type metadata accessor for InstantWeatherViewModel, (uint64_t)&protocol conformance descriptor for InstantWeatherViewModel);
      KeyedEncodingContainer.encode<A>(_:forKey:)(v45, v35, v48, v44);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
      sub_100029030(v45, type metadata accessor for InstantWeatherViewModel);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v26);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v49, v25, v52);
      sub_1000E9BF8();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for WeatherDataViewModel.SunriseSunsetCodingKeys, &v57, v26, &type metadata for WeatherDataViewModel.SunriseSunsetCodingKeys);
      sub_10002EF14(&qword_1001C3978, (uint64_t (*)(uint64_t))&type metadata accessor for SunriseSunsetViewModel, (uint64_t)&protocol conformance descriptor for SunriseSunsetViewModel);
      KeyedEncodingContainer.encode<A>(_:forKey:)(v49, v37, v53, v52);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v51, v53);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v52);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v26);
    }
  }
  else
  {
    sub_1000E9C18(v25, v20);
    v55 = 0;
    sub_1000E4A24();
    sub_1000E9BE0((uint64_t)&type metadata for WeatherDataViewModel.AggregateCodingKeys, (uint64_t)&v55);
    sub_10002EF14(&qword_1001C3998, type metadata accessor for AggregateWeatherViewModel, (uint64_t)&protocol conformance descriptor for AggregateWeatherViewModel);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, v36, v43, v40);
    sub_100028858(v41, *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8));
    sub_100029030(v20, type metadata accessor for AggregateWeatherViewModel);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v26);
  }
  sub_100023114();
}

unint64_t sub_1000E4970()
{
  unint64_t result;

  result = qword_1001C3968;
  if (!qword_1001C3968)
  {
    result = swift_getWitnessTable(&unk_100180278, &type metadata for WeatherDataViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3968);
  }
  return result;
}

unint64_t sub_1000E49AC()
{
  unint64_t result;

  result = qword_1001C3970;
  if (!qword_1001C3970)
  {
    result = swift_getWitnessTable(&unk_100180228, &type metadata for WeatherDataViewModel.SunriseSunsetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3970);
  }
  return result;
}

unint64_t sub_1000E49E8()
{
  unint64_t result;

  result = qword_1001C3980;
  if (!qword_1001C3980)
  {
    result = swift_getWitnessTable(&unk_1001801D8, &type metadata for WeatherDataViewModel.InstantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3980);
  }
  return result;
}

unint64_t sub_1000E4A24()
{
  unint64_t result;

  result = qword_1001C3990;
  if (!qword_1001C3990)
  {
    result = swift_getWitnessTable(&unk_100180188, &type metadata for WeatherDataViewModel.AggregateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3990);
  }
  return result;
}

void WeatherDataViewModel.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  char v85;
  char v86;
  char v87;

  v78 = a2;
  v77 = sub_100005D40(&qword_1001C39A0);
  v74 = *(_QWORD *)(v77 - 8);
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_1000230E0();
  v80 = v5;
  v76 = sub_100005D40(&qword_1001C39A8);
  v73 = *(_QWORD *)(v76 - 8);
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_1000E9BB4(v7, v65);
  v75 = sub_100005D40(&qword_1001C39B0);
  v72 = *(_QWORD *)(v75 - 8);
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_1000230E0();
  v79 = v9;
  v10 = sub_100005D40(&qword_1001C39B8);
  v81 = *(_QWORD *)(v10 - 8);
  v82 = v10;
  sub_1000230F4();
  __chkstk_darwin(v11);
  sub_100049CE8();
  v12 = type metadata accessor for WeatherDataViewModel(0);
  sub_1000230F4();
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v65 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v65 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v65 - v23;
  v25 = a1[3];
  v26 = a1[4];
  v83 = a1;
  sub_100022330(a1, v25);
  v27 = sub_1000E4970();
  v28 = v84;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WeatherDataViewModel.CodingKeys, &type metadata for WeatherDataViewModel.CodingKeys, v27, v25, v26);
  if (v28)
    goto LABEL_2;
  v69 = v19;
  v70 = v16;
  v67 = v22;
  v68 = v24;
  v71 = v12;
  v30 = v82;
  v84 = v2;
  v31 = KeyedDecodingContainer.allKeys.getter(v82);
  v32 = v31;
  v33 = *(_QWORD *)(v31 + 16);
  if (!v33)
  {
    v29 = v83;
LABEL_10:
    v42 = v81;
    v43 = v71;
    v44 = type metadata accessor for DecodingError(0);
    swift_allocError(v44, &protocol witness table for DecodingError, 0, 0);
    v46 = v45;
    sub_100005D40(&qword_1001BF898);
    *v46 = v43;
    v47 = v84;
    v48 = KeyedDecodingContainer.codingPath.getter(v30);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v48, 0xD00000000000002BLL, 0x80000001001861A0, 0);
    v49 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v46, enum case for DecodingError.typeMismatch(_:), v44);
    swift_willThrow(v49);
    sub_1000E9B5C();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v47, v30);
    goto LABEL_11;
  }
  v66 = 0;
  v34 = v30;
  v35 = *(unsigned __int8 *)(v31 + 32);
  sub_1000E9AD4(1, v33, v31, v31 + 32, 0, (2 * v33) | 1);
  v37 = v36;
  v39 = v38;
  swift_bridgeObjectRelease(v32);
  if (v37 != v39 >> 1)
  {
    v29 = v83;
    v30 = v34;
    goto LABEL_10;
  }
  if (v35)
  {
    if (v35 == 1)
    {
      sub_1000E9C0C();
      sub_1000E9B64((uint64_t)&type metadata for WeatherDataViewModel.InstantCodingKeys, (uint64_t)&v86);
      v40 = type metadata accessor for InstantWeatherViewModel(0);
      sub_10002EF14(&qword_1001C39C8, type metadata accessor for InstantWeatherViewModel, (uint64_t)&protocol conformance descriptor for InstantWeatherViewModel);
      sub_1000E9BA0(v40, v41);
      v29 = v83;
      sub_1000E9B4C(v73);
      sub_1000E9B5C();
      sub_100028858(v12, *(uint64_t (**)(uint64_t, uint64_t))(v81 + 8));
      v58 = (uint64_t)v69;
      v59 = (uint64_t)v69;
      v60 = v71;
      v61 = 1;
    }
    else
    {
      sub_1000E9BF8();
      sub_1000E9B64((uint64_t)&type metadata for WeatherDataViewModel.SunriseSunsetCodingKeys, (uint64_t)&v87);
      v55 = type metadata accessor for SunriseSunsetViewModel(0);
      sub_10002EF14(&qword_1001C39C0, (uint64_t (*)(uint64_t))&type metadata accessor for SunriseSunsetViewModel, (uint64_t)&protocol conformance descriptor for SunriseSunsetViewModel);
      sub_1000E9BA0(v55, v56);
      v29 = v83;
      v57 = v81;
      sub_1000E9B4C(v74);
      sub_1000E9B5C();
      sub_100028858(v12, *(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
      v58 = (uint64_t)v70;
      v60 = v71;
      v59 = (uint64_t)v70;
      v61 = 2;
    }
    goto LABEL_16;
  }
  v85 = 0;
  sub_1000E4A24();
  v50 = v66;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for WeatherDataViewModel.AggregateCodingKeys, &v85, v34, &type metadata for WeatherDataViewModel.AggregateCodingKeys);
  if (!v50)
  {
    v53 = type metadata accessor for AggregateWeatherViewModel(0);
    sub_10002EF14(&qword_1001C39D0, type metadata accessor for AggregateWeatherViewModel, (uint64_t)&protocol conformance descriptor for AggregateWeatherViewModel);
    v58 = (uint64_t)v67;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v53, v54, v75, v53);
    v29 = v83;
    sub_1000E9B80();
    sub_1000E9B5C();
    v62 = sub_1000E9BD0();
    sub_100028858(v62, v63);
    v59 = v58;
    v60 = v71;
    v61 = 0;
LABEL_16:
    swift_storeEnumTagMultiPayload(v59, v60, v61);
    v64 = (uint64_t)v68;
    sub_1000E9C18(v58, (uint64_t)v68);
    sub_1000E9C18(v64, v78);
    goto LABEL_11;
  }
  sub_1000E9B5C();
  v51 = sub_1000E9BD0();
  sub_100028858(v51, v52);
LABEL_2:
  v29 = v83;
LABEL_11:
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v29);
  sub_100023114();
}

void sub_1000E5000(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  WeatherDataViewModel.init(from:)(a1, a2);
}

void sub_1000E5014(_QWORD *a1)
{
  WeatherDataViewModel.encode(to:)(a1);
}

void sub_1000E502C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  sub_100006338();
}

uint64_t *initializeBufferWithCopyOfBuffer for WeatherDataViewModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  __int128 v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  int *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  void (*v145)(char *, char *, uint64_t);
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  int *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  _BOOL8 v207;
  int *v209;
  void (*v210)(char *, char *, uint64_t);
  void (*v211)(char *, char *, uint64_t);
  uint64_t v212;
  void (*v213)(char *, char *, uint64_t);
  void (*v214)(char *, char *, uint64_t);
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v37 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v37);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v38 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(a1, a2, v38);
      v39 = a1;
      v40 = a3;
      v41 = 2;
    }
    else
    {
      v217 = a3;
      v218 = a1;
      if (EnumCaseMultiPayload == 1)
      {
        v8 = type metadata accessor for UUID(0);
        v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
        v9(a1, a2, v8);
        v10 = type metadata accessor for InstantWeatherViewModel(0);
        v11 = *(int *)(v10 + 20);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
        v15 = *(int *)(v10 + 24);
        v16 = (char *)a1 + v15;
        v17 = (char *)a2 + v15;
        v213 = (void (*)(char *, char *, uint64_t))v9;
        v215 = v8;
        v9((uint64_t *)((char *)a1 + v15), (uint64_t *)v17, v8);
        v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v19 = v18[5];
        v20 = &v16[v19];
        v21 = &v17[v19];
        v22 = type metadata accessor for Date(0);
        v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
        v23(v20, v21, v22);
        v211 = v23;
        v23(&v16[v18[6]], &v17[v18[6]], v22);
        v24 = v18[7];
        v25 = &v16[v24];
        v26 = &v17[v24];
        v27 = sub_100005D40(&qword_1001BF090);
        v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
        v28(v25, v26, v27);
        v28(&v16[v18[8]], &v17[v18[8]], v27);
        v29 = v18[9];
        v30 = &v16[v29];
        v31 = &v17[v29];
        v32 = *((_QWORD *)v31 + 1);
        *(_QWORD *)v30 = *(_QWORD *)v31;
        *((_QWORD *)v30 + 1) = v32;
        v33 = v18[10];
        v34 = &v16[v33];
        v35 = &v17[v33];
        swift_bridgeObjectRetain(v32);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 1, v27))
        {
          v36 = sub_100005D40(&qword_1001BF098);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          v28(v34, v35, v27);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v27);
        }
        v72 = v18[11];
        v73 = &v16[v72];
        v74 = &v17[v72];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v72], 1, v27))
        {
          v75 = sub_100005D40(&qword_1001BF098);
          memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
        }
        else
        {
          v28(v73, v74, v27);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v73, 0, 1, v27);
        }
        v76 = v18[12];
        v77 = &v16[v76];
        v78 = &v17[v76];
        v213(&v16[v76], &v17[v76], v215);
        v79 = (int *)type metadata accessor for ConditionViewModel(0);
        v80 = v79[5];
        v81 = &v77[v80];
        v82 = &v78[v80];
        v83 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v81, v82, v83);
        v84 = v79[6];
        v85 = &v77[v84];
        v86 = &v78[v84];
        v87 = *((_QWORD *)v86 + 1);
        *(_QWORD *)v85 = *(_QWORD *)v86;
        *((_QWORD *)v85 + 1) = v87;
        v88 = v79[7];
        v89 = &v77[v88];
        v90 = &v78[v88];
        v91 = *((_QWORD *)v90 + 1);
        *(_QWORD *)v89 = *(_QWORD *)v90;
        *((_QWORD *)v89 + 1) = v91;
        v77[v79[8]] = v78[v79[8]];
        v77[v79[9]] = v78[v79[9]];
        v77[v79[10]] = v78[v79[10]];
        *(_QWORD *)&v16[v18[13]] = *(_QWORD *)&v17[v18[13]];
        v92 = v18[14];
        v93 = &v16[v92];
        v94 = &v17[v92];
        v95 = type metadata accessor for CloudAltitudeKind(0);
        v96 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16);
        swift_bridgeObjectRetain(v87);
        swift_bridgeObjectRetain(v91);
        v96(v93, v94, v95);
        v97 = v18[15];
        v98 = &v16[v97];
        v99 = &v17[v97];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v97], 1, v22))
        {
          v100 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
        }
        else
        {
          v211(v98, v99, v22);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v98, 0, 1, v22);
        }
        v101 = v18[16];
        v102 = &v16[v101];
        v103 = &v17[v101];
        a1 = v218;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v101], 1, v22))
        {
          v104 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
        }
        else
        {
          v211(v102, v103, v22);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v102, 0, 1, v22);
        }
        v105 = v18[17];
        v106 = &v16[v105];
        v107 = &v17[v105];
        v108 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 16))(v106, v107, v108);
        v109 = v18[18];
        v110 = &v16[v109];
        v111 = &v17[v109];
        v112 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 16))(v110, v111, v112);
        *(_QWORD *)&v16[v18[19]] = *(_QWORD *)&v17[v18[19]];
        v113 = v18[20];
        v114 = &v16[v113];
        v115 = &v17[v113];
        v116 = *((_QWORD *)v115 + 1);
        if (v116)
        {
          *(_QWORD *)v114 = *(_QWORD *)v115;
          *((_QWORD *)v114 + 1) = v116;
          v117 = *((_QWORD *)v115 + 2);
          v118 = *((_QWORD *)v115 + 3);
          v119 = v115[32];
          swift_bridgeObjectRetain(v116);
          sub_100006E58(v117, v118, v119);
          *((_QWORD *)v114 + 2) = v117;
          *((_QWORD *)v114 + 3) = v118;
          v114[32] = v119;
        }
        else
        {
          v120 = *((_OWORD *)v115 + 1);
          *(_OWORD *)v114 = *(_OWORD *)v115;
          *((_OWORD *)v114 + 1) = v120;
          v114[32] = v115[32];
        }
        v39 = v218;
        v40 = v217;
        v41 = 1;
      }
      else
      {
        v42 = type metadata accessor for UUID(0);
        v43 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
        v43(a1, a2, v42);
        v44 = type metadata accessor for AggregateWeatherViewModel(0);
        v45 = *(int *)(v44 + 20);
        v46 = (char *)a1 + v45;
        v47 = (char *)a2 + v45;
        v48 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
        v209 = (int *)v44;
        v210 = (void (*)(char *, char *, uint64_t))v43;
        v49 = *(int *)(v44 + 24);
        v50 = (char *)a1 + v49;
        v51 = (char *)a2 + v49;
        v212 = v42;
        v43((uint64_t *)((char *)a1 + v49), (uint64_t *)((char *)a2 + v49), v42);
        v52 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v53 = v52[5];
        v54 = &v50[v53];
        v55 = &v51[v53];
        v56 = type metadata accessor for Date(0);
        v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
        v57(v54, v55, v56);
        v214 = v57;
        v216 = v56;
        v57(&v50[v52[6]], &v51[v52[6]], v56);
        v58 = v52[7];
        v59 = &v50[v58];
        v60 = &v51[v58];
        v61 = sub_100005D40(&qword_1001BF090);
        v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
        v62(v59, v60, v61);
        v62(&v50[v52[8]], &v51[v52[8]], v61);
        v63 = v52[9];
        v64 = &v50[v63];
        v65 = &v51[v63];
        v66 = *((_QWORD *)v65 + 1);
        *(_QWORD *)v64 = *(_QWORD *)v65;
        *((_QWORD *)v64 + 1) = v66;
        v67 = v52[10];
        v68 = &v50[v67];
        v69 = &v51[v67];
        swift_bridgeObjectRetain(v66);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v69, 1, v61))
        {
          v71 = sub_100005D40(&qword_1001BF098);
          memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          v62(v68, v69, v61);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v68, 0, 1, v61);
        }
        v121 = v52[11];
        v122 = &v50[v121];
        v123 = &v51[v121];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v51[v121], 1, v61))
        {
          v124 = sub_100005D40(&qword_1001BF098);
          memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
        }
        else
        {
          v62(v122, v123, v61);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v122, 0, 1, v61);
        }
        v125 = v52[12];
        v126 = &v50[v125];
        v127 = &v51[v125];
        v210(&v50[v125], &v51[v125], v212);
        v128 = (int *)type metadata accessor for ConditionViewModel(0);
        v129 = v128[5];
        v130 = &v126[v129];
        v131 = &v127[v129];
        v132 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v132 - 8) + 16))(v130, v131, v132);
        v133 = v128[6];
        v134 = &v126[v133];
        v135 = &v127[v133];
        v136 = *((_QWORD *)v135 + 1);
        *(_QWORD *)v134 = *(_QWORD *)v135;
        *((_QWORD *)v134 + 1) = v136;
        v137 = v128[7];
        v138 = &v126[v137];
        v139 = &v127[v137];
        v140 = *((_QWORD *)v139 + 1);
        *(_QWORD *)v138 = *(_QWORD *)v139;
        *((_QWORD *)v138 + 1) = v140;
        v126[v128[8]] = v127[v128[8]];
        v126[v128[9]] = v127[v128[9]];
        v126[v128[10]] = v127[v128[10]];
        *(_QWORD *)&v50[v52[13]] = *(_QWORD *)&v51[v52[13]];
        v141 = v52[14];
        v142 = &v50[v141];
        v143 = &v51[v141];
        v144 = type metadata accessor for CloudAltitudeKind(0);
        v145 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 16);
        swift_bridgeObjectRetain(v136);
        swift_bridgeObjectRetain(v140);
        v145(v142, v143, v144);
        v146 = v52[15];
        v147 = &v50[v146];
        v148 = &v51[v146];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v51[v146], 1, v216))
        {
          v149 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
        }
        else
        {
          v214(v147, v148, v216);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v147, 0, 1, v216);
        }
        a1 = v218;
        v150 = v52[16];
        v151 = &v50[v150];
        v152 = &v51[v150];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v51[v150], 1, v216))
        {
          v153 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
        }
        else
        {
          v214(v151, v152, v216);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v151, 0, 1, v216);
        }
        v154 = v52[17];
        v155 = &v50[v154];
        v156 = &v51[v154];
        v157 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 16))(v155, v156, v157);
        v158 = v52[18];
        v159 = &v50[v158];
        v160 = &v51[v158];
        v161 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 16))(v159, v160, v161);
        *(_QWORD *)&v50[v52[19]] = *(_QWORD *)&v51[v52[19]];
        v162 = v52[20];
        v163 = &v50[v162];
        v164 = &v51[v162];
        v165 = *((_QWORD *)v164 + 1);
        if (v165)
        {
          *(_QWORD *)v163 = *(_QWORD *)v164;
          *((_QWORD *)v163 + 1) = v165;
          v166 = *((_QWORD *)v164 + 2);
          v167 = *((_QWORD *)v164 + 3);
          v168 = v164[32];
          swift_bridgeObjectRetain(v165);
          sub_100006E58(v166, v167, v168);
          *((_QWORD *)v163 + 2) = v166;
          *((_QWORD *)v163 + 3) = v167;
          v163[32] = v168;
        }
        else
        {
          v169 = *((_OWORD *)v164 + 1);
          *(_OWORD *)v163 = *(_OWORD *)v164;
          *((_OWORD *)v163 + 1) = v169;
          v163[32] = v164[32];
        }
        v170 = v209[7];
        v171 = *(uint64_t *)((char *)a2 + v170);
        *(uint64_t *)((char *)v218 + v170) = v171;
        v172 = v209[8];
        v173 = *(uint64_t *)((char *)a2 + v172);
        *(uint64_t *)((char *)v218 + v172) = v173;
        v174 = v209[9];
        v175 = (char *)v218 + v174;
        v176 = (char *)a2 + v174;
        v177 = (int *)type metadata accessor for AirQualityViewModel(0);
        swift_bridgeObjectRetain(v171);
        swift_bridgeObjectRetain(v173);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v176, 1, (uint64_t)v177))
        {
          v178 = sub_100005D40(&qword_1001BFA30);
          memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
        }
        else
        {
          v210(v175, v176, v212);
          v214(&v175[v177[5]], &v176[v177[5]], v216);
          *(_QWORD *)&v175[v177[6]] = *(_QWORD *)&v176[v177[6]];
          v179 = v177[7];
          v180 = &v175[v179];
          v181 = &v176[v179];
          v182 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v182 - 8) + 16))(v180, v181, v182);
          v183 = v177[8];
          v184 = &v175[v183];
          v185 = &v176[v183];
          v186 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v186 - 8) + 16))(v184, v185, v186);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v175, 0, 1, (uint64_t)v177);
        }
        v187 = v209[10];
        v188 = (char *)v218 + v187;
        v189 = (char *)a2 + v187;
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v189, 1, HourPrecipitationChartViewModel))
        {
          v191 = sub_100005D40(&qword_1001BFA38);
          memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v188, v189, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v188, 0, 1, HourPrecipitationChartViewModel);
        }
        v192 = v209[11];
        v193 = *(uint64_t *)((char *)a2 + v192);
        *(uint64_t *)((char *)v218 + v192) = v193;
        v194 = v209[12];
        v195 = (char *)v218 + v194;
        v196 = (char *)a2 + v194;
        *(_QWORD *)v195 = *(_QWORD *)v196;
        *((_WORD *)v195 + 4) = *((_WORD *)v196 + 4);
        v197 = v209[13];
        v198 = (char *)v218 + v197;
        v199 = (char *)a2 + v197;
        v200 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain(v193);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v199, 1, v200))
        {
          v201 = sub_100005D40(&qword_1001BFA28);
          memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v200 - 8) + 16))(v198, v199, v200);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v198, 0, 1, v200);
        }
        v202 = v209[14];
        v203 = (char *)v218 + v202;
        v204 = (char *)a2 + v202;
        v205 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v204, 1, v205))
        {
          v206 = sub_100005D40(&qword_1001BFA40);
          memcpy(v203, v204, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
        }
        else
        {
          v207 = swift_getEnumCaseMultiPayload(v204, v205) == 1;
          v214(v203, v204, v216);
          swift_storeEnumTagMultiPayload(v203, v205, v207);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v203, 0, 1, v205);
        }
        v40 = v217;
        v39 = v218;
        v41 = 0;
      }
    }
    swift_storeEnumTagMultiPayload(v39, v40, v41);
  }
  return a1;
}

uint64_t destroy for WeatherDataViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 2:
      v45 = type metadata accessor for SunriseSunsetViewModel(0);
      v46 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8);
      v44 = a1;
      return v46(v44, v45);
    case 1:
      v47 = type metadata accessor for UUID(0);
      v48 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8);
      v48(a1, v47);
      v49 = type metadata accessor for InstantWeatherViewModel(0);
      v50 = a1 + *(int *)(v49 + 20);
      v51 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v50, v51);
      v52 = a1 + *(int *)(v49 + 24);
      v48(v52, v47);
      v53 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v54 = v52 + v53[5];
      v55 = type metadata accessor for Date(0);
      v56 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8);
      v56(v54, v55);
      v56(v52 + v53[6], v55);
      v57 = v52 + v53[7];
      v58 = sub_100005D40(&qword_1001BF090);
      v59 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8);
      v59(v57, v58);
      v59(v52 + v53[8], v58);
      swift_bridgeObjectRelease(*(_QWORD *)(v52 + v53[9] + 8));
      v60 = v52 + v53[10];
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v60, 1, v58))
        v59(v60, v58);
      v61 = v52 + v53[11];
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v61, 1, v58))
        v59(v61, v58);
      v62 = v52 + v53[12];
      v48(v62, v47);
      v63 = (int *)type metadata accessor for ConditionViewModel(0);
      v64 = v62 + v63[5];
      v65 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v64, v65);
      swift_bridgeObjectRelease(*(_QWORD *)(v62 + v63[6] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v62 + v63[7] + 8));
      v66 = v52 + v53[14];
      v67 = type metadata accessor for CloudAltitudeKind(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 8))(v66, v67);
      v68 = v52 + v53[15];
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v68, 1, v55))
        v56(v68, v55);
      v69 = v52 + v53[16];
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v69, 1, v55))
        v56(v69, v55);
      v70 = v52 + v53[17];
      v71 = type metadata accessor for UVIndex(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v70, v71);
      v72 = v52 + v53[18];
      v73 = type metadata accessor for Wind(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 8))(v72, v73);
      v74 = v52 + v53[20];
      result = *(_QWORD *)(v74 + 8);
      if (result)
      {
        swift_bridgeObjectRelease(result);
        return sub_100007458(*(_QWORD *)(v74 + 16), *(_QWORD *)(v74 + 24), *(_BYTE *)(v74 + 32));
      }
      break;
    case 0:
      v4 = type metadata accessor for UUID(0);
      v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
      v5(a1, v4);
      v6 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
      v7 = a1 + v6[5];
      v8 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
      v9 = a1 + v6[6];
      v5(v9, v4);
      v10 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v11 = v9 + v10[5];
      v12 = type metadata accessor for Date(0);
      v75 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
      v75(v11, v12);
      v75(v9 + v10[6], v12);
      v13 = v9 + v10[7];
      v14 = sub_100005D40(&qword_1001BF090);
      v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
      v15(v13, v14);
      v15(v9 + v10[8], v14);
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[9] + 8));
      v16 = v9 + v10[10];
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v16, 1, v14))
        v15(v16, v14);
      v17 = v9 + v10[11];
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v17, 1, v14))
        v15(v17, v14);
      v18 = v9 + v10[12];
      v5(v18, v4);
      v19 = (int *)type metadata accessor for ConditionViewModel(0);
      v20 = v18 + v19[5];
      v21 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
      swift_bridgeObjectRelease(*(_QWORD *)(v18 + v19[6] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v18 + v19[7] + 8));
      v22 = v9 + v10[14];
      v23 = type metadata accessor for CloudAltitudeKind(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
      v24 = v9 + v10[15];
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v24, 1, v12))
        v75(v24, v12);
      v25 = v9 + v10[16];
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v25, 1, v12))
        v75(v25, v12);
      v26 = v9 + v10[17];
      v27 = type metadata accessor for UVIndex(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
      v28 = v9 + v10[18];
      v29 = type metadata accessor for Wind(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
      v30 = v9 + v10[20];
      v31 = *(_QWORD *)(v30 + 8);
      if (v31)
      {
        swift_bridgeObjectRelease(v31);
        sub_100007458(*(_QWORD *)(v30 + 16), *(_QWORD *)(v30 + 24), *(_BYTE *)(v30 + 32));
      }
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[7]));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[8]));
      v32 = a1 + v6[9];
      v33 = (int *)type metadata accessor for AirQualityViewModel(0);
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v32, 1, (uint64_t)v33))
      {
        v5(v32, v4);
        v75(v32 + v33[5], v12);
        v34 = v32 + v33[7];
        v35 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
        v36 = v32 + v33[8];
        v37 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
      }
      v38 = a1 + v6[10];
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, HourPrecipitationChartViewModel))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v38, HourPrecipitationChartViewModel);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[11]));
      v40 = a1 + v6[13];
      v41 = type metadata accessor for URL(0);
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v40, 1, v41))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v40, v41);
      v42 = a1 + v6[14];
      v43 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v42, 1, v43);
      if (!(_DWORD)result)
      {
        v44 = v42;
        v45 = v12;
        v46 = (uint64_t (*)(uint64_t, uint64_t))v75;
        return v46(v44, v45);
      }
      break;
  }
  return result;
}

uint64_t initializeWithCopy for WeatherDataViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  void *v96;
  const void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  uint64_t v119;
  void *v120;
  const void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  void *v145;
  const void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  int *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  const void *v188;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  const void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  const void *v203;
  uint64_t v204;
  uint64_t v205;
  _BOOL8 v206;
  int *v208;
  uint64_t v209;
  void (*v210)(uint64_t, uint64_t, uint64_t);
  void (*v211)(void *, const void *, uint64_t);
  uint64_t v212;
  void (*v213)(uint64_t, uint64_t, uint64_t);
  void (*v214)(void *, const void *, uint64_t);
  uint64_t v215;
  uint64_t v216;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v36 = type metadata accessor for SunriseSunsetViewModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(a1, a2, v36);
    v37 = a1;
    v38 = a3;
    v39 = 2;
  }
  else
  {
    v215 = a3;
    v216 = a1;
    if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for UUID(0);
      v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      v9 = type metadata accessor for InstantWeatherViewModel(0);
      v10 = *(int *)(v9 + 20);
      v11 = a1 + v10;
      v12 = a2 + v10;
      v13 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      v14 = *(int *)(v9 + 24);
      v15 = a1 + v14;
      v16 = a2 + v14;
      v213 = v8;
      v8(a1 + v14, v16, v7);
      v17 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v18 = v17[5];
      v19 = v15 + v18;
      v20 = v16 + v18;
      v21 = type metadata accessor for Date(0);
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
      v22(v19, v20, v21);
      v211 = (void (*)(void *, const void *, uint64_t))v22;
      v22(v15 + v17[6], v16 + v17[6], v21);
      v23 = v17[7];
      v24 = v15 + v23;
      v25 = v16 + v23;
      v26 = sub_100005D40(&qword_1001BF090);
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
      v27(v24, v25, v26);
      v27(v15 + v17[8], v16 + v17[8], v26);
      v28 = v17[9];
      v29 = (_QWORD *)(v15 + v28);
      v30 = (_QWORD *)(v16 + v28);
      v31 = v30[1];
      *v29 = *v30;
      v29[1] = v31;
      v32 = v17[10];
      v33 = (void *)(v15 + v32);
      v34 = (const void *)(v16 + v32);
      swift_bridgeObjectRetain(v31);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v34, 1, v26))
      {
        v35 = sub_100005D40(&qword_1001BF098);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v27((uint64_t)v33, (uint64_t)v34, v26);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v33, 0, 1, v26);
      }
      v70 = v17[11];
      v71 = (void *)(v15 + v70);
      v72 = (const void *)(v16 + v70);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v70, 1, v26))
      {
        v73 = sub_100005D40(&qword_1001BF098);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        v27((uint64_t)v71, (uint64_t)v72, v26);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v71, 0, 1, v26);
      }
      v74 = v17[12];
      v75 = v15 + v74;
      v76 = v16 + v74;
      v213(v15 + v74, v16 + v74, v7);
      v77 = (int *)type metadata accessor for ConditionViewModel(0);
      v78 = v77[5];
      v79 = v75 + v78;
      v80 = v76 + v78;
      v81 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v79, v80, v81);
      v82 = v77[6];
      v83 = (_QWORD *)(v75 + v82);
      v84 = (_QWORD *)(v76 + v82);
      v85 = v84[1];
      *v83 = *v84;
      v83[1] = v85;
      v86 = v77[7];
      v87 = (_QWORD *)(v75 + v86);
      v88 = (_QWORD *)(v76 + v86);
      v89 = v88[1];
      *v87 = *v88;
      v87[1] = v89;
      *(_BYTE *)(v75 + v77[8]) = *(_BYTE *)(v76 + v77[8]);
      *(_BYTE *)(v75 + v77[9]) = *(_BYTE *)(v76 + v77[9]);
      *(_BYTE *)(v75 + v77[10]) = *(_BYTE *)(v76 + v77[10]);
      *(_QWORD *)(v15 + v17[13]) = *(_QWORD *)(v16 + v17[13]);
      v90 = v17[14];
      v91 = v15 + v90;
      v92 = v16 + v90;
      v93 = type metadata accessor for CloudAltitudeKind(0);
      v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 16);
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRetain(v89);
      v94(v91, v92, v93);
      v95 = v17[15];
      v96 = (void *)(v15 + v95);
      v97 = (const void *)(v16 + v95);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v95, 1, v21))
      {
        v98 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
      }
      else
      {
        v211(v96, v97, v21);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v96, 0, 1, v21);
      }
      v99 = v17[16];
      v100 = (void *)(v15 + v99);
      v101 = (const void *)(v16 + v99);
      a1 = v216;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v99, 1, v21))
      {
        v102 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
      }
      else
      {
        v211(v100, v101, v21);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v100, 0, 1, v21);
      }
      v103 = v17[17];
      v104 = v15 + v103;
      v105 = v16 + v103;
      v106 = type metadata accessor for UVIndex(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v104, v105, v106);
      v107 = v17[18];
      v108 = v15 + v107;
      v109 = v16 + v107;
      v110 = type metadata accessor for Wind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(v108, v109, v110);
      *(_QWORD *)(v15 + v17[19]) = *(_QWORD *)(v16 + v17[19]);
      v111 = v17[20];
      v112 = v15 + v111;
      v113 = v16 + v111;
      v114 = *(_QWORD *)(v113 + 8);
      if (v114)
      {
        *(_QWORD *)v112 = *(_QWORD *)v113;
        *(_QWORD *)(v112 + 8) = v114;
        v115 = *(_QWORD *)(v113 + 16);
        v116 = *(_QWORD *)(v113 + 24);
        v117 = *(_BYTE *)(v113 + 32);
        swift_bridgeObjectRetain(v114);
        sub_100006E58(v115, v116, v117);
        *(_QWORD *)(v112 + 16) = v115;
        *(_QWORD *)(v112 + 24) = v116;
        *(_BYTE *)(v112 + 32) = v117;
      }
      else
      {
        v118 = *(_OWORD *)(v113 + 16);
        *(_OWORD *)v112 = *(_OWORD *)v113;
        *(_OWORD *)(v112 + 16) = v118;
        *(_BYTE *)(v112 + 32) = *(_BYTE *)(v113 + 32);
      }
      v37 = v216;
      v38 = v215;
      v39 = 1;
    }
    else
    {
      v40 = type metadata accessor for UUID(0);
      v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
      v41(a1, a2, v40);
      v42 = type metadata accessor for AggregateWeatherViewModel(0);
      v43 = *(int *)(v42 + 20);
      v44 = a1 + v43;
      v45 = a2 + v43;
      v46 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
      v208 = (int *)v42;
      v47 = *(int *)(v42 + 24);
      v48 = a1 + v47;
      v49 = a2 + v47;
      v210 = v41;
      v212 = v40;
      v41(a1 + v47, a2 + v47, v40);
      v50 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v51 = v50[5];
      v52 = v48 + v51;
      v53 = v49 + v51;
      v54 = type metadata accessor for Date(0);
      v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16);
      v55(v52, v53, v54);
      v214 = (void (*)(void *, const void *, uint64_t))v55;
      v55(v48 + v50[6], v49 + v50[6], v54);
      v56 = v50[7];
      v57 = v48 + v56;
      v58 = v49 + v56;
      v59 = sub_100005D40(&qword_1001BF090);
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
      v60(v57, v58, v59);
      v60(v48 + v50[8], v49 + v50[8], v59);
      v61 = v50[9];
      v62 = (_QWORD *)(v48 + v61);
      v63 = (_QWORD *)(v49 + v61);
      v64 = v63[1];
      *v62 = *v63;
      v62[1] = v64;
      v65 = v50[10];
      v66 = (void *)(v48 + v65);
      v67 = (const void *)(v49 + v65);
      swift_bridgeObjectRetain(v64);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v59))
      {
        v69 = sub_100005D40(&qword_1001BF098);
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        v60((uint64_t)v66, (uint64_t)v67, v59);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v59);
      }
      v119 = v50[11];
      v120 = (void *)(v48 + v119);
      v121 = (const void *)(v49 + v119);
      v209 = v54;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v49 + v119, 1, v59))
      {
        v122 = sub_100005D40(&qword_1001BF098);
        memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
      }
      else
      {
        v60((uint64_t)v120, (uint64_t)v121, v59);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v120, 0, 1, v59);
      }
      v123 = v50[12];
      v124 = v48 + v123;
      v125 = v49 + v123;
      v210(v48 + v123, v49 + v123, v212);
      v126 = (int *)type metadata accessor for ConditionViewModel(0);
      v127 = v126[5];
      v128 = v124 + v127;
      v129 = v125 + v127;
      v130 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(v128, v129, v130);
      v131 = v126[6];
      v132 = (_QWORD *)(v124 + v131);
      v133 = (_QWORD *)(v125 + v131);
      v134 = v133[1];
      *v132 = *v133;
      v132[1] = v134;
      v135 = v126[7];
      v136 = (_QWORD *)(v124 + v135);
      v137 = (_QWORD *)(v125 + v135);
      v138 = v137[1];
      *v136 = *v137;
      v136[1] = v138;
      *(_BYTE *)(v124 + v126[8]) = *(_BYTE *)(v125 + v126[8]);
      *(_BYTE *)(v124 + v126[9]) = *(_BYTE *)(v125 + v126[9]);
      *(_BYTE *)(v124 + v126[10]) = *(_BYTE *)(v125 + v126[10]);
      *(_QWORD *)(v48 + v50[13]) = *(_QWORD *)(v49 + v50[13]);
      v139 = v50[14];
      v140 = v48 + v139;
      v141 = v49 + v139;
      v142 = type metadata accessor for CloudAltitudeKind(0);
      v143 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v142 - 8) + 16);
      swift_bridgeObjectRetain(v134);
      swift_bridgeObjectRetain(v138);
      v143(v140, v141, v142);
      v144 = v50[15];
      v145 = (void *)(v48 + v144);
      v146 = (const void *)(v49 + v144);
      v147 = v209;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v49 + v144, 1, v209))
      {
        v148 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
      }
      else
      {
        v214(v145, v146, v209);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v145, 0, 1, v209);
      }
      a1 = v216;
      v149 = v50[16];
      v150 = (void *)(v48 + v149);
      v151 = (const void *)(v49 + v149);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v49 + v149, 1, v209))
      {
        v152 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
      }
      else
      {
        v214(v150, v151, v209);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v150, 0, 1, v209);
      }
      v153 = v50[17];
      v154 = v48 + v153;
      v155 = v49 + v153;
      v156 = type metadata accessor for UVIndex(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 16))(v154, v155, v156);
      v157 = v50[18];
      v158 = v48 + v157;
      v159 = v49 + v157;
      v160 = type metadata accessor for Wind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v160 - 8) + 16))(v158, v159, v160);
      *(_QWORD *)(v48 + v50[19]) = *(_QWORD *)(v49 + v50[19]);
      v161 = v50[20];
      v162 = v48 + v161;
      v163 = v49 + v161;
      v164 = *(_QWORD *)(v163 + 8);
      if (v164)
      {
        *(_QWORD *)v162 = *(_QWORD *)v163;
        *(_QWORD *)(v162 + 8) = v164;
        v165 = *(_QWORD *)(v163 + 16);
        v166 = *(_QWORD *)(v163 + 24);
        v167 = *(_BYTE *)(v163 + 32);
        swift_bridgeObjectRetain(v164);
        sub_100006E58(v165, v166, v167);
        *(_QWORD *)(v162 + 16) = v165;
        *(_QWORD *)(v162 + 24) = v166;
        *(_BYTE *)(v162 + 32) = v167;
        v147 = v209;
      }
      else
      {
        v168 = *(_OWORD *)(v163 + 16);
        *(_OWORD *)v162 = *(_OWORD *)v163;
        *(_OWORD *)(v162 + 16) = v168;
        *(_BYTE *)(v162 + 32) = *(_BYTE *)(v163 + 32);
      }
      v169 = v208[7];
      v170 = *(_QWORD *)(a2 + v169);
      *(_QWORD *)(v216 + v169) = v170;
      v171 = v208[8];
      v172 = *(_QWORD *)(a2 + v171);
      *(_QWORD *)(v216 + v171) = v172;
      v173 = v208[9];
      v174 = (char *)(v216 + v173);
      v175 = (char *)(a2 + v173);
      v176 = (int *)type metadata accessor for AirQualityViewModel(0);
      swift_bridgeObjectRetain(v170);
      swift_bridgeObjectRetain(v172);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v175, 1, (uint64_t)v176))
      {
        v177 = sub_100005D40(&qword_1001BFA30);
        memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
      }
      else
      {
        v210((uint64_t)v174, (uint64_t)v175, v212);
        v214(&v174[v176[5]], &v175[v176[5]], v147);
        *(_QWORD *)&v174[v176[6]] = *(_QWORD *)&v175[v176[6]];
        v178 = v176[7];
        v179 = &v174[v178];
        v180 = &v175[v178];
        v181 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 16))(v179, v180, v181);
        v182 = v176[8];
        v183 = &v174[v182];
        v184 = &v175[v182];
        v185 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v185 - 8) + 16))(v183, v184, v185);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v174, 0, 1, (uint64_t)v176);
      }
      v186 = v208[10];
      v187 = (void *)(v216 + v186);
      v188 = (const void *)(a2 + v186);
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v188, 1, HourPrecipitationChartViewModel))
      {
        v190 = sub_100005D40(&qword_1001BFA38);
        memcpy(v187, v188, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v187, v188, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v187, 0, 1, HourPrecipitationChartViewModel);
      }
      v191 = v208[11];
      v192 = *(_QWORD *)(a2 + v191);
      *(_QWORD *)(v216 + v191) = v192;
      v193 = v208[12];
      v194 = v216 + v193;
      v195 = a2 + v193;
      *(_QWORD *)v194 = *(_QWORD *)v195;
      *(_WORD *)(v194 + 8) = *(_WORD *)(v195 + 8);
      v196 = v208[13];
      v197 = (void *)(v216 + v196);
      v198 = (const void *)(a2 + v196);
      v199 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain(v192);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v198, 1, v199))
      {
        v200 = sub_100005D40(&qword_1001BFA28);
        memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v199 - 8) + 16))(v197, v198, v199);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v197, 0, 1, v199);
      }
      v201 = v208[14];
      v202 = (void *)(v216 + v201);
      v203 = (const void *)(a2 + v201);
      v204 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v203, 1, v204))
      {
        v205 = sub_100005D40(&qword_1001BFA40);
        memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
      }
      else
      {
        v206 = swift_getEnumCaseMultiPayload(v203, v204) == 1;
        v214(v202, v203, v147);
        swift_storeEnumTagMultiPayload(v202, v204, v206);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v202, 0, 1, v204);
      }
      v38 = v215;
      v37 = v216;
      v39 = 0;
    }
  }
  swift_storeEnumTagMultiPayload(v37, v38, v39);
  return a1;
}

uint64_t assignWithCopy for WeatherDataViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  void *v100;
  const void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  void *v125;
  const void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  const void *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  const void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  int *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  const void *v190;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  const void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  const void *v206;
  uint64_t v207;
  uint64_t v208;
  _BOOL8 v209;
  int *v211;
  void (*v212)(uint64_t, uint64_t, uint64_t);
  uint64_t v213;
  void (*v214)(void *, const void *, uint64_t);
  void (*v215)(void *, const void *, uint64_t);
  void (*v216)(uint64_t, uint64_t, uint64_t);
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;

  v3 = a1;
  if (a1 != a2)
  {
    sub_100029030(a1, type metadata accessor for WeatherDataViewModel);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v36 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v3, a2, v36);
      v37 = v3;
      v38 = a3;
      v39 = 2;
    }
    else
    {
      v218 = a3;
      v219 = v3;
      if (EnumCaseMultiPayload == 1)
      {
        v7 = type metadata accessor for UUID(0);
        v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
        v8(v3, a2, v7);
        v9 = type metadata accessor for InstantWeatherViewModel(0);
        v10 = *(int *)(v9 + 20);
        v11 = v3 + v10;
        v12 = a2 + v10;
        v13 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
        v14 = *(int *)(v9 + 24);
        v15 = v3 + v14;
        v16 = a2 + v14;
        v216 = v8;
        v8(v3 + v14, v16, v7);
        v17 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v18 = v17[5];
        v19 = v15 + v18;
        v20 = v16 + v18;
        v21 = type metadata accessor for Date(0);
        v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
        v22(v19, v20, v21);
        v214 = (void (*)(void *, const void *, uint64_t))v22;
        v22(v15 + v17[6], v16 + v17[6], v21);
        v23 = v17[7];
        v24 = v15 + v23;
        v25 = v16 + v23;
        v26 = sub_100005D40(&qword_1001BF090);
        v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
        v27(v24, v25, v26);
        v27(v15 + v17[8], v16 + v17[8], v26);
        v28 = v17[9];
        v29 = (_QWORD *)(v15 + v28);
        v30 = (_QWORD *)(v16 + v28);
        *v29 = *v30;
        v31 = v30[1];
        v29[1] = v31;
        v32 = v17[10];
        v33 = (void *)(v15 + v32);
        v34 = (const void *)(v16 + v32);
        swift_bridgeObjectRetain(v31);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v34, 1, v26))
        {
          v35 = sub_100005D40(&qword_1001BF098);
          memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          v27((uint64_t)v33, (uint64_t)v34, v26);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v33, 0, 1, v26);
        }
        v70 = v17[11];
        v71 = (void *)(v15 + v70);
        v72 = (const void *)(v16 + v70);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v70, 1, v26))
        {
          v73 = sub_100005D40(&qword_1001BF098);
          memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
        }
        else
        {
          v27((uint64_t)v71, (uint64_t)v72, v26);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v71, 0, 1, v26);
        }
        v78 = v17[12];
        v79 = v15 + v78;
        v80 = v16 + v78;
        v216(v15 + v78, v16 + v78, v7);
        v81 = (int *)type metadata accessor for ConditionViewModel(0);
        v82 = v81[5];
        v83 = v79 + v82;
        v84 = v80 + v82;
        v85 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v83, v84, v85);
        v86 = v81[6];
        v87 = (_QWORD *)(v79 + v86);
        v88 = (_QWORD *)(v80 + v86);
        *v87 = *v88;
        v89 = v88[1];
        v87[1] = v89;
        v90 = v81[7];
        v91 = (_QWORD *)(v79 + v90);
        v92 = (_QWORD *)(v80 + v90);
        *v91 = *v92;
        v93 = v92[1];
        v91[1] = v93;
        *(_BYTE *)(v79 + v81[8]) = *(_BYTE *)(v80 + v81[8]);
        *(_BYTE *)(v79 + v81[9]) = *(_BYTE *)(v80 + v81[9]);
        *(_BYTE *)(v79 + v81[10]) = *(_BYTE *)(v80 + v81[10]);
        *(_QWORD *)(v15 + v17[13]) = *(_QWORD *)(v16 + v17[13]);
        v94 = v17[14];
        v95 = v15 + v94;
        v96 = v16 + v94;
        v97 = type metadata accessor for CloudAltitudeKind(0);
        v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
        swift_bridgeObjectRetain(v89);
        swift_bridgeObjectRetain(v93);
        v98(v95, v96, v97);
        v99 = v17[15];
        v100 = (void *)(v15 + v99);
        v101 = (const void *)(v16 + v99);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v99, 1, v21))
        {
          v102 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
        }
        else
        {
          v214(v100, v101, v21);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v100, 0, 1, v21);
        }
        v129 = v17[16];
        v130 = (void *)(v15 + v129);
        v131 = (const void *)(v16 + v129);
        v3 = v219;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v129, 1, v21))
        {
          v132 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
        }
        else
        {
          v214(v130, v131, v21);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v130, 0, 1, v21);
        }
        v137 = v17[17];
        v138 = v15 + v137;
        v139 = v16 + v137;
        v140 = type metadata accessor for UVIndex(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
        v141 = v17[18];
        v142 = v15 + v141;
        v143 = v16 + v141;
        v144 = type metadata accessor for Wind(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v144 - 8) + 16))(v142, v143, v144);
        *(_QWORD *)(v15 + v17[19]) = *(_QWORD *)(v16 + v17[19]);
        v145 = v17[20];
        v146 = v15 + v145;
        v147 = (__int128 *)(v16 + v145);
        if (*((_QWORD *)v147 + 1))
        {
          *(_QWORD *)v146 = *(_QWORD *)v147;
          v148 = *((_QWORD *)v147 + 1);
          *(_QWORD *)(v146 + 8) = v148;
          v149 = *((_QWORD *)v147 + 2);
          v150 = *((_QWORD *)v147 + 3);
          v151 = *((_BYTE *)v147 + 32);
          swift_bridgeObjectRetain(v148);
          sub_100006E58(v149, v150, v151);
          *(_QWORD *)(v146 + 16) = v149;
          *(_QWORD *)(v146 + 24) = v150;
          *(_BYTE *)(v146 + 32) = v151;
        }
        else
        {
          v167 = *v147;
          v168 = v147[1];
          *(_BYTE *)(v146 + 32) = *((_BYTE *)v147 + 32);
          *(_OWORD *)v146 = v167;
          *(_OWORD *)(v146 + 16) = v168;
        }
        v37 = v219;
        v38 = v218;
        v39 = 1;
      }
      else
      {
        v40 = type metadata accessor for UUID(0);
        v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
        v41(v3, a2, v40);
        v42 = type metadata accessor for AggregateWeatherViewModel(0);
        v43 = *(int *)(v42 + 20);
        v44 = v3 + v43;
        v45 = a2 + v43;
        v46 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
        v211 = (int *)v42;
        v212 = v41;
        v47 = *(int *)(v42 + 24);
        v48 = v3 + v47;
        v49 = a2 + v47;
        v213 = v40;
        v41(v3 + v47, a2 + v47, v40);
        v50 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v51 = v50[5];
        v52 = v48 + v51;
        v53 = v49 + v51;
        v54 = type metadata accessor for Date(0);
        v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16);
        v55(v52, v53, v54);
        v215 = (void (*)(void *, const void *, uint64_t))v55;
        v55(v48 + v50[6], v49 + v50[6], v54);
        v56 = v50[7];
        v57 = v48 + v56;
        v58 = v49 + v56;
        v59 = sub_100005D40(&qword_1001BF090);
        v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
        v60(v57, v58, v59);
        v60(v48 + v50[8], v49 + v50[8], v59);
        v61 = v50[9];
        v62 = (_QWORD *)(v48 + v61);
        v63 = (_QWORD *)(v49 + v61);
        *v62 = *v63;
        v64 = v63[1];
        v62[1] = v64;
        v65 = v50[10];
        v66 = (void *)(v48 + v65);
        v67 = (const void *)(v49 + v65);
        swift_bridgeObjectRetain(v64);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v59))
        {
          v69 = sub_100005D40(&qword_1001BF098);
          memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        }
        else
        {
          v60((uint64_t)v66, (uint64_t)v67, v59);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v59);
        }
        v74 = v50[11];
        v75 = (void *)(v48 + v74);
        v76 = (const void *)(v49 + v74);
        v217 = v54;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v49 + v74, 1, v59))
        {
          v77 = sub_100005D40(&qword_1001BF098);
          memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
        }
        else
        {
          v60((uint64_t)v75, (uint64_t)v76, v59);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v75, 0, 1, v59);
        }
        v103 = v50[12];
        v104 = v48 + v103;
        v105 = v49 + v103;
        v212(v48 + v103, v49 + v103, v213);
        v106 = (int *)type metadata accessor for ConditionViewModel(0);
        v107 = v106[5];
        v108 = v104 + v107;
        v109 = v105 + v107;
        v110 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(v108, v109, v110);
        v111 = v106[6];
        v112 = (_QWORD *)(v104 + v111);
        v113 = (_QWORD *)(v105 + v111);
        *v112 = *v113;
        v114 = v113[1];
        v112[1] = v114;
        v115 = v106[7];
        v116 = (_QWORD *)(v104 + v115);
        v117 = (_QWORD *)(v105 + v115);
        *v116 = *v117;
        v118 = v117[1];
        v116[1] = v118;
        *(_BYTE *)(v104 + v106[8]) = *(_BYTE *)(v105 + v106[8]);
        *(_BYTE *)(v104 + v106[9]) = *(_BYTE *)(v105 + v106[9]);
        *(_BYTE *)(v104 + v106[10]) = *(_BYTE *)(v105 + v106[10]);
        *(_QWORD *)(v48 + v50[13]) = *(_QWORD *)(v49 + v50[13]);
        v119 = v50[14];
        v120 = v48 + v119;
        v121 = v49 + v119;
        v122 = type metadata accessor for CloudAltitudeKind(0);
        v123 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 16);
        swift_bridgeObjectRetain(v114);
        swift_bridgeObjectRetain(v118);
        v123(v120, v121, v122);
        v124 = v50[15];
        v125 = (void *)(v48 + v124);
        v126 = (const void *)(v49 + v124);
        v127 = v217;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v49 + v124, 1, v217))
        {
          v128 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
        }
        else
        {
          v215(v125, v126, v217);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v125, 0, 1, v217);
        }
        v133 = v50[16];
        v134 = (void *)(v48 + v133);
        v135 = (const void *)(v49 + v133);
        v3 = v219;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v49 + v133, 1, v217))
        {
          v136 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
        }
        else
        {
          v215(v134, v135, v217);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v134, 0, 1, v217);
        }
        v152 = v50[17];
        v153 = v48 + v152;
        v154 = v49 + v152;
        v155 = type metadata accessor for UVIndex(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v153, v154, v155);
        v156 = v50[18];
        v157 = v48 + v156;
        v158 = v49 + v156;
        v159 = type metadata accessor for Wind(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v159 - 8) + 16))(v157, v158, v159);
        *(_QWORD *)(v48 + v50[19]) = *(_QWORD *)(v49 + v50[19]);
        v160 = v50[20];
        v161 = v48 + v160;
        v162 = (__int128 *)(v49 + v160);
        if (*((_QWORD *)v162 + 1))
        {
          *(_QWORD *)v161 = *(_QWORD *)v162;
          v163 = *((_QWORD *)v162 + 1);
          *(_QWORD *)(v161 + 8) = v163;
          v164 = *((_QWORD *)v162 + 2);
          v165 = *((_QWORD *)v162 + 3);
          v166 = *((_BYTE *)v162 + 32);
          swift_bridgeObjectRetain(v163);
          sub_100006E58(v164, v165, v166);
          *(_QWORD *)(v161 + 16) = v164;
          *(_QWORD *)(v161 + 24) = v165;
          *(_BYTE *)(v161 + 32) = v166;
          v127 = v217;
        }
        else
        {
          v169 = *v162;
          v170 = v162[1];
          *(_BYTE *)(v161 + 32) = *((_BYTE *)v162 + 32);
          *(_OWORD *)v161 = v169;
          *(_OWORD *)(v161 + 16) = v170;
        }
        v171 = v211[7];
        v172 = *(_QWORD *)(a2 + v171);
        *(_QWORD *)(v219 + v171) = v172;
        v173 = v211[8];
        v174 = *(_QWORD *)(a2 + v173);
        *(_QWORD *)(v219 + v173) = v174;
        v175 = v211[9];
        v176 = (char *)(v219 + v175);
        v177 = (char *)(a2 + v175);
        v178 = (int *)type metadata accessor for AirQualityViewModel(0);
        swift_bridgeObjectRetain(v172);
        swift_bridgeObjectRetain(v174);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v177, 1, (uint64_t)v178))
        {
          v179 = sub_100005D40(&qword_1001BFA30);
          memcpy(v176, v177, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
        }
        else
        {
          v212((uint64_t)v176, (uint64_t)v177, v213);
          v215(&v176[v178[5]], &v177[v178[5]], v127);
          *(_QWORD *)&v176[v178[6]] = *(_QWORD *)&v177[v178[6]];
          v180 = v178[7];
          v181 = &v176[v180];
          v182 = &v177[v180];
          v183 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v183 - 8) + 16))(v181, v182, v183);
          v184 = v178[8];
          v185 = &v176[v184];
          v186 = &v177[v184];
          v187 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v187 - 8) + 16))(v185, v186, v187);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v176, 0, 1, (uint64_t)v178);
        }
        v188 = v211[10];
        v189 = (void *)(v219 + v188);
        v190 = (const void *)(a2 + v188);
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v190, 1, HourPrecipitationChartViewModel))
        {
          v192 = sub_100005D40(&qword_1001BFA38);
          memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v189, v190, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v189, 0, 1, HourPrecipitationChartViewModel);
        }
        v193 = v211[11];
        v194 = *(_QWORD *)(a2 + v193);
        *(_QWORD *)(v219 + v193) = v194;
        v195 = v211[12];
        v196 = v219 + v195;
        v197 = (uint64_t *)(a2 + v195);
        v198 = *v197;
        *(_WORD *)(v196 + 8) = *((_WORD *)v197 + 4);
        *(_QWORD *)v196 = v198;
        v199 = v211[13];
        v200 = (void *)(v219 + v199);
        v201 = (const void *)(a2 + v199);
        v202 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain(v194);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v201, 1, v202))
        {
          v203 = sub_100005D40(&qword_1001BFA28);
          memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v202 - 8) + 16))(v200, v201, v202);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v200, 0, 1, v202);
        }
        v204 = v211[14];
        v205 = (void *)(v219 + v204);
        v206 = (const void *)(a2 + v204);
        v207 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v206, 1, v207))
        {
          v208 = sub_100005D40(&qword_1001BFA40);
          memcpy(v205, v206, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
        }
        else
        {
          v209 = swift_getEnumCaseMultiPayload(v206, v207) == 1;
          v215(v205, v206, v127);
          swift_storeEnumTagMultiPayload(v205, v207, v209);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v205, 0, 1, v207);
        }
        v37 = v219;
        v38 = v218;
        v39 = 0;
      }
    }
    swift_storeEnumTagMultiPayload(v37, v38, v39);
  }
  return v3;
}

uint64_t initializeWithTake for WeatherDataViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const void *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  void *v99;
  const void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  const void *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  const void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  char *v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const void *v149;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  const void *v162;
  uint64_t v163;
  uint64_t v164;
  _BOOL8 v165;
  int *v167;
  uint64_t v168;
  void (*v169)(uint64_t, uint64_t, uint64_t);
  void (*v170)(void *, const void *, uint64_t);
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t, uint64_t);
  void (*v173)(void *, const void *, uint64_t);
  uint64_t v174;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v32 = type metadata accessor for SunriseSunsetViewModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(a1, a2, v32);
    v33 = a1;
    v34 = a3;
    v35 = 2;
  }
  else
  {
    v174 = a3;
    if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for UUID(0);
      v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      v9 = type metadata accessor for InstantWeatherViewModel(0);
      v10 = *(int *)(v9 + 20);
      v11 = a1 + v10;
      v12 = a2 + v10;
      v13 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      v14 = *(int *)(v9 + 24);
      v15 = a1 + v14;
      v16 = a2 + v14;
      v172 = v8;
      v8(a1 + v14, v16, v7);
      v17 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v18 = v17[5];
      v19 = v15 + v18;
      v20 = v16 + v18;
      v21 = type metadata accessor for Date(0);
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
      v22(v19, v20, v21);
      v170 = (void (*)(void *, const void *, uint64_t))v22;
      v22(v15 + v17[6], v16 + v17[6], v21);
      v23 = v17[7];
      v24 = v15 + v23;
      v25 = v16 + v23;
      v26 = sub_100005D40(&qword_1001BF090);
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
      v27(v24, v25, v26);
      v27(v15 + v17[8], v16 + v17[8], v26);
      *(_OWORD *)(v15 + v17[9]) = *(_OWORD *)(v16 + v17[9]);
      v28 = v17[10];
      v29 = (void *)(v15 + v28);
      v30 = (const void *)(v16 + v28);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v28, 1, v26))
      {
        v31 = sub_100005D40(&qword_1001BF098);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        v27((uint64_t)v29, (uint64_t)v30, v26);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v26);
      }
      v62 = v17[11];
      v63 = (void *)(v15 + v62);
      v64 = (const void *)(v16 + v62);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v62, 1, v26))
      {
        v65 = sub_100005D40(&qword_1001BF098);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        v27((uint64_t)v63, (uint64_t)v64, v26);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v26);
      }
      v66 = v17[12];
      v67 = v15 + v66;
      v68 = v16 + v66;
      v172(v15 + v66, v16 + v66, v7);
      v69 = (int *)type metadata accessor for ConditionViewModel(0);
      v70 = v69[5];
      v71 = v67 + v70;
      v72 = v68 + v70;
      v73 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
      *(_OWORD *)(v67 + v69[6]) = *(_OWORD *)(v68 + v69[6]);
      *(_OWORD *)(v67 + v69[7]) = *(_OWORD *)(v68 + v69[7]);
      *(_BYTE *)(v67 + v69[8]) = *(_BYTE *)(v68 + v69[8]);
      *(_BYTE *)(v67 + v69[9]) = *(_BYTE *)(v68 + v69[9]);
      *(_BYTE *)(v67 + v69[10]) = *(_BYTE *)(v68 + v69[10]);
      *(_QWORD *)(v15 + v17[13]) = *(_QWORD *)(v16 + v17[13]);
      v74 = v17[14];
      v75 = v15 + v74;
      v76 = v16 + v74;
      v77 = type metadata accessor for CloudAltitudeKind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
      v78 = v17[15];
      v79 = (void *)(v15 + v78);
      v80 = (const void *)(v16 + v78);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v78, 1, v21))
      {
        v81 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
        v170(v79, v80, v21);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v79, 0, 1, v21);
      }
      v82 = v17[16];
      v83 = (void *)(v15 + v82);
      v84 = (const void *)(v16 + v82);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v82, 1, v21))
      {
        v85 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v170(v83, v84, v21);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v83, 0, 1, v21);
      }
      v86 = v17[17];
      v87 = v15 + v86;
      v88 = v16 + v86;
      v89 = type metadata accessor for UVIndex(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v87, v88, v89);
      v90 = v17[18];
      v91 = v15 + v90;
      v92 = v16 + v90;
      v93 = type metadata accessor for Wind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(v91, v92, v93);
      *(_QWORD *)(v15 + v17[19]) = *(_QWORD *)(v16 + v17[19]);
      v94 = v17[20];
      v95 = v15 + v94;
      v96 = v16 + v94;
      *(_BYTE *)(v95 + 32) = *(_BYTE *)(v96 + 32);
      v97 = *(_OWORD *)(v96 + 16);
      *(_OWORD *)v95 = *(_OWORD *)v96;
      *(_OWORD *)(v95 + 16) = v97;
      v33 = a1;
      v34 = v174;
      v35 = 1;
    }
    else
    {
      v36 = type metadata accessor for UUID(0);
      v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32);
      v37(a1, a2, v36);
      v38 = type metadata accessor for AggregateWeatherViewModel(0);
      v39 = *(int *)(v38 + 20);
      v40 = a1 + v39;
      v41 = a2 + v39;
      v42 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
      v167 = (int *)v38;
      v43 = *(int *)(v38 + 24);
      v44 = a1 + v43;
      v45 = a2 + v43;
      v169 = v37;
      v171 = v36;
      v37(a1 + v43, a2 + v43, v36);
      v46 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v47 = v46[5];
      v48 = v44 + v47;
      v49 = v45 + v47;
      v50 = type metadata accessor for Date(0);
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 32);
      v51(v48, v49, v50);
      v168 = v50;
      v173 = (void (*)(void *, const void *, uint64_t))v51;
      v51(v44 + v46[6], v45 + v46[6], v50);
      v52 = v46[7];
      v53 = v44 + v52;
      v54 = v45 + v52;
      v55 = sub_100005D40(&qword_1001BF090);
      v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 32);
      v56(v53, v54, v55);
      v56(v44 + v46[8], v45 + v46[8], v55);
      *(_OWORD *)(v44 + v46[9]) = *(_OWORD *)(v45 + v46[9]);
      v57 = v46[10];
      v58 = (void *)(v44 + v57);
      v59 = (const void *)(v45 + v57);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v45 + v57, 1, v55))
      {
        v61 = sub_100005D40(&qword_1001BF098);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        v56((uint64_t)v58, (uint64_t)v59, v55);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v55);
      }
      v98 = v46[11];
      v99 = (void *)(v44 + v98);
      v100 = (const void *)(v45 + v98);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v45 + v98, 1, v55))
      {
        v101 = sub_100005D40(&qword_1001BF098);
        memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
      }
      else
      {
        v56((uint64_t)v99, (uint64_t)v100, v55);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v55);
      }
      v102 = v46[12];
      v103 = v44 + v102;
      v104 = v45 + v102;
      v169(v44 + v102, v45 + v102, v171);
      v105 = (int *)type metadata accessor for ConditionViewModel(0);
      v106 = v105[5];
      v107 = v103 + v106;
      v108 = v104 + v106;
      v109 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 32))(v107, v108, v109);
      *(_OWORD *)(v103 + v105[6]) = *(_OWORD *)(v104 + v105[6]);
      *(_OWORD *)(v103 + v105[7]) = *(_OWORD *)(v104 + v105[7]);
      *(_BYTE *)(v103 + v105[8]) = *(_BYTE *)(v104 + v105[8]);
      *(_BYTE *)(v103 + v105[9]) = *(_BYTE *)(v104 + v105[9]);
      *(_BYTE *)(v103 + v105[10]) = *(_BYTE *)(v104 + v105[10]);
      *(_QWORD *)(v44 + v46[13]) = *(_QWORD *)(v45 + v46[13]);
      v110 = v46[14];
      v111 = v44 + v110;
      v112 = v45 + v110;
      v113 = type metadata accessor for CloudAltitudeKind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 32))(v111, v112, v113);
      v114 = v46[15];
      v115 = (void *)(v44 + v114);
      v116 = (const void *)(v45 + v114);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v45 + v114, 1, v168))
      {
        v117 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
      }
      else
      {
        v173(v115, v116, v168);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v168);
      }
      v118 = v46[16];
      v119 = (void *)(v44 + v118);
      v120 = (const void *)(v45 + v118);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v45 + v118, 1, v168))
      {
        v121 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
      }
      else
      {
        v173(v119, v120, v168);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v119, 0, 1, v168);
      }
      v122 = v46[17];
      v123 = v44 + v122;
      v124 = v45 + v122;
      v125 = type metadata accessor for UVIndex(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v123, v124, v125);
      v126 = v46[18];
      v127 = v44 + v126;
      v128 = v45 + v126;
      v129 = type metadata accessor for Wind(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 32))(v127, v128, v129);
      *(_QWORD *)(v44 + v46[19]) = *(_QWORD *)(v45 + v46[19]);
      v130 = v46[20];
      v131 = v44 + v130;
      v132 = v45 + v130;
      *(_BYTE *)(v131 + 32) = *(_BYTE *)(v132 + 32);
      v133 = *(_OWORD *)(v132 + 16);
      *(_OWORD *)v131 = *(_OWORD *)v132;
      *(_OWORD *)(v131 + 16) = v133;
      *(_QWORD *)(a1 + v167[7]) = *(_QWORD *)(a2 + v167[7]);
      *(_QWORD *)(a1 + v167[8]) = *(_QWORD *)(a2 + v167[8]);
      v134 = v167[9];
      v135 = (char *)(a1 + v134);
      v136 = (char *)(a2 + v134);
      v137 = (int *)type metadata accessor for AirQualityViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v136, 1, (uint64_t)v137))
      {
        v138 = sub_100005D40(&qword_1001BFA30);
        memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
      }
      else
      {
        v169((uint64_t)v135, (uint64_t)v136, v171);
        v173(&v135[v137[5]], &v136[v137[5]], v168);
        *(_QWORD *)&v135[v137[6]] = *(_QWORD *)&v136[v137[6]];
        v139 = v137[7];
        v140 = &v135[v139];
        v141 = &v136[v139];
        v142 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 32))(v140, v141, v142);
        v143 = v137[8];
        v144 = &v135[v143];
        v145 = &v136[v143];
        v146 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v146 - 8) + 32))(v144, v145, v146);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v135, 0, 1, (uint64_t)v137);
      }
      v147 = v167[10];
      v148 = (void *)(a1 + v147);
      v149 = (const void *)(a2 + v147);
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v149, 1, HourPrecipitationChartViewModel))
      {
        v151 = sub_100005D40(&qword_1001BFA38);
        memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v148, v149, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v148, 0, 1, HourPrecipitationChartViewModel);
      }
      *(_QWORD *)(a1 + v167[11]) = *(_QWORD *)(a2 + v167[11]);
      v152 = v167[12];
      v153 = a1 + v152;
      v154 = a2 + v152;
      *(_QWORD *)v153 = *(_QWORD *)v154;
      *(_WORD *)(v153 + 8) = *(_WORD *)(v154 + 8);
      v155 = v167[13];
      v156 = (void *)(a1 + v155);
      v157 = (const void *)(a2 + v155);
      v158 = type metadata accessor for URL(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157, 1, v158))
      {
        v159 = sub_100005D40(&qword_1001BFA28);
        memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v158 - 8) + 32))(v156, v157, v158);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v156, 0, 1, v158);
      }
      v160 = v167[14];
      v161 = (void *)(a1 + v160);
      v162 = (const void *)(a2 + v160);
      v163 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v162, 1, v163))
      {
        v164 = sub_100005D40(&qword_1001BFA40);
        memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
      }
      else
      {
        v165 = swift_getEnumCaseMultiPayload(v162, v163) == 1;
        v173(v161, v162, v168);
        swift_storeEnumTagMultiPayload(v161, v163, v165);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v161, 0, 1, v163);
      }
      v34 = v174;
      v33 = a1;
      v35 = 0;
    }
  }
  swift_storeEnumTagMultiPayload(v33, v34, v35);
  return a1;
}

uint64_t assignWithTake for WeatherDataViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const void *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  char *v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const void *v149;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  const void *v162;
  uint64_t v163;
  uint64_t v164;
  _BOOL8 v165;
  uint64_t v167;
  int *v168;
  void (*v169)(uint64_t, uint64_t, uint64_t);
  void (*v170)(void *, const void *, uint64_t);
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t, uint64_t);
  void (*v173)(void *, const void *, uint64_t);
  uint64_t v174;

  if (a1 != a2)
  {
    sub_100029030(a1, type metadata accessor for WeatherDataViewModel);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v32 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(a1, a2, v32);
      v33 = a1;
      v34 = a3;
      v35 = 2;
    }
    else
    {
      v174 = a3;
      if (EnumCaseMultiPayload == 1)
      {
        v7 = type metadata accessor for UUID(0);
        v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
        v8(a1, a2, v7);
        v9 = type metadata accessor for InstantWeatherViewModel(0);
        v10 = *(int *)(v9 + 20);
        v11 = a1 + v10;
        v12 = a2 + v10;
        v13 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
        v14 = *(int *)(v9 + 24);
        v15 = a1 + v14;
        v16 = a2 + v14;
        v172 = v8;
        v8(a1 + v14, v16, v7);
        v17 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v18 = v17[5];
        v19 = v15 + v18;
        v20 = v16 + v18;
        v21 = type metadata accessor for Date(0);
        v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
        v22(v19, v20, v21);
        v170 = (void (*)(void *, const void *, uint64_t))v22;
        v22(v15 + v17[6], v16 + v17[6], v21);
        v23 = v17[7];
        v24 = v15 + v23;
        v25 = v16 + v23;
        v26 = sub_100005D40(&qword_1001BF090);
        v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
        v27(v24, v25, v26);
        v27(v15 + v17[8], v16 + v17[8], v26);
        *(_OWORD *)(v15 + v17[9]) = *(_OWORD *)(v16 + v17[9]);
        v28 = v17[10];
        v29 = (void *)(v15 + v28);
        v30 = (const void *)(v16 + v28);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v28, 1, v26))
        {
          v31 = sub_100005D40(&qword_1001BF098);
          memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          v27((uint64_t)v29, (uint64_t)v30, v26);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v26);
        }
        v62 = v17[11];
        v63 = (void *)(v15 + v62);
        v64 = (const void *)(v16 + v62);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v62, 1, v26))
        {
          v65 = sub_100005D40(&qword_1001BF098);
          memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
        }
        else
        {
          v27((uint64_t)v63, (uint64_t)v64, v26);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v26);
        }
        v70 = v17[12];
        v71 = v15 + v70;
        v72 = v16 + v70;
        v172(v15 + v70, v16 + v70, v7);
        v73 = (int *)type metadata accessor for ConditionViewModel(0);
        v74 = v73[5];
        v75 = v71 + v74;
        v76 = v72 + v74;
        v77 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
        *(_OWORD *)(v71 + v73[6]) = *(_OWORD *)(v72 + v73[6]);
        *(_OWORD *)(v71 + v73[7]) = *(_OWORD *)(v72 + v73[7]);
        *(_BYTE *)(v71 + v73[8]) = *(_BYTE *)(v72 + v73[8]);
        *(_BYTE *)(v71 + v73[9]) = *(_BYTE *)(v72 + v73[9]);
        *(_BYTE *)(v71 + v73[10]) = *(_BYTE *)(v72 + v73[10]);
        *(_QWORD *)(v15 + v17[13]) = *(_QWORD *)(v16 + v17[13]);
        v78 = v17[14];
        v79 = v15 + v78;
        v80 = v16 + v78;
        v81 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v79, v80, v81);
        v82 = v17[15];
        v83 = (void *)(v15 + v82);
        v84 = (const void *)(v16 + v82);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v82, 1, v21))
        {
          v85 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
        }
        else
        {
          v170(v83, v84, v21);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v83, 0, 1, v21);
        }
        v102 = v17[16];
        v103 = (void *)(v15 + v102);
        v104 = (const void *)(v16 + v102);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v16 + v102, 1, v21))
        {
          v105 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
        }
        else
        {
          v170(v103, v104, v21);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v103, 0, 1, v21);
        }
        v110 = v17[17];
        v111 = v15 + v110;
        v112 = v16 + v110;
        v113 = type metadata accessor for UVIndex(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 32))(v111, v112, v113);
        v114 = v17[18];
        v115 = v15 + v114;
        v116 = v16 + v114;
        v117 = type metadata accessor for Wind(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 32))(v115, v116, v117);
        *(_QWORD *)(v15 + v17[19]) = *(_QWORD *)(v16 + v17[19]);
        v118 = v17[20];
        v119 = v15 + v118;
        v120 = v16 + v118;
        *(_BYTE *)(v119 + 32) = *(_BYTE *)(v120 + 32);
        v121 = *(_OWORD *)(v120 + 16);
        *(_OWORD *)v119 = *(_OWORD *)v120;
        *(_OWORD *)(v119 + 16) = v121;
        v33 = a1;
        v34 = v174;
        v35 = 1;
      }
      else
      {
        v36 = type metadata accessor for UUID(0);
        v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32);
        v37(a1, a2, v36);
        v38 = type metadata accessor for AggregateWeatherViewModel(0);
        v39 = *(int *)(v38 + 20);
        v40 = a1 + v39;
        v41 = a2 + v39;
        v42 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
        v168 = (int *)v38;
        v169 = v37;
        v43 = *(int *)(v38 + 24);
        v44 = a1 + v43;
        v45 = a2 + v43;
        v171 = v36;
        v37(a1 + v43, a2 + v43, v36);
        v46 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v47 = v46[5];
        v48 = v44 + v47;
        v49 = v45 + v47;
        v50 = type metadata accessor for Date(0);
        v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 32);
        v51(v48, v49, v50);
        v167 = v50;
        v173 = (void (*)(void *, const void *, uint64_t))v51;
        v51(v44 + v46[6], v45 + v46[6], v50);
        v52 = v46[7];
        v53 = v44 + v52;
        v54 = v45 + v52;
        v55 = sub_100005D40(&qword_1001BF090);
        v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 32);
        v56(v53, v54, v55);
        v56(v44 + v46[8], v45 + v46[8], v55);
        *(_OWORD *)(v44 + v46[9]) = *(_OWORD *)(v45 + v46[9]);
        v57 = v46[10];
        v58 = (void *)(v44 + v57);
        v59 = (const void *)(v45 + v57);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v45 + v57, 1, v55))
        {
          v61 = sub_100005D40(&qword_1001BF098);
          memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        }
        else
        {
          v56((uint64_t)v58, (uint64_t)v59, v55);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v55);
        }
        v66 = v46[11];
        v67 = (void *)(v44 + v66);
        v68 = (const void *)(v45 + v66);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v45 + v66, 1, v55))
        {
          v69 = sub_100005D40(&qword_1001BF098);
          memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        }
        else
        {
          v56((uint64_t)v67, (uint64_t)v68, v55);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v55);
        }
        v86 = v46[12];
        v87 = v44 + v86;
        v88 = v45 + v86;
        v169(v44 + v86, v45 + v86, v171);
        v89 = (int *)type metadata accessor for ConditionViewModel(0);
        v90 = v89[5];
        v91 = v87 + v90;
        v92 = v88 + v90;
        v93 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(v91, v92, v93);
        *(_OWORD *)(v87 + v89[6]) = *(_OWORD *)(v88 + v89[6]);
        *(_OWORD *)(v87 + v89[7]) = *(_OWORD *)(v88 + v89[7]);
        *(_BYTE *)(v87 + v89[8]) = *(_BYTE *)(v88 + v89[8]);
        *(_BYTE *)(v87 + v89[9]) = *(_BYTE *)(v88 + v89[9]);
        *(_BYTE *)(v87 + v89[10]) = *(_BYTE *)(v88 + v89[10]);
        *(_QWORD *)(v44 + v46[13]) = *(_QWORD *)(v45 + v46[13]);
        v94 = v46[14];
        v95 = v44 + v94;
        v96 = v45 + v94;
        v97 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 32))(v95, v96, v97);
        v98 = v46[15];
        v99 = (void *)(v44 + v98);
        v100 = (const void *)(v45 + v98);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v45 + v98, 1, v167))
        {
          v101 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
        }
        else
        {
          v173(v99, v100, v167);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v167);
        }
        v106 = v46[16];
        v107 = (void *)(v44 + v106);
        v108 = (const void *)(v45 + v106);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v45 + v106, 1, v167))
        {
          v109 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
        }
        else
        {
          v173(v107, v108, v167);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v107, 0, 1, v167);
        }
        v122 = v46[17];
        v123 = v44 + v122;
        v124 = v45 + v122;
        v125 = type metadata accessor for UVIndex(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v123, v124, v125);
        v126 = v46[18];
        v127 = v44 + v126;
        v128 = v45 + v126;
        v129 = type metadata accessor for Wind(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 32))(v127, v128, v129);
        *(_QWORD *)(v44 + v46[19]) = *(_QWORD *)(v45 + v46[19]);
        v130 = v46[20];
        v131 = v44 + v130;
        v132 = v45 + v130;
        *(_BYTE *)(v131 + 32) = *(_BYTE *)(v132 + 32);
        v133 = *(_OWORD *)(v132 + 16);
        *(_OWORD *)v131 = *(_OWORD *)v132;
        *(_OWORD *)(v131 + 16) = v133;
        *(_QWORD *)(a1 + v168[7]) = *(_QWORD *)(a2 + v168[7]);
        *(_QWORD *)(a1 + v168[8]) = *(_QWORD *)(a2 + v168[8]);
        v134 = v168[9];
        v135 = (char *)(a1 + v134);
        v136 = (char *)(a2 + v134);
        v137 = (int *)type metadata accessor for AirQualityViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v136, 1, (uint64_t)v137))
        {
          v138 = sub_100005D40(&qword_1001BFA30);
          memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
        }
        else
        {
          v169((uint64_t)v135, (uint64_t)v136, v171);
          v173(&v135[v137[5]], &v136[v137[5]], v167);
          *(_QWORD *)&v135[v137[6]] = *(_QWORD *)&v136[v137[6]];
          v139 = v137[7];
          v140 = &v135[v139];
          v141 = &v136[v139];
          v142 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 32))(v140, v141, v142);
          v143 = v137[8];
          v144 = &v135[v143];
          v145 = &v136[v143];
          v146 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v146 - 8) + 32))(v144, v145, v146);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v135, 0, 1, (uint64_t)v137);
        }
        v147 = v168[10];
        v148 = (void *)(a1 + v147);
        v149 = (const void *)(a2 + v147);
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v149, 1, HourPrecipitationChartViewModel))
        {
          v151 = sub_100005D40(&qword_1001BFA38);
          memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v148, v149, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v148, 0, 1, HourPrecipitationChartViewModel);
        }
        *(_QWORD *)(a1 + v168[11]) = *(_QWORD *)(a2 + v168[11]);
        v152 = v168[12];
        v153 = a1 + v152;
        v154 = a2 + v152;
        *(_QWORD *)v153 = *(_QWORD *)v154;
        *(_WORD *)(v153 + 8) = *(_WORD *)(v154 + 8);
        v155 = v168[13];
        v156 = (void *)(a1 + v155);
        v157 = (const void *)(a2 + v155);
        v158 = type metadata accessor for URL(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157, 1, v158))
        {
          v159 = sub_100005D40(&qword_1001BFA28);
          memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v158 - 8) + 32))(v156, v157, v158);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v156, 0, 1, v158);
        }
        v160 = v168[14];
        v161 = (void *)(a1 + v160);
        v162 = (const void *)(a2 + v160);
        v163 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v162, 1, v163))
        {
          v164 = sub_100005D40(&qword_1001BFA40);
          memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
        }
        else
        {
          v165 = swift_getEnumCaseMultiPayload(v162, v163) == 1;
          v173(v161, v162, v167);
          swift_storeEnumTagMultiPayload(v161, v163, v165);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v161, 0, 1, v163);
        }
        v33 = a1;
        v34 = v174;
        v35 = 0;
      }
    }
    swift_storeEnumTagMultiPayload(v33, v34, v35);
  }
  return a1;
}

uint64_t sub_1000E95AC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  result = type metadata accessor for AggregateWeatherViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for InstantWeatherViewModel(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for SunriseSunsetViewModel(319);
      if (v5 <= 0x3F)
      {
        v6[2] = *(_QWORD *)(result - 8) + 64;
        swift_initEnumMetadataMultiPayload(a1, 256, 3, v6);
        return 0;
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WeatherDataViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000E9694 + 4 * byte_10017FDA5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E96C8 + 4 * byte_10017FDA0[v4]))();
}

uint64_t sub_1000E96C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E96D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E96D8);
  return result;
}

uint64_t sub_1000E96E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E96ECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000E96F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E96F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WeatherDataViewModel.CodingKeys()
{
  return &type metadata for WeatherDataViewModel.CodingKeys;
}

ValueMetadata *type metadata accessor for WeatherDataViewModel.AggregateCodingKeys()
{
  return &type metadata for WeatherDataViewModel.AggregateCodingKeys;
}

ValueMetadata *type metadata accessor for WeatherDataViewModel.InstantCodingKeys()
{
  return &type metadata for WeatherDataViewModel.InstantCodingKeys;
}

uint64_t _s13WeatherWidget20WeatherDataViewModelO19AggregateCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000E9778 + 4 * byte_10017FDAA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000E9798 + 4 * byte_10017FDAF[v4]))();
}

_BYTE *sub_1000E9778(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000E9798(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000E97A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000E97A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000E97B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000E97B8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WeatherDataViewModel.SunriseSunsetCodingKeys()
{
  return &type metadata for WeatherDataViewModel.SunriseSunsetCodingKeys;
}

unint64_t sub_1000E97D8()
{
  unint64_t result;

  result = qword_1001C3A80;
  if (!qword_1001C3A80)
  {
    result = swift_getWitnessTable(&unk_10017FF38, &type metadata for WeatherDataViewModel.SunriseSunsetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3A80);
  }
  return result;
}

unint64_t sub_1000E9818()
{
  unint64_t result;

  result = qword_1001C3A88;
  if (!qword_1001C3A88)
  {
    result = swift_getWitnessTable(&unk_10017FFF0, &type metadata for WeatherDataViewModel.InstantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3A88);
  }
  return result;
}

unint64_t sub_1000E9858()
{
  unint64_t result;

  result = qword_1001C3A90;
  if (!qword_1001C3A90)
  {
    result = swift_getWitnessTable(&unk_1001800A8, &type metadata for WeatherDataViewModel.AggregateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3A90);
  }
  return result;
}

unint64_t sub_1000E9898()
{
  unint64_t result;

  result = qword_1001C3A98;
  if (!qword_1001C3A98)
  {
    result = swift_getWitnessTable(&unk_100180160, &type metadata for WeatherDataViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3A98);
  }
  return result;
}

unint64_t sub_1000E98D8()
{
  unint64_t result;

  result = qword_1001C3AA0;
  if (!qword_1001C3AA0)
  {
    result = swift_getWitnessTable(&unk_100180018, &type metadata for WeatherDataViewModel.AggregateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3AA0);
  }
  return result;
}

unint64_t sub_1000E9918()
{
  unint64_t result;

  result = qword_1001C3AA8;
  if (!qword_1001C3AA8)
  {
    result = swift_getWitnessTable(&unk_100180040, &type metadata for WeatherDataViewModel.AggregateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3AA8);
  }
  return result;
}

unint64_t sub_1000E9958()
{
  unint64_t result;

  result = qword_1001C3AB0;
  if (!qword_1001C3AB0)
  {
    result = swift_getWitnessTable(&unk_10017FF60, &type metadata for WeatherDataViewModel.InstantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3AB0);
  }
  return result;
}

unint64_t sub_1000E9998()
{
  unint64_t result;

  result = qword_1001C3AB8;
  if (!qword_1001C3AB8)
  {
    result = swift_getWitnessTable(&unk_10017FF88, &type metadata for WeatherDataViewModel.InstantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3AB8);
  }
  return result;
}

unint64_t sub_1000E99D8()
{
  unint64_t result;

  result = qword_1001C3AC0;
  if (!qword_1001C3AC0)
  {
    result = swift_getWitnessTable(&unk_10017FEA8, &type metadata for WeatherDataViewModel.SunriseSunsetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3AC0);
  }
  return result;
}

unint64_t sub_1000E9A18()
{
  unint64_t result;

  result = qword_1001C3AC8;
  if (!qword_1001C3AC8)
  {
    result = swift_getWitnessTable(&unk_10017FED0, &type metadata for WeatherDataViewModel.SunriseSunsetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3AC8);
  }
  return result;
}

unint64_t sub_1000E9A58()
{
  unint64_t result;

  result = qword_1001C3AD0;
  if (!qword_1001C3AD0)
  {
    result = swift_getWitnessTable(&unk_1001800D0, &type metadata for WeatherDataViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3AD0);
  }
  return result;
}

unint64_t sub_1000E9A98()
{
  unint64_t result;

  result = qword_1001C3AD8;
  if (!qword_1001C3AD8)
  {
    result = swift_getWitnessTable(&unk_1001800F8, &type metadata for WeatherDataViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C3AD8);
  }
  return result;
}

uint64_t sub_1000E9AD4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2)
    goto LABEL_10;
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0)
    return swift_unknownObjectRetain(a3);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1000E9B4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_1000E9B5C()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000E9B64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000E9B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 200) + 8))(v1, v0);
}

uint64_t sub_1000E9B94()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000E9BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v3, v2);
}

void sub_1000E9BB4(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000E9BD0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000E9BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

void sub_1000E9BF0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_100029030(a1, v1);
}

unint64_t sub_1000E9BF8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_1000E49AC();
}

void sub_1000E9C04(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_100029030(v2, a2);
}

unint64_t sub_1000E9C0C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return sub_1000E49E8();
}

void sub_1000E9C18(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_1000E502C(a1, a2, v2);
}

uint64_t sub_1000E9C20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000E9C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t refreshed;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v0 = type metadata accessor for Scope(0);
  __chkstk_darwin(v0);
  sub_1000EC528();
  v1 = sub_100005D40(&qword_1001C3B78);
  v4 = sub_1000EC514(v1, v2, v3, (uint64_t)sub_1000E9F40);
  swift_release(v4);
  sub_1000A7198();
  sub_1000EC528();
  v5 = sub_100005D40(&qword_1001C3B80);
  v8 = sub_1000EC514(v5, v6, v7, (uint64_t)sub_1000EA02C);
  swift_release(v8);
  sub_1000A7198();
  sub_1000EC528();
  v9 = sub_100005D40(&qword_1001C3B88);
  sub_1000EC514(v9, v10, v11, (uint64_t)sub_1000EA050);
  sub_1000EC508();
  sub_1000EC4CC();
  v12 = sub_1000EC4FC();
  swift_release(v12);
  sub_1000EC530();
  sub_1000EC4F0();
  sub_1000EC528();
  v13 = sub_100005D40(&qword_1001C3B90);
  v16 = sub_1000EC514(v13, v14, v15, (uint64_t)sub_1000EA06C);
  swift_release(v16);
  sub_1000A7198();
  sub_1000EC528();
  sub_1000EC538();
  v17 = type metadata accessor for WidgetLocationManager();
  sub_1000EC4DC(v17, v18, v19, (uint64_t)sub_1000EA088);
  sub_1000EC508();
  sub_1000EC4CC();
  v20 = sub_1000EC4FC();
  swift_release(v20);
  sub_1000EC530();
  sub_1000EC4F0();
  sub_1000EC528();
  v21 = sub_100005D40(&qword_1001C3B98);
  sub_1000EC514(v21, v22, v23, (uint64_t)sub_1000EA434);
  sub_1000EC508();
  sub_1000EC4CC();
  sub_1000EC4FC();
  sub_1000EC530();
  sub_1000EC4F0();
  v24 = type metadata accessor for GeocodeService(0);
  v25 = Definition.thenConfigure<A>(as:configuration:)(v24, sub_1000EA568, 0, v24);
  swift_release(v25);
  sub_1000A7198();
  sub_1000EC528();
  v26 = sub_1000EC538();
  v27 = type metadata accessor for WeatherService(v26);
  sub_1000EC4DC(v27, v28, v29, (uint64_t)sub_1000EA5E8);
  sub_1000EC508();
  sub_1000EC4CC();
  v30 = sub_1000EC4FC();
  swift_release(v30);
  sub_1000EC530();
  sub_1000EC4F0();
  sub_1000EC528();
  sub_1000EC538();
  v31 = type metadata accessor for WeatherDataService();
  sub_1000EC4DC(v31, v32, v33, (uint64_t)sub_1000EA788);
  sub_1000EC508();
  sub_1000EC4CC();
  v34 = sub_1000EC4FC();
  swift_release(v34);
  sub_1000EC530();
  sub_1000EC4F0();
  sub_1000EC528();
  sub_1000EC538();
  v35 = type metadata accessor for EntryFactory();
  sub_1000EC4DC(v35, v36, v37, (uint64_t)sub_1000EA890);
  sub_1000EC508();
  sub_1000EC4CC();
  v38 = sub_1000EC4FC();
  swift_release(v38);
  sub_1000EC530();
  sub_1000EC4F0();
  sub_1000EC528();
  sub_1000EC538();
  refreshed = type metadata accessor for RefreshPolicyProvider();
  sub_1000EC4DC(refreshed, v40, v41, (uint64_t)sub_1000EA964);
  sub_1000EC508();
  sub_1000EC4CC();
  v42 = sub_1000EC4FC();
  swift_release(v42);
  sub_1000EC530();
  sub_1000EC4F0();
  sub_1000EC528();
  v43 = sub_1000EC538();
  v44 = type metadata accessor for StubPPTWeatherDataManager(v43);
  sub_1000EC4DC(v44, v45, v46, (uint64_t)sub_1000EA9F0);
  sub_1000EC508();
  sub_1000EC4CC();
  v47 = sub_1000EC4FC();
  swift_release(v47);
  sub_1000EC530();
  sub_1000EC4F0();
  sub_1000EC528();
  sub_1000EC538();
  v48 = type metadata accessor for DemoManager();
  sub_1000EC4DC(v48, v49, v50, (uint64_t)sub_1000EAA24);
  sub_1000EC508();
  sub_1000EC4CC();
  v51 = sub_1000EC4FC();
  swift_release(v51);
  sub_1000EC530();
  v52 = sub_1000EC4F0();
  ProxyContainer.private.getter(v52);
  RegistrationContainer.lazy(block:)(sub_1000EAA64, 0);
  return sub_1000A7198();
}

_QWORD *sub_1000E9F40@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  _QWORD v13[5];

  v4 = a1[3];
  v5 = a1[4];
  sub_100022330(a1, v4);
  v6 = sub_100005D40(&qword_1001C3C80);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v6, v6, v4, v5);
  if (v13[3])
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_100022330(a1, v8);
    v10 = sub_100005D40(&qword_1001C3C88);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v10, v10, v8, v9);
    if (v12[3])
    {
      v11 = type metadata accessor for WidgetTimelineTelemetryManager(0);
      swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
      result = (_QWORD *)WidgetTimelineTelemetryManager.init(flushManager:coordinator:)(v13, v12);
      a2[3] = v11;
      a2[4] = &protocol witness table for WidgetTimelineTelemetryManager;
      *a2 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000EA02C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000EB3CC(a1, &qword_1001C3C78, (uint64_t (*)(_QWORD))&type metadata accessor for LocationAccessDataProvider, (uint64_t (*)(_QWORD *))&LocationAccessDataProvider.init(locationManager:), (uint64_t)&protocol witness table for LocationAccessDataProvider, a2);
}

uint64_t sub_1000EA050@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000EAE3C((uint64_t (*)(_QWORD))&type metadata accessor for LocationDataModelFactory, (uint64_t (*)(void))&LocationDataModelFactory.init(), (uint64_t)&protocol witness table for LocationDataModelFactory, a1);
}

uint64_t sub_1000EA06C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000EAE3C((uint64_t (*)(_QWORD))&type metadata accessor for NonAppCellularRadioAccessTechnologyProvider, (uint64_t (*)(void))&NonAppCellularRadioAccessTechnologyProvider.init(), (uint64_t)&protocol witness table for NonAppCellularRadioAccessTechnologyProvider, a1);
}

_QWORD *sub_1000EA088(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  _QWORD v43[5];
  _QWORD v44[5];
  _QWORD v45[5];
  _QWORD v46[5];
  _QWORD v47[5];
  _QWORD v48[5];
  _QWORD v49[5];
  _QWORD v50[5];
  _QWORD v51[3];
  uint64_t v52;
  _QWORD v53[5];

  v2 = a1[3];
  v3 = a1[4];
  sub_100022330(a1, v2);
  v4 = sub_100005D40(&qword_1001C3C18);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v53, v4, v4, v2, v3);
  if (!v53[3])
  {
    __break(1u);
    goto LABEL_14;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_100022330(a1, v6);
  v8 = sub_100005D40(&qword_1001C3BC0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v51, v8, v8, v6, v7);
  if (!v52)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_100022330(a1, v9);
  v11 = sub_100070744(0, &qword_1001C3BF0, WCDefaultCityManager_ptr);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v12 = result;
  v13 = a1[3];
  v14 = a1[4];
  sub_100022330(a1, v13);
  v15 = sub_100005D40(&qword_1001C3C20);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v50, v15, v15, v13, v14);
  if (!v50[3])
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v16 = a1[3];
  v17 = a1[4];
  sub_100022330(a1, v16);
  v18 = sub_100005D40(&qword_1001C3B88);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v49, v18, v18, v16, v17);
  if (!v49[3])
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v19 = a1[3];
  v20 = a1[4];
  sub_100022330(a1, v19);
  v21 = sub_100005D40(&qword_1001C3C28);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v48, v21, v21, v19, v20);
  if (!v48[3])
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v22 = a1[3];
  v23 = a1[4];
  sub_100022330(a1, v22);
  v24 = sub_100005D40(&qword_1001C3C30);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v47, v24, v24, v22, v23);
  if (!v47[3])
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v25 = a1[3];
  v26 = a1[4];
  sub_100022330(a1, v25);
  v27 = sub_100005D40(&qword_1001C3C38);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v46, v27, v27, v25, v26);
  if (!v46[3])
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v28 = a1[3];
  v29 = a1[4];
  sub_100022330(a1, v28);
  v30 = sub_100005D40(&qword_1001C3C40);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v45, v30, v30, v28, v29);
  if (!v45[3])
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v31 = a1[3];
  v32 = a1[4];
  sub_100022330(a1, v31);
  v33 = sub_100005D40(&qword_1001C3C48);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v44, v33, v33, v31, v32);
  if (!v44[3])
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v34 = a1[3];
  v35 = a1[4];
  sub_100022330(a1, v34);
  v36 = sub_100005D40(&qword_1001C3C50);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v43, v36, v36, v34, v35);
  if (v43[3])
  {
    v37 = sub_1000EC430((uint64_t)v51, v52);
    __chkstk_darwin(v37);
    v39 = (_QWORD *)((char *)v43 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v40 + 16))(v39);
    *((_QWORD *)&v42 + 1) = v44;
    *(_QWORD *)&v42 = v45;
    v41 = sub_1000EBE8C(v53, *v39, v12, v50, (uint64_t)v49, v48, v47, v46, v42, v43);
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v51);
    return (_QWORD *)v41;
  }
LABEL_23:
  __break(1u);
  return result;
}

_QWORD *sub_1000EA434@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[40];
  _QWORD v18[5];
  _QWORD v19[5];

  v4 = a1[3];
  v5 = a1[4];
  sub_100022330(a1, v4);
  v6 = sub_100005D40(&qword_1001C3BC8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v19, v6, v6, v4, v5);
  if (!v19[3])
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_100022330(a1, v8);
  v10 = sub_100005D40(&qword_1001C3BB8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v10, v10, v8, v9);
  if (!v18[3])
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_100022330(a1, v11);
  v13 = sub_100005D40(&qword_1001C3C10);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v15, v13, v13, v11, v12);
  if (v16)
  {
    sub_100096428(&v15, (uint64_t)v17);
    v14 = type metadata accessor for GeocodeService(0);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    result = (_QWORD *)GeocodeService.init(appConfigurationManager:privacySampler:locationMetadataUpdater:)(v19, v18, v17);
    *a2 = result;
    a2[1] = &protocol witness table for GeocodeService;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

_QWORD *sub_1000EA568(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD v6[5];

  v2 = a2[3];
  v3 = a2[4];
  sub_100022330(a2, v2);
  v4 = sub_100005D40(&qword_1001C3BA0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v4, v4, v2, v3);
  if (v6[3])
  {
    GeocodeService.setupWeatherKitGeocoding(using:)(v6);
    return (_QWORD *)_s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1000EA5E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[4];
  _QWORD v21[3];
  uint64_t v22;

  v2 = type metadata accessor for WeatherServiceCaching(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v20[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001C3C00);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)&v20[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = a1[3];
  v9 = a1[4];
  sub_100022330(a1, v8);
  v10 = type metadata accessor for WDSEndpoint(0);
  dispatch thunk of ResolverType.resolve<A>(_:)(v7, v10, v10, v8, v9);
  result = (_QWORD *)_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v7, 1, v10);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    static WeatherServiceCaching.enabled.getter();
    v12 = a1[3];
    v13 = a1[4];
    sub_100022330(a1, v12);
    v14 = sub_100005D40(&qword_1001C3C08);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v21, v14, v14, v12, v13);
    v15 = v22;
    if (v22)
    {
      type metadata accessor for WeatherService(0);
      v16 = sub_100022330(v21, v15);
      v20[3] = v15;
      v17 = sub_1000EC3F4(v20);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v17, v16, v15);
      v18 = WeatherService.__allocating_init(endpoint:caching:networkMonitor:)(v7, v4, v20);
      _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v21);
      return (_QWORD *)v18;
    }
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000EA788(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v2 = a1[3];
  v3 = a1[4];
  sub_100022330(a1, v2);
  v4 = sub_100005D40(&qword_1001C3BC8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v16, v4, v4, v2, v3);
  if (!v17)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_100022330(a1, v6);
  v8 = sub_100005D40(&qword_1001C3BF8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v14, v8, v8, v6, v7);
  if (!v15)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_100022330(a1, v9);
  v11 = type metadata accessor for WeatherService(0);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (result)
  {
    v12 = (uint64_t)result;
    v13 = type metadata accessor for WeatherDataService();
    swift_allocObject(v13, 128, 7);
    return sub_1001116A4(&v16, &v14, v12);
  }
LABEL_7:
  __break(1u);
  return result;
}

_QWORD *sub_1000EA890(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v2 = a1[3];
  v3 = a1[4];
  sub_100022330(a1, v2);
  v4 = sub_100005D40(&qword_1001C3BC8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v4, v4, v2, v3);
  if (v11[3])
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_100022330(a1, v6);
    v8 = sub_100070744(0, &qword_1001C3BF0, WCDefaultCityManager_ptr);
    result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
    if (result)
    {
      v9 = result;
      v10 = type metadata accessor for EntryFactory();
      swift_allocObject(v10, 224, 7);
      return sub_100160ED0(v11, v9);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000EA964(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t refreshed;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v1 = a1[3];
  v2 = a1[4];
  sub_100022330(a1, v1);
  v3 = sub_100005D40(&qword_1001C3BC8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v7, v3, v3, v1, v2);
  if (v8)
  {
    refreshed = type metadata accessor for RefreshPolicyProvider();
    v6 = swift_allocObject(refreshed, 56, 7);
    sub_100096428(&v7, v6 + 16);
    return (_QWORD *)v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000EA9F0()
{
  uint64_t v0;

  v0 = type metadata accessor for StubPPTWeatherDataManager(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return StubPPTWeatherDataManager.init()();
}

uint64_t sub_1000EAA24()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for DemoManager();
  result = swift_allocObject(v0, 32, 7);
  *(_QWORD *)(result + 16) = 0xD00000000000001ALL;
  *(_QWORD *)(result + 24) = 0x8000000100188DC0;
  return result;
}

uint64_t sub_1000EAA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v0 = type metadata accessor for Scope(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005D40(&qword_1001C3BA0);
  v5 = RegistrationContainer.register<A>(_:name:factory:)(v4, 0, 0, sub_1000EAC94, 0, v4);
  v6 = enum case for Scope.singleton(_:);
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v7(v3, enum case for Scope.singleton(_:), v0);
  v8 = Definition.inScope(_:)(v3);
  swift_release(v8);
  swift_release(v5);
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v3, v0);
  v10 = sub_100005D40(&qword_1001C3BA8);
  v11 = RegistrationContainer.register<A>(_:name:factory:)(v10, 0, 0, sub_1000EAE20, 0, v10);
  v7(v3, v6, v0);
  v12 = Definition.inScope(_:)(v3);
  swift_release(v12);
  swift_release(v11);
  v9(v3, v0);
  v13 = type metadata accessor for WDSEndpoint(0);
  v14 = RegistrationContainer.register<A>(_:name:factory:)(v13, 0, 0, sub_1000EAE8C, 0, v13);
  v7(v3, enum case for Scope.containerSingleton(_:), v0);
  v15 = Definition.inScope(_:)(v3);
  swift_release(v15);
  swift_release(v14);
  v9(v3, v0);
  v16 = sub_100005D40(&qword_1001C3BB0);
  v17 = RegistrationContainer.register<A>(_:name:factory:)(v16, 0, 0, sub_1000EB384, 0, v16);
  swift_release(v17);
  v18 = sub_100005D40(&qword_1001C3BB8);
  v19 = RegistrationContainer.register<A>(_:name:factory:)(v18, 0, 0, sub_1000EB3A8, 0, v18);
  swift_release(v19);
  v20 = sub_100005D40(&qword_1001C3BC0);
  v21 = RegistrationContainer.register<A>(_:name:factory:)(v20, 0, 0, sub_1000EB474, 0, v20);
  return swift_release(v21);
}

void sub_1000EAC94(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v4 = a1[3];
  v5 = a1[4];
  sub_100022330(a1, v4);
  v6 = type metadata accessor for WeatherService(0);
  v7 = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v7)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_100022330(a1, v9);
  v11 = sub_100005D40(&qword_1001C3BA8);
  dispatch thunk of ResolverType.resolve<A>(_:)(&v25, v11, v11, v9, v10);
  if (!v26)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v12 = a1[3];
  v13 = a1[4];
  sub_100022330(a1, v12);
  v14 = type metadata accessor for WidgetLocationManager();
  v15 = dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (!v15)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v16 = (void *)v15;
  v17 = a1[3];
  v18 = a1[4];
  sub_100022330(a1, v17);
  v19 = sub_100005D40(&qword_1001C3BC8);
  dispatch thunk of ResolverType.resolve<A>(_:)(&v23, v19, v19, v17, v18);
  if (v24)
  {
    v20 = type metadata accessor for GeocodeWeatherService();
    swift_allocObject(v20, 112, 7);
    v21 = sub_100100F84(v8, &v25, v16, &v23);
    a2[3] = v20;
    sub_10002EF14(&qword_1001C3BE8, (uint64_t (*)(uint64_t))type metadata accessor for GeocodeWeatherService, (uint64_t)&unk_100180B58);
    a2[4] = v22;
    *a2 = v21;
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_1000EAE20@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000EAE3C((uint64_t (*)(_QWORD))&type metadata accessor for ProductRequirementsFactory, (uint64_t (*)(void))&ProductRequirementsFactory.init(), (uint64_t)&protocol witness table for ProductRequirementsFactory, a1);
}

uint64_t sub_1000EAE3C@<X0>(uint64_t (*a1)(_QWORD)@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;

  v8 = a1(0);
  sub_1000EC544(v8);
  result = a2();
  a4[3] = v4;
  a4[4] = a3;
  *a4 = result;
  return result;
}

_QWORD *sub_1000EAE90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;

  v39 = a2;
  v3 = type metadata accessor for URL(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for EndpointConfiguration(0);
  v6 = *(_QWORD *)(v38 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v38);
  v35 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - v9;
  v11 = type metadata accessor for AppConfiguration(0);
  v36 = *(_QWORD *)(v11 - 8);
  v37 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SettingReader(0);
  v15 = static SettingReader.shared.getter(v14);
  v16 = static Settings.WeatherEnvironment.contentEnvironment.getter();
  SettingReader.read<A>(_:)(v42);
  swift_release(v15);
  swift_release(v16);
  v17 = LOBYTE(v42[0]);
  v18 = a1[3];
  v19 = a1[4];
  sub_100022330(a1, v18);
  v20 = sub_100005D40(&qword_1001C3BC8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v40, v20, v20, v18, v19);
  if (v41)
  {
    sub_100096428(&v40, (uint64_t)v42);
    v22 = v43;
    v23 = v44;
    sub_100022330(v42, v43);
    dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v22, v23);
    v24 = AppConfiguration.endpointConfig(for:)(v17);
    v25 = EndpointConfiguration.useDynamicPortForWeatherData.getter(v24);
    v26 = v25;
    EndpointConfiguration.weatherDataURL.getter(v25);
    if ((v26 & 1) != 0)
    {
      v27 = v35;
      v28 = v38;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v35, v10, v38);
      v29 = *(unsigned __int8 *)(v6 + 80);
      v30 = (v29 + 16) & ~v29;
      v31 = swift_allocObject(&unk_1001B82C8, v30 + v7, v29 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v31 + v30, v27, v28);
      WDSEndpoint.init(url:portOverrideProvider:)(v5, sub_1000EC340, v31);
    }
    else
    {
      WDSEndpoint.init(url:)(v5);
      v28 = v38;
    }
    v33 = v36;
    v32 = v37;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v28);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v32);
    return (_QWORD *)_s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v42);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000EB118(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v30;
  uint64_t v31;

  v30 = a1;
  v31 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D40(&qword_1001C3BE0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v30 - v12;
  v14 = type metadata accessor for MockServer(0);
  v15 = static MockServer.shared.getter(v14);
  v16 = MockServer.listeningPort.getter(v15);
  v18 = v17;
  v19 = swift_release(v15);
  if ((v18 & 1) != 0)
  {
    EndpointConfiguration.weatherDataURL.getter(v19);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v7, 1);
    v20 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v21 = static Logger.automation.getter(v20);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to get port from mock server", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v31);
    sub_1000EC36C((uint64_t)v13, (uint64_t)v11);
    v25 = type metadata accessor for URLComponents(0);
    v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v11, 1, v25);
    if ((_DWORD)v26 == 1)
    {
      sub_1000EC3B4((uint64_t)v13);
      sub_1000EC3B4((uint64_t)v11);
      return 0;
    }
    else
    {
      v16 = URLComponents.port.getter(v26);
      v28 = v27;
      sub_1000EC3B4((uint64_t)v13);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v11, v25);
      if ((v28 & 1) != 0)
        return 0;
    }
  }
  return v16;
}

_QWORD *sub_1000EB384@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000EB3CC(a1, &qword_1001C3BD8, (uint64_t (*)(_QWORD))&type metadata accessor for PrivacySaltProvider, (uint64_t (*)(_QWORD *))&PrivacySaltProvider.init(identityService:), (uint64_t)&protocol witness table for PrivacySaltProvider, a2);
}

_QWORD *sub_1000EB3A8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000EB3CC(a1, &qword_1001C3BB0, (uint64_t (*)(_QWORD))&type metadata accessor for PrivacySampler, (uint64_t (*)(_QWORD *))&PrivacySampler.init(saltProvider:), (uint64_t)&protocol witness table for PrivacySampler, a2);
}

_QWORD *sub_1000EB3CC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t (*a4)(_QWORD *)@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  _QWORD v16[5];

  v11 = a1[3];
  v12 = a1[4];
  sub_100022330(a1, v11);
  v13 = sub_100005D40(a2);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v13, v13, v11, v12);
  if (v16[3])
  {
    v15 = a3(0);
    sub_1000EC544(v15);
    result = (_QWORD *)a4(v16);
    a6[3] = a3;
    a6[4] = a5;
    *a6 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1000EB474@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  __int128 v19;
  uint64_t v20;
  _QWORD v21[5];

  v4 = a1[3];
  v5 = a1[4];
  sub_100022330(a1, v4);
  v6 = sub_100005D40(&qword_1001C3BC8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v19, v6, v6, v4, v5);
  if (v20)
  {
    sub_100096428(&v19, (uint64_t)v21);
    sub_100099380((uint64_t)v21, (uint64_t)&v19);
    v8 = type metadata accessor for LocalSearchRequestService();
    v9 = swift_allocObject(v8, 56, 7);
    sub_100096428(&v19, v9 + 16);
    v10 = a1[3];
    v11 = a1[4];
    sub_100022330(a1, v10);
    v12 = sub_100005D40(&qword_1001C3BD0);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v12, v12, v10, v11);
    v13 = v18[0];
    if (v18[0])
    {
      v14 = v18[1];
      sub_100099380((uint64_t)v21, (uint64_t)&v19);
      v15 = type metadata accessor for LocalSearchRequestManager();
      v16 = swift_allocObject(v15, 144, 7);
      v17 = sub_1000EBFB8(v9, v13, v14, (uint64_t)&v19, 0, v16);
      a2[3] = v15;
      a2[4] = (uint64_t)&off_1001B6C28;
      *a2 = v17;
      return (_QWORD *)_s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v21);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for WeatherWidgetAssembly()
{
  return objc_opt_self(_TtC13WeatherWidget21WeatherWidgetAssembly);
}

uint64_t sub_1000EB5E0()
{
  return sub_1000E9C40();
}

uint64_t sub_1000EB5F4(_QWORD *a1, uint64_t a2, void *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, char *a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  id v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  uint64_t result;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  _QWORD *v82;
  objc_class *ObjectType;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD v92[3];
  void *v93;
  uint64_t (*v94)();
  uint64_t v95;
  objc_super v96;
  _BYTE v97[40];
  _BYTE v98[40];
  _QWORD v99[5];
  _QWORD v100[3];
  uint64_t v101;
  void *v102;
  _QWORD v103[6];

  v86 = a8;
  v87 = a7;
  v84 = a6;
  v82 = (_QWORD *)a5;
  v88 = a4;
  v89 = a1;
  v80 = a3;
  v85 = a10;
  v90 = a9;
  v91 = a11;
  ObjectType = (objc_class *)swift_getObjectType(a12);
  v13 = sub_100005D40(&qword_1001BFA28);
  __chkstk_darwin(v13);
  v81 = (uint64_t)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v79);
  v78 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v76 = *(_QWORD *)(v16 - 8);
  v77 = v16;
  __chkstk_darwin(v16);
  v75 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UnfairLock.Options(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103[3] = type metadata accessor for LocalSearchRequestManager();
  v103[4] = &off_1001B6C28;
  v103[0] = a2;
  v25 = OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_lock;
  v26 = sub_100005D40(&qword_1001C3C58);
  v27 = swift_allocObject(v26, ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72), *(unsigned __int8 *)(v22 + 80) | 7);
  *(_OWORD *)(v27 + 16) = xmmword_10017BD10;
  v28 = a12;
  static UnfairLock.Options.dataSynchronization.getter();
  v92[0] = v27;
  sub_10002EF14(&qword_1001C3C60, (uint64_t (*)(uint64_t))&type metadata accessor for UnfairLock.Options, (uint64_t)&protocol conformance descriptor for UnfairLock.Options);
  v30 = v29;
  v31 = sub_100005D40(&qword_1001C3C68);
  sub_100070708(&qword_1001C3C70, &qword_1001C3C68);
  dispatch thunk of SetAlgebra.init<A>(_:)(v92, v31, v32, v21, v30);
  v33 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  *(_QWORD *)&a12[v25] = UnfairLock.init(options:)(v24);
  v34 = &v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_didReceiveLocationAuthorization];
  *(_QWORD *)v34 = 0xD00000000000001FLL;
  *((_QWORD *)v34 + 1) = 0x8000000100186B80;
  *(_QWORD *)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_timer] = 0;
  v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationIsUpdating] = 0;
  v35 = OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationQueue;
  sub_100070744(0, (unint64_t *)&qword_1001C2238, OS_dispatch_queue_ptr);
  v36 = v20;
  static DispatchQoS.userInitiated.getter();
  v37 = v75;
  (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v75, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v77);
  v92[0] = &_swiftEmptyArrayStorage;
  sub_10002EF14(&qword_1001C2240, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v39 = v38;
  v40 = sub_100005D40(&qword_1001C2248);
  sub_100070708(&qword_1001C2250, &qword_1001C2248);
  v41 = v78;
  dispatch thunk of SetAlgebra.init<A>(_:)(v92, v40, v42, v79, v39);
  *(_QWORD *)&v28[v35] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000021, 0x8000000100188DE0, v36, v41, v37, 0);
  *(_QWORD *)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationManager] = 0;
  *(_QWORD *)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_completionQueue] = &_swiftEmptyArrayStorage;
  sub_100099380((uint64_t)v89, (uint64_t)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_geocodeManager]);
  sub_100099380((uint64_t)v103, (uint64_t)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_localSearchManager]);
  v43 = v80;
  *(_QWORD *)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_defaultCityManager] = v80;
  sub_100099380((uint64_t)v88, (uint64_t)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_iCloudStatusProvider]);
  v44 = v84;
  sub_100099380((uint64_t)v84, (uint64_t)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_ubiquitousKeyValueStoreProvider]);
  sub_100099380((uint64_t)v87, (uint64_t)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_currentLocationUpdateTelemetryBackend]);
  sub_100099380((uint64_t)v86, (uint64_t)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager]);
  sub_100099380((uint64_t)v90, (uint64_t)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationsOfInterestDataSource]);
  v45 = v85;
  sub_100099380((uint64_t)v85, (uint64_t)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_weatherLocationCoalescenceManager]);
  sub_100099380((uint64_t)v91, (uint64_t)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationMatchHelper]);
  v46 = type metadata accessor for SavedLocationsReconciler(0);
  swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
  v80 = v43;
  v47 = SavedLocationsReconciler.init(defaultCityManager:)();
  *(_QWORD *)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_savedLocationsReconciler] = v47;
  v48 = type metadata accessor for SyncedDataManager(0);
  v49 = type metadata accessor for URL(0);
  v50 = v81;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v81, 1, 1, v49);
  v51 = type metadata accessor for SyncedDataContextProvider(0);
  swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  v52 = SyncedDataContextProvider.init(dataStorageURL:useTransientContext:)(v50, 0);
  v93 = (void *)v51;
  v94 = (uint64_t (*)())&protocol witness table for SyncedDataContextProvider;
  v92[0] = v52;
  v101 = v46;
  v102 = &protocol witness table for SavedLocationsReconciler;
  v100[0] = v47;
  swift_retain(v47);
  v53 = SyncedDataManager.__allocating_init(syncedDataContextProvider:savedLocationsReconciler:)(v92, v100);
  sub_100099380((uint64_t)v44, (uint64_t)v92);
  v101 = v48;
  v102 = &protocol witness table for SyncedDataManager;
  v100[0] = v53;
  v54 = type metadata accessor for LocationDisplayContextReader(0);
  swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
  swift_retain(v53);
  v55 = LocationDisplayContextReader.init(keyValueStoreProvider:syncedDataManager:)(v92, v100);
  v56 = (uint64_t *)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationDisplayContextReader];
  v56[3] = v54;
  v56[4] = (uint64_t)&protocol witness table for LocationDisplayContextReader;
  *v56 = v55;
  v57 = (uint64_t)v44;
  sub_100099380((uint64_t)v44, (uint64_t)v92);
  v58 = v82;
  sub_100099380((uint64_t)v82, (uint64_t)v100);
  v99[3] = v48;
  v99[4] = &protocol witness table for SyncedDataManager;
  v99[0] = v53;
  v59 = type metadata accessor for SavedLocationsReader(0);
  swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
  swift_retain(v53);
  v60 = SavedLocationsReader.init(keyValueStoreProvider:locationDataModelFactory:syncedDataManager:testConfigurable:)(v92, v100, v99, 0, 0);
  v61 = (uint64_t *)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_savedLocationsReader];
  v61[3] = v59;
  v61[4] = (uint64_t)&protocol witness table for SavedLocationsReader;
  *v61 = v60;
  sub_100099380(v57, (uint64_t)v92);
  sub_100099380((uint64_t)v90, (uint64_t)v100);
  sub_100099380((uint64_t)v45, (uint64_t)v99);
  sub_100099380((uint64_t)v91, (uint64_t)v98);
  sub_100099380((uint64_t)v58, (uint64_t)v97);
  v62 = type metadata accessor for SavedLocationFinder(0);
  swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
  v63 = v80;
  v64 = SavedLocationFinder.init(ubiquitousKeyValueStoreProvider:locationsOfInterestDataSource:weatherLocationCoalescenceManager:locationMatchHelper:locationDataModelFactory:defaultCityManager:)(v92, v100, v99, v98, v97, v63);
  v65 = (uint64_t *)&v28[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_savedLocationFinder];
  v65[3] = v62;
  v65[4] = (uint64_t)&protocol witness table for SavedLocationFinder;
  *v65 = v64;

  v96.receiver = v28;
  v96.super_class = ObjectType;
  v66 = (char *)objc_msgSendSuper2(&v96, "init");
  v67 = *(NSObject **)&v66[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationQueue];
  v68 = swift_allocObject(&unk_1001B82F0, 24, 7);
  *(_QWORD *)(v68 + 16) = v66;
  v69 = swift_allocObject(&unk_1001B8318, 32, 7);
  *(_QWORD *)(v69 + 16) = sub_1000EC47C;
  *(_QWORD *)(v69 + 24) = v68;
  v94 = sub_1000EC494;
  v95 = v69;
  v92[0] = _NSConcreteStackBlock;
  v92[1] = 1107296256;
  v92[2] = sub_1000E9C20;
  v93 = &unk_1001B8330;
  v70 = _Block_copy(v92);
  v71 = v95;
  v72 = v66;
  swift_retain(v69);
  swift_release(v71);
  dispatch_sync(v67, v70);

  _Block_release(v70);
  swift_release(v53);

  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v91);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v85);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v90);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v86);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v87);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v84);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v58);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v88);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v103);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v89);
  LOBYTE(v63) = swift_isEscapingClosureAtFileLocation(v69, "", 96, 172, 28, 1);
  swift_release(v68);
  result = swift_release(v69);
  if ((v63 & 1) == 0)
    return (uint64_t)v72;
  __break(1u);
  return result;
}

uint64_t sub_1000EBE8C(_QWORD *a1, uint64_t a2, void *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, __int128 a9, _QWORD *a10)
{
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  _QWORD *v25;
  _QWORD v26[3];
  uint64_t v27;
  _UNKNOWN **v28;

  v25 = a8;
  v24 = a9;
  v27 = type metadata accessor for LocalSearchRequestManager();
  v28 = &off_1001B6C28;
  v26[0] = a2;
  v17 = (char *)objc_allocWithZone((Class)type metadata accessor for WidgetLocationManager());
  v18 = sub_1000EC430((uint64_t)v26, v27);
  __chkstk_darwin(v18);
  v20 = (uint64_t *)((char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = sub_1000EB5F4(a1, *v20, a3, a4, a5, a6, a7, v25, (_QWORD *)v24, *((_QWORD **)&v24 + 1), a10, v17);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v26);
  return v22;
}

uint64_t sub_1000EBFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;

  v41 = a2;
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  __chkstk_darwin(v11);
  v40 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v36);
  v37 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v14);
  v35 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PromiseDeduperFlags(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = &_swiftEmptyArrayStorage;
  sub_10002EF14(&qword_1001BEF70, v19, (uint64_t)&protocol conformance descriptor for PromiseDeduperFlags);
  v21 = v20;
  v22 = sub_100005D40(&qword_1001BEF78);
  v23 = (_QWORD *)a4;
  sub_100070708((unint64_t *)&qword_1001BEF80, &qword_1001BEF78);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v22, v24, v16, v21);
  v25 = sub_100005D40(&qword_1001BEF88);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  *(_QWORD *)(a6 + 72) = PromiseDeduper.init(options:)(v18);
  *(_QWORD *)(a6 + 80) = 0;
  *(_QWORD *)(a6 + 88) = 0;
  *(_QWORD *)(a6 + 96) = 0;
  *(_OWORD *)(a6 + 104) = xmmword_10017A3F0;
  *(_QWORD *)(a6 + 56) = a1;
  *(_QWORD *)(a6 + 64) = &protocol witness table for LocalSearchRequestService;
  *(_QWORD *)(a6 + 120) = v41;
  *(_QWORD *)(a6 + 128) = a3;
  sub_100099380(a4, a6 + 16);
  if (!a5)
  {
    sub_100070744(0, (unint64_t *)&qword_1001C2238, OS_dispatch_queue_ptr);
    swift_retain(a1);
    v26 = swift_retain(a3);
    v27 = v35;
    static DispatchQoS.unspecified.getter(v26);
    v42 = &_swiftEmptyArrayStorage;
    sub_10002EF14(&qword_1001C2240, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v29 = v28;
    v30 = sub_100005D40(&qword_1001C2248);
    sub_100070708(&qword_1001C2250, &qword_1001C2248);
    v31 = v37;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v30, v32, v36, v29);
    v33 = v40;
    (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v40, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v39);
    a5 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x8000000100187770, v27, v31, v33, 0);
    swift_release(a1);
    swift_release(a3);
  }
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v23);
  *(_QWORD *)(a6 + 136) = a5;
  return a6;
}

uint64_t sub_1000EC2E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for EndpointConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000EC340()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EndpointConfiguration(0) - 8) + 80);
  return sub_1000EB118(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1000EC36C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001C3BE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EC3B4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001C3BE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1000EC3F4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_1000EC430(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000EC458()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000EC47C()
{
  uint64_t v0;

  return sub_100067A0C(*(char **)(v0 + 16));
}

uint64_t sub_1000EC484()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EC494()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000EC4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EC4C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000EC4CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

uint64_t sub_1000EC4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RegistrationContainer.register<A>(_:name:factory:)(a1, 0, 0, a4, 0, a1);
}

uint64_t sub_1000EC4F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000EC4FC()
{
  uint64_t v0;

  return Definition.inScope(_:)(v0);
}

uint64_t sub_1000EC508()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000EC514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RegistrationContainer.register<A>(_:name:factory:)(a1, 0, 0, a4, 0, a1);
}

uint64_t sub_1000EC528()
{
  return ProxyContainer.public.getter();
}

uint64_t sub_1000EC530()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000EC538()
{
  return 0;
}

uint64_t sub_1000EC544(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

ValueMetadata *type metadata accessor for TemperatureUnitControlWidget()
{
  return &type metadata for TemperatureUnitControlWidget;
}

uint64_t sub_1000EC564(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A00E0, 1);
}

uint64_t sub_1000EC574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  type metadata accessor for ControlSize(0);
  sub_1000230F4();
  __chkstk_darwin(v0);
  sub_10002325C();
  v3 = v2 - v1;
  v4 = sub_100005D40(&qword_1001C3C90);
  v33 = *(_QWORD *)(v4 - 8);
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_10002325C();
  v8 = v7 - v6;
  v9 = sub_100005D40(&qword_1001C3C98);
  v34 = *(_QWORD *)(v9 - 8);
  sub_1000230F4();
  __chkstk_darwin(v10);
  sub_10002325C();
  v13 = v12 - v11;
  v35 = sub_100005D40(&qword_1001C3CA0);
  v36 = *(_QWORD *)(v35 - 8);
  sub_1000230F4();
  __chkstk_darwin(v14);
  sub_10002325C();
  v17 = v16 - v15;
  KeyPath = swift_getKeyPath(&unk_100180370);
  static ControlSize._1x1.getter();
  v19 = sub_1000EC9B4();
  v20 = sub_1000EC9F0();
  v21 = sub_1000ECA2C();
  ControlPicker.init<A, B, C, D, E, F, G>(kind:displayName:preferredSize:intentUpdatableProperty:title:value:affordances:)(0xD000000000000029, 0x8000000100188E10, 0xD000000000000010, 0x8000000100188E40, v3, KeyPath, sub_1000EC838, 0, sub_1000EC914, 0, sub_1000EC948, 0, &type metadata for Text, &type metadata for Text, v19, v20, v21, &protocol witness table for Text, &protocol witness table for Text);
  v22 = LocalizedStringKey.init(stringLiteral:)(0x74617265706D6554, 0xEF74696E55657275);
  v24 = v23;
  LOBYTE(KeyPath) = v25;
  v27 = v26;
  v28 = sub_1000ECA68();
  WidgetConfiguration.configurationDisplayName(_:)(v22, v24, KeyPath & 1, v27, v4, v28);
  swift_bridgeObjectRelease(v27);
  v29 = swift_bridgeObjectRelease(v24);
  (*(void (**)(uint64_t, uint64_t, __n128))(v33 + 8))(v8, v4, v29);
  v37 = v4;
  v38 = v28;
  v30 = sub_10004516C((uint64_t)&v37, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.disablesControlStateCaching()(v9, v30);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v13, v9);
  v37 = v9;
  v38 = v30;
  v31 = sub_10004516C((uint64_t)&v37, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>);
  WidgetConfiguration.hiddenControl()(v35, v31);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v17, v35);
}

uint64_t sub_1000EC838@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v2 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x8000000100188E40);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v9 = qword_1001DA1E8;
  v10 = (id)qword_1001DA1E8;
  result = Text.init(_:tableName:bundle:comment:)(v2, v4, v6 & 1, v8, 0, 0, v9);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v13 & 1;
  *(_QWORD *)(a1 + 24) = v14;
  return result;
}

uint64_t sub_1000EC914@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  result = sub_10012D1D4(*a1);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5 & 1;
  *(_QWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_1000EC948(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_10012D1D4(*a1);
  return ControlAffordances.init(tint:status:actionHint:)(0, v1, v3, v2 & 1, v4, 0, 0, 0, 0);
}

unint64_t sub_1000EC9B4()
{
  unint64_t result;

  result = qword_1001C3CA8;
  if (!qword_1001C3CA8)
  {
    result = swift_getWitnessTable(&unk_1001841A8, &unk_1001BA518);
    atomic_store(result, (unint64_t *)&qword_1001C3CA8);
  }
  return result;
}

unint64_t sub_1000EC9F0()
{
  unint64_t result;

  result = qword_1001C3CB0;
  if (!qword_1001C3CB0)
  {
    result = swift_getWitnessTable(&unk_1001841E8, &unk_1001BA518);
    atomic_store(result, (unint64_t *)&qword_1001C3CB0);
  }
  return result;
}

unint64_t sub_1000ECA2C()
{
  unint64_t result;

  result = qword_1001C3CB8;
  if (!qword_1001C3CB8)
  {
    result = swift_getWitnessTable(&unk_100183C84, &unk_1001BA590);
    atomic_store(result, (unint64_t *)&qword_1001C3CB8);
  }
  return result;
}

unint64_t sub_1000ECA68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C3CC0;
  if (!qword_1001C3CC0)
  {
    v1 = sub_100005DC4(&qword_1001C3C90);
    result = swift_getWitnessTable(&protocol conformance descriptor for ControlPicker<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C3CC0);
  }
  return result;
}

uint64_t sub_1000ECAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v0 = sub_100005DC4(&qword_1001C3CA0);
  v1 = sub_100005DC4(&qword_1001C3C98);
  v5 = sub_100005DC4(&qword_1001C3C90);
  v6 = sub_1000ECA68();
  v2 = sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v5 = v1;
  v6 = v2;
  v3 = sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>);
  v5 = v0;
  v6 = v3;
  return sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.hiddenControl()>>);
}

_QWORD *sub_1000ECB44(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for DailyViewAttributes(0);
    v9 = v8[5];
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *(_WORD *)((char *)a1 + v8[6]) = *(_WORD *)((char *)a2 + v8[6]);
    *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
    *((_BYTE *)a1 + v8[8]) = *((_BYTE *)a2 + v8[8]);
    *((_BYTE *)a1 + v8[9]) = *((_BYTE *)a2 + v8[9]);
    *((_BYTE *)a1 + v8[10]) = *((_BYTE *)a2 + v8[10]);
    *(_QWORD *)((char *)a1 + v8[11]) = *(_QWORD *)((char *)a2 + v8[11]);
    *((_BYTE *)a1 + v8[12]) = *((_BYTE *)a2 + v8[12]);
    *((_BYTE *)a1 + v8[13]) = *((_BYTE *)a2 + v8[13]);
    *((_BYTE *)a1 + v8[14]) = *((_BYTE *)a2 + v8[14]);
    *((_BYTE *)a1 + v8[15]) = *((_BYTE *)a2 + v8[15]);
    *(_QWORD *)((char *)a1 + v8[16]) = *(_QWORD *)((char *)a2 + v8[16]);
    v11 = v8[17];
    v12 = *(_QWORD *)((char *)a2 + v11);
    *(_QWORD *)((char *)a1 + v11) = v12;
    v13 = v8[18];
    v14 = *(_QWORD *)((char *)a2 + v13);
    *(_QWORD *)((char *)a1 + v13) = v14;
    v15 = v8[19];
    v16 = *(_QWORD *)((char *)a2 + v15);
    *(_QWORD *)((char *)a1 + v15) = v16;
    *(_QWORD *)((char *)a1 + v8[20]) = *(_QWORD *)((char *)a2 + v8[20]);
    *(_QWORD *)((char *)a1 + v8[21]) = *(_QWORD *)((char *)a2 + v8[21]);
    v17 = v8[22];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    swift_bridgeObjectRetain(v10);
    swift_retain(v12);
    swift_retain(v14);
    swift_retain(v16);
    v20 = sub_100005D40(&qword_1001BF090);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v20))
    {
      v21 = sub_100005D40(&qword_1001BF098);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v18, 0, 1, v20);
    }
    v23 = v8[23];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v23, 1, v20))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v24, v25, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v20);
    }
    v27 = *(int *)(a3 + 20);
    v28 = (_QWORD *)((char *)a1 + v27);
    v29 = (_QWORD *)((char *)a2 + v27);
    v30 = *v29;
    v31 = v29[1];
    *v28 = *v29;
    v28[1] = v31;
    v32 = v29[2];
    v28[2] = v32;
    swift_retain(v30);
    swift_retain(v31);
    swift_bridgeObjectRetain(v32);
  }
  return a1;
}

double sub_1000ECDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double result;

  v4 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for DailyViewAttributes(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[5]));
  swift_release(*(_QWORD *)(a1 + v5[17]));
  swift_release(*(_QWORD *)(a1 + v5[18]));
  swift_release(*(_QWORD *)(a1 + v5[19]));
  v6 = a1 + v5[22];
  v7 = sub_100005D40(&qword_1001BF090);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + v5[23];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v8, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v8, v7);
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  swift_release(*v9);
  swift_release(v9[1]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v9[2]).n128_u64[0];
  return result;
}

uint64_t sub_1000ECF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  v10 = v7[17];
  v11 = *(_QWORD *)(a2 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  v12 = v7[18];
  v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  v14 = v7[19];
  v15 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v16 = v7[22];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  swift_bridgeObjectRetain(v9);
  swift_retain(v11);
  swift_retain(v13);
  swift_retain(v15);
  v19 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v19))
  {
    v20 = sub_100005D40(&qword_1001BF098);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v19);
  }
  v21 = v7[23];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v21, 1, v19))
  {
    v24 = sub_100005D40(&qword_1001BF098);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v22, v23, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v22, 0, 1, v19);
  }
  v25 = *(int *)(a3 + 20);
  v26 = (uint64_t *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v28 = *v27;
  v29 = v27[1];
  *v26 = *v27;
  v26[1] = v29;
  v30 = v27[2];
  v26[2] = v30;
  swift_retain(v28);
  swift_retain(v29);
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t sub_1000ED17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = v7[6];
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  v14 = v7[17];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  swift_retain(v15);
  swift_release(v16);
  v17 = v7[18];
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  swift_retain(v18);
  swift_release(v19);
  v20 = v7[19];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_retain(v21);
  swift_release(v22);
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v23 = v7[22];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  v26 = sub_100005D40(&qword_1001BF090);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v26);
  v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v26);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v29 = *(_QWORD *)(v26 - 8);
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v29 + 8))(v24, v26);
LABEL_6:
    v30 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v29 + 24))(v24, v25, v26);
LABEL_7:
  v31 = v7[23];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  v34 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v31, 1, v26);
  v35 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v33, 1, v26);
  if (!v34)
  {
    v36 = *(_QWORD *)(v26 - 8);
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v36 + 24))(v32, v33, v26);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v36 + 8))(v32, v26);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v37 = sub_100005D40(&qword_1001BF098);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v32, v33, v26);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v32, 0, 1, v26);
LABEL_13:
  v38 = *(int *)(a3 + 20);
  v39 = a1 + v38;
  v40 = (uint64_t *)(a2 + v38);
  v41 = *(_QWORD *)(a1 + v38);
  v42 = *v40;
  *(_QWORD *)(a1 + v38) = *v40;
  swift_retain(v42);
  swift_release(v41);
  v43 = v40[1];
  v44 = *(_QWORD *)(v39 + 8);
  *(_QWORD *)(v39 + 8) = v43;
  swift_retain(v43);
  swift_release(v44);
  v45 = v40[2];
  v46 = *(_QWORD *)(v39 + 16);
  *(_QWORD *)(v39 + 16) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  return a1;
}

uint64_t sub_1000ED4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  *(_QWORD *)(a1 + v7[17]) = *(_QWORD *)(a2 + v7[17]);
  *(_QWORD *)(a1 + v7[18]) = *(_QWORD *)(a2 + v7[18]);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v8 = v7[22];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
  {
    v12 = sub_100005D40(&qword_1001BF098);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
  }
  v13 = v7[23];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v13, 1, v11))
  {
    v16 = sub_100005D40(&qword_1001BF098);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v14, v15, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
  }
  v17 = *(int *)(a3 + 20);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
  return a1;
}

uint64_t sub_1000ED71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  v10 = v7[17];
  v11 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  swift_release(v11);
  v12 = v7[18];
  v13 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_release(v13);
  v14 = v7[19];
  v15 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v15);
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v16 = v7[22];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_100005D40(&qword_1001BF090);
  v20 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v17, 1, v19);
  v21 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v19);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v22 = *(_QWORD *)(v19 - 8);
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v17, v19);
LABEL_6:
    v23 = sub_100005D40(&qword_1001BF098);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v22 + 40))(v17, v18, v19);
LABEL_7:
  v24 = v7[23];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v24, 1, v19);
  v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v19);
  if (!v27)
  {
    v29 = *(_QWORD *)(v19 - 8);
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 40))(v25, v26, v19);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v29 + 8))(v25, v19);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v30 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v25, v26, v19);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v19);
LABEL_13:
  v31 = *(int *)(a3 + 20);
  v32 = a1 + v31;
  v33 = (_QWORD *)(a2 + v31);
  v34 = *(_QWORD *)(a1 + v31);
  *(_QWORD *)(a1 + v31) = *v33;
  swift_release(v34);
  v35 = *(_QWORD *)(v32 + 8);
  *(_QWORD *)(v32 + 8) = v33[1];
  swift_release(v35);
  v36 = *(_QWORD *)(v32 + 16);
  *(_QWORD *)(v32 + 16) = v33[2];
  swift_bridgeObjectRelease(v36);
  return a1;
}

uint64_t sub_1000EDA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EDA3C);
}

void sub_1000EDA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10001C7FC();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    sub_100016B50(a1, a2, v6);
  }
  else
  {
    sub_100044448(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8));
    sub_1000443A4();
  }
}

uint64_t sub_1000EDA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EDAA4);
}

void sub_1000EDAA4()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10001C7FC();
  sub_10001C6D0();
  if (v0)
  {
    sub_1000A75F8();
    sub_100016B44(v1, v2, v3, v4);
  }
  else
  {
    sub_1000FA1E8();
    sub_1000443A4();
  }
}

uint64_t type metadata accessor for DailyView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C3D20, (uint64_t)&nominal type descriptor for DailyView);
}

uint64_t sub_1000EDB04(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for DailyViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1001803B8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000EDB74(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001A01A8, 1);
}

uint64_t sub_1000EDB84(uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = (uint64_t *)TupleTypeMetadata;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    v6 = *v5;
  }
  else
  {
    __chkstk_darwin(TupleTypeMetadata);
    v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      v9 = v5;
      v10 = v8;
      v11 = a2;
      do
      {
        v12 = *v9++;
        *v10++ = v12;
        --v11;
      }
      while (v11);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
    v6 = TupleTypeMetadata;
  }
  __chkstk_darwin(TupleTypeMetadata);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v15 = (int *)(v6 + 32);
    v16 = a2;
    do
    {
      if (a2 == 1)
        v17 = 0;
      else
        v17 = *v15;
      v19 = *v5++;
      v18 = v19;
      v20 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(&v14[v17], v20);
      v15 += 4;
      --v16;
    }
    while (v16);
  }
  return TupleView.init(_:)(v14, v6);
}

uint64_t sub_1000EDCC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v5 = v3 - 1;
    v6 = type metadata accessor for DailyForecastViewModel(0);
    sub_10000F7C4(a1+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * v5, a2, type metadata accessor for DailyForecastViewModel);
    v7 = a2;
    v8 = 0;
    v9 = v6;
  }
  else
  {
    v9 = type metadata accessor for DailyForecastViewModel(0);
    v7 = a2;
    v8 = 1;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v7, v8, 1, v9);
}

void sub_1000EDD58(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = type metadata accessor for DailyView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  sub_10000F7C4(v1, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DailyView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1001B83C8, v7 + v5, v6 | 7);
  sub_100011868((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for DailyView);
  *a1 = sub_1000EE89C;
  a1[1] = (uint64_t (*)(uint64_t))v8;
  sub_1000FA1C4();
}

void sub_1000EDE08(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  _OWORD v50[3];

  v45 = a1;
  v48 = a3;
  v4 = type metadata accessor for AccessibilityChildBehavior(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D40(&qword_1001C3D58);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100005D40(&qword_1001C3D60);
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005D40(&qword_1001C3D68);
  v47 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100005D40(&qword_1001C3D70);
  v17 = __chkstk_darwin(v46);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v10 = static Alignment.center.getter(v17);
  v10[1] = v20;
  v21 = sub_100005D40(&qword_1001C3D78);
  sub_1000EE148(a2, (uint64_t)v10 + *(int *)(v21 + 44));
  v23 = GeometryProxy.size.getter(v22);
  v25 = v24;
  v26 = static Alignment.topLeading.getter(v23);
  _FrameLayout.init(width:height:alignment:)(v50, 0, 1, v25, 0, v26, v27);
  sub_1000168D8((uint64_t)v10, (uint64_t)v13, &qword_1001C3D58);
  v28 = &v13[*(int *)(v11 + 36)];
  v29 = v50[1];
  *(_OWORD *)v28 = v50[0];
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v50[2];
  sub_100016904((uint64_t)v10, &qword_1001C3D58);
  static AccessibilityChildBehavior.contain.getter(v30);
  v31 = sub_1000EE8B0();
  View.accessibilityElement(children:)(v7, v11, v31);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100016904((uint64_t)v13, &qword_1001C3D60);
  v32 = LocalizedStringKey.init(stringLiteral:)(0x6F4620796C696144, 0xEE00747361636572);
  v36 = Text.init(_:tableName:bundle:comment:)(v32, v34, v33 & 1, v35, 0, 0, 0);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  v49[0] = v11;
  v49[1] = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v49, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibility(label:)(v36, v38, v42, v40, v14, OpaqueTypeConformance2);
  sub_100016868(v36, v38, v42);
  v44 = swift_bridgeObjectRelease(v40);
  (*(void (**)(char *, uint64_t, __n128))(v47 + 8))(v16, v14, v44);
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v46);
  sub_100016904((uint64_t)v19, &qword_1001C3D70);
}

void sub_1000EE148(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, _QWORD, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;

  v73 = a2;
  v74 = type metadata accessor for LargeDailyView(0);
  __chkstk_darwin(v74);
  v63 = (uint64_t)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100005D40(&qword_1001C3D90);
  __chkstk_darwin(v71);
  v72 = (uint64_t)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for MediumPrecipitationDailyView(0);
  __chkstk_darwin(v66);
  v64 = (uint64_t)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100005D40(&qword_1001C3D98);
  __chkstk_darwin(v67);
  v69 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for MediumTemperatureDailyView(0);
  __chkstk_darwin(v68);
  v61 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100005D40(&qword_1001C3DA0);
  __chkstk_darwin(v70);
  v65 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for DailyView(0);
  v9 = __chkstk_darwin(v62);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v60 - v12;
  v14 = type metadata accessor for WidgetFamily(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void (**)(char *, _QWORD, uint64_t))(v15 + 104);
  v18(v17, enum case for WidgetFamily.systemSmall(_:), v14);
  sub_100016878((unint64_t *)&qword_1001C1430, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
  v20 = v19;
  dispatch thunk of RawRepresentable.rawValue.getter(v14, v19);
  dispatch thunk of RawRepresentable.rawValue.getter(v14, v20);
  v21 = v77;
  v22 = v75;
  v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v17, v14);
  sub_10000F7C4(a1, (uint64_t)v13, type metadata accessor for DailyView);
  if (v21 == v22)
  {
    sub_100011894((uint64_t)v13, type metadata accessor for DailyView);
    goto LABEL_4;
  }
  v18(v17, enum case for WidgetFamily.systemMedium(_:), v14);
  dispatch thunk of RawRepresentable.rawValue.getter(v14, v20);
  dispatch thunk of RawRepresentable.rawValue.getter(v14, v20);
  v24 = v77;
  v25 = v75;
  v23(v17, v14);
  sub_100011894((uint64_t)v13, type metadata accessor for DailyView);
  if (v24 == v25)
  {
LABEL_4:
    v26 = type metadata accessor for DailyViewAttributes(0);
    v27 = *(unsigned __int8 *)(a1 + *(int *)(v26 + 24));
    sub_10000F7C4(a1, (uint64_t)v11, type metadata accessor for DailyView);
    if (v27 == 5)
    {
      v28 = v11[*(int *)(v26 + 60)];
      sub_100011894((uint64_t)v11, type metadata accessor for DailyView);
      v29 = v72;
      v31 = v70;
      v30 = v71;
      v33 = (uint64_t)v65;
      v32 = v66;
      if ((v28 & 1) == 0)
      {
        v34 = v61;
        sub_10000F7C4(a1, v61, type metadata accessor for DailyViewAttributes);
        v35 = v68;
        Text.Measurements.init()(v36);
        v37 = v69;
        sub_10000F7C4(v34, v69, type metadata accessor for MediumTemperatureDailyView);
        swift_storeEnumTagMultiPayload(v37, v67, 0);
        sub_100016878(&qword_1001C3DB0, type metadata accessor for MediumTemperatureDailyView);
        v39 = v38;
        sub_100016878(&qword_1001C3DB8, type metadata accessor for MediumPrecipitationDailyView);
        _ConditionalContent<>.init(storage:)(v37, v35, v32, v39, v40);
        v41 = v34;
        v42 = type metadata accessor for MediumTemperatureDailyView;
LABEL_9:
        sub_100011894(v41, v42);
        sub_1000168D8(v33, v29, &qword_1001C3DA0);
        swift_storeEnumTagMultiPayload(v29, v30, 0);
        v48 = sub_1000EE970();
        sub_100016878(&qword_1001C3DC0, type metadata accessor for LargeDailyView);
        _ConditionalContent<>.init(storage:)(v29, v31, v74, v48, v49);
        sub_100016904(v33, &qword_1001C3DA0);
        return;
      }
    }
    else
    {
      sub_100011894((uint64_t)v11, type metadata accessor for DailyView);
      v29 = v72;
      v31 = v70;
      v30 = v71;
      v33 = (uint64_t)v65;
      v32 = v66;
    }
    v43 = v64;
    sub_10000F7C4(a1, v64, type metadata accessor for DailyViewAttributes);
    v44 = v69;
    sub_10000F7C4(v43, v69, type metadata accessor for MediumPrecipitationDailyView);
    swift_storeEnumTagMultiPayload(v44, v67, 1);
    sub_100016878(&qword_1001C3DB0, type metadata accessor for MediumTemperatureDailyView);
    v46 = v45;
    sub_100016878(&qword_1001C3DB8, type metadata accessor for MediumPrecipitationDailyView);
    _ConditionalContent<>.init(storage:)(v44, v68, v32, v46, v47);
    v41 = v43;
    v42 = type metadata accessor for MediumPrecipitationDailyView;
    goto LABEL_9;
  }
  v50 = v63;
  sub_10000F7C4(a1, v63, type metadata accessor for DailyViewAttributes);
  v51 = a1 + *(int *)(v62 + 20);
  v75 = *(_QWORD *)v51;
  v76 = *(_OWORD *)(v51 + 8);
  v52 = sub_100005D40(&qword_1001BF600);
  v53 = Binding.projectedValue.getter(&v77, v52);
  v54 = v78;
  v55 = v74;
  v56 = v50 + *(int *)(v74 + 20);
  *(_QWORD *)v56 = v77;
  *(_OWORD *)(v56 + 8) = v54;
  Text.Measurements.init()(v53);
  v57 = v72;
  sub_10000F7C4(v50, v72, type metadata accessor for LargeDailyView);
  swift_storeEnumTagMultiPayload(v57, v71, 1);
  v58 = sub_1000EE970();
  sub_100016878(&qword_1001C3DC0, type metadata accessor for LargeDailyView);
  _ConditionalContent<>.init(storage:)(v57, v70, v55, v58, v59);
  sub_100011894(v50, type metadata accessor for LargeDailyView);
}

uint64_t sub_1000EE7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  type metadata accessor for DailyView(0);
  v7 = sub_1000FA074();
  sub_100083090(v7);
  v8 = sub_10001C7FC();
  sub_1000FA144(v8);
  sub_100016B34(v3[17]);
  sub_100016B34(v3[18]);
  sub_100016B34(v3[19]);
  v9 = v2 + v3[22];
  sub_100005D40(&qword_1001BF090);
  if (!sub_100016AB8(v9))
    sub_1000FA0B0();
  if (!sub_1000FA098())
    sub_100016C44();
  v10 = (_QWORD *)(v2 + *(int *)(v0 + 20));
  swift_release(*v10);
  swift_release(v10[1]);
  swift_bridgeObjectRelease(v10[2]);
  return sub_1000CD190(v1, v5 + v6, v4 | 7);
}

uint64_t sub_1000EE89C(uint64_t a1)
{
  return sub_1000F90F8(a1, (uint64_t)type metadata accessor for DailyView, (uint64_t (*)(uint64_t))sub_1000EDE08);
}

unint64_t sub_1000EE8B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C3D80;
  if (!qword_1001C3D80)
  {
    v1 = sub_100005DC4(&qword_1001C3D60);
    sub_100016A54(&qword_1001C3D88, &qword_1001C3D58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C3D80);
  }
  return result;
}

uint64_t type metadata accessor for LargeDailyView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C3E20, (uint64_t)&nominal type descriptor for LargeDailyView);
}

uint64_t type metadata accessor for MediumPrecipitationDailyView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C3EB8, (uint64_t)&nominal type descriptor for MediumPrecipitationDailyView);
}

uint64_t type metadata accessor for MediumTemperatureDailyView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C3F48, (uint64_t)&nominal type descriptor for MediumTemperatureDailyView);
}

unint64_t sub_1000EE970()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C3DA8;
  if (!qword_1001C3DA8)
  {
    v1 = sub_100005DC4(&qword_1001C3DA0);
    sub_100016878(&qword_1001C3DB0, type metadata accessor for MediumTemperatureDailyView);
    sub_100016878(&qword_1001C3DB8, type metadata accessor for MediumPrecipitationDailyView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C3DA8);
  }
  return result;
}

_QWORD *sub_1000EEA0C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for DailyViewAttributes(0);
    v9 = v8[5];
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *(_WORD *)((char *)a1 + v8[6]) = *(_WORD *)((char *)a2 + v8[6]);
    *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
    *((_BYTE *)a1 + v8[8]) = *((_BYTE *)a2 + v8[8]);
    *((_BYTE *)a1 + v8[9]) = *((_BYTE *)a2 + v8[9]);
    *((_BYTE *)a1 + v8[10]) = *((_BYTE *)a2 + v8[10]);
    *(_QWORD *)((char *)a1 + v8[11]) = *(_QWORD *)((char *)a2 + v8[11]);
    *((_BYTE *)a1 + v8[12]) = *((_BYTE *)a2 + v8[12]);
    *((_BYTE *)a1 + v8[13]) = *((_BYTE *)a2 + v8[13]);
    *((_BYTE *)a1 + v8[14]) = *((_BYTE *)a2 + v8[14]);
    *((_BYTE *)a1 + v8[15]) = *((_BYTE *)a2 + v8[15]);
    *(_QWORD *)((char *)a1 + v8[16]) = *(_QWORD *)((char *)a2 + v8[16]);
    v11 = v8[17];
    v12 = *(_QWORD *)((char *)a2 + v11);
    *(_QWORD *)((char *)a1 + v11) = v12;
    v13 = v8[18];
    v14 = *(_QWORD *)((char *)a2 + v13);
    *(_QWORD *)((char *)a1 + v13) = v14;
    v15 = v8[19];
    v16 = *(_QWORD *)((char *)a2 + v15);
    *(_QWORD *)((char *)a1 + v15) = v16;
    *(_QWORD *)((char *)a1 + v8[20]) = *(_QWORD *)((char *)a2 + v8[20]);
    *(_QWORD *)((char *)a1 + v8[21]) = *(_QWORD *)((char *)a2 + v8[21]);
    v17 = v8[22];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    swift_bridgeObjectRetain(v10);
    swift_retain(v12);
    swift_retain(v14);
    swift_retain(v16);
    v20 = sub_100005D40(&qword_1001BF090);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v20))
    {
      v21 = sub_100005D40(&qword_1001BF098);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v18, 0, 1, v20);
    }
    v23 = v8[23];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v23, 1, v20))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v24, v25, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v20);
    }
    v27 = *(int *)(a3 + 20);
    v28 = *(int *)(a3 + 24);
    v29 = (_QWORD *)((char *)a1 + v27);
    v30 = (_QWORD *)((char *)a2 + v27);
    v31 = *v30;
    v32 = v30[1];
    *v29 = *v30;
    v29[1] = v32;
    v33 = v30[2];
    v29[2] = v33;
    v34 = (char *)a1 + v28;
    v35 = (char *)a2 + v28;
    v36 = type metadata accessor for Text.Measurements(0);
    v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
    swift_retain(v31);
    swift_retain(v32);
    swift_bridgeObjectRetain(v33);
    v37(v34, v35, v36);
  }
  return a1;
}

uint64_t sub_1000EECE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for DailyViewAttributes(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[5]));
  swift_release(*(_QWORD *)(a1 + v5[17]));
  swift_release(*(_QWORD *)(a1 + v5[18]));
  swift_release(*(_QWORD *)(a1 + v5[19]));
  v6 = a1 + v5[22];
  v7 = sub_100005D40(&qword_1001BF090);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + v5[23];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v8, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v8, v7);
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  swift_release(*v9);
  swift_release(v9[1]);
  swift_bridgeObjectRelease(v9[2]);
  v10 = a1 + *(int *)(a2 + 24);
  v11 = type metadata accessor for Text.Measurements(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

uint64_t sub_1000EEE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for DailyViewAttributes(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
  *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
  *(_BYTE *)(a1 + v7[15]) = *(_BYTE *)(a2 + v7[15]);
  *(_QWORD *)(a1 + v7[16]) = *(_QWORD *)(a2 + v7[16]);
  v10 = v7[17];
  v11 = *(_QWORD *)(a2 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  v12 = v7[18];
  v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  v14 = v7[19];
  v15 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  *(_QWORD *)(a1 + v7[20]) = *(_QWORD *)(a2 + v7[20]);
  *(_QWORD *)(a1 + v7[21]) = *(_QWORD *)(a2 + v7[21]);
  v16 = v7[22];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  swift_bridgeObjectRetain(v9);
  swift_retain(v11);
  swift_retain(v13);
  swift_retain(v15);
  v19 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v19))
  {
    v20 = sub_100005D40(&qword_1001BF098);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v19);
  }
  v21 = v7[23];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v21, 1, v19))
  {
    v24 = sub_100005D40(&qword_1001BF098);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v22, v23, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v22, 0, 1, v19);
  }
  v25 = *(int *)(a3 + 20);
  v26 = *(int *)(a3 + 24);
  v27 = (uint64_t *)(a1 + v25);
  v28 = (uint64_t *)(a2 + v25);
  v29 = *v28;
  v30 = v28[1];
  *v27 = *v28;
  v27[1] = v30;
  v31 = v28[2];
  v27[2] = v31;
  v32 = a1 + v26;
  v33 = a2 + v26;
  v34 = type metadata accessor for Text.Measurements(0);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
  swift_retain(v29);
  swift_retain(v30);
  swift_bridgeObjectRetain(v31);
  v35(v32, v33, v34);
  return a1;
}

