WeatherWidget::WidgetDisplaySize_optional __swiftcall WidgetDisplaySize.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 4)
    LOBYTE(rawValue) = 4;
  return (WeatherWidget::WidgetDisplaySize_optional)rawValue;
}

uint64_t WidgetDisplaySize.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL sub_100005A58(char *a1, char *a2)
{
  return sub_10002043C(*a1, *a2);
}

uint64_t sub_100005A64()
{
  unsigned __int8 *v0;

  return sub_1000463F0(*v0);
}

void sub_100005A6C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10004657C(a1, *v1);
}

uint64_t sub_100005A74(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_100046604(a1, *v1);
}

WeatherWidget::WidgetDisplaySize_optional sub_100005A7C@<W0>(Swift::Int *a1@<X0>, WeatherWidget::WidgetDisplaySize_optional *a2@<X8>)
{
  WeatherWidget::WidgetDisplaySize_optional result;

  result.value = WidgetDisplaySize.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void sub_100005AA4(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = WidgetDisplaySize.rawValue.getter(*v1);
  sub_100006338();
}

BOOL static WidgetDisplaySize.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

BOOL sub_100005AD8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static WidgetDisplaySize.< infix(_:_:)(*a1, *a2);
}

BOOL sub_100005AE4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100005AF0(*a1, *a2);
}

BOOL sub_100005AF0(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 >= a1;
}

BOOL sub_100005B00(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100005B0C(*a1, *a2);
}

BOOL sub_100005B0C(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 >= a2;
}

BOOL sub_100005B1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100005B28(*a1, *a2);
}

BOOL sub_100005B28(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 < a1;
}

uint64_t sub_100005B38(double a1, double a2)
{
  double v3;
  double v4;
  double v5;

  if (CGSize.length.getter(a1, a2) == 1210.0)
    return 2;
  sub_10000632C();
  if (v3 > 1133.0)
    return 3;
  sub_10000632C();
  if (v4 > 667.0)
    return 2;
  sub_10000632C();
  return v5 > 320.0;
}

BOOL sub_100005BB8(unsigned __int8 a1)
{
  unsigned int v1;
  id v2;
  id v3;

  v1 = a1;
  v2 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  return v3 == (id)1 && v1 < 3;
}

uint64_t variable initialization expression of AggregateWeatherViewModel.__placeholderSunEvent@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 1, 1, v2);
}

uint64_t _s13WeatherWidget20WeatherDataViewModelOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t variable initialization expression of LocalSearchRequestManager.geocodeRequestDeduper()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  void *v10;

  v0 = type metadata accessor for PromiseDeduperFlags(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = &_swiftEmptyArrayStorage;
  v4 = sub_1000061B0(&qword_1001BEF70, v3, (uint64_t)&protocol conformance descriptor for PromiseDeduperFlags);
  v5 = sub_100005D40(&qword_1001BEF78);
  v6 = sub_100005D80();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v10, v5, v6, v0, v4);
  v7 = sub_100005D40(&qword_1001BEF88);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  return PromiseDeduper.init(options:)(v2);
}

uint64_t sub_100005D40(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100005D80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BEF80;
  if (!qword_1001BEF80)
  {
    v1 = sub_100005DC4(&qword_1001BEF78);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001BEF80);
  }
  return result;
}

uint64_t sub_100005DC4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

double variable initialization expression of LocalSearchRequestManager.$__lazy_storage_$_store@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 24) = xmmword_10017A3F0;
  return result;
}

uint64_t variable initialization expression of WeatherIntentResponse.code()
{
  return 0;
}

unint64_t sub_100005E2C()
{
  unint64_t result;

  result = qword_1001BEF90;
  if (!qword_1001BEF90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WidgetDisplaySize, &type metadata for WidgetDisplaySize);
    atomic_store(result, (unint64_t *)&qword_1001BEF90);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for WidgetDisplaySize(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WidgetDisplaySize(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetDisplaySize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100005F4C + 4 * byte_10017A405[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100005F80 + 4 * byte_10017A400[v4]))();
}

uint64_t sub_100005F80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100005F88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100005F90);
  return result;
}

uint64_t sub_100005F9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100005FA4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100005FA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100005FB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100005FBC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100005FC8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for WidgetDisplaySize()
{
  return &type metadata for WidgetDisplaySize;
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_1000062E0(a1, &qword_1001BEF98, (uint64_t)&unk_1001B4780);
}

__n128 initializeWithTake for DailyForecastWidget(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100006000(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100006020(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_1000062E0(a1, &qword_1001BEFA0, (uint64_t)&unk_1001B4808);
}

uint64_t sub_10000605C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10017A5A4, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100006098(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10017A5A4, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000060E0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  WitnessTable = swift_getWitnessTable(&unk_10017A5A4, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_100006138(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10017A5A4, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100006184()
{
  return sub_1000061B0((unint64_t *)&qword_1001BEFA8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10017A5D0);
}

uint64_t sub_1000061B0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000061F0()
{
  return sub_1000061B0(&qword_1001BEFB0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10017A578);
}

uint64_t initializeBufferWithCopyOfBuffer for CurrentObservationViewModel.AirQuality(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_10000624C(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100006258(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100006278(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1000062E0(a1, &qword_1001BEFB8, (uint64_t)&unk_1001B4888);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1000062E0(a1, &qword_1001BEFC0, (uint64_t)&unk_1001B4908);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1000062E0(a1, &qword_1001BEFC8, (uint64_t)&unk_1001B4988);
}

void sub_1000062E0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_10000632C()
{
  double v0;
  double v1;

  return CGSize.length.getter(v1, v0);
}

_QWORD *sub_100006340(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  int *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, char *, uint64_t);
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void (*v188)(char *, char *);
  uint64_t v189;
  int *v190;
  void (*v191)(char *, char *);
  uint64_t v192;
  void (*v193)(char *, char *, uint64_t);
  uint64_t v194;
  void (*v196)(char *, char *, uint64_t);
  char *v197;
  uint64_t v198;
  char *v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *a1 = *a2;
    v28 = v27 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v27);
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7((char *)a1, (char *)a2, v6);
    v8 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v196 = v13;
    v198 = v12;
    v13((char *)a1 + v8[6], (char *)a2 + v8[6], v12);
    v14 = v8[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = sub_100005D40(&qword_1001BF090);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v18((char *)a1 + v8[8], (char *)a2 + v8[8], v17);
    v19 = v8[9];
    v20 = (_QWORD *)((char *)a1 + v19);
    v21 = (_QWORD *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = v8[10];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    swift_bridgeObjectRetain(v22);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v17))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v18(v24, v25, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v17);
    }
    v29 = v8[11];
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v29, 1, v17))
    {
      v32 = sub_100005D40(&qword_1001BF098);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v18(v30, v31, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v17);
    }
    v33 = v8[12];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v193 = (void (*)(char *, char *, uint64_t))v7;
    v194 = v6;
    v7((_QWORD *)((char *)a1 + v33), (_QWORD *)((char *)a2 + v33), v6);
    v36 = (int *)type metadata accessor for ConditionViewModel(0);
    v37 = v36[5];
    v38 = &v34[v37];
    v201 = a2;
    v39 = &v35[v37];
    v40 = type metadata accessor for WeatherCondition(0);
    v188 = *(void (**)(char *, char *))(*(_QWORD *)(v40 - 8) + 16);
    v189 = v40;
    v188(v38, v39);
    v41 = v36[6];
    v42 = &v34[v41];
    v43 = &v35[v41];
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = v36[7];
    v46 = &v34[v45];
    v47 = &v35[v45];
    v48 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    v34[v36[8]] = v35[v36[8]];
    v34[v36[9]] = v35[v36[9]];
    v190 = v36;
    v34[v36[10]] = v35[v36[10]];
    *(_QWORD *)((char *)a1 + v8[13]) = *(_QWORD *)((char *)a2 + v8[13]);
    v49 = v8[14];
    v50 = (char *)a1 + v49;
    v51 = (char *)a2 + v49;
    v52 = type metadata accessor for CloudAltitudeKind(0);
    v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v48);
    v53(v50, v51, v52);
    v54 = v8[15];
    v55 = (char *)a1 + v54;
    v56 = (char *)v201 + v54;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v201 + v54, 1, v198))
    {
      v57 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v196(v55, v56, v198);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v55, 0, 1, v198);
    }
    v58 = v8[16];
    v59 = (char *)a1 + v58;
    v60 = (char *)v201 + v58;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v201 + v58, 1, v198))
    {
      v61 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      v196(v59, v60, v198);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v198);
    }
    v62 = v8[17];
    v63 = (char *)a1 + v62;
    v64 = (char *)v201 + v62;
    v65 = type metadata accessor for UVIndex(0);
    v191 = *(void (**)(char *, char *))(*(_QWORD *)(v65 - 8) + 16);
    v192 = v65;
    v191(v63, v64);
    v66 = v8[18];
    v67 = (char *)a1 + v66;
    v68 = (char *)v201 + v66;
    v69 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
    *(_QWORD *)((char *)a1 + v8[19]) = *(_QWORD *)((char *)v201 + v8[19]);
    v70 = v8[20];
    v71 = (char *)a1 + v70;
    v72 = (char *)v201 + v70;
    v73 = *((_QWORD *)v72 + 1);
    if (v73)
    {
      *(_QWORD *)v71 = *(_QWORD *)v72;
      *((_QWORD *)v71 + 1) = v73;
      v74 = *((_QWORD *)v72 + 2);
      v75 = *((_QWORD *)v72 + 3);
      v76 = v72[32];
      swift_bridgeObjectRetain(v73);
      sub_100006E58(v74, v75, v76);
      *((_QWORD *)v71 + 2) = v74;
      *((_QWORD *)v71 + 3) = v75;
      v71[32] = v76;
    }
    else
    {
      v77 = *((_OWORD *)v72 + 1);
      *(_OWORD *)v71 = *(_OWORD *)v72;
      *((_OWORD *)v71 + 1) = v77;
      v71[32] = v72[32];
    }
    v78 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
    v79 = v78[5];
    v200 = a1;
    v80 = (char *)a1 + v79;
    v81 = (char *)v201 + v79;
    v193((char *)a1 + v79, (char *)v201 + v79, v194);
    v82 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v196(&v80[v82[5]], &v81[v82[5]], v198);
    v18(&v80[v82[6]], &v81[v82[6]], v17);
    v18(&v80[v82[7]], &v81[v82[7]], v17);
    v83 = v82[8];
    v84 = &v80[v83];
    v85 = &v81[v83];
    v193(&v80[v83], &v81[v83], v194);
    ((void (*)(char *, char *, uint64_t))v188)(&v84[v190[5]], &v85[v190[5]], v189);
    v86 = v190[6];
    v87 = &v84[v86];
    v88 = &v85[v86];
    v89 = *((_QWORD *)v88 + 1);
    *(_QWORD *)v87 = *(_QWORD *)v88;
    *((_QWORD *)v87 + 1) = v89;
    v90 = v190[7];
    v91 = &v84[v90];
    v92 = &v85[v90];
    v93 = *((_QWORD *)v92 + 1);
    *(_QWORD *)v91 = *(_QWORD *)v92;
    *((_QWORD *)v91 + 1) = v93;
    v84[v190[8]] = v85[v190[8]];
    v84[v190[9]] = v85[v190[9]];
    v84[v190[10]] = v85[v190[10]];
    v94 = v82[9];
    v95 = &v80[v94];
    v96 = &v81[v94];
    v97 = type metadata accessor for Precipitation(0);
    v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v93);
    v98(v95, v96, v97);
    *(_QWORD *)&v80[v82[10]] = *(_QWORD *)&v81[v82[10]];
    v99 = v82[11];
    v100 = &v80[v99];
    v101 = &v81[v99];
    v102 = *((_QWORD *)v101 + 1);
    *(_QWORD *)v100 = *(_QWORD *)v101;
    *((_QWORD *)v100 + 1) = v102;
    v103 = v82[12];
    v104 = &v80[v103];
    v105 = &v81[v103];
    v106 = *((_QWORD *)v105 + 1);
    *(_QWORD *)v104 = *(_QWORD *)v105;
    *((_QWORD *)v104 + 1) = v106;
    v107 = v82[13];
    v108 = &v80[v107];
    v109 = &v81[v107];
    v110 = *((_QWORD *)v109 + 1);
    *(_QWORD *)v108 = *(_QWORD *)v109;
    *((_QWORD *)v108 + 1) = v110;
    v111 = v82[14];
    v112 = &v80[v111];
    v113 = &v81[v111];
    v114 = *((_QWORD *)v113 + 1);
    *(_QWORD *)v112 = *(_QWORD *)v113;
    *((_QWORD *)v112 + 1) = v114;
    v115 = v82[15];
    v197 = &v81[v115];
    v199 = &v80[v115];
    v116 = type metadata accessor for TemperatureScaleConfiguration(0);
    v117 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 16);
    swift_bridgeObjectRetain(v102);
    swift_bridgeObjectRetain(v106);
    swift_bridgeObjectRetain(v110);
    swift_bridgeObjectRetain(v114);
    v117(v199, v197, v116);
    v118 = v82[16];
    v119 = &v80[v118];
    v120 = &v81[v118];
    v121 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v120, 1, v121))
    {
      v122 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v119, v120, v121);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v119, 0, 1, v121);
    }
    v123 = v82[17];
    v124 = &v80[v123];
    v125 = &v81[v123];
    v126 = type metadata accessor for MoonEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v125, 1, v126))
    {
      v127 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v124, v125, v126);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v124, 0, 1, v126);
    }
    ((void (*)(char *, char *, uint64_t))v191)(&v80[v82[18]], &v81[v82[18]], v192);
    *(_QWORD *)&v80[v82[19]] = *(_QWORD *)&v81[v82[19]];
    v128 = v78[6];
    v129 = (_QWORD *)((char *)v200 + v128);
    v130 = v201;
    v131 = (_QWORD *)((char *)v201 + v128);
    v132 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v131, 1, (uint64_t)v132))
    {
      v133 = sub_100005D40(&qword_1001BF0C0);
      memcpy(v129, v131, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    }
    else
    {
      v134 = v131[1];
      *v129 = *v131;
      v129[1] = v134;
      v135 = v132[5];
      v136 = (char *)v129 + v135;
      v137 = (char *)v131 + v135;
      v138 = type metadata accessor for AttributedString(0);
      v139 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 16);
      swift_bridgeObjectRetain(v134);
      v139(v136, v137, v138);
      v140 = v132[6];
      v141 = (char *)v129 + v140;
      v142 = (char *)v131 + v140;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v131 + v140, 1, v138))
      {
        v143 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
      }
      else
      {
        v139(v141, v142, v138);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v141, 0, 1, v138);
      }
      v144 = v132[7];
      v145 = (_QWORD *)((char *)v129 + v144);
      v146 = (_QWORD *)((char *)v131 + v144);
      v147 = v146[1];
      *v145 = *v146;
      v145[1] = v147;
      swift_bridgeObjectRetain(v147);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v129, 0, 1, (uint64_t)v132);
      v130 = v201;
    }
    v148 = v78[7];
    v149 = (char *)v200 + v148;
    v150 = (uint64_t)v130 + v148;
    v151 = type metadata accessor for Location(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 16))(v149, v150, v151);
    v152 = v78[8];
    v153 = (_QWORD *)((char *)v200 + v152);
    v154 = (_QWORD *)((char *)v130 + v152);
    v155 = v154[1];
    *v153 = *v154;
    v153[1] = v155;
    *((_BYTE *)v200 + v78[9]) = *((_BYTE *)v130 + v78[9]);
    *((_BYTE *)v200 + v78[10]) = *((_BYTE *)v130 + v78[10]);
    v156 = v78[11];
    v157 = *(_QWORD *)((char *)v130 + v156);
    *(_QWORD *)((char *)v200 + v156) = v157;
    v158 = v78[12];
    v159 = (_QWORD *)((char *)v200 + v158);
    v160 = (_QWORD *)((char *)v130 + v158);
    v161 = v160[1];
    *v159 = *v160;
    v159[1] = v161;
    v162 = v78[13];
    v163 = *(_QWORD *)((char *)v130 + v162);
    *(_QWORD *)((char *)v200 + v162) = v163;
    v164 = v78[14];
    v165 = *(_QWORD *)((char *)v130 + v164);
    *(_QWORD *)((char *)v200 + v164) = v165;
    v166 = v78[15];
    v167 = *(_QWORD *)((char *)v130 + v166);
    *(_QWORD *)((char *)v200 + v166) = v167;
    v168 = v78[16];
    v202 = *(_QWORD *)((char *)v130 + v168);
    *(_QWORD *)((char *)v200 + v168) = v202;
    *((_BYTE *)v200 + v78[17]) = *((_BYTE *)v130 + v78[17]);
    v169 = v78[18];
    v170 = *(_QWORD *)((char *)v130 + v169);
    *(_QWORD *)((char *)v200 + v169) = v170;
    v171 = v78[19];
    v172 = v130;
    v173 = *(_QWORD *)((char *)v130 + v171);
    *(_QWORD *)((char *)v200 + v171) = v173;
    *(_QWORD *)((char *)v200 + v78[20]) = *(_QWORD *)((char *)v172 + v78[20]);
    *((_BYTE *)v200 + v78[21]) = *((_BYTE *)v172 + v78[21]);
    *((_BYTE *)v200 + v78[22]) = *((_BYTE *)v172 + v78[22]);
    *((_BYTE *)v200 + v78[23]) = *((_BYTE *)v172 + v78[23]);
    *((_BYTE *)v200 + v78[24]) = *((_BYTE *)v172 + v78[24]);
    v174 = v78[25];
    v175 = (_QWORD *)((char *)v200 + v174);
    v176 = (_QWORD *)((char *)v172 + v174);
    v177 = v176[1];
    *v175 = *v176;
    v175[1] = v177;
    *((_BYTE *)v200 + v78[26]) = *((_BYTE *)v172 + v78[26]);
    *(_QWORD *)((char *)v200 + v78[27]) = *(_QWORD *)((char *)v172 + v78[27]);
    *(_QWORD *)((char *)v200 + v78[28]) = *(_QWORD *)((char *)v172 + v78[28]);
    v178 = *(int *)(a3 + 20);
    v179 = (_QWORD *)((char *)v200 + v178);
    v180 = (_QWORD *)((char *)v172 + v178);
    swift_bridgeObjectRetain(v155);
    swift_retain(v157);
    swift_bridgeObjectRetain(v161);
    swift_retain(v163);
    swift_retain(v165);
    swift_retain(v167);
    swift_retain(v202);
    swift_retain(v170);
    swift_retain(v173);
    swift_bridgeObjectRetain(v177);
    v181 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v180, v181) == 1)
    {
      v182 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v182 - 8) + 16))(v179, v180, v182);
      v183 = v179;
      v184 = v181;
      v185 = 1;
    }
    else
    {
      v186 = *v180;
      *v179 = *v180;
      swift_retain(v186);
      v183 = v179;
      v184 = v181;
      v185 = 0;
    }
    swift_storeEnumTagMultiPayload(v183, v184, v185);
    return v200;
  }
  return (_QWORD *)v28;
}

uint64_t _s13WeatherWidget20WeatherDataViewModelOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_100006E58(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_100006E68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v52)(uint64_t);
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;

  v3 = type metadata accessor for UUID(0);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(a1, v3);
  v5 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v6 = a1 + v5[5];
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + v5[6], v7);
  v9 = a1 + v5[7];
  v10 = sub_100005D40(&qword_1001BF090);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(a1 + v5[8], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[9] + 8));
  v12 = a1 + v5[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v12, 1, v10))
    v11(v12, v10);
  v13 = a1 + v5[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v13, 1, v10))
    v11(v13, v10);
  v14 = a1 + v5[12];
  v56 = v4;
  v57 = v3;
  v4(v14, v3);
  v15 = (int *)type metadata accessor for ConditionViewModel(0);
  v16 = v14 + v15[5];
  v17 = type metadata accessor for WeatherCondition(0);
  v52 = *(void (**)(uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v53 = v17;
  v52(v16);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[7] + 8));
  v18 = a1 + v5[14];
  v19 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = a1 + v5[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v20, 1, v7))
    v8(v20, v7);
  v21 = a1 + v5[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v21, 1, v7))
    v8(v21, v7);
  v22 = a1 + v5[17];
  v23 = type metadata accessor for UVIndex(0);
  v54 = *(void (**)(uint64_t))(*(_QWORD *)(v23 - 8) + 8);
  v55 = v23;
  v54(v22);
  v24 = a1 + v5[18];
  v25 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = a1 + v5[20];
  v27 = *(_QWORD *)(v26 + 8);
  if (v27)
  {
    swift_bridgeObjectRelease(v27);
    sub_100007458(*(_QWORD *)(v26 + 16), *(_QWORD *)(v26 + 24), *(_BYTE *)(v26 + 32));
  }
  v28 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v29 = a1 + v28[5];
  v56(v29, v57);
  v30 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v8(v29 + v30[5], v7);
  v11(v29 + v30[6], v10);
  v11(v29 + v30[7], v10);
  v31 = v29 + v30[8];
  v56(v31, v57);
  ((void (*)(uint64_t, uint64_t))v52)(v31 + v15[5], v53);
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v15[7] + 8));
  v32 = v29 + v30[9];
  v33 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[14] + 8));
  v34 = v29 + v30[15];
  v35 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
  v36 = v29 + v30[16];
  v37 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v36, 1, v37))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
  v38 = v29 + v30[17];
  v39 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, v39))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  ((void (*)(uint64_t, uint64_t))v54)(v29 + v30[18], v55);
  v40 = a1 + v28[6];
  v41 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v40, 1, (uint64_t)v41))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + 8));
    v42 = v40 + v41[5];
    v43 = type metadata accessor for AttributedString(0);
    v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8);
    v44(v42, v43);
    v45 = v40 + v41[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v45, 1, v43))
      v44(v45, v43);
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + v41[7] + 8));
  }
  v46 = a1 + v28[7];
  v47 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[8] + 8));
  swift_release(*(_QWORD *)(a1 + v28[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[12] + 8));
  swift_release(*(_QWORD *)(a1 + v28[13]));
  swift_release(*(_QWORD *)(a1 + v28[14]));
  swift_release(*(_QWORD *)(a1 + v28[15]));
  swift_release(*(_QWORD *)(a1 + v28[16]));
  swift_release(*(_QWORD *)(a1 + v28[18]));
  swift_release(*(_QWORD *)(a1 + v28[19]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[25] + 8));
  v48 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v49 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v48, v49) != 1)
    return swift_release(*v48);
  v50 = type metadata accessor for Font.Context(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v48, v50);
}

uint64_t sub_100007458(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_100007468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  void *v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  const void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v183)(uint64_t, uint64_t);
  uint64_t v184;
  int *v185;
  void (*v186)(uint64_t, uint64_t);
  uint64_t v187;
  void (*v188)(uint64_t, uint64_t, uint64_t);
  uint64_t v189;
  void (*v191)(void *, const void *, uint64_t);
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v191 = v12;
  v193 = v11;
  v12((void *)(a1 + v7[6]), (const void *)(a2 + v7[6]), v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  v18 = v7[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v7[10];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  swift_bridgeObjectRetain(v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[11];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v26, 1, v16))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v27, (uint64_t)v28, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v16);
  }
  v30 = v7[12];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v188 = v6;
  v189 = v5;
  v6(a1 + v30, a2 + v30, v5);
  v33 = (int *)type metadata accessor for ConditionViewModel(0);
  v34 = v33[5];
  v35 = v31 + v34;
  v196 = a2;
  v36 = v32 + v34;
  v37 = type metadata accessor for WeatherCondition(0);
  v183 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
  v184 = v37;
  v183(v35, v36);
  v38 = v33[6];
  v39 = (_QWORD *)(v31 + v38);
  v40 = (_QWORD *)(v32 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = v33[7];
  v43 = (_QWORD *)(v31 + v42);
  v44 = (_QWORD *)(v32 + v42);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  *(_BYTE *)(v31 + v33[8]) = *(_BYTE *)(v32 + v33[8]);
  *(_BYTE *)(v31 + v33[9]) = *(_BYTE *)(v32 + v33[9]);
  v185 = v33;
  *(_BYTE *)(v31 + v33[10]) = *(_BYTE *)(v32 + v33[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v46 = v7[14];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for CloudAltitudeKind(0);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  v50(v47, v48, v49);
  v51 = v7[15];
  v52 = (void *)(a1 + v51);
  v53 = (const void *)(v196 + v51);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v196 + v51, 1, v193))
  {
    v54 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    v191(v52, v53, v193);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v52, 0, 1, v193);
  }
  v55 = v7[16];
  v56 = (void *)(a1 + v55);
  v57 = (const void *)(v196 + v55);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v196 + v55, 1, v193))
  {
    v58 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v191(v56, v57, v193);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v193);
  }
  v59 = v7[17];
  v60 = a1 + v59;
  v61 = v196 + v59;
  v62 = type metadata accessor for UVIndex(0);
  v186 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
  v187 = v62;
  v186(v60, v61);
  v63 = v7[18];
  v64 = a1 + v63;
  v65 = v196 + v63;
  v66 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(v196 + v7[19]);
  v67 = v7[20];
  v68 = a1 + v67;
  v69 = v196 + v67;
  v70 = *(_QWORD *)(v69 + 8);
  if (v70)
  {
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *(_QWORD *)(v68 + 8) = v70;
    v71 = *(_QWORD *)(v69 + 16);
    v72 = *(_QWORD *)(v69 + 24);
    v73 = *(_BYTE *)(v69 + 32);
    swift_bridgeObjectRetain(v70);
    sub_100006E58(v71, v72, v73);
    *(_QWORD *)(v68 + 16) = v71;
    *(_QWORD *)(v68 + 24) = v72;
    *(_BYTE *)(v68 + 32) = v73;
  }
  else
  {
    v74 = *(_OWORD *)(v69 + 16);
    *(_OWORD *)v68 = *(_OWORD *)v69;
    *(_OWORD *)(v68 + 16) = v74;
    *(_BYTE *)(v68 + 32) = *(_BYTE *)(v69 + 32);
  }
  v75 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v76 = v75[5];
  v195 = a1;
  v77 = a1 + v76;
  v78 = v196 + v76;
  v188(a1 + v76, v196 + v76, v189);
  v79 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v191((void *)(v77 + v79[5]), (const void *)(v78 + v79[5]), v193);
  v17(v77 + v79[6], v78 + v79[6], v16);
  v17(v77 + v79[7], v78 + v79[7], v16);
  v80 = v79[8];
  v81 = v77 + v80;
  v82 = v78 + v80;
  v188(v77 + v80, v78 + v80, v189);
  ((void (*)(uint64_t, uint64_t, uint64_t))v183)(v81 + v185[5], v82 + v185[5], v184);
  v83 = v185[6];
  v84 = (_QWORD *)(v81 + v83);
  v85 = (_QWORD *)(v82 + v83);
  v86 = v85[1];
  *v84 = *v85;
  v84[1] = v86;
  v87 = v185[7];
  v88 = (_QWORD *)(v81 + v87);
  v89 = (_QWORD *)(v82 + v87);
  v90 = v89[1];
  *v88 = *v89;
  v88[1] = v90;
  *(_BYTE *)(v81 + v185[8]) = *(_BYTE *)(v82 + v185[8]);
  *(_BYTE *)(v81 + v185[9]) = *(_BYTE *)(v82 + v185[9]);
  *(_BYTE *)(v81 + v185[10]) = *(_BYTE *)(v82 + v185[10]);
  v91 = v79[9];
  v92 = v77 + v91;
  v93 = v78 + v91;
  v94 = type metadata accessor for Precipitation(0);
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 16);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v90);
  v95(v92, v93, v94);
  *(_QWORD *)(v77 + v79[10]) = *(_QWORD *)(v78 + v79[10]);
  v96 = v79[11];
  v97 = (_QWORD *)(v77 + v96);
  v98 = (_QWORD *)(v78 + v96);
  v99 = v98[1];
  *v97 = *v98;
  v97[1] = v99;
  v100 = v79[12];
  v101 = (_QWORD *)(v77 + v100);
  v102 = (_QWORD *)(v78 + v100);
  v103 = v102[1];
  *v101 = *v102;
  v101[1] = v103;
  v104 = v79[13];
  v105 = (_QWORD *)(v77 + v104);
  v106 = (_QWORD *)(v78 + v104);
  v107 = v106[1];
  *v105 = *v106;
  v105[1] = v107;
  v108 = v79[14];
  v109 = (_QWORD *)(v77 + v108);
  v110 = (_QWORD *)(v78 + v108);
  v111 = v110[1];
  *v109 = *v110;
  v109[1] = v111;
  v112 = v79[15];
  v192 = v78 + v112;
  v194 = v77 + v112;
  v113 = type metadata accessor for TemperatureScaleConfiguration(0);
  v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 16);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v111);
  v114(v194, v192, v113);
  v115 = v79[16];
  v116 = (void *)(v77 + v115);
  v117 = (const void *)(v78 + v115);
  v118 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v117, 1, v118))
  {
    v119 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v118 - 8) + 16))(v116, v117, v118);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v116, 0, 1, v118);
  }
  v120 = v79[17];
  v121 = (void *)(v77 + v120);
  v122 = (const void *)(v78 + v120);
  v123 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v122, 1, v123))
  {
    v124 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v123 - 8) + 16))(v121, v122, v123);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v121, 0, 1, v123);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v186)(v77 + v79[18], v78 + v79[18], v187);
  *(_QWORD *)(v77 + v79[19]) = *(_QWORD *)(v78 + v79[19]);
  v125 = v75[6];
  v126 = (_QWORD *)(v195 + v125);
  v127 = v196;
  v128 = (_QWORD *)(v196 + v125);
  v129 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128, 1, (uint64_t)v129))
  {
    v130 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v126, v128, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
  }
  else
  {
    v131 = v128[1];
    *v126 = *v128;
    v126[1] = v131;
    v132 = v129[5];
    v133 = (char *)v126 + v132;
    v134 = (char *)v128 + v132;
    v135 = type metadata accessor for AttributedString(0);
    v136 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16);
    swift_bridgeObjectRetain(v131);
    v136(v133, v134, v135);
    v137 = v129[6];
    v138 = (char *)v126 + v137;
    v139 = (char *)v128 + v137;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128 + v137, 1, v135))
    {
      v140 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
    }
    else
    {
      v136(v138, v139, v135);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v138, 0, 1, v135);
    }
    v141 = v129[7];
    v142 = (_QWORD *)((char *)v126 + v141);
    v143 = (_QWORD *)((char *)v128 + v141);
    v144 = v143[1];
    *v142 = *v143;
    v142[1] = v144;
    swift_bridgeObjectRetain(v144);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v126, 0, 1, (uint64_t)v129);
    v127 = v196;
  }
  v145 = v75[7];
  v146 = v195 + v145;
  v147 = v127 + v145;
  v148 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 16))(v146, v147, v148);
  v149 = v75[8];
  v150 = (_QWORD *)(v195 + v149);
  v151 = (_QWORD *)(v127 + v149);
  v152 = v151[1];
  *v150 = *v151;
  v150[1] = v152;
  *(_BYTE *)(v195 + v75[9]) = *(_BYTE *)(v127 + v75[9]);
  *(_BYTE *)(v195 + v75[10]) = *(_BYTE *)(v127 + v75[10]);
  v153 = v75[11];
  v154 = *(_QWORD *)(v127 + v153);
  *(_QWORD *)(v195 + v153) = v154;
  v155 = v75[12];
  v156 = (_QWORD *)(v195 + v155);
  v157 = (_QWORD *)(v127 + v155);
  v158 = v157[1];
  *v156 = *v157;
  v156[1] = v158;
  v159 = v75[13];
  v160 = *(_QWORD *)(v127 + v159);
  *(_QWORD *)(v195 + v159) = v160;
  v161 = v75[14];
  v162 = *(_QWORD *)(v127 + v161);
  *(_QWORD *)(v195 + v161) = v162;
  v163 = v75[15];
  v164 = *(_QWORD *)(v127 + v163);
  *(_QWORD *)(v195 + v163) = v164;
  v165 = v75[16];
  v197 = *(_QWORD *)(v127 + v165);
  *(_QWORD *)(v195 + v165) = v197;
  *(_BYTE *)(v195 + v75[17]) = *(_BYTE *)(v127 + v75[17]);
  v166 = v75[18];
  v167 = *(_QWORD *)(v127 + v166);
  *(_QWORD *)(v195 + v166) = v167;
  v168 = v75[19];
  v169 = v127;
  v170 = *(_QWORD *)(v127 + v168);
  *(_QWORD *)(v195 + v168) = v170;
  *(_QWORD *)(v195 + v75[20]) = *(_QWORD *)(v169 + v75[20]);
  *(_BYTE *)(v195 + v75[21]) = *(_BYTE *)(v169 + v75[21]);
  *(_BYTE *)(v195 + v75[22]) = *(_BYTE *)(v169 + v75[22]);
  *(_BYTE *)(v195 + v75[23]) = *(_BYTE *)(v169 + v75[23]);
  *(_BYTE *)(v195 + v75[24]) = *(_BYTE *)(v169 + v75[24]);
  v171 = v75[25];
  v172 = (_QWORD *)(v195 + v171);
  v173 = (_QWORD *)(v169 + v171);
  v174 = v173[1];
  *v172 = *v173;
  v172[1] = v174;
  *(_BYTE *)(v195 + v75[26]) = *(_BYTE *)(v169 + v75[26]);
  *(_QWORD *)(v195 + v75[27]) = *(_QWORD *)(v169 + v75[27]);
  *(_QWORD *)(v195 + v75[28]) = *(_QWORD *)(v169 + v75[28]);
  v175 = *(int *)(a3 + 20);
  v176 = (uint64_t *)(v195 + v175);
  v177 = (uint64_t *)(v169 + v175);
  swift_bridgeObjectRetain(v152);
  swift_retain(v154);
  swift_bridgeObjectRetain(v158);
  swift_retain(v160);
  swift_retain(v162);
  swift_retain(v164);
  swift_retain(v197);
  swift_retain(v167);
  swift_retain(v170);
  swift_bridgeObjectRetain(v174);
  v178 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v177, v178) == 1)
  {
    v179 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v179 - 8) + 16))(v176, v177, v179);
    v180 = 1;
  }
  else
  {
    v181 = *v177;
    *v176 = *v177;
    swift_retain(v181);
    v180 = 0;
  }
  swift_storeEnumTagMultiPayload(v176, v178, v180);
  return v195;
}

uint64_t sub_100007F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const void *v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  int *v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  void (*v167)(char *, char *, uint64_t);
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  int v182;
  int v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v243;
  void (*v244)(uint64_t, uint64_t, uint64_t);
  uint64_t v245;
  uint64_t v246;
  int *v247;
  void (*v248)(uint64_t, uint64_t);
  uint64_t v249;
  void (*v250)(void *, const void *, uint64_t);
  void (*v251)(void *, const void *, uint64_t);
  void (*v252)(char *, char *, uint64_t);
  void (*v253)(uint64_t, uint64_t, uint64_t);
  char *v254;
  uint64_t v255;

  v5 = type metadata accessor for UUID(0);
  v253 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24);
  v253(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v243 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v243 + 24);
  v11(v8, v9, v10);
  v251 = (void (*)(void *, const void *, uint64_t))v11;
  v11(a1 + v6[6], a2 + v6[6], v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  v250 = (void (*)(void *, const void *, uint64_t))v17;
  v17(a1 + v6[8], a2 + v6[8], v15);
  v18 = v6[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = v6[10];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  LODWORD(v17) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v23, 1, v15);
  v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v15);
  if ((_DWORD)v17)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v24, v25, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v24, v15);
LABEL_6:
    v27 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v250(v24, v25, v15);
LABEL_7:
  v28 = v6[11];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v28, 1, v15);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v15);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v29, v30, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v29, v15);
LABEL_12:
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  v250(v29, v30, v15);
LABEL_13:
  v34 = v6[12];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v245 = v5;
  v253(a1 + v34, a2 + v34, v5);
  v37 = (int *)type metadata accessor for ConditionViewModel(0);
  v38 = v37[5];
  v39 = v35 + v38;
  v40 = v36 + v38;
  v41 = type metadata accessor for WeatherCondition(0);
  v248 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24);
  v249 = v41;
  v248(v39, v40);
  v42 = v37[6];
  v43 = (_QWORD *)(v35 + v42);
  v44 = (_QWORD *)(v36 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = v37[7];
  v48 = (_QWORD *)(v35 + v47);
  v49 = (_QWORD *)(v36 + v47);
  *v48 = *v49;
  v50 = v49[1];
  v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  *(_BYTE *)(v35 + v37[8]) = *(_BYTE *)(v36 + v37[8]);
  *(_BYTE *)(v35 + v37[9]) = *(_BYTE *)(v36 + v37[9]);
  *(_BYTE *)(v35 + v37[10]) = *(_BYTE *)(v36 + v37[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v52 = v6[14];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 24))(v53, v54, v55);
  v56 = v6[15];
  v57 = (void *)(a1 + v56);
  v58 = (const void *)(a2 + v56);
  LODWORD(v51) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v56, 1, v10);
  v59 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v58, 1, v10);
  v247 = v37;
  if ((_DWORD)v51)
  {
    if (!v59)
    {
      (*(void (**)(void *, const void *, uint64_t))(v243 + 16))(v57, v58, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v57, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v59)
  {
    (*(void (**)(void *, uint64_t))(v243 + 8))(v57, v10);
LABEL_18:
    v60 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_19;
  }
  v251(v57, v58, v10);
LABEL_19:
  v61 = v245;
  v62 = v6[16];
  v63 = (void *)(a1 + v62);
  v64 = (const void *)(a2 + v62);
  v65 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v62, 1, v10);
  v66 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v64, 1, v10);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v243 + 16))(v63, v64, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v243 + 8))(v63, v10);
LABEL_24:
    v67 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_25;
  }
  v251(v63, v64, v10);
LABEL_25:
  v68 = v6[17];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = type metadata accessor for UVIndex(0);
  v244 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 24);
  v244(v69, v70, v71);
  v72 = v6[18];
  v73 = a1 + v72;
  v74 = a2 + v72;
  v75 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 24))(v73, v74, v75);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v76 = v6[20];
  v77 = a1 + v76;
  v78 = (__int128 *)(a2 + v76);
  v79 = *(_QWORD *)(a1 + v76 + 8);
  v80 = *(_QWORD *)(a2 + v76 + 8);
  v246 = v71;
  if (v79)
  {
    if (v80)
    {
      *(_QWORD *)v77 = *(_QWORD *)v78;
      v81 = *((_QWORD *)v78 + 1);
      *(_QWORD *)(v77 + 8) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v79);
      v82 = *((_QWORD *)v78 + 2);
      v83 = *((_QWORD *)v78 + 3);
      v84 = *((_BYTE *)v78 + 32);
      sub_100006E58(v82, v83, v84);
      v85 = *(_QWORD *)(v77 + 16);
      v86 = *(_QWORD *)(v77 + 24);
      v87 = *(_BYTE *)(v77 + 32);
      *(_QWORD *)(v77 + 16) = v82;
      *(_QWORD *)(v77 + 24) = v83;
      *(_BYTE *)(v77 + 32) = v84;
      sub_100007458(v85, v86, v87);
    }
    else
    {
      sub_100008EC4(v77);
      v92 = *((_BYTE *)v78 + 32);
      v93 = v78[1];
      *(_OWORD *)v77 = *v78;
      *(_OWORD *)(v77 + 16) = v93;
      *(_BYTE *)(v77 + 32) = v92;
    }
  }
  else if (v80)
  {
    *(_QWORD *)v77 = *(_QWORD *)v78;
    v88 = *((_QWORD *)v78 + 1);
    *(_QWORD *)(v77 + 8) = v88;
    v89 = *((_QWORD *)v78 + 2);
    v90 = *((_QWORD *)v78 + 3);
    v91 = *((_BYTE *)v78 + 32);
    swift_bridgeObjectRetain(v88);
    sub_100006E58(v89, v90, v91);
    *(_QWORD *)(v77 + 16) = v89;
    *(_QWORD *)(v77 + 24) = v90;
    *(_BYTE *)(v77 + 32) = v91;
  }
  else
  {
    v94 = *v78;
    v95 = v78[1];
    *(_BYTE *)(v77 + 32) = *((_BYTE *)v78 + 32);
    *(_OWORD *)v77 = v94;
    *(_OWORD *)(v77 + 16) = v95;
  }
  v96 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v97 = v96[5];
  v98 = a1 + v97;
  v99 = a2 + v97;
  v253(a1 + v97, a2 + v97, v61);
  v100 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v251((void *)(v98 + v100[5]), (const void *)(v99 + v100[5]), v10);
  v250((void *)(v98 + v100[6]), (const void *)(v99 + v100[6]), v15);
  v250((void *)(v98 + v100[7]), (const void *)(v99 + v100[7]), v15);
  v101 = v100[8];
  v102 = v98 + v101;
  v103 = v99 + v101;
  v253(v98 + v101, v99 + v101, v61);
  ((void (*)(uint64_t, uint64_t, uint64_t))v248)(v102 + v247[5], v103 + v247[5], v249);
  v104 = v247[6];
  v105 = (_QWORD *)(v102 + v104);
  v106 = (_QWORD *)(v103 + v104);
  *v105 = *v106;
  v107 = v106[1];
  v108 = v105[1];
  v105[1] = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108);
  v109 = v247[7];
  v110 = (_QWORD *)(v102 + v109);
  v111 = (_QWORD *)(v103 + v109);
  *v110 = *v111;
  v112 = v111[1];
  v113 = v110[1];
  v110[1] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease(v113);
  *(_BYTE *)(v102 + v247[8]) = *(_BYTE *)(v103 + v247[8]);
  *(_BYTE *)(v102 + v247[9]) = *(_BYTE *)(v103 + v247[9]);
  *(_BYTE *)(v102 + v247[10]) = *(_BYTE *)(v103 + v247[10]);
  v114 = v100[9];
  v115 = v98 + v114;
  v116 = v99 + v114;
  v117 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 24))(v115, v116, v117);
  *(_QWORD *)(v98 + v100[10]) = *(_QWORD *)(v99 + v100[10]);
  v118 = v100[11];
  v119 = (_QWORD *)(v98 + v118);
  v120 = (_QWORD *)(v99 + v118);
  *v119 = *v120;
  v121 = v120[1];
  v122 = v119[1];
  v119[1] = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  v123 = v100[12];
  v124 = (_QWORD *)(v98 + v123);
  v125 = (_QWORD *)(v99 + v123);
  *v124 = *v125;
  v126 = v125[1];
  v127 = v124[1];
  v124[1] = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  v128 = v100[13];
  v129 = (_QWORD *)(v98 + v128);
  v130 = (_QWORD *)(v99 + v128);
  *v129 = *v130;
  v131 = v130[1];
  v132 = v129[1];
  v129[1] = v131;
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRelease(v132);
  v133 = v100[14];
  v134 = (_QWORD *)(v98 + v133);
  v135 = (_QWORD *)(v99 + v133);
  *v134 = *v135;
  v136 = v135[1];
  v137 = v134[1];
  v134[1] = v136;
  swift_bridgeObjectRetain(v136);
  swift_bridgeObjectRelease(v137);
  v138 = v100[15];
  v139 = v98 + v138;
  v140 = v99 + v138;
  v141 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v100[16];
  v143 = (void *)(v98 + v142);
  v144 = (const void *)(v99 + v142);
  v145 = type metadata accessor for SunEvents(0);
  LODWORD(v113) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v145);
  v146 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145);
  if ((_DWORD)v113)
  {
    if (!v146)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v147 = *(_QWORD *)(v145 - 8);
  if (v146)
  {
    (*(void (**)(void *, uint64_t))(v147 + 8))(v143, v145);
LABEL_41:
    v148 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v147 + 24))(v143, v144, v145);
LABEL_42:
  v149 = v100[17];
  v150 = (void *)(v98 + v149);
  v151 = (const void *)(v99 + v149);
  v152 = type metadata accessor for MoonEvents(0);
  v153 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, v152);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v152);
  if (v153)
  {
    if (!v154)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v152 - 8) + 16))(v150, v151, v152);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v150, 0, 1, v152);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v155 = *(_QWORD *)(v152 - 8);
  if (v154)
  {
    (*(void (**)(void *, uint64_t))(v155 + 8))(v150, v152);
LABEL_47:
    v156 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v155 + 24))(v150, v151, v152);
LABEL_48:
  v244(v98 + v100[18], v99 + v100[18], v246);
  *(_QWORD *)(v98 + v100[19]) = *(_QWORD *)(v99 + v100[19]);
  v157 = v96[6];
  v158 = (_QWORD *)(a1 + v157);
  v159 = (_QWORD *)(a2 + v157);
  v160 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v161 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, (uint64_t)v160);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, (uint64_t)v160);
  if (!v161)
  {
    if (v162)
    {
      sub_100011894((uint64_t)v158, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_54;
    }
    *v158 = *v159;
    v173 = v159[1];
    v174 = v158[1];
    v158[1] = v173;
    swift_bridgeObjectRetain(v173);
    swift_bridgeObjectRelease(v174);
    v175 = v160[5];
    v176 = (char *)v158 + v175;
    v177 = (char *)v159 + v175;
    v178 = type metadata accessor for AttributedString(0);
    v255 = *(_QWORD *)(v178 - 8);
    v252 = *(void (**)(char *, char *, uint64_t))(v255 + 24);
    v252(v176, v177, v178);
    v179 = v160[6];
    v180 = (char *)v158 + v179;
    v181 = (char *)v159 + v179;
    v182 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158 + v179, 1, v178);
    v183 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v181, 1, v178);
    if (v182)
    {
      if (!v183)
      {
        (*(void (**)(char *, char *, uint64_t))(v255 + 16))(v180, v181, v178);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v180, 0, 1, v178);
LABEL_65:
        v189 = v160[7];
        v190 = (_QWORD *)((char *)v158 + v189);
        v191 = (_QWORD *)((char *)v159 + v189);
        *v190 = *v191;
        v192 = v191[1];
        v193 = v190[1];
        v190[1] = v192;
        swift_bridgeObjectRetain(v192);
        swift_bridgeObjectRelease(v193);
        goto LABEL_66;
      }
    }
    else
    {
      if (!v183)
      {
        v252(v180, v181, v178);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v255 + 8))(v180, v178);
    }
    v188 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
    goto LABEL_65;
  }
  if (v162)
  {
LABEL_54:
    v172 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
    goto LABEL_66;
  }
  *v158 = *v159;
  v163 = v159[1];
  v158[1] = v163;
  v164 = v160[5];
  v165 = (char *)v158 + v164;
  v254 = (char *)v159 + v164;
  v166 = type metadata accessor for AttributedString(0);
  v167 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 16);
  swift_bridgeObjectRetain(v163);
  v167(v165, v254, v166);
  v168 = v160[6];
  v169 = (char *)v158 + v168;
  v170 = (char *)v159 + v168;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159 + v168, 1, v166))
  {
    v171 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
  }
  else
  {
    v167(v169, v170, v166);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v169, 0, 1, v166);
  }
  v184 = v160[7];
  v185 = (_QWORD *)((char *)v158 + v184);
  v186 = (_QWORD *)((char *)v159 + v184);
  *v185 = *v186;
  v187 = v186[1];
  v185[1] = v187;
  swift_bridgeObjectRetain(v187);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v158, 0, 1, (uint64_t)v160);
LABEL_66:
  v194 = v96[7];
  v195 = a1 + v194;
  v196 = a2 + v194;
  v197 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v197 - 8) + 24))(v195, v196, v197);
  v198 = v96[8];
  v199 = (_QWORD *)(a1 + v198);
  v200 = (_QWORD *)(a2 + v198);
  *v199 = *v200;
  v201 = v200[1];
  v202 = v199[1];
  v199[1] = v201;
  swift_bridgeObjectRetain(v201);
  swift_bridgeObjectRelease(v202);
  *(_BYTE *)(a1 + v96[9]) = *(_BYTE *)(a2 + v96[9]);
  *(_BYTE *)(a1 + v96[10]) = *(_BYTE *)(a2 + v96[10]);
  v203 = v96[11];
  v204 = *(_QWORD *)(a1 + v203);
  v205 = *(_QWORD *)(a2 + v203);
  *(_QWORD *)(a1 + v203) = v205;
  swift_retain(v205);
  swift_release(v204);
  v206 = v96[12];
  v207 = (_QWORD *)(a1 + v206);
  v208 = (_QWORD *)(a2 + v206);
  *v207 = *v208;
  v209 = v208[1];
  v210 = v207[1];
  v207[1] = v209;
  swift_bridgeObjectRetain(v209);
  swift_bridgeObjectRelease(v210);
  v211 = v96[13];
  v212 = *(_QWORD *)(a2 + v211);
  v213 = *(_QWORD *)(a1 + v211);
  *(_QWORD *)(a1 + v211) = v212;
  swift_retain(v212);
  swift_release(v213);
  v214 = v96[14];
  v215 = *(_QWORD *)(a2 + v214);
  v216 = *(_QWORD *)(a1 + v214);
  *(_QWORD *)(a1 + v214) = v215;
  swift_retain(v215);
  swift_release(v216);
  v217 = v96[15];
  v218 = *(_QWORD *)(a2 + v217);
  v219 = *(_QWORD *)(a1 + v217);
  *(_QWORD *)(a1 + v217) = v218;
  swift_retain(v218);
  swift_release(v219);
  v220 = v96[16];
  v221 = *(_QWORD *)(a2 + v220);
  v222 = *(_QWORD *)(a1 + v220);
  *(_QWORD *)(a1 + v220) = v221;
  swift_retain(v221);
  swift_release(v222);
  *(_BYTE *)(a1 + v96[17]) = *(_BYTE *)(a2 + v96[17]);
  v223 = v96[18];
  v224 = *(_QWORD *)(a2 + v223);
  v225 = *(_QWORD *)(a1 + v223);
  *(_QWORD *)(a1 + v223) = v224;
  swift_retain(v224);
  swift_release(v225);
  v226 = v96[19];
  v227 = *(_QWORD *)(a2 + v226);
  v228 = *(_QWORD *)(a1 + v226);
  *(_QWORD *)(a1 + v226) = v227;
  swift_retain(v227);
  swift_release(v228);
  *(_QWORD *)(a1 + v96[20]) = *(_QWORD *)(a2 + v96[20]);
  *(_BYTE *)(a1 + v96[21]) = *(_BYTE *)(a2 + v96[21]);
  *(_BYTE *)(a1 + v96[22]) = *(_BYTE *)(a2 + v96[22]);
  *(_BYTE *)(a1 + v96[23]) = *(_BYTE *)(a2 + v96[23]);
  *(_BYTE *)(a1 + v96[24]) = *(_BYTE *)(a2 + v96[24]);
  v229 = v96[25];
  v230 = (_QWORD *)(a1 + v229);
  v231 = (_QWORD *)(a2 + v229);
  *v230 = *v231;
  v232 = v231[1];
  v233 = v230[1];
  v230[1] = v232;
  swift_bridgeObjectRetain(v232);
  swift_bridgeObjectRelease(v233);
  *(_BYTE *)(a1 + v96[26]) = *(_BYTE *)(a2 + v96[26]);
  *(_QWORD *)(a1 + v96[27]) = *(_QWORD *)(a2 + v96[27]);
  *(_QWORD *)(a1 + v96[28]) = *(_QWORD *)(a2 + v96[28]);
  if (a1 != a2)
  {
    v234 = *(int *)(a3 + 20);
    v235 = (uint64_t *)(a1 + v234);
    v236 = (uint64_t *)(a2 + v234);
    sub_100016904(a1 + v234, &qword_1001BF0C8);
    v237 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v236, v237) == 1)
    {
      v238 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v238 - 8) + 16))(v235, v236, v238);
      v239 = 1;
    }
    else
    {
      v240 = *v236;
      *v235 = *v236;
      swift_retain(v240);
      v239 = 0;
    }
    swift_storeEnumTagMultiPayload(v235, v237, v239);
  }
  return a1;
}

uint64_t sub_100008EC4(uint64_t a1)
{
  destroy for CurrentObservationViewModel.AirQuality(a1);
  return a1;
}

uint64_t sub_100008EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  _OWORD *v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const void *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v116 = v11;
  v12(a1 + v7[6], a2 + v7[6], v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
  v18 = v7[10];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v18, 1, v16))
  {
    v21 = sub_100005D40(&qword_1001BF098);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v19, (uint64_t)v20, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v19, 0, 1, v16);
  }
  v22 = v7[11];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v112 = v17;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v22, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[12];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v113 = v5;
  v114 = v6;
  v6(a1 + v26, a2 + v26, v5);
  v29 = (int *)type metadata accessor for ConditionViewModel(0);
  v30 = v29[5];
  v31 = v27 + v30;
  v32 = v28 + v30;
  v33 = type metadata accessor for WeatherCondition(0);
  v108 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
  v109 = v33;
  v108(v31, v32);
  *(_OWORD *)(v27 + v29[6]) = *(_OWORD *)(v28 + v29[6]);
  *(_OWORD *)(v27 + v29[7]) = *(_OWORD *)(v28 + v29[7]);
  *(_BYTE *)(v27 + v29[8]) = *(_BYTE *)(v28 + v29[8]);
  *(_BYTE *)(v27 + v29[9]) = *(_BYTE *)(v28 + v29[9]);
  *(_BYTE *)(v27 + v29[10]) = *(_BYTE *)(v28 + v29[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v34 = v7[14];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  v38 = v7[15];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v38, 1, v116))
  {
    v41 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v39, (uint64_t)v40, v116);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v116);
  }
  v42 = v7[16];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v42, 1, v116))
  {
    v45 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v43, (uint64_t)v44, v116);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v43, 0, 1, v116);
  }
  v46 = v7[17];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for UVIndex(0);
  v110 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 32);
  v111 = v49;
  v110(v47, v48);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  v54 = v7[20];
  v55 = a1 + v54;
  v56 = a2 + v54;
  *(_BYTE *)(v55 + 32) = *(_BYTE *)(v56 + 32);
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  v58 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v59 = v58[5];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v114(a1 + v59, a2 + v59, v113);
  v62 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v12(v60 + v62[5], v61 + v62[5], v116);
  v112(v60 + v62[6], v61 + v62[6], v16);
  v112(v60 + v62[7], v61 + v62[7], v16);
  v63 = v62[8];
  v64 = v60 + v63;
  v65 = v61 + v63;
  v114(v60 + v63, v61 + v63, v113);
  ((void (*)(uint64_t, uint64_t, uint64_t))v108)(v64 + v29[5], v65 + v29[5], v109);
  *(_OWORD *)(v64 + v29[6]) = *(_OWORD *)(v65 + v29[6]);
  *(_OWORD *)(v64 + v29[7]) = *(_OWORD *)(v65 + v29[7]);
  *(_BYTE *)(v64 + v29[8]) = *(_BYTE *)(v65 + v29[8]);
  *(_BYTE *)(v64 + v29[9]) = *(_BYTE *)(v65 + v29[9]);
  *(_BYTE *)(v64 + v29[10]) = *(_BYTE *)(v65 + v29[10]);
  v66 = v62[9];
  v67 = v60 + v66;
  v68 = v61 + v66;
  v69 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
  *(_QWORD *)(v60 + v62[10]) = *(_QWORD *)(v61 + v62[10]);
  *(_OWORD *)(v60 + v62[11]) = *(_OWORD *)(v61 + v62[11]);
  *(_OWORD *)(v60 + v62[12]) = *(_OWORD *)(v61 + v62[12]);
  *(_OWORD *)(v60 + v62[13]) = *(_OWORD *)(v61 + v62[13]);
  *(_OWORD *)(v60 + v62[14]) = *(_OWORD *)(v61 + v62[14]);
  v70 = v62[15];
  v71 = v60 + v70;
  v72 = v61 + v70;
  v73 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
  v74 = v62[16];
  v75 = (void *)(v60 + v74);
  v76 = (const void *)(v61 + v74);
  v77 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v76, 1, v77))
  {
    v78 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v75, 0, 1, v77);
  }
  v79 = v62[17];
  v80 = (void *)(v60 + v79);
  v81 = (const void *)(v61 + v79);
  v82 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v81, 1, v82))
  {
    v83 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v80, v81, v82);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v80, 0, 1, v82);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v110)(v60 + v62[18], v61 + v62[18], v111);
  *(_QWORD *)(v60 + v62[19]) = *(_QWORD *)(v61 + v62[19]);
  v84 = v58[6];
  v85 = (_OWORD *)(a1 + v84);
  v86 = (_OWORD *)(a2 + v84);
  v87 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86, 1, (uint64_t)v87))
  {
    v88 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    *v85 = *v86;
    v89 = v87[5];
    v90 = (char *)v85 + v89;
    v91 = (char *)v86 + v89;
    v92 = type metadata accessor for AttributedString(0);
    v93 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32);
    v93(v90, v91, v92);
    v94 = v87[6];
    v95 = (char *)v85 + v94;
    v96 = (char *)v86 + v94;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86 + v94, 1, v92))
    {
      v97 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      v93(v95, v96, v92);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v92);
    }
    *(_OWORD *)((char *)v85 + v87[7]) = *(_OWORD *)((char *)v86 + v87[7]);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v85, 0, 1, (uint64_t)v87);
  }
  v98 = v58[7];
  v99 = a1 + v98;
  v100 = a2 + v98;
  v101 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v99, v100, v101);
  *(_OWORD *)(a1 + v58[8]) = *(_OWORD *)(a2 + v58[8]);
  *(_BYTE *)(a1 + v58[9]) = *(_BYTE *)(a2 + v58[9]);
  *(_BYTE *)(a1 + v58[10]) = *(_BYTE *)(a2 + v58[10]);
  *(_QWORD *)(a1 + v58[11]) = *(_QWORD *)(a2 + v58[11]);
  *(_OWORD *)(a1 + v58[12]) = *(_OWORD *)(a2 + v58[12]);
  *(_QWORD *)(a1 + v58[13]) = *(_QWORD *)(a2 + v58[13]);
  *(_QWORD *)(a1 + v58[14]) = *(_QWORD *)(a2 + v58[14]);
  *(_QWORD *)(a1 + v58[15]) = *(_QWORD *)(a2 + v58[15]);
  *(_QWORD *)(a1 + v58[16]) = *(_QWORD *)(a2 + v58[16]);
  *(_BYTE *)(a1 + v58[17]) = *(_BYTE *)(a2 + v58[17]);
  *(_QWORD *)(a1 + v58[18]) = *(_QWORD *)(a2 + v58[18]);
  *(_QWORD *)(a1 + v58[19]) = *(_QWORD *)(a2 + v58[19]);
  *(_QWORD *)(a1 + v58[20]) = *(_QWORD *)(a2 + v58[20]);
  *(_BYTE *)(a1 + v58[21]) = *(_BYTE *)(a2 + v58[21]);
  *(_BYTE *)(a1 + v58[22]) = *(_BYTE *)(a2 + v58[22]);
  *(_BYTE *)(a1 + v58[23]) = *(_BYTE *)(a2 + v58[23]);
  *(_BYTE *)(a1 + v58[24]) = *(_BYTE *)(a2 + v58[24]);
  *(_OWORD *)(a1 + v58[25]) = *(_OWORD *)(a2 + v58[25]);
  *(_BYTE *)(a1 + v58[26]) = *(_BYTE *)(a2 + v58[26]);
  *(_QWORD *)(a1 + v58[27]) = *(_QWORD *)(a2 + v58[27]);
  *(_QWORD *)(a1 + v58[28]) = *(_QWORD *)(a2 + v58[28]);
  v102 = *(int *)(a3 + 20);
  v103 = (void *)(a1 + v102);
  v104 = (const void *)(a2 + v102);
  v105 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v104, v105) == 1)
  {
    v106 = type metadata accessor for Font.Context(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v106 - 8) + 32))(v103, v104, v106);
    swift_storeEnumTagMultiPayload(v103, v105, 1);
  }
  else
  {
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100009864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const void *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  int *v161;
  int v162;
  int v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v235;
  void (*v236)(uint64_t, uint64_t, uint64_t);
  uint64_t v237;
  uint64_t v238;
  int *v239;
  void (*v240)(uint64_t, uint64_t);
  uint64_t v241;
  void (*v242)(void *, const void *, uint64_t);
  void (*v243)(void *, const void *, uint64_t);
  void (*v244)(char *, char *, uint64_t);
  void (*v245)(uint64_t, uint64_t, uint64_t);
  uint64_t v246;

  v5 = type metadata accessor for UUID(0);
  v245 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40);
  v245(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v235 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v235 + 40);
  v11(v8, v9, v10);
  v243 = (void (*)(void *, const void *, uint64_t))v11;
  v11(a1 + v6[6], a2 + v6[6], v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40);
  v17(v13, v14, v15);
  v242 = (void (*)(void *, const void *, uint64_t))v17;
  v17(a1 + v6[8], a2 + v6[8], v15);
  v18 = v6[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = v6[10];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  LODWORD(v17) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v24, 1, v15);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v15);
  if ((_DWORD)v17)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v25, v26, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v25, v15);
LABEL_6:
    v28 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  v242(v25, v26, v15);
LABEL_7:
  v29 = v6[11];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v29, 1, v15);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v15);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v30, v31, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v30, v15);
LABEL_12:
    v34 = sub_100005D40(&qword_1001BF098);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  v242(v30, v31, v15);
LABEL_13:
  v35 = v6[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v237 = v5;
  v245(a1 + v35, a2 + v35, v5);
  v38 = (int *)type metadata accessor for ConditionViewModel(0);
  v39 = v38[5];
  v40 = v36 + v39;
  v41 = v37 + v39;
  v42 = type metadata accessor for WeatherCondition(0);
  v240 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40);
  v241 = v42;
  v240(v40, v41);
  v43 = v38[6];
  v44 = (_QWORD *)(v36 + v43);
  v45 = (uint64_t *)(v37 + v43);
  v47 = *v45;
  v46 = v45[1];
  v48 = v44[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease(v48);
  v49 = v38[7];
  v50 = (_QWORD *)(v36 + v49);
  v51 = (uint64_t *)(v37 + v49);
  v53 = *v51;
  v52 = v51[1];
  v54 = v50[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease(v54);
  *(_BYTE *)(v36 + v38[8]) = *(_BYTE *)(v37 + v38[8]);
  *(_BYTE *)(v36 + v38[9]) = *(_BYTE *)(v37 + v38[9]);
  *(_BYTE *)(v36 + v38[10]) = *(_BYTE *)(v37 + v38[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v55 = v6[14];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  v59 = v6[15];
  v60 = (void *)(a1 + v59);
  v61 = (const void *)(a2 + v59);
  LODWORD(v40) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v59, 1, v10);
  v62 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v61, 1, v10);
  v239 = v38;
  if ((_DWORD)v40)
  {
    if (!v62)
    {
      (*(void (**)(void *, const void *, uint64_t))(v235 + 32))(v60, v61, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v60, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v62)
  {
    (*(void (**)(void *, uint64_t))(v235 + 8))(v60, v10);
LABEL_18:
    v63 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_19;
  }
  v243(v60, v61, v10);
LABEL_19:
  v64 = v237;
  v65 = v6[16];
  v66 = (void *)(a1 + v65);
  v67 = (const void *)(a2 + v65);
  v68 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v65, 1, v10);
  v69 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(void *, const void *, uint64_t))(v235 + 32))(v66, v67, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v69)
  {
    (*(void (**)(void *, uint64_t))(v235 + 8))(v66, v10);
LABEL_24:
    v70 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_25;
  }
  v243(v66, v67, v10);
LABEL_25:
  v71 = v6[17];
  v72 = a1 + v71;
  v73 = a2 + v71;
  v74 = type metadata accessor for UVIndex(0);
  v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 40);
  v75(v72, v73, v74);
  v76 = v6[18];
  v77 = a1 + v76;
  v78 = a2 + v76;
  v79 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 40))(v77, v78, v79);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v80 = v6[20];
  v81 = a1 + v80;
  v82 = a2 + v80;
  v83 = *(_QWORD *)(a1 + v80 + 8);
  v236 = v75;
  v238 = v74;
  if (v83)
  {
    v84 = *(_QWORD *)(v82 + 8);
    if (v84)
    {
      *(_QWORD *)v81 = *(_QWORD *)v82;
      *(_QWORD *)(v81 + 8) = v84;
      swift_bridgeObjectRelease(v83);
      v85 = *(_BYTE *)(v82 + 32);
      v86 = *(_QWORD *)(v81 + 16);
      v87 = *(_QWORD *)(v81 + 24);
      v88 = *(_BYTE *)(v81 + 32);
      *(_OWORD *)(v81 + 16) = *(_OWORD *)(v82 + 16);
      *(_BYTE *)(v81 + 32) = v85;
      sub_100007458(v86, v87, v88);
      goto LABEL_30;
    }
    sub_100008EC4(v81);
  }
  v89 = *(_OWORD *)(v82 + 16);
  *(_OWORD *)v81 = *(_OWORD *)v82;
  *(_OWORD *)(v81 + 16) = v89;
  *(_BYTE *)(v81 + 32) = *(_BYTE *)(v82 + 32);
LABEL_30:
  v90 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v91 = v90[5];
  v92 = a1 + v91;
  v93 = a2 + v91;
  v245(a1 + v91, a2 + v91, v64);
  v94 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v243((void *)(v92 + v94[5]), (const void *)(v93 + v94[5]), v10);
  v242((void *)(v92 + v94[6]), (const void *)(v93 + v94[6]), v15);
  v242((void *)(v92 + v94[7]), (const void *)(v93 + v94[7]), v15);
  v95 = v94[8];
  v96 = v92 + v95;
  v97 = v93 + v95;
  v245(v92 + v95, v93 + v95, v64);
  ((void (*)(uint64_t, uint64_t, uint64_t))v240)(v96 + v239[5], v97 + v239[5], v241);
  v98 = v239[6];
  v99 = (_QWORD *)(v96 + v98);
  v100 = (uint64_t *)(v97 + v98);
  v102 = *v100;
  v101 = v100[1];
  v103 = v99[1];
  *v99 = v102;
  v99[1] = v101;
  swift_bridgeObjectRelease(v103);
  v104 = v239[7];
  v105 = (_QWORD *)(v96 + v104);
  v106 = (uint64_t *)(v97 + v104);
  v108 = *v106;
  v107 = v106[1];
  v109 = v105[1];
  *v105 = v108;
  v105[1] = v107;
  swift_bridgeObjectRelease(v109);
  *(_BYTE *)(v96 + v239[8]) = *(_BYTE *)(v97 + v239[8]);
  *(_BYTE *)(v96 + v239[9]) = *(_BYTE *)(v97 + v239[9]);
  *(_BYTE *)(v96 + v239[10]) = *(_BYTE *)(v97 + v239[10]);
  v110 = v94[9];
  v111 = v92 + v110;
  v112 = v93 + v110;
  v113 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 40))(v111, v112, v113);
  *(_QWORD *)(v92 + v94[10]) = *(_QWORD *)(v93 + v94[10]);
  v114 = v94[11];
  v115 = (_QWORD *)(v92 + v114);
  v116 = (uint64_t *)(v93 + v114);
  v118 = *v116;
  v117 = v116[1];
  v119 = v115[1];
  *v115 = v118;
  v115[1] = v117;
  swift_bridgeObjectRelease(v119);
  v120 = v94[12];
  v121 = (_QWORD *)(v92 + v120);
  v122 = (uint64_t *)(v93 + v120);
  v124 = *v122;
  v123 = v122[1];
  v125 = v121[1];
  *v121 = v124;
  v121[1] = v123;
  swift_bridgeObjectRelease(v125);
  v126 = v94[13];
  v127 = (_QWORD *)(v92 + v126);
  v128 = (uint64_t *)(v93 + v126);
  v130 = *v128;
  v129 = v128[1];
  v131 = v127[1];
  *v127 = v130;
  v127[1] = v129;
  swift_bridgeObjectRelease(v131);
  v132 = v94[14];
  v133 = (_QWORD *)(v92 + v132);
  v134 = (uint64_t *)(v93 + v132);
  v136 = *v134;
  v135 = v134[1];
  v137 = v133[1];
  *v133 = v136;
  v133[1] = v135;
  swift_bridgeObjectRelease(v137);
  v138 = v94[15];
  v139 = v92 + v138;
  v140 = v93 + v138;
  v141 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 40))(v139, v140, v141);
  v142 = v94[16];
  v143 = (void *)(v92 + v142);
  v144 = (const void *)(v93 + v142);
  v145 = type metadata accessor for SunEvents(0);
  v146 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v145);
  v147 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145);
  if (v146)
  {
    if (!v147)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v148 = *(_QWORD *)(v145 - 8);
  if (v147)
  {
    (*(void (**)(void *, uint64_t))(v148 + 8))(v143, v145);
LABEL_35:
    v149 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(void *, const void *, uint64_t))(v148 + 40))(v143, v144, v145);
LABEL_36:
  v150 = v94[17];
  v151 = (void *)(v92 + v150);
  v152 = (const void *)(v93 + v150);
  v153 = type metadata accessor for MoonEvents(0);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v153);
  v155 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v152, 1, v153);
  if (v154)
  {
    if (!v155)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v153 - 8) + 32))(v151, v152, v153);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v151, 0, 1, v153);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v156 = *(_QWORD *)(v153 - 8);
  if (v155)
  {
    (*(void (**)(void *, uint64_t))(v156 + 8))(v151, v153);
LABEL_41:
    v157 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v156 + 40))(v151, v152, v153);
LABEL_42:
  v236(v92 + v94[18], v93 + v94[18], v238);
  *(_QWORD *)(v92 + v94[19]) = *(_QWORD *)(v93 + v94[19]);
  v158 = v90[6];
  v159 = (_QWORD *)(a1 + v158);
  v160 = (_QWORD *)(a2 + v158);
  v161 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, (uint64_t)v161);
  v163 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v160, 1, (uint64_t)v161);
  if (v162)
  {
    if (!v163)
    {
      *(_OWORD *)v159 = *(_OWORD *)v160;
      v164 = v161[5];
      v165 = (char *)v159 + v164;
      v166 = (char *)v160 + v164;
      v167 = type metadata accessor for AttributedString(0);
      v168 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 32);
      v168(v165, v166, v167);
      v169 = v161[6];
      v170 = (char *)v159 + v169;
      v171 = (char *)v160 + v169;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v160 + v169, 1, v167))
      {
        v172 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
      }
      else
      {
        v168(v170, v171, v167);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v170, 0, 1, v167);
      }
      *(_OWORD *)((char *)v159 + v161[7]) = *(_OWORD *)((char *)v160 + v161[7]);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v159, 0, 1, (uint64_t)v161);
      goto LABEL_64;
    }
    goto LABEL_48;
  }
  if (v163)
  {
    sub_100011894((uint64_t)v159, type metadata accessor for RainInlineContentViewModel);
LABEL_48:
    v173 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    goto LABEL_64;
  }
  v174 = v160[1];
  v175 = v159[1];
  *v159 = *v160;
  v159[1] = v174;
  swift_bridgeObjectRelease(v175);
  v176 = v161[5];
  v177 = (char *)v159 + v176;
  v178 = (char *)v160 + v176;
  v179 = type metadata accessor for AttributedString(0);
  v246 = *(_QWORD *)(v179 - 8);
  v244 = *(void (**)(char *, char *, uint64_t))(v246 + 40);
  v244(v177, v178, v179);
  v180 = v161[6];
  v181 = (char *)v159 + v180;
  v182 = (char *)v160 + v180;
  v183 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159 + v180, 1, v179);
  v184 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v182, 1, v179);
  if (!v183)
  {
    if (!v184)
    {
      v244(v181, v182, v179);
      goto LABEL_63;
    }
    (*(void (**)(char *, uint64_t))(v246 + 8))(v181, v179);
    goto LABEL_62;
  }
  if (v184)
  {
LABEL_62:
    v185 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v246 + 32))(v181, v182, v179);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v181, 0, 1, v179);
LABEL_63:
  v186 = v161[7];
  v187 = (_QWORD *)((char *)v159 + v186);
  v188 = (_QWORD *)((char *)v160 + v186);
  v190 = *v188;
  v189 = v188[1];
  v191 = v187[1];
  *v187 = v190;
  v187[1] = v189;
  swift_bridgeObjectRelease(v191);
LABEL_64:
  v192 = v90[7];
  v193 = a1 + v192;
  v194 = a2 + v192;
  v195 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v195 - 8) + 40))(v193, v194, v195);
  v196 = v90[8];
  v197 = (_QWORD *)(a1 + v196);
  v198 = (uint64_t *)(a2 + v196);
  v200 = *v198;
  v199 = v198[1];
  v201 = v197[1];
  *v197 = v200;
  v197[1] = v199;
  swift_bridgeObjectRelease(v201);
  *(_BYTE *)(a1 + v90[9]) = *(_BYTE *)(a2 + v90[9]);
  *(_BYTE *)(a1 + v90[10]) = *(_BYTE *)(a2 + v90[10]);
  v202 = v90[11];
  v203 = *(_QWORD *)(a1 + v202);
  *(_QWORD *)(a1 + v202) = *(_QWORD *)(a2 + v202);
  swift_release(v203);
  v204 = v90[12];
  v205 = (_QWORD *)(a1 + v204);
  v206 = (uint64_t *)(a2 + v204);
  v208 = *v206;
  v207 = v206[1];
  v209 = v205[1];
  *v205 = v208;
  v205[1] = v207;
  swift_bridgeObjectRelease(v209);
  v210 = v90[13];
  v211 = *(_QWORD *)(a1 + v210);
  *(_QWORD *)(a1 + v210) = *(_QWORD *)(a2 + v210);
  swift_release(v211);
  v212 = v90[14];
  v213 = *(_QWORD *)(a1 + v212);
  *(_QWORD *)(a1 + v212) = *(_QWORD *)(a2 + v212);
  swift_release(v213);
  v214 = v90[15];
  v215 = *(_QWORD *)(a1 + v214);
  *(_QWORD *)(a1 + v214) = *(_QWORD *)(a2 + v214);
  swift_release(v215);
  v216 = v90[16];
  v217 = *(_QWORD *)(a1 + v216);
  *(_QWORD *)(a1 + v216) = *(_QWORD *)(a2 + v216);
  swift_release(v217);
  *(_BYTE *)(a1 + v90[17]) = *(_BYTE *)(a2 + v90[17]);
  v218 = v90[18];
  v219 = *(_QWORD *)(a1 + v218);
  *(_QWORD *)(a1 + v218) = *(_QWORD *)(a2 + v218);
  swift_release(v219);
  v220 = v90[19];
  v221 = *(_QWORD *)(a1 + v220);
  *(_QWORD *)(a1 + v220) = *(_QWORD *)(a2 + v220);
  swift_release(v221);
  *(_QWORD *)(a1 + v90[20]) = *(_QWORD *)(a2 + v90[20]);
  *(_BYTE *)(a1 + v90[21]) = *(_BYTE *)(a2 + v90[21]);
  *(_BYTE *)(a1 + v90[22]) = *(_BYTE *)(a2 + v90[22]);
  *(_BYTE *)(a1 + v90[23]) = *(_BYTE *)(a2 + v90[23]);
  *(_BYTE *)(a1 + v90[24]) = *(_BYTE *)(a2 + v90[24]);
  v222 = v90[25];
  v223 = (_QWORD *)(a1 + v222);
  v224 = (uint64_t *)(a2 + v222);
  v226 = *v224;
  v225 = v224[1];
  v227 = v223[1];
  *v223 = v226;
  v223[1] = v225;
  swift_bridgeObjectRelease(v227);
  *(_BYTE *)(a1 + v90[26]) = *(_BYTE *)(a2 + v90[26]);
  *(_QWORD *)(a1 + v90[27]) = *(_QWORD *)(a2 + v90[27]);
  *(_QWORD *)(a1 + v90[28]) = *(_QWORD *)(a2 + v90[28]);
  if (a1 != a2)
  {
    v228 = *(int *)(a3 + 20);
    v229 = (void *)(a1 + v228);
    v230 = (const void *)(a2 + v228);
    sub_100016904(a1 + v228, &qword_1001BF0C8);
    v231 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v230, v231) == 1)
    {
      v232 = type metadata accessor for Font.Context(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v232 - 8) + 32))(v229, v230, v232);
      swift_storeEnumTagMultiPayload(v229, v231, 1);
    }
    else
    {
      memcpy(v229, v230, *(_QWORD *)(*(_QWORD *)(v231 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10000A63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000A648);
}

uint64_t sub_10000A648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100016AA8();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BF0D0);
    v8 = v4 + *(int *)(a3 + 20);
  }
  return sub_100016B50(v8, v3, v7);
}

uint64_t sub_10000A6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000A6AC);
}

uint64_t sub_10000A6AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_100016AA8();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    v9 = sub_100005D40(&qword_1001BF0D0);
    v10 = v5 + *(int *)(a4 + 20);
  }
  return sub_100016B44(v10, v4, v4, v9);
}

uint64_t type metadata accessor for CurrentObservationBannerView(uint64_t a1)
{
  return sub_10000F804(a1, (uint64_t *)&unk_1001BF130, (uint64_t)&nominal type descriptor for CurrentObservationBannerView);
}

void sub_10000A720(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for CurrentObservationViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000A7A4(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_10000A7A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001BF140)
  {
    v2 = type metadata accessor for Font.Context(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001BF140);
  }
}

char *sub_10000A7F8(char *a1, char *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, char *, uint64_t);
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  uint64_t v127;
  char *v128;
  _QWORD *v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  void (*v137)(char *, char *, uint64_t);
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  int *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  _QWORD *v173;
  uint64_t v174;
  void (*v176)(char *, char *);
  uint64_t v177;
  void (*v178)(char *, char *);
  uint64_t v179;
  void (*v180)(char *, char *, uint64_t);
  uint64_t v181;
  uint64_t v182;
  void (*v183)(char *, char *, uint64_t);
  uint64_t v184;
  char *v185;
  _QWORD *v186;
  void (*v187)(char *, char *, uint64_t);
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;

  v4 = type metadata accessor for CurrentObservationViewAttributes(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v27);
  }
  else
  {
    v190 = v4;
    v6 = type metadata accessor for UUID(0);
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v187 = v13;
    v13(&a1[v8[6]], &a2[v8[6]], v12);
    v14 = v8[7];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = sub_100005D40(&qword_1001BF090);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v18(&a1[v8[8]], &a2[v8[8]], v17);
    v19 = v8[9];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = v8[10];
    v24 = &a1[v23];
    v25 = &a2[v23];
    swift_bridgeObjectRetain(v22);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v17))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v18(v24, v25, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v17);
    }
    v28 = v8[11];
    v29 = &a1[v28];
    v30 = &a2[v28];
    v181 = v17;
    v182 = v12;
    v180 = v18;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v28], 1, v17))
    {
      v31 = sub_100005D40(&qword_1001BF098);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v18(v29, v30, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v17);
    }
    v32 = v8[12];
    v33 = &a1[v32];
    v34 = &a2[v32];
    v183 = v7;
    v184 = v6;
    v7(&a1[v32], &a2[v32], v6);
    v35 = (int *)type metadata accessor for ConditionViewModel(0);
    v36 = v35[5];
    v37 = &v33[v36];
    v38 = &v34[v36];
    v39 = type metadata accessor for WeatherCondition(0);
    v176 = *(void (**)(char *, char *))(*(_QWORD *)(v39 - 8) + 16);
    v177 = v39;
    v176(v37, v38);
    v40 = v35[6];
    v41 = &v33[v40];
    v42 = &v34[v40];
    v43 = *((_QWORD *)v42 + 1);
    *(_QWORD *)v41 = *(_QWORD *)v42;
    *((_QWORD *)v41 + 1) = v43;
    v44 = v35[7];
    v45 = &v33[v44];
    v46 = &v34[v44];
    v47 = *((_QWORD *)v46 + 1);
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *((_QWORD *)v45 + 1) = v47;
    v33[v35[8]] = v34[v35[8]];
    v33[v35[9]] = v34[v35[9]];
    v33[v35[10]] = v34[v35[10]];
    *(_QWORD *)&a1[v8[13]] = *(_QWORD *)&a2[v8[13]];
    v48 = v8[14];
    v49 = &a1[v48];
    v50 = &a2[v48];
    v51 = type metadata accessor for CloudAltitudeKind(0);
    v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v47);
    v52(v49, v50, v51);
    v53 = v8[15];
    v54 = &a1[v53];
    v55 = &a2[v53];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v53], 1, v182))
    {
      v56 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      v187(v54, v55, v182);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v54, 0, 1, v182);
    }
    v57 = v8[16];
    v58 = &a1[v57];
    v59 = &a2[v57];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v57], 1, v182))
    {
      v60 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v187(v58, v59, v182);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v182);
    }
    v61 = v8[17];
    v62 = &a1[v61];
    v63 = &a2[v61];
    v64 = type metadata accessor for UVIndex(0);
    v178 = *(void (**)(char *, char *))(*(_QWORD *)(v64 - 8) + 16);
    v179 = v64;
    v178(v62, v63);
    v65 = v8[18];
    v66 = &a1[v65];
    v67 = &a2[v65];
    v68 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
    *(_QWORD *)&a1[v8[19]] = *(_QWORD *)&a2[v8[19]];
    v69 = v8[20];
    v70 = &a1[v69];
    v71 = &a2[v69];
    v72 = *((_QWORD *)v71 + 1);
    if (v72)
    {
      *(_QWORD *)v70 = *(_QWORD *)v71;
      *((_QWORD *)v70 + 1) = v72;
      v73 = *((_QWORD *)v71 + 2);
      v74 = *((_QWORD *)v71 + 3);
      v75 = v71[32];
      swift_bridgeObjectRetain(v72);
      sub_100006E58(v73, v74, v75);
      *((_QWORD *)v70 + 2) = v73;
      *((_QWORD *)v70 + 3) = v74;
      v70[32] = v75;
    }
    else
    {
      v76 = *((_OWORD *)v71 + 1);
      *(_OWORD *)v70 = *(_OWORD *)v71;
      *((_OWORD *)v70 + 1) = v76;
      v70[32] = v71[32];
    }
    v77 = *(int *)(v190 + 20);
    v78 = &a1[v77];
    v186 = a2;
    v79 = &a2[v77];
    v183(&a1[v77], &a2[v77], v184);
    v80 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v187(&v78[v80[5]], &v79[v80[5]], v182);
    v180(&v78[v80[6]], &v79[v80[6]], v181);
    v180(&v78[v80[7]], &v79[v80[7]], v181);
    v81 = v80[8];
    v82 = &v78[v81];
    v83 = &v79[v81];
    v183(&v78[v81], &v79[v81], v184);
    ((void (*)(char *, char *, uint64_t))v176)(&v82[v35[5]], &v83[v35[5]], v177);
    v84 = v35[6];
    v85 = &v82[v84];
    v86 = &v83[v84];
    v87 = *((_QWORD *)v86 + 1);
    *(_QWORD *)v85 = *(_QWORD *)v86;
    *((_QWORD *)v85 + 1) = v87;
    v88 = v35[7];
    v89 = &v82[v88];
    v90 = &v83[v88];
    v91 = *((_QWORD *)v90 + 1);
    *(_QWORD *)v89 = *(_QWORD *)v90;
    *((_QWORD *)v89 + 1) = v91;
    v82[v35[8]] = v83[v35[8]];
    v82[v35[9]] = v83[v35[9]];
    v82[v35[10]] = v83[v35[10]];
    v92 = v80[9];
    v93 = &v78[v92];
    v94 = &v79[v92];
    v95 = type metadata accessor for Precipitation(0);
    v96 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v91);
    v96(v93, v94, v95);
    *(_QWORD *)&v78[v80[10]] = *(_QWORD *)&v79[v80[10]];
    v97 = v80[11];
    v98 = &v78[v97];
    v99 = &v79[v97];
    v100 = *((_QWORD *)v99 + 1);
    *(_QWORD *)v98 = *(_QWORD *)v99;
    *((_QWORD *)v98 + 1) = v100;
    v101 = v80[12];
    v102 = &v78[v101];
    v103 = &v79[v101];
    v104 = *((_QWORD *)v103 + 1);
    *(_QWORD *)v102 = *(_QWORD *)v103;
    *((_QWORD *)v102 + 1) = v104;
    v105 = v80[13];
    v106 = &v78[v105];
    v107 = &v79[v105];
    v108 = *((_QWORD *)v107 + 1);
    *(_QWORD *)v106 = *(_QWORD *)v107;
    *((_QWORD *)v106 + 1) = v108;
    v109 = v80[14];
    v110 = &v78[v109];
    v111 = &v79[v109];
    v112 = *((_QWORD *)v111 + 1);
    *(_QWORD *)v110 = *(_QWORD *)v111;
    *((_QWORD *)v110 + 1) = v112;
    v113 = v80[15];
    v188 = &v78[v113];
    v185 = &v79[v113];
    v114 = type metadata accessor for TemperatureScaleConfiguration(0);
    v115 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 16);
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v104);
    swift_bridgeObjectRetain(v108);
    swift_bridgeObjectRetain(v112);
    v115(v188, v185, v114);
    v116 = v80[16];
    v117 = &v78[v116];
    v118 = &v79[v116];
    v119 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v118, 1, v119))
    {
      v120 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 16))(v117, v118, v119);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v117, 0, 1, v119);
    }
    v121 = v80[17];
    v122 = &v78[v121];
    v123 = &v79[v121];
    v124 = type metadata accessor for MoonEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v123, 1, v124))
    {
      v125 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(v122, v123, v124);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v122, 0, 1, v124);
    }
    ((void (*)(char *, char *, uint64_t))v178)(&v78[v80[18]], &v79[v80[18]], v179);
    *(_QWORD *)&v78[v80[19]] = *(_QWORD *)&v79[v80[19]];
    v126 = (int *)v190;
    v127 = *(int *)(v190 + 24);
    v128 = &a1[v127];
    v129 = (_QWORD *)((char *)v186 + v127);
    v130 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v129, 1, (uint64_t)v130))
    {
      v131 = sub_100005D40(&qword_1001BF0C0);
      memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
    }
    else
    {
      v132 = v129[1];
      *(_QWORD *)v128 = *v129;
      *((_QWORD *)v128 + 1) = v132;
      v133 = v130[5];
      v134 = &v128[v133];
      v135 = (char *)v129 + v133;
      v136 = type metadata accessor for AttributedString(0);
      v137 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 16);
      swift_bridgeObjectRetain(v132);
      v137(v134, v135, v136);
      v138 = v130[6];
      v139 = &v128[v138];
      v140 = (char *)v129 + v138;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v129 + v138, 1, v136))
      {
        v141 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
      }
      else
      {
        v137(v139, v140, v136);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v139, 0, 1, v136);
      }
      v142 = v130[7];
      v143 = &v128[v142];
      v144 = (_QWORD *)((char *)v129 + v142);
      v145 = v144[1];
      *(_QWORD *)v143 = *v144;
      *((_QWORD *)v143 + 1) = v145;
      swift_bridgeObjectRetain(v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v128, 0, 1, (uint64_t)v130);
      v126 = (int *)v190;
    }
    v146 = v126[7];
    v147 = v126;
    v148 = &a1[v146];
    v149 = (char *)v186 + v146;
    v150 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
    v151 = v147[8];
    v152 = &a1[v151];
    v153 = (_QWORD *)((char *)v186 + v151);
    v154 = v153[1];
    *(_QWORD *)v152 = *v153;
    *((_QWORD *)v152 + 1) = v154;
    a1[v147[9]] = *((_BYTE *)v186 + v147[9]);
    a1[v147[10]] = *((_BYTE *)v186 + v147[10]);
    v155 = v147[11];
    v189 = *(_QWORD *)((char *)v186 + v155);
    *(_QWORD *)&a1[v155] = v189;
    v156 = v147[12];
    v157 = &a1[v156];
    v158 = (_QWORD *)((char *)v186 + v156);
    v159 = v158[1];
    *(_QWORD *)v157 = *v158;
    *((_QWORD *)v157 + 1) = v159;
    v160 = v147[13];
    v161 = *(_QWORD *)((char *)v186 + v160);
    *(_QWORD *)&a1[v160] = v161;
    v162 = v147[14];
    v163 = *(_QWORD *)((char *)v186 + v162);
    *(_QWORD *)&a1[v162] = v163;
    v164 = v147[15];
    v165 = *(_QWORD *)((char *)v186 + v164);
    *(_QWORD *)&a1[v164] = v165;
    v166 = v147[16];
    v191 = *(_QWORD *)((char *)v186 + v166);
    *(_QWORD *)&a1[v166] = v191;
    a1[v147[17]] = *((_BYTE *)v186 + v147[17]);
    v167 = v147[18];
    v168 = *(_QWORD *)((char *)v186 + v167);
    *(_QWORD *)&a1[v167] = v168;
    v169 = v147[19];
    v170 = *(_QWORD *)((char *)v186 + v169);
    *(_QWORD *)&a1[v169] = v170;
    *(_QWORD *)&a1[v147[20]] = *(_QWORD *)((char *)v186 + v147[20]);
    a1[v147[21]] = *((_BYTE *)v186 + v147[21]);
    a1[v147[22]] = *((_BYTE *)v186 + v147[22]);
    a1[v147[23]] = *((_BYTE *)v186 + v147[23]);
    a1[v147[24]] = *((_BYTE *)v186 + v147[24]);
    v171 = v147[25];
    v172 = &a1[v171];
    v173 = (_QWORD *)((char *)v186 + v171);
    v174 = v173[1];
    *(_QWORD *)v172 = *v173;
    *((_QWORD *)v172 + 1) = v174;
    a1[v147[26]] = *((_BYTE *)v186 + v147[26]);
    *(_QWORD *)&a1[v147[27]] = *(_QWORD *)((char *)v186 + v147[27]);
    *(_QWORD *)&a1[v147[28]] = *(_QWORD *)((char *)v186 + v147[28]);
    swift_bridgeObjectRetain(v154);
    swift_retain(v189);
    swift_bridgeObjectRetain(v159);
    swift_retain(v161);
    swift_retain(v163);
    swift_retain(v165);
    swift_retain(v191);
    swift_retain(v168);
    swift_retain(v170);
    swift_bridgeObjectRetain(v174);
  }
  return a1;
}

uint64_t sub_10000B284(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  int *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v49)(uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);

  v2 = type metadata accessor for UUID(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(a1, v2);
  v4 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v5 = a1 + v4[5];
  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(a1 + v4[6], v6);
  v8 = a1 + v4[7];
  v9 = sub_100005D40(&qword_1001BF090);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(a1 + v4[8], v9);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[9] + 8));
  v11 = a1 + v4[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v11, 1, v9))
    v10(v11, v9);
  v12 = a1 + v4[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v12, 1, v9))
    v10(v12, v9);
  v13 = a1 + v4[12];
  v53 = v3;
  v3(v13, v2);
  v14 = (int *)type metadata accessor for ConditionViewModel(0);
  v15 = v13 + v14[5];
  v16 = type metadata accessor for WeatherCondition(0);
  v49 = *(void (**)(uint64_t))(*(_QWORD *)(v16 - 8) + 8);
  v50 = v16;
  v49(v15);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[7] + 8));
  v17 = a1 + v4[14];
  v18 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + v4[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v19, 1, v6))
    v7(v19, v6);
  v20 = a1 + v4[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v20, 1, v6))
    v7(v20, v6);
  v21 = a1 + v4[17];
  v22 = type metadata accessor for UVIndex(0);
  v51 = *(void (**)(uint64_t))(*(_QWORD *)(v22 - 8) + 8);
  v52 = v22;
  v51(v21);
  v23 = a1 + v4[18];
  v24 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  v25 = a1 + v4[20];
  v26 = *(_QWORD *)(v25 + 8);
  if (v26)
  {
    swift_bridgeObjectRelease(v26);
    sub_100007458(*(_QWORD *)(v25 + 16), *(_QWORD *)(v25 + 24), *(_BYTE *)(v25 + 32));
  }
  v27 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v28 = a1 + v27[5];
  v53(v28, v2);
  v29 = v2;
  v30 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v7(v28 + v30[5], v6);
  v10(v28 + v30[6], v9);
  v10(v28 + v30[7], v9);
  v31 = v28 + v30[8];
  v53(v31, v29);
  ((void (*)(uint64_t, uint64_t))v49)(v31 + v14[5], v50);
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v14[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v14[7] + 8));
  v32 = v28 + v30[9];
  v33 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  swift_bridgeObjectRelease(*(_QWORD *)(v28 + v30[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v28 + v30[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v28 + v30[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v28 + v30[14] + 8));
  v34 = v28 + v30[15];
  v35 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
  v36 = v28 + v30[16];
  v37 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v36, 1, v37))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
  v38 = v28 + v30[17];
  v39 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, v39))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  ((void (*)(uint64_t, uint64_t))v51)(v28 + v30[18], v52);
  v40 = a1 + v27[6];
  v41 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v40, 1, (uint64_t)v41))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + 8));
    v42 = v40 + v41[5];
    v43 = type metadata accessor for AttributedString(0);
    v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8);
    v44(v42, v43);
    v45 = v40 + v41[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v45, 1, v43))
      v44(v45, v43);
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + v41[7] + 8));
  }
  v46 = a1 + v27[7];
  v47 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v27[8] + 8));
  swift_release(*(_QWORD *)(a1 + v27[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v27[12] + 8));
  swift_release(*(_QWORD *)(a1 + v27[13]));
  swift_release(*(_QWORD *)(a1 + v27[14]));
  swift_release(*(_QWORD *)(a1 + v27[15]));
  swift_release(*(_QWORD *)(a1 + v27[16]));
  swift_release(*(_QWORD *)(a1 + v27[18]));
  swift_release(*(_QWORD *)(a1 + v27[19]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + v27[25] + 8));
}

uint64_t sub_10000B808(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  void *v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  __int128 v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  void *v115;
  const void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  void (*v175)(uint64_t, uint64_t);
  uint64_t v176;
  int *v177;
  void (*v178)(uint64_t, uint64_t);
  uint64_t v179;
  void (*v180)(uint64_t, uint64_t, uint64_t);
  uint64_t v181;
  uint64_t v182;
  void (*v183)(void *, const void *, uint64_t);
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  v183 = v11;
  v185 = v10;
  v11((void *)(a1 + v6[6]), (const void *)(a2 + v6[6]), v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v16(a1 + v6[8], a2 + v6[8], v15);
  v17 = v6[9];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = v6[10];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  swift_bridgeObjectRetain(v20);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v23, 1, v15))
  {
    v24 = sub_100005D40(&qword_1001BF098);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v16((uint64_t)v22, (uint64_t)v23, v15);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v22, 0, 1, v15);
  }
  v25 = v6[11];
  v26 = (void *)(a1 + v25);
  v27 = (const void *)(a2 + v25);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v25, 1, v15))
  {
    v28 = sub_100005D40(&qword_1001BF098);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v16((uint64_t)v26, (uint64_t)v27, v15);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v26, 0, 1, v15);
  }
  v29 = v6[12];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v180 = v5;
  v181 = v4;
  v5(a1 + v29, a2 + v29, v4);
  v32 = (int *)type metadata accessor for ConditionViewModel(0);
  v33 = v32[5];
  v34 = v30 + v33;
  v35 = v31 + v33;
  v36 = type metadata accessor for WeatherCondition(0);
  v175 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
  v176 = v36;
  v175(v34, v35);
  v37 = v32[6];
  v38 = (_QWORD *)(v30 + v37);
  v39 = (_QWORD *)(v31 + v37);
  v40 = v39[1];
  *v38 = *v39;
  v38[1] = v40;
  v41 = v32[7];
  v42 = (_QWORD *)(v30 + v41);
  v43 = (_QWORD *)(v31 + v41);
  v44 = v43[1];
  *v42 = *v43;
  v42[1] = v44;
  *(_BYTE *)(v30 + v32[8]) = *(_BYTE *)(v31 + v32[8]);
  *(_BYTE *)(v30 + v32[9]) = *(_BYTE *)(v31 + v32[9]);
  v177 = v32;
  *(_BYTE *)(v30 + v32[10]) = *(_BYTE *)(v31 + v32[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v45 = v6[14];
  v46 = a1 + v45;
  v47 = a2 + v45;
  v48 = type metadata accessor for CloudAltitudeKind(0);
  v187 = a2;
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v44);
  v49(v46, v47, v48);
  v50 = v6[15];
  v51 = (void *)(a1 + v50);
  v52 = (const void *)(v187 + v50);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v187 + v50, 1, v185))
  {
    v53 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    v183(v51, v52, v185);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v51, 0, 1, v185);
  }
  v54 = v6[16];
  v55 = (void *)(a1 + v54);
  v56 = (const void *)(v187 + v54);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v187 + v54, 1, v185))
  {
    v57 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    v183(v55, v56, v185);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v55, 0, 1, v185);
  }
  v58 = v6[17];
  v59 = a1 + v58;
  v60 = v187 + v58;
  v61 = type metadata accessor for UVIndex(0);
  v178 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
  v179 = v61;
  v178(v59, v60);
  v62 = v6[18];
  v63 = a1 + v62;
  v64 = v187 + v62;
  v65 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(v187 + v6[19]);
  v66 = v6[20];
  v67 = a1 + v66;
  v68 = v187 + v66;
  v69 = *(_QWORD *)(v68 + 8);
  if (v69)
  {
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *(_QWORD *)(v67 + 8) = v69;
    v70 = *(_QWORD *)(v68 + 16);
    v71 = *(_QWORD *)(v68 + 24);
    v72 = *(_BYTE *)(v68 + 32);
    swift_bridgeObjectRetain(v69);
    sub_100006E58(v70, v71, v72);
    *(_QWORD *)(v67 + 16) = v70;
    *(_QWORD *)(v67 + 24) = v71;
    *(_BYTE *)(v67 + 32) = v72;
  }
  else
  {
    v73 = *(_OWORD *)(v68 + 16);
    *(_OWORD *)v67 = *(_OWORD *)v68;
    *(_OWORD *)(v67 + 16) = v73;
    *(_BYTE *)(v67 + 32) = *(_BYTE *)(v68 + 32);
  }
  v74 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v75 = v74[5];
  v182 = a1;
  v76 = a1 + v75;
  v77 = v187 + v75;
  v180(a1 + v75, v187 + v75, v181);
  v78 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v183((void *)(v76 + v78[5]), (const void *)(v77 + v78[5]), v185);
  v16(v76 + v78[6], v77 + v78[6], v15);
  v16(v76 + v78[7], v77 + v78[7], v15);
  v79 = v78[8];
  v80 = v76 + v79;
  v81 = v77 + v79;
  v180(v76 + v79, v77 + v79, v181);
  ((void (*)(uint64_t, uint64_t, uint64_t))v175)(v80 + v177[5], v81 + v177[5], v176);
  v82 = v177[6];
  v83 = (_QWORD *)(v80 + v82);
  v84 = (_QWORD *)(v81 + v82);
  v85 = v84[1];
  *v83 = *v84;
  v83[1] = v85;
  v86 = v177[7];
  v87 = (_QWORD *)(v80 + v86);
  v88 = (_QWORD *)(v81 + v86);
  v89 = v88[1];
  *v87 = *v88;
  v87[1] = v89;
  *(_BYTE *)(v80 + v177[8]) = *(_BYTE *)(v81 + v177[8]);
  *(_BYTE *)(v80 + v177[9]) = *(_BYTE *)(v81 + v177[9]);
  *(_BYTE *)(v80 + v177[10]) = *(_BYTE *)(v81 + v177[10]);
  v90 = v78[9];
  v91 = v76 + v90;
  v92 = v77 + v90;
  v93 = type metadata accessor for Precipitation(0);
  v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 16);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v89);
  v94(v91, v92, v93);
  *(_QWORD *)(v76 + v78[10]) = *(_QWORD *)(v77 + v78[10]);
  v95 = v78[11];
  v96 = (_QWORD *)(v76 + v95);
  v97 = (_QWORD *)(v77 + v95);
  v98 = v97[1];
  *v96 = *v97;
  v96[1] = v98;
  v99 = v78[12];
  v100 = (_QWORD *)(v76 + v99);
  v101 = (_QWORD *)(v77 + v99);
  v102 = v101[1];
  *v100 = *v101;
  v100[1] = v102;
  v103 = v78[13];
  v104 = (_QWORD *)(v76 + v103);
  v105 = (_QWORD *)(v77 + v103);
  v106 = v105[1];
  *v104 = *v105;
  v104[1] = v106;
  v107 = v78[14];
  v108 = (_QWORD *)(v76 + v107);
  v109 = (_QWORD *)(v77 + v107);
  v110 = v109[1];
  *v108 = *v109;
  v108[1] = v110;
  v111 = v78[15];
  v184 = v77 + v111;
  v186 = v76 + v111;
  v112 = type metadata accessor for TemperatureScaleConfiguration(0);
  v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 16);
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRetain(v106);
  swift_bridgeObjectRetain(v110);
  v113(v186, v184, v112);
  v114 = v78[16];
  v115 = (void *)(v76 + v114);
  v116 = (const void *)(v77 + v114);
  v117 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v116, 1, v117))
  {
    v118 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v117 - 8) + 16))(v115, v116, v117);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v117);
  }
  v119 = v78[17];
  v120 = (void *)(v76 + v119);
  v121 = (const void *)(v77 + v119);
  v122 = type metadata accessor for MoonEvents(0);
  v123 = v187;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v121, 1, v122))
  {
    v124 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v120, 0, 1, v122);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v178)(v76 + v78[18], v77 + v78[18], v179);
  *(_QWORD *)(v76 + v78[19]) = *(_QWORD *)(v77 + v78[19]);
  v125 = v74[6];
  v126 = (_QWORD *)(v182 + v125);
  v127 = (_QWORD *)(v187 + v125);
  v128 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v127, 1, (uint64_t)v128))
  {
    v129 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
  }
  else
  {
    v130 = v127[1];
    *v126 = *v127;
    v126[1] = v130;
    v131 = v128[5];
    v132 = (char *)v126 + v131;
    v133 = (char *)v127 + v131;
    v134 = type metadata accessor for AttributedString(0);
    v135 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16);
    swift_bridgeObjectRetain(v130);
    v135(v132, v133, v134);
    v136 = v128[6];
    v137 = (char *)v126 + v136;
    v138 = (char *)v127 + v136;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v127 + v136, 1, v134))
    {
      v139 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
    }
    else
    {
      v135(v137, v138, v134);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v137, 0, 1, v134);
    }
    v140 = v128[7];
    v141 = (_QWORD *)((char *)v126 + v140);
    v142 = (_QWORD *)((char *)v127 + v140);
    v143 = v142[1];
    *v141 = *v142;
    v141[1] = v143;
    swift_bridgeObjectRetain(v143);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v126, 0, 1, (uint64_t)v128);
    v123 = v187;
  }
  v144 = v74[7];
  v145 = v182 + v144;
  v146 = v123 + v144;
  v147 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 16))(v145, v146, v147);
  v148 = v74[8];
  v149 = (_QWORD *)(v182 + v148);
  v150 = (_QWORD *)(v123 + v148);
  v151 = v150[1];
  *v149 = *v150;
  v149[1] = v151;
  *(_BYTE *)(v182 + v74[9]) = *(_BYTE *)(v123 + v74[9]);
  *(_BYTE *)(v182 + v74[10]) = *(_BYTE *)(v123 + v74[10]);
  v152 = v74[11];
  v153 = *(_QWORD *)(v123 + v152);
  *(_QWORD *)(v182 + v152) = v153;
  v154 = v74[12];
  v155 = (_QWORD *)(v182 + v154);
  v156 = (_QWORD *)(v123 + v154);
  v157 = v156[1];
  *v155 = *v156;
  v155[1] = v157;
  v158 = v74[13];
  v159 = *(_QWORD *)(v123 + v158);
  *(_QWORD *)(v182 + v158) = v159;
  v160 = v74[14];
  v161 = v123;
  v162 = *(_QWORD *)(v123 + v160);
  *(_QWORD *)(v182 + v160) = v162;
  v163 = v74[15];
  v164 = *(_QWORD *)(v161 + v163);
  *(_QWORD *)(v182 + v163) = v164;
  v165 = v74[16];
  v188 = *(_QWORD *)(v161 + v165);
  *(_QWORD *)(v182 + v165) = v188;
  *(_BYTE *)(v182 + v74[17]) = *(_BYTE *)(v161 + v74[17]);
  v166 = v74[18];
  v167 = *(_QWORD *)(v161 + v166);
  *(_QWORD *)(v182 + v166) = v167;
  v168 = v74[19];
  v169 = *(_QWORD *)(v161 + v168);
  *(_QWORD *)(v182 + v168) = v169;
  *(_QWORD *)(v182 + v74[20]) = *(_QWORD *)(v161 + v74[20]);
  *(_BYTE *)(v182 + v74[21]) = *(_BYTE *)(v161 + v74[21]);
  *(_BYTE *)(v182 + v74[22]) = *(_BYTE *)(v161 + v74[22]);
  *(_BYTE *)(v182 + v74[23]) = *(_BYTE *)(v161 + v74[23]);
  *(_BYTE *)(v182 + v74[24]) = *(_BYTE *)(v161 + v74[24]);
  v170 = v74[25];
  v171 = (_QWORD *)(v182 + v170);
  v172 = (_QWORD *)(v161 + v170);
  v173 = v172[1];
  *v171 = *v172;
  v171[1] = v173;
  *(_BYTE *)(v182 + v74[26]) = *(_BYTE *)(v161 + v74[26]);
  *(_QWORD *)(v182 + v74[27]) = *(_QWORD *)(v161 + v74[27]);
  *(_QWORD *)(v182 + v74[28]) = *(_QWORD *)(v161 + v74[28]);
  swift_bridgeObjectRetain(v151);
  swift_retain(v153);
  swift_bridgeObjectRetain(v157);
  swift_retain(v159);
  swift_retain(v162);
  swift_retain(v164);
  swift_retain(v188);
  swift_retain(v167);
  swift_retain(v169);
  swift_bridgeObjectRetain(v173);
  return v182;
}

uint64_t sub_10000C250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const void *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const void *v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  int *v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  void (*v165)(char *, char *, uint64_t);
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  int v180;
  int v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  void (*v233)(uint64_t, uint64_t, uint64_t);
  uint64_t v234;
  uint64_t v235;
  void (*v236)(uint64_t, uint64_t);
  uint64_t v237;
  int *v238;
  uint64_t v239;
  void (*v240)(void *, const void *, uint64_t);
  void (*v241)(void *, const void *, uint64_t);
  void (*v242)(char *, char *, uint64_t);
  void (*v243)(uint64_t, uint64_t, uint64_t);
  char *v244;
  uint64_t v245;

  v4 = type metadata accessor for UUID(0);
  v243 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24);
  v243(a1, a2, v4);
  v5 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  v234 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v234 + 24);
  v10(v7, v8, v9);
  v241 = (void (*)(void *, const void *, uint64_t))v10;
  v10(a1 + v5[6], a2 + v5[6], v9);
  v11 = v5[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_100005D40(&qword_1001BF090);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24);
  v16(v12, v13, v14);
  v240 = (void (*)(void *, const void *, uint64_t))v16;
  v16(a1 + v5[8], a2 + v5[8], v14);
  v17 = v5[9];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = v5[10];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  LODWORD(v16) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v22, 1, v14);
  v25 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v14);
  if ((_DWORD)v16)
  {
    if (!v25)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v23, v24, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v23, v14);
LABEL_6:
    v26 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  v240(v23, v24, v14);
LABEL_7:
  v27 = v5[11];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  v30 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v27, 1, v14);
  v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, v14);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v28, v29, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v28, 0, 1, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v28, v14);
LABEL_12:
    v32 = sub_100005D40(&qword_1001BF098);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  v240(v28, v29, v14);
LABEL_13:
  v33 = v5[12];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v239 = v4;
  v243(a1 + v33, a2 + v33, v4);
  v36 = (int *)type metadata accessor for ConditionViewModel(0);
  v37 = v36[5];
  v38 = v34 + v37;
  v39 = v35 + v37;
  v40 = type metadata accessor for WeatherCondition(0);
  v236 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 24);
  v237 = v40;
  v236(v38, v39);
  v41 = v36[6];
  v42 = (_QWORD *)(v34 + v41);
  v43 = (_QWORD *)(v35 + v41);
  *v42 = *v43;
  v44 = v43[1];
  v45 = v42[1];
  v42[1] = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  v46 = v36[7];
  v47 = (_QWORD *)(v34 + v46);
  v48 = (_QWORD *)(v35 + v46);
  *v47 = *v48;
  v49 = v48[1];
  v50 = v47[1];
  v47[1] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  *(_BYTE *)(v34 + v36[8]) = *(_BYTE *)(v35 + v36[8]);
  *(_BYTE *)(v34 + v36[9]) = *(_BYTE *)(v35 + v36[9]);
  *(_BYTE *)(v34 + v36[10]) = *(_BYTE *)(v35 + v36[10]);
  *(_QWORD *)(a1 + v5[13]) = *(_QWORD *)(a2 + v5[13]);
  v51 = v5[14];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v52, v53, v54);
  v55 = v5[15];
  v56 = (void *)(a1 + v55);
  v57 = (const void *)(a2 + v55);
  LODWORD(v50) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v55, 1, v9);
  v58 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v57, 1, v9);
  if ((_DWORD)v50)
  {
    if (!v58)
    {
      (*(void (**)(void *, const void *, uint64_t))(v234 + 16))(v56, v57, v9);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v58)
  {
    (*(void (**)(void *, uint64_t))(v234 + 8))(v56, v9);
LABEL_18:
    v59 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_19;
  }
  v241(v56, v57, v9);
LABEL_19:
  v60 = v5[16];
  v61 = (void *)(a1 + v60);
  v62 = (const void *)(a2 + v60);
  v63 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v60, 1, v9);
  v64 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v62, 1, v9);
  v238 = v36;
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(void *, const void *, uint64_t))(v234 + 16))(v61, v62, v9);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v61, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v64)
  {
    (*(void (**)(void *, uint64_t))(v234 + 8))(v61, v9);
LABEL_24:
    v65 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_25;
  }
  v241(v61, v62, v9);
LABEL_25:
  v66 = v5[17];
  v67 = a1 + v66;
  v68 = a2 + v66;
  v69 = type metadata accessor for UVIndex(0);
  v233 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 24);
  v233(v67, v68, v69);
  v70 = v5[18];
  v71 = a1 + v70;
  v72 = a2 + v70;
  v73 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 24))(v71, v72, v73);
  *(_QWORD *)(a1 + v5[19]) = *(_QWORD *)(a2 + v5[19]);
  v74 = v5[20];
  v75 = a1 + v74;
  v76 = (__int128 *)(a2 + v74);
  v77 = *(_QWORD *)(a1 + v74 + 8);
  v78 = *(_QWORD *)(a2 + v74 + 8);
  v235 = v69;
  if (v77)
  {
    if (v78)
    {
      *(_QWORD *)v75 = *(_QWORD *)v76;
      v79 = *((_QWORD *)v76 + 1);
      *(_QWORD *)(v75 + 8) = v79;
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRelease(v77);
      v80 = *((_QWORD *)v76 + 2);
      v81 = *((_QWORD *)v76 + 3);
      v82 = *((_BYTE *)v76 + 32);
      sub_100006E58(v80, v81, v82);
      v83 = *(_QWORD *)(v75 + 16);
      v84 = *(_QWORD *)(v75 + 24);
      v85 = *(_BYTE *)(v75 + 32);
      *(_QWORD *)(v75 + 16) = v80;
      *(_QWORD *)(v75 + 24) = v81;
      *(_BYTE *)(v75 + 32) = v82;
      sub_100007458(v83, v84, v85);
    }
    else
    {
      sub_100008EC4(v75);
      v90 = *((_BYTE *)v76 + 32);
      v91 = v76[1];
      *(_OWORD *)v75 = *v76;
      *(_OWORD *)(v75 + 16) = v91;
      *(_BYTE *)(v75 + 32) = v90;
    }
  }
  else if (v78)
  {
    *(_QWORD *)v75 = *(_QWORD *)v76;
    v86 = *((_QWORD *)v76 + 1);
    *(_QWORD *)(v75 + 8) = v86;
    v87 = *((_QWORD *)v76 + 2);
    v88 = *((_QWORD *)v76 + 3);
    v89 = *((_BYTE *)v76 + 32);
    swift_bridgeObjectRetain(v86);
    sub_100006E58(v87, v88, v89);
    *(_QWORD *)(v75 + 16) = v87;
    *(_QWORD *)(v75 + 24) = v88;
    *(_BYTE *)(v75 + 32) = v89;
  }
  else
  {
    v92 = *v76;
    v93 = v76[1];
    *(_BYTE *)(v75 + 32) = *((_BYTE *)v76 + 32);
    *(_OWORD *)v75 = v92;
    *(_OWORD *)(v75 + 16) = v93;
  }
  v94 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v95 = v94[5];
  v96 = a1 + v95;
  v97 = a2 + v95;
  v243(a1 + v95, a2 + v95, v239);
  v98 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v241((void *)(v96 + v98[5]), (const void *)(v97 + v98[5]), v9);
  v240((void *)(v96 + v98[6]), (const void *)(v97 + v98[6]), v14);
  v240((void *)(v96 + v98[7]), (const void *)(v97 + v98[7]), v14);
  v99 = v98[8];
  v100 = v96 + v99;
  v101 = v97 + v99;
  v243(v96 + v99, v97 + v99, v239);
  ((void (*)(uint64_t, uint64_t, uint64_t))v236)(v100 + v238[5], v101 + v238[5], v237);
  v102 = v238[6];
  v103 = (_QWORD *)(v100 + v102);
  v104 = (_QWORD *)(v101 + v102);
  *v103 = *v104;
  v105 = v104[1];
  v106 = v103[1];
  v103[1] = v105;
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRelease(v106);
  v107 = v238[7];
  v108 = (_QWORD *)(v100 + v107);
  v109 = (_QWORD *)(v101 + v107);
  *v108 = *v109;
  v110 = v109[1];
  v111 = v108[1];
  v108[1] = v110;
  swift_bridgeObjectRetain(v110);
  swift_bridgeObjectRelease(v111);
  *(_BYTE *)(v100 + v238[8]) = *(_BYTE *)(v101 + v238[8]);
  *(_BYTE *)(v100 + v238[9]) = *(_BYTE *)(v101 + v238[9]);
  *(_BYTE *)(v100 + v238[10]) = *(_BYTE *)(v101 + v238[10]);
  v112 = v98[9];
  v113 = v96 + v112;
  v114 = v97 + v112;
  v115 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 24))(v113, v114, v115);
  *(_QWORD *)(v96 + v98[10]) = *(_QWORD *)(v97 + v98[10]);
  v116 = v98[11];
  v117 = (_QWORD *)(v96 + v116);
  v118 = (_QWORD *)(v97 + v116);
  *v117 = *v118;
  v119 = v118[1];
  v120 = v117[1];
  v117[1] = v119;
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRelease(v120);
  v121 = v98[12];
  v122 = (_QWORD *)(v96 + v121);
  v123 = (_QWORD *)(v97 + v121);
  *v122 = *v123;
  v124 = v123[1];
  v125 = v122[1];
  v122[1] = v124;
  swift_bridgeObjectRetain(v124);
  swift_bridgeObjectRelease(v125);
  v126 = v98[13];
  v127 = (_QWORD *)(v96 + v126);
  v128 = (_QWORD *)(v97 + v126);
  *v127 = *v128;
  v129 = v128[1];
  v130 = v127[1];
  v127[1] = v129;
  swift_bridgeObjectRetain(v129);
  swift_bridgeObjectRelease(v130);
  v131 = v98[14];
  v132 = (_QWORD *)(v96 + v131);
  v133 = (_QWORD *)(v97 + v131);
  *v132 = *v133;
  v134 = v133[1];
  v135 = v132[1];
  v132[1] = v134;
  swift_bridgeObjectRetain(v134);
  swift_bridgeObjectRelease(v135);
  v136 = v98[15];
  v137 = v96 + v136;
  v138 = v97 + v136;
  v139 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 24))(v137, v138, v139);
  v140 = v98[16];
  v141 = (void *)(v96 + v140);
  v142 = (const void *)(v97 + v140);
  v143 = type metadata accessor for SunEvents(0);
  LODWORD(v111) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v141, 1, v143);
  v144 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v142, 1, v143);
  if ((_DWORD)v111)
  {
    if (!v144)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v141, 0, 1, v143);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v145 = *(_QWORD *)(v143 - 8);
  if (v144)
  {
    (*(void (**)(void *, uint64_t))(v145 + 8))(v141, v143);
LABEL_41:
    v146 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v145 + 24))(v141, v142, v143);
LABEL_42:
  v147 = v98[17];
  v148 = (void *)(v96 + v147);
  v149 = (const void *)(v97 + v147);
  v150 = type metadata accessor for MoonEvents(0);
  v151 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v148, 1, v150);
  v152 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v149, 1, v150);
  if (v151)
  {
    if (!v152)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v148, 0, 1, v150);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v153 = *(_QWORD *)(v150 - 8);
  if (v152)
  {
    (*(void (**)(void *, uint64_t))(v153 + 8))(v148, v150);
LABEL_47:
    v154 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v153 + 24))(v148, v149, v150);
LABEL_48:
  v233(v96 + v98[18], v97 + v98[18], v235);
  *(_QWORD *)(v96 + v98[19]) = *(_QWORD *)(v97 + v98[19]);
  v155 = v94[6];
  v156 = (_QWORD *)(a1 + v155);
  v157 = (_QWORD *)(a2 + v155);
  v158 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v159 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v156, 1, (uint64_t)v158);
  v160 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157, 1, (uint64_t)v158);
  if (!v159)
  {
    if (v160)
    {
      sub_100011894((uint64_t)v156, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_54;
    }
    *v156 = *v157;
    v171 = v157[1];
    v172 = v156[1];
    v156[1] = v171;
    swift_bridgeObjectRetain(v171);
    swift_bridgeObjectRelease(v172);
    v173 = v158[5];
    v174 = (char *)v156 + v173;
    v175 = (char *)v157 + v173;
    v176 = type metadata accessor for AttributedString(0);
    v245 = *(_QWORD *)(v176 - 8);
    v242 = *(void (**)(char *, char *, uint64_t))(v245 + 24);
    v242(v174, v175, v176);
    v177 = v158[6];
    v178 = (char *)v156 + v177;
    v179 = (char *)v157 + v177;
    v180 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v156 + v177, 1, v176);
    v181 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v179, 1, v176);
    if (v180)
    {
      if (!v181)
      {
        (*(void (**)(char *, char *, uint64_t))(v245 + 16))(v178, v179, v176);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v178, 0, 1, v176);
LABEL_65:
        v187 = v158[7];
        v188 = (_QWORD *)((char *)v156 + v187);
        v189 = (_QWORD *)((char *)v157 + v187);
        *v188 = *v189;
        v190 = v189[1];
        v191 = v188[1];
        v188[1] = v190;
        swift_bridgeObjectRetain(v190);
        swift_bridgeObjectRelease(v191);
        goto LABEL_66;
      }
    }
    else
    {
      if (!v181)
      {
        v242(v178, v179, v176);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v245 + 8))(v178, v176);
    }
    v186 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v178, v179, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
    goto LABEL_65;
  }
  if (v160)
  {
LABEL_54:
    v170 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
    goto LABEL_66;
  }
  *v156 = *v157;
  v161 = v157[1];
  v156[1] = v161;
  v162 = v158[5];
  v163 = (char *)v156 + v162;
  v244 = (char *)v157 + v162;
  v164 = type metadata accessor for AttributedString(0);
  v165 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 16);
  swift_bridgeObjectRetain(v161);
  v165(v163, v244, v164);
  v166 = v158[6];
  v167 = (char *)v156 + v166;
  v168 = (char *)v157 + v166;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157 + v166, 1, v164))
  {
    v169 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
  }
  else
  {
    v165(v167, v168, v164);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v167, 0, 1, v164);
  }
  v182 = v158[7];
  v183 = (_QWORD *)((char *)v156 + v182);
  v184 = (_QWORD *)((char *)v157 + v182);
  *v183 = *v184;
  v185 = v184[1];
  v183[1] = v185;
  swift_bridgeObjectRetain(v185);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v156, 0, 1, (uint64_t)v158);
LABEL_66:
  v192 = v94[7];
  v193 = a1 + v192;
  v194 = a2 + v192;
  v195 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v195 - 8) + 24))(v193, v194, v195);
  v196 = v94[8];
  v197 = (_QWORD *)(a1 + v196);
  v198 = (_QWORD *)(a2 + v196);
  *v197 = *v198;
  v199 = v198[1];
  v200 = v197[1];
  v197[1] = v199;
  swift_bridgeObjectRetain(v199);
  swift_bridgeObjectRelease(v200);
  *(_BYTE *)(a1 + v94[9]) = *(_BYTE *)(a2 + v94[9]);
  *(_BYTE *)(a1 + v94[10]) = *(_BYTE *)(a2 + v94[10]);
  v201 = v94[11];
  v202 = *(_QWORD *)(a1 + v201);
  v203 = *(_QWORD *)(a2 + v201);
  *(_QWORD *)(a1 + v201) = v203;
  swift_retain(v203);
  swift_release(v202);
  v204 = v94[12];
  v205 = (_QWORD *)(a1 + v204);
  v206 = (_QWORD *)(a2 + v204);
  *v205 = *v206;
  v207 = v206[1];
  v208 = v205[1];
  v205[1] = v207;
  swift_bridgeObjectRetain(v207);
  swift_bridgeObjectRelease(v208);
  v209 = v94[13];
  v210 = *(_QWORD *)(a2 + v209);
  v211 = *(_QWORD *)(a1 + v209);
  *(_QWORD *)(a1 + v209) = v210;
  swift_retain(v210);
  swift_release(v211);
  v212 = v94[14];
  v213 = *(_QWORD *)(a2 + v212);
  v214 = *(_QWORD *)(a1 + v212);
  *(_QWORD *)(a1 + v212) = v213;
  swift_retain(v213);
  swift_release(v214);
  v215 = v94[15];
  v216 = *(_QWORD *)(a2 + v215);
  v217 = *(_QWORD *)(a1 + v215);
  *(_QWORD *)(a1 + v215) = v216;
  swift_retain(v216);
  swift_release(v217);
  v218 = v94[16];
  v219 = *(_QWORD *)(a2 + v218);
  v220 = *(_QWORD *)(a1 + v218);
  *(_QWORD *)(a1 + v218) = v219;
  swift_retain(v219);
  swift_release(v220);
  *(_BYTE *)(a1 + v94[17]) = *(_BYTE *)(a2 + v94[17]);
  v221 = v94[18];
  v222 = *(_QWORD *)(a2 + v221);
  v223 = *(_QWORD *)(a1 + v221);
  *(_QWORD *)(a1 + v221) = v222;
  swift_retain(v222);
  swift_release(v223);
  v224 = v94[19];
  v225 = *(_QWORD *)(a2 + v224);
  v226 = *(_QWORD *)(a1 + v224);
  *(_QWORD *)(a1 + v224) = v225;
  swift_retain(v225);
  swift_release(v226);
  *(_QWORD *)(a1 + v94[20]) = *(_QWORD *)(a2 + v94[20]);
  *(_BYTE *)(a1 + v94[21]) = *(_BYTE *)(a2 + v94[21]);
  *(_BYTE *)(a1 + v94[22]) = *(_BYTE *)(a2 + v94[22]);
  *(_BYTE *)(a1 + v94[23]) = *(_BYTE *)(a2 + v94[23]);
  *(_BYTE *)(a1 + v94[24]) = *(_BYTE *)(a2 + v94[24]);
  v227 = v94[25];
  v228 = (_QWORD *)(a1 + v227);
  v229 = (_QWORD *)(a2 + v227);
  *v228 = *v229;
  v230 = v229[1];
  v231 = v228[1];
  v228[1] = v230;
  swift_bridgeObjectRetain(v230);
  swift_bridgeObjectRelease(v231);
  *(_BYTE *)(a1 + v94[26]) = *(_BYTE *)(a2 + v94[26]);
  *(_QWORD *)(a1 + v94[27]) = *(_QWORD *)(a2 + v94[27]);
  *(_QWORD *)(a1 + v94[28]) = *(_QWORD *)(a2 + v94[28]);
  return a1;
}

uint64_t sub_10000D144(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  void (*v41)(void *, const void *, uint64_t);
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  _OWORD *v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  int *v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t, uint64_t);
  void (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  void (*v111)(void *, const void *, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v111 = v11;
  v11((void *)(a1 + v6[6]), (const void *)(a2 + v6[6]), v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  v16(a1 + v6[8], a2 + v6[8], v15);
  *(_OWORD *)(a1 + v6[9]) = *(_OWORD *)(a2 + v6[9]);
  v17 = v6[10];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v17, 1, v15))
  {
    v20 = sub_100005D40(&qword_1001BF098);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v16((uint64_t)v18, (uint64_t)v19, v15);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v18, 0, 1, v15);
  }
  v21 = v6[11];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v108 = v16;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v21, 1, v15))
  {
    v24 = sub_100005D40(&qword_1001BF098);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v16((uint64_t)v22, (uint64_t)v23, v15);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v22, 0, 1, v15);
  }
  v25 = v6[12];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v109 = v5;
  v110 = v4;
  v5(a1 + v25, a2 + v25, v4);
  v28 = (int *)type metadata accessor for ConditionViewModel(0);
  v29 = v28[5];
  v30 = v26 + v29;
  v31 = v27 + v29;
  v32 = type metadata accessor for WeatherCondition(0);
  v103 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
  v104 = v32;
  v103(v30, v31);
  *(_OWORD *)(v26 + v28[6]) = *(_OWORD *)(v27 + v28[6]);
  *(_OWORD *)(v26 + v28[7]) = *(_OWORD *)(v27 + v28[7]);
  *(_BYTE *)(v26 + v28[8]) = *(_BYTE *)(v27 + v28[8]);
  *(_BYTE *)(v26 + v28[9]) = *(_BYTE *)(v27 + v28[9]);
  v105 = v28;
  *(_BYTE *)(v26 + v28[10]) = *(_BYTE *)(v27 + v28[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v33 = v6[14];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
  v37 = v6[15];
  v38 = (void *)(a1 + v37);
  v39 = (const void *)(a2 + v37);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v37, 1, v10))
  {
    v40 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    v41 = v111;
  }
  else
  {
    v41 = v111;
    v111(v38, v39, v10);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v38, 0, 1, v10);
  }
  v42 = v6[16];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v42, 1, v10))
  {
    v45 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v41(v43, v44, v10);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v43, 0, 1, v10);
  }
  v46 = v6[17];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for UVIndex(0);
  v106 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 32);
  v107 = v49;
  v106(v47, v48);
  v50 = v6[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v54 = v6[20];
  v55 = a1 + v54;
  v56 = a2 + v54;
  *(_BYTE *)(v55 + 32) = *(_BYTE *)(v56 + 32);
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  v58 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v59 = v58[5];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v109(a1 + v59, a2 + v59, v110);
  v62 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v111((void *)(v60 + v62[5]), (const void *)(v61 + v62[5]), v10);
  v108(v60 + v62[6], v61 + v62[6], v15);
  v108(v60 + v62[7], v61 + v62[7], v15);
  v63 = v62[8];
  v64 = v60 + v63;
  v65 = v61 + v63;
  v109(v60 + v63, v61 + v63, v110);
  ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v64 + v105[5], v65 + v105[5], v104);
  *(_OWORD *)(v64 + v105[6]) = *(_OWORD *)(v65 + v105[6]);
  *(_OWORD *)(v64 + v105[7]) = *(_OWORD *)(v65 + v105[7]);
  *(_BYTE *)(v64 + v105[8]) = *(_BYTE *)(v65 + v105[8]);
  *(_BYTE *)(v64 + v105[9]) = *(_BYTE *)(v65 + v105[9]);
  *(_BYTE *)(v64 + v105[10]) = *(_BYTE *)(v65 + v105[10]);
  v66 = v62[9];
  v67 = v60 + v66;
  v68 = v61 + v66;
  v69 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
  *(_QWORD *)(v60 + v62[10]) = *(_QWORD *)(v61 + v62[10]);
  *(_OWORD *)(v60 + v62[11]) = *(_OWORD *)(v61 + v62[11]);
  *(_OWORD *)(v60 + v62[12]) = *(_OWORD *)(v61 + v62[12]);
  *(_OWORD *)(v60 + v62[13]) = *(_OWORD *)(v61 + v62[13]);
  *(_OWORD *)(v60 + v62[14]) = *(_OWORD *)(v61 + v62[14]);
  v70 = v62[15];
  v71 = v60 + v70;
  v72 = v61 + v70;
  v73 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
  v74 = v62[16];
  v75 = (void *)(v60 + v74);
  v76 = (const void *)(v61 + v74);
  v77 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v76, 1, v77))
  {
    v78 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v75, 0, 1, v77);
  }
  v79 = v62[17];
  v80 = (void *)(v60 + v79);
  v81 = (const void *)(v61 + v79);
  v82 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v81, 1, v82))
  {
    v83 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v80, v81, v82);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v80, 0, 1, v82);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v106)(v60 + v62[18], v61 + v62[18], v107);
  *(_QWORD *)(v60 + v62[19]) = *(_QWORD *)(v61 + v62[19]);
  v84 = v58[6];
  v85 = (_OWORD *)(a1 + v84);
  v86 = (_OWORD *)(a2 + v84);
  v87 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86, 1, (uint64_t)v87))
  {
    v88 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    *v85 = *v86;
    v89 = v87[5];
    v90 = (char *)v85 + v89;
    v91 = (char *)v86 + v89;
    v92 = type metadata accessor for AttributedString(0);
    v93 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32);
    v93(v90, v91, v92);
    v94 = v87[6];
    v95 = (char *)v85 + v94;
    v96 = (char *)v86 + v94;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86 + v94, 1, v92))
    {
      v97 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      v93(v95, v96, v92);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v92);
    }
    *(_OWORD *)((char *)v85 + v87[7]) = *(_OWORD *)((char *)v86 + v87[7]);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v85, 0, 1, (uint64_t)v87);
  }
  v98 = v58[7];
  v99 = a1 + v98;
  v100 = a2 + v98;
  v101 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v99, v100, v101);
  *(_OWORD *)(a1 + v58[8]) = *(_OWORD *)(a2 + v58[8]);
  *(_BYTE *)(a1 + v58[9]) = *(_BYTE *)(a2 + v58[9]);
  *(_BYTE *)(a1 + v58[10]) = *(_BYTE *)(a2 + v58[10]);
  *(_QWORD *)(a1 + v58[11]) = *(_QWORD *)(a2 + v58[11]);
  *(_OWORD *)(a1 + v58[12]) = *(_OWORD *)(a2 + v58[12]);
  *(_QWORD *)(a1 + v58[13]) = *(_QWORD *)(a2 + v58[13]);
  *(_QWORD *)(a1 + v58[14]) = *(_QWORD *)(a2 + v58[14]);
  *(_QWORD *)(a1 + v58[15]) = *(_QWORD *)(a2 + v58[15]);
  *(_QWORD *)(a1 + v58[16]) = *(_QWORD *)(a2 + v58[16]);
  *(_BYTE *)(a1 + v58[17]) = *(_BYTE *)(a2 + v58[17]);
  *(_QWORD *)(a1 + v58[18]) = *(_QWORD *)(a2 + v58[18]);
  *(_QWORD *)(a1 + v58[19]) = *(_QWORD *)(a2 + v58[19]);
  *(_QWORD *)(a1 + v58[20]) = *(_QWORD *)(a2 + v58[20]);
  *(_BYTE *)(a1 + v58[21]) = *(_BYTE *)(a2 + v58[21]);
  *(_BYTE *)(a1 + v58[22]) = *(_BYTE *)(a2 + v58[22]);
  *(_BYTE *)(a1 + v58[23]) = *(_BYTE *)(a2 + v58[23]);
  *(_BYTE *)(a1 + v58[24]) = *(_BYTE *)(a2 + v58[24]);
  *(_OWORD *)(a1 + v58[25]) = *(_OWORD *)(a2 + v58[25]);
  *(_BYTE *)(a1 + v58[26]) = *(_BYTE *)(a2 + v58[26]);
  *(_QWORD *)(a1 + v58[27]) = *(_QWORD *)(a2 + v58[27]);
  *(_QWORD *)(a1 + v58[28]) = *(_QWORD *)(a2 + v58[28]);
  return a1;
}

uint64_t sub_10000DA30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const void *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  __int128 v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const void *v142;
  uint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const void *v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  int *v159;
  int v160;
  int v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  void (*v166)(char *, char *, uint64_t);
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void (*v227)(uint64_t, uint64_t, uint64_t);
  uint64_t v228;
  uint64_t v229;
  void (*v230)(uint64_t, uint64_t);
  uint64_t v231;
  int *v232;
  uint64_t v233;
  void (*v234)(void *, const void *, uint64_t);
  void (*v235)(void *, const void *, uint64_t);
  void (*v236)(char *, char *, uint64_t);
  void (*v237)(uint64_t, uint64_t, uint64_t);
  uint64_t v238;

  v4 = type metadata accessor for UUID(0);
  v237 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40);
  v237(a1, a2, v4);
  v5 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  v228 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v228 + 40);
  v10(v7, v8, v9);
  v235 = (void (*)(void *, const void *, uint64_t))v10;
  v10(a1 + v5[6], a2 + v5[6], v9);
  v11 = v5[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_100005D40(&qword_1001BF090);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40);
  v16(v12, v13, v14);
  v234 = (void (*)(void *, const void *, uint64_t))v16;
  v16(a1 + v5[8], a2 + v5[8], v14);
  v17 = v5[9];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  v22 = v18[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  v23 = v5[10];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  LODWORD(v16) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v23, 1, v14);
  v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v14);
  if ((_DWORD)v16)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v24, v25, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v24, v14);
LABEL_6:
    v27 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v234(v24, v25, v14);
LABEL_7:
  v28 = v5[11];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v28, 1, v14);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v14);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v29, v30, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v29, v14);
LABEL_12:
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  v234(v29, v30, v14);
LABEL_13:
  v34 = v5[12];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v233 = v4;
  v237(a1 + v34, a2 + v34, v4);
  v37 = (int *)type metadata accessor for ConditionViewModel(0);
  v38 = v37[5];
  v39 = v35 + v38;
  v40 = v36 + v38;
  v41 = type metadata accessor for WeatherCondition(0);
  v230 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 40);
  v231 = v41;
  v230(v39, v40);
  v42 = v37[6];
  v43 = (_QWORD *)(v35 + v42);
  v44 = (uint64_t *)(v36 + v42);
  v46 = *v44;
  v45 = v44[1];
  v47 = v43[1];
  *v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease(v47);
  v48 = v37[7];
  v49 = (_QWORD *)(v35 + v48);
  v50 = (uint64_t *)(v36 + v48);
  v52 = *v50;
  v51 = v50[1];
  v53 = v49[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease(v53);
  *(_BYTE *)(v35 + v37[8]) = *(_BYTE *)(v36 + v37[8]);
  *(_BYTE *)(v35 + v37[9]) = *(_BYTE *)(v36 + v37[9]);
  *(_BYTE *)(v35 + v37[10]) = *(_BYTE *)(v36 + v37[10]);
  *(_QWORD *)(a1 + v5[13]) = *(_QWORD *)(a2 + v5[13]);
  v54 = v5[14];
  v55 = a1 + v54;
  v56 = a2 + v54;
  v57 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 40))(v55, v56, v57);
  v58 = v5[15];
  v59 = (void *)(a1 + v58);
  v60 = (const void *)(a2 + v58);
  LODWORD(v40) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v58, 1, v9);
  v61 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v60, 1, v9);
  if ((_DWORD)v40)
  {
    if (!v61)
    {
      (*(void (**)(void *, const void *, uint64_t))(v228 + 32))(v59, v60, v9);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v61)
  {
    (*(void (**)(void *, uint64_t))(v228 + 8))(v59, v9);
LABEL_18:
    v62 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_19;
  }
  v235(v59, v60, v9);
LABEL_19:
  v63 = v5[16];
  v64 = (void *)(a1 + v63);
  v65 = (const void *)(a2 + v63);
  v66 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v63, 1, v9);
  v67 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v65, 1, v9);
  v232 = v37;
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(void *, const void *, uint64_t))(v228 + 32))(v64, v65, v9);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v67)
  {
    (*(void (**)(void *, uint64_t))(v228 + 8))(v64, v9);
LABEL_24:
    v68 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_25;
  }
  v235(v64, v65, v9);
LABEL_25:
  v69 = v5[17];
  v70 = a1 + v69;
  v71 = a2 + v69;
  v72 = type metadata accessor for UVIndex(0);
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 40);
  v73(v70, v71, v72);
  v74 = v5[18];
  v75 = a1 + v74;
  v76 = a2 + v74;
  v77 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 40))(v75, v76, v77);
  *(_QWORD *)(a1 + v5[19]) = *(_QWORD *)(a2 + v5[19]);
  v78 = v5[20];
  v79 = a1 + v78;
  v80 = a2 + v78;
  v81 = *(_QWORD *)(a1 + v78 + 8);
  v227 = v73;
  v229 = v72;
  if (v81)
  {
    v82 = *(_QWORD *)(v80 + 8);
    if (v82)
    {
      *(_QWORD *)v79 = *(_QWORD *)v80;
      *(_QWORD *)(v79 + 8) = v82;
      swift_bridgeObjectRelease(v81);
      v83 = *(_BYTE *)(v80 + 32);
      v84 = *(_QWORD *)(v79 + 16);
      v85 = *(_QWORD *)(v79 + 24);
      v86 = *(_BYTE *)(v79 + 32);
      *(_OWORD *)(v79 + 16) = *(_OWORD *)(v80 + 16);
      *(_BYTE *)(v79 + 32) = v83;
      sub_100007458(v84, v85, v86);
      goto LABEL_30;
    }
    sub_100008EC4(v79);
  }
  v87 = *(_OWORD *)(v80 + 16);
  *(_OWORD *)v79 = *(_OWORD *)v80;
  *(_OWORD *)(v79 + 16) = v87;
  *(_BYTE *)(v79 + 32) = *(_BYTE *)(v80 + 32);
LABEL_30:
  v88 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v89 = v88[5];
  v90 = a1 + v89;
  v91 = a2 + v89;
  v237(a1 + v89, a2 + v89, v233);
  v92 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v235((void *)(v90 + v92[5]), (const void *)(v91 + v92[5]), v9);
  v234((void *)(v90 + v92[6]), (const void *)(v91 + v92[6]), v14);
  v234((void *)(v90 + v92[7]), (const void *)(v91 + v92[7]), v14);
  v93 = v92[8];
  v94 = v90 + v93;
  v95 = v91 + v93;
  v237(v90 + v93, v91 + v93, v233);
  ((void (*)(uint64_t, uint64_t, uint64_t))v230)(v94 + v232[5], v95 + v232[5], v231);
  v96 = v232[6];
  v97 = (_QWORD *)(v94 + v96);
  v98 = (uint64_t *)(v95 + v96);
  v100 = *v98;
  v99 = v98[1];
  v101 = v97[1];
  *v97 = v100;
  v97[1] = v99;
  swift_bridgeObjectRelease(v101);
  v102 = v232[7];
  v103 = (_QWORD *)(v94 + v102);
  v104 = (uint64_t *)(v95 + v102);
  v106 = *v104;
  v105 = v104[1];
  v107 = v103[1];
  *v103 = v106;
  v103[1] = v105;
  swift_bridgeObjectRelease(v107);
  *(_BYTE *)(v94 + v232[8]) = *(_BYTE *)(v95 + v232[8]);
  *(_BYTE *)(v94 + v232[9]) = *(_BYTE *)(v95 + v232[9]);
  *(_BYTE *)(v94 + v232[10]) = *(_BYTE *)(v95 + v232[10]);
  v108 = v92[9];
  v109 = v90 + v108;
  v110 = v91 + v108;
  v111 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 40))(v109, v110, v111);
  *(_QWORD *)(v90 + v92[10]) = *(_QWORD *)(v91 + v92[10]);
  v112 = v92[11];
  v113 = (_QWORD *)(v90 + v112);
  v114 = (uint64_t *)(v91 + v112);
  v116 = *v114;
  v115 = v114[1];
  v117 = v113[1];
  *v113 = v116;
  v113[1] = v115;
  swift_bridgeObjectRelease(v117);
  v118 = v92[12];
  v119 = (_QWORD *)(v90 + v118);
  v120 = (uint64_t *)(v91 + v118);
  v122 = *v120;
  v121 = v120[1];
  v123 = v119[1];
  *v119 = v122;
  v119[1] = v121;
  swift_bridgeObjectRelease(v123);
  v124 = v92[13];
  v125 = (_QWORD *)(v90 + v124);
  v126 = (uint64_t *)(v91 + v124);
  v128 = *v126;
  v127 = v126[1];
  v129 = v125[1];
  *v125 = v128;
  v125[1] = v127;
  swift_bridgeObjectRelease(v129);
  v130 = v92[14];
  v131 = (_QWORD *)(v90 + v130);
  v132 = (uint64_t *)(v91 + v130);
  v134 = *v132;
  v133 = v132[1];
  v135 = v131[1];
  *v131 = v134;
  v131[1] = v133;
  swift_bridgeObjectRelease(v135);
  v136 = v92[15];
  v137 = v90 + v136;
  v138 = v91 + v136;
  v139 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 40))(v137, v138, v139);
  v140 = v92[16];
  v141 = (void *)(v90 + v140);
  v142 = (const void *)(v91 + v140);
  v143 = type metadata accessor for SunEvents(0);
  v144 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v141, 1, v143);
  v145 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v142, 1, v143);
  if (v144)
  {
    if (!v145)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v143 - 8) + 32))(v141, v142, v143);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v141, 0, 1, v143);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v146 = *(_QWORD *)(v143 - 8);
  if (v145)
  {
    (*(void (**)(void *, uint64_t))(v146 + 8))(v141, v143);
LABEL_35:
    v147 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(void *, const void *, uint64_t))(v146 + 40))(v141, v142, v143);
LABEL_36:
  v148 = v92[17];
  v149 = (void *)(v90 + v148);
  v150 = (const void *)(v91 + v148);
  v151 = type metadata accessor for MoonEvents(0);
  v152 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v149, 1, v151);
  v153 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, v151);
  if (v152)
  {
    if (!v153)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v151 - 8) + 32))(v149, v150, v151);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v149, 0, 1, v151);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v154 = *(_QWORD *)(v151 - 8);
  if (v153)
  {
    (*(void (**)(void *, uint64_t))(v154 + 8))(v149, v151);
LABEL_41:
    v155 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v154 + 40))(v149, v150, v151);
LABEL_42:
  v227(v90 + v92[18], v91 + v92[18], v229);
  *(_QWORD *)(v90 + v92[19]) = *(_QWORD *)(v91 + v92[19]);
  v156 = v88[6];
  v157 = (_QWORD *)(a1 + v156);
  v158 = (_QWORD *)(a2 + v156);
  v159 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v160 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157, 1, (uint64_t)v159);
  v161 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, (uint64_t)v159);
  if (!v160)
  {
    if (v161)
    {
      sub_100011894((uint64_t)v157, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_48;
    }
    v172 = v158[1];
    v173 = v157[1];
    *v157 = *v158;
    v157[1] = v172;
    swift_bridgeObjectRelease(v173);
    v174 = v159[5];
    v175 = (char *)v157 + v174;
    v176 = (char *)v158 + v174;
    v177 = type metadata accessor for AttributedString(0);
    v238 = *(_QWORD *)(v177 - 8);
    v236 = *(void (**)(char *, char *, uint64_t))(v238 + 40);
    v236(v175, v176, v177);
    v178 = v159[6];
    v179 = (char *)v157 + v178;
    v180 = (char *)v158 + v178;
    v181 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157 + v178, 1, v177);
    v182 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v180, 1, v177);
    if (v181)
    {
      if (!v182)
      {
        (*(void (**)(char *, char *, uint64_t))(v238 + 32))(v179, v180, v177);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v179, 0, 1, v177);
LABEL_63:
        v184 = v159[7];
        v185 = (_QWORD *)((char *)v157 + v184);
        v186 = (_QWORD *)((char *)v158 + v184);
        v188 = *v186;
        v187 = v186[1];
        v189 = v185[1];
        *v185 = v188;
        v185[1] = v187;
        swift_bridgeObjectRelease(v189);
        goto LABEL_64;
      }
    }
    else
    {
      if (!v182)
      {
        v236(v179, v180, v177);
        goto LABEL_63;
      }
      (*(void (**)(char *, uint64_t))(v238 + 8))(v179, v177);
    }
    v183 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
    goto LABEL_63;
  }
  if (v161)
  {
LABEL_48:
    v171 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
    goto LABEL_64;
  }
  *(_OWORD *)v157 = *(_OWORD *)v158;
  v162 = v159[5];
  v163 = (char *)v157 + v162;
  v164 = (char *)v158 + v162;
  v165 = type metadata accessor for AttributedString(0);
  v166 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v165 - 8) + 32);
  v166(v163, v164, v165);
  v167 = v159[6];
  v168 = (char *)v157 + v167;
  v169 = (char *)v158 + v167;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158 + v167, 1, v165))
  {
    v170 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
  }
  else
  {
    v166(v168, v169, v165);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v168, 0, 1, v165);
  }
  *(_OWORD *)((char *)v157 + v159[7]) = *(_OWORD *)((char *)v158 + v159[7]);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v157, 0, 1, (uint64_t)v159);
LABEL_64:
  v190 = v88[7];
  v191 = a1 + v190;
  v192 = a2 + v190;
  v193 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v193 - 8) + 40))(v191, v192, v193);
  v194 = v88[8];
  v195 = (_QWORD *)(a1 + v194);
  v196 = (uint64_t *)(a2 + v194);
  v198 = *v196;
  v197 = v196[1];
  v199 = v195[1];
  *v195 = v198;
  v195[1] = v197;
  swift_bridgeObjectRelease(v199);
  *(_BYTE *)(a1 + v88[9]) = *(_BYTE *)(a2 + v88[9]);
  *(_BYTE *)(a1 + v88[10]) = *(_BYTE *)(a2 + v88[10]);
  v200 = v88[11];
  v201 = *(_QWORD *)(a1 + v200);
  *(_QWORD *)(a1 + v200) = *(_QWORD *)(a2 + v200);
  swift_release(v201);
  v202 = v88[12];
  v203 = (_QWORD *)(a1 + v202);
  v204 = (uint64_t *)(a2 + v202);
  v206 = *v204;
  v205 = v204[1];
  v207 = v203[1];
  *v203 = v206;
  v203[1] = v205;
  swift_bridgeObjectRelease(v207);
  v208 = v88[13];
  v209 = *(_QWORD *)(a1 + v208);
  *(_QWORD *)(a1 + v208) = *(_QWORD *)(a2 + v208);
  swift_release(v209);
  v210 = v88[14];
  v211 = *(_QWORD *)(a1 + v210);
  *(_QWORD *)(a1 + v210) = *(_QWORD *)(a2 + v210);
  swift_release(v211);
  v212 = v88[15];
  v213 = *(_QWORD *)(a1 + v212);
  *(_QWORD *)(a1 + v212) = *(_QWORD *)(a2 + v212);
  swift_release(v213);
  v214 = v88[16];
  v215 = *(_QWORD *)(a1 + v214);
  *(_QWORD *)(a1 + v214) = *(_QWORD *)(a2 + v214);
  swift_release(v215);
  *(_BYTE *)(a1 + v88[17]) = *(_BYTE *)(a2 + v88[17]);
  v216 = v88[18];
  v217 = *(_QWORD *)(a1 + v216);
  *(_QWORD *)(a1 + v216) = *(_QWORD *)(a2 + v216);
  swift_release(v217);
  v218 = v88[19];
  v219 = *(_QWORD *)(a1 + v218);
  *(_QWORD *)(a1 + v218) = *(_QWORD *)(a2 + v218);
  swift_release(v219);
  *(_QWORD *)(a1 + v88[20]) = *(_QWORD *)(a2 + v88[20]);
  *(_BYTE *)(a1 + v88[21]) = *(_BYTE *)(a2 + v88[21]);
  *(_BYTE *)(a1 + v88[22]) = *(_BYTE *)(a2 + v88[22]);
  *(_BYTE *)(a1 + v88[23]) = *(_BYTE *)(a2 + v88[23]);
  *(_BYTE *)(a1 + v88[24]) = *(_BYTE *)(a2 + v88[24]);
  v220 = v88[25];
  v221 = (_QWORD *)(a1 + v220);
  v222 = (uint64_t *)(a2 + v220);
  v224 = *v222;
  v223 = v222[1];
  v225 = v221[1];
  *v221 = v224;
  v221[1] = v223;
  swift_bridgeObjectRelease(v225);
  *(_BYTE *)(a1 + v88[26]) = *(_BYTE *)(a2 + v88[26]);
  *(_QWORD *)(a1 + v88[27]) = *(_QWORD *)(a2 + v88[27]);
  *(_QWORD *)(a1 + v88[28]) = *(_QWORD *)(a2 + v88[28]);
  return a1;
}

uint64_t sub_10000E770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000E77C);
}

uint64_t sub_10000E77C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_100016AA8();
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, v0, v2);
}

uint64_t sub_10000E7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000E7B0);
}

uint64_t sub_10000E7B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_100016AA8();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, v0, v0, v2);
}

uint64_t type metadata accessor for AccessibilitySizeCurrentObservationBannerView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001BF1C8, (uint64_t)&nominal type descriptor for AccessibilitySizeCurrentObservationBannerView);
}

uint64_t sub_10000E7F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for CurrentObservationViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10000E858(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019E6D4, 1);
}

double sub_10000E868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v16;

  v1 = type metadata accessor for Font.Context(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100016B00();
  sub_100016CEC();
  sub_100016C88();
  sub_100016CC0();
  v6 = v5;
  sub_100016B1C();
  sub_100016C88();
  sub_100016CC0();
  v8 = v7;
  sub_100016B1C();
  v9 = v6 + v8 + *(double *)(v0 + *(int *)(v4 + 108));
  v10 = *(int *)(v4 + 52);
  v11 = *(_QWORD *)(v0 + v10);
  sub_100016C88();
  v12 = Font.lineHeight(in:)(v3, v11);
  sub_100016B1C();
  v13 = *(_QWORD *)(v0 + v10);
  sub_100016C88();
  v14 = Font.capHeight(in:)(v3, v13);
  sub_100016B1C();
  return v9 + (v12 - v14) * 0.5;
}

void sub_10000E98C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20;

  v4 = sub_100016CEC();
  __chkstk_darwin(v4);
  sub_100016B7C();
  sub_100016B64();
  sub_100016C90();
  v7 = swift_allocObject(&unk_1001B4A70, v5, v6);
  sub_100016C58(v7);
  v8 = sub_10000E868();
  v10 = static Alignment.center.getter(v9);
  _FrameLayout.init(width:height:alignment:)(&v16, 0, 1, *(_QWORD *)&v8, 0, v10, v11);
  v12 = v16;
  v13 = v17;
  v14 = v18;
  v15 = v19;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = sub_100011D0C;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 64) = v20;
  sub_100016BC0();
}

void sub_10000EA60(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = sub_100005D40(&qword_1001BF220);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static VerticalAlignment.lastTextBaseline.getter(v5);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  v8 = sub_100005D40(&qword_1001BF228);
  sub_10000EBE0(a1, (uint64_t)&v7[*(int *)(v8 + 44)]);
  v9 = a2 + *(int *)(sub_100005D40(&qword_1001BF230) + 36);
  sub_10000F7C4(a1, v9, type metadata accessor for CurrentObservationViewModel);
  v10 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v11 = a1 + v10[5];
  v12 = (int *)type metadata accessor for CurrentObservationAccessibilityModifier(0);
  sub_10000F7C4(v11, v9 + v12[5], type metadata accessor for DailyForecastViewModel);
  v13 = a1 + v10[7];
  v14 = v9 + v12[6];
  v15 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, v13, v15);
  v16 = (uint64_t *)(a1 + v10[8]);
  v17 = *v16;
  v18 = v16[1];
  v19 = (_QWORD *)(v9 + v12[7]);
  *v19 = v17;
  v19[1] = v18;
  sub_1000168D8((uint64_t)v7, a2, &qword_1001BF220);
  swift_bridgeObjectRetain(v18);
  sub_100016904((uint64_t)v7, &qword_1001BF220);
}

void sub_10000EBE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t *v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[3];

  v38 = a2;
  v3 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for CurrentConditionsView(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100005D40(&qword_1001BF238);
  v9 = __chkstk_darwin(v37);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v37 - v12;
  v14 = type metadata accessor for LocationDegreesView(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v37 - v18;
  sub_10000F7C4(a1, (uint64_t)&v37 - v18, type metadata accessor for CurrentObservationViewAttributes);
  sub_10000F7C4(a1, (uint64_t)v5, type metadata accessor for CurrentObservationViewAttributes);
  v20 = ((double (*)(void))GeometryProxy.size.getter)();
  v22 = v21;
  KeyPath = swift_getKeyPath(&unk_10017A740);
  v24 = (uint64_t *)&v8[v6[8]];
  *v24 = KeyPath;
  v25 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  sub_100011868((uint64_t)v5, (uint64_t)v8, type metadata accessor for CurrentObservationViewAttributes);
  v26 = (double *)&v8[v6[5]];
  *v26 = v20;
  *((_QWORD *)v26 + 1) = v22;
  v8[v6[6]] = 0;
  *(_QWORD *)&v8[v6[7]] = 2;
  v27 = GeometryProxy.size.getter();
  v29 = v28;
  v30 = static Alignment.center.getter(v27);
  _FrameLayout.init(width:height:alignment:)(v39, 0, 1, v29, 0, v30, v31);
  sub_10000F7C4((uint64_t)v8, (uint64_t)v11, type metadata accessor for CurrentConditionsView);
  v32 = &v11[*(int *)(v37 + 36)];
  v33 = v39[1];
  *(_OWORD *)v32 = v39[0];
  *((_OWORD *)v32 + 1) = v33;
  *((_OWORD *)v32 + 2) = v39[2];
  sub_100011894((uint64_t)v8, type metadata accessor for CurrentConditionsView);
  sub_1000168AC((uint64_t)v11, (uint64_t)v13, &qword_1001BF238);
  sub_10000F7C4((uint64_t)v19, (uint64_t)v17, type metadata accessor for LocationDegreesView);
  sub_1000168D8((uint64_t)v13, (uint64_t)v11, &qword_1001BF238);
  v34 = v38;
  sub_10000F7C4((uint64_t)v17, v38, type metadata accessor for LocationDegreesView);
  v35 = sub_100005D40(&qword_1001BF240);
  v36 = v34 + *(int *)(v35 + 48);
  *(_QWORD *)v36 = 0;
  *(_BYTE *)(v36 + 8) = 1;
  sub_1000168D8((uint64_t)v11, v34 + *(int *)(v35 + 64), &qword_1001BF238);
  sub_100016904((uint64_t)v13, &qword_1001BF238);
  sub_100011894((uint64_t)v19, type metadata accessor for LocationDegreesView);
  sub_100016904((uint64_t)v11, &qword_1001BF238);
  sub_100011894((uint64_t)v17, type metadata accessor for LocationDegreesView);
}

uint64_t sub_10000EF14(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019E6AC, 1);
}

void sub_10000EF24(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for AccessibilitySizeCurrentObservationBannerView(0);
  __chkstk_darwin(v4);
  sub_100016B7C();
  sub_100016B64();
  sub_100016C90();
  v7 = swift_allocObject(&unk_1001B4A48, v5, v6);
  sub_100016C58(v7);
  *a1 = v1;
  a1[1] = v2;
  a1[2] = sub_10000F7B0;
  a1[3] = v7;
  sub_100016BC0();
}

void sub_10000EFA4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = sub_100005D40(&qword_1001BF200);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static VerticalAlignment.top.getter(v5);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  v8 = sub_100005D40(&qword_1001BF208);
  sub_10000F124(a1, (uint64_t)&v7[*(int *)(v8 + 44)]);
  v9 = a2 + *(int *)(sub_100005D40(&qword_1001BF210) + 36);
  sub_10000F7C4(a1, v9, type metadata accessor for CurrentObservationViewModel);
  v10 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v11 = a1 + v10[5];
  v12 = (int *)type metadata accessor for CurrentObservationAccessibilityModifier(0);
  sub_10000F7C4(v11, v9 + v12[5], type metadata accessor for DailyForecastViewModel);
  v13 = a1 + v10[7];
  v14 = v9 + v12[6];
  v15 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, v13, v15);
  v16 = (uint64_t *)(a1 + v10[8]);
  v17 = *v16;
  v18 = v16[1];
  v19 = (_QWORD *)(v9 + v12[7]);
  *v19 = v17;
  v19[1] = v18;
  sub_1000168D8((uint64_t)v7, a2, &qword_1001BF200);
  swift_bridgeObjectRetain(v18);
  sub_100016904((uint64_t)v7, &qword_1001BF200);
}

void sub_10000F124(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t *v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for CurrentConditionsView(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v28 - v11;
  v13 = type metadata accessor for LocationDegreesView(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v28 - v17;
  sub_10000F7C4(a1, (uint64_t)&v28 - v17, type metadata accessor for CurrentObservationViewAttributes);
  sub_10000F7C4(a1, (uint64_t)v6, type metadata accessor for CurrentObservationViewAttributes);
  v19 = GeometryProxy.size.getter();
  v21 = v20;
  KeyPath = swift_getKeyPath(&unk_10017A740);
  v23 = (uint64_t *)&v12[v7[8]];
  *v23 = KeyPath;
  v24 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  sub_100011868((uint64_t)v6, (uint64_t)v12, type metadata accessor for CurrentObservationViewAttributes);
  v25 = (double *)&v12[v7[5]];
  *v25 = v19;
  *((_QWORD *)v25 + 1) = v21;
  v12[v7[6]] = 1;
  *(_QWORD *)&v12[v7[7]] = 3;
  sub_10000F7C4((uint64_t)v18, (uint64_t)v16, type metadata accessor for LocationDegreesView);
  sub_10000F7C4((uint64_t)v12, (uint64_t)v10, type metadata accessor for CurrentConditionsView);
  sub_10000F7C4((uint64_t)v16, a2, type metadata accessor for LocationDegreesView);
  v26 = sub_100005D40(&qword_1001BF218);
  v27 = a2 + *(int *)(v26 + 48);
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = 1;
  sub_10000F7C4((uint64_t)v10, a2 + *(int *)(v26 + 64), type metadata accessor for CurrentConditionsView);
  sub_100011894((uint64_t)v12, type metadata accessor for CurrentConditionsView);
  sub_100011894((uint64_t)v18, type metadata accessor for LocationDegreesView);
  sub_100011894((uint64_t)v10, type metadata accessor for CurrentConditionsView);
  sub_100011894((uint64_t)v16, type metadata accessor for LocationDegreesView);
}

uint64_t sub_10000F38C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v41)(uint64_t);
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;

  type metadata accessor for AccessibilitySizeCurrentObservationBannerView(0);
  sub_100016BD4();
  v2 = v0 + v1;
  v3 = type metadata accessor for UUID(0);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  sub_100016B08(v2);
  v5 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v6 = sub_100016BB4();
  v7 = type metadata accessor for Date(v6);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  sub_100016BA8();
  v8(v2 + v5[6], v7);
  v9 = v2 + v5[7];
  v10 = *(_QWORD *)(*(_QWORD *)(sub_100005D40(&qword_1001BF090) - 8) + 8);
  sub_100016B5C(v9);
  sub_100016B5C(v2 + v5[8]);
  sub_100016A8C(v2 + v5[9]);
  v11 = v2 + v5[10];
  if (!sub_100016AC4(v11))
    sub_100016B5C(v11);
  v12 = v2 + v5[11];
  if (!sub_100016AC4(v12))
    sub_100016B5C(v12);
  v13 = v2 + v5[12];
  v45 = v4;
  v46 = v3;
  sub_100016B08(v13);
  v14 = (int *)type metadata accessor for ConditionViewModel(0);
  v15 = v13 + v14[5];
  v16 = type metadata accessor for WeatherCondition(0);
  v41 = *(void (**)(uint64_t))(*(_QWORD *)(v16 - 8) + 8);
  v42 = v16;
  v41(v15);
  sub_100016A8C(v13 + v14[6]);
  sub_100016A8C(v13 + v14[7]);
  v17 = sub_100016BB4();
  v18 = type metadata accessor for CloudAltitudeKind(v17);
  sub_100016BF0(v18);
  if (!sub_100016AB8(v2 + v5[15]))
    sub_100016BA8();
  if (!sub_100016AB8(v2 + v5[16]))
    sub_100016BA8();
  v19 = sub_100016BB4();
  type metadata accessor for UVIndex(v19);
  v20 = sub_100016CD8();
  v43 = v22;
  v44 = v21;
  ((void (*)(uint64_t))v22)(v20);
  v23 = sub_100016BB4();
  v24 = type metadata accessor for Wind(v23);
  sub_100016BF0(v24);
  v25 = v2 + v5[20];
  v26 = *(_QWORD *)(v25 + 8);
  if (v26)
  {
    swift_bridgeObjectRelease(v26);
    sub_100007458(*(_QWORD *)(v25 + 16), *(_QWORD *)(v25 + 24), *(_BYTE *)(v25 + 32));
  }
  v27 = (int *)sub_100016B00();
  v28 = v2 + v27[5];
  v45(v28, v46);
  v29 = type metadata accessor for DailyForecastViewModel(0);
  v8(v28 + *(int *)(v29 + 20), v7);
  sub_100016B5C(v28 + *(int *)(v29 + 24));
  sub_100016B5C(v28 + *(int *)(v29 + 28));
  v30 = v28 + *(int *)(v29 + 32);
  v45(v30, v46);
  ((void (*)(uint64_t, uint64_t))v41)(v30 + v14[5], v42);
  sub_100016A8C(v30 + v14[6]);
  sub_100016A8C(v30 + v14[7]);
  v31 = sub_100016CA8();
  v32 = type metadata accessor for Precipitation(v31);
  sub_100016C04(v32);
  sub_100016A8C(v28 + *(int *)(v29 + 44));
  sub_100016A8C(v28 + *(int *)(v29 + 48));
  sub_100016A8C(v28 + *(int *)(v29 + 52));
  sub_100016A8C(v28 + *(int *)(v29 + 56));
  v33 = sub_100016CA8();
  v34 = type metadata accessor for TemperatureScaleConfiguration(v33);
  sub_100016C04(v34);
  v35 = sub_100016CA8();
  type metadata accessor for SunEvents(v35);
  if (!sub_100016AB8(v10))
    sub_100016C44();
  v36 = sub_100016CA8();
  type metadata accessor for MoonEvents(v36);
  if (!sub_100016AB8(v10))
    sub_100016C44();
  v43(v28 + *(int *)(v29 + 72), v44);
  v37 = sub_100016BB4();
  v38 = type metadata accessor for RainInlineContentViewModel(v37);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v29, 1, v38))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v29 + 8));
    type metadata accessor for AttributedString(0);
    sub_100016B10();
    if (!sub_100016AB8(v29 + *(int *)(v38 + 24)))
      sub_100016B10();
    sub_100016A8C(v29 + *(int *)(v38 + 28));
  }
  v39 = type metadata accessor for Location(0);
  sub_100016AEC(v39);
  sub_100016A8C(v2 + v27[8]);
  sub_100016B3C(v27[11]);
  sub_100016A8C(v2 + v27[12]);
  sub_100016B3C(v27[13]);
  sub_100016B3C(v27[14]);
  sub_100016B3C(v27[15]);
  sub_100016B3C(v27[16]);
  sub_100016B3C(v27[18]);
  sub_100016B3C(v27[19]);
  sub_100016A8C(v2 + v27[25]);
  return sub_100016AD0();
}

uint64_t sub_10000F7B0(uint64_t a1)
{
  return sub_100011D20(a1, type metadata accessor for AccessibilitySizeCurrentObservationBannerView, (uint64_t (*)(uint64_t, uint64_t))sub_10000EFA4);
}

void sub_10000F7C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_100016C68(a1, a2, a3);
  sub_100016B28(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_100006338();
}

uint64_t type metadata accessor for CurrentConditionsView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001BF2A0, (uint64_t)&nominal type descriptor for CurrentConditionsView);
}

uint64_t sub_10000F804(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_10000F834@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = static HorizontalAlignment.trailing.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v3 = sub_100005D40(&qword_1001BF340);
  return sub_10000F878(v1, (char *)(a1 + *(int *)(v3 + 44)));
}

uint64_t sub_10000F878@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t KeyPath;
  uint64_t *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  int *v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  char v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(char *, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void (*v205)(char *, uint64_t);
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t result;
  unint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  void (*v243)(char *, uint64_t);
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void (*v258)(_QWORD);
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  unint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  void (*v283)(char *, char *, uint64_t);
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  void (*v295)(char *, uint64_t);
  uint64_t v296;
  _QWORD v297[2];
  uint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  void (*v307)(_QWORD);
  char *v308;
  char *v309;
  void (*v310)(char *, uint64_t);
  uint64_t v311;
  char *v312;
  void (*v313)(_QWORD);
  uint64_t v314;
  void (*v315)(char *, uint64_t);
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t (*v321)(char *, uint64_t, uint64_t);
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  char *v327;
  uint64_t v328;
  int *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  char *v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  uint64_t v356;
  char *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  _OWORD v367[16];
  _QWORD v368[32];
  char v369;
  uint64_t v370;
  unsigned __int8 v371;
  uint64_t v372;
  unsigned __int8 v373;
  __int128 v374;

  v352 = a2;
  v336 = sub_100005D40(&qword_1001BF348);
  __chkstk_darwin(v336);
  v323 = (_QWORD *)((char *)v297 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v321 = (uint64_t (*)(char *, uint64_t, uint64_t))sub_100005D40(&qword_1001BF350);
  __chkstk_darwin(v321);
  v322 = (uint64_t)v297 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v304 = sub_100005D40(&qword_1001BF358);
  __chkstk_darwin(v304);
  v318 = (char *)v297 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v313 = (void (*)(_QWORD))type metadata accessor for TemperatureHighLowTextVertical(0);
  v311 = *((_QWORD *)v313 - 1);
  __chkstk_darwin(v313);
  v310 = (void (*)(char *, uint64_t))((char *)v297 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100005D40(&qword_1001BF360);
  v314 = *(_QWORD *)(v7 - 8);
  v315 = (void (*)(char *, uint64_t))v7;
  __chkstk_darwin(v7);
  v312 = (char *)v297 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v316 = sub_100005D40(&qword_1001BF368);
  __chkstk_darwin(v316);
  v317 = (char *)v297 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001BF370);
  v301 = *(_QWORD *)(v10 - 8);
  v302 = v10;
  __chkstk_darwin(v10);
  v300 = (char *)v297 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v319 = sub_100005D40(&qword_1001BF378);
  v12 = __chkstk_darwin(v319);
  v299 = (char *)v297 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v303 = (uint64_t)v297 - v14;
  v15 = sub_100005D40(&qword_1001BF380);
  v16 = __chkstk_darwin(v15);
  v320 = (uint64_t)v297 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v324 = (uint64_t)v297 - v18;
  v348 = sub_100005D40(&qword_1001BF388);
  __chkstk_darwin(v348);
  v351 = (_QWORD *)((char *)v297 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v333 = sub_100005D40(&qword_1001BF390);
  __chkstk_darwin(v333);
  v334 = (uint64_t)v297 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v350 = sub_100005D40(&qword_1001BF398);
  __chkstk_darwin(v350);
  v335 = (char *)v297 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for TemperatureHighLowText.Style(0);
  v330 = *(_QWORD *)(v22 - 8);
  v331 = v22;
  v23 = __chkstk_darwin(v22);
  v309 = (char *)v297 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v327 = (char *)v297 - v25;
  v362 = type metadata accessor for WeatherFormatPlaceholder(0);
  v338 = *(_QWORD *)(v362 - 8);
  __chkstk_darwin(v362);
  v342 = (char *)v297 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v344 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v337 = *(_QWORD *)(v344 - 8);
  v27 = __chkstk_darwin(v344);
  v341 = (char *)v297 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v339 = (char *)v297 - v29;
  v343 = sub_100005D40(&qword_1001BF090);
  v361 = *(_QWORD *)(v343 - 8);
  __chkstk_darwin(v343);
  v340 = (char *)v297 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v345 = type metadata accessor for TemperatureHighLowText(0);
  v332 = *(_QWORD *)(v345 - 8);
  v31 = __chkstk_darwin(v345);
  v307 = (void (*)(_QWORD))((char *)v297 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = __chkstk_darwin(v31);
  v308 = (char *)v297 - v34;
  v35 = __chkstk_darwin(v33);
  v326 = (char *)v297 - v36;
  __chkstk_darwin(v35);
  v328 = (uint64_t)v297 - v37;
  v38 = sub_100005D40(&qword_1001BF3A0);
  v39 = __chkstk_darwin(v38);
  v349 = (uint64_t)v297 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v347 = (char *)v297 - v41;
  v42 = type metadata accessor for Locale.Language(0);
  v359 = *(_QWORD *)(v42 - 8);
  v360 = v42;
  __chkstk_darwin(v42);
  v357 = (char *)v297 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v358 = type metadata accessor for Locale(0);
  v356 = *(_QWORD *)(v358 - 8);
  __chkstk_darwin(v358);
  v355 = (char *)v297 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for ConditionImage(0);
  __chkstk_darwin(v45);
  v47 = (_QWORD *)((char *)v297 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  v353 = sub_100005D40(&qword_1001BF3A8);
  __chkstk_darwin(v353);
  v49 = (char *)v297 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v354 = sub_100005D40(&qword_1001BF3B0);
  __chkstk_darwin(v354);
  v51 = (char *)v297 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v366 = sub_100005D40(&qword_1001BF3B8);
  v364 = *(_QWORD *)(v366 - 8);
  v52 = __chkstk_darwin(v366);
  v365 = (char *)v297 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v363 = (char *)v297 - v54;
  v55 = a1 + *(int *)(type metadata accessor for CurrentObservationViewModel(0) + 48);
  v56 = type metadata accessor for ConditionViewModel(0);
  v57 = (uint64_t *)(v55 + *(int *)(v56 + 24));
  v59 = *v57;
  v58 = v57[1];
  v305 = v56;
  v306 = v55;
  LOBYTE(v55) = *(_BYTE *)(v55 + *(int *)(v56 + 40));
  *v47 = swift_getKeyPath(&unk_10017A808);
  v60 = sub_100005D40(&qword_1001BF3C0);
  swift_storeEnumTagMultiPayload(v47, v60, 0);
  v61 = (_QWORD *)((char *)v47 + *(int *)(v45 + 20));
  *v61 = v59;
  v61[1] = v58;
  *((_BYTE *)v47 + *(int *)(v45 + 24)) = v55;
  v62 = type metadata accessor for CurrentObservationViewAttributes(0);
  v63 = *(_QWORD *)(a1 + *(int *)(v62 + 44));
  KeyPath = swift_getKeyPath(&unk_10017A838);
  sub_10000F7C4((uint64_t)v47, (uint64_t)v49, type metadata accessor for ConditionImage);
  v65 = (uint64_t *)&v49[*(int *)(v353 + 36)];
  *v65 = KeyPath;
  v65[1] = v63;
  swift_retain(v63);
  swift_bridgeObjectRetain(v58);
  sub_100011894((uint64_t)v47, type metadata accessor for ConditionImage);
  v66 = (int *)v62;
  v67 = *(_QWORD *)(a1 + *(int *)(v62 + 60));
  v68 = swift_getKeyPath(&unk_10017A868);
  sub_1000168D8((uint64_t)v49, (uint64_t)v51, &qword_1001BF3A8);
  v69 = v354;
  v70 = (uint64_t *)&v51[*(int *)(v354 + 36)];
  *v70 = v68;
  v70[1] = v67;
  swift_retain(v67);
  v71 = a1;
  sub_100016904((uint64_t)v49, &qword_1001BF3A8);
  v72 = v355;
  v73 = static Locale.current.getter();
  v74 = v357;
  Locale.language.getter(v73);
  (*(void (**)(char *, uint64_t))(v356 + 8))(v72, v358);
  v75 = sub_100016470();
  v76 = v365;
  View.typesettingLanguage(_:isEnabled:)(v74, 1, v69, v75);
  (*(void (**)(char *, uint64_t))(v359 + 8))(v74, v360);
  sub_100016904((uint64_t)v51, &qword_1001BF3B0);
  (*(void (**)(char *, char *, uint64_t))(v364 + 32))(v363, v76, v366);
  v77 = type metadata accessor for CurrentConditionsView(0);
  v78 = v71;
  if (*(_BYTE *)(v71 + *(int *)(v77 + 24)) == 1)
  {
    v79 = static Alignment.center.getter(v77);
    _FrameLayout.init(width:height:alignment:)(&v370, 0, 1, 0x4014000000000000, 0, v79, v80);
    v367[0] = xmmword_10017A630;
    *(_QWORD *)&v367[1] = v370;
    *((_QWORD *)&v367[1] + 1) = v371;
    *(_QWORD *)&v367[2] = v372;
    *((_QWORD *)&v367[2] + 1) = v373;
    v367[3] = v374;
    LOBYTE(v367[4]) = 0;
  }
  else
  {
    memset(v367, 0, 64);
    LOBYTE(v367[4]) = 1;
  }
  v81 = sub_100005D40(&qword_1001BF400);
  v82 = sub_100016590();
  v83 = _ConditionalContent<>.init(storage:)(v367, v81, &type metadata for Spacer, v82, &protocol witness table for Spacer);
  v359 = v368[1];
  v360 = v368[0];
  v357 = (char *)v368[3];
  v358 = v368[2];
  v355 = (char *)v368[5];
  v356 = v368[4];
  v353 = v368[7];
  v354 = v368[6];
  v346 = LOBYTE(v368[8]);
  if (*(_BYTE *)(v71 + v66[10]) == 1)
  {
    v329 = v66;
    v84 = v66[5];
    v325 = v71;
    v85 = v71 + v84;
    v323 = (uint64_t *)(v71 + v84);
    v86 = type metadata accessor for DailyForecastViewModel(0);
    v87 = v85 + *(int *)(v86 + 24);
    v321 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v361 + 16);
    v322 = v86;
    v88 = v340;
    v89 = v343;
    v90 = v321(v340, v87, v343);
    v91 = v339;
    v92 = static WeatherFormatStyle<>.weather.getter(v90);
    v93 = v341;
    NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v92);
    v315 = *(void (**)(char *, uint64_t))(v337 + 8);
    v94 = v344;
    v315(v91, v344);
    LODWORD(v320) = enum case for WeatherFormatPlaceholder.none(_:);
    v95 = v338;
    v319 = *(_QWORD *)(v338 + 104);
    v96 = v342;
    ((void (*)(char *))v319)(v342);
    v318 = (char *)type metadata accessor for UnitManager(0);
    v97 = static UnitManager.standard.getter(v318);
    sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
    v317 = v98;
    v337 = Measurement.formatted<A>(_:placeholder:unitManager:)(v93, v96, v97, &protocol witness table for UnitManager, v89, v94);
    v324 = v99;
    swift_release(v97);
    v338 = *(_QWORD *)(v95 + 8);
    v100 = v362;
    ((void (*)(char *, uint64_t))v338)(v96, v362);
    v101 = v315;
    v315(v93, v94);
    v316 = *(_QWORD *)(v361 + 8);
    ((void (*)(char *, uint64_t))v316)(v88, v89);
    v102 = v321(v88, (uint64_t)v323 + *(int *)(v322 + 28), v89);
    v103 = static WeatherFormatStyle<>.weather.getter(v102);
    NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v103);
    v101(v91, v94);
    v104 = ((uint64_t (*)(char *, _QWORD, uint64_t))v319)(v96, v320, v100);
    v105 = static UnitManager.standard.getter(v104);
    v361 = Measurement.formatted<A>(_:placeholder:unitManager:)(v93, v96, v105, &protocol witness table for UnitManager, v89, v94);
    v107 = v106;
    swift_release(v105);
    ((void (*)(char *, uint64_t))v338)(v96, v100);
    v101(v93, v94);
    ((void (*)(char *, uint64_t))v316)(v88, v89);
    v108 = *(_QWORD *)(v325 + v329[18]);
    if (*(_BYTE *)(v325 + v329[21]))
      v109 = (unsigned int *)&enum case for TemperatureHighLowText.Style.numbersOnly(_:);
    else
      v109 = (unsigned int *)&enum case for TemperatureHighLowText.Style.textLabels(_:);
    v110 = v327;
    (*(void (**)(char *, _QWORD, uint64_t))(v330 + 104))(v327, *v109, v331);
    v111 = swift_retain(v108);
    v112 = static Alignment.topTrailing.getter(v111);
    v114 = v113;
    v115 = static Color.white.getter(v112);
    v116 = v326;
    TemperatureHighLowText.init(highTemperature:lowTemperature:font:foregroundColor:style:textAlignment:alignVertically:textHeightFrame:)(v337, v324, v361, v107, v108, v115, v110, v112, 0.0, v114, 1);
    v117 = v332;
    v118 = v328;
    v119 = v345;
    (*(void (**)(uint64_t, char *, uint64_t))(v332 + 32))(v328, v116, v345);
    v120 = v334;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v117 + 16))(v334, v118, v119);
    swift_storeEnumTagMultiPayload(v120, v333, 0);
    sub_100016878(&qword_1001BF420, (uint64_t (*)(uint64_t))&type metadata accessor for TemperatureHighLowText);
    v122 = v121;
    sub_100016A54(&qword_1001BF428, &qword_1001BF348);
    v123 = (uint64_t)v335;
    _ConditionalContent<>.init(storage:)(v120, v119, v336, v122, v124);
    v125 = v351;
    sub_1000168D8(v123, (uint64_t)v351, &qword_1001BF398);
    swift_storeEnumTagMultiPayload(v125, v348, 0);
    v126 = sub_100005D40(&qword_1001BF410);
    v127 = sub_1000165F4();
    sub_100016A54(&qword_1001BF430, &qword_1001BF410);
    v128 = v347;
    _ConditionalContent<>.init(storage:)(v125, v350, v126, v127, v129);
    sub_100016904(v123, &qword_1001BF398);
    v130 = v118;
    v131 = (uint64_t)v128;
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v130, v119);
    goto LABEL_25;
  }
  v132 = (uint64_t *)(v71 + v66[8]);
  v134 = *v132;
  v133 = v132[1];
  v135 = v134 & 0xFFFFFFFFFFFFLL;
  if ((v133 & 0x2000000000000000) != 0)
    v136 = HIBYTE(v133) & 0xF;
  else
    v136 = v135;
  if (v136)
  {
    v137 = static HorizontalAlignment.center.getter(v83);
    sub_1000113A8(v71, (uint64_t)v367);
    v369 = 1;
    memcpy((char *)v368 + 7, v367, 0xF8uLL);
    v138 = v351;
    *v351 = v137;
    v138[1] = 0;
    *((_BYTE *)v138 + 16) = 1;
    memcpy((char *)v138 + 17, v368, 0xFFuLL);
    swift_storeEnumTagMultiPayload(v138, v348, 1);
    v139 = sub_100005D40(&qword_1001BF410);
    v140 = sub_1000165F4();
    sub_100016A54(&qword_1001BF430, &qword_1001BF410);
    v131 = (uint64_t)v347;
    _ConditionalContent<>.init(storage:)(v138, v350, v139, v140, v141);
LABEL_25:
    v282 = v364;
    v283 = *(void (**)(char *, char *, uint64_t))(v364 + 16);
    v284 = v365;
    v285 = v363;
    v286 = v366;
    v283(v365, v363, v366);
    v287 = v349;
    sub_1000168D8(v131, v349, &qword_1001BF3A0);
    v288 = v352;
    v283(v352, v284, v286);
    v289 = sub_100005D40(&qword_1001BF438);
    v290 = &v288[*(int *)(v289 + 48)];
    v291 = v359;
    *(_QWORD *)v290 = v360;
    *((_QWORD *)v290 + 1) = v291;
    v292 = v357;
    *((_QWORD *)v290 + 2) = v358;
    *((_QWORD *)v290 + 3) = v292;
    v293 = v355;
    *((_QWORD *)v290 + 4) = v356;
    *((_QWORD *)v290 + 5) = v293;
    v294 = v353;
    *((_QWORD *)v290 + 6) = v354;
    *((_QWORD *)v290 + 7) = v294;
    v290[64] = v346;
    sub_1000168D8(v287, (uint64_t)&v288[*(int *)(v289 + 64)], &qword_1001BF3A0);
    sub_100016904(v131, &qword_1001BF3A0);
    v295 = *(void (**)(char *, uint64_t))(v282 + 8);
    v295(v285, v286);
    sub_100016904(v287, &qword_1001BF3A0);
    return ((uint64_t (*)(char *, uint64_t))v295)(v284, v286);
  }
  v142 = *(unsigned __int8 *)(v71 + v66[23]);
  v329 = v66;
  v325 = v71;
  if (v142 == 1)
  {
    v143 = (_QWORD *)(v306 + *(int *)(v305 + 28));
    v144 = v143[1];
    v368[0] = *v143;
    v368[1] = v144;
    v145 = sub_10001692C();
    swift_bridgeObjectRetain(v144);
    v146 = Text.init<A>(_:)(v368, &type metadata for String, v145);
    v148 = v147;
    v150 = v149;
    v152 = v151 & 1;
    v153 = ((uint64_t (*)(void))static Color.white.getter)();
    v154 = Text.foregroundColor(_:)(v153, v146, v148, v152, v150);
    v156 = v155;
    v158 = v157;
    v328 = v159;
    swift_release(v153);
    v160 = v158 & 1;
    v161 = v78;
    sub_100016868(v146, v148, v152);
    swift_bridgeObjectRelease(v150);
    v162 = v328;
    v163 = Text.font(_:)(*(_QWORD *)(v161 + v329[13]), v154, v156, v160, v328);
    v165 = v164;
    v167 = v166;
    v169 = v168 & 1;
    v170 = v154;
    v171 = v329;
    sub_100016868(v170, v156, v160);
    v172 = swift_bridgeObjectRelease(v162);
    v173 = static Font.Weight.medium.getter(v172);
    v306 = Text.fontWeight(_:)(*(_QWORD *)&v173, 0, v163, v165, v169, v167);
    v328 = v174;
    v326 = v176;
    v327 = (char *)(v175 & 1);
    sub_100016868(v163, v165, v169);
    swift_bridgeObjectRelease(v167);
    v66 = v171;
    v78 = v161;
    if ((*(_BYTE *)(v161 + v171[22]) & 1) != 0)
    {
      v305 = 0x4000000000000000;
      goto LABEL_18;
    }
LABEL_20:
    v317 = (char *)(v78 + v66[5]);
    v227 = v317;
    v228 = type metadata accessor for DailyForecastViewModel(0);
    v229 = &v227[*(int *)(v228 + 24)];
    v315 = *(void (**)(char *, uint64_t))(v361 + 16);
    v316 = v228;
    v230 = v340;
    v231 = v343;
    v232 = ((uint64_t (*)(char *, char *, uint64_t))v315)(v340, v229, v343);
    v233 = v339;
    v234 = static WeatherFormatStyle<>.weather.getter(v232);
    v235 = v341;
    NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v234);
    v305 = *(_QWORD *)(v337 + 8);
    v236 = v344;
    ((void (*)(char *, uint64_t))v305)(v233, v344);
    LODWORD(v314) = enum case for WeatherFormatPlaceholder.none(_:);
    v237 = v338;
    v313 = *(void (**)(_QWORD))(v338 + 104);
    v238 = v342;
    v313(v342);
    v312 = (char *)type metadata accessor for UnitManager(0);
    v239 = ((uint64_t (*)(void))static UnitManager.standard.getter)();
    sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
    v311 = v240;
    v337 = Measurement.formatted<A>(_:placeholder:unitManager:)(v235, v238, v239, &protocol witness table for UnitManager, v231, v236);
    v318 = v241;
    swift_release(v239);
    v338 = *(_QWORD *)(v237 + 8);
    v242 = v362;
    ((void (*)(char *, uint64_t))v338)(v238, v362);
    v243 = (void (*)(char *, uint64_t))v305;
    ((void (*)(char *, uint64_t))v305)(v235, v236);
    v310 = *(void (**)(char *, uint64_t))(v361 + 8);
    v310(v230, v231);
    v244 = ((uint64_t (*)(char *, char *, uint64_t))v315)(v230, &v317[*(int *)(v316 + 28)], v231);
    v245 = static WeatherFormatStyle<>.weather.getter(v244);
    NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v245);
    v243(v233, v236);
    v246 = ((uint64_t (*)(char *, _QWORD, uint64_t))v313)(v238, v314, v242);
    v247 = static UnitManager.standard.getter(v246);
    v361 = Measurement.formatted<A>(_:placeholder:unitManager:)(v235, v238, v247, &protocol witness table for UnitManager, v231, v236);
    v249 = v248;
    swift_release(v247);
    ((void (*)(char *, uint64_t))v338)(v238, v242);
    v243(v235, v236);
    v310(v230, v231);
    v250 = *(_QWORD *)(v325 + v329[18]);
    if (*(_BYTE *)(v325 + v329[21]))
      v251 = (unsigned int *)&enum case for TemperatureHighLowText.Style.numbersOnly(_:);
    else
      v251 = (unsigned int *)&enum case for TemperatureHighLowText.Style.textLabels(_:);
    v252 = v309;
    (*(void (**)(char *, _QWORD, uint64_t))(v330 + 104))(v309, *v251, v331);
    v253 = swift_retain(v250);
    v254 = static Alignment.trailing.getter(v253);
    v256 = v255;
    v257 = ((uint64_t (*)(void))static Color.white.getter)();
    v296 = v256;
    v258 = v307;
    TemperatureHighLowText.init(highTemperature:lowTemperature:font:foregroundColor:style:textAlignment:alignVertically:textHeightFrame:)(v337, v318, v361, v249, v250, v257, v252, v254, 0.0, v296, 0);
    v259 = v332;
    v260 = v308;
    v261 = v345;
    (*(void (**)(char *, void (*)(_QWORD), uint64_t))(v332 + 32))(v308, v258, v345);
    v262 = v322;
    (*(void (**)(uint64_t, char *, uint64_t))(v259 + 16))(v322, v260, v261);
    swift_storeEnumTagMultiPayload(v262, v321, 1);
    v263 = sub_100016690();
    sub_100016878(&qword_1001BF420, (uint64_t (*)(uint64_t))&type metadata accessor for TemperatureHighLowText);
    v224 = v324;
    _ConditionalContent<>.init(storage:)(v262, v319, v261, v263, v264);
    (*(void (**)(char *, uint64_t))(v259 + 8))(v260, v261);
    v226 = 0;
    goto LABEL_24;
  }
  v305 = 0;
  v306 = 0;
  v327 = 0;
  v328 = 0;
  v326 = 0;
  if (*(_BYTE *)(v71 + v66[22]) != 1)
    goto LABEL_20;
LABEL_18:
  v331 = v78 + v66[5];
  v177 = v331;
  v330 = type metadata accessor for DailyForecastViewModel(0);
  v178 = v177 + *(int *)(v330 + 24);
  v309 = *(char **)(v361 + 16);
  v179 = v340;
  v180 = v343;
  v181 = ((uint64_t (*)(char *, uint64_t, uint64_t))v309)(v340, v178, v343);
  v182 = v339;
  v183 = static WeatherFormatStyle<>.weather.getter(v181);
  v184 = v341;
  NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v183);
  v297[0] = *(_QWORD *)(v337 + 8);
  v185 = v344;
  ((void (*)(char *, uint64_t))v297[0])(v182, v344);
  LODWORD(v308) = enum case for WeatherFormatPlaceholder.none(_:);
  v186 = v338;
  v307 = *(void (**)(_QWORD))(v338 + 104);
  v187 = v342;
  v307(v342);
  v298 = type metadata accessor for UnitManager(0);
  v188 = static UnitManager.standard.getter(v298);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v297[1] = v189;
  v337 = Measurement.formatted<A>(_:placeholder:unitManager:)(v184, v187, v188, &protocol witness table for UnitManager, v180, v185);
  v332 = v190;
  swift_release(v188);
  v338 = *(_QWORD *)(v186 + 8);
  v191 = v362;
  ((void (*)(char *, uint64_t))v338)(v187, v362);
  v192 = (void (*)(char *, uint64_t))v297[0];
  ((void (*)(char *, uint64_t))v297[0])(v184, v185);
  v361 = *(_QWORD *)(v361 + 8);
  ((void (*)(char *, uint64_t))v361)(v179, v180);
  v193 = ((uint64_t (*)(char *, uint64_t, uint64_t))v309)(v179, v331 + *(int *)(v330 + 28), v180);
  v194 = static WeatherFormatStyle<>.weather.getter(v193);
  NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v194);
  v192(v182, v185);
  v195 = ((uint64_t (*)(char *, _QWORD, uint64_t))v307)(v187, v308, v191);
  v196 = static UnitManager.standard.getter(v195);
  v339 = (char *)Measurement.formatted<A>(_:placeholder:unitManager:)(v184, v187, v196, &protocol witness table for UnitManager, v180, v185);
  v198 = v197;
  swift_release(v196);
  ((void (*)(char *, uint64_t))v338)(v187, v191);
  v192(v184, v185);
  ((void (*)(char *, uint64_t))v361)(v179, v180);
  v199 = (char *)v310;
  v200 = TemperatureHighLowTextVertical.init(highTemperature:lowTemperature:showNumericOnlyHighLow:scaleFactor:additionalSpacing:)(v337, v332, v339, v198, *(unsigned __int8 *)(v325 + v329[21]), 1.0, 0.0);
  v201 = v312;
  TemperatureHighLowTextVertical.defaultAccessibilityLabel()(v200);
  v202 = (*(uint64_t (**)(char *, void (*)(_QWORD)))(v311 + 8))(v199, v313);
  v203 = static Color.white.getter(v202);
  v204 = swift_getKeyPath(&unk_10017A838);
  v206 = v314;
  v205 = v315;
  v207 = (uint64_t)v317;
  (*(void (**)(char *, char *, void (*)(char *, uint64_t)))(v314 + 16))(v317, v201, v315);
  v208 = v316;
  v209 = (uint64_t *)(v207 + *(int *)(v316 + 36));
  *v209 = v204;
  v209[1] = v203;
  (*(void (**)(char *, _QWORD))(v206 + 8))(v201, v205);
  v210 = enum case for DynamicTypeSize.large(_:);
  v211 = type metadata accessor for DynamicTypeSize(0);
  v212 = (uint64_t)v318;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v211 - 8) + 104))(v318, v210, v211);
  sub_100016878(&qword_1001BF468, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v212, v212, v211);
  if ((result & 1) != 0)
  {
    v214 = sub_100016768();
    sub_100016A54(&qword_1001BF458, &qword_1001BF358);
    v215 = v300;
    View.dynamicTypeSize<A>(_:)(v212, v208, v304, v214, v216);
    sub_100016904(v212, &qword_1001BF358);
    sub_100016904(v207, &qword_1001BF368);
    v218 = v301;
    v217 = v302;
    v219 = (uint64_t)v299;
    (*(void (**)(char *, char *, uint64_t))(v301 + 16))(v299, v215, v302);
    v220 = v319;
    *(_OWORD *)(v219 + *(int *)(v319 + 36)) = xmmword_10017A640;
    (*(void (**)(char *, uint64_t))(v218 + 8))(v215, v217);
    v221 = v303;
    sub_1000168AC(v219, v303, &qword_1001BF378);
    v222 = v322;
    sub_1000168D8(v221, v322, &qword_1001BF378);
    swift_storeEnumTagMultiPayload(v222, v321, 0);
    v223 = sub_100016690();
    sub_100016878(&qword_1001BF420, (uint64_t (*)(uint64_t))&type metadata accessor for TemperatureHighLowText);
    v224 = v324;
    _ConditionalContent<>.init(storage:)(v222, v220, v345, v223, v225);
    sub_100016904(v221, &qword_1001BF378);
    v226 = v305;
LABEL_24:
    v265 = v320;
    sub_1000168D8(v224, v320, &qword_1001BF380);
    v266 = v323;
    v267 = v306;
    v269 = (uint64_t)v326;
    v268 = v327;
    *v323 = v306;
    v266[1] = v269;
    v270 = v328;
    v266[2] = (uint64_t)v268;
    v266[3] = v270;
    v327 = v268;
    v328 = v270;
    v266[4] = 0;
    v266[5] = v226;
    v271 = sub_100005D40(&qword_1001BF460);
    sub_1000168D8(v265, (uint64_t)v266 + *(int *)(v271 + 48), &qword_1001BF380);
    sub_1000167F8(v267, v269, (char)v268, v270);
    sub_1000167F8(v267, v269, (char)v268, v270);
    sub_100016904(v265, &qword_1001BF380);
    sub_100016838(v267, v269, (char)v268, v270);
    v272 = v334;
    sub_1000168D8((uint64_t)v266, v334, &qword_1001BF348);
    swift_storeEnumTagMultiPayload(v272, v333, 1);
    sub_100016878(&qword_1001BF420, (uint64_t (*)(uint64_t))&type metadata accessor for TemperatureHighLowText);
    v274 = v273;
    sub_100016A54(&qword_1001BF428, &qword_1001BF348);
    v275 = (uint64_t)v335;
    _ConditionalContent<>.init(storage:)(v272, v345, v336, v274, v276);
    sub_100016904((uint64_t)v266, &qword_1001BF348);
    v277 = v351;
    sub_1000168D8(v275, (uint64_t)v351, &qword_1001BF398);
    swift_storeEnumTagMultiPayload(v277, v348, 0);
    v278 = sub_100005D40(&qword_1001BF410);
    v279 = sub_1000165F4();
    sub_100016A54(&qword_1001BF430, &qword_1001BF410);
    v280 = v347;
    _ConditionalContent<>.init(storage:)(v277, v350, v278, v279, v281);
    v131 = (uint64_t)v280;
    sub_100016838(v267, v269, (char)v327, v328);
    sub_100016904(v275, &qword_1001BF398);
    sub_100016904(v324, &qword_1001BF380);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000113A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t KeyPath;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[184];
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  _BYTE v94[185];
  _BYTE v95[7];
  char v96;
  _BYTE v97[7];
  char v98;
  _BYTE v99[7];
  char v100;
  _QWORD v101[24];

  v65 = a2;
  v3 = type metadata accessor for Font.Leading(0);
  v68 = *(_QWORD *)(v3 - 8);
  v69 = v3;
  __chkstk_darwin(v3);
  v67 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Font.Context(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (_DWORD *)((char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for CurrentObservationViewAttributes(0);
  v66 = *(int *)(v9 + 56);
  v10 = *(_QWORD *)(a1 + v66);
  v70 = type metadata accessor for CurrentConditionsView(0);
  v77 = a1;
  sub_1000C5030(v8);
  v11 = Font.capHeight(in:)(v8, v10);
  v12 = (*(uint64_t (**)(_DWORD *, uint64_t))(v6 + 8))(v8, v5);
  v13 = static Alignment.center.getter(v12);
  _FrameLayout.init(width:height:alignment:)(&v79, 0, 1, *(_QWORD *)&v11, 0, v13, v14);
  v75 = v81;
  v76 = v79;
  v71 = v80;
  v72 = v82;
  v73 = v84;
  v74 = v83;
  v15 = (_QWORD *)(a1 + *(int *)(v9 + 32));
  v16 = v15[1];
  v101[0] = *v15;
  v101[1] = v16;
  v17 = sub_10001692C();
  swift_bridgeObjectRetain(v16);
  v18 = Text.init<A>(_:)(v101, &type metadata for String, v17);
  v20 = v19;
  v22 = v21;
  v24 = v23 & 1;
  v25 = static Color.white.getter();
  v26 = Text.foregroundColor(_:)(v25, v18, v20, v24, v22);
  v28 = v27;
  LOBYTE(v16) = v29;
  v31 = v30;
  swift_release(v25);
  v32 = v16 & 1;
  sub_100016868(v18, v20, v24);
  swift_bridgeObjectRelease(v22);
  v33 = v67;
  v34 = *(_QWORD *)(v77 + v66);
  v36 = v68;
  v35 = v69;
  (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v67, enum case for Font.Leading.tight(_:), v69);
  v37 = Font.leading(_:)(v33, v34);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
  v38 = Text.font(_:)(v37, v26, v28, v32, v31);
  v40 = v39;
  LOBYTE(v36) = v41;
  v43 = v42;
  swift_release(v37);
  v44 = v36 & 1;
  sub_100016868(v26, v28, v32);
  v45 = swift_bridgeObjectRelease(v31);
  v46 = static Font.Weight.medium.getter(v45);
  v47 = Text.fontWeight(_:)(*(_QWORD *)&v46, 0, v38, v40, v44, v43);
  v49 = v48;
  v51 = v50;
  LOBYTE(v26) = v52 & 1;
  sub_100016868(v38, v40, v44);
  swift_bridgeObjectRelease(v43);
  KeyPath = swift_getKeyPath(&unk_10017A898);
  v54 = *(_QWORD *)(v77 + *(int *)(v70 + 28));
  v55 = swift_getKeyPath(&unk_10017A8C8);
  v85 = v47;
  v86 = v49;
  v87 = v26;
  v88 = v51;
  v89 = KeyPath;
  v90 = 2;
  v91 = v55;
  v92 = v54;
  v93 = 0;
  v56 = static Alignment.trailing.getter();
  LOBYTE(v64) = 1;
  LOBYTE(v63) = 1;
  sub_100077818(0, (uint64_t)v101, 0, v63, 0, v64, v56);
  sub_100016868(v47, v49, v26);
  swift_release(v55);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v51);
  memcpy(v78, v101, sizeof(v78));
  memcpy(v94, v78, 0xB8uLL);
  v100 = 1;
  v98 = v71;
  v57 = v65;
  v96 = v72;
  memcpy((void *)(v65 + 64), v78, 0xB8uLL);
  v58 = v100;
  *(_DWORD *)(v57 + 9) = *(_DWORD *)v99;
  *(_DWORD *)(v57 + 12) = *(_DWORD *)&v99[3];
  v59 = v98;
  *(_DWORD *)(v57 + 25) = *(_DWORD *)v97;
  *(_DWORD *)(v57 + 28) = *(_DWORD *)&v97[3];
  v60 = v96;
  *(_DWORD *)(v57 + 41) = *(_DWORD *)v95;
  *(_DWORD *)(v57 + 44) = *(_DWORD *)&v95[3];
  *(_QWORD *)v57 = 0;
  *(_BYTE *)(v57 + 8) = v58;
  *(_QWORD *)(v57 + 16) = v76;
  *(_BYTE *)(v57 + 24) = v59;
  *(_QWORD *)(v57 + 32) = v75;
  *(_BYTE *)(v57 + 40) = v60;
  v61 = v73;
  *(_QWORD *)(v57 + 48) = v74;
  *(_QWORD *)(v57 + 56) = v61;
  memcpy(v101, v78, 0xB8uLL);
  sub_100016978((uint64_t)v94);
  return sub_1000169D0((uint64_t)v101);
}

uint64_t sub_100011848()
{
  return static View._viewListCount(inputs:)();
}

void sub_100011868(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_100016C68(a1, a2, a3);
  sub_100016B28(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_100006338();
}

void sub_100011894(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_100016A94(v2);
  sub_100006338();
}

uint64_t sub_1000118BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;

  sub_100016CEC();
  sub_100016BD4();
  v49 = v1;
  v3 = v0 + v2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = sub_100016C24();
  v8 = type metadata accessor for Date(v7);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  sub_100016C18();
  v9(v3 + v6[6], v8);
  v10 = v3 + v6[7];
  sub_100005D40(&qword_1001BF090);
  sub_100016B08(v10);
  sub_100016B08(v3 + v6[8]);
  sub_100016A8C(v3 + v6[9]);
  if (!sub_100016C30(v6[10]))
    sub_100016B08(v10);
  if (!sub_100016C30(v6[11]))
    sub_100016B08(v10);
  v11 = v3 + v6[12];
  v48 = v5;
  v5(v11, v4);
  v12 = (int *)type metadata accessor for ConditionViewModel(0);
  v13 = sub_100016BB4();
  type metadata accessor for WeatherCondition(v13);
  v14 = sub_100016CD8();
  v44 = v16;
  v45 = v15;
  ((void (*)(uint64_t))v16)(v14);
  sub_100016A8C(v11 + v12[6]);
  sub_100016A8C(v11 + v12[7]);
  v17 = sub_100016C24();
  v18 = type metadata accessor for CloudAltitudeKind(v17);
  sub_100016A94(v18);
  if (!sub_100016AC4(v3 + v6[15]))
    sub_100016C18();
  v19 = v3 + v6[16];
  if (!sub_100016AC4(v19))
    sub_100016C18();
  v20 = sub_100016C24();
  v21 = type metadata accessor for UVIndex(v20);
  v46 = *(void (**)(uint64_t))(*(_QWORD *)(v21 - 8) + 8);
  v47 = v21;
  v46(v19);
  v22 = sub_100016C24();
  v23 = type metadata accessor for Wind(v22);
  sub_100016A94(v23);
  v24 = v3 + v6[20];
  v25 = *(_QWORD *)(v24 + 8);
  if (v25)
  {
    swift_bridgeObjectRelease(v25);
    sub_100007458(*(_QWORD *)(v24 + 16), *(_QWORD *)(v24 + 24), *(_BYTE *)(v24 + 32));
  }
  v26 = (int *)sub_100016B00();
  v27 = v3 + v26[5];
  v48(v27, v4);
  v28 = type metadata accessor for DailyForecastViewModel(0);
  v9(v27 + *(int *)(v28 + 20), v8);
  sub_100016B08(v27 + *(int *)(v28 + 24));
  sub_100016B08(v27 + *(int *)(v28 + 28));
  v29 = v27 + *(int *)(v28 + 32);
  v48(v29, v4);
  v44(v29 + v12[5], v45);
  sub_100016A8C(v29 + v12[6]);
  sub_100016A8C(v29 + v12[7]);
  v30 = sub_100016CB4();
  v31 = type metadata accessor for Precipitation(v30);
  sub_100016AEC(v31);
  sub_100016A8C(v27 + *(int *)(v28 + 44));
  sub_100016A8C(v27 + *(int *)(v28 + 48));
  sub_100016A8C(v27 + *(int *)(v28 + 52));
  sub_100016A8C(v27 + *(int *)(v28 + 56));
  v32 = sub_100016CB4();
  v33 = type metadata accessor for TemperatureScaleConfiguration(v32);
  sub_100016AEC(v33);
  v34 = sub_100016CB4();
  type metadata accessor for SunEvents(v34);
  if (!sub_100016AC4((uint64_t)v48))
    sub_100016B94();
  v35 = sub_100016CB4();
  type metadata accessor for MoonEvents(v35);
  if (!sub_100016AC4((uint64_t)v48))
    sub_100016B94();
  ((void (*)(uint64_t, uint64_t))v46)(v27 + *(int *)(v28 + 72), v47);
  v36 = sub_100016C24();
  v37 = type metadata accessor for RainInlineContentViewModel(v36);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v28, 1, v37))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v28 + 8));
    type metadata accessor for AttributedString(0);
    sub_100016B10();
    if (!sub_100016AB8(v28 + *(int *)(v37 + 24)))
      sub_100016B10();
    sub_100016A8C(v28 + *(int *)(v37 + 28));
  }
  v38 = sub_100016C24();
  v39 = type metadata accessor for Location(v38);
  sub_100016A94(v39);
  sub_100016A8C(v3 + v26[8]);
  sub_100016B34(v26[11]);
  sub_100016A8C(v3 + v26[12]);
  sub_100016B34(v26[13]);
  sub_100016B34(v26[14]);
  sub_100016B34(v26[15]);
  sub_100016B34(v26[16]);
  sub_100016B34(v26[18]);
  sub_100016B34(v26[19]);
  sub_100016A8C(v3 + v26[25]);
  v40 = (_QWORD *)(v3 + *(int *)(v49 + 20));
  v41 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v40, v41) == 1)
  {
    v42 = type metadata accessor for Font.Context(0);
    sub_100016A94(v42);
  }
  else
  {
    swift_release(*v40);
  }
  return sub_100016AD0();
}

uint64_t sub_100011D0C(uint64_t a1)
{
  return sub_100011D20(a1, type metadata accessor for CurrentObservationBannerView, (uint64_t (*)(uint64_t, uint64_t))sub_10000EA60);
}

uint64_t sub_100011D20(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

char *sub_100011D7C(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t);
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void (*v186)(char *, char *);
  uint64_t v187;
  int *v188;
  void (*v189)(char *, char *);
  uint64_t v190;
  void (*v191)(char *, char *, uint64_t);
  uint64_t v192;
  void (*v194)(char *, char *, uint64_t);
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  int *v200;
  char *v201;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v28 = v27 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v27);
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v194 = v13;
    v197 = v12;
    v13(&a1[v8[6]], &a2[v8[6]], v12);
    v14 = v8[7];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = sub_100005D40(&qword_1001BF090);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v18(&a1[v8[8]], &a2[v8[8]], v17);
    v19 = v8[9];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = v8[10];
    v24 = &a1[v23];
    v25 = &a2[v23];
    swift_bridgeObjectRetain(v22);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v17))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v18(v24, v25, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v17);
    }
    v29 = v8[11];
    v30 = &a1[v29];
    v31 = &a2[v29];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v29], 1, v17))
    {
      v32 = sub_100005D40(&qword_1001BF098);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v18(v30, v31, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v17);
    }
    v33 = v8[12];
    v34 = &a1[v33];
    v35 = &a2[v33];
    v191 = v7;
    v192 = v6;
    v7(&a1[v33], &a2[v33], v6);
    v36 = (int *)type metadata accessor for ConditionViewModel(0);
    v37 = v36[5];
    v38 = &v34[v37];
    v201 = a1;
    v39 = &v35[v37];
    v40 = type metadata accessor for WeatherCondition(0);
    v186 = *(void (**)(char *, char *))(*(_QWORD *)(v40 - 8) + 16);
    v187 = v40;
    v186(v38, v39);
    v41 = v36[6];
    v42 = &v34[v41];
    v43 = &v35[v41];
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = v36[7];
    v46 = &v34[v45];
    v47 = &v35[v45];
    v48 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    v34[v36[8]] = v35[v36[8]];
    v34[v36[9]] = v35[v36[9]];
    v188 = v36;
    v34[v36[10]] = v35[v36[10]];
    *(_QWORD *)&a1[v8[13]] = *(_QWORD *)&a2[v8[13]];
    v49 = v8[14];
    v50 = &a1[v49];
    v51 = &a2[v49];
    v52 = type metadata accessor for CloudAltitudeKind(0);
    v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v48);
    v53(v50, v51, v52);
    v54 = v8[15];
    v55 = &v201[v54];
    v56 = &a2[v54];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v54], 1, v197))
    {
      v57 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v194(v55, v56, v197);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v55, 0, 1, v197);
    }
    v58 = v8[16];
    v59 = &v201[v58];
    v60 = &a2[v58];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v58], 1, v197))
    {
      v61 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      v194(v59, v60, v197);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v197);
    }
    v62 = v8[17];
    v63 = &v201[v62];
    v64 = &a2[v62];
    v65 = type metadata accessor for UVIndex(0);
    v189 = *(void (**)(char *, char *))(*(_QWORD *)(v65 - 8) + 16);
    v190 = v65;
    v189(v63, v64);
    v66 = v8[18];
    v67 = &v201[v66];
    v68 = &a2[v66];
    v69 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
    *(_QWORD *)&v201[v8[19]] = *(_QWORD *)&a2[v8[19]];
    v70 = v8[20];
    v71 = &v201[v70];
    v72 = &a2[v70];
    v73 = *((_QWORD *)v72 + 1);
    if (v73)
    {
      *(_QWORD *)v71 = *(_QWORD *)v72;
      *((_QWORD *)v71 + 1) = v73;
      v74 = *((_QWORD *)v72 + 2);
      v75 = *((_QWORD *)v72 + 3);
      v76 = v72[32];
      swift_bridgeObjectRetain(v73);
      sub_100006E58(v74, v75, v76);
      *((_QWORD *)v71 + 2) = v74;
      *((_QWORD *)v71 + 3) = v75;
      v71[32] = v76;
    }
    else
    {
      v77 = *((_OWORD *)v72 + 1);
      *(_OWORD *)v71 = *(_OWORD *)v72;
      *((_OWORD *)v71 + 1) = v77;
      v71[32] = v72[32];
    }
    v200 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
    v78 = v200[5];
    v79 = &v201[v78];
    v80 = &a2[v78];
    v191(&v201[v78], &a2[v78], v192);
    v81 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v194(&v79[v81[5]], &v80[v81[5]], v197);
    v18(&v79[v81[6]], &v80[v81[6]], v17);
    v18(&v79[v81[7]], &v80[v81[7]], v17);
    v82 = v81[8];
    v83 = &v79[v82];
    v84 = &v80[v82];
    v191(&v79[v82], &v80[v82], v192);
    ((void (*)(char *, char *, uint64_t))v186)(&v83[v188[5]], &v84[v188[5]], v187);
    v85 = v188[6];
    v86 = &v83[v85];
    v87 = &v84[v85];
    v88 = *((_QWORD *)v87 + 1);
    *(_QWORD *)v86 = *(_QWORD *)v87;
    *((_QWORD *)v86 + 1) = v88;
    v89 = v188[7];
    v90 = &v83[v89];
    v91 = &v84[v89];
    v92 = *((_QWORD *)v91 + 1);
    *(_QWORD *)v90 = *(_QWORD *)v91;
    *((_QWORD *)v90 + 1) = v92;
    v83[v188[8]] = v84[v188[8]];
    v83[v188[9]] = v84[v188[9]];
    v83[v188[10]] = v84[v188[10]];
    v93 = v81[9];
    v94 = &v79[v93];
    v95 = &v80[v93];
    v96 = type metadata accessor for Precipitation(0);
    v97 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16);
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v92);
    v97(v94, v95, v96);
    *(_QWORD *)&v79[v81[10]] = *(_QWORD *)&v80[v81[10]];
    v98 = v81[11];
    v99 = &v79[v98];
    v100 = &v80[v98];
    v101 = *((_QWORD *)v100 + 1);
    *(_QWORD *)v99 = *(_QWORD *)v100;
    *((_QWORD *)v99 + 1) = v101;
    v102 = v81[12];
    v103 = &v79[v102];
    v104 = &v80[v102];
    v105 = *((_QWORD *)v104 + 1);
    *(_QWORD *)v103 = *(_QWORD *)v104;
    *((_QWORD *)v103 + 1) = v105;
    v106 = v81[13];
    v107 = &v79[v106];
    v108 = &v80[v106];
    v109 = *((_QWORD *)v108 + 1);
    *(_QWORD *)v107 = *(_QWORD *)v108;
    *((_QWORD *)v107 + 1) = v109;
    v110 = v81[14];
    v111 = &v79[v110];
    v112 = &v80[v110];
    v113 = *((_QWORD *)v112 + 1);
    *(_QWORD *)v111 = *(_QWORD *)v112;
    *((_QWORD *)v111 + 1) = v113;
    v114 = v81[15];
    v195 = &v80[v114];
    v198 = &v79[v114];
    v115 = type metadata accessor for TemperatureScaleConfiguration(0);
    v116 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 16);
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRetain(v105);
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v113);
    v116(v198, v195, v115);
    v117 = v81[16];
    v118 = &v79[v117];
    v119 = &v80[v117];
    v120 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v119, 1, v120))
    {
      v121 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v118, v119, v120);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v118, 0, 1, v120);
    }
    v122 = v81[17];
    v123 = &v79[v122];
    v124 = &v80[v122];
    v125 = type metadata accessor for MoonEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v124, 1, v125))
    {
      v126 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 16))(v123, v124, v125);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v123, 0, 1, v125);
    }
    ((void (*)(char *, char *, uint64_t))v189)(&v79[v81[18]], &v80[v81[18]], v190);
    *(_QWORD *)&v79[v81[19]] = *(_QWORD *)&v80[v81[19]];
    v127 = v201;
    v128 = v200[6];
    v129 = &v201[v128];
    v130 = &a2[v128];
    v131 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v130, 1, (uint64_t)v131))
    {
      v132 = sub_100005D40(&qword_1001BF0C0);
      memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
    }
    else
    {
      v133 = v130[1];
      *v129 = *v130;
      v129[1] = v133;
      v134 = v131[5];
      v135 = (char *)v129 + v134;
      v136 = (char *)v130 + v134;
      v137 = type metadata accessor for AttributedString(0);
      v138 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 16);
      swift_bridgeObjectRetain(v133);
      v138(v135, v136, v137);
      v139 = v131[6];
      v140 = (char *)v129 + v139;
      v141 = (char *)v130 + v139;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v130 + v139, 1, v137))
      {
        v142 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
      }
      else
      {
        v138(v140, v141, v137);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v140, 0, 1, v137);
      }
      v143 = v131[7];
      v144 = (_QWORD *)((char *)v129 + v143);
      v145 = (_QWORD *)((char *)v130 + v143);
      v146 = v145[1];
      *v144 = *v145;
      v144[1] = v146;
      swift_bridgeObjectRetain(v146);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v129, 0, 1, (uint64_t)v131);
      v127 = v201;
    }
    v147 = v200[7];
    v148 = (uint64_t)v127 + v147;
    v149 = &a2[v147];
    v150 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
    v151 = v200[8];
    v152 = (_QWORD *)((char *)v127 + v151);
    v153 = &a2[v151];
    v154 = v153[1];
    *v152 = *v153;
    v152[1] = v154;
    *((_BYTE *)v127 + v200[9]) = a2[v200[9]];
    *((_BYTE *)v127 + v200[10]) = a2[v200[10]];
    v155 = v200[11];
    v196 = *(_QWORD *)&a2[v155];
    *(_QWORD *)((char *)v127 + v155) = v196;
    v156 = v200[12];
    v157 = (_QWORD *)((char *)v127 + v156);
    v158 = &a2[v156];
    v159 = v158[1];
    *v157 = *v158;
    v157[1] = v159;
    v160 = v200[13];
    v161 = *(_QWORD *)&a2[v160];
    *(_QWORD *)((char *)v127 + v160) = v161;
    v162 = v200[14];
    v163 = *(_QWORD *)&a2[v162];
    *(_QWORD *)((char *)v127 + v162) = v163;
    v164 = v200[15];
    v165 = *(_QWORD *)&a2[v164];
    *(_QWORD *)((char *)v127 + v164) = v165;
    v166 = v200[16];
    v199 = *(_QWORD *)&a2[v166];
    *(_QWORD *)((char *)v127 + v166) = v199;
    *((_BYTE *)v127 + v200[17]) = a2[v200[17]];
    v167 = v200[18];
    v168 = *(_QWORD *)&a2[v167];
    *(_QWORD *)((char *)v127 + v167) = v168;
    v169 = v200[19];
    v170 = *(_QWORD *)&a2[v169];
    *(_QWORD *)((char *)v127 + v169) = v170;
    *(_QWORD *)((char *)v127 + v200[20]) = *(_QWORD *)&a2[v200[20]];
    *((_BYTE *)v127 + v200[21]) = a2[v200[21]];
    *((_BYTE *)v127 + v200[22]) = a2[v200[22]];
    *((_BYTE *)v127 + v200[23]) = a2[v200[23]];
    *((_BYTE *)v127 + v200[24]) = a2[v200[24]];
    v171 = v200[25];
    v172 = (_QWORD *)((char *)v127 + v171);
    v173 = &a2[v171];
    v174 = v173[1];
    *v172 = *v173;
    v172[1] = v174;
    *((_BYTE *)v127 + v200[26]) = a2[v200[26]];
    *(_QWORD *)((char *)v127 + v200[27]) = *(_QWORD *)&a2[v200[27]];
    *(_QWORD *)((char *)v127 + v200[28]) = *(_QWORD *)&a2[v200[28]];
    v175 = a3[6];
    *(_OWORD *)((char *)v127 + a3[5]) = *(_OWORD *)&a2[a3[5]];
    *((_BYTE *)v127 + v175) = a2[v175];
    v176 = a3[8];
    *(_QWORD *)((char *)v127 + a3[7]) = *(_QWORD *)&a2[a3[7]];
    v177 = (_QWORD *)((char *)v127 + v176);
    v178 = (uint64_t *)&a2[v176];
    swift_bridgeObjectRetain(v154);
    swift_retain(v196);
    swift_bridgeObjectRetain(v159);
    swift_retain(v161);
    swift_retain(v163);
    swift_retain(v165);
    swift_retain(v199);
    swift_retain(v168);
    swift_retain(v170);
    swift_bridgeObjectRetain(v174);
    v179 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v178, v179) == 1)
    {
      v180 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v180 - 8) + 16))(v177, v178, v180);
      v181 = v177;
      v182 = v179;
      v183 = 1;
    }
    else
    {
      v184 = *v178;
      *v177 = *v178;
      swift_retain(v184);
      v181 = v177;
      v182 = v179;
      v183 = 0;
    }
    swift_storeEnumTagMultiPayload(v181, v182, v183);
    return v201;
  }
  return (char *)v28;
}

uint64_t sub_1000128A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v52)(uint64_t);
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;

  v3 = type metadata accessor for UUID(0);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(a1, v3);
  v5 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v6 = a1 + v5[5];
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + v5[6], v7);
  v9 = a1 + v5[7];
  v10 = sub_100005D40(&qword_1001BF090);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(a1 + v5[8], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[9] + 8));
  v12 = a1 + v5[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v12, 1, v10))
    v11(v12, v10);
  v13 = a1 + v5[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v13, 1, v10))
    v11(v13, v10);
  v14 = a1 + v5[12];
  v56 = v4;
  v57 = v3;
  v4(v14, v3);
  v15 = (int *)type metadata accessor for ConditionViewModel(0);
  v16 = v14 + v15[5];
  v17 = type metadata accessor for WeatherCondition(0);
  v52 = *(void (**)(uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v53 = v17;
  v52(v16);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[7] + 8));
  v18 = a1 + v5[14];
  v19 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = a1 + v5[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v20, 1, v7))
    v8(v20, v7);
  v21 = a1 + v5[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v21, 1, v7))
    v8(v21, v7);
  v22 = a1 + v5[17];
  v23 = type metadata accessor for UVIndex(0);
  v54 = *(void (**)(uint64_t))(*(_QWORD *)(v23 - 8) + 8);
  v55 = v23;
  v54(v22);
  v24 = a1 + v5[18];
  v25 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = a1 + v5[20];
  v27 = *(_QWORD *)(v26 + 8);
  if (v27)
  {
    swift_bridgeObjectRelease(v27);
    sub_100007458(*(_QWORD *)(v26 + 16), *(_QWORD *)(v26 + 24), *(_BYTE *)(v26 + 32));
  }
  v28 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v29 = a1 + v28[5];
  v56(v29, v57);
  v30 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v8(v29 + v30[5], v7);
  v11(v29 + v30[6], v10);
  v11(v29 + v30[7], v10);
  v31 = v29 + v30[8];
  v56(v31, v57);
  ((void (*)(uint64_t, uint64_t))v52)(v31 + v15[5], v53);
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v15[7] + 8));
  v32 = v29 + v30[9];
  v33 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[14] + 8));
  v34 = v29 + v30[15];
  v35 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
  v36 = v29 + v30[16];
  v37 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v36, 1, v37))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
  v38 = v29 + v30[17];
  v39 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, v39))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  ((void (*)(uint64_t, uint64_t))v54)(v29 + v30[18], v55);
  v40 = a1 + v28[6];
  v41 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v40, 1, (uint64_t)v41))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + 8));
    v42 = v40 + v41[5];
    v43 = type metadata accessor for AttributedString(0);
    v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8);
    v44(v42, v43);
    v45 = v40 + v41[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v45, 1, v43))
      v44(v45, v43);
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + v41[7] + 8));
  }
  v46 = a1 + v28[7];
  v47 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[8] + 8));
  swift_release(*(_QWORD *)(a1 + v28[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[12] + 8));
  swift_release(*(_QWORD *)(a1 + v28[13]));
  swift_release(*(_QWORD *)(a1 + v28[14]));
  swift_release(*(_QWORD *)(a1 + v28[15]));
  swift_release(*(_QWORD *)(a1 + v28[16]));
  swift_release(*(_QWORD *)(a1 + v28[18]));
  swift_release(*(_QWORD *)(a1 + v28[19]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[25] + 8));
  v48 = (_QWORD *)(a1 + *(int *)(a2 + 32));
  v49 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v48, v49) != 1)
    return swift_release(*v48);
  v50 = type metadata accessor for Font.Context(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v48, v50);
}

uint64_t sub_100012E90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  void *v115;
  const void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void (*v181)(uint64_t, uint64_t);
  uint64_t v182;
  int *v183;
  void (*v184)(uint64_t, uint64_t);
  uint64_t v185;
  void (*v186)(uint64_t, uint64_t, uint64_t);
  uint64_t v187;
  void (*v189)(void *, const void *, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int *v195;
  uint64_t v196;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v189 = v12;
  v192 = v11;
  v12((void *)(a1 + v7[6]), (const void *)(a2 + v7[6]), v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  v18 = v7[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v7[10];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  swift_bridgeObjectRetain(v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[11];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v26, 1, v16))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v27, (uint64_t)v28, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v16);
  }
  v30 = v7[12];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v186 = v6;
  v187 = v5;
  v6(a1 + v30, a2 + v30, v5);
  v33 = (int *)type metadata accessor for ConditionViewModel(0);
  v34 = v33[5];
  v35 = v31 + v34;
  v196 = a1;
  v36 = v32 + v34;
  v37 = type metadata accessor for WeatherCondition(0);
  v181 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
  v182 = v37;
  v181(v35, v36);
  v38 = v33[6];
  v39 = (_QWORD *)(v31 + v38);
  v40 = (_QWORD *)(v32 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = v33[7];
  v43 = (_QWORD *)(v31 + v42);
  v44 = (_QWORD *)(v32 + v42);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  *(_BYTE *)(v31 + v33[8]) = *(_BYTE *)(v32 + v33[8]);
  *(_BYTE *)(v31 + v33[9]) = *(_BYTE *)(v32 + v33[9]);
  v183 = v33;
  *(_BYTE *)(v31 + v33[10]) = *(_BYTE *)(v32 + v33[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v46 = v7[14];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for CloudAltitudeKind(0);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  v50(v47, v48, v49);
  v51 = v7[15];
  v52 = (void *)(v196 + v51);
  v53 = (const void *)(a2 + v51);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v51, 1, v192))
  {
    v54 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    v189(v52, v53, v192);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v52, 0, 1, v192);
  }
  v55 = v7[16];
  v56 = (void *)(v196 + v55);
  v57 = (const void *)(a2 + v55);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v55, 1, v192))
  {
    v58 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v189(v56, v57, v192);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v192);
  }
  v59 = v7[17];
  v60 = v196 + v59;
  v61 = a2 + v59;
  v62 = type metadata accessor for UVIndex(0);
  v184 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
  v185 = v62;
  v184(v60, v61);
  v63 = v7[18];
  v64 = v196 + v63;
  v65 = a2 + v63;
  v66 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
  *(_QWORD *)(v196 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  v67 = v7[20];
  v68 = v196 + v67;
  v69 = a2 + v67;
  v70 = *(_QWORD *)(v69 + 8);
  if (v70)
  {
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *(_QWORD *)(v68 + 8) = v70;
    v71 = *(_QWORD *)(v69 + 16);
    v72 = *(_QWORD *)(v69 + 24);
    v73 = *(_BYTE *)(v69 + 32);
    swift_bridgeObjectRetain(v70);
    sub_100006E58(v71, v72, v73);
    *(_QWORD *)(v68 + 16) = v71;
    *(_QWORD *)(v68 + 24) = v72;
    *(_BYTE *)(v68 + 32) = v73;
  }
  else
  {
    v74 = *(_OWORD *)(v69 + 16);
    *(_OWORD *)v68 = *(_OWORD *)v69;
    *(_OWORD *)(v68 + 16) = v74;
    *(_BYTE *)(v68 + 32) = *(_BYTE *)(v69 + 32);
  }
  v195 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v75 = v195[5];
  v76 = v196 + v75;
  v77 = a2 + v75;
  v186(v196 + v75, a2 + v75, v187);
  v78 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v189((void *)(v76 + v78[5]), (const void *)(v77 + v78[5]), v192);
  v17(v76 + v78[6], v77 + v78[6], v16);
  v17(v76 + v78[7], v77 + v78[7], v16);
  v79 = v78[8];
  v80 = v76 + v79;
  v81 = v77 + v79;
  v186(v76 + v79, v77 + v79, v187);
  ((void (*)(uint64_t, uint64_t, uint64_t))v181)(v80 + v183[5], v81 + v183[5], v182);
  v82 = v183[6];
  v83 = (_QWORD *)(v80 + v82);
  v84 = (_QWORD *)(v81 + v82);
  v85 = v84[1];
  *v83 = *v84;
  v83[1] = v85;
  v86 = v183[7];
  v87 = (_QWORD *)(v80 + v86);
  v88 = (_QWORD *)(v81 + v86);
  v89 = v88[1];
  *v87 = *v88;
  v87[1] = v89;
  *(_BYTE *)(v80 + v183[8]) = *(_BYTE *)(v81 + v183[8]);
  *(_BYTE *)(v80 + v183[9]) = *(_BYTE *)(v81 + v183[9]);
  *(_BYTE *)(v80 + v183[10]) = *(_BYTE *)(v81 + v183[10]);
  v90 = v78[9];
  v91 = v76 + v90;
  v92 = v77 + v90;
  v93 = type metadata accessor for Precipitation(0);
  v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 16);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v89);
  v94(v91, v92, v93);
  *(_QWORD *)(v76 + v78[10]) = *(_QWORD *)(v77 + v78[10]);
  v95 = v78[11];
  v96 = (_QWORD *)(v76 + v95);
  v97 = (_QWORD *)(v77 + v95);
  v98 = v97[1];
  *v96 = *v97;
  v96[1] = v98;
  v99 = v78[12];
  v100 = (_QWORD *)(v76 + v99);
  v101 = (_QWORD *)(v77 + v99);
  v102 = v101[1];
  *v100 = *v101;
  v100[1] = v102;
  v103 = v78[13];
  v104 = (_QWORD *)(v76 + v103);
  v105 = (_QWORD *)(v77 + v103);
  v106 = v105[1];
  *v104 = *v105;
  v104[1] = v106;
  v107 = v78[14];
  v108 = (_QWORD *)(v76 + v107);
  v109 = (_QWORD *)(v77 + v107);
  v110 = v109[1];
  *v108 = *v109;
  v108[1] = v110;
  v111 = v78[15];
  v190 = v77 + v111;
  v193 = v76 + v111;
  v112 = type metadata accessor for TemperatureScaleConfiguration(0);
  v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 16);
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRetain(v106);
  swift_bridgeObjectRetain(v110);
  v113(v193, v190, v112);
  v114 = v78[16];
  v115 = (void *)(v76 + v114);
  v116 = (const void *)(v77 + v114);
  v117 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v116, 1, v117))
  {
    v118 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v117 - 8) + 16))(v115, v116, v117);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v117);
  }
  v119 = v78[17];
  v120 = (void *)(v76 + v119);
  v121 = (const void *)(v77 + v119);
  v122 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v121, 1, v122))
  {
    v123 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v120, 0, 1, v122);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v184)(v76 + v78[18], v77 + v78[18], v185);
  *(_QWORD *)(v76 + v78[19]) = *(_QWORD *)(v77 + v78[19]);
  v124 = v196;
  v125 = v195[6];
  v126 = (_QWORD *)(v196 + v125);
  v127 = (_QWORD *)(a2 + v125);
  v128 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v127, 1, (uint64_t)v128))
  {
    v129 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
  }
  else
  {
    v130 = v127[1];
    *v126 = *v127;
    v126[1] = v130;
    v131 = v128[5];
    v132 = (char *)v126 + v131;
    v133 = (char *)v127 + v131;
    v134 = type metadata accessor for AttributedString(0);
    v135 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16);
    swift_bridgeObjectRetain(v130);
    v135(v132, v133, v134);
    v136 = v128[6];
    v137 = (char *)v126 + v136;
    v138 = (char *)v127 + v136;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v127 + v136, 1, v134))
    {
      v139 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
    }
    else
    {
      v135(v137, v138, v134);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v137, 0, 1, v134);
    }
    v140 = v128[7];
    v141 = (_QWORD *)((char *)v126 + v140);
    v142 = (_QWORD *)((char *)v127 + v140);
    v143 = v142[1];
    *v141 = *v142;
    v141[1] = v143;
    swift_bridgeObjectRetain(v143);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v126, 0, 1, (uint64_t)v128);
    v124 = v196;
  }
  v144 = v195[7];
  v145 = v124 + v144;
  v146 = a2 + v144;
  v147 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 16))(v145, v146, v147);
  v148 = v195[8];
  v149 = (_QWORD *)(v124 + v148);
  v150 = (_QWORD *)(a2 + v148);
  v151 = v150[1];
  *v149 = *v150;
  v149[1] = v151;
  *(_BYTE *)(v124 + v195[9]) = *(_BYTE *)(a2 + v195[9]);
  *(_BYTE *)(v124 + v195[10]) = *(_BYTE *)(a2 + v195[10]);
  v152 = v195[11];
  v191 = *(_QWORD *)(a2 + v152);
  *(_QWORD *)(v124 + v152) = v191;
  v153 = v195[12];
  v154 = (_QWORD *)(v124 + v153);
  v155 = (_QWORD *)(a2 + v153);
  v156 = v155[1];
  *v154 = *v155;
  v154[1] = v156;
  v157 = v195[13];
  v158 = *(_QWORD *)(a2 + v157);
  *(_QWORD *)(v124 + v157) = v158;
  v159 = v195[14];
  v160 = *(_QWORD *)(a2 + v159);
  *(_QWORD *)(v124 + v159) = v160;
  v161 = v195[15];
  v162 = *(_QWORD *)(a2 + v161);
  *(_QWORD *)(v124 + v161) = v162;
  v163 = v195[16];
  v194 = *(_QWORD *)(a2 + v163);
  *(_QWORD *)(v124 + v163) = v194;
  *(_BYTE *)(v124 + v195[17]) = *(_BYTE *)(a2 + v195[17]);
  v164 = v195[18];
  v165 = *(_QWORD *)(a2 + v164);
  *(_QWORD *)(v124 + v164) = v165;
  v166 = v195[19];
  v167 = *(_QWORD *)(a2 + v166);
  *(_QWORD *)(v124 + v166) = v167;
  *(_QWORD *)(v124 + v195[20]) = *(_QWORD *)(a2 + v195[20]);
  *(_BYTE *)(v124 + v195[21]) = *(_BYTE *)(a2 + v195[21]);
  *(_BYTE *)(v124 + v195[22]) = *(_BYTE *)(a2 + v195[22]);
  *(_BYTE *)(v124 + v195[23]) = *(_BYTE *)(a2 + v195[23]);
  *(_BYTE *)(v124 + v195[24]) = *(_BYTE *)(a2 + v195[24]);
  v168 = v195[25];
  v169 = (_QWORD *)(v124 + v168);
  v170 = (_QWORD *)(a2 + v168);
  v171 = v170[1];
  *v169 = *v170;
  v169[1] = v171;
  *(_BYTE *)(v124 + v195[26]) = *(_BYTE *)(a2 + v195[26]);
  *(_QWORD *)(v124 + v195[27]) = *(_QWORD *)(a2 + v195[27]);
  *(_QWORD *)(v124 + v195[28]) = *(_QWORD *)(a2 + v195[28]);
  v172 = a3[6];
  *(_OWORD *)(v124 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_BYTE *)(v124 + v172) = *(_BYTE *)(a2 + v172);
  v173 = a3[8];
  *(_QWORD *)(v124 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v174 = (uint64_t *)(v124 + v173);
  v175 = (uint64_t *)(a2 + v173);
  swift_bridgeObjectRetain(v151);
  swift_retain(v191);
  swift_bridgeObjectRetain(v156);
  swift_retain(v158);
  swift_retain(v160);
  swift_retain(v162);
  swift_retain(v194);
  swift_retain(v165);
  swift_retain(v167);
  swift_bridgeObjectRetain(v171);
  v176 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v175, v176) == 1)
  {
    v177 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v177 - 8) + 16))(v174, v175, v177);
    v178 = 1;
  }
  else
  {
    v179 = *v175;
    *v174 = *v175;
    swift_retain(v179);
    v178 = 0;
  }
  swift_storeEnumTagMultiPayload(v174, v176, v178);
  return v196;
}

uint64_t sub_10001397C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const void *v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  int *v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  void (*v167)(char *, char *, uint64_t);
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  int v182;
  int v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v245;
  void (*v246)(uint64_t, uint64_t, uint64_t);
  uint64_t v247;
  uint64_t v248;
  int *v250;
  void (*v251)(uint64_t, uint64_t);
  uint64_t v252;
  void (*v253)(void *, const void *, uint64_t);
  void (*v254)(void *, const void *, uint64_t);
  void (*v255)(char *, char *, uint64_t);
  void (*v256)(uint64_t, uint64_t, uint64_t);
  char *v257;
  uint64_t v258;

  v5 = type metadata accessor for UUID(0);
  v256 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24);
  v256(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v245 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v245 + 24);
  v11(v8, v9, v10);
  v254 = (void (*)(void *, const void *, uint64_t))v11;
  v11(a1 + v6[6], a2 + v6[6], v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  v253 = (void (*)(void *, const void *, uint64_t))v17;
  v17(a1 + v6[8], a2 + v6[8], v15);
  v18 = v6[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = v6[10];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  LODWORD(v17) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v23, 1, v15);
  v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v15);
  if ((_DWORD)v17)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v24, v25, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v24, v15);
LABEL_6:
    v27 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v253(v24, v25, v15);
LABEL_7:
  v28 = v6[11];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v28, 1, v15);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v15);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v29, v30, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v29, v15);
LABEL_12:
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  v253(v29, v30, v15);
LABEL_13:
  v34 = v6[12];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v247 = v5;
  v256(a1 + v34, a2 + v34, v5);
  v37 = (int *)type metadata accessor for ConditionViewModel(0);
  v38 = v37[5];
  v39 = v35 + v38;
  v40 = v36 + v38;
  v41 = type metadata accessor for WeatherCondition(0);
  v251 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24);
  v252 = v41;
  v251(v39, v40);
  v42 = v37[6];
  v43 = (_QWORD *)(v35 + v42);
  v44 = (_QWORD *)(v36 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = v37[7];
  v48 = (_QWORD *)(v35 + v47);
  v49 = (_QWORD *)(v36 + v47);
  *v48 = *v49;
  v50 = v49[1];
  v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  *(_BYTE *)(v35 + v37[8]) = *(_BYTE *)(v36 + v37[8]);
  *(_BYTE *)(v35 + v37[9]) = *(_BYTE *)(v36 + v37[9]);
  *(_BYTE *)(v35 + v37[10]) = *(_BYTE *)(v36 + v37[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v52 = v6[14];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 24))(v53, v54, v55);
  v56 = v6[15];
  v57 = (void *)(a1 + v56);
  v58 = (const void *)(a2 + v56);
  LODWORD(v51) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v56, 1, v10);
  v59 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v58, 1, v10);
  v250 = v37;
  if ((_DWORD)v51)
  {
    if (!v59)
    {
      (*(void (**)(void *, const void *, uint64_t))(v245 + 16))(v57, v58, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v57, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v59)
  {
    (*(void (**)(void *, uint64_t))(v245 + 8))(v57, v10);
LABEL_18:
    v60 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_19;
  }
  v254(v57, v58, v10);
LABEL_19:
  v61 = v247;
  v62 = v6[16];
  v63 = (void *)(a1 + v62);
  v64 = (const void *)(a2 + v62);
  v65 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v62, 1, v10);
  v66 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v64, 1, v10);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v245 + 16))(v63, v64, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v245 + 8))(v63, v10);
LABEL_24:
    v67 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_25;
  }
  v254(v63, v64, v10);
LABEL_25:
  v68 = v6[17];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = type metadata accessor for UVIndex(0);
  v246 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 24);
  v246(v69, v70, v71);
  v72 = v6[18];
  v73 = a1 + v72;
  v74 = a2 + v72;
  v75 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 24))(v73, v74, v75);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v76 = v6[20];
  v77 = a1 + v76;
  v78 = (__int128 *)(a2 + v76);
  v79 = *(_QWORD *)(a1 + v76 + 8);
  v80 = *(_QWORD *)(a2 + v76 + 8);
  v248 = v71;
  if (v79)
  {
    if (v80)
    {
      *(_QWORD *)v77 = *(_QWORD *)v78;
      v81 = *((_QWORD *)v78 + 1);
      *(_QWORD *)(v77 + 8) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v79);
      v82 = *((_QWORD *)v78 + 2);
      v83 = *((_QWORD *)v78 + 3);
      v84 = *((_BYTE *)v78 + 32);
      sub_100006E58(v82, v83, v84);
      v85 = *(_QWORD *)(v77 + 16);
      v86 = *(_QWORD *)(v77 + 24);
      v87 = *(_BYTE *)(v77 + 32);
      *(_QWORD *)(v77 + 16) = v82;
      *(_QWORD *)(v77 + 24) = v83;
      *(_BYTE *)(v77 + 32) = v84;
      sub_100007458(v85, v86, v87);
    }
    else
    {
      sub_100008EC4(v77);
      v92 = *((_BYTE *)v78 + 32);
      v93 = v78[1];
      *(_OWORD *)v77 = *v78;
      *(_OWORD *)(v77 + 16) = v93;
      *(_BYTE *)(v77 + 32) = v92;
    }
  }
  else if (v80)
  {
    *(_QWORD *)v77 = *(_QWORD *)v78;
    v88 = *((_QWORD *)v78 + 1);
    *(_QWORD *)(v77 + 8) = v88;
    v89 = *((_QWORD *)v78 + 2);
    v90 = *((_QWORD *)v78 + 3);
    v91 = *((_BYTE *)v78 + 32);
    swift_bridgeObjectRetain(v88);
    sub_100006E58(v89, v90, v91);
    *(_QWORD *)(v77 + 16) = v89;
    *(_QWORD *)(v77 + 24) = v90;
    *(_BYTE *)(v77 + 32) = v91;
  }
  else
  {
    v94 = *v78;
    v95 = v78[1];
    *(_BYTE *)(v77 + 32) = *((_BYTE *)v78 + 32);
    *(_OWORD *)v77 = v94;
    *(_OWORD *)(v77 + 16) = v95;
  }
  v96 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v97 = v96[5];
  v98 = a1 + v97;
  v99 = a2 + v97;
  v256(a1 + v97, a2 + v97, v61);
  v100 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v254((void *)(v98 + v100[5]), (const void *)(v99 + v100[5]), v10);
  v253((void *)(v98 + v100[6]), (const void *)(v99 + v100[6]), v15);
  v253((void *)(v98 + v100[7]), (const void *)(v99 + v100[7]), v15);
  v101 = v100[8];
  v102 = v98 + v101;
  v103 = v99 + v101;
  v256(v98 + v101, v99 + v101, v61);
  ((void (*)(uint64_t, uint64_t, uint64_t))v251)(v102 + v250[5], v103 + v250[5], v252);
  v104 = v250[6];
  v105 = (_QWORD *)(v102 + v104);
  v106 = (_QWORD *)(v103 + v104);
  *v105 = *v106;
  v107 = v106[1];
  v108 = v105[1];
  v105[1] = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108);
  v109 = v250[7];
  v110 = (_QWORD *)(v102 + v109);
  v111 = (_QWORD *)(v103 + v109);
  *v110 = *v111;
  v112 = v111[1];
  v113 = v110[1];
  v110[1] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease(v113);
  *(_BYTE *)(v102 + v250[8]) = *(_BYTE *)(v103 + v250[8]);
  *(_BYTE *)(v102 + v250[9]) = *(_BYTE *)(v103 + v250[9]);
  *(_BYTE *)(v102 + v250[10]) = *(_BYTE *)(v103 + v250[10]);
  v114 = v100[9];
  v115 = v98 + v114;
  v116 = v99 + v114;
  v117 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 24))(v115, v116, v117);
  *(_QWORD *)(v98 + v100[10]) = *(_QWORD *)(v99 + v100[10]);
  v118 = v100[11];
  v119 = (_QWORD *)(v98 + v118);
  v120 = (_QWORD *)(v99 + v118);
  *v119 = *v120;
  v121 = v120[1];
  v122 = v119[1];
  v119[1] = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  v123 = v100[12];
  v124 = (_QWORD *)(v98 + v123);
  v125 = (_QWORD *)(v99 + v123);
  *v124 = *v125;
  v126 = v125[1];
  v127 = v124[1];
  v124[1] = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  v128 = v100[13];
  v129 = (_QWORD *)(v98 + v128);
  v130 = (_QWORD *)(v99 + v128);
  *v129 = *v130;
  v131 = v130[1];
  v132 = v129[1];
  v129[1] = v131;
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRelease(v132);
  v133 = v100[14];
  v134 = (_QWORD *)(v98 + v133);
  v135 = (_QWORD *)(v99 + v133);
  *v134 = *v135;
  v136 = v135[1];
  v137 = v134[1];
  v134[1] = v136;
  swift_bridgeObjectRetain(v136);
  swift_bridgeObjectRelease(v137);
  v138 = v100[15];
  v139 = v98 + v138;
  v140 = v99 + v138;
  v141 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v100[16];
  v143 = (void *)(v98 + v142);
  v144 = (const void *)(v99 + v142);
  v145 = type metadata accessor for SunEvents(0);
  LODWORD(v113) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v145);
  v146 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145);
  if ((_DWORD)v113)
  {
    if (!v146)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v147 = *(_QWORD *)(v145 - 8);
  if (v146)
  {
    (*(void (**)(void *, uint64_t))(v147 + 8))(v143, v145);
LABEL_41:
    v148 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v147 + 24))(v143, v144, v145);
LABEL_42:
  v149 = v100[17];
  v150 = (void *)(v98 + v149);
  v151 = (const void *)(v99 + v149);
  v152 = type metadata accessor for MoonEvents(0);
  v153 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, v152);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v152);
  if (v153)
  {
    if (!v154)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v152 - 8) + 16))(v150, v151, v152);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v150, 0, 1, v152);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v155 = *(_QWORD *)(v152 - 8);
  if (v154)
  {
    (*(void (**)(void *, uint64_t))(v155 + 8))(v150, v152);
LABEL_47:
    v156 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v155 + 24))(v150, v151, v152);
LABEL_48:
  v246(v98 + v100[18], v99 + v100[18], v248);
  *(_QWORD *)(v98 + v100[19]) = *(_QWORD *)(v99 + v100[19]);
  v157 = v96[6];
  v158 = (_QWORD *)(a1 + v157);
  v159 = (_QWORD *)(a2 + v157);
  v160 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v161 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, (uint64_t)v160);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, (uint64_t)v160);
  if (!v161)
  {
    if (v162)
    {
      sub_100011894((uint64_t)v158, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_54;
    }
    *v158 = *v159;
    v173 = v159[1];
    v174 = v158[1];
    v158[1] = v173;
    swift_bridgeObjectRetain(v173);
    swift_bridgeObjectRelease(v174);
    v175 = v160[5];
    v176 = (char *)v158 + v175;
    v177 = (char *)v159 + v175;
    v178 = type metadata accessor for AttributedString(0);
    v258 = *(_QWORD *)(v178 - 8);
    v255 = *(void (**)(char *, char *, uint64_t))(v258 + 24);
    v255(v176, v177, v178);
    v179 = v160[6];
    v180 = (char *)v158 + v179;
    v181 = (char *)v159 + v179;
    v182 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158 + v179, 1, v178);
    v183 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v181, 1, v178);
    if (v182)
    {
      if (!v183)
      {
        (*(void (**)(char *, char *, uint64_t))(v258 + 16))(v180, v181, v178);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v180, 0, 1, v178);
LABEL_65:
        v189 = v160[7];
        v190 = (_QWORD *)((char *)v158 + v189);
        v191 = (_QWORD *)((char *)v159 + v189);
        *v190 = *v191;
        v192 = v191[1];
        v193 = v190[1];
        v190[1] = v192;
        swift_bridgeObjectRetain(v192);
        swift_bridgeObjectRelease(v193);
        goto LABEL_66;
      }
    }
    else
    {
      if (!v183)
      {
        v255(v180, v181, v178);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v258 + 8))(v180, v178);
    }
    v188 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
    goto LABEL_65;
  }
  if (v162)
  {
LABEL_54:
    v172 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
    goto LABEL_66;
  }
  *v158 = *v159;
  v163 = v159[1];
  v158[1] = v163;
  v164 = v160[5];
  v165 = (char *)v158 + v164;
  v257 = (char *)v159 + v164;
  v166 = type metadata accessor for AttributedString(0);
  v167 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 16);
  swift_bridgeObjectRetain(v163);
  v167(v165, v257, v166);
  v168 = v160[6];
  v169 = (char *)v158 + v168;
  v170 = (char *)v159 + v168;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159 + v168, 1, v166))
  {
    v171 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
  }
  else
  {
    v167(v169, v170, v166);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v169, 0, 1, v166);
  }
  v184 = v160[7];
  v185 = (_QWORD *)((char *)v158 + v184);
  v186 = (_QWORD *)((char *)v159 + v184);
  *v185 = *v186;
  v187 = v186[1];
  v185[1] = v187;
  swift_bridgeObjectRetain(v187);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v158, 0, 1, (uint64_t)v160);
LABEL_66:
  v194 = v96[7];
  v195 = a1 + v194;
  v196 = a2 + v194;
  v197 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v197 - 8) + 24))(v195, v196, v197);
  v198 = v96[8];
  v199 = (_QWORD *)(a1 + v198);
  v200 = (_QWORD *)(a2 + v198);
  *v199 = *v200;
  v201 = v200[1];
  v202 = v199[1];
  v199[1] = v201;
  swift_bridgeObjectRetain(v201);
  swift_bridgeObjectRelease(v202);
  *(_BYTE *)(a1 + v96[9]) = *(_BYTE *)(a2 + v96[9]);
  *(_BYTE *)(a1 + v96[10]) = *(_BYTE *)(a2 + v96[10]);
  v203 = v96[11];
  v204 = *(_QWORD *)(a1 + v203);
  v205 = *(_QWORD *)(a2 + v203);
  *(_QWORD *)(a1 + v203) = v205;
  swift_retain(v205);
  swift_release(v204);
  v206 = v96[12];
  v207 = (_QWORD *)(a1 + v206);
  v208 = (_QWORD *)(a2 + v206);
  *v207 = *v208;
  v209 = v208[1];
  v210 = v207[1];
  v207[1] = v209;
  swift_bridgeObjectRetain(v209);
  swift_bridgeObjectRelease(v210);
  v211 = v96[13];
  v212 = *(_QWORD *)(a2 + v211);
  v213 = *(_QWORD *)(a1 + v211);
  *(_QWORD *)(a1 + v211) = v212;
  swift_retain(v212);
  swift_release(v213);
  v214 = v96[14];
  v215 = *(_QWORD *)(a2 + v214);
  v216 = *(_QWORD *)(a1 + v214);
  *(_QWORD *)(a1 + v214) = v215;
  swift_retain(v215);
  swift_release(v216);
  v217 = v96[15];
  v218 = *(_QWORD *)(a2 + v217);
  v219 = *(_QWORD *)(a1 + v217);
  *(_QWORD *)(a1 + v217) = v218;
  swift_retain(v218);
  swift_release(v219);
  v220 = v96[16];
  v221 = *(_QWORD *)(a2 + v220);
  v222 = *(_QWORD *)(a1 + v220);
  *(_QWORD *)(a1 + v220) = v221;
  swift_retain(v221);
  swift_release(v222);
  *(_BYTE *)(a1 + v96[17]) = *(_BYTE *)(a2 + v96[17]);
  v223 = v96[18];
  v224 = *(_QWORD *)(a2 + v223);
  v225 = *(_QWORD *)(a1 + v223);
  *(_QWORD *)(a1 + v223) = v224;
  swift_retain(v224);
  swift_release(v225);
  v226 = v96[19];
  v227 = *(_QWORD *)(a2 + v226);
  v228 = *(_QWORD *)(a1 + v226);
  *(_QWORD *)(a1 + v226) = v227;
  swift_retain(v227);
  swift_release(v228);
  *(_QWORD *)(a1 + v96[20]) = *(_QWORD *)(a2 + v96[20]);
  *(_BYTE *)(a1 + v96[21]) = *(_BYTE *)(a2 + v96[21]);
  *(_BYTE *)(a1 + v96[22]) = *(_BYTE *)(a2 + v96[22]);
  *(_BYTE *)(a1 + v96[23]) = *(_BYTE *)(a2 + v96[23]);
  *(_BYTE *)(a1 + v96[24]) = *(_BYTE *)(a2 + v96[24]);
  v229 = v96[25];
  v230 = (_QWORD *)(a1 + v229);
  v231 = (_QWORD *)(a2 + v229);
  *v230 = *v231;
  v232 = v231[1];
  v233 = v230[1];
  v230[1] = v232;
  swift_bridgeObjectRetain(v232);
  swift_bridgeObjectRelease(v233);
  *(_BYTE *)(a1 + v96[26]) = *(_BYTE *)(a2 + v96[26]);
  *(_QWORD *)(a1 + v96[27]) = *(_QWORD *)(a2 + v96[27]);
  *(_QWORD *)(a1 + v96[28]) = *(_QWORD *)(a2 + v96[28]);
  v234 = a3[5];
  v235 = (_QWORD *)(a1 + v234);
  v236 = (_QWORD *)(a2 + v234);
  *v235 = *v236;
  v235[1] = v236[1];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  if (a1 != a2)
  {
    v237 = a3[8];
    v238 = (uint64_t *)(a1 + v237);
    v239 = (uint64_t *)(a2 + v237);
    sub_100016904(a1 + v237, &qword_1001BF0C8);
    v240 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v239, v240) == 1)
    {
      v241 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v241 - 8) + 16))(v238, v239, v241);
      v242 = 1;
    }
    else
    {
      v243 = *v239;
      *v238 = *v239;
      swift_retain(v243);
      v242 = 0;
    }
    swift_storeEnumTagMultiPayload(v238, v240, v242);
  }
  return a1;
}

uint64_t sub_100014938(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  _OWORD *v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const void *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v117 = v11;
  v12(a1 + v7[6], a2 + v7[6], v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
  v18 = v7[10];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v18, 1, v16))
  {
    v21 = sub_100005D40(&qword_1001BF098);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v19, (uint64_t)v20, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v19, 0, 1, v16);
  }
  v22 = v7[11];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v113 = v17;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v22, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[12];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v114 = v5;
  v115 = v6;
  v6(a1 + v26, a2 + v26, v5);
  v29 = (int *)type metadata accessor for ConditionViewModel(0);
  v30 = v29[5];
  v31 = v27 + v30;
  v32 = v28 + v30;
  v33 = type metadata accessor for WeatherCondition(0);
  v109 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
  v110 = v33;
  v109(v31, v32);
  *(_OWORD *)(v27 + v29[6]) = *(_OWORD *)(v28 + v29[6]);
  *(_OWORD *)(v27 + v29[7]) = *(_OWORD *)(v28 + v29[7]);
  *(_BYTE *)(v27 + v29[8]) = *(_BYTE *)(v28 + v29[8]);
  *(_BYTE *)(v27 + v29[9]) = *(_BYTE *)(v28 + v29[9]);
  *(_BYTE *)(v27 + v29[10]) = *(_BYTE *)(v28 + v29[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v34 = v7[14];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  v38 = v7[15];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v38, 1, v117))
  {
    v41 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v39, (uint64_t)v40, v117);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v117);
  }
  v42 = v7[16];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v42, 1, v117))
  {
    v45 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v43, (uint64_t)v44, v117);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v43, 0, 1, v117);
  }
  v46 = v7[17];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for UVIndex(0);
  v111 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 32);
  v112 = v49;
  v111(v47, v48);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  v54 = v7[20];
  v55 = a1 + v54;
  v56 = a2 + v54;
  *(_BYTE *)(v55 + 32) = *(_BYTE *)(v56 + 32);
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  v58 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v59 = v58[5];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v115(a1 + v59, a2 + v59, v114);
  v62 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v12(v60 + v62[5], v61 + v62[5], v117);
  v113(v60 + v62[6], v61 + v62[6], v16);
  v113(v60 + v62[7], v61 + v62[7], v16);
  v63 = v62[8];
  v64 = v60 + v63;
  v65 = v61 + v63;
  v115(v60 + v63, v61 + v63, v114);
  ((void (*)(uint64_t, uint64_t, uint64_t))v109)(v64 + v29[5], v65 + v29[5], v110);
  *(_OWORD *)(v64 + v29[6]) = *(_OWORD *)(v65 + v29[6]);
  *(_OWORD *)(v64 + v29[7]) = *(_OWORD *)(v65 + v29[7]);
  *(_BYTE *)(v64 + v29[8]) = *(_BYTE *)(v65 + v29[8]);
  *(_BYTE *)(v64 + v29[9]) = *(_BYTE *)(v65 + v29[9]);
  *(_BYTE *)(v64 + v29[10]) = *(_BYTE *)(v65 + v29[10]);
  v66 = v62[9];
  v67 = v60 + v66;
  v68 = v61 + v66;
  v69 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
  *(_QWORD *)(v60 + v62[10]) = *(_QWORD *)(v61 + v62[10]);
  *(_OWORD *)(v60 + v62[11]) = *(_OWORD *)(v61 + v62[11]);
  *(_OWORD *)(v60 + v62[12]) = *(_OWORD *)(v61 + v62[12]);
  *(_OWORD *)(v60 + v62[13]) = *(_OWORD *)(v61 + v62[13]);
  *(_OWORD *)(v60 + v62[14]) = *(_OWORD *)(v61 + v62[14]);
  v70 = v62[15];
  v71 = v60 + v70;
  v72 = v61 + v70;
  v73 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
  v74 = v62[16];
  v75 = (void *)(v60 + v74);
  v76 = (const void *)(v61 + v74);
  v77 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v76, 1, v77))
  {
    v78 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v75, 0, 1, v77);
  }
  v79 = v62[17];
  v80 = (void *)(v60 + v79);
  v81 = (const void *)(v61 + v79);
  v82 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v81, 1, v82))
  {
    v83 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v80, v81, v82);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v80, 0, 1, v82);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v111)(v60 + v62[18], v61 + v62[18], v112);
  *(_QWORD *)(v60 + v62[19]) = *(_QWORD *)(v61 + v62[19]);
  v84 = v58[6];
  v85 = (_OWORD *)(a1 + v84);
  v86 = (_OWORD *)(a2 + v84);
  v87 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86, 1, (uint64_t)v87))
  {
    v88 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    *v85 = *v86;
    v89 = v87[5];
    v90 = (char *)v85 + v89;
    v91 = (char *)v86 + v89;
    v92 = type metadata accessor for AttributedString(0);
    v93 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32);
    v93(v90, v91, v92);
    v94 = v87[6];
    v95 = (char *)v85 + v94;
    v96 = (char *)v86 + v94;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86 + v94, 1, v92))
    {
      v97 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      v93(v95, v96, v92);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v92);
    }
    *(_OWORD *)((char *)v85 + v87[7]) = *(_OWORD *)((char *)v86 + v87[7]);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v85, 0, 1, (uint64_t)v87);
  }
  v98 = v58[7];
  v99 = a1 + v98;
  v100 = a2 + v98;
  v101 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v99, v100, v101);
  *(_OWORD *)(a1 + v58[8]) = *(_OWORD *)(a2 + v58[8]);
  *(_BYTE *)(a1 + v58[9]) = *(_BYTE *)(a2 + v58[9]);
  *(_BYTE *)(a1 + v58[10]) = *(_BYTE *)(a2 + v58[10]);
  *(_QWORD *)(a1 + v58[11]) = *(_QWORD *)(a2 + v58[11]);
  *(_OWORD *)(a1 + v58[12]) = *(_OWORD *)(a2 + v58[12]);
  *(_QWORD *)(a1 + v58[13]) = *(_QWORD *)(a2 + v58[13]);
  *(_QWORD *)(a1 + v58[14]) = *(_QWORD *)(a2 + v58[14]);
  *(_QWORD *)(a1 + v58[15]) = *(_QWORD *)(a2 + v58[15]);
  *(_QWORD *)(a1 + v58[16]) = *(_QWORD *)(a2 + v58[16]);
  *(_BYTE *)(a1 + v58[17]) = *(_BYTE *)(a2 + v58[17]);
  *(_QWORD *)(a1 + v58[18]) = *(_QWORD *)(a2 + v58[18]);
  *(_QWORD *)(a1 + v58[19]) = *(_QWORD *)(a2 + v58[19]);
  *(_QWORD *)(a1 + v58[20]) = *(_QWORD *)(a2 + v58[20]);
  *(_BYTE *)(a1 + v58[21]) = *(_BYTE *)(a2 + v58[21]);
  *(_BYTE *)(a1 + v58[22]) = *(_BYTE *)(a2 + v58[22]);
  *(_BYTE *)(a1 + v58[23]) = *(_BYTE *)(a2 + v58[23]);
  *(_BYTE *)(a1 + v58[24]) = *(_BYTE *)(a2 + v58[24]);
  *(_OWORD *)(a1 + v58[25]) = *(_OWORD *)(a2 + v58[25]);
  *(_BYTE *)(a1 + v58[26]) = *(_BYTE *)(a2 + v58[26]);
  *(_QWORD *)(a1 + v58[27]) = *(_QWORD *)(a2 + v58[27]);
  *(_QWORD *)(a1 + v58[28]) = *(_QWORD *)(a2 + v58[28]);
  v102 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v102) = *(_BYTE *)(a2 + v102);
  v103 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v104 = (void *)(a1 + v103);
  v105 = (const void *)(a2 + v103);
  v106 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v105, v106) == 1)
  {
    v107 = type metadata accessor for Font.Context(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v107 - 8) + 32))(v104, v105, v107);
    swift_storeEnumTagMultiPayload(v104, v106, 1);
  }
  else
  {
    memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000152C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const void *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  int *v161;
  int v162;
  int v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  const void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v235;
  void (*v236)(uint64_t, uint64_t, uint64_t);
  uint64_t v237;
  uint64_t v238;
  int *v240;
  void (*v241)(uint64_t, uint64_t);
  uint64_t v242;
  void (*v243)(void *, const void *, uint64_t);
  void (*v244)(void *, const void *, uint64_t);
  void (*v245)(char *, char *, uint64_t);
  void (*v246)(uint64_t, uint64_t, uint64_t);
  uint64_t v247;

  v5 = type metadata accessor for UUID(0);
  v246 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40);
  v246(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v235 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v235 + 40);
  v11(v8, v9, v10);
  v244 = (void (*)(void *, const void *, uint64_t))v11;
  v11(a1 + v6[6], a2 + v6[6], v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40);
  v17(v13, v14, v15);
  v243 = (void (*)(void *, const void *, uint64_t))v17;
  v17(a1 + v6[8], a2 + v6[8], v15);
  v18 = v6[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = v6[10];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  LODWORD(v17) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v24, 1, v15);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v15);
  if ((_DWORD)v17)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v25, v26, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v25, v15);
LABEL_6:
    v28 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  v243(v25, v26, v15);
LABEL_7:
  v29 = v6[11];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v29, 1, v15);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v15);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v30, v31, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v30, v15);
LABEL_12:
    v34 = sub_100005D40(&qword_1001BF098);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  v243(v30, v31, v15);
LABEL_13:
  v35 = v6[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v237 = v5;
  v246(a1 + v35, a2 + v35, v5);
  v38 = (int *)type metadata accessor for ConditionViewModel(0);
  v39 = v38[5];
  v40 = v36 + v39;
  v41 = v37 + v39;
  v42 = type metadata accessor for WeatherCondition(0);
  v241 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40);
  v242 = v42;
  v241(v40, v41);
  v43 = v38[6];
  v44 = (_QWORD *)(v36 + v43);
  v45 = (uint64_t *)(v37 + v43);
  v47 = *v45;
  v46 = v45[1];
  v48 = v44[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease(v48);
  v49 = v38[7];
  v50 = (_QWORD *)(v36 + v49);
  v51 = (uint64_t *)(v37 + v49);
  v53 = *v51;
  v52 = v51[1];
  v54 = v50[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease(v54);
  *(_BYTE *)(v36 + v38[8]) = *(_BYTE *)(v37 + v38[8]);
  *(_BYTE *)(v36 + v38[9]) = *(_BYTE *)(v37 + v38[9]);
  *(_BYTE *)(v36 + v38[10]) = *(_BYTE *)(v37 + v38[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v55 = v6[14];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  v59 = v6[15];
  v60 = (void *)(a1 + v59);
  v61 = (const void *)(a2 + v59);
  LODWORD(v40) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v59, 1, v10);
  v62 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v61, 1, v10);
  v240 = v38;
  if ((_DWORD)v40)
  {
    if (!v62)
    {
      (*(void (**)(void *, const void *, uint64_t))(v235 + 32))(v60, v61, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v60, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v62)
  {
    (*(void (**)(void *, uint64_t))(v235 + 8))(v60, v10);
LABEL_18:
    v63 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_19;
  }
  v244(v60, v61, v10);
LABEL_19:
  v64 = v237;
  v65 = v6[16];
  v66 = (void *)(a1 + v65);
  v67 = (const void *)(a2 + v65);
  v68 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v65, 1, v10);
  v69 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(void *, const void *, uint64_t))(v235 + 32))(v66, v67, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v69)
  {
    (*(void (**)(void *, uint64_t))(v235 + 8))(v66, v10);
LABEL_24:
    v70 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_25;
  }
  v244(v66, v67, v10);
LABEL_25:
  v71 = v6[17];
  v72 = a1 + v71;
  v73 = a2 + v71;
  v74 = type metadata accessor for UVIndex(0);
  v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 40);
  v75(v72, v73, v74);
  v76 = v6[18];
  v77 = a1 + v76;
  v78 = a2 + v76;
  v79 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 40))(v77, v78, v79);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  v80 = v6[20];
  v81 = a1 + v80;
  v82 = a2 + v80;
  v83 = *(_QWORD *)(a1 + v80 + 8);
  v236 = v75;
  v238 = v74;
  if (v83)
  {
    v84 = *(_QWORD *)(v82 + 8);
    if (v84)
    {
      *(_QWORD *)v81 = *(_QWORD *)v82;
      *(_QWORD *)(v81 + 8) = v84;
      swift_bridgeObjectRelease(v83);
      v85 = *(_BYTE *)(v82 + 32);
      v86 = *(_QWORD *)(v81 + 16);
      v87 = *(_QWORD *)(v81 + 24);
      v88 = *(_BYTE *)(v81 + 32);
      *(_OWORD *)(v81 + 16) = *(_OWORD *)(v82 + 16);
      *(_BYTE *)(v81 + 32) = v85;
      sub_100007458(v86, v87, v88);
      goto LABEL_30;
    }
    sub_100008EC4(v81);
  }
  v89 = *(_OWORD *)(v82 + 16);
  *(_OWORD *)v81 = *(_OWORD *)v82;
  *(_OWORD *)(v81 + 16) = v89;
  *(_BYTE *)(v81 + 32) = *(_BYTE *)(v82 + 32);
LABEL_30:
  v90 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v91 = v90[5];
  v92 = a1 + v91;
  v93 = a2 + v91;
  v246(a1 + v91, a2 + v91, v64);
  v94 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v244((void *)(v92 + v94[5]), (const void *)(v93 + v94[5]), v10);
  v243((void *)(v92 + v94[6]), (const void *)(v93 + v94[6]), v15);
  v243((void *)(v92 + v94[7]), (const void *)(v93 + v94[7]), v15);
  v95 = v94[8];
  v96 = v92 + v95;
  v97 = v93 + v95;
  v246(v92 + v95, v93 + v95, v64);
  ((void (*)(uint64_t, uint64_t, uint64_t))v241)(v96 + v240[5], v97 + v240[5], v242);
  v98 = v240[6];
  v99 = (_QWORD *)(v96 + v98);
  v100 = (uint64_t *)(v97 + v98);
  v102 = *v100;
  v101 = v100[1];
  v103 = v99[1];
  *v99 = v102;
  v99[1] = v101;
  swift_bridgeObjectRelease(v103);
  v104 = v240[7];
  v105 = (_QWORD *)(v96 + v104);
  v106 = (uint64_t *)(v97 + v104);
  v108 = *v106;
  v107 = v106[1];
  v109 = v105[1];
  *v105 = v108;
  v105[1] = v107;
  swift_bridgeObjectRelease(v109);
  *(_BYTE *)(v96 + v240[8]) = *(_BYTE *)(v97 + v240[8]);
  *(_BYTE *)(v96 + v240[9]) = *(_BYTE *)(v97 + v240[9]);
  *(_BYTE *)(v96 + v240[10]) = *(_BYTE *)(v97 + v240[10]);
  v110 = v94[9];
  v111 = v92 + v110;
  v112 = v93 + v110;
  v113 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 40))(v111, v112, v113);
  *(_QWORD *)(v92 + v94[10]) = *(_QWORD *)(v93 + v94[10]);
  v114 = v94[11];
  v115 = (_QWORD *)(v92 + v114);
  v116 = (uint64_t *)(v93 + v114);
  v118 = *v116;
  v117 = v116[1];
  v119 = v115[1];
  *v115 = v118;
  v115[1] = v117;
  swift_bridgeObjectRelease(v119);
  v120 = v94[12];
  v121 = (_QWORD *)(v92 + v120);
  v122 = (uint64_t *)(v93 + v120);
  v124 = *v122;
  v123 = v122[1];
  v125 = v121[1];
  *v121 = v124;
  v121[1] = v123;
  swift_bridgeObjectRelease(v125);
  v126 = v94[13];
  v127 = (_QWORD *)(v92 + v126);
  v128 = (uint64_t *)(v93 + v126);
  v130 = *v128;
  v129 = v128[1];
  v131 = v127[1];
  *v127 = v130;
  v127[1] = v129;
  swift_bridgeObjectRelease(v131);
  v132 = v94[14];
  v133 = (_QWORD *)(v92 + v132);
  v134 = (uint64_t *)(v93 + v132);
  v136 = *v134;
  v135 = v134[1];
  v137 = v133[1];
  *v133 = v136;
  v133[1] = v135;
  swift_bridgeObjectRelease(v137);
  v138 = v94[15];
  v139 = v92 + v138;
  v140 = v93 + v138;
  v141 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 40))(v139, v140, v141);
  v142 = v94[16];
  v143 = (void *)(v92 + v142);
  v144 = (const void *)(v93 + v142);
  v145 = type metadata accessor for SunEvents(0);
  v146 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v143, 1, v145);
  v147 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v145);
  if (v146)
  {
    if (!v147)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v145);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v148 = *(_QWORD *)(v145 - 8);
  if (v147)
  {
    (*(void (**)(void *, uint64_t))(v148 + 8))(v143, v145);
LABEL_35:
    v149 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(void *, const void *, uint64_t))(v148 + 40))(v143, v144, v145);
LABEL_36:
  v150 = v94[17];
  v151 = (void *)(v92 + v150);
  v152 = (const void *)(v93 + v150);
  v153 = type metadata accessor for MoonEvents(0);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v153);
  v155 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v152, 1, v153);
  if (v154)
  {
    if (!v155)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v153 - 8) + 32))(v151, v152, v153);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v151, 0, 1, v153);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v156 = *(_QWORD *)(v153 - 8);
  if (v155)
  {
    (*(void (**)(void *, uint64_t))(v156 + 8))(v151, v153);
LABEL_41:
    v157 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v156 + 40))(v151, v152, v153);
LABEL_42:
  v236(v92 + v94[18], v93 + v94[18], v238);
  *(_QWORD *)(v92 + v94[19]) = *(_QWORD *)(v93 + v94[19]);
  v158 = v90[6];
  v159 = (_QWORD *)(a1 + v158);
  v160 = (_QWORD *)(a2 + v158);
  v161 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, (uint64_t)v161);
  v163 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v160, 1, (uint64_t)v161);
  if (v162)
  {
    if (!v163)
    {
      *(_OWORD *)v159 = *(_OWORD *)v160;
      v164 = v161[5];
      v165 = (char *)v159 + v164;
      v166 = (char *)v160 + v164;
      v167 = type metadata accessor for AttributedString(0);
      v168 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 32);
      v168(v165, v166, v167);
      v169 = v161[6];
      v170 = (char *)v159 + v169;
      v171 = (char *)v160 + v169;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v160 + v169, 1, v167))
      {
        v172 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
      }
      else
      {
        v168(v170, v171, v167);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v170, 0, 1, v167);
      }
      *(_OWORD *)((char *)v159 + v161[7]) = *(_OWORD *)((char *)v160 + v161[7]);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v159, 0, 1, (uint64_t)v161);
      goto LABEL_64;
    }
    goto LABEL_48;
  }
  if (v163)
  {
    sub_100011894((uint64_t)v159, type metadata accessor for RainInlineContentViewModel);
LABEL_48:
    v173 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    goto LABEL_64;
  }
  v174 = v160[1];
  v175 = v159[1];
  *v159 = *v160;
  v159[1] = v174;
  swift_bridgeObjectRelease(v175);
  v176 = v161[5];
  v177 = (char *)v159 + v176;
  v178 = (char *)v160 + v176;
  v179 = type metadata accessor for AttributedString(0);
  v247 = *(_QWORD *)(v179 - 8);
  v245 = *(void (**)(char *, char *, uint64_t))(v247 + 40);
  v245(v177, v178, v179);
  v180 = v161[6];
  v181 = (char *)v159 + v180;
  v182 = (char *)v160 + v180;
  v183 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159 + v180, 1, v179);
  v184 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v182, 1, v179);
  if (!v183)
  {
    if (!v184)
    {
      v245(v181, v182, v179);
      goto LABEL_63;
    }
    (*(void (**)(char *, uint64_t))(v247 + 8))(v181, v179);
    goto LABEL_62;
  }
  if (v184)
  {
LABEL_62:
    v185 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v247 + 32))(v181, v182, v179);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v181, 0, 1, v179);
LABEL_63:
  v186 = v161[7];
  v187 = (_QWORD *)((char *)v159 + v186);
  v188 = (_QWORD *)((char *)v160 + v186);
  v190 = *v188;
  v189 = v188[1];
  v191 = v187[1];
  *v187 = v190;
  v187[1] = v189;
  swift_bridgeObjectRelease(v191);
LABEL_64:
  v192 = v90[7];
  v193 = a1 + v192;
  v194 = a2 + v192;
  v195 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v195 - 8) + 40))(v193, v194, v195);
  v196 = v90[8];
  v197 = (_QWORD *)(a1 + v196);
  v198 = (uint64_t *)(a2 + v196);
  v200 = *v198;
  v199 = v198[1];
  v201 = v197[1];
  *v197 = v200;
  v197[1] = v199;
  swift_bridgeObjectRelease(v201);
  *(_BYTE *)(a1 + v90[9]) = *(_BYTE *)(a2 + v90[9]);
  *(_BYTE *)(a1 + v90[10]) = *(_BYTE *)(a2 + v90[10]);
  v202 = v90[11];
  v203 = *(_QWORD *)(a1 + v202);
  *(_QWORD *)(a1 + v202) = *(_QWORD *)(a2 + v202);
  swift_release(v203);
  v204 = v90[12];
  v205 = (_QWORD *)(a1 + v204);
  v206 = (uint64_t *)(a2 + v204);
  v208 = *v206;
  v207 = v206[1];
  v209 = v205[1];
  *v205 = v208;
  v205[1] = v207;
  swift_bridgeObjectRelease(v209);
  v210 = v90[13];
  v211 = *(_QWORD *)(a1 + v210);
  *(_QWORD *)(a1 + v210) = *(_QWORD *)(a2 + v210);
  swift_release(v211);
  v212 = v90[14];
  v213 = *(_QWORD *)(a1 + v212);
  *(_QWORD *)(a1 + v212) = *(_QWORD *)(a2 + v212);
  swift_release(v213);
  v214 = v90[15];
  v215 = *(_QWORD *)(a1 + v214);
  *(_QWORD *)(a1 + v214) = *(_QWORD *)(a2 + v214);
  swift_release(v215);
  v216 = v90[16];
  v217 = *(_QWORD *)(a1 + v216);
  *(_QWORD *)(a1 + v216) = *(_QWORD *)(a2 + v216);
  swift_release(v217);
  *(_BYTE *)(a1 + v90[17]) = *(_BYTE *)(a2 + v90[17]);
  v218 = v90[18];
  v219 = *(_QWORD *)(a1 + v218);
  *(_QWORD *)(a1 + v218) = *(_QWORD *)(a2 + v218);
  swift_release(v219);
  v220 = v90[19];
  v221 = *(_QWORD *)(a1 + v220);
  *(_QWORD *)(a1 + v220) = *(_QWORD *)(a2 + v220);
  swift_release(v221);
  *(_QWORD *)(a1 + v90[20]) = *(_QWORD *)(a2 + v90[20]);
  *(_BYTE *)(a1 + v90[21]) = *(_BYTE *)(a2 + v90[21]);
  *(_BYTE *)(a1 + v90[22]) = *(_BYTE *)(a2 + v90[22]);
  *(_BYTE *)(a1 + v90[23]) = *(_BYTE *)(a2 + v90[23]);
  *(_BYTE *)(a1 + v90[24]) = *(_BYTE *)(a2 + v90[24]);
  v222 = v90[25];
  v223 = (_QWORD *)(a1 + v222);
  v224 = (uint64_t *)(a2 + v222);
  v226 = *v224;
  v225 = v224[1];
  v227 = v223[1];
  *v223 = v226;
  v223[1] = v225;
  swift_bridgeObjectRelease(v227);
  *(_BYTE *)(a1 + v90[26]) = *(_BYTE *)(a2 + v90[26]);
  *(_QWORD *)(a1 + v90[27]) = *(_QWORD *)(a2 + v90[27]);
  *(_QWORD *)(a1 + v90[28]) = *(_QWORD *)(a2 + v90[28]);
  v228 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v228) = *(_BYTE *)(a2 + v228);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  if (a1 != a2)
  {
    v229 = a3[8];
    v230 = (void *)(a1 + v229);
    v231 = (const void *)(a2 + v229);
    sub_100016904(a1 + v229, &qword_1001BF0C8);
    v232 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v231, v232) == 1)
    {
      v233 = type metadata accessor for Font.Context(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v233 - 8) + 32))(v230, v231, v233);
      swift_storeEnumTagMultiPayload(v230, v232, 1);
    }
    else
    {
      memcpy(v230, v231, *(_QWORD *)(*(_QWORD *)(v232 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000160B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000160C4);
}

uint64_t sub_1000160C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v6 = sub_100016AA8();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
    return sub_100016B50(v8, v3, v7);
  }
  if ((_DWORD)v3 != 254)
  {
    v7 = sub_100005D40(&qword_1001BF0D0);
    v8 = v4 + *(int *)(a3 + 32);
    return sub_100016B50(v8, v3, v7);
  }
  v9 = *(unsigned __int8 *)(v4 + *(int *)(a3 + 24));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10001615C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100016168);
}

uint64_t sub_100016168(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = sub_100016AA8();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = v5;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(v5 + *(int *)(a4 + 24)) = v4 + 1;
      return result;
    }
    v9 = sub_100005D40(&qword_1001BF0D0);
    v10 = v5 + *(int *)(a4 + 32);
  }
  return sub_100016B44(v10, v4, v4, v9);
}

void sub_1000161EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v2 = type metadata accessor for CurrentObservationViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_10017A788;
    v6[2] = &unk_10017A7A0;
    v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_10000A7A4(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

unint64_t sub_100016294()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BF2E8;
  if (!qword_1001BF2E8)
  {
    v1 = sub_100005DC4(&qword_1001BF2F0);
    sub_100016A54(&qword_1001BF2F8, &qword_1001BF300);
    sub_100016318();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BF2E8);
  }
  return result;
}

unint64_t sub_100016318()
{
  unint64_t result;

  result = qword_1001BF308;
  if (!qword_1001BF308)
  {
    result = swift_getWitnessTable(&unk_1001853B4, &type metadata for CurrentObservationContainerAccessibilityModifier);
    atomic_store(result, (unint64_t *)&qword_1001BF308);
  }
  return result;
}

unint64_t sub_100016358()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BF310;
  if (!qword_1001BF310)
  {
    v1 = sub_100005DC4(&qword_1001BF318);
    sub_1000163C4();
    sub_100016318();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BF310);
  }
  return result;
}

unint64_t sub_1000163C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BF320;
  if (!qword_1001BF320)
  {
    v1 = sub_100005DC4(&qword_1001BF328);
    sub_100016A54(&qword_1001BF330, &qword_1001BF338);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BF320);
  }
  return result;
}

uint64_t sub_100016448(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019E6FC, 1);
}

unint64_t sub_100016470()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BF3C8;
  if (!qword_1001BF3C8)
  {
    v1 = sub_100005DC4(&qword_1001BF3B0);
    sub_1000164F4();
    sub_100016A54(&qword_1001BF3F0, &qword_1001BF3F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BF3C8);
  }
  return result;
}

unint64_t sub_1000164F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BF3D0;
  if (!qword_1001BF3D0)
  {
    v1 = sub_100005DC4(&qword_1001BF3A8);
    sub_100016878(&qword_1001BF3D8, type metadata accessor for ConditionImage);
    sub_100016A54(&qword_1001BF3E0, &qword_1001BF3E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BF3D0);
  }
  return result;
}

unint64_t sub_100016590()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BF408;
  if (!qword_1001BF408)
  {
    v1 = sub_100005DC4(&qword_1001BF400);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BF408);
  }
  return result;
}

unint64_t sub_1000165F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BF418;
  if (!qword_1001BF418)
  {
    v1 = sub_100005DC4(&qword_1001BF398);
    sub_100016878(&qword_1001BF420, (uint64_t (*)(uint64_t))&type metadata accessor for TemperatureHighLowText);
    sub_100016A54(&qword_1001BF428, &qword_1001BF348);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BF418);
  }
  return result;
}

unint64_t sub_100016690()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  result = qword_1001BF448;
  if (!qword_1001BF448)
  {
    v1 = sub_100005DC4(&qword_1001BF378);
    v2 = sub_100005DC4(&qword_1001BF368);
    v3 = sub_100005DC4(&qword_1001BF358);
    v4 = sub_100016768();
    sub_100016A54(&qword_1001BF458, &qword_1001BF358);
    v6[0] = v2;
    v6[1] = v3;
    v6[2] = v4;
    v6[3] = v5;
    swift_getOpaqueTypeConformance2(v6, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BF448);
  }
  return result;
}

unint64_t sub_100016768()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BF450;
  if (!qword_1001BF450)
  {
    v1 = sub_100005DC4(&qword_1001BF368);
    swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of TemperatureHighLowTextVertical.defaultAccessibilityLabel()>>, 1);
    sub_100016A54(&qword_1001BF3E0, &qword_1001BF3E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BF450);
  }
  return result;
}

uint64_t sub_1000167F8(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100016828(result, a2, a3 & 1);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_100016828(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100016838(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100016868(result, a2, a3 & 1);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_100016868(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease(a2);
}

void sub_100016878(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = a2(255);
    atomic_store(sub_100016CCC(v3), a1);
  }
  sub_100006338();
}

void sub_1000168AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100016C78(a1, a2, a3);
  sub_100016B28(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_100006338();
}

void sub_1000168D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100016C78(a1, a2, a3);
  sub_100016B28(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_100006338();
}

void sub_100016904(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_100005D40(a2);
  sub_100016A94(v2);
  sub_100006338();
}

unint64_t sub_10001692C()
{
  unint64_t result;

  result = qword_1001BF470;
  if (!qword_1001BF470)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001BF470);
  }
  return result;
}

uint64_t sub_100016978(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  sub_100016828(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_1000169D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  sub_100016868(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

void sub_100016A28()
{
  sub_100016A54(&qword_1001BF478, &qword_1001BF480);
}

void sub_100016A54(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100005DC4(a2);
    atomic_store(sub_100016CCC(v3), a1);
  }
  sub_100006338();
}

uint64_t sub_100016A8C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t sub_100016A94(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_100016AA8()
{
  return type metadata accessor for CurrentObservationViewAttributes(0);
}

uint64_t sub_100016AB8(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_100016AC4(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_100016AD0()
{
  return ((uint64_t (*)(void))swift_deallocObject)();
}

uint64_t sub_100016AEC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_100016B00()
{
  return type metadata accessor for CurrentObservationViewAttributes(0);
}

uint64_t sub_100016B08(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_100016B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_100016B1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_100016B28@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100016B34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

uint64_t sub_100016B3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

uint64_t sub_100016B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, a3, a4);
}

uint64_t sub_100016B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, a3);
}

uint64_t sub_100016B5C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void sub_100016B64()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10000F7C4(v0, v2, v1);
}

uint64_t sub_100016B7C()
{
  return static Alignment.center.getter();
}

uint64_t sub_100016B94()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_100016BA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_100016BB4()
{
  return 0;
}

uint64_t sub_100016BF0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_100016C04(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_100016C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_100016C24()
{
  return 0;
}

uint64_t sub_100016C30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1 + a1, 1, v2);
}

uint64_t sub_100016C44()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void sub_100016C58(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;

  sub_100011868(v2, a1 + v3, v1);
}

uint64_t sub_100016C68(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t sub_100016C78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100005D40(a3);
}

void sub_100016C88()
{
  _DWORD *v0;

  sub_1000C5030(v0);
}

uint64_t sub_100016CA8()
{
  return 0;
}

uint64_t sub_100016CB4()
{
  return 0;
}

uint64_t sub_100016CC0()
{
  uint64_t v0;
  uint64_t v1;

  return Font.capHeight(in:)(v0, v1);
}

uint64_t sub_100016CCC(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_100016CD8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100016CEC()
{
  return type metadata accessor for CurrentObservationBannerView(0);
}

double sub_100016CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  double result;
  char v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  char *v24;
  char v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v1 = type metadata accessor for WidgetRenderingMode(0);
  v31 = *(_QWORD *)(v1 - 8);
  v32 = v1;
  v2 = __chkstk_darwin(v1);
  v30 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v29 = (char *)&v29 - v4;
  v5 = type metadata accessor for ColorSchemeContrast(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v29 - v10;
  v12 = type metadata accessor for ModernDailyForecastRowView(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v0 + *(int *)(v13 + 20);
  v17 = *(_QWORD *)v16;
  v18 = *(_BYTE *)(v16 + 8);
  sub_10001961C(*(_QWORD *)v16, v18);
  v19 = sub_1000C5274(v17, v18);
  sub_100019A78(v17, v18);
  sub_10001C590(v0, (uint64_t)v15, type metadata accessor for ModernDailyForecastRowView);
  if ((v19 & 1) != 0)
  {
    sub_100011894((uint64_t)v15, type metadata accessor for ModernDailyForecastRowView);
    return 1.0;
  }
  else
  {
    sub_1000C548C(v11);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for ColorSchemeContrast.increased(_:), v5);
    v21 = static ColorSchemeContrast.== infix(_:_:)(v11, v9);
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22(v9, v5);
    v22(v11, v5);
    sub_100011894((uint64_t)v15, type metadata accessor for ModernDailyForecastRowView);
    result = 1.0;
    if ((v21 & 1) == 0)
    {
      v23 = v29;
      sub_1000C5250(v29);
      v24 = v30;
      static WidgetRenderingMode.accented.getter();
      v25 = static WidgetRenderingMode.== infix(_:_:)(v23, v24);
      v26 = *(void (**)(char *, uint64_t))(v31 + 8);
      v27 = v24;
      v28 = v32;
      v26(v27, v32);
      v26(v23, v28);
      result = 0.27;
      if ((v25 & 1) != 0)
        return 0.7;
    }
  }
  return result;
}

uint64_t sub_100016F64@<X0>(void (**a1)(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = sub_10001C948();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  sub_10001C590(v1, (uint64_t)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1001B4B00, v8 + v5, v7 | 7);
  result = sub_10001C470((uint64_t)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  *a1 = sub_10001C4B4;
  a1[1] = (void (*)(uint64_t@<X0>, uint64_t@<X8>))v9;
  return result;
}

void sub_100017014(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[2];

  v31 = a1;
  v35 = a3;
  v4 = type metadata accessor for AccessibilityChildBehavior(0);
  v32 = *(_QWORD *)(v4 - 8);
  v33 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005D40(&qword_1001BF598);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100005D40(&qword_1001BF5A0);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005D40(&qword_1001BF5A8);
  v34 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005D40(&qword_1001BF5B0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v9 = static Alignment.leading.getter(v17);
  v9[1] = v20;
  v21 = sub_100005D40(&qword_1001BF5B8);
  sub_1000172F8(a2, v31, (_QWORD *)((char *)v9 + *(int *)(v21 + 44)));
  static Alignment.leading.getter(v22);
  sub_100077980();
  sub_100016904((uint64_t)v9, &qword_1001BF598);
  static AccessibilityChildBehavior.ignore.getter();
  v23 = sub_10001C4FC();
  View.accessibilityElement(children:)(v6, v10, v23);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v33);
  sub_100016904((uint64_t)v12, &qword_1001BF5A0);
  type metadata accessor for ModernDailyForecastRowView(0);
  v24 = sub_10013D430();
  v26 = v25;
  v37[0] = v24;
  v37[1] = v25;
  v36[0] = v10;
  v36[1] = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v36, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v28 = sub_10001692C();
  View.accessibilityLabel<A>(_:)(v37, v13, &type metadata for String, OpaqueTypeConformance2, v28);
  v29 = swift_bridgeObjectRelease(v26);
  (*(void (**)(char *, uint64_t, __n128))(v34 + 8))(v15, v13, v29);
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v16);
  sub_100016904((uint64_t)v19, &qword_1001BF5B0);
}

void sub_1000172F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t KeyPath;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  double *v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  CGFloat v82;
  CGFloat MinX;
  uint64_t v84;
  CGFloat *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  double *v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  uint64_t v97;
  CGFloat *v98;
  double v99;
  unint64_t v100;
  char v101;
  double *v102;
  CGFloat v103;
  CGFloat v104;
  CGFloat v105;
  CGFloat v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  __int128 v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD v148[4];
  _OWORD v149[3];
  _BYTE v150[32];
  __int128 v151;
  CGRect v152;
  CGRect v153;
  CGRect v154;

  v130 = a2;
  v128 = a3;
  v4 = sub_100005D40(&qword_1001BF5D0);
  __chkstk_darwin(v4);
  v133 = (uint64_t *)((char *)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v129 = sub_100005D40(&qword_1001BF5D8);
  __chkstk_darwin(v129);
  v131 = (uint64_t)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100005D40(&qword_1001BF5E0);
  v7 = __chkstk_darwin(v125);
  v127 = (uint64_t)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v126 = (uint64_t)&v121 - v9;
  v144 = type metadata accessor for ConditionImage(0);
  __chkstk_darwin(v144);
  v141 = (uint64_t *)((char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v145 = sub_100005D40(&qword_1001BF5E8);
  __chkstk_darwin(v145);
  v143 = (uint64_t)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100005D40(&qword_1001BF5F0);
  __chkstk_darwin(v146);
  v142 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100005D40(&qword_1001BF5F8);
  v13 = __chkstk_darwin(v132);
  v134 = (uint64_t)&v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v147 = (uint64_t)&v121 - v15;
  v16 = type metadata accessor for ModernDailyForecastRowView(0);
  v17 = *(int *)(v16 + 40);
  v18 = v16;
  v140 = v16;
  v19 = a1 + v17;
  v139 = a1 + v17;
  v138 = type metadata accessor for DailyForecastViewModel(0);
  v20 = (_QWORD *)(v19 + *(int *)(v138 + 56));
  v21 = v20[1];
  *(_QWORD *)v150 = *v20;
  *(_QWORD *)&v150[8] = v21;
  v22 = sub_10001692C();
  swift_bridgeObjectRetain(v21);
  v23 = Text.init<A>(_:)(v150, &type metadata for String, v22);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = static Color.white.getter(v23);
  v31 = Text.foregroundColor(_:)(v30, v23, v25, v29, v27);
  v33 = v32;
  LOBYTE(v19) = v34;
  v137 = v35;
  swift_release(v30);
  v36 = v19 & 1;
  sub_100016868(v23, v25, v29);
  swift_bridgeObjectRelease(v27);
  v37 = *(int *)(v18 + 36);
  v38 = a1;
  v39 = a1 + v37;
  v136 = v39;
  v135 = type metadata accessor for DailyViewAttributes(0);
  v40 = Font.monospacedDigit()(*(_QWORD *)(v39 + *(int *)(v135 + 68)));
  v41 = v137;
  v42 = Text.font(_:)(v40, v31, v33, v36, v137);
  v44 = v43;
  LOBYTE(v27) = v45;
  v47 = v46;
  swift_release(v40);
  v48 = v27 & 1;
  sub_100016868(v31, v33, v36);
  swift_bridgeObjectRelease(v41);
  v49 = v135;
  v50 = v136;
  v137 = Text.fontWeight(_:)(*(_QWORD *)(v136 + *(int *)(v135 + 80)), 0, v42, v44, v48, v47);
  v124 = v51;
  v123 = v52;
  v122 = v53;
  sub_100016868(v42, v44, v48);
  swift_bridgeObjectRelease(v47);
  v54 = v139 + *(int *)(v138 + 32);
  v55 = type metadata accessor for ConditionViewModel(0);
  v56 = (uint64_t *)(v54 + *(int *)(v55 + 24));
  v58 = *v56;
  v57 = v56[1];
  LOBYTE(v54) = *(_BYTE *)(v54 + *(int *)(v55 + 40));
  KeyPath = swift_getKeyPath(&unk_10017A9B0);
  v60 = (uint64_t)v141;
  *v141 = KeyPath;
  v61 = sub_100005D40(&qword_1001BF3C0);
  swift_storeEnumTagMultiPayload(v60, v61, 0);
  v62 = v144;
  v63 = (_QWORD *)(v60 + *(int *)(v144 + 20));
  *v63 = v58;
  v63[1] = v57;
  *(_BYTE *)(v60 + *(int *)(v62 + 24)) = v54;
  v64 = *(_QWORD *)(v50 + *(int *)(v49 + 72));
  v65 = swift_getKeyPath(&unk_10017A9E0);
  v66 = v143;
  sub_10001C590(v60, v143, type metadata accessor for ConditionImage);
  v67 = (uint64_t *)(v66 + *(int *)(v145 + 36));
  *v67 = v65;
  v67[1] = v64;
  v68 = (uint64_t)v142;
  swift_bridgeObjectRetain(v57);
  swift_retain(v64);
  sub_100011894(v60, type metadata accessor for ConditionImage);
  v69 = v140;
  v70 = *(_QWORD *)(v38 + *(int *)(v140 + 52));
  v72 = static Alignment.center.getter(v71);
  _FrameLayout.init(width:height:alignment:)(v149, v70, 0, 0, 1, v72, v73);
  sub_10001C5BC(v66, v68, &qword_1001BF5E8);
  v74 = (_OWORD *)(v68 + *(int *)(v146 + 36));
  v75 = v149[1];
  *v74 = v149[0];
  v74[1] = v75;
  v74[2] = v149[2];
  sub_100016904(v66, &qword_1001BF5E8);
  v76 = sub_100017D08(1);
  v77 = v38 + *(int *)(v69 + 56);
  *(_QWORD *)v150 = *(_QWORD *)v77;
  *(_OWORD *)&v150[8] = *(_OWORD *)(v77 + 8);
  sub_100005D40(&qword_1001BF600);
  Binding.wrappedValue.getter(v148);
  if ((v76 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v76 >= *(_QWORD *)(v148[0] + 16))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v78 = (double *)(v148[0] + 32 * v76);
  v79 = v78[4];
  v80 = v78[5];
  v81 = v78[6];
  v82 = v78[7];
  swift_bridgeObjectRelease(v148[0]);
  v152.origin.x = v79;
  v152.origin.y = v80;
  v152.size.width = v81;
  v152.size.height = v82;
  MinX = CGRectGetMinX(v152);
  v84 = v134;
  sub_10001C5BC(v68, v134, &qword_1001BF5F0);
  v85 = (CGFloat *)(v84 + *(int *)(v132 + 36));
  *v85 = MinX;
  v85[1] = 0.0;
  sub_100016904(v68, &qword_1001BF5F0);
  v86 = v147;
  sub_10001C660(v84, v147, &qword_1001BF5F8);
  v87 = static VerticalAlignment.center.getter();
  v88 = (uint64_t)v133;
  *v133 = v87;
  *(_QWORD *)(v88 + 8) = 0;
  *(_BYTE *)(v88 + 16) = 1;
  v89 = sub_100005D40(&qword_1001BF608);
  sub_100017E28(v38, v88 + *(int *)(v89 + 44));
  v90 = sub_100017D08(2);
  *(_QWORD *)v150 = *(_QWORD *)v77;
  *(_OWORD *)&v150[8] = *(_OWORD *)(v77 + 8);
  Binding.wrappedValue.getter(v148);
  if ((v90 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v90 >= *(_QWORD *)(v148[0] + 16))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v91 = (double *)(v148[0] + 32 * v90);
  v92 = v91[4];
  v93 = v91[5];
  v94 = v91[6];
  v95 = v91[7];
  swift_bridgeObjectRelease(v148[0]);
  v153.origin.x = v92;
  v153.origin.y = v93;
  v153.size.width = v94;
  v153.size.height = v95;
  v96 = CGRectGetMinX(v153);
  v97 = v131;
  sub_10001C5BC(v88, v131, &qword_1001BF5D0);
  v98 = (CGFloat *)(v97 + *(int *)(v129 + 36));
  *v98 = v96;
  v98[1] = 0.0;
  sub_100016904(v88, &qword_1001BF5D0);
  v99 = GeometryProxy.size.getter();
  v100 = sub_100017D08(2);
  *(_QWORD *)v150 = *(_QWORD *)v77;
  *(_OWORD *)&v150[8] = *(_OWORD *)(v77 + 8);
  Binding.wrappedValue.getter(v148);
  if ((v100 & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v100 < *(_QWORD *)(v148[0] + 16))
  {
    v101 = v123 & 1;
    v102 = (double *)(v148[0] + 32 * v100);
    v103 = v102[4];
    v104 = v102[5];
    v105 = v102[6];
    v106 = v102[7];
    swift_bridgeObjectRelease(v148[0]);
    v154.origin.x = v103;
    v154.origin.y = v104;
    v154.size.width = v105;
    v154.size.height = v106;
    v107 = v99 - CGRectGetMinX(v154);
    v109 = static Alignment.center.getter(v108);
    _FrameLayout.init(width:height:alignment:)(v150, *(_QWORD *)&v107, 0, 0, 1, v109, v110);
    v111 = v127;
    sub_10001C5BC(v97, v127, &qword_1001BF5D8);
    v112 = (_OWORD *)(v111 + *(int *)(v125 + 36));
    v113 = *(_OWORD *)&v150[16];
    *v112 = *(_OWORD *)v150;
    v112[1] = v113;
    v112[2] = v151;
    sub_100016904(v97, &qword_1001BF5D8);
    v114 = v126;
    sub_10001C660(v111, v126, &qword_1001BF5E0);
    LOBYTE(v148[0]) = v101;
    sub_10001C5BC(v86, v84, &qword_1001BF5F8);
    sub_10001C5BC(v114, v111, &qword_1001BF5E0);
    v115 = v128;
    v116 = v122;
    v117 = v137;
    v118 = v84;
    v119 = v124;
    *v128 = v137;
    v115[1] = v119;
    *((_BYTE *)v115 + 16) = v101;
    v115[3] = v116;
    *((_WORD *)v115 + 16) = 257;
    v120 = sub_100005D40(&qword_1001BF610);
    sub_10001C5BC(v118, (uint64_t)v115 + *(int *)(v120 + 48), &qword_1001BF5F8);
    sub_10001C5BC(v111, (uint64_t)v115 + *(int *)(v120 + 64), &qword_1001BF5E0);
    sub_100016828(v117, v119, v101);
    swift_bridgeObjectRetain(v116);
    sub_100016828(v117, v119, v101);
    swift_bridgeObjectRetain(v116);
    sub_100016904(v114, &qword_1001BF5E0);
    sub_100016904(v147, &qword_1001BF5F8);
    sub_100016868(v117, v119, v101);
    swift_bridgeObjectRelease(v116);
    sub_100016904(v111, &qword_1001BF5E0);
    sub_100016904(v118, &qword_1001BF5F8);
    sub_100016868(v117, v119, v148[0]);
    swift_bridgeObjectRelease(v116);
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t sub_100017D08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = type metadata accessor for LayoutDirection(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v18 - v8;
  sub_1000C5058((uint64_t *)((char *)&v18 - v8));
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for LayoutDirection.rightToLeft(_:), v3);
  v10 = static LayoutDirection.== infix(_:_:)(v9, v7);
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v7, v3);
  v11(v9, v3);
  if ((v10 & 1) == 0)
    return a1;
  v12 = v1 + *(int *)(type metadata accessor for ModernDailyForecastRowView(0) + 36);
  result = type metadata accessor for DailyViewAttributes(0);
  v14 = *(_QWORD *)(v12 + *(int *)(result + 84));
  v15 = __OFSUB__(v14, a1);
  v16 = v14 - a1;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    v15 = __OFSUB__(v16, 1);
    v17 = v16 - 1;
    if (!v15)
      return v17 & ~(v17 >> 63);
  }
  __break(1u);
  return result;
}

void sub_100017E28(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char *v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  int v101;
  uint64_t v102;
  double v103;
  double v104;
  double v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  __int128 v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _OWORD v200[3];
  uint64_t v201;
  unsigned __int8 v202;
  uint64_t v203;
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  _OWORD v207[3];
  uint64_t v208;
  unsigned __int8 v209;
  uint64_t v210;
  unsigned __int8 v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  unsigned __int8 v215;
  uint64_t v216;
  unsigned __int8 v217;
  uint64_t v218;
  char *v219;

  v195 = a2;
  v3 = type metadata accessor for TemperatureScaleConfiguration.Gradient(0);
  __chkstk_darwin(v3);
  v168 = (char *)&v163 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ModernDailyForecastRowView(0);
  v6 = __chkstk_darwin(v5);
  v165 = (char *)&v163 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v164 = (uint64_t)&v163 - v8;
  v9 = sub_100005D40(&qword_1001BF098);
  v10 = __chkstk_darwin(v9);
  v174 = (char *)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v163 = (uint64_t)&v163 - v12;
  v13 = type metadata accessor for WeatherDayVarianceView(0);
  v172 = *(_QWORD *)(v13 - 8);
  v173 = v13;
  __chkstk_darwin(v13);
  v169 = (char *)&v163 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_100005D40(&qword_1001BF618);
  __chkstk_darwin(v171);
  v170 = (char *)&v163 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100005D40(&qword_1001BF620);
  v16 = __chkstk_darwin(v192);
  v167 = (char *)&v163 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v166 = (uint64_t)&v163 - v18;
  v19 = sub_100005D40(&qword_1001BF628);
  v20 = __chkstk_darwin(v19);
  v194 = (uint64_t)&v163 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v197 = (uint64_t)&v163 - v22;
  v23 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v23);
  v190 = (char *)&v163 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for WidgetRenderingMode(0);
  v185 = *(_QWORD *)(v25 - 8);
  v186 = v25;
  v26 = __chkstk_darwin(v25);
  v180 = (char *)&v163 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v178 = (char *)&v163 - v28;
  v184 = type metadata accessor for BlendMode(0);
  v182 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v181 = (char *)&v163 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_100005D40(&qword_1001BF630);
  __chkstk_darwin(v183);
  v31 = (char *)&v163 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_100005D40(&qword_1001BF638);
  __chkstk_darwin(v189);
  v187 = (uint64_t)&v163 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = sub_100005D40(&qword_1001BF640);
  v33 = __chkstk_darwin(v191);
  v193 = (uint64_t)&v163 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v188 = (uint64_t)&v163 - v36;
  __chkstk_darwin(v35);
  v198 = a1;
  v199 = (uint64_t)&v163 - v37;
  v39 = *(int *)(v5 + 36);
  v38 = *(int *)(v5 + 40);
  v177 = v5;
  v196 = a1 + v38;
  v179 = a1 + v39;
  sub_100018B64(a1 + v38, a1 + v39);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  v48 = static Color.white.getter(v40);
  v49 = Text.foregroundColor(_:)(v48, v41, v43, v47, v45);
  v175 = v50;
  v176 = v51;
  v53 = v52;
  swift_release(v48);
  v54 = v53 & 1;
  sub_100016868(v41, v43, v47);
  swift_bridgeObjectRelease(v45);
  v55 = v178;
  sub_1000C5250(v178);
  v56 = v180;
  static WidgetRenderingMode.accented.getter();
  LOBYTE(v41) = static WidgetRenderingMode.== infix(_:_:)(v55, v56);
  v57 = *(void (**)(char *, uint64_t))(v185 + 8);
  v58 = v56;
  v59 = v186;
  v57(v58, v186);
  v57(v55, v59);
  v60 = (unsigned int *)&enum case for BlendMode.normal(_:);
  v62 = v181;
  v61 = v182;
  if ((v41 & 1) == 0)
    v60 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
  v63 = v184;
  (*(void (**)(char *, _QWORD, uint64_t))(v182 + 104))(v181, *v60, v184);
  v64 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
  v65 = v61;
  v66 = (uint64_t)v190;
  v67 = v63;
  v64(v190, v62, v63);
  v68 = v66;
  sub_10001C590(v66, (uint64_t)&v31[*(int *)(v183 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v69 = v49;
  *(_QWORD *)v31 = v49;
  v70 = v175;
  v71 = v176;
  *((_QWORD *)v31 + 1) = v175;
  LOBYTE(v66) = v54;
  v31[16] = v54;
  *((_QWORD *)v31 + 3) = v71;
  v72 = v69;
  sub_100016828(v69, v70, v66);
  swift_bridgeObjectRetain(v71);
  sub_100011894(v68, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v62, v67);
  v73 = v72;
  v74 = v177;
  v75 = v198;
  sub_100016868(v73, v70, v66);
  swift_bridgeObjectRelease(v71);
  v76 = sub_100016CF4();
  v77 = v187;
  sub_10001C5BC((uint64_t)v31, v187, &qword_1001BF630);
  *(double *)(v77 + *(int *)(v189 + 36)) = v76;
  v78 = (uint64_t)v31;
  v79 = v179;
  sub_100016904(v78, &qword_1001BF630);
  v80 = v74;
  v81 = *(_QWORD *)(v75 + *(int *)(v74 + 44));
  v83 = static Alignment.trailing.getter(v82);
  _FrameLayout.init(width:height:alignment:)(v200, v81, 0, 0, 1, v83, v84);
  v85 = v188;
  sub_10001C5BC(v77, v188, &qword_1001BF638);
  v86 = (_OWORD *)(v85 + *(int *)(v191 + 36));
  v87 = v200[1];
  *v86 = v200[0];
  v86[1] = v87;
  v86[2] = v200[2];
  sub_100016904(v77, &qword_1001BF638);
  sub_10001C660(v85, v199, &qword_1001BF640);
  v89 = static Alignment.center.getter(v88);
  _FrameLayout.init(width:height:alignment:)(&v201, 0x4020000000000000, 0, 0, 1, v89, v90);
  v191 = v201;
  LODWORD(v190) = v202;
  v189 = v203;
  LODWORD(v188) = v204;
  v186 = v206;
  v187 = v205;
  v91 = type metadata accessor for DailyViewAttributes(0);
  v92 = 1;
  if (*(_BYTE *)(v79 + *(int *)(v91 + 40)) == 1)
  {
    v93 = v91;
    v94 = v163;
    sub_10001C5BC(v79 + *(int *)(v91 + 88), v163, &qword_1001BF098);
    v95 = sub_100005D40(&qword_1001BF090);
    v96 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v94, 1, v95);
    if (v96 == 1)
    {
      sub_100016904(v94, &qword_1001BF098);
      v97 = 0.0;
    }
    else
    {
      v97 = Measurement.value.getter(v95);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 8))(v94, v95);
    }
    v98 = (uint64_t)v174;
    v99 = v164;
    sub_10001C590(v75, v164, type metadata accessor for ModernDailyForecastRowView);
    if (v96 == 1)
    {
      type metadata accessor for DailyForecastViewModel(0);
      v100 = Measurement.value.getter(v95);
      v98 = (uint64_t)v174;
      v97 = v100;
    }
    sub_100011894(v99, type metadata accessor for ModernDailyForecastRowView);
    sub_10001C5BC(v79 + *(int *)(v93 + 92), v98, &qword_1001BF098);
    v101 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v98, 1, v95);
    v102 = (uint64_t)v165;
    if (v101 == 1)
    {
      sub_100016904(v98, &qword_1001BF098);
      v103 = 0.0;
    }
    else
    {
      v103 = Measurement.value.getter(v95);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 8))(v98, v95);
    }
    sub_10001C590(v75, v102, type metadata accessor for ModernDailyForecastRowView);
    if (v101 == 1)
    {
      type metadata accessor for DailyForecastViewModel(0);
      v103 = Measurement.value.getter(v95);
    }
    sub_100011894(v102, type metadata accessor for ModernDailyForecastRowView);
    type metadata accessor for DailyForecastViewModel(0);
    v104 = Measurement.value.getter(v95);
    v105 = Measurement.value.getter(v95);
    v106 = v168;
    TemperatureScaleConfiguration.gradient.getter();
    v107 = Gradient.init(_:)(v106);
    v108 = v169;
    WeatherDayVarianceView.init(weekMaxTemp:weekMinTemp:dayHighTemp:dayLowTemp:currentTemp:isDaylight:temperatureGradient:)(0, 1, 1, v107, v97, v103, v104, v105);
    v109 = sub_100005D40(&qword_1001BF498);
    v110 = ScaledValue.wrappedValue.getter(&v214, v109);
    v111 = v214;
    v112 = static Alignment.center.getter(v110);
    _FrameLayout.init(width:height:alignment:)(v207, 0, 1, v111, 0, v112, v113);
    v115 = v172;
    v114 = v173;
    v116 = (uint64_t)v170;
    (*(void (**)(char *, char *, uint64_t))(v172 + 16))(v170, v108, v173);
    v117 = v171;
    v118 = (_OWORD *)(v116 + *(int *)(v171 + 36));
    v119 = v207[1];
    *v118 = v207[0];
    v118[1] = v119;
    v118[2] = v207[2];
    (*(void (**)(char *, uint64_t))(v115 + 8))(v108, v114);
    v120 = sub_10001C5DC();
    v121 = v167;
    View.accessibilityHidden(_:)(1, v117, v120);
    sub_100016904(v116, &qword_1001BF618);
    v122 = (uint64_t)v121;
    v123 = v166;
    sub_10001C660(v122, v166, &qword_1001BF620);
    sub_10001C660(v123, v197, &qword_1001BF620);
    v92 = 0;
  }
  v124 = v197;
  v125 = _s13WeatherWidget20WeatherDataViewModelOwst_0(v197, v92, 1, v192);
  v126 = static Alignment.center.getter(v125);
  _FrameLayout.init(width:height:alignment:)(&v208, 0x4020000000000000, 0, 0, 1, v126, v127);
  v192 = v208;
  LODWORD(v185) = v209;
  v184 = v210;
  LODWORD(v183) = v211;
  v181 = v213;
  v182 = v212;
  sub_100018CBC(v196, v79);
  v128 = v75;
  v130 = v129;
  v131 = v80;
  v133 = v132;
  v135 = v134;
  v137 = v136 & 1;
  v138 = static Color.white.getter(v129);
  v139 = Text.foregroundColor(_:)(v138, v130, v133, v137, v135);
  v179 = v140;
  v180 = (char *)v139;
  v142 = v141;
  v196 = v143;
  swift_release(v138);
  sub_100016868(v130, v133, v137);
  v144 = swift_bridgeObjectRelease(v135);
  v145 = *(_QWORD *)(v128 + *(int *)(v131 + 48));
  v146 = static Alignment.trailing.getter(v144);
  _FrameLayout.init(width:height:alignment:)(&v214, v145, 0, 0, 1, v146, v147);
  v198 = v214;
  LODWORD(v178) = v215;
  v177 = v216;
  LODWORD(v176) = v217;
  v174 = v219;
  v175 = v218;
  v148 = v199;
  v149 = v193;
  sub_10001C5BC(v199, v193, &qword_1001BF640);
  v150 = v194;
  sub_10001C5BC(v124, v194, &qword_1001BF628);
  v151 = v195;
  sub_10001C5BC(v149, v195, &qword_1001BF640);
  v152 = (int *)sub_100005D40(&qword_1001BF648);
  v153 = v151 + v152[12];
  *(_QWORD *)v153 = 0;
  *(_BYTE *)(v153 + 8) = 1;
  *(_QWORD *)(v153 + 16) = v191;
  *(_BYTE *)(v153 + 24) = (_BYTE)v190;
  *(_QWORD *)(v153 + 32) = v189;
  *(_BYTE *)(v153 + 40) = v188;
  v154 = v186;
  *(_QWORD *)(v153 + 48) = v187;
  *(_QWORD *)(v153 + 56) = v154;
  sub_10001C5BC(v150, v151 + v152[16], &qword_1001BF628);
  v155 = v151 + v152[20];
  *(_QWORD *)v155 = 0;
  *(_BYTE *)(v155 + 8) = 1;
  *(_QWORD *)(v155 + 16) = v192;
  *(_BYTE *)(v155 + 24) = v185;
  *(_QWORD *)(v155 + 32) = v184;
  *(_BYTE *)(v155 + 40) = v183;
  v156 = v181;
  *(_QWORD *)(v155 + 48) = v182;
  *(_QWORD *)(v155 + 56) = v156;
  v157 = v151 + v152[24];
  v159 = v179;
  v158 = (uint64_t)v180;
  *(_QWORD *)v157 = v180;
  *(_QWORD *)(v157 + 8) = v159;
  *(_BYTE *)(v157 + 16) = v142 & 1;
  v160 = v196;
  v161 = v198;
  *(_QWORD *)(v157 + 24) = v196;
  *(_QWORD *)(v157 + 32) = v161;
  *(_BYTE *)(v157 + 40) = (_BYTE)v178;
  *(_QWORD *)(v157 + 48) = v177;
  *(_BYTE *)(v157 + 56) = v176;
  v162 = v174;
  *(_QWORD *)(v157 + 64) = v175;
  *(_QWORD *)(v157 + 72) = v162;
  sub_100016828(v158, v159, v142 & 1);
  swift_bridgeObjectRetain(v160);
  sub_100016904(v124, &qword_1001BF628);
  sub_100016904(v148, &qword_1001BF640);
  sub_100016868(v158, v159, v142 & 1);
  swift_bridgeObjectRelease(v160);
  sub_100016904(v150, &qword_1001BF628);
  sub_100016904(v149, &qword_1001BF640);
}

void sub_100018B64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = sub_10001C8A8(a1, a2);
  v6 = sub_10001C88C(v5);
  __chkstk_darwin(v6);
  sub_10001C6FC();
  sub_10001C95C();
  __chkstk_darwin(v7);
  sub_10001C85C();
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - v9;
  v11 = sub_100005D40(&qword_1001BF090);
  v12 = sub_10001C7B8(v11);
  __chkstk_darwin(v12);
  v13 = sub_10001C718();
  v14 = sub_10001C878(*(int *)(v13 + 28));
  static WeatherFormatStyle<>.weather.getter(v14);
  sub_10001C970();
  v15 = *(_QWORD *)(v2 + 8);
  v16 = sub_10001C8E8((uint64_t)v10);
  sub_10001C7E8(v16, enum case for WeatherFormatPlaceholder.none(_:));
  v17 = type metadata accessor for UnitManager(0);
  static UnitManager.standard.getter(v17);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  sub_10001C6E0(v18, v19, v20, (uint64_t)&protocol witness table for UnitManager);
  sub_10001C918();
  sub_10001C908();
  sub_10001C8E8(v3);
  sub_10001C834();
  v23 = v17;
  v24 = v4;
  v21 = sub_10001692C();
  Text.init<A>(_:)(&v23, &type metadata for String, v21);
  sub_10001C7A0();
  sub_10001C8D8();
  Font.weight(_:)(v15);
  Font.monospacedDigit()();
  sub_10001C97C();
  sub_10001C758();
  sub_10001C740();
  sub_10001C8B8();
  sub_10001C8F0();
  sub_10001C770();
}

void sub_100018CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = sub_10001C8A8(a1, a2);
  v6 = sub_10001C88C(v5);
  __chkstk_darwin(v6);
  sub_10001C6FC();
  sub_10001C95C();
  __chkstk_darwin(v7);
  sub_10001C85C();
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - v9;
  v11 = sub_100005D40(&qword_1001BF090);
  v12 = sub_10001C7B8(v11);
  __chkstk_darwin(v12);
  v13 = sub_10001C718();
  v14 = sub_10001C878(*(int *)(v13 + 24));
  static WeatherFormatStyle<>.weather.getter(v14);
  sub_10001C970();
  v15 = *(_QWORD *)(v2 + 8);
  v16 = sub_10001C8E8((uint64_t)v10);
  sub_10001C7E8(v16, enum case for WeatherFormatPlaceholder.none(_:));
  v17 = type metadata accessor for UnitManager(0);
  static UnitManager.standard.getter(v17);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  sub_10001C6E0(v18, v19, v20, (uint64_t)&protocol witness table for UnitManager);
  sub_10001C918();
  sub_10001C908();
  sub_10001C8E8(v3);
  sub_10001C834();
  v23 = v17;
  v24 = v4;
  v21 = sub_10001692C();
  Text.init<A>(_:)(&v23, &type metadata for String, v21);
  sub_10001C7A0();
  sub_10001C8D8();
  Font.weight(_:)(v15);
  Font.monospacedDigit()();
  sub_10001C97C();
  sub_10001C758();
  sub_10001C740();
  sub_10001C8B8();
  sub_10001C8F0();
  sub_10001C770();
}

_QWORD *sub_100018E14(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  int *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  int *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v136;
  _QWORD *v137;
  int *v138;
  _QWORD *v139;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BF488);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = a3[5];
    v138 = a3;
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *(_QWORD *)v17;
    v19 = v17[8];
    sub_10001961C(*(_QWORD *)v17, v19);
    *(_QWORD *)v16 = v18;
    v16[8] = v19;
    v20 = v138[6];
    v21 = (_QWORD *)((char *)a1 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    v23 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = 1;
    }
    else
    {
      v26 = *v22;
      *v21 = *v22;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
    v27 = v138[7];
    v28 = (_QWORD *)((char *)a1 + v27);
    v29 = (_QWORD *)((char *)a2 + v27);
    v30 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v31 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
      v32 = v28;
      v33 = v30;
      v34 = 1;
    }
    else
    {
      v35 = *v29;
      *v28 = *v29;
      swift_retain(v35);
      v32 = v28;
      v33 = v30;
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v33, v34);
    v36 = v138[8];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = sub_100005D40(&qword_1001BF498);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = v138[9];
    v41 = (char *)a1 + v40;
    v139 = a2;
    v42 = (char *)a2 + v40;
    v43 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    v44 = (int *)type metadata accessor for DailyViewAttributes(0);
    v45 = v44[5];
    v46 = *(_QWORD *)&v42[v45];
    *(_QWORD *)&v41[v45] = v46;
    *(_WORD *)&v41[v44[6]] = *(_WORD *)&v42[v44[6]];
    *(_QWORD *)&v41[v44[7]] = *(_QWORD *)&v42[v44[7]];
    v41[v44[8]] = v42[v44[8]];
    v41[v44[9]] = v42[v44[9]];
    v41[v44[10]] = v42[v44[10]];
    *(_QWORD *)&v41[v44[11]] = *(_QWORD *)&v42[v44[11]];
    v41[v44[12]] = v42[v44[12]];
    v41[v44[13]] = v42[v44[13]];
    v41[v44[14]] = v42[v44[14]];
    v41[v44[15]] = v42[v44[15]];
    *(_QWORD *)&v41[v44[16]] = *(_QWORD *)&v42[v44[16]];
    v47 = v44[17];
    v48 = *(_QWORD *)&v42[v47];
    *(_QWORD *)&v41[v47] = v48;
    v49 = v44[18];
    v50 = *(_QWORD *)&v42[v49];
    *(_QWORD *)&v41[v49] = v50;
    v51 = v44[19];
    v52 = *(_QWORD *)&v42[v51];
    *(_QWORD *)&v41[v51] = v52;
    *(_QWORD *)&v41[v44[20]] = *(_QWORD *)&v42[v44[20]];
    *(_QWORD *)&v41[v44[21]] = *(_QWORD *)&v42[v44[21]];
    v53 = v44[22];
    v54 = &v41[v53];
    v55 = &v42[v53];
    swift_bridgeObjectRetain(v46);
    swift_retain(v48);
    swift_retain(v50);
    swift_retain(v52);
    v56 = sub_100005D40(&qword_1001BF090);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v55, 1, v56))
    {
      v57 = sub_100005D40(&qword_1001BF098);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v54, 0, 1, v56);
    }
    v58 = v44[23];
    v59 = &v41[v58];
    v60 = &v42[v58];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v60, 1, v56))
    {
      v61 = sub_100005D40(&qword_1001BF098);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v59, v60, v56);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v56);
    }
    v62 = v138[10];
    v137 = a1;
    v63 = (char *)a1 + v62;
    v64 = (char *)v139 + v62;
    v65 = type metadata accessor for UUID(0);
    v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16);
    v66(v63, v64, v65);
    v67 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v68 = v67[5];
    v69 = &v63[v68];
    v70 = &v64[v68];
    v71 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
    v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
    v72(&v63[v67[6]], &v64[v67[6]], v56);
    v72(&v63[v67[7]], &v64[v67[7]], v56);
    v73 = v67[8];
    v74 = &v63[v73];
    v75 = &v64[v73];
    v66(&v63[v73], &v64[v73], v65);
    v76 = (int *)type metadata accessor for ConditionViewModel(0);
    v77 = v76[5];
    v78 = &v74[v77];
    v79 = &v75[v77];
    v80 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v78, v79, v80);
    v81 = v76[6];
    v82 = &v74[v81];
    v83 = &v75[v81];
    v84 = *((_QWORD *)v83 + 1);
    *(_QWORD *)v82 = *(_QWORD *)v83;
    *((_QWORD *)v82 + 1) = v84;
    v85 = v76[7];
    v86 = &v74[v85];
    v87 = &v75[v85];
    v88 = *((_QWORD *)v87 + 1);
    *(_QWORD *)v86 = *(_QWORD *)v87;
    *((_QWORD *)v86 + 1) = v88;
    v74[v76[8]] = v75[v76[8]];
    v74[v76[9]] = v75[v76[9]];
    v74[v76[10]] = v75[v76[10]];
    v89 = v67[9];
    v90 = &v63[v89];
    v91 = &v64[v89];
    v92 = type metadata accessor for Precipitation(0);
    v93 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16);
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v88);
    v93(v90, v91, v92);
    *(_QWORD *)&v63[v67[10]] = *(_QWORD *)&v64[v67[10]];
    v94 = v67[11];
    v95 = &v63[v94];
    v96 = &v64[v94];
    v97 = *((_QWORD *)v96 + 1);
    *(_QWORD *)v95 = *(_QWORD *)v96;
    *((_QWORD *)v95 + 1) = v97;
    v98 = v67[12];
    v99 = &v63[v98];
    v100 = &v64[v98];
    v101 = *((_QWORD *)v100 + 1);
    *(_QWORD *)v99 = *(_QWORD *)v100;
    *((_QWORD *)v99 + 1) = v101;
    v102 = v67[13];
    v103 = &v63[v102];
    v104 = &v64[v102];
    v105 = *((_QWORD *)v104 + 1);
    *(_QWORD *)v103 = *(_QWORD *)v104;
    *((_QWORD *)v103 + 1) = v105;
    v106 = v67[14];
    v107 = &v63[v106];
    v108 = &v64[v106];
    v109 = *((_QWORD *)v108 + 1);
    *(_QWORD *)v107 = *(_QWORD *)v108;
    *((_QWORD *)v107 + 1) = v109;
    v110 = v67[15];
    v111 = &v63[v110];
    v136 = &v64[v110];
    v112 = type metadata accessor for TemperatureScaleConfiguration(0);
    v113 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 16);
    swift_bridgeObjectRetain(v97);
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRetain(v105);
    swift_bridgeObjectRetain(v109);
    v113(v111, v136, v112);
    v114 = v67[16];
    v115 = &v63[v114];
    v116 = &v64[v114];
    v117 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v116, 1, v117))
    {
      v118 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 16))(v115, v116, v117);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v117);
    }
    v119 = v67[17];
    v120 = &v63[v119];
    v121 = &v64[v119];
    v122 = type metadata accessor for MoonEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v121, 1, v122))
    {
      v123 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v120, 0, 1, v122);
    }
    v124 = v67[18];
    v125 = &v63[v124];
    v126 = &v64[v124];
    v127 = type metadata accessor for UVIndex(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 16))(v125, v126, v127);
    *(_QWORD *)&v63[v67[19]] = *(_QWORD *)&v64[v67[19]];
    v128 = v138[12];
    *(_QWORD *)((char *)v137 + v138[11]) = *(_QWORD *)((char *)v139 + v138[11]);
    *(_QWORD *)((char *)v137 + v128) = *(_QWORD *)((char *)v139 + v128);
    v129 = v138[14];
    *(_QWORD *)((char *)v137 + v138[13]) = *(_QWORD *)((char *)v139 + v138[13]);
    v130 = (_QWORD *)((char *)v137 + v129);
    v131 = (_QWORD *)((char *)v139 + v129);
    v132 = *v131;
    v133 = v131[1];
    *v130 = *v131;
    v130[1] = v133;
    v134 = v131[2];
    v130[2] = v134;
    swift_retain(v132);
    swift_retain(v133);
    v13 = v137;
    swift_bridgeObjectRetain(v134);
  }
  return v13;
}

uint64_t sub_10001961C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

double sub_100019628(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  int *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  int *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  double result;

  v4 = sub_100005D40(&qword_1001BF488);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_100019A78(*(_QWORD *)((char *)a1 + a2[5]), *((_BYTE *)a1 + a2[5] + 8));
  v6 = (_QWORD *)((char *)a1 + a2[6]);
  v7 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)a1 + a2[7]);
  v10 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (char *)a1 + a2[8];
  v13 = sub_100005D40(&qword_1001BF498);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = (char *)a1 + a2[9];
  v15 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = (int *)type metadata accessor for DailyViewAttributes(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v14[v16[5]]);
  swift_release(*(_QWORD *)&v14[v16[17]]);
  swift_release(*(_QWORD *)&v14[v16[18]]);
  swift_release(*(_QWORD *)&v14[v16[19]]);
  v17 = (uint64_t)&v14[v16[22]];
  v18 = sub_100005D40(&qword_1001BF090);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v17, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = (uint64_t)&v14[v16[23]];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v19, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v19, v18);
  v20 = (char *)a1 + a2[10];
  v21 = type metadata accessor for UUID(0);
  v22 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
  v22(v20, v21);
  v23 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v24 = &v20[v23[5]];
  v25 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v26(&v20[v23[6]], v18);
  v26(&v20[v23[7]], v18);
  v27 = &v20[v23[8]];
  v22(v27, v21);
  v28 = (int *)type metadata accessor for ConditionViewModel(0);
  v29 = &v27[v28[5]];
  v30 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  swift_bridgeObjectRelease(*(_QWORD *)&v27[v28[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v27[v28[7] + 8]);
  v31 = &v20[v23[9]];
  v32 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  swift_bridgeObjectRelease(*(_QWORD *)&v20[v23[11] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v20[v23[12] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v20[v23[13] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v20[v23[14] + 8]);
  v33 = &v20[v23[15]];
  v34 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
  v35 = (uint64_t)&v20[v23[16]];
  v36 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v35, 1, v36))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
  v37 = (uint64_t)&v20[v23[17]];
  v38 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v37, 1, v38))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
  v39 = &v20[v23[18]];
  v40 = type metadata accessor for UVIndex(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
  v41 = (_QWORD *)((char *)a1 + a2[14]);
  swift_release(*v41);
  swift_release(v41[1]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v41[2]).n128_u64[0];
  return result;
}

uint64_t sub_100019A78(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

_QWORD *sub_100019A84(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, char *, uint64_t);
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v133;
  _QWORD *v134;
  int *v135;
  _QWORD *v136;

  v6 = sub_100005D40(&qword_1001BF488);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v135 = a3;
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_10001961C(*(_QWORD *)v14, v16);
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  v17 = v135[6];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
    v22 = 1;
  }
  else
  {
    v23 = *v19;
    *v18 = *v19;
    swift_retain(v23);
    v22 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v20, v22);
  v24 = v135[7];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  v27 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
    v29 = v25;
    v30 = v27;
    v31 = 1;
  }
  else
  {
    v32 = *v26;
    *v25 = *v26;
    swift_retain(v32);
    v29 = v25;
    v30 = v27;
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v29, v30, v31);
  v33 = v135[8];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = sub_100005D40(&qword_1001BF498);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
  v37 = v135[9];
  v38 = (char *)a1 + v37;
  v136 = a2;
  v39 = (char *)a2 + v37;
  v40 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
  v41 = (int *)type metadata accessor for DailyViewAttributes(0);
  v42 = v41[5];
  v43 = *(_QWORD *)&v39[v42];
  *(_QWORD *)&v38[v42] = v43;
  *(_WORD *)&v38[v41[6]] = *(_WORD *)&v39[v41[6]];
  *(_QWORD *)&v38[v41[7]] = *(_QWORD *)&v39[v41[7]];
  v38[v41[8]] = v39[v41[8]];
  v38[v41[9]] = v39[v41[9]];
  v38[v41[10]] = v39[v41[10]];
  *(_QWORD *)&v38[v41[11]] = *(_QWORD *)&v39[v41[11]];
  v38[v41[12]] = v39[v41[12]];
  v38[v41[13]] = v39[v41[13]];
  v38[v41[14]] = v39[v41[14]];
  v38[v41[15]] = v39[v41[15]];
  *(_QWORD *)&v38[v41[16]] = *(_QWORD *)&v39[v41[16]];
  v44 = v41[17];
  v45 = *(_QWORD *)&v39[v44];
  *(_QWORD *)&v38[v44] = v45;
  v46 = v41[18];
  v47 = *(_QWORD *)&v39[v46];
  *(_QWORD *)&v38[v46] = v47;
  v48 = v41[19];
  v49 = *(_QWORD *)&v39[v48];
  *(_QWORD *)&v38[v48] = v49;
  *(_QWORD *)&v38[v41[20]] = *(_QWORD *)&v39[v41[20]];
  *(_QWORD *)&v38[v41[21]] = *(_QWORD *)&v39[v41[21]];
  v50 = v41[22];
  v51 = &v38[v50];
  v52 = &v39[v50];
  swift_bridgeObjectRetain(v43);
  swift_retain(v45);
  swift_retain(v47);
  swift_retain(v49);
  v53 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v52, 1, v53))
  {
    v54 = sub_100005D40(&qword_1001BF098);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v51, 0, 1, v53);
  }
  v55 = v41[23];
  v56 = &v38[v55];
  v57 = &v39[v55];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v57, 1, v53))
  {
    v58 = sub_100005D40(&qword_1001BF098);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v56, v57, v53);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v53);
  }
  v59 = v135[10];
  v134 = a1;
  v60 = (char *)a1 + v59;
  v61 = (char *)v136 + v59;
  v62 = type metadata accessor for UUID(0);
  v63 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
  v63(v60, v61, v62);
  v64 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v65 = v64[5];
  v66 = &v60[v65];
  v67 = &v61[v65];
  v68 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
  v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
  v69(&v60[v64[6]], &v61[v64[6]], v53);
  v69(&v60[v64[7]], &v61[v64[7]], v53);
  v70 = v64[8];
  v71 = &v60[v70];
  v72 = &v61[v70];
  v63(&v60[v70], &v61[v70], v62);
  v73 = (int *)type metadata accessor for ConditionViewModel(0);
  v74 = v73[5];
  v75 = &v71[v74];
  v76 = &v72[v74];
  v77 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
  v78 = v73[6];
  v79 = &v71[v78];
  v80 = &v72[v78];
  v81 = *((_QWORD *)v80 + 1);
  *(_QWORD *)v79 = *(_QWORD *)v80;
  *((_QWORD *)v79 + 1) = v81;
  v82 = v73[7];
  v83 = &v71[v82];
  v84 = &v72[v82];
  v85 = *((_QWORD *)v84 + 1);
  *(_QWORD *)v83 = *(_QWORD *)v84;
  *((_QWORD *)v83 + 1) = v85;
  v71[v73[8]] = v72[v73[8]];
  v71[v73[9]] = v72[v73[9]];
  v71[v73[10]] = v72[v73[10]];
  v86 = v64[9];
  v87 = &v60[v86];
  v88 = &v61[v86];
  v89 = type metadata accessor for Precipitation(0);
  v90 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 16);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v85);
  v90(v87, v88, v89);
  *(_QWORD *)&v60[v64[10]] = *(_QWORD *)&v61[v64[10]];
  v91 = v64[11];
  v92 = &v60[v91];
  v93 = &v61[v91];
  v94 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v92 = *(_QWORD *)v93;
  *((_QWORD *)v92 + 1) = v94;
  v95 = v64[12];
  v96 = &v60[v95];
  v97 = &v61[v95];
  v98 = *((_QWORD *)v97 + 1);
  *(_QWORD *)v96 = *(_QWORD *)v97;
  *((_QWORD *)v96 + 1) = v98;
  v99 = v64[13];
  v100 = &v60[v99];
  v101 = &v61[v99];
  v102 = *((_QWORD *)v101 + 1);
  *(_QWORD *)v100 = *(_QWORD *)v101;
  *((_QWORD *)v100 + 1) = v102;
  v103 = v64[14];
  v104 = &v60[v103];
  v105 = &v61[v103];
  v106 = *((_QWORD *)v105 + 1);
  *(_QWORD *)v104 = *(_QWORD *)v105;
  *((_QWORD *)v104 + 1) = v106;
  v107 = v64[15];
  v108 = &v60[v107];
  v133 = &v61[v107];
  v109 = type metadata accessor for TemperatureScaleConfiguration(0);
  v110 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 16);
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRetain(v106);
  v110(v108, v133, v109);
  v111 = v64[16];
  v112 = &v60[v111];
  v113 = &v61[v111];
  v114 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v113, 1, v114))
  {
    v115 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(v112, v113, v114);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v112, 0, 1, v114);
  }
  v116 = v64[17];
  v117 = &v60[v116];
  v118 = &v61[v116];
  v119 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v118, 1, v119))
  {
    v120 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 16))(v117, v118, v119);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v117, 0, 1, v119);
  }
  v121 = v64[18];
  v122 = &v60[v121];
  v123 = &v61[v121];
  v124 = type metadata accessor for UVIndex(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(v122, v123, v124);
  *(_QWORD *)&v60[v64[19]] = *(_QWORD *)&v61[v64[19]];
  v125 = v135[12];
  *(_QWORD *)((char *)v134 + v135[11]) = *(_QWORD *)((char *)v136 + v135[11]);
  *(_QWORD *)((char *)v134 + v125) = *(_QWORD *)((char *)v136 + v125);
  v126 = v135[14];
  *(_QWORD *)((char *)v134 + v135[13]) = *(_QWORD *)((char *)v136 + v135[13]);
  v127 = (_QWORD *)((char *)v134 + v126);
  v128 = (_QWORD *)((char *)v136 + v126);
  v129 = *v128;
  v130 = v128[1];
  *v127 = *v128;
  v127[1] = v130;
  v131 = v128[2];
  v127[2] = v131;
  swift_retain(v129);
  swift_retain(v130);
  swift_bridgeObjectRetain(v131);
  return v134;
}

uint64_t *sub_10001A25C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  int *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  int *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int *v160;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BF488);
    v6 = sub_100005D40(&qword_1001BF488);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v160 = a3;
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_10001961C(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_100019A78(v17, v18);
  if (a1 != a2)
  {
    v19 = v160[6];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    sub_100016904((uint64_t)a1 + v19, &qword_1001BF490);
    v22 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
    v26 = v160[7];
    v27 = (uint64_t *)((char *)a1 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    sub_100016904((uint64_t)a1 + v26, &qword_1001BF3C0);
    v29 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = v27;
      v32 = v29;
      v33 = 1;
    }
    else
    {
      v34 = *v28;
      *v27 = *v28;
      swift_retain(v34);
      v31 = v27;
      v32 = v29;
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v32, v33);
  }
  v35 = v160[8];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = sub_100005D40(&qword_1001BF498);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  v39 = v160[9];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = (int *)type metadata accessor for DailyViewAttributes(0);
  v44 = v43[5];
  v45 = *(_QWORD *)&v41[v44];
  v46 = *(_QWORD *)&v40[v44];
  *(_QWORD *)&v40[v44] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = v43[6];
  v48 = &v40[v47];
  v49 = &v41[v47];
  *v48 = *v49;
  v48[1] = v49[1];
  *(_QWORD *)&v40[v43[7]] = *(_QWORD *)&v41[v43[7]];
  v40[v43[8]] = v41[v43[8]];
  v40[v43[9]] = v41[v43[9]];
  v40[v43[10]] = v41[v43[10]];
  *(_QWORD *)&v40[v43[11]] = *(_QWORD *)&v41[v43[11]];
  v40[v43[12]] = v41[v43[12]];
  v40[v43[13]] = v41[v43[13]];
  v40[v43[14]] = v41[v43[14]];
  v40[v43[15]] = v41[v43[15]];
  *(_QWORD *)&v40[v43[16]] = *(_QWORD *)&v41[v43[16]];
  v50 = v43[17];
  v51 = *(_QWORD *)&v41[v50];
  v52 = *(_QWORD *)&v40[v50];
  *(_QWORD *)&v40[v50] = v51;
  swift_retain(v51);
  swift_release(v52);
  v53 = v43[18];
  v54 = *(_QWORD *)&v41[v53];
  v55 = *(_QWORD *)&v40[v53];
  *(_QWORD *)&v40[v53] = v54;
  swift_retain(v54);
  swift_release(v55);
  v56 = v43[19];
  v57 = *(_QWORD *)&v41[v56];
  v58 = *(_QWORD *)&v40[v56];
  *(_QWORD *)&v40[v56] = v57;
  swift_retain(v57);
  swift_release(v58);
  *(_QWORD *)&v40[v43[20]] = *(_QWORD *)&v41[v43[20]];
  *(_QWORD *)&v40[v43[21]] = *(_QWORD *)&v41[v43[21]];
  v59 = v43[22];
  v60 = &v40[v59];
  v61 = &v41[v59];
  v62 = sub_100005D40(&qword_1001BF090);
  v63 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v60, 1, v62);
  v64 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v61, 1, v62);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v60, 0, 1, v62);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  v65 = *(_QWORD *)(v62 - 8);
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v65 + 8))(v60, v62);
LABEL_19:
    v66 = sub_100005D40(&qword_1001BF098);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v65 + 24))(v60, v61, v62);
LABEL_20:
  v67 = v43[23];
  v68 = &v40[v67];
  v69 = &v41[v67];
  v70 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v68, 1, v62);
  v71 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v69, 1, v62);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v68, v69, v62);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v68, 0, 1, v62);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v72 = *(_QWORD *)(v62 - 8);
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v68, v62);
LABEL_25:
    v73 = sub_100005D40(&qword_1001BF098);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v72 + 24))(v68, v69, v62);
LABEL_26:
  v74 = v160[10];
  v75 = (char *)a1 + v74;
  v76 = (char *)a2 + v74;
  v77 = type metadata accessor for UUID(0);
  v78 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 24);
  v78(v75, v76, v77);
  v79 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v80 = v79[5];
  v81 = &v75[v80];
  v82 = &v76[v80];
  v83 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 24))(v81, v82, v83);
  v84 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 24);
  v84(&v75[v79[6]], &v76[v79[6]], v62);
  v84(&v75[v79[7]], &v76[v79[7]], v62);
  v85 = v79[8];
  v86 = &v75[v85];
  v87 = &v76[v85];
  v78(&v75[v85], &v76[v85], v77);
  v88 = (int *)type metadata accessor for ConditionViewModel(0);
  v89 = v88[5];
  v90 = &v86[v89];
  v91 = &v87[v89];
  v92 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 24))(v90, v91, v92);
  v93 = v88[6];
  v94 = &v86[v93];
  v95 = &v87[v93];
  *(_QWORD *)v94 = *(_QWORD *)v95;
  v96 = *((_QWORD *)v95 + 1);
  v97 = *((_QWORD *)v94 + 1);
  *((_QWORD *)v94 + 1) = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  v98 = v88[7];
  v99 = &v86[v98];
  v100 = &v87[v98];
  *(_QWORD *)v99 = *(_QWORD *)v100;
  v101 = *((_QWORD *)v100 + 1);
  v102 = *((_QWORD *)v99 + 1);
  *((_QWORD *)v99 + 1) = v101;
  swift_bridgeObjectRetain(v101);
  swift_bridgeObjectRelease(v102);
  v86[v88[8]] = v87[v88[8]];
  v86[v88[9]] = v87[v88[9]];
  v86[v88[10]] = v87[v88[10]];
  v103 = v79[9];
  v104 = &v75[v103];
  v105 = &v76[v103];
  v106 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 24))(v104, v105, v106);
  *(_QWORD *)&v75[v79[10]] = *(_QWORD *)&v76[v79[10]];
  v107 = v79[11];
  v108 = &v75[v107];
  v109 = &v76[v107];
  *(_QWORD *)v108 = *(_QWORD *)v109;
  v110 = *((_QWORD *)v109 + 1);
  v111 = *((_QWORD *)v108 + 1);
  *((_QWORD *)v108 + 1) = v110;
  swift_bridgeObjectRetain(v110);
  swift_bridgeObjectRelease(v111);
  v112 = v79[12];
  v113 = &v75[v112];
  v114 = &v76[v112];
  *(_QWORD *)v113 = *(_QWORD *)v114;
  v115 = *((_QWORD *)v114 + 1);
  v116 = *((_QWORD *)v113 + 1);
  *((_QWORD *)v113 + 1) = v115;
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRelease(v116);
  v117 = v79[13];
  v118 = &v75[v117];
  v119 = &v76[v117];
  *(_QWORD *)v118 = *(_QWORD *)v119;
  v120 = *((_QWORD *)v119 + 1);
  v121 = *((_QWORD *)v118 + 1);
  *((_QWORD *)v118 + 1) = v120;
  swift_bridgeObjectRetain(v120);
  swift_bridgeObjectRelease(v121);
  v122 = v79[14];
  v123 = &v75[v122];
  v124 = &v76[v122];
  *(_QWORD *)v123 = *(_QWORD *)v124;
  v125 = *((_QWORD *)v124 + 1);
  v126 = *((_QWORD *)v123 + 1);
  *((_QWORD *)v123 + 1) = v125;
  swift_bridgeObjectRetain(v125);
  swift_bridgeObjectRelease(v126);
  v127 = v79[15];
  v128 = &v75[v127];
  v129 = &v76[v127];
  v130 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v130 - 8) + 24))(v128, v129, v130);
  v131 = v79[16];
  v132 = &v75[v131];
  v133 = &v76[v131];
  v134 = type metadata accessor for SunEvents(0);
  LODWORD(v128) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v132, 1, v134);
  v135 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v133, 1, v134);
  if ((_DWORD)v128)
  {
    if (!v135)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(v132, v133, v134);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v132, 0, 1, v134);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  v136 = *(_QWORD *)(v134 - 8);
  if (v135)
  {
    (*(void (**)(char *, uint64_t))(v136 + 8))(v132, v134);
LABEL_31:
    v137 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v136 + 24))(v132, v133, v134);
LABEL_32:
  v138 = v79[17];
  v139 = &v75[v138];
  v140 = &v76[v138];
  v141 = type metadata accessor for MoonEvents(0);
  v142 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v139, 1, v141);
  v143 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v140, 1, v141);
  if (!v142)
  {
    v144 = *(_QWORD *)(v141 - 8);
    if (!v143)
    {
      (*(void (**)(char *, char *, uint64_t))(v144 + 24))(v139, v140, v141);
      goto LABEL_38;
    }
    (*(void (**)(char *, uint64_t))(v144 + 8))(v139, v141);
    goto LABEL_37;
  }
  if (v143)
  {
LABEL_37:
    v145 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 16))(v139, v140, v141);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v139, 0, 1, v141);
LABEL_38:
  v146 = v79[18];
  v147 = &v75[v146];
  v148 = &v76[v146];
  v149 = type metadata accessor for UVIndex(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 24))(v147, v148, v149);
  *(_QWORD *)&v75[v79[19]] = *(_QWORD *)&v76[v79[19]];
  *(uint64_t *)((char *)a1 + v160[11]) = *(uint64_t *)((char *)a2 + v160[11]);
  *(uint64_t *)((char *)a1 + v160[12]) = *(uint64_t *)((char *)a2 + v160[12]);
  *(uint64_t *)((char *)a1 + v160[13]) = *(uint64_t *)((char *)a2 + v160[13]);
  v150 = v160[14];
  v151 = (char *)a1 + v150;
  v152 = (uint64_t *)((char *)a2 + v150);
  v153 = *(uint64_t *)((char *)a1 + v150);
  v154 = *v152;
  *(uint64_t *)((char *)a1 + v150) = *v152;
  swift_retain(v154);
  swift_release(v153);
  v155 = v152[1];
  v156 = *((_QWORD *)v151 + 1);
  *((_QWORD *)v151 + 1) = v155;
  swift_retain(v155);
  swift_release(v156);
  v157 = v152[2];
  v158 = *((_QWORD *)v151 + 2);
  *((_QWORD *)v151 + 2) = v157;
  swift_bridgeObjectRetain(v157);
  swift_bridgeObjectRelease(v158);
  return a1;
}

char *sub_10001AC44(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  int *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int *v85;

  v6 = sub_100005D40(&qword_1001BF488);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  v14 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = sub_100005D40(&qword_1001BF3C0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = sub_100005D40(&qword_1001BF498);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  v25 = a3[9];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  v29 = (int *)type metadata accessor for DailyViewAttributes(0);
  *(_QWORD *)&v26[v29[5]] = *(_QWORD *)&v27[v29[5]];
  *(_WORD *)&v26[v29[6]] = *(_WORD *)&v27[v29[6]];
  *(_QWORD *)&v26[v29[7]] = *(_QWORD *)&v27[v29[7]];
  v26[v29[8]] = v27[v29[8]];
  v26[v29[9]] = v27[v29[9]];
  v26[v29[10]] = v27[v29[10]];
  *(_QWORD *)&v26[v29[11]] = *(_QWORD *)&v27[v29[11]];
  v26[v29[12]] = v27[v29[12]];
  v26[v29[13]] = v27[v29[13]];
  v26[v29[14]] = v27[v29[14]];
  v26[v29[15]] = v27[v29[15]];
  *(_QWORD *)&v26[v29[16]] = *(_QWORD *)&v27[v29[16]];
  *(_QWORD *)&v26[v29[17]] = *(_QWORD *)&v27[v29[17]];
  *(_QWORD *)&v26[v29[18]] = *(_QWORD *)&v27[v29[18]];
  *(_QWORD *)&v26[v29[19]] = *(_QWORD *)&v27[v29[19]];
  *(_QWORD *)&v26[v29[20]] = *(_QWORD *)&v27[v29[20]];
  *(_QWORD *)&v26[v29[21]] = *(_QWORD *)&v27[v29[21]];
  v30 = v29[22];
  v31 = &v26[v30];
  v32 = &v27[v30];
  v33 = sub_100005D40(&qword_1001BF090);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v33))
  {
    v34 = sub_100005D40(&qword_1001BF098);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v33);
  }
  v35 = v29[23];
  v36 = &v26[v35];
  v37 = &v27[v35];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v37, 1, v33))
  {
    v38 = sub_100005D40(&qword_1001BF098);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v36, v37, v33);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v36, 0, 1, v33);
  }
  v85 = a3;
  v39 = a3[10];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = type metadata accessor for UUID(0);
  v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32);
  v43(v40, v41, v42);
  v44 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v45 = v44[5];
  v46 = &v40[v45];
  v47 = &v41[v45];
  v48 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v46, v47, v48);
  v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
  v49(&v40[v44[6]], &v41[v44[6]], v33);
  v49(&v40[v44[7]], &v41[v44[7]], v33);
  v50 = v44[8];
  v51 = &v40[v50];
  v52 = &v41[v50];
  v43(&v40[v50], &v41[v50], v42);
  v53 = (int *)type metadata accessor for ConditionViewModel(0);
  v54 = v53[5];
  v55 = &v51[v54];
  v56 = &v52[v54];
  v57 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
  *(_OWORD *)&v51[v53[6]] = *(_OWORD *)&v52[v53[6]];
  *(_OWORD *)&v51[v53[7]] = *(_OWORD *)&v52[v53[7]];
  v51[v53[8]] = v52[v53[8]];
  v51[v53[9]] = v52[v53[9]];
  v51[v53[10]] = v52[v53[10]];
  v58 = v44[9];
  v59 = &v40[v58];
  v60 = &v41[v58];
  v61 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
  *(_QWORD *)&v40[v44[10]] = *(_QWORD *)&v41[v44[10]];
  *(_OWORD *)&v40[v44[11]] = *(_OWORD *)&v41[v44[11]];
  *(_OWORD *)&v40[v44[12]] = *(_OWORD *)&v41[v44[12]];
  *(_OWORD *)&v40[v44[13]] = *(_OWORD *)&v41[v44[13]];
  *(_OWORD *)&v40[v44[14]] = *(_OWORD *)&v41[v44[14]];
  v62 = v44[15];
  v63 = &v40[v62];
  v64 = &v41[v62];
  v65 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v63, v64, v65);
  v66 = v44[16];
  v67 = &v40[v66];
  v68 = &v41[v66];
  v69 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v68, 1, v69))
  {
    v70 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v69);
  }
  v71 = v44[17];
  v72 = &v40[v71];
  v73 = &v41[v71];
  v74 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v73, 1, v74))
  {
    v75 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v72, 0, 1, v74);
  }
  v76 = v44[18];
  v77 = &v40[v76];
  v78 = &v41[v76];
  v79 = type metadata accessor for UVIndex(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
  *(_QWORD *)&v40[v44[19]] = *(_QWORD *)&v41[v44[19]];
  v80 = v85[12];
  *(_QWORD *)&a1[v85[11]] = *(_QWORD *)&a2[v85[11]];
  *(_QWORD *)&a1[v80] = *(_QWORD *)&a2[v80];
  v81 = v85[14];
  *(_QWORD *)&a1[v85[13]] = *(_QWORD *)&a2[v85[13]];
  v82 = &a1[v81];
  v83 = &a2[v81];
  *((_QWORD *)v82 + 2) = *((_QWORD *)v83 + 2);
  *(_OWORD *)v82 = *(_OWORD *)v83;
  return a1;
}

char *sub_10001B358(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  int *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  char *v68;
  char *v69;
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int *v146;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BF488);
    v6 = sub_100005D40(&qword_1001BF488);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_100019A78(v12, v13);
  if (a1 != a2)
  {
    v14 = a3[6];
    v15 = &a1[v14];
    v16 = &a2[v14];
    sub_100016904((uint64_t)&a1[v14], &qword_1001BF490);
    v17 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    v19 = a3[7];
    v20 = &a1[v19];
    v21 = &a2[v19];
    sub_100016904((uint64_t)&a1[v19], &qword_1001BF3C0);
    v22 = sub_100005D40(&qword_1001BF3C0);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
  }
  v24 = a3[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = sub_100005D40(&qword_1001BF498);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
  v32 = (int *)type metadata accessor for DailyViewAttributes(0);
  v33 = v32[5];
  v34 = *(_QWORD *)&v29[v33];
  *(_QWORD *)&v29[v33] = *(_QWORD *)&v30[v33];
  swift_bridgeObjectRelease(v34);
  *(_WORD *)&v29[v32[6]] = *(_WORD *)&v30[v32[6]];
  *(_QWORD *)&v29[v32[7]] = *(_QWORD *)&v30[v32[7]];
  v29[v32[8]] = v30[v32[8]];
  v29[v32[9]] = v30[v32[9]];
  v29[v32[10]] = v30[v32[10]];
  *(_QWORD *)&v29[v32[11]] = *(_QWORD *)&v30[v32[11]];
  v29[v32[12]] = v30[v32[12]];
  v29[v32[13]] = v30[v32[13]];
  v29[v32[14]] = v30[v32[14]];
  v29[v32[15]] = v30[v32[15]];
  *(_QWORD *)&v29[v32[16]] = *(_QWORD *)&v30[v32[16]];
  v35 = v32[17];
  v36 = *(_QWORD *)&v29[v35];
  *(_QWORD *)&v29[v35] = *(_QWORD *)&v30[v35];
  swift_release(v36);
  v37 = v32[18];
  v38 = *(_QWORD *)&v29[v37];
  *(_QWORD *)&v29[v37] = *(_QWORD *)&v30[v37];
  swift_release(v38);
  v39 = v32[19];
  v40 = *(_QWORD *)&v29[v39];
  *(_QWORD *)&v29[v39] = *(_QWORD *)&v30[v39];
  swift_release(v40);
  *(_QWORD *)&v29[v32[20]] = *(_QWORD *)&v30[v32[20]];
  *(_QWORD *)&v29[v32[21]] = *(_QWORD *)&v30[v32[21]];
  v41 = v32[22];
  v42 = &v29[v41];
  v43 = &v30[v41];
  v44 = sub_100005D40(&qword_1001BF090);
  v45 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v42, 1, v44);
  v46 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v43, 1, v44);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v42, 0, 1, v44);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v47 = *(_QWORD *)(v44 - 8);
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v42, v44);
LABEL_17:
    v48 = sub_100005D40(&qword_1001BF098);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v47 + 40))(v42, v43, v44);
LABEL_18:
  v49 = v32[23];
  v50 = &v29[v49];
  v51 = &v30[v49];
  v52 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v50, 1, v44);
  v53 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v51, 1, v44);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v50, v51, v44);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v50, 0, 1, v44);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  v54 = *(_QWORD *)(v44 - 8);
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v50, v44);
LABEL_23:
    v55 = sub_100005D40(&qword_1001BF098);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 40))(v50, v51, v44);
LABEL_24:
  v146 = a3;
  v56 = a3[10];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v59 = type metadata accessor for UUID(0);
  v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 40);
  v60(v57, v58, v59);
  v61 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v62 = v61[5];
  v63 = &v57[v62];
  v64 = &v58[v62];
  v65 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 40))(v63, v64, v65);
  v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 40);
  v66(&v57[v61[6]], &v58[v61[6]], v44);
  v66(&v57[v61[7]], &v58[v61[7]], v44);
  v67 = v61[8];
  v68 = &v57[v67];
  v69 = &v58[v67];
  v60(&v57[v67], &v58[v67], v59);
  v70 = (int *)type metadata accessor for ConditionViewModel(0);
  v71 = v70[5];
  v72 = &v68[v71];
  v73 = &v69[v71];
  v74 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 40))(v72, v73, v74);
  v75 = v70[6];
  v76 = &v68[v75];
  v77 = &v69[v75];
  v79 = *(_QWORD *)v77;
  v78 = *((_QWORD *)v77 + 1);
  v80 = *((_QWORD *)v76 + 1);
  *(_QWORD *)v76 = v79;
  *((_QWORD *)v76 + 1) = v78;
  swift_bridgeObjectRelease(v80);
  v81 = v70[7];
  v82 = &v68[v81];
  v83 = &v69[v81];
  v85 = *(_QWORD *)v83;
  v84 = *((_QWORD *)v83 + 1);
  v86 = *((_QWORD *)v82 + 1);
  *(_QWORD *)v82 = v85;
  *((_QWORD *)v82 + 1) = v84;
  swift_bridgeObjectRelease(v86);
  v68[v70[8]] = v69[v70[8]];
  v68[v70[9]] = v69[v70[9]];
  v68[v70[10]] = v69[v70[10]];
  v87 = v61[9];
  v88 = &v57[v87];
  v89 = &v58[v87];
  v90 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 40))(v88, v89, v90);
  *(_QWORD *)&v57[v61[10]] = *(_QWORD *)&v58[v61[10]];
  v91 = v61[11];
  v92 = &v57[v91];
  v93 = &v58[v91];
  v95 = *(_QWORD *)v93;
  v94 = *((_QWORD *)v93 + 1);
  v96 = *((_QWORD *)v92 + 1);
  *(_QWORD *)v92 = v95;
  *((_QWORD *)v92 + 1) = v94;
  swift_bridgeObjectRelease(v96);
  v97 = v61[12];
  v98 = &v57[v97];
  v99 = &v58[v97];
  v101 = *(_QWORD *)v99;
  v100 = *((_QWORD *)v99 + 1);
  v102 = *((_QWORD *)v98 + 1);
  *(_QWORD *)v98 = v101;
  *((_QWORD *)v98 + 1) = v100;
  swift_bridgeObjectRelease(v102);
  v103 = v61[13];
  v104 = &v57[v103];
  v105 = &v58[v103];
  v107 = *(_QWORD *)v105;
  v106 = *((_QWORD *)v105 + 1);
  v108 = *((_QWORD *)v104 + 1);
  *(_QWORD *)v104 = v107;
  *((_QWORD *)v104 + 1) = v106;
  swift_bridgeObjectRelease(v108);
  v109 = v61[14];
  v110 = &v57[v109];
  v111 = &v58[v109];
  v113 = *(_QWORD *)v111;
  v112 = *((_QWORD *)v111 + 1);
  v114 = *((_QWORD *)v110 + 1);
  *(_QWORD *)v110 = v113;
  *((_QWORD *)v110 + 1) = v112;
  swift_bridgeObjectRelease(v114);
  v115 = v61[15];
  v116 = &v57[v115];
  v117 = &v58[v115];
  v118 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v118 - 8) + 40))(v116, v117, v118);
  v119 = v61[16];
  v120 = &v57[v119];
  v121 = &v58[v119];
  v122 = type metadata accessor for SunEvents(0);
  LODWORD(v116) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v120, 1, v122);
  v123 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v121, 1, v122);
  if ((_DWORD)v116)
  {
    if (!v123)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 32))(v120, v121, v122);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v120, 0, 1, v122);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  v124 = *(_QWORD *)(v122 - 8);
  if (v123)
  {
    (*(void (**)(char *, uint64_t))(v124 + 8))(v120, v122);
LABEL_29:
    v125 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v124 + 40))(v120, v121, v122);
LABEL_30:
  v126 = v61[17];
  v127 = &v57[v126];
  v128 = &v58[v126];
  v129 = type metadata accessor for MoonEvents(0);
  v130 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v127, 1, v129);
  v131 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128, 1, v129);
  if (!v130)
  {
    v132 = *(_QWORD *)(v129 - 8);
    if (!v131)
    {
      (*(void (**)(char *, char *, uint64_t))(v132 + 40))(v127, v128, v129);
      goto LABEL_36;
    }
    (*(void (**)(char *, uint64_t))(v132 + 8))(v127, v129);
    goto LABEL_35;
  }
  if (v131)
  {
LABEL_35:
    v133 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 32))(v127, v128, v129);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v127, 0, 1, v129);
LABEL_36:
  v134 = v61[18];
  v135 = &v57[v134];
  v136 = &v58[v134];
  v137 = type metadata accessor for UVIndex(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 40))(v135, v136, v137);
  *(_QWORD *)&v57[v61[19]] = *(_QWORD *)&v58[v61[19]];
  v138 = v146[12];
  *(_QWORD *)&a1[v146[11]] = *(_QWORD *)&a2[v146[11]];
  *(_QWORD *)&a1[v138] = *(_QWORD *)&a2[v138];
  v139 = v146[14];
  *(_QWORD *)&a1[v146[13]] = *(_QWORD *)&a2[v146[13]];
  v140 = &a1[v139];
  v141 = &a2[v139];
  v142 = *(_QWORD *)&a1[v139];
  *(_QWORD *)&a1[v139] = *(_QWORD *)v141;
  swift_release(v142);
  v143 = *((_QWORD *)v140 + 1);
  *((_QWORD *)v140 + 1) = *((_QWORD *)v141 + 1);
  swift_release(v143);
  v144 = *((_QWORD *)v140 + 2);
  *((_QWORD *)v140 + 2) = *((_QWORD *)v141 + 2);
  swift_bridgeObjectRelease(v144);
  return a1;
}

uint64_t sub_10001BC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001BC88);
}

uint64_t sub_10001BC88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v21;

  sub_100005D40(&qword_1001BF4A0);
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
  }
  sub_100005D40(&qword_1001BF4A8);
  sub_10001C6C0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[6];
LABEL_19:
    v8 = a1 + v11;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
  }
  sub_100005D40(&qword_1001BF4B0);
  sub_10001C6C0();
  if (v12)
  {
    v7 = v13;
    v11 = a3[7];
    goto LABEL_19;
  }
  sub_100005D40(&qword_1001BF498);
  sub_10001C6C0();
  if (v14)
  {
    v7 = v15;
    v11 = a3[8];
    goto LABEL_19;
  }
  sub_10001C7FC();
  sub_10001C6C0();
  if (v16)
  {
    v7 = v17;
    v11 = a3[9];
    goto LABEL_19;
  }
  sub_10001C804();
  sub_10001C6C0();
  if (v18)
  {
    v7 = v19;
    v11 = a3[10];
    goto LABEL_19;
  }
  v21 = *(_QWORD *)(a1 + a3[14] + 8);
  if (v21 >= 0xFFFFFFFF)
    LODWORD(v21) = -1;
  return (v21 + 1);
}

uint64_t sub_10001BD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001BDA0);
}

void sub_10001BDA0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  sub_100005D40(&qword_1001BF4A0);
  sub_10001C6D0();
  if (v10)
  {
    v8 = v7;
    v9 = a1;
  }
  else
  {
    sub_100005D40(&qword_1001BF4A8);
    sub_10001C6D0();
    if (v10)
    {
      v8 = v11;
      v12 = a4[6];
    }
    else
    {
      sub_100005D40(&qword_1001BF4B0);
      sub_10001C6D0();
      if (v13)
      {
        v8 = v14;
        v12 = a4[7];
      }
      else
      {
        sub_100005D40(&qword_1001BF498);
        sub_10001C6D0();
        if (v15)
        {
          v8 = v16;
          v12 = a4[8];
        }
        else
        {
          sub_10001C7FC();
          sub_10001C6D0();
          if (v17)
          {
            v8 = v18;
            v12 = a4[9];
          }
          else
          {
            sub_10001C804();
            sub_10001C6D0();
            if (!v19)
            {
              *(_QWORD *)(a1 + a4[14] + 8) = (a2 - 1);
              return;
            }
            v8 = v20;
            v12 = a4[10];
          }
        }
      }
    }
    v9 = a1 + v12;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v9, a2, a2, v8);
}

uint64_t type metadata accessor for ModernDailyForecastRowView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001BF510;
  if (!qword_1001BF510)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ModernDailyForecastRowView);
  return result;
}

void sub_10001BEE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[11];

  sub_10001C028(319, &qword_1001BF520, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    v14[1] = "\t";
    sub_10001C028(319, (unint64_t *)&qword_1001BF528, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
    if (v5 <= 0x3F)
    {
      v14[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001C028(319, &qword_1001BF530, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
      if (v7 <= 0x3F)
      {
        v14[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001C074(319);
        if (v9 <= 0x3F)
        {
          v14[4] = *(_QWORD *)(v8 - 8) + 64;
          v10 = type metadata accessor for DailyViewAttributes(319);
          if (v11 <= 0x3F)
          {
            v14[5] = *(_QWORD *)(v10 - 8) + 64;
            v12 = type metadata accessor for DailyForecastViewModel(319);
            if (v13 <= 0x3F)
            {
              v14[6] = *(_QWORD *)(v12 - 8) + 64;
              v14[7] = (char *)&value witness table for Builtin.Int64 + 64;
              v14[8] = (char *)&value witness table for Builtin.Int64 + 64;
              v14[9] = (char *)&value witness table for Builtin.Int64 + 64;
              v14[10] = &unk_10017A948;
              swift_initStructMetadata(a1, 256, 11, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

void sub_10001C028(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_10001C074(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001BF538)
  {
    v2 = sub_10001C0CC();
    v3 = type metadata accessor for ScaledValue(a1, &type metadata for Double, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001BF538);
  }
}

unint64_t sub_10001C0CC()
{
  unint64_t result;

  result = qword_1001BF540;
  if (!qword_1001BF540)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_1001BF540);
  }
  return result;
}

uint64_t sub_10001C108(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019E74C, 1);
}

uint64_t sub_10001C11C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  int *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  uint64_t v42;

  v1 = (int *)sub_10001C948();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100005D40(&qword_1001BF488);
  v41 = v5;
  v42 = v0;
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_100019A78(*(_QWORD *)((char *)v6 + v1[5]), *((_BYTE *)v6 + v1[5] + 8));
  v9 = (_QWORD *)((char *)v6 + v1[6]);
  v10 = sub_100005D40(&qword_1001BF490);
  if (sub_10001C950(v10) == 1)
  {
    v11 = type metadata accessor for ColorSchemeContrast(0);
    sub_100016C04(v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)((char *)v6 + v1[7]);
  v13 = sub_100005D40(&qword_1001BF3C0);
  if (sub_10001C950(v13) == 1)
  {
    v14 = type metadata accessor for WidgetRenderingMode(0);
    sub_100016C04(v14);
  }
  else
  {
    swift_release(*v12);
  }
  v15 = sub_100005D40(&qword_1001BF498);
  sub_100016C04(v15);
  v16 = (char *)v6 + v1[9];
  v17 = type metadata accessor for WidgetFamily(0);
  sub_100016C04(v17);
  v18 = (int *)sub_10001C7FC();
  swift_bridgeObjectRelease(*(_QWORD *)&v16[v18[5]]);
  sub_10001C934(v18[17]);
  sub_10001C934(v18[18]);
  sub_10001C934(v18[19]);
  v19 = (uint64_t)&v16[v18[22]];
  v20 = sub_100005D40(&qword_1001BF090);
  if (!sub_100016AC4(v19))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = (uint64_t)&v16[v18[23]];
  if (!sub_100016AC4(v21))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v21, v20);
  v22 = (char *)v6 + v1[10];
  v23 = type metadata accessor for UUID(0);
  v24 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8);
  v24(v22, v23);
  v25 = (int *)sub_10001C804();
  v26 = type metadata accessor for Date(0);
  sub_10001C80C(v26);
  v27 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v27(&v22[v25[6]], v20);
  v27(&v22[v25[7]], v20);
  v24(&v22[v25[8]], v23);
  v28 = type metadata accessor for ConditionViewModel(0);
  v29 = type metadata accessor for WeatherCondition(0);
  sub_10001C80C(v29);
  sub_10001C928(*(int *)(v28 + 24));
  sub_10001C928(*(int *)(v28 + 28));
  v30 = sub_10001C93C();
  v31 = type metadata accessor for Precipitation(v30);
  sub_10001C820(v31);
  sub_10001C734(v25[11]);
  sub_10001C734(v25[12]);
  sub_10001C734(v25[13]);
  sub_10001C734(v25[14]);
  v32 = sub_10001C93C();
  v33 = type metadata accessor for TemperatureScaleConfiguration(v32);
  sub_10001C820(v33);
  v34 = sub_10001C93C();
  v35 = type metadata accessor for SunEvents(v34);
  if (!sub_10001C7D4(v35))
    sub_10001C848();
  v36 = sub_10001C93C();
  v37 = type metadata accessor for MoonEvents(v36);
  if (!sub_10001C7D4(v37))
    sub_10001C848();
  v38 = type metadata accessor for UVIndex(0);
  sub_100016C04(v38);
  v39 = (_QWORD *)((char *)v6 + v1[14]);
  swift_release(*v39);
  swift_release(v39[1]);
  swift_bridgeObjectRelease(v39[2]);
  return swift_deallocObject(v42, v4 + v41, v3 | 7);
}

uint64_t sub_10001C470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModernDailyForecastRowView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10001C4B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001C948() - 8) + 80);
  sub_100017014(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_10001C4FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BF5C0;
  if (!qword_1001BF5C0)
  {
    v1 = sub_100005DC4(&qword_1001BF5A0);
    sub_100016A54(&qword_1001BF5C8, &qword_1001BF598);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BF5C0);
  }
  return result;
}

void sub_10001C590(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  sub_10001C788(v3);
  sub_100006338();
}

void sub_10001C5BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100016C78(a1, a2, a3);
  sub_10001C788(v3);
  sub_100006338();
}

unint64_t sub_10001C5DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BF650;
  if (!qword_1001BF650)
  {
    v1 = sub_100005DC4(&qword_1001BF618);
    sub_100016878(&qword_1001BF658, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherDayVarianceView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BF650);
  }
  return result;
}

void sub_10001C660(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100016C78(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  sub_100006338();
}

void sub_10001C694()
{
  sub_100016A54(&qword_1001BF660, &qword_1001BF668);
}

uint64_t sub_10001C6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return Measurement.formatted<A>(_:placeholder:unitManager:)(v6, v4, v8, a4, v7, v5);
}

uint64_t sub_10001C6FC()
{
  return type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
}

uint64_t sub_10001C718()
{
  return type metadata accessor for DailyForecastViewModel(0);
}

uint64_t sub_10001C734@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_10001C740()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001C758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return Text.font(_:)(v4, v0, v1, v3, v2);
}

uint64_t sub_10001C788(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_10001C7A0()
{
  return type metadata accessor for DailyViewAttributes(0);
}

uint64_t sub_10001C7B8(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = *(_QWORD *)(result - 8);
  return result;
}

uint64_t sub_10001C7D4(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
}

uint64_t sub_10001C7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 128) + 104))(v2, a2, v3);
}

uint64_t sub_10001C7FC()
{
  return type metadata accessor for DailyViewAttributes(0);
}

uint64_t sub_10001C804()
{
  return type metadata accessor for DailyForecastViewModel(0);
}

uint64_t sub_10001C80C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_10001C820(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_10001C834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 136) + 8))(v1, v0);
}

uint64_t sub_10001C848()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_10001C878@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1 + a1, v3);
}

uint64_t sub_10001C88C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = *(_QWORD *)(result - 8);
  *(_QWORD *)(v1 - 144) = result;
  return result;
}

uint64_t sub_10001C8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = a2;
  return type metadata accessor for WeatherFormatPlaceholder(0);
}

uint64_t sub_10001C8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  sub_100016868(v0, v1, v3);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10001C8D8()
{
  return static Font.Weight.semibold.getter();
}

uint64_t sub_10001C8E8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10001C8F0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001C908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 144));
}

uint64_t sub_10001C918()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001C928@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_10001C934@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

uint64_t sub_10001C93C()
{
  return 0;
}

uint64_t sub_10001C948()
{
  return type metadata accessor for ModernDailyForecastRowView(0);
}

uint64_t sub_10001C950(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

uint64_t sub_10001C970()
{
  return NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter();
}

uint64_t sub_10001C97C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t destroy for CurrentObservationViewModel.AirQuality(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return sub_100007458(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for CurrentObservationViewModel.AirQuality(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  sub_100006E58(v4, v5, v6);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithCopy for CurrentObservationViewModel.AirQuality(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = v2[2];
  v7 = v2[3];
  LOBYTE(v2) = *((_BYTE *)v2 + 32);
  sub_100006E58(v6, v7, (char)v2);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = (_BYTE)v2;
  sub_100007458(v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for CurrentObservationViewModel.AirQuality(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CurrentObservationViewModel.AirQuality(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v6;
  sub_100007458(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CurrentObservationViewModel.AirQuality(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CurrentObservationViewModel.AirQuality(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CurrentObservationViewModel.AirQuality()
{
  return &type metadata for CurrentObservationViewModel.AirQuality;
}

char *sub_10001CB78(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  void (*v78)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v27);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v78 = v13;
    v13(&a1[a3[6]], (char *)a2 + a3[6], v12);
    v14 = a3[7];
    v15 = &a1[v14];
    v16 = (char *)a2 + v14;
    v17 = sub_100005D40(&qword_1001BF090);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v18(&a1[a3[8]], (char *)a2 + a3[8], v17);
    v19 = a3[9];
    v20 = a3[10];
    v21 = &a1[v19];
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *(_QWORD *)v21 = *v22;
    *((_QWORD *)v21 + 1) = v23;
    v24 = &a1[v20];
    v25 = (char *)a2 + v20;
    swift_bridgeObjectRetain(v23);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v17))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v18(v24, v25, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v17);
    }
    v28 = a3[11];
    v29 = &a1[v28];
    v30 = (char *)a2 + v28;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v28, 1, v17))
    {
      v31 = sub_100005D40(&qword_1001BF098);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v18(v29, v30, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v17);
    }
    v32 = a3[12];
    v33 = &a1[v32];
    v34 = (char *)a2 + v32;
    v8(&a1[v32], (uint64_t *)((char *)a2 + v32), v7);
    v35 = (int *)type metadata accessor for ConditionViewModel(0);
    v36 = v35[5];
    v37 = &v33[v36];
    v38 = &v34[v36];
    v39 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = v35[6];
    v41 = &v33[v40];
    v42 = &v34[v40];
    v43 = *((_QWORD *)v42 + 1);
    *(_QWORD *)v41 = *(_QWORD *)v42;
    *((_QWORD *)v41 + 1) = v43;
    v44 = v35[7];
    v45 = &v33[v44];
    v46 = &v34[v44];
    v47 = *((_QWORD *)v46 + 1);
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *((_QWORD *)v45 + 1) = v47;
    v33[v35[8]] = v34[v35[8]];
    v33[v35[9]] = v34[v35[9]];
    v33[v35[10]] = v34[v35[10]];
    v48 = a3[14];
    *(_QWORD *)&a1[a3[13]] = *(uint64_t *)((char *)a2 + a3[13]);
    v49 = &a1[v48];
    v50 = (char *)a2 + v48;
    v51 = type metadata accessor for CloudAltitudeKind(0);
    v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v47);
    v52(v49, v50, v51);
    v53 = a3[15];
    v54 = &a1[v53];
    v55 = (char *)a2 + v53;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v53, 1, v12))
    {
      v56 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      v78(v54, v55, v12);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v54, 0, 1, v12);
    }
    v57 = a3[16];
    v58 = &a1[v57];
    v59 = (char *)a2 + v57;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v57, 1, v12))
    {
      v60 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v78(v58, v59, v12);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v12);
    }
    v61 = a3[17];
    v62 = &a1[v61];
    v63 = (char *)a2 + v61;
    v64 = type metadata accessor for UVIndex(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v62, v63, v64);
    v65 = a3[18];
    v66 = &a1[v65];
    v67 = (char *)a2 + v65;
    v68 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
    v69 = a3[20];
    *(_QWORD *)&a1[a3[19]] = *(uint64_t *)((char *)a2 + a3[19]);
    v70 = &a1[v69];
    v71 = (char *)a2 + v69;
    v72 = *(uint64_t *)((char *)a2 + v69 + 8);
    if (v72)
    {
      *(_QWORD *)v70 = *(_QWORD *)v71;
      *((_QWORD *)v70 + 1) = v72;
      v73 = *((_QWORD *)v71 + 2);
      v74 = *((_QWORD *)v71 + 3);
      v75 = v71[32];
      swift_bridgeObjectRetain(v72);
      sub_100006E58(v73, v74, v75);
      *((_QWORD *)v70 + 2) = v73;
      *((_QWORD *)v70 + 3) = v74;
      v70[32] = v75;
    }
    else
    {
      v76 = *((_OWORD *)v71 + 1);
      *(_OWORD *)v70 = *(_OWORD *)v71;
      *((_OWORD *)v70 + 1) = v76;
      v70[32] = v71[32];
    }
  }
  return a1;
}

uint64_t sub_10001D000(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + a2[6], v7);
  v9 = a1 + a2[7];
  v10 = sub_100005D40(&qword_1001BF090);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(a1 + a2[8], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  v12 = a1 + a2[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v12, 1, v10))
    v11(v12, v10);
  v13 = a1 + a2[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v13, 1, v10))
    v11(v13, v10);
  v14 = a1 + a2[12];
  v5(v14, v4);
  v15 = (int *)type metadata accessor for ConditionViewModel(0);
  v16 = v14 + v15[5];
  v17 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[7] + 8));
  v18 = a1 + a2[14];
  v19 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = a1 + a2[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v20, 1, v7))
    v8(v20, v7);
  v21 = a1 + a2[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v21, 1, v7))
    v8(v21, v7);
  v22 = a1 + a2[17];
  v23 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  v24 = a1 + a2[18];
  v25 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = a1 + a2[20];
  result = *(_QWORD *)(v26 + 8);
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return sub_100007458(*(_QWORD *)(v26 + 16), *(_QWORD *)(v26 + 24), *(_BYTE *)(v26 + 32));
  }
  return result;
}

uint64_t sub_10001D28C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  void (*v76)(void *, const void *, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v76 = v12;
  v12((void *)(a1 + a3[6]), (const void *)(a2 + a3[6]), v11);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v17(a1 + a3[8], a2 + a3[8], v16);
  v18 = a3[9];
  v19 = a3[10];
  v20 = (_QWORD *)(a1 + v18);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = (void *)(a1 + v19);
  v24 = (const void *)(a2 + v19);
  swift_bridgeObjectRetain(v22);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = a3[11];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v26, 1, v16))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v27, (uint64_t)v28, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v16);
  }
  v30 = a3[12];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v7(a1 + v30, a2 + v30, v6);
  v33 = (int *)type metadata accessor for ConditionViewModel(0);
  v34 = v33[5];
  v35 = v31 + v34;
  v36 = v32 + v34;
  v37 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
  v38 = v33[6];
  v39 = (_QWORD *)(v31 + v38);
  v40 = (_QWORD *)(v32 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = v33[7];
  v43 = (_QWORD *)(v31 + v42);
  v44 = (_QWORD *)(v32 + v42);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  *(_BYTE *)(v31 + v33[8]) = *(_BYTE *)(v32 + v33[8]);
  *(_BYTE *)(v31 + v33[9]) = *(_BYTE *)(v32 + v33[9]);
  *(_BYTE *)(v31 + v33[10]) = *(_BYTE *)(v32 + v33[10]);
  v46 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for CloudAltitudeKind(0);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  v50(v47, v48, v49);
  v51 = a3[15];
  v52 = (void *)(a1 + v51);
  v53 = (const void *)(a2 + v51);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v51, 1, v11))
  {
    v54 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    v76(v52, v53, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v52, 0, 1, v11);
  }
  v55 = a3[16];
  v56 = (void *)(a1 + v55);
  v57 = (const void *)(a2 + v55);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v55, 1, v11))
  {
    v58 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v76(v56, v57, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v11);
  }
  v59 = a3[17];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
  v63 = a3[18];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
  v67 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  v68 = a1 + v67;
  v69 = a2 + v67;
  v70 = *(_QWORD *)(a2 + v67 + 8);
  if (v70)
  {
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *(_QWORD *)(v68 + 8) = v70;
    v71 = *(_QWORD *)(v69 + 16);
    v72 = *(_QWORD *)(v69 + 24);
    v73 = *(_BYTE *)(v69 + 32);
    swift_bridgeObjectRetain(v70);
    sub_100006E58(v71, v72, v73);
    *(_QWORD *)(v68 + 16) = v71;
    *(_QWORD *)(v68 + 24) = v72;
    *(_BYTE *)(v68 + 32) = v73;
  }
  else
  {
    v74 = *(_OWORD *)(v69 + 16);
    *(_OWORD *)v68 = *(_OWORD *)v69;
    *(_OWORD *)(v68 + 16) = v74;
    *(_BYTE *)(v68 + 32) = *(_BYTE *)(v69 + 32);
  }
  return a1;
}

uint64_t sub_10001D6E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void (*v97)(void *, const void *, uint64_t);
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;

  v6 = type metadata accessor for UUID(0);
  v99 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v100 = v6;
  v99(a1, a2);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v98 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v98 + 24);
  v11(v8, v9, v10);
  v97 = v11;
  v11((void *)(a1 + a3[6]), (const void *)(a2 + a3[6]), v10);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  v17(a1 + a3[8], a2 + a3[8], v15);
  v18 = a3[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = a3[10];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v23, 1, v15);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v15);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v24, v25, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v24, v15);
LABEL_6:
    v28 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  v17((uint64_t)v24, (uint64_t)v25, v15);
LABEL_7:
  v29 = a3[11];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v29, 1, v15);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v15);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v30, v31, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v30, v15);
LABEL_12:
    v34 = sub_100005D40(&qword_1001BF098);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  v17((uint64_t)v30, (uint64_t)v31, v15);
LABEL_13:
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  ((void (*)(uint64_t, uint64_t, uint64_t))v99)(a1 + v35, a2 + v35, v100);
  v38 = (int *)type metadata accessor for ConditionViewModel(0);
  v39 = v38[5];
  v40 = v36 + v39;
  v41 = v37 + v39;
  v42 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = v38[6];
  v44 = (_QWORD *)(v36 + v43);
  v45 = (_QWORD *)(v37 + v43);
  *v44 = *v45;
  v46 = v45[1];
  v47 = v44[1];
  v44[1] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = v38[7];
  v49 = (_QWORD *)(v36 + v48);
  v50 = (_QWORD *)(v37 + v48);
  *v49 = *v50;
  v51 = v50[1];
  v52 = v49[1];
  v49[1] = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  *(_BYTE *)(v36 + v38[8]) = *(_BYTE *)(v37 + v38[8]);
  *(_BYTE *)(v36 + v38[9]) = *(_BYTE *)(v37 + v38[9]);
  *(_BYTE *)(v36 + v38[10]) = *(_BYTE *)(v37 + v38[10]);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v53 = a3[14];
  v54 = a1 + v53;
  v55 = a2 + v53;
  v56 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 24))(v54, v55, v56);
  v57 = a3[15];
  v58 = (void *)(a1 + v57);
  v59 = (const void *)(a2 + v57);
  LODWORD(v37) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v57, 1, v10);
  v60 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v59, 1, v10);
  if ((_DWORD)v37)
  {
    if (!v60)
    {
      (*(void (**)(void *, const void *, uint64_t))(v98 + 16))(v58, v59, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v60)
  {
    (*(void (**)(void *, uint64_t))(v98 + 8))(v58, v10);
LABEL_18:
    v61 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_19;
  }
  v97(v58, v59, v10);
LABEL_19:
  v62 = a3[16];
  v63 = (void *)(a1 + v62);
  v64 = (const void *)(a2 + v62);
  v65 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v62, 1, v10);
  v66 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v64, 1, v10);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v98 + 16))(v63, v64, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v98 + 8))(v63, v10);
LABEL_24:
    v67 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_25;
  }
  v97(v63, v64, v10);
LABEL_25:
  v68 = a3[17];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 24))(v69, v70, v71);
  v72 = a3[18];
  v73 = a1 + v72;
  v74 = a2 + v72;
  v75 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 24))(v73, v74, v75);
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  v76 = a3[20];
  v77 = a1 + v76;
  v78 = (__int128 *)(a2 + v76);
  v79 = *(_QWORD *)(a1 + v76 + 8);
  v80 = *((_QWORD *)v78 + 1);
  if (v79)
  {
    if (v80)
    {
      *(_QWORD *)v77 = *(_QWORD *)v78;
      v81 = *((_QWORD *)v78 + 1);
      *(_QWORD *)(v77 + 8) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v79);
      v82 = *((_QWORD *)v78 + 2);
      v83 = *((_QWORD *)v78 + 3);
      v84 = *((_BYTE *)v78 + 32);
      sub_100006E58(v82, v83, v84);
      v85 = *(_QWORD *)(v77 + 16);
      v86 = *(_QWORD *)(v77 + 24);
      v87 = *(_BYTE *)(v77 + 32);
      *(_QWORD *)(v77 + 16) = v82;
      *(_QWORD *)(v77 + 24) = v83;
      *(_BYTE *)(v77 + 32) = v84;
      sub_100007458(v85, v86, v87);
    }
    else
    {
      sub_100008EC4(v77);
      v92 = *((_BYTE *)v78 + 32);
      v93 = v78[1];
      *(_OWORD *)v77 = *v78;
      *(_OWORD *)(v77 + 16) = v93;
      *(_BYTE *)(v77 + 32) = v92;
    }
  }
  else if (v80)
  {
    *(_QWORD *)v77 = *(_QWORD *)v78;
    v88 = *((_QWORD *)v78 + 1);
    *(_QWORD *)(v77 + 8) = v88;
    v89 = *((_QWORD *)v78 + 2);
    v90 = *((_QWORD *)v78 + 3);
    v91 = *((_BYTE *)v78 + 32);
    swift_bridgeObjectRetain(v88);
    sub_100006E58(v89, v90, v91);
    *(_QWORD *)(v77 + 16) = v89;
    *(_QWORD *)(v77 + 24) = v90;
    *(_BYTE *)(v77 + 32) = v91;
  }
  else
  {
    v94 = *v78;
    v95 = v78[1];
    *(_BYTE *)(v77 + 32) = *((_BYTE *)v78 + 32);
    *(_OWORD *)v77 = v94;
    *(_OWORD *)(v77 + 16) = v95;
  }
  return a1;
}

uint64_t sub_10001DD20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  void (*v59)(void *, const void *, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v59 = v12;
  v12((void *)(a1 + a3[6]), (const void *)(a2 + a3[6]), v11);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v14, v15, v16);
  v17(a1 + a3[8], a2 + a3[8], v16);
  v18 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v18, 1, v16))
  {
    v21 = sub_100005D40(&qword_1001BF098);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v19, (uint64_t)v20, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v19, 0, 1, v16);
  }
  v22 = a3[11];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v22, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = a3[12];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v7(a1 + v26, a2 + v26, v6);
  v29 = (int *)type metadata accessor for ConditionViewModel(0);
  v30 = v29[5];
  v31 = v27 + v30;
  v32 = v28 + v30;
  v33 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  *(_OWORD *)(v27 + v29[6]) = *(_OWORD *)(v28 + v29[6]);
  *(_OWORD *)(v27 + v29[7]) = *(_OWORD *)(v28 + v29[7]);
  *(_BYTE *)(v27 + v29[8]) = *(_BYTE *)(v28 + v29[8]);
  *(_BYTE *)(v27 + v29[9]) = *(_BYTE *)(v28 + v29[9]);
  *(_BYTE *)(v27 + v29[10]) = *(_BYTE *)(v28 + v29[10]);
  v34 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  v38 = a3[15];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v38, 1, v11))
  {
    v41 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v59(v39, v40, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v11);
  }
  v42 = a3[16];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v42, 1, v11))
  {
    v45 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v59(v43, v44, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v43, 0, 1, v11);
  }
  v46 = a3[17];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
  v50 = a3[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  v54 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  v55 = a1 + v54;
  v56 = a2 + v54;
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  *(_BYTE *)(v55 + 32) = *(_BYTE *)(v56 + 32);
  return a1;
}

uint64_t sub_10001E114(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  __int128 v88;
  void (*v90)(void *, const void *, uint64_t);
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;

  v6 = type metadata accessor for UUID(0);
  v92 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v93 = v6;
  v92(a1, a2);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v91 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v91 + 40);
  v11(v8, v9, v10);
  v90 = v11;
  v11((void *)(a1 + a3[6]), (const void *)(a2 + a3[6]), v10);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40);
  v17(v13, v14, v15);
  v17(a1 + a3[8], a2 + a3[8], v15);
  v18 = a3[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = a3[10];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v24, 1, v15);
  v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v15);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v25, v26, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v25, v15);
LABEL_6:
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  v17((uint64_t)v25, (uint64_t)v26, v15);
LABEL_7:
  v30 = a3[11];
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v30, 1, v15);
  v34 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v15);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v31, v32, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v31, v15);
LABEL_12:
    v35 = sub_100005D40(&qword_1001BF098);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  v17((uint64_t)v31, (uint64_t)v32, v15);
LABEL_13:
  v36 = a3[12];
  v37 = a1 + v36;
  v38 = a2 + v36;
  ((void (*)(uint64_t, uint64_t, uint64_t))v92)(a1 + v36, a2 + v36, v93);
  v39 = (int *)type metadata accessor for ConditionViewModel(0);
  v40 = v39[5];
  v41 = v37 + v40;
  v42 = v38 + v40;
  v43 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 40))(v41, v42, v43);
  v44 = v39[6];
  v45 = (_QWORD *)(v37 + v44);
  v46 = (uint64_t *)(v38 + v44);
  v48 = *v46;
  v47 = v46[1];
  v49 = v45[1];
  *v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease(v49);
  v50 = v39[7];
  v51 = (_QWORD *)(v37 + v50);
  v52 = (uint64_t *)(v38 + v50);
  v54 = *v52;
  v53 = v52[1];
  v55 = v51[1];
  *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease(v55);
  *(_BYTE *)(v37 + v39[8]) = *(_BYTE *)(v38 + v39[8]);
  *(_BYTE *)(v37 + v39[9]) = *(_BYTE *)(v38 + v39[9]);
  *(_BYTE *)(v37 + v39[10]) = *(_BYTE *)(v38 + v39[10]);
  v56 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v57 = a1 + v56;
  v58 = a2 + v56;
  v59 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 40))(v57, v58, v59);
  v60 = a3[15];
  v61 = (void *)(a1 + v60);
  v62 = (const void *)(a2 + v60);
  LODWORD(v38) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v60, 1, v10);
  v63 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v62, 1, v10);
  if ((_DWORD)v38)
  {
    if (!v63)
    {
      (*(void (**)(void *, const void *, uint64_t))(v91 + 32))(v61, v62, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v61, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v63)
  {
    (*(void (**)(void *, uint64_t))(v91 + 8))(v61, v10);
LABEL_18:
    v64 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_19;
  }
  v90(v61, v62, v10);
LABEL_19:
  v65 = a3[16];
  v66 = (void *)(a1 + v65);
  v67 = (const void *)(a2 + v65);
  v68 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v65, 1, v10);
  v69 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(void *, const void *, uint64_t))(v91 + 32))(v66, v67, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v69)
  {
    (*(void (**)(void *, uint64_t))(v91 + 8))(v66, v10);
LABEL_24:
    v70 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_25;
  }
  v90(v66, v67, v10);
LABEL_25:
  v71 = a3[17];
  v72 = a1 + v71;
  v73 = a2 + v71;
  v74 = type metadata accessor for UVIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 40))(v72, v73, v74);
  v75 = a3[18];
  v76 = a1 + v75;
  v77 = a2 + v75;
  v78 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 40))(v76, v77, v78);
  v79 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  v80 = a1 + v79;
  v81 = a2 + v79;
  v82 = *(_QWORD *)(a1 + v79 + 8);
  if (!v82)
  {
LABEL_29:
    v88 = *(_OWORD *)(v81 + 16);
    *(_OWORD *)v80 = *(_OWORD *)v81;
    *(_OWORD *)(v80 + 16) = v88;
    *(_BYTE *)(v80 + 32) = *(_BYTE *)(v81 + 32);
    return a1;
  }
  v83 = *(_QWORD *)(v81 + 8);
  if (!v83)
  {
    sub_100008EC4(a1 + v79);
    goto LABEL_29;
  }
  *(_QWORD *)v80 = *(_QWORD *)v81;
  *(_QWORD *)(v80 + 8) = v83;
  swift_bridgeObjectRelease(v82);
  v84 = *(_BYTE *)(v81 + 32);
  v85 = *(_QWORD *)(v80 + 16);
  v86 = *(_QWORD *)(v80 + 24);
  v87 = *(_BYTE *)(v80 + 32);
  *(_OWORD *)(v80 + 16) = *(_OWORD *)(v81 + 16);
  *(_BYTE *)(v80 + 32) = v84;
  sub_100007458(v85, v86, v87);
  return a1;
}

uint64_t sub_10001E6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001E6B0);
}

uint64_t sub_10001E6B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  sub_100023394();
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
  }
  sub_10002338C();
  sub_10001C6C0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_29:
    v8 = v4 + v11;
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
  }
  sub_100005D40(&qword_1001BF090);
  sub_10001C6C0();
  if (v12)
  {
    v7 = v13;
    v11 = a3[7];
    goto LABEL_29;
  }
  if ((_DWORD)v3 != 0x7FFFFFFF)
  {
    sub_100005D40(&qword_1001BF098);
    sub_10001C6C0();
    if (v9)
    {
      v7 = v16;
      v11 = a3[10];
    }
    else
    {
      type metadata accessor for ConditionViewModel(0);
      sub_10001C6C0();
      if (v17)
      {
        v7 = v18;
        v11 = a3[12];
      }
      else
      {
        sub_1000234BC();
        sub_10001C6C0();
        if (v19)
        {
          v7 = v20;
          v11 = a3[14];
        }
        else
        {
          sub_100005D40(&qword_1001BF0A0);
          sub_10001C6C0();
          if (v21)
          {
            v7 = v22;
            v11 = a3[15];
          }
          else
          {
            sub_1000234CC();
            sub_10001C6C0();
            if (v23)
            {
              v7 = v24;
              v11 = a3[17];
            }
            else
            {
              v7 = sub_1000234C4();
              v11 = a3[18];
            }
          }
        }
      }
    }
    goto LABEL_29;
  }
  v14 = *(_QWORD *)(v4 + a3[9] + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10001E7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001E808);
}

void sub_10001E808(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  sub_100023394();
  sub_10001C6D0();
  if (v11)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    sub_10002338C();
    sub_10001C6D0();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      sub_100005D40(&qword_1001BF090);
      sub_10001C6D0();
      if (v14)
      {
        v9 = v15;
        v13 = a4[7];
      }
      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(v5 + a4[9] + 8) = (v4 - 1);
          return;
        }
        sub_100005D40(&qword_1001BF098);
        sub_10001C6D0();
        if (v11)
        {
          v9 = v16;
          v13 = a4[10];
        }
        else
        {
          type metadata accessor for ConditionViewModel(0);
          sub_10001C6D0();
          if (v17)
          {
            v9 = v18;
            v13 = a4[12];
          }
          else
          {
            sub_1000234BC();
            sub_10001C6D0();
            if (v19)
            {
              v9 = v20;
              v13 = a4[14];
            }
            else
            {
              sub_100005D40(&qword_1001BF0A0);
              sub_10001C6D0();
              if (v21)
              {
                v9 = v22;
                v13 = a4[15];
              }
              else
              {
                sub_1000234CC();
                sub_10001C6D0();
                if (v23)
                {
                  v9 = v24;
                  v13 = a4[17];
                }
                else
                {
                  v9 = sub_1000234C4();
                  v13 = a4[18];
                }
              }
            }
          }
        }
      }
    }
    v10 = v5 + v13;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, v4, v4, v9);
}

uint64_t type metadata accessor for CurrentObservationViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001BF6C8;
  if (!qword_1001BF6C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CurrentObservationViewModel);
  return result;
}

void sub_10001E988(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void *v36;

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v20 = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v21 = *(_QWORD *)(v4 - 8) + 64;
      v22 = v21;
      sub_10001EBBC(319, (unint64_t *)&qword_1001BF6D8, (uint64_t (*)(uint64_t))sub_10001EB28, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Measurement);
      if (v7 <= 0x3F)
      {
        v23 = *(_QWORD *)(v6 - 8) + 64;
        v24 = v23;
        v25 = &unk_10017AA80;
        sub_10001EB64(319);
        if (v9 <= 0x3F)
        {
          v26 = *(_QWORD *)(v8 - 8) + 64;
          v27 = v26;
          v10 = type metadata accessor for ConditionViewModel(319);
          if (v11 <= 0x3F)
          {
            v28 = *(_QWORD *)(v10 - 8) + 64;
            v29 = (char *)&value witness table for Builtin.Int64 + 64;
            v12 = type metadata accessor for CloudAltitudeKind(319);
            if (v13 <= 0x3F)
            {
              v30 = *(_QWORD *)(v12 - 8) + 64;
              sub_10001EBBC(319, (unint64_t *)&unk_1001BF6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
              if (v15 <= 0x3F)
              {
                v31 = *(_QWORD *)(v14 - 8) + 64;
                v32 = v31;
                v16 = type metadata accessor for UVIndex(319);
                if (v17 <= 0x3F)
                {
                  v33 = *(_QWORD *)(v16 - 8) + 64;
                  v18 = type metadata accessor for Wind(319);
                  if (v19 <= 0x3F)
                  {
                    v34 = *(_QWORD *)(v18 - 8) + 64;
                    v35 = (char *)&value witness table for Builtin.Int64 + 64;
                    v36 = &unk_10017AA98;
                    swift_initStructMetadata(a1, 256, 17, &v20, a1 + 16);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

unint64_t sub_10001EB28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BF6E0;
  if (!qword_1001BF6E0)
  {
    v1 = objc_opt_self(NSUnitTemperature);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001BF6E0);
  }
  return result;
}

void sub_10001EB64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001BF6E8)
  {
    v2 = sub_100005DC4(&qword_1001BF090);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001BF6E8);
  }
}

void sub_10001EBBC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_10001EC14(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) == 0)
    return (a6 & 1) == 0 && a1 == a4;
  if ((a6 & 1) != 0)
  {
    if (a1 == a4 && a2 == a5)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  else
  {
    return 0;
  }
}

void sub_10001EC5C(uint64_t a1)
{
  sub_10001EE78(a1);
}

uint64_t sub_10001EC7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100022B84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001ECA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100022B84();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001ECCC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x7265626D756ELL && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265626D756ELL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x79726F6765746163, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10001EDB0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x79726F6765746163;
  else
    return 0x7265626D756ELL;
}

uint64_t static WeatherLocation.supportsSecureCoding.getter()
{
  return 1;
}

void sub_10001EDEC()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_10001EE10(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease(0xE200000000000000);
    v5 = 0;
  }
  else
  {
    v4 = sub_1000232C8(12383, 0xE200000000000000, a1, a2);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

void sub_10001EE78(uint64_t a1)
{
  sub_1000233D8(a1);
  sub_1000233CC();
  sub_1000232C0();
  sub_1000231EC();
}

uint64_t sub_10001EE9C()
{
  return 0;
}

uint64_t sub_10001EEA8()
{
  return 12383;
}

void sub_10001EEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  sub_10002321C();
  a23 = v24;
  a24 = v25;
  v54 = v26;
  a10 = v27;
  v51 = v28;
  v30 = v29;
  v31 = sub_100005D40(&qword_1001BF8B0);
  v52 = *(_QWORD *)(v31 - 8);
  sub_1000230F4();
  __chkstk_darwin(v32);
  sub_10002325C();
  v35 = v34 - v33;
  v36 = sub_100005D40(&qword_1001BF8B8);
  v50 = *(_QWORD *)(v36 - 8);
  sub_1000230F4();
  __chkstk_darwin(v37);
  sub_10002325C();
  v40 = v39 - v38;
  v41 = sub_100005D40(&qword_1001BF8C0);
  v53 = *(_QWORD *)(v41 - 8);
  sub_1000230F4();
  __chkstk_darwin(v42);
  sub_10002325C();
  v45 = v44 - v43;
  v47 = v30[3];
  v46 = v30[4];
  sub_100022330(v30, v47);
  v48 = sub_100022B48();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CurrentObservationViewModel.AirQuality.Value.CodingKeys, &type metadata for CurrentObservationViewModel.AirQuality.Value.CodingKeys, v48, v47, v46);
  if ((a10 & 1) != 0)
  {
    sub_10002344C();
    sub_100023308((uint64_t)&type metadata for CurrentObservationViewModel.AirQuality.Value.CategoryCodingKeys, (uint64_t)&a14);
    KeyedEncodingContainer.encode(_:forKey:)(v54, v51, v49, v31);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v35, v31);
  }
  else
  {
    a13 = 0;
    sub_100022BC0();
    sub_100023308((uint64_t)&type metadata for CurrentObservationViewModel.AirQuality.Value.NumberCodingKeys, (uint64_t)&a13);
    KeyedEncodingContainer.encode(_:forKey:)(v54);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v40, v36);
  }
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v45, v41);
  sub_100023114();
}

uint64_t sub_10001F06C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10002321C();
  v4 = v3;
  v31 = sub_100005D40(&qword_1001BF878);
  sub_1000230F4();
  __chkstk_darwin(v5);
  sub_1000230E0();
  v32 = v6;
  v33 = sub_100005D40(&qword_1001BF880);
  __chkstk_darwin(v33);
  sub_100023344();
  v7 = sub_100005D40(&qword_1001BF888);
  sub_100023234();
  __chkstk_darwin(v8);
  sub_100023374();
  v9 = v4[3];
  v10 = v4[4];
  sub_100022330(v4, v9);
  v11 = sub_100022B48();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CurrentObservationViewModel.AirQuality.Value.CodingKeys, &type metadata for CurrentObservationViewModel.AirQuality.Value.CodingKeys, v11, v9, v10);
  if (v0)
    goto LABEL_9;
  v34 = v2;
  v30 = v4;
  v12 = v1;
  v13 = ((uint64_t (*)(uint64_t))KeyedDecodingContainer.allKeys.getter)(v7);
  v14 = v13;
  v15 = *(_QWORD *)(v13 + 16);
  v16 = v7;
  if (!v15)
  {
LABEL_7:
    v23 = ((uint64_t (*)(_QWORD))type metadata accessor for DecodingError)(0);
    swift_allocError(v23, &protocol witness table for DecodingError, 0, 0);
    v25 = v24;
    sub_100005D40(&qword_1001BF898);
    *v25 = &type metadata for CurrentObservationViewModel.AirQuality.Value;
    v26 = ((uint64_t (*)(uint64_t))KeyedDecodingContainer.codingPath.getter)(v16);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD00000000000002BLL, 0x80000001001861A0, 0);
    v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, enum case for DecodingError.typeMismatch(_:), v23);
    ((void (*)(uint64_t))swift_willThrow)(v27);
    sub_100023214();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v12, v16);
    v4 = v30;
LABEL_9:
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v4);
    return sub_1000234A8();
  }
  v17 = *(_BYTE *)(v13 + 32);
  sub_1000E5028(1, v15, v13, v13 + 32, 0, (2 * v15) | 1);
  v19 = v18;
  v21 = v20;
  swift_bridgeObjectRelease(v14);
  if (v19 != v21 >> 1)
  {
    v16 = v7;
    goto LABEL_7;
  }
  if ((v17 & 1) != 0)
  {
    sub_10002344C();
    v22 = sub_10002346C();
    KeyedDecodingContainer.decode(_:forKey:)(v22, v31);
    sub_1000232F8(v32);
  }
  else
  {
    sub_100022BC0();
    v28 = sub_10002346C();
    ((void (*)(uint64_t, uint64_t))KeyedDecodingContainer.decode(_:forKey:))(v28, v33);
    sub_100023288();
  }
  sub_100023214();
  sub_1000232E0(v1, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v30);
  return sub_1000234A8();
}

uint64_t sub_10001F42C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (v7 || (v8 = sub_1000232C8(v4, v5, *(_QWORD *)a2, v6), result = 0, (v8 & 1) != 0))
  {
    sub_1000224D8((__int128 *)(a1 + 16), (uint64_t)&v14);
    sub_1000224D8((__int128 *)(a2 + 16), (uint64_t)&v13);
    sub_1000224D8(&v14, (uint64_t)v15);
    v10 = v15[0];
    if ((v16 & 1) != 0)
    {
      v11 = v15[1];
      sub_1000224D8(&v13, (uint64_t)&v17);
      if (v19 != 1)
        return 0;
      v12 = v10 == v17 && v11 == v18;
      if (!v12 && (sub_1000232C8(v10, v11, v17, v18) & 1) == 0)
        return 0;
    }
    else
    {
      sub_1000224D8(&v13, (uint64_t)&v17);
      if ((v19 & 1) != 0 || v10 != v17)
        return 0;
    }
    return 1;
  }
  return result;
}

BOOL sub_10001F518(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_10001F528(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t sub_10001F54C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x6D614E656C616373 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E656C616373, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10001F63C()
{
  return 2;
}

void sub_10001F644(uint64_t a1)
{
  char v1;

  v1 = a1;
  sub_1000233D8(a1);
  Hasher._combine(_:)(v1 & 1);
  sub_1000232C0();
  sub_1000231EC();
}

uint64_t sub_10001F674(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65756C6176;
  else
    return 0x6D614E656C616373;
}

uint64_t sub_10001F6AC(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v14;
  _BYTE v15[24];
  __int128 v16;

  v4 = v1;
  v6 = sub_100005D40(&qword_1001BF818);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100023344();
  sub_100022330(a1, a1[3]);
  v8 = sub_1000224F0();
  sub_1000232D0((uint64_t)&type metadata for CurrentObservationViewModel.AirQuality.CodingKeys, v9, v8);
  v10 = *(_QWORD *)v4;
  v11 = *((_QWORD *)v4 + 1);
  v15[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v10, v11, v15, v6);
  if (!v2)
  {
    sub_1000224D8(v4 + 1, (uint64_t)&v16);
    sub_1000224D8(&v16, (uint64_t)v15);
    v14 = 1;
    v12 = sub_100022568();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v14, v6, &type metadata for CurrentObservationViewModel.AirQuality.Value, v12);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

void sub_10001F7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  sub_10002321C();
  a22 = v24;
  a23 = v25;
  v27 = v26;
  v29 = v28;
  v30 = sub_100005D40(&qword_1001BF800);
  sub_100023234();
  __chkstk_darwin(v31);
  sub_10002335C();
  v32 = v27[3];
  v33 = v27[4];
  sub_100022330(v27, v32);
  v34 = sub_1000224F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CurrentObservationViewModel.AirQuality.CodingKeys, &type metadata for CurrentObservationViewModel.AirQuality.CodingKeys, v34, v32, v33);
  if (v23)
  {
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v27);
  }
  else
  {
    LOBYTE(v42) = 0;
    v35 = KeyedDecodingContainer.decode(_:forKey:)(&v42, v30);
    v37 = v36;
    a13 = 1;
    v38 = sub_10002252C();
    swift_bridgeObjectRetain(v37);
    sub_1000234B4((uint64_t)&type metadata for CurrentObservationViewModel.AirQuality.Value, (uint64_t)&a13, v30, (uint64_t)&type metadata for CurrentObservationViewModel.AirQuality.Value);
    sub_100023204();
    if (v38)
    {
      sub_100023458();
      _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v27);
      sub_100023458();
    }
    else
    {
      v39 = v42;
      v40 = v43;
      v41 = v44;
      sub_100006E58(v42, v43, v44);
      _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v27);
      sub_100023458();
      sub_100007458(v39, v40, v41);
      *(_QWORD *)v29 = v35;
      *(_QWORD *)(v29 + 8) = v37;
      *(_QWORD *)(v29 + 16) = v39;
      *(_QWORD *)(v29 + 24) = v40;
      *(_BYTE *)(v29 + 32) = v41;
    }
  }
  sub_100023114();
}

BOOL sub_10001F940(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  BOOL v59;
  char v60;
  _BOOL8 result;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  char v68;
  uint64_t v69;
  void (*v70)(uint64_t, int *);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t);
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t);
  char v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int *v160;
  _QWORD v161[4];
  char v162;
  _QWORD v163[4];
  char v164;
  uint64_t v165;
  uint64_t v166;

  v5 = sub_10002338C();
  sub_100023234();
  __chkstk_darwin(v6);
  sub_1000230E0();
  sub_100023440(v7);
  v151 = sub_100005D40(&qword_1001BF828);
  sub_1000230F4();
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v141 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v141 - v12;
  sub_100005D40(&qword_1001BF0A0);
  sub_1000230F4();
  __chkstk_darwin(v14);
  sub_100023150();
  v146 = v15;
  sub_100023164();
  __chkstk_darwin(v16);
  sub_1000232B4();
  v148 = v17;
  sub_100023164();
  __chkstk_darwin(v18);
  sub_1000232B4();
  v149 = v19;
  sub_100023164();
  __chkstk_darwin(v20);
  sub_1000232B4();
  v147 = v21;
  sub_100023164();
  __chkstk_darwin(v22);
  sub_1000232B4();
  v153 = v23;
  sub_100023164();
  __chkstk_darwin(v24);
  sub_100023434();
  v150 = v25;
  v160 = (int *)sub_100005D40(&qword_1001BF090);
  v158 = *((_QWORD *)v160 - 1);
  sub_1000230F4();
  __chkstk_darwin(v26);
  sub_1000230E0();
  v154 = v27;
  v159 = sub_100005D40(&qword_1001BF830);
  sub_1000230F4();
  __chkstk_darwin(v28);
  sub_100023150();
  v156 = (char *)v29;
  sub_100023164();
  __chkstk_darwin(v30);
  v32 = (char *)&v141 - v31;
  sub_100005D40(&qword_1001BF098);
  sub_1000230F4();
  __chkstk_darwin(v33);
  sub_100023150();
  v152 = v34;
  sub_100023164();
  __chkstk_darwin(v35);
  sub_1000232B4();
  v155 = v36;
  sub_100023164();
  __chkstk_darwin(v37);
  sub_1000232B4();
  v157 = v38;
  sub_100023164();
  v40 = __chkstk_darwin(v39);
  v42 = (char *)&v141 - v41;
  v43 = __chkstk_darwin(v40);
  v45 = (char *)&v141 - v44;
  __chkstk_darwin(v43);
  v47 = (char *)&v141 - v46;
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v145 = v13;
  v48 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  if ((sub_1000233F8(v48[5]) & 1) == 0)
    return 0;
  if ((sub_1000233F8(v48[6]) & 1) == 0)
    return 0;
  v142 = v2;
  v143 = v11;
  v144 = v5;
  v49 = v48[7];
  v50 = a1 + v49;
  v51 = a2 + v49;
  sub_10001EB28();
  if ((sub_1000233BC(v50, v51) & 1) == 0 || (sub_1000233BC(a1 + v48[8], a2 + v48[8]) & 1) == 0)
    return 0;
  v52 = a2;
  v53 = a1;
  v54 = v48[9];
  v55 = *(_QWORD *)(a1 + v54);
  v56 = *(_QWORD *)(a1 + v54 + 8);
  v57 = (uint64_t *)(a2 + v54);
  v58 = v57[1];
  v59 = v55 == *v57 && v56 == v58;
  if (v59 || (v60 = sub_1000232C8(v55, v56, *v57, v58), result = 0, (v60 & 1) != 0))
  {
    sub_100023148(a1 + v48[10], (uint64_t)v47);
    sub_100023148(a2 + v48[10], (uint64_t)v45);
    v62 = (uint64_t)&v32[*(int *)(v159 + 48)];
    sub_100023148((uint64_t)v47, (uint64_t)v32);
    sub_100023148((uint64_t)v45, v62);
    v63 = v160;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, (uint64_t)v160) == 1)
    {
      sub_1000231E4((uint64_t)v45);
      sub_1000231E4((uint64_t)v47);
      sub_10002312C(v62);
      if (!v59)
        goto LABEL_27;
      sub_100016904((uint64_t)v32, &qword_1001BF098);
    }
    else
    {
      sub_1000225A4((uint64_t)v32, (uint64_t)v42, &qword_1001BF098);
      sub_10002312C(v62);
      if (v59)
      {
        sub_10002310C((uint64_t)v45);
        sub_10002310C((uint64_t)v47);
        (*(void (**)(char *, int *))(v158 + 8))(v42, v63);
        goto LABEL_27;
      }
      v64 = v62;
      v65 = v158;
      v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 32);
      v141 = v53;
      v67 = v154;
      sub_100023498(v154, v64, v66);
      sub_100022668((unint64_t *)&qword_1001BF840);
      v68 = sub_10002329C((uint64_t)v42, v67);
      v69 = v52;
      v70 = *(void (**)(uint64_t, int *))(v65 + 8);
      v70(v67, v160);
      sub_100016904((uint64_t)v45, &qword_1001BF098);
      sub_100016904((uint64_t)v47, &qword_1001BF098);
      v70((uint64_t)v42, v160);
      v52 = v69;
      v63 = v160;
      v53 = v141;
      sub_100016904((uint64_t)v32, &qword_1001BF098);
      if ((v68 & 1) == 0)
        return 0;
    }
    v71 = v157;
    sub_100023148(v53 + v48[11], v157);
    v72 = v155;
    sub_100023148(v52 + v48[11], v155);
    v32 = v156;
    v73 = (uint64_t)&v156[*(int *)(v159 + 48)];
    sub_100023148(v71, (uint64_t)v156);
    sub_100023148(v72, v73);
    sub_10002312C((uint64_t)v32);
    if (v59)
    {
      sub_10002310C(v72);
      sub_10002310C(v71);
      sub_10002312C(v73);
      v74 = v153;
      if (!v59)
        goto LABEL_27;
      sub_100016904((uint64_t)v32, &qword_1001BF098);
LABEL_32:
      static ConditionViewModel.__derived_struct_equals(_:_:)(v53 + v48[12], v52 + v48[12]);
      if ((v81 & 1) == 0
        || *(double *)(v53 + v48[13]) != *(double *)(v52 + v48[13])
        || (static CloudAltitudeKind.== infix(_:_:)(v53 + v48[14], v52 + v48[14]) & 1) == 0)
      {
        return 0;
      }
      v82 = v150;
      sub_100023148(v53 + v48[15], v150);
      sub_100023148(v52 + v48[15], v74);
      v83 = (uint64_t)v145;
      v84 = (uint64_t)&v145[*(int *)(v151 + 48)];
      sub_100023148(v82, (uint64_t)v145);
      sub_100023148(v74, v84);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v83, 1, v144) == 1)
      {
        sub_10002310C(v74);
        sub_10002310C(v82);
        sub_10002312C(v84);
        if (!v59)
          goto LABEL_42;
        sub_100016904((uint64_t)v145, &qword_1001BF0A0);
      }
      else
      {
        v85 = v147;
        sub_1000225A4(v83, v147, &qword_1001BF0A0);
        sub_10002312C(v84);
        if (v59)
        {
          sub_1000231E4(v74);
          sub_1000231E4(v82);
          v86 = sub_100023404();
          v87(v86);
LABEL_42:
          v77 = &qword_1001BF828;
          v88 = &v166;
LABEL_50:
          v78 = *(v88 - 32);
          goto LABEL_28;
        }
        sub_1000233E4();
        v90 = *(_QWORD *)(v89 - 256);
        sub_100023498(v90, v84, v91);
        sub_100016878(&qword_1001BF838, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
        v92 = sub_1000234A8();
        v94 = sub_10002329C(v92, v93);
        sub_100023324(v90);
        sub_10002310C(v153);
        sub_10002310C(v150);
        sub_100023324(v85);
        sub_10002310C(v83);
        if ((v94 & 1) == 0)
          return 0;
      }
      v95 = v149;
      sub_100023148(v53 + v48[16], v149);
      v160 = v48;
      v96 = v148;
      sub_100023148(v52 + v48[16], v148);
      v97 = (uint64_t)v143;
      v98 = (uint64_t)&v143[*(int *)(v151 + 48)];
      sub_100023148(v95, (uint64_t)v143);
      sub_100023148(v96, v98);
      v99 = v144;
      v100 = v52;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v97, 1, v144) == 1)
      {
        sub_10002310C(v148);
        sub_10002310C(v149);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v98, 1, v99) == 1)
        {
          sub_100016904((uint64_t)v143, &qword_1001BF0A0);
          goto LABEL_52;
        }
      }
      else
      {
        v101 = (uint64_t)v143;
        v102 = v146;
        sub_1000225A4((uint64_t)v143, v146, &qword_1001BF0A0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v98, 1, v99) != 1)
        {
          sub_1000233E4();
          v104 = *(_QWORD *)(v103 - 256);
          v105(v104, v98, v99);
          sub_100016878(&qword_1001BF838, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
          v106 = dispatch thunk of static Equatable.== infix(_:_:)(v102, v104, v99);
          v107 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
          v107(v104, v99);
          sub_10002310C(v148);
          sub_10002310C(v149);
          v107(v102, v99);
          sub_10002310C(v101);
          if ((v106 & 1) == 0)
            return 0;
LABEL_52:
          if ((static UVIndex.== infix(_:_:)(v53 + v160[17], v52 + v160[17]) & 1) == 0
            || (static Wind.== infix(_:_:)(v53 + v160[18]) & 1) == 0
            || *(double *)(v53 + v160[19]) != *(double *)(v52 + v160[19]))
          {
            return 0;
          }
          v108 = v160[20];
          v109 = v53 + v108;
          v111 = *(_QWORD *)(v53 + v108);
          v110 = *(_QWORD *)(v53 + v108 + 8);
          v113 = *(_QWORD *)(v53 + v108 + 16);
          v112 = *(_QWORD *)(v109 + 24);
          v114 = *(_BYTE *)(v109 + 32);
          v115 = (uint64_t *)(v100 + v108);
          v117 = *v115;
          v116 = v115[1];
          v119 = v115[2];
          v118 = v115[3];
          v120 = *((_BYTE *)v115 + 32);
          if (v110)
          {
            if (v116)
            {
              v161[0] = v111;
              v161[1] = v110;
              v161[2] = v113;
              v161[3] = v112;
              v162 = v114 & 1;
              v163[0] = v117;
              v163[1] = v116;
              v163[2] = v119;
              v163[3] = v118;
              v164 = v120 & 1;
              return (sub_10001F42C((uint64_t)v161, (uint64_t)v163) & 1) != 0;
            }
          }
          else if (!v116)
          {
            return 1;
          }
          v121 = sub_1000233A4();
          sub_1000225D8(v121, v122, v123, v124, v125);
          v126 = sub_10002332C();
          sub_1000225D8(v126, v127, v128, v129, v130);
          v131 = sub_1000233A4();
          sub_100022620(v131, v132, v133, v134, v135);
          v136 = sub_10002332C();
          sub_100022620(v136, v137, v138, v139, v140);
          return 0;
        }
        sub_1000231E4(v148);
        sub_1000231E4(v149);
        (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v102, v99);
      }
      v77 = &qword_1001BF828;
      v88 = &v165;
      goto LABEL_50;
    }
    v75 = v152;
    sub_1000225A4((uint64_t)v32, v152, &qword_1001BF098);
    sub_10002312C(v73);
    if (!v76)
    {
      v79 = v154;
      sub_100023498(v154, v73, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 32));
      sub_100022668((unint64_t *)&qword_1001BF840);
      LODWORD(v160) = sub_10002329C(v75, v79);
      v80 = v79;
      v74 = v153;
      sub_100023324(v80);
      sub_10002310C(v72);
      sub_10002310C(v157);
      sub_100023324(v75);
      sub_10002310C((uint64_t)v32);
      if ((v160 & 1) == 0)
        return 0;
      goto LABEL_32;
    }
    sub_1000231E4(v72);
    sub_1000231E4(v71);
    (*(void (**)(uint64_t, int *))(v158 + 8))(v75, v63);
LABEL_27:
    v77 = &qword_1001BF830;
    v78 = (uint64_t)v32;
LABEL_28:
    sub_100016904(v78, v77);
    return 0;
  }
  return result;
}

BOOL sub_10002043C(char a1, char a2)
{
  return a1 == a2;
}

void sub_10002044C(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_100020470(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v18;
  unint64_t v20;
  unint64_t v22;
  unint64_t v24;
  unint64_t v26;
  unint64_t v28;
  unint64_t v30;
  unint64_t v32;
  unint64_t v34;
  char v36;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6974617269707865 && a2 == 0xEE00657461446E6FLL)
  {
    v10 = 0xEE00657461446E6FLL;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974617269707865, 0xEE00657461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x74617265706D6574 && a2 == 0xEB00000000657275)
  {
    v12 = 0xEB00000000657275;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74617265706D6574, 0xEB00000000657275, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0xD000000000000013)
  {
    v13 = 0x8000000100186160;
    if (a2 == 0x8000000100186160)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100186160, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100186180)
  {
    v14 = 0x8000000100186180;
LABEL_43:
    swift_bridgeObjectRelease(v14);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100186180, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x706D655468676968 && a2 == 0xEF65727574617265)
  {
    v16 = 0xEF65727574617265;
    goto LABEL_51;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x706D655468676968, 0xEF65727574617265, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_51:
    swift_bridgeObjectRelease(v16);
    return 6;
  }
  if (a1 == 0x65706D6554776F6CLL && a2 == 0xEE00657275746172)
  {
    v18 = 0xEE00657275746172;
    goto LABEL_59;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65706D6554776F6CLL, 0xEE00657275746172, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_59:
    swift_bridgeObjectRelease(v18);
    return 7;
  }
  if (a1 == 0x6F697469646E6F63 && a2 == 0xE90000000000006ELL)
  {
    v20 = 0xE90000000000006ELL;
    goto LABEL_67;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_67:
    swift_bridgeObjectRelease(v20);
    return 8;
  }
  if (a1 == 0x766F4364756F6C63 && a2 == 0xEA00000000007265)
  {
    v22 = 0xEA00000000007265;
    goto LABEL_75;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x766F4364756F6C63, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_75:
    swift_bridgeObjectRelease(v22);
    return 9;
  }
  if (a1 == 0x6E694B64756F6C63 && a2 == 0xE900000000000064)
  {
    v24 = 0xE900000000000064;
    goto LABEL_83;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E694B64756F6C63, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
LABEL_83:
    swift_bridgeObjectRelease(v24);
    return 10;
  }
  if (a1 == 0x657369726E7573 && a2 == 0xE700000000000000)
  {
    v26 = 0xE700000000000000;
    goto LABEL_91;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657369726E7573, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
LABEL_91:
    swift_bridgeObjectRelease(v26);
    return 11;
  }
  if (a1 == 0x7465736E7573 && a2 == 0xE600000000000000)
  {
    v28 = 0xE600000000000000;
    goto LABEL_99;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7465736E7573, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
LABEL_99:
    swift_bridgeObjectRelease(v28);
    return 12;
  }
  if (a1 == 0x7865646E497675 && a2 == 0xE700000000000000)
  {
    v30 = 0xE700000000000000;
    goto LABEL_107;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E497675, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v30 = a2;
LABEL_107:
    swift_bridgeObjectRelease(v30);
    return 13;
  }
  if (a1 == 1684957559 && a2 == 0xE400000000000000)
  {
    v32 = 0xE400000000000000;
    goto LABEL_115;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684957559, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v32 = a2;
LABEL_115:
    swift_bridgeObjectRelease(v32);
    return 14;
  }
  if (a1 == 0x79746964696D7568 && a2 == 0xE800000000000000)
  {
    v34 = 0xE800000000000000;
    goto LABEL_123;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79746964696D7568, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v34 = a2;
LABEL_123:
    swift_bridgeObjectRelease(v34);
    return 15;
  }
  if (a1 == 0x696C617551726961 && a2 == 0xEA00000000007974)
  {
    swift_bridgeObjectRelease(0xEA00000000007974);
    return 16;
  }
  else
  {
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(0x696C617551726961, 0xEA00000000007974, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v36 & 1) != 0)
      return 16;
    else
      return 17;
  }
}

uint64_t sub_100020B54()
{
  return 17;
}

Swift::Int sub_100020B5C(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t sub_100020BA0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100020BC8 + 4 * byte_10017AA20[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_100020BC8()
{
  return 1702125924;
}

uint64_t sub_100020BD8()
{
  return 0x6974617269707865;
}

uint64_t sub_100020BFC()
{
  return 0x74617265706D6574;
}

unint64_t sub_100020C1C()
{
  return 0xD000000000000013;
}

unint64_t sub_100020C38()
{
  return 0xD000000000000015;
}

uint64_t sub_100020C58()
{
  return 0x706D655468676968;
}

uint64_t sub_100020C7C()
{
  return 0x65706D6554776F6CLL;
}

uint64_t sub_100020CA0()
{
  return 0x6F697469646E6F63;
}

uint64_t sub_100020CC4()
{
  return 0x766F4364756F6C63;
}

uint64_t sub_100020CE0()
{
  return 0x6E694B64756F6C63;
}

uint64_t sub_100020CFC()
{
  return 0x657369726E7573;
}

uint64_t sub_100020D14()
{
  return 0x7465736E7573;
}

uint64_t sub_100020D28()
{
  return 0x7865646E497675;
}

uint64_t sub_100020D40()
{
  return 1684957559;
}

uint64_t sub_100020D50()
{
  return 0x79746964696D7568;
}

uint64_t sub_100020D68()
{
  return 0x696C617551726961;
}

void sub_100020D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _OWORD v23[2];
  char v24;

  sub_10002321C();
  v4 = v0;
  v6 = v5;
  v7 = sub_100005D40(&qword_1001BF768);
  sub_100023234();
  __chkstk_darwin(v8);
  sub_100023374();
  sub_100022330(v6, v6[3]);
  v9 = sub_100022354();
  sub_1000232D0((uint64_t)&type metadata for CurrentObservationViewModel.CodingKeys, v10, v9);
  LOBYTE(v23[0]) = 0;
  type metadata accessor for UUID(0);
  sub_100016878(&qword_1001BF778, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  sub_1000231F8();
  sub_100023100();
  if (!v1)
  {
    v11 = type metadata accessor for CurrentObservationViewModel(0);
    v12 = sub_100023318(1);
    type metadata accessor for Date(v12);
    sub_100016878(&qword_1001BF780, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    sub_100023100();
    LOBYTE(v23[0]) = 2;
    sub_100023100();
    LOBYTE(v23[0]) = 3;
    sub_100005D40(&qword_1001BF090);
    sub_100022668(&qword_1001BF788);
    sub_100023100();
    LOBYTE(v23[0]) = 4;
    sub_100023100();
    v13 = (uint64_t *)(v4 + *(int *)(v11 + 36));
    v14 = *v13;
    v15 = v13[1];
    LOBYTE(v23[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v23, v7);
    LOBYTE(v23[0]) = 6;
    sub_1000231A4();
    LOBYTE(v23[0]) = 7;
    sub_1000231A4();
    v16 = sub_100023318(8);
    type metadata accessor for ConditionViewModel(v16);
    sub_100016878(&qword_1001BF790, type metadata accessor for ConditionViewModel);
    sub_1000231F8();
    sub_100023100();
    sub_100023244(9);
    v17 = sub_100023318(10);
    type metadata accessor for CloudAltitudeKind(v17);
    sub_100016878(&qword_1001BF798, (uint64_t (*)(uint64_t))&type metadata accessor for CloudAltitudeKind);
    sub_1000231F8();
    sub_100023100();
    LOBYTE(v23[0]) = 11;
    sub_1000231A4();
    LOBYTE(v23[0]) = 12;
    sub_1000231A4();
    v18 = sub_100023318(13);
    type metadata accessor for UVIndex(v18);
    sub_100016878(&qword_1001BF7A0, (uint64_t (*)(uint64_t))&type metadata accessor for UVIndex);
    sub_100023100();
    v19 = sub_100023318(14);
    type metadata accessor for Wind(v19);
    sub_100016878(&qword_1001BF7A8, (uint64_t (*)(uint64_t))&type metadata accessor for Wind);
    sub_100023100();
    sub_100023244(15);
    v20 = v4 + *(int *)(v11 + 80);
    v21 = *(_BYTE *)(v20 + 32);
    v22 = *(_OWORD *)(v20 + 16);
    v23[0] = *(_OWORD *)v20;
    v23[1] = v22;
    v24 = v21;
    sub_100022390();
    sub_1000231A4();
  }
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v7);
  sub_100023114();
}

void sub_100021238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  void (*v83)(uint64_t, uint64_t);
  int v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  _QWORD v141[2];
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  int *v169;
  uint64_t v170;
  _OWORD v171[2];
  char v172;

  sub_10002321C();
  a22 = v24;
  a23 = v25;
  v167 = v23;
  v27 = v26;
  v142 = v28;
  v154 = type metadata accessor for Wind(0);
  v151 = *(_QWORD *)(v154 - 8);
  sub_1000230F4();
  __chkstk_darwin(v29);
  sub_1000230E0();
  v31 = sub_1000232E8(v30);
  v155 = type metadata accessor for UVIndex(v31);
  v152 = *(_QWORD *)(v155 - 8);
  sub_1000230F4();
  __chkstk_darwin(v32);
  sub_1000230E0();
  sub_100023440(v33);
  sub_100005D40(&qword_1001BF0A0);
  sub_1000230F4();
  __chkstk_darwin(v34);
  sub_100023150();
  v145 = v35;
  sub_100023164();
  __chkstk_darwin(v36);
  sub_100023434();
  v38 = sub_1000232E8(v37);
  v39 = type metadata accessor for CloudAltitudeKind(v38);
  v156 = *(_QWORD *)(v39 - 8);
  v157 = v39;
  sub_1000230F4();
  __chkstk_darwin(v40);
  sub_1000230E0();
  v42 = sub_1000232E8(v41);
  v148 = type metadata accessor for ConditionViewModel(v42);
  sub_1000230F4();
  __chkstk_darwin(v43);
  sub_1000230E0();
  sub_100023440(v44);
  sub_100005D40(&qword_1001BF098);
  sub_1000230F4();
  __chkstk_darwin(v45);
  sub_100023150();
  v150 = v46;
  sub_100023164();
  __chkstk_darwin(v47);
  sub_100023434();
  sub_100023440(v48);
  v49 = sub_100005D40(&qword_1001BF090);
  v159 = *(_QWORD *)(v49 - 8);
  v160 = v49;
  sub_1000230F4();
  __chkstk_darwin(v50);
  sub_100023150();
  v162 = v51;
  sub_100023164();
  __chkstk_darwin(v52);
  sub_100023434();
  v166 = v53;
  v168 = type metadata accessor for Date(0);
  v161 = *(_QWORD *)(v168 - 8);
  sub_1000230F4();
  v55 = __chkstk_darwin(v54);
  v57 = (char *)v141 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55);
  v58 = type metadata accessor for UUID(0);
  v158 = *(_QWORD *)(v58 - 8);
  sub_1000230F4();
  __chkstk_darwin(v59);
  sub_10002335C();
  v163 = sub_100005D40(&qword_1001BF7B8);
  v60 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  sub_10002325C();
  v63 = v62 - v61;
  v169 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v64);
  sub_1000230E0();
  v170 = v65;
  v66 = *(_QWORD *)(v27 + 24);
  v67 = *(_QWORD *)(v27 + 32);
  v164 = v27;
  v68 = (_QWORD *)sub_1000234A8();
  sub_100022330(v68, v69);
  v70 = sub_100022354();
  v165 = v63;
  v71 = v167;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CurrentObservationViewModel.CodingKeys, &type metadata for CurrentObservationViewModel.CodingKeys, v70, v66, v67);
  v153 = v58;
  if (v71)
  {
    v167 = v71;
    LODWORD(v165) = 0;
    v74 = 0;
  }
  else
  {
    v167 = v57;
    v141[1] = v60;
    LOBYTE(v171[0]) = 0;
    sub_100016878(&qword_1001BF7C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    sub_1000231F8();
    v72 = v163;
    sub_100023418(v58, v73, v163, v58);
    v89 = v170;
    (*(void (**)(void))(v158 + 32))();
    LOBYTE(v171[0]) = 1;
    sub_100016878(&qword_1001BF7C8, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    v91 = v90;
    v92 = v168;
    sub_100023418(v168, (uint64_t)v171, v72, v168);
    v93 = v91;
    v94 = v169;
    sub_10002348C(v89 + v169[5]);
    sub_1000232A8(2);
    sub_1000234B4(v92, v95, v72, v92);
    v141[0] = v93;
    sub_10002348C(v89 + v94[6]);
    LOBYTE(v171[0]) = 3;
    sub_100022668(&qword_1001BF7D0);
    v96 = sub_100023420();
    sub_1000234B4(v96, v97, v98, v99);
    sub_100023460(v89 + v94[7]);
    sub_1000232A8(4);
    v100 = sub_100023420();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v100, v101, v102, v103);
    sub_100023460(v89 + v94[8]);
    v104 = sub_100023478(5);
    v106 = KeyedDecodingContainer.decode(_:forKey:)(v104, v105);
    v107 = (uint64_t *)(v89 + v94[9]);
    *v107 = v106;
    v107[1] = v108;
    sub_1000232A8(6);
    v109 = sub_10002326C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v109, v110, v111, v112, v113);
    sub_1000224B0(0, v89 + v94[10], &qword_1001BF098);
    sub_1000232A8(7);
    v114 = sub_10002326C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v114, v115, v116, v117, v118);
    sub_1000224B0(0, v89 + v94[11], &qword_1001BF098);
    LOBYTE(v171[0]) = 8;
    sub_100016878(&qword_1001BF7D8, type metadata accessor for ConditionViewModel);
    sub_1000231F8();
    v119 = v149;
    v120 = v163;
    sub_100023418(v148, v121, v163, v148);
    v167 = 0;
    sub_1000223EC(v119, v170 + v169[12]);
    LOBYTE(v171[0]) = 9;
    v122 = v167;
    KeyedDecodingContainer.decode(_:forKey:)(v171, v120);
    v167 = v122;
    if (!v122)
    {
      *(_QWORD *)(v170 + v169[13]) = v123;
      LOBYTE(v171[0]) = 10;
      sub_100016878(&qword_1001BF7E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudAltitudeKind);
      sub_1000231F8();
      sub_100023190(v157, v124);
      v167 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v156 + 32))(v170 + v169[14], v147, v157);
      sub_1000232A8(11);
      sub_1000231C4(v125, v126);
      v167 = 0;
      sub_1000224B0(v146, v170 + v169[15], &qword_1001BF0A0);
      sub_1000232A8(12);
      sub_1000231C4(v127, v128);
      v167 = 0;
      sub_1000224B0(v145, v170 + v169[16], &qword_1001BF0A0);
      LOBYTE(v171[0]) = 13;
      sub_100016878(&qword_1001BF7E8, (uint64_t (*)(uint64_t))&type metadata accessor for UVIndex);
      sub_1000231F8();
      sub_100023190(v155, v129);
      LODWORD(v166) = 1;
      v167 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 32))(v170 + v169[17], v144, v155);
      LOBYTE(v171[0]) = 14;
      sub_100016878(&qword_1001BF7F0, (uint64_t (*)(uint64_t))&type metadata accessor for Wind);
      sub_1000231F8();
      sub_100023190(v154, v130);
      v167 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 32))(v170 + v169[18], v143, v154);
      v131 = sub_100023478(15);
      v132 = v167;
      KeyedDecodingContainer.decode(_:forKey:)(v131, v133);
      v167 = v132;
      if (!v132)
      {
        *(_QWORD *)(v170 + v169[19]) = v134;
        a13 = 16;
        v135 = sub_100022430();
        v136 = v167;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for CurrentObservationViewModel.AirQuality, &a13, v163, &type metadata for CurrentObservationViewModel.AirQuality, v135);
        v167 = v136;
        if (!v136)
        {
          sub_1000230C8();
          v137 = v172;
          v138 = v170;
          v139 = v170 + v169[20];
          v140 = v171[1];
          *(_OWORD *)v139 = v171[0];
          *(_OWORD *)(v139 + 16) = v140;
          *(_BYTE *)(v139 + 32) = v137;
          sub_10002246C(v138, v142);
          sub_1000234A0();
          sub_100011894(v138, type metadata accessor for CurrentObservationViewModel);
          goto LABEL_37;
        }
      }
      sub_1000230C8();
      LODWORD(v163) = 1;
      sub_1000234A0();
      LOBYTE(v84) = 1;
      v76 = 1;
      v77 = 1;
      v78 = 1;
      v79 = 1;
      v80 = 1;
      v81 = 1;
      v82 = 1;
      LODWORD(v164) = 1;
      LODWORD(v165) = 1;
      LODWORD(v162) = 1;
      v75 = v168;
      goto LABEL_9;
    }
    sub_1000230C8();
    LODWORD(v165) = 0;
    v74 = 511;
  }
  v75 = v168;
  sub_1000234A0();
  v76 = (v74 >> 2) & 1;
  v77 = (v74 >> 3) & 1;
  v78 = (v74 >> 4) & 1;
  v79 = (v74 >> 5) & 1;
  v80 = (v74 >> 6) & 1;
  v81 = (v74 >> 7) & 1;
  v82 = (v74 >> 8) & 1;
  LODWORD(v164) = (v74 >> 10) & 1;
  if ((v74 & 1) == 0)
  {
    LODWORD(v163) = 0;
    LODWORD(v166) = 0;
    LODWORD(v162) = 0;
    if ((v74 & 2) == 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  LODWORD(v162) = 0;
  LODWORD(v166) = 0;
  LODWORD(v163) = 0;
  v84 = (v74 >> 1) & 1;
LABEL_9:
  (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v170, v153);
  if ((v84 & 1) == 0)
  {
LABEL_6:
    if (v76)
    {
      v83 = *(void (**)(uint64_t, uint64_t))(v161 + 8);
      goto LABEL_11;
    }
    goto LABEL_14;
  }
LABEL_10:
  v83 = *(void (**)(uint64_t, uint64_t))(v161 + 8);
  v83(v170 + v169[5], v75);
  if ((v76 & 1) != 0)
  {
LABEL_11:
    v85 = v170;
    v83(v170 + v169[6], v75);
    if ((v77 & 1) == 0)
      goto LABEL_12;
    goto LABEL_15;
  }
LABEL_14:
  v85 = v170;
  if (!v77)
  {
LABEL_12:
    v86 = v169;
    if (v78)
    {
      (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v85 + v169[8], v160);
      goto LABEL_17;
    }
    goto LABEL_27;
  }
LABEL_15:
  v86 = v169;
  v87 = v160;
  v88 = *(void (**)(uint64_t, uint64_t))(v159 + 8);
  v88(v85 + v169[7], v160);
  if ((v78 & 1) != 0)
  {
    v88(v85 + v86[8], v87);
LABEL_17:
    if ((v79 & 1) == 0)
      goto LABEL_18;
    goto LABEL_28;
  }
LABEL_27:
  if (!v79)
  {
LABEL_18:
    if (v80)
      goto LABEL_19;
    goto LABEL_29;
  }
LABEL_28:
  swift_bridgeObjectRelease(*(_QWORD *)(v85 + v86[9] + 8));
  if ((v80 & 1) != 0)
  {
LABEL_19:
    sub_100016904(v85 + v86[10], &qword_1001BF098);
    if ((v81 & 1) == 0)
      goto LABEL_20;
    goto LABEL_30;
  }
LABEL_29:
  if (!v81)
  {
LABEL_20:
    if (v82)
      goto LABEL_21;
    goto LABEL_31;
  }
LABEL_30:
  sub_100016904(v85 + v86[11], &qword_1001BF098);
  if ((v82 & 1) != 0)
  {
LABEL_21:
    sub_100011894(v85 + v86[12], type metadata accessor for ConditionViewModel);
    if ((v164 & 1) == 0)
      goto LABEL_22;
    goto LABEL_32;
  }
LABEL_31:
  if (!(_DWORD)v164)
  {
LABEL_22:
    if ((_DWORD)v165)
      goto LABEL_23;
    goto LABEL_33;
  }
LABEL_32:
  (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v85 + v86[14], v157);
  if ((v165 & 1) != 0)
  {
LABEL_23:
    sub_100016904(v85 + v86[15], &qword_1001BF0A0);
    if ((v162 & 1) == 0)
      goto LABEL_24;
    goto LABEL_34;
  }
LABEL_33:
  if (!(_DWORD)v162)
  {
LABEL_24:
    if ((_DWORD)v166)
      goto LABEL_25;
    goto LABEL_35;
  }
LABEL_34:
  sub_100016904(v85 + v86[16], &qword_1001BF0A0);
  if ((v166 & 1) != 0)
  {
LABEL_25:
    (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v85 + v86[17], v155);
    if ((v163 & 1) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_35:
  if ((_DWORD)v163)
LABEL_36:
    (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v85 + v86[18], v154);
LABEL_37:
  sub_100023114();
}

uint64_t sub_100021E0C()
{
  char *v0;

  return sub_10001EDB0(*v0);
}

uint64_t sub_100021E14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10001ECCC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100021E38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100022B48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100021E60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100022B48();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100021E88()
{
  _QWORD v0[9];

  Hasher.init(_seed:)(v0);
  sub_1000233CC();
  sub_1000232C0();
  sub_1000231EC();
}

uint64_t sub_100021EB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10001EE10(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100021ED8()
{
  return sub_10001EE9C();
}

uint64_t sub_100021EF0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static WeatherLocation.supportsSecureCoding.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100021F18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100022BC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100021F40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100022BC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100021F68(uint64_t a1, uint64_t a2)
{
  return sub_10001EC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t sub_100021F84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  char v5;

  result = sub_10001F06C();
  if (!v1)
  {
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5 & 1;
  }
  return result;
}

#error "100021FC4: call analysis failed (funcsize=7)"

BOOL sub_100021FD0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10001F518(*a1, *a2);
}

void sub_100021FDC()
{
  unsigned __int8 *v0;

  sub_10001F644(*v0);
}

void sub_100021FF4(uint64_t a1)
{
  char *v1;

  sub_10001F528(a1, *v1);
}

void sub_100021FFC()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(v1);
  sub_1000232C0();
  sub_1000231EC();
}

uint64_t sub_100022030()
{
  char *v0;

  return sub_10001F674(*v0);
}

uint64_t sub_100022038@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10001F54C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10002205C()
{
  return sub_10001EE9C();
}

uint64_t sub_100022078@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10001F63C();
  *a1 = result;
  return result;
}

uint64_t sub_10002209C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000224F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000220C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000224F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000220EC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  char v6;
  _OWORD v7[2];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_BYTE *)(a2 + 32);
  return sub_10001F42C((uint64_t)v5, (uint64_t)v7) & 1;
}

#error "10002214C: call analysis failed (funcsize=17)"

uint64_t sub_100022178(_QWORD *a1)
{
  return sub_10001F6AC(a1);
}

Swift::Int sub_1000221B0()
{
  unsigned __int8 *v0;

  return sub_100020B5C(*v0);
}

void sub_1000221B8(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10002044C(a1, *v1);
}

Swift::Int sub_1000221C0()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100022200()
{
  unsigned __int8 *v0;

  return sub_100020BA0(*v0);
}

uint64_t sub_100022208@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100020470(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10002222C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100020B54();
  *a1 = result;
  return result;
}

uint64_t sub_100022250(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100022354();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100022278(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100022354();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ConditionViewModel.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

void sub_1000222DC()
{
  sub_100016878(&qword_1001BF760, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
}

#error "100022310: call analysis failed (funcsize=5)"

void sub_10002231C()
{
  sub_100020D88();
}

_QWORD *sub_100022330(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100022354()
{
  unint64_t result;

  result = qword_1001BF770;
  if (!qword_1001BF770)
  {
    result = swift_getWitnessTable(&unk_10017AE24, &type metadata for CurrentObservationViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF770);
  }
  return result;
}

unint64_t sub_100022390()
{
  unint64_t result;

  result = qword_1001BF7B0;
  if (!qword_1001BF7B0)
  {
    result = swift_getWitnessTable(&unk_10017AB10, &type metadata for CurrentObservationViewModel.AirQuality);
    atomic_store(result, (unint64_t *)&qword_1001BF7B0);
  }
  return result;
}

uint64_t _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000223EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConditionViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100022430()
{
  unint64_t result;

  result = qword_1001BF7F8;
  if (!qword_1001BF7F8)
  {
    result = swift_getWitnessTable(&unk_10017AB38, &type metadata for CurrentObservationViewModel.AirQuality);
    atomic_store(result, (unint64_t *)&qword_1001BF7F8);
  }
  return result;
}

uint64_t sub_10002246C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CurrentObservationViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000224B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  sub_100016C78(a1, a2, a3);
  v4 = sub_1000231B0();
  v5(v4, v3);
  sub_100006338();
}

uint64_t sub_1000224D8(__int128 *a1, uint64_t a2)
{
  __int128 v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t sub_1000224F0()
{
  unint64_t result;

  result = qword_1001BF808;
  if (!qword_1001BF808)
  {
    result = swift_getWitnessTable(&unk_10017ADD4, &type metadata for CurrentObservationViewModel.AirQuality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF808);
  }
  return result;
}

unint64_t sub_10002252C()
{
  unint64_t result;

  result = qword_1001BF810;
  if (!qword_1001BF810)
  {
    result = swift_getWitnessTable(&unk_10017ADAC, &type metadata for CurrentObservationViewModel.AirQuality.Value);
    atomic_store(result, (unint64_t *)&qword_1001BF810);
  }
  return result;
}

unint64_t sub_100022568()
{
  unint64_t result;

  result = qword_1001BF820;
  if (!qword_1001BF820)
  {
    result = swift_getWitnessTable(&unk_10017AD84, &type metadata for CurrentObservationViewModel.AirQuality.Value);
    atomic_store(result, (unint64_t *)&qword_1001BF820);
  }
  return result;
}

void sub_1000225A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100016C78(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v3, v4, v5);
  sub_100006338();
}

uint64_t sub_1000225D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return sub_100006E58(a3, a4, a5 & 1);
  }
  return result;
}

uint64_t sub_100022620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return sub_100007458(a3, a4, a5 & 1);
  }
  return result;
}

void sub_100022668(unint64_t *a1)
{
  uint64_t v2;

  if (!*a1)
  {
    v2 = sub_100005DC4(&qword_1001BF090);
    atomic_store(sub_100016CCC(v2), a1);
  }
  sub_100006338();
}

_BYTE *sub_1000226A8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CurrentObservationViewModel.AirQuality.CodingKeys()
{
  return &type metadata for CurrentObservationViewModel.AirQuality.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CurrentObservationViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF0)
  {
    if (a2 + 16 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 16) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 17;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v5 = v6 - 17;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CurrentObservationViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_100022798 + 4 * byte_10017AA36[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1000227CC + 4 * byte_10017AA31[v4]))();
}

uint64_t sub_1000227CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000227D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000227DCLL);
  return result;
}

uint64_t sub_1000227E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000227F0);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1000227F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000227FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CurrentObservationViewModel.CodingKeys()
{
  return &type metadata for CurrentObservationViewModel.CodingKeys;
}

uint64_t destroy for CurrentObservationViewModel.AirQuality.Value(uint64_t a1)
{
  return sub_100007458(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s13WeatherWidget27CurrentObservationViewModelV10AirQualityV5ValueOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100006E58(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CurrentObservationViewModel.AirQuality.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100006E58(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_100007458(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for CurrentObservationViewModel.AirQuality.Value(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CurrentObservationViewModel.AirQuality.Value(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_100007458(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CurrentObservationViewModel.AirQuality.Value(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CurrentObservationViewModel.AirQuality.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000229A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000229AC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CurrentObservationViewModel.AirQuality.Value()
{
  return &type metadata for CurrentObservationViewModel.AirQuality.Value;
}

unint64_t sub_1000229CC()
{
  unint64_t result;

  result = qword_1001BF848;
  if (!qword_1001BF848)
  {
    result = swift_getWitnessTable(&unk_10017ACA4, &type metadata for CurrentObservationViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF848);
  }
  return result;
}

unint64_t sub_100022A0C()
{
  unint64_t result;

  result = qword_1001BF850;
  if (!qword_1001BF850)
  {
    result = swift_getWitnessTable(&unk_10017AD5C, &type metadata for CurrentObservationViewModel.AirQuality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF850);
  }
  return result;
}

unint64_t sub_100022A4C()
{
  unint64_t result;

  result = qword_1001BF858;
  if (!qword_1001BF858)
  {
    result = swift_getWitnessTable(&unk_10017ACCC, &type metadata for CurrentObservationViewModel.AirQuality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF858);
  }
  return result;
}

unint64_t sub_100022A8C()
{
  unint64_t result;

  result = qword_1001BF860;
  if (!qword_1001BF860)
  {
    result = swift_getWitnessTable(&unk_10017ACF4, &type metadata for CurrentObservationViewModel.AirQuality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF860);
  }
  return result;
}

unint64_t sub_100022ACC()
{
  unint64_t result;

  result = qword_1001BF868;
  if (!qword_1001BF868)
  {
    result = swift_getWitnessTable(&unk_10017AC14, &type metadata for CurrentObservationViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF868);
  }
  return result;
}

unint64_t sub_100022B0C()
{
  unint64_t result;

  result = qword_1001BF870;
  if (!qword_1001BF870)
  {
    result = swift_getWitnessTable(&unk_10017AC3C, &type metadata for CurrentObservationViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF870);
  }
  return result;
}

unint64_t sub_100022B48()
{
  unint64_t result;

  result = qword_1001BF890;
  if (!qword_1001BF890)
  {
    result = swift_getWitnessTable(&unk_10017B17C, &type metadata for CurrentObservationViewModel.AirQuality.Value.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF890);
  }
  return result;
}

unint64_t sub_100022B84()
{
  unint64_t result;

  result = qword_1001BF8A0;
  if (!qword_1001BF8A0)
  {
    result = swift_getWitnessTable(&unk_10017B12C, &type metadata for CurrentObservationViewModel.AirQuality.Value.CategoryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF8A0);
  }
  return result;
}

unint64_t sub_100022BC0()
{
  unint64_t result;

  result = qword_1001BF8A8;
  if (!qword_1001BF8A8)
  {
    result = swift_getWitnessTable(&unk_10017B0DC, &type metadata for CurrentObservationViewModel.AirQuality.Value.NumberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF8A8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ForecastEntry.Model.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s13WeatherWidget27CurrentObservationViewModelV10AirQualityV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100022CD0 + 4 * byte_10017AA40[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100022D04 + 4 * byte_10017AA3B[v4]))();
}

uint64_t sub_100022D04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022D0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100022D14);
  return result;
}

uint64_t sub_100022D20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100022D28);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100022D2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022D34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CurrentObservationViewModel.AirQuality.Value.CodingKeys()
{
  return &type metadata for CurrentObservationViewModel.AirQuality.Value.CodingKeys;
}

uint64_t sub_100022D5C()
{
  return 0;
}

ValueMetadata *type metadata accessor for CurrentObservationViewModel.AirQuality.Value.NumberCodingKeys()
{
  return &type metadata for CurrentObservationViewModel.AirQuality.Value.NumberCodingKeys;
}

uint64_t _s10CodingKeysOwet(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s13WeatherWidget27CurrentObservationViewModelV10AirQualityV5ValueO16NumberCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100022E04 + 4 * byte_10017AA45[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100022E24 + 4 * byte_10017AA4A[v4]))();
}

_BYTE *sub_100022E04(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100022E24(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100022E2C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100022E34(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100022E3C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100022E44(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CurrentObservationViewModel.AirQuality.Value.CategoryCodingKeys()
{
  return &type metadata for CurrentObservationViewModel.AirQuality.Value.CategoryCodingKeys;
}

unint64_t sub_100022E64()
{
  unint64_t result;

  result = qword_1001BF8C8;
  if (!qword_1001BF8C8)
  {
    result = swift_getWitnessTable(&unk_10017AF44, &type metadata for CurrentObservationViewModel.AirQuality.Value.CategoryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF8C8);
  }
  return result;
}

unint64_t sub_100022EA4()
{
  unint64_t result;

  result = qword_1001BF8D0;
  if (!qword_1001BF8D0)
  {
    result = swift_getWitnessTable(&unk_10017AFFC, &type metadata for CurrentObservationViewModel.AirQuality.Value.NumberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF8D0);
  }
  return result;
}

unint64_t sub_100022EE4()
{
  unint64_t result;

  result = qword_1001BF8D8;
  if (!qword_1001BF8D8)
  {
    result = swift_getWitnessTable(&unk_10017B0B4, &type metadata for CurrentObservationViewModel.AirQuality.Value.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF8D8);
  }
  return result;
}

unint64_t sub_100022F24()
{
  unint64_t result;

  result = qword_1001BF8E0;
  if (!qword_1001BF8E0)
  {
    result = swift_getWitnessTable(&unk_10017AF6C, &type metadata for CurrentObservationViewModel.AirQuality.Value.NumberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF8E0);
  }
  return result;
}

unint64_t sub_100022F64()
{
  unint64_t result;

  result = qword_1001BF8E8;
  if (!qword_1001BF8E8)
  {
    result = swift_getWitnessTable(&unk_10017AF94, &type metadata for CurrentObservationViewModel.AirQuality.Value.NumberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF8E8);
  }
  return result;
}

unint64_t sub_100022FA4()
{
  unint64_t result;

  result = qword_1001BF8F0;
  if (!qword_1001BF8F0)
  {
    result = swift_getWitnessTable(&unk_10017AEB4, &type metadata for CurrentObservationViewModel.AirQuality.Value.CategoryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF8F0);
  }
  return result;
}

unint64_t sub_100022FE4()
{
  unint64_t result;

  result = qword_1001BF8F8;
  if (!qword_1001BF8F8)
  {
    result = swift_getWitnessTable(&unk_10017AEDC, &type metadata for CurrentObservationViewModel.AirQuality.Value.CategoryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF8F8);
  }
  return result;
}

unint64_t sub_100023024()
{
  unint64_t result;

  result = qword_1001BF900;
  if (!qword_1001BF900)
  {
    result = swift_getWitnessTable(&unk_10017B024, &type metadata for CurrentObservationViewModel.AirQuality.Value.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF900);
  }
  return result;
}

unint64_t sub_100023064()
{
  unint64_t result;

  result = qword_1001BF908;
  if (!qword_1001BF908)
  {
    result = swift_getWitnessTable(&unk_10017B04C, &type metadata for CurrentObservationViewModel.AirQuality.Value.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BF908);
  }
  return result;
}

uint64_t sub_1000230C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 376) + 8))(*(_QWORD *)(v0 - 176), *(_QWORD *)(v0 - 192));
}

uint64_t sub_100023100()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void sub_10002310C(uint64_t a1)
{
  uint64_t *v1;

  sub_100016904(a1, v1);
}

uint64_t sub_10002312C(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

void sub_100023148(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000225A4(a1, a2, v2);
}

uint64_t sub_100023170()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 376) + 8))(*(_QWORD *)(v1 - 176), v0);
}

uint64_t sub_100023188@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 192));
}

uint64_t sub_100023190(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, *(_QWORD *)(v2 - 192), a1);
}

uint64_t sub_1000231A4()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1000231B0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000231C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(*(_QWORD *)(v2 - 152), a2, *(_QWORD *)(v2 - 192), *(_QWORD *)(v2 - 152), *(_QWORD *)(v2 - 384));
}

void sub_1000231E4(uint64_t a1)
{
  uint64_t *v1;

  sub_100016904(a1, v1);
}

uint64_t sub_100023204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100023214()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100023244@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 128) = a1;
  return KeyedEncodingContainer.encode(_:forKey:)(v2 - 128, v1);
}

uint64_t sub_10002326C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100023288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v1, v0);
}

uint64_t sub_10002329C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v2);
}

void sub_1000232A8(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 128) = a1;
}

Swift::Int sub_1000232C0()
{
  return Hasher._finalize()();
}

uint64_t sub_1000232C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

uint64_t sub_1000232D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_1000232E0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1000232E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

uint64_t sub_1000232F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 120) + 8))(a1, v1);
}

uint64_t sub_100023308(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_100023318@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 128) = a1;
  return 0;
}

uint64_t sub_100023324(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10002332C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002338C()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_100023394()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_1000233A4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000233BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return static Measurement.== infix<A, B>(_:_:)(a1, a2, v2, v2, v2);
}

void sub_1000233CC()
{
  Hasher._combine(_:)(0);
}

_QWORD *sub_1000233D8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_1000233F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return static Date.== infix(_:_:)(v2 + a1, v1 + a1);
}

uint64_t sub_100023404()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100023418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_100023420()
{
  uint64_t v0;

  return v0;
}

void sub_100023440(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

unint64_t sub_10002344C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_100022B84();
}

uint64_t sub_100023458()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100023460(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v2, v3);
}

uint64_t sub_10002346C()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_100023478@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t sub_10002348C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v3, v2);
}

uint64_t sub_100023498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000234A0()
{
  uint64_t v0;

  return _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(*(_QWORD **)(v0 - 184));
}

uint64_t sub_1000234A8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000234B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000234BC()
{
  return type metadata accessor for CloudAltitudeKind(0);
}

uint64_t sub_1000234C4()
{
  return type metadata accessor for Wind(0);
}

uint64_t sub_1000234CC()
{
  return type metadata accessor for UVIndex(0);
}

void sub_1000234D4(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[10];

  v13[6] = a1;
  v13[7] = a3;
  type metadata accessor for InstantWeatherViewModel(0);
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_10002325C();
  sub_100005D40(&qword_1001BF9B0);
  sub_1000230F4();
  __chkstk_darwin(v5);
  v6 = sub_10002539C();
  type metadata accessor for WeatherDataViewModel(v6);
  sub_1000230F4();
  v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v13[5] = (char *)v13 - v9;
  sub_100005D40(&qword_1001BF9B8);
  sub_1000230F4();
  __chkstk_darwin(v10);
  v11 = sub_1000253B8();
  type metadata accessor for ForecastEntry(v11);
  sub_1000230F4();
  __chkstk_darwin(v12);
  sub_10002325C();
  __asm { BR              X10 }
}

void sub_100023610()
{
  char v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  if (qword_1001BEE90 != -1)
    swift_once(&qword_1001BEE90, sub_100097BA8);
  v4 = sub_10002538C();
  sub_100025184(v4, (uint64_t)qword_1001D9FD8);
  sub_100025394();
  v5 = sub_1000253F8();
  if (sub_10002542C(v5))
  {
    v6 = (uint8_t *)sub_100025358(12);
    v7 = sub_100025358(32);
    *(_QWORD *)(v3 - 88) = v7;
    *(_DWORD *)v6 = 136446210;
    *(_BYTE *)(v3 - 96) = v0;
    v8 = String.init<A>(describing:)(v3 - 96, &type metadata for LocationState);
    v10 = v9;
    *(_QWORD *)(v3 - 96) = sub_10016EC84(v8, v9, (uint64_t *)(v3 - 88));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 96, v3 - 88, v6 + 4);
    swift_bridgeObjectRelease(v10);
    sub_10002544C((void *)&_mh_execute_header, v1, (os_log_type_t)v2, "Location state is not fresh; returning error refresh policy; state=%{public}s",
      v6);
    sub_100025444(v7);
    sub_10002534C(v7);
    sub_10002534C((uint64_t)v6);
  }

  sub_100023B74(*(_QWORD *)(v3 - 104), (unint64_t)v1, v2);
  sub_10001C770();
}

void sub_100023B74(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  os_log_type_t v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v52 = a2;
  v49 = a1;
  v56 = a3;
  v55 = type metadata accessor for Calendar.Component(0);
  v6 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v7 = sub_1000253D4();
  v8 = type metadata accessor for Calendar(v7);
  v53 = *(_QWORD *)(v8 - 8);
  v54 = v8;
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_10002325C();
  v12 = (v11 - v10);
  sub_100005D40(&qword_1001BF0A0);
  sub_1000230F4();
  __chkstk_darwin(v13);
  v14 = sub_1000253B8();
  v57 = type metadata accessor for Date(v14);
  v15 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  sub_100023150();
  v50 = v16;
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v48 - v19;
  __chkstk_darwin(v18);
  v51 = (char *)&v48 - v21;
  if (qword_1001BEE90 != -1)
    swift_once(&qword_1001BEE90, sub_100097BA8);
  v22 = sub_10002538C();
  v23 = sub_100025184(v22, (uint64_t)qword_1001D9FD8);
  sub_100025394();
  v24 = sub_1000253F8();
  if (os_log_type_enabled(v3, v24))
  {
    v25 = (uint8_t *)sub_100025358(2);
    *(_WORD *)v25 = 0;
    sub_100025384((void *)&_mh_execute_header, v3, v24, "About to compute error refresh policy. (5 min to next refresh).", v25);
    sub_10002534C((uint64_t)v25);
  }

  static Calendar.current.getter(v26);
  v27 = v55;
  v28 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for Calendar.Component.minute(_:), v55);
  Date.init()(v28);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v5, 5, v20, 0);
  v29 = v57;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v57);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v27);
  (*(void (**)(NSObject *, uint64_t))(v53 + 8))(v12, v54);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v4, 1, v29) == 1)
  {
    sub_100016904(v4, &qword_1001BF0A0);
    v31 = (void *)Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (sub_100025374(v32))
    {
      v33 = (_WORD *)sub_100025358(2);
      sub_100025420(v33);
      sub_100025360((void *)&_mh_execute_header, v34, v35, "Failed to compute error refresh policy, returning .atEnd");
      sub_10002534C(v23);
    }

    static TimelineReloadPolicy.atEnd.getter(v36);
  }
  else
  {
    v37 = (uint64_t)v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v51, v4, v29);
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    v39 = v50;
    v38(v50, v37, v29);
    v40 = v52;
    v41 = swift_bridgeObjectRetain_n(v52, 2);
    Logger.logObject.getter(v41);
    v42 = sub_1000253F0();
    if (sub_100025410(v42))
    {
      v43 = sub_100025358(22);
      v55 = sub_100025358(64);
      v59 = v55;
      *(_DWORD *)v43 = 136446466;
      sub_100025310(&qword_1001BF9C0, (uint64_t)&protocol conformance descriptor for Date);
      v45 = dispatch thunk of CustomStringConvertible.description.getter(v57, v44);
      v58 = sub_10016EC84(v45, v46, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v43 + 4);
      sub_10002548C();
      sub_10002543C(v39);
      *(_WORD *)(v43 + 12) = 2080;
      swift_bridgeObjectRetain(v40);
      v58 = sub_10016EC84(v49, v40, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v43 + 14);
      sub_100025480();
      _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v20, "Reloading .after(%{public}s) 5 minutes from now) for %s", (uint8_t *)v43, 0x16u);
      v47 = v55;
      swift_arrayDestroy(v55, 2);
      sub_10002534C(v47);
      sub_10002534C(v43);

    }
    else
    {
      sub_10002543C(v39);

      swift_bridgeObjectRelease_n(v40, 2);
    }
    static TimelineReloadPolicy.after(_:)(v37);
    sub_10002543C(v37);
  }
  sub_10001C770();
}

uint64_t sub_100023FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_10002546C();
  v4 = type metadata accessor for ForecastEntry(v3);
  v5 = v4;
  if (v2)
  {
    v6 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
    sub_10000F7C4(v1 + ((v6 + 32) & ~v6), v0, type metadata accessor for ForecastEntry);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return sub_100016B44(v0, v7, 1, v5);
}

uint64_t sub_100024020()
{
  return sub_100024044();
}

uint64_t sub_10002402C()
{
  return sub_100024044();
}

uint64_t sub_100024038()
{
  return sub_100024044();
}

uint64_t sub_100024044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_10002546C();
  v5 = v4(v3);
  v6 = v5;
  if (v2)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v0, v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)), v5);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return sub_100016B44(v0, v7, 1, v6);
}

unint64_t sub_1000240A8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  void (*v36)(char *, uint64_t, __n128);
  uint64_t v37;
  unint64_t result;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  double v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  double v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  NSObject *v55;
  unint64_t v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;

  v72 = a2;
  v73 = a4;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v78 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v71 - v11;
  v13 = __chkstk_darwin(v10);
  v82 = (char *)&v71 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v71 - v16;
  v18 = __chkstk_darwin(v15);
  v81 = (char *)&v71 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v71 - v20;
  if (qword_1001BEE90 != -1)
    swift_once(&qword_1001BEE90, sub_100097BA8);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_100025184(v22, (uint64_t)qword_1001D9FD8);
  v24 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v77 = a1;
  v75 = v24;
  v25 = ((uint64_t (*)(char *, char *, uint64_t))v24)(v21, a1, v6);
  v76 = v23;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  v28 = os_log_type_enabled(v26, v27);
  v74 = v12;
  v79 = a3;
  if (v28)
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v84 = v30;
    *(_DWORD *)v29 = 136315138;
    v71 = v29 + 4;
    sub_100025310(&qword_1001BF9C0, (uint64_t)&protocol conformance descriptor for Date);
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v6, v31);
    v34 = v33;
    v83 = sub_10016EC84(v32, v33, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v71);
    v35 = swift_bridgeObjectRelease(v34);
    v36 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
    v36(v21, v6, v35);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "About to compute refresh policy for interpolated location. expirationDate=%s", v29, 0xCu);
    swift_arrayDestroy(v30, 1);
    v37 = v30;
    v12 = v74;
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    v36 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
    ((void (*)(char *, uint64_t))v36)(v21, v6);
  }

  result = sub_1000251F4(0x15uLL);
  v39 = 60 * (result - 5);
  v41 = v81;
  v40 = v82;
  v42 = v80;
  v43 = v78;
  if ((unsigned __int128)((uint64_t)(result - 5) * (__int128)60) >> 64 != v39 >> 63)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v44 = (double)v39;
  static Date.now.getter(result);
  static Date.+ infix(_:_:)(v17, 900.0);
  ((void (*)(char *, uint64_t))v36)(v17, v6);
  sub_100025310((unint64_t *)&qword_1001BF9C8, (uint64_t)&protocol conformance descriptor for Date);
  v45 = v77;
  if ((dispatch thunk of static Comparable.>= infix(_:_:)(v41, v77, v6, v46) & 1) != 0)
  {
    v47 = v40;
    v48 = v41;
  }
  else
  {
    v47 = v40;
    v48 = v45;
  }
  v49 = v75;
  v75(v47, v48, v6);
  v50 = static Date.+ infix(_:_:)(v40, v44);
  static Date.now.getter(v50);
  v51 = Date.timeIntervalSince(_:)(v17);
  ((void (*)(char *, uint64_t))v36)(v17, v6);
  v49(v43, v12, v6);
  v52 = v42;
  swift_retain_n(v42, 2);
  v53 = v79;
  v54 = swift_bridgeObjectRetain_n(v79, 2);
  v55 = Logger.logObject.getter(v54);
  v56 = v53;
  v57 = static os_log_type_t.default.getter(v55);
  if (!os_log_type_enabled(v55, v57))
  {
    ((void (*)(char *, uint64_t))v36)(v43, v6);

    swift_bridgeObjectRelease_n(v56, 2);
    swift_release_n(v52, 2);
    goto LABEL_16;
  }
  v58 = swift_slowAlloc(32, -1);
  v59 = swift_slowAlloc(96, -1);
  v84 = v59;
  *(_DWORD *)v58 = 136446722;
  sub_100025310(&qword_1001BF9C0, (uint64_t)&protocol conformance descriptor for Date);
  v61 = dispatch thunk of CustomStringConvertible.description.getter(v6, v60);
  v63 = v62;
  v83 = sub_10016EC84(v61, v62, &v84);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v58 + 4);
  v64 = swift_bridgeObjectRelease(v63);
  result = ((uint64_t (*)(char *, uint64_t, __n128))v36)(v43, v6, v64);
  *(_WORD *)(v58 + 12) = 2080;
  if ((~*(_QWORD *)&v51 & 0x7FF0000000000000) == 0)
    goto LABEL_18;
  if (v51 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v51 < 9.22337204e18)
  {
    v65 = v80;
    v66 = sub_100024E9C((uint64_t)v51);
    v67 = v55;
    v69 = v68;
    v83 = sub_10016EC84(v66, v68, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v58 + 14);
    swift_release_n(v65, 2);
    swift_bridgeObjectRelease(v69);
    *(_WORD *)(v58 + 22) = 2080;
    v70 = v79;
    swift_bridgeObjectRetain(v79);
    v83 = sub_10016EC84(v72, v70, &v84);
    v41 = v81;
    v40 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v58 + 24);
    swift_bridgeObjectRelease_n(v70, 3);
    _os_log_impl((void *)&_mh_execute_header, v67, v57, "Reloading .after(%{public}s) (%s from now) for %s", (uint8_t *)v58, 0x20u);
    swift_arrayDestroy(v59, 3);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v58, -1, -1);

    v12 = v74;
LABEL_16:
    static TimelineReloadPolicy.after(_:)(v12);
    ((void (*)(char *, uint64_t))v36)(v12, v6);
    ((void (*)(char *, uint64_t))v36)(v40, v6);
    return ((uint64_t (*)(char *, uint64_t))v36)(v41, v6);
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1000246F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, NSObject *a3@<X2>, const char *a4@<X3>, void (*a5)(uint64_t)@<X4>, const char *a6@<X5>, uint64_t a7@<X8>)
{
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t refreshed;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  os_log_type_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  _WORD *v76;
  uint64_t v77;
  NSObject *v78;
  unint64_t v79;
  uint64_t v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void (*v87)(NSObject *, uint64_t);
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  NSObject *v91;
  const char *v93;
  uint64_t v94;
  const char *v95;
  unint64_t v96;
  char *v97;
  uint8_t *v98;
  NSObject *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119[2];

  v93 = a6;
  v108 = a5;
  v95 = a4;
  v117 = a3;
  v96 = a2;
  v94 = a1;
  v100 = a7;
  v10 = type metadata accessor for Calendar.Component(0);
  v109 = *(_QWORD *)(v10 - 8);
  v110 = v10;
  sub_1000230F4();
  __chkstk_darwin(v11);
  sub_1000230E0();
  v107 = v12;
  v106 = type metadata accessor for Calendar(0);
  v104 = *(_QWORD *)(v106 - 8);
  sub_1000230F4();
  __chkstk_darwin(v13);
  sub_1000230E0();
  v102 = v14;
  sub_100005D40(&qword_1001BF0A0);
  sub_1000230F4();
  __chkstk_darwin(v15);
  sub_1000230E0();
  v105 = v16;
  v116 = type metadata accessor for Date(0);
  v103 = *(_QWORD *)(v116 - 8);
  sub_1000230F4();
  __chkstk_darwin(v17);
  sub_100023150();
  v97 = v18;
  v20 = __chkstk_darwin(v19);
  v101 = (char *)&v93 - v21;
  __chkstk_darwin(v20);
  v99 = ((char *)&v93 - v22);
  refreshed = type metadata accessor for WidgetRefreshConfiguration(0);
  v114 = *(_QWORD *)(refreshed - 8);
  v115 = refreshed;
  sub_1000230F4();
  __chkstk_darwin(v24);
  v25 = sub_1000253D4();
  v113 = type metadata accessor for WidgetConfiguration(v25);
  v26 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  sub_10002325C();
  v29 = v28 - v27;
  v30 = type metadata accessor for AppConfiguration(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v32 = sub_10002539C();
  v33 = type metadata accessor for WidgetRefreshRange(v32);
  v111 = *(_QWORD *)(v33 - 8);
  v112 = v33;
  sub_1000230F4();
  __chkstk_darwin(v34);
  sub_10002325C();
  v37 = (v36 - v35);
  v38 = *((_QWORD *)v7 + 5);
  v39 = *((_QWORD *)v7 + 6);
  v98 = v7;
  sub_100022330((_QWORD *)v7 + 2, v38);
  v40 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v38, v39);
  AppConfiguration.widget.getter(v40);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v8, v30);
  WidgetConfiguration.refresh.getter(v41);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v29, v113);
  ((void (*)(uint64_t))v117)(v42);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v114 + 8))(v9, v115);
  v117 = v37;
  v44 = v37;
  v48 = WidgetRefreshRange.minimum.getter(v43);
  v49 = v48;
  if ((~*(_QWORD *)&v48 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v48 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v48 >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v44 = v117;
  v50 = WidgetRefreshRange.maximum.getter(v45, v46, v47);
  if ((~*(_QWORD *)&v50 & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v50 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v50 >= 9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v26 = (uint64_t)v49;
  v9 = (uint64_t)v50;
  if ((uint64_t)v50 >= (uint64_t)v49)
  {
    if (qword_1001BEE90 == -1)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  swift_once(&qword_1001BEE90, sub_100097BA8);
LABEL_9:
  v51 = sub_10002538C();
  v115 = sub_100025184(v51, (uint64_t)qword_1001D9FD8);
  sub_100025394();
  v52 = sub_1000253F8();
  if (sub_10002542C(v52))
  {
    v53 = (uint8_t *)sub_100025358(12);
    v54 = sub_100025358(32);
    v119[0] = v54;
    *(_DWORD *)v53 = 136446210;
    v55 = sub_10002527C(v26, v9);
    v57 = v56;
    v118 = sub_10016EC84(v55, v56, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v53 + 4);
    swift_bridgeObjectRelease(v57);
    sub_10002544C((void *)&_mh_execute_header, v44, (os_log_type_t)v29, v95, v53);
    sub_100025444(v54);
    sub_10002534C(v54);
    sub_10002534C((uint64_t)v53);
  }

  v58 = v116;
  v59 = v98;
  v60 = v97;
  v61 = sub_10002519C(v26, v9);
  v62 = v102;
  static Calendar.current.getter(v61);
  v64 = v109;
  v63 = v110;
  v65 = v107;
  v66 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v109 + 104))(v107, enum case for Calendar.Component.second(_:), v110);
  v67 = v101;
  v108(v66);
  v68 = v105;
  v114 = v61;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v65, v61, v67, 0);
  v69 = v103;
  v70 = v67;
  v71 = *(void (**)(char *, uint64_t))(v103 + 8);
  v71(v70, v58);
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v63);
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v62, v106);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v68, 1, v58) == 1)
  {
    sub_100016904(v68, &qword_1001BF0A0);
    v72 = v115;
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.error.getter();
    if (sub_100025374(v75))
    {
      v76 = (_WORD *)sub_100025358(2);
      sub_100025420(v76);
      sub_100025384((void *)&_mh_execute_header, v74, v72, v93, v59);
      sub_10002534C((uint64_t)v59);
    }

    static TimelineReloadPolicy.atEnd.getter(v77);
  }
  else
  {
    v78 = v99;
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v69 + 32))(v99, v68, v58);
    (*(void (**)(char *, NSObject *, uint64_t))(v69 + 16))(v60, v78, v58);
    swift_retain_n(v59, 2);
    v79 = v96;
    v80 = swift_bridgeObjectRetain_n(v96, 2);
    Logger.logObject.getter(v80);
    v81 = sub_1000253F0();
    if (sub_100025410(v81))
    {
      v82 = sub_100025358(32);
      v83 = sub_100025358(96);
      v119[0] = v83;
      *(_DWORD *)v82 = 136446722;
      sub_100025310(&qword_1001BF9C0, (uint64_t)&protocol conformance descriptor for Date);
      v85 = dispatch thunk of CustomStringConvertible.description.getter(v58, v84);
      v118 = sub_100025454(v85, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v82 + 4);
      sub_10002548C();
      v87 = (void (*)(NSObject *, uint64_t))v71;
      v71(v60, v116);
      *(_WORD *)(v82 + 12) = 2080;
      v88 = sub_100024E9C(v114);
      v118 = sub_100025454(v88, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v82 + 14);
      sub_100025460();
      sub_10002548C();
      *(_WORD *)(v82 + 22) = 2080;
      v90 = v96;
      swift_bridgeObjectRetain(v96);
      v118 = sub_10016EC84(v94, v90, v119);
      v58 = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v82 + 24);
      sub_100025480();
      _os_log_impl((void *)&_mh_execute_header, v78, (os_log_type_t)v64, "Reloading .after(%{public}s) (%s from now) for %s", (uint8_t *)v82, 0x20u);
      swift_arrayDestroy(v83, 3);
      sub_10002534C(v83);
      sub_10002534C(v82);

    }
    else
    {
      v87 = (void (*)(NSObject *, uint64_t))v71;
      v71(v60, v58);

      swift_bridgeObjectRelease_n(v79, 2);
      sub_100025460();
    }
    v91 = v99;
    static TimelineReloadPolicy.after(_:)(v99);
    v87(v91, v58);
  }
  return (*(uint64_t (**)(NSObject *, uint64_t))(v111 + 8))(v117, v112);
}

uint64_t sub_100024E9C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;

  if (a1 >= 60)
  {
    v4 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v1 = 0x736574756E696D20;
  }
  else
  {
    v4 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v1 = 0x73646E6F63657320;
  }
  v2 = 0xE800000000000000;
  String.append(_:)(*(Swift::String *)&v1);
  return v4;
}

void sub_100024F44(char a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v23;
  uint64_t v24;

  if (qword_1001BEE90 != -1)
    swift_once(&qword_1001BEE90, sub_100097BA8);
  v8 = sub_10002538C();
  sub_100025184(v8, (uint64_t)qword_1001D9FD8);
  v9 = sub_100025394();
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)sub_100025358(12);
    v12 = sub_100025358(32);
    v24 = v12;
    *(_DWORD *)v11 = 136446210;
    LOBYTE(v23) = a1;
    v13 = String.init<A>(describing:)(&v23, &type metadata for ForecastEntry.Error);
    v14 = a1;
    v15 = a2;
    v17 = v16;
    v23 = sub_10016EC84(v13, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v11 + 4);
    v18 = v17;
    a2 = v15;
    a1 = v14;
    swift_bridgeObjectRelease(v18);
    sub_10002544C((void *)&_mh_execute_header, v9, v10, "About to determine refresh policy for error entry: %{public}s", v11);
    sub_100025444(v12);
    sub_10002534C(v12);
    sub_10002534C((uint64_t)v11);
  }

  if (a1)
  {
    sub_100023B74(a2, a3, a4);
  }
  else
  {
    Logger.logObject.getter(v19);
    v20 = sub_1000253F8();
    if (os_log_type_enabled(v4, v20))
    {
      v21 = (uint8_t *)sub_100025358(2);
      *(_WORD *)v21 = 0;
      sub_100025384((void *)&_mh_execute_header, v4, v20, "Returning policy: .never for error: .locationPermissionDenied", v21);
      sub_10002534C((uint64_t)v21);
    }

    static TimelineReloadPolicy.never.getter();
  }
}

uint64_t LocalSearchRequestService.__deallocating_deinit()
{
  uint64_t v0;

  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for RefreshPolicyProvider()
{
  return objc_opt_self(_TtC13WeatherWidget21RefreshPolicyProvider);
}

uint64_t sub_100025184(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10002519C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a2 - a1 != -1)
    return sub_1000251F4(a2 - a1 + 1) + a1;
  v3 = 0;
  swift_stdlib_random(&v3, 8);
  return v3;
}

unint64_t sub_1000251F4(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002527C(uint64_t a1, uint64_t a2)
{
  Swift::String v2;
  _QWORD v4[2];
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = a1;
  v4[0] = 0;
  v4[1] = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)(&v6, v4, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._countAndFlagsBits = 3026478;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)(&v5, v4, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v4[0];
}

void sub_100025310(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for Date(255);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }
  sub_100006338();
}

uint64_t sub_10002534C(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

uint64_t sub_100025358(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

void sub_100025360(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

BOOL sub_100025374(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_100025384(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

uint64_t sub_10002538C()
{
  return type metadata accessor for Logger(0);
}

uint64_t sub_100025394()
{
  return Logger.logObject.getter();
}

uint64_t sub_10002539C()
{
  return 0;
}

uint64_t sub_1000253B8()
{
  return 0;
}

uint64_t sub_1000253D4()
{
  return 0;
}

uint64_t sub_1000253F0()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_1000253F8()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_100025400(uint64_t a1, unint64_t a2, NSObject *a3, const char *a4, void (*a5)(uint64_t), const char *a6)
{
  uint64_t v6;
  uint64_t v7;

  return sub_1000246F4(*(_QWORD *)(v7 - 104), a2, a3, a4, a5, a6, v6);
}

BOOL sub_100025410(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

_WORD *sub_100025420(_WORD *result)
{
  *result = 0;
  return result;
}

BOOL sub_10002542C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10002543C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_100025444(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1);
}

void sub_10002544C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t sub_100025454(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10016EC84(a1, a2, (uint64_t *)(v2 - 112));
}

uint64_t sub_100025460()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_10002546C()
{
  return 0;
}

uint64_t sub_100025480()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

uint64_t sub_10002548C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t *initializeBufferWithCopyOfBuffer for EventViewModelFactory(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for EventViewModelFactory(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for EventViewModelFactory(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

_QWORD *initializeWithTake for EventViewModelFactory(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *assignWithTake for EventViewModelFactory(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventViewModelFactory(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 8))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventViewModelFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventViewModelFactory()
{
  return &type metadata for EventViewModelFactory;
}

_QWORD *sub_1000255C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (**v98)(uint64_t, uint64_t);
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  size_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (**v134)(uint64_t *, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  char v147;
  char *v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t (*v169)(uint64_t, _QWORD);
  uint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t);
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  int *v183;
  _BYTE *v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void (*v193)(uint64_t, uint64_t);
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t (*v233)(uint64_t, uint64_t);
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  _BYTE *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  void (**v266)(uint64_t *, uint64_t);
  uint64_t v267;
  int *v268;
  uint64_t v269;
  uint64_t v270;
  void (*v271)(uint64_t *, uint64_t);
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  void (*v275)(uint64_t, uint64_t);
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281[2];
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD v286[3];
  uint64_t v287;
  uint64_t v288;
  char v289[8];
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;

  v286[2] = a4;
  v287 = a2;
  v276 = a3;
  v286[1] = a1;
  v4 = type metadata accessor for WeatherChanges(0);
  sub_10002886C(v4, (uint64_t)&v291);
  v253 = v5;
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_1000230E0();
  sub_100023440(v7);
  v8 = sub_100005D40(&qword_1001BF9D0);
  v281[0] = *(_QWORD *)(v8 - 8);
  v281[1] = v8;
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_1000230E0();
  v280 = v10;
  sub_100005D40(&qword_1001BF9D8);
  sub_1000230F4();
  __chkstk_darwin(v11);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v12);
  sub_100023434();
  v279 = v13;
  sub_100005D40(&qword_1001BF9E0);
  sub_1000230F4();
  __chkstk_darwin(v14);
  sub_1000230E0();
  v16 = sub_1000232E8(v15);
  v272 = type metadata accessor for MinuteCondition(v16);
  v270 = *(_QWORD *)(v272 - 8);
  sub_1000230F4();
  __chkstk_darwin(v17);
  sub_1000230E0();
  sub_100023440(v18);
  sub_100005D40(&qword_1001BF9E8);
  sub_1000230F4();
  __chkstk_darwin(v19);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v20);
  sub_100023434();
  v273 = (_QWORD *)v21;
  v285 = sub_100005D40(&qword_1001BF9F0);
  v274 = *(_QWORD *)(v285 - 8);
  sub_1000230F4();
  __chkstk_darwin(v22);
  sub_1000230E0();
  v282 = v23;
  v24 = type metadata accessor for WeatherMetadata(0);
  sub_10002886C(v24, (uint64_t)v281);
  v249 = v25;
  sub_1000230F4();
  __chkstk_darwin(v26);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v27);
  sub_100023434();
  v29 = sub_1000232E8(v28);
  v30 = type metadata accessor for WeatherSeverity(v29);
  sub_10002886C(v30, (uint64_t)&v273);
  v243 = v31;
  sub_1000230F4();
  __chkstk_darwin(v32);
  sub_1000230E0();
  v34 = sub_1000232E8(v33);
  v35 = type metadata accessor for EventViewModel(v34);
  sub_10002886C(v35, (uint64_t)&v292);
  v269 = v36;
  sub_1000230F4();
  __chkstk_darwin(v37);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v38);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v39);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v40);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v41);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v42);
  sub_100023434();
  sub_100023440(v43);
  sub_100005D40(&qword_1001BF9F8);
  sub_1000230F4();
  __chkstk_darwin(v44);
  sub_1000230E0();
  v46 = sub_1000232E8(v45);
  v47 = type metadata accessor for WeatherAlert(v46);
  sub_10002886C(v47, (uint64_t)v289);
  v259 = v48;
  sub_1000230F4();
  __chkstk_darwin(v49);
  sub_1000230E0();
  v51 = sub_1000232E8(v50);
  v52 = type metadata accessor for WeatherAlert.Prominence(v51);
  sub_10002886C(v52, (uint64_t)v286);
  v255 = v53;
  sub_1000230F4();
  __chkstk_darwin(v54);
  sub_1000230E0();
  sub_100023440(v55);
  sub_100005D40(&qword_1001BFA00);
  sub_1000230F4();
  __chkstk_darwin(v56);
  sub_100023150();
  v283 = v57;
  __chkstk_darwin(v58);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v59);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v60);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v61);
  v63 = (uint64_t *)((char *)&v239 - v62);
  v64 = type metadata accessor for Calendar.Component(0);
  v65 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  sub_10002325C();
  v68 = v67 - v66;
  sub_100005D40(&qword_1001BF0A0);
  sub_1000230F4();
  __chkstk_darwin(v69);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v70);
  sub_1000232B4();
  sub_10002875C();
  __chkstk_darwin(v71);
  v73 = (char *)&v239 - v72;
  v74 = type metadata accessor for Date(0);
  v75 = *(_QWORD *)(v74 - 8);
  v76 = __chkstk_darwin(v74);
  v78 = (char *)&v239 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v76);
  v80 = (char *)&v239 - v79;
  v81 = type metadata accessor for Calendar(0);
  v277 = *(_QWORD *)(v81 - 8);
  v278 = v81;
  sub_1000230F4();
  __chkstk_darwin(v82);
  sub_10002325C();
  v85 = v84 - v83;
  static Calendar.currentCalendar(with:)(v287);
  v86 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v65 + 104))(v68, enum case for Calendar.Component.minute(_:), v64);
  static Date.now.getter(v86);
  v87 = v276;
  v276 = v85;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v68, v87, v78, 0);
  v88 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
  v251 = v78;
  v275 = v88;
  v88((uint64_t)v78, v74);
  sub_1000287E0(v68, *(uint64_t (**)(uint64_t, uint64_t))(v65 + 8));
  v89 = sub_10002879C((uint64_t)v73, 1, v74);
  v284 = v74;
  v245 = v75;
  if (v121)
  {
    static Date.now.getter(v89);
    sub_1000286D0((uint64_t)v73, &qword_1001BF0A0);
  }
  else
  {
    v90 = (*(uint64_t (**)(char *, char *, uint64_t))(v75 + 32))(v80, v73, v74);
  }
  v91 = WeatherDataModel.weatherAlerts.getter(v90);
  v92 = v287;
  v286[0] = v80;
  WeatherEventDescriptionStringBuilder.buildSevereString(from:timeZone:date:)(v91, v287, v80);
  v93 = swift_bridgeObjectRelease(v91);
  v94 = type metadata accessor for WeatherEventDescription(0, v93);
  sub_100028780((uint64_t)v63);
  if (v121)
  {
    sub_1000286D0((uint64_t)v63, &qword_1001BFA00);
    v95 = _swiftEmptyArrayStorage;
    v96 = v285;
    v97 = v286[0];
LABEL_16:
    v112 = v283;
    goto LABEL_17;
  }
  v98 = *(uint64_t (***)(uint64_t, uint64_t))(v94 - 8);
  v99 = v98[11]((uint64_t)v63, v94);
  v96 = v285;
  if (v99 != enum case for WeatherEventDescription.severeWeather(_:))
  {
    sub_1000287E0((uint64_t)v63, v98[1]);
    v95 = _swiftEmptyArrayStorage;
LABEL_15:
    v97 = v286[0];
    goto LABEL_16;
  }
  v100 = sub_1000287E0((uint64_t)v63, v98[12]);
  v102 = *v63;
  v101 = v63[1];
  v103 = WeatherDataModel.weatherAlerts.getter(v100);
  if (!v103)
  {
    sub_1000287D8();
    goto LABEL_14;
  }
  v104 = v103;
  v105 = v255;
  v106 = v254;
  v107 = v256;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v255 + 104))(v254, enum case for WeatherAlert.Prominence.high(_:), v256);
  v108 = Array<A>.alerts(prominence:)(v106, v104);
  v109 = swift_bridgeObjectRelease(v104);
  (*(void (**)(uint64_t, uint64_t, __n128))(v105 + 8))(v106, v107, v109);
  sub_1000288B4();
  sub_100024020();
  swift_bridgeObjectRelease(v108);
  v110 = v261;
  sub_10002879C(v107, 1, v261);
  if (v121)
  {
    v111 = sub_1000287D8();
    sub_1000288AC(v111, &qword_1001BF9F8);
LABEL_14:
    v95 = _swiftEmptyArrayStorage;
    goto LABEL_15;
  }
  v256 = v94;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v259 + 32))(v258, v107, v110);
  sub_1000288B4();
  WeatherAlert.severity.getter();
  v257 = sub_100026834(v107);
  v168 = sub_1000288D0();
  sub_100028948(v168, v169);
  sub_1000288B4();
  v170 = ((uint64_t (*)(void))WeatherAlert.metadata.getter)();
  v171 = v246;
  WeatherMetadata.date.getter(v170);
  v172 = *(void (**)(uint64_t, uint64_t))(v249 + 8);
  v173 = v250;
  v172(v107, v250);
  sub_100028920();
  v174 = v284;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v175, v176, v177, v284);
  v178 = v247;
  v179 = _s13WeatherWidget20WeatherDataViewModelOwst_0(v247, 1, 1, v174);
  v180 = v244;
  v181 = WeatherAlert.metadata.getter(v179);
  v182 = v251;
  WeatherMetadata.expirationDate.getter(v181);
  v172(v180, v173);
  v183 = v268;
  v184 = v260;
  v185 = sub_10002892C();
  sub_100028878(v185);
  *v184 = 2;
  v184[1] = v257;
  sub_100027230(v171, (uint64_t)&v184[v183[6]]);
  sub_100027230(v178, (uint64_t)&v184[v183[7]]);
  (*(void (**)(_BYTE *, char *, uint64_t))(v245 + 32))(&v184[v183[8]], v182, v174);
  v186 = &v184[v183[9]];
  *v186 = v102;
  v186[1] = v101;
  v187 = &v184[v183[10]];
  *v187 = v102;
  v187[1] = v101;
  v188 = &v184[v183[11]];
  *v188 = v102;
  v188[1] = v101;
  *(_QWORD *)&v184[v183[12]] = 0;
  sub_10002893C((uint64_t)v184, type metadata accessor for EventViewModel, (uint64_t)&v275);
  sub_1000288E0();
  sub_10006F84C(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  v95 = v189;
  v190 = v189[3];
  v97 = v286[0];
  if (v189[2] >= v190 >> 1)
  {
    sub_100028840(v190);
    v95 = v236;
  }
  v112 = v283;
  v96 = v285;
  v92 = v287;
  sub_1000287B0();
  sub_1000288F4(v174, v191);
  sub_1000288FC((uint64_t)v260);
  sub_100028948(v258, *(uint64_t (**)(uint64_t, _QWORD))(v259 + 8));
  v94 = v256;
LABEL_17:
  v113 = (uint64_t)v273;
  ((void (*)(void))WeatherDataModel.minuteForecast.getter)();
  sub_10002879C(v113, 1, v96);
  if (v121)
  {
    v114 = &qword_1001BF9E8;
    v115 = v113;
LABEL_23:
    sub_1000286D0(v115, v114);
    goto LABEL_24;
  }
  v116 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v274 + 32))(v282, v113, v96);
  v117 = Forecast<>.conditions.getter(v116);
  __chkstk_darwin(v117);
  *(&v239 - 2) = v97;
  v288 = sub_100026AD8((uint64_t (*)(_QWORD))sub_100027194, (uint64_t)(&v239 - 4), v118);
  swift_bridgeObjectRetain(v288);
  sub_1000271B0((size_t *)&v288);
  sub_1000287D8();
  v119 = v288;
  v120 = (uint64_t)v271;
  sub_10002402C();
  swift_release(v119);
  sub_10002879C(v120, 1, v272);
  if (v121)
  {
    sub_100028858(v282, *(uint64_t (**)(uint64_t, uint64_t))(v274 + 8));
    v114 = &qword_1001BF9E0;
    v115 = v120;
    goto LABEL_23;
  }
  v273 = v95;
  v133 = v270;
  v134 = v266;
  v135 = sub_1000288EC((uint64_t)v266, v120, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v270 + 32));
  v136 = v94;
  v137 = v92;
  v138 = v267;
  WeatherDataModel.minuteForecast.getter(v135);
  v139 = v97;
  v140 = v262;
  v141 = v137;
  v94 = v136;
  WeatherEventDescriptionStringBuilder.buildLongNextHourString(from:timeZone:date:)(v138, v141, v139);
  v142 = (uint64_t *)v140;
  sub_1000286D0(v138, &qword_1001BF9E8);
  sub_100028780(v140);
  if (v143)
  {
    (*(void (**)(_QWORD *, uint64_t))(v133 + 8))(v134, v272);
    sub_100028858(v282, *(uint64_t (**)(uint64_t, uint64_t))(v274 + 8));
    sub_1000286D0(v140, &qword_1001BFA00);
    v95 = v273;
    v97 = v286[0];
    v92 = v287;
    goto LABEL_24;
  }
  v159 = v272;
  v160 = *(_QWORD *)(v94 - 8);
  v161 = sub_100028918((uint64_t)v142);
  if (v161 != enum case for WeatherEventDescription.nextHourPrecipitation(_:))
  {
    v192 = sub_1000288D0();
    v193(v192, v159);
    sub_10002876C();
    sub_1000287E0((uint64_t)v142, *(uint64_t (**)(uint64_t, uint64_t))(v160 + 8));
    v92 = v287;
    v95 = v273;
    v97 = v286[0];
    goto LABEL_24;
  }
  v162 = v161;
  v261 = v160;
  v271 = *(void (**)(uint64_t *, uint64_t))(v160 + 96);
  v271(v142, v94);
  v163 = v142[1];
  sub_100028904(*v142);
  WeatherDataModel.minuteForecast.getter(v164);
  v165 = v242;
  v97 = v286[0];
  v166 = WeatherEventDescriptionStringBuilder.buildShortNextHourString(from:date:)(v112, v286[0]);
  v167 = (uint64_t *)v165;
  sub_100028934(v166, &qword_1001BF9E8);
  sub_100028780(v165);
  if (v121)
  {
    sub_100028950();
    sub_1000287E8();
    sub_10002876C();
    sub_1000286D0(v165, &qword_1001BFA00);
LABEL_54:
    v92 = v287;
LABEL_55:
    v112 = v283;
    v95 = v273;
    goto LABEL_24;
  }
  v194 = v163;
  v195 = sub_100028918((uint64_t)v167);
  if (v195 != v162)
  {
    sub_1000287D8();
    sub_1000287E8();
    sub_10002876C();
    sub_1000287E0((uint64_t)v167, *(uint64_t (**)(uint64_t, uint64_t))(v261 + 8));
    goto LABEL_54;
  }
  sub_10002889C((uint64_t)v167);
  v196 = v167[1];
  sub_100028904(*v167);
  WeatherDataModel.minuteForecast.getter(v197);
  sub_1000288B4();
  v198 = WeatherEventDescriptionStringBuilder.buildTitleNextHourString(from:date:)(v112, v97);
  sub_100028934(v198, &qword_1001BF9E8);
  sub_100028780((uint64_t)v134);
  if (v121)
  {
    sub_100028950();
    sub_1000287D8();
    sub_100028804();
    v199 = sub_10002876C();
    sub_1000288AC(v199, &qword_1001BFA00);
LABEL_63:
    v92 = v287;
    v97 = v286[0];
    goto LABEL_55;
  }
  v200 = sub_100028918((uint64_t)v134);
  if (v200 != v162)
  {
    sub_100028950();
    sub_1000287D8();
    sub_100028804();
    sub_10002876C();
    v232 = sub_1000288D0();
    sub_1000287E0(v232, v233);
    goto LABEL_63;
  }
  v201 = sub_10002889C((uint64_t)v134);
  v271 = *v134;
  v267 = (uint64_t)v134[1];
  v202 = v246;
  MinuteCondition.date.getter(v201);
  sub_100028920();
  v203 = v284;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v204, v205, v206, v284);
  sub_1000288B4();
  Date.init()(v207);
  sub_100028920();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v208, v209, v210, v203);
  v211 = v248;
  v212 = Forecast.metadata.getter(v285);
  WeatherMetadata.expirationDate.getter(v212);
  v213 = sub_100028948(v211, *(uint64_t (**)(uint64_t, _QWORD))(v249 + 8));
  v261 = v196;
  v214 = v268;
  v215 = v241;
  MinuteCondition.shift.getter(v213);
  sub_10002892C();
  sub_100028920();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v216, v217, v218, v219);
  *(_WORD *)v215 = 1286;
  sub_100027230(v202, (uint64_t)&v215[v214[6]]);
  sub_100027230((uint64_t)v134, (uint64_t)&v215[v214[7]]);
  (*(void (**)(char *, char *, uint64_t))(v245 + 32))(&v215[v214[8]], v251, v203);
  v220 = &v215[v214[9]];
  v221 = v267;
  *(_QWORD *)v220 = v271;
  *((_QWORD *)v220 + 1) = v221;
  v222 = (uint64_t *)&v215[v214[10]];
  v223 = v261;
  *v222 = v262;
  v222[1] = v223;
  v224 = &v215[v214[11]];
  *(_QWORD *)v224 = v260;
  *((_QWORD *)v224 + 1) = v194;
  *(_QWORD *)&v215[v214[12]] = 0;
  v225 = v240;
  sub_10000F7C4((uint64_t)v215, v240, type metadata accessor for EventViewModel);
  if ((swift_isUniquelyReferenced_nonNull_native(v273) & 1) == 0)
  {
    sub_10006F84C(0, v273[2] + 1, 1, (uint64_t)v273);
    v273 = (_QWORD *)v237;
  }
  v227 = v273[2];
  v226 = v273[3];
  v92 = v287;
  v97 = v286[0];
  v112 = v283;
  v228 = v285;
  v229 = v270;
  if (v227 >= v226 >> 1)
  {
    sub_10006F84C(v226 > 1, v227 + 1, 1, (uint64_t)v273);
    v273 = (_QWORD *)v238;
  }
  v230 = (uint64_t)v273;
  v273[2] = v227 + 1;
  v231 = v225;
  v95 = (_QWORD *)v230;
  sub_1000288F4(v231, v230+ ((*(unsigned __int8 *)(v269 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v269 + 80))+ *(_QWORD *)(v269 + 72) * v227);
  sub_1000288FC((uint64_t)v241);
  (*(void (**)(_QWORD *, uint64_t))(v229 + 8))(v266, v272);
  (*(void (**)(uint64_t, uint64_t))(v274 + 8))(v282, v228);
LABEL_24:
  v122 = v279;
  v123 = ((uint64_t (*)(void))WeatherDataModel.weatherChanges.getter)();
  v124 = v280;
  WeatherDataModel.dailyForecast.getter(v123);
  WeatherEventDescriptionStringBuilder.buildChangeInConditionString(from:dailyForecast:timeZone:date:)(v122, v124, v92, v97);
  v125 = sub_100028860(v281[0]);
  sub_1000288AC(v125, &qword_1001BF9D8);
  sub_100028780((uint64_t)v112);
  if (v121)
  {
    sub_100028830();
    v126 = sub_1000288C0();
    sub_100028934(v126, &qword_1001BFA00);
  }
  else
  {
    v127 = *(_QWORD *)(v94 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v127 + 88))(v112, v94) == enum case for WeatherEventDescription.changeInCondition(_:))
    {
      v273 = v95;
      v128 = sub_1000287E0((uint64_t)v112, *(uint64_t (**)(uint64_t, uint64_t))(v127 + 96));
      v130 = *v112;
      v129 = v112[1];
      v131 = v263;
      WeatherDataModel.weatherChanges.getter(v128);
      v132 = v265;
      sub_10002879C(v131, 1, v265);
      if (v121)
      {
        sub_1000286D0(v131, &qword_1001BF9D8);
        v147 = 3;
      }
      else
      {
        v144 = v253;
        v145 = v252;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v253 + 32))(v252, v131, v132);
        v146 = sub_100026EF0(v145, v92);
        sub_100028858(v145, *(uint64_t (**)(uint64_t, uint64_t))(v144 + 8));
        v147 = v146 + 3;
      }
      v148 = v264;
      v149 = v268;
      v150 = v284;
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)&v264[v268[6]], 1, 1, v284);
      v151 = _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)&v148[v149[7]], 1, 1, v150);
      Date.init()(v151);
      v152 = sub_10002892C();
      sub_100028878(v152);
      *v148 = v147;
      v148[1] = 5;
      v153 = (uint64_t *)&v148[v149[9]];
      *v153 = v130;
      v153[1] = v129;
      v154 = (uint64_t *)&v148[v149[10]];
      *v154 = v130;
      v154[1] = v129;
      v155 = (uint64_t *)&v148[v149[11]];
      *v155 = v130;
      v155[1] = v129;
      *(_QWORD *)&v148[v149[12]] = 0;
      sub_10002893C((uint64_t)v148, type metadata accessor for EventViewModel, (uint64_t)&v290);
      sub_1000288E0();
      v95 = v273;
      if ((swift_isUniquelyReferenced_nonNull_native(v273) & 1) == 0)
      {
        sub_10006F84C(0, v95[2] + 1, 1, (uint64_t)v95);
        v95 = v234;
      }
      v156 = v95[3];
      if (v95[2] >= v156 >> 1)
      {
        sub_100028840(v156);
        v95 = v235;
      }
      sub_1000287B0();
      sub_1000288F4(v130, v157);
      sub_1000288FC((uint64_t)v148);
      sub_100028830();
      v275(v97, v150);
    }
    else
    {
      sub_100028830();
      sub_1000288C0();
      (*(void (**)(uint64_t *, uint64_t))(v127 + 8))(v112, v94);
    }
  }
  return v95;
}

uint64_t sub_100026834(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v8;

  v2 = type metadata accessor for WeatherSeverity(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for WeatherSeverity.minor(_:))
    return 0;
  if (v6 == enum case for WeatherSeverity.moderate(_:))
    return 1;
  if (v6 == enum case for WeatherSeverity.severe(_:))
    return 2;
  if (v6 == enum case for WeatherSeverity.extreme(_:))
    return 3;
  if (v6 != enum case for WeatherSeverity.unknown(_:))
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 4;
}

BOOL sub_100026950(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char v15;
  uint64_t v17;

  v3 = sub_100005D40(&qword_1001BF0A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v17 - v12;
  MinuteCondition.expirationDate.getter(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v5, 1, v6) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v10, v6);
    sub_1000286D0((uint64_t)v5, &qword_1001BF0A0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v5, v6);
  }
  v14 = sub_100028690();
  v15 = dispatch thunk of static Comparable.< infix(_:_:)(v13, a2, v6, v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  return (v15 & 1) == 0;
}

uint64_t sub_100026AD8(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;

  v27 = type metadata accessor for MinuteCondition(0);
  v7 = *(_QWORD *)(v27 - 8);
  v8 = __chkstk_darwin(v27);
  v26 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v12 = (char *)&v20 - v11;
  v13 = &_swiftEmptyArrayStorage;
  v28 = &_swiftEmptyArrayStorage;
  v25 = *(_QWORD *)(a3 + 16);
  if (v25)
  {
    v14 = 0;
    v22 = a2;
    v23 = a3;
    v21 = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v13 = *(void **)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, a3 + v15 + (_QWORD)v13 * v14, v27);
      v16 = a1(v12);
      if (v3)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v27);
        swift_bridgeObjectRelease(a3);
        swift_release(v28);
        return (uint64_t)v13;
      }
      if ((v16 & 1) != 0)
      {
        v24 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
        v24(v26, v12, v27);
        v17 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
        {
          sub_10012280C(0, v17[2] + 1, 1);
          v17 = v28;
        }
        v19 = v17[2];
        v18 = v17[3];
        if (v19 >= v18 >> 1)
        {
          sub_10012280C(v18 > 1, v19 + 1, 1);
          v17 = v28;
        }
        v17[2] = v19 + 1;
        result = ((uint64_t (*)(char *, char *, uint64_t))v24)((char *)v17 + v15 + v19 * (_QWORD)v13, v26, v27);
        v28 = v17;
        a3 = v23;
        a1 = v21;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v27);
      }
      if (v25 == ++v14)
      {
        v13 = v28;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v13;
  }
  return result;
}

void sub_100026CE8(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v23 = *(_QWORD *)(type metadata accessor for HourlyForecastViewModel(0) - 8);
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_100023150();
  v22 = v8;
  __chkstk_darwin(v9);
  v11 = (char *)v19 - v10;
  v24 = _swiftEmptyArrayStorage;
  v21 = *(_QWORD *)(a3 + 16);
  if (v21)
  {
    v12 = 0;
    v13 = _swiftEmptyArrayStorage;
    v19[1] = a2;
    v20 = a3;
    v19[0] = a1;
    while (v12 < *(_QWORD *)(a3 + 16))
    {
      v14 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      v15 = *(_QWORD *)(v23 + 72);
      sub_10000F7C4(a3 + v14 + v15 * v12, (uint64_t)v11, type metadata accessor for HourlyForecastViewModel);
      v16 = a1(v11);
      if (v3)
      {
        sub_100028728((uint64_t)v11, type metadata accessor for HourlyForecastViewModel);
        swift_release(v13);
        swift_bridgeObjectRelease(a3);
        return;
      }
      if ((v16 & 1) != 0)
      {
        sub_100011868((uint64_t)v11, v22, type metadata accessor for HourlyForecastViewModel);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
          sub_100122878(0, v13[2] + 1, 1);
        v13 = v24;
        v18 = v24[2];
        v17 = v24[3];
        if (v18 >= v17 >> 1)
        {
          sub_100122878(v17 > 1, v18 + 1, 1);
          v13 = v24;
        }
        v13[2] = v18 + 1;
        sub_100011868(v22, (uint64_t)v13 + v14 + v18 * v15, type metadata accessor for HourlyForecastViewModel);
        a3 = v20;
        a1 = (uint64_t (*)(char *))v19[0];
      }
      else
      {
        sub_100028728((uint64_t)v11, type metadata accessor for HourlyForecastViewModel);
      }
      if (v21 == ++v12)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
  }
}

uint64_t sub_100026EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = type metadata accessor for Date(0);
  v46 = *(_QWORD *)(v3 - 8);
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_10002325C();
  v7 = v6 - v5;
  sub_100005D40(&qword_1001BFA10);
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_10002325C();
  v11 = v10 - v9;
  v12 = type metadata accessor for WeatherChange(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  sub_100023434();
  v45 = v17;
  v18 = type metadata accessor for Calendar(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_1000230E0();
  v47 = v20;
  v21 = static Calendar.currentCalendar(with:)(a2);
  v22 = WeatherChanges.changes.getter(v21);
  v23 = v22;
  v24 = *(_QWORD *)(v22 + 16);
  if (v24)
  {
    v42 = v19;
    v43 = v11;
    v44 = v18;
    v25 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v41 = v22;
    v26 = v22 + v25;
    v27 = *(_QWORD *)(v13 + 72);
    v28 = v13;
    v29 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v13 + 16);
    while (1)
    {
      v30 = v29(v16, v26, v12);
      WeatherChange.date.getter(v30);
      v31 = Calendar.isDateInTomorrow(_:)(v7);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v7, v3);
      if ((v31 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v12);
      v26 += v27;
      if (!--v24)
      {
        v32 = 1;
        v13 = v28;
        v11 = v43;
        goto LABEL_8;
      }
    }
    v13 = v28;
    v11 = v43;
    sub_1000288EC(v43, (uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 32));
    v32 = 0;
LABEL_8:
    v23 = v41;
  }
  else
  {
    v32 = 1;
  }
  v33 = v45;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v11, v32, 1, v12);
  swift_bridgeObjectRelease(v23);
  sub_10002879C(v11, 1, v12);
  if (v34)
  {
    v35 = sub_100028820();
    sub_1000288AC(v35, &qword_1001BFA10);
    return 0;
  }
  else
  {
    v37 = sub_1000288EC(v33, v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32));
    if (WeatherChange.dayPrecipitationAmount.getter(v37))
    {
      v38 = WeatherChange.highTemperature.getter();
      v39 = static WeatherChange.Direction.== infix(_:_:)(v38, 2);
      sub_10002888C();
      sub_100028820();
      if ((v39 & 1) != 0)
        return 0;
      else
        return 2;
    }
    else
    {
      sub_10002888C();
      sub_100028820();
      return 1;
    }
  }
}

BOOL sub_100027194(uint64_t a1)
{
  uint64_t v1;

  return sub_100026950(a1, *(_QWORD *)(v1 + 16));
}

void sub_1000271B0(size_t *a1)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = *(_QWORD *)(type metadata accessor for MinuteCondition(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = sub_100028678(v3);
  v4 = *(_QWORD *)(v3 + 16);
  v5[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_100027278((int64_t)v5);
  *a1 = v3;
}

uint64_t sub_100027230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001BF0A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100027278(int64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  unint64_t v16;
  void (*v17)(void);
  char *v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  char *v22;
  void (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  Swift::Int v37;
  Swift::Int v38;
  char *v39;
  void (*v40)(void);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  Swift::Int v60;
  char *v61;
  uint64_t v62;
  Swift::Int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  char *v78;
  uint64_t v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  char *v83;
  char *v84;
  void (*v85)(char *, char *, uint64_t);
  void (*v86)(void);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  void (*v93)(void);
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  char v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  Swift::Int v151;
  uint64_t v152;
  Swift::Int v153;
  char *v154;
  char *v155;
  void (*v156)(void);
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  void (*v161)(char *, uint64_t);
  void (*v162)(char *, uint64_t, uint64_t, char *);
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  _QWORD *v168;
  uint64_t v169;
  void (*v170)(void);
  char *v171;
  char *v172;
  Swift::Int v173;
  _QWORD *v174;

  v2 = v1;
  v166 = type metadata accessor for Date(0);
  v159 = *(_QWORD *)(v166 - 8);
  v4 = __chkstk_darwin(v166);
  v165 = (char *)&v147 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v164 = (char *)&v147 - v6;
  v169 = type metadata accessor for MinuteCondition(0);
  v174 = *(_QWORD **)(v169 - 8);
  v7 = __chkstk_darwin(v169);
  v155 = (char *)&v147 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v171 = (char *)&v147 - v10;
  v11 = __chkstk_darwin(v9);
  v163 = (char *)&v147 - v12;
  __chkstk_darwin(v11);
  v167 = (char *)&v147 - v13;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = _minimumMergeRunLength(_:)(v14);
  if (v15 >= v14)
  {
    if ((v14 & 0x8000000000000000) == 0)
    {
      if (v14)
        sub_100027D68(0, v14, 1, (_QWORD *)a1);
      return;
    }
    goto LABEL_140;
  }
  v151 = v15;
  v149 = sub_100122400(v14 / 2);
  v157 = v16;
  v150 = v14;
  if (v14 <= 0)
  {
LABEL_103:
    v18 = (char *)_swiftEmptyArrayStorage;
    v90 = _swiftEmptyArrayStorage[2];
LABEL_104:
    if (v90 < 2)
    {
LABEL_115:
      swift_bridgeObjectRelease(v18);
      if (v150 >= -1)
        goto LABEL_116;
      goto LABEL_144;
    }
    v140 = *(_QWORD *)a1;
    while (1)
    {
      a1 = v90 - 2;
      if (v90 < 2)
        break;
      if (!v140)
        goto LABEL_148;
      v141 = v18;
      v142 = *(_QWORD *)&v18[16 * a1 + 32];
      v143 = *(_QWORD *)&v18[16 * v90 + 24];
      sub_100028054(v140 + v174[9] * v142, v140 + v174[9] * *(_QWORD *)&v18[16 * v90 + 16], v140 + v174[9] * v143, v157);
      if (v2)
      {
        v139 = v141;
        goto LABEL_101;
      }
      if (v143 < v142)
        goto LABEL_135;
      if ((swift_isUniquelyReferenced_nonNull_native(v141) & 1) == 0)
        v141 = sub_100028664((uint64_t)v141);
      if ((unint64_t)a1 >= *((_QWORD *)v141 + 2))
        goto LABEL_136;
      v144 = &v141[16 * a1 + 32];
      *(_QWORD *)v144 = v142;
      *((_QWORD *)v144 + 1) = v143;
      v145 = *((_QWORD *)v141 + 2);
      if (v90 > v145)
        goto LABEL_137;
      memmove(&v141[16 * v90 + 16], &v141[16 * v90 + 32], 16 * (v145 - v90));
      v18 = v141;
      *((_QWORD *)v141 + 2) = v145 - 1;
      v90 = v145 - 1;
      if (v145 <= 2)
        goto LABEL_115;
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
    return;
  }
  v17 = 0;
  v18 = (char *)_swiftEmptyArrayStorage;
  v168 = (_QWORD *)a1;
  while (1)
  {
    v19 = (Swift::Int)v17;
    v20 = (Swift::Int)v17 + 1;
    v154 = v18;
    v156 = v17;
    if ((uint64_t)v17 + 1 < v14)
    {
      v152 = *(_QWORD *)a1;
      v21 = v152;
      v172 = (char *)v174[9];
      v22 = v172;
      v173 = (Swift::Int)v17 + 1;
      v23 = (void (*)(void))v174[2];
      v24 = v169;
      v23();
      v25 = v21 + (_QWORD)v22 * v19;
      v26 = v163;
      v170 = v23;
      v27 = ((uint64_t (*)(char *, uint64_t, uint64_t))v23)(v163, v25, v24);
      v28 = v164;
      v29 = MinuteCondition.date.getter(v27);
      v30 = v165;
      MinuteCondition.date.getter(v29);
      LODWORD(v162) = static Date.< infix(_:_:)(v28, v30);
      v31 = *(void (**)(char *, uint64_t))(v159 + 8);
      v32 = v166;
      v31(v30, v166);
      v33 = v28;
      v19 = (Swift::Int)v156;
      v161 = v31;
      v31(v33, v32);
      v34 = v172;
      v35 = (void (*)(char *, uint64_t))v174[1];
      v35(v26, v24);
      v160 = (char *)v35;
      v35(v167, v24);
      v20 = v19 + 2;
      if (v19 + 2 < v14)
      {
        v148 = v2;
        v158 = (_QWORD)v34 * v173;
        v36 = v152;
        v153 = (_QWORD)v34 * v20;
        while (1)
        {
          v37 = v14;
          v38 = v20;
          v39 = v167;
          v41 = v169;
          v40 = v170;
          ((void (*)(char *, uint64_t, uint64_t))v170)(v167, v36 + v153, v169);
          v42 = v163;
          v43 = ((uint64_t (*)(char *, uint64_t, uint64_t))v40)(v163, v36 + v158, v41);
          v44 = v164;
          v45 = MinuteCondition.date.getter(v43);
          v46 = v165;
          MinuteCondition.date.getter(v45);
          LODWORD(v173) = static Date.< infix(_:_:)(v44, v46);
          v47 = v46;
          v48 = v166;
          v49 = v161;
          v161(v47, v166);
          v49(v44, v48);
          v50 = (void (*)(char *, uint64_t))v160;
          ((void (*)(char *, uint64_t))v160)(v42, v41);
          v50(v39, v41);
          if (((v162 ^ v173) & 1) != 0)
            break;
          v20 = v38 + 1;
          v34 = v172;
          v36 += (uint64_t)v172;
          v14 = v37;
          if (v20 >= v37)
          {
            v20 = v37;
            a1 = (int64_t)v168;
            v2 = v148;
            v19 = (Swift::Int)v156;
            goto LABEL_11;
          }
        }
        a1 = (int64_t)v168;
        v2 = v148;
        v20 = v38;
        v19 = (Swift::Int)v156;
        v14 = v37;
        v34 = v172;
      }
LABEL_11:
      v18 = v154;
      if ((v162 & 1) != 0)
      {
        if (v20 < v19)
          goto LABEL_141;
        if (v19 < v20)
        {
          v161 = (void (*)(char *, uint64_t))v14;
          v51 = 0;
          v52 = (_QWORD)v34 * (v20 - 1);
          v53 = v20 * (_QWORD)v34;
          v54 = v19 * (_QWORD)v34;
          v170 = (void (*)(void))v20;
          do
          {
            if (v19 != v20 + v51 - 1)
            {
              v55 = v152;
              if (!v152)
                goto LABEL_147;
              v56 = v2;
              v57 = v152 + v54;
              v173 = v152 + v52;
              v58 = v169;
              v162 = (void (*)(char *, uint64_t, uint64_t, char *))v174[4];
              v162(v155, v152 + v54, v169, v18);
              if (v54 < v52 || v57 >= v55 + v53)
              {
                swift_arrayInitWithTakeFrontToBack(v55 + v54, v173, 1, v58);
                v34 = v172;
              }
              else
              {
                v34 = v172;
                if (v54 != v52)
                  swift_arrayInitWithTakeBackToFront(v57);
              }
              ((void (*)(Swift::Int, char *, uint64_t))v162)(v173, v155, v58);
              v18 = v154;
              v2 = v56;
              v20 = (Swift::Int)v170;
            }
            ++v19;
            --v51;
            v52 -= (uint64_t)v34;
            v53 -= (uint64_t)v34;
            v54 += (uint64_t)v34;
          }
          while (v19 < v20 + v51);
          a1 = (int64_t)v168;
          v19 = (Swift::Int)v156;
          v14 = (Swift::Int)v161;
        }
      }
    }
    if (v20 < v14)
    {
      if (__OFSUB__(v20, v19))
        goto LABEL_139;
      if (v20 - v19 < v151)
      {
        if (__OFADD__(v19, v151))
          goto LABEL_142;
        if (v19 + v151 >= v14)
          v60 = v14;
        else
          v60 = v19 + v151;
        if (v60 < v19)
          goto LABEL_143;
        if (v20 != v60)
        {
          v148 = v2;
          v61 = (char *)v174[9];
          v158 = v174[2];
          v62 = (_QWORD)v61 * (v20 - 1);
          v160 = v61;
          v63 = v20 * (_QWORD)v61;
          v64 = v169;
          v153 = v60;
          do
          {
            v65 = 0;
            v170 = (void (*)(void))v20;
            v161 = (void (*)(char *, uint64_t))v63;
            v162 = (void (*)(char *, uint64_t, uint64_t, char *))v62;
            while (1)
            {
              v66 = *(_QWORD *)a1;
              v172 = (char *)(v63 + v65);
              v173 = v19;
              v67 = (char *)(v63 + v65 + v66);
              v68 = v167;
              v69 = (uint64_t (*)(char *, uint64_t, uint64_t))v158;
              ((void (*)(char *, char *, uint64_t, char *))v158)(v167, v67, v64, v18);
              v70 = v62 + v65 + v66;
              v71 = (uint64_t *)a1;
              v72 = v163;
              v73 = v69(v163, v70, v64);
              v74 = v164;
              v75 = MinuteCondition.date.getter(v73);
              v76 = v165;
              MinuteCondition.date.getter(v75);
              LOBYTE(v66) = static Date.< infix(_:_:)(v74, v76);
              v77 = *(void (**)(char *, uint64_t))(v159 + 8);
              v78 = v76;
              v79 = v166;
              v77(v78, v166);
              v80 = v74;
              v64 = v169;
              v77(v80, v79);
              v81 = (void (*)(char *, uint64_t))v174[1];
              v81(v72, v64);
              v81(v68, v64);
              if ((v66 & 1) == 0)
                break;
              v82 = *v71;
              if (!*v71)
                goto LABEL_145;
              v63 = (Swift::Int)v161;
              v62 = (uint64_t)v162;
              v83 = (char *)v161 + v82 + v65;
              v84 = (char *)v162 + v82 + v65;
              v85 = (void (*)(char *, char *, uint64_t))v174[4];
              v85(v171, v83, v64);
              swift_arrayInitWithTakeFrontToBack(v83, v84, 1, v64);
              v85(v84, v171, v64);
              v65 -= (uint64_t)v160;
              v19 = v173 + 1;
              v86 = v170;
              a1 = (int64_t)v168;
              if (v170 == (void (*)(void))(v173 + 1))
                goto LABEL_44;
            }
            v86 = v170;
            a1 = (int64_t)v71;
            v63 = (Swift::Int)v161;
            v62 = (uint64_t)v162;
LABEL_44:
            v20 = (Swift::Int)v86 + 1;
            v62 += (uint64_t)v160;
            v63 += (Swift::Int)v160;
            v19 = (Swift::Int)v156;
          }
          while (v20 != v153);
          v20 = v153;
          v2 = v148;
          v18 = v154;
        }
      }
    }
    if (v20 < v19)
      goto LABEL_138;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v170 = (void (*)(void))v20;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      v18 = v154;
    else
      v18 = sub_100028574(0, *((_QWORD *)v154 + 2) + 1, 1, v154);
    v89 = *((_QWORD *)v18 + 2);
    v88 = *((_QWORD *)v18 + 3);
    v90 = v89 + 1;
    if (v89 >= v88 >> 1)
      v18 = sub_100028574((char *)(v88 > 1), v89 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v90;
    v91 = v18 + 32;
    v92 = &v18[16 * v89 + 32];
    v93 = v170;
    *(_QWORD *)v92 = v19;
    *((_QWORD *)v92 + 1) = v93;
    if (v89)
      break;
    v90 = 1;
LABEL_94:
    a1 = (int64_t)v168;
    v14 = v168[1];
    v17 = v170;
    if ((uint64_t)v170 >= v14)
      goto LABEL_104;
  }
  while (1)
  {
    v94 = v90 - 1;
    if (v90 >= 4)
    {
      v99 = &v91[16 * v90];
      v100 = *((_QWORD *)v99 - 8);
      v101 = *((_QWORD *)v99 - 7);
      v105 = __OFSUB__(v101, v100);
      v102 = v101 - v100;
      if (v105)
        goto LABEL_123;
      v104 = *((_QWORD *)v99 - 6);
      v103 = *((_QWORD *)v99 - 5);
      v105 = __OFSUB__(v103, v104);
      v97 = v103 - v104;
      v98 = v105;
      if (v105)
        goto LABEL_124;
      v106 = v90 - 2;
      v107 = &v91[16 * v90 - 32];
      v109 = *(_QWORD *)v107;
      v108 = *((_QWORD *)v107 + 1);
      v105 = __OFSUB__(v108, v109);
      v110 = v108 - v109;
      if (v105)
        goto LABEL_125;
      v105 = __OFADD__(v97, v110);
      v111 = v97 + v110;
      if (v105)
        goto LABEL_127;
      if (v111 >= v102)
      {
        v129 = &v91[16 * v94];
        v131 = *(_QWORD *)v129;
        v130 = *((_QWORD *)v129 + 1);
        v105 = __OFSUB__(v130, v131);
        v132 = v130 - v131;
        if (v105)
          goto LABEL_133;
        v122 = v97 < v132;
        goto LABEL_83;
      }
    }
    else
    {
      if (v90 != 3)
      {
        v123 = *((_QWORD *)v18 + 4);
        v124 = *((_QWORD *)v18 + 5);
        v105 = __OFSUB__(v124, v123);
        v116 = v124 - v123;
        v117 = v105;
        goto LABEL_77;
      }
      v96 = *((_QWORD *)v18 + 4);
      v95 = *((_QWORD *)v18 + 5);
      v105 = __OFSUB__(v95, v96);
      v97 = v95 - v96;
      v98 = v105;
    }
    if ((v98 & 1) != 0)
      goto LABEL_126;
    v106 = v90 - 2;
    v112 = &v91[16 * v90 - 32];
    v114 = *(_QWORD *)v112;
    v113 = *((_QWORD *)v112 + 1);
    v115 = __OFSUB__(v113, v114);
    v116 = v113 - v114;
    v117 = v115;
    if (v115)
      goto LABEL_128;
    v118 = &v91[16 * v94];
    v120 = *(_QWORD *)v118;
    v119 = *((_QWORD *)v118 + 1);
    v105 = __OFSUB__(v119, v120);
    v121 = v119 - v120;
    if (v105)
      goto LABEL_130;
    if (__OFADD__(v116, v121))
      goto LABEL_132;
    if (v116 + v121 >= v97)
    {
      v122 = v97 < v121;
LABEL_83:
      if (v122)
        v94 = v106;
      goto LABEL_85;
    }
LABEL_77:
    if ((v117 & 1) != 0)
      goto LABEL_129;
    v125 = &v91[16 * v94];
    v127 = *(_QWORD *)v125;
    v126 = *((_QWORD *)v125 + 1);
    v105 = __OFSUB__(v126, v127);
    v128 = v126 - v127;
    if (v105)
      goto LABEL_131;
    if (v128 < v116)
      goto LABEL_94;
LABEL_85:
    v133 = v94 - 1;
    if (v94 - 1 >= v90)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if (!*v168)
      goto LABEL_146;
    v134 = v18;
    v135 = (uint64_t *)&v91[16 * v133];
    v136 = *v135;
    v137 = &v91[16 * v94];
    a1 = *((_QWORD *)v137 + 1);
    sub_100028054(*v168 + v174[9] * *v135, *v168 + v174[9] * *(_QWORD *)v137, *v168 + v174[9] * a1, v157);
    if (v2)
      break;
    if (a1 < v136)
      goto LABEL_120;
    if (v94 > *((_QWORD *)v134 + 2))
      goto LABEL_121;
    *v135 = v136;
    *(_QWORD *)&v91[16 * v133 + 8] = a1;
    v138 = *((_QWORD *)v134 + 2);
    if (v94 >= v138)
      goto LABEL_122;
    v90 = v138 - 1;
    memmove(&v91[16 * v94], v137 + 16, 16 * (v138 - 1 - v94));
    v18 = v134;
    *((_QWORD *)v134 + 2) = v138 - 1;
    if (v138 <= 2)
      goto LABEL_94;
  }
  v139 = v134;
LABEL_101:
  swift_bridgeObjectRelease(v139);
  if (v150 < -1)
  {
    __break(1u);
    goto LABEL_103;
  }
LABEL_116:
  v146 = v149;
  *(_QWORD *)(v149 + 16) = 0;
  swift_bridgeObjectRelease(v146);
}

uint64_t sub_100027D68(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;

  v46 = a1;
  v7 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  v52 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v51 = (char *)&v44 - v10;
  v11 = type metadata accessor for MinuteCondition(0);
  v61 = *(_QWORD **)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v59 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v50 = (char *)&v44 - v15;
  result = __chkstk_darwin(v14);
  v49 = (char *)&v44 - v17;
  v58 = a3;
  v45 = a2;
  if (a3 != a2)
  {
    v18 = v61[9];
    v47 = (uint64_t (*)(char *, uint64_t, uint64_t))v61[2];
    v48 = v11;
    v19 = v18 * (v58 - 1);
    v55 = v18;
    v20 = v18 * v58;
    while (2)
    {
      v21 = 0;
      v62 = v46;
      v56 = v20;
      v57 = v19;
      do
      {
        v22 = *a4;
        v60 = v20 + v21;
        v23 = v20 + v21 + v22;
        v24 = v49;
        v25 = v47;
        v47(v49, v23, v11);
        v26 = v19 + v21 + v22;
        v27 = v50;
        v28 = v25(v50, v26, v11);
        v29 = v51;
        v30 = MinuteCondition.date.getter(v28);
        v31 = a4;
        v32 = v52;
        MinuteCondition.date.getter(v30);
        LOBYTE(v22) = static Date.< infix(_:_:)(v29, v32);
        v33 = *(void (**)(char *, uint64_t))(v53 + 8);
        v34 = v32;
        v35 = v54;
        v33(v34, v54);
        v36 = v35;
        a4 = v31;
        v11 = v48;
        v33(v29, v36);
        v37 = (void (*)(char *, uint64_t))v61[1];
        v38 = v27;
        v19 = v57;
        v37(v38, v11);
        v39 = v24;
        v20 = v56;
        result = ((uint64_t (*)(char *, uint64_t))v37)(v39, v11);
        if ((v22 & 1) == 0)
          break;
        v40 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }
        v41 = v40 + v20 + v21;
        v42 = v40 + v19 + v21;
        v43 = (void (*)(char *, uint64_t, uint64_t))v61[4];
        v43(v59, v41, v11);
        swift_arrayInitWithTakeFrontToBack(v41, v42, 1, v11);
        result = ((uint64_t (*)(uint64_t, char *, uint64_t))v43)(v42, v59, v11);
        v21 -= v55;
        ++v62;
      }
      while (v58 != v62);
      v19 += v55;
      v20 += v55;
      if (++v58 != v45)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_100028054(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  unint64_t v39;
  uint64_t (*v44)(char *);
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t (*v49)(char *);
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  uint64_t (*v71)(char *);
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;

  v82 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v82 - 8);
  v9 = __chkstk_darwin(v82);
  v81 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v80 = (char *)&v69 - v11;
  v86 = type metadata accessor for MinuteCondition(0);
  v12 = __chkstk_darwin(v86);
  v79 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v78 = (char *)&v69 - v15;
  v83 = v16;
  v17 = *(_QWORD *)(v16 + 72);
  if (!v17)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v18 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v17 == -1)
    goto LABEL_75;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v17 == -1)
    goto LABEL_76;
  v85 = a3;
  v22 = v18 / v17;
  v23 = v20 / v17;
  v77 = v17;
  if (v18 / v17 >= v20 / v17)
  {
    result = sub_100070318(a2, v20 / v17, a4);
    v24 = (char *)(a4 + v23 * v17);
    if (v23 * v17 < 1 || a1 >= a2)
      goto LABEL_69;
    v72 = -v17;
    v44 = *(uint64_t (**)(char *))(v83 + 16);
    v70 = a4;
    v71 = v44;
    v45 = (char *)v85;
    v76 = v8;
    v84 = a1;
    v46 = v86;
    while (1)
    {
      v47 = v45;
      v49 = v71;
      v48 = v72;
      v75 = v47;
      v85 = (unint64_t)&v47[v72];
      v50 = v78;
      v74 = (unint64_t)&v24[v72];
      v71(v78);
      v51 = v79;
      v73 = a2 + v48;
      v52 = v49(v79);
      v53 = v80;
      v54 = MinuteCondition.date.getter(v52);
      v55 = (char *)a2;
      v56 = v81;
      MinuteCondition.date.getter(v54);
      LOBYTE(v48) = static Date.< infix(_:_:)(v53, v56);
      v57 = *(void (**)(char *, uint64_t))(v8 + 8);
      v58 = v56;
      v59 = v82;
      v57(v58, v82);
      v57(v53, v59);
      v60 = *(void (**)(char *, uint64_t))(v83 + 8);
      v60(v51, v46);
      result = ((uint64_t (*)(char *, uint64_t))v60)(v50, v46);
      if ((v48 & 1) != 0)
        break;
      v45 = (char *)v85;
      v64 = v75 < v24 || v85 >= (unint64_t)v24;
      a2 = (unint64_t)v55;
      if (v64)
      {
        v62 = v85;
        v24 = (char *)v74;
        v63 = v74;
LABEL_58:
        result = swift_arrayInitWithTakeFrontToBack(v62, v63, 1, v86);
        a4 = v70;
        v8 = v76;
        v17 = v77;
        v65 = v84;
        goto LABEL_65;
      }
      a4 = v70;
      v8 = v76;
      v17 = v77;
      v65 = v84;
      if (v75 == v24)
      {
        v24 = (char *)v74;
      }
      else
      {
        v24 = (char *)v74;
        result = swift_arrayInitWithTakeBackToFront(v85);
      }
LABEL_65:
      if ((unint64_t)v24 <= a4 || a2 <= v65)
        goto LABEL_69;
    }
    v45 = (char *)v85;
    if (v75 >= v55 && v85 < (unint64_t)v55)
    {
      v8 = v76;
      v17 = v77;
      v65 = v84;
      a2 = v73;
      if (v75 != v55)
        result = swift_arrayInitWithTakeBackToFront(v85);
      a4 = v70;
      goto LABEL_65;
    }
    v62 = v85;
    a2 = v73;
    v63 = v73;
    goto LABEL_58;
  }
  result = sub_100070318(a1, v18 / v17, a4);
  v24 = (char *)(a4 + v22 * v17);
  if (v22 * v17 >= 1 && a2 < v85)
  {
    v75 = *(char **)(v83 + 16);
    v76 = v8;
    v74 = a4 + v22 * v17;
    v26 = v86;
    v27 = v79;
    do
    {
      v84 = a1;
      v28 = v78;
      v29 = v75;
      ((void (*)(char *, unint64_t, uint64_t))v75)(v78, a2, v26);
      v30 = ((uint64_t (*)(char *, unint64_t, uint64_t))v29)(v27, a4, v26);
      v31 = a2;
      v32 = v80;
      v33 = MinuteCondition.date.getter(v30);
      v34 = v81;
      MinuteCondition.date.getter(v33);
      LOBYTE(v29) = static Date.< infix(_:_:)(v32, v34);
      v35 = *(void (**)(char *, uint64_t))(v76 + 8);
      v36 = v34;
      v37 = v82;
      v35(v36, v82);
      v35(v32, v37);
      v38 = *(void (**)(char *, uint64_t))(v83 + 8);
      v38(v27, v26);
      result = ((uint64_t (*)(char *, uint64_t))v38)(v28, v26);
      if ((v29 & 1) != 0)
      {
        v17 = v77;
        a2 = v31 + v77;
        v39 = v84;
        if (v84 < v31 || v84 >= a2)
        {
          result = swift_arrayInitWithTakeFrontToBack(v84, v31, 1, v86);
        }
        else if (v84 != v31)
        {
          result = swift_arrayInitWithTakeBackToFront(v84);
        }
      }
      else
      {
        v17 = v77;
        v39 = v84;
        if (v84 < a4 || v84 >= a4 + v77)
        {
          result = swift_arrayInitWithTakeFrontToBack(v84, a4, 1, v86);
        }
        else if (v84 != a4)
        {
          result = swift_arrayInitWithTakeBackToFront(v84);
        }
        a2 = v31;
        a4 += v17;
      }
      v24 = (char *)v74;
      a1 = v39 + v17;
    }
    while (a4 < v74 && a2 < v85);
  }
  a2 = a1;
LABEL_69:
  v67 = &v24[-a4];
  if (v17 != -1 || v67 != (char *)0x8000000000000000)
  {
    sub_100070318(a4, (uint64_t)v67 / v17, a2);
    return 1;
  }
LABEL_77:
  __break(1u);
  return result;
}

char *sub_100028574(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005D40(&qword_1001BFA08);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13)
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  sub_1000287D8();
  return v11;
}

char *sub_100028664(uint64_t a1)
{
  return sub_100028574(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

size_t sub_100028678(uint64_t a1)
{
  return sub_10012297C(0, *(_QWORD *)(a1 + 16), 0, a1);
}

unint64_t sub_100028690()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BF9C8;
  if (!qword_1001BF9C8)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1001BF9C8);
  }
  return result;
}

void sub_1000286D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_100005D40(a2);
  sub_100028860(*(_QWORD *)(v2 - 8));
  sub_100006338();
}

size_t sub_100028700(uint64_t a1)
{
  return sub_100122B58(0, *(_QWORD *)(a1 + 16), 0, a1);
}

size_t sub_100028714(uint64_t a1)
{
  return sub_100122CB8(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_100028728(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_100028860(*(_QWORD *)(v2 - 8));
  sub_100006338();
}

void sub_10002875C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t sub_10002876C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 240) + 8))(*(_QWORD *)(v0 - 168), *(_QWORD *)(v0 - 144));
}

uint64_t sub_100028780(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_10002879C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, a3);
}

void sub_1000287B0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
}

uint64_t sub_1000287D8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000287E0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1000287E8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 272) + 8))(*(_QWORD *)(v1 - 304), v0);
}

uint64_t sub_100028804()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 272) + 8))(*(_QWORD *)(v0 - 304), *(_QWORD *)(v0 - 256));
}

uint64_t sub_100028820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 88), v0);
}

uint64_t sub_100028830()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 216) + 8))(*(_QWORD *)(v0 - 224), *(_QWORD *)(v0 - 208));
}

void sub_100028840(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  sub_10006F84C(a1 > 1, v1, 1, v2);
}

uint64_t sub_100028858@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100028860@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_10002886C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

uint64_t sub_100028878(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 1, 1, a1);
}

uint64_t sub_10002888C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_10002889C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 264))(a1, v1);
}

void sub_1000288AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1000286D0(v2, a2);
}

uint64_t sub_1000288C0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 232))(v0, *(_QWORD *)(v1 - 152));
}

uint64_t sub_1000288D0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000288E0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_1000288EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void sub_1000288F4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100011868(a1, a2, v2);
}

void sub_1000288FC(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_100028728(a1, v1);
}

void sub_100028904(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t sub_100028918(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10002892C()
{
  return type metadata accessor for PrecipitationShift(0);
}

void sub_100028934(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1000286D0(v2, a2);
}

void sub_10002893C(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_10000F7C4(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_100028948@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 256));
}

uint64_t sub_100028950()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100028958()
{
  void *v0;
  id v1;
  char v2;
  id v3;
  char v4;
  id v5;
  char v6;
  id v7;
  uint64_t v8;
  uint64_t v10;
  NSBundle v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t countAndFlagsBits;
  uint64_t v18;

  v0 = (void *)objc_opt_self(NSUnitTemperature);
  v1 = objc_msgSend(v0, "celsius");
  sub_10001EB28();
  v2 = sub_100028BF0((uint64_t)v1);

  if ((v2 & 1) != 0)
  {
    if (qword_1001BEF68 == -1)
      goto LABEL_10;
    goto LABEL_9;
  }
  v3 = objc_msgSend(v0, "fahrenheit");
  v4 = sub_100028BF0((uint64_t)v3);

  if ((v4 & 1) != 0)
  {
    if (qword_1001BEF68 == -1)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = objc_msgSend(v0, "kelvin");
  v6 = sub_100028BF0((uint64_t)v5);

  if ((v6 & 1) != 0)
  {
    if (qword_1001BEF68 == -1)
    {
LABEL_10:
      v7 = (id)qword_1001DA1E8;
      sub_100028BC8();
      sub_100028BD8();
      goto LABEL_11;
    }
LABEL_9:
    swift_once(&qword_1001BEF68, sub_100173D84);
    goto LABEL_10;
  }
  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v7 = (id)qword_1001DA1E8;
  sub_100028BC8();
  sub_100028BD8();
  v15 = 0xD000000000000018;
LABEL_11:
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v8, *(Swift::String_optional *)&v10, v12, *(Swift::String *)&v13, *(Swift::String *)(&v18 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_100028BF0(uint64_t a1)
{
  uint64_t v1;

  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_100028BF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = a1;
  type metadata accessor for MoonPhase.Hemisphere(0);
  sub_100029068();
  __chkstk_darwin(v2);
  sub_10002325C();
  v51 = v4 - v3;
  sub_100005D40(&qword_1001BF0B0);
  sub_100029068();
  v6 = __chkstk_darwin(v5);
  v50 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v49 - v8;
  type metadata accessor for AggregateWeatherViewModel(0);
  sub_100029068();
  __chkstk_darwin(v10);
  sub_10002325C();
  v13 = v12 - v11;
  v14 = type metadata accessor for WeatherDataViewModel(0);
  sub_100029068();
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v49 - v19;
  v21 = type metadata accessor for ForecastEntry.Model(0);
  sub_100029068();
  __chkstk_darwin(v22);
  sub_10002325C();
  v25 = (unsigned __int8 *)(v24 - v23);
  v26 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v1 + *(int *)(v26 + 28), (uint64_t)v25, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v25, v21) != 1)
  {
    v34 = *v25;
    v33 = sub_1000290B8();
    if (!v34)
    {
      v35 = v52;
      v36 = 2;
      return _s13WeatherWidget20WeatherDataViewModelOwst_0(v35, v36, 2, v33);
    }
    goto LABEL_9;
  }
  sub_100011868((uint64_t)v25, (uint64_t)v20, type metadata accessor for WeatherDataViewModel);
  sub_10000F7C4((uint64_t)v20, (uint64_t)v18, type metadata accessor for WeatherDataViewModel);
  if (swift_getEnumCaseMultiPayload(v18, v14))
  {
    sub_100029030((uint64_t)v18, type metadata accessor for WeatherDataViewModel);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_100025184(v27, (uint64_t)qword_1001D9FF0);
    v29 = (void *)Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (sub_10002908C(v30))
    {
      *(_WORD *)sub_1000290AC() = 0;
      sub_100029078((void *)&_mh_execute_header, v31, v32, "Expected aggregate weather but got instant or sunrise/sunset");
      sub_10002909C();
    }

    sub_100029030((uint64_t)v20, type metadata accessor for WeatherDataViewModel);
    v33 = sub_1000290B8();
LABEL_9:
    v35 = v52;
    v36 = 1;
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v35, v36, 2, v33);
  }
  sub_100011868((uint64_t)v18, v13, type metadata accessor for AggregateWeatherViewModel);
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v37 = type metadata accessor for Logger(0);
  v38 = sub_100025184(v37, (uint64_t)qword_1001D9FF0);
  v39 = (void *)Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  if (sub_10002908C(v40))
  {
    *(_WORD *)sub_1000290AC() = 0;
    sub_100029078((void *)&_mh_execute_header, v41, v42, "Making Moon complication view model entry from aggregate weather");
    sub_10002909C();
  }

  sub_10008AFF8((uint64_t)v9);
  v43 = v50;
  v44 = sub_100028FA8((uint64_t)v9, v50);
  v45 = Location.coordinate.getter(v44);
  v46 = v51;
  MoonPhase.Hemisphere.init(latitude:)(v45);
  v47 = v52;
  MoonComplicationViewModel.init(moonEvents:observerHemisphere:)(v43, v46);
  sub_100028FF0((uint64_t)v9);
  sub_100029030(v13, type metadata accessor for AggregateWeatherViewModel);
  sub_100029030((uint64_t)v20, type metadata accessor for WeatherDataViewModel);
  v33 = sub_1000290B8();
  v35 = v47;
  v36 = 0;
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v35, v36, 2, v33);
}

uint64_t sub_100028FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001BF0B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100028FF0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001BF0B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100029030(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_100006338();
}

void sub_100029078(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

BOOL sub_10002908C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10002909C()
{
  uint64_t v0;

  return swift_slowDealloc(v0, -1, -1);
}

uint64_t sub_1000290AC()
{
  return swift_slowAlloc(2, -1);
}

uint64_t sub_1000290B8()
{
  return type metadata accessor for MoonComplicationViewModel(0);
}

uint64_t *sub_1000290C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t EnumCaseMultiPayload;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  int *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  void (*v121)(char *, char *, uint64_t);
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  __int128 v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  int *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  void (*v170)(char *, char *, uint64_t);
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  int *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  _BOOL8 v231;
  int *v233;
  uint64_t v234;
  void (*v235)(char *, char *, uint64_t);
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  void (*v240)(char *, char *, uint64_t);
  uint64_t *v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = *(int *)(a3 + 20);
    v241 = a1;
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v239 = type metadata accessor for Date(0);
    v240 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v239 - 8) + 16);
    v240(v16, v17, v239);
    v18 = type metadata accessor for ForecastEntry(0);
    v19 = *(int *)(v18 + 20);
    v20 = &v16[v19];
    v21 = &v17[v19];
    v22 = type metadata accessor for TimelineEntryRelevance(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v22))
    {
      v23 = sub_100005D40(&qword_1001BFA20);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, v22);
    }
    v242 = v18;
    v244 = v17;
    v24 = *(int *)(v18 + 24);
    v25 = &v16[v24];
    v26 = &v17[v24];
    v27 = *(_QWORD *)&v17[v24 + 8];
    *(_QWORD *)v25 = *(_QWORD *)&v17[v24];
    *((_QWORD *)v25 + 1) = v27;
    v28 = *(_QWORD *)&v17[v24 + 16];
    v29 = *((_QWORD *)v26 + 3);
    *((_QWORD *)v25 + 2) = v28;
    *((_QWORD *)v25 + 3) = v29;
    v30 = *((_QWORD *)v26 + 5);
    *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
    *((_QWORD *)v25 + 5) = v30;
    *((_DWORD *)v25 + 12) = *((_DWORD *)v26 + 12);
    v31 = type metadata accessor for WidgetContext(0);
    v32 = *(int *)(v31 + 40);
    v33 = &v25[v32];
    v34 = &v26[v32];
    v35 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v34, 1, v35))
    {
      v36 = sub_100005D40(&qword_1001BFA28);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v33, 0, 1, v35);
    }
    v37 = *(int *)(v31 + 44);
    v38 = &v25[v37];
    v39 = &v26[v37];
    v40 = *(_QWORD *)v39;
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    v41 = *(int *)(v242 + 28);
    v42 = &v16[v41];
    v43 = &v244[v41];
    v44 = type metadata accessor for ForecastEntry.Model(0);
    swift_bridgeObjectRetain(v40);
    if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
    {
      v45 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v43, v45);
      v47 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v72 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v42, v43, v72);
        v13 = v241;
      }
      else
      {
        v243 = v42;
        v245 = v44;
        v238 = v45;
        v237 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v48 = type metadata accessor for UUID(0);
          v49 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v48 - 8) + 16);
          v49(v42, v43, v48);
          v50 = type metadata accessor for InstantWeatherViewModel(0);
          v51 = *(int *)(v50 + 20);
          v52 = &v42[v51];
          v53 = &v43[v51];
          v54 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
          v55 = *(int *)(v50 + 24);
          v56 = &v42[v55];
          v57 = &v43[v55];
          v49(&v42[v55], &v43[v55], v48);
          v58 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v240(&v56[v58[5]], &v57[v58[5]], v239);
          v240(&v56[v58[6]], &v57[v58[6]], v239);
          v59 = v58[7];
          v60 = &v56[v59];
          v61 = &v57[v59];
          v62 = sub_100005D40(&qword_1001BF090);
          v63 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v62 - 8) + 16);
          v63(v60, v61, v62);
          v63(&v56[v58[8]], &v57[v58[8]], v62);
          v64 = v58[9];
          v65 = &v56[v64];
          v66 = &v57[v64];
          v67 = *((_QWORD *)v66 + 1);
          *(_QWORD *)v65 = *(_QWORD *)v66;
          *((_QWORD *)v65 + 1) = v67;
          v68 = v58[10];
          v69 = &v56[v68];
          v70 = &v57[v68];
          swift_bridgeObjectRetain(v67);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v70, 1, v62))
          {
            v71 = sub_100005D40(&qword_1001BF098);
            memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
          }
          else
          {
            v63(v69, v70, v62);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v69, 0, 1, v62);
          }
          v97 = v58[11];
          v98 = &v56[v97];
          v99 = &v57[v97];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v57[v97], 1, v62))
          {
            v100 = sub_100005D40(&qword_1001BF098);
            memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
          }
          else
          {
            v63(v98, v99, v62);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v98, 0, 1, v62);
          }
          v101 = v58[12];
          v102 = &v56[v101];
          v103 = &v57[v101];
          v49(&v56[v101], &v57[v101], v48);
          v104 = (int *)type metadata accessor for ConditionViewModel(0);
          v105 = v104[5];
          v106 = &v102[v105];
          v107 = &v103[v105];
          v108 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 16))(v106, v107, v108);
          v109 = v104[6];
          v110 = &v102[v109];
          v111 = &v103[v109];
          v112 = *((_QWORD *)v111 + 1);
          *(_QWORD *)v110 = *(_QWORD *)v111;
          *((_QWORD *)v110 + 1) = v112;
          v113 = v104[7];
          v114 = &v102[v113];
          v115 = &v103[v113];
          v116 = *((_QWORD *)v115 + 1);
          *(_QWORD *)v114 = *(_QWORD *)v115;
          *((_QWORD *)v114 + 1) = v116;
          v102[v104[8]] = v103[v104[8]];
          v102[v104[9]] = v103[v104[9]];
          v102[v104[10]] = v103[v104[10]];
          *(_QWORD *)&v56[v58[13]] = *(_QWORD *)&v57[v58[13]];
          v117 = v58[14];
          v118 = &v56[v117];
          v119 = &v57[v117];
          v120 = type metadata accessor for CloudAltitudeKind(0);
          v121 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v120 - 8) + 16);
          swift_bridgeObjectRetain(v112);
          swift_bridgeObjectRetain(v116);
          v121(v118, v119, v120);
          v122 = v58[15];
          v123 = &v56[v122];
          v124 = &v57[v122];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v57[v122], 1, v239))
          {
            v125 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
          }
          else
          {
            v240(v123, v124, v239);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v123, 0, 1, v239);
          }
          v42 = v243;
          v126 = v58[16];
          v127 = &v56[v126];
          v128 = &v57[v126];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v57[v126], 1, v239))
          {
            v129 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
          }
          else
          {
            v240(v127, v128, v239);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v127, 0, 1, v239);
          }
          v130 = v58[17];
          v131 = &v56[v130];
          v132 = &v57[v130];
          v133 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 16))(v131, v132, v133);
          v134 = v58[18];
          v135 = &v56[v134];
          v136 = &v57[v134];
          v137 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 16))(v135, v136, v137);
          *(_QWORD *)&v56[v58[19]] = *(_QWORD *)&v57[v58[19]];
          v138 = v58[20];
          v139 = &v56[v138];
          v140 = &v57[v138];
          v141 = *((_QWORD *)v140 + 1);
          if (v141)
          {
            *(_QWORD *)v139 = *(_QWORD *)v140;
            *((_QWORD *)v139 + 1) = v141;
            v142 = *((_QWORD *)v140 + 2);
            v143 = *((_QWORD *)v140 + 3);
            v144 = v140[32];
            swift_bridgeObjectRetain(v141);
            sub_100006E58(v142, v143, v144);
            *((_QWORD *)v139 + 2) = v142;
            *((_QWORD *)v139 + 3) = v143;
            v139[32] = v144;
          }
          else
          {
            v145 = *((_OWORD *)v140 + 1);
            *(_OWORD *)v139 = *(_OWORD *)v140;
            *((_OWORD *)v139 + 1) = v145;
            v139[32] = v140[32];
          }
          v13 = v241;
          v44 = v245;
        }
        else
        {
          v234 = v35;
          v73 = type metadata accessor for UUID(0);
          v74 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v73 - 8) + 16);
          v74(v42, v43, v73);
          v75 = type metadata accessor for AggregateWeatherViewModel(0);
          v76 = *(int *)(v75 + 20);
          v77 = &v42[v76];
          v78 = &v43[v76];
          v79 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
          v233 = (int *)v75;
          v80 = *(int *)(v75 + 24);
          v81 = &v42[v80];
          v82 = &v43[v80];
          v235 = v74;
          v236 = v73;
          v74(&v42[v80], &v43[v80], v73);
          v83 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v240(&v81[v83[5]], &v82[v83[5]], v239);
          v240(&v81[v83[6]], &v82[v83[6]], v239);
          v84 = v83[7];
          v85 = &v81[v84];
          v86 = &v82[v84];
          v87 = sub_100005D40(&qword_1001BF090);
          v88 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v87 - 8) + 16);
          v88(v85, v86, v87);
          v88(&v81[v83[8]], &v82[v83[8]], v87);
          v89 = v83[9];
          v90 = &v81[v89];
          v91 = &v82[v89];
          v92 = *((_QWORD *)v91 + 1);
          *(_QWORD *)v90 = *(_QWORD *)v91;
          *((_QWORD *)v90 + 1) = v92;
          v93 = v83[10];
          v94 = &v81[v93];
          v95 = &v82[v93];
          swift_bridgeObjectRetain(v92);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v95, 1, v87))
          {
            v96 = sub_100005D40(&qword_1001BF098);
            memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
          }
          else
          {
            v88(v94, v95, v87);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v94, 0, 1, v87);
          }
          v146 = v83[11];
          v147 = &v81[v146];
          v148 = &v82[v146];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v146], 1, v87))
          {
            v149 = sub_100005D40(&qword_1001BF098);
            memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
          }
          else
          {
            v88(v147, v148, v87);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v147, 0, 1, v87);
          }
          v150 = v83[12];
          v151 = &v81[v150];
          v152 = &v82[v150];
          v235(&v81[v150], &v82[v150], v236);
          v153 = (int *)type metadata accessor for ConditionViewModel(0);
          v154 = v153[5];
          v155 = &v151[v154];
          v156 = &v152[v154];
          v157 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 16))(v155, v156, v157);
          v158 = v153[6];
          v159 = &v151[v158];
          v160 = &v152[v158];
          v161 = *((_QWORD *)v160 + 1);
          *(_QWORD *)v159 = *(_QWORD *)v160;
          *((_QWORD *)v159 + 1) = v161;
          v162 = v153[7];
          v163 = &v151[v162];
          v164 = &v152[v162];
          v165 = *((_QWORD *)v164 + 1);
          *(_QWORD *)v163 = *(_QWORD *)v164;
          *((_QWORD *)v163 + 1) = v165;
          v151[v153[8]] = v152[v153[8]];
          v151[v153[9]] = v152[v153[9]];
          v151[v153[10]] = v152[v153[10]];
          *(_QWORD *)&v81[v83[13]] = *(_QWORD *)&v82[v83[13]];
          v166 = v83[14];
          v167 = &v81[v166];
          v168 = &v82[v166];
          v169 = type metadata accessor for CloudAltitudeKind(0);
          v170 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v169 - 8) + 16);
          swift_bridgeObjectRetain(v161);
          swift_bridgeObjectRetain(v165);
          v170(v167, v168, v169);
          v171 = v83[15];
          v172 = &v81[v171];
          v173 = &v82[v171];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v171], 1, v239))
          {
            v174 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v172, v173, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
          }
          else
          {
            v240(v172, v173, v239);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v172, 0, 1, v239);
          }
          v42 = v243;
          v175 = v83[16];
          v176 = &v81[v175];
          v177 = &v82[v175];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v175], 1, v239))
          {
            v178 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v176, v177, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
          }
          else
          {
            v240(v176, v177, v239);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v176, 0, 1, v239);
          }
          v179 = v83[17];
          v180 = &v81[v179];
          v181 = &v82[v179];
          v182 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v182 - 8) + 16))(v180, v181, v182);
          v183 = v83[18];
          v184 = &v81[v183];
          v185 = &v82[v183];
          v186 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v186 - 8) + 16))(v184, v185, v186);
          *(_QWORD *)&v81[v83[19]] = *(_QWORD *)&v82[v83[19]];
          v187 = v83[20];
          v188 = &v81[v187];
          v189 = &v82[v187];
          v190 = *((_QWORD *)v189 + 1);
          if (v190)
          {
            *(_QWORD *)v188 = *(_QWORD *)v189;
            *((_QWORD *)v188 + 1) = v190;
            v191 = *((_QWORD *)v189 + 2);
            v192 = *((_QWORD *)v189 + 3);
            v193 = v189[32];
            swift_bridgeObjectRetain(v190);
            sub_100006E58(v191, v192, v193);
            *((_QWORD *)v188 + 2) = v191;
            *((_QWORD *)v188 + 3) = v192;
            v188[32] = v193;
          }
          else
          {
            v194 = *((_OWORD *)v189 + 1);
            *(_OWORD *)v188 = *(_OWORD *)v189;
            *((_OWORD *)v188 + 1) = v194;
            v188[32] = v189[32];
          }
          v195 = v233[7];
          v196 = *(_QWORD *)&v43[v195];
          *(_QWORD *)&v243[v195] = v196;
          v197 = v233[8];
          v198 = *(_QWORD *)&v43[v197];
          *(_QWORD *)&v243[v197] = v198;
          v199 = v233[9];
          v200 = &v243[v199];
          v201 = &v43[v199];
          v202 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v196);
          swift_bridgeObjectRetain(v198);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v201, 1, (uint64_t)v202))
          {
            v203 = sub_100005D40(&qword_1001BFA30);
            memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64));
          }
          else
          {
            v235(v200, v201, v236);
            v240(&v200[v202[5]], &v201[v202[5]], v239);
            *(_QWORD *)&v200[v202[6]] = *(_QWORD *)&v201[v202[6]];
            v204 = v202[7];
            v205 = &v200[v204];
            v206 = &v201[v204];
            v207 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v207 - 8) + 16))(v205, v206, v207);
            v208 = v202[8];
            v209 = &v200[v208];
            v210 = &v201[v208];
            v211 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v211 - 8) + 16))(v209, v210, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v200, 0, 1, (uint64_t)v202);
          }
          v44 = v245;
          v212 = v233[10];
          v213 = &v243[v212];
          v214 = &v43[v212];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v214, 1, HourPrecipitationChartViewModel))
          {
            v216 = sub_100005D40(&qword_1001BFA38);
            memcpy(v213, v214, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v213, v214, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v213, 0, 1, HourPrecipitationChartViewModel);
          }
          v217 = v233[11];
          v218 = *(_QWORD *)&v43[v217];
          *(_QWORD *)&v243[v217] = v218;
          v219 = v233[12];
          v220 = &v243[v219];
          v221 = &v43[v219];
          *(_QWORD *)v220 = *(_QWORD *)v221;
          *((_WORD *)v220 + 4) = *((_WORD *)v221 + 4);
          v222 = v233[13];
          v223 = &v243[v222];
          v224 = &v43[v222];
          swift_bridgeObjectRetain(v218);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v224, 1, v234))
          {
            v225 = sub_100005D40(&qword_1001BFA28);
            memcpy(v223, v224, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v234 - 8) + 16))(v223, v224, v234);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v223, 0, 1, v234);
          }
          v226 = v233[14];
          v227 = &v243[v226];
          v228 = &v43[v226];
          v229 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v228, 1, v229))
          {
            v230 = sub_100005D40(&qword_1001BFA40);
            memcpy(v227, v228, *(_QWORD *)(*(_QWORD *)(v230 - 8) + 64));
          }
          else
          {
            v231 = swift_getEnumCaseMultiPayload(v228, v229) == 1;
            v240(v227, v228, v239);
            swift_storeEnumTagMultiPayload(v227, v229, v231);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v227, 0, 1, v229);
          }
          v13 = v241;
        }
        v45 = v238;
        v47 = v237;
      }
      swift_storeEnumTagMultiPayload(v42, v45, v47);
      swift_storeEnumTagMultiPayload(v42, v44, 1);
    }
    else
    {
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      return v241;
    }
  }
  return v13;
}

uint64_t sub_100029FF8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  int *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  int *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  void (*v85)(char *, uint64_t);

  v4 = sub_100005D40(&qword_1001BFA18);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for Date(0);
  v85 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v85(v6, v7);
  v8 = (int *)type metadata accessor for ForecastEntry(0);
  v9 = (uint64_t)&v6[v8[5]];
  v10 = type metadata accessor for TimelineEntryRelevance(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = &v6[v8[6]];
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 5));
  v12 = type metadata accessor for WidgetContext(0);
  v13 = (uint64_t)&v11[*(int *)(v12 + 40)];
  v14 = type metadata accessor for URL(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease(*(_QWORD *)&v11[*(int *)(v12 + 44)]);
  v15 = &v6[v8[7]];
  v16 = type metadata accessor for ForecastEntry.Model(0);
  result = swift_getEnumCaseMultiPayload(v15, v16);
  if ((_DWORD)result == 1)
  {
    v18 = type metadata accessor for WeatherDataViewModel(0);
    result = swift_getEnumCaseMultiPayload(v15, v18);
    switch((_DWORD)result)
    {
      case 2:
        v57 = type metadata accessor for SunriseSunsetViewModel(0);
        v58 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8);
        v56 = (uint64_t)v15;
        return v58(v56, v57);
      case 1:
        v59 = type metadata accessor for UUID(0);
        v60 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v59 - 8) + 8);
        v60(v15, v59);
        v61 = type metadata accessor for InstantWeatherViewModel(0);
        v62 = &v15[*(int *)(v61 + 20)];
        v63 = type metadata accessor for Location(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v62, v63);
        v64 = &v15[*(int *)(v61 + 24)];
        v60(v64, v59);
        v65 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v85(&v64[v65[5]], v7);
        v85(&v64[v65[6]], v7);
        v66 = &v64[v65[7]];
        v67 = sub_100005D40(&qword_1001BF090);
        v68 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v67 - 8) + 8);
        v68(v66, v67);
        v68(&v64[v65[8]], v67);
        swift_bridgeObjectRelease(*(_QWORD *)&v64[v65[9] + 8]);
        v69 = (uint64_t)&v64[v65[10]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v69, 1, v67))
          v68((char *)v69, v67);
        v70 = (uint64_t)&v64[v65[11]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v70, 1, v67))
          v68((char *)v70, v67);
        v71 = &v64[v65[12]];
        v60(v71, v59);
        v72 = (int *)type metadata accessor for ConditionViewModel(0);
        v73 = &v71[v72[5]];
        v74 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v73, v74);
        swift_bridgeObjectRelease(*(_QWORD *)&v71[v72[6] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v71[v72[7] + 8]);
        v75 = &v64[v65[14]];
        v76 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v75, v76);
        v77 = (uint64_t)&v64[v65[15]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v77, 1, v7))
          v85((char *)v77, v7);
        v78 = (uint64_t)&v64[v65[16]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v78, 1, v7))
          v85((char *)v78, v7);
        v79 = &v64[v65[17]];
        v80 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v79, v80);
        v81 = &v64[v65[18]];
        v82 = type metadata accessor for Wind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v82 - 8) + 8))(v81, v82);
        v83 = &v64[v65[20]];
        result = *((_QWORD *)v83 + 1);
        if (result)
        {
          swift_bridgeObjectRelease(result);
          return sub_100007458(*((_QWORD *)v83 + 2), *((_QWORD *)v83 + 3), v83[32]);
        }
        break;
      case 0:
        v19 = type metadata accessor for UUID(0);
        v20 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
        v20(v15, v19);
        v21 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        v22 = &v15[v21[5]];
        v23 = type metadata accessor for Location(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
        v24 = &v15[v21[6]];
        v84 = v20;
        v20(v24, v19);
        v25 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v85(&v24[v25[5]], v7);
        v85(&v24[v25[6]], v7);
        v26 = &v24[v25[7]];
        v27 = sub_100005D40(&qword_1001BF090);
        v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(&v24[v25[8]], v27);
        swift_bridgeObjectRelease(*(_QWORD *)&v24[v25[9] + 8]);
        v29 = (uint64_t)&v24[v25[10]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v29, 1, v27))
          v28((char *)v29, v27);
        v30 = (uint64_t)&v24[v25[11]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v30, 1, v27))
          v28((char *)v30, v27);
        v31 = &v24[v25[12]];
        v84(v31, v19);
        v32 = (int *)type metadata accessor for ConditionViewModel(0);
        v33 = &v31[v32[5]];
        v34 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
        swift_bridgeObjectRelease(*(_QWORD *)&v31[v32[6] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v31[v32[7] + 8]);
        v35 = &v24[v25[14]];
        v36 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
        v37 = (uint64_t)&v24[v25[15]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v37, 1, v7))
          v85((char *)v37, v7);
        v38 = (uint64_t)&v24[v25[16]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, v7))
          v85((char *)v38, v7);
        v39 = &v24[v25[17]];
        v40 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
        v41 = &v24[v25[18]];
        v42 = type metadata accessor for Wind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
        v43 = &v24[v25[20]];
        v44 = *((_QWORD *)v43 + 1);
        if (v44)
        {
          swift_bridgeObjectRelease(v44);
          sub_100007458(*((_QWORD *)v43 + 2), *((_QWORD *)v43 + 3), v43[32]);
        }
        swift_bridgeObjectRelease(*(_QWORD *)&v15[v21[7]]);
        swift_bridgeObjectRelease(*(_QWORD *)&v15[v21[8]]);
        v45 = (uint64_t)&v15[v21[9]];
        v46 = (int *)type metadata accessor for AirQualityViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v45, 1, (uint64_t)v46))
        {
          v84((char *)v45, v19);
          v85((char *)(v45 + v46[5]), v7);
          v47 = v45 + v46[7];
          v48 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v47, v48);
          v49 = v45 + v46[8];
          v50 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
        }
        v51 = (uint64_t)&v15[v21[10]];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v51, 1, HourPrecipitationChartViewModel))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v51, HourPrecipitationChartViewModel);
        swift_bridgeObjectRelease(*(_QWORD *)&v15[v21[11]]);
        v53 = (uint64_t)&v15[v21[13]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v53, 1, v14))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v53, v14);
        v54 = (uint64_t)&v15[v21[14]];
        v55 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v54, 1, v55);
        if (!(_DWORD)result)
        {
          v56 = v54;
          v57 = v7;
          v58 = (uint64_t (*)(uint64_t, uint64_t))v85;
          return v58(v56, v57);
        }
        break;
    }
  }
  return result;
}

uint64_t *sub_10002A868(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t EnumCaseMultiPayload;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  int *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  void (*v119)(char *, char *, uint64_t);
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  __int128 v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  int *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  int *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  _BOOL8 v229;
  uint64_t v231;
  void (*v232)(char *, char *, uint64_t);
  uint64_t v233;
  int *v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  void (*v238)(char *, char *, uint64_t);
  uint64_t *v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;

  v6 = sub_100005D40(&qword_1001BFA18);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v239 = a1;
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v237 = type metadata accessor for Date(0);
  v238 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v237 - 8) + 16);
  v238(v13, v14, v237);
  v15 = type metadata accessor for ForecastEntry(0);
  v16 = *(int *)(v15 + 20);
  v17 = &v13[v16];
  v18 = &v14[v16];
  v19 = type metadata accessor for TimelineEntryRelevance(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v19))
  {
    v20 = sub_100005D40(&qword_1001BFA20);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v19);
  }
  v240 = v15;
  v242 = v14;
  v21 = *(int *)(v15 + 24);
  v22 = &v13[v21];
  v23 = &v14[v21];
  v24 = *(_QWORD *)&v14[v21 + 8];
  *(_QWORD *)v22 = *(_QWORD *)&v14[v21];
  *((_QWORD *)v22 + 1) = v24;
  v25 = *(_QWORD *)&v14[v21 + 24];
  *((_QWORD *)v22 + 2) = *(_QWORD *)&v14[v21 + 16];
  *((_QWORD *)v22 + 3) = v25;
  v26 = *(_QWORD *)&v14[v21 + 32];
  v27 = *((_QWORD *)v23 + 5);
  *((_QWORD *)v22 + 4) = v26;
  *((_QWORD *)v22 + 5) = v27;
  *((_DWORD *)v22 + 12) = *((_DWORD *)v23 + 12);
  v28 = type metadata accessor for WidgetContext(0);
  v29 = *(int *)(v28 + 40);
  v30 = &v22[v29];
  v31 = &v23[v29];
  v32 = type metadata accessor for URL(0);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v27);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v32))
  {
    v33 = sub_100005D40(&qword_1001BFA28);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v32);
  }
  v34 = *(int *)(v28 + 44);
  v35 = &v22[v34];
  v36 = &v23[v34];
  v37 = *(_QWORD *)v36;
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v35[8] = v36[8];
  v38 = *(int *)(v240 + 28);
  v39 = &v13[v38];
  v40 = &v242[v38];
  v41 = type metadata accessor for ForecastEntry.Model(0);
  swift_bridgeObjectRetain(v37);
  if (swift_getEnumCaseMultiPayload(v40, v41) == 1)
  {
    v42 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v40, v42);
    v44 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v70 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v39, v40, v70);
      v69 = v239;
    }
    else
    {
      v235 = EnumCaseMultiPayload;
      v241 = v39;
      v243 = v41;
      v236 = v42;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v45 = type metadata accessor for UUID(0);
        v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16);
        v46(v39, v40, v45);
        v47 = type metadata accessor for InstantWeatherViewModel(0);
        v48 = *(int *)(v47 + 20);
        v49 = &v39[v48];
        v50 = &v40[v48];
        v51 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
        v52 = *(int *)(v47 + 24);
        v53 = &v39[v52];
        v54 = &v40[v52];
        v46(&v39[v52], &v40[v52], v45);
        v55 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v238(&v53[v55[5]], &v54[v55[5]], v237);
        v238(&v53[v55[6]], &v54[v55[6]], v237);
        v56 = v55[7];
        v57 = &v53[v56];
        v58 = &v54[v56];
        v59 = sub_100005D40(&qword_1001BF090);
        v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
        v60(v57, v58, v59);
        v60(&v53[v55[8]], &v54[v55[8]], v59);
        v61 = v55[9];
        v62 = &v53[v61];
        v63 = &v54[v61];
        v64 = *((_QWORD *)v63 + 1);
        *(_QWORD *)v62 = *(_QWORD *)v63;
        *((_QWORD *)v62 + 1) = v64;
        v65 = v55[10];
        v66 = &v53[v65];
        v67 = &v54[v65];
        swift_bridgeObjectRetain(v64);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v59))
        {
          v68 = sub_100005D40(&qword_1001BF098);
          memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        }
        else
        {
          v60(v66, v67, v59);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v59);
        }
        v95 = v55[11];
        v96 = &v53[v95];
        v97 = &v54[v95];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v54[v95], 1, v59))
        {
          v98 = sub_100005D40(&qword_1001BF098);
          memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
        }
        else
        {
          v60(v96, v97, v59);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v96, 0, 1, v59);
        }
        v99 = v55[12];
        v100 = &v53[v99];
        v101 = &v54[v99];
        v46(&v53[v99], &v54[v99], v45);
        v102 = (int *)type metadata accessor for ConditionViewModel(0);
        v103 = v102[5];
        v104 = &v100[v103];
        v105 = &v101[v103];
        v106 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v104, v105, v106);
        v107 = v102[6];
        v108 = &v100[v107];
        v109 = &v101[v107];
        v110 = *((_QWORD *)v109 + 1);
        *(_QWORD *)v108 = *(_QWORD *)v109;
        *((_QWORD *)v108 + 1) = v110;
        v111 = v102[7];
        v112 = &v100[v111];
        v113 = &v101[v111];
        v114 = *((_QWORD *)v113 + 1);
        *(_QWORD *)v112 = *(_QWORD *)v113;
        *((_QWORD *)v112 + 1) = v114;
        v100[v102[8]] = v101[v102[8]];
        v100[v102[9]] = v101[v102[9]];
        v100[v102[10]] = v101[v102[10]];
        *(_QWORD *)&v53[v55[13]] = *(_QWORD *)&v54[v55[13]];
        v115 = v55[14];
        v116 = &v53[v115];
        v117 = &v54[v115];
        v118 = type metadata accessor for CloudAltitudeKind(0);
        v119 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v118 - 8) + 16);
        swift_bridgeObjectRetain(v110);
        swift_bridgeObjectRetain(v114);
        v119(v116, v117, v118);
        v120 = v55[15];
        v121 = &v53[v120];
        v122 = &v54[v120];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v54[v120], 1, v237))
        {
          v123 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
        }
        else
        {
          v238(v121, v122, v237);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v121, 0, 1, v237);
        }
        v39 = v241;
        v41 = v243;
        v124 = v55[16];
        v125 = &v53[v124];
        v126 = &v54[v124];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v54[v124], 1, v237))
        {
          v127 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
        }
        else
        {
          v238(v125, v126, v237);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v125, 0, 1, v237);
        }
        v128 = v55[17];
        v129 = &v53[v128];
        v130 = &v54[v128];
        v131 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
        v132 = v55[18];
        v133 = &v53[v132];
        v134 = &v54[v132];
        v135 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16))(v133, v134, v135);
        *(_QWORD *)&v53[v55[19]] = *(_QWORD *)&v54[v55[19]];
        v136 = v55[20];
        v137 = &v53[v136];
        v138 = &v54[v136];
        v139 = *((_QWORD *)v138 + 1);
        if (v139)
        {
          *(_QWORD *)v137 = *(_QWORD *)v138;
          *((_QWORD *)v137 + 1) = v139;
          v140 = *((_QWORD *)v138 + 2);
          v141 = *((_QWORD *)v138 + 3);
          v142 = v138[32];
          swift_bridgeObjectRetain(v139);
          sub_100006E58(v140, v141, v142);
          *((_QWORD *)v137 + 2) = v140;
          *((_QWORD *)v137 + 3) = v141;
          v137[32] = v142;
        }
        else
        {
          v143 = *((_OWORD *)v138 + 1);
          *(_OWORD *)v137 = *(_OWORD *)v138;
          *((_OWORD *)v137 + 1) = v143;
          v137[32] = v138[32];
        }
        v69 = v239;
        v42 = v236;
        v44 = 1;
      }
      else
      {
        v231 = v32;
        v71 = type metadata accessor for UUID(0);
        v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
        v72(v39, v40, v71);
        v73 = type metadata accessor for AggregateWeatherViewModel(0);
        v74 = *(int *)(v73 + 20);
        v75 = &v39[v74];
        v76 = &v40[v74];
        v77 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
        v233 = v71;
        v234 = (int *)v73;
        v78 = *(int *)(v73 + 24);
        v79 = &v39[v78];
        v80 = &v40[v78];
        v232 = v72;
        v72(&v39[v78], &v40[v78], v71);
        v81 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v238(&v79[v81[5]], &v80[v81[5]], v237);
        v238(&v79[v81[6]], &v80[v81[6]], v237);
        v82 = v81[7];
        v83 = &v79[v82];
        v84 = &v80[v82];
        v85 = sub_100005D40(&qword_1001BF090);
        v86 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 16);
        v86(v83, v84, v85);
        v86(&v79[v81[8]], &v80[v81[8]], v85);
        v87 = v81[9];
        v88 = &v79[v87];
        v89 = &v80[v87];
        v90 = *((_QWORD *)v89 + 1);
        *(_QWORD *)v88 = *(_QWORD *)v89;
        *((_QWORD *)v88 + 1) = v90;
        v91 = v81[10];
        v92 = &v79[v91];
        v93 = &v80[v91];
        swift_bridgeObjectRetain(v90);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v93, 1, v85))
        {
          v94 = sub_100005D40(&qword_1001BF098);
          memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
        }
        else
        {
          v86(v92, v93, v85);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v92, 0, 1, v85);
        }
        v144 = v81[11];
        v145 = &v79[v144];
        v146 = &v80[v144];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v80[v144], 1, v85))
        {
          v147 = sub_100005D40(&qword_1001BF098);
          memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
        }
        else
        {
          v86(v145, v146, v85);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v145, 0, 1, v85);
        }
        v148 = v81[12];
        v149 = &v79[v148];
        v150 = &v80[v148];
        v232(&v79[v148], &v80[v148], v233);
        v151 = (int *)type metadata accessor for ConditionViewModel(0);
        v152 = v151[5];
        v153 = &v149[v152];
        v154 = &v150[v152];
        v155 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v153, v154, v155);
        v156 = v151[6];
        v157 = &v149[v156];
        v158 = &v150[v156];
        v159 = *((_QWORD *)v158 + 1);
        *(_QWORD *)v157 = *(_QWORD *)v158;
        *((_QWORD *)v157 + 1) = v159;
        v160 = v151[7];
        v161 = &v149[v160];
        v162 = &v150[v160];
        v163 = *((_QWORD *)v162 + 1);
        *(_QWORD *)v161 = *(_QWORD *)v162;
        *((_QWORD *)v161 + 1) = v163;
        v149[v151[8]] = v150[v151[8]];
        v149[v151[9]] = v150[v151[9]];
        v149[v151[10]] = v150[v151[10]];
        *(_QWORD *)&v79[v81[13]] = *(_QWORD *)&v80[v81[13]];
        v164 = v81[14];
        v165 = &v79[v164];
        v166 = &v80[v164];
        v167 = type metadata accessor for CloudAltitudeKind(0);
        v168 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 16);
        swift_bridgeObjectRetain(v159);
        swift_bridgeObjectRetain(v163);
        v168(v165, v166, v167);
        v169 = v81[15];
        v170 = &v79[v169];
        v171 = &v80[v169];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v80[v169], 1, v237))
        {
          v172 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
        }
        else
        {
          v238(v170, v171, v237);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v170, 0, 1, v237);
        }
        v39 = v241;
        v173 = v81[16];
        v174 = &v79[v173];
        v175 = &v80[v173];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v80[v173], 1, v237))
        {
          v176 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
        }
        else
        {
          v238(v174, v175, v237);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v174, 0, 1, v237);
        }
        v177 = v81[17];
        v178 = &v79[v177];
        v179 = &v80[v177];
        v180 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v180 - 8) + 16))(v178, v179, v180);
        v181 = v81[18];
        v182 = &v79[v181];
        v183 = &v80[v181];
        v184 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v184 - 8) + 16))(v182, v183, v184);
        *(_QWORD *)&v79[v81[19]] = *(_QWORD *)&v80[v81[19]];
        v185 = v81[20];
        v186 = &v79[v185];
        v187 = &v80[v185];
        v188 = *((_QWORD *)v187 + 1);
        if (v188)
        {
          *(_QWORD *)v186 = *(_QWORD *)v187;
          *((_QWORD *)v186 + 1) = v188;
          v189 = *((_QWORD *)v187 + 2);
          v190 = *((_QWORD *)v187 + 3);
          v191 = v187[32];
          swift_bridgeObjectRetain(v188);
          sub_100006E58(v189, v190, v191);
          *((_QWORD *)v186 + 2) = v189;
          *((_QWORD *)v186 + 3) = v190;
          v186[32] = v191;
        }
        else
        {
          v192 = *((_OWORD *)v187 + 1);
          *(_OWORD *)v186 = *(_OWORD *)v187;
          *((_OWORD *)v186 + 1) = v192;
          v186[32] = v187[32];
        }
        v44 = v235;
        v193 = v234[7];
        v194 = *(_QWORD *)&v40[v193];
        *(_QWORD *)&v241[v193] = v194;
        v195 = v234[8];
        v196 = *(_QWORD *)&v40[v195];
        *(_QWORD *)&v241[v195] = v196;
        v197 = v234[9];
        v198 = &v241[v197];
        v199 = &v40[v197];
        v200 = (int *)type metadata accessor for AirQualityViewModel(0);
        swift_bridgeObjectRetain(v194);
        swift_bridgeObjectRetain(v196);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v199, 1, (uint64_t)v200))
        {
          v201 = sub_100005D40(&qword_1001BFA30);
          memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
        }
        else
        {
          v232(v198, v199, v233);
          v238(&v198[v200[5]], &v199[v200[5]], v237);
          *(_QWORD *)&v198[v200[6]] = *(_QWORD *)&v199[v200[6]];
          v202 = v200[7];
          v203 = &v198[v202];
          v204 = &v199[v202];
          v205 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v205 - 8) + 16))(v203, v204, v205);
          v206 = v200[8];
          v207 = &v198[v206];
          v208 = &v199[v206];
          v209 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v209 - 8) + 16))(v207, v208, v209);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v198, 0, 1, (uint64_t)v200);
        }
        v42 = v236;
        v210 = v234[10];
        v211 = &v241[v210];
        v212 = &v40[v210];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v212, 1, HourPrecipitationChartViewModel))
        {
          v214 = sub_100005D40(&qword_1001BFA38);
          memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v211, v212, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v211, 0, 1, HourPrecipitationChartViewModel);
        }
        v215 = v234[11];
        v216 = *(_QWORD *)&v40[v215];
        *(_QWORD *)&v241[v215] = v216;
        v217 = v234[12];
        v218 = &v241[v217];
        v219 = &v40[v217];
        *(_QWORD *)v218 = *(_QWORD *)v219;
        *((_WORD *)v218 + 4) = *((_WORD *)v219 + 4);
        v220 = v234[13];
        v221 = &v241[v220];
        v222 = &v40[v220];
        swift_bridgeObjectRetain(v216);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v222, 1, v231))
        {
          v223 = sub_100005D40(&qword_1001BFA28);
          memcpy(v221, v222, *(_QWORD *)(*(_QWORD *)(v223 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v231 - 8) + 16))(v221, v222, v231);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v221, 0, 1, v231);
        }
        v224 = v234[14];
        v225 = &v241[v224];
        v226 = &v40[v224];
        v227 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v226, 1, v227))
        {
          v228 = sub_100005D40(&qword_1001BFA40);
          memcpy(v225, v226, *(_QWORD *)(*(_QWORD *)(v228 - 8) + 64));
        }
        else
        {
          v229 = swift_getEnumCaseMultiPayload(v226, v227) == 1;
          v238(v225, v226, v237);
          swift_storeEnumTagMultiPayload(v225, v227, v229);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v225, 0, 1, v227);
        }
        v69 = v239;
        v41 = v243;
      }
    }
    swift_storeEnumTagMultiPayload(v39, v42, v44);
    swift_storeEnumTagMultiPayload(v39, v41, 1);
  }
  else
  {
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    return v239;
  }
  return v69;
}

uint64_t *sub_10002B774(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t EnumCaseMultiPayload;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int *v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int *v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  int *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  int *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  void (*v160)(char *, char *, uint64_t);
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  int *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  _BOOL8 v244;
  uint64_t v246;
  char *v247;
  void (*v248)(char *, char *, uint64_t);
  void (*v249)(char *, char *, uint64_t);
  int *v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(char *, char *, uint64_t);
  void (*v256)(char *, char *, uint64_t);
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t *v260;

  if (a1 != a2)
  {
    sub_10002F014((uint64_t)a1, &qword_1001BFA18);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v254 = *(_QWORD *)(v15 - 8);
  v257 = v15;
  (*(void (**)(char *, char *))(v254 + 24))(v13, v14);
  v16 = type metadata accessor for ForecastEntry(0);
  v17 = *(int *)(v16 + 20);
  v18 = &v13[v17];
  v19 = &v14[v17];
  v20 = type metadata accessor for TimelineEntryRelevance(0);
  v21 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v20);
  v22 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v20);
  v260 = a1;
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v18, 0, 1, v20);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  v23 = *(_QWORD *)(v20 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v20);
LABEL_11:
    v24 = sub_100005D40(&qword_1001BFA20);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v18, v19, v20);
LABEL_12:
  v258 = v16;
  v25 = *(int *)(v16 + 24);
  v26 = &v13[v25];
  v27 = &v14[v25];
  *(_QWORD *)v26 = *(_QWORD *)&v14[v25];
  v28 = *(_QWORD *)&v14[v25 + 8];
  v29 = *(_QWORD *)&v13[v25 + 8];
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
  v30 = *((_QWORD *)v27 + 3);
  v31 = *((_QWORD *)v26 + 3);
  *((_QWORD *)v26 + 3) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
  v32 = *((_QWORD *)v27 + 5);
  v33 = *((_QWORD *)v26 + 5);
  *((_QWORD *)v26 + 5) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v26[48] = v27[48];
  v26[49] = v27[49];
  v26[50] = v27[50];
  v26[51] = v27[51];
  v34 = type metadata accessor for WidgetContext(0);
  v35 = *(int *)(v34 + 40);
  v36 = &v26[v35];
  v37 = &v27[v35];
  v38 = type metadata accessor for URL(0);
  v39 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v36, 1, v38);
  v40 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v37, 1, v38);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v36, 0, 1, v38);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v41 = *(_QWORD *)(v38 - 8);
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v38);
LABEL_17:
    v42 = sub_100005D40(&qword_1001BFA28);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 24))(v36, v37, v38);
LABEL_18:
  v43 = *(int *)(v34 + 44);
  v44 = &v26[v43];
  v45 = &v27[v43];
  v46 = *(_QWORD *)v45;
  v47 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v44[8] = v45[8];
  v48 = v260;
  if (v260 != a2)
  {
    v49 = *(int *)(v258 + 28);
    v50 = &v13[v49];
    v51 = &v14[v49];
    sub_10002C7E0((uint64_t)v50);
    v52 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v51, v52) == 1)
    {
      v53 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v51, v53);
      v55 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v81 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v50, v51, v81);
      }
      else
      {
        v259 = v50;
        v252 = v53;
        v253 = v52;
        v251 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v56 = type metadata accessor for UUID(0);
          v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
          v57(v50, v51, v56);
          v58 = type metadata accessor for InstantWeatherViewModel(0);
          v59 = *(int *)(v58 + 20);
          v60 = &v50[v59];
          v61 = &v51[v59];
          v62 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
          v63 = *(int *)(v58 + 24);
          v64 = &v50[v63];
          v65 = &v51[v63];
          v249 = v57;
          v57(&v50[v63], v65, v56);
          v66 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v67 = *(void (**)(char *, char *, uint64_t))(v254 + 16);
          v67(&v64[v66[5]], &v65[v66[5]], v257);
          v255 = v67;
          v67(&v64[v66[6]], &v65[v66[6]], v257);
          v68 = v66[7];
          v69 = &v64[v68];
          v70 = &v65[v68];
          v71 = sub_100005D40(&qword_1001BF090);
          v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
          v72(v69, v70, v71);
          v72(&v64[v66[8]], &v65[v66[8]], v71);
          v73 = v66[9];
          v74 = &v64[v73];
          v75 = &v65[v73];
          *(_QWORD *)v74 = *(_QWORD *)v75;
          v76 = *((_QWORD *)v75 + 1);
          *((_QWORD *)v74 + 1) = v76;
          v77 = v66[10];
          v78 = &v64[v77];
          v79 = &v65[v77];
          swift_bridgeObjectRetain(v76);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v79, 1, v71))
          {
            v80 = sub_100005D40(&qword_1001BF098);
            memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
          }
          else
          {
            v72(v78, v79, v71);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v78, 0, 1, v71);
          }
          v107 = v66[11];
          v108 = &v64[v107];
          v109 = &v65[v107];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v107], 1, v71))
          {
            v110 = sub_100005D40(&qword_1001BF098);
            memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
          }
          else
          {
            v72(v108, v109, v71);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v108, 0, 1, v71);
          }
          v50 = v259;
          v115 = v66[12];
          v116 = &v64[v115];
          v117 = &v65[v115];
          v249(&v64[v115], &v65[v115], v56);
          v118 = (int *)type metadata accessor for ConditionViewModel(0);
          v119 = v118[5];
          v120 = &v116[v119];
          v121 = &v117[v119];
          v122 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
          v123 = v118[6];
          v124 = &v116[v123];
          v125 = &v117[v123];
          *(_QWORD *)v124 = *(_QWORD *)v125;
          v126 = *((_QWORD *)v125 + 1);
          *((_QWORD *)v124 + 1) = v126;
          v127 = v118[7];
          v128 = &v116[v127];
          v129 = &v117[v127];
          *(_QWORD *)v128 = *(_QWORD *)v129;
          v130 = *((_QWORD *)v129 + 1);
          *((_QWORD *)v128 + 1) = v130;
          v116[v118[8]] = v117[v118[8]];
          v116[v118[9]] = v117[v118[9]];
          v116[v118[10]] = v117[v118[10]];
          *(_QWORD *)&v64[v66[13]] = *(_QWORD *)&v65[v66[13]];
          v131 = v66[14];
          v132 = &v64[v131];
          v133 = &v65[v131];
          v134 = type metadata accessor for CloudAltitudeKind(0);
          v135 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16);
          swift_bridgeObjectRetain(v126);
          swift_bridgeObjectRetain(v130);
          v135(v132, v133, v134);
          v136 = v66[15];
          v137 = &v64[v136];
          v138 = &v65[v136];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v136], 1, v257))
          {
            v139 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
          }
          else
          {
            v255(v137, v138, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v137, 0, 1, v257);
          }
          v165 = v66[16];
          v166 = &v64[v165];
          v167 = &v65[v165];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v165], 1, v257))
          {
            v168 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
          }
          else
          {
            v255(v166, v167, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v166, 0, 1, v257);
          }
          v173 = v66[17];
          v174 = &v64[v173];
          v175 = &v65[v173];
          v176 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v176 - 8) + 16))(v174, v175, v176);
          v177 = v66[18];
          v178 = &v64[v177];
          v179 = &v65[v177];
          v180 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v180 - 8) + 16))(v178, v179, v180);
          *(_QWORD *)&v64[v66[19]] = *(_QWORD *)&v65[v66[19]];
          v181 = v66[20];
          v182 = &v64[v181];
          v183 = &v65[v181];
          if (*((_QWORD *)v183 + 1))
          {
            *(_QWORD *)v182 = *(_QWORD *)v183;
            v184 = *((_QWORD *)v183 + 1);
            *((_QWORD *)v182 + 1) = v184;
            v185 = *((_QWORD *)v183 + 2);
            v186 = *((_QWORD *)v183 + 3);
            v187 = v183[32];
            swift_bridgeObjectRetain(v184);
            sub_100006E58(v185, v186, v187);
            *((_QWORD *)v182 + 2) = v185;
            *((_QWORD *)v182 + 3) = v186;
            v182[32] = v187;
          }
          else
          {
            v203 = *(_OWORD *)v183;
            v204 = *((_OWORD *)v183 + 1);
            v182[32] = v183[32];
            *(_OWORD *)v182 = v203;
            *((_OWORD *)v182 + 1) = v204;
          }
          v48 = v260;
          v53 = v252;
          v52 = v253;
        }
        else
        {
          v82 = type metadata accessor for UUID(0);
          v83 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16);
          v83(v50, v51, v82);
          v84 = type metadata accessor for AggregateWeatherViewModel(0);
          v85 = *(int *)(v84 + 20);
          v86 = &v50[v85];
          v87 = &v51[v85];
          v88 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v86, v87, v88);
          v248 = v83;
          v250 = (int *)v84;
          v89 = *(int *)(v84 + 24);
          v90 = &v50[v89];
          v247 = v51;
          v91 = &v51[v89];
          v83(&v50[v89], v91, v82);
          v92 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v93 = *(void (**)(char *, char *, uint64_t))(v254 + 16);
          v93(&v90[v92[5]], &v91[v92[5]], v257);
          v256 = v93;
          v93(&v90[v92[6]], &v91[v92[6]], v257);
          v94 = v92[7];
          v95 = &v90[v94];
          v96 = &v91[v94];
          v97 = sub_100005D40(&qword_1001BF090);
          v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
          v98(v95, v96, v97);
          v98(&v90[v92[8]], &v91[v92[8]], v97);
          v99 = v92[9];
          v100 = &v90[v99];
          v101 = &v91[v99];
          *(_QWORD *)v100 = *(_QWORD *)v101;
          v102 = *((_QWORD *)v101 + 1);
          *((_QWORD *)v100 + 1) = v102;
          v103 = v92[10];
          v104 = &v90[v103];
          v105 = &v91[v103];
          swift_bridgeObjectRetain(v102);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v105, 1, v97))
          {
            v106 = sub_100005D40(&qword_1001BF098);
            memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
          }
          else
          {
            v98(v104, v105, v97);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v104, 0, 1, v97);
          }
          v111 = v92[11];
          v112 = &v90[v111];
          v113 = &v91[v111];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v111], 1, v97))
          {
            v114 = sub_100005D40(&qword_1001BF098);
            memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
          }
          else
          {
            v98(v112, v113, v97);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v112, 0, 1, v97);
          }
          v140 = v92[12];
          v141 = &v90[v140];
          v142 = &v91[v140];
          v246 = v82;
          v248(&v90[v140], &v91[v140], v82);
          v143 = (int *)type metadata accessor for ConditionViewModel(0);
          v144 = v143[5];
          v145 = &v141[v144];
          v146 = &v142[v144];
          v147 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 16))(v145, v146, v147);
          v148 = v143[6];
          v149 = &v141[v148];
          v150 = &v142[v148];
          *(_QWORD *)v149 = *(_QWORD *)v150;
          v151 = *((_QWORD *)v150 + 1);
          *((_QWORD *)v149 + 1) = v151;
          v152 = v143[7];
          v153 = &v141[v152];
          v154 = &v142[v152];
          *(_QWORD *)v153 = *(_QWORD *)v154;
          v155 = *((_QWORD *)v154 + 1);
          *((_QWORD *)v153 + 1) = v155;
          v141[v143[8]] = v142[v143[8]];
          v141[v143[9]] = v142[v143[9]];
          v141[v143[10]] = v142[v143[10]];
          *(_QWORD *)&v90[v92[13]] = *(_QWORD *)&v91[v92[13]];
          v156 = v92[14];
          v157 = &v90[v156];
          v158 = &v91[v156];
          v159 = type metadata accessor for CloudAltitudeKind(0);
          v160 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 16);
          swift_bridgeObjectRetain(v151);
          swift_bridgeObjectRetain(v155);
          v160(v157, v158, v159);
          v161 = v92[15];
          v162 = &v90[v161];
          v163 = &v91[v161];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v161], 1, v257))
          {
            v164 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
          }
          else
          {
            v256(v162, v163, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v162, 0, 1, v257);
          }
          v169 = v92[16];
          v170 = &v90[v169];
          v171 = &v91[v169];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v169], 1, v257))
          {
            v172 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
          }
          else
          {
            v256(v170, v171, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v170, 0, 1, v257);
          }
          v188 = v92[17];
          v189 = &v90[v188];
          v190 = &v91[v188];
          v191 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v191 - 8) + 16))(v189, v190, v191);
          v192 = v92[18];
          v193 = &v90[v192];
          v194 = &v91[v192];
          v195 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v193, v194, v195);
          *(_QWORD *)&v90[v92[19]] = *(_QWORD *)&v91[v92[19]];
          v196 = v92[20];
          v197 = &v90[v196];
          v198 = &v91[v196];
          if (*((_QWORD *)v198 + 1))
          {
            *(_QWORD *)v197 = *(_QWORD *)v198;
            v199 = *((_QWORD *)v198 + 1);
            *((_QWORD *)v197 + 1) = v199;
            v200 = *((_QWORD *)v198 + 2);
            v201 = *((_QWORD *)v198 + 3);
            v202 = v198[32];
            swift_bridgeObjectRetain(v199);
            sub_100006E58(v200, v201, v202);
            *((_QWORD *)v197 + 2) = v200;
            *((_QWORD *)v197 + 3) = v201;
            v197[32] = v202;
          }
          else
          {
            v205 = *(_OWORD *)v198;
            v206 = *((_OWORD *)v198 + 1);
            v197[32] = v198[32];
            *(_OWORD *)v197 = v205;
            *((_OWORD *)v197 + 1) = v206;
          }
          v50 = v259;
          v207 = v250[7];
          v208 = *(_QWORD *)&v247[v207];
          *(_QWORD *)&v259[v207] = v208;
          v209 = v250[8];
          v210 = *(_QWORD *)&v247[v209];
          *(_QWORD *)&v259[v209] = v210;
          v211 = v250[9];
          v212 = &v259[v211];
          v213 = &v247[v211];
          v214 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v208);
          swift_bridgeObjectRetain(v210);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v213, 1, (uint64_t)v214))
          {
            v215 = sub_100005D40(&qword_1001BFA30);
            memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64));
          }
          else
          {
            v248(v212, v213, v246);
            v256(&v212[v214[5]], &v213[v214[5]], v257);
            *(_QWORD *)&v212[v214[6]] = *(_QWORD *)&v213[v214[6]];
            v216 = v214[7];
            v217 = &v212[v216];
            v218 = &v213[v216];
            v219 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v219 - 8) + 16))(v217, v218, v219);
            v220 = v214[8];
            v221 = &v212[v220];
            v222 = &v213[v220];
            v223 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v223 - 8) + 16))(v221, v222, v223);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v212, 0, 1, (uint64_t)v214);
          }
          v224 = v250[10];
          v225 = &v259[v224];
          v226 = &v247[v224];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          v52 = v253;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v226, 1, HourPrecipitationChartViewModel))
          {
            v228 = sub_100005D40(&qword_1001BFA38);
            memcpy(v225, v226, *(_QWORD *)(*(_QWORD *)(v228 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v225, v226, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v225, 0, 1, HourPrecipitationChartViewModel);
          }
          v53 = v252;
          v229 = v250[11];
          v230 = *(_QWORD *)&v247[v229];
          *(_QWORD *)&v259[v229] = v230;
          v231 = v250[12];
          v232 = &v259[v231];
          v233 = &v247[v231];
          v234 = *(_QWORD *)v233;
          *((_WORD *)v232 + 4) = *((_WORD *)v233 + 4);
          *(_QWORD *)v232 = v234;
          v235 = v250[13];
          v236 = &v259[v235];
          v237 = &v247[v235];
          swift_bridgeObjectRetain(v230);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v237, 1, v38))
          {
            v238 = sub_100005D40(&qword_1001BFA28);
            memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v236, v237, v38);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v236, 0, 1, v38);
          }
          v239 = v250[14];
          v240 = &v259[v239];
          v241 = &v247[v239];
          v242 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v241, 1, v242))
          {
            v243 = sub_100005D40(&qword_1001BFA40);
            memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v243 - 8) + 64));
          }
          else
          {
            v244 = swift_getEnumCaseMultiPayload(v241, v242) == 1;
            v256(v240, v241, v257);
            swift_storeEnumTagMultiPayload(v240, v242, v244);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v240, 0, 1, v242);
          }
          v48 = v260;
        }
        v55 = v251;
      }
      swift_storeEnumTagMultiPayload(v50, v53, v55);
      swift_storeEnumTagMultiPayload(v50, v52, 1);
    }
    else
    {
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
  }
  return v48;
}

uint64_t sub_10002C7E0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ForecastEntry.Model(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_10002C81C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t EnumCaseMultiPayload;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  int *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  __int128 v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  __int128 v149;
  int *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  int *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  _BOOL8 v182;
  uint64_t v184;
  uint64_t v185;
  int *v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  void (*v193)(char *, char *);

  v6 = sub_100005D40(&qword_1001BFA18);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v192 = type metadata accessor for Date(0);
  v193 = *(void (**)(char *, char *))(*(_QWORD *)(v192 - 8) + 32);
  v193(v9, v10);
  v11 = (int *)type metadata accessor for ForecastEntry(0);
  v12 = v11[5];
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for TimelineEntryRelevance(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v15))
  {
    v16 = sub_100005D40(&qword_1001BFA20);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v13, 0, 1, v15);
  }
  v17 = v11[6];
  v18 = &v9[v17];
  v19 = &v10[v17];
  v20 = *(_OWORD *)&v10[v17 + 16];
  *(_OWORD *)v18 = *(_OWORD *)&v10[v17];
  *((_OWORD *)v18 + 1) = v20;
  *((_OWORD *)v18 + 2) = *(_OWORD *)&v10[v17 + 32];
  *((_DWORD *)v18 + 12) = *(_DWORD *)&v10[v17 + 48];
  v21 = type metadata accessor for WidgetContext(0);
  v22 = *(int *)(v21 + 40);
  v23 = &v18[v22];
  v24 = &v19[v22];
  v25 = type metadata accessor for URL(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v25))
  {
    v26 = sub_100005D40(&qword_1001BFA28);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v25);
  }
  v27 = *(int *)(v21 + 44);
  v28 = &v18[v27];
  v29 = &v19[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v29[8];
  v30 = v11[7];
  v31 = &v9[v30];
  v32 = &v10[v30];
  v33 = type metadata accessor for ForecastEntry.Model(0);
  if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
  {
    v34 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v32, v34);
    v36 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v57 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v31, v32, v57);
    }
    else
    {
      v188 = v34;
      v189 = v33;
      v190 = v31;
      v191 = a1;
      v187 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v37 = type metadata accessor for UUID(0);
        v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
        v38(v31, v32, v37);
        v39 = type metadata accessor for InstantWeatherViewModel(0);
        v40 = *(int *)(v39 + 20);
        v41 = &v31[v40];
        v42 = &v32[v40];
        v43 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
        v44 = *(int *)(v39 + 24);
        v45 = &v31[v44];
        v46 = &v32[v44];
        v38(&v31[v44], &v32[v44], v37);
        v47 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        ((void (*)(char *, char *, uint64_t))v193)(&v45[v47[5]], &v46[v47[5]], v192);
        ((void (*)(char *, char *, uint64_t))v193)(&v45[v47[6]], &v46[v47[6]], v192);
        v48 = v47[7];
        v49 = &v45[v48];
        v50 = &v46[v48];
        v51 = sub_100005D40(&qword_1001BF090);
        v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32);
        v52(v49, v50, v51);
        v52(&v45[v47[8]], &v46[v47[8]], v51);
        *(_OWORD *)&v45[v47[9]] = *(_OWORD *)&v46[v47[9]];
        v53 = v47[10];
        v54 = &v45[v53];
        v55 = &v46[v53];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v46[v53], 1, v51))
        {
          v56 = sub_100005D40(&qword_1001BF098);
          memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          v52(v54, v55, v51);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v54, 0, 1, v51);
        }
        v78 = v47[11];
        v79 = &v45[v78];
        v80 = &v46[v78];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v46[v78], 1, v51))
        {
          v81 = sub_100005D40(&qword_1001BF098);
          memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
        }
        else
        {
          v52(v79, v80, v51);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v79, 0, 1, v51);
        }
        v82 = v47[12];
        v83 = &v45[v82];
        v84 = &v46[v82];
        v38(&v45[v82], &v46[v82], v37);
        v85 = (int *)type metadata accessor for ConditionViewModel(0);
        v86 = v85[5];
        v87 = &v83[v86];
        v88 = &v84[v86];
        v89 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v87, v88, v89);
        *(_OWORD *)&v83[v85[6]] = *(_OWORD *)&v84[v85[6]];
        *(_OWORD *)&v83[v85[7]] = *(_OWORD *)&v84[v85[7]];
        v83[v85[8]] = v84[v85[8]];
        v83[v85[9]] = v84[v85[9]];
        v83[v85[10]] = v84[v85[10]];
        *(_QWORD *)&v45[v47[13]] = *(_QWORD *)&v46[v47[13]];
        v90 = v47[14];
        v91 = &v45[v90];
        v92 = &v46[v90];
        v93 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(v91, v92, v93);
        v94 = v47[15];
        v95 = &v45[v94];
        v96 = &v46[v94];
        v31 = v190;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v46[v94], 1, v192))
        {
          v97 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v193)(v95, v96, v192);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v192);
        }
        a1 = v191;
        v33 = v189;
        v98 = v47[16];
        v99 = &v45[v98];
        v100 = &v46[v98];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v46[v98], 1, v192))
        {
          v101 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v193)(v99, v100, v192);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v192);
        }
        v102 = v47[17];
        v103 = &v45[v102];
        v104 = &v46[v102];
        v105 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 32))(v103, v104, v105);
        v106 = v47[18];
        v107 = &v45[v106];
        v108 = &v46[v106];
        v109 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 32))(v107, v108, v109);
        *(_QWORD *)&v45[v47[19]] = *(_QWORD *)&v46[v47[19]];
        v110 = v47[20];
        v111 = &v45[v110];
        v112 = &v46[v110];
        v111[32] = v112[32];
        v113 = *((_OWORD *)v112 + 1);
        *(_OWORD *)v111 = *(_OWORD *)v112;
        *((_OWORD *)v111 + 1) = v113;
        v34 = v188;
      }
      else
      {
        v184 = v25;
        v58 = type metadata accessor for UUID(0);
        v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32);
        v59(v31, v32, v58);
        v60 = type metadata accessor for AggregateWeatherViewModel(0);
        v61 = *(int *)(v60 + 20);
        v62 = &v31[v61];
        v63 = &v32[v61];
        v64 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v62, v63, v64);
        v185 = v58;
        v186 = (int *)v60;
        v65 = *(int *)(v60 + 24);
        v66 = &v31[v65];
        v67 = &v32[v65];
        v59(&v31[v65], &v32[v65], v58);
        v68 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        ((void (*)(char *, char *, uint64_t))v193)(&v66[v68[5]], &v67[v68[5]], v192);
        ((void (*)(char *, char *, uint64_t))v193)(&v66[v68[6]], &v67[v68[6]], v192);
        v69 = v68[7];
        v70 = &v66[v69];
        v71 = &v67[v69];
        v72 = sub_100005D40(&qword_1001BF090);
        v73 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 32);
        v73(v70, v71, v72);
        v73(&v66[v68[8]], &v67[v68[8]], v72);
        *(_OWORD *)&v66[v68[9]] = *(_OWORD *)&v67[v68[9]];
        v74 = v68[10];
        v75 = &v66[v74];
        v76 = &v67[v74];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v67[v74], 1, v72))
        {
          v77 = sub_100005D40(&qword_1001BF098);
          memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
        }
        else
        {
          v73(v75, v76, v72);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v75, 0, 1, v72);
        }
        v114 = v68[11];
        v115 = &v66[v114];
        v116 = &v67[v114];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v67[v114], 1, v72))
        {
          v117 = sub_100005D40(&qword_1001BF098);
          memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
        }
        else
        {
          v73(v115, v116, v72);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v72);
        }
        v118 = v68[12];
        v119 = &v66[v118];
        v120 = &v67[v118];
        v59(&v66[v118], &v67[v118], v185);
        v121 = (int *)type metadata accessor for ConditionViewModel(0);
        v122 = v121[5];
        v123 = &v119[v122];
        v124 = &v120[v122];
        v125 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v123, v124, v125);
        *(_OWORD *)&v119[v121[6]] = *(_OWORD *)&v120[v121[6]];
        *(_OWORD *)&v119[v121[7]] = *(_OWORD *)&v120[v121[7]];
        v119[v121[8]] = v120[v121[8]];
        v119[v121[9]] = v120[v121[9]];
        v119[v121[10]] = v120[v121[10]];
        *(_QWORD *)&v66[v68[13]] = *(_QWORD *)&v67[v68[13]];
        v126 = v68[14];
        v127 = &v66[v126];
        v128 = &v67[v126];
        v129 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 32))(v127, v128, v129);
        v130 = v68[15];
        v131 = &v66[v130];
        v132 = &v67[v130];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v67[v130], 1, v192))
        {
          v133 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v193)(v131, v132, v192);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v131, 0, 1, v192);
        }
        v31 = v190;
        v134 = v68[16];
        v135 = &v66[v134];
        v136 = &v67[v134];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v67[v134], 1, v192))
        {
          v137 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v193)(v135, v136, v192);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v135, 0, 1, v192);
        }
        v138 = v68[17];
        v139 = &v66[v138];
        v140 = &v67[v138];
        v141 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 32))(v139, v140, v141);
        v142 = v68[18];
        v143 = &v66[v142];
        v144 = &v67[v142];
        v145 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
        *(_QWORD *)&v66[v68[19]] = *(_QWORD *)&v67[v68[19]];
        v146 = v68[20];
        v147 = &v66[v146];
        v148 = &v67[v146];
        v147[32] = v148[32];
        v149 = *((_OWORD *)v148 + 1);
        *(_OWORD *)v147 = *(_OWORD *)v148;
        *((_OWORD *)v147 + 1) = v149;
        v150 = v186;
        *(_QWORD *)&v190[v186[7]] = *(_QWORD *)&v32[v186[7]];
        *(_QWORD *)&v190[v186[8]] = *(_QWORD *)&v32[v186[8]];
        v151 = v186[9];
        v152 = &v190[v151];
        v153 = &v32[v151];
        v154 = (int *)type metadata accessor for AirQualityViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v153, 1, (uint64_t)v154))
        {
          v155 = sub_100005D40(&qword_1001BFA30);
          memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
        }
        else
        {
          v59(v152, v153, v185);
          ((void (*)(char *, char *, uint64_t))v193)(&v152[v154[5]], &v153[v154[5]], v192);
          *(_QWORD *)&v152[v154[6]] = *(_QWORD *)&v153[v154[6]];
          v156 = v154[7];
          v157 = &v152[v156];
          v158 = &v153[v156];
          v159 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 32))(v157, v158, v159);
          v160 = v154[8];
          v161 = &v152[v160];
          v162 = &v153[v160];
          v163 = type metadata accessor for AirQualityScaleCategory(0);
          v164 = v161;
          v150 = v186;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v163 - 8) + 32))(v164, v162, v163);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v152, 0, 1, (uint64_t)v154);
        }
        a1 = v191;
        v34 = v188;
        v165 = v150[10];
        v166 = &v190[v165];
        v167 = &v32[v165];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v167, 1, HourPrecipitationChartViewModel))
        {
          v169 = sub_100005D40(&qword_1001BFA38);
          memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v166, v167, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v166, 0, 1, HourPrecipitationChartViewModel);
        }
        *(_QWORD *)&v190[v150[11]] = *(_QWORD *)&v32[v150[11]];
        v170 = v150[12];
        v171 = &v190[v170];
        v172 = &v32[v170];
        *(_QWORD *)v171 = *(_QWORD *)v172;
        *((_WORD *)v171 + 4) = *((_WORD *)v172 + 4);
        v173 = v150[13];
        v174 = &v190[v173];
        v175 = &v32[v173];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v32[v173], 1, v184))
        {
          v176 = sub_100005D40(&qword_1001BFA28);
          memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v184 - 8) + 32))(v174, v175, v184);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v174, 0, 1, v184);
        }
        v177 = v150[14];
        v178 = &v190[v177];
        v179 = &v32[v177];
        v180 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v179, 1, v180))
        {
          v181 = sub_100005D40(&qword_1001BFA40);
          memcpy(v178, v179, *(_QWORD *)(*(_QWORD *)(v181 - 8) + 64));
        }
        else
        {
          v182 = swift_getEnumCaseMultiPayload(v179, v180) == 1;
          ((void (*)(char *, char *, uint64_t))v193)(v178, v179, v192);
          swift_storeEnumTagMultiPayload(v178, v180, v182);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v178, 0, 1, v180);
        }
        v33 = v189;
      }
      v36 = v187;
    }
    swift_storeEnumTagMultiPayload(v31, v34, v36);
    swift_storeEnumTagMultiPayload(v31, v33, 1);
  }
  else
  {
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  return a1;
}

char *sub_10002D604(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  int *v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  __int128 v165;
  int *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  int *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  _BOOL8 v198;
  void (*v200)(char *, char *, uint64_t);
  uint64_t v201;
  int *v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(char *, char *, uint64_t);
  void (*v208)(char *, char *, uint64_t);
  uint64_t v209;
  void (*v210)(char *, char *, uint64_t);
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;

  if (a1 != a2)
  {
    sub_10002F014((uint64_t)a1, &qword_1001BFA18);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v214 = a1;
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v206 = *(_QWORD *)(v11 - 8);
  v211 = v11;
  (*(void (**)(char *, char *))(v206 + 40))(v9, v10);
  v12 = type metadata accessor for ForecastEntry(0);
  v13 = *(int *)(v12 + 20);
  v14 = &v9[v13];
  v15 = &v10[v13];
  v16 = type metadata accessor for TimelineEntryRelevance(0);
  v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v16);
  v18 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v16);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v16);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v19 = *(_QWORD *)(v16 - 8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v16);
LABEL_10:
    v20 = sub_100005D40(&qword_1001BFA20);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v14, v15, v16);
LABEL_11:
  v212 = v12;
  v21 = *(int *)(v12 + 24);
  v22 = &v9[v21];
  v23 = &v10[v21];
  v24 = *(_QWORD *)&v10[v21 + 8];
  v25 = *(_QWORD *)&v9[v21 + 8];
  *(_QWORD *)v22 = *(_QWORD *)&v10[v21];
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *((_QWORD *)v23 + 3);
  v27 = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
  *((_QWORD *)v22 + 3) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *((_QWORD *)v23 + 5);
  v29 = *((_QWORD *)v22 + 5);
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  *((_QWORD *)v22 + 5) = v28;
  swift_bridgeObjectRelease(v29);
  *((_WORD *)v22 + 24) = *((_WORD *)v23 + 24);
  v22[50] = v23[50];
  v22[51] = v23[51];
  v30 = type metadata accessor for WidgetContext(0);
  v31 = *(int *)(v30 + 40);
  v32 = &v22[v31];
  v33 = &v23[v31];
  v34 = type metadata accessor for URL(0);
  v35 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v34);
  v36 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v33, 1, v34);
  v209 = v34;
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v32, 0, 1, v34);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  v37 = *(_QWORD *)(v34 - 8);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v34);
LABEL_16:
    v38 = sub_100005D40(&qword_1001BFA28);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v32, v33, v34);
LABEL_17:
  v39 = *(int *)(v30 + 44);
  v40 = &v22[v39];
  v41 = &v23[v39];
  v42 = *(_QWORD *)v40;
  *(_QWORD *)v40 = *(_QWORD *)&v23[v39];
  swift_bridgeObjectRelease(v42);
  v40[8] = v41[8];
  v43 = v214;
  if (v214 != a2)
  {
    v44 = *(int *)(v212 + 28);
    v45 = &v9[v44];
    v46 = &v10[v44];
    sub_10002C7E0((uint64_t)&v9[v44]);
    v47 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v46, v47) == 1)
    {
      v48 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v46, v48);
      v50 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v72 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v45, v46, v72);
      }
      else
      {
        v213 = v45;
        v204 = v48;
        v205 = v47;
        v203 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v51 = type metadata accessor for UUID(0);
          v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32);
          v52(v45, v46, v51);
          v53 = type metadata accessor for InstantWeatherViewModel(0);
          v54 = *(int *)(v53 + 20);
          v55 = &v45[v54];
          v56 = &v46[v54];
          v57 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
          v58 = *(int *)(v53 + 24);
          v59 = &v45[v58];
          v60 = &v46[v58];
          v210 = v52;
          v52(&v45[v58], &v46[v58], v51);
          v61 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v62 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
          v62(&v59[v61[5]], &v60[v61[5]], v211);
          v207 = v62;
          v62(&v59[v61[6]], &v60[v61[6]], v211);
          v63 = v61[7];
          v64 = &v59[v63];
          v65 = &v60[v63];
          v66 = sub_100005D40(&qword_1001BF090);
          v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32);
          v67(v64, v65, v66);
          v67(&v59[v61[8]], &v60[v61[8]], v66);
          *(_OWORD *)&v59[v61[9]] = *(_OWORD *)&v60[v61[9]];
          v68 = v61[10];
          v69 = &v59[v68];
          v70 = &v60[v68];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v68], 1, v66))
          {
            v71 = sub_100005D40(&qword_1001BF098);
            memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
          }
          else
          {
            v67(v69, v70, v66);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v69, 0, 1, v66);
          }
          v94 = v61[11];
          v95 = &v59[v94];
          v96 = &v60[v94];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v94], 1, v66))
          {
            v97 = sub_100005D40(&qword_1001BF098);
            memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
          }
          else
          {
            v67(v95, v96, v66);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v66);
          }
          v45 = v213;
          v102 = v61[12];
          v103 = &v59[v102];
          v104 = &v60[v102];
          v210(&v59[v102], &v60[v102], v51);
          v105 = (int *)type metadata accessor for ConditionViewModel(0);
          v106 = v105[5];
          v107 = &v103[v106];
          v108 = &v104[v106];
          v109 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 32))(v107, v108, v109);
          *(_OWORD *)&v103[v105[6]] = *(_OWORD *)&v104[v105[6]];
          *(_OWORD *)&v103[v105[7]] = *(_OWORD *)&v104[v105[7]];
          v103[v105[8]] = v104[v105[8]];
          v103[v105[9]] = v104[v105[9]];
          v103[v105[10]] = v104[v105[10]];
          *(_QWORD *)&v59[v61[13]] = *(_QWORD *)&v60[v61[13]];
          v110 = v61[14];
          v111 = &v59[v110];
          v112 = &v60[v110];
          v113 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v113 - 8) + 32))(v111, v112, v113);
          v114 = v61[15];
          v115 = &v59[v114];
          v116 = &v60[v114];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v114], 1, v211))
          {
            v117 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            v207(v115, v116, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v211);
          }
          v134 = v61[16];
          v135 = &v59[v134];
          v136 = &v60[v134];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v134], 1, v211))
          {
            v137 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
          }
          else
          {
            v207(v135, v136, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v135, 0, 1, v211);
          }
          v142 = v61[17];
          v143 = &v59[v142];
          v144 = &v60[v142];
          v145 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
          v146 = v61[18];
          v147 = &v59[v146];
          v148 = &v60[v146];
          v149 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 32))(v147, v148, v149);
          *(_QWORD *)&v59[v61[19]] = *(_QWORD *)&v60[v61[19]];
          v150 = v61[20];
          v151 = &v59[v150];
          v152 = &v60[v150];
          v151[32] = v152[32];
          v153 = *((_OWORD *)v152 + 1);
          *(_OWORD *)v151 = *(_OWORD *)v152;
          *((_OWORD *)v151 + 1) = v153;
          v43 = v214;
          v48 = v204;
          v47 = v205;
        }
        else
        {
          v73 = type metadata accessor for UUID(0);
          v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32);
          v74(v45, v46, v73);
          v75 = type metadata accessor for AggregateWeatherViewModel(0);
          v76 = *(int *)(v75 + 20);
          v77 = &v45[v76];
          v78 = &v46[v76];
          v79 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
          v201 = v73;
          v202 = (int *)v75;
          v80 = *(int *)(v75 + 24);
          v81 = &v45[v80];
          v82 = &v46[v80];
          v200 = v74;
          v74(&v45[v80], &v46[v80], v73);
          v83 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v84 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
          v84(&v81[v83[5]], &v82[v83[5]], v211);
          v208 = v84;
          v84(&v81[v83[6]], &v82[v83[6]], v211);
          v85 = v83[7];
          v86 = &v81[v85];
          v87 = &v82[v85];
          v88 = sub_100005D40(&qword_1001BF090);
          v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32);
          v89(v86, v87, v88);
          v89(&v81[v83[8]], &v82[v83[8]], v88);
          *(_OWORD *)&v81[v83[9]] = *(_OWORD *)&v82[v83[9]];
          v90 = v83[10];
          v91 = &v81[v90];
          v92 = &v82[v90];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v90], 1, v88))
          {
            v93 = sub_100005D40(&qword_1001BF098);
            memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
          }
          else
          {
            v89(v91, v92, v88);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v91, 0, 1, v88);
          }
          v98 = v83[11];
          v99 = &v81[v98];
          v100 = &v82[v98];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v98], 1, v88))
          {
            v101 = sub_100005D40(&qword_1001BF098);
            memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
          }
          else
          {
            v89(v99, v100, v88);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v88);
          }
          v118 = v83[12];
          v119 = &v81[v118];
          v120 = &v82[v118];
          v200(&v81[v118], &v82[v118], v201);
          v121 = (int *)type metadata accessor for ConditionViewModel(0);
          v122 = v121[5];
          v123 = &v119[v122];
          v124 = &v120[v122];
          v125 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v123, v124, v125);
          *(_OWORD *)&v119[v121[6]] = *(_OWORD *)&v120[v121[6]];
          *(_OWORD *)&v119[v121[7]] = *(_OWORD *)&v120[v121[7]];
          v119[v121[8]] = v120[v121[8]];
          v119[v121[9]] = v120[v121[9]];
          v119[v121[10]] = v120[v121[10]];
          *(_QWORD *)&v81[v83[13]] = *(_QWORD *)&v82[v83[13]];
          v126 = v83[14];
          v127 = &v81[v126];
          v128 = &v82[v126];
          v129 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 32))(v127, v128, v129);
          v130 = v83[15];
          v131 = &v81[v130];
          v132 = &v82[v130];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v130], 1, v211))
          {
            v133 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
          }
          else
          {
            v208(v131, v132, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v131, 0, 1, v211);
          }
          v138 = v83[16];
          v139 = &v81[v138];
          v140 = &v82[v138];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v138], 1, v211))
          {
            v141 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
          }
          else
          {
            v208(v139, v140, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v139, 0, 1, v211);
          }
          v154 = v83[17];
          v155 = &v81[v154];
          v156 = &v82[v154];
          v157 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 32))(v155, v156, v157);
          v158 = v83[18];
          v159 = &v81[v158];
          v160 = &v82[v158];
          v161 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 32))(v159, v160, v161);
          *(_QWORD *)&v81[v83[19]] = *(_QWORD *)&v82[v83[19]];
          v162 = v83[20];
          v163 = &v81[v162];
          v164 = &v82[v162];
          v163[32] = v164[32];
          v165 = *((_OWORD *)v164 + 1);
          *(_OWORD *)v163 = *(_OWORD *)v164;
          *((_OWORD *)v163 + 1) = v165;
          v166 = v202;
          v45 = v213;
          *(_QWORD *)&v213[v202[7]] = *(_QWORD *)&v46[v202[7]];
          *(_QWORD *)&v213[v202[8]] = *(_QWORD *)&v46[v202[8]];
          v167 = v202[9];
          v168 = &v213[v167];
          v169 = &v46[v167];
          v170 = (int *)type metadata accessor for AirQualityViewModel(0);
          v48 = v204;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v169, 1, (uint64_t)v170))
          {
            v171 = sub_100005D40(&qword_1001BFA30);
            memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
          }
          else
          {
            v200(v168, v169, v201);
            v208(&v168[v170[5]], &v169[v170[5]], v211);
            *(_QWORD *)&v168[v170[6]] = *(_QWORD *)&v169[v170[6]];
            v172 = v170[7];
            v173 = &v168[v172];
            v174 = &v169[v172];
            v175 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v175 - 8) + 32))(v173, v174, v175);
            v176 = v170[8];
            v177 = &v168[v176];
            v178 = &v169[v176];
            v179 = type metadata accessor for AirQualityScaleCategory(0);
            v180 = v177;
            v166 = v202;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v179 - 8) + 32))(v180, v178, v179);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v168, 0, 1, (uint64_t)v170);
          }
          v181 = v166[10];
          v182 = &v213[v181];
          v183 = &v46[v181];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          v47 = v205;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v183, 1, HourPrecipitationChartViewModel))
          {
            v185 = sub_100005D40(&qword_1001BFA38);
            memcpy(v182, v183, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v182, v183, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v182, 0, 1, HourPrecipitationChartViewModel);
          }
          *(_QWORD *)&v213[v166[11]] = *(_QWORD *)&v46[v166[11]];
          v186 = v166[12];
          v187 = &v213[v186];
          v188 = &v46[v186];
          *(_QWORD *)v187 = *(_QWORD *)v188;
          *((_WORD *)v187 + 4) = *((_WORD *)v188 + 4);
          v189 = v166[13];
          v190 = &v213[v189];
          v191 = &v46[v189];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v46[v189], 1, v209))
          {
            v192 = sub_100005D40(&qword_1001BFA28);
            memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v209 - 8) + 32))(v190, v191, v209);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v190, 0, 1, v209);
          }
          v193 = v202[14];
          v194 = &v213[v193];
          v195 = &v46[v193];
          v196 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v195, 1, v196))
          {
            v197 = sub_100005D40(&qword_1001BFA40);
            memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
          }
          else
          {
            v198 = swift_getEnumCaseMultiPayload(v195, v196) == 1;
            v208(v194, v195, v211);
            swift_storeEnumTagMultiPayload(v194, v196, v198);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v194, 0, 1, v196);
          }
        }
        v50 = v203;
      }
      swift_storeEnumTagMultiPayload(v45, v48, v50);
      swift_storeEnumTagMultiPayload(v45, v47, 1);
    }
    else
    {
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
  }
  return v43;
}

uint64_t sub_10002E508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002E514);
}

uint64_t sub_10002E514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = type metadata accessor for ForecastEntry(0);
    v8 = a1 + *(int *)(a3 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
}

uint64_t sub_10002E580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002E58C);
}

uint64_t sub_10002E58C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = type metadata accessor for ForecastEntry(0);
    v10 = a1 + *(int *)(a4 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for UVIndexContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001BFAA8;
  if (!qword_1001BFAA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UVIndexContentView);
  return result;
}

void sub_10002E638(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_10002E6BC(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ForecastEntry(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_10002E6BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001BFAB8)
  {
    v2 = type metadata accessor for WidgetFamily(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001BFAB8);
  }
}

uint64_t sub_10002E710(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019E908, 1);
}

uint64_t sub_10002E720@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002E728(v1, a1);
}

uint64_t sub_10002E728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(char *, uint64_t);
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  Swift::String v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  void *object;
  __n128 v51;
  Swift::String v52;
  uint64_t v53;
  unint64_t v54;
  Swift::String v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  void *v60;
  __n128 v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;

  v81 = a2;
  v71 = sub_100005D40(&qword_1001BFAE8);
  __chkstk_darwin(v71);
  v72 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100005D40(&qword_1001BFAF0);
  __chkstk_darwin(v80);
  v76 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UltravioletInlineContentView(0);
  v74 = *(_QWORD *)(v5 - 8);
  v75 = v5;
  __chkstk_darwin(v5);
  v73 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for UVIndexContentView(0);
  v7 = __chkstk_darwin(v77);
  v67 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v64 = (uint64_t)&v63 - v9;
  v78 = sub_100005D40(&qword_1001BFAF8);
  __chkstk_darwin(v78);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100005D40(&qword_1001BFB00);
  __chkstk_darwin(v69);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100005D40(&qword_1001BFB08);
  __chkstk_darwin(v79);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UltravioletComplicationDataStatus(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UltravioletCircularContentView(0);
  v70 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for WidgetFamily(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v65 = (_DWORD *)((char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v24);
  v27 = (char *)&v63 - v26;
  sub_1000C54B0((uint64_t *)((char *)&v63 - v26));
  v66 = v23;
  v28 = *(uint64_t (**)(char *, uint64_t))(v23 + 88);
  v68 = v22;
  v29 = v28(v27, v22);
  if (v29 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_100157A34((uint64_t)v18);
    UltravioletCircularContentView.init(status:)(v18);
    v30 = v70;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v13, v21, v19);
    swift_storeEnumTagMultiPayload(v13, v69, 0);
    sub_10002EF14(&qword_1001BFB28, (uint64_t (*)(uint64_t))&type metadata accessor for UltravioletCircularContentView, (uint64_t)&protocol conformance descriptor for UltravioletCircularContentView);
    _ConditionalContent<>.init(storage:)(v13, v19, &type metadata for Never, v31, &protocol witness table for Never);
    sub_10002EFD4((uint64_t)v15, (uint64_t)v11, &qword_1001BFB08);
    swift_storeEnumTagMultiPayload(v11, v78, 0);
    v32 = sub_10002EE90();
    v33 = sub_10002EF50();
    _ConditionalContent<>.init(storage:)(v11, v79, v80, v32, v33);
    sub_10002F014((uint64_t)v15, &qword_1001BFB08);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v21, v19);
  }
  v35 = v78;
  if (v29 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    sub_10002EE4C(a1, v64);
    v82 = 0;
    v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v45._countAndFlagsBits = 0xD000000000000021;
    v45._object = (void *)0x8000000100186340;
    String.append(_:)(v45);
    v46 = v65;
    sub_1000C54B0(v65);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v47 = v68;
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v68, v48);
    object = v49._object;
    String.append(_:)(v49);
    v51 = swift_bridgeObjectRelease(object);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v66 + 8))(v46, v47, v51);
    v52._object = (void *)0x8000000100186320;
    v52._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v52);
    v53 = v82;
    v54 = v83;
LABEL_9:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v53, v54, "WeatherWidget/UVIndexContentView.swift", 38, 2);
    __break(1u);
    return result;
  }
  if (v29 != enum case for WidgetFamily.accessoryInline(_:))
  {
    sub_10002EE4C(a1, v67);
    v82 = 0;
    v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v55._countAndFlagsBits = 0xD000000000000022;
    v55._object = (void *)0x80000001001862F0;
    String.append(_:)(v55);
    v56 = v65;
    sub_1000C54B0(v65);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v57 = v68;
    v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v68, v58);
    v60 = v59._object;
    String.append(_:)(v59);
    v61 = swift_bridgeObjectRelease(v60);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v66 + 8))(v56, v57, v61);
    v62._object = (void *)0x8000000100186320;
    v62._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v62);
    v53 = v82;
    v54 = v83;
    goto LABEL_9;
  }
  v36 = (uint64_t)v11;
  sub_100157A34((uint64_t)v18);
  v37 = v73;
  UltravioletInlineContentView.init(status:)(v18);
  v39 = v74;
  v38 = v75;
  v40 = v72;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v72, v37, v75);
  swift_storeEnumTagMultiPayload(v40, v71, 0);
  sub_10002EF14(&qword_1001BFB18, (uint64_t (*)(uint64_t))&type metadata accessor for UltravioletInlineContentView, (uint64_t)&protocol conformance descriptor for UltravioletInlineContentView);
  v41 = (uint64_t)v76;
  _ConditionalContent<>.init(storage:)(v40, v38, &type metadata for Never, v42, &protocol witness table for Never);
  sub_10002EFD4(v41, v36, &qword_1001BFAF0);
  swift_storeEnumTagMultiPayload(v36, v35, 1);
  v43 = sub_10002EE90();
  v44 = sub_10002EF50();
  _ConditionalContent<>.init(storage:)(v36, v79, v80, v43, v44);
  sub_10002F014(v41, &qword_1001BFAF0);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v37, v38);
}

uint64_t sub_10002EE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UVIndexContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10002EE90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BFB20;
  if (!qword_1001BFB20)
  {
    v1 = sub_100005DC4(&qword_1001BFB08);
    sub_10002EF14(&qword_1001BFB28, (uint64_t (*)(uint64_t))&type metadata accessor for UltravioletCircularContentView, (uint64_t)&protocol conformance descriptor for UltravioletCircularContentView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BFB20);
  }
  return result;
}

void sub_10002EF14(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_100006338();
}

unint64_t sub_10002EF50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BFB30;
  if (!qword_1001BFB30)
  {
    v1 = sub_100005DC4(&qword_1001BFAF0);
    sub_10002EF14(&qword_1001BFB18, (uint64_t (*)(uint64_t))&type metadata accessor for UltravioletInlineContentView, (uint64_t)&protocol conformance descriptor for UltravioletInlineContentView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BFB30);
  }
  return result;
}

void sub_10002EFD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005D40(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_100006338();
}

void sub_10002F014(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100005D40(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_100006338();
}

unint64_t sub_10002F050()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BFB38;
  if (!qword_1001BFB38)
  {
    v1 = sub_100005DC4(&qword_1001BFB40);
    sub_10002F0B4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BFB38);
  }
  return result;
}

unint64_t sub_10002F0B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BFB48;
  if (!qword_1001BFB48)
  {
    v1 = sub_100005DC4(&qword_1001BFB50);
    sub_10002EE90();
    sub_10002EF50();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BFB48);
  }
  return result;
}

uint64_t sub_10002F120(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  _QWORD v31[2];

  v4 = type metadata accessor for Color.RGBColorSpace(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CharacterSet(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v31[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v31[-1] - v14;
  v31[0] = a1;
  v31[1] = a2;
  v16 = static CharacterSet.alphanumerics.getter(v13);
  CharacterSet.inverted.getter(v16);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v15, v8);
  v18 = sub_10001692C();
  v19 = StringProtocol.trimmingCharacters(in:)(v12, &type metadata for String, v18);
  v21 = v20;
  v17(v12, v8);
  swift_bridgeObjectRelease(a2);
  v31[0] = 0;
  sub_10002F3A4();
  swift_bridgeObjectRetain(v21);
  v22 = sub_10002F3E0(v19, v21);
  objc_msgSend(v22, "scanHexLongLong:", v31);

  v23 = String.count.getter(v19, v21);
  v24 = swift_bridgeObjectRelease(v21);
  if (v23 == 8)
  {
    v25 = BYTE2(v31[0]);
    v26 = BYTE1(v31[0]);
    v27 = LOBYTE(v31[0]);
    v28 = (double)(v31[0] >> 24);
  }
  else
  {
    if (v23 == 6)
    {
      v25 = v31[0] >> 16;
      v26 = BYTE1(v31[0]);
      v27 = LOBYTE(v31[0]);
    }
    else
    {
      if (v23 != 3)
      {
        v27 = 0;
        v28 = 1.0;
        v26 = 1;
        v25 = 1;
        goto LABEL_9;
      }
      v25 = 17 * (v31[0] >> 8);
      v26 = (LOBYTE(v31[0]) >> 4) | (16 * (LOBYTE(v31[0]) >> 4));
      v27 = v31[0] & 0xF | (16 * (v31[0] & 0xF));
    }
    v28 = 255.0;
  }
LABEL_9:
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104))(v7, enum case for Color.RGBColorSpace.sRGB(_:), v4, v24);
  return Color.init(_:red:green:blue:opacity:)(v7, (double)(unint64_t)v25 / 255.0, (double)(unint64_t)v26 / 255.0, (double)(unint64_t)v27 / 255.0, v28 / 255.0);
}

unint64_t sub_10002F3A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BFB58;
  if (!qword_1001BFB58)
  {
    v1 = objc_opt_self(NSScanner);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001BFB58);
  }
  return result;
}

id sub_10002F3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  NSString v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = objc_msgSend(v4, "initWithString:", v5);

  return v6;
}

unint64_t sub_10002F450()
{
  uint64_t v0;
  unsigned int v1;
  unsigned __int8 v2;
  unint64_t v3;

  v0 = sub_10002F500();
  v1 = sub_10002FA20();
  v2 = sub_10002FAC8(v0);
  if (*(_QWORD *)(v0 + 16) >= 2uLL)
    v3 = (unint64_t)*(unsigned __int8 *)(v0 + 32) << 56;
  else
    v3 = 0;
  sub_10002FB7C(v0);
  swift_bridgeObjectRelease(v0);
  return v3 | v1 | ((unint64_t)v2 << 48) | 0x10000000000;
}

uint64_t sub_10002F500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;

  v69 = type metadata accessor for CurrentWeather(0);
  v64 = *(_QWORD *)(v69 - 8);
  sub_1000230F4();
  __chkstk_darwin(v0);
  sub_1000230E0();
  v66 = v1;
  v68 = sub_100005D40(&qword_1001BF090);
  v65 = *(_QWORD *)(v68 - 8);
  sub_1000230F4();
  v3 = __chkstk_darwin(v2);
  v70 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v67 = (char *)&v60 - v6;
  __chkstk_darwin(v5);
  v71 = (uint64_t)&v60 - v7;
  sub_100005D40(&qword_1001BFB60);
  sub_1000230F4();
  __chkstk_darwin(v8);
  sub_10002325C();
  v11 = v10 - v9;
  v12 = type metadata accessor for AirQuality(0);
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  sub_1000230F4();
  __chkstk_darwin(v13);
  sub_1000230E0();
  v61 = v14;
  v15 = type metadata accessor for PrecipitationRelevancyWindow(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_10002325C();
  v19 = v18 - v17;
  sub_100005D40(&qword_1001BF9E8);
  sub_1000230F4();
  __chkstk_darwin(v20);
  sub_10002325C();
  v23 = v22 - v21;
  v24 = sub_100005D40(&qword_1001BF9F0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  sub_10002325C();
  v28 = v27 - v26;
  WeatherDataModel.minuteForecast.getter(v29);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v23, 1, v24) == 1)
  {
    v30 = sub_10002FBAC(v23, &qword_1001BF9E8);
LABEL_8:
    v33 = _swiftEmptyArrayStorage;
    v35 = v68;
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v28, v23, v24);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v19, enum case for PrecipitationRelevancyWindow.default(_:), v15);
  v31 = Forecast<>.isRelevant(in:)(v19);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v15);
  if ((v31 & 1) == 0)
  {
    v30 = sub_10002FC10(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    goto LABEL_8;
  }
  sub_10006F860();
  v33 = v32;
  v34 = v32[2];
  if (v34 >= v32[3] >> 1)
  {
    sub_10002FBF8();
    v33 = v57;
  }
  v35 = v68;
  v33[2] = v34 + 1;
  *((_BYTE *)v33 + v34 + 32) = 0;
  v30 = sub_10002FC10(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
LABEL_9:
  WeatherDataModel.airQuality.getter(v30);
  v36 = v63;
  v37 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v11, 1, v63);
  v38 = v62;
  if (v37 == 1)
  {
    v68 = (uint64_t)v33;
    sub_10002FBAC(v11, &qword_1001BFB60);
  }
  else
  {
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v61, v11, v36);
    if ((AirQuality.isSignificant.getter(v39) & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
      {
        sub_10006F860();
        v33 = v58;
      }
      v40 = v33[2];
      if (v40 >= v33[3] >> 1)
      {
        sub_10002FBF8();
        v33 = v59;
      }
      v33[2] = v40 + 1;
      v68 = (uint64_t)v33;
      *((_BYTE *)v33 + v40 + 32) = 2;
    }
    else
    {
      v68 = (uint64_t)v33;
    }
    sub_10002FC10(*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
  }
  v41 = v66;
  v42 = sub_10002FC24();
  v43 = (uint64_t)v67;
  CurrentWeather.temperature.getter(v42);
  v44 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
  v45 = v69;
  v44(v41, v69);
  v46 = (void *)objc_opt_self(NSUnitTemperature);
  v47 = objc_msgSend(v46, "fahrenheit");
  sub_10002FC30((uint64_t)v47);

  sub_10002FC1C(v43);
  v48 = sub_10002FC24();
  CurrentWeather.apparentTemperature.getter(v48);
  v44(v41, v45);
  v49 = objc_msgSend(v46, "fahrenheit");
  v50 = (uint64_t)v70;
  sub_10002FC30((uint64_t)v49);

  sub_10002FC1C(v43);
  v51 = Measurement.value.getter(v35);
  if (vabdd_f64(v51, Measurement.value.getter(v35)) <= 5.0)
  {
    v52 = v68;
  }
  else
  {
    v52 = v68;
    if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0)
    {
      sub_10002FC3C();
      v52 = v55;
    }
    v53 = *(_QWORD *)(v52 + 16);
    if (v53 >= *(_QWORD *)(v52 + 24) >> 1)
    {
      sub_10002FC3C();
      v52 = v56;
    }
    *(_QWORD *)(v52 + 16) = v53 + 1;
    *(_BYTE *)(v52 + v53 + 32) = 4;
  }
  sub_10002FC1C(v50);
  sub_10002FC1C(v71);
  return v52;
}

uint64_t sub_10002FA20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t v7;

  v0 = sub_100005D40(&qword_1001BFB60);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  WeatherDataModel.airQuality.getter(v1);
  v4 = type metadata accessor for AirQuality(0);
  v5 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v3, 1, v4);
  sub_10002FBAC((uint64_t)v3, &qword_1001BFB60);
  if (v5 == 1)
    return 67305728;
  else
    return 67240192;
}

uint64_t sub_10002FAC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = sub_100005D40(&qword_1001BFB60);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
    return *(unsigned __int8 *)(a1 + 32);
  WeatherDataModel.airQuality.getter(v3);
  v7 = type metadata accessor for AirQuality(0);
  v8 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v5, 1, v7);
  sub_10002FBAC((uint64_t)v5, &qword_1001BFB60);
  if (v8 == 1)
    return 3;
  else
    return 2;
}

uint64_t sub_10002FB7C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 2)
    return *(unsigned __int8 *)(a1 + 33);
  if (!v1)
    return 1;
  if (*(unsigned __int8 *)(a1 + 32) <= 1u)
    return 1;
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_10002FBAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100005D40(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for DataDenseTableViewModelFactory()
{
  return &type metadata for DataDenseTableViewModelFactory;
}

void sub_10002FBF8()
{
  sub_10006F860();
}

uint64_t sub_10002FC10@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_10002FC1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10002FC24()
{
  return WeatherDataModel.currentWeather.getter();
}

uint64_t sub_10002FC30(uint64_t a1)
{
  uint64_t v1;

  return Measurement<>.converted(to:)(a1, v1);
}

void sub_10002FC3C()
{
  sub_10006F860();
}

uint64_t sub_10002FC48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_10003C24C();
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_10002325C();
  v7 = v6 - v5;
  v8 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v1 + *(int *)(v8 + 28), v7, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v7, v3) == 1)
  {
    sub_100011868(v7, a1, type metadata accessor for WeatherDataViewModel);
    v9 = 0;
  }
  else
  {
    v9 = 1;
  }
  v10 = type metadata accessor for WeatherDataViewModel(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, v9, 1, v10);
}

uint64_t sub_10002FD14(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v7;
  char v9;

  if (a1 == 0xD000000000000018)
  {
    v4 = 0x8000000100186370;
    if (a2 == 0x8000000100186370)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100186370, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x697461636F4C6F6ELL && a2 == 0xEE00617461446E6FLL)
  {
    v7 = 0xEE00617461446E6FLL;
    goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697461636F4C6F6ELL, 0xEE00617461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x6568746165576F6ELL && a2 == 0xED00006174614472)
  {
    swift_bridgeObjectRelease(0xED00006174614472);
    return 2;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6568746165576F6ELL, 0xED00006174614472, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10002FEA4()
{
  return 3;
}

uint64_t sub_10002FEAC(char a1)
{
  if (!a1)
    return 0xD000000000000018;
  if (a1 == 1)
    return 0x697461636F4C6F6ELL;
  return 0x6568746165576F6ELL;
}

uint64_t sub_10002FF20(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(a2);
  return 1;
}

uint64_t sub_10002FF3C()
{
  return 0;
}

void sub_10002FF48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_10002321C();
  a24 = v26;
  a25 = v27;
  a10 = v28;
  v30 = v29;
  sub_100005D40(&qword_1001BFD40);
  sub_1000230F4();
  __chkstk_darwin(v31);
  sub_10003C128(v32, v47);
  v33 = sub_100005D40(&qword_1001BFD48);
  v48 = *(_QWORD *)(v33 - 8);
  v49 = v33;
  sub_1000230F4();
  __chkstk_darwin(v34);
  sub_10002325C();
  v37 = v36 - v35;
  v38 = sub_100005D40(&qword_1001BFD50);
  v39 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  sub_10003C164();
  v50 = *(_QWORD *)(sub_100005D40(&qword_1001BFD58) - 8);
  sub_1000230F4();
  __chkstk_darwin(v40);
  sub_100023374();
  v42 = v30[3];
  v41 = v30[4];
  sub_100022330(v30, v42);
  v43 = sub_10003B5C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ForecastEntry.Error.CodingKeys, &type metadata for ForecastEntry.Error.CodingKeys, v43, v42, v41);
  if (a10)
  {
    if (a10 == 1)
    {
      a14 = 1;
      sub_10003B640();
      sub_10003C17C((uint64_t)&type metadata for ForecastEntry.Error.NoLocationDataCodingKeys, (uint64_t)&a14);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v37, v49);
    }
    else
    {
      sub_10003C29C();
      sub_10003C17C((uint64_t)&type metadata for ForecastEntry.Error.NoWeatherDataCodingKeys, (uint64_t)&a15);
      v44 = sub_10003C254();
      v46(v44, v45);
    }
  }
  else
  {
    a13 = 0;
    sub_10003B67C();
    sub_10003C17C((uint64_t)&type metadata for ForecastEntry.Error.LocationPermissionDeniedCodingKeys, (uint64_t)&a13);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v25, v38);
  }
  sub_10003C118(v50);
  sub_100023114();
}

uint64_t sub_10003010C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;

  sub_10002321C();
  v49 = v3;
  v50 = v4;
  v6 = v5;
  v42 = sub_100005D40(&qword_1001BFD00);
  v44 = *(_QWORD *)(v42 - 8);
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_1000230E0();
  v43 = v8;
  sub_100005D40(&qword_1001BFD08);
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_10003C1E4(v10, v39);
  v41 = sub_100005D40(&qword_1001BFD10);
  v11 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  sub_100023374();
  v12 = sub_100005D40(&qword_1001BFD18);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100023344();
  v15 = v6[3];
  v14 = v6[4];
  sub_100022330(v6, v15);
  v16 = sub_10003B5C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ForecastEntry.Error.CodingKeys, &type metadata for ForecastEntry.Error.CodingKeys, v16, v15, v14);
  if (v0)
    goto LABEL_11;
  v40 = v13;
  v45 = v6;
  v17 = ((uint64_t (*)(uint64_t))KeyedDecodingContainer.allKeys.getter)(v12);
  v18 = v17;
  v19 = *(_QWORD *)(v17 + 16);
  if (!v19)
  {
LABEL_8:
    v29 = ((uint64_t (*)(_QWORD))type metadata accessor for DecodingError)(0);
    sub_10003C27C(v29, (uint64_t)&protocol witness table for DecodingError);
    v31 = v30;
    sub_100005D40(&qword_1001BF898);
    *v31 = &type metadata for ForecastEntry.Error;
    v32 = ((uint64_t (*)(uint64_t))KeyedDecodingContainer.codingPath.getter)(v12);
    v33 = sub_10003C144(v32, (uint64_t)"Invalid number of keys found, expected one.");
    v34 = sub_10003C1D0(v33, enum case for DecodingError.typeMismatch(_:));
    ((void (*)(uint64_t))swift_willThrow)(v34);
    swift_unknownObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v1, v12);
    v6 = v45;
LABEL_11:
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v6);
    return v12;
  }
  v20 = v12;
  v12 = *(unsigned __int8 *)(v17 + 32);
  v21 = sub_1000E5028(1, v19, v17, v17 + 32, 0, (2 * v19) | 1);
  v23 = v22;
  v25 = v24;
  swift_bridgeObjectRelease(v18);
  v18 = v21;
  if (v23 != v25 >> 1)
  {
    v12 = v20;
    goto LABEL_8;
  }
  if ((_DWORD)v12)
  {
    if ((_DWORD)v12 == 1)
    {
      v47 = 1;
      sub_10003B640();
      sub_10003C200((uint64_t)&type metadata for ForecastEntry.Error.NoLocationDataCodingKeys, (uint64_t)&v47, v20, (uint64_t)&type metadata for ForecastEntry.Error.NoLocationDataCodingKeys);
      v26 = sub_10003C254();
    }
    else
    {
      sub_10003C29C();
      sub_10003C200((uint64_t)&type metadata for ForecastEntry.Error.NoWeatherDataCodingKeys, (uint64_t)&v48, v20, (uint64_t)&type metadata for ForecastEntry.Error.NoWeatherDataCodingKeys);
      v28 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v26 = v43;
      v27 = v42;
    }
    v28(v26, v27);
    v36 = v21;
  }
  else
  {
    v46 = 0;
    sub_10003B67C();
    sub_10003C200((uint64_t)&type metadata for ForecastEntry.Error.LocationPermissionDeniedCodingKeys, (uint64_t)&v46, v20, (uint64_t)&type metadata for ForecastEntry.Error.LocationPermissionDeniedCodingKeys);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v41);
    v36 = v21;
  }
  swift_unknownObjectRelease(v36);
  v37 = sub_10003C268();
  v38(v37);
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v45);
  return v12;
}

uint64_t sub_100030474()
{
  char *v0;

  return sub_10002FEAC(*v0);
}

uint64_t sub_10003047C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10002FD14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000304A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10002FEA4();
  *a1 = result;
  return result;
}

uint64_t sub_1000304C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B5C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000304EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B5C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100030518(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B67C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100030540(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B67C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100030568(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B640();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100030590(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B640();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000305B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10002FF20(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000305E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B604();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100030608(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B604();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100030630@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_10003010C();
  if (!v1)
    *a1 = result;
  return result;
}

#error "100030664: call analysis failed (funcsize=6)"

uint64_t sub_100030670(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F727265, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

Swift::Int sub_100030744(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t sub_100030788(char a1)
{
  if ((a1 & 1) != 0)
    return 1635017060;
  else
    return 0x726F727265;
}

uint64_t sub_1000307B4(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease(0xE200000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

void sub_100030820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  sub_10002321C();
  a23 = v26;
  a24 = v27;
  v63 = v24;
  v29 = v28;
  v30 = sub_100005D40(&qword_1001BFDA0);
  v60 = *(_QWORD *)(v30 - 8);
  v61 = v30;
  sub_1000230F4();
  __chkstk_darwin(v31);
  v33 = sub_10003C1A4(v32, v56);
  v58 = type metadata accessor for WeatherDataViewModel(v33);
  sub_1000230F4();
  __chkstk_darwin(v34);
  sub_10003C234();
  v57 = sub_100005D40(&qword_1001BFDA8);
  sub_1000230F4();
  __chkstk_darwin(v35);
  sub_10002325C();
  v36 = sub_10003C24C();
  sub_1000230F4();
  __chkstk_darwin(v37);
  sub_10002325C();
  v40 = (char *)(v39 - v38);
  v41 = sub_100005D40(&qword_1001BFDB0);
  v62 = *(_QWORD *)(v41 - 8);
  sub_1000230F4();
  __chkstk_darwin(v42);
  sub_10002325C();
  v45 = v44 - v43;
  v46 = v29[3];
  v47 = v29[4];
  sub_100022330(v29, v46);
  v48 = sub_10003B6B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ForecastEntry.Model.CodingKeys, &type metadata for ForecastEntry.Model.CodingKeys, v48, v46, v47);
  sub_10000F7C4(v63, (uint64_t)v40, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v40, v36) == 1)
  {
    sub_100011868((uint64_t)v40, v25, type metadata accessor for WeatherDataViewModel);
    sub_10003C290();
    sub_10003C224((uint64_t)&type metadata for ForecastEntry.Model.DataCodingKeys, (uint64_t)&a14);
    sub_10002EF14(&qword_1001BFDB8, type metadata accessor for WeatherDataViewModel, (uint64_t)&protocol conformance descriptor for WeatherDataViewModel);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, v50, v61, v58, v49);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
    sub_10003B50C(v25, (void (*)(_QWORD))type metadata accessor for WeatherDataViewModel);
  }
  else
  {
    v51 = *v40;
    a13 = 0;
    sub_10003B730();
    sub_10003C224((uint64_t)&type metadata for ForecastEntry.Model.ErrorCodingKeys, (uint64_t)&a13);
    a12 = v51;
    v52 = sub_10003B7A8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&a12, v53, v57, &type metadata for ForecastEntry.Error, v52);
    v54 = sub_10003C254();
    v55(v54, v57);
  }
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v45, v41);
  sub_100023114();
}

void sub_100030A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  _BYTE *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;

  sub_10002321C();
  a23 = v25;
  a24 = v26;
  v90 = v24;
  v28 = v27;
  v83 = v29;
  v30 = sub_100005D40(&qword_1001BFD60);
  v86 = *(_QWORD *)(v30 - 8);
  v87 = v30;
  sub_1000230F4();
  __chkstk_darwin(v31);
  sub_10003C1E4(v32, (uint64_t)v79);
  v33 = sub_100005D40(&qword_1001BFD68);
  v84 = *(_QWORD *)(v33 - 8);
  v85 = v33;
  sub_1000230F4();
  __chkstk_darwin(v34);
  sub_10003C128(v35, (uint64_t)v79);
  v36 = sub_100005D40(&qword_1001BFD70);
  v88 = *(_QWORD *)(v36 - 8);
  v89 = v36;
  sub_1000230F4();
  __chkstk_darwin(v37);
  sub_10003C164();
  v38 = sub_10003C24C();
  sub_1000230F4();
  v40 = __chkstk_darwin(v39);
  v42 = (char *)&v79 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v40);
  v45 = (char *)&v79 - v44;
  __chkstk_darwin(v43);
  v47 = (char *)&v79 - v46;
  v49 = v28[3];
  v48 = v28[4];
  sub_100022330(v28, v49);
  v50 = sub_10003B6B8();
  v51 = v90;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ForecastEntry.Model.CodingKeys, &type metadata for ForecastEntry.Model.CodingKeys, v50, v49, v48);
  if (v51)
    goto LABEL_8;
  v79 = v45;
  v80 = v47;
  v81 = v42;
  v82 = v38;
  v90 = v28;
  v52 = v89;
  v53 = KeyedDecodingContainer.allKeys.getter(v89);
  v54 = v53;
  v55 = *(_QWORD *)(v53 + 16);
  if (!v55
    || (v56 = *(_BYTE *)(v53 + 32),
        sub_1000E5028(1, v55, v53, v53 + 32, 0, (2 * v55) | 1),
        v58 = v57,
        v60 = v59,
        swift_bridgeObjectRelease(v54),
        v58 != v60 >> 1))
  {
    v65 = v88;
    v66 = v82;
    v67 = type metadata accessor for DecodingError(0);
    sub_10003C27C(v67, (uint64_t)&protocol witness table for DecodingError);
    v69 = v68;
    sub_100005D40(&qword_1001BF898);
    *v69 = v66;
    v70 = KeyedDecodingContainer.codingPath.getter(v52);
    v71 = sub_10003C144(v70, (uint64_t)"Invalid number of keys found, expected one.");
    v72 = sub_10003C1D0(v71, enum case for DecodingError.typeMismatch(_:));
    swift_willThrow(v72);
    sub_100023214();
    sub_10003C208(*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8));
    v28 = v90;
LABEL_8:
    v75 = v28;
    goto LABEL_9;
  }
  if ((v56 & 1) != 0)
  {
    sub_10003C290();
    sub_10003C18C((uint64_t)&type metadata for ForecastEntry.Model.DataCodingKeys, (uint64_t)&a14);
    v61 = type metadata accessor for WeatherDataViewModel(0);
    sub_10002EF14(&qword_1001BFD88, type metadata accessor for WeatherDataViewModel, (uint64_t)&protocol conformance descriptor for WeatherDataViewModel);
    v62 = (uint64_t)v81;
    sub_10003C260(v61, v63, v87, v61);
    v64 = v88;
    sub_10003C118(v86);
    sub_100023214();
    sub_10003C208(*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8));
    swift_storeEnumTagMultiPayload(v62, v82, 1);
    v76 = v62;
  }
  else
  {
    a13 = 0;
    sub_10003B730();
    sub_10003C18C((uint64_t)&type metadata for ForecastEntry.Model.ErrorCodingKeys, (uint64_t)&a13);
    sub_10003B76C();
    sub_10003C260((uint64_t)&type metadata for ForecastEntry.Error, v73, v85, (uint64_t)&type metadata for ForecastEntry.Error);
    v74 = v88;
    sub_10003C118(v84);
    sub_100023214();
    sub_10003C208(*(uint64_t (**)(uint64_t, uint64_t))(v74 + 8));
    v77 = v79;
    *v79 = a12;
    swift_storeEnumTagMultiPayload(v77, v82, 0);
    v76 = (uint64_t)v77;
  }
  v78 = (uint64_t)v80;
  sub_100011868(v76, (uint64_t)v80, type metadata accessor for ForecastEntry.Model);
  sub_100011868(v78, v83, type metadata accessor for ForecastEntry.Model);
  v75 = v90;
LABEL_9:
  _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v75);
  sub_100023114();
}

Swift::Int sub_100030E80()
{
  char *v0;

  return sub_100030744(*v0);
}

uint64_t sub_100030E88()
{
  char *v0;

  return sub_100030788(*v0);
}

uint64_t sub_100030E90@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100030670(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100030EB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B6B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100030EDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B6B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100030F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000307B4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100030F2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B6F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100030F54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B6F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100030F7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B730();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100030FA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B730();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "100030FD4: call analysis failed (funcsize=5)"

#error "100030FE8: call analysis failed (funcsize=5)"

uint64_t sub_100030FF4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  char v12;

  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x636E6176656C6572 && a2 == 0xE900000000000065)
  {
    v8 = 0xE900000000000065;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636E6176656C6572, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000)
  {
    v10 = 0xE700000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747865746E6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 3;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C65646F6DLL, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100031194()
{
  return 4;
}

void sub_10003119C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = a1;
  sub_1000233D8(a1);
  Hasher._combine(_:)(v1);
  sub_1000232C0();
  sub_1000231EC();
}

uint64_t sub_1000311CC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000311F8 + 4 * byte_10017B2F0[a1]))(1702125924, 0xE400000000000000);
}

uint64_t sub_1000311F8()
{
  return 0x636E6176656C6572;
}

uint64_t sub_100031214()
{
  return 0x747865746E6F63;
}

uint64_t sub_10003122C()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_100031240(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[2];

  v4 = v1;
  v6 = sub_100005D40(&qword_1001BFCE0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100023344();
  v8 = a1[3];
  v9 = a1[4];
  sub_100022330(a1, v8);
  v10 = sub_10003B4D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ForecastEntry.CodingKeys, &type metadata for ForecastEntry.CodingKeys, v10, v8, v9);
  v15[1] = 0;
  type metadata accessor for Date(0);
  sub_10002EF14(&qword_1001BF780, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  sub_10003C1C4();
  if (!v2)
  {
    v11 = v4 + *(int *)(type metadata accessor for ForecastEntry(0) + 20);
    v15[0] = 1;
    v12 = type metadata accessor for TimelineEntryRelevance(0);
    sub_10002EF14(&qword_1001BFCE8, (uint64_t (*)(uint64_t))&type metadata accessor for TimelineEntryRelevance, (uint64_t)&protocol conformance descriptor for TimelineEntryRelevance);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v11, v15, v6, v12, v13);
    type metadata accessor for WidgetContext(0);
    sub_10002EF14(&qword_1001BFCF0, type metadata accessor for WidgetContext, (uint64_t)&unk_10017EF40);
    sub_10003C1C4();
    sub_10003C24C();
    sub_10002EF14(&qword_1001BFCF8, type metadata accessor for ForecastEntry.Model, (uint64_t)&unk_10017B38C);
    sub_10003C1C4();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

void sub_10003145C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  sub_10002321C();
  a23 = v26;
  a24 = v27;
  v29 = v28;
  v49 = v30;
  v50 = sub_10003C24C();
  sub_1000230F4();
  __chkstk_darwin(v31);
  sub_1000230E0();
  v51 = v32;
  v52 = type metadata accessor for WidgetContext(0);
  sub_1000230F4();
  __chkstk_darwin(v33);
  sub_1000230E0();
  v53 = v34;
  sub_100005D40(&qword_1001BFA20);
  sub_1000230F4();
  __chkstk_darwin(v35);
  v37 = sub_10003C1A4(v36, v47);
  v56 = type metadata accessor for Date(v37);
  v38 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  sub_10003C128(v39, v48);
  v57 = sub_100005D40(&qword_1001BFCB8);
  __chkstk_darwin(v57);
  sub_10003C234();
  v40 = (int *)type metadata accessor for ForecastEntry(0);
  sub_1000230F4();
  __chkstk_darwin(v41);
  sub_10003C164();
  v43 = v29[3];
  v42 = v29[4];
  sub_100022330(v29, v43);
  v44 = sub_10003B4D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ForecastEntry.CodingKeys, &type metadata for ForecastEntry.CodingKeys, v44, v43, v42);
  if (v24)
  {
    sub_10003C288();
  }
  else
  {
    a14 = 0;
    sub_10002EF14(&qword_1001BF7C8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v56, &a14, v57, v56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v25, v55, v56);
    v45 = type metadata accessor for TimelineEntryRelevance(0);
    a13 = 1;
    sub_10002EF14(&qword_1001BFCC8, (uint64_t (*)(uint64_t))&type metadata accessor for TimelineEntryRelevance, (uint64_t)&protocol conformance descriptor for TimelineEntryRelevance);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v45, &a13, v57, v45, v46);
    sub_10003B580(v54, v25 + v40[5]);
    a12 = 2;
    sub_10002EF14(&qword_1001BFCD0, type metadata accessor for WidgetContext, (uint64_t)&unk_10017EF68);
    sub_10003C260(v52, (uint64_t)&a12, v57, v52);
    sub_100011868(v53, v25 + v40[6], type metadata accessor for WidgetContext);
    a11 = 3;
    sub_10002EF14(&qword_1001BFCD8, type metadata accessor for ForecastEntry.Model, (uint64_t)&unk_10017B3B4);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v50, &a11, v57, v50);
    sub_10003C108();
    sub_100011868(v51, v25 + v40[7], type metadata accessor for ForecastEntry.Model);
    sub_10000F7C4(v25, v49, type metadata accessor for ForecastEntry);
    sub_10003C288();
    sub_10003B50C(v25, (void (*)(_QWORD))type metadata accessor for ForecastEntry);
  }
  sub_100023114();
}

void sub_1000317FC()
{
  unsigned __int8 *v0;

  sub_10003119C(*v0);
}

uint64_t sub_100031814()
{
  unsigned __int8 *v0;

  return sub_1000311CC(*v0);
}

uint64_t sub_10003181C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100030FF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100031840@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100031194();
  *a1 = result;
  return result;
}

uint64_t sub_100031864(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B4D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003188C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B4D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000318B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_1000318EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100031924(v2 + *(int *)(a1 + 20), a2);
}

uint64_t type metadata accessor for ForecastEntry.Model(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001BFBD8, (uint64_t)&nominal type descriptor for ForecastEntry.Model);
}

uint64_t type metadata accessor for ForecastEntry(uint64_t a1)
{
  return sub_10000F804(a1, (uint64_t *)&unk_1001BFC68, (uint64_t)&nominal type descriptor for ForecastEntry);
}

uint64_t sub_100031924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001BFA20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ForecastEntry.Error()
{
  return &type metadata for ForecastEntry.Error;
}

uint64_t *sub_100031984(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  __int128 v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  int *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  void (*v147)(char *, char *, uint64_t);
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  int *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  _BOOL8 v209;
  void (*v211)(char *, char *, uint64_t);
  uint64_t v212;
  void (*v213)(char *, char *, uint64_t);
  void (*v214)(char *, char *, uint64_t);
  void (*v215)(char *, char *, uint64_t);
  int *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int *v222;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v39 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v39 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v39);
  }
  else
  {
    v7 = a3;
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v8 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v8);
      if (EnumCaseMultiPayload == 2)
      {
        v40 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(a1, a2, v40);
        v41 = a1;
        v42 = v8;
        v43 = 2;
      }
      else
      {
        v219 = v8;
        v220 = v7;
        if (EnumCaseMultiPayload == 1)
        {
          v10 = type metadata accessor for UUID(0);
          v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
          v11(a1, a2, v10);
          v12 = type metadata accessor for InstantWeatherViewModel(0);
          v13 = *(int *)(v12 + 20);
          v14 = (char *)a1 + v13;
          v15 = (char *)a2 + v13;
          v16 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
          v17 = *(int *)(v12 + 24);
          v18 = (char *)a1 + v17;
          v19 = (char *)a2 + v17;
          v215 = (void (*)(char *, char *, uint64_t))v11;
          v217 = v10;
          v11((uint64_t *)((char *)a1 + v17), (uint64_t *)v19, v10);
          v20 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v21 = v20[5];
          v22 = &v18[v21];
          v23 = &v19[v21];
          v24 = type metadata accessor for Date(0);
          v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
          v25(v22, v23, v24);
          v221 = v24;
          v213 = v25;
          v25(&v18[v20[6]], &v19[v20[6]], v24);
          v26 = v20[7];
          v27 = &v18[v26];
          v28 = &v19[v26];
          v29 = sub_100005D40(&qword_1001BF090);
          v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
          v30(v27, v28, v29);
          v30(&v18[v20[8]], &v19[v20[8]], v29);
          v31 = v20[9];
          v32 = &v18[v31];
          v33 = &v19[v31];
          v34 = *((_QWORD *)v33 + 1);
          *(_QWORD *)v32 = *(_QWORD *)v33;
          *((_QWORD *)v32 + 1) = v34;
          v35 = v20[10];
          v36 = &v18[v35];
          v37 = &v19[v35];
          swift_bridgeObjectRetain(v34);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v37, 1, v29))
          {
            v38 = sub_100005D40(&qword_1001BF098);
            memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
          }
          else
          {
            v30(v36, v37, v29);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v36, 0, 1, v29);
          }
          v74 = v20[11];
          v75 = &v18[v74];
          v76 = &v19[v74];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v19[v74], 1, v29))
          {
            v77 = sub_100005D40(&qword_1001BF098);
            memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
          }
          else
          {
            v30(v75, v76, v29);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v75, 0, 1, v29);
          }
          v78 = v20[12];
          v79 = &v18[v78];
          v80 = &v19[v78];
          v215(&v18[v78], &v19[v78], v217);
          v81 = (int *)type metadata accessor for ConditionViewModel(0);
          v82 = v81[5];
          v83 = &v79[v82];
          v84 = &v80[v82];
          v85 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v83, v84, v85);
          v86 = v81[6];
          v87 = &v79[v86];
          v88 = &v80[v86];
          v89 = *((_QWORD *)v88 + 1);
          *(_QWORD *)v87 = *(_QWORD *)v88;
          *((_QWORD *)v87 + 1) = v89;
          v90 = v81[7];
          v91 = &v79[v90];
          v92 = &v80[v90];
          v93 = *((_QWORD *)v92 + 1);
          *(_QWORD *)v91 = *(_QWORD *)v92;
          *((_QWORD *)v91 + 1) = v93;
          v79[v81[8]] = v80[v81[8]];
          v79[v81[9]] = v80[v81[9]];
          v79[v81[10]] = v80[v81[10]];
          *(_QWORD *)&v18[v20[13]] = *(_QWORD *)&v19[v20[13]];
          v94 = v20[14];
          v95 = &v18[v94];
          v96 = &v19[v94];
          v97 = type metadata accessor for CloudAltitudeKind(0);
          v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
          swift_bridgeObjectRetain(v89);
          swift_bridgeObjectRetain(v93);
          v98(v95, v96, v97);
          v99 = v20[15];
          v100 = &v18[v99];
          v101 = &v19[v99];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v19[v99], 1, v221))
          {
            v102 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
          }
          else
          {
            v213(v100, v101, v221);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v100, 0, 1, v221);
          }
          v103 = v20[16];
          v104 = &v18[v103];
          v105 = &v19[v103];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v19[v103], 1, v221))
          {
            v106 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
          }
          else
          {
            v213(v104, v105, v221);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v104, 0, 1, v221);
          }
          v107 = v20[17];
          v108 = &v18[v107];
          v109 = &v19[v107];
          v110 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(v108, v109, v110);
          v111 = v20[18];
          v112 = &v18[v111];
          v113 = &v19[v111];
          v114 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(v112, v113, v114);
          *(_QWORD *)&v18[v20[19]] = *(_QWORD *)&v19[v20[19]];
          v115 = v20[20];
          v116 = &v18[v115];
          v117 = &v19[v115];
          v118 = *((_QWORD *)v117 + 1);
          if (v118)
          {
            *(_QWORD *)v116 = *(_QWORD *)v117;
            *((_QWORD *)v116 + 1) = v118;
            v119 = *((_QWORD *)v117 + 2);
            v120 = *((_QWORD *)v117 + 3);
            v121 = v117[32];
            swift_bridgeObjectRetain(v118);
            sub_100006E58(v119, v120, v121);
            *((_QWORD *)v116 + 2) = v119;
            *((_QWORD *)v116 + 3) = v120;
            v116[32] = v121;
          }
          else
          {
            v122 = *((_OWORD *)v117 + 1);
            *(_OWORD *)v116 = *(_OWORD *)v117;
            *((_OWORD *)v116 + 1) = v122;
            v116[32] = v117[32];
          }
          swift_storeEnumTagMultiPayload(a1, v219, 1);
          v7 = v220;
          goto LABEL_54;
        }
        v44 = type metadata accessor for UUID(0);
        v45 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
        v45(a1, a2, v44);
        v46 = type metadata accessor for AggregateWeatherViewModel(0);
        v47 = *(int *)(v46 + 20);
        v48 = (char *)a1 + v47;
        v49 = (char *)a2 + v47;
        v50 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
        v216 = (int *)v46;
        v51 = *(int *)(v46 + 24);
        v52 = (char *)a1 + v51;
        v53 = (char *)a2 + v51;
        v211 = (void (*)(char *, char *, uint64_t))v45;
        v212 = v44;
        v45((uint64_t *)((char *)a1 + v51), (uint64_t *)((char *)a2 + v51), v44);
        v54 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v55 = v54[5];
        v56 = &v52[v55];
        v57 = &v53[v55];
        v58 = type metadata accessor for Date(0);
        v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
        v59(v56, v57, v58);
        v218 = v58;
        v214 = v59;
        v59(&v52[v54[6]], &v53[v54[6]], v58);
        v60 = v54[7];
        v61 = &v52[v60];
        v62 = &v53[v60];
        v63 = sub_100005D40(&qword_1001BF090);
        v64 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
        v64(v61, v62, v63);
        v64(&v52[v54[8]], &v53[v54[8]], v63);
        v65 = v54[9];
        v66 = &v52[v65];
        v67 = &v53[v65];
        v68 = *((_QWORD *)v67 + 1);
        *(_QWORD *)v66 = *(_QWORD *)v67;
        *((_QWORD *)v66 + 1) = v68;
        v222 = v54;
        v69 = v54[10];
        v70 = &v52[v69];
        v71 = &v53[v69];
        swift_bridgeObjectRetain(v68);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v71, 1, v63))
        {
          v73 = sub_100005D40(&qword_1001BF098);
          memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
        }
        else
        {
          v64(v70, v71, v63);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v70, 0, 1, v63);
        }
        v123 = v54[11];
        v124 = &v52[v123];
        v125 = &v53[v123];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v53[v123], 1, v63))
        {
          v126 = sub_100005D40(&qword_1001BF098);
          memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
        }
        else
        {
          v64(v124, v125, v63);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v124, 0, 1, v63);
        }
        v127 = v54[12];
        v128 = &v52[v127];
        v129 = &v53[v127];
        v211(&v52[v127], &v53[v127], v212);
        v130 = (int *)type metadata accessor for ConditionViewModel(0);
        v131 = v130[5];
        v132 = &v128[v131];
        v133 = &v129[v131];
        v134 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(v132, v133, v134);
        v135 = v130[6];
        v136 = &v128[v135];
        v137 = &v129[v135];
        v138 = *((_QWORD *)v137 + 1);
        *(_QWORD *)v136 = *(_QWORD *)v137;
        *((_QWORD *)v136 + 1) = v138;
        v139 = v130[7];
        v140 = &v128[v139];
        v141 = &v129[v139];
        v142 = *((_QWORD *)v141 + 1);
        *(_QWORD *)v140 = *(_QWORD *)v141;
        *((_QWORD *)v140 + 1) = v142;
        v128[v130[8]] = v129[v130[8]];
        v128[v130[9]] = v129[v130[9]];
        v128[v130[10]] = v129[v130[10]];
        *(_QWORD *)&v52[v54[13]] = *(_QWORD *)&v53[v54[13]];
        v143 = v54[14];
        v144 = &v52[v143];
        v145 = &v53[v143];
        v146 = type metadata accessor for CloudAltitudeKind(0);
        v147 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v146 - 8) + 16);
        swift_bridgeObjectRetain(v138);
        swift_bridgeObjectRetain(v142);
        v147(v144, v145, v146);
        v148 = v222[15];
        v149 = &v52[v148];
        v150 = &v53[v148];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v53[v148], 1, v218))
        {
          v151 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
        }
        else
        {
          v214(v149, v150, v218);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v149, 0, 1, v218);
        }
        v152 = v222[16];
        v153 = &v52[v152];
        v154 = &v53[v152];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v53[v152], 1, v218))
        {
          v155 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
        }
        else
        {
          v214(v153, v154, v218);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v153, 0, 1, v218);
        }
        v156 = v222[17];
        v157 = &v52[v156];
        v158 = &v53[v156];
        v159 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 16))(v157, v158, v159);
        v160 = v222[18];
        v161 = &v52[v160];
        v162 = &v53[v160];
        v163 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v163 - 8) + 16))(v161, v162, v163);
        *(_QWORD *)&v52[v222[19]] = *(_QWORD *)&v53[v222[19]];
        v164 = v222[20];
        v165 = &v52[v164];
        v166 = &v53[v164];
        v167 = *((_QWORD *)v166 + 1);
        if (v167)
        {
          *(_QWORD *)v165 = *(_QWORD *)v166;
          *((_QWORD *)v165 + 1) = v167;
          v168 = *((_QWORD *)v166 + 2);
          v169 = *((_QWORD *)v166 + 3);
          v170 = v166[32];
          swift_bridgeObjectRetain(v167);
          sub_100006E58(v168, v169, v170);
          *((_QWORD *)v165 + 2) = v168;
          *((_QWORD *)v165 + 3) = v169;
          v165[32] = v170;
        }
        else
        {
          v171 = *((_OWORD *)v166 + 1);
          *(_OWORD *)v165 = *(_OWORD *)v166;
          *((_OWORD *)v165 + 1) = v171;
          v165[32] = v166[32];
        }
        v172 = v216[7];
        v173 = *(uint64_t *)((char *)a2 + v172);
        *(uint64_t *)((char *)a1 + v172) = v173;
        v174 = v216[8];
        v175 = *(uint64_t *)((char *)a2 + v174);
        *(uint64_t *)((char *)a1 + v174) = v175;
        v176 = v216[9];
        v177 = (char *)a1 + v176;
        v178 = (char *)a2 + v176;
        v179 = (int *)type metadata accessor for AirQualityViewModel(0);
        swift_bridgeObjectRetain(v173);
        swift_bridgeObjectRetain(v175);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v178, 1, (uint64_t)v179))
        {
          v180 = sub_100005D40(&qword_1001BFA30);
          memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v180 - 8) + 64));
        }
        else
        {
          v211(v177, v178, v212);
          v214(&v177[v179[5]], &v178[v179[5]], v218);
          *(_QWORD *)&v177[v179[6]] = *(_QWORD *)&v178[v179[6]];
          v181 = v179[7];
          v182 = &v177[v181];
          v183 = &v178[v181];
          v184 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v184 - 8) + 16))(v182, v183, v184);
          v185 = v179[8];
          v186 = &v177[v185];
          v187 = &v178[v185];
          v188 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v188 - 8) + 16))(v186, v187, v188);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v177, 0, 1, (uint64_t)v179);
        }
        v189 = v216[10];
        v190 = (char *)a1 + v189;
        v191 = (char *)a2 + v189;
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v191, 1, HourPrecipitationChartViewModel))
        {
          v193 = sub_100005D40(&qword_1001BFA38);
          memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v190, v191, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v190, 0, 1, HourPrecipitationChartViewModel);
        }
        v194 = v216[11];
        v195 = *(uint64_t *)((char *)a2 + v194);
        *(uint64_t *)((char *)a1 + v194) = v195;
        v196 = v216[12];
        v197 = (char *)a1 + v196;
        v198 = (char *)a2 + v196;
        *(_QWORD *)v197 = *(_QWORD *)v198;
        *((_WORD *)v197 + 4) = *((_WORD *)v198 + 4);
        v199 = v216[13];
        v200 = (char *)a1 + v199;
        v201 = (char *)a2 + v199;
        v202 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain(v195);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v201, 1, v202))
        {
          v203 = sub_100005D40(&qword_1001BFA28);
          memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v202 - 8) + 16))(v200, v201, v202);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v200, 0, 1, v202);
        }
        v204 = v216[14];
        v205 = (char *)a1 + v204;
        v206 = (char *)a2 + v204;
        v207 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v206, 1, v207))
        {
          v208 = sub_100005D40(&qword_1001BFA40);
          memcpy(v205, v206, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
        }
        else
        {
          v209 = swift_getEnumCaseMultiPayload(v206, v207) == 1;
          v214(v205, v206, v218);
          swift_storeEnumTagMultiPayload(v205, v207, v209);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v205, 0, 1, v207);
        }
        v7 = v220;
        v41 = a1;
        v42 = v219;
        v43 = 0;
      }
      swift_storeEnumTagMultiPayload(v41, v42, v43);
LABEL_54:
      swift_storeEnumTagMultiPayload(a1, v7, 1);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_1000326D4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    v4 = type metadata accessor for WeatherDataViewModel(0);
    result = swift_getEnumCaseMultiPayload(a1, v4);
    switch((_DWORD)result)
    {
      case 2:
        v46 = type metadata accessor for SunriseSunsetViewModel(0);
        v47 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8);
        v45 = a1;
        return v47(v45, v46);
      case 1:
        v48 = type metadata accessor for UUID(0);
        v49 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8);
        v49(a1, v48);
        v50 = type metadata accessor for InstantWeatherViewModel(0);
        v51 = a1 + *(int *)(v50 + 20);
        v52 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v51, v52);
        v53 = a1 + *(int *)(v50 + 24);
        v49(v53, v48);
        v54 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v55 = v53 + v54[5];
        v56 = type metadata accessor for Date(0);
        v57 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8);
        v57(v55, v56);
        v57(v53 + v54[6], v56);
        v58 = v53 + v54[7];
        v59 = sub_100005D40(&qword_1001BF090);
        v60 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8);
        v60(v58, v59);
        v60(v53 + v54[8], v59);
        swift_bridgeObjectRelease(*(_QWORD *)(v53 + v54[9] + 8));
        v61 = v53 + v54[10];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v61, 1, v59))
          v60(v61, v59);
        v62 = v53 + v54[11];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v62, 1, v59))
          v60(v62, v59);
        v63 = v53 + v54[12];
        v49(v63, v48);
        v64 = (int *)type metadata accessor for ConditionViewModel(0);
        v65 = v63 + v64[5];
        v66 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 8))(v65, v66);
        swift_bridgeObjectRelease(*(_QWORD *)(v63 + v64[6] + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v63 + v64[7] + 8));
        v67 = v53 + v54[14];
        v68 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v67, v68);
        v69 = v53 + v54[15];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v69, 1, v56))
          v57(v69, v56);
        v70 = v53 + v54[16];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v70, 1, v56))
          v57(v70, v56);
        v71 = v53 + v54[17];
        v72 = type metadata accessor for UVIndex(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 8))(v71, v72);
        v73 = v53 + v54[18];
        v74 = type metadata accessor for Wind(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v73, v74);
        v75 = v53 + v54[20];
        result = *(_QWORD *)(v75 + 8);
        if (result)
        {
          swift_bridgeObjectRelease(result);
          return sub_100007458(*(_QWORD *)(v75 + 16), *(_QWORD *)(v75 + 24), *(_BYTE *)(v75 + 32));
        }
        break;
      case 0:
        v5 = type metadata accessor for UUID(0);
        v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
        v6(a1, v5);
        v7 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        v8 = a1 + v7[5];
        v9 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
        v10 = a1 + v7[6];
        v6(v10, v5);
        v11 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v12 = v10 + v11[5];
        v13 = type metadata accessor for Date(0);
        v76 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
        v76(v12, v13);
        v76(v10 + v11[6], v13);
        v14 = v10 + v11[7];
        v15 = sub_100005D40(&qword_1001BF090);
        v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
        v16(v14, v15);
        v16(v10 + v11[8], v15);
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[9] + 8));
        v17 = v10 + v11[10];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v17, 1, v15))
          v16(v17, v15);
        v18 = v10 + v11[11];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v18, 1, v15))
          v16(v18, v15);
        v19 = v10 + v11[12];
        v6(v19, v5);
        v20 = (int *)type metadata accessor for ConditionViewModel(0);
        v21 = v19 + v20[5];
        v22 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
        swift_bridgeObjectRelease(*(_QWORD *)(v19 + v20[6] + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v19 + v20[7] + 8));
        v23 = v10 + v11[14];
        v24 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
        v25 = v10 + v11[15];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v25, 1, v13))
          v76(v25, v13);
        v26 = v10 + v11[16];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v26, 1, v13))
          v76(v26, v13);
        v27 = v10 + v11[17];
        v28 = type metadata accessor for UVIndex(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
        v29 = v10 + v11[18];
        v30 = type metadata accessor for Wind(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
        v31 = v10 + v11[20];
        v32 = *(_QWORD *)(v31 + 8);
        if (v32)
        {
          swift_bridgeObjectRelease(v32);
          sub_100007458(*(_QWORD *)(v31 + 16), *(_QWORD *)(v31 + 24), *(_BYTE *)(v31 + 32));
        }
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[7]));
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[8]));
        v33 = a1 + v7[9];
        v34 = (int *)type metadata accessor for AirQualityViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v33, 1, (uint64_t)v34))
        {
          v6(v33, v5);
          v76(v33 + v34[5], v13);
          v35 = v33 + v34[7];
          v36 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
          v37 = v33 + v34[8];
          v38 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
        }
        v39 = a1 + v7[10];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v39, 1, HourPrecipitationChartViewModel))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v39, HourPrecipitationChartViewModel);
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[11]));
        v41 = a1 + v7[13];
        v42 = type metadata accessor for URL(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v41, 1, v42))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
        v43 = a1 + v7[14];
        v44 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v43, 1, v44);
        if (!(_DWORD)result)
        {
          v45 = v43;
          v46 = v13;
          v47 = (uint64_t (*)(uint64_t, uint64_t))v76;
          return v47(v45, v46);
        }
        break;
    }
  }
  return result;
}

char *sub_100032E1C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  __int128 v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  int *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  void (*v144)(char *, char *, uint64_t);
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  int *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  _BOOL8 v206;
  int *v208;
  void (*v209)(char *, char *, uint64_t);
  void (*v210)(char *, char *, uint64_t);
  uint64_t v211;
  void (*v212)(char *, char *, uint64_t);
  void (*v213)(char *, char *, uint64_t);
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;

  v3 = a3;
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v37 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(a1, a2, v37);
      v38 = a1;
      v39 = v6;
      v40 = 2;
    }
    else
    {
      v217 = v3;
      v218 = a1;
      v216 = v6;
      if (EnumCaseMultiPayload == 1)
      {
        v8 = type metadata accessor for UUID(0);
        v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
        v9(a1, a2, v8);
        v10 = type metadata accessor for InstantWeatherViewModel(0);
        v11 = *(int *)(v10 + 20);
        v12 = &a1[v11];
        v13 = &a2[v11];
        v14 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
        v15 = *(int *)(v10 + 24);
        v16 = &a1[v15];
        v17 = &a2[v15];
        v212 = v9;
        v214 = v8;
        v9(&a1[v15], v17, v8);
        v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v19 = v18[5];
        v20 = &v16[v19];
        v21 = &v17[v19];
        v22 = type metadata accessor for Date(0);
        v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
        v23(v20, v21, v22);
        v210 = v23;
        v23(&v16[v18[6]], &v17[v18[6]], v22);
        v24 = v18[7];
        v25 = &v16[v24];
        v26 = &v17[v24];
        v27 = sub_100005D40(&qword_1001BF090);
        v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
        v28(v25, v26, v27);
        v28(&v16[v18[8]], &v17[v18[8]], v27);
        v29 = v18[9];
        v30 = &v16[v29];
        v31 = &v17[v29];
        v32 = *((_QWORD *)v31 + 1);
        *(_QWORD *)v30 = *(_QWORD *)v31;
        *((_QWORD *)v30 + 1) = v32;
        v33 = v18[10];
        v34 = &v16[v33];
        v35 = &v17[v33];
        swift_bridgeObjectRetain(v32);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 1, v27))
        {
          v36 = sub_100005D40(&qword_1001BF098);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          v28(v34, v35, v27);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v27);
        }
        v71 = v18[11];
        v72 = &v16[v71];
        v73 = &v17[v71];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v71], 1, v27))
        {
          v74 = sub_100005D40(&qword_1001BF098);
          memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        }
        else
        {
          v28(v72, v73, v27);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v72, 0, 1, v27);
        }
        v75 = v18[12];
        v76 = &v16[v75];
        v77 = &v17[v75];
        v212(&v16[v75], &v17[v75], v214);
        v78 = (int *)type metadata accessor for ConditionViewModel(0);
        v79 = v78[5];
        v80 = &v76[v79];
        v81 = &v77[v79];
        v82 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v80, v81, v82);
        v83 = v78[6];
        v84 = &v76[v83];
        v85 = &v77[v83];
        v86 = *((_QWORD *)v85 + 1);
        *(_QWORD *)v84 = *(_QWORD *)v85;
        *((_QWORD *)v84 + 1) = v86;
        v87 = v78[7];
        v88 = &v76[v87];
        v89 = &v77[v87];
        v90 = *((_QWORD *)v89 + 1);
        *(_QWORD *)v88 = *(_QWORD *)v89;
        *((_QWORD *)v88 + 1) = v90;
        v76[v78[8]] = v77[v78[8]];
        v76[v78[9]] = v77[v78[9]];
        v76[v78[10]] = v77[v78[10]];
        *(_QWORD *)&v16[v18[13]] = *(_QWORD *)&v17[v18[13]];
        v91 = v18[14];
        v92 = &v16[v91];
        v93 = &v17[v91];
        v94 = type metadata accessor for CloudAltitudeKind(0);
        v95 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16);
        swift_bridgeObjectRetain(v86);
        swift_bridgeObjectRetain(v90);
        v95(v92, v93, v94);
        v96 = v18[15];
        v97 = &v16[v96];
        v98 = &v17[v96];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v96], 1, v22))
        {
          v99 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
        }
        else
        {
          v210(v97, v98, v22);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v97, 0, 1, v22);
        }
        v100 = v18[16];
        v101 = &v16[v100];
        v102 = &v17[v100];
        a1 = v218;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v100], 1, v22))
        {
          v103 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
        }
        else
        {
          v210(v101, v102, v22);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v101, 0, 1, v22);
        }
        v104 = v18[17];
        v105 = &v16[v104];
        v106 = &v17[v104];
        v107 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v105, v106, v107);
        v108 = v18[18];
        v109 = &v16[v108];
        v110 = &v17[v108];
        v111 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(v109, v110, v111);
        *(_QWORD *)&v16[v18[19]] = *(_QWORD *)&v17[v18[19]];
        v112 = v18[20];
        v113 = &v16[v112];
        v114 = &v17[v112];
        v115 = *((_QWORD *)v114 + 1);
        if (v115)
        {
          *(_QWORD *)v113 = *(_QWORD *)v114;
          *((_QWORD *)v113 + 1) = v115;
          v116 = *((_QWORD *)v114 + 2);
          v117 = *((_QWORD *)v114 + 3);
          v118 = v114[32];
          swift_bridgeObjectRetain(v115);
          sub_100006E58(v116, v117, v118);
          *((_QWORD *)v113 + 2) = v116;
          *((_QWORD *)v113 + 3) = v117;
          v113[32] = v118;
        }
        else
        {
          v119 = *((_OWORD *)v114 + 1);
          *(_OWORD *)v113 = *(_OWORD *)v114;
          *((_OWORD *)v113 + 1) = v119;
          v113[32] = v114[32];
        }
        swift_storeEnumTagMultiPayload(v218, v216, 1);
        v3 = v217;
        goto LABEL_52;
      }
      v41 = type metadata accessor for UUID(0);
      v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
      v42(a1, a2, v41);
      v43 = type metadata accessor for AggregateWeatherViewModel(0);
      v44 = *(int *)(v43 + 20);
      v45 = &a1[v44];
      v46 = &a2[v44];
      v47 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      v208 = (int *)v43;
      v209 = v42;
      v48 = *(int *)(v43 + 24);
      v49 = &a1[v48];
      v50 = &a2[v48];
      v211 = v41;
      v42(&a1[v48], &a2[v48], v41);
      v51 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v52 = v51[5];
      v53 = &v49[v52];
      v54 = &v50[v52];
      v55 = type metadata accessor for Date(0);
      v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
      v56(v53, v54, v55);
      v213 = v56;
      v215 = v55;
      v56(&v49[v51[6]], &v50[v51[6]], v55);
      v57 = v51[7];
      v58 = &v49[v57];
      v59 = &v50[v57];
      v60 = sub_100005D40(&qword_1001BF090);
      v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
      v61(v58, v59, v60);
      v61(&v49[v51[8]], &v50[v51[8]], v60);
      v62 = v51[9];
      v63 = &v49[v62];
      v64 = &v50[v62];
      v65 = *((_QWORD *)v64 + 1);
      *(_QWORD *)v63 = *(_QWORD *)v64;
      *((_QWORD *)v63 + 1) = v65;
      v66 = v51[10];
      v67 = &v49[v66];
      v68 = &v50[v66];
      swift_bridgeObjectRetain(v65);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v68, 1, v60))
      {
        v70 = sub_100005D40(&qword_1001BF098);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      }
      else
      {
        v61(v67, v68, v60);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v60);
      }
      v120 = v51[11];
      v121 = &v49[v120];
      v122 = &v50[v120];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v50[v120], 1, v60))
      {
        v123 = sub_100005D40(&qword_1001BF098);
        memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
      }
      else
      {
        v61(v121, v122, v60);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v121, 0, 1, v60);
      }
      v124 = v51[12];
      v125 = &v49[v124];
      v126 = &v50[v124];
      v209(&v49[v124], &v50[v124], v211);
      v127 = (int *)type metadata accessor for ConditionViewModel(0);
      v128 = v127[5];
      v129 = &v125[v128];
      v130 = &v126[v128];
      v131 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
      v132 = v127[6];
      v133 = &v125[v132];
      v134 = &v126[v132];
      v135 = *((_QWORD *)v134 + 1);
      *(_QWORD *)v133 = *(_QWORD *)v134;
      *((_QWORD *)v133 + 1) = v135;
      v136 = v127[7];
      v137 = &v125[v136];
      v138 = &v126[v136];
      v139 = *((_QWORD *)v138 + 1);
      *(_QWORD *)v137 = *(_QWORD *)v138;
      *((_QWORD *)v137 + 1) = v139;
      v125[v127[8]] = v126[v127[8]];
      v125[v127[9]] = v126[v127[9]];
      v125[v127[10]] = v126[v127[10]];
      *(_QWORD *)&v49[v51[13]] = *(_QWORD *)&v50[v51[13]];
      v140 = v51[14];
      v141 = &v49[v140];
      v142 = &v50[v140];
      v143 = type metadata accessor for CloudAltitudeKind(0);
      v144 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16);
      swift_bridgeObjectRetain(v135);
      swift_bridgeObjectRetain(v139);
      v144(v141, v142, v143);
      v145 = v51[15];
      v146 = &v49[v145];
      v147 = &v50[v145];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v50[v145], 1, v215))
      {
        v148 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
      }
      else
      {
        v213(v146, v147, v215);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v146, 0, 1, v215);
      }
      a1 = v218;
      v149 = v51[16];
      v150 = &v49[v149];
      v151 = &v50[v149];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v50[v149], 1, v215))
      {
        v152 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
      }
      else
      {
        v213(v150, v151, v215);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v150, 0, 1, v215);
      }
      v153 = v51[17];
      v154 = &v49[v153];
      v155 = &v50[v153];
      v156 = type metadata accessor for UVIndex(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v156 - 8) + 16))(v154, v155, v156);
      v157 = v51[18];
      v158 = &v49[v157];
      v159 = &v50[v157];
      v160 = type metadata accessor for Wind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 16))(v158, v159, v160);
      *(_QWORD *)&v49[v51[19]] = *(_QWORD *)&v50[v51[19]];
      v161 = v51[20];
      v162 = &v49[v161];
      v163 = &v50[v161];
      v164 = *((_QWORD *)v163 + 1);
      if (v164)
      {
        *(_QWORD *)v162 = *(_QWORD *)v163;
        *((_QWORD *)v162 + 1) = v164;
        v165 = *((_QWORD *)v163 + 2);
        v166 = *((_QWORD *)v163 + 3);
        v167 = v163[32];
        swift_bridgeObjectRetain(v164);
        sub_100006E58(v165, v166, v167);
        *((_QWORD *)v162 + 2) = v165;
        *((_QWORD *)v162 + 3) = v166;
        v162[32] = v167;
      }
      else
      {
        v168 = *((_OWORD *)v163 + 1);
        *(_OWORD *)v162 = *(_OWORD *)v163;
        *((_OWORD *)v162 + 1) = v168;
        v162[32] = v163[32];
      }
      v169 = v208[7];
      v170 = *(_QWORD *)&a2[v169];
      *(_QWORD *)&v218[v169] = v170;
      v171 = v208[8];
      v172 = *(_QWORD *)&a2[v171];
      *(_QWORD *)&v218[v171] = v172;
      v173 = v208[9];
      v174 = &v218[v173];
      v175 = &a2[v173];
      v176 = (int *)type metadata accessor for AirQualityViewModel(0);
      swift_bridgeObjectRetain(v170);
      swift_bridgeObjectRetain(v172);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v175, 1, (uint64_t)v176))
      {
        v177 = sub_100005D40(&qword_1001BFA30);
        memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
      }
      else
      {
        v209(v174, v175, v211);
        v213(&v174[v176[5]], &v175[v176[5]], v215);
        *(_QWORD *)&v174[v176[6]] = *(_QWORD *)&v175[v176[6]];
        v178 = v176[7];
        v179 = &v174[v178];
        v180 = &v175[v178];
        v181 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 16))(v179, v180, v181);
        v182 = v176[8];
        v183 = &v174[v182];
        v184 = &v175[v182];
        v185 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v185 - 8) + 16))(v183, v184, v185);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v174, 0, 1, (uint64_t)v176);
      }
      v186 = v208[10];
      v187 = &v218[v186];
      v188 = &a2[v186];
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v188, 1, HourPrecipitationChartViewModel))
      {
        v190 = sub_100005D40(&qword_1001BFA38);
        memcpy(v187, v188, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v187, v188, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v187, 0, 1, HourPrecipitationChartViewModel);
      }
      v191 = v208[11];
      v192 = *(_QWORD *)&a2[v191];
      *(_QWORD *)&v218[v191] = v192;
      v193 = v208[12];
      v194 = &v218[v193];
      v195 = &a2[v193];
      *(_QWORD *)v194 = *(_QWORD *)v195;
      *((_WORD *)v194 + 4) = *((_WORD *)v195 + 4);
      v196 = v208[13];
      v197 = &v218[v196];
      v198 = &a2[v196];
      v199 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain(v192);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v198, 1, v199))
      {
        v200 = sub_100005D40(&qword_1001BFA28);
        memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v199 - 8) + 16))(v197, v198, v199);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v197, 0, 1, v199);
      }
      v201 = v208[14];
      v202 = &v218[v201];
      v203 = &a2[v201];
      v204 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v203, 1, v204))
      {
        v205 = sub_100005D40(&qword_1001BFA40);
        memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
      }
      else
      {
        v206 = swift_getEnumCaseMultiPayload(v203, v204) == 1;
        v213(v202, v203, v215);
        swift_storeEnumTagMultiPayload(v202, v204, v206);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v202, 0, 1, v204);
      }
      v39 = v216;
      v3 = v217;
      v38 = v218;
      v40 = 0;
    }
    swift_storeEnumTagMultiPayload(v38, v39, v40);
LABEL_52:
    swift_storeEnumTagMultiPayload(a1, v3, 1);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  return a1;
}

char *sub_100033B18(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  int *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t);
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  int *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  _BOOL8 v209;
  uint64_t v211;
  int *v212;
  void (*v213)(char *, char *, uint64_t);
  void (*v214)(char *, char *, uint64_t);
  void (*v215)(char *, char *, uint64_t);
  void (*v216)(char *, char *, uint64_t);
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int *v222;

  if (a1 != a2)
  {
    sub_10003B50C((uint64_t)a1, (void (*)(_QWORD))type metadata accessor for ForecastEntry.Model);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      if (EnumCaseMultiPayload == 2)
      {
        v37 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(a1, a2, v37);
        v38 = a1;
        v39 = v6;
        v40 = 2;
      }
      else
      {
        v219 = v6;
        v220 = a3;
        if (EnumCaseMultiPayload != 1)
        {
          v41 = type metadata accessor for UUID(0);
          v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
          v42(a1, a2, v41);
          v43 = type metadata accessor for AggregateWeatherViewModel(0);
          v44 = *(int *)(v43 + 20);
          v45 = &a1[v44];
          v46 = &a2[v44];
          v47 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
          v212 = (int *)v43;
          v214 = v42;
          v48 = *(int *)(v43 + 24);
          v49 = &a1[v48];
          v50 = &a2[v48];
          v42(&a1[v48], &a2[v48], v41);
          v51 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v52 = v51[5];
          v53 = &v49[v52];
          v54 = &v50[v52];
          v55 = type metadata accessor for Date(0);
          v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
          v56(v53, v54, v55);
          v216 = v56;
          v218 = v55;
          v56(&v49[v51[6]], &v50[v51[6]], v55);
          v57 = v51[7];
          v58 = &v49[v57];
          v59 = &v50[v57];
          v60 = sub_100005D40(&qword_1001BF090);
          v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
          v61(v58, v59, v60);
          v61(&v49[v51[8]], &v50[v51[8]], v60);
          v62 = v51[9];
          v63 = &v49[v62];
          v64 = &v50[v62];
          *(_QWORD *)v63 = *(_QWORD *)v64;
          v65 = *((_QWORD *)v64 + 1);
          *((_QWORD *)v63 + 1) = v65;
          v222 = v51;
          v66 = v51[10];
          v67 = &v49[v66];
          v68 = &v50[v66];
          swift_bridgeObjectRetain(v65);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v68, 1, v60))
          {
            v70 = sub_100005D40(&qword_1001BF098);
            memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
          }
          else
          {
            v61(v67, v68, v60);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v60);
          }
          v75 = v51[11];
          v76 = &v49[v75];
          v77 = &v50[v75];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v50[v75], 1, v60))
          {
            v78 = sub_100005D40(&qword_1001BF098);
            memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
          }
          else
          {
            v61(v76, v77, v60);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v76, 0, 1, v60);
          }
          v104 = v51[12];
          v105 = &v49[v104];
          v106 = &v50[v104];
          v211 = v41;
          v214(&v49[v104], &v50[v104], v41);
          v107 = (int *)type metadata accessor for ConditionViewModel(0);
          v108 = v107[5];
          v109 = &v105[v108];
          v110 = &v106[v108];
          v111 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(v109, v110, v111);
          v112 = v107[6];
          v113 = &v105[v112];
          v114 = &v106[v112];
          *(_QWORD *)v113 = *(_QWORD *)v114;
          v115 = *((_QWORD *)v114 + 1);
          *((_QWORD *)v113 + 1) = v115;
          v116 = v107[7];
          v117 = &v105[v116];
          v118 = &v106[v116];
          *(_QWORD *)v117 = *(_QWORD *)v118;
          v119 = *((_QWORD *)v118 + 1);
          *((_QWORD *)v117 + 1) = v119;
          v105[v107[8]] = v106[v107[8]];
          v105[v107[9]] = v106[v107[9]];
          v105[v107[10]] = v106[v107[10]];
          *(_QWORD *)&v49[v222[13]] = *(_QWORD *)&v50[v222[13]];
          v120 = v222[14];
          v121 = &v49[v120];
          v122 = &v50[v120];
          v123 = type metadata accessor for CloudAltitudeKind(0);
          v124 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 16);
          swift_bridgeObjectRetain(v115);
          swift_bridgeObjectRetain(v119);
          v124(v121, v122, v123);
          v125 = v222[15];
          v126 = &v49[v125];
          v127 = &v50[v125];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v50[v125], 1, v218))
          {
            v128 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
          }
          else
          {
            v216(v126, v127, v218);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v126, 0, 1, v218);
          }
          v133 = v222[16];
          v134 = &v49[v133];
          v135 = &v50[v133];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v50[v133], 1, v218))
          {
            v136 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
          }
          else
          {
            v216(v134, v135, v218);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v134, 0, 1, v218);
          }
          v152 = v222[17];
          v153 = &v49[v152];
          v154 = &v50[v152];
          v155 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v153, v154, v155);
          v156 = v222[18];
          v157 = &v49[v156];
          v158 = &v50[v156];
          v159 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 16))(v157, v158, v159);
          *(_QWORD *)&v49[v222[19]] = *(_QWORD *)&v50[v222[19]];
          v160 = v222[20];
          v161 = &v49[v160];
          v162 = &v50[v160];
          if (*((_QWORD *)v162 + 1))
          {
            *(_QWORD *)v161 = *(_QWORD *)v162;
            v163 = *((_QWORD *)v162 + 1);
            *((_QWORD *)v161 + 1) = v163;
            v164 = *((_QWORD *)v162 + 2);
            v165 = *((_QWORD *)v162 + 3);
            v166 = v162[32];
            swift_bridgeObjectRetain(v163);
            sub_100006E58(v164, v165, v166);
            *((_QWORD *)v161 + 2) = v164;
            *((_QWORD *)v161 + 3) = v165;
            v161[32] = v166;
          }
          else
          {
            v169 = *(_OWORD *)v162;
            v170 = *((_OWORD *)v162 + 1);
            v161[32] = v162[32];
            *(_OWORD *)v161 = v169;
            *((_OWORD *)v161 + 1) = v170;
          }
          v171 = v212[7];
          v172 = *(_QWORD *)&a2[v171];
          *(_QWORD *)&a1[v171] = v172;
          v173 = v212[8];
          v174 = *(_QWORD *)&a2[v173];
          *(_QWORD *)&a1[v173] = v174;
          v175 = v212[9];
          v176 = &a1[v175];
          v177 = &a2[v175];
          v178 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v172);
          swift_bridgeObjectRetain(v174);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v177, 1, (uint64_t)v178))
          {
            v179 = sub_100005D40(&qword_1001BFA30);
            memcpy(v176, v177, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
          }
          else
          {
            v214(v176, v177, v211);
            v216(&v176[v178[5]], &v177[v178[5]], v218);
            *(_QWORD *)&v176[v178[6]] = *(_QWORD *)&v177[v178[6]];
            v180 = v178[7];
            v181 = &v176[v180];
            v182 = &v177[v180];
            v183 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v183 - 8) + 16))(v181, v182, v183);
            v184 = v178[8];
            v185 = &v176[v184];
            v186 = &v177[v184];
            v187 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v187 - 8) + 16))(v185, v186, v187);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v176, 0, 1, (uint64_t)v178);
          }
          v188 = v212[10];
          v189 = &a1[v188];
          v190 = &a2[v188];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v190, 1, HourPrecipitationChartViewModel))
          {
            v192 = sub_100005D40(&qword_1001BFA38);
            memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v189, v190, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v189, 0, 1, HourPrecipitationChartViewModel);
          }
          v193 = v212[11];
          v194 = *(_QWORD *)&a2[v193];
          *(_QWORD *)&a1[v193] = v194;
          v195 = v212[12];
          v196 = &a1[v195];
          v197 = &a2[v195];
          v198 = *(_QWORD *)v197;
          *((_WORD *)v196 + 4) = *((_WORD *)v197 + 4);
          *(_QWORD *)v196 = v198;
          v199 = v212[13];
          v200 = &a1[v199];
          v201 = &a2[v199];
          v202 = type metadata accessor for URL(0);
          swift_bridgeObjectRetain(v194);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v201, 1, v202))
          {
            v203 = sub_100005D40(&qword_1001BFA28);
            memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v202 - 8) + 16))(v200, v201, v202);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v200, 0, 1, v202);
          }
          v204 = v212[14];
          v205 = &a1[v204];
          v206 = &a2[v204];
          v207 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v206, 1, v207))
          {
            v208 = sub_100005D40(&qword_1001BFA40);
            memcpy(v205, v206, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
          }
          else
          {
            v209 = swift_getEnumCaseMultiPayload(v206, v207) == 1;
            v216(v205, v206, v218);
            swift_storeEnumTagMultiPayload(v205, v207, v209);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v205, 0, 1, v207);
          }
          swift_storeEnumTagMultiPayload(a1, v219, 0);
          a3 = v220;
          goto LABEL_53;
        }
        v8 = type metadata accessor for UUID(0);
        v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
        v9(a1, a2, v8);
        v10 = type metadata accessor for InstantWeatherViewModel(0);
        v11 = *(int *)(v10 + 20);
        v12 = &a1[v11];
        v13 = &a2[v11];
        v14 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
        v15 = *(int *)(v10 + 24);
        v16 = &a1[v15];
        v17 = &a2[v15];
        v215 = v9;
        v217 = v8;
        v9(&a1[v15], v17, v8);
        v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v19 = v18[5];
        v20 = &v16[v19];
        v21 = &v17[v19];
        v22 = type metadata accessor for Date(0);
        v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
        v23(v20, v21, v22);
        v221 = v22;
        v213 = v23;
        v23(&v16[v18[6]], &v17[v18[6]], v22);
        v24 = v18[7];
        v25 = &v16[v24];
        v26 = &v17[v24];
        v27 = sub_100005D40(&qword_1001BF090);
        v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
        v28(v25, v26, v27);
        v28(&v16[v18[8]], &v17[v18[8]], v27);
        v29 = v18[9];
        v30 = &v16[v29];
        v31 = &v17[v29];
        *(_QWORD *)v30 = *(_QWORD *)v31;
        v32 = *((_QWORD *)v31 + 1);
        *((_QWORD *)v30 + 1) = v32;
        v33 = v18[10];
        v34 = &v16[v33];
        v35 = &v17[v33];
        swift_bridgeObjectRetain(v32);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 1, v27))
        {
          v36 = sub_100005D40(&qword_1001BF098);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          v28(v34, v35, v27);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v27);
        }
        v71 = v18[11];
        v72 = &v16[v71];
        v73 = &v17[v71];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v71], 1, v27))
        {
          v74 = sub_100005D40(&qword_1001BF098);
          memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        }
        else
        {
          v28(v72, v73, v27);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v72, 0, 1, v27);
        }
        v79 = v18[12];
        v80 = &v16[v79];
        v81 = &v17[v79];
        v215(&v16[v79], &v17[v79], v217);
        v82 = (int *)type metadata accessor for ConditionViewModel(0);
        v83 = v82[5];
        v84 = &v80[v83];
        v85 = &v81[v83];
        v86 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(v84, v85, v86);
        v87 = v82[6];
        v88 = &v80[v87];
        v89 = &v81[v87];
        *(_QWORD *)v88 = *(_QWORD *)v89;
        v90 = *((_QWORD *)v89 + 1);
        *((_QWORD *)v88 + 1) = v90;
        v91 = v82[7];
        v92 = &v80[v91];
        v93 = &v81[v91];
        *(_QWORD *)v92 = *(_QWORD *)v93;
        v94 = *((_QWORD *)v93 + 1);
        *((_QWORD *)v92 + 1) = v94;
        v80[v82[8]] = v81[v82[8]];
        v80[v82[9]] = v81[v82[9]];
        v80[v82[10]] = v81[v82[10]];
        *(_QWORD *)&v16[v18[13]] = *(_QWORD *)&v17[v18[13]];
        v95 = v18[14];
        v96 = &v16[v95];
        v97 = &v17[v95];
        v98 = type metadata accessor for CloudAltitudeKind(0);
        v99 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16);
        swift_bridgeObjectRetain(v90);
        swift_bridgeObjectRetain(v94);
        v99(v96, v97, v98);
        v100 = v18[15];
        v101 = &v16[v100];
        v102 = &v17[v100];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v100], 1, v221))
        {
          v103 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
        }
        else
        {
          v213(v101, v102, v221);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v101, 0, 1, v221);
        }
        v129 = v18[16];
        v130 = &v16[v129];
        v131 = &v17[v129];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v129], 1, v221))
        {
          v132 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
        }
        else
        {
          v213(v130, v131, v221);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v130, 0, 1, v221);
        }
        v137 = v18[17];
        v138 = &v16[v137];
        v139 = &v17[v137];
        v140 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
        v141 = v18[18];
        v142 = &v16[v141];
        v143 = &v17[v141];
        v144 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 16))(v142, v143, v144);
        *(_QWORD *)&v16[v18[19]] = *(_QWORD *)&v17[v18[19]];
        v145 = v18[20];
        v146 = &v16[v145];
        v147 = &v17[v145];
        if (*((_QWORD *)v147 + 1))
        {
          *(_QWORD *)v146 = *(_QWORD *)v147;
          v148 = *((_QWORD *)v147 + 1);
          *((_QWORD *)v146 + 1) = v148;
          v149 = *((_QWORD *)v147 + 2);
          v150 = *((_QWORD *)v147 + 3);
          v151 = v147[32];
          swift_bridgeObjectRetain(v148);
          sub_100006E58(v149, v150, v151);
          *((_QWORD *)v146 + 2) = v149;
          *((_QWORD *)v146 + 3) = v150;
          v146[32] = v151;
        }
        else
        {
          v167 = *(_OWORD *)v147;
          v168 = *((_OWORD *)v147 + 1);
          v146[32] = v147[32];
          *(_OWORD *)v146 = v167;
          *((_OWORD *)v146 + 1) = v168;
        }
        v39 = v219;
        a3 = v220;
        v38 = a1;
        v40 = 1;
      }
      swift_storeEnumTagMultiPayload(v38, v39, v40);
LABEL_53:
      swift_storeEnumTagMultiPayload(a1, a3, 1);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_100034888(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  __int128 v134;
  uint64_t v135;
  char *v136;
  char *v137;
  int *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  _BOOL8 v166;
  int *v168;
  void (*v169)(char *, char *, uint64_t);
  void (*v170)(char *, char *, uint64_t);
  uint64_t v171;
  void (*v172)(char *, char *, uint64_t);
  void (*v173)(char *, char *, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  v3 = a3;
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v33 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(a1, a2, v33);
      v34 = a1;
      v35 = v6;
      v36 = 2;
    }
    else
    {
      v176 = v6;
      v177 = v3;
      if (EnumCaseMultiPayload == 1)
      {
        v8 = type metadata accessor for UUID(0);
        v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
        v9(a1, a2, v8);
        v10 = type metadata accessor for InstantWeatherViewModel(0);
        v11 = *(int *)(v10 + 20);
        v12 = &a1[v11];
        v13 = &a2[v11];
        v14 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
        v15 = *(int *)(v10 + 24);
        v16 = &a1[v15];
        v17 = &a2[v15];
        v172 = v9;
        v174 = v8;
        v9(&a1[v15], v17, v8);
        v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v19 = v18[5];
        v20 = &v16[v19];
        v21 = &v17[v19];
        v22 = type metadata accessor for Date(0);
        v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
        v23(v20, v21, v22);
        v170 = v23;
        v23(&v16[v18[6]], &v17[v18[6]], v22);
        v24 = v18[7];
        v25 = &v16[v24];
        v26 = &v17[v24];
        v27 = sub_100005D40(&qword_1001BF090);
        v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
        v28(v25, v26, v27);
        v28(&v16[v18[8]], &v17[v18[8]], v27);
        *(_OWORD *)&v16[v18[9]] = *(_OWORD *)&v17[v18[9]];
        v29 = v18[10];
        v30 = &v16[v29];
        v31 = &v17[v29];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v29], 1, v27))
        {
          v32 = sub_100005D40(&qword_1001BF098);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          v28(v30, v31, v27);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v27);
        }
        v63 = v18[11];
        v64 = &v16[v63];
        v65 = &v17[v63];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v63], 1, v27))
        {
          v66 = sub_100005D40(&qword_1001BF098);
          memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
        }
        else
        {
          v28(v64, v65, v27);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v27);
        }
        v67 = v18[12];
        v68 = &v16[v67];
        v69 = &v17[v67];
        v172(&v16[v67], &v17[v67], v174);
        v70 = (int *)type metadata accessor for ConditionViewModel(0);
        v71 = v70[5];
        v72 = &v68[v71];
        v73 = &v69[v71];
        v74 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
        *(_OWORD *)&v68[v70[6]] = *(_OWORD *)&v69[v70[6]];
        *(_OWORD *)&v68[v70[7]] = *(_OWORD *)&v69[v70[7]];
        v68[v70[8]] = v69[v70[8]];
        v68[v70[9]] = v69[v70[9]];
        v68[v70[10]] = v69[v70[10]];
        *(_QWORD *)&v16[v18[13]] = *(_QWORD *)&v17[v18[13]];
        v75 = v18[14];
        v76 = &v16[v75];
        v77 = &v17[v75];
        v78 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v76, v77, v78);
        v79 = v18[15];
        v80 = &v16[v79];
        v81 = &v17[v79];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v79], 1, v22))
        {
          v82 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
        }
        else
        {
          v170(v80, v81, v22);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v80, 0, 1, v22);
        }
        v83 = v18[16];
        v84 = &v16[v83];
        v85 = &v17[v83];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v83], 1, v22))
        {
          v86 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
        }
        else
        {
          v170(v84, v85, v22);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v84, 0, 1, v22);
        }
        v87 = v18[17];
        v88 = &v16[v87];
        v89 = &v17[v87];
        v90 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v88, v89, v90);
        v91 = v18[18];
        v92 = &v16[v91];
        v93 = &v17[v91];
        v94 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 32))(v92, v93, v94);
        *(_QWORD *)&v16[v18[19]] = *(_QWORD *)&v17[v18[19]];
        v95 = v18[20];
        v96 = &v16[v95];
        v97 = &v17[v95];
        v96[32] = v97[32];
        v98 = *((_OWORD *)v97 + 1);
        *(_OWORD *)v96 = *(_OWORD *)v97;
        *((_OWORD *)v96 + 1) = v98;
        swift_storeEnumTagMultiPayload(a1, v176, 1);
        v3 = v177;
        goto LABEL_46;
      }
      v37 = type metadata accessor for UUID(0);
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
      v38(a1, a2, v37);
      v39 = type metadata accessor for AggregateWeatherViewModel(0);
      v40 = *(int *)(v39 + 20);
      v41 = &a1[v40];
      v42 = &a2[v40];
      v43 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
      v168 = (int *)v39;
      v169 = v38;
      v44 = *(int *)(v39 + 24);
      v45 = &a1[v44];
      v46 = &a2[v44];
      v171 = v37;
      v38(&a1[v44], &a2[v44], v37);
      v47 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v48 = v47[5];
      v49 = &v45[v48];
      v50 = &v46[v48];
      v51 = type metadata accessor for Date(0);
      v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32);
      v52(v49, v50, v51);
      v173 = v52;
      v175 = v51;
      v52(&v45[v47[6]], &v46[v47[6]], v51);
      v53 = v47[7];
      v54 = &v45[v53];
      v55 = &v46[v53];
      v56 = sub_100005D40(&qword_1001BF090);
      v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32);
      v57(v54, v55, v56);
      v57(&v45[v47[8]], &v46[v47[8]], v56);
      *(_OWORD *)&v45[v47[9]] = *(_OWORD *)&v46[v47[9]];
      v58 = v47[10];
      v59 = &v45[v58];
      v60 = &v46[v58];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v46[v58], 1, v56))
      {
        v62 = sub_100005D40(&qword_1001BF098);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        v57(v59, v60, v56);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v56);
      }
      v99 = v47[11];
      v100 = &v45[v99];
      v101 = &v46[v99];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v46[v99], 1, v56))
      {
        v102 = sub_100005D40(&qword_1001BF098);
        memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
      }
      else
      {
        v57(v100, v101, v56);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v100, 0, 1, v56);
      }
      v103 = v47[12];
      v104 = &v45[v103];
      v105 = &v46[v103];
      v169(&v45[v103], &v46[v103], v171);
      v106 = (int *)type metadata accessor for ConditionViewModel(0);
      v107 = v106[5];
      v108 = &v104[v107];
      v109 = &v105[v107];
      v110 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 32))(v108, v109, v110);
      *(_OWORD *)&v104[v106[6]] = *(_OWORD *)&v105[v106[6]];
      *(_OWORD *)&v104[v106[7]] = *(_OWORD *)&v105[v106[7]];
      v104[v106[8]] = v105[v106[8]];
      v104[v106[9]] = v105[v106[9]];
      v104[v106[10]] = v105[v106[10]];
      *(_QWORD *)&v45[v47[13]] = *(_QWORD *)&v46[v47[13]];
      v111 = v47[14];
      v112 = &v45[v111];
      v113 = &v46[v111];
      v114 = type metadata accessor for CloudAltitudeKind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 32))(v112, v113, v114);
      v115 = v47[15];
      v116 = &v45[v115];
      v117 = &v46[v115];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v46[v115], 1, v175))
      {
        v118 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
      }
      else
      {
        v173(v116, v117, v175);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v116, 0, 1, v175);
      }
      v119 = v47[16];
      v120 = &v45[v119];
      v121 = &v46[v119];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v46[v119], 1, v175))
      {
        v122 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
      }
      else
      {
        v173(v120, v121, v175);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v120, 0, 1, v175);
      }
      v123 = v47[17];
      v124 = &v45[v123];
      v125 = &v46[v123];
      v126 = type metadata accessor for UVIndex(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 32))(v124, v125, v126);
      v127 = v47[18];
      v128 = &v45[v127];
      v129 = &v46[v127];
      v130 = type metadata accessor for Wind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v130 - 8) + 32))(v128, v129, v130);
      *(_QWORD *)&v45[v47[19]] = *(_QWORD *)&v46[v47[19]];
      v131 = v47[20];
      v132 = &v45[v131];
      v133 = &v46[v131];
      v132[32] = v133[32];
      v134 = *((_OWORD *)v133 + 1);
      *(_OWORD *)v132 = *(_OWORD *)v133;
      *((_OWORD *)v132 + 1) = v134;
      *(_QWORD *)&a1[v168[7]] = *(_QWORD *)&a2[v168[7]];
      *(_QWORD *)&a1[v168[8]] = *(_QWORD *)&a2[v168[8]];
      v135 = v168[9];
      v136 = &a1[v135];
      v137 = &a2[v135];
      v138 = (int *)type metadata accessor for AirQualityViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v137, 1, (uint64_t)v138))
      {
        v139 = sub_100005D40(&qword_1001BFA30);
        memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
      }
      else
      {
        v169(v136, v137, v171);
        v173(&v136[v138[5]], &v137[v138[5]], v175);
        *(_QWORD *)&v136[v138[6]] = *(_QWORD *)&v137[v138[6]];
        v140 = v138[7];
        v141 = &v136[v140];
        v142 = &v137[v140];
        v143 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 32))(v141, v142, v143);
        v144 = v138[8];
        v145 = &v136[v144];
        v146 = &v137[v144];
        v147 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 32))(v145, v146, v147);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v136, 0, 1, (uint64_t)v138);
      }
      v148 = v168[10];
      v149 = &a1[v148];
      v150 = &a2[v148];
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, HourPrecipitationChartViewModel))
      {
        v152 = sub_100005D40(&qword_1001BFA38);
        memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v149, v150, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v149, 0, 1, HourPrecipitationChartViewModel);
      }
      *(_QWORD *)&a1[v168[11]] = *(_QWORD *)&a2[v168[11]];
      v153 = v168[12];
      v154 = &a1[v153];
      v155 = &a2[v153];
      *(_QWORD *)v154 = *(_QWORD *)v155;
      *((_WORD *)v154 + 4) = *((_WORD *)v155 + 4);
      v156 = v168[13];
      v157 = &a1[v156];
      v158 = &a2[v156];
      v159 = type metadata accessor for URL(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, v159))
      {
        v160 = sub_100005D40(&qword_1001BFA28);
        memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 32))(v157, v158, v159);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v157, 0, 1, v159);
      }
      v161 = v168[14];
      v162 = &a1[v161];
      v163 = &a2[v161];
      v164 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v163, 1, v164))
      {
        v165 = sub_100005D40(&qword_1001BFA40);
        memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
      }
      else
      {
        v166 = swift_getEnumCaseMultiPayload(v163, v164) == 1;
        v173(v162, v163, v175);
        swift_storeEnumTagMultiPayload(v162, v164, v166);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v162, 0, 1, v164);
      }
      v35 = v176;
      v3 = v177;
      v34 = a1;
      v36 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v35, v36);
LABEL_46:
    swift_storeEnumTagMultiPayload(a1, v3, 1);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  return a1;
}

char *sub_100035490(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  __int128 v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  __int128 v134;
  uint64_t v135;
  char *v136;
  char *v137;
  int *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  _BOOL8 v166;
  int *v168;
  void (*v169)(char *, char *, uint64_t);
  void (*v170)(char *, char *, uint64_t);
  uint64_t v171;
  void (*v172)(char *, char *, uint64_t);
  void (*v173)(char *, char *, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  if (a1 != a2)
  {
    sub_10003B50C((uint64_t)a1, (void (*)(_QWORD))type metadata accessor for ForecastEntry.Model);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      if (EnumCaseMultiPayload == 2)
      {
        v33 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(a1, a2, v33);
        swift_storeEnumTagMultiPayload(a1, v6, 2);
      }
      else
      {
        v176 = v6;
        v177 = a3;
        if (EnumCaseMultiPayload == 1)
        {
          v8 = type metadata accessor for UUID(0);
          v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
          v9(a1, a2, v8);
          v10 = type metadata accessor for InstantWeatherViewModel(0);
          v11 = *(int *)(v10 + 20);
          v12 = &a1[v11];
          v13 = &a2[v11];
          v14 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
          v15 = *(int *)(v10 + 24);
          v16 = &a1[v15];
          v17 = &a2[v15];
          v172 = v9;
          v174 = v8;
          v9(&a1[v15], v17, v8);
          v18 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v19 = v18[5];
          v20 = &v16[v19];
          v21 = &v17[v19];
          v22 = type metadata accessor for Date(0);
          v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
          v23(v20, v21, v22);
          v170 = v23;
          v23(&v16[v18[6]], &v17[v18[6]], v22);
          v24 = v18[7];
          v25 = &v16[v24];
          v26 = &v17[v24];
          v27 = sub_100005D40(&qword_1001BF090);
          v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
          v28(v25, v26, v27);
          v28(&v16[v18[8]], &v17[v18[8]], v27);
          *(_OWORD *)&v16[v18[9]] = *(_OWORD *)&v17[v18[9]];
          v29 = v18[10];
          v30 = &v16[v29];
          v31 = &v17[v29];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v29], 1, v27))
          {
            v32 = sub_100005D40(&qword_1001BF098);
            memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
          }
          else
          {
            v28(v30, v31, v27);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v27);
          }
          v60 = v18[11];
          v61 = &v16[v60];
          v62 = &v17[v60];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v60], 1, v27))
          {
            v63 = sub_100005D40(&qword_1001BF098);
            memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
          }
          else
          {
            v28(v61, v62, v27);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v61, 0, 1, v27);
          }
          v68 = v18[12];
          v69 = &v16[v68];
          v70 = &v17[v68];
          v172(&v16[v68], &v17[v68], v174);
          v71 = (int *)type metadata accessor for ConditionViewModel(0);
          v72 = v71[5];
          v73 = &v69[v72];
          v74 = &v70[v72];
          v75 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
          *(_OWORD *)&v69[v71[6]] = *(_OWORD *)&v70[v71[6]];
          *(_OWORD *)&v69[v71[7]] = *(_OWORD *)&v70[v71[7]];
          v69[v71[8]] = v70[v71[8]];
          v69[v71[9]] = v70[v71[9]];
          v69[v71[10]] = v70[v71[10]];
          *(_QWORD *)&v16[v18[13]] = *(_QWORD *)&v17[v18[13]];
          v76 = v18[14];
          v77 = &v16[v76];
          v78 = &v17[v76];
          v79 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
          v80 = v18[15];
          v81 = &v16[v80];
          v82 = &v17[v80];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v80], 1, v22))
          {
            v83 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
          }
          else
          {
            v170(v81, v82, v22);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v81, 0, 1, v22);
          }
          v100 = v18[16];
          v101 = &v16[v100];
          v102 = &v17[v100];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v100], 1, v22))
          {
            v103 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
          }
          else
          {
            v170(v101, v102, v22);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v101, 0, 1, v22);
          }
          v108 = v18[17];
          v109 = &v16[v108];
          v110 = &v17[v108];
          v111 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v111 - 8) + 32))(v109, v110, v111);
          v112 = v18[18];
          v113 = &v16[v112];
          v114 = &v17[v112];
          v115 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 32))(v113, v114, v115);
          *(_QWORD *)&v16[v18[19]] = *(_QWORD *)&v17[v18[19]];
          v116 = v18[20];
          v117 = &v16[v116];
          v118 = &v17[v116];
          v117[32] = v118[32];
          v119 = *((_OWORD *)v118 + 1);
          *(_OWORD *)v117 = *(_OWORD *)v118;
          *((_OWORD *)v117 + 1) = v119;
          v120 = a1;
          v121 = v176;
          v122 = 1;
        }
        else
        {
          v34 = type metadata accessor for UUID(0);
          v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32);
          v35(a1, a2, v34);
          v36 = type metadata accessor for AggregateWeatherViewModel(0);
          v37 = *(int *)(v36 + 20);
          v38 = &a1[v37];
          v39 = &a2[v37];
          v40 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
          v168 = (int *)v36;
          v169 = v35;
          v41 = *(int *)(v36 + 24);
          v42 = &a1[v41];
          v43 = &a2[v41];
          v171 = v34;
          v35(&a1[v41], &a2[v41], v34);
          v44 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v45 = v44[5];
          v46 = &v42[v45];
          v47 = &v43[v45];
          v48 = type metadata accessor for Date(0);
          v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32);
          v49(v46, v47, v48);
          v173 = v49;
          v175 = v48;
          v49(&v42[v44[6]], &v43[v44[6]], v48);
          v50 = v44[7];
          v51 = &v42[v50];
          v52 = &v43[v50];
          v53 = sub_100005D40(&qword_1001BF090);
          v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32);
          v54(v51, v52, v53);
          v54(&v42[v44[8]], &v43[v44[8]], v53);
          *(_OWORD *)&v42[v44[9]] = *(_OWORD *)&v43[v44[9]];
          v55 = v44[10];
          v56 = &v42[v55];
          v57 = &v43[v55];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v43[v55], 1, v53))
          {
            v59 = sub_100005D40(&qword_1001BF098);
            memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
          }
          else
          {
            v54(v56, v57, v53);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v53);
          }
          v64 = v44[11];
          v65 = &v42[v64];
          v66 = &v43[v64];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v43[v64], 1, v53))
          {
            v67 = sub_100005D40(&qword_1001BF098);
            memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
          }
          else
          {
            v54(v65, v66, v53);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v65, 0, 1, v53);
          }
          v84 = v44[12];
          v85 = &v42[v84];
          v86 = &v43[v84];
          v169(&v42[v84], &v43[v84], v171);
          v87 = (int *)type metadata accessor for ConditionViewModel(0);
          v88 = v87[5];
          v89 = &v85[v88];
          v90 = &v86[v88];
          v91 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 32))(v89, v90, v91);
          *(_OWORD *)&v85[v87[6]] = *(_OWORD *)&v86[v87[6]];
          *(_OWORD *)&v85[v87[7]] = *(_OWORD *)&v86[v87[7]];
          v85[v87[8]] = v86[v87[8]];
          v85[v87[9]] = v86[v87[9]];
          v85[v87[10]] = v86[v87[10]];
          *(_QWORD *)&v42[v44[13]] = *(_QWORD *)&v43[v44[13]];
          v92 = v44[14];
          v93 = &v42[v92];
          v94 = &v43[v92];
          v95 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 32))(v93, v94, v95);
          v96 = v44[15];
          v97 = &v42[v96];
          v98 = &v43[v96];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v43[v96], 1, v175))
          {
            v99 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
          }
          else
          {
            v173(v97, v98, v175);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v97, 0, 1, v175);
          }
          v104 = v44[16];
          v105 = &v42[v104];
          v106 = &v43[v104];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v43[v104], 1, v175))
          {
            v107 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
          }
          else
          {
            v173(v105, v106, v175);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v105, 0, 1, v175);
          }
          v123 = v44[17];
          v124 = &v42[v123];
          v125 = &v43[v123];
          v126 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 32))(v124, v125, v126);
          v127 = v44[18];
          v128 = &v42[v127];
          v129 = &v43[v127];
          v130 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v130 - 8) + 32))(v128, v129, v130);
          *(_QWORD *)&v42[v44[19]] = *(_QWORD *)&v43[v44[19]];
          v131 = v44[20];
          v132 = &v42[v131];
          v133 = &v43[v131];
          v132[32] = v133[32];
          v134 = *((_OWORD *)v133 + 1);
          *(_OWORD *)v132 = *(_OWORD *)v133;
          *((_OWORD *)v132 + 1) = v134;
          *(_QWORD *)&a1[v168[7]] = *(_QWORD *)&a2[v168[7]];
          *(_QWORD *)&a1[v168[8]] = *(_QWORD *)&a2[v168[8]];
          v135 = v168[9];
          v136 = &a1[v135];
          v137 = &a2[v135];
          v138 = (int *)type metadata accessor for AirQualityViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v137, 1, (uint64_t)v138))
          {
            v139 = sub_100005D40(&qword_1001BFA30);
            memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
          }
          else
          {
            v169(v136, v137, v171);
            v173(&v136[v138[5]], &v137[v138[5]], v175);
            *(_QWORD *)&v136[v138[6]] = *(_QWORD *)&v137[v138[6]];
            v140 = v138[7];
            v141 = &v136[v140];
            v142 = &v137[v140];
            v143 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 32))(v141, v142, v143);
            v144 = v138[8];
            v145 = &v136[v144];
            v146 = &v137[v144];
            v147 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 32))(v145, v146, v147);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v136, 0, 1, (uint64_t)v138);
          }
          v148 = v168[10];
          v149 = &a1[v148];
          v150 = &a2[v148];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, HourPrecipitationChartViewModel))
          {
            v152 = sub_100005D40(&qword_1001BFA38);
            memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v149, v150, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v149, 0, 1, HourPrecipitationChartViewModel);
          }
          *(_QWORD *)&a1[v168[11]] = *(_QWORD *)&a2[v168[11]];
          v153 = v168[12];
          v154 = &a1[v153];
          v155 = &a2[v153];
          *(_QWORD *)v154 = *(_QWORD *)v155;
          *((_WORD *)v154 + 4) = *((_WORD *)v155 + 4);
          v156 = v168[13];
          v157 = &a1[v156];
          v158 = &a2[v156];
          v159 = type metadata accessor for URL(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, v159))
          {
            v160 = sub_100005D40(&qword_1001BFA28);
            memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 32))(v157, v158, v159);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v157, 0, 1, v159);
          }
          v161 = v168[14];
          v162 = &a1[v161];
          v163 = &a2[v161];
          v164 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v163, 1, v164))
          {
            v165 = sub_100005D40(&qword_1001BFA40);
            memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
          }
          else
          {
            v166 = swift_getEnumCaseMultiPayload(v163, v164) == 1;
            v173(v162, v163, v175);
            swift_storeEnumTagMultiPayload(v162, v164, v166);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v162, 0, 1, v164);
          }
          v120 = a1;
          v121 = v176;
          v122 = 0;
        }
        swift_storeEnumTagMultiPayload(v120, v121, v122);
        a3 = v177;
      }
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000360BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1000360CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10017B358;
  result = type metadata accessor for WeatherDataViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

_QWORD *sub_10003613C(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t EnumCaseMultiPayload;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  int *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  void (*v158)(char *, char *, uint64_t);
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  int *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  _BOOL8 v219;
  uint64_t v221;
  void (*v222)(char *, char *, uint64_t);
  uint64_t v223;
  int *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void (*v229)(char *, char *, uint64_t);
  char *__dst;
  char *__dsta;
  _QWORD *v232;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v228 = type metadata accessor for Date(0);
    v229 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v228 - 8) + 16);
    v229(a1, a2, v228);
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for TimelineEntryRelevance(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v10))
    {
      v11 = sub_100005D40(&qword_1001BFA20);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v8, 0, 1, v10);
    }
    v14 = a3[6];
    v232 = a1;
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = *(_QWORD *)&a2[v14 + 8];
    *(_QWORD *)v15 = *(_QWORD *)&a2[v14];
    *((_QWORD *)v15 + 1) = v17;
    v18 = *(_QWORD *)&a2[v14 + 24];
    *((_QWORD *)v15 + 2) = *(_QWORD *)&a2[v14 + 16];
    *((_QWORD *)v15 + 3) = v18;
    v19 = *(_QWORD *)&a2[v14 + 40];
    *((_QWORD *)v15 + 4) = *(_QWORD *)&a2[v14 + 32];
    *((_QWORD *)v15 + 5) = v19;
    *((_WORD *)v15 + 24) = *(_WORD *)&a2[v14 + 48];
    v15[50] = a2[v14 + 50];
    v15[51] = a2[v14 + 51];
    v20 = type metadata accessor for WidgetContext(0);
    v21 = *(int *)(v20 + 40);
    __dst = &v15[v21];
    v22 = &v16[v21];
    v23 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v22, 1, v23))
    {
      v24 = sub_100005D40(&qword_1001BFA28);
      memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(__dst, v22, v23);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)__dst, 0, 1, v23);
    }
    v25 = *(int *)(v20 + 44);
    v26 = &v15[v25];
    v27 = &v16[v25];
    v28 = *(_QWORD *)v27;
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
    v29 = a3[7];
    v13 = v232;
    v30 = (char *)v232 + v29;
    v31 = &a2[v29];
    v32 = type metadata accessor for ForecastEntry.Model(0);
    swift_bridgeObjectRetain(v28);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, v33);
      v35 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v60 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v30, v31, v60);
      }
      else
      {
        __dsta = v30;
        v226 = v33;
        v227 = v32;
        v225 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v36 = type metadata accessor for UUID(0);
          v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
          v37(v30, v31, v36);
          v38 = type metadata accessor for InstantWeatherViewModel(0);
          v39 = *(int *)(v38 + 20);
          v40 = &v30[v39];
          v41 = &v31[v39];
          v42 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
          v43 = *(int *)(v38 + 24);
          v44 = &v30[v43];
          v45 = &v31[v43];
          v37(&v30[v43], &v31[v43], v36);
          v46 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v229(&v44[v46[5]], &v45[v46[5]], v228);
          v229(&v44[v46[6]], &v45[v46[6]], v228);
          v47 = v46[7];
          v48 = &v44[v47];
          v49 = &v45[v47];
          v50 = sub_100005D40(&qword_1001BF090);
          v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
          v51(v48, v49, v50);
          v51(&v44[v46[8]], &v45[v46[8]], v50);
          v52 = v46[9];
          v53 = &v44[v52];
          v54 = &v45[v52];
          v55 = *((_QWORD *)v54 + 1);
          *(_QWORD *)v53 = *(_QWORD *)v54;
          *((_QWORD *)v53 + 1) = v55;
          v56 = v46[10];
          v57 = &v44[v56];
          v58 = &v45[v56];
          swift_bridgeObjectRetain(v55);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v58, 1, v50))
          {
            v59 = sub_100005D40(&qword_1001BF098);
            memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
          }
          else
          {
            v51(v57, v58, v50);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v57, 0, 1, v50);
          }
          v85 = v46[11];
          v86 = &v44[v85];
          v87 = &v45[v85];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v45[v85], 1, v50))
          {
            v88 = sub_100005D40(&qword_1001BF098);
            memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
          }
          else
          {
            v51(v86, v87, v50);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v86, 0, 1, v50);
          }
          v89 = v46[12];
          v90 = &v44[v89];
          v91 = &v45[v89];
          v37(&v44[v89], &v45[v89], v36);
          v92 = (int *)type metadata accessor for ConditionViewModel(0);
          v93 = v92[5];
          v94 = &v90[v93];
          v95 = &v91[v93];
          v96 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v94, v95, v96);
          v97 = v92[6];
          v98 = &v90[v97];
          v99 = &v91[v97];
          v100 = *((_QWORD *)v99 + 1);
          *(_QWORD *)v98 = *(_QWORD *)v99;
          *((_QWORD *)v98 + 1) = v100;
          v101 = v92[7];
          v102 = &v90[v101];
          v103 = &v91[v101];
          v104 = *((_QWORD *)v103 + 1);
          *(_QWORD *)v102 = *(_QWORD *)v103;
          *((_QWORD *)v102 + 1) = v104;
          v90[v92[8]] = v91[v92[8]];
          v90[v92[9]] = v91[v92[9]];
          v90[v92[10]] = v91[v92[10]];
          *(_QWORD *)&v44[v46[13]] = *(_QWORD *)&v45[v46[13]];
          v105 = v46[14];
          v106 = &v44[v105];
          v107 = &v45[v105];
          v108 = type metadata accessor for CloudAltitudeKind(0);
          v109 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 16);
          swift_bridgeObjectRetain(v100);
          swift_bridgeObjectRetain(v104);
          v109(v106, v107, v108);
          v110 = v46[15];
          v111 = &v44[v110];
          v112 = &v45[v110];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v45[v110], 1, v228))
          {
            v113 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
          }
          else
          {
            v229(v111, v112, v228);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v111, 0, 1, v228);
          }
          v30 = __dsta;
          v32 = v227;
          v114 = v46[16];
          v115 = &v44[v114];
          v116 = &v45[v114];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v45[v114], 1, v228))
          {
            v117 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            v229(v115, v116, v228);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v228);
          }
          v118 = v46[17];
          v119 = &v44[v118];
          v120 = &v45[v118];
          v121 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v119, v120, v121);
          v122 = v46[18];
          v123 = &v44[v122];
          v124 = &v45[v122];
          v125 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 16))(v123, v124, v125);
          *(_QWORD *)&v44[v46[19]] = *(_QWORD *)&v45[v46[19]];
          v126 = v46[20];
          v127 = &v44[v126];
          v128 = &v45[v126];
          v129 = *((_QWORD *)v128 + 1);
          if (v129)
          {
            *(_QWORD *)v127 = *(_QWORD *)v128;
            *((_QWORD *)v127 + 1) = v129;
            v130 = *((_QWORD *)v128 + 2);
            v131 = *((_QWORD *)v128 + 3);
            v132 = v128[32];
            swift_bridgeObjectRetain(v129);
            sub_100006E58(v130, v131, v132);
            *((_QWORD *)v127 + 2) = v130;
            *((_QWORD *)v127 + 3) = v131;
            v127[32] = v132;
          }
          else
          {
            v133 = *((_OWORD *)v128 + 1);
            *(_OWORD *)v127 = *(_OWORD *)v128;
            *((_OWORD *)v127 + 1) = v133;
            v127[32] = v128[32];
          }
          v13 = v232;
          v33 = v226;
        }
        else
        {
          v221 = v23;
          v61 = type metadata accessor for UUID(0);
          v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
          v62(v30, v31, v61);
          v63 = type metadata accessor for AggregateWeatherViewModel(0);
          v64 = *(int *)(v63 + 20);
          v65 = &v30[v64];
          v66 = &v31[v64];
          v67 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
          v223 = v61;
          v224 = (int *)v63;
          v68 = *(int *)(v63 + 24);
          v69 = &v30[v68];
          v70 = &v31[v68];
          v222 = v62;
          v62(&v30[v68], &v31[v68], v61);
          v71 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v229(&v69[v71[5]], &v70[v71[5]], v228);
          v229(&v69[v71[6]], &v70[v71[6]], v228);
          v72 = v71[7];
          v73 = &v69[v72];
          v74 = &v70[v72];
          v75 = sub_100005D40(&qword_1001BF090);
          v76 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16);
          v76(v73, v74, v75);
          v76(&v69[v71[8]], &v70[v71[8]], v75);
          v77 = v71[9];
          v78 = &v69[v77];
          v79 = &v70[v77];
          v80 = *((_QWORD *)v79 + 1);
          *(_QWORD *)v78 = *(_QWORD *)v79;
          *((_QWORD *)v78 + 1) = v80;
          v81 = v71[10];
          v82 = &v69[v81];
          v83 = &v70[v81];
          swift_bridgeObjectRetain(v80);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v83, 1, v75))
          {
            v84 = sub_100005D40(&qword_1001BF098);
            memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
          }
          else
          {
            v76(v82, v83, v75);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v82, 0, 1, v75);
          }
          v134 = v71[11];
          v135 = &v69[v134];
          v136 = &v70[v134];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v70[v134], 1, v75))
          {
            v137 = sub_100005D40(&qword_1001BF098);
            memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
          }
          else
          {
            v76(v135, v136, v75);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v135, 0, 1, v75);
          }
          v138 = v71[12];
          v139 = &v69[v138];
          v140 = &v70[v138];
          v62(&v69[v138], &v70[v138], v223);
          v141 = (int *)type metadata accessor for ConditionViewModel(0);
          v142 = v141[5];
          v143 = &v139[v142];
          v144 = &v140[v142];
          v145 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
          v146 = v141[6];
          v147 = &v139[v146];
          v148 = &v140[v146];
          v149 = *((_QWORD *)v148 + 1);
          *(_QWORD *)v147 = *(_QWORD *)v148;
          *((_QWORD *)v147 + 1) = v149;
          v150 = v141[7];
          v151 = &v139[v150];
          v152 = &v140[v150];
          v153 = *((_QWORD *)v152 + 1);
          *(_QWORD *)v151 = *(_QWORD *)v152;
          *((_QWORD *)v151 + 1) = v153;
          v139[v141[8]] = v140[v141[8]];
          v139[v141[9]] = v140[v141[9]];
          v139[v141[10]] = v140[v141[10]];
          *(_QWORD *)&v69[v71[13]] = *(_QWORD *)&v70[v71[13]];
          v154 = v71[14];
          v155 = &v69[v154];
          v156 = &v70[v154];
          v157 = type metadata accessor for CloudAltitudeKind(0);
          v158 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 16);
          swift_bridgeObjectRetain(v149);
          swift_bridgeObjectRetain(v153);
          v158(v155, v156, v157);
          v159 = v71[15];
          v160 = &v69[v159];
          v161 = &v70[v159];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v70[v159], 1, v228))
          {
            v162 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
          }
          else
          {
            v229(v160, v161, v228);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v160, 0, 1, v228);
          }
          v30 = __dsta;
          v163 = v71[16];
          v164 = &v69[v163];
          v165 = &v70[v163];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v70[v163], 1, v228))
          {
            v166 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
          }
          else
          {
            v229(v164, v165, v228);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v164, 0, 1, v228);
          }
          v167 = v71[17];
          v168 = &v69[v167];
          v169 = &v70[v167];
          v170 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 16))(v168, v169, v170);
          v171 = v71[18];
          v172 = &v69[v171];
          v173 = &v70[v171];
          v174 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v174 - 8) + 16))(v172, v173, v174);
          *(_QWORD *)&v69[v71[19]] = *(_QWORD *)&v70[v71[19]];
          v175 = v71[20];
          v176 = &v69[v175];
          v177 = &v70[v175];
          v178 = *((_QWORD *)v177 + 1);
          if (v178)
          {
            *(_QWORD *)v176 = *(_QWORD *)v177;
            *((_QWORD *)v176 + 1) = v178;
            v179 = *((_QWORD *)v177 + 2);
            v180 = *((_QWORD *)v177 + 3);
            v181 = v177[32];
            swift_bridgeObjectRetain(v178);
            sub_100006E58(v179, v180, v181);
            *((_QWORD *)v176 + 2) = v179;
            *((_QWORD *)v176 + 3) = v180;
            v176[32] = v181;
          }
          else
          {
            v182 = *((_OWORD *)v177 + 1);
            *(_OWORD *)v176 = *(_OWORD *)v177;
            *((_OWORD *)v176 + 1) = v182;
            v176[32] = v177[32];
          }
          v13 = v232;
          v183 = v224[7];
          v184 = *(_QWORD *)&v31[v183];
          *(_QWORD *)&__dsta[v183] = v184;
          v185 = v224[8];
          v186 = *(_QWORD *)&v31[v185];
          *(_QWORD *)&__dsta[v185] = v186;
          v187 = v224[9];
          v188 = &__dsta[v187];
          v189 = &v31[v187];
          v190 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v184);
          swift_bridgeObjectRetain(v186);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v189, 1, (uint64_t)v190))
          {
            v191 = sub_100005D40(&qword_1001BFA30);
            memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
          }
          else
          {
            v222(v188, v189, v223);
            v229(&v188[v190[5]], &v189[v190[5]], v228);
            *(_QWORD *)&v188[v190[6]] = *(_QWORD *)&v189[v190[6]];
            v192 = v190[7];
            v193 = &v188[v192];
            v194 = &v189[v192];
            v195 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v193, v194, v195);
            v196 = v190[8];
            v197 = &v188[v196];
            v198 = &v189[v196];
            v199 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v199 - 8) + 16))(v197, v198, v199);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v188, 0, 1, (uint64_t)v190);
          }
          v33 = v226;
          v200 = v224[10];
          v201 = &__dsta[v200];
          v202 = &v31[v200];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v202, 1, HourPrecipitationChartViewModel))
          {
            v204 = sub_100005D40(&qword_1001BFA38);
            memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v201, v202, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v201, 0, 1, HourPrecipitationChartViewModel);
          }
          v205 = v224[11];
          v206 = *(_QWORD *)&v31[v205];
          *(_QWORD *)&__dsta[v205] = v206;
          v207 = v224[12];
          v208 = &__dsta[v207];
          v209 = &v31[v207];
          *(_QWORD *)v208 = *(_QWORD *)v209;
          *((_WORD *)v208 + 4) = *((_WORD *)v209 + 4);
          v210 = v224[13];
          v211 = &__dsta[v210];
          v212 = &v31[v210];
          swift_bridgeObjectRetain(v206);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v212, 1, v221))
          {
            v213 = sub_100005D40(&qword_1001BFA28);
            memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v221 - 8) + 16))(v211, v212, v221);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v211, 0, 1, v221);
          }
          v214 = v224[14];
          v215 = &__dsta[v214];
          v216 = &v31[v214];
          v217 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v216, 1, v217))
          {
            v218 = sub_100005D40(&qword_1001BFA40);
            memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
          }
          else
          {
            v219 = swift_getEnumCaseMultiPayload(v216, v217) == 1;
            v229(v215, v216, v228);
            swift_storeEnumTagMultiPayload(v215, v217, v219);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v215, 0, 1, v217);
          }
          v32 = v227;
        }
        v35 = v225;
      }
      swift_storeEnumTagMultiPayload(v30, v33, v35);
      swift_storeEnumTagMultiPayload(v30, v32, 1);
    }
    else
    {
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
  }
  return v13;
}

uint64_t sub_100037000(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  void (*v81)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date(0);
  v81 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v81(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for TimelineEntryRelevance(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (_QWORD *)(a1 + a2[6]);
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[3]);
  swift_bridgeObjectRelease(v7[5]);
  v8 = type metadata accessor for WidgetContext(0);
  v9 = (uint64_t)v7 + *(int *)(v8 + 40);
  v10 = type metadata accessor for URL(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v7 + *(int *)(v8 + 44)));
  v11 = a1 + a2[7];
  v12 = type metadata accessor for ForecastEntry.Model(0);
  result = swift_getEnumCaseMultiPayload(v11, v12);
  if ((_DWORD)result == 1)
  {
    v14 = type metadata accessor for WeatherDataViewModel(0);
    result = swift_getEnumCaseMultiPayload(v11, v14);
    switch((_DWORD)result)
    {
      case 2:
        v53 = type metadata accessor for SunriseSunsetViewModel(0);
        v54 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8);
        v52 = v11;
        return v54(v52, v53);
      case 1:
        v55 = type metadata accessor for UUID(0);
        v56 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8);
        v56(v11, v55);
        v57 = type metadata accessor for InstantWeatherViewModel(0);
        v58 = v11 + *(int *)(v57 + 20);
        v59 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v58, v59);
        v60 = v11 + *(int *)(v57 + 24);
        v56(v60, v55);
        v61 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v81(v60 + v61[5], v4);
        v81(v60 + v61[6], v4);
        v62 = v60 + v61[7];
        v63 = sub_100005D40(&qword_1001BF090);
        v64 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 8);
        v64(v62, v63);
        v64(v60 + v61[8], v63);
        swift_bridgeObjectRelease(*(_QWORD *)(v60 + v61[9] + 8));
        v65 = v60 + v61[10];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v65, 1, v63))
          v64(v65, v63);
        v66 = v60 + v61[11];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v66, 1, v63))
          v64(v66, v63);
        v67 = v60 + v61[12];
        v56(v67, v55);
        v68 = (int *)type metadata accessor for ConditionViewModel(0);
        v69 = v67 + v68[5];
        v70 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 8))(v69, v70);
        swift_bridgeObjectRelease(*(_QWORD *)(v67 + v68[6] + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v67 + v68[7] + 8));
        v71 = v60 + v61[14];
        v72 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 8))(v71, v72);
        v73 = v60 + v61[15];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v73, 1, v4))
          v81(v73, v4);
        v74 = v60 + v61[16];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v74, 1, v4))
          v81(v74, v4);
        v75 = v60 + v61[17];
        v76 = type metadata accessor for UVIndex(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v75, v76);
        v77 = v60 + v61[18];
        v78 = type metadata accessor for Wind(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 8))(v77, v78);
        v79 = v60 + v61[20];
        result = *(_QWORD *)(v79 + 8);
        if (result)
        {
          swift_bridgeObjectRelease(result);
          return sub_100007458(*(_QWORD *)(v79 + 16), *(_QWORD *)(v79 + 24), *(_BYTE *)(v79 + 32));
        }
        break;
      case 0:
        v15 = type metadata accessor for UUID(0);
        v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
        v16(v11, v15);
        v17 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        v18 = v11 + v17[5];
        v19 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
        v20 = v11 + v17[6];
        v80 = v16;
        v16(v20, v15);
        v21 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v81(v20 + v21[5], v4);
        v81(v20 + v21[6], v4);
        v22 = v20 + v21[7];
        v23 = sub_100005D40(&qword_1001BF090);
        v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8);
        v24(v22, v23);
        v24(v20 + v21[8], v23);
        swift_bridgeObjectRelease(*(_QWORD *)(v20 + v21[9] + 8));
        v25 = v20 + v21[10];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v25, 1, v23))
          v24(v25, v23);
        v26 = v20 + v21[11];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v26, 1, v23))
          v24(v26, v23);
        v27 = v20 + v21[12];
        v80(v27, v15);
        v28 = (int *)type metadata accessor for ConditionViewModel(0);
        v29 = v27 + v28[5];
        v30 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
        swift_bridgeObjectRelease(*(_QWORD *)(v27 + v28[6] + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v27 + v28[7] + 8));
        v31 = v20 + v21[14];
        v32 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
        v33 = v20 + v21[15];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v33, 1, v4))
          v81(v33, v4);
        v34 = v20 + v21[16];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v34, 1, v4))
          v81(v34, v4);
        v35 = v20 + v21[17];
        v36 = type metadata accessor for UVIndex(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
        v37 = v20 + v21[18];
        v38 = type metadata accessor for Wind(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
        v39 = v20 + v21[20];
        v40 = *(_QWORD *)(v39 + 8);
        if (v40)
        {
          swift_bridgeObjectRelease(v40);
          sub_100007458(*(_QWORD *)(v39 + 16), *(_QWORD *)(v39 + 24), *(_BYTE *)(v39 + 32));
        }
        swift_bridgeObjectRelease(*(_QWORD *)(v11 + v17[7]));
        swift_bridgeObjectRelease(*(_QWORD *)(v11 + v17[8]));
        v41 = v11 + v17[9];
        v42 = (int *)type metadata accessor for AirQualityViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v41, 1, (uint64_t)v42))
        {
          v80(v41, v15);
          v81(v41 + v42[5], v4);
          v43 = v41 + v42[7];
          v44 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
          v45 = v41 + v42[8];
          v46 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v45, v46);
        }
        v47 = v11 + v17[10];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v47, 1, HourPrecipitationChartViewModel))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v47, HourPrecipitationChartViewModel);
        swift_bridgeObjectRelease(*(_QWORD *)(v11 + v17[11]));
        v49 = v11 + v17[13];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v49, 1, v10))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v49, v10);
        v50 = v11 + v17[14];
        v51 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v50, 1, v51);
        if (!(_DWORD)result)
        {
          v52 = v50;
          v53 = v4;
          v54 = (uint64_t (*)(uint64_t, uint64_t))v81;
          return v54(v52, v53);
        }
        break;
    }
  }
  return result;
}

uint64_t sub_100037814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t EnumCaseMultiPayload;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  int *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  void (*v158)(char *, char *, uint64_t);
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  int *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  _BOOL8 v220;
  uint64_t v222;
  uint64_t v223;
  void (*v224)(char *, char *, uint64_t);
  int *v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  void (*v229)(uint64_t, uint64_t);
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;

  v6 = type metadata accessor for Date(0);
  v229 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v230 = v6;
  v229(a1, a2);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for TimelineEntryRelevance(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_100005D40(&qword_1001BFA20);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v231 = a3;
  v233 = a1;
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a2 + v12 + 8);
  *(_QWORD *)v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(v13 + 8) = v15;
  v16 = *(_QWORD *)(a2 + v12 + 24);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a2 + v12 + 16);
  *(_QWORD *)(v13 + 24) = v16;
  v17 = *(_QWORD *)(a2 + v12 + 40);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(a2 + v12 + 32);
  *(_QWORD *)(v13 + 40) = v17;
  *(_WORD *)(v13 + 48) = *(_WORD *)(a2 + v12 + 48);
  *(_BYTE *)(v13 + 50) = *(_BYTE *)(a2 + v12 + 50);
  *(_BYTE *)(v13 + 51) = *(_BYTE *)(a2 + v12 + 51);
  v18 = type metadata accessor for WidgetContext(0);
  v19 = *(int *)(v18 + 40);
  v20 = (void *)(v13 + v19);
  v21 = (const void *)(v14 + v19);
  v22 = type metadata accessor for URL(0);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v22))
  {
    v23 = sub_100005D40(&qword_1001BFA28);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, v22);
  }
  v24 = *(int *)(v18 + 44);
  v25 = v13 + v24;
  v26 = (uint64_t *)(v14 + v24);
  v27 = *v26;
  *(_QWORD *)v25 = *v26;
  *(_BYTE *)(v25 + 8) = *((_BYTE *)v26 + 8);
  v28 = v233;
  v29 = *(int *)(v231 + 28);
  v30 = (char *)(v233 + v29);
  v31 = (char *)(a2 + v29);
  v32 = type metadata accessor for ForecastEntry.Model(0);
  swift_bridgeObjectRetain(v27);
  if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
  {
    v33 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, v33);
    v35 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v60 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v30, v31, v60);
    }
    else
    {
      v232 = v30;
      v227 = v33;
      v228 = v32;
      v226 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v36 = type metadata accessor for UUID(0);
        v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
        v37(v30, v31, v36);
        v38 = type metadata accessor for InstantWeatherViewModel(0);
        v39 = *(int *)(v38 + 20);
        v40 = &v30[v39];
        v41 = &v31[v39];
        v42 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
        v43 = *(int *)(v38 + 24);
        v44 = &v30[v43];
        v45 = &v31[v43];
        v37(&v30[v43], &v31[v43], v36);
        v46 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        ((void (*)(char *, char *, uint64_t))v229)(&v44[v46[5]], &v45[v46[5]], v230);
        ((void (*)(char *, char *, uint64_t))v229)(&v44[v46[6]], &v45[v46[6]], v230);
        v47 = v46[7];
        v48 = &v44[v47];
        v49 = &v45[v47];
        v50 = sub_100005D40(&qword_1001BF090);
        v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
        v51(v48, v49, v50);
        v51(&v44[v46[8]], &v45[v46[8]], v50);
        v52 = v46[9];
        v53 = &v44[v52];
        v54 = &v45[v52];
        v55 = *((_QWORD *)v54 + 1);
        *(_QWORD *)v53 = *(_QWORD *)v54;
        *((_QWORD *)v53 + 1) = v55;
        v56 = v46[10];
        v57 = &v44[v56];
        v58 = &v45[v56];
        swift_bridgeObjectRetain(v55);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v58, 1, v50))
        {
          v59 = sub_100005D40(&qword_1001BF098);
          memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
        }
        else
        {
          v51(v57, v58, v50);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v57, 0, 1, v50);
        }
        v85 = v46[11];
        v86 = &v44[v85];
        v87 = &v45[v85];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v45[v85], 1, v50))
        {
          v88 = sub_100005D40(&qword_1001BF098);
          memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
        }
        else
        {
          v51(v86, v87, v50);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v86, 0, 1, v50);
        }
        v89 = v46[12];
        v90 = &v44[v89];
        v91 = &v45[v89];
        v37(&v44[v89], &v45[v89], v36);
        v92 = (int *)type metadata accessor for ConditionViewModel(0);
        v93 = v92[5];
        v94 = &v90[v93];
        v95 = &v91[v93];
        v96 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v94, v95, v96);
        v97 = v92[6];
        v98 = &v90[v97];
        v99 = &v91[v97];
        v100 = *((_QWORD *)v99 + 1);
        *(_QWORD *)v98 = *(_QWORD *)v99;
        *((_QWORD *)v98 + 1) = v100;
        v101 = v92[7];
        v102 = &v90[v101];
        v103 = &v91[v101];
        v104 = *((_QWORD *)v103 + 1);
        *(_QWORD *)v102 = *(_QWORD *)v103;
        *((_QWORD *)v102 + 1) = v104;
        v90[v92[8]] = v91[v92[8]];
        v90[v92[9]] = v91[v92[9]];
        v90[v92[10]] = v91[v92[10]];
        *(_QWORD *)&v44[v46[13]] = *(_QWORD *)&v45[v46[13]];
        v105 = v46[14];
        v106 = &v44[v105];
        v107 = &v45[v105];
        v108 = type metadata accessor for CloudAltitudeKind(0);
        v109 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 16);
        swift_bridgeObjectRetain(v100);
        swift_bridgeObjectRetain(v104);
        v109(v106, v107, v108);
        v110 = v46[15];
        v111 = &v44[v110];
        v112 = &v45[v110];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v45[v110], 1, v230))
        {
          v113 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v229)(v111, v112, v230);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v111, 0, 1, v230);
        }
        v30 = v232;
        v28 = v233;
        v114 = v46[16];
        v115 = &v44[v114];
        v116 = &v45[v114];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v45[v114], 1, v230))
        {
          v117 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v229)(v115, v116, v230);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v230);
        }
        v118 = v46[17];
        v119 = &v44[v118];
        v120 = &v45[v118];
        v121 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v119, v120, v121);
        v122 = v46[18];
        v123 = &v44[v122];
        v124 = &v45[v122];
        v125 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 16))(v123, v124, v125);
        *(_QWORD *)&v44[v46[19]] = *(_QWORD *)&v45[v46[19]];
        v126 = v46[20];
        v127 = &v44[v126];
        v128 = &v45[v126];
        v129 = *((_QWORD *)v128 + 1);
        if (v129)
        {
          *(_QWORD *)v127 = *(_QWORD *)v128;
          *((_QWORD *)v127 + 1) = v129;
          v130 = *((_QWORD *)v128 + 2);
          v131 = *((_QWORD *)v128 + 3);
          v132 = v128[32];
          swift_bridgeObjectRetain(v129);
          sub_100006E58(v130, v131, v132);
          *((_QWORD *)v127 + 2) = v130;
          *((_QWORD *)v127 + 3) = v131;
          v127[32] = v132;
        }
        else
        {
          v133 = *((_OWORD *)v128 + 1);
          *(_OWORD *)v127 = *(_OWORD *)v128;
          *((_OWORD *)v127 + 1) = v133;
          v127[32] = v128[32];
        }
        v33 = v227;
        v32 = v228;
      }
      else
      {
        v223 = v22;
        v61 = type metadata accessor for UUID(0);
        v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
        v62(v30, v31, v61);
        v63 = type metadata accessor for AggregateWeatherViewModel(0);
        v64 = *(int *)(v63 + 20);
        v65 = &v30[v64];
        v66 = &v31[v64];
        v67 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
        v224 = v62;
        v225 = (int *)v63;
        v68 = *(int *)(v63 + 24);
        v69 = &v30[v68];
        v70 = &v31[v68];
        v62(&v30[v68], &v31[v68], v61);
        v71 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        ((void (*)(char *, char *, uint64_t))v229)(&v69[v71[5]], &v70[v71[5]], v230);
        ((void (*)(char *, char *, uint64_t))v229)(&v69[v71[6]], &v70[v71[6]], v230);
        v72 = v71[7];
        v73 = &v69[v72];
        v74 = &v70[v72];
        v75 = sub_100005D40(&qword_1001BF090);
        v76 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16);
        v76(v73, v74, v75);
        v76(&v69[v71[8]], &v70[v71[8]], v75);
        v77 = v71[9];
        v78 = &v69[v77];
        v79 = &v70[v77];
        v80 = *((_QWORD *)v79 + 1);
        *(_QWORD *)v78 = *(_QWORD *)v79;
        *((_QWORD *)v78 + 1) = v80;
        v81 = v71[10];
        v82 = &v69[v81];
        v83 = &v70[v81];
        swift_bridgeObjectRetain(v80);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v83, 1, v75))
        {
          v84 = sub_100005D40(&qword_1001BF098);
          memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
        }
        else
        {
          v76(v82, v83, v75);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v82, 0, 1, v75);
        }
        v134 = v71[11];
        v135 = &v69[v134];
        v136 = &v70[v134];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v70[v134], 1, v75))
        {
          v137 = sub_100005D40(&qword_1001BF098);
          memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
        }
        else
        {
          v76(v135, v136, v75);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v135, 0, 1, v75);
        }
        v138 = v71[12];
        v139 = &v69[v138];
        v140 = &v70[v138];
        v222 = v61;
        v224(&v69[v138], &v70[v138], v61);
        v141 = (int *)type metadata accessor for ConditionViewModel(0);
        v142 = v141[5];
        v143 = &v139[v142];
        v144 = &v140[v142];
        v145 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
        v146 = v141[6];
        v147 = &v139[v146];
        v148 = &v140[v146];
        v149 = *((_QWORD *)v148 + 1);
        *(_QWORD *)v147 = *(_QWORD *)v148;
        *((_QWORD *)v147 + 1) = v149;
        v150 = v141[7];
        v151 = &v139[v150];
        v152 = &v140[v150];
        v153 = *((_QWORD *)v152 + 1);
        *(_QWORD *)v151 = *(_QWORD *)v152;
        *((_QWORD *)v151 + 1) = v153;
        v139[v141[8]] = v140[v141[8]];
        v139[v141[9]] = v140[v141[9]];
        v139[v141[10]] = v140[v141[10]];
        *(_QWORD *)&v69[v71[13]] = *(_QWORD *)&v70[v71[13]];
        v154 = v71[14];
        v155 = &v69[v154];
        v156 = &v70[v154];
        v157 = type metadata accessor for CloudAltitudeKind(0);
        v158 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 16);
        swift_bridgeObjectRetain(v149);
        swift_bridgeObjectRetain(v153);
        v158(v155, v156, v157);
        v159 = v71[15];
        v160 = &v69[v159];
        v161 = &v70[v159];
        v162 = v230;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v70[v159], 1, v230))
        {
          v163 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v229)(v160, v161, v230);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v160, 0, 1, v230);
        }
        v30 = v232;
        v28 = v233;
        v164 = v71[16];
        v165 = &v69[v164];
        v166 = &v70[v164];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v70[v164], 1, v230))
        {
          v167 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v229)(v165, v166, v230);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v165, 0, 1, v230);
        }
        v168 = v71[17];
        v169 = &v69[v168];
        v170 = &v70[v168];
        v171 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v171 - 8) + 16))(v169, v170, v171);
        v172 = v71[18];
        v173 = &v69[v172];
        v174 = &v70[v172];
        v175 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v175 - 8) + 16))(v173, v174, v175);
        *(_QWORD *)&v69[v71[19]] = *(_QWORD *)&v70[v71[19]];
        v176 = v71[20];
        v177 = &v69[v176];
        v178 = &v70[v176];
        v179 = *((_QWORD *)v178 + 1);
        if (v179)
        {
          *(_QWORD *)v177 = *(_QWORD *)v178;
          *((_QWORD *)v177 + 1) = v179;
          v180 = *((_QWORD *)v178 + 2);
          v181 = *((_QWORD *)v178 + 3);
          v182 = v178[32];
          swift_bridgeObjectRetain(v179);
          sub_100006E58(v180, v181, v182);
          *((_QWORD *)v177 + 2) = v180;
          *((_QWORD *)v177 + 3) = v181;
          v177[32] = v182;
          v162 = v230;
        }
        else
        {
          v183 = *((_OWORD *)v178 + 1);
          *(_OWORD *)v177 = *(_OWORD *)v178;
          *((_OWORD *)v177 + 1) = v183;
          v177[32] = v178[32];
        }
        v184 = v225[7];
        v185 = *(_QWORD *)&v31[v184];
        *(_QWORD *)&v232[v184] = v185;
        v186 = v225[8];
        v187 = *(_QWORD *)&v31[v186];
        *(_QWORD *)&v232[v186] = v187;
        v188 = v225[9];
        v189 = &v232[v188];
        v190 = &v31[v188];
        v191 = (int *)type metadata accessor for AirQualityViewModel(0);
        swift_bridgeObjectRetain(v185);
        swift_bridgeObjectRetain(v187);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v190, 1, (uint64_t)v191))
        {
          v192 = sub_100005D40(&qword_1001BFA30);
          memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
        }
        else
        {
          v224(v189, v190, v222);
          ((void (*)(char *, char *, uint64_t))v229)(&v189[v191[5]], &v190[v191[5]], v162);
          *(_QWORD *)&v189[v191[6]] = *(_QWORD *)&v190[v191[6]];
          v193 = v191[7];
          v194 = &v189[v193];
          v195 = &v190[v193];
          v196 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v196 - 8) + 16))(v194, v195, v196);
          v197 = v191[8];
          v198 = &v189[v197];
          v199 = &v190[v197];
          v200 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v200 - 8) + 16))(v198, v199, v200);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v189, 0, 1, (uint64_t)v191);
        }
        v201 = v225[10];
        v202 = &v232[v201];
        v203 = &v31[v201];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v203, 1, HourPrecipitationChartViewModel))
        {
          v205 = sub_100005D40(&qword_1001BFA38);
          memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v202, v203, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v202, 0, 1, HourPrecipitationChartViewModel);
        }
        v33 = v227;
        v206 = v225[11];
        v207 = *(_QWORD *)&v31[v206];
        *(_QWORD *)&v232[v206] = v207;
        v208 = v225[12];
        v209 = &v232[v208];
        v210 = &v31[v208];
        *(_QWORD *)v209 = *(_QWORD *)v210;
        *((_WORD *)v209 + 4) = *((_WORD *)v210 + 4);
        v211 = v225[13];
        v212 = &v232[v211];
        v213 = &v31[v211];
        swift_bridgeObjectRetain(v207);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v213, 1, v223))
        {
          v214 = sub_100005D40(&qword_1001BFA28);
          memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v223 - 8) + 16))(v212, v213, v223);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v212, 0, 1, v223);
        }
        v215 = v225[14];
        v216 = &v232[v215];
        v217 = &v31[v215];
        v218 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v217, 1, v218))
        {
          v219 = sub_100005D40(&qword_1001BFA40);
          memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v219 - 8) + 64));
        }
        else
        {
          v220 = swift_getEnumCaseMultiPayload(v217, v218) == 1;
          ((void (*)(char *, char *, uint64_t))v229)(v216, v217, v162);
          swift_storeEnumTagMultiPayload(v216, v218, v220);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v216, 0, 1, v218);
        }
        v32 = v228;
      }
      v35 = v226;
    }
    swift_storeEnumTagMultiPayload(v30, v33, v35);
    swift_storeEnumTagMultiPayload(v30, v32, 1);
  }
  else
  {
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  return v28;
}

uint64_t sub_10003869C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t EnumCaseMultiPayload;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int *v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  int *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  void (*v125)(char *, char *, uint64_t);
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  int *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  void (*v150)(char *, char *, uint64_t);
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  int *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  _BOOL8 v234;
  int *v236;
  void (*v237)(char *, char *, uint64_t);
  uint64_t v238;
  void (*v239)(char *, char *, uint64_t);
  void (*v240)(char *, char *, uint64_t);
  void (*v241)(char *, char *, uint64_t);
  char *v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;

  v247 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v247 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, a2, v247);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for TimelineEntryRelevance(0);
  v11 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v8, 1, v10);
  v12 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v10);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    v14 = sub_100005D40(&qword_1001BFA20);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 24))(v8, v9, v10);
LABEL_7:
  v15 = a3[6];
  v248 = a1;
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)(a2 + v15);
  v18 = *(_QWORD *)(a2 + v15 + 8);
  v19 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  v20 = *(_QWORD *)(v17 + 24);
  v21 = *(_QWORD *)(v16 + 24);
  *(_QWORD *)(v16 + 24) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
  v22 = *(_QWORD *)(v17 + 40);
  v23 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v16 + 40) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(v16 + 48) = *(_BYTE *)(v17 + 48);
  *(_BYTE *)(v16 + 49) = *(_BYTE *)(v17 + 49);
  *(_BYTE *)(v16 + 50) = *(_BYTE *)(v17 + 50);
  *(_BYTE *)(v16 + 51) = *(_BYTE *)(v17 + 51);
  v24 = type metadata accessor for WidgetContext(0);
  v25 = *(int *)(v24 + 40);
  v26 = (void *)(v16 + v25);
  v27 = (const void *)(v17 + v25);
  v28 = type metadata accessor for URL(0);
  v29 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v28);
  v30 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v27, 1, v28);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v31 = *(_QWORD *)(v28 - 8);
  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v31 + 8))(v26, v28);
LABEL_12:
    v32 = sub_100005D40(&qword_1001BFA28);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v31 + 24))(v26, v27, v28);
LABEL_13:
  v33 = *(int *)(v24 + 44);
  v34 = (uint64_t *)(v16 + v33);
  v35 = (uint64_t *)(v17 + v33);
  v36 = *v35;
  v37 = *v34;
  *v34 = *v35;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *((_BYTE *)v34 + 8) = *((_BYTE *)v35 + 8);
  v38 = v248;
  if (v248 != a2)
  {
    v39 = a3[7];
    v40 = (char *)(v248 + v39);
    v41 = (char *)(a2 + v39);
    sub_10003B50C(v248 + v39, (void (*)(_QWORD))type metadata accessor for ForecastEntry.Model);
    v42 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
    {
      v43 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v41, v43);
      v45 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v71 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v40, v41, v71);
      }
      else
      {
        v245 = v42;
        v246 = v40;
        v244 = v43;
        v243 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v46 = type metadata accessor for UUID(0);
          v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16);
          v47(v40, v41, v46);
          v48 = type metadata accessor for InstantWeatherViewModel(0);
          v49 = *(int *)(v48 + 20);
          v50 = &v40[v49];
          v51 = &v41[v49];
          v52 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
          v53 = *(int *)(v48 + 24);
          v54 = &v40[v53];
          v55 = &v41[v53];
          v241 = v47;
          v47(&v40[v53], v55, v46);
          v56 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v57 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
          v57(&v54[v56[5]], &v55[v56[5]], v247);
          v239 = v57;
          v57(&v54[v56[6]], &v55[v56[6]], v247);
          v58 = v56[7];
          v59 = &v54[v58];
          v60 = &v55[v58];
          v61 = sub_100005D40(&qword_1001BF090);
          v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
          v62(v59, v60, v61);
          v62(&v54[v56[8]], &v55[v56[8]], v61);
          v63 = v56[9];
          v64 = &v54[v63];
          v65 = &v55[v63];
          *(_QWORD *)v64 = *(_QWORD *)v65;
          v66 = *((_QWORD *)v65 + 1);
          *((_QWORD *)v64 + 1) = v66;
          v67 = v56[10];
          v68 = &v54[v67];
          v69 = &v55[v67];
          swift_bridgeObjectRetain(v66);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v69, 1, v61))
          {
            v70 = sub_100005D40(&qword_1001BF098);
            memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
          }
          else
          {
            v62(v68, v69, v61);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v68, 0, 1, v61);
          }
          v97 = v56[11];
          v98 = &v54[v97];
          v99 = &v55[v97];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v55[v97], 1, v61))
          {
            v100 = sub_100005D40(&qword_1001BF098);
            memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
          }
          else
          {
            v62(v98, v99, v61);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v98, 0, 1, v61);
          }
          v105 = v56[12];
          v106 = &v54[v105];
          v107 = &v55[v105];
          v241(&v54[v105], &v55[v105], v46);
          v108 = (int *)type metadata accessor for ConditionViewModel(0);
          v109 = v108[5];
          v110 = &v106[v109];
          v111 = &v107[v109];
          v112 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 16))(v110, v111, v112);
          v113 = v108[6];
          v114 = &v106[v113];
          v115 = &v107[v113];
          *(_QWORD *)v114 = *(_QWORD *)v115;
          v116 = *((_QWORD *)v115 + 1);
          *((_QWORD *)v114 + 1) = v116;
          v117 = v108[7];
          v118 = &v106[v117];
          v119 = &v107[v117];
          *(_QWORD *)v118 = *(_QWORD *)v119;
          v120 = *((_QWORD *)v119 + 1);
          *((_QWORD *)v118 + 1) = v120;
          v106[v108[8]] = v107[v108[8]];
          v106[v108[9]] = v107[v108[9]];
          v106[v108[10]] = v107[v108[10]];
          *(_QWORD *)&v54[v56[13]] = *(_QWORD *)&v55[v56[13]];
          v121 = v56[14];
          v122 = &v54[v121];
          v123 = &v55[v121];
          v124 = type metadata accessor for CloudAltitudeKind(0);
          v125 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16);
          swift_bridgeObjectRetain(v116);
          swift_bridgeObjectRetain(v120);
          v125(v122, v123, v124);
          v126 = v56[15];
          v127 = &v54[v126];
          v128 = &v55[v126];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v55[v126], 1, v247))
          {
            v129 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
          }
          else
          {
            v239(v127, v128, v247);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v127, 0, 1, v247);
          }
          v40 = v246;
          v155 = v56[16];
          v156 = &v54[v155];
          v157 = &v55[v155];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v55[v155], 1, v247))
          {
            v158 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
          }
          else
          {
            v239(v156, v157, v247);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v156, 0, 1, v247);
          }
          v163 = v56[17];
          v164 = &v54[v163];
          v165 = &v55[v163];
          v166 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 16))(v164, v165, v166);
          v167 = v56[18];
          v168 = &v54[v167];
          v169 = &v55[v167];
          v170 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 16))(v168, v169, v170);
          *(_QWORD *)&v54[v56[19]] = *(_QWORD *)&v55[v56[19]];
          v171 = v56[20];
          v172 = &v54[v171];
          v173 = &v55[v171];
          if (*((_QWORD *)v173 + 1))
          {
            *(_QWORD *)v172 = *(_QWORD *)v173;
            v174 = *((_QWORD *)v173 + 1);
            *((_QWORD *)v172 + 1) = v174;
            v175 = *((_QWORD *)v173 + 2);
            v176 = *((_QWORD *)v173 + 3);
            v177 = v173[32];
            swift_bridgeObjectRetain(v174);
            sub_100006E58(v175, v176, v177);
            *((_QWORD *)v172 + 2) = v175;
            *((_QWORD *)v172 + 3) = v176;
            v172[32] = v177;
          }
          else
          {
            v193 = *(_OWORD *)v173;
            v194 = *((_OWORD *)v173 + 1);
            v172[32] = v173[32];
            *(_OWORD *)v172 = v193;
            *((_OWORD *)v172 + 1) = v194;
          }
          v38 = v248;
          v42 = v245;
        }
        else
        {
          v72 = type metadata accessor for UUID(0);
          v73 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16);
          v73(v40, v41, v72);
          v74 = type metadata accessor for AggregateWeatherViewModel(0);
          v75 = *(int *)(v74 + 20);
          v76 = &v40[v75];
          v77 = &v41[v75];
          v78 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v76, v77, v78);
          v236 = (int *)v74;
          v237 = v73;
          v79 = *(int *)(v74 + 24);
          v80 = &v40[v79];
          v242 = v41;
          v81 = &v41[v79];
          v238 = v72;
          v73(&v40[v79], v81, v72);
          v82 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v83 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
          v83(&v80[v82[5]], &v81[v82[5]], v247);
          v240 = v83;
          v83(&v80[v82[6]], &v81[v82[6]], v247);
          v84 = v82[7];
          v85 = &v80[v84];
          v86 = &v81[v84];
          v87 = sub_100005D40(&qword_1001BF090);
          v88 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 16);
          v88(v85, v86, v87);
          v88(&v80[v82[8]], &v81[v82[8]], v87);
          v89 = v82[9];
          v90 = &v80[v89];
          v91 = &v81[v89];
          *(_QWORD *)v90 = *(_QWORD *)v91;
          v92 = *((_QWORD *)v91 + 1);
          *((_QWORD *)v90 + 1) = v92;
          v93 = v82[10];
          v94 = &v80[v93];
          v95 = &v81[v93];
          swift_bridgeObjectRetain(v92);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v95, 1, v87))
          {
            v96 = sub_100005D40(&qword_1001BF098);
            memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
          }
          else
          {
            v88(v94, v95, v87);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v94, 0, 1, v87);
          }
          v101 = v82[11];
          v102 = &v80[v101];
          v103 = &v81[v101];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v81[v101], 1, v87))
          {
            v104 = sub_100005D40(&qword_1001BF098);
            memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
          }
          else
          {
            v88(v102, v103, v87);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v102, 0, 1, v87);
          }
          v130 = v82[12];
          v131 = &v80[v130];
          v132 = &v81[v130];
          v237(&v80[v130], &v81[v130], v238);
          v133 = (int *)type metadata accessor for ConditionViewModel(0);
          v134 = v133[5];
          v135 = &v131[v134];
          v136 = &v132[v134];
          v137 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 16))(v135, v136, v137);
          v138 = v133[6];
          v139 = &v131[v138];
          v140 = &v132[v138];
          *(_QWORD *)v139 = *(_QWORD *)v140;
          v141 = *((_QWORD *)v140 + 1);
          *((_QWORD *)v139 + 1) = v141;
          v142 = v133[7];
          v143 = &v131[v142];
          v144 = &v132[v142];
          *(_QWORD *)v143 = *(_QWORD *)v144;
          v145 = *((_QWORD *)v144 + 1);
          *((_QWORD *)v143 + 1) = v145;
          v131[v133[8]] = v132[v133[8]];
          v131[v133[9]] = v132[v133[9]];
          v131[v133[10]] = v132[v133[10]];
          *(_QWORD *)&v80[v82[13]] = *(_QWORD *)&v81[v82[13]];
          v146 = v82[14];
          v147 = &v80[v146];
          v148 = &v81[v146];
          v149 = type metadata accessor for CloudAltitudeKind(0);
          v150 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 16);
          swift_bridgeObjectRetain(v141);
          swift_bridgeObjectRetain(v145);
          v150(v147, v148, v149);
          v151 = v82[15];
          v152 = &v80[v151];
          v153 = &v81[v151];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v81[v151], 1, v247))
          {
            v154 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
          }
          else
          {
            v240(v152, v153, v247);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v152, 0, 1, v247);
          }
          v159 = v82[16];
          v160 = &v80[v159];
          v161 = &v81[v159];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v81[v159], 1, v247))
          {
            v162 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
          }
          else
          {
            v240(v160, v161, v247);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v160, 0, 1, v247);
          }
          v178 = v82[17];
          v179 = &v80[v178];
          v180 = &v81[v178];
          v181 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 16))(v179, v180, v181);
          v182 = v82[18];
          v183 = &v80[v182];
          v184 = &v81[v182];
          v185 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v185 - 8) + 16))(v183, v184, v185);
          *(_QWORD *)&v80[v82[19]] = *(_QWORD *)&v81[v82[19]];
          v186 = v82[20];
          v187 = &v80[v186];
          v188 = &v81[v186];
          if (*((_QWORD *)v188 + 1))
          {
            *(_QWORD *)v187 = *(_QWORD *)v188;
            v189 = *((_QWORD *)v188 + 1);
            *((_QWORD *)v187 + 1) = v189;
            v190 = *((_QWORD *)v188 + 2);
            v191 = *((_QWORD *)v188 + 3);
            v192 = v188[32];
            swift_bridgeObjectRetain(v189);
            sub_100006E58(v190, v191, v192);
            *((_QWORD *)v187 + 2) = v190;
            *((_QWORD *)v187 + 3) = v191;
            v187[32] = v192;
          }
          else
          {
            v195 = *(_OWORD *)v188;
            v196 = *((_OWORD *)v188 + 1);
            v187[32] = v188[32];
            *(_OWORD *)v187 = v195;
            *((_OWORD *)v187 + 1) = v196;
          }
          v40 = v246;
          v197 = v236[7];
          v198 = *(_QWORD *)&v242[v197];
          *(_QWORD *)&v246[v197] = v198;
          v199 = v236[8];
          v200 = *(_QWORD *)&v242[v199];
          *(_QWORD *)&v246[v199] = v200;
          v201 = v236[9];
          v202 = &v246[v201];
          v203 = &v242[v201];
          v204 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v198);
          swift_bridgeObjectRetain(v200);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v203, 1, (uint64_t)v204))
          {
            v205 = sub_100005D40(&qword_1001BFA30);
            memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
          }
          else
          {
            v237(v202, v203, v238);
            v240(&v202[v204[5]], &v203[v204[5]], v247);
            *(_QWORD *)&v202[v204[6]] = *(_QWORD *)&v203[v204[6]];
            v206 = v204[7];
            v207 = &v202[v206];
            v208 = &v203[v206];
            v209 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v209 - 8) + 16))(v207, v208, v209);
            v210 = v204[8];
            v211 = &v202[v210];
            v212 = &v203[v210];
            v213 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v213 - 8) + 16))(v211, v212, v213);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v202, 0, 1, (uint64_t)v204);
          }
          v214 = v236[10];
          v215 = &v246[v214];
          v216 = &v242[v214];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          v38 = v248;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v216, 1, HourPrecipitationChartViewModel))
          {
            v218 = sub_100005D40(&qword_1001BFA38);
            memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v215, v216, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v215, 0, 1, HourPrecipitationChartViewModel);
          }
          v42 = v245;
          v219 = v236[11];
          v220 = *(_QWORD *)&v242[v219];
          *(_QWORD *)&v246[v219] = v220;
          v221 = v236[12];
          v222 = &v246[v221];
          v223 = &v242[v221];
          v224 = *(_QWORD *)v223;
          *((_WORD *)v222 + 4) = *((_WORD *)v223 + 4);
          *(_QWORD *)v222 = v224;
          v225 = v236[13];
          v226 = &v246[v225];
          v227 = &v242[v225];
          swift_bridgeObjectRetain(v220);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v227, 1, v28))
          {
            v228 = sub_100005D40(&qword_1001BFA28);
            memcpy(v226, v227, *(_QWORD *)(*(_QWORD *)(v228 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v226, v227, v28);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v226, 0, 1, v28);
          }
          v229 = v236[14];
          v230 = &v246[v229];
          v231 = &v242[v229];
          v232 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v231, 1, v232))
          {
            v233 = sub_100005D40(&qword_1001BFA40);
            memcpy(v230, v231, *(_QWORD *)(*(_QWORD *)(v233 - 8) + 64));
          }
          else
          {
            v234 = swift_getEnumCaseMultiPayload(v231, v232) == 1;
            v240(v230, v231, v247);
            swift_storeEnumTagMultiPayload(v230, v232, v234);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v230, 0, 1, v232);
          }
        }
        v43 = v244;
        v45 = v243;
      }
      swift_storeEnumTagMultiPayload(v40, v43, v45);
      swift_storeEnumTagMultiPayload(v40, v42, 1);
    }
    else
    {
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
  }
  return v38;
}

uint64_t sub_100039658(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  int *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  __int128 v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  __int128 v149;
  int *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  int *v154;
  uint64_t v155;
  void (*v156)(char *, char *, uint64_t);
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  _BOOL8 v184;
  void (*v186)(char *, char *, uint64_t);
  uint64_t v187;
  int *v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  void (*v194)(uint64_t, uint64_t);
  uint64_t v195;

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v195 = v6;
  v7(a1, a2);
  v8 = a3[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for TimelineEntryRelevance(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
  {
    v12 = sub_100005D40(&qword_1001BFA20);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
  }
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_OWORD *)(a2 + v13 + 16);
  *(_OWORD *)v14 = *(_OWORD *)(a2 + v13);
  *(_OWORD *)(v14 + 16) = v16;
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(a2 + v13 + 32);
  *(_DWORD *)(v14 + 48) = *(_DWORD *)(a2 + v13 + 48);
  v17 = type metadata accessor for WidgetContext(0);
  v18 = *(int *)(v17 + 40);
  v19 = (void *)(v14 + v18);
  v20 = (const void *)(v15 + v18);
  v21 = type metadata accessor for URL(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v20, 1, v21))
  {
    v22 = sub_100005D40(&qword_1001BFA28);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v19, 0, 1, v21);
  }
  v23 = *(int *)(v17 + 44);
  v24 = v14 + v23;
  v25 = v15 + v23;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  v26 = a3[7];
  v27 = (char *)(a1 + v26);
  v28 = (char *)(a2 + v26);
  v29 = type metadata accessor for ForecastEntry.Model(0);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v30);
    v32 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v55 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v27, v28, v55);
    }
    else
    {
      v193 = v27;
      v194 = v7;
      v191 = v29;
      v192 = a1;
      v190 = v30;
      v189 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v33 = type metadata accessor for UUID(0);
        v34 = (void (*)(char *, char *, uint64_t))v7;
        v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
        v35(v27, v28, v33);
        v36 = type metadata accessor for InstantWeatherViewModel(0);
        v37 = *(int *)(v36 + 20);
        v38 = v27;
        v39 = &v27[v37];
        v40 = &v28[v37];
        v41 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
        v42 = *(int *)(v36 + 24);
        v43 = &v38[v42];
        v44 = &v28[v42];
        v35(v43, &v28[v42], v33);
        v45 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v34(&v43[v45[5]], &v44[v45[5]], v195);
        v34(&v43[v45[6]], &v44[v45[6]], v195);
        v46 = v45[7];
        v47 = &v43[v46];
        v48 = &v44[v46];
        v49 = sub_100005D40(&qword_1001BF090);
        v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32);
        v50(v47, v48, v49);
        v50(&v43[v45[8]], &v44[v45[8]], v49);
        *(_OWORD *)&v43[v45[9]] = *(_OWORD *)&v44[v45[9]];
        v51 = v45[10];
        v52 = &v43[v51];
        v53 = &v44[v51];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v44[v51], 1, v49))
        {
          v54 = sub_100005D40(&qword_1001BF098);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        }
        else
        {
          v50(v52, v53, v49);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v52, 0, 1, v49);
        }
        v77 = v45[11];
        v78 = &v43[v77];
        v79 = &v44[v77];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v44[v77], 1, v49))
        {
          v80 = sub_100005D40(&qword_1001BF098);
          memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
        }
        else
        {
          v50(v78, v79, v49);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v78, 0, 1, v49);
        }
        v81 = v45[12];
        v82 = &v43[v81];
        v83 = &v44[v81];
        v35(&v43[v81], &v44[v81], v33);
        v84 = (int *)type metadata accessor for ConditionViewModel(0);
        v85 = v84[5];
        v86 = &v82[v85];
        v87 = &v83[v85];
        v88 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v86, v87, v88);
        *(_OWORD *)&v82[v84[6]] = *(_OWORD *)&v83[v84[6]];
        *(_OWORD *)&v82[v84[7]] = *(_OWORD *)&v83[v84[7]];
        v82[v84[8]] = v83[v84[8]];
        v82[v84[9]] = v83[v84[9]];
        v82[v84[10]] = v83[v84[10]];
        *(_QWORD *)&v43[v45[13]] = *(_QWORD *)&v44[v45[13]];
        v89 = v45[14];
        v90 = &v43[v89];
        v91 = &v44[v89];
        v92 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32))(v90, v91, v92);
        v93 = v45[15];
        v94 = &v43[v93];
        v95 = &v44[v93];
        a1 = v192;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v44[v93], 1, v195))
        {
          v96 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
          v97 = (void (*)(char *, char *, uint64_t))v194;
        }
        else
        {
          v97 = (void (*)(char *, char *, uint64_t))v194;
          ((void (*)(char *, char *, uint64_t))v194)(v94, v95, v195);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v94, 0, 1, v195);
        }
        v98 = v45[16];
        v99 = &v43[v98];
        v100 = &v44[v98];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v44[v98], 1, v195))
        {
          v101 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
        }
        else
        {
          v97(v99, v100, v195);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v195);
        }
        v29 = v191;
        v102 = v45[17];
        v103 = &v43[v102];
        v104 = &v44[v102];
        v105 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 32))(v103, v104, v105);
        v106 = v45[18];
        v107 = &v43[v106];
        v108 = &v44[v106];
        v109 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 32))(v107, v108, v109);
        *(_QWORD *)&v43[v45[19]] = *(_QWORD *)&v44[v45[19]];
        v110 = v45[20];
        v111 = &v43[v110];
        v112 = &v44[v110];
        v111[32] = v112[32];
        v113 = *((_OWORD *)v112 + 1);
        *(_OWORD *)v111 = *(_OWORD *)v112;
        *((_OWORD *)v111 + 1) = v113;
        v27 = v193;
      }
      else
      {
        v56 = type metadata accessor for UUID(0);
        v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32);
        v57(v27, v28, v56);
        v58 = type metadata accessor for AggregateWeatherViewModel(0);
        v59 = *(int *)(v58 + 20);
        v60 = v27;
        v61 = &v27[v59];
        v62 = &v28[v59];
        v63 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v61, v62, v63);
        v187 = v56;
        v188 = (int *)v58;
        v64 = *(int *)(v58 + 24);
        v65 = &v60[v64];
        v66 = &v28[v64];
        v186 = v57;
        v57(&v60[v64], &v28[v64], v56);
        v67 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        ((void (*)(char *, char *, uint64_t))v194)(&v65[v67[5]], &v66[v67[5]], v195);
        ((void (*)(char *, char *, uint64_t))v194)(&v65[v67[6]], &v66[v67[6]], v195);
        v68 = v67[7];
        v69 = &v65[v68];
        v70 = &v66[v68];
        v71 = sub_100005D40(&qword_1001BF090);
        v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 32);
        v72(v69, v70, v71);
        v72(&v65[v67[8]], &v66[v67[8]], v71);
        *(_OWORD *)&v65[v67[9]] = *(_OWORD *)&v66[v67[9]];
        v73 = v67[10];
        v74 = &v65[v73];
        v75 = &v66[v73];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v66[v73], 1, v71))
        {
          v76 = sub_100005D40(&qword_1001BF098);
          memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
        }
        else
        {
          v72(v74, v75, v71);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v74, 0, 1, v71);
        }
        v114 = v67[11];
        v115 = &v65[v114];
        v116 = &v66[v114];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v66[v114], 1, v71))
        {
          v117 = sub_100005D40(&qword_1001BF098);
          memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
        }
        else
        {
          v72(v115, v116, v71);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v71);
        }
        v118 = v67[12];
        v119 = &v65[v118];
        v120 = &v66[v118];
        v186(&v65[v118], &v66[v118], v187);
        v121 = (int *)type metadata accessor for ConditionViewModel(0);
        v122 = v121[5];
        v123 = &v119[v122];
        v124 = &v120[v122];
        v125 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v123, v124, v125);
        *(_OWORD *)&v119[v121[6]] = *(_OWORD *)&v120[v121[6]];
        *(_OWORD *)&v119[v121[7]] = *(_OWORD *)&v120[v121[7]];
        v119[v121[8]] = v120[v121[8]];
        v119[v121[9]] = v120[v121[9]];
        v119[v121[10]] = v120[v121[10]];
        *(_QWORD *)&v65[v67[13]] = *(_QWORD *)&v66[v67[13]];
        v126 = v67[14];
        v127 = &v65[v126];
        v128 = &v66[v126];
        v129 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 32))(v127, v128, v129);
        v130 = v67[15];
        v131 = &v65[v130];
        v132 = &v66[v130];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v66[v130], 1, v195))
        {
          v133 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v194)(v131, v132, v195);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v131, 0, 1, v195);
        }
        a1 = v192;
        v134 = v67[16];
        v135 = &v65[v134];
        v136 = &v66[v134];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v66[v134], 1, v195))
        {
          v137 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v194)(v135, v136, v195);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v135, 0, 1, v195);
        }
        v138 = v67[17];
        v139 = &v65[v138];
        v140 = &v66[v138];
        v141 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 32))(v139, v140, v141);
        v142 = v67[18];
        v143 = &v65[v142];
        v144 = &v66[v142];
        v145 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
        *(_QWORD *)&v65[v67[19]] = *(_QWORD *)&v66[v67[19]];
        v146 = v67[20];
        v147 = &v65[v146];
        v148 = &v66[v146];
        v147[32] = v148[32];
        v149 = *((_OWORD *)v148 + 1);
        *(_OWORD *)v147 = *(_OWORD *)v148;
        *((_OWORD *)v147 + 1) = v149;
        v150 = v188;
        v27 = v193;
        *(_QWORD *)&v193[v188[7]] = *(_QWORD *)&v28[v188[7]];
        *(_QWORD *)&v193[v188[8]] = *(_QWORD *)&v28[v188[8]];
        v151 = v188[9];
        v152 = &v193[v151];
        v153 = &v28[v151];
        v154 = (int *)type metadata accessor for AirQualityViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v153, 1, (uint64_t)v154))
        {
          v155 = sub_100005D40(&qword_1001BFA30);
          memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
          v156 = (void (*)(char *, char *, uint64_t))v194;
        }
        else
        {
          v186(v152, v153, v187);
          v156 = (void (*)(char *, char *, uint64_t))v194;
          ((void (*)(char *, char *, uint64_t))v194)(&v152[v154[5]], &v153[v154[5]], v195);
          *(_QWORD *)&v152[v154[6]] = *(_QWORD *)&v153[v154[6]];
          v157 = v154[7];
          v158 = &v152[v157];
          v159 = &v153[v157];
          v160 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 32))(v158, v159, v160);
          v161 = v154[8];
          v162 = &v152[v161];
          v163 = &v153[v161];
          v164 = type metadata accessor for AirQualityScaleCategory(0);
          v165 = v162;
          v150 = v188;
          v166 = v163;
          v27 = v193;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v165, v166, v164);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v152, 0, 1, (uint64_t)v154);
        }
        v167 = v150[10];
        v168 = &v27[v167];
        v169 = &v28[v167];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v169, 1, HourPrecipitationChartViewModel))
        {
          v171 = sub_100005D40(&qword_1001BFA38);
          memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v168, v169, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v168, 0, 1, HourPrecipitationChartViewModel);
        }
        *(_QWORD *)&v27[v150[11]] = *(_QWORD *)&v28[v150[11]];
        v172 = v150[12];
        v173 = &v27[v172];
        v174 = &v28[v172];
        *(_QWORD *)v173 = *(_QWORD *)v174;
        *((_WORD *)v173 + 4) = *((_WORD *)v174 + 4);
        v175 = v150[13];
        v176 = &v27[v175];
        v177 = &v28[v175];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v28[v175], 1, v21))
        {
          v178 = sub_100005D40(&qword_1001BFA28);
          memcpy(v176, v177, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v176, v177, v21);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v176, 0, 1, v21);
        }
        v179 = v150[14];
        v180 = &v27[v179];
        v181 = &v28[v179];
        v182 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v181, 1, v182))
        {
          v183 = sub_100005D40(&qword_1001BFA40);
          memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
        }
        else
        {
          v184 = swift_getEnumCaseMultiPayload(v181, v182) == 1;
          v156(v180, v181, v195);
          swift_storeEnumTagMultiPayload(v180, v182, v184);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v180, 0, 1, v182);
        }
        v29 = v191;
      }
      v30 = v190;
      v32 = v189;
    }
    swift_storeEnumTagMultiPayload(v27, v30, v32);
    swift_storeEnumTagMultiPayload(v27, v29, 1);
  }
  else
  {
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10003A3C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t EnumCaseMultiPayload;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int *v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int *v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  int *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  int *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  __int128 v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  __int128 v160;
  int *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  int *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  _BOOL8 v193;
  uint64_t v195;
  char *v196;
  void (*v197)(char *, char *, uint64_t);
  void (*v198)(char *, char *, uint64_t);
  int *v199;
  void (*v200)(char *, char *, uint64_t);
  void (*v201)(char *, char *, uint64_t);
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v206 = v6;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(a1, a2);
  v8 = a3[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for TimelineEntryRelevance(0);
  v12 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v11);
  v13 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v14 = *(_QWORD *)(v11 - 8);
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
LABEL_6:
    v15 = sub_100005D40(&qword_1001BFA20);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v14 + 40))(v9, v10, v11);
LABEL_7:
  v16 = a3[6];
  v207 = a1;
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a2 + v16 + 8);
  v20 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(v18 + 24);
  v22 = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
  *(_QWORD *)(v17 + 24) = v21;
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(v18 + 40);
  v24 = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
  *(_QWORD *)(v17 + 40) = v23;
  swift_bridgeObjectRelease(v24);
  *(_WORD *)(v17 + 48) = *(_WORD *)(v18 + 48);
  *(_BYTE *)(v17 + 50) = *(_BYTE *)(v18 + 50);
  *(_BYTE *)(v17 + 51) = *(_BYTE *)(v18 + 51);
  v25 = type metadata accessor for WidgetContext(0);
  v26 = *(int *)(v25 + 40);
  v27 = (void *)(v17 + v26);
  v28 = (const void *)(v18 + v26);
  v29 = type metadata accessor for URL(0);
  v30 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v27, 1, v29);
  v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v28, 1, v29);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v29);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v32 = *(_QWORD *)(v29 - 8);
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v32 + 8))(v27, v29);
LABEL_12:
    v33 = sub_100005D40(&qword_1001BFA28);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v32 + 40))(v27, v28, v29);
LABEL_13:
  v34 = *(int *)(v25 + 44);
  v35 = (uint64_t *)(v17 + v34);
  v36 = (uint64_t *)(v18 + v34);
  v37 = *v35;
  *v35 = *v36;
  swift_bridgeObjectRelease(v37);
  *((_BYTE *)v35 + 8) = *((_BYTE *)v36 + 8);
  v38 = v207;
  if (v207 != a2)
  {
    v39 = a3[7];
    v40 = (char *)(v207 + v39);
    v41 = (char *)(a2 + v39);
    sub_10003B50C(v207 + v39, (void (*)(_QWORD))type metadata accessor for ForecastEntry.Model);
    v42 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
    {
      v43 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v41, v43);
      v45 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v67 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v40, v41, v67);
      }
      else
      {
        v204 = v42;
        v205 = v40;
        v203 = v43;
        v202 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v46 = type metadata accessor for UUID(0);
          v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32);
          v47(v40, v41, v46);
          v48 = type metadata accessor for InstantWeatherViewModel(0);
          v49 = *(int *)(v48 + 20);
          v50 = &v40[v49];
          v51 = &v41[v49];
          v52 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
          v53 = *(int *)(v48 + 24);
          v54 = &v40[v53];
          v55 = &v41[v53];
          v200 = v47;
          v47(&v40[v53], v55, v46);
          v56 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v57 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
          v57(&v54[v56[5]], &v55[v56[5]], v206);
          v198 = v57;
          v57(&v54[v56[6]], &v55[v56[6]], v206);
          v58 = v56[7];
          v59 = &v54[v58];
          v60 = &v55[v58];
          v61 = sub_100005D40(&qword_1001BF090);
          v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32);
          v62(v59, v60, v61);
          v62(&v54[v56[8]], &v55[v56[8]], v61);
          *(_OWORD *)&v54[v56[9]] = *(_OWORD *)&v55[v56[9]];
          v63 = v56[10];
          v64 = &v54[v63];
          v65 = &v55[v63];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v55[v63], 1, v61))
          {
            v66 = sub_100005D40(&qword_1001BF098);
            memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
          }
          else
          {
            v62(v64, v65, v61);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v61);
          }
          v89 = v56[11];
          v90 = &v54[v89];
          v91 = &v55[v89];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v55[v89], 1, v61))
          {
            v92 = sub_100005D40(&qword_1001BF098);
            memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
          }
          else
          {
            v62(v90, v91, v61);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v90, 0, 1, v61);
          }
          v97 = v56[12];
          v98 = &v54[v97];
          v99 = &v55[v97];
          v200(&v54[v97], &v55[v97], v46);
          v100 = (int *)type metadata accessor for ConditionViewModel(0);
          v101 = v100[5];
          v102 = &v98[v101];
          v103 = &v99[v101];
          v104 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 32))(v102, v103, v104);
          *(_OWORD *)&v98[v100[6]] = *(_OWORD *)&v99[v100[6]];
          *(_OWORD *)&v98[v100[7]] = *(_OWORD *)&v99[v100[7]];
          v98[v100[8]] = v99[v100[8]];
          v98[v100[9]] = v99[v100[9]];
          v98[v100[10]] = v99[v100[10]];
          *(_QWORD *)&v54[v56[13]] = *(_QWORD *)&v55[v56[13]];
          v105 = v56[14];
          v106 = &v54[v105];
          v107 = &v55[v105];
          v108 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 32))(v106, v107, v108);
          v109 = v56[15];
          v110 = &v54[v109];
          v111 = &v55[v109];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v55[v109], 1, v206))
          {
            v112 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
          }
          else
          {
            v198(v110, v111, v206);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v110, 0, 1, v206);
          }
          v40 = v205;
          v129 = v56[16];
          v130 = &v54[v129];
          v131 = &v55[v129];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v55[v129], 1, v206))
          {
            v132 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
          }
          else
          {
            v198(v130, v131, v206);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v130, 0, 1, v206);
          }
          v137 = v56[17];
          v138 = &v54[v137];
          v139 = &v55[v137];
          v140 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 32))(v138, v139, v140);
          v141 = v56[18];
          v142 = &v54[v141];
          v143 = &v55[v141];
          v144 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 32))(v142, v143, v144);
          *(_QWORD *)&v54[v56[19]] = *(_QWORD *)&v55[v56[19]];
          v145 = v56[20];
          v146 = &v54[v145];
          v147 = &v55[v145];
          v146[32] = v147[32];
          v148 = *((_OWORD *)v147 + 1);
          *(_OWORD *)v146 = *(_OWORD *)v147;
          *((_OWORD *)v146 + 1) = v148;
          v38 = v207;
          v42 = v204;
        }
        else
        {
          v68 = type metadata accessor for UUID(0);
          v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32);
          v69(v40, v41, v68);
          v70 = type metadata accessor for AggregateWeatherViewModel(0);
          v71 = *(int *)(v70 + 20);
          v72 = &v40[v71];
          v73 = &v41[v71];
          v74 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
          v197 = v69;
          v199 = (int *)v70;
          v75 = *(int *)(v70 + 24);
          v76 = &v40[v75];
          v196 = v41;
          v77 = &v41[v75];
          v69(&v40[v75], v77, v68);
          v78 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v79 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
          v79(&v76[v78[5]], &v77[v78[5]], v206);
          v201 = v79;
          v79(&v76[v78[6]], &v77[v78[6]], v206);
          v80 = v78[7];
          v81 = &v76[v80];
          v82 = &v77[v80];
          v83 = sub_100005D40(&qword_1001BF090);
          v84 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32);
          v84(v81, v82, v83);
          v84(&v76[v78[8]], &v77[v78[8]], v83);
          *(_OWORD *)&v76[v78[9]] = *(_OWORD *)&v77[v78[9]];
          v85 = v78[10];
          v86 = &v76[v85];
          v87 = &v77[v85];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v77[v85], 1, v83))
          {
            v88 = sub_100005D40(&qword_1001BF098);
            memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
          }
          else
          {
            v84(v86, v87, v83);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v86, 0, 1, v83);
          }
          v93 = v78[11];
          v94 = &v76[v93];
          v95 = &v77[v93];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v77[v93], 1, v83))
          {
            v96 = sub_100005D40(&qword_1001BF098);
            memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
          }
          else
          {
            v84(v94, v95, v83);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v94, 0, 1, v83);
          }
          v113 = v78[12];
          v114 = &v76[v113];
          v115 = &v77[v113];
          v195 = v68;
          v197(&v76[v113], &v77[v113], v68);
          v116 = (int *)type metadata accessor for ConditionViewModel(0);
          v117 = v116[5];
          v118 = &v114[v117];
          v119 = &v115[v117];
          v120 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 32))(v118, v119, v120);
          *(_OWORD *)&v114[v116[6]] = *(_OWORD *)&v115[v116[6]];
          *(_OWORD *)&v114[v116[7]] = *(_OWORD *)&v115[v116[7]];
          v114[v116[8]] = v115[v116[8]];
          v114[v116[9]] = v115[v116[9]];
          v114[v116[10]] = v115[v116[10]];
          *(_QWORD *)&v76[v78[13]] = *(_QWORD *)&v77[v78[13]];
          v121 = v78[14];
          v122 = &v76[v121];
          v123 = &v77[v121];
          v124 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 32))(v122, v123, v124);
          v125 = v78[15];
          v126 = &v76[v125];
          v127 = &v77[v125];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v77[v125], 1, v206))
          {
            v128 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
          }
          else
          {
            v201(v126, v127, v206);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v126, 0, 1, v206);
          }
          v133 = v78[16];
          v134 = &v76[v133];
          v135 = &v77[v133];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v77[v133], 1, v206))
          {
            v136 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
          }
          else
          {
            v201(v134, v135, v206);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v134, 0, 1, v206);
          }
          v149 = v78[17];
          v150 = &v76[v149];
          v151 = &v77[v149];
          v152 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 32))(v150, v151, v152);
          v153 = v78[18];
          v154 = &v76[v153];
          v155 = &v77[v153];
          v156 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v156 - 8) + 32))(v154, v155, v156);
          *(_QWORD *)&v76[v78[19]] = *(_QWORD *)&v77[v78[19]];
          v157 = v78[20];
          v158 = &v76[v157];
          v159 = &v77[v157];
          v158[32] = v159[32];
          v160 = *((_OWORD *)v159 + 1);
          *(_OWORD *)v158 = *(_OWORD *)v159;
          *((_OWORD *)v158 + 1) = v160;
          v161 = v199;
          v40 = v205;
          *(_QWORD *)&v205[v199[7]] = *(_QWORD *)&v196[v199[7]];
          *(_QWORD *)&v205[v199[8]] = *(_QWORD *)&v196[v199[8]];
          v162 = v199[9];
          v163 = &v205[v162];
          v164 = &v196[v162];
          v165 = (int *)type metadata accessor for AirQualityViewModel(0);
          v42 = v204;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v164, 1, (uint64_t)v165))
          {
            v166 = sub_100005D40(&qword_1001BFA30);
            memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
          }
          else
          {
            v197(v163, v164, v195);
            v201(&v163[v165[5]], &v164[v165[5]], v206);
            *(_QWORD *)&v163[v165[6]] = *(_QWORD *)&v164[v165[6]];
            v167 = v165[7];
            v168 = &v163[v167];
            v169 = &v164[v167];
            v170 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 32))(v168, v169, v170);
            v171 = v165[8];
            v172 = &v163[v171];
            v173 = &v164[v171];
            v174 = type metadata accessor for AirQualityScaleCategory(0);
            v175 = v172;
            v161 = v199;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v174 - 8) + 32))(v175, v173, v174);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v163, 0, 1, (uint64_t)v165);
          }
          v176 = v161[10];
          v177 = &v205[v176];
          v178 = &v196[v176];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          v38 = v207;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v178, 1, HourPrecipitationChartViewModel))
          {
            v180 = sub_100005D40(&qword_1001BFA38);
            memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v180 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v177, v178, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v177, 0, 1, HourPrecipitationChartViewModel);
          }
          *(_QWORD *)&v205[v161[11]] = *(_QWORD *)&v196[v161[11]];
          v181 = v161[12];
          v182 = &v205[v181];
          v183 = &v196[v181];
          *(_QWORD *)v182 = *(_QWORD *)v183;
          *((_WORD *)v182 + 4) = *((_WORD *)v183 + 4);
          v184 = v161[13];
          v185 = &v205[v184];
          v186 = &v196[v184];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v196[v184], 1, v29))
          {
            v187 = sub_100005D40(&qword_1001BFA28);
            memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v185, v186, v29);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v185, 0, 1, v29);
          }
          v188 = v161[14];
          v189 = &v205[v188];
          v190 = &v196[v188];
          v191 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v190, 1, v191))
          {
            v192 = sub_100005D40(&qword_1001BFA40);
            memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
          }
          else
          {
            v193 = swift_getEnumCaseMultiPayload(v190, v191) == 1;
            v201(v189, v190, v206);
            swift_storeEnumTagMultiPayload(v189, v191, v193);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v189, 0, 1, v191);
          }
        }
        v43 = v203;
        v45 = v202;
      }
      swift_storeEnumTagMultiPayload(v40, v43, v45);
      swift_storeEnumTagMultiPayload(v40, v42, 1);
    }
    else
    {
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
  }
  return v38;
}

uint64_t sub_10003B220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003B22C);
}

uint64_t sub_10003B22C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  sub_10003C214();
  sub_10001C6C0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    sub_100005D40(&qword_1001BFA20);
    sub_10001C6C0();
    if (v9)
    {
      v7 = v10;
      v11 = a3[5];
    }
    else
    {
      type metadata accessor for WidgetContext(0);
      sub_10001C6C0();
      if (v12)
      {
        v7 = v13;
        v11 = a3[6];
      }
      else
      {
        v7 = sub_10003C24C();
        v11 = a3[7];
      }
    }
    v8 = v4 + v11;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, v3, v7);
}

uint64_t sub_10003B2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003B2C4);
}

uint64_t sub_10003B2C4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_10003C214();
  sub_10001C6D0();
  if (v10)
  {
    v8 = v7;
    v9 = v5;
  }
  else
  {
    sub_100005D40(&qword_1001BFA20);
    sub_10001C6D0();
    if (v10)
    {
      v8 = v11;
      v12 = a4[5];
    }
    else
    {
      type metadata accessor for WidgetContext(0);
      sub_10001C6D0();
      if (v13)
      {
        v8 = v14;
        v12 = a4[6];
      }
      else
      {
        v8 = sub_10003C24C();
        v12 = a4[7];
      }
    }
    v9 = v5 + v12;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v9, v4, v4, v8);
}

void sub_10003B358(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10003B414(319);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for WidgetContext(319);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for ForecastEntry.Model(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_10003B414(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001BFC78)
  {
    v2 = type metadata accessor for TimelineEntryRelevance(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001BFC78);
  }
}

unint64_t sub_10003B46C()
{
  unint64_t result;

  result = qword_1001BFCB0;
  if (!qword_1001BFCB0)
  {
    result = swift_getWitnessTable(&unk_10017B46C, &type metadata for ForecastEntry.Error);
    atomic_store(result, (unint64_t *)&qword_1001BFCB0);
  }
  return result;
}

#error "10003B4B0: call analysis failed (funcsize=5)"

uint64_t sub_10003B4BC(_QWORD *a1)
{
  return sub_100031240(a1);
}

unint64_t sub_10003B4D0()
{
  unint64_t result;

  result = qword_1001BFCC0;
  if (!qword_1001BFCC0)
  {
    result = swift_getWitnessTable(&unk_10017BC30, &type metadata for ForecastEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFCC0);
  }
  return result;
}

void sub_10003B50C(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v2;
  void (*v3)(uint64_t);

  a2(0);
  v2 = sub_10003C254();
  v3(v2);
  sub_100006338();
}

uint64_t sub_10003B540(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001BFA20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003B580(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001BFA20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10003B5C8()
{
  unint64_t result;

  result = qword_1001BFD20;
  if (!qword_1001BFD20)
  {
    result = swift_getWitnessTable(&unk_10017BBE0, &type metadata for ForecastEntry.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFD20);
  }
  return result;
}

unint64_t sub_10003B604()
{
  unint64_t result;

  result = qword_1001BFD28;
  if (!qword_1001BFD28)
  {
    result = swift_getWitnessTable(&unk_10017BB90, &type metadata for ForecastEntry.Error.NoWeatherDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFD28);
  }
  return result;
}

unint64_t sub_10003B640()
{
  unint64_t result;

  result = qword_1001BFD30;
  if (!qword_1001BFD30)
  {
    result = swift_getWitnessTable(&unk_10017BB40, &type metadata for ForecastEntry.Error.NoLocationDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFD30);
  }
  return result;
}

unint64_t sub_10003B67C()
{
  unint64_t result;

  result = qword_1001BFD38;
  if (!qword_1001BFD38)
  {
    result = swift_getWitnessTable(&unk_10017BAF0, &type metadata for ForecastEntry.Error.LocationPermissionDeniedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFD38);
  }
  return result;
}

unint64_t sub_10003B6B8()
{
  unint64_t result;

  result = qword_1001BFD78;
  if (!qword_1001BFD78)
  {
    result = swift_getWitnessTable(&unk_10017BAA0, &type metadata for ForecastEntry.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFD78);
  }
  return result;
}

unint64_t sub_10003B6F4()
{
  unint64_t result;

  result = qword_1001BFD80;
  if (!qword_1001BFD80)
  {
    result = swift_getWitnessTable(&unk_10017BA50, &type metadata for ForecastEntry.Model.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFD80);
  }
  return result;
}

unint64_t sub_10003B730()
{
  unint64_t result;

  result = qword_1001BFD90;
  if (!qword_1001BFD90)
  {
    result = swift_getWitnessTable(&unk_10017BA00, &type metadata for ForecastEntry.Model.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFD90);
  }
  return result;
}

unint64_t sub_10003B76C()
{
  unint64_t result;

  result = qword_1001BFD98;
  if (!qword_1001BFD98)
  {
    result = swift_getWitnessTable(&unk_10017B404, &type metadata for ForecastEntry.Error);
    atomic_store(result, (unint64_t *)&qword_1001BFD98);
  }
  return result;
}

unint64_t sub_10003B7A8()
{
  unint64_t result;

  result = qword_1001BFDC0;
  if (!qword_1001BFDC0)
  {
    result = swift_getWitnessTable(&unk_10017B3DC, &type metadata for ForecastEntry.Error);
    atomic_store(result, (unint64_t *)&qword_1001BFDC0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ForecastEntry.Model.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003B830 + 4 * byte_10017B2F9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003B864 + 4 * byte_10017B2F4[v4]))();
}

uint64_t sub_10003B864(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B86C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003B874);
  return result;
}

uint64_t sub_10003B880(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003B888);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10003B88C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B894(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ForecastEntry.Model.CodingKeys()
{
  return &type metadata for ForecastEntry.Model.CodingKeys;
}

ValueMetadata *type metadata accessor for ForecastEntry.Model.ErrorCodingKeys()
{
  return &type metadata for ForecastEntry.Model.ErrorCodingKeys;
}

uint64_t _s13WeatherWidget13ForecastEntryV5ModelO15ErrorCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10003B904 + 4 * byte_10017B2FE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10003B924 + 4 * byte_10017B303[v4]))();
}

_BYTE *sub_10003B904(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10003B924(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003B92C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003B934(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003B93C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003B944(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ForecastEntry.Model.DataCodingKeys()
{
  return &type metadata for ForecastEntry.Model.DataCodingKeys;
}

uint64_t getEnumTagSinglePayload for RainInlineContentViewModelFactory.ContentLength(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s13WeatherWidget13ForecastEntryV5ErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10003BA34 + 4 * byte_10017B30D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10003BA68 + 4 * byte_10017B308[v4]))();
}

uint64_t sub_10003BA68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BA70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003BA78);
  return result;
}

uint64_t sub_10003BA84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003BA8CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10003BA90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BA98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ForecastEntry.Error.CodingKeys()
{
  return &type metadata for ForecastEntry.Error.CodingKeys;
}

ValueMetadata *type metadata accessor for ForecastEntry.Error.LocationPermissionDeniedCodingKeys()
{
  return &type metadata for ForecastEntry.Error.LocationPermissionDeniedCodingKeys;
}

ValueMetadata *type metadata accessor for ForecastEntry.Error.NoLocationDataCodingKeys()
{
  return &type metadata for ForecastEntry.Error.NoLocationDataCodingKeys;
}

ValueMetadata *type metadata accessor for ForecastEntry.Error.NoWeatherDataCodingKeys()
{
  return &type metadata for ForecastEntry.Error.NoWeatherDataCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ForecastEntry.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10003BB30 + 4 * byte_10017B317[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10003BB64 + 4 * byte_10017B312[v4]))();
}

uint64_t sub_10003BB64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BB6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003BB74);
  return result;
}

uint64_t sub_10003BB80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003BB88);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10003BB8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BB94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ForecastEntry.CodingKeys()
{
  return &type metadata for ForecastEntry.CodingKeys;
}

unint64_t sub_10003BBB4()
{
  unint64_t result;

  result = qword_1001BFDC8;
  if (!qword_1001BFDC8)
  {
    result = swift_getWitnessTable(&unk_10017B608, &type metadata for ForecastEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFDC8);
  }
  return result;
}

unint64_t sub_10003BBF4()
{
  unint64_t result;

  result = qword_1001BFDD0;
  if (!qword_1001BFDD0)
  {
    result = swift_getWitnessTable(&unk_10017B7B0, &type metadata for ForecastEntry.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFDD0);
  }
  return result;
}

unint64_t sub_10003BC34()
{
  unint64_t result;

  result = qword_1001BFDD8;
  if (!qword_1001BFDD8)
  {
    result = swift_getWitnessTable(&unk_10017B868, &type metadata for ForecastEntry.Model.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFDD8);
  }
  return result;
}

unint64_t sub_10003BC74()
{
  unint64_t result;

  result = qword_1001BFDE0;
  if (!qword_1001BFDE0)
  {
    result = swift_getWitnessTable(&unk_10017B920, &type metadata for ForecastEntry.Model.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFDE0);
  }
  return result;
}

unint64_t sub_10003BCB4()
{
  unint64_t result;

  result = qword_1001BFDE8;
  if (!qword_1001BFDE8)
  {
    result = swift_getWitnessTable(&unk_10017B9D8, &type metadata for ForecastEntry.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFDE8);
  }
  return result;
}

unint64_t sub_10003BCF4()
{
  unint64_t result;

  result = qword_1001BFDF0;
  if (!qword_1001BFDF0)
  {
    result = swift_getWitnessTable(&unk_10017B890, &type metadata for ForecastEntry.Model.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFDF0);
  }
  return result;
}

unint64_t sub_10003BD34()
{
  unint64_t result;

  result = qword_1001BFDF8;
  if (!qword_1001BFDF8)
  {
    result = swift_getWitnessTable(&unk_10017B8B8, &type metadata for ForecastEntry.Model.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFDF8);
  }
  return result;
}

unint64_t sub_10003BD74()
{
  unint64_t result;

  result = qword_1001BFE00;
  if (!qword_1001BFE00)
  {
    result = swift_getWitnessTable(&unk_10017B7D8, &type metadata for ForecastEntry.Model.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE00);
  }
  return result;
}

unint64_t sub_10003BDB4()
{
  unint64_t result;

  result = qword_1001BFE08;
  if (!qword_1001BFE08)
  {
    result = swift_getWitnessTable(&unk_10017B800, &type metadata for ForecastEntry.Model.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE08);
  }
  return result;
}

unint64_t sub_10003BDF4()
{
  unint64_t result;

  result = qword_1001BFE10;
  if (!qword_1001BFE10)
  {
    result = swift_getWitnessTable(&unk_10017B948, &type metadata for ForecastEntry.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE10);
  }
  return result;
}

unint64_t sub_10003BE34()
{
  unint64_t result;

  result = qword_1001BFE18;
  if (!qword_1001BFE18)
  {
    result = swift_getWitnessTable(&unk_10017B970, &type metadata for ForecastEntry.Model.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE18);
  }
  return result;
}

unint64_t sub_10003BE74()
{
  unint64_t result;

  result = qword_1001BFE20;
  if (!qword_1001BFE20)
  {
    result = swift_getWitnessTable(&unk_10017B6D0, &type metadata for ForecastEntry.Error.LocationPermissionDeniedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE20);
  }
  return result;
}

unint64_t sub_10003BEB4()
{
  unint64_t result;

  result = qword_1001BFE28;
  if (!qword_1001BFE28)
  {
    result = swift_getWitnessTable(&unk_10017B6F8, &type metadata for ForecastEntry.Error.LocationPermissionDeniedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE28);
  }
  return result;
}

unint64_t sub_10003BEF4()
{
  unint64_t result;

  result = qword_1001BFE30;
  if (!qword_1001BFE30)
  {
    result = swift_getWitnessTable(&unk_10017B680, &type metadata for ForecastEntry.Error.NoLocationDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE30);
  }
  return result;
}

unint64_t sub_10003BF34()
{
  unint64_t result;

  result = qword_1001BFE38;
  if (!qword_1001BFE38)
  {
    result = swift_getWitnessTable(&unk_10017B6A8, &type metadata for ForecastEntry.Error.NoLocationDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE38);
  }
  return result;
}

unint64_t sub_10003BF74()
{
  unint64_t result;

  result = qword_1001BFE40;
  if (!qword_1001BFE40)
  {
    result = swift_getWitnessTable(&unk_10017B630, &type metadata for ForecastEntry.Error.NoWeatherDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE40);
  }
  return result;
}

unint64_t sub_10003BFB4()
{
  unint64_t result;

  result = qword_1001BFE48;
  if (!qword_1001BFE48)
  {
    result = swift_getWitnessTable(&unk_10017B658, &type metadata for ForecastEntry.Error.NoWeatherDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE48);
  }
  return result;
}

unint64_t sub_10003BFF4()
{
  unint64_t result;

  result = qword_1001BFE50;
  if (!qword_1001BFE50)
  {
    result = swift_getWitnessTable(&unk_10017B720, &type metadata for ForecastEntry.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE50);
  }
  return result;
}

unint64_t sub_10003C034()
{
  unint64_t result;

  result = qword_1001BFE58;
  if (!qword_1001BFE58)
  {
    result = swift_getWitnessTable(&unk_10017B748, &type metadata for ForecastEntry.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE58);
  }
  return result;
}

unint64_t sub_10003C074()
{
  unint64_t result;

  result = qword_1001BFE60;
  if (!qword_1001BFE60)
  {
    result = swift_getWitnessTable(&unk_10017B578, &type metadata for ForecastEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE60);
  }
  return result;
}

unint64_t sub_10003C0B4()
{
  unint64_t result;

  result = qword_1001BFE68;
  if (!qword_1001BFE68)
  {
    result = swift_getWitnessTable(&unk_10017B5A0, &type metadata for ForecastEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001BFE68);
  }
  return result;
}

uint64_t sub_10003C108()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 88) + 8))(*(_QWORD *)(v0 - 104), *(_QWORD *)(v0 - 96));
}

uint64_t sub_10003C118@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

void sub_10003C128(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10003C144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(a1, 0xD00000000000002BLL, (a2 - 32) | 0x8000000000000000, 0);
}

uint64_t sub_10003C17C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_10003C18C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_10003C1A4@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_10003C1C4()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_10003C1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

void sub_10003C1E4(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10003C200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_10003C208@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_10003C214()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_10003C224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_10003C24C()
{
  return type metadata accessor for ForecastEntry.Model(0);
}

uint64_t sub_10003C254()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10003C260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_10003C268()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10003C27C(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0, 0);
}

uint64_t sub_10003C288()
{
  _QWORD *v0;

  return _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(v0);
}

unint64_t sub_10003C290()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_10003B6F4();
}

unint64_t sub_10003C29C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_10003B604();
}

uint64_t *sub_10003C2A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t EnumCaseMultiPayload;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int *v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int *v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  int *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  int *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  void (*v160)(char *, char *, uint64_t);
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  int *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  _BOOL8 v244;
  uint64_t v246;
  char *v247;
  void (*v248)(char *, char *, uint64_t);
  void (*v249)(char *, char *, uint64_t);
  int *v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(char *, char *, uint64_t);
  void (*v256)(char *, char *, uint64_t);
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t *v260;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BFA18);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v254 = *(_QWORD *)(v15 - 8);
  v257 = v15;
  (*(void (**)(char *, char *))(v254 + 24))(v13, v14);
  v16 = type metadata accessor for ForecastEntry(0);
  v17 = *(int *)(v16 + 20);
  v18 = &v13[v17];
  v19 = &v14[v17];
  v20 = type metadata accessor for TimelineEntryRelevance(0);
  v21 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v20);
  v22 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v20);
  v260 = a1;
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v18, 0, 1, v20);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  v23 = *(_QWORD *)(v20 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v20);
LABEL_11:
    v24 = sub_100005D40(&qword_1001BFA20);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v18, v19, v20);
LABEL_12:
  v258 = v16;
  v25 = *(int *)(v16 + 24);
  v26 = &v13[v25];
  v27 = &v14[v25];
  *(_QWORD *)v26 = *(_QWORD *)&v14[v25];
  v28 = *(_QWORD *)&v14[v25 + 8];
  v29 = *(_QWORD *)&v13[v25 + 8];
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
  v30 = *((_QWORD *)v27 + 3);
  v31 = *((_QWORD *)v26 + 3);
  *((_QWORD *)v26 + 3) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
  v32 = *((_QWORD *)v27 + 5);
  v33 = *((_QWORD *)v26 + 5);
  *((_QWORD *)v26 + 5) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v26[48] = v27[48];
  v26[49] = v27[49];
  v26[50] = v27[50];
  v26[51] = v27[51];
  v34 = type metadata accessor for WidgetContext(0);
  v35 = *(int *)(v34 + 40);
  v36 = &v26[v35];
  v37 = &v27[v35];
  v38 = type metadata accessor for URL(0);
  v39 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v36, 1, v38);
  v40 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v37, 1, v38);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v36, 0, 1, v38);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v41 = *(_QWORD *)(v38 - 8);
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v38);
LABEL_17:
    v42 = sub_100005D40(&qword_1001BFA28);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 24))(v36, v37, v38);
LABEL_18:
  v43 = *(int *)(v34 + 44);
  v44 = &v26[v43];
  v45 = &v27[v43];
  v46 = *(_QWORD *)v45;
  v47 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v44[8] = v45[8];
  v48 = v260;
  if (v260 != a2)
  {
    v49 = *(int *)(v258 + 28);
    v50 = &v13[v49];
    v51 = &v14[v49];
    sub_100011894((uint64_t)v50, type metadata accessor for ForecastEntry.Model);
    v52 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v51, v52) == 1)
    {
      v53 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v51, v53);
      v55 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v81 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v50, v51, v81);
      }
      else
      {
        v259 = v50;
        v252 = v53;
        v253 = v52;
        v251 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v56 = type metadata accessor for UUID(0);
          v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
          v57(v50, v51, v56);
          v58 = type metadata accessor for InstantWeatherViewModel(0);
          v59 = *(int *)(v58 + 20);
          v60 = &v50[v59];
          v61 = &v51[v59];
          v62 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
          v63 = *(int *)(v58 + 24);
          v64 = &v50[v63];
          v65 = &v51[v63];
          v249 = v57;
          v57(&v50[v63], v65, v56);
          v66 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v67 = *(void (**)(char *, char *, uint64_t))(v254 + 16);
          v67(&v64[v66[5]], &v65[v66[5]], v257);
          v255 = v67;
          v67(&v64[v66[6]], &v65[v66[6]], v257);
          v68 = v66[7];
          v69 = &v64[v68];
          v70 = &v65[v68];
          v71 = sub_100005D40(&qword_1001BF090);
          v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
          v72(v69, v70, v71);
          v72(&v64[v66[8]], &v65[v66[8]], v71);
          v73 = v66[9];
          v74 = &v64[v73];
          v75 = &v65[v73];
          *(_QWORD *)v74 = *(_QWORD *)v75;
          v76 = *((_QWORD *)v75 + 1);
          *((_QWORD *)v74 + 1) = v76;
          v77 = v66[10];
          v78 = &v64[v77];
          v79 = &v65[v77];
          swift_bridgeObjectRetain(v76);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v79, 1, v71))
          {
            v80 = sub_100005D40(&qword_1001BF098);
            memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
          }
          else
          {
            v72(v78, v79, v71);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v78, 0, 1, v71);
          }
          v107 = v66[11];
          v108 = &v64[v107];
          v109 = &v65[v107];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v107], 1, v71))
          {
            v110 = sub_100005D40(&qword_1001BF098);
            memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
          }
          else
          {
            v72(v108, v109, v71);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v108, 0, 1, v71);
          }
          v50 = v259;
          v115 = v66[12];
          v116 = &v64[v115];
          v117 = &v65[v115];
          v249(&v64[v115], &v65[v115], v56);
          v118 = (int *)type metadata accessor for ConditionViewModel(0);
          v119 = v118[5];
          v120 = &v116[v119];
          v121 = &v117[v119];
          v122 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
          v123 = v118[6];
          v124 = &v116[v123];
          v125 = &v117[v123];
          *(_QWORD *)v124 = *(_QWORD *)v125;
          v126 = *((_QWORD *)v125 + 1);
          *((_QWORD *)v124 + 1) = v126;
          v127 = v118[7];
          v128 = &v116[v127];
          v129 = &v117[v127];
          *(_QWORD *)v128 = *(_QWORD *)v129;
          v130 = *((_QWORD *)v129 + 1);
          *((_QWORD *)v128 + 1) = v130;
          v116[v118[8]] = v117[v118[8]];
          v116[v118[9]] = v117[v118[9]];
          v116[v118[10]] = v117[v118[10]];
          *(_QWORD *)&v64[v66[13]] = *(_QWORD *)&v65[v66[13]];
          v131 = v66[14];
          v132 = &v64[v131];
          v133 = &v65[v131];
          v134 = type metadata accessor for CloudAltitudeKind(0);
          v135 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16);
          swift_bridgeObjectRetain(v126);
          swift_bridgeObjectRetain(v130);
          v135(v132, v133, v134);
          v136 = v66[15];
          v137 = &v64[v136];
          v138 = &v65[v136];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v136], 1, v257))
          {
            v139 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
          }
          else
          {
            v255(v137, v138, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v137, 0, 1, v257);
          }
          v165 = v66[16];
          v166 = &v64[v165];
          v167 = &v65[v165];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v65[v165], 1, v257))
          {
            v168 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
          }
          else
          {
            v255(v166, v167, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v166, 0, 1, v257);
          }
          v173 = v66[17];
          v174 = &v64[v173];
          v175 = &v65[v173];
          v176 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v176 - 8) + 16))(v174, v175, v176);
          v177 = v66[18];
          v178 = &v64[v177];
          v179 = &v65[v177];
          v180 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v180 - 8) + 16))(v178, v179, v180);
          *(_QWORD *)&v64[v66[19]] = *(_QWORD *)&v65[v66[19]];
          v181 = v66[20];
          v182 = &v64[v181];
          v183 = &v65[v181];
          if (*((_QWORD *)v183 + 1))
          {
            *(_QWORD *)v182 = *(_QWORD *)v183;
            v184 = *((_QWORD *)v183 + 1);
            *((_QWORD *)v182 + 1) = v184;
            v185 = *((_QWORD *)v183 + 2);
            v186 = *((_QWORD *)v183 + 3);
            v187 = v183[32];
            swift_bridgeObjectRetain(v184);
            sub_100006E58(v185, v186, v187);
            *((_QWORD *)v182 + 2) = v185;
            *((_QWORD *)v182 + 3) = v186;
            v182[32] = v187;
          }
          else
          {
            v203 = *(_OWORD *)v183;
            v204 = *((_OWORD *)v183 + 1);
            v182[32] = v183[32];
            *(_OWORD *)v182 = v203;
            *((_OWORD *)v182 + 1) = v204;
          }
          v48 = v260;
          v53 = v252;
          v52 = v253;
        }
        else
        {
          v82 = type metadata accessor for UUID(0);
          v83 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16);
          v83(v50, v51, v82);
          v84 = type metadata accessor for AggregateWeatherViewModel(0);
          v85 = *(int *)(v84 + 20);
          v86 = &v50[v85];
          v87 = &v51[v85];
          v88 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v86, v87, v88);
          v248 = v83;
          v250 = (int *)v84;
          v89 = *(int *)(v84 + 24);
          v90 = &v50[v89];
          v247 = v51;
          v91 = &v51[v89];
          v83(&v50[v89], v91, v82);
          v92 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v93 = *(void (**)(char *, char *, uint64_t))(v254 + 16);
          v93(&v90[v92[5]], &v91[v92[5]], v257);
          v256 = v93;
          v93(&v90[v92[6]], &v91[v92[6]], v257);
          v94 = v92[7];
          v95 = &v90[v94];
          v96 = &v91[v94];
          v97 = sub_100005D40(&qword_1001BF090);
          v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
          v98(v95, v96, v97);
          v98(&v90[v92[8]], &v91[v92[8]], v97);
          v99 = v92[9];
          v100 = &v90[v99];
          v101 = &v91[v99];
          *(_QWORD *)v100 = *(_QWORD *)v101;
          v102 = *((_QWORD *)v101 + 1);
          *((_QWORD *)v100 + 1) = v102;
          v103 = v92[10];
          v104 = &v90[v103];
          v105 = &v91[v103];
          swift_bridgeObjectRetain(v102);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v105, 1, v97))
          {
            v106 = sub_100005D40(&qword_1001BF098);
            memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
          }
          else
          {
            v98(v104, v105, v97);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v104, 0, 1, v97);
          }
          v111 = v92[11];
          v112 = &v90[v111];
          v113 = &v91[v111];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v111], 1, v97))
          {
            v114 = sub_100005D40(&qword_1001BF098);
            memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
          }
          else
          {
            v98(v112, v113, v97);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v112, 0, 1, v97);
          }
          v140 = v92[12];
          v141 = &v90[v140];
          v142 = &v91[v140];
          v246 = v82;
          v248(&v90[v140], &v91[v140], v82);
          v143 = (int *)type metadata accessor for ConditionViewModel(0);
          v144 = v143[5];
          v145 = &v141[v144];
          v146 = &v142[v144];
          v147 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 16))(v145, v146, v147);
          v148 = v143[6];
          v149 = &v141[v148];
          v150 = &v142[v148];
          *(_QWORD *)v149 = *(_QWORD *)v150;
          v151 = *((_QWORD *)v150 + 1);
          *((_QWORD *)v149 + 1) = v151;
          v152 = v143[7];
          v153 = &v141[v152];
          v154 = &v142[v152];
          *(_QWORD *)v153 = *(_QWORD *)v154;
          v155 = *((_QWORD *)v154 + 1);
          *((_QWORD *)v153 + 1) = v155;
          v141[v143[8]] = v142[v143[8]];
          v141[v143[9]] = v142[v143[9]];
          v141[v143[10]] = v142[v143[10]];
          *(_QWORD *)&v90[v92[13]] = *(_QWORD *)&v91[v92[13]];
          v156 = v92[14];
          v157 = &v90[v156];
          v158 = &v91[v156];
          v159 = type metadata accessor for CloudAltitudeKind(0);
          v160 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 16);
          swift_bridgeObjectRetain(v151);
          swift_bridgeObjectRetain(v155);
          v160(v157, v158, v159);
          v161 = v92[15];
          v162 = &v90[v161];
          v163 = &v91[v161];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v161], 1, v257))
          {
            v164 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
          }
          else
          {
            v256(v162, v163, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v162, 0, 1, v257);
          }
          v169 = v92[16];
          v170 = &v90[v169];
          v171 = &v91[v169];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v169], 1, v257))
          {
            v172 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
          }
          else
          {
            v256(v170, v171, v257);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v170, 0, 1, v257);
          }
          v188 = v92[17];
          v189 = &v90[v188];
          v190 = &v91[v188];
          v191 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v191 - 8) + 16))(v189, v190, v191);
          v192 = v92[18];
          v193 = &v90[v192];
          v194 = &v91[v192];
          v195 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v193, v194, v195);
          *(_QWORD *)&v90[v92[19]] = *(_QWORD *)&v91[v92[19]];
          v196 = v92[20];
          v197 = &v90[v196];
          v198 = &v91[v196];
          if (*((_QWORD *)v198 + 1))
          {
            *(_QWORD *)v197 = *(_QWORD *)v198;
            v199 = *((_QWORD *)v198 + 1);
            *((_QWORD *)v197 + 1) = v199;
            v200 = *((_QWORD *)v198 + 2);
            v201 = *((_QWORD *)v198 + 3);
            v202 = v198[32];
            swift_bridgeObjectRetain(v199);
            sub_100006E58(v200, v201, v202);
            *((_QWORD *)v197 + 2) = v200;
            *((_QWORD *)v197 + 3) = v201;
            v197[32] = v202;
          }
          else
          {
            v205 = *(_OWORD *)v198;
            v206 = *((_OWORD *)v198 + 1);
            v197[32] = v198[32];
            *(_OWORD *)v197 = v205;
            *((_OWORD *)v197 + 1) = v206;
          }
          v50 = v259;
          v207 = v250[7];
          v208 = *(_QWORD *)&v247[v207];
          *(_QWORD *)&v259[v207] = v208;
          v209 = v250[8];
          v210 = *(_QWORD *)&v247[v209];
          *(_QWORD *)&v259[v209] = v210;
          v211 = v250[9];
          v212 = &v259[v211];
          v213 = &v247[v211];
          v214 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v208);
          swift_bridgeObjectRetain(v210);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v213, 1, (uint64_t)v214))
          {
            v215 = sub_100005D40(&qword_1001BFA30);
            memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64));
          }
          else
          {
            v248(v212, v213, v246);
            v256(&v212[v214[5]], &v213[v214[5]], v257);
            *(_QWORD *)&v212[v214[6]] = *(_QWORD *)&v213[v214[6]];
            v216 = v214[7];
            v217 = &v212[v216];
            v218 = &v213[v216];
            v219 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v219 - 8) + 16))(v217, v218, v219);
            v220 = v214[8];
            v221 = &v212[v220];
            v222 = &v213[v220];
            v223 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v223 - 8) + 16))(v221, v222, v223);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v212, 0, 1, (uint64_t)v214);
          }
          v224 = v250[10];
          v225 = &v259[v224];
          v226 = &v247[v224];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          v52 = v253;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v226, 1, HourPrecipitationChartViewModel))
          {
            v228 = sub_100005D40(&qword_1001BFA38);
            memcpy(v225, v226, *(_QWORD *)(*(_QWORD *)(v228 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v225, v226, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v225, 0, 1, HourPrecipitationChartViewModel);
          }
          v53 = v252;
          v229 = v250[11];
          v230 = *(_QWORD *)&v247[v229];
          *(_QWORD *)&v259[v229] = v230;
          v231 = v250[12];
          v232 = &v259[v231];
          v233 = &v247[v231];
          v234 = *(_QWORD *)v233;
          *((_WORD *)v232 + 4) = *((_WORD *)v233 + 4);
          *(_QWORD *)v232 = v234;
          v235 = v250[13];
          v236 = &v259[v235];
          v237 = &v247[v235];
          swift_bridgeObjectRetain(v230);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v237, 1, v38))
          {
            v238 = sub_100005D40(&qword_1001BFA28);
            memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v236, v237, v38);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v236, 0, 1, v38);
          }
          v239 = v250[14];
          v240 = &v259[v239];
          v241 = &v247[v239];
          v242 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v241, 1, v242))
          {
            v243 = sub_100005D40(&qword_1001BFA40);
            memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v243 - 8) + 64));
          }
          else
          {
            v244 = swift_getEnumCaseMultiPayload(v241, v242) == 1;
            v256(v240, v241, v257);
            swift_storeEnumTagMultiPayload(v240, v242, v244);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v240, 0, 1, v242);
          }
          v48 = v260;
        }
        v55 = v251;
      }
      swift_storeEnumTagMultiPayload(v50, v53, v55);
      swift_storeEnumTagMultiPayload(v50, v52, 1);
    }
    else
    {
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
  }
  return v48;
}

char *sub_10003D31C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  int *v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  __int128 v165;
  int *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  int *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  _BOOL8 v198;
  void (*v200)(char *, char *, uint64_t);
  uint64_t v201;
  int *v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(char *, char *, uint64_t);
  void (*v208)(char *, char *, uint64_t);
  uint64_t v209;
  void (*v210)(char *, char *, uint64_t);
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BFA18);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v214 = a1;
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v206 = *(_QWORD *)(v11 - 8);
  v211 = v11;
  (*(void (**)(char *, char *))(v206 + 40))(v9, v10);
  v12 = type metadata accessor for ForecastEntry(0);
  v13 = *(int *)(v12 + 20);
  v14 = &v9[v13];
  v15 = &v10[v13];
  v16 = type metadata accessor for TimelineEntryRelevance(0);
  v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v16);
  v18 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v16);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v16);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v19 = *(_QWORD *)(v16 - 8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v16);
LABEL_10:
    v20 = sub_100005D40(&qword_1001BFA20);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v14, v15, v16);
LABEL_11:
  v212 = v12;
  v21 = *(int *)(v12 + 24);
  v22 = &v9[v21];
  v23 = &v10[v21];
  v24 = *(_QWORD *)&v10[v21 + 8];
  v25 = *(_QWORD *)&v9[v21 + 8];
  *(_QWORD *)v22 = *(_QWORD *)&v10[v21];
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *((_QWORD *)v23 + 3);
  v27 = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
  *((_QWORD *)v22 + 3) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *((_QWORD *)v23 + 5);
  v29 = *((_QWORD *)v22 + 5);
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  *((_QWORD *)v22 + 5) = v28;
  swift_bridgeObjectRelease(v29);
  *((_WORD *)v22 + 24) = *((_WORD *)v23 + 24);
  v22[50] = v23[50];
  v22[51] = v23[51];
  v30 = type metadata accessor for WidgetContext(0);
  v31 = *(int *)(v30 + 40);
  v32 = &v22[v31];
  v33 = &v23[v31];
  v34 = type metadata accessor for URL(0);
  v35 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v34);
  v36 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v33, 1, v34);
  v209 = v34;
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v32, 0, 1, v34);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  v37 = *(_QWORD *)(v34 - 8);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v34);
LABEL_16:
    v38 = sub_100005D40(&qword_1001BFA28);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v32, v33, v34);
LABEL_17:
  v39 = *(int *)(v30 + 44);
  v40 = &v22[v39];
  v41 = &v23[v39];
  v42 = *(_QWORD *)v40;
  *(_QWORD *)v40 = *(_QWORD *)&v23[v39];
  swift_bridgeObjectRelease(v42);
  v40[8] = v41[8];
  v43 = v214;
  if (v214 != a2)
  {
    v44 = *(int *)(v212 + 28);
    v45 = &v9[v44];
    v46 = &v10[v44];
    sub_100011894((uint64_t)&v9[v44], type metadata accessor for ForecastEntry.Model);
    v47 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v46, v47) == 1)
    {
      v48 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v46, v48);
      v50 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v72 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v45, v46, v72);
      }
      else
      {
        v213 = v45;
        v204 = v48;
        v205 = v47;
        v203 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v51 = type metadata accessor for UUID(0);
          v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32);
          v52(v45, v46, v51);
          v53 = type metadata accessor for InstantWeatherViewModel(0);
          v54 = *(int *)(v53 + 20);
          v55 = &v45[v54];
          v56 = &v46[v54];
          v57 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
          v58 = *(int *)(v53 + 24);
          v59 = &v45[v58];
          v60 = &v46[v58];
          v210 = v52;
          v52(&v45[v58], &v46[v58], v51);
          v61 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v62 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
          v62(&v59[v61[5]], &v60[v61[5]], v211);
          v207 = v62;
          v62(&v59[v61[6]], &v60[v61[6]], v211);
          v63 = v61[7];
          v64 = &v59[v63];
          v65 = &v60[v63];
          v66 = sub_100005D40(&qword_1001BF090);
          v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32);
          v67(v64, v65, v66);
          v67(&v59[v61[8]], &v60[v61[8]], v66);
          *(_OWORD *)&v59[v61[9]] = *(_OWORD *)&v60[v61[9]];
          v68 = v61[10];
          v69 = &v59[v68];
          v70 = &v60[v68];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v68], 1, v66))
          {
            v71 = sub_100005D40(&qword_1001BF098);
            memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
          }
          else
          {
            v67(v69, v70, v66);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v69, 0, 1, v66);
          }
          v94 = v61[11];
          v95 = &v59[v94];
          v96 = &v60[v94];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v94], 1, v66))
          {
            v97 = sub_100005D40(&qword_1001BF098);
            memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
          }
          else
          {
            v67(v95, v96, v66);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v66);
          }
          v45 = v213;
          v102 = v61[12];
          v103 = &v59[v102];
          v104 = &v60[v102];
          v210(&v59[v102], &v60[v102], v51);
          v105 = (int *)type metadata accessor for ConditionViewModel(0);
          v106 = v105[5];
          v107 = &v103[v106];
          v108 = &v104[v106];
          v109 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 32))(v107, v108, v109);
          *(_OWORD *)&v103[v105[6]] = *(_OWORD *)&v104[v105[6]];
          *(_OWORD *)&v103[v105[7]] = *(_OWORD *)&v104[v105[7]];
          v103[v105[8]] = v104[v105[8]];
          v103[v105[9]] = v104[v105[9]];
          v103[v105[10]] = v104[v105[10]];
          *(_QWORD *)&v59[v61[13]] = *(_QWORD *)&v60[v61[13]];
          v110 = v61[14];
          v111 = &v59[v110];
          v112 = &v60[v110];
          v113 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v113 - 8) + 32))(v111, v112, v113);
          v114 = v61[15];
          v115 = &v59[v114];
          v116 = &v60[v114];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v114], 1, v211))
          {
            v117 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            v207(v115, v116, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v211);
          }
          v134 = v61[16];
          v135 = &v59[v134];
          v136 = &v60[v134];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v134], 1, v211))
          {
            v137 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
          }
          else
          {
            v207(v135, v136, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v135, 0, 1, v211);
          }
          v142 = v61[17];
          v143 = &v59[v142];
          v144 = &v60[v142];
          v145 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 32))(v143, v144, v145);
          v146 = v61[18];
          v147 = &v59[v146];
          v148 = &v60[v146];
          v149 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 32))(v147, v148, v149);
          *(_QWORD *)&v59[v61[19]] = *(_QWORD *)&v60[v61[19]];
          v150 = v61[20];
          v151 = &v59[v150];
          v152 = &v60[v150];
          v151[32] = v152[32];
          v153 = *((_OWORD *)v152 + 1);
          *(_OWORD *)v151 = *(_OWORD *)v152;
          *((_OWORD *)v151 + 1) = v153;
          v43 = v214;
          v48 = v204;
          v47 = v205;
        }
        else
        {
          v73 = type metadata accessor for UUID(0);
          v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32);
          v74(v45, v46, v73);
          v75 = type metadata accessor for AggregateWeatherViewModel(0);
          v76 = *(int *)(v75 + 20);
          v77 = &v45[v76];
          v78 = &v46[v76];
          v79 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
          v201 = v73;
          v202 = (int *)v75;
          v80 = *(int *)(v75 + 24);
          v81 = &v45[v80];
          v82 = &v46[v80];
          v200 = v74;
          v74(&v45[v80], &v46[v80], v73);
          v83 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v84 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
          v84(&v81[v83[5]], &v82[v83[5]], v211);
          v208 = v84;
          v84(&v81[v83[6]], &v82[v83[6]], v211);
          v85 = v83[7];
          v86 = &v81[v85];
          v87 = &v82[v85];
          v88 = sub_100005D40(&qword_1001BF090);
          v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32);
          v89(v86, v87, v88);
          v89(&v81[v83[8]], &v82[v83[8]], v88);
          *(_OWORD *)&v81[v83[9]] = *(_OWORD *)&v82[v83[9]];
          v90 = v83[10];
          v91 = &v81[v90];
          v92 = &v82[v90];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v90], 1, v88))
          {
            v93 = sub_100005D40(&qword_1001BF098);
            memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
          }
          else
          {
            v89(v91, v92, v88);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v91, 0, 1, v88);
          }
          v98 = v83[11];
          v99 = &v81[v98];
          v100 = &v82[v98];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v98], 1, v88))
          {
            v101 = sub_100005D40(&qword_1001BF098);
            memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
          }
          else
          {
            v89(v99, v100, v88);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v88);
          }
          v118 = v83[12];
          v119 = &v81[v118];
          v120 = &v82[v118];
          v200(&v81[v118], &v82[v118], v201);
          v121 = (int *)type metadata accessor for ConditionViewModel(0);
          v122 = v121[5];
          v123 = &v119[v122];
          v124 = &v120[v122];
          v125 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v123, v124, v125);
          *(_OWORD *)&v119[v121[6]] = *(_OWORD *)&v120[v121[6]];
          *(_OWORD *)&v119[v121[7]] = *(_OWORD *)&v120[v121[7]];
          v119[v121[8]] = v120[v121[8]];
          v119[v121[9]] = v120[v121[9]];
          v119[v121[10]] = v120[v121[10]];
          *(_QWORD *)&v81[v83[13]] = *(_QWORD *)&v82[v83[13]];
          v126 = v83[14];
          v127 = &v81[v126];
          v128 = &v82[v126];
          v129 = type metadata accessor for CloudAltitudeKind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 32))(v127, v128, v129);
          v130 = v83[15];
          v131 = &v81[v130];
          v132 = &v82[v130];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v130], 1, v211))
          {
            v133 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
          }
          else
          {
            v208(v131, v132, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v131, 0, 1, v211);
          }
          v138 = v83[16];
          v139 = &v81[v138];
          v140 = &v82[v138];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v138], 1, v211))
          {
            v141 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
          }
          else
          {
            v208(v139, v140, v211);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v139, 0, 1, v211);
          }
          v154 = v83[17];
          v155 = &v81[v154];
          v156 = &v82[v154];
          v157 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 32))(v155, v156, v157);
          v158 = v83[18];
          v159 = &v81[v158];
          v160 = &v82[v158];
          v161 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 32))(v159, v160, v161);
          *(_QWORD *)&v81[v83[19]] = *(_QWORD *)&v82[v83[19]];
          v162 = v83[20];
          v163 = &v81[v162];
          v164 = &v82[v162];
          v163[32] = v164[32];
          v165 = *((_OWORD *)v164 + 1);
          *(_OWORD *)v163 = *(_OWORD *)v164;
          *((_OWORD *)v163 + 1) = v165;
          v166 = v202;
          v45 = v213;
          *(_QWORD *)&v213[v202[7]] = *(_QWORD *)&v46[v202[7]];
          *(_QWORD *)&v213[v202[8]] = *(_QWORD *)&v46[v202[8]];
          v167 = v202[9];
          v168 = &v213[v167];
          v169 = &v46[v167];
          v170 = (int *)type metadata accessor for AirQualityViewModel(0);
          v48 = v204;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v169, 1, (uint64_t)v170))
          {
            v171 = sub_100005D40(&qword_1001BFA30);
            memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
          }
          else
          {
            v200(v168, v169, v201);
            v208(&v168[v170[5]], &v169[v170[5]], v211);
            *(_QWORD *)&v168[v170[6]] = *(_QWORD *)&v169[v170[6]];
            v172 = v170[7];
            v173 = &v168[v172];
            v174 = &v169[v172];
            v175 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v175 - 8) + 32))(v173, v174, v175);
            v176 = v170[8];
            v177 = &v168[v176];
            v178 = &v169[v176];
            v179 = type metadata accessor for AirQualityScaleCategory(0);
            v180 = v177;
            v166 = v202;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v179 - 8) + 32))(v180, v178, v179);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v168, 0, 1, (uint64_t)v170);
          }
          v181 = v166[10];
          v182 = &v213[v181];
          v183 = &v46[v181];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          v47 = v205;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v183, 1, HourPrecipitationChartViewModel))
          {
            v185 = sub_100005D40(&qword_1001BFA38);
            memcpy(v182, v183, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v182, v183, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v182, 0, 1, HourPrecipitationChartViewModel);
          }
          *(_QWORD *)&v213[v166[11]] = *(_QWORD *)&v46[v166[11]];
          v186 = v166[12];
          v187 = &v213[v186];
          v188 = &v46[v186];
          *(_QWORD *)v187 = *(_QWORD *)v188;
          *((_WORD *)v187 + 4) = *((_WORD *)v188 + 4);
          v189 = v166[13];
          v190 = &v213[v189];
          v191 = &v46[v189];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v46[v189], 1, v209))
          {
            v192 = sub_100005D40(&qword_1001BFA28);
            memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v209 - 8) + 32))(v190, v191, v209);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v190, 0, 1, v209);
          }
          v193 = v202[14];
          v194 = &v213[v193];
          v195 = &v46[v193];
          v196 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v195, 1, v196))
          {
            v197 = sub_100005D40(&qword_1001BFA40);
            memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
          }
          else
          {
            v198 = swift_getEnumCaseMultiPayload(v195, v196) == 1;
            v208(v194, v195, v211);
            swift_storeEnumTagMultiPayload(v194, v196, v198);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v194, 0, 1, v196);
          }
        }
        v50 = v203;
      }
      swift_storeEnumTagMultiPayload(v45, v48, v50);
      swift_storeEnumTagMultiPayload(v45, v47, 1);
    }
    else
    {
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
  }
  return v43;
}

uint64_t sub_10003E228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003E234);
}

uint64_t sub_10003E234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = type metadata accessor for ForecastEntry(0);
    v8 = a1 + *(int *)(a3 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
}

uint64_t sub_10003E2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003E2AC);
}

uint64_t sub_10003E2AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = type metadata accessor for ForecastEntry(0);
    v10 = a1 + *(int *)(a4 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for AdaptiveConditionsContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001BFEC8;
  if (!qword_1001BFEC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AdaptiveConditionsContentView);
  return result;
}

uint64_t sub_10003E358(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019EB00, 1);
}

void sub_10003E368(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10003E370(v1, a1);
}

void sub_10003E370(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  Swift::String v44;
  _DWORD *v45;
  uint64_t v46;
  Swift::String v47;
  void *object;
  __n128 v49;
  Swift::String v50;
  uint64_t v51;
  unint64_t v52;
  Swift::String v53;
  _DWORD *v54;
  uint64_t v55;
  Swift::String v56;
  void *v57;
  __n128 v58;
  Swift::String v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;

  v73 = a2;
  v65 = sub_100005D40(&qword_1001BFF00);
  __chkstk_darwin(v65);
  v66 = (uint64_t)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100005D40(&qword_1001BFF08);
  __chkstk_darwin(v72);
  v68 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for AdaptiveConditionsInlineContentView(0);
  __chkstk_darwin(v64);
  v67 = (uint64_t)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100005D40(&qword_1001BFF10);
  __chkstk_darwin(v71);
  v69 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100005D40(&qword_1001BFF18);
  __chkstk_darwin(v63);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100005D40(&qword_1001BFF20);
  __chkstk_darwin(v70);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AdaptiveConditionsRectangularContentView(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AdaptiveConditionsContentView(0);
  v15 = __chkstk_darwin(v14);
  v60 = (uint64_t)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v60 - v17;
  v19 = type metadata accessor for WidgetFamily(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v61 = (_DWORD *)((char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v24 = (char *)&v60 - v23;
  sub_1000C54B0((uint64_t *)((char *)&v60 - v23));
  v62 = v20;
  v25 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v24, v19);
  if (v25 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_10001C590(a1, (uint64_t)v18, type metadata accessor for AdaptiveConditionsContentView);
    v74 = 0;
    v75 = 0xE000000000000000;
    _StringGuts.grow(_:)(63);
    v44._countAndFlagsBits = 0xD000000000000021;
    v44._object = (void *)0x8000000100186340;
    String.append(_:)(v44);
    v45 = v61;
    sub_1000C54B0(v61);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v19, v46);
    object = v47._object;
    String.append(_:)(v47);
    v49 = swift_bridgeObjectRelease(object);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v62 + 8))(v45, v19, v49);
    v50._object = (void *)0x80000001001863D0;
    v50._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v50);
    v51 = v74;
    v52 = v75;
  }
  else
  {
    if (v25 == enum case for WidgetFamily.accessoryRectangular(_:))
    {
      sub_1000FB518((uint64_t)v13);
      v26 = *(int *)(v11 + 20);
      v27 = type metadata accessor for ConditionsEvaluationManager();
      *(_QWORD *)&v13[v26] = swift_allocObject(v27, 16, 7);
      sub_10001C590((uint64_t)v13, (uint64_t)v8, type metadata accessor for AdaptiveConditionsRectangularContentView);
      swift_storeEnumTagMultiPayload(v8, v63, 1);
      sub_10002EF14(&qword_1001BFF38, type metadata accessor for AdaptiveConditionsRectangularContentView, (uint64_t)&unk_10017F9DC);
      _ConditionalContent<>.init(storage:)(v8, &type metadata for Never, v11, &protocol witness table for Never, v28);
      v29 = v69;
      sub_10003EB70((uint64_t)v10, v69, &qword_1001BFF20);
      swift_storeEnumTagMultiPayload(v29, v71, 0);
      v30 = sub_10003EA68();
      v31 = sub_10003EAEC();
      _ConditionalContent<>.init(storage:)(v29, v70, v72, v30, v31);
      sub_100016904((uint64_t)v10, &qword_1001BFF20);
      v32 = (uint64_t)v13;
      v33 = type metadata accessor for AdaptiveConditionsRectangularContentView;
LABEL_6:
      sub_100011894(v32, v33);
      return;
    }
    if (v25 == enum case for WidgetFamily.accessoryInline(_:))
    {
      v34 = v67;
      sub_1000FB518(v67);
      v35 = v64;
      v36 = *(int *)(v64 + 20);
      v37 = type metadata accessor for ConditionsEvaluationManager();
      *(_QWORD *)(v34 + v36) = swift_allocObject(v37, 16, 7);
      v38 = v66;
      sub_10001C590(v34, v66, type metadata accessor for AdaptiveConditionsInlineContentView);
      swift_storeEnumTagMultiPayload(v38, v65, 0);
      sub_10002EF14(&qword_1001BFF28, type metadata accessor for AdaptiveConditionsInlineContentView, (uint64_t)&unk_100182844);
      v39 = (uint64_t)v68;
      _ConditionalContent<>.init(storage:)(v38, v35, &type metadata for Never, v40, &protocol witness table for Never);
      v41 = v69;
      sub_10003EB70(v39, v69, &qword_1001BFF08);
      swift_storeEnumTagMultiPayload(v41, v71, 1);
      v42 = sub_10003EA68();
      v43 = sub_10003EAEC();
      _ConditionalContent<>.init(storage:)(v41, v70, v72, v42, v43);
      sub_100016904(v39, &qword_1001BFF08);
      v32 = v34;
      v33 = type metadata accessor for AdaptiveConditionsInlineContentView;
      goto LABEL_6;
    }
    sub_10001C590(a1, v60, type metadata accessor for AdaptiveConditionsContentView);
    v74 = 0;
    v75 = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v53._countAndFlagsBits = 0xD000000000000022;
    v53._object = (void *)0x80000001001862F0;
    String.append(_:)(v53);
    v54 = v61;
    sub_1000C54B0(v61);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v19, v55);
    v57 = v56._object;
    String.append(_:)(v56);
    v58 = swift_bridgeObjectRelease(v57);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v62 + 8))(v54, v19, v58);
    v59._object = (void *)0x80000001001863D0;
    v59._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v59);
    v51 = v74;
    v52 = v75;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v51, v52, "WeatherWidget/AdaptiveConditionsContentView.swift", 49, 2);
  __break(1u);
}

unint64_t sub_10003EA68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BFF30;
  if (!qword_1001BFF30)
  {
    v1 = sub_100005DC4(&qword_1001BFF20);
    sub_10002EF14(&qword_1001BFF38, type metadata accessor for AdaptiveConditionsRectangularContentView, (uint64_t)&unk_10017F9DC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BFF30);
  }
  return result;
}

unint64_t sub_10003EAEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BFF40;
  if (!qword_1001BFF40)
  {
    v1 = sub_100005DC4(&qword_1001BFF08);
    sub_10002EF14(&qword_1001BFF28, type metadata accessor for AdaptiveConditionsInlineContentView, (uint64_t)&unk_100182844);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BFF40);
  }
  return result;
}

void sub_10003EB70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100005D40(a3);
  sub_10001C788(v3);
  sub_100006338();
}

unint64_t sub_10003EBA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BFF48;
  if (!qword_1001BFF48)
  {
    v1 = sub_100005DC4(&qword_1001BFF50);
    sub_10003EC04();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BFF48);
  }
  return result;
}

unint64_t sub_10003EC04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BFF58;
  if (!qword_1001BFF58)
  {
    v1 = sub_100005DC4(&qword_1001BFF60);
    sub_10003EA68();
    sub_10003EAEC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001BFF58);
  }
  return result;
}

uint64_t sub_10003EC70(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v6 = a2[1];
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    swift_bridgeObjectRetain(v5);
    swift_retain(v6);
    swift_retain(v7);
    swift_retain(v8);
    v12 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = v10;
      v15 = v12;
      v16 = 1;
    }
    else
    {
      v17 = *v11;
      *v10 = *v11;
      swift_retain(v17);
      v14 = v10;
      v15 = v12;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_10003ED84(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v5 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for Font.Context(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t sub_10003EE14(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  v8 = *(int *)(a3 + 20);
  v9 = (uint64_t *)((char *)a2 + v8);
  v10 = (uint64_t *)(a1 + v8);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  v11 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v9, v11) == 1)
  {
    v12 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v9, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v9;
    *v10 = *v9;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v11, v13);
  return a1;
}

uint64_t *sub_10003EEF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[2];
  v11 = a1[2];
  a1[2] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[3];
  v13 = a1[3];
  a1[3] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[4] = a2[4];
  a1[5] = a2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  if (a1 != a2)
  {
    v14 = *(int *)(a3 + 20);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    sub_100016904((uint64_t)a1 + v14, &qword_1001BF0C8);
    v17 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v20 = *v16;
      *v15 = *v16;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
  }
  return a1;
}

uint64_t sub_10003F028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(int *)(a3 + 20);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for Font.Context(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v6, v7, v9);
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_10003F0E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_release(v8);
  v9 = a1[3];
  a1[3] = a2[3];
  swift_release(v9);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    sub_100016904((uint64_t)a1 + v10, &qword_1001BF0C8);
    v13 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for Font.Context(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10003F1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003F1FC);
}

void sub_10003F1FC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_100044448(*a1);
    sub_1000443A4();
  }
  else
  {
    v6 = sub_100005D40(&qword_1001BF0D0);
    sub_100016B50((uint64_t)a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t sub_10003F258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003F264);
}

void sub_10003F264(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    sub_1000443A4();
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BF0D0);
    sub_100016B44((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t type metadata accessor for HourlyBannerView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001BFFC0, (uint64_t)&nominal type descriptor for HourlyBannerView);
}

void sub_10003F2D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "1";
  sub_10001C028(319, (unint64_t *)&qword_1001BF140, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_10003F35C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019EBB0, 1);
}

void sub_10003F36C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v4 = sub_100005D40(&qword_1001BFFF8);
  sub_10003F3B0(v2, a2 + *(int *)(v4 + 44));
  sub_100006338();
}

void sub_10003F3B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  double v26;
  void (*v27)(_DWORD *, uint64_t);
  __int128 v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t OpaqueTypeConformance2;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[3];
  _QWORD v78[14];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;

  v76 = a2;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v74 = *(_QWORD *)(v3 - 8);
  v75 = v3;
  __chkstk_darwin(v3);
  v73 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Font.Context(0);
  v65 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (_DWORD *)((char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (_DWORD *)((char *)&v65 - v9);
  v11 = sub_100005D40(&qword_1001C0000);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_100005D40(&qword_1001C0008);
  __chkstk_darwin(v14);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100005D40(&qword_1001C0010);
  __chkstk_darwin(v68);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100005D40(&qword_1001C0018);
  v71 = *(_QWORD *)(v19 - 8);
  v72 = v19;
  __chkstk_darwin(v19);
  v70 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100005D40(&qword_1001C0020);
  __chkstk_darwin(v21);
  v69 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100005D40(&qword_1001C0028);
  __chkstk_darwin(v67);
  v66 = (uint64_t)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v13 = *(_QWORD *)(a1 + 40);
  sub_10003F984(a1);
  sub_1000168D8((uint64_t)v13, (uint64_t)v16, &qword_1001C0000);
  v24 = &v16[*(int *)(v14 + 36)];
  *(_QWORD *)v24 = 0xD000000000000010;
  *((_QWORD *)v24 + 1) = 0x800000010017BD00;
  sub_100016904((uint64_t)v13, &qword_1001C0000);
  v25 = *(_OWORD *)(a1 + 16);
  v83 = *(_OWORD *)a1;
  v84 = v25;
  v85 = *(_OWORD *)(a1 + 32);
  v86 = *(_BYTE *)(a1 + 48);
  type metadata accessor for HourlyBannerView(0);
  sub_1000C5030(v10);
  v26 = sub_100128ACC((uint64_t)v10);
  v27 = *(void (**)(_DWORD *, uint64_t))(v65 + 8);
  v27(v10, v5);
  v28 = *(_OWORD *)(a1 + 16);
  v79 = *(_OWORD *)a1;
  v80 = v28;
  v81 = *(_OWORD *)(a1 + 32);
  v82 = *(_BYTE *)(a1 + 48);
  sub_1000C5030(v8);
  v29 = sub_100128ACC((uint64_t)v8);
  v30 = 16.0;
  if ((v82 & 1) == 0)
    v30 = 8.0;
  v31 = v29 + v30;
  v32 = ((uint64_t (*)(_DWORD *, uint64_t))v27)(v8, v5);
  v33 = static Alignment.center.getter(v32);
  v41 = v33;
  v42 = v34;
  if (v26 > v31)
  {
    v43 = static os_log_type_t.fault.getter(v33, v34, v35, v36, v37, v38, v39, v40);
    v44 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v44, "Contradictory frame constraints specified.", 42, 2);

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v78, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v26, 0, 0, 1, *(_QWORD *)&v31, 0, v41, v42);
  sub_1000168D8((uint64_t)v16, (uint64_t)v18, &qword_1001C0008);
  v45 = v68;
  memcpy(&v18[*(int *)(v68 + 36)], v78, 0x70uLL);
  sub_100016904((uint64_t)v16, &qword_1001C0008);
  v46 = v73;
  static AccessibilityChildBehavior.contain.getter();
  v47 = sub_100043F8C(&qword_1001C0030, &qword_1001C0010, (void (*)(void))sub_10004208C);
  v48 = v70;
  View.accessibilityElement(children:)(v46, v45, v47);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v46, v75);
  sub_100016904((uint64_t)v18, &qword_1001C0010);
  v49 = LocalizedStringKey.init(stringLiteral:)(0x4620796C72756F48, 0xEF7473616365726FLL);
  v53 = Text.init(_:tableName:bundle:comment:)(v49, v51, v50 & 1, v52, 0, 0, 0);
  v55 = v54;
  v57 = v56;
  v59 = v58 & 1;
  v77[0] = v45;
  v77[1] = v47;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v77, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v61 = (uint64_t)v69;
  v62 = v72;
  View.accessibility(label:)(v53, v55, v59, v57, v72, OpaqueTypeConformance2);
  sub_100016868(v53, v55, v59);
  v63 = swift_bridgeObjectRelease(v57);
  (*(void (**)(char *, uint64_t, __n128))(v71 + 8))(v48, v62, v63);
  v64 = v66;
  sub_1000168D8(v61, v66, &qword_1001C0020);
  *(_QWORD *)(v64 + *(int *)(v67 + 36)) = 0x4000000000000000;
  sub_100016904(v61, &qword_1001C0020);
  sub_1000168AC(v64, v76, &qword_1001C0028);
}

uint64_t sub_10003F984(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[2];

  v2 = type metadata accessor for HourlyBannerView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v15[0] = 0;
  v15[1] = v5;
  KeyPath = swift_getKeyPath(&unk_10017BDA8);
  sub_10000F7C4(a1, (uint64_t)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for HourlyBannerView);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1001B55B8, v8 + v4, v7 | 7);
  sub_100011868((uint64_t)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8, type metadata accessor for HourlyBannerView);
  v10 = sub_100005D40(&qword_1001C00A0);
  v11 = sub_100005D40(&qword_1001C0070);
  v12 = sub_1000423AC();
  v13 = sub_1000421F8();
  return ForEach<>.init(_:id:content:)(v15, KeyPath, sub_100042360, v9, v10, v11, v12, &protocol witness table for Int, v13);
}

void sub_10003FAC4(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  _BYTE v37[4];
  int v38;
  uint64_t v39;

  v6 = sub_100005D40(&qword_1001BF0D0);
  __chkstk_darwin(v6);
  v8 = &v37[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for HourlyForecastViewModel(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = (int *)type metadata accessor for HourlyBannerCell(0);
  __chkstk_darwin(v13);
  v15 = &v37[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = *a1;
  if ((*a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v17 = *a2;
    if (v16 < *(_QWORD *)(*a2 + 16))
    {
      sub_10000F7C4(v17+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v16, (uint64_t)v12, type metadata accessor for HourlyForecastViewModel);
      v19 = a2[1];
      v18 = a2[2];
      v39 = a3;
      v20 = a2[3];
      v21 = a2[4];
      v22 = a2[5];
      v38 = *((unsigned __int8 *)a2 + 48);
      *v8 = swift_getKeyPath(&unk_10017BDC0);
      v23 = sub_100005D40(&qword_1001BF0C8);
      swift_storeEnumTagMultiPayload(v8, v23, 0);
      KeyPath = swift_getKeyPath(&unk_10017BDF0);
      v25 = (uint64_t *)&v15[v13[7]];
      *v25 = KeyPath;
      v26 = sub_100005D40(&qword_1001BF488);
      swift_storeEnumTagMultiPayload(v25, v26, 0);
      sub_100011868((uint64_t)v12, (uint64_t)v15, type metadata accessor for HourlyForecastViewModel);
      v27 = &v15[v13[5]];
      *(_QWORD *)v27 = v17;
      *((_QWORD *)v27 + 1) = v19;
      v28 = v18;
      *((_QWORD *)v27 + 2) = v18;
      *((_QWORD *)v27 + 3) = v20;
      *((_QWORD *)v27 + 4) = v21;
      *((_QWORD *)v27 + 5) = v22;
      v27[48] = v38;
      sub_1000168AC((uint64_t)v8, (uint64_t)&v15[v13[6]], &qword_1001BF0D0);
      v29 = &v15[v13[8]];
      *v29 = swift_getKeyPath(&unk_10017BE20);
      v30 = sub_100005D40(&qword_1001BF490);
      swift_storeEnumTagMultiPayload(v29, v30, 0);
      swift_bridgeObjectRetain(v17);
      swift_retain(v19);
      swift_retain(v28);
      v31 = swift_retain(v20);
      v32 = static Alignment.center.getter(v31);
      v34 = v33;
      v35 = v39;
      sub_10000F7C4((uint64_t)v15, v39, type metadata accessor for HourlyBannerCell);
      v36 = (unint64_t *)(v35 + *(int *)(sub_100005D40(&qword_1001C0070) + 36));
      *v36 = v16;
      v36[1] = v32;
      v36[2] = v34;
      sub_100011894((uint64_t)v15, type metadata accessor for HourlyBannerCell);
      return;
    }
  }
  __break(1u);
}

double sub_10003FD70(uint64_t a1, char a2, uint64_t a3, char a4, double a5, uint64_t a6, _QWORD *a7)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double result;

  if ((a4 & 1) != 0)
    *(double *)&a3 = 0.0;
  v8 = INFINITY;
  if ((a2 & 1) == 0)
    v8 = *(double *)&a1;
  a7[1] = 0;
  v9 = *(_QWORD *)(*a7 + 16);
  v10 = 0.0;
  if (v9)
  {
    v11 = 0;
    v12 = (double *)(*a7 + 40);
    v13 = *(double *)&a3;
    v14 = 0.0;
    while (1)
    {
      v15 = v11 ? a5 : 0.0;
      v10 = v14 + v15 + *(v12 - 1);
      if (v8 < v10)
        break;
      v16 = *v12;
      v12 += 2;
      v17 = v16;
      a7[1] = ++v11;
      if (v13 <= v16)
        v13 = v17;
      v14 = v10;
      if (v9 == v11)
        goto LABEL_16;
    }
    v10 = v14;
  }
LABEL_16:
  if ((a2 & 1) != 0)
    result = 0.0;
  else
    result = *(double *)&a1;
  if (v10 > result)
    return v10;
  return result;
}

void sub_10003FE20(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double *v57;
  double v58;
  double v59;
  double Width;
  uint64_t v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  char v114;
  char v115;
  char v116;
  double v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  void (*v137)(uint64_t, uint64_t, uint64_t);
  char *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  _QWORD v148[4];
  CGRect v149;
  CGRect v150;

  v12 = sub_100005D40(&qword_1001C01E0);
  sub_1000230F4();
  __chkstk_darwin(v13);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v14);
  sub_100023434();
  sub_100023440(v15);
  v145 = sub_100005D40(&qword_1001C01E8);
  sub_1000230F4();
  __chkstk_darwin(v16);
  sub_1000230E0();
  sub_100023440(v17);
  sub_100005D40(&qword_1001C01F0);
  sub_1000230F4();
  __chkstk_darwin(v18);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v19);
  sub_100023434();
  sub_100023440(v20);
  v146 = type metadata accessor for LayoutSubview(0);
  v144 = *(_QWORD *)(v146 - 8);
  sub_1000230F4();
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  sub_100023434();
  sub_100023440(v25);
  sub_100005D40(&qword_1001C01F8);
  sub_1000230F4();
  __chkstk_darwin(v26);
  sub_100023150();
  sub_10002875C();
  __chkstk_darwin(v27);
  v29 = (uint64_t *)((char *)&v123 - v28);
  sub_100005D40(&qword_1001C0200);
  sub_1000230F4();
  __chkstk_darwin(v30);
  sub_1000230E0();
  sub_100023440(v31);
  v32 = sub_100005D40(&qword_1001C0208);
  sub_1000230F4();
  __chkstk_darwin(v33);
  sub_1000230E0();
  v142 = v34;
  v35 = type metadata accessor for LayoutSubviews(0);
  __chkstk_darwin(v35);
  sub_100023150();
  sub_10002875C();
  v37 = __chkstk_darwin(v36);
  v39 = (char *)&v123 - v38;
  __chkstk_darwin(v37);
  v41 = (char *)&v123 - v40;
  v139 = v42;
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  v124 = a7;
  v143 = v44;
  v137 = v43;
  ((void (*)(char *, uint64_t))v43)(v39, a7);
  v45 = a8[1];
  v128 = v41;
  v138 = v39;
  sub_10010A760(v45);
  v141 = (unint64_t *)a8;
  v46 = *a8;
  v47 = sub_10010A894(v45, *a8);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  swift_bridgeObjectRetain(v46);
  sub_100040740(v47, v49, v51, v53);
  v55 = v54;
  swift_unknownObjectRelease(v47);
  v56 = *(_QWORD *)(v55 + 16);
  if (v56)
  {
    v57 = (double *)(v55 + 32);
    v58 = 0.0;
    do
    {
      v59 = *v57++;
      v58 = v58 + v59;
      --v56;
    }
    while (v56);
  }
  else
  {
    v58 = 0.0;
  }
  swift_bridgeObjectRelease(v55);
  v149.origin.x = sub_10004442C();
  Width = CGRectGetWidth(v149);
  v61 = v142;
  v62 = v141[1];
  v63 = __OFSUB__(v62, 1);
  v64 = v62 - 1;
  if (v63)
  {
LABEL_26:
    __break(1u);
    return;
  }
  v65 = (Width - v58) / (double)v64;
  v66 = (uint64_t)v136;
  v67 = v143;
  sub_10004438C();
  (*(void (**)(char *, uint64_t, uint64_t))(v139 + 32))(v138, v66, v67);
  sub_100016878(&qword_1001C0210, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews);
  dispatch thunk of Sequence.makeIterator()(v67, v68);
  v131 = *(int *)(v32 + 36);
  *(_QWORD *)(v61 + v131) = 0;
  v123 = v12;
  v69 = (_QWORD *)(v61 + *(int *)(v12 + 36));
  sub_100016878((unint64_t *)&qword_1001C0218, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews);
  v71 = v70;
  v72 = a1;
  v136 = v24;
  v73 = (uint64_t)v135;
  v130 = v29;
  v129 = v69;
  while (1)
  {
    v74 = *v69;
    dispatch thunk of Collection.endIndex.getter(v143, v71);
    if (v74 == v148[0])
    {
      v75 = v140;
      sub_1000443E0(v140);
LABEL_11:
      sub_100016904(v75, &qword_1001C01F0);
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v73, 1, 1, v145);
      goto LABEL_14;
    }
    v76 = v143;
    dispatch thunk of Collection.subscript.read(v148, v69, v143, v71);
    v75 = v140;
    sub_100044398(v140, v77, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v144 + 16));
    sub_100044424((uint64_t)v148);
    sub_1000443B0();
    sub_10004438C();
    dispatch thunk of Collection.formIndex(after:)(v69, v76, v71);
    v78 = sub_100044410();
    v79(v78, v76);
    sub_1000443C0(v75);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v75, 1, v51) == 1)
      goto LABEL_11;
    v80 = v145;
    v51 = v146;
    v81 = v71;
    v82 = v132;
    sub_100044440(v132, v75);
    v83 = v133 + *(int *)(v80 + 48);
    v84 = v142;
    v85 = v131;
    v86 = *(_QWORD *)(v142 + v131);
    sub_100044440(v83, v82);
    if (__OFADD__(v86, 1))
      goto LABEL_25;
    *(_QWORD *)(v84 + v85) = v86 + 1;
    v73 = (uint64_t)v135;
    v87 = (uint64_t)v135 + *(int *)(v80 + 48);
    *v135 = v86;
    sub_100044440(v87, v83);
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v73, 0, 1, v80);
    v24 = v136;
    v71 = v81;
    v29 = v130;
    v69 = v129;
LABEL_14:
    sub_1000168AC(v73, (uint64_t)v29, &qword_1001C01F8);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, v145) == 1)
      break;
    v88 = *v29;
    (*(void (**)(char *, char *, uint64_t))(v144 + 32))(v24, (char *)v29 + *(int *)(v145 + 48), v146);
    if ((v88 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    if (v88 >= *(_QWORD *)(*v141 + 16))
      goto LABEL_24;
    v89 = *(double *)(*v141 + 16 * v88 + 32);
    v150.origin.x = sub_10004442C();
    CGRectGetHeight(v150);
    v90 = static UnitPoint.topLeading.getter();
    LOBYTE(v148[0]) = 0;
    v147 = 0;
    LayoutSubview.place(at:anchor:proposal:)(0x7FF0000000000000, v72, a2, v90, v91);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v24, v146);
    v72 = v72 + v65 + v89;
  }
  sub_100016904(v142, &qword_1001C0208);
  v92 = sub_1000443B0();
  v93 = v143;
  v94 = v137;
  v137(v92, v124, v143);
  v95 = v127;
  sub_100160890(v141[1]);
  v96 = v71;
  v97 = v125;
  v94(v125, v95, v93);
  dispatch thunk of Collection.startIndex.getter(v93, v96);
  v98 = v123;
  *(_QWORD *)(v97 + *(int *)(v123 + 36)) = v148[0];
  v99 = v144;
  v100 = v126;
  sub_1000168AC(v97, v126, &qword_1001C01E0);
  v101 = (_QWORD *)(v100 + *(int *)(v98 + 36));
  v102 = *v101;
  dispatch thunk of Collection.endIndex.getter(v93, v96);
  v103 = v134;
  if (v102 == v148[0])
  {
LABEL_21:
    sub_1000443E0(v103);
  }
  else
  {
    while (1)
    {
      v104 = v143;
      dispatch thunk of Collection.subscript.read(v148, v101, v143, v96);
      sub_100044398(v103, v105, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v99 + 16));
      sub_100044424((uint64_t)v148);
      sub_1000443B0();
      sub_10004438C();
      dispatch thunk of Collection.formIndex(after:)(v101, v104, v96);
      v106 = sub_100044410();
      v107(v106, v104);
      sub_1000443C0(v103);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v103, 1, v51) == 1)
        break;
      v108 = (uint64_t)v136;
      v109 = sub_100044398((uint64_t)v136, v103, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v99 + 32));
      v110 = v101;
      v111 = v100;
      v112 = static ProposedViewSize.unspecified.getter(v109);
      v114 = v113;
      v116 = v115;
      v117 = static UnitPoint.topLeading.getter();
      LOBYTE(v148[0]) = v114 & 1;
      v147 = v116 & 1;
      v118 = v112;
      v100 = v111;
      v101 = v110;
      v103 = v134;
      LayoutSubview.place(at:anchor:proposal:)(v118, 100000.0, 100000.0, v117, v119);
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v108, v51);
      v120 = *v101;
      dispatch thunk of Collection.endIndex.getter(v143, v96);
      if (v120 == v148[0])
        goto LABEL_21;
    }
  }
  sub_100016904(v100, &qword_1001C01E0);
  v121 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
  v122 = v143;
  v121(v127, v143);
  v121((uint64_t)v128, v122);
}

void sub_100040740(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *i;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_17;
  if (v5)
  {
    sub_100122840(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0)
    {
LABEL_18:
      __break(1u);
      return;
    }
    v8 = 0;
    v9 = &_swiftEmptyArrayStorage;
    for (i = (uint64_t *)(a2 + 16 * a3); ; i += 2)
    {
      v11 = v8 + 1;
      if (__OFADD__(v8, 1))
        break;
      if (a3 + v8 >= v4 || v8 >= v5)
        goto LABEL_16;
      v13 = *i;
      v16 = v9;
      v15 = v9[2];
      v14 = v9[3];
      if (v15 >= v14 >> 1)
      {
        sub_100122840((char *)(v14 > 1), v15 + 1, 1);
        v9 = v16;
      }
      v9[2] = v15 + 1;
      v9[v15 + 4] = v13;
      ++v8;
      if (v11 == v5)
        return;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
}

uint64_t sub_100040860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double *v20;
  _BYTE v21[32];
  char v22[8];
  _QWORD *v23;

  v0 = type metadata accessor for LayoutSubview(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10002325C();
  v4 = v3 - v2;
  v5 = type metadata accessor for LayoutSubviews(0);
  sub_100016878((unint64_t *)&qword_1001C0218, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews);
  v7 = v6;
  v8 = dispatch thunk of Collection.count.getter(v5, v6);
  v9 = &_swiftEmptyArrayStorage;
  if (!v8)
    return (uint64_t)v9;
  v10 = v8;
  v23 = &_swiftEmptyArrayStorage;
  sub_10012285C(0, v8 & ~(v8 >> 63), 0);
  result = dispatch thunk of Collection.startIndex.getter(v5, v7);
  if ((v10 & 0x8000000000000000) == 0)
  {
    do
    {
      dispatch thunk of Collection.subscript.read(v21, v22, v5, v7);
      (*(void (**)(uint64_t))(v1 + 16))(v4);
      v12 = sub_100044424((uint64_t)v21);
      v13 = static ProposedViewSize.unspecified.getter(v12);
      v21[0] = v14 & 1;
      v15 = LayoutSubview.sizeThatFits(_:)(v13);
      v17 = v16;
      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
      v9 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
      {
        sub_10012285C(0, v9[2] + 1, 1);
        v9 = v23;
      }
      v19 = v9[2];
      v18 = v9[3];
      if (v19 >= v18 >> 1)
      {
        sub_10012285C((char *)(v18 > 1), v19 + 1, 1);
        v9 = v23;
      }
      v9[2] = v19 + 1;
      v20 = (double *)&v9[2 * v19];
      v20[4] = v15;
      *((_QWORD *)v20 + 5) = v17;
      dispatch thunk of Collection.formIndex(after:)(v22, v5, v7);
      --v10;
    }
    while (v10);
    return (uint64_t)v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100040A64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100040860();
  *a1 = result;
  a1[1] = 0;
  return result;
}

double sub_100040A90(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, _QWORD *a6)
{
  double *v6;

  return sub_10003FD70(a1, a2 & 1, a3, a4 & 1, *v6, a5, a6);
}

uint64_t sub_100040AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100040B08(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_100040ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100040B08(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_100040B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

uint64_t sub_100040B44()
{
  double *v0;

  return WeatherIntentResponseCode.rawValue.getter(*v0);
}

void (*sub_100040B50(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_100040BAC;
}

void sub_100040BAC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void sub_100040BDC()
{
  double v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t OpaqueTypeConformance2;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  uint64_t v80;
  uint64_t v81;

  v2 = v0;
  v3 = type metadata accessor for WeatherFormatPlaceholder(0);
  v74 = *(_QWORD *)(v3 - 8);
  v75 = v3;
  sub_1000230F4();
  __chkstk_darwin(v4);
  sub_1000230E0();
  v73 = v5;
  v76 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v77 = *(_QWORD *)(v76 - 8);
  sub_1000230F4();
  __chkstk_darwin(v6);
  sub_1000230E0();
  v70 = v7;
  v8 = type metadata accessor for AccessibilityChildBehavior(0);
  v68 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  sub_1000230F4();
  __chkstk_darwin(v9);
  sub_1000443F0();
  v10 = type metadata accessor for TypesettingLanguageAwareLineHeightRatio(0);
  v64 = *(_QWORD *)(v10 - 8);
  v65 = v10;
  sub_1000230F4();
  __chkstk_darwin(v11);
  sub_10002325C();
  v14 = v13 - v12;
  v15 = sub_100005D40(&qword_1001C0178);
  sub_1000230F4();
  __chkstk_darwin(v16);
  sub_10002325C();
  v19 = v18 - v17;
  v20 = sub_100005D40(&qword_1001C0180);
  v66 = *(_QWORD *)(v20 - 8);
  sub_1000230F4();
  __chkstk_darwin(v21);
  sub_10002325C();
  v24 = v23 - v22;
  v25 = sub_100005D40(&qword_1001C0188);
  v67 = *(_QWORD *)(v25 - 8);
  sub_1000230F4();
  __chkstk_darwin(v26);
  sub_10002325C();
  v29 = v28 - v27;
  v72 = sub_100005D40(&qword_1001C0190);
  sub_1000230F4();
  __chkstk_darwin(v30);
  sub_100023150();
  v78 = v31;
  __chkstk_darwin(v32);
  sub_100023434();
  v71 = v33;
  *(_QWORD *)v19 = static HorizontalAlignment.center.getter(v34);
  *(_QWORD *)(v19 + 8) = 0;
  *(_BYTE *)(v19 + 16) = 0;
  v35 = sub_100005D40(&qword_1001C0198);
  sub_1000410F8(v2, (_QWORD *)(v19 + *(int *)(v35 + 44)));
  static TypesettingLanguageAwareLineHeightRatio.disable.getter();
  sub_100016A54(&qword_1001C01A0, &qword_1001C0178);
  v37 = v36;
  View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(v14, 1, v15, v36);
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v14, v65);
  sub_100016904(v19, &qword_1001C0178);
  static AccessibilityChildBehavior.ignore.getter();
  v80 = v15;
  v81 = v37;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)>>, 1);
  View.accessibilityElement(children:)(v1, v20, OpaqueTypeConformance2);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v1, v69);
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v24, v20);
  v39 = type metadata accessor for HourlyForecastViewModel(0);
  v40 = (uint64_t *)(v63 + *(int *)(v39 + 32));
  v42 = *v40;
  v41 = v40[1];
  v80 = v42;
  v81 = v41;
  v79[0] = v20;
  v79[1] = OpaqueTypeConformance2;
  v43 = swift_getOpaqueTypeConformance2(v79, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v44 = sub_10001692C();
  View.accessibilityLabel<A>(_:)(&v80, v25, &type metadata for String, v43, v44);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v29, v25);
  v45 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
  v46 = swift_allocObject(v45, 64, 7);
  *(_OWORD *)(v46 + 16) = xmmword_10017BD00;
  v47 = v63 + *(int *)(v39 + 36);
  v48 = (_QWORD *)(v47 + *(int *)(type metadata accessor for ConditionViewModel(0) + 28));
  v49 = v48[1];
  *(_QWORD *)(v46 + 32) = *v48;
  *(_QWORD *)(v46 + 40) = v49;
  v50 = swift_bridgeObjectRetain(v49);
  static WeatherFormatStyle<>.weather.getter(v50);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v74 + 104))(v73, enum case for WeatherFormatPlaceholder.none(_:), v75);
  v51 = type metadata accessor for UnitManager(0);
  v52 = static UnitManager.standard.getter(v51);
  v53 = sub_100005D40(&qword_1001BF090);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v54 = Measurement.formatted<A>(_:placeholder:unitManager:)(v70, v73, v52, &protocol witness table for UnitManager, v53, v76);
  v56 = v55;
  swift_release(v52);
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v70, v76);
  *(_QWORD *)(v46 + 48) = v54;
  *(_QWORD *)(v46 + 56) = v56;
  v80 = v46;
  v57 = sub_100005D40(&qword_1001C01A8);
  sub_100016A54(&qword_1001C01B0, &qword_1001C01A8);
  v59 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v57, v58);
  v61 = v60;
  v62 = swift_bridgeObjectRelease(v46);
  v80 = v59;
  v81 = v61;
  ModifiedContent<>.accessibilityValue<A>(_:)(&v80, v72, &type metadata for String, v44, v62);
  swift_bridgeObjectRelease(v61);
  sub_100016904(v78, &qword_1001C0190);
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v72);
  sub_100016904(v71, &qword_1001C0190);
}

void sub_1000410F8(double a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  __n128 v46;
  double v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t KeyPath;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  __n128 v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char v143;
  _DWORD *v144;
  double v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  double v150;
  uint64_t v151;
  void (*v152)(_DWORD *, uint64_t);
  double v153;
  uint64_t v154;
  double v155;
  uint64_t v156;
  char v157;
  double v158;
  double v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  double v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  _DWORD *v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  int *v200;
  uint64_t v201;
  uint64_t v202;
  double v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD v207[2];
  _OWORD v208[3];

  v203 = a1;
  v194 = a2;
  v182 = type metadata accessor for LayoutDirection(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (_DWORD *)((char *)&v170 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v179 = type metadata accessor for WeatherFormatPlaceholder(0);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (char *)&v170 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v172 = *(_QWORD *)(v176 - 8);
  v5 = __chkstk_darwin(v176);
  v175 = (char *)&v170 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v171 = (char *)&v170 - v7;
  v174 = sub_100005D40(&qword_1001BF090);
  v192 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v173 = (char *)&v170 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = (_DWORD *)type metadata accessor for ConditionImage(0);
  __chkstk_darwin(v189);
  v187 = (uint64_t *)((char *)&v170 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v195 = sub_100005D40(&qword_1001BF5E8);
  __chkstk_darwin(v195);
  v188 = (uint64_t)&v170 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_100005D40(&qword_1001BF5F0);
  __chkstk_darwin(v199);
  v198 = (uint64_t)&v170 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001C01B8);
  v13 = __chkstk_darwin(v12);
  v206 = (uint64_t)&v170 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v205 = (uint64_t)&v170 - v15;
  v190 = type metadata accessor for ColorSchemeContrast(0);
  v186 = *(_QWORD *)(v190 - 8);
  v16 = __chkstk_darwin(v190);
  v185 = (char *)&v170 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v184 = (char *)&v170 - v18;
  v202 = type metadata accessor for Font.Context(0);
  v197 = *(_QWORD **)(v202 - 8);
  __chkstk_darwin(v202);
  v20 = (_DWORD *)((char *)&v170 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v200 = (int *)type metadata accessor for HourlyForecastViewModel(0);
  v21 = (_QWORD *)(*(_QWORD *)&a1 + v200[7]);
  v22 = v21[1];
  *(_QWORD *)&v208[0] = *v21;
  *((_QWORD *)&v208[0] + 1) = v22;
  v23 = sub_10001692C();
  swift_bridgeObjectRetain(v22);
  v170 = v23;
  v24 = Text.init<A>(_:)(v208, &type metadata for String, v23);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  v31 = static Color.white.getter(v24);
  *(_QWORD *)&v208[0] = v31;
  v32 = Text.foregroundStyle<A>(_:)(v208, v24, v26, v30, v28, &type metadata for Color, &protocol witness table for Color);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  sub_100016868(v24, v26, v30);
  swift_release(v31);
  swift_bridgeObjectRelease(v28);
  v67 = type metadata accessor for HourlyBannerCell(0);
  v196 = *(_QWORD *)&v203 + *(int *)(v67 + 20);
  v183 = *(_QWORD *)(v196 + 8);
  v39 = Text.font(_:)(v183, v32, v34, v38, v36);
  v41 = v40;
  v43 = v42;
  v45 = v44 & 1;
  sub_100016868(v32, v34, v38);
  v46 = swift_bridgeObjectRelease(v36);
  v47 = static Font.Weight.semibold.getter(v46);
  v201 = Text.fontWeight(_:)(*(_QWORD *)&v47, 0, v39, v41, v45, v43);
  v193 = v48;
  v191 = v49;
  v204 = v50;
  sub_100016868(v39, v41, v45);
  swift_bridgeObjectRelease(v43);
  v51 = v203;
  v52 = *(_QWORD *)&v203 + *(int *)(v67 + 24);
  sub_1000C5030(v20);
  v53 = Font.ascender(in:)(v20, v183);
  v54 = (_QWORD *)v197[1];
  v55 = v202;
  ((void (*)(_DWORD *, uint64_t))v54)(v20, v202);
  v56 = v54;
  v57 = v196;
  v58 = *(_QWORD *)(v196 + 8);
  sub_1000C5030(v20);
  v59 = Font.capHeight(in:)(v20, v58);
  ((void (*)(_DWORD *, uint64_t))v56)(v20, v55);
  v197 = v56;
  v60 = *(_QWORD *)(v57 + 8);
  v61 = v57;
  sub_1000C5030(v20);
  v62 = Font.exuberatedLineHeightAmount(in:)(v20, v60);
  ((void (*)(_DWORD *, uint64_t))v56)(v20, v55);
  v183 = v67;
  v63 = v184;
  sub_1000C548C(v184);
  v64 = v186;
  v65 = v185;
  v66 = v190;
  (*(void (**)(char *, _QWORD, uint64_t))(v186 + 104))(v185, enum case for ColorSchemeContrast.increased(_:), v190);
  LODWORD(v67) = static ColorSchemeContrast.== infix(_:_:)(v63, v65);
  v68 = *(void (**)(char *, uint64_t))(v64 + 8);
  v68(v65, v66);
  v68(v63, v66);
  v190 = *(_QWORD *)(v61 + 40);
  v69 = *(_QWORD *)&v51 + v200[9];
  v70 = type metadata accessor for ConditionViewModel(0);
  v71 = (uint64_t *)(v69 + *(int *)(v70 + 24));
  v73 = *v71;
  v72 = v71[1];
  LOBYTE(v69) = *(_BYTE *)(v69 + *(int *)(v70 + 40));
  KeyPath = swift_getKeyPath(&unk_10017C018);
  v75 = (uint64_t)v187;
  *v187 = KeyPath;
  v76 = sub_100005D40(&qword_1001BF3C0);
  swift_storeEnumTagMultiPayload(v75, v76, 0);
  v77 = v189;
  v78 = (_QWORD *)(v75 + (int)v189[5]);
  *v78 = v73;
  v78[1] = v72;
  *(_BYTE *)(v75 + (int)v77[6]) = v69;
  v79 = *(_QWORD *)(v61 + 16);
  v80 = swift_getKeyPath(&unk_10017C048);
  v81 = v188;
  sub_10000F7C4(v75, v188, type metadata accessor for ConditionImage);
  v82 = (uint64_t *)(v81 + *(int *)(v195 + 36));
  *v82 = v80;
  v82[1] = v79;
  swift_bridgeObjectRetain(v72);
  swift_retain(v79);
  sub_100011894(v75, type metadata accessor for ConditionImage);
  v83 = *(_QWORD *)(v61 + 16);
  v84 = v52;
  sub_1000C5030(v20);
  v85 = Font.lineHeightNotIncludingExuberatedAmount(in:)(v20, v83);
  v189 = v20;
  v86 = ((uint64_t (*)(_DWORD *, uint64_t))v197)(v20, v202);
  v87 = static Alignment.center.getter(v86);
  _FrameLayout.init(width:height:alignment:)(v208, 0, 1, *(_QWORD *)&v85, 0, v87, v88);
  v89 = v198;
  sub_1000168D8(v81, v198, &qword_1001BF5E8);
  v90 = v199;
  v91 = (_OWORD *)(v89 + *(int *)(v199 + 36));
  v92 = v208[1];
  *v91 = v208[0];
  v91[1] = v92;
  v91[2] = v208[2];
  sub_100016904(v81, &qword_1001BF5E8);
  v93 = sub_100043F8C(&qword_1001C01C0, &qword_1001BF5F0, (void (*)(void))sub_100043FF4);
  v94 = v206;
  View.accessibility(hidden:)(1, v90, v93);
  sub_100016904(v89, &qword_1001BF5F0);
  sub_1000168AC(v94, v205, &qword_1001C01B8);
  v199 = 0;
  v95 = 0;
  v198 = 0;
  v195 = 0;
  v96 = 0;
  v97 = 0.0;
  v98 = 0.0;
  if (*(_BYTE *)(v61 + 48) == 1)
  {
    v199 = *(_QWORD *)(v61 + 40);
    v99 = v173;
    v100 = v174;
    v101 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v192 + 16))(v173, *(_QWORD *)&v203 + v200[6], v174);
    v102 = v171;
    v103 = static WeatherFormatStyle<>.weather.getter(v101);
    LODWORD(v200) = v67;
    v104 = v175;
    NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v103);
    v195 = *(_QWORD *)(v172 + 8);
    v105 = v176;
    ((void (*)(char *, uint64_t))v195)(v102, v176);
    v198 = v84;
    v106 = v178;
    v107 = v177;
    v108 = v179;
    (*(void (**)(char *, _QWORD, uint64_t))(v178 + 104))(v177, enum case for WeatherFormatPlaceholder.none(_:), v179);
    v109 = type metadata accessor for UnitManager(0);
    v110 = static UnitManager.standard.getter(v109);
    sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
    v111 = Measurement.formatted<A>(_:placeholder:unitManager:)(v104, v107, v110, &protocol witness table for UnitManager, v100, v105);
    v113 = v112;
    swift_release(v110);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v108);
    ((void (*)(char *, uint64_t))v195)(v104, v105);
    (*(void (**)(char *, uint64_t))(v192 + 8))(v99, v100);
    v207[0] = v111;
    v207[1] = v113;
    v114 = Text.init<A>(_:)(v207, &type metadata for String, v170);
    v116 = v115;
    v118 = v117;
    v120 = v119 & 1;
    v121 = static Color.white.getter(v114);
    v122 = Text.foregroundColor(_:)(v121, v114, v116, v120, v118);
    v124 = v123;
    LOBYTE(v104) = v125;
    v127 = v126;
    swift_release(v121);
    LOBYTE(v121) = v104 & 1;
    sub_100016868(v114, v116, v120);
    swift_bridgeObjectRelease(v118);
    v128 = v196;
    v129 = Text.font(_:)(*(_QWORD *)(v196 + 24), v122, v124, v104 & 1, v127);
    v131 = v130;
    v133 = v132;
    v67 = v134 & 1;
    sub_100016868(v122, v124, v121);
    v135 = swift_bridgeObjectRelease(v127);
    v136 = static Font.Weight.semibold.getter(v135);
    v137 = Text.fontWeight(_:)(*(_QWORD *)&v136, 0, v129, v131, v67, v133);
    v139 = v138;
    v192 = v140;
    v142 = v141 & 1;
    v143 = v67;
    LOBYTE(v67) = (_BYTE)v200;
    sub_100016868(v129, v131, v143);
    swift_bridgeObjectRelease(v133);
    v144 = v180;
    sub_1000C5058(v180);
    v145 = LayoutDirection.temperatureOffsetDirection.getter();
    (*(void (**)(_DWORD *, uint64_t))(v181 + 8))(v144, v182);
    v146 = v145 * *(double *)(v128 + 32);
    v147 = *(_QWORD *)(v128 + 24);
    v148 = v128;
    v149 = v189;
    sub_1000C5030(v189);
    v150 = Font.descender(in:)(v149, v147);
    v151 = v202;
    v152 = (void (*)(_DWORD *, uint64_t))v197;
    ((void (*)(_DWORD *, uint64_t))v197)(v149, v202);
    v153 = -v150;
    v154 = *(_QWORD *)(v148 + 24);
    sub_1000C5030(v149);
    v155 = Font.exuberatedLineHeightAmount(in:)(v149, v154);
    v152(v149, v151);
    sub_100016828(v137, v139, v142);
    v156 = v192;
    swift_bridgeObjectRetain(v192);
    v95 = v137;
    v198 = v139;
    v195 = v142;
    sub_100016868(v137, v139, v142);
    v96 = v156;
    swift_bridgeObjectRelease(v156);
    v97 = v146;
    v98 = v153 - v155;
  }
  v203 = v98;
  v157 = v191 & 1;
  v158 = v59 - v53 + v62;
  if ((v67 & 1) != 0)
    v159 = 1.0;
  else
    v159 = 0.7;
  v160 = v206;
  sub_1000168D8(v205, v206, &qword_1001C01B8);
  v161 = v194;
  v162 = v201;
  v163 = v193;
  *v194 = v201;
  v161[1] = v163;
  *((_BYTE *)v161 + 16) = v157;
  v161[3] = v204;
  v161[4] = 0;
  *((double *)v161 + 5) = v158;
  *((double *)v161 + 6) = v159;
  v161[7] = v190;
  *((_BYTE *)v161 + 64) = 0;
  v164 = sub_100005D40(&qword_1001C01D0);
  sub_1000168D8(v160, (uint64_t)v161 + *(int *)(v164 + 64), &qword_1001C01B8);
  v165 = (_QWORD *)((char *)v161 + *(int *)(v164 + 80));
  v166 = v199;
  *v165 = v199;
  v165[1] = 0;
  v167 = v198;
  v165[2] = v95;
  v165[3] = v167;
  v168 = v195;
  v165[4] = v195;
  v165[5] = v96;
  v169 = v203;
  *((double *)v165 + 6) = v97;
  *((double *)v165 + 7) = v169;
  sub_100016828(v162, v163, v157);
  swift_bridgeObjectRetain(v204);
  sub_100044090(v166, 0, v95, v167, v168, v96);
  sub_100016904(v205, &qword_1001C01B8);
  sub_1000440CC(v166, 0, v95, v167, v168, v96);
  sub_100016904(v206, &qword_1001C01B8);
  sub_100016868(v201, v163, v157);
  swift_bridgeObjectRelease(v204);
}

void sub_100041F00(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v4;

  v4 = swift_allocObject(&unk_1001B5630, 24, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *a2 = sub_100044118;
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v4;
  sub_100006338();
}

uint64_t sub_100041F40@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v20[2];

  v4 = type metadata accessor for NamedCoordinateSpace(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static Color.clear.getter(v6);
  v10 = sub_100005D40(&qword_1001C01D8);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10017BD10;
  v20[0] = 0xD000000000000010;
  v20[1] = 0x800000010017BD00;
  static CoordinateSpaceProtocol<>.named<A>(_:)(v20, &type metadata for String, &protocol witness table for String);
  v12 = GeometryProxy.frame<A>(in:)(v8, v4, &protocol witness table for NamedCoordinateSpace);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  *(_QWORD *)(v11 + 32) = a1;
  *(double *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = v14;
  *(_QWORD *)(v11 + 56) = v16;
  *(_QWORD *)(v11 + 64) = v18;
  *(_QWORD *)a2 = v9;
  *(_WORD *)(a2 + 8) = 256;
  *(_QWORD *)(a2 + 16) = v11;
  return result;
}

void sub_100042084(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t *v1;

  sub_100041F00(*v1, a1);
}

unint64_t sub_10004208C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0038;
  if (!qword_1001C0038)
  {
    v1 = sub_100005DC4(&qword_1001C0008);
    sub_100042110();
    sub_100016A54(&qword_1001C0090, &qword_1001C0098);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0038);
  }
  return result;
}

unint64_t sub_100042110()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0040;
  if (!qword_1001C0040)
  {
    v1 = sub_100005DC4(&qword_1001C0000);
    sub_100016A54(&qword_1001C0048, &qword_1001C0050);
    sub_100042194();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0040);
  }
  return result;
}

unint64_t sub_100042194()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0058;
  if (!qword_1001C0058)
  {
    v1 = sub_100005DC4(&qword_1001C0060);
    sub_1000421F8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0058);
  }
  return result;
}

unint64_t sub_1000421F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0068;
  if (!qword_1001C0068)
  {
    v1 = sub_100005DC4(&qword_1001C0070);
    sub_100016878(&qword_1001C0078, type metadata accessor for HourlyBannerCell);
    sub_100016A54(&qword_1001C0080, &qword_1001C0088);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0068);
  }
  return result;
}

uint64_t type metadata accessor for HourlyBannerCell(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C0110, (uint64_t)&nominal type descriptor for HourlyBannerCell);
}

uint64_t sub_1000422A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for HourlyBannerView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for Font.Context(0);
    sub_100016A94(v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_100042360(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HourlyBannerView(0) - 8) + 80);
  sub_10003FAC4(a1, (uint64_t *)(v2 + ((v5 + 16) & ~v5)), a2);
}

unint64_t sub_1000423AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C00A8;
  if (!qword_1001C00A8)
  {
    v1 = sub_100005DC4(&qword_1001C00A0);
    sub_100042418();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C00A8);
  }
  return result;
}

unint64_t sub_100042418()
{
  unint64_t result;

  result = qword_1001C00B0;
  if (!qword_1001C00B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1001C00B0);
  }
  return result;
}

void sub_100042458()
{
  EnvironmentValues.layoutDirection.getter();
  sub_100006338();
}

void sub_100042474()
{
  EnvironmentValues.layoutDirection.getter();
  sub_100006338();
}

void sub_100042490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for LayoutDirection(0);
  __chkstk_darwin(v3);
  sub_1000443F0();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v1, a1);
  EnvironmentValues.layoutDirection.setter(v1);
  sub_1000443A4();
}

void type metadata accessor for PreferenceViewSetter()
{
  sub_100044408();
}

uint64_t *sub_100042508(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v91;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v70 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v70 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v70);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = (int *)type metadata accessor for HourlyForecastViewModel(0);
    v10 = v9[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = v9[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = sub_100005D40(&qword_1001BF090);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = v9[7];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = v9[8];
    v23 = (uint64_t *)((char *)a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = v9[9];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v25);
    v8((uint64_t *)v27, (uint64_t *)v28, v7);
    v29 = (int *)type metadata accessor for ConditionViewModel(0);
    v30 = v29[5];
    v31 = &v27[v30];
    v32 = &v28[v30];
    v33 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
    v34 = v29[6];
    v35 = &v27[v34];
    v36 = &v28[v34];
    v37 = *((_QWORD *)v36 + 1);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *((_QWORD *)v35 + 1) = v37;
    v38 = v29[7];
    v39 = &v27[v38];
    v40 = &v28[v38];
    v41 = *((_QWORD *)v40 + 1);
    *(_QWORD *)v39 = *(_QWORD *)v40;
    *((_QWORD *)v39 + 1) = v41;
    v27[v29[8]] = v28[v29[8]];
    v27[v29[9]] = v28[v29[9]];
    v27[v29[10]] = v28[v29[10]];
    *(uint64_t *)((char *)a1 + v9[10]) = *(uint64_t *)((char *)a2 + v9[10]);
    v42 = v9[11];
    v43 = (uint64_t *)((char *)a1 + v42);
    v44 = (uint64_t *)((char *)a2 + v42);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = v9[12];
    v91 = (char *)a1 + v46;
    v47 = (char *)a2 + v46;
    v48 = type metadata accessor for Precipitation(0);
    v49 = a3;
    v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v45);
    v50(v91, v47, v48);
    v51 = v49;
    v52 = v9[13];
    v53 = (char *)a1 + v52;
    v54 = (char *)a2 + v52;
    v55 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
    v56 = *(int *)(v49 + 20);
    v57 = *(int *)(v49 + 24);
    v58 = (char *)a1 + v56;
    v59 = (char *)a2 + v56;
    v60 = *(_QWORD *)v59;
    v61 = *((_QWORD *)v59 + 1);
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *((_QWORD *)v58 + 1) = v61;
    v62 = *((_OWORD *)v59 + 2);
    v58[48] = v59[48];
    v63 = *((_QWORD *)v59 + 2);
    v64 = *((_QWORD *)v59 + 3);
    *((_QWORD *)v58 + 2) = v63;
    *((_QWORD *)v58 + 3) = v64;
    *((_OWORD *)v58 + 2) = v62;
    v65 = (uint64_t *)((char *)a1 + v57);
    v66 = (uint64_t *)((char *)a2 + v57);
    swift_bridgeObjectRetain(v60);
    swift_retain(v61);
    swift_retain(v63);
    swift_retain(v64);
    v67 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v66, v67) == 1)
    {
      v68 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v65, v66, v68);
      v69 = 1;
    }
    else
    {
      v71 = *v66;
      *v65 = *v66;
      swift_retain(v71);
      v69 = 0;
    }
    swift_storeEnumTagMultiPayload(v65, v67, v69);
    v72 = *(int *)(v51 + 28);
    v73 = (uint64_t *)((char *)a1 + v72);
    v74 = (uint64_t *)((char *)a2 + v72);
    v75 = sub_100005D40(&qword_1001BF488);
    if (swift_getEnumCaseMultiPayload(v74, v75) == 1)
    {
      v76 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v73, v74, v76);
      v77 = v73;
      v78 = v75;
      v79 = 1;
    }
    else
    {
      v80 = *v74;
      *v73 = *v74;
      swift_retain(v80);
      v77 = v73;
      v78 = v75;
      v79 = 0;
    }
    swift_storeEnumTagMultiPayload(v77, v78, v79);
    v81 = *(int *)(v51 + 32);
    v82 = (uint64_t *)((char *)a1 + v81);
    v83 = (uint64_t *)((char *)a2 + v81);
    v84 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v83, v84) == 1)
    {
      v85 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v82, v83, v85);
      v86 = v82;
      v87 = v84;
      v88 = 1;
    }
    else
    {
      v89 = *v83;
      *v82 = *v83;
      swift_retain(v89);
      v86 = v82;
      v87 = v84;
      v88 = 0;
    }
    swift_storeEnumTagMultiPayload(v86, v87, v88);
  }
  return a1;
}

uint64_t sub_100042934(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (int *)type metadata accessor for HourlyForecastViewModel(0);
  v7 = a1 + v6[5];
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + v6[6];
  v10 = sub_100005D40(&qword_1001BF090);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[7] + 8));
  v11 = swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[8] + 8));
  v12 = a1 + v6[9];
  ((void (*)(uint64_t, uint64_t, __n128))v5)(v12, v4, v11);
  v13 = (int *)type metadata accessor for ConditionViewModel(0);
  v14 = v12 + v13[5];
  v15 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[11] + 8));
  v16 = a1 + v6[12];
  v17 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = a1 + v6[13];
  v19 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = (_QWORD *)(a1 + a2[5]);
  swift_bridgeObjectRelease(*v20);
  swift_release(v20[1]);
  swift_release(v20[2]);
  swift_release(v20[3]);
  v21 = (_QWORD *)(a1 + a2[6]);
  v22 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
  }
  else
  {
    swift_release(*v21);
  }
  v24 = (_QWORD *)(a1 + a2[7]);
  v25 = sub_100005D40(&qword_1001BF488);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v24, v26);
  }
  else
  {
    swift_release(*v24);
  }
  v27 = (_QWORD *)(a1 + a2[8]);
  v28 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v27, v28) != 1)
    return swift_release(*v27);
  v29 = type metadata accessor for ColorSchemeContrast(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v27, v29);
}

uint64_t sub_100042BD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for HourlyForecastViewModel(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = v7[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = v7[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = v7[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  v6(v25, v26, v5);
  v27 = (int *)type metadata accessor for ConditionViewModel(0);
  v28 = v27[5];
  v29 = v25 + v28;
  v30 = v26 + v28;
  v31 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  v32 = v27[6];
  v33 = (_QWORD *)(v25 + v32);
  v34 = (_QWORD *)(v26 + v32);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = v27[7];
  v37 = (_QWORD *)(v25 + v36);
  v38 = (_QWORD *)(v26 + v36);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  *(_BYTE *)(v25 + v27[8]) = *(_BYTE *)(v26 + v27[8]);
  *(_BYTE *)(v25 + v27[9]) = *(_BYTE *)(v26 + v27[9]);
  *(_BYTE *)(v25 + v27[10]) = *(_BYTE *)(v26 + v27[10]);
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  v40 = v7[11];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (_QWORD *)(a2 + v40);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  v44 = v7[12];
  v45 = a1 + v44;
  v46 = a2 + v44;
  v47 = type metadata accessor for Precipitation(0);
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v43);
  v48(v45, v46, v47);
  v49 = v7[13];
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
  v53 = a3[5];
  v54 = a3[6];
  v55 = a1 + v53;
  v56 = (uint64_t *)(a2 + v53);
  v57 = *v56;
  v58 = v56[1];
  *(_QWORD *)v55 = *v56;
  *(_QWORD *)(v55 + 8) = v58;
  v59 = *((_OWORD *)v56 + 2);
  *(_BYTE *)(v55 + 48) = *((_BYTE *)v56 + 48);
  v60 = v56[2];
  v61 = v56[3];
  *(_QWORD *)(v55 + 16) = v60;
  *(_QWORD *)(v55 + 24) = v61;
  *(_OWORD *)(v55 + 32) = v59;
  v62 = (uint64_t *)(a1 + v54);
  v63 = (uint64_t *)(a2 + v54);
  swift_bridgeObjectRetain(v57);
  swift_retain(v58);
  swift_retain(v60);
  swift_retain(v61);
  v64 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v63, v64) == 1)
  {
    v65 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v62, v63, v65);
    v66 = 1;
  }
  else
  {
    v67 = *v63;
    *v62 = *v63;
    swift_retain(v67);
    v66 = 0;
  }
  swift_storeEnumTagMultiPayload(v62, v64, v66);
  v68 = a3[7];
  v69 = (uint64_t *)(a1 + v68);
  v70 = (uint64_t *)(a2 + v68);
  v71 = sub_100005D40(&qword_1001BF488);
  if (swift_getEnumCaseMultiPayload(v70, v71) == 1)
  {
    v72 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v69, v70, v72);
    v73 = v69;
    v74 = v71;
    v75 = 1;
  }
  else
  {
    v76 = *v70;
    *v69 = *v70;
    swift_retain(v76);
    v73 = v69;
    v74 = v71;
    v75 = 0;
  }
  swift_storeEnumTagMultiPayload(v73, v74, v75);
  v77 = a3[8];
  v78 = (uint64_t *)(a1 + v77);
  v79 = (uint64_t *)(a2 + v77);
  v80 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v79, v80) == 1)
  {
    v81 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v78, v79, v81);
    v82 = v78;
    v83 = v80;
    v84 = 1;
  }
  else
  {
    v85 = *v79;
    *v78 = *v79;
    swift_retain(v85);
    v82 = v78;
    v83 = v80;
    v84 = 0;
  }
  swift_storeEnumTagMultiPayload(v82, v83, v84);
  return a1;
}

uint64_t sub_100042FD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for HourlyForecastViewModel(0);
  v9 = v8[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = v8[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = v8[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = v8[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  v27 = swift_bridgeObjectRelease(v26);
  v28 = v8[9];
  v29 = a1 + v28;
  v30 = a2 + v28;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v7)(a1 + v28, a2 + v28, v6, v27);
  v31 = (int *)type metadata accessor for ConditionViewModel(0);
  v32 = v31[5];
  v33 = v29 + v32;
  v34 = v30 + v32;
  v35 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
  v36 = v31[6];
  v37 = (_QWORD *)(v29 + v36);
  v38 = (_QWORD *)(v30 + v36);
  *v37 = *v38;
  v39 = v38[1];
  v40 = v37[1];
  v37[1] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = v31[7];
  v42 = (_QWORD *)(v29 + v41);
  v43 = (_QWORD *)(v30 + v41);
  *v42 = *v43;
  v44 = v43[1];
  v45 = v42[1];
  v42[1] = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(_BYTE *)(v29 + v31[8]) = *(_BYTE *)(v30 + v31[8]);
  *(_BYTE *)(v29 + v31[9]) = *(_BYTE *)(v30 + v31[9]);
  *(_BYTE *)(v29 + v31[10]) = *(_BYTE *)(v30 + v31[10]);
  *(_QWORD *)(a1 + v8[10]) = *(_QWORD *)(a2 + v8[10]);
  v46 = v8[11];
  v47 = (_QWORD *)(a1 + v46);
  v48 = (_QWORD *)(a2 + v46);
  *v47 = *v48;
  v49 = v48[1];
  v50 = v47[1];
  v47[1] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  v51 = v8[12];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v52, v53, v54);
  v55 = v8[13];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 24))(v56, v57, v58);
  v59 = a3[5];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = *(_QWORD *)(a2 + v59);
  v63 = *(_QWORD *)(a1 + v59);
  *(_QWORD *)(a1 + v59) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  v64 = *(_QWORD *)(v61 + 8);
  v65 = *(_QWORD *)(v60 + 8);
  *(_QWORD *)(v60 + 8) = v64;
  swift_retain(v64);
  swift_release(v65);
  v66 = *(_QWORD *)(v61 + 16);
  v67 = *(_QWORD *)(v60 + 16);
  *(_QWORD *)(v60 + 16) = v66;
  swift_retain(v66);
  swift_release(v67);
  v68 = *(_QWORD *)(v61 + 24);
  v69 = *(_QWORD *)(v60 + 24);
  *(_QWORD *)(v60 + 24) = v68;
  swift_retain(v68);
  swift_release(v69);
  *(_QWORD *)(v60 + 32) = *(_QWORD *)(v61 + 32);
  *(_QWORD *)(v60 + 40) = *(_QWORD *)(v61 + 40);
  *(_BYTE *)(v60 + 48) = *(_BYTE *)(v61 + 48);
  if (a1 != a2)
  {
    v70 = a3[6];
    v71 = (uint64_t *)(a1 + v70);
    v72 = (uint64_t *)(a2 + v70);
    sub_100016904(a1 + v70, &qword_1001BF0C8);
    v73 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v72, v73) == 1)
    {
      v74 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v71, v72, v74);
      v75 = 1;
    }
    else
    {
      v76 = *v72;
      *v71 = *v72;
      swift_retain(v76);
      v75 = 0;
    }
    swift_storeEnumTagMultiPayload(v71, v73, v75);
    v77 = a3[7];
    v78 = (uint64_t *)(a1 + v77);
    v79 = (uint64_t *)(a2 + v77);
    sub_100016904(a1 + v77, &qword_1001BF488);
    v80 = sub_100005D40(&qword_1001BF488);
    if (swift_getEnumCaseMultiPayload(v79, v80) == 1)
    {
      v81 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v78, v79, v81);
      v82 = v78;
      v83 = v80;
      v84 = 1;
    }
    else
    {
      v85 = *v79;
      *v78 = *v79;
      swift_retain(v85);
      v82 = v78;
      v83 = v80;
      v84 = 0;
    }
    swift_storeEnumTagMultiPayload(v82, v83, v84);
    v86 = a3[8];
    v87 = (uint64_t *)(a1 + v86);
    v88 = (uint64_t *)(a2 + v86);
    sub_100016904(a1 + v86, &qword_1001BF490);
    v89 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v88, v89) == 1)
    {
      v90 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v87, v88, v90);
      v91 = v87;
      v92 = v89;
      v93 = 1;
    }
    else
    {
      v94 = *v88;
      *v87 = *v88;
      swift_retain(v94);
      v91 = v87;
      v92 = v89;
      v93 = 0;
    }
    swift_storeEnumTagMultiPayload(v91, v92, v93);
  }
  return a1;
}

uint64_t sub_100043484(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for HourlyForecastViewModel(0);
  v9 = v8[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = v8[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  *(_OWORD *)(a1 + v8[7]) = *(_OWORD *)(a2 + v8[7]);
  *(_OWORD *)(a1 + v8[8]) = *(_OWORD *)(a2 + v8[8]);
  v17 = v8[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v7(a1 + v17, a2 + v17, v6);
  v20 = (int *)type metadata accessor for ConditionViewModel(0);
  v21 = v20[5];
  v22 = v18 + v21;
  v23 = v19 + v21;
  v24 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  *(_OWORD *)(v18 + v20[6]) = *(_OWORD *)(v19 + v20[6]);
  *(_OWORD *)(v18 + v20[7]) = *(_OWORD *)(v19 + v20[7]);
  *(_BYTE *)(v18 + v20[8]) = *(_BYTE *)(v19 + v20[8]);
  *(_BYTE *)(v18 + v20[9]) = *(_BYTE *)(v19 + v20[9]);
  *(_BYTE *)(v18 + v20[10]) = *(_BYTE *)(v19 + v20[10]);
  *(_QWORD *)(a1 + v8[10]) = *(_QWORD *)(a2 + v8[10]);
  *(_OWORD *)(a1 + v8[11]) = *(_OWORD *)(a2 + v8[11]);
  v25 = v8[12];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  v29 = v8[13];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
  v33 = a3[5];
  v34 = a3[6];
  v35 = a1 + v33;
  v36 = a2 + v33;
  v37 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v37;
  *(_OWORD *)(v35 + 32) = *(_OWORD *)(v36 + 32);
  *(_BYTE *)(v35 + 48) = *(_BYTE *)(v36 + 48);
  v38 = (void *)(a1 + v34);
  v39 = (const void *)(a2 + v34);
  v40 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
  {
    v41 = type metadata accessor for Font.Context(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v38, v39, v41);
    swift_storeEnumTagMultiPayload(v38, v40, 1);
  }
  else
  {
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  v42 = a3[7];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  v45 = sub_100005D40(&qword_1001BF488);
  if (swift_getEnumCaseMultiPayload(v44, v45) == 1)
  {
    v46 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v43, v44, v46);
    swift_storeEnumTagMultiPayload(v43, v45, 1);
  }
  else
  {
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  v47 = a3[8];
  v48 = (void *)(a1 + v47);
  v49 = (const void *)(a2 + v47);
  v50 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
  {
    v51 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v48, v49, v51);
    swift_storeEnumTagMultiPayload(v48, v50, 1);
  }
  else
  {
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000437F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const void *v83;
  uint64_t v84;
  uint64_t v85;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for HourlyForecastViewModel(0);
  v9 = v8[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = v8[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = v8[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  v22 = v18[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  v23 = v8[8];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  v28 = v24[1];
  *v24 = v27;
  v24[1] = v26;
  v29 = swift_bridgeObjectRelease(v28);
  v30 = v8[9];
  v31 = a1 + v30;
  v32 = a2 + v30;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v7)(a1 + v30, a2 + v30, v6, v29);
  v33 = (int *)type metadata accessor for ConditionViewModel(0);
  v34 = v33[5];
  v35 = v31 + v34;
  v36 = v32 + v34;
  v37 = type metadata accessor for WeatherCondition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
  v38 = v33[6];
  v39 = (_QWORD *)(v31 + v38);
  v40 = (uint64_t *)(v32 + v38);
  v42 = *v40;
  v41 = v40[1];
  v43 = v39[1];
  *v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease(v43);
  v44 = v33[7];
  v45 = (_QWORD *)(v31 + v44);
  v46 = (uint64_t *)(v32 + v44);
  v48 = *v46;
  v47 = v46[1];
  v49 = v45[1];
  *v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease(v49);
  *(_BYTE *)(v31 + v33[8]) = *(_BYTE *)(v32 + v33[8]);
  *(_BYTE *)(v31 + v33[9]) = *(_BYTE *)(v32 + v33[9]);
  *(_BYTE *)(v31 + v33[10]) = *(_BYTE *)(v32 + v33[10]);
  *(_QWORD *)(a1 + v8[10]) = *(_QWORD *)(a2 + v8[10]);
  v50 = v8[11];
  v51 = (_QWORD *)(a1 + v50);
  v52 = (uint64_t *)(a2 + v50);
  v54 = *v52;
  v53 = v52[1];
  v55 = v51[1];
  *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease(v55);
  v56 = v8[12];
  v57 = a1 + v56;
  v58 = a2 + v56;
  v59 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 40))(v57, v58, v59);
  v60 = v8[13];
  v61 = a1 + v60;
  v62 = a2 + v60;
  v63 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 40))(v61, v62, v63);
  v64 = a3[5];
  v65 = a1 + v64;
  v66 = a2 + v64;
  v67 = *(_QWORD *)(a1 + v64);
  *(_QWORD *)(a1 + v64) = *(_QWORD *)(a2 + v64);
  swift_bridgeObjectRelease(v67);
  v68 = *(_QWORD *)(v65 + 8);
  *(_QWORD *)(v65 + 8) = *(_QWORD *)(v66 + 8);
  swift_release(v68);
  v69 = *(_QWORD *)(v65 + 16);
  *(_QWORD *)(v65 + 16) = *(_QWORD *)(v66 + 16);
  swift_release(v69);
  v70 = *(_QWORD *)(v65 + 24);
  *(_QWORD *)(v65 + 24) = *(_QWORD *)(v66 + 24);
  swift_release(v70);
  *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
  *(_BYTE *)(v65 + 48) = *(_BYTE *)(v66 + 48);
  if (a1 != a2)
  {
    v71 = a3[6];
    v72 = (void *)(a1 + v71);
    v73 = (const void *)(a2 + v71);
    sub_100016904(a1 + v71, &qword_1001BF0C8);
    v74 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v73, v74) == 1)
    {
      v75 = type metadata accessor for Font.Context(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v72, v73, v75);
      swift_storeEnumTagMultiPayload(v72, v74, 1);
    }
    else
    {
      memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    v76 = a3[7];
    v77 = (void *)(a1 + v76);
    v78 = (const void *)(a2 + v76);
    sub_100016904(a1 + v76, &qword_1001BF488);
    v79 = sub_100005D40(&qword_1001BF488);
    if (swift_getEnumCaseMultiPayload(v78, v79) == 1)
    {
      v80 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v77, v78, v80);
      swift_storeEnumTagMultiPayload(v77, v79, 1);
    }
    else
    {
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    }
    v81 = a3[8];
    v82 = (void *)(a1 + v81);
    v83 = (const void *)(a2 + v81);
    sub_100016904(a1 + v81, &qword_1001BF490);
    v84 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v83, v84) == 1)
    {
      v85 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v82, v83, v85);
      swift_storeEnumTagMultiPayload(v82, v84, 1);
    }
    else
    {
      memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100043C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100043C3C);
}

void sub_100043C3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  sub_1000443D0();
  sub_10001C6C0();
  if (v11)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    if ((_DWORD)v3 == 0x7FFFFFFF)
    {
      sub_100044448(*(_QWORD *)(v4 + a3[5]));
      sub_1000443A4();
      return;
    }
    sub_100005D40(&qword_1001BF0D0);
    sub_10001C6C0();
    if (v11)
    {
      v7 = v9;
      v10 = a3[6];
    }
    else
    {
      sub_100005D40(&qword_1001BF4A0);
      sub_10001C6C0();
      if (v11)
      {
        v7 = v12;
        v10 = a3[7];
      }
      else
      {
        v7 = sub_100005D40(&qword_1001BF4A8);
        v10 = a3[8];
      }
    }
    v8 = v4 + v10;
  }
  sub_100016B50(v8, v3, v7);
}

uint64_t sub_100043CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100043CF8);
}

void sub_100043CF8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_1000443D0();
  sub_10001C6D0();
  if (v13)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(v5 + a4[5]) = (v4 - 1);
      sub_1000443A4();
      return;
    }
    sub_100005D40(&qword_1001BF0D0);
    sub_10001C6D0();
    if (v13)
    {
      v9 = v11;
      v12 = a4[6];
    }
    else
    {
      sub_100005D40(&qword_1001BF4A0);
      sub_10001C6D0();
      if (v13)
      {
        v9 = v14;
        v12 = a4[7];
      }
      else
      {
        v9 = sub_100005D40(&qword_1001BF4A8);
        v12 = a4[8];
      }
    }
    v10 = v5 + v12;
  }
  sub_100016B44(v10, v4, v4, v9);
}

void sub_100043DB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[5];

  v2 = type metadata accessor for HourlyForecastViewModel(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = "1";
    sub_10001C028(319, (unint64_t *)&qword_1001BF140, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001C028(319, &qword_1001BF520, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001C028(319, (unint64_t *)&qword_1001BF528, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 5, v10, a1 + 16);
        }
      }
    }
  }
}

void type metadata accessor for EqualSpacedTruncatingHStack()
{
  sub_100044408();
}

void sub_100043EB0()
{
  sub_100016A54(&qword_1001C0158, &qword_1001C0160);
}

unint64_t sub_100043EE0()
{
  unint64_t result;

  result = qword_1001C0168;
  if (!qword_1001C0168)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_1001C0168);
  }
  return result;
}

unint64_t sub_100043F20()
{
  unint64_t result;

  result = qword_1001C0170;
  if (!qword_1001C0170)
  {
    result = swift_getWitnessTable(&unk_10017BEAC, &unk_1001B5608);
    atomic_store(result, (unint64_t *)&qword_1001C0170);
  }
  return result;
}

uint64_t sub_100043F5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019EC1C, 1);
}

uint64_t sub_100043F6C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019EBF4, 1);
}

uint64_t sub_100043F8C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005DC4(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100043FF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C01C8;
  if (!qword_1001C01C8)
  {
    v1 = sub_100005DC4(&qword_1001BF5E8);
    sub_100016878(&qword_1001BF3D8, type metadata accessor for ConditionImage);
    sub_100016A54(&qword_1001BF3F0, &qword_1001BF3F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C01C8);
  }
  return result;
}

uint64_t sub_100044090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t result;

  if (a6)
  {
    sub_100016828(a3, a4, a5 & 1);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

double sub_1000440CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  double result;

  if (a6)
  {
    sub_100016868(a3, a4, a5 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a6).n128_u64[0];
  }
  return result;
}

uint64_t sub_100044108()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100044118@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100041F40(*(_QWORD *)(v1 + 16), a1);
}

uint64_t *sub_100044120(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for WidgetBackgroundContext(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *sub_100044154(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *sub_1000441A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t sub_1000441DC(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10004421C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for EqualSpacedTruncatingHStack.CacheData()
{
  sub_100044408();
}

unint64_t sub_100044268()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;

  result = qword_1001C0220;
  if (!qword_1001C0220)
  {
    v1 = sub_100005DC4(&qword_1001C0190);
    v2 = sub_100005DC4(&qword_1001C0180);
    v3 = sub_100005DC4(&qword_1001C0178);
    sub_100016A54(&qword_1001C01A0, &qword_1001C0178);
    v6 = v3;
    v7 = v4;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)>>, 1);
    v6 = v2;
    v7 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100016878((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0220);
  }
  return result;
}

void sub_10004435C()
{
  sub_100016A54(&qword_1001C0230, &qword_1001C0238);
}

uint64_t sub_10004438C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 288))();
}

uint64_t sub_100044398@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 216));
}

uint64_t sub_1000443B0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 280);
}

uint64_t sub_1000443C0(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 0, 1, v1);
}

uint64_t sub_1000443D0()
{
  return type metadata accessor for HourlyForecastViewModel(0);
}

uint64_t sub_1000443E0(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 216));
}

uint64_t sub_100044410()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100044424(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, _QWORD);

  return v1(a1, 0);
}

double sub_10004442C()
{
  double v0;

  return v0;
}

uint64_t sub_100044440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_100044448@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF)
    LODWORD(a1) = -1;
  return (a1 + 1);
}

uint64_t sub_10004445C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v91 = a3;
  v5 = sub_100005D40(&qword_1001C0240);
  v6 = *(_QWORD *)(v5 - 8);
  v80 = v5;
  v81 = v6;
  sub_1000230F4();
  __chkstk_darwin(v7);
  v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D40(&qword_1001C0248);
  v11 = *(_QWORD *)(v10 - 8);
  v83 = v10;
  v84 = v11;
  sub_1000230F4();
  __chkstk_darwin(v12);
  sub_1000230E0();
  v79 = v13;
  v14 = sub_100005D40(&qword_1001C0250);
  v15 = *(_QWORD *)(v14 - 8);
  v87 = v14;
  v88 = v15;
  sub_1000230F4();
  __chkstk_darwin(v16);
  sub_1000230E0();
  v82 = v17;
  v18 = sub_100005D40(&qword_1001C0258);
  v19 = *(_QWORD *)(v18 - 8);
  v89 = v18;
  v90 = v19;
  sub_1000230F4();
  __chkstk_darwin(v20);
  sub_1000230E0();
  v85 = v21;
  v22 = type metadata accessor for WeatherTimelineProvider();
  swift_allocObject(v22, 248, 7);
  swift_bridgeObjectRetain(a2);
  v23 = sub_100165A84(65, a1, a2);
  v86 = v23;
  v24 = type metadata accessor for WeatherIntent();
  v96 = v23;
  swift_bridgeObjectRetain(a2);
  swift_retain(v23);
  v25 = sub_100005D40(&qword_1001C0260);
  v26 = type metadata accessor for DailyForecastContentView(255);
  v27 = sub_100005DC4(&qword_1001BF358);
  sub_100016878(&qword_1001C0268, type metadata accessor for DailyForecastContentView);
  v29 = v28;
  sub_100016A54(&qword_1001BF458, &qword_1001BF358);
  v92 = v26;
  v93 = v27;
  v94 = v29;
  v95 = v30;
  v31 = sub_10004516C((uint64_t)&v92, (uint64_t)&opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>);
  sub_100016878(&qword_1001C0270, (uint64_t (*)(uint64_t))type metadata accessor for WeatherTimelineProvider);
  IntentConfiguration.init<A>(kind:intent:provider:content:)(a1, a2, v24, &v96, sub_100044948, 0, v24, v25, v22, v31, v32);
  v33 = LocalizedStringKey.init(stringLiteral:)(0x6F4620796C696144, 0xEE00747361636572);
  v37 = sub_100045174(v33, v35, v34 & 1, v36);
  v39 = v38;
  v41 = v40;
  v43 = v42 & 1;
  sub_100016A54(&qword_1001C0278, &qword_1001C0240);
  v45 = v44;
  v47 = v79;
  v46 = v80;
  WidgetConfiguration.configurationDisplayName(_:)(v37, v39, v43, v41, v80, v44);
  sub_100016868(v37, v39, v43);
  v48 = swift_bridgeObjectRelease(v41);
  (*(void (**)(char *, uint64_t, __n128))(v81 + 8))(v9, v46, v48);
  v49 = sub_100005D40(&qword_1001C0280);
  v50 = type metadata accessor for WidgetFamily(0);
  v51 = *(_QWORD *)(v50 - 8);
  v52 = *(unsigned __int8 *)(v51 + 80);
  v53 = (v52 + 32) & ~v52;
  v54 = swift_allocObject(v49, v53 + *(_QWORD *)(v51 + 72), v52 | 7);
  *(_OWORD *)(v54 + 16) = xmmword_10017BD10;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v51 + 104))(v54 + v53, enum case for WidgetFamily.systemSmall(_:), v50);
  v92 = v46;
  v93 = v45;
  v55 = sub_10004516C((uint64_t)&v92, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v57 = v82;
  v56 = v83;
  WidgetConfiguration.supportedFamilies(_:)(v54, v83, v55);
  v58 = swift_bridgeObjectRelease(v54);
  v59 = v56;
  (*(void (**)(uint64_t, uint64_t, __n128))(v84 + 8))(v47, v56, v58);
  v60 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000045, 0x80000001001864E0);
  v64 = sub_100045174(v60, v62, v61 & 1, v63);
  v66 = v65;
  v68 = v67;
  v70 = v69 & 1;
  v92 = v59;
  v93 = v55;
  v71 = sub_10004516C((uint64_t)&v92, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>);
  v72 = v85;
  v73 = v87;
  WidgetConfiguration.description(_:)(v64, v66, v70, v68, v87, v71);
  sub_100016868(v64, v66, v70);
  v74 = swift_bridgeObjectRelease(v68);
  (*(void (**)(uint64_t, uint64_t, __n128))(v88 + 8))(v57, v73, v74);
  v92 = v73;
  v93 = v71;
  v75 = sub_10004516C((uint64_t)&v92, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  v76 = v89;
  WidgetConfiguration.enableContentMarginsForFirstParty(_:)(1, v89, v75);
  swift_release(v86);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 8))(v72, v76);
}

uint64_t sub_100044948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];

  v43 = a2;
  v42 = sub_100005D40(&qword_1001BF358);
  __chkstk_darwin(v42);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001C0288);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100005D40(&qword_1001BFA48);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for DailyForecastContentView(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044F34(a1, (uint64_t)v13);
  *v10 = swift_getKeyPath(&unk_10017C0E8);
  v17 = sub_100005D40(&qword_1001BFA18);
  swift_storeEnumTagMultiPayload(v10, v17, 0);
  *v7 = swift_getKeyPath(&unk_10017C118);
  v18 = sub_100005D40(&qword_1001C0290);
  swift_storeEnumTagMultiPayload(v7, v18, 0);
  KeyPath = swift_getKeyPath(&unk_10017C148);
  v20 = swift_getKeyPath(&unk_10017C170);
  v21 = (uint64_t *)&v16[v14[7]];
  *v21 = v20;
  v22 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  sub_100044F8C((uint64_t)v10, (uint64_t)v16, &qword_1001BFA48);
  sub_100044F8C((uint64_t)v7, (uint64_t)&v16[v14[5]], &qword_1001C0288);
  v23 = &v16[v14[6]];
  *(_QWORD *)v23 = KeyPath;
  v23[8] = 0;
  sub_100044FCC((uint64_t)v13, (uint64_t)&v16[v14[8]]);
  v24 = &v16[v14[9]];
  type metadata accessor for CGRect(0);
  v26 = static Array._allocateBufferUninitialized(minimumCapacity:)(12, v25);
  *(_QWORD *)(v26 + 16) = 12;
  bzero((void *)(v26 + 32), 0x180uLL);
  v44 = v26;
  v27 = sub_100005D40(&qword_1001C0298);
  State.init(wrappedValue:)(v45, &v44, v27);
  v28 = v45[1];
  *(_QWORD *)v24 = v45[0];
  *((_QWORD *)v24 + 1) = v28;
  v29 = v14[10];
  v30 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v30, "bounds");
  v32 = v31;
  v34 = v33;

  v16[v29] = sub_100005B38(v32, v34);
  v35 = enum case for DynamicTypeSize.xxLarge(_:);
  v36 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v4, v35, v36);
  sub_100016878(&qword_1001BF468, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v4, v4, v36);
  if ((result & 1) != 0)
  {
    sub_100016878(&qword_1001C0268, type metadata accessor for DailyForecastContentView);
    v39 = v38;
    sub_100016A54(&qword_1001BF458, &qword_1001BF358);
    View.dynamicTypeSize<A>(_:)(v4, v14, v42, v39, v40);
    sub_100045010((uint64_t)v4);
    return sub_100045050((uint64_t)v16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100044D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for WidgetNames(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for WidgetNames.DailyForecast(_:), v0);
  v5 = WidgetNames.rawValue.getter(v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

_QWORD *initializeBufferWithCopyOfBuffer for DailyForecastWidget(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for DailyForecastWidget(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for DailyForecastWidget(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for DailyForecastWidget(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DailyForecastWidget(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DailyForecastWidget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DailyForecastWidget()
{
  return &type metadata for DailyForecastWidget;
}

uint64_t sub_100044EF8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019EC60, 1);
}

uint64_t sub_100044F08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100044D24();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100044F2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10004445C(*v1, v1[1], a1);
}

uint64_t sub_100044F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ForecastEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100044F8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005D40(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  sub_100006338();
}

uint64_t sub_100044FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ForecastEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100045010(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001BF358);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100045050(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DailyForecastContentView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004508C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_100005DC4(&qword_1001C0258);
  v1 = sub_100005DC4(&qword_1001C0250);
  v2 = sub_100005DC4(&qword_1001C0248);
  v3 = sub_100005DC4(&qword_1001C0240);
  sub_100016A54(&qword_1001C0278, &qword_1001C0240);
  v9 = v3;
  v10 = v4;
  v5 = sub_10004516C((uint64_t)&v9, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v9 = v2;
  v10 = v5;
  v6 = sub_10004516C((uint64_t)&v9, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>);
  v9 = v1;
  v10 = v6;
  v7 = sub_10004516C((uint64_t)&v9, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  v9 = v0;
  v10 = v7;
  return sub_10004516C((uint64_t)&v9, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.enableContentMarginsForFirstParty(_:)>>);
}

uint64_t sub_10004516C(uint64_t a1, uint64_t a2)
{
  return swift_getOpaqueTypeConformance2(a1, a2, 1);
}

uint64_t sub_100045174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Text.init(_:tableName:bundle:comment:)(a1, a2, a3, a4, 0, 0, 0);
}

uint64_t getEnumTagSinglePayload for EventType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 6) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v5 = v6 - 7;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100045258 + 4 * byte_10017C1A5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10004528C + 4 * byte_10017C1A0[v4]))();
}

uint64_t sub_10004528C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100045294(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004529CLL);
  return result;
}

uint64_t sub_1000452A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000452B0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000452B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000452BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventType()
{
  return &type metadata for EventType;
}

char *sub_1000452D8(char *a1, char *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = a3[6];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for Date(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v10))
    {
      v11 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v8, 0, 1, v10);
    }
    v13 = a3[7];
    v14 = &v4[v13];
    v15 = &a2[v13];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v13], 1, v10))
    {
      v16 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(&v4[a3[8]], &a2[a3[8]], v10);
    }
    else
    {
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
      v17(v14, v15, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v10);
      v17(&v4[a3[8]], &a2[a3[8]], v10);
    }
    v18 = a3[9];
    v19 = a3[10];
    v20 = &v4[v18];
    v21 = &a2[v18];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = &v4[v19];
    v24 = &a2[v19];
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = v25;
    v26 = a3[11];
    v27 = a3[12];
    v28 = &v4[v26];
    v29 = &a2[v26];
    v30 = *((_QWORD *)v29 + 1);
    v31 = *(_QWORD *)&a2[v27];
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    *(_QWORD *)&v4[v27] = v31;
    v32 = a3[13];
    v33 = &v4[v32];
    v34 = &a2[v32];
    v35 = type metadata accessor for PrecipitationShift(0);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v34, 1, v35))
    {
      v36 = sub_100005D40(&qword_1001C02A0);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v33, 0, 1, v35);
    }
  }
  return v4;
}

uint64_t sub_100045530(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = a1 + a2[6];
  v5 = type metadata accessor for Date(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[7];
  v7 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v6, 1, v5);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  if (!v7)
    v8(v6, v5);
  v8(a1 + a2[8], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12]));
  v9 = a1 + a2[13];
  v10 = type metadata accessor for PrecipitationShift(0);
  result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, 1, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return result;
}

char *sub_100045664(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  v12 = &a1[v11];
  v13 = &a2[v11];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v11], 1, v9))
  {
    v14 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(&a1[a3[8]], &a2[a3[8]], v9);
  }
  else
  {
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v15(v12, v13, v9);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 0, 1, v9);
    v15(&a1[a3[8]], &a2[a3[8]], v9);
  }
  v16 = a3[9];
  v17 = a3[10];
  v18 = &a1[v16];
  v19 = &a2[v16];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = &a1[v17];
  v22 = &a2[v17];
  v23 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_QWORD *)v21 + 1) = v23;
  v24 = a3[11];
  v25 = a3[12];
  v26 = &a1[v24];
  v27 = &a2[v24];
  v28 = *((_QWORD *)v27 + 1);
  v29 = *(_QWORD *)&a2[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  *(_QWORD *)&a1[v25] = v29;
  v30 = a3[13];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = type metadata accessor for PrecipitationShift(0);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v33))
  {
    v34 = sub_100005D40(&qword_1001C02A0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v33);
  }
  return a1;
}

_BYTE *sub_100045890(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v7, 1, v9);
  v11 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a1[v14], 1, v9);
  v18 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v9);
  if (v17)
  {
    if (v18)
    {
      v19 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      v20 = *(_QWORD *)(v9 - 8);
    }
    else
    {
      v20 = *(_QWORD *)(v9 - 8);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 16))(v15, v16, v9);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v15, 0, 1, v9);
    }
  }
  else
  {
    v20 = *(_QWORD *)(v9 - 8);
    if (v18)
    {
      (*(void (**)(_BYTE *, uint64_t))(v20 + 8))(v15, v9);
      v21 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 24))(v15, v16, v9);
    }
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 24))(&a1[a3[8]], &a2[a3[8]], v9);
  v22 = a3[9];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[10];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[11];
  v33 = &a1[v32];
  v34 = &a2[v32];
  *v33 = *v34;
  v35 = v34[1];
  v36 = v33[1];
  v33[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = a3[12];
  v38 = *(_QWORD *)&a1[v37];
  v39 = *(_QWORD *)&a2[v37];
  *(_QWORD *)&a1[v37] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v38);
  v40 = a3[13];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v43 = type metadata accessor for PrecipitationShift(0);
  v44 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v41, 1, v43);
  v45 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v42, 1, v43);
  if (!v44)
  {
    v46 = *(_QWORD *)(v43 - 8);
    if (!v45)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 24))(v41, v42, v43);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v41, v43);
    goto LABEL_20;
  }
  if (v45)
  {
LABEL_20:
    v47 = sub_100005D40(&qword_1001C02A0);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v41, 0, 1, v43);
  return a1;
}

char *sub_100045C00(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  v12 = &a1[v11];
  v13 = &a2[v11];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v11], 1, v9))
  {
    v14 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(&a1[a3[8]], &a2[a3[8]], v9);
  }
  else
  {
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
    v15(v12, v13, v9);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 0, 1, v9);
    v15(&a1[a3[8]], &a2[a3[8]], v9);
  }
  v16 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  v17 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  v18 = a3[13];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for PrecipitationShift(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v20, 1, v21))
  {
    v22 = sub_100005D40(&qword_1001C02A0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v19, 0, 1, v21);
  }
  return a1;
}

char *sub_100045DF4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v7, 1, v9);
  v11 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a1[v14], 1, v9);
  v18 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v9);
  if (v17)
  {
    if (v18)
    {
      v19 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      v20 = *(_QWORD *)(v9 - 8);
    }
    else
    {
      v20 = *(_QWORD *)(v9 - 8);
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v15, v16, v9);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v15, 0, 1, v9);
    }
  }
  else
  {
    v20 = *(_QWORD *)(v9 - 8);
    if (v18)
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v9);
      v21 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v15, v16, v9);
    }
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(&a1[a3[8]], &a2[a3[8]], v9);
  v22 = a3[9];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  v27 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease(v27);
  v28 = a3[10];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  v33 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v29 = v32;
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRelease(v33);
  v34 = a3[11];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v38 = *(_QWORD *)v36;
  v37 = *((_QWORD *)v36 + 1);
  v39 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease(v39);
  v40 = a3[12];
  v41 = *(_QWORD *)&a1[v40];
  *(_QWORD *)&a1[v40] = *(_QWORD *)&a2[v40];
  swift_bridgeObjectRelease(v41);
  v42 = a3[13];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v45 = type metadata accessor for PrecipitationShift(0);
  v46 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v43, 1, v45);
  v47 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v44, 1, v45);
  if (!v46)
  {
    v48 = *(_QWORD *)(v45 - 8);
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 40))(v43, v44, v45);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v45);
    goto LABEL_20;
  }
  if (v47)
  {
LABEL_20:
    v49 = sub_100005D40(&qword_1001C02A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v43, 0, 1, v45);
  return a1;
}

uint64_t sub_100046124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100046130);
}

void sub_100046130(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_100005D40(&qword_1001BF0A0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a3[6];
  }
  else
  {
    v9 = sub_10002338C();
    if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)a2)
    {
      v7 = v9;
      v8 = a3[8];
    }
    else
    {
      if ((_DWORD)a2 == 0x7FFFFFFF)
      {
        sub_100044448(*(_QWORD *)(a1 + a3[9] + 8));
        sub_1000443A4();
        return;
      }
      v7 = sub_100005D40(&qword_1001C02A0);
      v8 = a3[13];
    }
  }
  sub_100016B50(a1 + v8, a2, v7);
}

uint64_t sub_1000461DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000461E8);
}

void sub_1000461E8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = sub_100005D40(&qword_1001BF0A0);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a4[6];
  }
  else
  {
    v11 = sub_10002338C();
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v10 = a4[8];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[9] + 8) = (a2 - 1);
        sub_1000443A4();
        return;
      }
      v9 = sub_100005D40(&qword_1001C02A0);
      v10 = a4[13];
    }
  }
  sub_100016B44(a1 + v10, a2, a2, v9);
}

uint64_t type metadata accessor for EventViewModel(uint64_t a1)
{
  return sub_10000F804(a1, (uint64_t *)&unk_1001C0300, (uint64_t)&nominal type descriptor for EventViewModel);
}

void sub_1000462B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  v8[0] = &unk_10017C200;
  v8[1] = &unk_10017C218;
  sub_1000463A4(319, (unint64_t *)&unk_1001BF6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v9 = *(_QWORD *)(v2 - 8) + 64;
    v10 = v9;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v11 = *(_QWORD *)(v4 - 8) + 64;
      v12 = &unk_10017C230;
      v13 = &unk_10017C230;
      v14 = &unk_10017C248;
      v15 = &unk_10017C260;
      sub_1000463A4(319, (unint64_t *)&unk_1001C0310, (uint64_t (*)(uint64_t))&type metadata accessor for PrecipitationShift);
      if (v7 <= 0x3F)
      {
        v16 = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 10, v8, a1 + 16);
      }
    }
  }
}

void sub_1000463A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1000463F4(uint64_t a1)
{
  sub_1000233D8(a1);
  sub_100049CA8();
  sub_1000232C0();
  sub_1000231EC();
}

void sub_10004641C()
{
  sub_100046458(0x73706F7473);
}

void sub_100046430(char a1)
{
  sub_1000466F8(0, a1 & 1);
}

void sub_10004643C(char a1)
{
  sub_100046608(0, a1);
}

void sub_100046448()
{
  sub_100046458(1953460082);
}

void sub_100046458(uint64_t a1)
{
  _BYTE v2[72];

  sub_1000233D8(a1);
  sub_100049C34((uint64_t)v2, a1);
  sub_1000232C0();
  sub_1000231EC();
}

void sub_10004648C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  v1 = sub_1000233D8(a1);
  sub_100049C9C(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_1000232C0();
  sub_1000231EC();
}

uint64_t sub_1000464B4(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 0x6E6F697461636F6CLL;
  else
    v3 = 7890280;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE800000000000000;
  sub_100049C34(a1, v3);
  return sub_100049CB4(v4);
}

uint64_t sub_1000464FC(uint64_t a1)
{
  return String.hash(into:)(a1, 0x73706F7473, 0xE500000000000000);
}

uint64_t sub_100046510(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v3 = a2;
  if (a2)
  {
    if (a2 == 1)
      v4 = 0x65686E6572686166;
    else
      v4 = 0x7953726F7272696DLL;
    if (v3 == 1)
      v2 = 0xEA00000000007469;
    else
      v2 = 0xEC0000006D657473;
  }
  else
  {
    sub_100049CD0();
  }
  sub_100049C34(a1, v4);
  return sub_100049CB4(v2);
}

void sub_10004657C(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
  sub_100006338();
}

void sub_10004659C(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
  sub_100006338();
}

uint64_t sub_1000465BC(uint64_t a1)
{
  return String.hash(into:)(a1, 1953460082, 0xE400000000000000);
}

void sub_1000465CC(uint64_t a1)
{
  sub_1000466C4(a1, 1953460082);
}

void sub_1000465DC(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  v1 = sub_100049C3C(a1);
  sub_100049C9C(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_1000232C0();
  sub_1000231EC();
}

void sub_100046608(uint64_t a1, char a2)
{
  uint64_t v3;
  _BYTE v4[72];

  sub_100049C3C(a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0x65686E6572686166;
    else
      v3 = 0x7953726F7272696DLL;
  }
  else
  {
    sub_100049CD0();
  }
  sub_100049C34((uint64_t)v4, v3);
  sub_1000287D8();
  sub_1000232C0();
  sub_1000231EC();
}

void sub_100046688(uint64_t a1)
{
  sub_100049C3C(a1);
  sub_100049CA8();
  sub_1000232C0();
  sub_1000231EC();
}

void sub_1000466B0(uint64_t a1)
{
  sub_1000466C4(a1, 0x73706F7473);
}

void sub_1000466C4(uint64_t a1, uint64_t a2)
{
  _BYTE v3[72];

  sub_100049C3C(a1);
  sub_100049C34((uint64_t)v3, a2);
  sub_1000232C0();
  sub_1000231EC();
}

void sub_1000466F8(uint64_t a1, char a2)
{
  uint64_t v3;
  _BYTE v4[72];

  sub_100049C3C(a1);
  if ((a2 & 1) != 0)
    v3 = 0x6E6F697461636F6CLL;
  else
    v3 = 7890280;
  sub_100049C34((uint64_t)v4, v3);
  sub_1000287D8();
  sub_1000232C0();
  sub_1000231EC();
}

unint64_t sub_100046754(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

void sub_100046764()
{
  unsigned __int8 *v0;

  sub_1000463F4(*v0);
}

void sub_10004677C(uint64_t a1)
{
  sub_100046688(a1);
}

unint64_t sub_100046794@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100046754(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000467BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004989C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100046818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004989C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_100046864(unint64_t result)
{
  if (result >= 7)
    return 7;
  return result;
}

void sub_100046874(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  char *v38;
  int v39;
  int v40;
  BOOL v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  void (*v64)(uint64_t, uint64_t);
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  BOOL v84;
  char v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  int v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  int *v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v5 = type metadata accessor for PrecipitationShift(0);
  v117 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100049C78(v6, v107);
  v119 = sub_100005D40(&qword_1001C03E0);
  sub_100029068();
  __chkstk_darwin(v7);
  v9 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005D40(&qword_1001C02A0);
  sub_100029068();
  __chkstk_darwin(v10);
  sub_100023150();
  v118 = v11;
  v13 = __chkstk_darwin(v12);
  v120 = (char *)&v107 - v14;
  __chkstk_darwin(v13);
  v121 = (char *)&v107 - v15;
  v16 = sub_10002338C();
  v124 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_1000230E0();
  v122 = v17;
  v18 = sub_100005D40(&qword_1001BF828);
  sub_100029068();
  __chkstk_darwin(v19);
  sub_100023150();
  v123 = v20;
  __chkstk_darwin(v21);
  v23 = (char *)&v107 - v22;
  sub_100005D40(&qword_1001BF0A0);
  sub_100029068();
  __chkstk_darwin(v24);
  sub_100049D00();
  __chkstk_darwin(v25);
  sub_100049D18();
  v27 = __chkstk_darwin(v26);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v107 - v29;
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v107 - v32;
  __chkstk_darwin(v31);
  v36 = a2;
  v38 = (char *)&v107 - v37;
  if (*a1 != *v36)
    goto LABEL_30;
  v39 = a1[1];
  v40 = v36[1];
  if (v39 == 5)
  {
    if (v40 != 5)
      goto LABEL_30;
  }
  else
  {
    v41 = v40 != 5 && v39 == v40;
    if (!v41)
      goto LABEL_30;
  }
  v113 = v35;
  v110 = v9;
  v111 = v34;
  v109 = v5;
  v42 = v36;
  v43 = a1;
  v44 = type metadata accessor for EventViewModel(0);
  v45 = *(int *)(v44 + 24);
  v115 = v43;
  sub_100049C04((uint64_t)&v43[v45], (uint64_t)v38);
  v112 = (int *)v44;
  v46 = *(int *)(v44 + 24);
  v114 = v42;
  sub_100049C04((uint64_t)&v42[v46], (uint64_t)v33);
  v47 = (uint64_t)&v23[*(int *)(v18 + 48)];
  sub_100049C04((uint64_t)v38, (uint64_t)v23);
  sub_100049C04((uint64_t)v33, v47);
  sub_100049BC4((uint64_t)v23);
  if (v41)
  {
    sub_100049BFC((uint64_t)v33);
    sub_100049BFC((uint64_t)v38);
    sub_100049BC4(v47);
    if (v41)
    {
      sub_100016904((uint64_t)v23, &qword_1001BF0A0);
      goto LABEL_20;
    }
LABEL_18:
    v49 = &qword_1001BF828;
    v50 = (uint64_t)v23;
LABEL_29:
    sub_100016904(v50, v49);
    goto LABEL_30;
  }
  sub_10001C5BC((uint64_t)v23, (uint64_t)v30, &qword_1001BF0A0);
  sub_100049BC4(v47);
  if (v48)
  {
    sub_100049BFC((uint64_t)v33);
    sub_100049BFC((uint64_t)v38);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v30, v16);
    goto LABEL_18;
  }
  v51 = v124;
  v52 = v122;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 32))(v122, v47, v16);
  sub_10002EF14(&qword_1001BF838, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v108 = dispatch thunk of static Equatable.== infix(_:_:)(v30, v52, v16);
  v53 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  v53(v52, v16);
  sub_100049D10((uint64_t)v33);
  sub_100049D10((uint64_t)v38);
  v53((uint64_t)v30, v16);
  sub_100049D10((uint64_t)v23);
  if ((v108 & 1) == 0)
    goto LABEL_30;
LABEL_20:
  v55 = v112;
  v54 = v113;
  sub_100049C04((uint64_t)&v115[v112[7]], v113);
  sub_100049C04((uint64_t)&v114[v55[7]], v2);
  v56 = *(int *)(v18 + 48);
  v57 = v123;
  v58 = v123 + v56;
  sub_100049C04(v54, v123);
  sub_100049C04(v2, v58);
  sub_100049BC4(v57);
  if (v41)
  {
    sub_100049BFC(v2);
    sub_100049BFC(v54);
    sub_100049BC4(v58);
    if (v41)
    {
      sub_100016904(v57, &qword_1001BF0A0);
      goto LABEL_32;
    }
    goto LABEL_28;
  }
  v59 = v111;
  sub_10001C5BC(v57, v111, &qword_1001BF0A0);
  sub_100049BC4(v58);
  if (v60)
  {
    sub_1000231E4(v2);
    sub_1000231E4(v113);
    (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v59, v16);
LABEL_28:
    v49 = &qword_1001BF828;
    v50 = v57;
    goto LABEL_29;
  }
  v61 = v124;
  v62 = v122;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 32))(v122, v58, v16);
  sub_10002EF14(&qword_1001BF838, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v63 = dispatch thunk of static Equatable.== infix(_:_:)(v59, v62, v16);
  v64 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
  v64(v62, v16);
  sub_100049BFC(v2);
  sub_100049BFC(v113);
  v64(v59, v16);
  sub_100049BFC(v57);
  if ((v63 & 1) == 0)
    goto LABEL_30;
LABEL_32:
  v65 = v114;
  v66 = v115;
  if ((static Date.== infix(_:_:)(&v115[v55[8]], &v114[v55[8]]) & 1) != 0)
  {
    v67 = v55[9];
    v68 = *(_QWORD *)&v66[v67];
    v69 = *(_QWORD *)&v66[v67 + 8];
    v70 = (uint64_t *)&v65[v67];
    v71 = v70[1];
    v72 = v68 == *v70 && v69 == v71;
    v73 = (uint64_t)v110;
    v75 = (uint64_t)v120;
    v74 = (uint64_t)v121;
    v76 = v65;
    v77 = v66;
    if (v72 || (sub_1000232C8(v68, v69, *v70, v71), sub_100049CBC(), (v78 & 1) != 0))
    {
      v79 = v55[10];
      v80 = *(_QWORD *)&v77[v79];
      v81 = *(_QWORD *)&v77[v79 + 8];
      v82 = (uint64_t *)&v76[v79];
      v83 = v82[1];
      v84 = v80 == *v82 && v81 == v83;
      if (v84 || (sub_1000232C8(v80, v81, *v82, v83), sub_100049CBC(), (v85 & 1) != 0))
      {
        v86 = v55[11];
        v87 = (uint64_t *)&v77[v86];
        v88 = *(_QWORD *)&v77[v86 + 8];
        v89 = (uint64_t *)&v76[v86];
        v90 = v89[1];
        if (v88)
        {
          if (!v90)
            goto LABEL_30;
          if (*v87 != *v89 || v88 != v90)
          {
            sub_1000232C8(*v87, v88, *v89, v90);
            sub_100049CBC();
            if ((v92 & 1) == 0)
              goto LABEL_30;
          }
        }
        else if (v90)
        {
          goto LABEL_30;
        }
        v93 = v55[12];
        v94 = *(_QWORD *)&v77[v93];
        v95 = *(_QWORD *)&v76[v93];
        if (!v94)
        {
          if (v95)
            goto LABEL_30;
          goto LABEL_57;
        }
        if (v95)
        {
          swift_bridgeObjectRetain(*(_QWORD *)&v76[v93]);
          swift_bridgeObjectRetain(v94);
          sub_10008D24C();
          v97 = v96;
          swift_bridgeObjectRelease(v94);
          sub_1000287D8();
          v77 = v115;
          if ((v97 & 1) != 0)
          {
LABEL_57:
            sub_100049CC8((uint64_t)&v77[v55[13]], v74);
            sub_100049CC8((uint64_t)&v114[v55[13]], v75);
            v98 = v73 + *(int *)(v119 + 48);
            sub_100049CC8(v74, v73);
            sub_100049CC8(v75, v98);
            v99 = v109;
            sub_10002879C(v73, 1, v109);
            if (v41)
            {
              sub_10002310C(v75);
              sub_10002310C(v74);
              sub_10002879C(v98, 1, v99);
              if (v41)
              {
                sub_100016904(v73, &qword_1001C02A0);
                goto LABEL_30;
              }
            }
            else
            {
              v100 = v118;
              sub_10001C5BC(v73, v118, &qword_1001C02A0);
              sub_10002879C(v98, 1, v99);
              if (!v101)
              {
                v103 = v116;
                v102 = v117;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v117 + 32))(v116, v98, v99);
                sub_10002EF14(&qword_1001C03E8, (uint64_t (*)(uint64_t))&type metadata accessor for PrecipitationShift, (uint64_t)&protocol conformance descriptor for PrecipitationShift);
                dispatch thunk of static Equatable.== infix(_:_:)(v100, v103, v99);
                v104 = v73;
                v105 = v99;
                v106 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
                v106(v103, v105);
                sub_10002310C(v75);
                sub_10002310C(v74);
                v106(v100, v105);
                sub_10002310C(v104);
                goto LABEL_30;
              }
              sub_1000231E4(v75);
              sub_1000231E4(v74);
              (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v100, v99);
            }
            v49 = &qword_1001C03E0;
            v50 = v73;
            goto LABEL_29;
          }
        }
      }
    }
  }
LABEL_30:
  sub_10001C770();
}

uint64_t sub_1000470B0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  char v22;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7665537472656C61 && a2 == 0xED00007974697265)
  {
    v8 = 0xED00007974697265;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7665537472656C61, 0xED00007974697265, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065)
  {
    v10 = 0xE900000000000065;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461447472617473, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x65746144646E65 && a2 == 0xE700000000000000)
  {
    v12 = 0xE700000000000000;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746144646E65, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x6974617269707865 && a2 == 0xEE00657461446E6FLL)
  {
    v14 = 0xEE00657461446E6FLL;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974617269707865, 0xEE00657461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v16 = 0xE500000000000000;
    goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v16);
    return 5;
  }
  if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69)
  {
    v18 = 0xEB000000006E6F69;
    goto LABEL_56;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7470697263736564, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_56:
    swift_bridgeObjectRelease(v18);
    return 6;
  }
  if (a1 == 0x63736544676E6F6CLL && a2 == 0xEF6E6F6974706972)
  {
    v20 = 0xEF6E6F6974706972;
    goto LABEL_64;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63736544676E6F6CLL, 0xEF6E6F6974706972, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_64:
    swift_bridgeObjectRelease(v20);
    return 7;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100186590)
  {
    v21 = 0x8000000100186590;
LABEL_70:
    swift_bridgeObjectRelease(v21);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100186590, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_70;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001001865B0)
  {
    swift_bridgeObjectRelease(0x80000001001865B0);
    return 9;
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001001865B0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v22 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_100047514()
{
  return 10;
}

uint64_t sub_10004751C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100047548 + 4 * byte_10017C1AA[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_100047548()
{
  return 0x7665537472656C61;
}

uint64_t sub_10004756C()
{
  return 0x7461447472617473;
}

uint64_t sub_100047588()
{
  return 0x65746144646E65;
}

uint64_t sub_1000475A0()
{
  return 0x6974617269707865;
}

uint64_t sub_1000475C4()
{
  return 0x656C746974;
}

uint64_t sub_1000475D8()
{
  return 0x7470697263736564;
}

uint64_t sub_1000475F8()
{
  return 0x63736544676E6F6CLL;
}

unint64_t sub_10004761C()
{
  return 0xD000000000000014;
}

unint64_t sub_10004763C()
{
  return 0xD000000000000012;
}

void sub_100047658(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = v1;
  v5 = sub_100005D40(&qword_1001C0368);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100022330(a1, a1[3]);
  v7 = sub_100048B1C();
  sub_100049C64((uint64_t)&type metadata for EventViewModel.CodingKeys, v8, v7);
  LOBYTE(v19) = *v3;
  v20 = 0;
  sub_100048B58();
  sub_100049D40();
  if (!v2)
  {
    LOBYTE(v19) = v3[1];
    v20 = 1;
    sub_100048B94();
    sub_100049BF0();
    v9 = (int *)type metadata accessor for EventViewModel(0);
    LOBYTE(v19) = 2;
    sub_10002338C();
    sub_10002EF14(&qword_1001BF780, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    sub_100049BF0();
    LOBYTE(v19) = 3;
    sub_100049BF0();
    LOBYTE(v19) = 4;
    sub_100049D40();
    v10 = (uint64_t *)&v3[v9[9]];
    v11 = *v10;
    v12 = v10[1];
    LOBYTE(v19) = 5;
    sub_100049C0C(v11, v12, (uint64_t)&v19);
    v13 = (uint64_t *)&v3[v9[10]];
    v14 = *v13;
    v15 = v13[1];
    LOBYTE(v19) = 6;
    sub_100049C0C(v14, v15, (uint64_t)&v19);
    v16 = (uint64_t *)&v3[v9[11]];
    v17 = *v16;
    v18 = v16[1];
    LOBYTE(v19) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v19, v5);
    v19 = *(_QWORD *)&v3[v9[12]];
    v20 = 8;
    sub_100005D40(&qword_1001C0388);
    sub_100048C5C(&qword_1001C0390, &qword_1001C0398, (uint64_t)&unk_10017C5E4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_100049BF0();
    LOBYTE(v19) = 9;
    type metadata accessor for PrecipitationShift(0);
    sub_10002EF14(&qword_1001C03A0, (uint64_t (*)(uint64_t))&type metadata accessor for PrecipitationShift, (uint64_t)&protocol conformance descriptor for PrecipitationShift);
    sub_100049BF0();
  }
  sub_100049D4C(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_100023114();
}

void sub_10004795C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  int *v31;
  uint64_t v32;
  int *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  char v61;

  v51 = a2;
  sub_100005D40(&qword_1001C02A0);
  sub_100029068();
  __chkstk_darwin(v6);
  sub_100049C78(v7, v49);
  v8 = sub_10002338C();
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  __chkstk_darwin(v8);
  sub_100049CE8();
  sub_100005D40(&qword_1001BF0A0);
  sub_100029068();
  __chkstk_darwin(v9);
  sub_100049D00();
  v12 = v10 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - v14;
  v54 = sub_100005D40(&qword_1001C03A8);
  __chkstk_darwin(v54);
  sub_100049C1C();
  v58 = type metadata accessor for EventViewModel(0);
  sub_100029068();
  __chkstk_darwin(v16);
  sub_1000230E0();
  v59 = v17;
  v18 = a1[3];
  v19 = a1[4];
  v57 = a1;
  sub_100022330(a1, v18);
  v20 = sub_100048B1C();
  v53 = v4;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for EventViewModel.CodingKeys, &type metadata for EventViewModel.CodingKeys, v20, v18, v19);
  if (v3)
  {
    sub_100049D2C();
  }
  else
  {
    v21 = v15;
    v22 = v12;
    v23 = v2;
    v61 = 0;
    sub_100048BE4();
    v24 = v54;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for EventType, &v61, v54, &type metadata for EventType);
    v25 = v59;
    *v59 = v60;
    v61 = 1;
    v26 = sub_100048C20();
    sub_100049C94((uint64_t)&type metadata for AlertSeverity, (uint64_t)&v61, v24, (uint64_t)&type metadata for AlertSeverity, v26);
    v25[1] = v60;
    LOBYTE(v60) = 2;
    sub_10002EF14(&qword_1001BF7C8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v27 = (uint64_t)v21;
    v28 = v56;
    v50 = v29;
    sub_100049C94(v56, (uint64_t)&v60, v24, v56, v29);
    v30 = v25;
    v31 = (int *)v58;
    sub_10001C660(v27, (uint64_t)&v30[*(int *)(v58 + 24)], &qword_1001BF0A0);
    LOBYTE(v60) = 3;
    v32 = v28;
    sub_100049C94(v28, (uint64_t)&v60, v24, v28, v50);
    sub_10001C660(v22, (uint64_t)&v59[v31[7]], &qword_1001BF0A0);
    LOBYTE(v60) = 4;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v28, &v60, v24, v28);
    v33 = v31;
    v34 = v59;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v55 + 32))(&v59[v33[8]], v23, v32);
    v35 = sub_100049C44(5);
    v36 = (uint64_t *)&v34[v33[9]];
    *v36 = v35;
    v36[1] = v37;
    v38 = sub_100049C44(6);
    v39 = (uint64_t *)&v34[v33[10]];
    *v39 = v38;
    v39[1] = v40;
    LOBYTE(v60) = 7;
    v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v24);
    v42 = (uint64_t *)&v34[v33[11]];
    *v42 = v41;
    v42[1] = v43;
    v44 = sub_100005D40(&qword_1001C0388);
    v61 = 8;
    v45 = sub_100048C5C(&qword_1001C03C0, &qword_1001C03C8, (uint64_t)&unk_10017C594, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_100049C94(v44, (uint64_t)&v61, v24, v44, v45);
    *(_QWORD *)&v34[v33[12]] = v60;
    v46 = type metadata accessor for PrecipitationShift(0);
    LOBYTE(v60) = 9;
    sub_10002EF14(&qword_1001C03D0, (uint64_t (*)(uint64_t))&type metadata accessor for PrecipitationShift, (uint64_t)&protocol conformance descriptor for PrecipitationShift);
    sub_100049C94(v46, (uint64_t)&v60, v24, v46, v47);
    sub_100049D34();
    v48 = (uint64_t)v59;
    sub_10001C660(v52, (uint64_t)&v59[*(int *)(v58 + 52)], &qword_1001C02A0);
    sub_10001C590(v48, v51, type metadata accessor for EventViewModel);
    sub_100049D2C();
    sub_100011894(v48, type metadata accessor for EventViewModel);
  }
  sub_100023114();
}

void sub_100047F5C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v7 = sub_10002338C();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100049C1C();
  v9 = sub_100005D40(&qword_1001BF828);
  sub_100029068();
  __chkstk_darwin(v10);
  sub_100049CE8();
  sub_100005D40(&qword_1001BF0A0);
  sub_100029068();
  __chkstk_darwin(v11);
  sub_100049D00();
  v14 = v12 - v13;
  __chkstk_darwin(v15);
  sub_100049D18();
  __chkstk_darwin(v16);
  v18 = (char *)&v40 - v17;
  v19 = a1[1];
  v20 = a2[1];
  v21 = *a1 == *a2 && v19 == v20;
  if (v21 || (sub_1000232C8(*a1, v19, *a2, v20), sub_100049CBC(), (v22 & 1) != 0))
  {
    v23 = a1[2];
    v24 = a1[3];
    v25 = a2[2];
    v26 = a2[3];
    v27 = v23 == v25 && v24 == v26;
    if (v27 || (sub_1000232C8(v23, v24, v25, v26), sub_100049CBC(), (v28 & 1) != 0))
    {
      v41 = v4;
      v42 = v8;
      v43 = v7;
      v29 = a1[4];
      v30 = a2[4];
      if (v29)
      {
        if (!v30)
          goto LABEL_25;
        swift_bridgeObjectRetain(a2[4]);
        swift_bridgeObjectRetain(v29);
        sub_100092A7C();
        v32 = v31;
        swift_bridgeObjectRelease(v29);
        swift_bridgeObjectRelease(v30);
        if ((v32 & 1) == 0)
          goto LABEL_25;
      }
      else if (v30)
      {
        goto LABEL_25;
      }
      v33 = type metadata accessor for TemplateDescriptions(0);
      sub_100049C04((uint64_t)a1 + *(int *)(v33 + 28), (uint64_t)v18);
      sub_100049C04((uint64_t)a2 + *(int *)(v33 + 28), v3);
      v34 = v2 + *(int *)(v9 + 48);
      sub_100049C04((uint64_t)v18, v2);
      sub_100049C04(v3, v34);
      v35 = v43;
      sub_10002879C(v2, 1, v43);
      if (v21)
      {
        sub_10002310C(v3);
        sub_10002310C((uint64_t)v18);
        sub_10002879C(v34, 1, v35);
        if (v21)
        {
          sub_100016904(v2, &qword_1001BF0A0);
          goto LABEL_25;
        }
      }
      else
      {
        sub_10001C5BC(v2, v14, &qword_1001BF0A0);
        sub_10002879C(v34, 1, v35);
        if (!v36)
        {
          v38 = v41;
          v37 = v42;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v41, v34, v35);
          sub_10002EF14(&qword_1001BF838, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          dispatch thunk of static Equatable.== infix(_:_:)(v14, v38, v35);
          v39 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
          v39(v38, v35);
          sub_100049BFC(v3);
          sub_100049BFC((uint64_t)v18);
          v39(v14, v35);
          sub_100049BFC(v2);
          goto LABEL_25;
        }
        sub_10002310C(v3);
        sub_10002310C((uint64_t)v18);
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v14, v35);
      }
      sub_100016904(v2, &qword_1001BF828);
    }
  }
LABEL_25:
  sub_10001C770();
}

uint64_t sub_10004826C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  char v12;

  if (a1 == 0x6D655474726F6873 && a2 == 0xED00006574616C70)
  {
    v5 = 0xED00006574616C70;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D655474726F6873, 0xED00006574616C70, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x706D6554676E6F6CLL && a2 == 0xEC0000006574616CLL)
  {
    v8 = 0xEC0000006574616CLL;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x706D6554676E6F6CLL, 0xEC0000006574616CLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6574656D61726170 && a2 == 0xEA00000000007372)
  {
    v10 = 0xEA00000000007372;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574656D61726170, 0xEA00000000007372, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x746E5564696C6176 && a2 == 0xEA00000000006C69)
  {
    swift_bridgeObjectRelease(0xEA00000000006C69);
    return 3;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E5564696C6176, 0xEA00000000006C69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100048464(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000484A4 + 4 * byte_10017C1B4[a1]))(0x6D655474726F6873, 0xED00006574616C70);
}

uint64_t sub_1000484A4()
{
  return 0x706D6554676E6F6CLL;
}

uint64_t sub_1000484C4()
{
  return 0x6574656D61726170;
}

uint64_t sub_1000484E4()
{
  return 0x746E5564696C6176;
}

uint64_t sub_100048500(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  char v15;

  v3 = v1;
  v5 = sub_100005D40(&qword_1001C04B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100022330(a1, a1[3]);
  v7 = sub_1000498D8();
  sub_100049C64((uint64_t)&type metadata for TemplateDescriptions.CodingKeys, v8, v7);
  v9 = *v3;
  v10 = v3[1];
  v15 = 0;
  sub_100049C0C(v9, v10, (uint64_t)&v15);
  if (!v2)
  {
    v11 = v3[2];
    v12 = v3[3];
    v14 = 1;
    sub_100049C0C(v11, v12, (uint64_t)&v14);
    sub_100005D40(&qword_1001C04C0);
    sub_100049914();
    sub_100049BF0();
    type metadata accessor for TemplateDescriptions(0);
    sub_10002338C();
    sub_10002EF14(&qword_1001BF780, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    sub_100049BF0();
  }
  return sub_100049D4C(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
}

void sub_100048684(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;

  sub_100005D40(&qword_1001BF0A0);
  sub_100029068();
  __chkstk_darwin(v4);
  sub_1000230E0();
  v19 = v5;
  v20 = sub_100005D40(&qword_1001C04D0);
  __chkstk_darwin(v20);
  v6 = type metadata accessor for TemplateDescriptions(0);
  sub_100029068();
  __chkstk_darwin(v7);
  sub_100049C1C();
  v8 = a1[3];
  v9 = a1[4];
  sub_100022330(a1, v8);
  v10 = sub_1000498D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TemplateDescriptions.CodingKeys, &type metadata for TemplateDescriptions.CodingKeys, v10, v8, v9);
  if (v21)
  {
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
  }
  else
  {
    v26 = 0;
    v11 = (uint64_t)v2;
    *v2 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v20);
    v2[1] = v12;
    v25 = 1;
    v2[2] = KeyedDecodingContainer.decode(_:forKey:)(&v25, v20);
    v2[3] = v13;
    v14 = sub_100005D40(&qword_1001C04C0);
    v24 = 2;
    v15 = sub_100049998();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v14, &v24, v20, v14, v15);
    v2[4] = v22;
    v16 = sub_10002338C();
    v23 = 3;
    sub_10002EF14(&qword_1001BF7C8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v16, &v23, v20, v16, v17);
    sub_100049BE0();
    sub_10001C660(v19, v11 + *(int *)(v6 + 28), &qword_1001BF0A0);
    sub_10001C590(v11, a2, type metadata accessor for TemplateDescriptions);
    _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(a1);
    sub_100011894(v11, type metadata accessor for TemplateDescriptions);
  }
  sub_100023114();
}

unint64_t sub_10004893C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100046864(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100048964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100048CE0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000489C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100048CE0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100048A10()
{
  unsigned __int8 *v0;

  return sub_10004751C(*v0);
}

uint64_t sub_100048A18@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000470B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100048A3C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100047514();
  *a1 = result;
  return result;
}

uint64_t sub_100048A60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100048B1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100048A88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100048B1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100048AB8()
{
  unint64_t result;

  result = qword_1001C0360;
  if (!qword_1001C0360)
  {
    result = swift_getWitnessTable(&unk_10017C318, &type metadata for EventType);
    atomic_store(result, (unint64_t *)&qword_1001C0360);
  }
  return result;
}

void sub_100048AF4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10004795C(a1, a2);
}

void sub_100048B08(_QWORD *a1)
{
  sub_100047658(a1);
}

unint64_t sub_100048B1C()
{
  unint64_t result;

  result = qword_1001C0370;
  if (!qword_1001C0370)
  {
    result = swift_getWitnessTable(&unk_10017C634, &type metadata for EventViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C0370);
  }
  return result;
}

unint64_t sub_100048B58()
{
  unint64_t result;

  result = qword_1001C0378;
  if (!qword_1001C0378)
  {
    result = swift_getWitnessTable(&unk_10017C368, &type metadata for EventType);
    atomic_store(result, (unint64_t *)&qword_1001C0378);
  }
  return result;
}

unint64_t sub_100048B94()
{
  unint64_t result;

  result = qword_1001C0380;
  if (!qword_1001C0380)
  {
    result = swift_getWitnessTable(&unk_10017C60C, &type metadata for AlertSeverity);
    atomic_store(result, (unint64_t *)&qword_1001C0380);
  }
  return result;
}

uint64_t type metadata accessor for TemplateDescriptions(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C0448, (uint64_t)&nominal type descriptor for TemplateDescriptions);
}

unint64_t sub_100048BE4()
{
  unint64_t result;

  result = qword_1001C03B0;
  if (!qword_1001C03B0)
  {
    result = swift_getWitnessTable(&unk_10017C340, &type metadata for EventType);
    atomic_store(result, (unint64_t *)&qword_1001C03B0);
  }
  return result;
}

unint64_t sub_100048C20()
{
  unint64_t result;

  result = qword_1001C03B8;
  if (!qword_1001C03B8)
  {
    result = swift_getWitnessTable(&unk_10017C5BC, &type metadata for AlertSeverity);
    atomic_store(result, (unint64_t *)&qword_1001C03B8);
  }
  return result;
}

uint64_t sub_100048C5C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100005DC4(&qword_1001C0388);
    sub_10002EF14(a2, type metadata accessor for TemplateDescriptions, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100048CE0()
{
  unint64_t result;

  result = qword_1001C03D8;
  if (!qword_1001C03D8)
  {
    result = swift_getWitnessTable(&unk_10017C2A0, &type metadata for EventType);
    atomic_store(result, (unint64_t *)&qword_1001C03D8);
  }
  return result;
}

void sub_100048D1C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  v1 = sub_100049C3C(a1);
  sub_100049C9C(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_1000232C0();
  sub_1000231EC();
}

uint64_t sub_100048D44()
{
  unsigned __int8 *v0;

  return sub_100048464(*v0);
}

uint64_t sub_100048D4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10004826C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100048D70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000498D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100048D98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000498D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100048DC4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100048684(a1, a2);
}

uint64_t sub_100048DD8(_QWORD *a1)
{
  return sub_100048500(a1);
}

uint64_t getEnumTagSinglePayload for EventViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 9) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v5 = v6 - 10;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EventViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100048EC0 + 4 * byte_10017C1BD[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100048EF4 + 4 * byte_10017C1B8[v4]))();
}

uint64_t sub_100048EF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100048EFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100048F04);
  return result;
}

uint64_t sub_100048F10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100048F18);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100048F1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100048F24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventViewModel.CodingKeys()
{
  return &type metadata for EventViewModel.CodingKeys;
}

uint64_t *sub_100048F40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v13);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[4];
    v8 = *(int *)(a3 + 28);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    a1[4] = v7;
    v11 = type metadata accessor for Date(0);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
    {
      v12 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
    }
  }
  return v3;
}

uint64_t sub_100049050(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  v4 = (uint64_t)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Date(0);
  result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

_QWORD *sub_1000490CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[4];
  a1[4] = v6;
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v8, 0, 1, v10);
  }
  return a1;
}

_QWORD *sub_1000491B0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a1[4];
  v11 = a2[4];
  a1[4] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v16 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v15);
  v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v15);
  if (!v16)
  {
    v18 = *(_QWORD *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v19 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v13, 0, 1, v15);
  return a1;
}

uint64_t sub_100049304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = type metadata accessor for Date(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v7, 1, v8))
  {
    v9 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *sub_1000493B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v10);
  v11 = *(int *)(a3 + 28);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v14);
  v16 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v14);
  if (!v15)
  {
    v17 = *(_QWORD *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v18 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 0, 1, v14);
  return a1;
}

uint64_t sub_1000494E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000494F0);
}

void sub_1000494F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_100044448(*(_QWORD *)(a1 + 8));
    sub_1000443A4();
  }
  else
  {
    v6 = sub_100005D40(&qword_1001BF0A0);
    sub_100016B50(a1 + *(int *)(a3 + 28), a2, v6);
  }
}

uint64_t sub_10004954C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100049558);
}

void sub_100049558(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_1000443A4();
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BF0A0);
    sub_100016B44(a1 + *(int *)(a4 + 28), a2, a2, v7);
  }
}

void sub_1000495B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_10017C230;
  v4[1] = &unk_10017C230;
  v4[2] = &unk_10017C260;
  sub_1000463A4(319, (unint64_t *)&unk_1001BF6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t getEnumTagSinglePayload for AlertSeverity(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AlertSeverity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10004971C + 4 * byte_10017C1C7[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100049750 + 4 * byte_10017C1C2[v4]))();
}

uint64_t sub_100049750(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049758(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100049760);
  return result;
}

uint64_t sub_10004976C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100049774);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100049778(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049780(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AlertSeverity()
{
  return &type metadata for AlertSeverity;
}

unint64_t sub_1000497A0()
{
  unint64_t result;

  result = qword_1001C0488;
  if (!qword_1001C0488)
  {
    result = swift_getWitnessTable(&unk_10017C48C, &type metadata for AlertSeverity);
    atomic_store(result, (unint64_t *)&qword_1001C0488);
  }
  return result;
}

unint64_t sub_1000497E0()
{
  unint64_t result;

  result = qword_1001C0490;
  if (!qword_1001C0490)
  {
    result = swift_getWitnessTable(&unk_10017C56C, &type metadata for EventViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C0490);
  }
  return result;
}

unint64_t sub_100049820()
{
  unint64_t result;

  result = qword_1001C0498;
  if (!qword_1001C0498)
  {
    result = swift_getWitnessTable(&unk_10017C4DC, &type metadata for EventViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C0498);
  }
  return result;
}

unint64_t sub_100049860()
{
  unint64_t result;

  result = qword_1001C04A0;
  if (!qword_1001C04A0)
  {
    result = swift_getWitnessTable(&unk_10017C504, &type metadata for EventViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C04A0);
  }
  return result;
}

unint64_t sub_10004989C()
{
  unint64_t result;

  result = qword_1001C04A8;
  if (!qword_1001C04A8)
  {
    result = swift_getWitnessTable(&unk_10017C414, &type metadata for AlertSeverity);
    atomic_store(result, (unint64_t *)&qword_1001C04A8);
  }
  return result;
}

unint64_t sub_1000498D8()
{
  unint64_t result;

  result = qword_1001C04B8;
  if (!qword_1001C04B8)
  {
    result = swift_getWitnessTable(&unk_10017C73C, &type metadata for TemplateDescriptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C04B8);
  }
  return result;
}

unint64_t sub_100049914()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C04C8;
  if (!qword_1001C04C8)
  {
    v1 = sub_100005DC4(&qword_1001C04C0);
    sub_10002EF14(&qword_1001BF780, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1001C04C8);
  }
  return result;
}

unint64_t sub_100049998()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C04D8;
  if (!qword_1001C04D8)
  {
    v1 = sub_100005DC4(&qword_1001C04C0);
    sub_10002EF14(&qword_1001BF7C8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1001C04D8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TemplateDescriptions.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100049A68 + 4 * byte_10017C1D1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100049A9C + 4 * byte_10017C1CC[v4]))();
}

uint64_t sub_100049A9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049AA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100049AACLL);
  return result;
}

uint64_t sub_100049AB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100049AC0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100049AC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049ACC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TemplateDescriptions.CodingKeys()
{
  return &type metadata for TemplateDescriptions.CodingKeys;
}

unint64_t sub_100049AEC()
{
  unint64_t result;

  result = qword_1001C04E0;
  if (!qword_1001C04E0)
  {
    result = swift_getWitnessTable(&unk_10017C714, &type metadata for TemplateDescriptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C04E0);
  }
  return result;
}

unint64_t sub_100049B2C()
{
  unint64_t result;

  result = qword_1001C04E8;
  if (!qword_1001C04E8)
  {
    result = swift_getWitnessTable(&unk_10017C684, &type metadata for TemplateDescriptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C04E8);
  }
  return result;
}

unint64_t sub_100049B6C()
{
  unint64_t result;

  result = qword_1001C04F0;
  if (!qword_1001C04F0)
  {
    result = swift_getWitnessTable(&unk_10017C6AC, &type metadata for TemplateDescriptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001C04F0);
  }
  return result;
}

uint64_t sub_100049BB8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100049BC4(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_100049BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_100049BF0()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

void sub_100049BFC(uint64_t a1)
{
  uint64_t *v1;

  sub_100016904(a1, v1);
}

void sub_100049C04(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10001C5BC(a1, a2, v2);
}

uint64_t sub_100049C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_100049C34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return String.hash(into:)(a1, a2, v2);
}

_QWORD *sub_100049C3C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_100049C44@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 88) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 88, v1);
}

uint64_t sub_100049C58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_100049C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

void sub_100049C78(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100049C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

void sub_100049C9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

void sub_100049CA8()
{
  unsigned __int8 v0;

  Hasher._combine(_:)(v0);
}

uint64_t sub_100049CB4(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100049CBC()
{
  return 0;
}

void sub_100049CC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10001C5BC(a1, a2, v2);
}

void sub_100049D10(uint64_t a1)
{
  uint64_t *v1;

  sub_100016904(a1, v1);
}

uint64_t sub_100049D2C()
{
  uint64_t v0;

  return _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0(*(_QWORD **)(v0 - 112));
}

uint64_t sub_100049D34()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 144), *(_QWORD *)(v1 - 136));
}

uint64_t sub_100049D40()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_100049D4C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

unint64_t sub_100049D58(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_100016828(*(_QWORD *)a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v11 = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain(v10);
    if (v11)
    {
      v12 = *(_QWORD *)(a2 + 32);
      v13 = *(_QWORD *)(a2 + 40);
      v14 = *(_BYTE *)(a2 + 48);
      sub_100016828(v12, v13, v14);
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(a1 + 40) = v13;
      *(_BYTE *)(a1 + 48) = v14;
      *(_QWORD *)(a1 + 56) = v11;
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v16;
    }
    v17 = *(_QWORD *)(a2 + 64);
    v18 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v17;
    *(_QWORD *)(a1 + 72) = v18;
    v19 = *(int *)(a3 + 20);
    v20 = (uint64_t *)(a1 + v19);
    v21 = (uint64_t *)(a2 + v19);
    swift_retain(v17);
    v22 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = v20;
      v25 = v22;
      v26 = 1;
    }
    else
    {
      v27 = *v21;
      *v20 = *v21;
      swift_retain(v27);
      v24 = v20;
      v25 = v22;
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v25, v26);
  }
  return a1;
}

uint64_t sub_100049EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  sub_100016868(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    sub_100016868(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    swift_bridgeObjectRelease(v4);
  }
  swift_release(*(_QWORD *)(a1 + 64));
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v6 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v5, v6) != 1)
    return swift_release(*v5);
  v7 = type metadata accessor for ColorSchemeContrast(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
}

uint64_t sub_100049F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_100016828(*(_QWORD *)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  v10 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v9);
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v13 = *(_BYTE *)(a2 + 48);
    sub_100016828(v11, v12, v13);
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v12;
    *(_BYTE *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v10;
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v14;
  }
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = v16;
  v17 = *(int *)(a3 + 20);
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  swift_retain(v15);
  v20 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
    v22 = 1;
  }
  else
  {
    v23 = *v19;
    *v18 = *v19;
    swift_retain(v23);
    v22 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v20, v22);
  return a1;
}

uint64_t sub_10004A0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_100016828(*(_QWORD *)a2, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_100016868(v9, v10, v11);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = (_OWORD *)(a1 + 32);
  v15 = (_OWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v16)
    {
      v17 = *(_QWORD *)(a2 + 32);
      v18 = *(_QWORD *)(a2 + 40);
      v19 = *(_BYTE *)(a2 + 48);
      sub_100016828(v17, v18, v19);
      v20 = *(_QWORD *)(a1 + 32);
      v21 = *(_QWORD *)(a1 + 40);
      v22 = *(_BYTE *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v17;
      *(_QWORD *)(a1 + 40) = v18;
      *(_BYTE *)(a1 + 48) = v19;
      sub_100016868(v20, v21, v22);
      v23 = *(_QWORD *)(a2 + 56);
      v24 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v23;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      sub_10004A284(a1 + 32);
      v29 = *(_OWORD *)(a2 + 48);
      *v14 = *v15;
      *(_OWORD *)(a1 + 48) = v29;
    }
  }
  else if (v16)
  {
    v25 = *(_QWORD *)(a2 + 32);
    v26 = *(_QWORD *)(a2 + 40);
    v27 = *(_BYTE *)(a2 + 48);
    sub_100016828(v25, v26, v27);
    *(_QWORD *)(a1 + 32) = v25;
    *(_QWORD *)(a1 + 40) = v26;
    *(_BYTE *)(a1 + 48) = v27;
    v28 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v28;
    swift_bridgeObjectRetain(v28);
  }
  else
  {
    v30 = *(_OWORD *)(a2 + 48);
    *v14 = *v15;
    *(_OWORD *)(a1 + 48) = v30;
  }
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v31;
  swift_retain(v31);
  swift_release(v32);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  if (a1 != a2)
  {
    v33 = *(int *)(a3 + 20);
    v34 = (uint64_t *)(a1 + v33);
    v35 = (uint64_t *)(a2 + v33);
    sub_10002F014(a1 + v33, &qword_1001BF490);
    v36 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
    {
      v37 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
      v38 = 1;
    }
    else
    {
      v39 = *v35;
      *v34 = *v35;
      swift_retain(v39);
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v36, v38);
  }
  return a1;
}

uint64_t sub_10004A284(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Text - 1) + 8))();
  return a1;
}

char *sub_10004A2B8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  memcpy(a1, a2, 0x50uLL);
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10004A368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_100016868(v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v10);
  if (*(_QWORD *)(a1 + 56))
  {
    v11 = *(_QWORD *)(a2 + 56);
    if (v11)
    {
      v12 = *(_BYTE *)(a2 + 48);
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_QWORD *)(a1 + 40);
      v15 = *(_BYTE *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 48) = v12;
      sub_100016868(v13, v14, v15);
      v16 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v11;
      swift_bridgeObjectRelease(v16);
      goto LABEL_6;
    }
    sub_10004A284(a1 + 32);
  }
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
LABEL_6:
  v18 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release(v18);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  if (a1 != a2)
  {
    v19 = *(int *)(a3 + 20);
    v20 = (void *)(a1 + v19);
    v21 = (const void *)(a2 + v19);
    sub_10002F014(a1 + v19, &qword_1001BF490);
    v22 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10004A4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004A4D8);
}

uint64_t sub_10004A4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100005D40(&qword_1001BF4A8);
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10004A550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004A55C);
}

uint64_t sub_10004A55C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BF4A8);
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ErrorView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C0550;
  if (!qword_1001C0550)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ErrorView);
  return result;
}

void sub_10004A604(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "P";
  sub_10004A678(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_10004A678(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001BF528)
  {
    v2 = type metadata accessor for ColorSchemeContrast(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001BF528);
  }
}

uint64_t sub_10004A6CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019ED80, 1);
}

uint64_t sub_10004A6DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  __n128 v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v91 = a1;
  v2 = type metadata accessor for ColorSchemeContrast(0);
  v86 = *(_QWORD *)(v2 - 8);
  v87 = v2;
  sub_1000230F4();
  v4 = __chkstk_darwin(v3);
  v85 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  sub_100023440((uint64_t)&v63 - v6);
  v77 = sub_100005D40(&qword_1001C0588);
  v76 = *(_QWORD *)(v77 - 8);
  sub_1000230F4();
  __chkstk_darwin(v7);
  sub_1000230E0();
  sub_100023440(v8);
  v9 = sub_100005D40(&qword_1001C0590);
  v10 = sub_10004B12C(v9, (uint64_t)&v105);
  __chkstk_darwin(v10);
  sub_1000230E0();
  sub_100023440(v11);
  v12 = sub_100005D40(&qword_1001C0598);
  v13 = sub_10004B12C(v12, (uint64_t)&v106);
  __chkstk_darwin(v13);
  sub_1000230E0();
  sub_100023440(v14);
  v15 = sub_100005D40(&qword_1001C05A0);
  v16 = sub_10004B12C(v15, (uint64_t)&v107);
  __chkstk_darwin(v16);
  sub_1000230E0();
  sub_100023440(v17);
  v90 = sub_100005D40(&qword_1001C05A8);
  sub_1000230F4();
  __chkstk_darwin(v18);
  sub_1000230E0();
  sub_100023440(v19);
  v20 = sub_100005D40(&qword_1001C05B0);
  v88 = *(_QWORD *)(v20 - 8);
  v89 = v20;
  sub_1000230F4();
  __chkstk_darwin(v21);
  sub_1000230E0();
  sub_100023440(v22);
  v65 = static Axis.Set.vertical.getter();
  v73 = v1;
  sub_10004AC60(v1, (uint64_t)&v92);
  v24 = v92;
  v23 = v93;
  v67 = v92;
  v66 = v93;
  v64 = v94;
  v26 = v95;
  v25 = v96;
  v68 = v95;
  v71 = v96;
  v27 = v97;
  v28 = v98;
  v70 = v97;
  v69 = v98;
  v29 = v99;
  v30 = v100;
  v31 = v101;
  v32 = *(_QWORD *)(v1 + 64);
  KeyPath = swift_getKeyPath(&unk_10017C810);
  LOBYTE(v92) = v65;
  v93 = v24;
  v94 = v23;
  LOBYTE(v23) = v64;
  LOBYTE(v95) = v64;
  v96 = v26;
  v97 = v25;
  v98 = v27;
  v99 = v28;
  v100 = v29;
  v101 = v30;
  v102 = v31;
  v103 = KeyPath;
  v34 = KeyPath;
  v104 = v32;
  swift_retain(v32);
  v36 = static Font.Weight.semibold.getter(v35);
  v37 = sub_100005D40(&qword_1001C05B8);
  v38 = sub_10004ADA8();
  v39 = v72;
  View.fontWeight(_:)(*(_QWORD *)&v36, 0, v37, v38);
  sub_100016868(v67, v66, v23);
  swift_bridgeObjectRelease(v68);
  sub_10004AE44(v71, v70, v69, v29, v30);
  swift_release(v32);
  v40 = swift_release(v34);
  v41 = static Color.white.getter(v40);
  v42 = swift_getKeyPath(&unk_10017C840);
  v43 = v76;
  v44 = v74;
  v45 = v77;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v74, v39, v77);
  v46 = (uint64_t *)(v44 + *(int *)(v75 + 36));
  *v46 = v42;
  v46[1] = v41;
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v39, v45);
  type metadata accessor for ErrorView(0);
  v47 = v82;
  sub_1000C548C(v82);
  v48 = v86;
  v49 = v87;
  v50 = v85;
  (*(void (**)(char *, _QWORD, uint64_t))(v86 + 104))(v85, enum case for ColorSchemeContrast.increased(_:), v87);
  v51 = v50;
  LOBYTE(v50) = static ColorSchemeContrast.== infix(_:_:)(v47, v50);
  v52 = *(void (**)(char *, uint64_t))(v48 + 8);
  v52(v51, v49);
  v52(v47, v49);
  if ((v50 & 1) != 0)
    v53 = 1.0;
  else
    v53 = 0.6;
  v54 = v78;
  sub_10002EFD4(v44, v78, &qword_1001C0590);
  *(double *)(v54 + *(int *)(v81 + 36)) = v53;
  sub_10002F014(v44, &qword_1001C0590);
  v55 = swift_getKeyPath(&unk_10017C870);
  v56 = v79;
  sub_10002EFD4(v54, v79, &qword_1001C0598);
  v57 = v56 + *(int *)(v83 + 36);
  *(_QWORD *)v57 = v55;
  *(_BYTE *)(v57 + 8) = 1;
  sub_10002F014(v54, &qword_1001C0598);
  static Alignment.center.getter(v58);
  v59 = v80;
  sub_1000779B0();
  sub_10002F014(v56, &qword_1001C05A0);
  v60 = sub_100043F8C(&qword_1001C05D8, &qword_1001C05A8, (void (*)(void))sub_10004AE90);
  v61 = v84;
  View.widgetAccentable(_:)(1, v90, v60);
  sub_10002F014(v59, &qword_1001C05A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 32))(v91, v61, v89);
}

double sub_10004AC60@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v17 = v7;
  v18 = v8;
  v16 = v9;
  if (v10)
  {
    v11 = v8 & 1;
    v12 = *(_QWORD *)(a1 + 72);
    KeyPath = swift_getKeyPath(&unk_10017C8A0);
  }
  else
  {
    v7 = 0;
    v9 = 0;
    v11 = 0;
    KeyPath = 0;
    v12 = 0;
  }
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 56) = v10;
  *(_QWORD *)(a2 + 64) = KeyPath;
  *(_QWORD *)(a2 + 72) = v12;
  v14 = KeyPath;
  sub_100016828(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  sub_10004B01C(v7, v9, v11, v10, v14);
  swift_bridgeObjectRetain(v6);
  sub_100016828(v3, v4, v5);
  sub_1000167F8(v17, v16, v18, v10);
  sub_10004AE44(v7, v9, v11, v10, v14);
  sub_100016868(v3, v4, v5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

unint64_t sub_10004ADA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C05C0;
  if (!qword_1001C05C0)
  {
    v1 = sub_100005DC4(&qword_1001C05B8);
    sub_10004AFE0(&qword_1001C05C8, &qword_1001C05D0, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    sub_10004AFE0(&qword_1001BF3F0, &qword_1001BF3F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C05C0);
  }
  return result;
}

double sub_10004AE44(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  double result;

  if (a4)
  {
    sub_100016868(a1, a2, a3 & 1);
    swift_release(a5);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  return result;
}

unint64_t sub_10004AE90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C05E0;
  if (!qword_1001C05E0)
  {
    v1 = sub_100005DC4(&qword_1001C05A0);
    sub_100043F8C(&qword_1001C05E8, &qword_1001C0598, (void (*)(void))sub_10004AF34);
    sub_10004AFE0(&qword_1001C05F8, &qword_1001C0600, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C05E0);
  }
  return result;
}

unint64_t sub_10004AF34()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001C05F0;
  if (!qword_1001C05F0)
  {
    v1 = sub_100005DC4(&qword_1001C0590);
    v2[0] = sub_100005DC4(&qword_1001C05B8);
    v2[1] = sub_10004ADA8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_10004AFE0(&qword_1001BF3E0, &qword_1001BF3E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C05F0);
  }
  return result;
}

void sub_10004AFE0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = sub_100005DC4(a2);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_100006338();
}

uint64_t sub_10004B01C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    sub_100016828(result, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    return swift_retain(a5);
  }
  return result;
}

void sub_10004B058()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10004B14C();
  *v0 = v1;
  sub_100006338();
}

void sub_10004B074()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10004B14C();
  *v0 = v1;
  sub_100006338();
}

void sub_10004B090(double *a1)
{
  sub_10004B140(a1);
  sub_100006338();
}

void sub_10004B0A8(double *a1)
{
  sub_10004B140(a1);
  sub_100006338();
}

uint64_t sub_10004B0C0()
{
  _QWORD v1[2];

  v1[0] = sub_100005DC4(&qword_1001C05A8);
  v1[1] = sub_100043F8C(&qword_1001C05D8, &qword_1001C05A8, (void (*)(void))sub_10004AE90);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
}

uint64_t sub_10004B12C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

uint64_t sub_10004B140(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_10004B14C()
{
  return EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t destroy for LargePrecipitationViewAttributes(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for LargePrecipitationViewAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for LargePrecipitationViewAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for LargePrecipitationViewAttributes(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LargePrecipitationViewAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for LargePrecipitationViewAttributes(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargePrecipitationViewAttributes(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LargePrecipitationViewAttributes()
{
  return &type metadata for LargePrecipitationViewAttributes;
}

uint64_t sub_10004B324(char a1, CGFloat a2)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  uint64_t result;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  const __CFString *v20;
  NSString v21;
  uint64_t v22;
  const __CFDictionary *isa;
  const __CTFontDescriptor *v24;
  CTFontRef v25;
  uint64_t v26;
  _QWORD v27[4];
  _BYTE v28[112];
  _BYTE v29[152];
  uint64_t v30;

  v4 = sub_100005D40(&qword_1001C0608);
  inited = swift_initStackObject(v4, v29);
  *(_OWORD *)(inited + 16) = xmmword_10017C900;
  *(_QWORD *)(inited + 32) = kCTFontSymbolicTrait;
  *(_QWORD *)(inited + 40) = 0x8000;
  *(_QWORD *)(inited + 64) = &type metadata for Int;
  *(_QWORD *)(inited + 72) = kCTFontWeightTrait;
  *(_QWORD *)(inited + 80) = kCTFontWeightMedium;
  *(_QWORD *)(inited + 104) = &type metadata for CGFloat;
  *(_QWORD *)(inited + 112) = kCTFontWidthTrait;
  v6 = kCTFontWidthStandard;
  *(_QWORD *)(inited + 144) = &type metadata for CGFloat;
  *(_QWORD *)(inited + 120) = v6;
  type metadata accessor for CFString(0);
  v8 = v7;
  sub_10004B564();
  v9 = (id)kCTFontSymbolicTrait;
  v10 = (id)kCTFontWeightTrait;
  v11 = (id)kCTFontWidthTrait;
  result = sub_10004B658(inited);
  v13 = result;
  v30 = result;
  if ((a1 & 1) == 0)
    goto LABEL_5;
  if (kCTFontUIFontDesignTrait)
  {
    v14 = (void *)kCTFontUIFontDesignCompactSoft;
    if (kCTFontUIFontDesignCompactSoft)
    {
      v27[3] = v8;
      v27[0] = kCTFontUIFontDesignCompactSoft;
      v15 = kCTFontUIFontDesignTrait;
      v16 = v14;
      sub_10004B5A4((uint64_t)v27, v15);
      v13 = v30;
LABEL_5:
      v17 = swift_initStackObject(v4, v28);
      *(_OWORD *)(v17 + 16) = xmmword_10017BD00;
      *(_QWORD *)(v17 + 32) = kCTFontTraitsAttribute;
      v18 = sub_100005D40(&qword_1001C0610);
      *(_QWORD *)(v17 + 40) = v13;
      *(_QWORD *)(v17 + 64) = v18;
      *(_QWORD *)(v17 + 72) = kCTFontNameAttribute;
      v19 = (id)kCTFontTraitsAttribute;
      v20 = (id)kCTFontNameAttribute;
      v21 = String._bridgeToObjectiveC()();
      *(_QWORD *)(v17 + 104) = v8;
      *(_QWORD *)(v17 + 80) = v21;
      v22 = sub_10004B658(v17);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v22);
      v24 = CTFontDescriptorCreateWithAttributes(isa);
      v25 = CTFontCreateWithFontDescriptorAndOptions(v24, a2, 0, 0x400uLL);
      v26 = Font.init(_:)(v25);

      return v26;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_10004B564()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001BEFA8;
  if (!qword_1001BEFA8)
  {
    type metadata accessor for CFString(255);
    result = swift_getWitnessTable(&unk_10017A5D0, v1);
    atomic_store(result, (unint64_t *)&qword_1001BEFA8);
  }
  return result;
}

void sub_10004B5A4(uint64_t a1, void *a2)
{
  _OWORD v3[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10004B648((_OWORD *)a1, v3);
    sub_1001128F8(v3, a2);

  }
  else
  {
    sub_10004B608(a1);
    sub_1001126BC((uint64_t)a2, v3);

    sub_10004B608((uint64_t)v3);
  }
}

uint64_t sub_10004B608(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D40(&qword_1001C0618);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_10004B648(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10004B658(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return Dictionary.init(dictionaryLiteral:)(a1, v1, v3, v2);
}

uint64_t sub_10004B668@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v30;
  uint64_t v31;

  v31 = a1;
  v2 = type metadata accessor for SunriseSunsetViewModel(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WeatherDataViewModel(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v30 - v10;
  v12 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ForecastEntry(0);
  sub_10004B9CC(v1 + *(int *)(v15 + 28), (uint64_t)v14, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v14, v12) != 1)
  {
    if (*v14)
      v21 = 1;
    else
      v21 = 2;
LABEL_11:
    v22 = v31;
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v22, v21, 2, v2);
  }
  sub_10004B988((uint64_t)v14, (uint64_t)v11);
  sub_10004B9CC((uint64_t)v11, (uint64_t)v9, type metadata accessor for WeatherDataViewModel);
  if (swift_getEnumCaseMultiPayload(v9, v6) < 2)
  {
    sub_10004BA10((uint64_t)v9);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100025184(v16, (uint64_t)qword_1001D9FF0);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)sub_1000290AC();
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Expected sunriseSunset but got aggregate or instant", v20, 2u);
      sub_10002534C((uint64_t)v20);
    }

    sub_10004BA10((uint64_t)v11);
    v21 = 1;
    goto LABEL_11;
  }
  v23 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v23(v5, v9, v2);
  if (qword_1001BEE98 != -1)
    swift_once(&qword_1001BEE98, sub_100097BD0);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_100025184(v24, (uint64_t)qword_1001D9FF0);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)sub_1000290AC();
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Making Sunrise/Sunset widget view model entry from aggregate weather", v28, 2u);
    sub_10002534C((uint64_t)v28);
  }

  sub_10004BA10((uint64_t)v11);
  v22 = v31;
  v23((char *)v31, v5, v2);
  v21 = 0;
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v22, v21, 2, v2);
}

uint64_t sub_10004B988(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeatherDataViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004B9CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004BA10(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WeatherDataViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004BA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, uint64_t);
  uint64_t v53;
  __n128 v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v4 = sub_100005D40(&qword_1001C0620);
  v56 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10002325C();
  v7 = v6 - v5;
  v57 = sub_100005D40(&qword_1001C0628);
  v58 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  sub_10002325C();
  v10 = v9 - v8;
  v59 = sub_100005D40(&qword_1001C0630);
  v60 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  sub_10002325C();
  v13 = v12 - v11;
  v14 = type metadata accessor for WeatherTimelineProvider();
  swift_allocObject(v14, 248, 7);
  swift_bridgeObjectRetain_n(a2, 2);
  v61 = sub_100165A84(64, a1, a2);
  v15 = type metadata accessor for RainContentView(0);
  v16 = sub_1000061B0(&qword_1001C0638, type metadata accessor for RainContentView, (uint64_t)&unk_10017C9A8);
  v17 = sub_1000061B0(&qword_1001C0640, (uint64_t (*)(uint64_t))type metadata accessor for WeatherTimelineProvider, (uint64_t)&unk_100185D00);
  StaticConfiguration.init<A>(kind:provider:content:)(a1, a2, &v61, sub_10004BE3C, 0, v15, v14, v16, v17);
  v18 = LocalizedStringKey.init(stringLiteral:)(0x7469706963657250, 0xED00006E6F697461);
  v22 = sub_100045174(v18, v20, v19 & 1, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = sub_10004BFD4();
  WidgetConfiguration.configurationDisplayName(_:)(v22, v24, v28, v26, v4, v29);
  sub_100016868(v22, v24, v28);
  v30 = swift_bridgeObjectRelease(v26);
  (*(void (**)(uint64_t, uint64_t, __n128))(v56 + 8))(v7, v4, v30);
  v31 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003CLL, 0x8000000100186650);
  v35 = sub_100045174(v31, v33, v32 & 1, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v61 = v4;
  v62 = v29;
  v42 = sub_10004516C((uint64_t)&v61, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  WidgetConfiguration.description(_:)(v35, v37, v41, v39, v57, v42);
  sub_100016868(v35, v37, v41);
  v43 = swift_bridgeObjectRelease(v39);
  (*(void (**)(uint64_t, uint64_t, __n128))(v58 + 8))(v10, v57, v43);
  v44 = sub_100005D40(&qword_1001C0280);
  v45 = type metadata accessor for WidgetFamily(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(_QWORD *)(v46 + 72);
  v48 = *(unsigned __int8 *)(v46 + 80);
  v49 = (v48 + 32) & ~v48;
  v50 = swift_allocObject(v44, v49 + 2 * v47, v48 | 7);
  *(_OWORD *)(v50 + 16) = xmmword_10017BD00;
  v51 = v50 + v49;
  v52 = *(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104);
  v52(v51, enum case for WidgetFamily.accessoryCircular(_:), v45);
  v52(v51 + v47, enum case for WidgetFamily.accessoryInline(_:), v45);
  v61 = v57;
  v62 = v42;
  v53 = sub_10004516C((uint64_t)&v61, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  WidgetConfiguration.supportedFamilies(_:)(v50, v59, v53);
  v54 = swift_bridgeObjectRelease(v50);
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v60 + 8))(v13, v59, v54);
}

uint64_t sub_10004BE3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044F34(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath(&unk_10017C968);
  v7 = sub_100005D40(&qword_1001BFA18);
  swift_storeEnumTagMultiPayload(a2, v7, 0);
  v8 = type metadata accessor for RainContentView(0);
  return sub_100044FCC((uint64_t)v6, (uint64_t)a2 + *(int *)(v8 + 20));
}

uint64_t sub_10004BEEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = type metadata accessor for WidgetNames(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10002325C();
  v4 = v3 - v2;
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v3 - v2, enum case for WidgetNames.RainComplication(_:), v0);
  v6 = WidgetNames.rawValue.getter(v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

ValueMetadata *type metadata accessor for RainComplicationWidget()
{
  return &type metadata for RainComplicationWidget;
}

uint64_t sub_10004BF98(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019EDE0, 1);
}

uint64_t sub_10004BFA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10004BEEC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10004BFCC()
{
  uint64_t *v0;

  return sub_10004BA4C(*v0, v0[1]);
}

unint64_t sub_10004BFD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0648;
  if (!qword_1001C0648)
  {
    v1 = sub_100005DC4(&qword_1001C0620);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0648);
  }
  return result;
}

uint64_t sub_10004C01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v0 = sub_100005DC4(&qword_1001C0630);
  v1 = sub_100005DC4(&qword_1001C0628);
  v5 = sub_100005DC4(&qword_1001C0620);
  v6 = sub_10004BFD4();
  v2 = sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v5 = v1;
  v6 = v2;
  v3 = sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>);
  v5 = v0;
  v6 = v3;
  return sub_10004516C((uint64_t)&v5, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>);
}

uint64_t sub_10004C0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004C0C0);
}

uint64_t sub_10004C0C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = type metadata accessor for ForecastEntry(0);
    v8 = a1 + *(int *)(a3 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
}

uint64_t sub_10004C12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004C138);
}

uint64_t sub_10004C138(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_100005D40(&qword_1001BFA48);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = type metadata accessor for ForecastEntry(0);
    v10 = a1 + *(int *)(a4 + 20);
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, a2, a2, v9);
}

uint64_t type metadata accessor for RainContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C06A8;
  if (!qword_1001C06A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RainContentView);
  return result;
}

uint64_t sub_10004C1E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019EE30, 1);
}

void sub_10004C1F4(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10004C1FC(v1, a1);
}

void sub_10004C1FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;
  _DWORD *v75;
  uint64_t v76;
  Swift::String v77;
  void *object;
  __n128 v79;
  Swift::String v80;
  uint64_t v81;
  unint64_t v82;
  Swift::String v83;
  _DWORD *v84;
  uint64_t v85;
  Swift::String v86;
  void *v87;
  __n128 v88;
  Swift::String v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;

  v118 = a2;
  v111 = sub_100005D40(&qword_1001C06E0);
  __chkstk_darwin(v111);
  v112 = (uint64_t)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100005D40(&qword_1001C06E8);
  __chkstk_darwin(v117);
  v113 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for RainInlineContentView(0);
  __chkstk_darwin(v108);
  v96 = (uint64_t)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100005D40(&qword_1001C06F0);
  __chkstk_darwin(v104);
  v107 = (uint64_t)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100005D40(&qword_1001C06F8);
  __chkstk_darwin(v106);
  v95 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100005D40(&qword_1001C0700);
  __chkstk_darwin(v109);
  v110 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RainContentView(0);
  v10 = __chkstk_darwin(v9);
  v92 = (uint64_t)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v91 = (uint64_t)&v90 - v12;
  v114 = sub_100005D40(&qword_1001C0708);
  __chkstk_darwin(v114);
  v116 = (uint64_t)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100005D40(&qword_1001C0710);
  __chkstk_darwin(v102);
  v103 = (uint64_t)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100005D40(&qword_1001C0718);
  __chkstk_darwin(v115);
  v105 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for RainCircularContentView(0);
  __chkstk_darwin(v101);
  v94 = (uint64_t)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100005D40(&qword_1001C0720);
  __chkstk_darwin(v97);
  v18 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100005D40(&qword_1001C0728);
  __chkstk_darwin(v99);
  v93 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005D40(&qword_1001BF0C0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v90 - v24;
  v26 = type metadata accessor for RainInlineContentViewModel(0);
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v90 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v31 = (char *)&v90 - v30;
  v98 = sub_100005D40(&qword_1001C0730);
  __chkstk_darwin(v98);
  v100 = (char *)&v90 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for WidgetFamily(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = __chkstk_darwin(v33);
  v90 = (_DWORD *)((char *)&v90 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v35);
  v38 = (char *)&v90 - v37;
  sub_1000C54B0((_DWORD **)((char *)&v90 - v37));
  v39 = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v38, v33);
  if (v39 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_10004CE20(2, (uint64_t)v25);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v26) == 1)
    {
      sub_100016904((uint64_t)v25, &qword_1001BF0C0);
      v40 = (uint64_t)v93;
      sub_1000949D4();
      sub_10003EB70(v40, (uint64_t)v18, &qword_1001C0728);
      swift_storeEnumTagMultiPayload(v18, v97, 1);
      sub_10002EF14(&qword_1001C0760, type metadata accessor for RainCircularContentView, (uint64_t)&unk_10017DCF8);
      v42 = v41;
      v43 = sub_10004D0FC();
      v44 = (uint64_t)v100;
      _ConditionalContent<>.init(storage:)(v18, v101, v99, v42, v43);
      sub_100016904(v40, &qword_1001C0728);
    }
    else
    {
      sub_10004D278((uint64_t)v25, (uint64_t)v31, type metadata accessor for RainInlineContentViewModel);
      v51 = v94;
      sub_10004D258((uint64_t)v31, v94, type metadata accessor for RainInlineContentViewModel);
      sub_10004D258(v51, (uint64_t)v18, type metadata accessor for RainCircularContentView);
      swift_storeEnumTagMultiPayload(v18, v97, 0);
      sub_10002EF14(&qword_1001C0760, type metadata accessor for RainCircularContentView, (uint64_t)&unk_10017DCF8);
      v53 = v52;
      v54 = sub_10004D0FC();
      v44 = (uint64_t)v100;
      _ConditionalContent<>.init(storage:)(v18, v101, v99, v53, v54);
      sub_100011894(v51, type metadata accessor for RainCircularContentView);
      sub_100011894((uint64_t)v31, type metadata accessor for RainInlineContentViewModel);
    }
    v55 = &qword_1001C0730;
    v56 = v103;
    sub_10003EB70(v44, v103, &qword_1001C0730);
    swift_storeEnumTagMultiPayload(v56, v102, 0);
    v57 = sub_10004D078();
    v58 = (uint64_t)v105;
    _ConditionalContent<>.init(storage:)(v56, v98, &type metadata for Never, v57, &protocol witness table for Never);
    v59 = v116;
    sub_10003EB70(v58, v116, &qword_1001C0718);
    swift_storeEnumTagMultiPayload(v59, v114, 0);
    v60 = sub_10004D1EC(&qword_1001C0750, &qword_1001C0718, (void (*)(void))sub_10004D078);
    v61 = sub_10004D1EC(&qword_1001C0780, &qword_1001C06E8, (void (*)(void))sub_10004CFF4);
    _ConditionalContent<>.init(storage:)(v59, v115, v117, v60, v61);
    sub_100016904(v58, &qword_1001C0718);
    v62 = v44;
LABEL_12:
    sub_100016904(v62, v55);
    return;
  }
  if (v39 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    sub_10004D258(a1, v91, type metadata accessor for RainContentView);
    v119 = 0;
    v120 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v74._countAndFlagsBits = 0xD000000000000021;
    v74._object = (void *)0x8000000100186340;
    String.append(_:)(v74);
    v75 = v90;
    sub_1000C54B0(v90);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v33, v76);
    object = v77._object;
    String.append(_:)(v77);
    v79 = swift_bridgeObjectRelease(object);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v34 + 8))(v75, v33, v79);
    v80._object = (void *)0x8000000100186720;
    v80._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v80);
    v81 = v119;
    v82 = v120;
  }
  else
  {
    if (v39 == enum case for WidgetFamily.accessoryInline(_:))
    {
      sub_10004CE20(0, (uint64_t)v23);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v23, 1, v26) == 1)
      {
        sub_100016904((uint64_t)v23, &qword_1001BF0C0);
        v45 = (uint64_t)v95;
        sub_10010DEA8();
        v46 = v107;
        sub_10003EB70(v45, v107, &qword_1001C06F8);
        swift_storeEnumTagMultiPayload(v46, v104, 1);
        sub_10002EF14(&qword_1001C0738, type metadata accessor for RainInlineContentView, (uint64_t)&unk_100181C88);
        v48 = v47;
        v49 = sub_10004CF4C();
        v50 = (uint64_t)v110;
        _ConditionalContent<>.init(storage:)(v46, v108, v106, v48, v49);
        sub_100016904(v45, &qword_1001C06F8);
      }
      else
      {
        sub_10004D278((uint64_t)v23, (uint64_t)v29, type metadata accessor for RainInlineContentViewModel);
        v63 = v96;
        sub_10004D258((uint64_t)v29, v96, type metadata accessor for RainInlineContentViewModel);
        v64 = v107;
        sub_10004D258(v63, v107, type metadata accessor for RainInlineContentView);
        swift_storeEnumTagMultiPayload(v64, v104, 0);
        sub_10002EF14(&qword_1001C0738, type metadata accessor for RainInlineContentView, (uint64_t)&unk_100181C88);
        v66 = v65;
        v67 = sub_10004CF4C();
        v50 = (uint64_t)v110;
        _ConditionalContent<>.init(storage:)(v64, v108, v106, v66, v67);
        sub_100011894(v63, type metadata accessor for RainInlineContentView);
        sub_100011894((uint64_t)v29, type metadata accessor for RainInlineContentViewModel);
      }
      v55 = &qword_1001C0700;
      v68 = v112;
      sub_10003EB70(v50, v112, &qword_1001C0700);
      swift_storeEnumTagMultiPayload(v68, v111, 0);
      v69 = sub_10004CFF4();
      v70 = (uint64_t)v113;
      _ConditionalContent<>.init(storage:)(v68, v109, &type metadata for Never, v69, &protocol witness table for Never);
      v71 = v116;
      sub_10003EB70(v70, v116, &qword_1001C06E8);
      swift_storeEnumTagMultiPayload(v71, v114, 1);
      v72 = sub_10004D1EC(&qword_1001C0750, &qword_1001C0718, (void (*)(void))sub_10004D078);
      v73 = sub_10004D1EC(&qword_1001C0780, &qword_1001C06E8, (void (*)(void))sub_10004CFF4);
      _ConditionalContent<>.init(storage:)(v71, v115, v117, v72, v73);
      sub_100016904(v70, &qword_1001C06E8);
      v62 = v50;
      goto LABEL_12;
    }
    sub_10004D258(a1, v92, type metadata accessor for RainContentView);
    v119 = 0;
    v120 = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    v83._countAndFlagsBits = 0xD000000000000022;
    v83._object = (void *)0x80000001001862F0;
    String.append(_:)(v83);
    v84 = v90;
    sub_1000C54B0(v90);
    sub_10002EF14(&qword_1001BFB10, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v86._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v33, v85);
    v87 = v86._object;
    String.append(_:)(v86);
    v88 = swift_bridgeObjectRelease(v87);
    (*(void (**)(_DWORD *, uint64_t, __n128))(v34 + 8))(v84, v33, v88);
    v89._object = (void *)0x8000000100186720;
    v89._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v89);
    v81 = v119;
    v82 = v120;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v81, v82, "WeatherWidget/RainContentView.swift", 35, 2);
  __break(1u);
}

uint64_t sub_10004CE20@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v4);
  v6 = (void (*)(uint64_t, uint64_t))((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for RainComplicationDataStatus(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RainContentView(0);
  sub_100083820((uint64_t)v9);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 2, v4))
  {
    v10 = 1;
  }
  else
  {
    sub_10004D278((uint64_t)v9, (uint64_t)v6, type metadata accessor for AggregateWeatherViewModel);
    sub_1000D94D4(v6, a1, a2);
    sub_100011894((uint64_t)v6, type metadata accessor for AggregateWeatherViewModel);
    v10 = 0;
  }
  v11 = type metadata accessor for RainInlineContentViewModel(0);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a2, v10, 1, v11);
}

unint64_t sub_10004CF4C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001C0740;
  if (!qword_1001C0740)
  {
    v1 = sub_100005DC4(&qword_1001C06F8);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10002EF14((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0740);
  }
  return result;
}

unint64_t sub_10004CFF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0748;
  if (!qword_1001C0748)
  {
    v1 = sub_100005DC4(&qword_1001C0700);
    sub_10002EF14(&qword_1001C0738, type metadata accessor for RainInlineContentView, (uint64_t)&unk_100181C88);
    sub_10004CF4C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0748);
  }
  return result;
}

unint64_t sub_10004D078()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0758;
  if (!qword_1001C0758)
  {
    v1 = sub_100005DC4(&qword_1001C0730);
    sub_10002EF14(&qword_1001C0760, type metadata accessor for RainCircularContentView, (uint64_t)&unk_10017DCF8);
    sub_10004D0FC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0758);
  }
  return result;
}

unint64_t sub_10004D0FC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001C0768;
  if (!qword_1001C0768)
  {
    v1 = sub_100005DC4(&qword_1001C0728);
    v2[0] = sub_100005DC4(&qword_1001C0770);
    v2[1] = sub_10004D1A8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10002EF14((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0768);
  }
  return result;
}

unint64_t sub_10004D1A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0778;
  if (!qword_1001C0778)
  {
    v1 = sub_100005DC4(&qword_1001C0770);
    result = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0778);
  }
  return result;
}

uint64_t sub_10004D1EC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005DC4(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10004D258(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_100016C68(a1, a2, a3);
  sub_10001C788(v3);
  sub_100006338();
}

void sub_10004D278(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100016C68(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  sub_100006338();
}

unint64_t sub_10004D2B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0788;
  if (!qword_1001C0788)
  {
    v1 = sub_100005DC4(&qword_1001C0790);
    sub_10004D314();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0788);
  }
  return result;
}

unint64_t sub_10004D314()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0798;
  if (!qword_1001C0798)
  {
    v1 = sub_100005DC4(&qword_1001C07A0);
    sub_10004D1EC(&qword_1001C0750, &qword_1001C0718, (void (*)(void))sub_10004D078);
    sub_10004D1EC(&qword_1001C0780, &qword_1001C06E8, (void (*)(void))sub_10004CFF4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0798);
  }
  return result;
}

_QWORD *sub_10004D3B0(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  int *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  char *v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t);
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  void (*v184)(char *, uint64_t, uint64_t);
  uint64_t v185;
  char *v186;
  const void *v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  char *v206;
  uint64_t v207;
  void (*v209)(char *, char *);
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int *v213;
  uint64_t v214;
  void (*v215)(char *, char *);
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void (*v219)(char *, char *, uint64_t);
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v224)(char *, char *, uint64_t);
  char *v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  _QWORD *v230;
  char *v231;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v28 = v27 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v27);
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v224 = v13;
    v227 = v12;
    v13(&a1[v8[6]], &a2[v8[6]], v12);
    v14 = v8[7];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = sub_100005D40(&qword_1001BF090);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v18(&a1[v8[8]], &a2[v8[8]], v17);
    v19 = v8[9];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = v8[10];
    v24 = &a1[v23];
    v25 = &a2[v23];
    swift_bridgeObjectRetain(v22);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v17))
    {
      v26 = sub_100005D40(&qword_1001BF098);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v18(v24, v25, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v17);
    }
    v29 = v8[11];
    v30 = &a1[v29];
    v31 = &a2[v29];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&a2[v29], 1, v17))
    {
      v32 = sub_100005D40(&qword_1001BF098);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v18(v30, v31, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v17);
    }
    v33 = v8[12];
    v34 = &a1[v33];
    v35 = &a2[v33];
    v219 = v7;
    v221 = v6;
    v7(&a1[v33], &a2[v33], v6);
    v36 = (int *)type metadata accessor for ConditionViewModel(0);
    v37 = v36[5];
    v38 = &v34[v37];
    v231 = a2;
    v39 = &v35[v37];
    v40 = type metadata accessor for WeatherCondition(0);
    v209 = *(void (**)(char *, char *))(*(_QWORD *)(v40 - 8) + 16);
    v211 = v40;
    v209(v38, v39);
    v41 = v36[6];
    v42 = &v34[v41];
    v43 = &v35[v41];
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = v36[7];
    v46 = &v34[v45];
    v47 = &v35[v45];
    v48 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    v34[v36[8]] = v35[v36[8]];
    v34[v36[9]] = v35[v36[9]];
    v213 = v36;
    v34[v36[10]] = v35[v36[10]];
    *(_QWORD *)&a1[v8[13]] = *(_QWORD *)&a2[v8[13]];
    v49 = v8[14];
    v50 = &a1[v49];
    v51 = &a2[v49];
    v52 = type metadata accessor for CloudAltitudeKind(0);
    v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v48);
    v53(v50, v51, v52);
    v54 = v8[15];
    v55 = &a1[v54];
    v56 = &v231[v54];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v231[v54], 1, v227))
    {
      v57 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v224(v55, v56, v227);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v55, 0, 1, v227);
    }
    v58 = v8[16];
    v59 = &a1[v58];
    v60 = &v231[v58];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v231[v58], 1, v227))
    {
      v61 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      v224(v59, v60, v227);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v227);
    }
    v62 = v8[17];
    v63 = &a1[v62];
    v64 = &v231[v62];
    v65 = type metadata accessor for UVIndex(0);
    v215 = *(void (**)(char *, char *))(*(_QWORD *)(v65 - 8) + 16);
    v217 = v65;
    v215(v63, v64);
    v66 = v8[18];
    v67 = &a1[v66];
    v68 = &v231[v66];
    v69 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
    *(_QWORD *)&a1[v8[19]] = *(_QWORD *)&v231[v8[19]];
    v70 = v8[20];
    v71 = &a1[v70];
    v72 = &v231[v70];
    v73 = *((_QWORD *)v72 + 1);
    if (v73)
    {
      *(_QWORD *)v71 = *(_QWORD *)v72;
      *((_QWORD *)v71 + 1) = v73;
      v74 = *((_QWORD *)v72 + 2);
      v75 = *((_QWORD *)v72 + 3);
      v76 = v72[32];
      swift_bridgeObjectRetain(v73);
      sub_100006E58(v74, v75, v76);
      *((_QWORD *)v71 + 2) = v74;
      *((_QWORD *)v71 + 3) = v75;
      v71[32] = v76;
    }
    else
    {
      v77 = *((_OWORD *)v72 + 1);
      *(_OWORD *)v71 = *(_OWORD *)v72;
      *((_OWORD *)v71 + 1) = v77;
      v71[32] = v72[32];
    }
    v78 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
    v79 = v78[5];
    v230 = a1;
    v80 = &a1[v79];
    v81 = &v231[v79];
    v219(&a1[v79], &v231[v79], v221);
    v82 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v224(&v80[v82[5]], &v81[v82[5]], v227);
    v18(&v80[v82[6]], &v81[v82[6]], v17);
    v18(&v80[v82[7]], &v81[v82[7]], v17);
    v83 = v82[8];
    v84 = &v80[v83];
    v85 = &v81[v83];
    v219(&v80[v83], &v81[v83], v221);
    ((void (*)(char *, char *, uint64_t))v209)(&v84[v213[5]], &v85[v213[5]], v211);
    v86 = v213[6];
    v87 = &v84[v86];
    v88 = &v85[v86];
    v89 = *((_QWORD *)v88 + 1);
    *(_QWORD *)v87 = *(_QWORD *)v88;
    *((_QWORD *)v87 + 1) = v89;
    v90 = v213[7];
    v91 = &v84[v90];
    v92 = &v85[v90];
    v93 = *((_QWORD *)v92 + 1);
    *(_QWORD *)v91 = *(_QWORD *)v92;
    *((_QWORD *)v91 + 1) = v93;
    v84[v213[8]] = v85[v213[8]];
    v84[v213[9]] = v85[v213[9]];
    v84[v213[10]] = v85[v213[10]];
    v94 = v82[9];
    v95 = &v80[v94];
    v96 = &v81[v94];
    v97 = type metadata accessor for Precipitation(0);
    v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v93);
    v98(v95, v96, v97);
    *(_QWORD *)&v80[v82[10]] = *(_QWORD *)&v81[v82[10]];
    v99 = v82[11];
    v100 = &v80[v99];
    v101 = &v81[v99];
    v102 = *((_QWORD *)v101 + 1);
    *(_QWORD *)v100 = *(_QWORD *)v101;
    *((_QWORD *)v100 + 1) = v102;
    v103 = v82[12];
    v104 = &v80[v103];
    v105 = &v81[v103];
    v106 = *((_QWORD *)v105 + 1);
    *(_QWORD *)v104 = *(_QWORD *)v105;
    *((_QWORD *)v104 + 1) = v106;
    v107 = v82[13];
    v108 = &v80[v107];
    v109 = &v81[v107];
    v110 = *((_QWORD *)v109 + 1);
    *(_QWORD *)v108 = *(_QWORD *)v109;
    *((_QWORD *)v108 + 1) = v110;
    v111 = v82[14];
    v112 = &v80[v111];
    v113 = &v81[v111];
    v114 = *((_QWORD *)v113 + 1);
    *(_QWORD *)v112 = *(_QWORD *)v113;
    *((_QWORD *)v112 + 1) = v114;
    v115 = v82[15];
    v225 = &v81[v115];
    v228 = &v80[v115];
    v116 = type metadata accessor for TemperatureScaleConfiguration(0);
    v117 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 16);
    swift_bridgeObjectRetain(v102);
    swift_bridgeObjectRetain(v106);
    swift_bridgeObjectRetain(v110);
    swift_bridgeObjectRetain(v114);
    v117(v228, v225, v116);
    v118 = v82[16];
    v119 = &v80[v118];
    v120 = &v81[v118];
    v121 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v120, 1, v121))
    {
      v122 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v119, v120, v121);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v119, 0, 1, v121);
    }
    v123 = v82[17];
    v124 = &v80[v123];
    v125 = &v81[v123];
    v126 = type metadata accessor for MoonEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v125, 1, v126))
    {
      v127 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v124, v125, v126);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v124, 0, 1, v126);
    }
    ((void (*)(char *, char *, uint64_t))v215)(&v80[v82[18]], &v81[v82[18]], v217);
    *(_QWORD *)&v80[v82[19]] = *(_QWORD *)&v81[v82[19]];
    v128 = v78[6];
    v129 = (_QWORD *)((char *)v230 + v128);
    v130 = v231;
    v131 = &v231[v128];
    v132 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v131, 1, (uint64_t)v132))
    {
      v133 = sub_100005D40(&qword_1001BF0C0);
      memcpy(v129, v131, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    }
    else
    {
      v134 = *((_QWORD *)v131 + 1);
      *v129 = *(_QWORD *)v131;
      v129[1] = v134;
      v135 = v132[5];
      v136 = (uint64_t)v132;
      v137 = (char *)v129 + v135;
      v138 = &v131[v135];
      v139 = type metadata accessor for AttributedString(0);
      v140 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v139 - 8) + 16);
      swift_bridgeObjectRetain(v134);
      v140(v137, v138, v139);
      v141 = *(int *)(v136 + 24);
      v142 = (char *)v129 + v141;
      v143 = &v131[v141];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v131[v141], 1, v139))
      {
        v144 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
      }
      else
      {
        v140(v142, v143, v139);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v142, 0, 1, v139);
      }
      v145 = *(int *)(v136 + 28);
      v146 = (_QWORD *)((char *)v129 + v145);
      v147 = &v131[v145];
      v148 = *((_QWORD *)v147 + 1);
      *v146 = *(_QWORD *)v147;
      v146[1] = v148;
      swift_bridgeObjectRetain(v148);
      v132 = (int *)v136;
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v129, 0, 1, v136);
      v130 = v231;
    }
    v149 = v78[7];
    v150 = (char *)v230 + v149;
    v151 = (uint64_t)v130 + v149;
    v152 = type metadata accessor for Location(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 16))(v150, v151, v152);
    v153 = v78[8];
    v154 = (_QWORD *)((char *)v230 + v153);
    v155 = (_QWORD *)((char *)v130 + v153);
    v229 = v155[1];
    *v154 = *v155;
    v154[1] = v229;
    *((_BYTE *)v230 + v78[9]) = *((_BYTE *)v130 + v78[9]);
    *((_BYTE *)v230 + v78[10]) = *((_BYTE *)v130 + v78[10]);
    v156 = v78[11];
    v222 = *(_QWORD *)((char *)v130 + v156);
    *(_QWORD *)((char *)v230 + v156) = v222;
    v157 = v78[12];
    v158 = (_QWORD *)((char *)v230 + v157);
    v159 = (_QWORD *)((char *)v130 + v157);
    v160 = v130;
    v161 = v159[1];
    *v158 = *v159;
    v158[1] = v161;
    v162 = v78[13];
    v212 = *(_QWORD *)((char *)v160 + v162);
    *(_QWORD *)((char *)v230 + v162) = v212;
    v163 = v78[14];
    v216 = *(_QWORD *)((char *)v160 + v163);
    *(_QWORD *)((char *)v230 + v163) = v216;
    v164 = v78[15];
    v220 = *(_QWORD *)((char *)v160 + v164);
    *(_QWORD *)((char *)v230 + v164) = v220;
    v165 = v78[16];
    v226 = *(_QWORD *)((char *)v160 + v165);
    *(_QWORD *)((char *)v230 + v165) = v226;
    *((_BYTE *)v230 + v78[17]) = *((_BYTE *)v160 + v78[17]);
    v166 = v78[18];
    v214 = *(_QWORD *)((char *)v160 + v166);
    *(_QWORD *)((char *)v230 + v166) = v214;
    v167 = v78[19];
    v218 = *(_QWORD *)((char *)v160 + v167);
    *(_QWORD *)((char *)v230 + v167) = v218;
    *(_QWORD *)((char *)v230 + v78[20]) = *(_QWORD *)((char *)v160 + v78[20]);
    *((_BYTE *)v230 + v78[21]) = *((_BYTE *)v160 + v78[21]);
    *((_BYTE *)v230 + v78[22]) = *((_BYTE *)v160 + v78[22]);
    *((_BYTE *)v230 + v78[23]) = *((_BYTE *)v160 + v78[23]);
    *((_BYTE *)v230 + v78[24]) = *((_BYTE *)v160 + v78[24]);
    v168 = v78[25];
    v169 = (_QWORD *)((char *)v230 + v168);
    v170 = (_QWORD *)((char *)v160 + v168);
    v171 = v170[1];
    *v169 = *v170;
    v169[1] = v171;
    *((_BYTE *)v230 + v78[26]) = *((_BYTE *)v160 + v78[26]);
    *(_QWORD *)((char *)v230 + v78[27]) = *(_QWORD *)((char *)v160 + v78[27]);
    *(_QWORD *)((char *)v230 + v78[28]) = *(_QWORD *)((char *)v160 + v78[28]);
    v172 = type metadata accessor for DataDenseViewAttributes(0);
    v173 = *(int *)(v172 + 20);
    v174 = (char *)v230 + v173;
    v175 = (uint64_t)v160 + v173;
    *(_QWORD *)v174 = *(_QWORD *)v175;
    *((_WORD *)v174 + 4) = *(_WORD *)(v175 + 8);
    v176 = *(int *)(v172 + 24);
    v177 = (_QWORD *)((char *)v230 + v176);
    v178 = (uint64_t)v160 + v176;
    v179 = *(_QWORD *)((char *)v160 + v176);
    v180 = *(_QWORD *)(v178 + 8);
    *v177 = v179;
    v177[1] = v180;
    v181 = v132[5];
    v182 = (char *)v177 + v181;
    v210 = v178 + v181;
    v183 = type metadata accessor for AttributedString(0);
    v184 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v183 - 8) + 16);
    swift_bridgeObjectRetain(v229);
    swift_retain(v222);
    swift_bridgeObjectRetain(v161);
    swift_retain(v212);
    swift_retain(v216);
    swift_retain(v220);
    swift_retain(v226);
    swift_retain(v214);
    swift_retain(v218);
    swift_bridgeObjectRetain(v171);
    swift_bridgeObjectRetain(v180);
    v184(v182, v210, v183);
    v185 = v132[6];
    v186 = (char *)v177 + v185;
    v187 = (const void *)(v178 + v185);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v178 + v185, 1, v183))
    {
      v188 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
    }
    else
    {
      v184(v186, (uint64_t)v187, v183);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v186, 0, 1, v183);
    }
    v189 = v132[7];
    v190 = (_QWORD *)((char *)v177 + v189);
    v191 = (_QWORD *)(v178 + v189);
    v192 = v191[1];
    *v190 = *v191;
    v190[1] = v192;
    v193 = *(int *)(a3 + 20);
    v194 = (_QWORD *)((char *)v230 + v193);
    v195 = &v231[v193];
    v196 = *(_QWORD *)&v231[v193 + 8];
    *v194 = *(_QWORD *)&v231[v193];
    v194[1] = v196;
    v197 = v132[5];
    v198 = (char *)v194 + v197;
    v199 = &v195[v197];
    swift_bridgeObjectRetain(v192);
    swift_bridgeObjectRetain(v196);
    v184(v198, (uint64_t)v199, v183);
    v200 = v132[6];
    v201 = (char *)v194 + v200;
    v202 = &v195[v200];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v195[v200], 1, v183))
    {
      v203 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64));
    }
    else
    {
      v184(v201, (uint64_t)v202, v183);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v201, 0, 1, v183);
    }
    v204 = v132[7];
    v205 = (_QWORD *)((char *)v194 + v204);
    v206 = &v195[v204];
    v207 = *((_QWORD *)v206 + 1);
    *v205 = *(_QWORD *)v206;
    v205[1] = v207;
    swift_bridgeObjectRetain(v207);
    return v230;
  }
  return (_QWORD *)v28;
}

double sub_10004E01C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  double result;
  void (*v57)(uint64_t);
  uint64_t v58;
  void (*v59)(uint64_t);
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;

  v3 = type metadata accessor for UUID(0);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(a1, v3);
  v5 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v6 = a1 + v5[5];
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + v5[6], v7);
  v9 = a1 + v5[7];
  v10 = sub_100005D40(&qword_1001BF090);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(a1 + v5[8], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[9] + 8));
  v12 = a1 + v5[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v12, 1, v10))
    v11(v12, v10);
  v13 = a1 + v5[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v13, 1, v10))
    v11(v13, v10);
  v14 = a1 + v5[12];
  v61 = v4;
  v62 = v3;
  v4(v14, v3);
  v15 = (int *)type metadata accessor for ConditionViewModel(0);
  v16 = v14 + v15[5];
  v17 = type metadata accessor for WeatherCondition(0);
  v57 = *(void (**)(uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v58 = v17;
  v57(v16);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[7] + 8));
  v18 = a1 + v5[14];
  v19 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = a1 + v5[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v20, 1, v7))
    v8(v20, v7);
  v21 = a1 + v5[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v21, 1, v7))
    v8(v21, v7);
  v22 = a1 + v5[17];
  v23 = type metadata accessor for UVIndex(0);
  v59 = *(void (**)(uint64_t))(*(_QWORD *)(v23 - 8) + 8);
  v60 = v23;
  v59(v22);
  v24 = a1 + v5[18];
  v25 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = a1 + v5[20];
  v27 = *(_QWORD *)(v26 + 8);
  if (v27)
  {
    swift_bridgeObjectRelease(v27);
    sub_100007458(*(_QWORD *)(v26 + 16), *(_QWORD *)(v26 + 24), *(_BYTE *)(v26 + 32));
  }
  v28 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v29 = a1 + v28[5];
  v61(v29, v62);
  v30 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v8(v29 + v30[5], v7);
  v11(v29 + v30[6], v10);
  v11(v29 + v30[7], v10);
  v31 = v29 + v30[8];
  v61(v31, v62);
  ((void (*)(uint64_t, uint64_t))v57)(v31 + v15[5], v58);
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v15[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v15[7] + 8));
  v32 = v29 + v30[9];
  v33 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v30[14] + 8));
  v34 = v29 + v30[15];
  v35 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
  v36 = v29 + v30[16];
  v37 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v36, 1, v37))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
  v38 = v29 + v30[17];
  v39 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, v39))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  ((void (*)(uint64_t, uint64_t))v59)(v29 + v30[18], v60);
  v40 = a1 + v28[6];
  v41 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v40, 1, (uint64_t)v41))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + 8));
    v42 = v40 + v41[5];
    v43 = type metadata accessor for AttributedString(0);
    v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8);
    v44(v42, v43);
    v45 = v40 + v41[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v45, 1, v43))
      v44(v45, v43);
    swift_bridgeObjectRelease(*(_QWORD *)(v40 + v41[7] + 8));
  }
  v46 = a1 + v28[7];
  v47 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[8] + 8));
  swift_release(*(_QWORD *)(a1 + v28[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[12] + 8));
  swift_release(*(_QWORD *)(a1 + v28[13]));
  swift_release(*(_QWORD *)(a1 + v28[14]));
  swift_release(*(_QWORD *)(a1 + v28[15]));
  swift_release(*(_QWORD *)(a1 + v28[16]));
  swift_release(*(_QWORD *)(a1 + v28[18]));
  swift_release(*(_QWORD *)(a1 + v28[19]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v28[25] + 8));
  v48 = a1 + *(int *)(type metadata accessor for DataDenseViewAttributes(0) + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v48 + 8));
  v49 = v48 + v41[5];
  v50 = type metadata accessor for AttributedString(0);
  v51 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8);
  v51(v49, v50);
  v52 = v48 + v41[6];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v52, 1, v50))
    v51(v52, v50);
  swift_bridgeObjectRelease(*(_QWORD *)(v48 + v41[7] + 8));
  v53 = a1 + *(int *)(a2 + 20);
  v54 = swift_bridgeObjectRelease(*(_QWORD *)(v53 + 8));
  ((void (*)(uint64_t, uint64_t, __n128))v51)(v53 + v41[5], v50, v54);
  v55 = v53 + v41[6];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v55, 1, v50))
    v51(v55, v50);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v53 + v41[7] + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10004E674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  void *v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  const void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  void (*v137)(char *, char *, uint64_t);
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  void (*v181)(char *, uint64_t, uint64_t);
  uint64_t v182;
  char *v183;
  const void *v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  const void *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  void (*v206)(uint64_t, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int *v210;
  uint64_t v211;
  void (*v212)(uint64_t, uint64_t);
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void (*v216)(uint64_t, uint64_t, uint64_t);
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void (*v221)(void *, const void *, uint64_t);
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v221 = v12;
  v224 = v11;
  v12((void *)(a1 + v7[6]), (const void *)(a2 + v7[6]), v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  v18 = v7[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v7[10];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  swift_bridgeObjectRetain(v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[11];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v26, 1, v16))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v27, (uint64_t)v28, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v16);
  }
  v30 = v7[12];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v216 = v6;
  v218 = v5;
  v6(a1 + v30, a2 + v30, v5);
  v33 = (int *)type metadata accessor for ConditionViewModel(0);
  v34 = v33[5];
  v35 = v31 + v34;
  v228 = a2;
  v36 = v32 + v34;
  v37 = type metadata accessor for WeatherCondition(0);
  v206 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
  v208 = v37;
  v206(v35, v36);
  v38 = v33[6];
  v39 = (_QWORD *)(v31 + v38);
  v40 = (_QWORD *)(v32 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = v33[7];
  v43 = (_QWORD *)(v31 + v42);
  v44 = (_QWORD *)(v32 + v42);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  *(_BYTE *)(v31 + v33[8]) = *(_BYTE *)(v32 + v33[8]);
  *(_BYTE *)(v31 + v33[9]) = *(_BYTE *)(v32 + v33[9]);
  v210 = v33;
  *(_BYTE *)(v31 + v33[10]) = *(_BYTE *)(v32 + v33[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v46 = v7[14];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for CloudAltitudeKind(0);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  v50(v47, v48, v49);
  v51 = v7[15];
  v52 = (void *)(a1 + v51);
  v53 = (const void *)(v228 + v51);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v228 + v51, 1, v224))
  {
    v54 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    v221(v52, v53, v224);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v52, 0, 1, v224);
  }
  v55 = v7[16];
  v56 = (void *)(a1 + v55);
  v57 = (const void *)(v228 + v55);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v228 + v55, 1, v224))
  {
    v58 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v221(v56, v57, v224);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v224);
  }
  v59 = v7[17];
  v60 = a1 + v59;
  v61 = v228 + v59;
  v62 = type metadata accessor for UVIndex(0);
  v212 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
  v214 = v62;
  v212(v60, v61);
  v63 = v7[18];
  v64 = a1 + v63;
  v65 = v228 + v63;
  v66 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(v228 + v7[19]);
  v67 = v7[20];
  v68 = a1 + v67;
  v69 = v228 + v67;
  v70 = *(_QWORD *)(v69 + 8);
  if (v70)
  {
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *(_QWORD *)(v68 + 8) = v70;
    v71 = *(_QWORD *)(v69 + 16);
    v72 = *(_QWORD *)(v69 + 24);
    v73 = *(_BYTE *)(v69 + 32);
    swift_bridgeObjectRetain(v70);
    sub_100006E58(v71, v72, v73);
    *(_QWORD *)(v68 + 16) = v71;
    *(_QWORD *)(v68 + 24) = v72;
    *(_BYTE *)(v68 + 32) = v73;
  }
  else
  {
    v74 = *(_OWORD *)(v69 + 16);
    *(_OWORD *)v68 = *(_OWORD *)v69;
    *(_OWORD *)(v68 + 16) = v74;
    *(_BYTE *)(v68 + 32) = *(_BYTE *)(v69 + 32);
  }
  v75 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v76 = v75[5];
  v227 = a1;
  v77 = a1 + v76;
  v78 = v228 + v76;
  v216(a1 + v76, v228 + v76, v218);
  v79 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v221((void *)(v77 + v79[5]), (const void *)(v78 + v79[5]), v224);
  v17(v77 + v79[6], v78 + v79[6], v16);
  v17(v77 + v79[7], v78 + v79[7], v16);
  v80 = v79[8];
  v81 = v77 + v80;
  v82 = v78 + v80;
  v216(v77 + v80, v78 + v80, v218);
  ((void (*)(uint64_t, uint64_t, uint64_t))v206)(v81 + v210[5], v82 + v210[5], v208);
  v83 = v210[6];
  v84 = (_QWORD *)(v81 + v83);
  v85 = (_QWORD *)(v82 + v83);
  v86 = v85[1];
  *v84 = *v85;
  v84[1] = v86;
  v87 = v210[7];
  v88 = (_QWORD *)(v81 + v87);
  v89 = (_QWORD *)(v82 + v87);
  v90 = v89[1];
  *v88 = *v89;
  v88[1] = v90;
  *(_BYTE *)(v81 + v210[8]) = *(_BYTE *)(v82 + v210[8]);
  *(_BYTE *)(v81 + v210[9]) = *(_BYTE *)(v82 + v210[9]);
  *(_BYTE *)(v81 + v210[10]) = *(_BYTE *)(v82 + v210[10]);
  v91 = v79[9];
  v92 = v77 + v91;
  v93 = v78 + v91;
  v94 = type metadata accessor for Precipitation(0);
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 16);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v90);
  v95(v92, v93, v94);
  *(_QWORD *)(v77 + v79[10]) = *(_QWORD *)(v78 + v79[10]);
  v96 = v79[11];
  v97 = (_QWORD *)(v77 + v96);
  v98 = (_QWORD *)(v78 + v96);
  v99 = v98[1];
  *v97 = *v98;
  v97[1] = v99;
  v100 = v79[12];
  v101 = (_QWORD *)(v77 + v100);
  v102 = (_QWORD *)(v78 + v100);
  v103 = v102[1];
  *v101 = *v102;
  v101[1] = v103;
  v104 = v79[13];
  v105 = (_QWORD *)(v77 + v104);
  v106 = (_QWORD *)(v78 + v104);
  v107 = v106[1];
  *v105 = *v106;
  v105[1] = v107;
  v108 = v79[14];
  v109 = (_QWORD *)(v77 + v108);
  v110 = (_QWORD *)(v78 + v108);
  v111 = v110[1];
  *v109 = *v110;
  v109[1] = v111;
  v112 = v79[15];
  v222 = v78 + v112;
  v225 = v77 + v112;
  v113 = type metadata accessor for TemperatureScaleConfiguration(0);
  v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 16);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v111);
  v114(v225, v222, v113);
  v115 = v79[16];
  v116 = (void *)(v77 + v115);
  v117 = (const void *)(v78 + v115);
  v118 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v117, 1, v118))
  {
    v119 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v118 - 8) + 16))(v116, v117, v118);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v116, 0, 1, v118);
  }
  v120 = v79[17];
  v121 = (void *)(v77 + v120);
  v122 = (const void *)(v78 + v120);
  v123 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v122, 1, v123))
  {
    v124 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v123 - 8) + 16))(v121, v122, v123);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v121, 0, 1, v123);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v212)(v77 + v79[18], v78 + v79[18], v214);
  *(_QWORD *)(v77 + v79[19]) = *(_QWORD *)(v78 + v79[19]);
  v125 = v75[6];
  v126 = (_QWORD *)(v227 + v125);
  v127 = v228;
  v128 = (_QWORD *)(v228 + v125);
  v129 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128, 1, (uint64_t)v129))
  {
    v130 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v126, v128, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
  }
  else
  {
    v131 = v128[1];
    *v126 = *v128;
    v126[1] = v131;
    v132 = v129[5];
    v133 = (uint64_t)v129;
    v134 = (char *)v126 + v132;
    v135 = (char *)v128 + v132;
    v136 = type metadata accessor for AttributedString(0);
    v137 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 16);
    swift_bridgeObjectRetain(v131);
    v137(v134, v135, v136);
    v138 = *(int *)(v133 + 24);
    v139 = (char *)v126 + v138;
    v140 = (char *)v128 + v138;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128 + v138, 1, v136))
    {
      v141 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
    }
    else
    {
      v137(v139, v140, v136);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v139, 0, 1, v136);
    }
    v142 = *(int *)(v133 + 28);
    v143 = (_QWORD *)((char *)v126 + v142);
    v144 = (_QWORD *)((char *)v128 + v142);
    v145 = v144[1];
    *v143 = *v144;
    v143[1] = v145;
    swift_bridgeObjectRetain(v145);
    v129 = (int *)v133;
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v126, 0, 1, v133);
    v127 = v228;
  }
  v146 = v75[7];
  v147 = v227 + v146;
  v148 = v127 + v146;
  v149 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 16))(v147, v148, v149);
  v150 = v75[8];
  v151 = (_QWORD *)(v227 + v150);
  v152 = (_QWORD *)(v127 + v150);
  v226 = v152[1];
  *v151 = *v152;
  v151[1] = v226;
  *(_BYTE *)(v227 + v75[9]) = *(_BYTE *)(v127 + v75[9]);
  *(_BYTE *)(v227 + v75[10]) = *(_BYTE *)(v127 + v75[10]);
  v153 = v75[11];
  v219 = *(_QWORD *)(v127 + v153);
  *(_QWORD *)(v227 + v153) = v219;
  v154 = v75[12];
  v155 = (_QWORD *)(v227 + v154);
  v156 = (_QWORD *)(v127 + v154);
  v157 = v127;
  v158 = v156[1];
  *v155 = *v156;
  v155[1] = v158;
  v159 = v75[13];
  v209 = *(_QWORD *)(v157 + v159);
  *(_QWORD *)(v227 + v159) = v209;
  v160 = v75[14];
  v213 = *(_QWORD *)(v157 + v160);
  *(_QWORD *)(v227 + v160) = v213;
  v161 = v75[15];
  v217 = *(_QWORD *)(v157 + v161);
  *(_QWORD *)(v227 + v161) = v217;
  v162 = v75[16];
  v223 = *(_QWORD *)(v157 + v162);
  *(_QWORD *)(v227 + v162) = v223;
  *(_BYTE *)(v227 + v75[17]) = *(_BYTE *)(v157 + v75[17]);
  v163 = v75[18];
  v211 = *(_QWORD *)(v157 + v163);
  *(_QWORD *)(v227 + v163) = v211;
  v164 = v75[19];
  v215 = *(_QWORD *)(v157 + v164);
  *(_QWORD *)(v227 + v164) = v215;
  *(_QWORD *)(v227 + v75[20]) = *(_QWORD *)(v157 + v75[20]);
  *(_BYTE *)(v227 + v75[21]) = *(_BYTE *)(v157 + v75[21]);
  *(_BYTE *)(v227 + v75[22]) = *(_BYTE *)(v157 + v75[22]);
  *(_BYTE *)(v227 + v75[23]) = *(_BYTE *)(v157 + v75[23]);
  *(_BYTE *)(v227 + v75[24]) = *(_BYTE *)(v157 + v75[24]);
  v165 = v75[25];
  v166 = (_QWORD *)(v227 + v165);
  v167 = (_QWORD *)(v157 + v165);
  v168 = v167[1];
  *v166 = *v167;
  v166[1] = v168;
  *(_BYTE *)(v227 + v75[26]) = *(_BYTE *)(v157 + v75[26]);
  *(_QWORD *)(v227 + v75[27]) = *(_QWORD *)(v157 + v75[27]);
  *(_QWORD *)(v227 + v75[28]) = *(_QWORD *)(v157 + v75[28]);
  v169 = type metadata accessor for DataDenseViewAttributes(0);
  v170 = *(int *)(v169 + 20);
  v171 = v227 + v170;
  v172 = v157 + v170;
  *(_QWORD *)v171 = *(_QWORD *)v172;
  *(_WORD *)(v171 + 8) = *(_WORD *)(v172 + 8);
  v173 = *(int *)(v169 + 24);
  v174 = (_QWORD *)(v227 + v173);
  v175 = v157 + v173;
  v176 = *(_QWORD *)(v157 + v173);
  v177 = *(_QWORD *)(v175 + 8);
  *v174 = v176;
  v174[1] = v177;
  v178 = v129[5];
  v179 = (char *)v174 + v178;
  v207 = v175 + v178;
  v180 = type metadata accessor for AttributedString(0);
  v181 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v180 - 8) + 16);
  swift_bridgeObjectRetain(v226);
  swift_retain(v219);
  swift_bridgeObjectRetain(v158);
  swift_retain(v209);
  swift_retain(v213);
  swift_retain(v217);
  swift_retain(v223);
  swift_retain(v211);
  swift_retain(v215);
  swift_bridgeObjectRetain(v168);
  swift_bridgeObjectRetain(v177);
  v181(v179, v207, v180);
  v182 = v129[6];
  v183 = (char *)v174 + v182;
  v184 = (const void *)(v175 + v182);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v175 + v182, 1, v180))
  {
    v185 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
  }
  else
  {
    v181(v183, (uint64_t)v184, v180);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v183, 0, 1, v180);
  }
  v186 = v129[7];
  v187 = (_QWORD *)((char *)v174 + v186);
  v188 = (_QWORD *)(v175 + v186);
  v189 = v188[1];
  *v187 = *v188;
  v187[1] = v189;
  v190 = *(int *)(a3 + 20);
  v191 = (_QWORD *)(v227 + v190);
  v192 = v228 + v190;
  v193 = *(_QWORD *)(v228 + v190 + 8);
  *v191 = *(_QWORD *)(v228 + v190);
  v191[1] = v193;
  v194 = v129[5];
  v195 = (char *)v191 + v194;
  v196 = v192 + v194;
  swift_bridgeObjectRetain(v189);
  swift_bridgeObjectRetain(v193);
  v181(v195, v196, v180);
  v197 = v129[6];
  v198 = (char *)v191 + v197;
  v199 = (const void *)(v192 + v197);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v192 + v197, 1, v180))
  {
    v200 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
  }
  else
  {
    v181(v198, (uint64_t)v199, v180);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v198, 0, 1, v180);
  }
  v201 = v129[7];
  v202 = (_QWORD *)((char *)v191 + v201);
  v203 = (_QWORD *)(v192 + v201);
  v204 = v203[1];
  *v202 = *v203;
  v202[1] = v204;
  swift_bridgeObjectRetain(v204);
  return v227;
}

uint64_t sub_10004F2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const void *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  const void *v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  void (*v171)(char *, char *, uint64_t);
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  void (*v184)(char *, char *, uint64_t);
  uint64_t v185;
  char *v186;
  char *v187;
  int v188;
  int v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _BYTE *v237;
  _BYTE *v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void (*v249)(char *, uint64_t, uint64_t);
  uint64_t v250;
  char *v251;
  const void *v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  __n128 v266;
  uint64_t v267;
  char *v268;
  const void *v269;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  void (*v285)(uint64_t, uint64_t, uint64_t);
  uint64_t v286;
  uint64_t v287;
  void (*v289)(uint64_t, uint64_t);
  uint64_t v290;
  void (*v291)(void *, const void *, uint64_t);
  void (*v292)(void *, const void *, uint64_t);
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void (*v296)(uint64_t, uint64_t, uint64_t);
  int *v297;

  v5 = type metadata accessor for UUID(0);
  v296 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24);
  v296(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v286 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v286 + 24);
  v11(v8, v9, v10);
  v292 = (void (*)(void *, const void *, uint64_t))v11;
  v11(a1 + v6[6], a2 + v6[6], v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  v291 = (void (*)(void *, const void *, uint64_t))v17;
  v17(a1 + v6[8], a2 + v6[8], v15);
  v18 = v6[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = v6[10];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  LODWORD(v17) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v23, 1, v15);
  v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v15);
  if ((_DWORD)v17)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v24, v25, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v24, v15);
LABEL_6:
    v27 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v291(v24, v25, v15);
LABEL_7:
  v28 = v6[11];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v28, 1, v15);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v15);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v29, v30, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v29, v15);
LABEL_12:
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  v291(v29, v30, v15);
LABEL_13:
  v34 = v6[12];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v293 = v5;
  v296(a1 + v34, a2 + v34, v5);
  v37 = (int *)type metadata accessor for ConditionViewModel(0);
  v38 = v37[5];
  v39 = v35 + v38;
  v40 = v36 + v38;
  v41 = type metadata accessor for WeatherCondition(0);
  v289 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24);
  v290 = v41;
  v289(v39, v40);
  v42 = v37[6];
  v43 = (_QWORD *)(v35 + v42);
  v44 = (_QWORD *)(v36 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = v37[7];
  v48 = (_QWORD *)(v35 + v47);
  v49 = (_QWORD *)(v36 + v47);
  *v48 = *v49;
  v50 = v49[1];
  v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  *(_BYTE *)(v35 + v37[8]) = *(_BYTE *)(v36 + v37[8]);
  *(_BYTE *)(v35 + v37[9]) = *(_BYTE *)(v36 + v37[9]);
  *(_BYTE *)(v35 + v37[10]) = *(_BYTE *)(v36 + v37[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v52 = v6[14];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 24))(v53, v54, v55);
  v56 = v6[15];
  v57 = (void *)(a1 + v56);
  v58 = (const void *)(a2 + v56);
  LODWORD(v51) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v56, 1, v10);
  v59 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v58, 1, v10);
  v60 = a2;
  if ((_DWORD)v51)
  {
    if (!v59)
    {
      (*(void (**)(void *, const void *, uint64_t))(v286 + 16))(v57, v58, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v57, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v59)
  {
    (*(void (**)(void *, uint64_t))(v286 + 8))(v57, v10);
LABEL_18:
    v61 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_19;
  }
  v292(v57, v58, v10);
LABEL_19:
  v62 = v293;
  v63 = v6[16];
  v64 = (void *)(a1 + v63);
  v65 = (const void *)(v60 + v63);
  v66 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v63, 1, v10);
  v67 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v65, 1, v10);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(void *, const void *, uint64_t))(v286 + 16))(v64, v65, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v67)
  {
    (*(void (**)(void *, uint64_t))(v286 + 8))(v64, v10);
LABEL_24:
    v68 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_25;
  }
  v292(v64, v65, v10);
LABEL_25:
  v69 = v6[17];
  v70 = a1 + v69;
  v71 = v60;
  v72 = v60 + v69;
  v73 = type metadata accessor for UVIndex(0);
  v285 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 24);
  v285(v70, v72, v73);
  v74 = v6[18];
  v75 = a1 + v74;
  v76 = v71 + v74;
  v77 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 24))(v75, v76, v77);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(v71 + v6[19]);
  v78 = v6[20];
  v79 = a1 + v78;
  v294 = v71;
  v80 = (__int128 *)(v71 + v78);
  v81 = *(_QWORD *)(a1 + v78 + 8);
  v82 = *((_QWORD *)v80 + 1);
  v287 = v73;
  if (v81)
  {
    if (v82)
    {
      *(_QWORD *)v79 = *(_QWORD *)v80;
      v83 = *((_QWORD *)v80 + 1);
      *(_QWORD *)(v79 + 8) = v83;
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRelease(v81);
      v84 = *((_QWORD *)v80 + 2);
      v85 = *((_QWORD *)v80 + 3);
      v86 = *((_BYTE *)v80 + 32);
      sub_100006E58(v84, v85, v86);
      v87 = *(_QWORD *)(v79 + 16);
      v88 = *(_QWORD *)(v79 + 24);
      v89 = *(_BYTE *)(v79 + 32);
      *(_QWORD *)(v79 + 16) = v84;
      *(_QWORD *)(v79 + 24) = v85;
      *(_BYTE *)(v79 + 32) = v86;
      sub_100007458(v87, v88, v89);
    }
    else
    {
      sub_100008EC4(v79);
      v94 = *((_BYTE *)v80 + 32);
      v95 = v80[1];
      *(_OWORD *)v79 = *v80;
      *(_OWORD *)(v79 + 16) = v95;
      *(_BYTE *)(v79 + 32) = v94;
    }
  }
  else if (v82)
  {
    *(_QWORD *)v79 = *(_QWORD *)v80;
    v90 = *((_QWORD *)v80 + 1);
    *(_QWORD *)(v79 + 8) = v90;
    v91 = *((_QWORD *)v80 + 2);
    v92 = *((_QWORD *)v80 + 3);
    v93 = *((_BYTE *)v80 + 32);
    swift_bridgeObjectRetain(v90);
    sub_100006E58(v91, v92, v93);
    *(_QWORD *)(v79 + 16) = v91;
    *(_QWORD *)(v79 + 24) = v92;
    *(_BYTE *)(v79 + 32) = v93;
  }
  else
  {
    v96 = *v80;
    v97 = v80[1];
    *(_BYTE *)(v79 + 32) = *((_BYTE *)v80 + 32);
    *(_OWORD *)v79 = v96;
    *(_OWORD *)(v79 + 16) = v97;
  }
  v98 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v99 = v98[5];
  v100 = a1 + v99;
  v101 = v294 + v99;
  v296(a1 + v99, v294 + v99, v62);
  v102 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v292((void *)(v100 + v102[5]), (const void *)(v101 + v102[5]), v10);
  v291((void *)(v100 + v102[6]), (const void *)(v101 + v102[6]), v15);
  v291((void *)(v100 + v102[7]), (const void *)(v101 + v102[7]), v15);
  v103 = v102[8];
  v104 = v100 + v103;
  v105 = v101 + v103;
  v296(v100 + v103, v101 + v103, v62);
  ((void (*)(uint64_t, uint64_t, uint64_t))v289)(v104 + v37[5], v105 + v37[5], v290);
  v106 = v37[6];
  v107 = (_QWORD *)(v104 + v106);
  v108 = (_QWORD *)(v105 + v106);
  *v107 = *v108;
  v109 = v108[1];
  v110 = v107[1];
  v107[1] = v109;
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRelease(v110);
  v111 = v37[7];
  v112 = (_QWORD *)(v104 + v111);
  v113 = (_QWORD *)(v105 + v111);
  *v112 = *v113;
  v114 = v113[1];
  v115 = v112[1];
  v112[1] = v114;
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRelease(v115);
  *(_BYTE *)(v104 + v37[8]) = *(_BYTE *)(v105 + v37[8]);
  *(_BYTE *)(v104 + v37[9]) = *(_BYTE *)(v105 + v37[9]);
  *(_BYTE *)(v104 + v37[10]) = *(_BYTE *)(v105 + v37[10]);
  v116 = v102[9];
  v117 = v100 + v116;
  v118 = v101 + v116;
  v119 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 24))(v117, v118, v119);
  *(_QWORD *)(v100 + v102[10]) = *(_QWORD *)(v101 + v102[10]);
  v120 = v102[11];
  v121 = (_QWORD *)(v100 + v120);
  v122 = (_QWORD *)(v101 + v120);
  *v121 = *v122;
  v123 = v122[1];
  v124 = v121[1];
  v121[1] = v123;
  swift_bridgeObjectRetain(v123);
  swift_bridgeObjectRelease(v124);
  v125 = v102[12];
  v126 = (_QWORD *)(v100 + v125);
  v127 = (_QWORD *)(v101 + v125);
  *v126 = *v127;
  v128 = v127[1];
  v129 = v126[1];
  v126[1] = v128;
  swift_bridgeObjectRetain(v128);
  swift_bridgeObjectRelease(v129);
  v130 = v102[13];
  v131 = (_QWORD *)(v100 + v130);
  v132 = (_QWORD *)(v101 + v130);
  *v131 = *v132;
  v133 = v132[1];
  v134 = v131[1];
  v131[1] = v133;
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRelease(v134);
  v135 = v102[14];
  v136 = (_QWORD *)(v100 + v135);
  v137 = (_QWORD *)(v101 + v135);
  *v136 = *v137;
  v138 = v137[1];
  v139 = v136[1];
  v136[1] = v138;
  swift_bridgeObjectRetain(v138);
  swift_bridgeObjectRelease(v139);
  v140 = v102[15];
  v141 = v100 + v140;
  v142 = v101 + v140;
  v143 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v143 - 8) + 24))(v141, v142, v143);
  v144 = v102[16];
  v145 = (void *)(v100 + v144);
  v146 = (const void *)(v101 + v144);
  v147 = type metadata accessor for SunEvents(0);
  LODWORD(v115) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v145, 1, v147);
  v148 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v146, 1, v147);
  if ((_DWORD)v115)
  {
    if (!v148)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v147 - 8) + 16))(v145, v146, v147);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v145, 0, 1, v147);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v149 = *(_QWORD *)(v147 - 8);
  if (v148)
  {
    (*(void (**)(void *, uint64_t))(v149 + 8))(v145, v147);
LABEL_41:
    v150 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, const void *, uint64_t))(v149 + 24))(v145, v146, v147);
LABEL_42:
  v151 = v294;
  v152 = v102[17];
  v153 = (void *)(v100 + v152);
  v154 = (const void *)(v101 + v152);
  v155 = type metadata accessor for MoonEvents(0);
  v156 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v153, 1, v155);
  v157 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v154, 1, v155);
  if (v156)
  {
    if (!v157)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v153, v154, v155);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v153, 0, 1, v155);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v158 = *(_QWORD *)(v155 - 8);
  if (v157)
  {
    (*(void (**)(void *, uint64_t))(v158 + 8))(v153, v155);
LABEL_47:
    v159 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(void *, const void *, uint64_t))(v158 + 24))(v153, v154, v155);
LABEL_48:
  v285(v100 + v102[18], v101 + v102[18], v287);
  *(_QWORD *)(v100 + v102[19]) = *(_QWORD *)(v101 + v102[19]);
  v160 = v98[6];
  v161 = (_QWORD *)(a1 + v160);
  v162 = (_QWORD *)(v294 + v160);
  v163 = type metadata accessor for RainInlineContentViewModel(0);
  v164 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v161, 1, v163);
  v165 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v162, 1, v163);
  v297 = (int *)v163;
  if (v164)
  {
    if (!v165)
    {
      *v161 = *v162;
      v166 = v162[1];
      v161[1] = v166;
      v167 = *(int *)(v163 + 20);
      v168 = (char *)v161 + v167;
      v169 = (char *)v162 + v167;
      v170 = type metadata accessor for AttributedString(0);
      v171 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 16);
      swift_bridgeObjectRetain(v166);
      v172 = v169;
      v163 = (uint64_t)v297;
      v171(v168, v172, v170);
      v173 = v297[6];
      v174 = (char *)v161 + v173;
      v175 = (char *)v162 + v173;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v162 + v173, 1, v170))
      {
        v176 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
      }
      else
      {
        v171(v174, v175, v170);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v174, 0, 1, v170);
      }
      v190 = v297[7];
      v191 = (_QWORD *)((char *)v161 + v190);
      v192 = (_QWORD *)((char *)v162 + v190);
      *v191 = *v192;
      v193 = v192[1];
      v191[1] = v193;
      swift_bridgeObjectRetain(v193);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v161, 0, 1, (uint64_t)v297);
      goto LABEL_62;
    }
LABEL_54:
    v177 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
LABEL_62:
    v194 = v163;
    goto LABEL_63;
  }
  if (v165)
  {
    sub_100011894((uint64_t)v161, type metadata accessor for RainInlineContentViewModel);
    goto LABEL_54;
  }
  *v161 = *v162;
  v178 = v162[1];
  v179 = v161[1];
  v161[1] = v178;
  swift_bridgeObjectRetain(v178);
  swift_bridgeObjectRelease(v179);
  v180 = *(int *)(v163 + 20);
  v181 = (char *)v161 + v180;
  v182 = (char *)v162 + v180;
  v183 = type metadata accessor for AttributedString(0);
  v295 = *(_QWORD *)(v183 - 8);
  v184 = *(void (**)(char *, char *, uint64_t))(v295 + 24);
  v184(v181, v182, v183);
  v185 = *(int *)(v163 + 24);
  v186 = (char *)v161 + v185;
  v187 = (char *)v162 + v185;
  v188 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v161 + v185, 1, v183);
  v189 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v187, 1, v183);
  if (!v188)
  {
    if (!v189)
    {
      v184(v186, v187, v183);
      goto LABEL_81;
    }
    (*(void (**)(char *, uint64_t))(v295 + 8))(v186, v183);
    goto LABEL_80;
  }
  if (v189)
  {
LABEL_80:
    v279 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v279 - 8) + 64));
    goto LABEL_81;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v186, v187, v183);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v186, 0, 1, v183);
LABEL_81:
  v194 = (uint64_t)v297;
  v280 = v297[7];
  v281 = (_QWORD *)((char *)v161 + v280);
  v282 = (_QWORD *)((char *)v162 + v280);
  *v281 = *v282;
  v283 = v282[1];
  v284 = v281[1];
  v281[1] = v283;
  swift_bridgeObjectRetain(v283);
  swift_bridgeObjectRelease(v284);
LABEL_63:
  v195 = v98[7];
  v196 = a1 + v195;
  v197 = v151 + v195;
  v198 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v198 - 8) + 24))(v196, v197, v198);
  v199 = v98[8];
  v200 = (_QWORD *)(a1 + v199);
  v201 = (_QWORD *)(v151 + v199);
  *v200 = *v201;
  v202 = v201[1];
  v203 = v200[1];
  v200[1] = v202;
  swift_bridgeObjectRetain(v202);
  swift_bridgeObjectRelease(v203);
  *(_BYTE *)(a1 + v98[9]) = *(_BYTE *)(v151 + v98[9]);
  *(_BYTE *)(a1 + v98[10]) = *(_BYTE *)(v151 + v98[10]);
  v204 = v98[11];
  v205 = *(_QWORD *)(a1 + v204);
  v206 = *(_QWORD *)(v151 + v204);
  *(_QWORD *)(a1 + v204) = v206;
  swift_retain(v206);
  swift_release(v205);
  v207 = v98[12];
  v208 = (_QWORD *)(a1 + v207);
  v209 = (_QWORD *)(v151 + v207);
  *v208 = *v209;
  v210 = v209[1];
  v211 = v208[1];
  v208[1] = v210;
  swift_bridgeObjectRetain(v210);
  swift_bridgeObjectRelease(v211);
  v212 = v98[13];
  v213 = *(_QWORD *)(v151 + v212);
  v214 = *(_QWORD *)(a1 + v212);
  *(_QWORD *)(a1 + v212) = v213;
  swift_retain(v213);
  swift_release(v214);
  v215 = v98[14];
  v216 = *(_QWORD *)(v151 + v215);
  v217 = *(_QWORD *)(a1 + v215);
  *(_QWORD *)(a1 + v215) = v216;
  swift_retain(v216);
  swift_release(v217);
  v218 = v98[15];
  v219 = *(_QWORD *)(v151 + v218);
  v220 = *(_QWORD *)(a1 + v218);
  *(_QWORD *)(a1 + v218) = v219;
  swift_retain(v219);
  swift_release(v220);
  v221 = v98[16];
  v222 = *(_QWORD *)(v151 + v221);
  v223 = *(_QWORD *)(a1 + v221);
  *(_QWORD *)(a1 + v221) = v222;
  swift_retain(v222);
  swift_release(v223);
  *(_BYTE *)(a1 + v98[17]) = *(_BYTE *)(v151 + v98[17]);
  v224 = v98[18];
  v225 = *(_QWORD *)(v151 + v224);
  v226 = *(_QWORD *)(a1 + v224);
  *(_QWORD *)(a1 + v224) = v225;
  swift_retain(v225);
  swift_release(v226);
  v227 = v98[19];
  v228 = *(_QWORD *)(v151 + v227);
  v229 = *(_QWORD *)(a1 + v227);
  *(_QWORD *)(a1 + v227) = v228;
  swift_retain(v228);
  swift_release(v229);
  *(_QWORD *)(a1 + v98[20]) = *(_QWORD *)(v151 + v98[20]);
  *(_BYTE *)(a1 + v98[21]) = *(_BYTE *)(v151 + v98[21]);
  *(_BYTE *)(a1 + v98[22]) = *(_BYTE *)(v151 + v98[22]);
  *(_BYTE *)(a1 + v98[23]) = *(_BYTE *)(v151 + v98[23]);
  *(_BYTE *)(a1 + v98[24]) = *(_BYTE *)(v151 + v98[24]);
  v230 = v98[25];
  v231 = (_QWORD *)(a1 + v230);
  v232 = (_QWORD *)(v151 + v230);
  *v231 = *v232;
  v233 = v232[1];
  v234 = v231[1];
  v231[1] = v233;
  swift_bridgeObjectRetain(v233);
  swift_bridgeObjectRelease(v234);
  *(_BYTE *)(a1 + v98[26]) = *(_BYTE *)(v151 + v98[26]);
  *(_QWORD *)(a1 + v98[27]) = *(_QWORD *)(v151 + v98[27]);
  *(_QWORD *)(a1 + v98[28]) = *(_QWORD *)(v151 + v98[28]);
  v235 = type metadata accessor for DataDenseViewAttributes(0);
  v236 = *(int *)(v235 + 20);
  v237 = (_BYTE *)(a1 + v236);
  v238 = (_BYTE *)(v151 + v236);
  *v237 = *v238;
  v237[1] = v238[1];
  v237[2] = v238[2];
  v237[3] = v238[3];
  v237[4] = v238[4];
  v237[5] = v238[5];
  v237[6] = v238[6];
  v237[7] = v238[7];
  v237[8] = v238[8];
  v237[9] = v238[9];
  v239 = *(int *)(v235 + 24);
  v240 = (_QWORD *)(a1 + v239);
  v241 = v151 + v239;
  *v240 = *(_QWORD *)(v151 + v239);
  v242 = *(_QWORD *)(v151 + v239 + 8);
  v243 = *(_QWORD *)(a1 + v239 + 8);
  v240[1] = v242;
  swift_bridgeObjectRetain(v242);
  swift_bridgeObjectRelease(v243);
  v244 = *(int *)(v194 + 20);
  v245 = (char *)v240 + v244;
  v246 = v241 + v244;
  v247 = type metadata accessor for AttributedString(0);
  v248 = *(_QWORD *)(v247 - 8);
  v249 = *(void (**)(char *, uint64_t, uint64_t))(v248 + 24);
  v249(v245, v246, v247);
  v250 = *(int *)(v194 + 24);
  v251 = (char *)v240 + v250;
  v252 = (const void *)(v241 + v250);
  v253 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v240 + v250, 1, v247);
  v254 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v252, 1, v247);
  if (v253)
  {
    if (!v254)
    {
      (*(void (**)(char *, const void *, uint64_t))(v248 + 16))(v251, v252, v247);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v251, 0, 1, v247);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v254)
  {
    (*(void (**)(char *, uint64_t))(v248 + 8))(v251, v247);
LABEL_68:
    v255 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v251, v252, *(_QWORD *)(*(_QWORD *)(v255 - 8) + 64));
    goto LABEL_69;
  }
  v249(v251, (uint64_t)v252, v247);
LABEL_69:
  v256 = v297[7];
  v257 = (_QWORD *)((char *)v240 + v256);
  v258 = (_QWORD *)(v241 + v256);
  *v257 = *v258;
  v259 = v258[1];
  v260 = v257[1];
  v257[1] = v259;
  swift_bridgeObjectRetain(v259);
  swift_bridgeObjectRelease(v260);
  v261 = *(int *)(a3 + 20);
  v262 = (_QWORD *)(a1 + v261);
  v263 = v151 + v261;
  *v262 = *(_QWORD *)(v151 + v261);
  v264 = *(_QWORD *)(v151 + v261 + 8);
  v265 = *(_QWORD *)(a1 + v261 + 8);
  v262[1] = v264;
  swift_bridgeObjectRetain(v264);
  v266 = swift_bridgeObjectRelease(v265);
  ((void (*)(char *, uint64_t, uint64_t, __n128))v249)((char *)v262 + v297[5], v263 + v297[5], v247, v266);
  v267 = v297[6];
  v268 = (char *)v262 + v267;
  v269 = (const void *)(v263 + v267);
  v270 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v262 + v267, 1, v247);
  v271 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v269, 1, v247);
  if (!v270)
  {
    if (!v271)
    {
      v249(v268, (uint64_t)v269, v247);
      goto LABEL_75;
    }
    (*(void (**)(char *, uint64_t))(v248 + 8))(v268, v247);
    goto LABEL_74;
  }
  if (v271)
  {
LABEL_74:
    v272 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v268, v269, *(_QWORD *)(*(_QWORD *)(v272 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(char *, const void *, uint64_t))(v248 + 16))(v268, v269, v247);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v268, 0, 1, v247);
LABEL_75:
  v273 = v297[7];
  v274 = (_QWORD *)((char *)v262 + v273);
  v275 = (_QWORD *)(v263 + v273);
  *v274 = *v275;
  v276 = v275[1];
  v277 = v274[1];
  v274[1] = v276;
  swift_bridgeObjectRetain(v276);
  swift_bridgeObjectRelease(v277);
  return a1;
}

uint64_t sub_100050470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  _OWORD *v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t, uint64_t);
  uint64_t v114;
  char *v115;
  const void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const void *v123;
  uint64_t v124;
  void (*v126)(uint64_t, uint64_t);
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v134;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v134 = v11;
  v12(a1 + v7[6], a2 + v7[6], v11);
  v13 = v7[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_100005D40(&qword_1001BF090);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v14, v15, v16);
  v17(a1 + v7[8], a2 + v7[8], v16);
  *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
  v18 = v7[10];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v18, 1, v16))
  {
    v21 = sub_100005D40(&qword_1001BF098);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v19, (uint64_t)v20, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v19, 0, 1, v16);
  }
  v22 = v7[11];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v130 = v17;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v22, 1, v16))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v23, (uint64_t)v24, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v16);
  }
  v26 = v7[12];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v131 = v5;
  v132 = v6;
  v6(a1 + v26, a2 + v26, v5);
  v29 = (int *)type metadata accessor for ConditionViewModel(0);
  v30 = v29[5];
  v31 = v27 + v30;
  v32 = v28 + v30;
  v33 = type metadata accessor for WeatherCondition(0);
  v126 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
  v127 = v33;
  v126(v31, v32);
  *(_OWORD *)(v27 + v29[6]) = *(_OWORD *)(v28 + v29[6]);
  *(_OWORD *)(v27 + v29[7]) = *(_OWORD *)(v28 + v29[7]);
  *(_BYTE *)(v27 + v29[8]) = *(_BYTE *)(v28 + v29[8]);
  *(_BYTE *)(v27 + v29[9]) = *(_BYTE *)(v28 + v29[9]);
  *(_BYTE *)(v27 + v29[10]) = *(_BYTE *)(v28 + v29[10]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v34 = v7[14];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  v38 = v7[15];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v38, 1, v134))
  {
    v41 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v39, (uint64_t)v40, v134);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v134);
  }
  v42 = v7[16];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v42, 1, v134))
  {
    v45 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v43, (uint64_t)v44, v134);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v43, 0, 1, v134);
  }
  v46 = v7[17];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for UVIndex(0);
  v128 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 32);
  v129 = v49;
  v128(v47, v48);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  *(_QWORD *)(a1 + v7[19]) = *(_QWORD *)(a2 + v7[19]);
  v54 = v7[20];
  v55 = a1 + v54;
  v56 = a2 + v54;
  *(_BYTE *)(v55 + 32) = *(_BYTE *)(v56 + 32);
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  v58 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v59 = v58[5];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v132(a1 + v59, a2 + v59, v131);
  v62 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v12(v60 + v62[5], v61 + v62[5], v134);
  v130(v60 + v62[6], v61 + v62[6], v16);
  v130(v60 + v62[7], v61 + v62[7], v16);
  v63 = v62[8];
  v64 = v60 + v63;
  v65 = v61 + v63;
  v132(v60 + v63, v61 + v63, v131);
  ((void (*)(uint64_t, uint64_t, uint64_t))v126)(v64 + v29[5], v65 + v29[5], v127);
  *(_OWORD *)(v64 + v29[6]) = *(_OWORD *)(v65 + v29[6]);
  *(_OWORD *)(v64 + v29[7]) = *(_OWORD *)(v65 + v29[7]);
  *(_BYTE *)(v64 + v29[8]) = *(_BYTE *)(v65 + v29[8]);
  *(_BYTE *)(v64 + v29[9]) = *(_BYTE *)(v65 + v29[9]);
  *(_BYTE *)(v64 + v29[10]) = *(_BYTE *)(v65 + v29[10]);
  v66 = v62[9];
  v67 = v60 + v66;
  v68 = v61 + v66;
  v69 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
  *(_QWORD *)(v60 + v62[10]) = *(_QWORD *)(v61 + v62[10]);
  *(_OWORD *)(v60 + v62[11]) = *(_OWORD *)(v61 + v62[11]);
  *(_OWORD *)(v60 + v62[12]) = *(_OWORD *)(v61 + v62[12]);
  *(_OWORD *)(v60 + v62[13]) = *(_OWORD *)(v61 + v62[13]);
  *(_OWORD *)(v60 + v62[14]) = *(_OWORD *)(v61 + v62[14]);
  v70 = v62[15];
  v71 = v60 + v70;
  v72 = v61 + v70;
  v73 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
  v74 = v62[16];
  v75 = (void *)(v60 + v74);
  v76 = (const void *)(v61 + v74);
  v77 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v76, 1, v77))
  {
    v78 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v75, 0, 1, v77);
  }
  v79 = v62[17];
  v80 = (void *)(v60 + v79);
  v81 = (const void *)(v61 + v79);
  v82 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v81, 1, v82))
  {
    v83 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v80, v81, v82);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v80, 0, 1, v82);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v128)(v60 + v62[18], v61 + v62[18], v129);
  *(_QWORD *)(v60 + v62[19]) = *(_QWORD *)(v61 + v62[19]);
  v84 = v58[6];
  v85 = (_OWORD *)(a1 + v84);
  v86 = (_OWORD *)(a2 + v84);
  v87 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86, 1, (uint64_t)v87))
  {
    v88 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    *v85 = *v86;
    v89 = v87[5];
    v90 = (char *)v85 + v89;
    v91 = (char *)v86 + v89;
    v92 = type metadata accessor for AttributedString(0);
    v93 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32);
    v93(v90, v91, v92);
    v94 = v87[6];
    v95 = (char *)v85 + v94;
    v96 = (char *)v86 + v94;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86 + v94, 1, v92))
    {
      v97 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      v93(v95, v96, v92);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v95, 0, 1, v92);
    }
    *(_OWORD *)((char *)v85 + v87[7]) = *(_OWORD *)((char *)v86 + v87[7]);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v85, 0, 1, (uint64_t)v87);
  }
  v98 = v58[7];
  v99 = a1 + v98;
  v100 = a2 + v98;
  v101 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v99, v100, v101);
  *(_OWORD *)(a1 + v58[8]) = *(_OWORD *)(a2 + v58[8]);
  *(_BYTE *)(a1 + v58[9]) = *(_BYTE *)(a2 + v58[9]);
  *(_BYTE *)(a1 + v58[10]) = *(_BYTE *)(a2 + v58[10]);
  *(_QWORD *)(a1 + v58[11]) = *(_QWORD *)(a2 + v58[11]);
  *(_OWORD *)(a1 + v58[12]) = *(_OWORD *)(a2 + v58[12]);
  *(_QWORD *)(a1 + v58[13]) = *(_QWORD *)(a2 + v58[13]);
  *(_QWORD *)(a1 + v58[14]) = *(_QWORD *)(a2 + v58[14]);
  *(_QWORD *)(a1 + v58[15]) = *(_QWORD *)(a2 + v58[15]);
  *(_QWORD *)(a1 + v58[16]) = *(_QWORD *)(a2 + v58[16]);
  *(_BYTE *)(a1 + v58[17]) = *(_BYTE *)(a2 + v58[17]);
  *(_QWORD *)(a1 + v58[18]) = *(_QWORD *)(a2 + v58[18]);
  *(_QWORD *)(a1 + v58[19]) = *(_QWORD *)(a2 + v58[19]);
  *(_QWORD *)(a1 + v58[20]) = *(_QWORD *)(a2 + v58[20]);
  *(_BYTE *)(a1 + v58[21]) = *(_BYTE *)(a2 + v58[21]);
  *(_BYTE *)(a1 + v58[22]) = *(_BYTE *)(a2 + v58[22]);
  *(_BYTE *)(a1 + v58[23]) = *(_BYTE *)(a2 + v58[23]);
  *(_BYTE *)(a1 + v58[24]) = *(_BYTE *)(a2 + v58[24]);
  *(_OWORD *)(a1 + v58[25]) = *(_OWORD *)(a2 + v58[25]);
  *(_BYTE *)(a1 + v58[26]) = *(_BYTE *)(a2 + v58[26]);
  *(_QWORD *)(a1 + v58[27]) = *(_QWORD *)(a2 + v58[27]);
  *(_QWORD *)(a1 + v58[28]) = *(_QWORD *)(a2 + v58[28]);
  v102 = type metadata accessor for DataDenseViewAttributes(0);
  v103 = *(int *)(v102 + 20);
  v104 = a1 + v103;
  v105 = a2 + v103;
  *(_QWORD *)v104 = *(_QWORD *)v105;
  *(_WORD *)(v104 + 8) = *(_WORD *)(v105 + 8);
  v106 = *(int *)(v102 + 24);
  v107 = (_OWORD *)(a1 + v106);
  v108 = a2 + v106;
  *v107 = *(_OWORD *)(a2 + v106);
  v109 = v87[5];
  v110 = (char *)v107 + v109;
  v111 = v108 + v109;
  v112 = type metadata accessor for AttributedString(0);
  v113 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 32);
  v113(v110, v111, v112);
  v114 = v87[6];
  v115 = (char *)v107 + v114;
  v116 = (const void *)(v108 + v114);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v108 + v114, 1, v112))
  {
    v117 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
  }
  else
  {
    v113(v115, (uint64_t)v116, v112);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v115, 0, 1, v112);
  }
  *(_OWORD *)((char *)v107 + v87[7]) = *(_OWORD *)(v108 + v87[7]);
  v118 = *(int *)(a3 + 20);
  v119 = a1 + v118;
  v120 = a2 + v118;
  *(_OWORD *)(a1 + v118) = *(_OWORD *)(a2 + v118);
  v113((char *)(a1 + v118 + v87[5]), a2 + v118 + v87[5], v112);
  v121 = v87[6];
  v122 = (void *)(v119 + v121);
  v123 = (const void *)(v120 + v121);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v120 + v121, 1, v112))
  {
    v124 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
  }
  else
  {
    v113((char *)v122, (uint64_t)v123, v112);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v122, 0, 1, v112);
  }
  *(_OWORD *)(v119 + v87[7]) = *(_OWORD *)(v120 + v87[7]);
  return a1;
}

uint64_t sub_100050EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  const void *v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  const void *v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  int *v163;
  int v164;
  int v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  void (*v170)(char *, char *, uint64_t);
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  void (*v182)(char *, char *, uint64_t);
  uint64_t v183;
  char *v184;
  char *v185;
  int v186;
  int v187;
  int *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void (*v239)(char *, uint64_t, uint64_t);
  uint64_t v240;
  char *v241;
  const void *v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  __n128 v257;
  uint64_t v258;
  char *v259;
  const void *v260;
  int v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void (*v278)(uint64_t, uint64_t, uint64_t);
  uint64_t v279;
  void (*v281)(uint64_t, uint64_t);
  uint64_t v282;
  uint64_t v283;
  void (*v284)(void *, const void *, uint64_t);
  void (*v285)(void *, const void *, uint64_t);
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  void (*v289)(uint64_t, uint64_t, uint64_t);
  int *v290;

  v5 = type metadata accessor for UUID(0);
  v289 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40);
  v289(a1, a2, v5);
  v6 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v286 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v286 + 40);
  v11(v8, v9, v10);
  v285 = (void (*)(void *, const void *, uint64_t))v11;
  v11(a1 + v6[6], a2 + v6[6], v10);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_100005D40(&qword_1001BF090);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40);
  v17(v13, v14, v15);
  v284 = (void (*)(void *, const void *, uint64_t))v17;
  v17(a1 + v6[8], a2 + v6[8], v15);
  v18 = v6[9];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = v6[10];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  LODWORD(v17) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v24, 1, v15);
  v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v15);
  if ((_DWORD)v17)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v25, v26, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v25, v15);
LABEL_6:
    v28 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  v284(v25, v26, v15);
LABEL_7:
  v29 = v6[11];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v29, 1, v15);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v15);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v30, v31, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v30, v15);
LABEL_12:
    v34 = sub_100005D40(&qword_1001BF098);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  v284(v30, v31, v15);
LABEL_13:
  v35 = v6[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v283 = v5;
  v289(a1 + v35, a2 + v35, v5);
  v38 = (int *)type metadata accessor for ConditionViewModel(0);
  v39 = v38[5];
  v40 = v36 + v39;
  v41 = v37 + v39;
  v42 = type metadata accessor for WeatherCondition(0);
  v281 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40);
  v282 = v42;
  v281(v40, v41);
  v43 = v38[6];
  v44 = (_QWORD *)(v36 + v43);
  v45 = (uint64_t *)(v37 + v43);
  v47 = *v45;
  v46 = v45[1];
  v48 = v44[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease(v48);
  v49 = v38[7];
  v50 = (_QWORD *)(v36 + v49);
  v51 = (uint64_t *)(v37 + v49);
  v53 = *v51;
  v52 = v51[1];
  v54 = v50[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease(v54);
  *(_BYTE *)(v36 + v38[8]) = *(_BYTE *)(v37 + v38[8]);
  *(_BYTE *)(v36 + v38[9]) = *(_BYTE *)(v37 + v38[9]);
  *(_BYTE *)(v36 + v38[10]) = *(_BYTE *)(v37 + v38[10]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  v55 = v6[14];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  v59 = v6[15];
  v60 = (void *)(a1 + v59);
  v61 = (const void *)(a2 + v59);
  LODWORD(v40) = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v59, 1, v10);
  v62 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v61, 1, v10);
  v63 = a2;
  if ((_DWORD)v40)
  {
    if (!v62)
    {
      (*(void (**)(void *, const void *, uint64_t))(v286 + 32))(v60, v61, v10);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v60, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v62)
  {
    (*(void (**)(void *, uint64_t))(v286 + 8))(v60, v10);
LABEL_18:
    v64 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_19;
  }
  v285(v60, v61, v10);
LABEL_19:
  v65 = v6[16];
  v66 = (void *)(a1 + v65);
  v67 = (const void *)(a2 + v65);
  v68 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v65, 1, v10);
  v69 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v10);
  if (v68)
  {
    if (v69)
    {
      v70 = v10;
LABEL_24:
      v71 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      goto LABEL_30;
    }
    (*(void (**)(void *, const void *, uint64_t))(v286 + 32))(v66, v67, v10);
    v70 = v10;
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v10);
  }
  else
  {
    if (v69)
    {
      v70 = v10;
      (*(void (**)(void *, uint64_t))(v286 + 8))(v66, v10);
      goto LABEL_24;
    }
    v70 = v10;
    v285(v66, v67, v10);
  }
LABEL_30:
  v72 = v6[17];
  v73 = a1 + v72;
  v74 = v63 + v72;
  v75 = type metadata accessor for UVIndex(0);
  v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 40);
  v76(v73, v74, v75);
  v77 = v6[18];
  v78 = a1 + v77;
  v79 = v63 + v77;
  v80 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 40))(v78, v79, v80);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(v63 + v6[19]);
  v81 = v6[20];
  v82 = a1 + v81;
  v287 = v63;
  v83 = v63 + v81;
  v84 = *(_QWORD *)(a1 + v81 + 8);
  v278 = v76;
  v279 = v75;
  if (v84)
  {
    v85 = *(_QWORD *)(v83 + 8);
    if (v85)
    {
      *(_QWORD *)v82 = *(_QWORD *)v83;
      *(_QWORD *)(v82 + 8) = v85;
      swift_bridgeObjectRelease(v84);
      v86 = *(_BYTE *)(v83 + 32);
      v87 = *(_QWORD *)(v82 + 16);
      v88 = *(_QWORD *)(v82 + 24);
      v89 = *(_BYTE *)(v82 + 32);
      *(_OWORD *)(v82 + 16) = *(_OWORD *)(v83 + 16);
      *(_BYTE *)(v82 + 32) = v86;
      sub_100007458(v87, v88, v89);
      goto LABEL_35;
    }
    sub_100008EC4(v82);
  }
  v90 = *(_OWORD *)(v83 + 16);
  *(_OWORD *)v82 = *(_OWORD *)v83;
  *(_OWORD *)(v82 + 16) = v90;
  *(_BYTE *)(v82 + 32) = *(_BYTE *)(v83 + 32);
LABEL_35:
  v91 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v92 = v91[5];
  v93 = a1 + v92;
  v94 = v63 + v92;
  v289(a1 + v92, v63 + v92, v283);
  v95 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v285((void *)(v93 + v95[5]), (const void *)(v94 + v95[5]), v70);
  v284((void *)(v93 + v95[6]), (const void *)(v94 + v95[6]), v15);
  v284((void *)(v93 + v95[7]), (const void *)(v94 + v95[7]), v15);
  v96 = v95[8];
  v97 = v93 + v96;
  v98 = v94 + v96;
  v289(v93 + v96, v94 + v96, v283);
  ((void (*)(uint64_t, uint64_t, uint64_t))v281)(v97 + v38[5], v98 + v38[5], v282);
  v99 = v38[6];
  v100 = (_QWORD *)(v97 + v99);
  v101 = (uint64_t *)(v98 + v99);
  v103 = *v101;
  v102 = v101[1];
  v104 = v100[1];
  *v100 = v103;
  v100[1] = v102;
  swift_bridgeObjectRelease(v104);
  v105 = v38[7];
  v106 = (_QWORD *)(v97 + v105);
  v107 = (uint64_t *)(v98 + v105);
  v109 = *v107;
  v108 = v107[1];
  v110 = v106[1];
  *v106 = v109;
  v106[1] = v108;
  swift_bridgeObjectRelease(v110);
  *(_BYTE *)(v97 + v38[8]) = *(_BYTE *)(v98 + v38[8]);
  *(_BYTE *)(v97 + v38[9]) = *(_BYTE *)(v98 + v38[9]);
  *(_BYTE *)(v97 + v38[10]) = *(_BYTE *)(v98 + v38[10]);
  v111 = v95[9];
  v112 = v93 + v111;
  v113 = v94 + v111;
  v114 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 40))(v112, v113, v114);
  *(_QWORD *)(v93 + v95[10]) = *(_QWORD *)(v94 + v95[10]);
  v115 = v95[11];
  v116 = (_QWORD *)(v93 + v115);
  v117 = (uint64_t *)(v94 + v115);
  v119 = *v117;
  v118 = v117[1];
  v120 = v116[1];
  *v116 = v119;
  v116[1] = v118;
  swift_bridgeObjectRelease(v120);
  v121 = v95[12];
  v122 = (_QWORD *)(v93 + v121);
  v123 = (uint64_t *)(v94 + v121);
  v125 = *v123;
  v124 = v123[1];
  v126 = v122[1];
  *v122 = v125;
  v122[1] = v124;
  swift_bridgeObjectRelease(v126);
  v127 = v95[13];
  v128 = (_QWORD *)(v93 + v127);
  v129 = (uint64_t *)(v94 + v127);
  v131 = *v129;
  v130 = v129[1];
  v132 = v128[1];
  *v128 = v131;
  v128[1] = v130;
  swift_bridgeObjectRelease(v132);
  v133 = v95[14];
  v134 = (_QWORD *)(v93 + v133);
  v135 = (uint64_t *)(v94 + v133);
  v137 = *v135;
  v136 = v135[1];
  v138 = v134[1];
  *v134 = v137;
  v134[1] = v136;
  swift_bridgeObjectRelease(v138);
  v139 = v95[15];
  v140 = v93 + v139;
  v141 = v94 + v139;
  v142 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v142 - 8) + 40))(v140, v141, v142);
  v143 = v95[16];
  v144 = (void *)(v93 + v143);
  v145 = (const void *)(v94 + v143);
  v146 = type metadata accessor for SunEvents(0);
  v147 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v144, 1, v146);
  v148 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v145, 1, v146);
  if (v147)
  {
    if (!v148)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v146 - 8) + 32))(v144, v145, v146);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v144, 0, 1, v146);
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  v149 = *(_QWORD *)(v146 - 8);
  if (v148)
  {
    (*(void (**)(void *, uint64_t))(v149 + 8))(v144, v146);
LABEL_40:
    v150 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
    goto LABEL_41;
  }
  (*(void (**)(void *, const void *, uint64_t))(v149 + 40))(v144, v145, v146);
LABEL_41:
  v151 = v287;
  v152 = v95[17];
  v153 = (void *)(v93 + v152);
  v154 = (const void *)(v94 + v152);
  v155 = type metadata accessor for MoonEvents(0);
  v156 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v153, 1, v155);
  v157 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v154, 1, v155);
  if (v156)
  {
    if (!v157)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v155 - 8) + 32))(v153, v154, v155);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v153, 0, 1, v155);
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  v158 = *(_QWORD *)(v155 - 8);
  if (v157)
  {
    (*(void (**)(void *, uint64_t))(v158 + 8))(v153, v155);
LABEL_46:
    v159 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    goto LABEL_47;
  }
  (*(void (**)(void *, const void *, uint64_t))(v158 + 40))(v153, v154, v155);
LABEL_47:
  v278(v93 + v95[18], v94 + v95[18], v279);
  *(_QWORD *)(v93 + v95[19]) = *(_QWORD *)(v94 + v95[19]);
  v160 = v91[6];
  v161 = (_QWORD *)(a1 + v160);
  v162 = (_QWORD *)(v287 + v160);
  v163 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v164 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v161, 1, (uint64_t)v163);
  v165 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v162, 1, (uint64_t)v163);
  v290 = v163;
  if (v164)
  {
    if (!v165)
    {
      *(_OWORD *)v161 = *(_OWORD *)v162;
      v166 = v163[5];
      v167 = (char *)v161 + v166;
      v168 = (char *)v162 + v166;
      v169 = type metadata accessor for AttributedString(0);
      v170 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 32);
      v170(v167, v168, v169);
      v171 = v163[6];
      v172 = (char *)v161 + v171;
      v173 = (char *)v162 + v171;
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v162 + v171, 1, v169))
      {
        v174 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v172, v173, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
      }
      else
      {
        v170(v172, v173, v169);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v172, 0, 1, v169);
      }
      *(_OWORD *)((char *)v161 + v163[7]) = *(_OWORD *)((char *)v162 + v163[7]);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v161, 0, 1, (uint64_t)v163);
      goto LABEL_61;
    }
LABEL_53:
    v175 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
LABEL_61:
    v188 = v163;
    goto LABEL_62;
  }
  if (v165)
  {
    sub_100011894((uint64_t)v161, type metadata accessor for RainInlineContentViewModel);
    goto LABEL_53;
  }
  v176 = v162[1];
  v177 = v161[1];
  *v161 = *v162;
  v161[1] = v176;
  swift_bridgeObjectRelease(v177);
  v178 = v163[5];
  v179 = (char *)v161 + v178;
  v180 = (char *)v162 + v178;
  v181 = type metadata accessor for AttributedString(0);
  v288 = *(_QWORD *)(v181 - 8);
  v182 = *(void (**)(char *, char *, uint64_t))(v288 + 40);
  v182(v179, v180, v181);
  v183 = v163[6];
  v184 = (char *)v161 + v183;
  v185 = (char *)v162 + v183;
  v186 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v161 + v183, 1, v181);
  v187 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v185, 1, v181);
  if (!v186)
  {
    if (!v187)
    {
      v182(v184, v185, v181);
      goto LABEL_80;
    }
    (*(void (**)(char *, uint64_t))(v288 + 8))(v184, v181);
    goto LABEL_79;
  }
  if (v187)
  {
LABEL_79:
    v271 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v184, v185, *(_QWORD *)(*(_QWORD *)(v271 - 8) + 64));
    goto LABEL_80;
  }
  (*(void (**)(char *, char *, uint64_t))(v288 + 32))(v184, v185, v181);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v184, 0, 1, v181);
LABEL_80:
  v188 = v290;
  v272 = v290[7];
  v273 = (_QWORD *)((char *)v161 + v272);
  v274 = (_QWORD *)((char *)v162 + v272);
  v276 = *v274;
  v275 = v274[1];
  v277 = v273[1];
  *v273 = v276;
  v273[1] = v275;
  swift_bridgeObjectRelease(v277);
LABEL_62:
  v189 = v91[7];
  v190 = a1 + v189;
  v191 = v151 + v189;
  v192 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v192 - 8) + 40))(v190, v191, v192);
  v193 = v91[8];
  v194 = (_QWORD *)(a1 + v193);
  v195 = (uint64_t *)(v151 + v193);
  v197 = *v195;
  v196 = v195[1];
  v198 = v194[1];
  *v194 = v197;
  v194[1] = v196;
  swift_bridgeObjectRelease(v198);
  *(_BYTE *)(a1 + v91[9]) = *(_BYTE *)(v151 + v91[9]);
  *(_BYTE *)(a1 + v91[10]) = *(_BYTE *)(v151 + v91[10]);
  v199 = v91[11];
  v200 = *(_QWORD *)(a1 + v199);
  *(_QWORD *)(a1 + v199) = *(_QWORD *)(v151 + v199);
  swift_release(v200);
  v201 = v91[12];
  v202 = (_QWORD *)(a1 + v201);
  v203 = (uint64_t *)(v151 + v201);
  v205 = *v203;
  v204 = v203[1];
  v206 = v202[1];
  *v202 = v205;
  v202[1] = v204;
  swift_bridgeObjectRelease(v206);
  v207 = v91[13];
  v208 = *(_QWORD *)(a1 + v207);
  *(_QWORD *)(a1 + v207) = *(_QWORD *)(v151 + v207);
  swift_release(v208);
  v209 = v91[14];
  v210 = *(_QWORD *)(a1 + v209);
  *(_QWORD *)(a1 + v209) = *(_QWORD *)(v151 + v209);
  swift_release(v210);
  v211 = v91[15];
  v212 = *(_QWORD *)(a1 + v211);
  *(_QWORD *)(a1 + v211) = *(_QWORD *)(v151 + v211);
  swift_release(v212);
  v213 = v91[16];
  v214 = *(_QWORD *)(a1 + v213);
  *(_QWORD *)(a1 + v213) = *(_QWORD *)(v151 + v213);
  swift_release(v214);
  *(_BYTE *)(a1 + v91[17]) = *(_BYTE *)(v151 + v91[17]);
  v215 = v91[18];
  v216 = *(_QWORD *)(a1 + v215);
  *(_QWORD *)(a1 + v215) = *(_QWORD *)(v151 + v215);
  swift_release(v216);
  v217 = v91[19];
  v218 = *(_QWORD *)(a1 + v217);
  *(_QWORD *)(a1 + v217) = *(_QWORD *)(v151 + v217);
  swift_release(v218);
  *(_QWORD *)(a1 + v91[20]) = *(_QWORD *)(v151 + v91[20]);
  *(_BYTE *)(a1 + v91[21]) = *(_BYTE *)(v151 + v91[21]);
  *(_BYTE *)(a1 + v91[22]) = *(_BYTE *)(v151 + v91[22]);
  *(_BYTE *)(a1 + v91[23]) = *(_BYTE *)(v151 + v91[23]);
  *(_BYTE *)(a1 + v91[24]) = *(_BYTE *)(v151 + v91[24]);
  v219 = v91[25];
  v220 = (_QWORD *)(a1 + v219);
  v221 = (uint64_t *)(v151 + v219);
  v223 = *v221;
  v222 = v221[1];
  v224 = v220[1];
  *v220 = v223;
  v220[1] = v222;
  swift_bridgeObjectRelease(v224);
  *(_BYTE *)(a1 + v91[26]) = *(_BYTE *)(v151 + v91[26]);
  *(_QWORD *)(a1 + v91[27]) = *(_QWORD *)(v151 + v91[27]);
  *(_QWORD *)(a1 + v91[28]) = *(_QWORD *)(v151 + v91[28]);
  v225 = type metadata accessor for DataDenseViewAttributes(0);
  v226 = *(int *)(v225 + 20);
  v227 = a1 + v226;
  v228 = v151 + v226;
  *(_QWORD *)v227 = *(_QWORD *)v228;
  *(_WORD *)(v227 + 8) = *(_WORD *)(v228 + 8);
  v229 = *(int *)(v225 + 24);
  v230 = (_QWORD *)(a1 + v229);
  v231 = v151 + v229;
  v232 = *(_QWORD *)(v151 + v229 + 8);
  v233 = *(_QWORD *)(a1 + v229 + 8);
  *v230 = *(_QWORD *)(v151 + v229);
  v230[1] = v232;
  swift_bridgeObjectRelease(v233);
  v234 = v188[5];
  v235 = (char *)v230 + v234;
  v236 = v231 + v234;
  v237 = type metadata accessor for AttributedString(0);
  v238 = *(_QWORD *)(v237 - 8);
  v239 = *(void (**)(char *, uint64_t, uint64_t))(v238 + 40);
  v239(v235, v236, v237);
  v240 = v188[6];
  v241 = (char *)v230 + v240;
  v242 = (const void *)(v231 + v240);
  v243 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v230 + v240, 1, v237);
  v244 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v242, 1, v237);
  if (v243)
  {
    if (!v244)
    {
      (*(void (**)(char *, const void *, uint64_t))(v238 + 32))(v241, v242, v237);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v241, 0, 1, v237);
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (v244)
  {
    (*(void (**)(char *, uint64_t))(v238 + 8))(v241, v237);
LABEL_67:
    v245 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v241, v242, *(_QWORD *)(*(_QWORD *)(v245 - 8) + 64));
    goto LABEL_68;
  }
  v239(v241, (uint64_t)v242, v237);
LABEL_68:
  v246 = v290[7];
  v247 = (_QWORD *)((char *)v230 + v246);
  v248 = (uint64_t *)(v231 + v246);
  v250 = *v248;
  v249 = v248[1];
  v251 = v247[1];
  *v247 = v250;
  v247[1] = v249;
  swift_bridgeObjectRelease(v251);
  v252 = *(int *)(a3 + 20);
  v253 = (_QWORD *)(a1 + v252);
  v254 = v151 + v252;
  v255 = *(_QWORD *)(v151 + v252 + 8);
  v256 = *(_QWORD *)(a1 + v252 + 8);
  *v253 = *(_QWORD *)(v151 + v252);
  v253[1] = v255;
  v257 = swift_bridgeObjectRelease(v256);
  ((void (*)(char *, uint64_t, uint64_t, __n128))v239)((char *)v253 + v290[5], v254 + v290[5], v237, v257);
  v258 = v290[6];
  v259 = (char *)v253 + v258;
  v260 = (const void *)(v254 + v258);
  v261 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v253 + v258, 1, v237);
  v262 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v260, 1, v237);
  if (!v261)
  {
    if (!v262)
    {
      v239(v259, (uint64_t)v260, v237);
      goto LABEL_74;
    }
    (*(void (**)(char *, uint64_t))(v238 + 8))(v259, v237);
    goto LABEL_73;
  }
  if (v262)
  {
LABEL_73:
    v263 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v263 - 8) + 64));
    goto LABEL_74;
  }
  (*(void (**)(char *, const void *, uint64_t))(v238 + 32))(v259, v260, v237);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v259, 0, 1, v237);
LABEL_74:
  v264 = v290[7];
  v265 = (_QWORD *)((char *)v253 + v264);
  v266 = (uint64_t *)(v254 + v264);
  v268 = *v266;
  v267 = v266[1];
  v269 = v265[1];
  *v265 = v268;
  v265[1] = v267;
  swift_bridgeObjectRelease(v269);
  return a1;
}

uint64_t sub_100051E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100051E88);
}

uint64_t sub_100051E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  sub_10006753C();
  sub_10001C6C0();
  if (v7)
  {
    v8 = v6;
    v9 = v4;
  }
  else
  {
    v8 = type metadata accessor for RainInlineContentViewModel(0);
    v9 = v4 + *(int *)(a3 + 20);
  }
  return sub_100016B50(v9, v3, v8);
}

uint64_t sub_100051ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100051EE0);
}

uint64_t sub_100051EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  sub_10006753C();
  sub_10001C6D0();
  if (v8)
  {
    v9 = v7;
    v10 = v5;
  }
  else
  {
    v9 = type metadata accessor for RainInlineContentViewModel(0);
    v10 = v5 + *(int *)(a4 + 20);
  }
  return sub_100016B44(v10, v4, v4, v9);
}

uint64_t type metadata accessor for DataDenseTableView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C0800, (uint64_t)&nominal type descriptor for DataDenseTableView);
}

uint64_t sub_100051F48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for DataDenseViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for RainInlineContentViewModel(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100051FCC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019EEE0, 1);
}

void sub_100051FDC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = sub_100005D40(&qword_1001C0838);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static Axis.Set.horizontal.getter(v4);
  v8 = static Axis.Set.vertical.getter();
  v9 = Axis.Set.init(rawValue:)(0);
  v10 = Axis.Set.init(rawValue:)(v9);
  if (Axis.Set.init(rawValue:)(v10 & v7) != v7)
    v9 = Axis.Set.init(rawValue:)(v9 | v7);
  v11 = Axis.Set.init(rawValue:)(v9);
  if (Axis.Set.init(rawValue:)(v11 & v8) != v8)
    LOBYTE(v9) = Axis.Set.init(rawValue:)(v9 | v8);
  *v6 = v9;
  v12 = sub_100005D40(&qword_1001C0840);
  sub_1000520E0(v1, (uint64_t)&v6[*(int *)(v12 + 44)]);
  sub_1000168AC((uint64_t)v6, a1, &qword_1001C0838);
}

void sub_1000520E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  char *v36;
  uint64_t v37;

  v37 = a2;
  v3 = sub_100005D40(&qword_1001C0848);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v36 - v7;
  v9 = sub_100005D40(&qword_1001C0850);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v36 - v13;
  v15 = sub_100005D40(&qword_1001C0858);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v36 - v19;
  v21 = sub_100005D40(&qword_1001C0860);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v36 - v26;
  *(_QWORD *)v27 = static HorizontalAlignment.center.getter(v25);
  *((_QWORD *)v27 + 1) = 0;
  v27[16] = 0;
  v28 = sub_100005D40(&qword_1001C0868);
  sub_1000534B4(a1, (__n128 *)&v27[*(int *)(v28 + 44)]);
  *(_QWORD *)v20 = static HorizontalAlignment.center.getter(v29);
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 0;
  v30 = sub_100005D40(&qword_1001C0870);
  sub_100053ECC(a1, (__n128 *)&v20[*(int *)(v30 + 44)]);
  *(_QWORD *)v14 = static HorizontalAlignment.leading.getter();
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v31 = sub_100005D40(&qword_1001C0878);
  sub_1000546B0(a1, &v14[*(int *)(v31 + 44)]);
  *(_QWORD *)v8 = static HorizontalAlignment.leading.getter();
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v32 = sub_100005D40(&qword_1001C0880);
  sub_1000549A0(a1, &v8[*(int *)(v32 + 44)]);
  v36 = v24;
  sub_1000168D8((uint64_t)v27, (uint64_t)v24, &qword_1001C0860);
  sub_1000168D8((uint64_t)v20, (uint64_t)v18, &qword_1001C0858);
  sub_1000168D8((uint64_t)v14, (uint64_t)v12, &qword_1001C0850);
  sub_1000168D8((uint64_t)v8, (uint64_t)v6, &qword_1001C0848);
  v33 = (uint64_t)v24;
  v34 = v37;
  sub_1000168D8(v33, v37, &qword_1001C0860);
  v35 = (int *)sub_100005D40(&qword_1001C0888);
  sub_1000168D8((uint64_t)v18, v34 + v35[12], &qword_1001C0858);
  sub_1000168D8((uint64_t)v12, v34 + v35[16], &qword_1001C0850);
  sub_1000168D8((uint64_t)v6, v34 + v35[20], &qword_1001C0848);
  sub_100016904((uint64_t)v8, &qword_1001C0848);
  sub_100016904((uint64_t)v14, &qword_1001C0850);
  sub_100016904((uint64_t)v20, &qword_1001C0858);
  sub_100016904((uint64_t)v27, &qword_1001C0860);
  sub_100016904((uint64_t)v6, &qword_1001C0848);
  sub_100016904((uint64_t)v12, &qword_1001C0850);
  sub_100016904((uint64_t)v18, &qword_1001C0858);
  sub_100016904((uint64_t)v36, &qword_1001C0860);
}

uint64_t sub_10005245C()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = type metadata accessor for WeatherFormatPlaceholder(0);
  v25 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v1 = (char *)&v24 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100005D40(&qword_1001C08A8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSUnitSpeed.WeatherFormatUsage(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle(0);
  v26 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001C08B0);
  v24 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CurrentObservationViewModel(0);
  Wind.speed.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for NSUnitSpeed.WeatherFormatUsage.windSpeed(_:), v5);
  v15 = type metadata accessor for Locale(0);
  v16 = _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v4, 1, 1, v15);
  v17 = static Set<>.full.getter(v16);
  static WeatherFormatStyle<>.weather(_:usage:locale:)(v17, v8, v4);
  swift_bridgeObjectRelease(v17);
  sub_100016904((uint64_t)v4, &qword_1001C08A8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v18 = v25;
  v19 = v27;
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v1, enum case for WeatherFormatPlaceholder.none(_:), v27);
  v20 = type metadata accessor for UnitManager(0);
  v21 = static UnitManager.standard.getter(v20);
  sub_100016878(&qword_1001C08B8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle);
  v22 = Measurement.formatted<A>(_:placeholder:unitManager:)(v11, v1, v21, &protocol witness table for UnitManager, v12, v9);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v1, v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  return v22;
}

uint64_t sub_100052720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  v31 = type metadata accessor for WeatherFormatPlaceholder(0);
  v34 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v33 = (char *)&v29 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = sub_100005D40(&qword_1001C08A8);
  __chkstk_darwin(v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for NSUnitSpeed.WeatherFormatUsage(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v29 - v13;
  v30 = sub_100005D40(&qword_1001C08B0);
  v32 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CurrentObservationViewModel(0);
  Wind.speed.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for NSUnitSpeed.WeatherFormatUsage.windSpeed(_:), v4);
  v17 = type metadata accessor for Locale(0);
  v18 = _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v3, 1, 1, v17);
  v19 = static Set<>.full.getter(v18);
  static WeatherFormatStyle<>.weather(_:usage:locale:)(v19, v7, v3);
  swift_bridgeObjectRelease(v19);
  sub_100016904((uint64_t)v3, &qword_1001C08A8);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  NSUnitSpeed.BaseWeatherFormatStyle.accessible.getter(v20);
  v29 = *(void (**)(char *, uint64_t))(v9 + 8);
  v29(v14, v8);
  v21 = v33;
  v22 = v34;
  v23 = v31;
  (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v33, enum case for WeatherFormatPlaceholder.none(_:), v31);
  v24 = type metadata accessor for UnitManager(0);
  v25 = static UnitManager.standard.getter(v24);
  sub_100016878(&qword_1001C08B8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle);
  v26 = v30;
  v27 = Measurement.formatted<A>(_:placeholder:unitManager:)(v12, v21, v25, &protocol witness table for UnitManager, v30, v8);
  swift_release(v25);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v21, v23);
  v29(v12, v8);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v26);
  return v27;
}

uint64_t sub_100052A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v0 = type metadata accessor for WeatherFormatPlaceholder(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CurrentObservationViewModel(0);
  static WeatherFormatStyle<>.weather.getter(v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for WeatherFormatPlaceholder.none(_:), v0);
  v9 = type metadata accessor for UnitManager(0);
  v10 = static UnitManager.standard.getter(v9);
  v11 = sub_100005D40(&qword_1001BF090);
  sub_100016878(&qword_1001BF440, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v12 = Measurement.formatted<A>(_:placeholder:unitManager:)(v7, v3, v10, &protocol witness table for UnitManager, v11, v4);
  swift_release(v10);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v12;
}

void sub_100052BA4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100052BD8(uint64_t a1, char a2)
{
  id v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t countAndFlagsBits;
  unint64_t v9;

  if ((a2 & 1) != 0)
  {
    if (qword_1001BEF68 != -1)
      swift_once(&qword_1001BEF68, sub_100173D84);
    v2 = (id)qword_1001DA1E8;
    v3 = 0xD000000000000044;
    v9 = 0x80000001001868D0;
    v4 = 0x706963657250;
    v5 = 0xE600000000000000;
  }
  else
  {
    if (qword_1001BEF68 != -1)
      swift_once(&qword_1001BEF68, sub_100173D84);
    v2 = (id)qword_1001DA1E8;
    v3 = 0xD000000000000069;
    v9 = 0x8000000100186860;
    v4 = 0x7469706963657250;
    v5 = 0xED00006E6F697461;
  }
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, (Swift::String_optional)0, (NSBundle)v2, v6, *(Swift::String *)&v3)._countAndFlagsBits;

  return countAndFlagsBits;
}

void sub_100052F08(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100052F3C()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  if (qword_1001BEF68 != -1)
    swift_once(&qword_1001BEF68, sub_100173D84);
  v0 = (id)qword_1001DA1E8;
  v5._countAndFlagsBits = 0xD00000000000003BLL;
  v5._object = (void *)0x8000000100186A40;
  v1._countAndFlagsBits = 0x7469706963657250;
  v1._object = (void *)0xED00006E6F697461;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

void sub_100053218(char a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AttributedString.CharacterView(0);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_100053288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for DataDenseTableView(0);
  type metadata accessor for RainInlineContentViewModel(0);
  ((void (*)(void))AttributedString.characters.getter)();
  sub_100016878(&qword_1001C08A0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))String.init<A>(_:))(v1, v0, v2);
}

void sub_100053444()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v0, "bounds");

}

void sub_1000534B4(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __n128 *v145;
  uint64_t v146;
  __n128 *v147;
  uint64_t v148;
  __n128 *v149;
  __n128 *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  __n128 *v165;
  __n128 *v166;
  __n128 *v167;
  __n128 *v168;
  __n128 *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  __n128 *v192[8];
  uint64_t v193;
  unsigned __int8 v194;
  uint64_t v195;
  unsigned __int8 v196;
  uint64_t v197;
  uint64_t v198;

  v4 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v4);
  v177 = (uint64_t)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for RowView(0);
  v6 = __chkstk_darwin(v176);
  v8 = (__n128 *)((char *)&v151 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __chkstk_darwin(v6);
  v167 = (__n128 *)((char *)&v151 - v10);
  v11 = __chkstk_darwin(v9);
  v166 = (__n128 *)((char *)&v151 - v12);
  v13 = __chkstk_darwin(v11);
  v165 = (__n128 *)((char *)&v151 - v14);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v151 - v16;
  v18 = __chkstk_darwin(v15);
  v164 = (uint64_t)&v151 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (uint64_t *)((char *)&v151 - v21);
  v23 = __chkstk_darwin(v20);
  v173 = (uint64_t)&v151 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (uint64_t *)((char *)&v151 - v26);
  v28 = __chkstk_darwin(v25);
  v172 = (uint64_t)&v151 - v29;
  v30 = __chkstk_darwin(v28);
  v32 = (uint64_t *)((char *)&v151 - v31);
  __chkstk_darwin(v30);
  v171 = (uint64_t)&v151 - v33;
  sub_100053444();
  v35 = v34;
  v37 = static Alignment.center.getter(v36);
  _FrameLayout.init(width:height:alignment:)(&v193, 0, 1, v35, 0, v37, v38);
  v39 = v193;
  v161 = v194;
  v160 = v195;
  v159 = v196;
  v158 = v197;
  v157 = v198;
  v174 = (char *)(a1 + *(int *)(type metadata accessor for DataDenseViewAttributes(0) + 20));
  v40 = *v174;
  sub_100052BA4(*v174);
  v156 = v41;
  v155 = v42;
  sub_100052F08(v40);
  v154 = v43;
  v153 = v44;
  v170 = 0;
  v45 = 0;
  if (!v40)
  {
    v46 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DataDenseTableView(0) + 20));
    v45 = v46[1];
    v170 = *v46;
    swift_bridgeObjectRetain(v45);
  }
  sub_100053218(v40);
  v169 = a2;
  v168 = v8;
  v163 = v17;
  v162 = v39;
  v152 = v47;
  v151 = v48;
  if (v40 == 1)
    v49 = sub_100052720();
  else
    sub_100053218(v40);
  v51 = v49;
  v52 = v50;
  v53 = v177;
  sub_10000F7C4(a1, v177, type metadata accessor for CurrentObservationViewAttributes);
  KeyPath = swift_getKeyPath(&unk_10017CA78);
  v55 = v176;
  v56 = (_QWORD *)((char *)v32 + *(int *)(v176 + 40));
  *v56 = KeyPath;
  v175 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v56, v175, 0);
  v57 = v155;
  *v32 = v156;
  v32[1] = v57;
  v58 = v153;
  v32[2] = v154;
  v32[3] = v58;
  v32[4] = v170;
  v32[5] = v45;
  v59 = v151;
  v32[6] = v152;
  v32[7] = v59;
  v32[8] = v51;
  v32[9] = v52;
  sub_100011868(v53, (uint64_t)v32 + *(int *)(v55 + 36), type metadata accessor for CurrentObservationViewAttributes);
  sub_100011868((uint64_t)v32, v171, type metadata accessor for RowView);
  v60 = v174[1];
  sub_100052BA4(v174[1]);
  v62 = v61;
  v64 = v63;
  sub_100052F08(v60);
  v66 = v65;
  v68 = v67;
  if (v60)
  {
    v69 = 0;
    v70 = 0;
  }
  else
  {
    v71 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DataDenseTableView(0) + 20));
    v69 = *v71;
    v70 = v71[1];
    swift_bridgeObjectRetain(v70);
  }
  sub_100053218(v60);
  v170 = v68;
  v156 = v69;
  v155 = v70;
  v154 = v72;
  v153 = v73;
  v74 = v66;
  v75 = v64;
  v76 = v62;
  if (v60 == 1)
    v77 = sub_100052720();
  else
    sub_100053218(v60);
  v79 = v77;
  v80 = v78;
  v81 = v177;
  sub_10000F7C4(a1, v177, type metadata accessor for CurrentObservationViewAttributes);
  v82 = swift_getKeyPath(&unk_10017CA78);
  v83 = v176;
  v84 = (_QWORD *)((char *)v27 + *(int *)(v176 + 40));
  *v84 = v82;
  swift_storeEnumTagMultiPayload(v84, v175, 0);
  *v27 = v76;
  v27[1] = v75;
  v85 = v170;
  v27[2] = v74;
  v27[3] = v85;
  v86 = v155;
  v27[4] = v156;
  v27[5] = v86;
  v87 = v153;
  v27[6] = v154;
  v27[7] = v87;
  v27[8] = v79;
  v27[9] = v80;
  sub_100011868(v81, (uint64_t)v27 + *(int *)(v83 + 36), type metadata accessor for CurrentObservationViewAttributes);
  sub_100011868((uint64_t)v27, v172, type metadata accessor for RowView);
  v88 = v174[2];
  sub_100052BA4(v174[2]);
  v90 = v89;
  v92 = v91;
  sub_100052F08(v88);
  v94 = v93;
  v96 = v95;
  if (v88)
  {
    v97 = 0;
    v98 = 0;
  }
  else
  {
    v99 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DataDenseTableView(0) + 20));
    v97 = *v99;
    v98 = v99[1];
    swift_bridgeObjectRetain(v98);
  }
  sub_100053218(v88);
  v170 = v97;
  v156 = v98;
  v155 = v100;
  v154 = v101;
  v102 = v96;
  v103 = v92;
  v104 = v90;
  if (v88 == 1)
    v105 = sub_100052720();
  else
    sub_100053218(v88);
  v107 = v105;
  v108 = v106;
  v109 = v177;
  sub_10000F7C4(a1, v177, type metadata accessor for CurrentObservationViewAttributes);
  v110 = swift_getKeyPath(&unk_10017CA78);
  v111 = v176;
  v112 = (_QWORD *)((char *)v22 + *(int *)(v176 + 40));
  *v112 = v110;
  swift_storeEnumTagMultiPayload(v112, v175, 0);
  *v22 = v104;
  v22[1] = v103;
  v22[2] = v94;
  v22[3] = v102;
  v113 = v156;
  v22[4] = v170;
  v22[5] = v113;
  v114 = v154;
  v22[6] = v155;
  v22[7] = v114;
  v22[8] = v107;
  v22[9] = v108;
  sub_100011868(v109, (uint64_t)v22 + *(int *)(v111 + 36), type metadata accessor for CurrentObservationViewAttributes);
  sub_100011868((uint64_t)v22, v173, type metadata accessor for RowView);
  v115 = v174[3];
  sub_100052BA4(v174[3]);
  v117 = v116;
  v119 = v118;
  sub_100052F08(v115);
  v121 = v120;
  v123 = v122;
  if (v115)
  {
    v124 = 0;
    v125 = 0;
  }
  else
  {
    v126 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DataDenseTableView(0) + 20));
    v124 = *v126;
    v125 = (char *)v126[1];
    swift_bridgeObjectRetain(v125);
  }
  sub_100053218(v115);
  v174 = v125;
  v170 = v127;
  v156 = v128;
  v129 = v119;
  v130 = v117;
  if (v115 == 1)
    v131 = sub_100052720();
  else
    sub_100053218(v115);
  v133 = v131;
  v134 = v132;
  v135 = a1;
  v136 = v177;
  sub_10000F7C4(v135, v177, type metadata accessor for CurrentObservationViewAttributes);
  v137 = swift_getKeyPath(&unk_10017CA78);
  v138 = v176;
  v139 = v163;
  v140 = (_QWORD *)((char *)v163 + *(int *)(v176 + 40));
  *v140 = v137;
  swift_storeEnumTagMultiPayload(v140, v175, 0);
  *v139 = v130;
  v139[1] = v129;
  v139[2] = v121;
  v139[3] = v123;
  v141 = v174;
  v139[4] = v124;
  v139[5] = v141;
  v142 = v156;
  v139[6] = v170;
  v139[7] = v142;
  v139[8] = v133;
  v139[9] = v134;
  sub_100011868(v136, (uint64_t)v139 + *(int *)(v138 + 36), type metadata accessor for CurrentObservationViewAttributes);
  v143 = v164;
  sub_100011868((uint64_t)v139, v164, type metadata accessor for RowView);
  v184 = 0;
  v185 = 1;
  v186 = v162;
  v187 = v161;
  v188 = v160;
  v189 = v159;
  v190 = v158;
  v191 = v157;
  v192[0] = (__n128 *)&v184;
  v144 = v171;
  v145 = v165;
  sub_10000F7C4(v171, (uint64_t)v165, type metadata accessor for RowView);
  v182 = 0;
  v183 = 0;
  v192[1] = v145;
  v192[2] = (__n128 *)&v182;
  v146 = v172;
  v147 = v166;
  sub_10000F7C4(v172, (uint64_t)v166, type metadata accessor for RowView);
  v180 = 0;
  v181 = 0;
  v192[3] = v147;
  v192[4] = (__n128 *)&v180;
  v148 = v173;
  v149 = v167;
  sub_10000F7C4(v173, (uint64_t)v167, type metadata accessor for RowView);
  v178 = 0;
  v179 = 0;
  v192[5] = v149;
  v192[6] = (__n128 *)&v178;
  v150 = v168;
  sub_10000F7C4(v143, (uint64_t)v168, type metadata accessor for RowView);
  v192[7] = v150;
  sub_100077400(v192, v169);
  sub_100011894(v143, type metadata accessor for RowView);
  sub_100011894(v148, type metadata accessor for RowView);
  sub_100011894(v146, type metadata accessor for RowView);
  sub_100011894(v144, type metadata accessor for RowView);
  sub_100011894((uint64_t)v150, type metadata accessor for RowView);
  sub_100011894((uint64_t)v149, type metadata accessor for RowView);
  sub_100011894((uint64_t)v147, type metadata accessor for RowView);
  sub_100011894((uint64_t)v145, type metadata accessor for RowView);
}

void sub_100053ECC(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __n128 *v110;
  uint64_t v111;
  __n128 *v112;
  __n128 *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  __n128 *v128;
  __n128 *v129;
  __n128 *v130;
  __n128 *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  __n128 *v151[6];
  uint64_t v152;
  unsigned __int8 v153;
  uint64_t v154;
  unsigned __int8 v155;
  uint64_t v156;
  uint64_t v157;

  v4 = type metadata accessor for CurrentObservationViewAttributes(0);
  __chkstk_darwin(v4);
  v138 = (uint64_t)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for RowView(0);
  v6 = __chkstk_darwin(v137);
  v8 = (__n128 *)((char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __chkstk_darwin(v6);
  v129 = (__n128 *)((char *)&v114 - v10);
  v11 = __chkstk_darwin(v9);
  v128 = (__n128 *)((char *)&v114 - v12);
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v114 - v14);
  v16 = __chkstk_darwin(v13);
  v127 = (uint64_t)&v114 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (uint64_t *)((char *)&v114 - v19);
  v21 = __chkstk_darwin(v18);
  v136 = (uint64_t)&v114 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (uint64_t *)((char *)&v114 - v24);
  __chkstk_darwin(v23);
  v135 = (uint64_t)&v114 - v26;
  sub_100053444();
  v28 = v27;
  v30 = static Alignment.center.getter(v29);
  _FrameLayout.init(width:height:alignment:)(&v152, 0, 1, v28, 0, v30, v31);
  v32 = v152;
  v33 = v153;
  v124 = v154;
  v123 = v155;
  v122 = v156;
  v121 = v157;
  v134 = (char *)(a1 + *(int *)(type metadata accessor for DataDenseViewAttributes(0) + 20));
  v34 = v134[4];
  sub_100052BA4(v134[4]);
  v120 = v35;
  v119 = v36;
  sub_100052F08(v34);
  v118 = v37;
  v117 = v38;
  v132 = 0;
  v39 = 0;
  if (!v34)
  {
    v40 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DataDenseTableView(0) + 20));
    v39 = v40[1];
    v132 = *v40;
    swift_bridgeObjectRetain(v39);
  }
  sub_100053218(v34);
  v131 = a2;
  v130 = v8;
  v126 = v32;
  v125 = v33;
  v116 = v41;
  v115 = v42;
  if (v34 == 1)
    v43 = sub_100052720();
  else
    sub_100053218(v34);
  v45 = v43;
  v46 = v44;
  v47 = v138;
  sub_10000F7C4(a1, v138, type metadata accessor for CurrentObservationViewAttributes);
  KeyPath = swift_getKeyPath(&unk_10017CA78);
  v49 = v137;
  v50 = (_QWORD *)((char *)v25 + *(int *)(v137 + 40));
  *v50 = KeyPath;
  v133 = sub_100005D40(&qword_1001BF0C8);
  swift_storeEnumTagMultiPayload(v50, v133, 0);
  v51 = v119;
  *v25 = v120;
  v25[1] = v51;
  v52 = v117;
  v25[2] = v118;
  v25[3] = v52;
  v25[4] = v132;
  v25[5] = v39;
  v53 = v115;
  v25[6] = v116;
  v25[7] = v53;
  v25[8] = v45;
  v25[9] = v46;
  sub_100011868(v47, (uint64_t)v25 + *(int *)(v49 + 36), type metadata accessor for CurrentObservationViewAttributes);
  sub_100011868((uint64_t)v25, v135, type metadata accessor for RowView);
  v54 = v134[5];
  sub_100052BA4(v134[5]);
  v56 = v55;
  v58 = v57;
  sub_100052F08(v54);
  v60 = v59;
  v62 = v61;
  if (v54)
  {
    v63 = 0;
    v64 = 0;
  }
  else
  {
    v65 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DataDenseTableView(0) + 20));
    v63 = *v65;
    v64 = v65[1];
    swift_bridgeObjectRetain(v64);
  }
  sub_100053218(v54);
  v132 = v62;
  v120 = v63;
  v119 = v64;
  v118 = v66;
  v117 = v67;
  v68 = v58;
  v69 = v56;
  if (v54 == 1)
    v70 = sub_100052720();
  else
    sub_100053218(v54);
  v72 = v70;
  v73 = v71;
  v74 = v138;
  sub_10000F7C4(a1, v138, type metadata accessor for CurrentObservationViewAttributes);
  v75 = swift_getKeyPath(&unk_10017CA78);
  v76 = v137;
  v77 = (_QWORD *)((char *)v20 + *(int *)(v137 + 40));
  *v77 = v75;
  swift_storeEnumTagMultiPayload(v77, v133, 0);
  *v20 = v69;
  v20[1] = v68;
  v78 = v132;
  v20[2] = v60;
  v20[3] = v78;
  v79 = v119;
  v20[4] = v120;
  v20[5] = v79;
  v80 = v117;
  v20[6] = v118;
  v20[7] = v80;
  v20[8] = v72;
  v20[9] = v73;
  sub_100011868(v74, (uint64_t)v20 + *(int *)(v76 + 36), type metadata accessor for CurrentObservationViewAttributes);
  sub_100011868((uint64_t)v20, v136, type metadata accessor for RowView);
  v81 = v134[6];
  sub_100052BA4(v134[6]);
  v83 = v82;
  v85 = v84;
  sub_100052F08(v81);
  v87 = v86;
  v89 = v88;
  if (v81)
  {
    v90 = 0;
    v91 = 0;
  }
  else
  {
    v92 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DataDenseTableView(0) + 20));
    v90 = *v92;
    v91 = (char *)v92[1];
    swift_bridgeObjectRetain(v91);
  }
  sub_100053218(v81);
  v134 = v91;
  v132 = v93;
  v120 = v94;
  v95 = v85;
  v96 = v83;
  if (v81 == 1)
    v97 = sub_100052720();
  else
    sub_100053218(v81);
  v99 = v97;
  v100 = v98;
  v101 = a1;
  v102 = v138;
  sub_10000F7C4(v101, v138, type metadata accessor for CurrentObservationViewAttributes);
  v103 = swift_getKeyPath(&unk_10017CA78);
  v104 = v137;
  v105 = (_QWORD *)((char *)v15 + *(int *)(v137 + 40));
  *v105 = v103;
  swift_storeEnumTagMultiPayload(v105, v133, 0);
  *v15 = v96;
  v15[1] = v95;
  v15[2] = v87;
  v15[3] = v89;
  v106 = v134;
  v15[4] = v90;
  v15[5] = v106;
  v107 = v120;
  v15[6] = v132;
  v15[7] = v107;
  v15[8] = v99;
  v15[9] = v100;
  sub_100011868(v102, (uint64_t)v15 + *(int *)(v104 + 36), type metadata accessor for CurrentObservationViewAttributes);
  v108 = v127;
  sub_100011868((uint64_t)v15, v127, type metadata accessor for RowView);
  v143 = 0;
  v144 = 1;
  v145 = v126;
  v146 = v125;
  v147 = v124;
  v148 = v123;
  v149 = v122;
  v150 = v121;
  v151[0] = (__n128 *)&v143;
  v109 = v135;
  v110 = v128;
  sub_10000F7C4(v135, (uint64_t)v128, type metadata accessor for RowView);
  v141 = 0;
  v142 = 0;
  v151[1] = v110;
  v151[2] = (__n128 *)&v141;
  v111 = v136;
  v112 = v129;
  sub_10000F7C4(v136, (uint64_t)v129, type metadata accessor for RowView);
  v139 = 0;
  v140 = 0;
  v151[3] = v112;
  v151[4] = (__n128 *)&v139;
  v113 = v130;
  sub_10000F7C4(v108, (uint64_t)v130, type metadata accessor for RowView);
  v151[5] = v113;
  sub_100077468(v151, v131);
  sub_100011894(v108, type metadata accessor for RowView);
  sub_100011894(v111, type metadata accessor for RowView);
  sub_100011894(v109, type metadata accessor for RowView);
  sub_100011894((uint64_t)v113, type metadata accessor for RowView);
  sub_100011894((uint64_t)v112, type metadata accessor for RowView);
  sub_100011894((uint64_t)v110, type metadata accessor for RowView);
}

void sub_1000546B0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;

  v52 = a2;
  v3 = type metadata accessor for ColumnView(0);
  v4 = __chkstk_darwin(v3);
  v54 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v53 = (uint64_t)&v47 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v47 - v9);
  v11 = __chkstk_darwin(v8);
  v51 = (uint64_t)&v47 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v47 - v14);
  __chkstk_darwin(v13);
  v17 = (char *)&v47 - v16;
  v18 = a1 + *(int *)(type metadata accessor for DataDenseViewAttributes(0) + 20);
  v19 = *(unsigned __int8 *)(v18 + 7);
  sub_100052BA4(*(_BYTE *)(v18 + 7));
  v48 = v21;
  v49 = v20;
  v22 = 0;
  v23 = 0;
  if (!v19)
  {
    v24 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DataDenseTableView(0) + 20));
    v22 = *v24;
    v23 = v24[1];
    swift_bridgeObjectRetain(v23);
  }
  sub_100053218(v19);
  v26 = v25;
  v28 = v27;
  v50 = v3;
  sub_10000F7C4(a1, (uint64_t)v15 + *(int *)(v3 + 28), type metadata accessor for CurrentObservationViewAttributes);
  v29 = v48;
  *v15 = v49;
  v15[1] = v29;
  v15[2] = v22;
  v15[3] = v23;
  v15[4] = v26;
  v15[5] = v28;
  sub_100011868((uint64_t)v15, (uint64_t)v17, type metadata accessor for ColumnView);
  v30 = *(unsigned __int8 *)(v18 + 8);
  sub_100052BA4(*(_BYTE *)(v18 + 8));
  v32 = v31;
  v34 = v33;
  if (v30)
  {
    v35 = 0;
    v36 = 0;
  }
  else
  {
    v37 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DataDenseTableView(0) + 20));
    v35 = *v37;
    v36 = v37[1];
    swift_bridgeObjectRetain(v36);
  }
  sub_100053218(v30);
  v39 = v38;
  v41 = v40;
  sub_10000F7C4(a1, (uint64_t)v10 + *(int *)(v50 + 28), type metadata accessor for CurrentObservationViewAttributes);
  *v10 = v32;
  v10[1] = v34;
  v10[2] = v35;
  v10[3] = v36;
  v10[4] = v39;
  v10[5] = v41;
  v42 = v51;
  sub_100011868((uint64_t)v10, v51, type metadata accessor for ColumnView);
  v43 = v53;
  sub_10000F7C4((uint64_t)v17, v53, type metadata accessor for ColumnView);
  v44 = v54;
  sub_10000F7C4(v42, v54, type metadata accessor for ColumnView);
  v45 = v52;
  *v52 = 0x4000000000000000;
  *((_BYTE *)v45 + 8) = 0;
  v46 = sub_100005D40(&qword_1001C08C0);
  sub_10000F7C4(v43, (uint64_t)v45 + *(int *)(v46 + 48), type metadata accessor for ColumnView);
  sub_10000F7C4(v44, (uint64_t)v45 + *(int *)(v46 + 64), type metadata accessor for ColumnView);
  sub_100011894(v42, type metadata accessor for ColumnView);
  sub_100011894((uint64_t)v17, type metadata accessor for ColumnView);
  sub_100011894(v44, type metadata accessor for ColumnView);
  sub_100011894(v43, type metadata accessor for ColumnView);
}

void sub_1000549A0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v27 = a2;
  v26 = type metadata accessor for ColumnView(0);
  v3 = __chkstk_darwin(v26);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (uint64_t *)((char *)&v26 - v7);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = a1 + *(int *)(type metadata accessor for DataDenseViewAttributes(0) + 20);
  v12 = *(unsigned __int8 *)(v11 + 9);
  sub_100052BA4(*(_BYTE *)(v11 + 9));
  v14 = v13;
  v16 = v15;
  v17 = 0;
  v18 = 0;
  if (!v12)
  {
    v19 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DataDenseTableView(0) + 20));
    v17 = *v19;
    v18 = v19[1];
    swift_bridgeObjectRetain(v18);
  }
  sub_100053218(v12);
  v21 = v20;
  v23 = v22;
  sub_10000F7C4(a1, (uint64_t)v8 + *(int *)(v26 + 28), type metadata accessor for CurrentObservationViewAttributes);
  *v8 = v14;
  v8[1] = v16;
  v8[2] = v17;
  v8[3] = v18;
  v8[4] = v21;
  v8[5] = v23;
  sub_100011868((uint64_t)v8, (uint64_t)v10, type metadata accessor for ColumnView);
  sub_10000F7C4((uint64_t)v10, (uint64_t)v5, type metadata accessor for ColumnView);
  v24 = v27;
  *v27 = 0;
  *((_BYTE *)v24 + 8) = 0;
  v25 = sub_100005D40(&qword_1001C0890);
  sub_10000F7C4((uint64_t)v5, (uint64_t)v24 + *(int *)(v25 + 48), type metadata accessor for ColumnView);
  sub_100011894((uint64_t)v10, type metadata accessor for ColumnView);
  sub_100011894((uint64_t)v5, type metadata accessor for ColumnView);
}

uint64_t type metadata accessor for ColumnView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C0920, (uint64_t)&nominal type descriptor for ColumnView);
}

unint64_t sub_100054B64()
{
  unint64_t result;

  result = qword_1001C0898;
  if (!qword_1001C0898)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1001C0898);
  }
  return result;
}

void sub_100054BA0(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  unint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;

  v2 = v1;
  v44 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Font.Context(0);
  v36 = *(_QWORD *)(v6 - 8);
  v37 = v6;
  __chkstk_darwin(v6);
  v8 = (_DWORD *)((char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100005D40(&qword_1001C0A30);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100005D40(&qword_1001C0A38);
  __chkstk_darwin(v38);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100005D40(&qword_1001C0A40);
  v41 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100005D40(&qword_1001C0A48);
  v16 = __chkstk_darwin(v40);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v35 - v20;
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v19);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v22 = sub_100005D40(&qword_1001C0A50);
  sub_100054F60(v1, (uint64_t)&v11[*(int *)(v22 + 44)]);
  v23 = (char *)v1 + *(int *)(type metadata accessor for RowView(0) + 36);
  v24 = *(_QWORD *)&v23[*(int *)(type metadata accessor for CurrentObservationViewAttributes(0) + 52)];
  sub_1000C5030(v8);
  Font.capHeight(in:)(v8, v24);
  v25 = (*(uint64_t (**)(_DWORD *, uint64_t))(v36 + 8))(v8, v37);
  static Alignment.center.getter(v25);
  sub_100077AD4();
  sub_100016904((uint64_t)v11, &qword_1001C0A30);
  static AccessibilityChildBehavior.combine.getter();
  v26 = sub_10005EAD8();
  v27 = v38;
  View.accessibilityElement(children:)(v5, v38, v26);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v5, v43);
  sub_100016904((uint64_t)v13, &qword_1001C0A38);
  v28 = v1[3];
  v46 = v1[2];
  v47 = v28;
  v45[0] = v27;
  v45[1] = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v45, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v30 = sub_10001692C();
  v31 = v39;
  View.accessibilityLabel<A>(_:)(&v46, v39, &type metadata for String, OpaqueTypeConformance2, v30);
  v32.n128_f64[0] = (*(double (**)(char *, uint64_t))(v41 + 8))(v15, v31);
  v33 = v2[9];
  v46 = v2[8];
  v47 = v33;
  v34 = v40;
  ModifiedContent<>.accessibilityValue<A>(_:)(&v46, v40, &type metadata for String, v30, v32);
  sub_100016904((uint64_t)v18, &qword_1001C0A48);
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v34);
  sub_100016904((uint64_t)v21, &qword_1001C0A48);
}

void sub_100054F60(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a2;
  v3 = type metadata accessor for ValueTextView(0);
  v4 = __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v28 = (uint64_t)&v27 - v7;
  v8 = type metadata accessor for ConditionTextView(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v27 - v12);
  v14 = *a1;
  v29 = a1[1];
  v15 = v29;
  v16 = (uint64_t)a1 + *(int *)(type metadata accessor for RowView(0) + 36);
  sub_10000F7C4(v16, (uint64_t)v13 + *(int *)(v8 + 20), type metadata accessor for CurrentObservationViewAttributes);
  *v13 = v14;
  v13[1] = v15;
  v17 = a1[6];
  v27 = a1[7];
  v18 = v27;
  v20 = a1[4];
  v19 = a1[5];
  sub_10000F7C4(v16, (uint64_t)v6 + *(int *)(v3 + 24), type metadata accessor for CurrentObservationViewAttributes);
  *v6 = v17;
  v6[1] = v18;
  v6[2] = v20;
  v6[3] = v19;
  v21 = (_QWORD *)((char *)v6 + *(int *)(v3 + 28));
  *v21 = swift_getKeyPath(&unk_10017CB88);
  v22 = sub_100005D40(&qword_1001BF490);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  v23 = v28;
  sub_100011868((uint64_t)v6, v28, type metadata accessor for ValueTextView);
  sub_10000F7C4((uint64_t)v13, (uint64_t)v11, type metadata accessor for ConditionTextView);
  sub_10000F7C4(v23, (uint64_t)v6, type metadata accessor for ValueTextView);
  v24 = v30;
  sub_10000F7C4((uint64_t)v11, v30, type metadata accessor for ConditionTextView);
  v25 = sub_100005D40(&qword_1001C0A68);
  v26 = v24 + *(int *)(v25 + 48);
  *(_QWORD *)v26 = 0;
  *(_BYTE *)(v26 + 8) = 1;
  sub_10000F7C4((uint64_t)v6, v24 + *(int *)(v25 + 64), type metadata accessor for ValueTextView);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v27);
  sub_100011894(v23, type metadata accessor for ValueTextView);
  sub_100011894((uint64_t)v13, type metadata accessor for ConditionTextView);
  sub_100011894((uint64_t)v6, type metadata accessor for ValueTextView);
  sub_100011894((uint64_t)v11, type metadata accessor for ConditionTextView);
}

void sub_1000551C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_100005D40(&qword_1001C0A10);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v4 = static HorizontalAlignment.leading.getter(v2);
  *((_QWORD *)v4 + 1) = 0xBFF0000000000000;
  v4[16] = 0;
  v5 = sub_100005D40(&qword_1001C0A18);
  sub_100055298(v0, (uint64_t)&v4[*(int *)(v5 + 44)]);
  sub_100016A54(&qword_1001C0A20, &qword_1001C0A10);
  View.accessibilityRespondsToUserInteraction(_:)(0, v1, v6);
  sub_100016904((uint64_t)v4, &qword_1001C0A10);
}

void sub_100055298(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a2;
  v3 = type metadata accessor for ValueTextView(0);
  v4 = __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v28 = (uint64_t)&v26 - v7;
  v8 = type metadata accessor for ConditionTextView(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v26 - v12);
  v15 = *a1;
  v27 = a1[1];
  v14 = v27;
  v16 = (uint64_t)a1 + *(int *)(type metadata accessor for ColumnView(0) + 28);
  sub_10000F7C4(v16, (uint64_t)v13 + *(int *)(v8 + 20), type metadata accessor for CurrentObservationViewAttributes);
  *v13 = v15;
  v13[1] = v14;
  v18 = a1[4];
  v26 = a1[5];
  v17 = v26;
  v20 = a1[2];
  v19 = a1[3];
  sub_10000F7C4(v16, (uint64_t)v6 + *(int *)(v3 + 24), type metadata accessor for CurrentObservationViewAttributes);
  *v6 = v18;
  v6[1] = v17;
  v6[2] = v20;
  v6[3] = v19;
  v21 = (_QWORD *)((char *)v6 + *(int *)(v3 + 28));
  *v21 = swift_getKeyPath(&unk_10017CB88);
  v22 = sub_100005D40(&qword_1001BF490);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  v23 = v28;
  sub_100011868((uint64_t)v6, v28, type metadata accessor for ValueTextView);
  sub_10000F7C4((uint64_t)v13, (uint64_t)v11, type metadata accessor for ConditionTextView);
  sub_10000F7C4(v23, (uint64_t)v6, type metadata accessor for ValueTextView);
  v24 = v29;
  sub_10000F7C4((uint64_t)v11, v29, type metadata accessor for ConditionTextView);
  v25 = sub_100005D40(&qword_1001C0A28);
  sub_10000F7C4((uint64_t)v6, v24 + *(int *)(v25 + 48), type metadata accessor for ValueTextView);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v26);
  sub_100011894(v23, type metadata accessor for ValueTextView);
  sub_100011894((uint64_t)v13, type metadata accessor for ConditionTextView);
  sub_100011894((uint64_t)v6, type metadata accessor for ValueTextView);
  sub_100011894((uint64_t)v11, type metadata accessor for ConditionTextView);
}

uint64_t sub_1000554E4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  __n128 v57;
  char v58;
  double v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t OpaqueTypeConformance2;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  char *v84;
  uint64_t *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;

  v2 = v1;
  v97 = a1;
  v91 = sub_100005D40(&qword_1001C0BB0);
  __chkstk_darwin(v91);
  v96 = (uint64_t)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100005D40(&qword_1001C0BB8);
  __chkstk_darwin(v95);
  v85 = (uint64_t *)((char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100005D40(&qword_1001C0BC0);
  __chkstk_darwin(v5);
  v94 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorSchemeContrast(0);
  v88 = *(_QWORD *)(v7 - 8);
  v89 = v7;
  v8 = __chkstk_darwin(v7);
  v87 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v86 = (char *)&v83 - v10;
  v11 = sub_100005D40(&qword_1001C0BC8);
  v92 = *(_QWORD *)(v11 - 8);
  v93 = v11;
  __chkstk_darwin(v11);
  v90 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v1;
  v14 = v1[1];
  v98 = v13;
  v99 = v14;
  v15 = sub_10001692C();
  swift_bridgeObjectRetain(v14);
  v16 = Text.init<A>(_:)(&v98, &type metadata for String, v15);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = static Color.white.getter(v16);
  v24 = Text.foregroundColor(_:)(v23, v16, v18, v22, v20);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  swift_release(v23);
  v31 = v28 & 1;
  sub_100016868(v16, v18, v22);
  swift_bridgeObjectRelease(v20);
  v32 = (char *)v2 + *(int *)(type metadata accessor for ValueTextView(0) + 24);
  v83 = type metadata accessor for CurrentObservationViewAttributes(0);
  v33 = *(int *)(v83 + 52);
  v84 = v32;
  v34 = Text.font(_:)(*(_QWORD *)&v32[v33], v24, v26, v31, v30);
  v36 = v35;
  v38 = v37;
  v40 = v39 & 1;
  sub_100016868(v24, v26, v31);
  v41 = swift_bridgeObjectRelease(v30);
  v42 = Text.monospacedDigit()(v34, v36, v40, v38, v41);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v49 = v34;
  v50 = (uint64_t)v2;
  sub_100016868(v49, v36, v40);
  swift_bridgeObjectRelease(v38);
  v51 = v86;
  sub_1000C548C(v86);
  v52 = v87;
  v53 = v88;
  v54 = v89;
  (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v87, enum case for ColorSchemeContrast.increased(_:), v89);
  v55 = v52;
  LOBYTE(v52) = static ColorSchemeContrast.== infix(_:_:)(v51, v52);
  v56 = *(void (**)(char *, uint64_t))(v53 + 8);
  v56(v55, v54);
  v56(v51, v54);
  v57.n128_u64[0] = 1.0;
  if ((v52 & 1) == 0)
    v57.n128_u64[0] = *(_QWORD *)&v84[*(int *)(v83 + 112)];
  v98 = v42;
  v99 = v44;
  v58 = v46 & 1;
  v100 = v46 & 1;
  v101 = v48;
  v102 = v57.n128_u64[0];
  v59 = static Font.Weight.semibold.getter(v57);
  v60 = sub_100005D40(&qword_1001C0BD0);
  v61 = sub_1000673B8();
  v62 = (uint64_t)v90;
  View.fontWeight(_:)(*(_QWORD *)&v59, 0, v60, v61);
  sub_100016868(v42, v44, v58);
  v64 = swift_bridgeObjectRelease(v48);
  v65 = *(_QWORD *)(v50 + 24);
  if (v65)
  {
    v66 = *(_QWORD *)(v50 + 16);
    v67 = static VerticalAlignment.center.getter(v63);
    v68 = (uint64_t)v85;
    *v85 = v67;
    *(_QWORD *)(v68 + 8) = 0x4010000000000000;
    *(_BYTE *)(v68 + 16) = 0;
    v69 = sub_100005D40(&qword_1001C0BE8);
    sub_100055A38(v66, v65, v50, v62, (char *)(v68 + *(int *)(v69 + 44)));
    v70 = v96;
    sub_1000168D8(v68, v96, &qword_1001C0BB8);
    swift_storeEnumTagMultiPayload(v70, v91, 0);
    sub_100016A54(&qword_1001C0BE0, &qword_1001C0BB8);
    v72 = v71;
    v98 = v60;
    v99 = v61;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    v74 = (uint64_t)v94;
    v75 = v70;
    v76 = v93;
    _ConditionalContent<>.init(storage:)(v75, v95, v93, v72, OpaqueTypeConformance2);
    sub_100016904(v68, &qword_1001C0BB8);
    v77 = v92;
  }
  else
  {
    v77 = v92;
    v76 = v93;
    v78 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v92 + 16))(v96, v62, v93, v64);
    swift_storeEnumTagMultiPayload(v78, v91, 1);
    sub_100016A54(&qword_1001C0BE0, &qword_1001C0BB8);
    v80 = v79;
    v98 = v60;
    v99 = v61;
    v81 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    v74 = (uint64_t)v94;
    _ConditionalContent<>.init(storage:)(v78, v95, v76, v80, v81);
  }
  sub_1000168AC(v74, v97, &qword_1001C0BC0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 8))(v62, v76);
}

uint64_t sub_100055A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  void (*v59)(char *, _QWORD *);
  __n128 v60;
  char v61;
  double v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t OpaqueTypeConformance2;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  void (*v81)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  unint64_t v106;

  v98 = a4;
  v85 = a3;
  v101 = a5;
  v89 = (_QWORD *)type metadata accessor for ColorSchemeContrast(0);
  v88 = *(v89 - 1);
  v8 = __chkstk_darwin(v89);
  v87 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v86 = (char *)&v83 - v10;
  v100 = sub_100005D40(&qword_1001C0BC8);
  v93 = *(_QWORD *)(v100 - 8);
  v11 = __chkstk_darwin(v100);
  v99 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v97 = (char *)&v83 - v14;
  __chkstk_darwin(v13);
  v91 = (char *)&v83 - v15;
  v96 = sub_100005D40(&qword_1001C0BF0);
  v94 = *(_QWORD *)(v96 - 8);
  v16 = __chkstk_darwin(v96);
  v95 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v90 = (char *)&v83 - v19;
  __chkstk_darwin(v18);
  v92 = (char *)&v83 - v20;
  swift_bridgeObjectRetain(a2);
  v21 = Image.init(systemName:)(a1, a2);
  v22 = Text.init(_:)(v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = static Color.white.getter(v22);
  v30 = Text.foregroundColor(_:)(v29, v22, v24, v28, v26);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  swift_release(v29);
  LOBYTE(v29) = v34 & 1;
  sub_100016868(v22, v24, v28);
  swift_bridgeObjectRelease(v26);
  v37 = a3 + *(int *)(type metadata accessor for ValueTextView(0) + 24);
  v83 = type metadata accessor for CurrentObservationViewAttributes(0);
  v38 = *(int *)(v83 + 52);
  v84 = v37;
  v39 = Text.font(_:)(*(_QWORD *)(v37 + v38), v30, v32, v34 & 1, v36);
  v41 = v40;
  v43 = v42;
  v45 = v44 & 1;
  sub_100016868(v30, v32, v29);
  v46 = swift_bridgeObjectRelease(v36);
  v47 = Text.monospacedDigit()(v39, v41, v45, v43, v46);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  sub_100016868(v39, v41, v45);
  swift_bridgeObjectRelease(v43);
  v54 = v86;
  sub_1000C548C(v86);
  v55 = v88;
  v56 = v87;
  v57 = v89;
  (*(void (**)(char *, _QWORD, _QWORD *))(v88 + 104))(v87, enum case for ColorSchemeContrast.increased(_:), v89);
  v58 = v56;
  LOBYTE(v56) = static ColorSchemeContrast.== infix(_:_:)(v54, v56);
  v59 = *(void (**)(char *, _QWORD *))(v55 + 8);
  v59(v58, v57);
  v59(v54, v57);
  v60.n128_u64[0] = 1.0;
  if ((v56 & 1) == 0)
    v60.n128_u64[0] = *(_QWORD *)(v84 + *(int *)(v83 + 112));
  v61 = v51 & 1;
  v102 = v47;
  v103 = v49;
  v104 = v51 & 1;
  v105 = v53;
  v106 = v60.n128_u64[0];
  v62 = static Font.Weight.semibold.getter(v60);
  v63 = sub_100005D40(&qword_1001C0BD0);
  v64 = sub_1000673B8();
  v65 = v91;
  View.fontWeight(_:)(*(_QWORD *)&v62, 0, v63, v64);
  sub_100016868(v47, v49, v61);
  swift_bridgeObjectRelease(v53);
  v102 = v63;
  v103 = v64;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v102, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
  v67 = v90;
  v68 = v100;
  View.widgetAccentable(_:)(1, v100, OpaqueTypeConformance2);
  v69 = v93;
  v89 = *(_QWORD **)(v93 + 8);
  ((void (*)(char *, uint64_t))v89)(v65, v68);
  v70 = v94;
  v71 = v92;
  v72 = v96;
  (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v92, v67, v96);
  v73 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
  v74 = v97;
  v73(v97, v98, v68);
  v75 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
  v76 = v95;
  v75(v95, v71, v72);
  v77 = v99;
  v73(v99, (uint64_t)v74, v68);
  v78 = v101;
  v75(v101, v76, v72);
  v79 = sub_100005D40(&qword_1001C0BF8);
  v73(&v78[*(int *)(v79 + 48)], (uint64_t)v77, v68);
  v80 = (void (*)(char *, uint64_t))v89;
  ((void (*)(char *, uint64_t))v89)(v74, v68);
  v81 = *(void (**)(char *, uint64_t))(v70 + 8);
  v81(v71, v72);
  v80(v77, v68);
  return ((uint64_t (*)(char *, uint64_t))v81)(v76, v72);
}

void sub_100055F58(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __n128 v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD v54[2];

  v53 = a1;
  v2 = type metadata accessor for Font.Leading(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1[1];
  v54[0] = *v1;
  v54[1] = v6;
  v7 = sub_10001692C();
  swift_bridgeObjectRetain(v6);
  v8 = Text.init<A>(_:)(v54, &type metadata for String, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Color.white.getter(v8);
  v16 = Text.foregroundColor(_:)(v15, v8, v10, v14, v12);
  v50 = v17;
  v51 = v16;
  LOBYTE(v7) = v18;
  v52 = v19;
  swift_release(v15);
  LOBYTE(v15) = v7 & 1;
  sub_100016868(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  v20 = (char *)v1 + *(int *)(type metadata accessor for ConditionTextView(0) + 20);
  v21 = *(_QWORD *)&v20[*(int *)(type metadata accessor for CurrentObservationViewAttributes(0) + 52)];
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Font.Leading.tight(_:), v2);
  v22 = Font.leading(_:)(v5, v21);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v24 = v50;
  v23 = v51;
  v25 = v7 & 1;
  v26 = v52;
  v27 = Text.font(_:)(v22, v51, v50, v25, v52);
  v29 = v28;
  LOBYTE(v2) = v30;
  v32 = v31;
  swift_release(v22);
  LOBYTE(v22) = v2 & 1;
  sub_100016868(v23, v24, v15);
  v33 = swift_bridgeObjectRelease(v26);
  v34 = Text.monospacedDigit()(v27, v29, v2 & 1, v32, v33);
  v36 = v35;
  v38 = v37;
  v40 = v39 & 1;
  sub_100016868(v27, v29, v22);
  v41 = swift_bridgeObjectRelease(v32);
  v42 = static Font.Weight.semibold.getter(v41);
  v43 = Text.fontWeight(_:)(*(_QWORD *)&v42, 0, v34, v36, v40, v38);
  v45 = v44;
  LOBYTE(v29) = v46;
  v48 = v47;
  sub_100016868(v34, v36, v40);
  swift_bridgeObjectRelease(v38);
  v49 = v53;
  *v53 = v43;
  v49[1] = v45;
  *((_BYTE *)v49 + 16) = v29 & 1;
  v49[3] = v48;
}

uint64_t type metadata accessor for RowView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C09B8, (uint64_t)&nominal type descriptor for RowView);
}

uint64_t *sub_1000561C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, char *, uint64_t);
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  void (*v144)(char *, char *, uint64_t);
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  void (*v184)(char *, char *);
  uint64_t v185;
  int *v186;
  void (*v187)(char *, char *);
  uint64_t v188;
  void (*v189)(char *, char *, uint64_t);
  uint64_t v190;
  char *v191;
  void (*v193)(char *, char *, uint64_t);
  char *v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v32 = *a2;
    *a1 = *a2;
    v33 = v32 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v32);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    v8 = *(int *)(a3 + 28);
    v9 = (char *)a2 + v8;
    v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    v11 = type metadata accessor for UUID(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v12(v10, v9, v11);
    v13 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v14 = v13[5];
    v15 = &v10[v14];
    v16 = &v9[v14];
    v17 = type metadata accessor for Date(0);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v193 = v18;
    v195 = v17;
    v18(&v10[v13[6]], &v9[v13[6]], v17);
    v19 = v13[7];
    v20 = &v10[v19];
    v21 = &v9[v19];
    v22 = sub_100005D40(&qword_1001BF090);
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v23(v20, v21, v22);
    v23(&v10[v13[8]], &v9[v13[8]], v22);
    v24 = v13[9];
    v25 = &v10[v24];
    v26 = &v9[v24];
    v27 = *((_QWORD *)v26 + 1);
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *((_QWORD *)v25 + 1) = v27;
    v28 = v13[10];
    v29 = &v10[v28];
    v30 = &v9[v28];
    swift_bridgeObjectRetain(v27);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v22))
    {
      v31 = sub_100005D40(&qword_1001BF098);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v23(v29, v30, v22);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v22);
    }
    v34 = v13[11];
    v35 = &v10[v34];
    v36 = &v9[v34];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v9[v34], 1, v22))
    {
      v37 = sub_100005D40(&qword_1001BF098);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v23(v35, v36, v22);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v35, 0, 1, v22);
    }
    v38 = v13[12];
    v39 = &v10[v38];
    v40 = &v9[v38];
    v189 = v12;
    v190 = v11;
    v12(&v10[v38], &v9[v38], v11);
    v41 = (int *)type metadata accessor for ConditionViewModel(0);
    v42 = v41[5];
    v43 = &v39[v42];
    v44 = &v40[v42];
    v45 = type metadata accessor for WeatherCondition(0);
    v184 = *(void (**)(char *, char *))(*(_QWORD *)(v45 - 8) + 16);
    v185 = v45;
    v184(v43, v44);
    v46 = v41[6];
    v47 = &v39[v46];
    v48 = &v40[v46];
    v49 = *((_QWORD *)v48 + 1);
    *(_QWORD *)v47 = *(_QWORD *)v48;
    *((_QWORD *)v47 + 1) = v49;
    v50 = v41[7];
    v51 = &v39[v50];
    v52 = &v40[v50];
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *((_QWORD *)v51 + 1) = v53;
    v39[v41[8]] = v40[v41[8]];
    v39[v41[9]] = v40[v41[9]];
    v186 = v41;
    v39[v41[10]] = v40[v41[10]];
    *(_QWORD *)&v10[v13[13]] = *(_QWORD *)&v9[v13[13]];
    v54 = v13[14];
    v55 = &v10[v54];
    v56 = &v9[v54];
    v57 = type metadata accessor for CloudAltitudeKind(0);
    v197 = v9;
    v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v53);
    v58(v55, v56, v57);
    v59 = v13[15];
    v60 = &v10[v59];
    v61 = &v197[v59];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v197[v59], 1, v195))
    {
      v62 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      v193(v60, v61, v195);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v60, 0, 1, v195);
    }
    v63 = v13[16];
    v64 = &v10[v63];
    v65 = &v197[v63];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v197[v63], 1, v195))
    {
      v66 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    }
    else
    {
      v193(v64, v65, v195);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v64, 0, 1, v195);
    }
    v67 = v13[17];
    v68 = &v10[v67];
    v69 = &v197[v67];
    v70 = type metadata accessor for UVIndex(0);
    v187 = *(void (**)(char *, char *))(*(_QWORD *)(v70 - 8) + 16);
    v188 = v70;
    v187(v68, v69);
    v71 = v13[18];
    v72 = &v10[v71];
    v73 = &v197[v71];
    v74 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v72, v73, v74);
    *(_QWORD *)&v10[v13[19]] = *(_QWORD *)&v197[v13[19]];
    v75 = v13[20];
    v76 = &v10[v75];
    v77 = &v197[v75];
    v78 = *((_QWORD *)v77 + 1);
    if (v78)
    {
      *(_QWORD *)v76 = *(_QWORD *)v77;
      *((_QWORD *)v76 + 1) = v78;
      v79 = *((_QWORD *)v77 + 2);
      v80 = *((_QWORD *)v77 + 3);
      v81 = v77[32];
      swift_bridgeObjectRetain(v78);
      sub_100006E58(v79, v80, v81);
      *((_QWORD *)v76 + 2) = v79;
      *((_QWORD *)v76 + 3) = v80;
      v76[32] = v81;
    }
    else
    {
      v82 = *((_OWORD *)v77 + 1);
      *(_OWORD *)v76 = *(_OWORD *)v77;
      *((_OWORD *)v76 + 1) = v82;
      v76[32] = v77[32];
    }
    v83 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
    v84 = v83[5];
    v191 = v10;
    v85 = &v10[v84];
    v86 = &v197[v84];
    v189(&v10[v84], &v197[v84], v190);
    v87 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v193(&v85[v87[5]], &v86[v87[5]], v195);
    v23(&v85[v87[6]], &v86[v87[6]], v22);
    v23(&v85[v87[7]], &v86[v87[7]], v22);
    v88 = v87[8];
    v89 = &v85[v88];
    v90 = &v86[v88];
    v189(&v85[v88], &v86[v88], v190);
    ((void (*)(char *, char *, uint64_t))v184)(&v89[v186[5]], &v90[v186[5]], v185);
    v91 = v186[6];
    v92 = &v89[v91];
    v93 = &v90[v91];
    v94 = *((_QWORD *)v93 + 1);
    *(_QWORD *)v92 = *(_QWORD *)v93;
    *((_QWORD *)v92 + 1) = v94;
    v95 = v186[7];
    v96 = &v89[v95];
    v97 = &v90[v95];
    v98 = *((_QWORD *)v97 + 1);
    *(_QWORD *)v96 = *(_QWORD *)v97;
    *((_QWORD *)v96 + 1) = v98;
    v89[v186[8]] = v90[v186[8]];
    v89[v186[9]] = v90[v186[9]];
    v89[v186[10]] = v90[v186[10]];
    v99 = v87[9];
    v100 = &v85[v99];
    v101 = &v86[v99];
    v102 = type metadata accessor for Precipitation(0);
    v103 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 16);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v98);
    v103(v100, v101, v102);
    *(_QWORD *)&v85[v87[10]] = *(_QWORD *)&v86[v87[10]];
    v104 = v87[11];
    v105 = &v85[v104];
    v106 = &v86[v104];
    v107 = *((_QWORD *)v106 + 1);
    *(_QWORD *)v105 = *(_QWORD *)v106;
    *((_QWORD *)v105 + 1) = v107;
    v108 = v87[12];
    v109 = &v85[v108];
    v110 = &v86[v108];
    v111 = *((_QWORD *)v110 + 1);
    *(_QWORD *)v109 = *(_QWORD *)v110;
    *((_QWORD *)v109 + 1) = v111;
    v112 = v87[13];
    v113 = &v85[v112];
    v114 = &v86[v112];
    v115 = *((_QWORD *)v114 + 1);
    *(_QWORD *)v113 = *(_QWORD *)v114;
    *((_QWORD *)v113 + 1) = v115;
    v116 = v87[14];
    v117 = &v85[v116];
    v118 = &v86[v116];
    v119 = *((_QWORD *)v118 + 1);
    *(_QWORD *)v117 = *(_QWORD *)v118;
    *((_QWORD *)v117 + 1) = v119;
    v120 = v87[15];
    v194 = &v86[v120];
    v196 = &v85[v120];
    v121 = type metadata accessor for TemperatureScaleConfiguration(0);
    v122 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 16);
    swift_bridgeObjectRetain(v107);
    swift_bridgeObjectRetain(v111);
    swift_bridgeObjectRetain(v115);
    swift_bridgeObjectRetain(v119);
    v122(v196, v194, v121);
    v123 = v87[16];
    v124 = &v85[v123];
    v125 = &v86[v123];
    v126 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v125, 1, v126))
    {
      v127 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v124, v125, v126);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v124, 0, 1, v126);
    }
    v128 = v87[17];
    v129 = &v85[v128];
    v130 = &v86[v128];
    v131 = type metadata accessor for MoonEvents(0);
    v132 = v197;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v130, 1, v131))
    {
      v133 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v129, 0, 1, v131);
    }
    ((void (*)(char *, char *, uint64_t))v187)(&v85[v87[18]], &v86[v87[18]], v188);
    *(_QWORD *)&v85[v87[19]] = *(_QWORD *)&v86[v87[19]];
    v134 = v83[6];
    v135 = &v191[v134];
    v136 = &v197[v134];
    v137 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v136, 1, (uint64_t)v137))
    {
      v138 = sub_100005D40(&qword_1001BF0C0);
      memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
    }
    else
    {
      v139 = *((_QWORD *)v136 + 1);
      *(_QWORD *)v135 = *(_QWORD *)v136;
      *((_QWORD *)v135 + 1) = v139;
      v140 = v137[5];
      v141 = &v135[v140];
      v142 = &v136[v140];
      v143 = type metadata accessor for AttributedString(0);
      v144 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16);
      swift_bridgeObjectRetain(v139);
      v144(v141, v142, v143);
      v145 = v137[6];
      v146 = &v135[v145];
      v147 = &v136[v145];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v136[v145], 1, v143))
      {
        v148 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
      }
      else
      {
        v144(v146, v147, v143);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v146, 0, 1, v143);
      }
      v149 = v137[7];
      v150 = &v135[v149];
      v151 = &v136[v149];
      v152 = *((_QWORD *)v151 + 1);
      *(_QWORD *)v150 = *(_QWORD *)v151;
      *((_QWORD *)v150 + 1) = v152;
      swift_bridgeObjectRetain(v152);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v135, 0, 1, (uint64_t)v137);
      v132 = v197;
    }
    v153 = v83[7];
    v154 = &v191[v153];
    v155 = &v132[v153];
    v156 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v156 - 8) + 16))(v154, v155, v156);
    v157 = v83[8];
    v158 = &v191[v157];
    v159 = &v132[v157];
    v160 = *((_QWORD *)v159 + 1);
    *(_QWORD *)v158 = *(_QWORD *)v159;
    *((_QWORD *)v158 + 1) = v160;
    v191[v83[9]] = v132[v83[9]];
    v191[v83[10]] = v132[v83[10]];
    v161 = v83[11];
    v162 = *(_QWORD *)&v132[v161];
    *(_QWORD *)&v191[v161] = v162;
    v163 = v83[12];
    v164 = &v191[v163];
    v165 = &v132[v163];
    v166 = *((_QWORD *)v165 + 1);
    *(_QWORD *)v164 = *(_QWORD *)v165;
    *((_QWORD *)v164 + 1) = v166;
    v167 = v83[13];
    v168 = *(_QWORD *)&v132[v167];
    *(_QWORD *)&v191[v167] = v168;
    v169 = v83[14];
    v170 = *(_QWORD *)&v132[v169];
    *(_QWORD *)&v191[v169] = v170;
    v171 = v83[15];
    v172 = *(_QWORD *)&v132[v171];
    *(_QWORD *)&v191[v171] = v172;
    v173 = v83[16];
    v198 = *(_QWORD *)&v132[v173];
    *(_QWORD *)&v191[v173] = v198;
    v191[v83[17]] = v132[v83[17]];
    v174 = v83[18];
    v175 = v132;
    v176 = *(_QWORD *)&v132[v174];
    *(_QWORD *)&v191[v174] = v176;
    v177 = v83[19];
    v178 = *(_QWORD *)&v175[v177];
    *(_QWORD *)&v191[v177] = v178;
    *(_QWORD *)&v191[v83[20]] = *(_QWORD *)&v175[v83[20]];
    v191[v83[21]] = v175[v83[21]];
    v191[v83[22]] = v175[v83[22]];
    v191[v83[23]] = v175[v83[23]];
    v191[v83[24]] = v175[v83[24]];
    v179 = v83[25];
    v180 = &v191[v179];
    v181 = &v175[v179];
    v182 = *((_QWORD *)v181 + 1);
    *(_QWORD *)v180 = *(_QWORD *)v181;
    *((_QWORD *)v180 + 1) = v182;
    v191[v83[26]] = v175[v83[26]];
    *(_QWORD *)&v191[v83[27]] = *(_QWORD *)&v175[v83[27]];
    *(_QWORD *)&v191[v83[28]] = *(_QWORD *)&v175[v83[28]];
    swift_bridgeObjectRetain(v160);
    swift_retain(v162);
    swift_bridgeObjectRetain(v166);
    swift_retain(v168);
    swift_retain(v170);
    swift_retain(v172);
    swift_retain(v198);
    swift_retain(v176);
    swift_retain(v178);
    swift_bridgeObjectRetain(v182);
    return a1;
  }
  return (uint64_t *)v33;
}

double sub_100056C74(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  int *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int *v30;
  char *v31;
  uint64_t v32;
  int *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  double result;
  void (*v52)(char *);
  uint64_t v53;
  void (*v54)(char *);
  uint64_t v55;
  void (*v56)(char *, uint64_t);

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = &v4[v7[5]];
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(&v4[v7[6]], v9);
  v11 = &v4[v7[7]];
  v12 = sub_100005D40(&qword_1001BF090);
  v13 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(&v4[v7[8]], v12);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v7[9] + 8]);
  v14 = (uint64_t)&v4[v7[10]];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v14, 1, v12))
    v13((char *)v14, v12);
  v15 = (uint64_t)&v4[v7[11]];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v15, 1, v12))
    v13((char *)v15, v12);
  v16 = &v4[v7[12]];
  v56 = v6;
  v6(v16, v5);
  v17 = (int *)type metadata accessor for ConditionViewModel(0);
  v18 = &v16[v17[5]];
  v19 = type metadata accessor for WeatherCondition(0);
  v52 = *(void (**)(char *))(*(_QWORD *)(v19 - 8) + 8);
  v53 = v19;
  v52(v18);
  swift_bridgeObjectRelease(*(_QWORD *)&v16[v17[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v16[v17[7] + 8]);
  v20 = &v4[v7[14]];
  v21 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t)&v4[v7[15]];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v22, 1, v9))
    v10((char *)v22, v9);
  v23 = (uint64_t)&v4[v7[16]];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v23, 1, v9))
    v10((char *)v23, v9);
  v24 = &v4[v7[17]];
  v25 = type metadata accessor for UVIndex(0);
  v54 = *(void (**)(char *))(*(_QWORD *)(v25 - 8) + 8);
  v55 = v25;
  v54(v24);
  v26 = &v4[v7[18]];
  v27 = type metadata accessor for Wind(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = &v4[v7[20]];
  v29 = *((_QWORD *)v28 + 1);
  if (v29)
  {
    swift_bridgeObjectRelease(v29);
    sub_100007458(*((_QWORD *)v28 + 2), *((_QWORD *)v28 + 3), v28[32]);
  }
  v30 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v31 = &v4[v30[5]];
  v56(v31, v5);
  v32 = v5;
  v33 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v10(&v31[v33[5]], v9);
  v13(&v31[v33[6]], v12);
  v13(&v31[v33[7]], v12);
  v34 = &v31[v33[8]];
  v56(v34, v32);
  ((void (*)(char *, uint64_t))v52)(&v34[v17[5]], v53);
  swift_bridgeObjectRelease(*(_QWORD *)&v34[v17[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v34[v17[7] + 8]);
  v35 = &v31[v33[9]];
  v36 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
  swift_bridgeObjectRelease(*(_QWORD *)&v31[v33[11] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v31[v33[12] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v31[v33[13] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v31[v33[14] + 8]);
  v37 = &v31[v33[15]];
  v38 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
  v39 = (uint64_t)&v31[v33[16]];
  v40 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v39, 1, v40))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
  v41 = (uint64_t)&v31[v33[17]];
  v42 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v41, 1, v42))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
  ((void (*)(char *, uint64_t))v54)(&v31[v33[18]], v55);
  v43 = (uint64_t)&v4[v30[6]];
  v44 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v43, 1, (uint64_t)v44))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v43 + 8));
    v45 = v43 + v44[5];
    v46 = type metadata accessor for AttributedString(0);
    v47 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8);
    v47(v45, v46);
    v48 = v43 + v44[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v48, 1, v46))
      v47(v48, v46);
    swift_bridgeObjectRelease(*(_QWORD *)(v43 + v44[7] + 8));
  }
  v49 = &v4[v30[7]];
  v50 = type metadata accessor for Location(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v30[8] + 8]);
  swift_release(*(_QWORD *)&v4[v30[11]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v30[12] + 8]);
  swift_release(*(_QWORD *)&v4[v30[13]]);
  swift_release(*(_QWORD *)&v4[v30[14]]);
  swift_release(*(_QWORD *)&v4[v30[15]]);
  swift_release(*(_QWORD *)&v4[v30[16]]);
  swift_release(*(_QWORD *)&v4[v30[18]]);
  swift_release(*(_QWORD *)&v4[v30[19]]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)&v4[v30[25] + 8]).n128_u64[0];
  return result;
}

_QWORD *sub_10005721C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  int *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, char *, uint64_t);
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t);
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  void (*v180)(char *, char *);
  uint64_t v181;
  int *v182;
  void (*v183)(char *, char *);
  uint64_t v184;
  void (*v185)(char *, char *, uint64_t);
  uint64_t v186;
  char *v187;
  void (*v189)(char *, char *, uint64_t);
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a2 + v6;
  v8 = (char *)a1 + v6;
  a1[4] = a2[4];
  a1[5] = v5;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v8, v7, v9);
  v11 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v12 = v11[5];
  v13 = &v8[v12];
  v14 = &v7[v12];
  v15 = type metadata accessor for Date(0);
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v189 = v16;
  v191 = v15;
  v16(&v8[v11[6]], &v7[v11[6]], v15);
  v17 = v11[7];
  v18 = &v8[v17];
  v19 = &v7[v17];
  v20 = sub_100005D40(&qword_1001BF090);
  v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  v21(v18, v19, v20);
  v21(&v8[v11[8]], &v7[v11[8]], v20);
  v22 = v11[9];
  v23 = &v8[v22];
  v24 = &v7[v22];
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = v25;
  v26 = v11[10];
  v27 = &v8[v26];
  v28 = &v7[v26];
  swift_bridgeObjectRetain(v25);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v28, 1, v20))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v21(v27, v28, v20);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v20);
  }
  v30 = v11[11];
  v31 = &v8[v30];
  v32 = &v7[v30];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v7[v30], 1, v20))
  {
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v21(v31, v32, v20);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v20);
  }
  v34 = v11[12];
  v35 = &v8[v34];
  v36 = &v7[v34];
  v185 = v10;
  v186 = v9;
  v10(&v8[v34], &v7[v34], v9);
  v37 = (int *)type metadata accessor for ConditionViewModel(0);
  v38 = v37[5];
  v39 = &v35[v38];
  v193 = v7;
  v40 = &v36[v38];
  v41 = type metadata accessor for WeatherCondition(0);
  v180 = *(void (**)(char *, char *))(*(_QWORD *)(v41 - 8) + 16);
  v181 = v41;
  v180(v39, v40);
  v42 = v37[6];
  v43 = &v35[v42];
  v44 = &v36[v42];
  v45 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = v45;
  v46 = v37[7];
  v47 = &v35[v46];
  v48 = &v36[v46];
  v49 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *((_QWORD *)v47 + 1) = v49;
  v35[v37[8]] = v36[v37[8]];
  v35[v37[9]] = v36[v37[9]];
  v182 = v37;
  v35[v37[10]] = v36[v37[10]];
  *(_QWORD *)&v8[v11[13]] = *(_QWORD *)&v7[v11[13]];
  v50 = v11[14];
  v51 = &v8[v50];
  v52 = &v7[v50];
  v53 = type metadata accessor for CloudAltitudeKind(0);
  v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v49);
  v54(v51, v52, v53);
  v55 = v11[15];
  v56 = &v8[v55];
  v57 = &v193[v55];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v193[v55], 1, v191))
  {
    v58 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v189(v56, v57, v191);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v191);
  }
  v59 = v11[16];
  v60 = &v8[v59];
  v61 = &v193[v59];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v193[v59], 1, v191))
  {
    v62 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    v189(v60, v61, v191);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v60, 0, 1, v191);
  }
  v63 = v11[17];
  v64 = &v8[v63];
  v65 = &v193[v63];
  v66 = type metadata accessor for UVIndex(0);
  v183 = *(void (**)(char *, char *))(*(_QWORD *)(v66 - 8) + 16);
  v184 = v66;
  v183(v64, v65);
  v67 = v11[18];
  v68 = &v8[v67];
  v69 = &v193[v67];
  v70 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
  *(_QWORD *)&v8[v11[19]] = *(_QWORD *)&v193[v11[19]];
  v71 = v11[20];
  v72 = &v8[v71];
  v73 = &v193[v71];
  v74 = *((_QWORD *)v73 + 1);
  if (v74)
  {
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *((_QWORD *)v72 + 1) = v74;
    v75 = *((_QWORD *)v73 + 2);
    v76 = *((_QWORD *)v73 + 3);
    v77 = v73[32];
    swift_bridgeObjectRetain(v74);
    sub_100006E58(v75, v76, v77);
    *((_QWORD *)v72 + 2) = v75;
    *((_QWORD *)v72 + 3) = v76;
    v72[32] = v77;
  }
  else
  {
    v78 = *((_OWORD *)v73 + 1);
    *(_OWORD *)v72 = *(_OWORD *)v73;
    *((_OWORD *)v72 + 1) = v78;
    v72[32] = v73[32];
  }
  v79 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v80 = v79[5];
  v187 = v8;
  v81 = &v8[v80];
  v82 = &v193[v80];
  v185(&v8[v80], &v193[v80], v186);
  v83 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v189(&v81[v83[5]], &v82[v83[5]], v191);
  v21(&v81[v83[6]], &v82[v83[6]], v20);
  v21(&v81[v83[7]], &v82[v83[7]], v20);
  v84 = v83[8];
  v85 = &v81[v84];
  v86 = &v82[v84];
  v185(&v81[v84], &v82[v84], v186);
  ((void (*)(char *, char *, uint64_t))v180)(&v85[v182[5]], &v86[v182[5]], v181);
  v87 = v182[6];
  v88 = &v85[v87];
  v89 = &v86[v87];
  v90 = *((_QWORD *)v89 + 1);
  *(_QWORD *)v88 = *(_QWORD *)v89;
  *((_QWORD *)v88 + 1) = v90;
  v91 = v182[7];
  v92 = &v85[v91];
  v93 = &v86[v91];
  v94 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v92 = *(_QWORD *)v93;
  *((_QWORD *)v92 + 1) = v94;
  v85[v182[8]] = v86[v182[8]];
  v85[v182[9]] = v86[v182[9]];
  v85[v182[10]] = v86[v182[10]];
  v95 = v83[9];
  v96 = &v81[v95];
  v97 = &v82[v95];
  v98 = type metadata accessor for Precipitation(0);
  v99 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v94);
  v99(v96, v97, v98);
  *(_QWORD *)&v81[v83[10]] = *(_QWORD *)&v82[v83[10]];
  v100 = v83[11];
  v101 = &v81[v100];
  v102 = &v82[v100];
  v103 = *((_QWORD *)v102 + 1);
  *(_QWORD *)v101 = *(_QWORD *)v102;
  *((_QWORD *)v101 + 1) = v103;
  v104 = v83[12];
  v105 = &v81[v104];
  v106 = &v82[v104];
  v107 = *((_QWORD *)v106 + 1);
  *(_QWORD *)v105 = *(_QWORD *)v106;
  *((_QWORD *)v105 + 1) = v107;
  v108 = v83[13];
  v109 = &v81[v108];
  v110 = &v82[v108];
  v111 = *((_QWORD *)v110 + 1);
  *(_QWORD *)v109 = *(_QWORD *)v110;
  *((_QWORD *)v109 + 1) = v111;
  v112 = v83[14];
  v113 = &v81[v112];
  v114 = &v82[v112];
  v115 = *((_QWORD *)v114 + 1);
  *(_QWORD *)v113 = *(_QWORD *)v114;
  *((_QWORD *)v113 + 1) = v115;
  v116 = v83[15];
  v190 = &v82[v116];
  v192 = &v81[v116];
  v117 = type metadata accessor for TemperatureScaleConfiguration(0);
  v118 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 16);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v111);
  swift_bridgeObjectRetain(v115);
  v118(v192, v190, v117);
  v119 = v83[16];
  v120 = &v81[v119];
  v121 = &v82[v119];
  v122 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v121, 1, v122))
  {
    v123 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v120, 0, 1, v122);
  }
  v124 = v83[17];
  v125 = &v81[v124];
  v126 = &v82[v124];
  v127 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v126, 1, v127))
  {
    v128 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 16))(v125, v126, v127);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v125, 0, 1, v127);
  }
  ((void (*)(char *, char *, uint64_t))v183)(&v81[v83[18]], &v82[v83[18]], v184);
  *(_QWORD *)&v81[v83[19]] = *(_QWORD *)&v82[v83[19]];
  v129 = v79[6];
  v130 = &v187[v129];
  v131 = v193;
  v132 = &v193[v129];
  v133 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v132, 1, (uint64_t)v133))
  {
    v134 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v130, v132, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
  }
  else
  {
    v135 = *((_QWORD *)v132 + 1);
    *(_QWORD *)v130 = *(_QWORD *)v132;
    *((_QWORD *)v130 + 1) = v135;
    v136 = v133[5];
    v137 = &v130[v136];
    v138 = &v132[v136];
    v139 = type metadata accessor for AttributedString(0);
    v140 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v139 - 8) + 16);
    swift_bridgeObjectRetain(v135);
    v140(v137, v138, v139);
    v141 = v133[6];
    v142 = &v130[v141];
    v143 = &v132[v141];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v132[v141], 1, v139))
    {
      v144 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
    }
    else
    {
      v140(v142, v143, v139);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v142, 0, 1, v139);
    }
    v145 = v133[7];
    v146 = &v130[v145];
    v147 = &v132[v145];
    v148 = *((_QWORD *)v147 + 1);
    *(_QWORD *)v146 = *(_QWORD *)v147;
    *((_QWORD *)v146 + 1) = v148;
    swift_bridgeObjectRetain(v148);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v130, 0, 1, (uint64_t)v133);
    v131 = v193;
  }
  v149 = v79[7];
  v150 = &v187[v149];
  v151 = &v131[v149];
  v152 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 16))(v150, v151, v152);
  v153 = v79[8];
  v154 = &v187[v153];
  v155 = &v131[v153];
  v156 = *((_QWORD *)v155 + 1);
  *(_QWORD *)v154 = *(_QWORD *)v155;
  *((_QWORD *)v154 + 1) = v156;
  v187[v79[9]] = v131[v79[9]];
  v187[v79[10]] = v131[v79[10]];
  v157 = v79[11];
  v158 = *(_QWORD *)&v131[v157];
  *(_QWORD *)&v187[v157] = v158;
  v159 = v79[12];
  v160 = &v187[v159];
  v161 = &v131[v159];
  v162 = *((_QWORD *)v161 + 1);
  *(_QWORD *)v160 = *(_QWORD *)v161;
  *((_QWORD *)v160 + 1) = v162;
  v163 = v79[13];
  v164 = *(_QWORD *)&v131[v163];
  *(_QWORD *)&v187[v163] = v164;
  v165 = v79[14];
  v166 = v131;
  v167 = *(_QWORD *)&v131[v165];
  *(_QWORD *)&v187[v165] = v167;
  v168 = v79[15];
  v169 = *(_QWORD *)&v131[v168];
  *(_QWORD *)&v187[v168] = v169;
  v170 = v79[16];
  v194 = *(_QWORD *)&v131[v170];
  *(_QWORD *)&v187[v170] = v194;
  v187[v79[17]] = v131[v79[17]];
  v171 = v79[18];
  v172 = *(_QWORD *)&v131[v171];
  *(_QWORD *)&v187[v171] = v172;
  v173 = v79[19];
  v174 = *(_QWORD *)&v131[v173];
  *(_QWORD *)&v187[v173] = v174;
  *(_QWORD *)&v187[v79[20]] = *(_QWORD *)&v166[v79[20]];
  v187[v79[21]] = v166[v79[21]];
  v187[v79[22]] = v166[v79[22]];
  v187[v79[23]] = v166[v79[23]];
  v187[v79[24]] = v166[v79[24]];
  v175 = v79[25];
  v176 = &v187[v175];
  v177 = &v166[v175];
  v178 = *((_QWORD *)v177 + 1);
  *(_QWORD *)v176 = *(_QWORD *)v177;
  *((_QWORD *)v176 + 1) = v178;
  v187[v79[26]] = v166[v79[26]];
  *(_QWORD *)&v187[v79[27]] = *(_QWORD *)&v166[v79[27]];
  *(_QWORD *)&v187[v79[28]] = *(_QWORD *)&v166[v79[28]];
  swift_bridgeObjectRetain(v156);
  swift_retain(v158);
  swift_bridgeObjectRetain(v162);
  swift_retain(v164);
  swift_retain(v167);
  swift_retain(v169);
  swift_retain(v194);
  swift_retain(v172);
  swift_retain(v174);
  swift_bridgeObjectRetain(v178);
  return a1;
}

_QWORD *sub_100057CAC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  int *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  int *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  int *v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  void (*v177)(char *, char *, uint64_t);
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  int v192;
  int v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v245;
  void (*v246)(char *, char *, uint64_t);
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  int *v250;
  void (*v251)(char *, char *);
  uint64_t v252;
  void (*v253)(char *, char *, uint64_t);
  void (*v254)(char *, char *, uint64_t);
  void (*v255)(char *, char *, uint64_t);
  void (*v256)(char *, char *, uint64_t);
  char *v257;
  uint64_t v258;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 28);
  v249 = a1;
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  v256 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24);
  v256(v13, v14, v15);
  v16 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v17 = v16[5];
  v18 = &v13[v17];
  v19 = &v14[v17];
  v20 = type metadata accessor for Date(0);
  v245 = *(_QWORD *)(v20 - 8);
  v21 = *(void (**)(char *, char *, uint64_t))(v245 + 24);
  v21(v18, v19, v20);
  v254 = v21;
  v21(&v13[v16[6]], &v14[v16[6]], v20);
  v22 = v16[7];
  v23 = &v13[v22];
  v24 = &v14[v22];
  v25 = sub_100005D40(&qword_1001BF090);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(void (**)(char *, char *, uint64_t))(v26 + 24);
  v27(v23, v24, v25);
  v253 = v27;
  v27(&v13[v16[8]], &v14[v16[8]], v25);
  v28 = v16[9];
  v29 = &v13[v28];
  v30 = &v14[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  v32 = *((_QWORD *)v29 + 1);
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v16[10];
  v34 = &v13[v33];
  v35 = &v14[v33];
  LODWORD(v27) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v13[v33], 1, v25);
  v36 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 1, v25);
  if ((_DWORD)v27)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v34, v35, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v34, v25);
LABEL_6:
    v37 = sub_100005D40(&qword_1001BF098);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_7;
  }
  v253(v34, v35, v25);
LABEL_7:
  v38 = v16[11];
  v39 = &v13[v38];
  v40 = &v14[v38];
  v41 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v13[v38], 1, v25);
  v42 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v40, 1, v25);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v39, v40, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v39, v25);
LABEL_12:
    v43 = sub_100005D40(&qword_1001BF098);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_13;
  }
  v253(v39, v40, v25);
LABEL_13:
  v44 = v16[12];
  v45 = &v13[v44];
  v46 = &v14[v44];
  v247 = v15;
  v256(&v13[v44], &v14[v44], v15);
  v47 = (int *)type metadata accessor for ConditionViewModel(0);
  v48 = v47[5];
  v49 = &v45[v48];
  v50 = &v46[v48];
  v51 = type metadata accessor for WeatherCondition(0);
  v251 = *(void (**)(char *, char *))(*(_QWORD *)(v51 - 8) + 24);
  v252 = v51;
  v251(v49, v50);
  v52 = v47[6];
  v53 = &v45[v52];
  v54 = &v46[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  v55 = *((_QWORD *)v54 + 1);
  v56 = *((_QWORD *)v53 + 1);
  *((_QWORD *)v53 + 1) = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  v57 = v47[7];
  v58 = &v45[v57];
  v59 = &v46[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v60 = *((_QWORD *)v59 + 1);
  v61 = *((_QWORD *)v58 + 1);
  *((_QWORD *)v58 + 1) = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v61);
  v45[v47[8]] = v46[v47[8]];
  v45[v47[9]] = v46[v47[9]];
  v45[v47[10]] = v46[v47[10]];
  *(_QWORD *)&v13[v16[13]] = *(_QWORD *)&v14[v16[13]];
  v62 = v16[14];
  v63 = &v13[v62];
  v64 = &v14[v62];
  v65 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 24))(v63, v64, v65);
  v66 = v16[15];
  v67 = &v13[v66];
  v68 = &v14[v66];
  LODWORD(v61) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v13[v66], 1, v20);
  v69 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v68, 1, v20);
  v250 = v47;
  if ((_DWORD)v61)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v245 + 16))(v67, v68, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v20);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v245 + 8))(v67, v20);
LABEL_18:
    v70 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_19;
  }
  v254(v67, v68, v20);
LABEL_19:
  v71 = v247;
  v72 = v16[16];
  v73 = &v13[v72];
  v74 = &v14[v72];
  v75 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v13[v72], 1, v20);
  v76 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v74, 1, v20);
  if (v75)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(v245 + 16))(v73, v74, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v73, 0, 1, v20);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v245 + 8))(v73, v20);
LABEL_24:
    v77 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    goto LABEL_25;
  }
  v254(v73, v74, v20);
LABEL_25:
  v78 = v16[17];
  v79 = &v13[v78];
  v80 = &v14[v78];
  v81 = type metadata accessor for UVIndex(0);
  v246 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 24);
  v246(v79, v80, v81);
  v82 = v16[18];
  v83 = &v13[v82];
  v84 = &v14[v82];
  v85 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 24))(v83, v84, v85);
  *(_QWORD *)&v13[v16[19]] = *(_QWORD *)&v14[v16[19]];
  v86 = v16[20];
  v87 = (uint64_t)&v13[v86];
  v88 = &v14[v86];
  v89 = *(_QWORD *)&v13[v86 + 8];
  v90 = *(_QWORD *)&v14[v86 + 8];
  v248 = v81;
  if (v89)
  {
    if (v90)
    {
      *(_QWORD *)v87 = *(_QWORD *)v88;
      v91 = *((_QWORD *)v88 + 1);
      *(_QWORD *)(v87 + 8) = v91;
      swift_bridgeObjectRetain(v91);
      swift_bridgeObjectRelease(v89);
      v92 = *((_QWORD *)v88 + 2);
      v93 = *((_QWORD *)v88 + 3);
      v94 = v88[32];
      sub_100006E58(v92, v93, v94);
      v95 = *(_QWORD *)(v87 + 16);
      v96 = *(_QWORD *)(v87 + 24);
      v97 = *(_BYTE *)(v87 + 32);
      *(_QWORD *)(v87 + 16) = v92;
      *(_QWORD *)(v87 + 24) = v93;
      *(_BYTE *)(v87 + 32) = v94;
      sub_100007458(v95, v96, v97);
    }
    else
    {
      sub_100008EC4(v87);
      v102 = v88[32];
      v103 = *((_OWORD *)v88 + 1);
      *(_OWORD *)v87 = *(_OWORD *)v88;
      *(_OWORD *)(v87 + 16) = v103;
      *(_BYTE *)(v87 + 32) = v102;
    }
  }
  else if (v90)
  {
    *(_QWORD *)v87 = *(_QWORD *)v88;
    v98 = *((_QWORD *)v88 + 1);
    *(_QWORD *)(v87 + 8) = v98;
    v99 = *((_QWORD *)v88 + 2);
    v100 = *((_QWORD *)v88 + 3);
    v101 = v88[32];
    swift_bridgeObjectRetain(v98);
    sub_100006E58(v99, v100, v101);
    *(_QWORD *)(v87 + 16) = v99;
    *(_QWORD *)(v87 + 24) = v100;
    *(_BYTE *)(v87 + 32) = v101;
  }
  else
  {
    v104 = *(_OWORD *)v88;
    v105 = *((_OWORD *)v88 + 1);
    *(_BYTE *)(v87 + 32) = v88[32];
    *(_OWORD *)v87 = v104;
    *(_OWORD *)(v87 + 16) = v105;
  }
  v106 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v107 = v106[5];
  v108 = &v13[v107];
  v109 = &v14[v107];
  v256(&v13[v107], &v14[v107], v71);
  v110 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v254(&v108[v110[5]], &v109[v110[5]], v20);
  v253(&v108[v110[6]], &v109[v110[6]], v25);
  v253(&v108[v110[7]], &v109[v110[7]], v25);
  v111 = v110[8];
  v112 = &v108[v111];
  v113 = &v109[v111];
  v256(&v108[v111], &v109[v111], v71);
  ((void (*)(char *, char *, uint64_t))v251)(&v112[v250[5]], &v113[v250[5]], v252);
  v114 = v250[6];
  v115 = &v112[v114];
  v116 = &v113[v114];
  *(_QWORD *)v115 = *(_QWORD *)v116;
  v117 = *((_QWORD *)v116 + 1);
  v118 = *((_QWORD *)v115 + 1);
  *((_QWORD *)v115 + 1) = v117;
  swift_bridgeObjectRetain(v117);
  swift_bridgeObjectRelease(v118);
  v119 = v250[7];
  v120 = &v112[v119];
  v121 = &v113[v119];
  *(_QWORD *)v120 = *(_QWORD *)v121;
  v122 = *((_QWORD *)v121 + 1);
  v123 = *((_QWORD *)v120 + 1);
  *((_QWORD *)v120 + 1) = v122;
  swift_bridgeObjectRetain(v122);
  swift_bridgeObjectRelease(v123);
  v112[v250[8]] = v113[v250[8]];
  v112[v250[9]] = v113[v250[9]];
  v112[v250[10]] = v113[v250[10]];
  v124 = v110[9];
  v125 = &v108[v124];
  v126 = &v109[v124];
  v127 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 24))(v125, v126, v127);
  *(_QWORD *)&v108[v110[10]] = *(_QWORD *)&v109[v110[10]];
  v128 = v110[11];
  v129 = &v108[v128];
  v130 = &v109[v128];
  *(_QWORD *)v129 = *(_QWORD *)v130;
  v131 = *((_QWORD *)v130 + 1);
  v132 = *((_QWORD *)v129 + 1);
  *((_QWORD *)v129 + 1) = v131;
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRelease(v132);
  v133 = v110[12];
  v134 = &v108[v133];
  v135 = &v109[v133];
  *(_QWORD *)v134 = *(_QWORD *)v135;
  v136 = *((_QWORD *)v135 + 1);
  v137 = *((_QWORD *)v134 + 1);
  *((_QWORD *)v134 + 1) = v136;
  swift_bridgeObjectRetain(v136);
  swift_bridgeObjectRelease(v137);
  v138 = v110[13];
  v139 = &v108[v138];
  v140 = &v109[v138];
  *(_QWORD *)v139 = *(_QWORD *)v140;
  v141 = *((_QWORD *)v140 + 1);
  v142 = *((_QWORD *)v139 + 1);
  *((_QWORD *)v139 + 1) = v141;
  swift_bridgeObjectRetain(v141);
  swift_bridgeObjectRelease(v142);
  v143 = v110[14];
  v144 = &v108[v143];
  v145 = &v109[v143];
  *(_QWORD *)v144 = *(_QWORD *)v145;
  v146 = *((_QWORD *)v145 + 1);
  v147 = *((_QWORD *)v144 + 1);
  *((_QWORD *)v144 + 1) = v146;
  swift_bridgeObjectRetain(v146);
  swift_bridgeObjectRelease(v147);
  v148 = v110[15];
  v149 = &v108[v148];
  v150 = &v109[v148];
  v151 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 24))(v149, v150, v151);
  v152 = v110[16];
  v153 = &v108[v152];
  v154 = &v109[v152];
  v155 = type metadata accessor for SunEvents(0);
  LODWORD(v123) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v153, 1, v155);
  v156 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v154, 1, v155);
  if ((_DWORD)v123)
  {
    if (!v156)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v153, v154, v155);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v153, 0, 1, v155);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v157 = *(_QWORD *)(v155 - 8);
  if (v156)
  {
    (*(void (**)(char *, uint64_t))(v157 + 8))(v153, v155);
LABEL_41:
    v158 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v157 + 24))(v153, v154, v155);
LABEL_42:
  v159 = v110[17];
  v160 = &v108[v159];
  v161 = &v109[v159];
  v162 = type metadata accessor for MoonEvents(0);
  v163 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v160, 1, v162);
  v164 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v161, 1, v162);
  if (v163)
  {
    if (!v164)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v162 - 8) + 16))(v160, v161, v162);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v160, 0, 1, v162);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v165 = *(_QWORD *)(v162 - 8);
  if (v164)
  {
    (*(void (**)(char *, uint64_t))(v165 + 8))(v160, v162);
LABEL_47:
    v166 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(char *, char *, uint64_t))(v165 + 24))(v160, v161, v162);
LABEL_48:
  v246(&v108[v110[18]], &v109[v110[18]], v248);
  *(_QWORD *)&v108[v110[19]] = *(_QWORD *)&v109[v110[19]];
  v167 = v106[6];
  v168 = &v13[v167];
  v169 = &v14[v167];
  v170 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v171 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v168, 1, (uint64_t)v170);
  v172 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v169, 1, (uint64_t)v170);
  if (!v171)
  {
    if (v172)
    {
      sub_100011894((uint64_t)v168, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_54;
    }
    *(_QWORD *)v168 = *(_QWORD *)v169;
    v183 = *((_QWORD *)v169 + 1);
    v184 = *((_QWORD *)v168 + 1);
    *((_QWORD *)v168 + 1) = v183;
    swift_bridgeObjectRetain(v183);
    swift_bridgeObjectRelease(v184);
    v185 = v170[5];
    v186 = &v168[v185];
    v187 = &v169[v185];
    v188 = type metadata accessor for AttributedString(0);
    v258 = *(_QWORD *)(v188 - 8);
    v255 = *(void (**)(char *, char *, uint64_t))(v258 + 24);
    v255(v186, v187, v188);
    v189 = v170[6];
    v190 = &v168[v189];
    v191 = &v169[v189];
    v192 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v168[v189], 1, v188);
    v193 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v191, 1, v188);
    if (v192)
    {
      if (!v193)
      {
        (*(void (**)(char *, char *, uint64_t))(v258 + 16))(v190, v191, v188);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v190, 0, 1, v188);
LABEL_65:
        v199 = v170[7];
        v200 = &v168[v199];
        v201 = &v169[v199];
        *(_QWORD *)v200 = *(_QWORD *)v201;
        v202 = *((_QWORD *)v201 + 1);
        v203 = *((_QWORD *)v200 + 1);
        *((_QWORD *)v200 + 1) = v202;
        swift_bridgeObjectRetain(v202);
        swift_bridgeObjectRelease(v203);
        goto LABEL_66;
      }
    }
    else
    {
      if (!v193)
      {
        v255(v190, v191, v188);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v258 + 8))(v190, v188);
    }
    v198 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
    goto LABEL_65;
  }
  if (v172)
  {
LABEL_54:
    v182 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
    goto LABEL_66;
  }
  *(_QWORD *)v168 = *(_QWORD *)v169;
  v173 = *((_QWORD *)v169 + 1);
  *((_QWORD *)v168 + 1) = v173;
  v174 = v170[5];
  v175 = &v168[v174];
  v257 = &v169[v174];
  v176 = type metadata accessor for AttributedString(0);
  v177 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v176 - 8) + 16);
  swift_bridgeObjectRetain(v173);
  v177(v175, v257, v176);
  v178 = v170[6];
  v179 = &v168[v178];
  v180 = &v169[v178];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v169[v178], 1, v176))
  {
    v181 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v181 - 8) + 64));
  }
  else
  {
    v177(v179, v180, v176);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v179, 0, 1, v176);
  }
  v194 = v170[7];
  v195 = &v168[v194];
  v196 = &v169[v194];
  *(_QWORD *)v195 = *(_QWORD *)v196;
  v197 = *((_QWORD *)v196 + 1);
  *((_QWORD *)v195 + 1) = v197;
  swift_bridgeObjectRetain(v197);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v168, 0, 1, (uint64_t)v170);
LABEL_66:
  v204 = v106[7];
  v205 = &v13[v204];
  v206 = &v14[v204];
  v207 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v207 - 8) + 24))(v205, v206, v207);
  v208 = v106[8];
  v209 = &v13[v208];
  v210 = &v14[v208];
  *(_QWORD *)v209 = *(_QWORD *)v210;
  v211 = *((_QWORD *)v210 + 1);
  v212 = *((_QWORD *)v209 + 1);
  *((_QWORD *)v209 + 1) = v211;
  swift_bridgeObjectRetain(v211);
  swift_bridgeObjectRelease(v212);
  v13[v106[9]] = v14[v106[9]];
  v13[v106[10]] = v14[v106[10]];
  v213 = v106[11];
  v214 = *(_QWORD *)&v13[v213];
  v215 = *(_QWORD *)&v14[v213];
  *(_QWORD *)&v13[v213] = v215;
  swift_retain(v215);
  swift_release(v214);
  v216 = v106[12];
  v217 = &v13[v216];
  v218 = &v14[v216];
  *(_QWORD *)v217 = *(_QWORD *)v218;
  v219 = *((_QWORD *)v218 + 1);
  v220 = *((_QWORD *)v217 + 1);
  *((_QWORD *)v217 + 1) = v219;
  swift_bridgeObjectRetain(v219);
  swift_bridgeObjectRelease(v220);
  v221 = v106[13];
  v222 = *(_QWORD *)&v14[v221];
  v223 = *(_QWORD *)&v13[v221];
  *(_QWORD *)&v13[v221] = v222;
  swift_retain(v222);
  swift_release(v223);
  v224 = v106[14];
  v225 = *(_QWORD *)&v14[v224];
  v226 = *(_QWORD *)&v13[v224];
  *(_QWORD *)&v13[v224] = v225;
  swift_retain(v225);
  swift_release(v226);
  v227 = v106[15];
  v228 = *(_QWORD *)&v14[v227];
  v229 = *(_QWORD *)&v13[v227];
  *(_QWORD *)&v13[v227] = v228;
  swift_retain(v228);
  swift_release(v229);
  v230 = v106[16];
  v231 = *(_QWORD *)&v14[v230];
  v232 = *(_QWORD *)&v13[v230];
  *(_QWORD *)&v13[v230] = v231;
  swift_retain(v231);
  swift_release(v232);
  v13[v106[17]] = v14[v106[17]];
  v233 = v106[18];
  v234 = *(_QWORD *)&v14[v233];
  v235 = *(_QWORD *)&v13[v233];
  *(_QWORD *)&v13[v233] = v234;
  swift_retain(v234);
  swift_release(v235);
  v236 = v106[19];
  v237 = *(_QWORD *)&v14[v236];
  v238 = *(_QWORD *)&v13[v236];
  *(_QWORD *)&v13[v236] = v237;
  swift_retain(v237);
  swift_release(v238);
  *(_QWORD *)&v13[v106[20]] = *(_QWORD *)&v14[v106[20]];
  v13[v106[21]] = v14[v106[21]];
  v13[v106[22]] = v14[v106[22]];
  v13[v106[23]] = v14[v106[23]];
  v13[v106[24]] = v14[v106[24]];
  v239 = v106[25];
  v240 = &v13[v239];
  v241 = &v14[v239];
  *(_QWORD *)v240 = *(_QWORD *)v241;
  v242 = *((_QWORD *)v241 + 1);
  v243 = *((_QWORD *)v240 + 1);
  *((_QWORD *)v240 + 1) = v242;
  swift_bridgeObjectRetain(v242);
  swift_bridgeObjectRelease(v243);
  v13[v106[26]] = v14[v106[26]];
  *(_QWORD *)&v13[v106[27]] = *(_QWORD *)&v14[v106[27]];
  *(_QWORD *)&v13[v106[28]] = *(_QWORD *)&v14[v106[28]];
  return v249;
}

_OWORD *sub_100058C18(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  int *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  void (*v105)(char *, char *);
  uint64_t v106;
  void (*v107)(char *, char *);
  uint64_t v108;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  void (*v111)(char *, char *, uint64_t);
  uint64_t v113;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
  v8(v5, v6, v7);
  v9 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v10 = v9[5];
  v11 = &v5[v10];
  v12 = &v6[v10];
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v113 = v13;
  v14(&v5[v9[6]], &v6[v9[6]], v13);
  v15 = v9[7];
  v16 = &v5[v15];
  v17 = &v6[v15];
  v18 = sub_100005D40(&qword_1001BF090);
  v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
  v19(v16, v17, v18);
  v19(&v5[v9[8]], &v6[v9[8]], v18);
  *(_OWORD *)&v5[v9[9]] = *(_OWORD *)&v6[v9[9]];
  v20 = v9[10];
  v21 = &v5[v20];
  v22 = &v6[v20];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v6[v20], 1, v18))
  {
    v23 = sub_100005D40(&qword_1001BF098);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v19(v21, v22, v18);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v21, 0, 1, v18);
  }
  v24 = v9[11];
  v25 = &v5[v24];
  v26 = &v6[v24];
  v109 = v19;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v6[v24], 1, v18))
  {
    v27 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v19(v25, v26, v18);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v18);
  }
  v28 = v9[12];
  v29 = &v5[v28];
  v30 = &v6[v28];
  v110 = v7;
  v111 = v8;
  v8(&v5[v28], &v6[v28], v7);
  v31 = (int *)type metadata accessor for ConditionViewModel(0);
  v32 = v31[5];
  v33 = &v29[v32];
  v34 = &v30[v32];
  v35 = type metadata accessor for WeatherCondition(0);
  v105 = *(void (**)(char *, char *))(*(_QWORD *)(v35 - 8) + 32);
  v106 = v35;
  v105(v33, v34);
  *(_OWORD *)&v29[v31[6]] = *(_OWORD *)&v30[v31[6]];
  *(_OWORD *)&v29[v31[7]] = *(_OWORD *)&v30[v31[7]];
  v29[v31[8]] = v30[v31[8]];
  v29[v31[9]] = v30[v31[9]];
  v29[v31[10]] = v30[v31[10]];
  *(_QWORD *)&v5[v9[13]] = *(_QWORD *)&v6[v9[13]];
  v36 = v9[14];
  v37 = &v5[v36];
  v38 = &v6[v36];
  v39 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
  v40 = v9[15];
  v41 = &v5[v40];
  v42 = &v6[v40];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v6[v40], 1, v113))
  {
    v43 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v14(v41, v42, v113);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v41, 0, 1, v113);
  }
  v44 = v9[16];
  v45 = &v5[v44];
  v46 = &v6[v44];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v6[v44], 1, v113))
  {
    v47 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v14(v45, v46, v113);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v45, 0, 1, v113);
  }
  v48 = v9[17];
  v49 = &v5[v48];
  v50 = &v6[v48];
  v51 = type metadata accessor for UVIndex(0);
  v107 = *(void (**)(char *, char *))(*(_QWORD *)(v51 - 8) + 32);
  v108 = v51;
  v107(v49, v50);
  v52 = v9[18];
  v53 = &v5[v52];
  v54 = &v6[v52];
  v55 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  *(_QWORD *)&v5[v9[19]] = *(_QWORD *)&v6[v9[19]];
  v56 = v9[20];
  v57 = &v5[v56];
  v58 = &v6[v56];
  v57[32] = v58[32];
  v59 = *((_OWORD *)v58 + 1);
  *(_OWORD *)v57 = *(_OWORD *)v58;
  *((_OWORD *)v57 + 1) = v59;
  v60 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v61 = v60[5];
  v62 = &v5[v61];
  v63 = &v6[v61];
  v111(&v5[v61], &v6[v61], v110);
  v64 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v14(&v62[v64[5]], &v63[v64[5]], v113);
  v109(&v62[v64[6]], &v63[v64[6]], v18);
  v109(&v62[v64[7]], &v63[v64[7]], v18);
  v65 = v64[8];
  v66 = &v62[v65];
  v67 = &v63[v65];
  v111(&v62[v65], &v63[v65], v110);
  ((void (*)(char *, char *, uint64_t))v105)(&v66[v31[5]], &v67[v31[5]], v106);
  *(_OWORD *)&v66[v31[6]] = *(_OWORD *)&v67[v31[6]];
  *(_OWORD *)&v66[v31[7]] = *(_OWORD *)&v67[v31[7]];
  v66[v31[8]] = v67[v31[8]];
  v66[v31[9]] = v67[v31[9]];
  v66[v31[10]] = v67[v31[10]];
  v68 = v64[9];
  v69 = &v62[v68];
  v70 = &v63[v68];
  v71 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v69, v70, v71);
  *(_QWORD *)&v62[v64[10]] = *(_QWORD *)&v63[v64[10]];
  *(_OWORD *)&v62[v64[11]] = *(_OWORD *)&v63[v64[11]];
  *(_OWORD *)&v62[v64[12]] = *(_OWORD *)&v63[v64[12]];
  *(_OWORD *)&v62[v64[13]] = *(_OWORD *)&v63[v64[13]];
  *(_OWORD *)&v62[v64[14]] = *(_OWORD *)&v63[v64[14]];
  v72 = v64[15];
  v73 = &v62[v72];
  v74 = &v63[v72];
  v75 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
  v76 = v64[16];
  v77 = &v62[v76];
  v78 = &v63[v76];
  v79 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v78, 1, v79))
  {
    v80 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v77, 0, 1, v79);
  }
  v81 = v64[17];
  v82 = &v62[v81];
  v83 = &v63[v81];
  v84 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v83, 1, v84))
  {
    v85 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(v82, v83, v84);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v82, 0, 1, v84);
  }
  ((void (*)(char *, char *, uint64_t))v107)(&v62[v64[18]], &v63[v64[18]], v108);
  *(_QWORD *)&v62[v64[19]] = *(_QWORD *)&v63[v64[19]];
  v86 = v60[6];
  v87 = &v5[v86];
  v88 = &v6[v86];
  v89 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v88, 1, (uint64_t)v89))
  {
    v90 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v87 = *(_OWORD *)v88;
    v91 = v89[5];
    v92 = &v87[v91];
    v93 = &v88[v91];
    v94 = type metadata accessor for AttributedString(0);
    v95 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 32);
    v95(v92, v93, v94);
    v96 = v89[6];
    v97 = &v87[v96];
    v98 = &v88[v96];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v88[v96], 1, v94))
    {
      v99 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    }
    else
    {
      v95(v97, v98, v94);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v97, 0, 1, v94);
    }
    *(_OWORD *)&v87[v89[7]] = *(_OWORD *)&v88[v89[7]];
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v87, 0, 1, (uint64_t)v89);
  }
  v100 = v60[7];
  v101 = &v5[v100];
  v102 = &v6[v100];
  v103 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v101, v102, v103);
  *(_OWORD *)&v5[v60[8]] = *(_OWORD *)&v6[v60[8]];
  v5[v60[9]] = v6[v60[9]];
  v5[v60[10]] = v6[v60[10]];
  *(_QWORD *)&v5[v60[11]] = *(_QWORD *)&v6[v60[11]];
  *(_OWORD *)&v5[v60[12]] = *(_OWORD *)&v6[v60[12]];
  *(_QWORD *)&v5[v60[13]] = *(_QWORD *)&v6[v60[13]];
  *(_QWORD *)&v5[v60[14]] = *(_QWORD *)&v6[v60[14]];
  *(_QWORD *)&v5[v60[15]] = *(_QWORD *)&v6[v60[15]];
  *(_QWORD *)&v5[v60[16]] = *(_QWORD *)&v6[v60[16]];
  v5[v60[17]] = v6[v60[17]];
  *(_QWORD *)&v5[v60[18]] = *(_QWORD *)&v6[v60[18]];
  *(_QWORD *)&v5[v60[19]] = *(_QWORD *)&v6[v60[19]];
  *(_QWORD *)&v5[v60[20]] = *(_QWORD *)&v6[v60[20]];
  v5[v60[21]] = v6[v60[21]];
  v5[v60[22]] = v6[v60[22]];
  v5[v60[23]] = v6[v60[23]];
  v5[v60[24]] = v6[v60[24]];
  *(_OWORD *)&v5[v60[25]] = *(_OWORD *)&v6[v60[25]];
  v5[v60[26]] = v6[v60[26]];
  *(_QWORD *)&v5[v60[27]] = *(_QWORD *)&v6[v60[27]];
  *(_QWORD *)&v5[v60[28]] = *(_QWORD *)&v6[v60[28]];
  return a1;
}

_QWORD *sub_10005951C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  int *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  int *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  int *v171;
  int v172;
  int v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  void (*v178)(char *, char *, uint64_t);
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v239;
  void (*v240)(char *, char *, uint64_t);
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  int *v244;
  void (*v245)(char *, char *);
  uint64_t v246;
  void (*v247)(char *, char *, uint64_t);
  void (*v248)(char *, char *, uint64_t);
  void (*v249)(char *, char *, uint64_t);
  void (*v250)(char *, char *, uint64_t);
  uint64_t v251;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 28);
  v243 = a1;
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  v250 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v250(v13, v14, v15);
  v16 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v17 = v16[5];
  v18 = &v13[v17];
  v19 = &v14[v17];
  v20 = type metadata accessor for Date(0);
  v239 = *(_QWORD *)(v20 - 8);
  v21 = *(void (**)(char *, char *, uint64_t))(v239 + 40);
  v21(v18, v19, v20);
  v248 = v21;
  v21(&v13[v16[6]], &v14[v16[6]], v20);
  v22 = v16[7];
  v23 = &v13[v22];
  v24 = &v14[v22];
  v25 = sub_100005D40(&qword_1001BF090);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(void (**)(char *, char *, uint64_t))(v26 + 40);
  v27(v23, v24, v25);
  v247 = v27;
  v27(&v13[v16[8]], &v14[v16[8]], v25);
  v28 = v16[9];
  v29 = &v13[v28];
  v30 = &v14[v28];
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  v33 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v29 = v32;
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRelease(v33);
  v34 = v16[10];
  v35 = &v13[v34];
  v36 = &v14[v34];
  LODWORD(v27) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v13[v34], 1, v25);
  v37 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v36, 1, v25);
  if ((_DWORD)v27)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v35, v36, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v35, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v35, v25);
LABEL_6:
    v38 = sub_100005D40(&qword_1001BF098);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_7;
  }
  v247(v35, v36, v25);
LABEL_7:
  v39 = v16[11];
  v40 = &v13[v39];
  v41 = &v14[v39];
  v42 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v13[v39], 1, v25);
  v43 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v41, 1, v25);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v40, v41, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v40, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v40, v25);
LABEL_12:
    v44 = sub_100005D40(&qword_1001BF098);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_13;
  }
  v247(v40, v41, v25);
LABEL_13:
  v45 = v16[12];
  v46 = &v13[v45];
  v47 = &v14[v45];
  v241 = v15;
  v250(&v13[v45], &v14[v45], v15);
  v48 = (int *)type metadata accessor for ConditionViewModel(0);
  v49 = v48[5];
  v50 = &v46[v49];
  v51 = &v47[v49];
  v52 = type metadata accessor for WeatherCondition(0);
  v245 = *(void (**)(char *, char *))(*(_QWORD *)(v52 - 8) + 40);
  v246 = v52;
  v245(v50, v51);
  v53 = v48[6];
  v54 = &v46[v53];
  v55 = &v47[v53];
  v57 = *(_QWORD *)v55;
  v56 = *((_QWORD *)v55 + 1);
  v58 = *((_QWORD *)v54 + 1);
  *(_QWORD *)v54 = v57;
  *((_QWORD *)v54 + 1) = v56;
  swift_bridgeObjectRelease(v58);
  v59 = v48[7];
  v60 = &v46[v59];
  v61 = &v47[v59];
  v63 = *(_QWORD *)v61;
  v62 = *((_QWORD *)v61 + 1);
  v64 = *((_QWORD *)v60 + 1);
  *(_QWORD *)v60 = v63;
  *((_QWORD *)v60 + 1) = v62;
  swift_bridgeObjectRelease(v64);
  v46[v48[8]] = v47[v48[8]];
  v46[v48[9]] = v47[v48[9]];
  v46[v48[10]] = v47[v48[10]];
  *(_QWORD *)&v13[v16[13]] = *(_QWORD *)&v14[v16[13]];
  v65 = v16[14];
  v66 = &v13[v65];
  v67 = &v14[v65];
  v68 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 40))(v66, v67, v68);
  v69 = v16[15];
  v70 = &v13[v69];
  v71 = &v14[v69];
  LODWORD(v50) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v13[v69], 1, v20);
  v72 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v71, 1, v20);
  v244 = v48;
  if ((_DWORD)v50)
  {
    if (!v72)
    {
      (*(void (**)(char *, char *, uint64_t))(v239 + 32))(v70, v71, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v70, 0, 1, v20);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v72)
  {
    (*(void (**)(char *, uint64_t))(v239 + 8))(v70, v20);
LABEL_18:
    v73 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    goto LABEL_19;
  }
  v248(v70, v71, v20);
LABEL_19:
  v74 = v241;
  v75 = v16[16];
  v76 = &v13[v75];
  v77 = &v14[v75];
  v78 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v13[v75], 1, v20);
  v79 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v77, 1, v20);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v239 + 32))(v76, v77, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v76, 0, 1, v20);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v239 + 8))(v76, v20);
LABEL_24:
    v80 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_25;
  }
  v248(v76, v77, v20);
LABEL_25:
  v81 = v16[17];
  v82 = &v13[v81];
  v83 = &v14[v81];
  v84 = type metadata accessor for UVIndex(0);
  v85 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 40);
  v85(v82, v83, v84);
  v86 = v16[18];
  v87 = &v13[v86];
  v88 = &v14[v86];
  v89 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 40))(v87, v88, v89);
  *(_QWORD *)&v13[v16[19]] = *(_QWORD *)&v14[v16[19]];
  v90 = v16[20];
  v91 = (uint64_t)&v13[v90];
  v92 = &v14[v90];
  v93 = *(_QWORD *)&v13[v90 + 8];
  v240 = v85;
  v242 = v84;
  if (v93)
  {
    v94 = *((_QWORD *)v92 + 1);
    if (v94)
    {
      *(_QWORD *)v91 = *(_QWORD *)v92;
      *(_QWORD *)(v91 + 8) = v94;
      swift_bridgeObjectRelease(v93);
      v95 = v92[32];
      v96 = *(_QWORD *)(v91 + 16);
      v97 = *(_QWORD *)(v91 + 24);
      v98 = *(_BYTE *)(v91 + 32);
      *(_OWORD *)(v91 + 16) = *((_OWORD *)v92 + 1);
      *(_BYTE *)(v91 + 32) = v95;
      sub_100007458(v96, v97, v98);
      goto LABEL_30;
    }
    sub_100008EC4(v91);
  }
  v99 = *((_OWORD *)v92 + 1);
  *(_OWORD *)v91 = *(_OWORD *)v92;
  *(_OWORD *)(v91 + 16) = v99;
  *(_BYTE *)(v91 + 32) = v92[32];
LABEL_30:
  v100 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v101 = v100[5];
  v102 = &v13[v101];
  v103 = &v14[v101];
  v250(&v13[v101], &v14[v101], v74);
  v104 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v248(&v102[v104[5]], &v103[v104[5]], v20);
  v247(&v102[v104[6]], &v103[v104[6]], v25);
  v247(&v102[v104[7]], &v103[v104[7]], v25);
  v105 = v104[8];
  v106 = &v102[v105];
  v107 = &v103[v105];
  v250(&v102[v105], &v103[v105], v74);
  ((void (*)(char *, char *, uint64_t))v245)(&v106[v244[5]], &v107[v244[5]], v246);
  v108 = v244[6];
  v109 = &v106[v108];
  v110 = (uint64_t *)&v107[v108];
  v112 = *v110;
  v111 = v110[1];
  v113 = *((_QWORD *)v109 + 1);
  *(_QWORD *)v109 = v112;
  *((_QWORD *)v109 + 1) = v111;
  swift_bridgeObjectRelease(v113);
  v114 = v244[7];
  v115 = &v106[v114];
  v116 = (uint64_t *)&v107[v114];
  v118 = *v116;
  v117 = v116[1];
  v119 = *((_QWORD *)v115 + 1);
  *(_QWORD *)v115 = v118;
  *((_QWORD *)v115 + 1) = v117;
  swift_bridgeObjectRelease(v119);
  v106[v244[8]] = v107[v244[8]];
  v106[v244[9]] = v107[v244[9]];
  v106[v244[10]] = v107[v244[10]];
  v120 = v104[9];
  v121 = &v102[v120];
  v122 = &v103[v120];
  v123 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 40))(v121, v122, v123);
  *(_QWORD *)&v102[v104[10]] = *(_QWORD *)&v103[v104[10]];
  v124 = v104[11];
  v125 = &v102[v124];
  v126 = &v103[v124];
  v128 = *(_QWORD *)v126;
  v127 = *((_QWORD *)v126 + 1);
  v129 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v125 = v128;
  *((_QWORD *)v125 + 1) = v127;
  swift_bridgeObjectRelease(v129);
  v130 = v104[12];
  v131 = &v102[v130];
  v132 = &v103[v130];
  v134 = *(_QWORD *)v132;
  v133 = *((_QWORD *)v132 + 1);
  v135 = *((_QWORD *)v131 + 1);
  *(_QWORD *)v131 = v134;
  *((_QWORD *)v131 + 1) = v133;
  swift_bridgeObjectRelease(v135);
  v136 = v104[13];
  v137 = &v102[v136];
  v138 = &v103[v136];
  v140 = *(_QWORD *)v138;
  v139 = *((_QWORD *)v138 + 1);
  v141 = *((_QWORD *)v137 + 1);
  *(_QWORD *)v137 = v140;
  *((_QWORD *)v137 + 1) = v139;
  swift_bridgeObjectRelease(v141);
  v142 = v104[14];
  v143 = &v102[v142];
  v144 = &v103[v142];
  v146 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  v147 = *((_QWORD *)v143 + 1);
  *(_QWORD *)v143 = v146;
  *((_QWORD *)v143 + 1) = v145;
  swift_bridgeObjectRelease(v147);
  v148 = v104[15];
  v149 = &v102[v148];
  v150 = &v103[v148];
  v151 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 40))(v149, v150, v151);
  v152 = v104[16];
  v153 = &v102[v152];
  v154 = &v103[v152];
  v155 = type metadata accessor for SunEvents(0);
  v156 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v153, 1, v155);
  v157 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v154, 1, v155);
  if (v156)
  {
    if (!v157)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 32))(v153, v154, v155);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v153, 0, 1, v155);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v158 = *(_QWORD *)(v155 - 8);
  if (v157)
  {
    (*(void (**)(char *, uint64_t))(v158 + 8))(v153, v155);
LABEL_35:
    v159 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v158 + 40))(v153, v154, v155);
LABEL_36:
  v160 = v104[17];
  v161 = &v102[v160];
  v162 = &v103[v160];
  v163 = type metadata accessor for MoonEvents(0);
  v164 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v161, 1, v163);
  v165 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v162, 1, v163);
  if (v164)
  {
    if (!v165)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v163 - 8) + 32))(v161, v162, v163);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v161, 0, 1, v163);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v166 = *(_QWORD *)(v163 - 8);
  if (v165)
  {
    (*(void (**)(char *, uint64_t))(v166 + 8))(v161, v163);
LABEL_41:
    v167 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v166 + 40))(v161, v162, v163);
LABEL_42:
  v240(&v102[v104[18]], &v103[v104[18]], v242);
  *(_QWORD *)&v102[v104[19]] = *(_QWORD *)&v103[v104[19]];
  v168 = v100[6];
  v169 = &v13[v168];
  v170 = &v14[v168];
  v171 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v172 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v169, 1, (uint64_t)v171);
  v173 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v170, 1, (uint64_t)v171);
  if (!v172)
  {
    if (v173)
    {
      sub_100011894((uint64_t)v169, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_48;
    }
    v184 = *((_QWORD *)v170 + 1);
    v185 = *((_QWORD *)v169 + 1);
    *(_QWORD *)v169 = *(_QWORD *)v170;
    *((_QWORD *)v169 + 1) = v184;
    swift_bridgeObjectRelease(v185);
    v186 = v171[5];
    v187 = &v169[v186];
    v188 = &v170[v186];
    v189 = type metadata accessor for AttributedString(0);
    v251 = *(_QWORD *)(v189 - 8);
    v249 = *(void (**)(char *, char *, uint64_t))(v251 + 40);
    v249(v187, v188, v189);
    v190 = v171[6];
    v191 = &v169[v190];
    v192 = &v170[v190];
    v193 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v169[v190], 1, v189);
    v194 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v192, 1, v189);
    if (v193)
    {
      if (!v194)
      {
        (*(void (**)(char *, char *, uint64_t))(v251 + 32))(v191, v192, v189);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v191, 0, 1, v189);
LABEL_63:
        v196 = v171[7];
        v197 = &v169[v196];
        v198 = &v170[v196];
        v200 = *(_QWORD *)v198;
        v199 = *((_QWORD *)v198 + 1);
        v201 = *((_QWORD *)v197 + 1);
        *(_QWORD *)v197 = v200;
        *((_QWORD *)v197 + 1) = v199;
        swift_bridgeObjectRelease(v201);
        goto LABEL_64;
      }
    }
    else
    {
      if (!v194)
      {
        v249(v191, v192, v189);
        goto LABEL_63;
      }
      (*(void (**)(char *, uint64_t))(v251 + 8))(v191, v189);
    }
    v195 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
    goto LABEL_63;
  }
  if (v173)
  {
LABEL_48:
    v183 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
    goto LABEL_64;
  }
  *(_OWORD *)v169 = *(_OWORD *)v170;
  v174 = v171[5];
  v175 = &v169[v174];
  v176 = &v170[v174];
  v177 = type metadata accessor for AttributedString(0);
  v178 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v177 - 8) + 32);
  v178(v175, v176, v177);
  v179 = v171[6];
  v180 = &v169[v179];
  v181 = &v170[v179];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v170[v179], 1, v177))
  {
    v182 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
  }
  else
  {
    v178(v180, v181, v177);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v180, 0, 1, v177);
  }
  *(_OWORD *)&v169[v171[7]] = *(_OWORD *)&v170[v171[7]];
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v169, 0, 1, (uint64_t)v171);
LABEL_64:
  v202 = v100[7];
  v203 = &v13[v202];
  v204 = &v14[v202];
  v205 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v205 - 8) + 40))(v203, v204, v205);
  v206 = v100[8];
  v207 = &v13[v206];
  v208 = &v14[v206];
  v210 = *(_QWORD *)v208;
  v209 = *((_QWORD *)v208 + 1);
  v211 = *((_QWORD *)v207 + 1);
  *(_QWORD *)v207 = v210;
  *((_QWORD *)v207 + 1) = v209;
  swift_bridgeObjectRelease(v211);
  v13[v100[9]] = v14[v100[9]];
  v13[v100[10]] = v14[v100[10]];
  v212 = v100[11];
  v213 = *(_QWORD *)&v13[v212];
  *(_QWORD *)&v13[v212] = *(_QWORD *)&v14[v212];
  swift_release(v213);
  v214 = v100[12];
  v215 = &v13[v214];
  v216 = &v14[v214];
  v218 = *(_QWORD *)v216;
  v217 = *((_QWORD *)v216 + 1);
  v219 = *((_QWORD *)v215 + 1);
  *(_QWORD *)v215 = v218;
  *((_QWORD *)v215 + 1) = v217;
  swift_bridgeObjectRelease(v219);
  v220 = v100[13];
  v221 = *(_QWORD *)&v13[v220];
  *(_QWORD *)&v13[v220] = *(_QWORD *)&v14[v220];
  swift_release(v221);
  v222 = v100[14];
  v223 = *(_QWORD *)&v13[v222];
  *(_QWORD *)&v13[v222] = *(_QWORD *)&v14[v222];
  swift_release(v223);
  v224 = v100[15];
  v225 = *(_QWORD *)&v13[v224];
  *(_QWORD *)&v13[v224] = *(_QWORD *)&v14[v224];
  swift_release(v225);
  v226 = v100[16];
  v227 = *(_QWORD *)&v13[v226];
  *(_QWORD *)&v13[v226] = *(_QWORD *)&v14[v226];
  swift_release(v227);
  v13[v100[17]] = v14[v100[17]];
  v228 = v100[18];
  v229 = *(_QWORD *)&v13[v228];
  *(_QWORD *)&v13[v228] = *(_QWORD *)&v14[v228];
  swift_release(v229);
  v230 = v100[19];
  v231 = *(_QWORD *)&v13[v230];
  *(_QWORD *)&v13[v230] = *(_QWORD *)&v14[v230];
  swift_release(v231);
  *(_QWORD *)&v13[v100[20]] = *(_QWORD *)&v14[v100[20]];
  v13[v100[21]] = v14[v100[21]];
  v13[v100[22]] = v14[v100[22]];
  v13[v100[23]] = v14[v100[23]];
  v13[v100[24]] = v14[v100[24]];
  v232 = v100[25];
  v233 = &v13[v232];
  v234 = &v14[v232];
  v236 = *(_QWORD *)v234;
  v235 = *((_QWORD *)v234 + 1);
  v237 = *((_QWORD *)v233 + 1);
  *(_QWORD *)v233 = v236;
  *((_QWORD *)v233 + 1) = v235;
  swift_bridgeObjectRelease(v237);
  v13[v100[26]] = v14[v100[26]];
  *(_QWORD *)&v13[v100[27]] = *(_QWORD *)&v14[v100[27]];
  *(_QWORD *)&v13[v100[28]] = *(_QWORD *)&v14[v100[28]];
  return v243;
}

uint64_t sub_10005A2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005A2B0);
}

void sub_10005A2B0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10006751C();
  if (v1)
  {
    sub_1000674E0();
    sub_1000443A4();
  }
  else
  {
    sub_1000674F8();
    v2 = sub_10006754C(*(int *)(v0 + 28));
    sub_100016B50(v2, v3, v4);
  }
}

uint64_t sub_10005A2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005A2F8);
}

void sub_10005A2F8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100067508();
  if (v1)
  {
    sub_100067558();
    sub_1000443A4();
  }
  else
  {
    v2 = v0;
    sub_100016B00();
    v3 = sub_10006752C(*(int *)(v2 + 28));
    sub_100016B44(v3, v4, v5, v6);
  }
}

uint64_t sub_10005A338(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_10017CAB0;
  v4[1] = &unk_10017CAC8;
  v4[2] = &unk_10017CAB0;
  result = type metadata accessor for CurrentObservationViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_10005A3B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  __int128 v84;
  int *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  int *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t);
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t);
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  int *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  void (*v146)(char *, char *, uint64_t);
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v193)(char *, char *);
  uint64_t v194;
  int *v195;
  void (*v196)(char *, char *);
  uint64_t v197;
  uint64_t v198;
  char *v199;
  void (*v203)(char *, char *, uint64_t);
  uint64_t v204;
  char *v205;
  void (*v206)(char *, char *, uint64_t);
  char *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v34 = *a2;
    *a1 = *a2;
    v35 = (uint64_t *)(v34 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v34);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    v9 = a2[9];
    v10 = *(int *)(a3 + 36);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    a1[8] = a2[8];
    a1[9] = v9;
    v13 = type metadata accessor for UUID(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v206 = v14;
    v14(v11, v12, v13);
    v15 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v16 = v15[5];
    v17 = &v11[v16];
    v18 = &v12[v16];
    v19 = type metadata accessor for Date(0);
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    v20(v17, v18, v19);
    v203 = v20;
    v20(&v11[v15[6]], &v12[v15[6]], v19);
    v21 = v15[7];
    v22 = &v11[v21];
    v23 = &v12[v21];
    v24 = sub_100005D40(&qword_1001BF090);
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v25(v22, v23, v24);
    v25(&v11[v15[8]], &v12[v15[8]], v24);
    v26 = v15[9];
    v27 = &v11[v26];
    v28 = &v12[v26];
    v29 = *((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v29;
    v30 = v15[10];
    v31 = &v11[v30];
    v32 = &v12[v30];
    swift_bridgeObjectRetain(v29);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v24))
    {
      v33 = sub_100005D40(&qword_1001BF098);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v25(v31, v32, v24);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v24);
    }
    v36 = v15[11];
    v37 = &v11[v36];
    v38 = &v12[v36];
    v204 = v19;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v12[v36], 1, v24))
    {
      v39 = sub_100005D40(&qword_1001BF098);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v25(v37, v38, v24);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v37, 0, 1, v24);
    }
    v40 = v15[12];
    v41 = &v11[v40];
    v42 = &v12[v40];
    v198 = v13;
    v206(&v11[v40], &v12[v40], v13);
    v43 = (int *)type metadata accessor for ConditionViewModel(0);
    v44 = v43[5];
    v45 = &v41[v44];
    v46 = &v42[v44];
    v47 = type metadata accessor for WeatherCondition(0);
    v193 = *(void (**)(char *, char *))(*(_QWORD *)(v47 - 8) + 16);
    v194 = v47;
    v193(v45, v46);
    v48 = v43[6];
    v49 = &v41[v48];
    v50 = &v42[v48];
    v51 = *((_QWORD *)v50 + 1);
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *((_QWORD *)v49 + 1) = v51;
    v52 = v43[7];
    v53 = &v41[v52];
    v54 = &v42[v52];
    v55 = *((_QWORD *)v54 + 1);
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *((_QWORD *)v53 + 1) = v55;
    v41[v43[8]] = v42[v43[8]];
    v41[v43[9]] = v42[v43[9]];
    v195 = v43;
    v41[v43[10]] = v42[v43[10]];
    *(_QWORD *)&v11[v15[13]] = *(_QWORD *)&v12[v15[13]];
    v56 = v15[14];
    v57 = &v11[v56];
    v58 = &v12[v56];
    v209 = v12;
    v59 = type metadata accessor for CloudAltitudeKind(0);
    v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v55);
    v60(v57, v58, v59);
    v61 = v15[15];
    v62 = &v11[v61];
    v63 = &v209[v61];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v209[v61], 1, v204))
    {
      v64 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      v203(v62, v63, v204);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v62, 0, 1, v204);
    }
    v65 = v15[16];
    v66 = &v11[v65];
    v67 = &v209[v65];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v209[v65], 1, v204))
    {
      v68 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v203(v66, v67, v204);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v204);
    }
    v69 = v15[17];
    v70 = &v11[v69];
    v71 = &v209[v69];
    v72 = type metadata accessor for UVIndex(0);
    v196 = *(void (**)(char *, char *))(*(_QWORD *)(v72 - 8) + 16);
    v197 = v72;
    v196(v70, v71);
    v73 = v15[18];
    v74 = &v11[v73];
    v75 = &v209[v73];
    v76 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
    *(_QWORD *)&v11[v15[19]] = *(_QWORD *)&v209[v15[19]];
    v77 = v15[20];
    v78 = &v11[v77];
    v79 = &v209[v77];
    v80 = *((_QWORD *)v79 + 1);
    if (v80)
    {
      *(_QWORD *)v78 = *(_QWORD *)v79;
      *((_QWORD *)v78 + 1) = v80;
      v81 = *((_QWORD *)v79 + 2);
      v82 = *((_QWORD *)v79 + 3);
      v83 = v79[32];
      swift_bridgeObjectRetain(v80);
      sub_100006E58(v81, v82, v83);
      *((_QWORD *)v78 + 2) = v81;
      *((_QWORD *)v78 + 3) = v82;
      v78[32] = v83;
    }
    else
    {
      v84 = *((_OWORD *)v79 + 1);
      *(_OWORD *)v78 = *(_OWORD *)v79;
      *((_OWORD *)v78 + 1) = v84;
      v78[32] = v79[32];
    }
    v85 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
    v86 = v85[5];
    v199 = v11;
    v87 = &v11[v86];
    v88 = &v209[v86];
    v206(&v11[v86], &v209[v86], v198);
    v89 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v203(&v87[v89[5]], &v88[v89[5]], v204);
    v25(&v87[v89[6]], &v88[v89[6]], v24);
    v25(&v87[v89[7]], &v88[v89[7]], v24);
    v90 = v89[8];
    v91 = &v87[v90];
    v92 = &v88[v90];
    v206(&v87[v90], &v88[v90], v198);
    ((void (*)(char *, char *, uint64_t))v193)(&v91[v195[5]], &v92[v195[5]], v194);
    v93 = v195[6];
    v94 = &v91[v93];
    v95 = &v92[v93];
    v96 = *((_QWORD *)v95 + 1);
    *(_QWORD *)v94 = *(_QWORD *)v95;
    *((_QWORD *)v94 + 1) = v96;
    v97 = v195[7];
    v98 = &v91[v97];
    v99 = &v92[v97];
    v100 = *((_QWORD *)v99 + 1);
    *(_QWORD *)v98 = *(_QWORD *)v99;
    *((_QWORD *)v98 + 1) = v100;
    v91[v195[8]] = v92[v195[8]];
    v91[v195[9]] = v92[v195[9]];
    v91[v195[10]] = v92[v195[10]];
    v101 = v89[9];
    v102 = &v87[v101];
    v103 = &v88[v101];
    v104 = type metadata accessor for Precipitation(0);
    v105 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16);
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v100);
    v105(v102, v103, v104);
    *(_QWORD *)&v87[v89[10]] = *(_QWORD *)&v88[v89[10]];
    v106 = v89[11];
    v107 = &v87[v106];
    v108 = &v88[v106];
    v109 = *((_QWORD *)v108 + 1);
    *(_QWORD *)v107 = *(_QWORD *)v108;
    *((_QWORD *)v107 + 1) = v109;
    v110 = v89[12];
    v111 = &v87[v110];
    v112 = &v88[v110];
    v113 = *((_QWORD *)v112 + 1);
    *(_QWORD *)v111 = *(_QWORD *)v112;
    *((_QWORD *)v111 + 1) = v113;
    v114 = v89[13];
    v115 = &v87[v114];
    v116 = &v88[v114];
    v117 = *((_QWORD *)v116 + 1);
    *(_QWORD *)v115 = *(_QWORD *)v116;
    *((_QWORD *)v115 + 1) = v117;
    v118 = v89[14];
    v119 = &v87[v118];
    v120 = &v88[v118];
    v121 = *((_QWORD *)v120 + 1);
    *(_QWORD *)v119 = *(_QWORD *)v120;
    *((_QWORD *)v119 + 1) = v121;
    v122 = v89[15];
    v205 = &v88[v122];
    v207 = &v87[v122];
    v123 = type metadata accessor for TemperatureScaleConfiguration(0);
    v124 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 16);
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v113);
    swift_bridgeObjectRetain(v117);
    swift_bridgeObjectRetain(v121);
    v124(v207, v205, v123);
    v125 = v89[16];
    v126 = &v87[v125];
    v127 = &v88[v125];
    v128 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v127, 1, v128))
    {
      v129 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 16))(v126, v127, v128);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v126, 0, 1, v128);
    }
    v130 = v89[17];
    v131 = &v87[v130];
    v132 = &v88[v130];
    v133 = type metadata accessor for MoonEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v132, 1, v133))
    {
      v134 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 16))(v131, v132, v133);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v131, 0, 1, v133);
    }
    ((void (*)(char *, char *, uint64_t))v196)(&v87[v89[18]], &v88[v89[18]], v197);
    *(_QWORD *)&v87[v89[19]] = *(_QWORD *)&v88[v89[19]];
    v135 = v85[6];
    v136 = &v199[v135];
    v137 = v209;
    v138 = &v209[v135];
    v139 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v138, 1, (uint64_t)v139))
    {
      v140 = sub_100005D40(&qword_1001BF0C0);
      memcpy(v136, v138, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
    }
    else
    {
      v141 = *((_QWORD *)v138 + 1);
      *(_QWORD *)v136 = *(_QWORD *)v138;
      *((_QWORD *)v136 + 1) = v141;
      v142 = v139[5];
      v143 = &v136[v142];
      v144 = &v138[v142];
      v145 = type metadata accessor for AttributedString(0);
      v146 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 16);
      swift_bridgeObjectRetain(v141);
      v146(v143, v144, v145);
      v147 = v139[6];
      v148 = &v136[v147];
      v149 = &v138[v147];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v138[v147], 1, v145))
      {
        v150 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
      }
      else
      {
        v146(v148, v149, v145);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v148, 0, 1, v145);
      }
      v151 = v139[7];
      v152 = &v136[v151];
      v153 = &v138[v151];
      v154 = *((_QWORD *)v153 + 1);
      *(_QWORD *)v152 = *(_QWORD *)v153;
      *((_QWORD *)v152 + 1) = v154;
      swift_bridgeObjectRetain(v154);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v136, 0, 1, (uint64_t)v139);
      v137 = v209;
    }
    v155 = v85[7];
    v156 = &v199[v155];
    v157 = &v137[v155];
    v158 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v158 - 8) + 16))(v156, v157, v158);
    v159 = v85[8];
    v160 = &v199[v159];
    v161 = &v137[v159];
    v162 = *((_QWORD *)v161 + 1);
    *(_QWORD *)v160 = *(_QWORD *)v161;
    *((_QWORD *)v160 + 1) = v162;
    v199[v85[9]] = v137[v85[9]];
    v199[v85[10]] = v137[v85[10]];
    v163 = v85[11];
    v208 = *(_QWORD *)&v137[v163];
    *(_QWORD *)&v199[v163] = v208;
    v164 = v85[12];
    v165 = &v199[v164];
    v166 = &v137[v164];
    v167 = *((_QWORD *)v166 + 1);
    *(_QWORD *)v165 = *(_QWORD *)v166;
    *((_QWORD *)v165 + 1) = v167;
    v168 = v85[13];
    v169 = *(_QWORD *)&v137[v168];
    *(_QWORD *)&v199[v168] = v169;
    v170 = v85[14];
    v171 = *(_QWORD *)&v137[v170];
    *(_QWORD *)&v199[v170] = v171;
    v172 = v85[15];
    v173 = *(_QWORD *)&v137[v172];
    *(_QWORD *)&v199[v172] = v173;
    v174 = v85[16];
    v210 = *(_QWORD *)&v137[v174];
    *(_QWORD *)&v199[v174] = v210;
    v199[v85[17]] = v137[v85[17]];
    v175 = v85[18];
    v176 = *(_QWORD *)&v137[v175];
    *(_QWORD *)&v199[v175] = v176;
    v177 = v85[19];
    v178 = *(_QWORD *)&v137[v177];
    *(_QWORD *)&v199[v177] = v178;
    *(_QWORD *)&v199[v85[20]] = *(_QWORD *)&v137[v85[20]];
    v199[v85[21]] = v137[v85[21]];
    v199[v85[22]] = v137[v85[22]];
    v199[v85[23]] = v137[v85[23]];
    v199[v85[24]] = v137[v85[24]];
    v179 = v85[25];
    v180 = &v199[v179];
    v181 = &v137[v179];
    v182 = *((_QWORD *)v181 + 1);
    *(_QWORD *)v180 = *(_QWORD *)v181;
    *((_QWORD *)v180 + 1) = v182;
    v199[v85[26]] = v137[v85[26]];
    *(_QWORD *)&v199[v85[27]] = *(_QWORD *)&v137[v85[27]];
    *(_QWORD *)&v199[v85[28]] = *(_QWORD *)&v137[v85[28]];
    v183 = *(int *)(a3 + 40);
    v35 = a1;
    v184 = (uint64_t *)((char *)a1 + v183);
    v185 = (uint64_t *)((char *)a2 + v183);
    swift_bridgeObjectRetain(v162);
    swift_retain(v208);
    swift_bridgeObjectRetain(v167);
    swift_retain(v169);
    swift_retain(v171);
    swift_retain(v173);
    swift_retain(v210);
    swift_retain(v176);
    swift_retain(v178);
    swift_bridgeObjectRetain(v182);
    v186 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v185, v186) == 1)
    {
      v187 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v187 - 8) + 16))(v184, v185, v187);
      v188 = v184;
      v189 = v186;
      v190 = 1;
    }
    else
    {
      v191 = *v185;
      *v184 = *v185;
      swift_retain(v191);
      v188 = v184;
      v189 = v186;
      v190 = 0;
    }
    swift_storeEnumTagMultiPayload(v188, v189, v190);
  }
  return v35;
}

uint64_t sub_10005AF28(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  int *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int *v30;
  char *v31;
  int *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v54)(char *);
  uint64_t v55;
  void (*v56)(char *);
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  _QWORD *v60;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  v59 = a2;
  v60 = a1;
  v4 = (char *)a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = &v4[v7[5]];
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(&v4[v7[6]], v9);
  v11 = &v4[v7[7]];
  v12 = sub_100005D40(&qword_1001BF090);
  v13 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(&v4[v7[8]], v12);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v7[9] + 8]);
  v14 = (uint64_t)&v4[v7[10]];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v14, 1, v12))
    v13((char *)v14, v12);
  v15 = (uint64_t)&v4[v7[11]];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v15, 1, v12))
    v13((char *)v15, v12);
  v16 = &v4[v7[12]];
  v58 = v6;
  v6(v16, v5);
  v17 = (int *)type metadata accessor for ConditionViewModel(0);
  v18 = &v16[v17[5]];
  v19 = type metadata accessor for WeatherCondition(0);
  v54 = *(void (**)(char *))(*(_QWORD *)(v19 - 8) + 8);
  v55 = v19;
  v54(v18);
  swift_bridgeObjectRelease(*(_QWORD *)&v16[v17[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v16[v17[7] + 8]);
  v20 = &v4[v7[14]];
  v21 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t)&v4[v7[15]];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v22, 1, v9))
    v10((char *)v22, v9);
  v23 = (uint64_t)&v4[v7[16]];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v23, 1, v9))
    v10((char *)v23, v9);
  v24 = &v4[v7[17]];
  v25 = type metadata accessor for UVIndex(0);
  v56 = *(void (**)(char *))(*(_QWORD *)(v25 - 8) + 8);
  v57 = v25;
  v56(v24);
  v26 = &v4[v7[18]];
  v27 = type metadata accessor for Wind(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = &v4[v7[20]];
  v29 = *((_QWORD *)v28 + 1);
  if (v29)
  {
    swift_bridgeObjectRelease(v29);
    sub_100007458(*((_QWORD *)v28 + 2), *((_QWORD *)v28 + 3), v28[32]);
  }
  v30 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v31 = &v4[v30[5]];
  v58(v31, v5);
  v32 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v10(&v31[v32[5]], v9);
  v13(&v31[v32[6]], v12);
  v13(&v31[v32[7]], v12);
  v33 = &v31[v32[8]];
  v58(v33, v5);
  ((void (*)(char *, uint64_t))v54)(&v33[v17[5]], v55);
  swift_bridgeObjectRelease(*(_QWORD *)&v33[v17[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v33[v17[7] + 8]);
  v34 = &v31[v32[9]];
  v35 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
  swift_bridgeObjectRelease(*(_QWORD *)&v31[v32[11] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v31[v32[12] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v31[v32[13] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v31[v32[14] + 8]);
  v36 = &v31[v32[15]];
  v37 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
  v38 = (uint64_t)&v31[v32[16]];
  v39 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, v39))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  v40 = (uint64_t)&v31[v32[17]];
  v41 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v40, 1, v41))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v40, v41);
  ((void (*)(char *, uint64_t))v56)(&v31[v32[18]], v57);
  v42 = (uint64_t)&v4[v30[6]];
  v43 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v42, 1, (uint64_t)v43))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + 8));
    v44 = v42 + v43[5];
    v45 = type metadata accessor for AttributedString(0);
    v46 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8);
    v46(v44, v45);
    v47 = v42 + v43[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v47, 1, v45))
      v46(v47, v45);
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v43[7] + 8));
  }
  v48 = &v4[v30[7]];
  v49 = type metadata accessor for Location(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v48, v49);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v30[8] + 8]);
  swift_release(*(_QWORD *)&v4[v30[11]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v30[12] + 8]);
  swift_release(*(_QWORD *)&v4[v30[13]]);
  swift_release(*(_QWORD *)&v4[v30[14]]);
  swift_release(*(_QWORD *)&v4[v30[15]]);
  swift_release(*(_QWORD *)&v4[v30[16]]);
  swift_release(*(_QWORD *)&v4[v30[18]]);
  swift_release(*(_QWORD *)&v4[v30[19]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v30[25] + 8]);
  v50 = (_QWORD *)((char *)v60 + *(int *)(v59 + 40));
  v51 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v50, v51) != 1)
    return swift_release(*v50);
  v52 = type metadata accessor for Font.Context(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v50, v52);
}

_QWORD *sub_10005B550(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  __int128 v80;
  int *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  int *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  int *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  void (*v142)(char *, char *, uint64_t);
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*v187)(char *, char *);
  uint64_t v188;
  int *v189;
  void (*v190)(char *, char *);
  uint64_t v191;
  uint64_t v192;
  char *v193;
  void (*v197)(char *, char *, uint64_t);
  uint64_t v198;
  char *v199;
  void (*v200)(char *, char *, uint64_t);
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  v8 = *(int *)(a3 + 36);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  a1[8] = a2[8];
  a1[9] = v7;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v200 = v12;
  v12(v9, v10, v11);
  v13 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v14 = v13[5];
  v15 = &v9[v14];
  v16 = &v10[v14];
  v17 = type metadata accessor for Date(0);
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  v18(v15, v16, v17);
  v197 = v18;
  v198 = v17;
  v18(&v9[v13[6]], &v10[v13[6]], v17);
  v19 = v13[7];
  v20 = &v9[v19];
  v21 = &v10[v19];
  v22 = sub_100005D40(&qword_1001BF090);
  v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  v23(v20, v21, v22);
  v23(&v9[v13[8]], &v10[v13[8]], v22);
  v24 = v13[9];
  v25 = &v9[v24];
  v26 = &v10[v24];
  v27 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = v27;
  v28 = v13[10];
  v29 = &v9[v28];
  v30 = &v10[v28];
  swift_bridgeObjectRetain(v27);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v22))
  {
    v31 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v23(v29, v30, v22);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v22);
  }
  v32 = v13[11];
  v33 = &v9[v32];
  v34 = &v10[v32];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v10[v32], 1, v22))
  {
    v35 = sub_100005D40(&qword_1001BF098);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v23(v33, v34, v22);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v33, 0, 1, v22);
  }
  v36 = v13[12];
  v37 = &v9[v36];
  v38 = &v10[v36];
  v192 = v11;
  v200(&v9[v36], &v10[v36], v11);
  v39 = (int *)type metadata accessor for ConditionViewModel(0);
  v40 = v39[5];
  v41 = &v37[v40];
  v42 = &v38[v40];
  v43 = type metadata accessor for WeatherCondition(0);
  v187 = *(void (**)(char *, char *))(*(_QWORD *)(v43 - 8) + 16);
  v188 = v43;
  v187(v41, v42);
  v44 = v39[6];
  v45 = &v37[v44];
  v46 = &v38[v44];
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = v47;
  v48 = v39[7];
  v49 = &v37[v48];
  v50 = &v38[v48];
  v51 = *((_QWORD *)v50 + 1);
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *((_QWORD *)v49 + 1) = v51;
  v37[v39[8]] = v38[v39[8]];
  v37[v39[9]] = v38[v39[9]];
  v189 = v39;
  v37[v39[10]] = v38[v39[10]];
  *(_QWORD *)&v9[v13[13]] = *(_QWORD *)&v10[v13[13]];
  v52 = v13[14];
  v53 = &v9[v52];
  v54 = &v10[v52];
  v203 = v10;
  v55 = type metadata accessor for CloudAltitudeKind(0);
  v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v51);
  v56(v53, v54, v55);
  v57 = v13[15];
  v58 = &v9[v57];
  v59 = &v203[v57];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v203[v57], 1, v198))
  {
    v60 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    v197(v58, v59, v198);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v198);
  }
  v61 = v13[16];
  v62 = &v9[v61];
  v63 = &v203[v61];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v203[v61], 1, v198))
  {
    v64 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
  }
  else
  {
    v197(v62, v63, v198);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v62, 0, 1, v198);
  }
  v65 = v13[17];
  v66 = &v9[v65];
  v67 = &v203[v65];
  v68 = type metadata accessor for UVIndex(0);
  v190 = *(void (**)(char *, char *))(*(_QWORD *)(v68 - 8) + 16);
  v191 = v68;
  v190(v66, v67);
  v69 = v13[18];
  v70 = &v9[v69];
  v71 = &v203[v69];
  v72 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
  *(_QWORD *)&v9[v13[19]] = *(_QWORD *)&v203[v13[19]];
  v73 = v13[20];
  v74 = &v9[v73];
  v75 = &v203[v73];
  v76 = *((_QWORD *)v75 + 1);
  if (v76)
  {
    *(_QWORD *)v74 = *(_QWORD *)v75;
    *((_QWORD *)v74 + 1) = v76;
    v77 = *((_QWORD *)v75 + 2);
    v78 = *((_QWORD *)v75 + 3);
    v79 = v75[32];
    swift_bridgeObjectRetain(v76);
    sub_100006E58(v77, v78, v79);
    *((_QWORD *)v74 + 2) = v77;
    *((_QWORD *)v74 + 3) = v78;
    v74[32] = v79;
  }
  else
  {
    v80 = *((_OWORD *)v75 + 1);
    *(_OWORD *)v74 = *(_OWORD *)v75;
    *((_OWORD *)v74 + 1) = v80;
    v74[32] = v75[32];
  }
  v81 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v82 = v81[5];
  v193 = v9;
  v83 = &v9[v82];
  v84 = &v203[v82];
  v200(&v9[v82], &v203[v82], v192);
  v85 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v197(&v83[v85[5]], &v84[v85[5]], v198);
  v23(&v83[v85[6]], &v84[v85[6]], v22);
  v23(&v83[v85[7]], &v84[v85[7]], v22);
  v86 = v85[8];
  v87 = &v83[v86];
  v88 = &v84[v86];
  v200(&v83[v86], &v84[v86], v192);
  ((void (*)(char *, char *, uint64_t))v187)(&v87[v189[5]], &v88[v189[5]], v188);
  v89 = v189[6];
  v90 = &v87[v89];
  v91 = &v88[v89];
  v92 = *((_QWORD *)v91 + 1);
  *(_QWORD *)v90 = *(_QWORD *)v91;
  *((_QWORD *)v90 + 1) = v92;
  v93 = v189[7];
  v94 = &v87[v93];
  v95 = &v88[v93];
  v96 = *((_QWORD *)v95 + 1);
  *(_QWORD *)v94 = *(_QWORD *)v95;
  *((_QWORD *)v94 + 1) = v96;
  v87[v189[8]] = v88[v189[8]];
  v87[v189[9]] = v88[v189[9]];
  v87[v189[10]] = v88[v189[10]];
  v97 = v85[9];
  v98 = &v83[v97];
  v99 = &v84[v97];
  v100 = type metadata accessor for Precipitation(0);
  v101 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 16);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v96);
  v101(v98, v99, v100);
  *(_QWORD *)&v83[v85[10]] = *(_QWORD *)&v84[v85[10]];
  v102 = v85[11];
  v103 = &v83[v102];
  v104 = &v84[v102];
  v105 = *((_QWORD *)v104 + 1);
  *(_QWORD *)v103 = *(_QWORD *)v104;
  *((_QWORD *)v103 + 1) = v105;
  v106 = v85[12];
  v107 = &v83[v106];
  v108 = &v84[v106];
  v109 = *((_QWORD *)v108 + 1);
  *(_QWORD *)v107 = *(_QWORD *)v108;
  *((_QWORD *)v107 + 1) = v109;
  v110 = v85[13];
  v111 = &v83[v110];
  v112 = &v84[v110];
  v113 = *((_QWORD *)v112 + 1);
  *(_QWORD *)v111 = *(_QWORD *)v112;
  *((_QWORD *)v111 + 1) = v113;
  v114 = v85[14];
  v115 = &v83[v114];
  v116 = &v84[v114];
  v117 = *((_QWORD *)v116 + 1);
  *(_QWORD *)v115 = *(_QWORD *)v116;
  *((_QWORD *)v115 + 1) = v117;
  v118 = v85[15];
  v199 = &v84[v118];
  v201 = &v83[v118];
  v119 = type metadata accessor for TemperatureScaleConfiguration(0);
  v120 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 16);
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRetain(v117);
  v120(v201, v199, v119);
  v121 = v85[16];
  v122 = &v83[v121];
  v123 = &v84[v121];
  v124 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v123, 1, v124))
  {
    v125 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(v122, v123, v124);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v122, 0, 1, v124);
  }
  v126 = v85[17];
  v127 = &v83[v126];
  v128 = &v84[v126];
  v129 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128, 1, v129))
  {
    v130 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 16))(v127, v128, v129);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v127, 0, 1, v129);
  }
  ((void (*)(char *, char *, uint64_t))v190)(&v83[v85[18]], &v84[v85[18]], v191);
  *(_QWORD *)&v83[v85[19]] = *(_QWORD *)&v84[v85[19]];
  v131 = v81[6];
  v132 = &v193[v131];
  v133 = v203;
  v134 = &v203[v131];
  v135 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v134, 1, (uint64_t)v135))
  {
    v136 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v132, v134, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
  }
  else
  {
    v137 = *((_QWORD *)v134 + 1);
    *(_QWORD *)v132 = *(_QWORD *)v134;
    *((_QWORD *)v132 + 1) = v137;
    v138 = v135[5];
    v139 = &v132[v138];
    v140 = &v134[v138];
    v141 = type metadata accessor for AttributedString(0);
    v142 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 16);
    swift_bridgeObjectRetain(v137);
    v142(v139, v140, v141);
    v143 = v135[6];
    v144 = &v132[v143];
    v145 = &v134[v143];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v134[v143], 1, v141))
    {
      v146 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
    }
    else
    {
      v142(v144, v145, v141);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v144, 0, 1, v141);
    }
    v147 = v135[7];
    v148 = &v132[v147];
    v149 = &v134[v147];
    v150 = *((_QWORD *)v149 + 1);
    *(_QWORD *)v148 = *(_QWORD *)v149;
    *((_QWORD *)v148 + 1) = v150;
    swift_bridgeObjectRetain(v150);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v132, 0, 1, (uint64_t)v135);
    v133 = v203;
  }
  v151 = v81[7];
  v152 = &v193[v151];
  v153 = &v133[v151];
  v154 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v154 - 8) + 16))(v152, v153, v154);
  v155 = v81[8];
  v156 = &v193[v155];
  v157 = &v133[v155];
  v158 = *((_QWORD *)v157 + 1);
  *(_QWORD *)v156 = *(_QWORD *)v157;
  *((_QWORD *)v156 + 1) = v158;
  v193[v81[9]] = v133[v81[9]];
  v193[v81[10]] = v133[v81[10]];
  v159 = v81[11];
  v202 = *(_QWORD *)&v133[v159];
  *(_QWORD *)&v193[v159] = v202;
  v160 = v81[12];
  v161 = &v193[v160];
  v162 = &v133[v160];
  v163 = *((_QWORD *)v162 + 1);
  *(_QWORD *)v161 = *(_QWORD *)v162;
  *((_QWORD *)v161 + 1) = v163;
  v164 = v81[13];
  v165 = *(_QWORD *)&v133[v164];
  *(_QWORD *)&v193[v164] = v165;
  v166 = v81[14];
  v167 = *(_QWORD *)&v133[v166];
  *(_QWORD *)&v193[v166] = v167;
  v168 = v81[15];
  v169 = *(_QWORD *)&v133[v168];
  *(_QWORD *)&v193[v168] = v169;
  v170 = v81[16];
  v204 = *(_QWORD *)&v133[v170];
  *(_QWORD *)&v193[v170] = v204;
  v193[v81[17]] = v133[v81[17]];
  v171 = v81[18];
  v172 = *(_QWORD *)&v133[v171];
  *(_QWORD *)&v193[v171] = v172;
  v173 = v81[19];
  v174 = *(_QWORD *)&v133[v173];
  *(_QWORD *)&v193[v173] = v174;
  *(_QWORD *)&v193[v81[20]] = *(_QWORD *)&v133[v81[20]];
  v193[v81[21]] = v133[v81[21]];
  v193[v81[22]] = v133[v81[22]];
  v193[v81[23]] = v133[v81[23]];
  v193[v81[24]] = v133[v81[24]];
  v175 = v81[25];
  v176 = &v193[v175];
  v177 = &v133[v175];
  v178 = *((_QWORD *)v177 + 1);
  *(_QWORD *)v176 = *(_QWORD *)v177;
  *((_QWORD *)v176 + 1) = v178;
  v193[v81[26]] = v133[v81[26]];
  *(_QWORD *)&v193[v81[27]] = *(_QWORD *)&v133[v81[27]];
  *(_QWORD *)&v193[v81[28]] = *(_QWORD *)&v133[v81[28]];
  v179 = *(int *)(a3 + 40);
  v180 = (_QWORD *)((char *)a1 + v179);
  v181 = (_QWORD *)((char *)a2 + v179);
  swift_bridgeObjectRetain(v158);
  swift_retain(v202);
  swift_bridgeObjectRetain(v163);
  swift_retain(v165);
  swift_retain(v167);
  swift_retain(v169);
  swift_retain(v204);
  swift_retain(v172);
  swift_retain(v174);
  swift_bridgeObjectRetain(v178);
  v182 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v181, v182) == 1)
  {
    v183 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v183 - 8) + 16))(v180, v181, v183);
    v184 = 1;
  }
  else
  {
    v185 = *v181;
    *v180 = *v181;
    swift_retain(v185);
    v184 = 0;
  }
  swift_storeEnumTagMultiPayload(v180, v182, v184);
  return a1;
}

_QWORD *sub_10005C080(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *);
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  int *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  int *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  int *v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(char *, char *, uint64_t);
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  void (*v195)(char *, char *, uint64_t);
  uint64_t v196;
  char *v197;
  int v198;
  size_t v199;
  void *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  void (*v261)(char *, char *, uint64_t);
  _QWORD *v262;
  void (*v263)(char *, char *);
  uint64_t v264;
  uint64_t v265;
  char *v266;
  void (*v267)(char *, char *, uint64_t);
  void (*v268)(char *, char *, uint64_t);
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *__src;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[6] = a2[6];
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[8] = a2[8];
  v14 = a2[9];
  v15 = a1[9];
  a1[9] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v259 = a3;
  v16 = *(int *)(a3 + 36);
  v17 = (char *)a1 + v16;
  v262 = a2;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for UUID(0);
  v20 = *(void (**)(char *, char *))(*(_QWORD *)(v19 - 8) + 24);
  __src = (void *)v19;
  v20(v17, v18);
  v21 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v22 = v21[5];
  v23 = &v17[v22];
  v24 = &v18[v22];
  v25 = type metadata accessor for Date(0);
  v265 = *(_QWORD *)(v25 - 8);
  v26 = *(void (**)(char *, char *, uint64_t))(v265 + 24);
  v26(v23, v24, v25);
  v268 = v26;
  v270 = v25;
  v26(&v17[v21[6]], &v18[v21[6]], v25);
  v27 = v21[7];
  v28 = &v17[v27];
  v29 = &v18[v27];
  v30 = sub_100005D40(&qword_1001BF090);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(void (**)(char *, char *, uint64_t))(v31 + 24);
  v32(v28, v29, v30);
  v267 = v32;
  v32(&v17[v21[8]], &v18[v21[8]], v30);
  v33 = v21[9];
  v34 = &v17[v33];
  v35 = &v18[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  v37 = *((_QWORD *)v34 + 1);
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v38 = v21[10];
  v39 = &v17[v38];
  v40 = &v18[v38];
  LODWORD(v32) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v38], 1, v30);
  v41 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v40, 1, v30);
  if ((_DWORD)v32)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v39, v40, v30);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v30);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v39, v30);
LABEL_6:
    v42 = sub_100005D40(&qword_1001BF098);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_7;
  }
  v267(v39, v40, v30);
LABEL_7:
  v43 = v21[11];
  v44 = &v17[v43];
  v45 = &v18[v43];
  v46 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v43], 1, v30);
  v47 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v45, 1, v30);
  v260 = a1;
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v44, v45, v30);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v44, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v44, v30);
LABEL_12:
    v48 = sub_100005D40(&qword_1001BF098);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_13;
  }
  v267(v44, v45, v30);
LABEL_13:
  v49 = v21[12];
  v50 = &v17[v49];
  v51 = &v18[v49];
  ((void (*)(char *, char *, void *))v20)(&v17[v49], &v18[v49], __src);
  v52 = (int *)type metadata accessor for ConditionViewModel(0);
  v53 = v52[5];
  v54 = &v50[v53];
  v55 = &v51[v53];
  v56 = type metadata accessor for WeatherCondition(0);
  v263 = *(void (**)(char *, char *))(*(_QWORD *)(v56 - 8) + 24);
  v264 = v56;
  v263(v54, v55);
  v57 = v52[6];
  v58 = &v50[v57];
  v59 = &v51[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v60 = *((_QWORD *)v59 + 1);
  v61 = *((_QWORD *)v58 + 1);
  *((_QWORD *)v58 + 1) = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v61);
  v62 = v52[7];
  v63 = &v50[v62];
  v64 = &v51[v62];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v65 = *((_QWORD *)v64 + 1);
  v66 = *((_QWORD *)v63 + 1);
  *((_QWORD *)v63 + 1) = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  v50[v52[8]] = v51[v52[8]];
  v50[v52[9]] = v51[v52[9]];
  v50[v52[10]] = v51[v52[10]];
  *(_QWORD *)&v17[v21[13]] = *(_QWORD *)&v18[v21[13]];
  v67 = v21[14];
  v68 = &v17[v67];
  v69 = &v18[v67];
  v70 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 24))(v68, v69, v70);
  v71 = v21[15];
  v72 = &v17[v71];
  v73 = &v18[v71];
  LODWORD(v68) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v71], 1, v270);
  v74 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v73, 1, v270);
  if ((_DWORD)v68)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v265 + 16))(v72, v73, v270);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v72, 0, 1, v270);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v265 + 8))(v72, v270);
LABEL_18:
    v75 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_19;
  }
  v268(v72, v73, v270);
LABEL_19:
  v76 = v21[16];
  v77 = &v17[v76];
  v78 = &v18[v76];
  v79 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v76], 1, v270);
  v80 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v78, 1, v270);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v265 + 16))(v77, v78, v270);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v77, 0, 1, v270);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v265 + 8))(v77, v270);
LABEL_24:
    v81 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    goto LABEL_25;
  }
  v268(v77, v78, v270);
LABEL_25:
  v82 = v21[17];
  v83 = &v17[v82];
  v84 = &v18[v82];
  v85 = type metadata accessor for UVIndex(0);
  v261 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 24);
  v261(v83, v84, v85);
  v86 = v21[18];
  v87 = &v17[v86];
  v88 = &v18[v86];
  v89 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 24))(v87, v88, v89);
  *(_QWORD *)&v17[v21[19]] = *(_QWORD *)&v18[v21[19]];
  v90 = v21[20];
  v91 = (uint64_t)&v17[v90];
  v92 = &v18[v90];
  v93 = *(_QWORD *)&v17[v90 + 8];
  v94 = *(_QWORD *)&v18[v90 + 8];
  if (v93)
  {
    if (v94)
    {
      *(_QWORD *)v91 = *(_QWORD *)v92;
      v95 = *((_QWORD *)v92 + 1);
      *(_QWORD *)(v91 + 8) = v95;
      swift_bridgeObjectRetain(v95);
      swift_bridgeObjectRelease(v93);
      v96 = *((_QWORD *)v92 + 2);
      v97 = *((_QWORD *)v92 + 3);
      v98 = v92[32];
      sub_100006E58(v96, v97, v98);
      v99 = *(_QWORD *)(v91 + 16);
      v100 = *(_QWORD *)(v91 + 24);
      v101 = *(_BYTE *)(v91 + 32);
      *(_QWORD *)(v91 + 16) = v96;
      *(_QWORD *)(v91 + 24) = v97;
      *(_BYTE *)(v91 + 32) = v98;
      sub_100007458(v99, v100, v101);
    }
    else
    {
      sub_100008EC4(v91);
      v106 = v92[32];
      v107 = *((_OWORD *)v92 + 1);
      *(_OWORD *)v91 = *(_OWORD *)v92;
      *(_OWORD *)(v91 + 16) = v107;
      *(_BYTE *)(v91 + 32) = v106;
    }
  }
  else if (v94)
  {
    *(_QWORD *)v91 = *(_QWORD *)v92;
    v102 = *((_QWORD *)v92 + 1);
    *(_QWORD *)(v91 + 8) = v102;
    v103 = *((_QWORD *)v92 + 2);
    v104 = *((_QWORD *)v92 + 3);
    v105 = v92[32];
    swift_bridgeObjectRetain(v102);
    sub_100006E58(v103, v104, v105);
    *(_QWORD *)(v91 + 16) = v103;
    *(_QWORD *)(v91 + 24) = v104;
    *(_BYTE *)(v91 + 32) = v105;
  }
  else
  {
    v108 = *(_OWORD *)v92;
    v109 = *((_OWORD *)v92 + 1);
    *(_BYTE *)(v91 + 32) = v92[32];
    *(_OWORD *)v91 = v108;
    *(_OWORD *)(v91 + 16) = v109;
  }
  v110 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v111 = v110[5];
  v112 = &v17[v111];
  v266 = v18;
  v113 = &v18[v111];
  ((void (*)(char *, char *, void *))v20)(&v17[v111], &v18[v111], __src);
  v114 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v268(&v112[v114[5]], &v113[v114[5]], v270);
  v267(&v112[v114[6]], &v113[v114[6]], v30);
  v267(&v112[v114[7]], &v113[v114[7]], v30);
  v115 = v114[8];
  v116 = &v112[v115];
  v117 = &v113[v115];
  ((void (*)(char *, char *, void *))v20)(&v112[v115], &v113[v115], __src);
  ((void (*)(char *, char *, uint64_t))v263)(&v116[v52[5]], &v117[v52[5]], v264);
  v118 = v52[6];
  v119 = &v116[v118];
  v120 = &v117[v118];
  *(_QWORD *)v119 = *(_QWORD *)v120;
  v121 = *((_QWORD *)v120 + 1);
  v122 = *((_QWORD *)v119 + 1);
  *((_QWORD *)v119 + 1) = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  v123 = v52[7];
  v124 = &v116[v123];
  v125 = &v117[v123];
  *(_QWORD *)v124 = *(_QWORD *)v125;
  v126 = *((_QWORD *)v125 + 1);
  v127 = *((_QWORD *)v124 + 1);
  *((_QWORD *)v124 + 1) = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  v116[v52[8]] = v117[v52[8]];
  v116[v52[9]] = v117[v52[9]];
  v116[v52[10]] = v117[v52[10]];
  v128 = v114[9];
  v129 = &v112[v128];
  v130 = &v113[v128];
  v131 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 24))(v129, v130, v131);
  *(_QWORD *)&v112[v114[10]] = *(_QWORD *)&v113[v114[10]];
  v132 = v114[11];
  v133 = &v112[v132];
  v134 = &v113[v132];
  *(_QWORD *)v133 = *(_QWORD *)v134;
  v135 = *((_QWORD *)v134 + 1);
  v136 = *((_QWORD *)v133 + 1);
  *((_QWORD *)v133 + 1) = v135;
  swift_bridgeObjectRetain(v135);
  swift_bridgeObjectRelease(v136);
  v137 = v114[12];
  v138 = &v112[v137];
  v139 = &v113[v137];
  *(_QWORD *)v138 = *(_QWORD *)v139;
  v140 = *((_QWORD *)v139 + 1);
  v141 = *((_QWORD *)v138 + 1);
  *((_QWORD *)v138 + 1) = v140;
  swift_bridgeObjectRetain(v140);
  swift_bridgeObjectRelease(v141);
  v142 = v114[13];
  v143 = &v112[v142];
  v144 = &v113[v142];
  *(_QWORD *)v143 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  v146 = *((_QWORD *)v143 + 1);
  *((_QWORD *)v143 + 1) = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146);
  v147 = v114[14];
  v148 = &v112[v147];
  v149 = &v113[v147];
  *(_QWORD *)v148 = *(_QWORD *)v149;
  v150 = *((_QWORD *)v149 + 1);
  v151 = *((_QWORD *)v148 + 1);
  *((_QWORD *)v148 + 1) = v150;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRelease(v151);
  v152 = v114[15];
  v153 = &v112[v152];
  v154 = &v113[v152];
  v155 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 24))(v153, v154, v155);
  v156 = v114[16];
  v157 = &v112[v156];
  v158 = &v113[v156];
  v159 = type metadata accessor for SunEvents(0);
  LODWORD(v153) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157, 1, v159);
  v160 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, v159);
  if ((_DWORD)v153)
  {
    if (!v160)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 16))(v157, v158, v159);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v157, 0, 1, v159);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v161 = *(_QWORD *)(v159 - 8);
  if (v160)
  {
    (*(void (**)(char *, uint64_t))(v161 + 8))(v157, v159);
LABEL_41:
    v162 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v161 + 24))(v157, v158, v159);
LABEL_42:
  v163 = v114[17];
  v164 = &v112[v163];
  v165 = &v113[v163];
  v166 = type metadata accessor for MoonEvents(0);
  v167 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v164, 1, v166);
  v168 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v165, 1, v166);
  if (v167)
  {
    if (!v168)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 16))(v164, v165, v166);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v164, 0, 1, v166);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v169 = *(_QWORD *)(v166 - 8);
  if (v168)
  {
    (*(void (**)(char *, uint64_t))(v169 + 8))(v164, v166);
LABEL_47:
    v170 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(char *, char *, uint64_t))(v169 + 24))(v164, v165, v166);
LABEL_48:
  v261(&v112[v114[18]], &v113[v114[18]], v85);
  *(_QWORD *)&v112[v114[19]] = *(_QWORD *)&v113[v114[19]];
  v171 = v110[6];
  v172 = &v17[v171];
  v173 = &v266[v171];
  v174 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v175 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v172, 1, (uint64_t)v174);
  v176 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v173, 1, (uint64_t)v174);
  if (v175)
  {
    if (!v176)
    {
      *(_QWORD *)v172 = *(_QWORD *)v173;
      v177 = *((_QWORD *)v173 + 1);
      *((_QWORD *)v172 + 1) = v177;
      v178 = v174[5];
      v179 = &v172[v178];
      v180 = &v173[v178];
      v181 = type metadata accessor for AttributedString(0);
      v182 = v177;
      v183 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 16);
      swift_bridgeObjectRetain(v182);
      v183(v179, v180, v181);
      v184 = v174[6];
      v185 = &v172[v184];
      v186 = &v173[v184];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v173[v184], 1, v181))
      {
        v187 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
      }
      else
      {
        v183(v185, v186, v181);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v185, 0, 1, v181);
      }
      v201 = v174[7];
      v202 = &v172[v201];
      v203 = &v173[v201];
      *(_QWORD *)v202 = *(_QWORD *)v203;
      v204 = *((_QWORD *)v203 + 1);
      *((_QWORD *)v202 + 1) = v204;
      swift_bridgeObjectRetain(v204);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v172, 0, 1, (uint64_t)v174);
      goto LABEL_62;
    }
LABEL_54:
    v188 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v172, v173, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
LABEL_62:
    v205 = v260;
    goto LABEL_63;
  }
  if (v176)
  {
    sub_100011894((uint64_t)v172, type metadata accessor for RainInlineContentViewModel);
    goto LABEL_54;
  }
  *(_QWORD *)v172 = *(_QWORD *)v173;
  v189 = *((_QWORD *)v173 + 1);
  v190 = *((_QWORD *)v172 + 1);
  *((_QWORD *)v172 + 1) = v189;
  swift_bridgeObjectRetain(v189);
  swift_bridgeObjectRelease(v190);
  v191 = v174[5];
  v192 = &v172[v191];
  v193 = &v173[v191];
  v194 = type metadata accessor for AttributedString(0);
  v269 = *(_QWORD *)(v194 - 8);
  v195 = *(void (**)(char *, char *, uint64_t))(v269 + 24);
  v195(v192, v193, v194);
  v196 = v174[6];
  v197 = &v173[v196];
  v271 = (uint64_t)&v172[v196];
  LODWORD(v192) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v172[v196], 1, v194);
  v198 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v197, 1, v194);
  if ((_DWORD)v192)
  {
    if (!v198)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v269 + 16))(v271, v197, v194);
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v271, 0, 1, v194);
      goto LABEL_74;
    }
    v199 = *(_QWORD *)(*(_QWORD *)(sub_100005D40(&qword_1001BF0B8) - 8) + 64);
    v200 = (void *)v271;
  }
  else
  {
    if (!v198)
    {
      v195((char *)v271, v197, v194);
      goto LABEL_74;
    }
    (*(void (**)(uint64_t, uint64_t))(v269 + 8))(v271, v194);
    v199 = *(_QWORD *)(*(_QWORD *)(sub_100005D40(&qword_1001BF0B8) - 8) + 64);
    v200 = (void *)v271;
  }
  memcpy(v200, v197, v199);
LABEL_74:
  v205 = v260;
  v254 = v174[7];
  v255 = &v172[v254];
  v256 = &v173[v254];
  *(_QWORD *)v255 = *(_QWORD *)v256;
  v257 = *((_QWORD *)v256 + 1);
  v258 = *((_QWORD *)v255 + 1);
  *((_QWORD *)v255 + 1) = v257;
  swift_bridgeObjectRetain(v257);
  swift_bridgeObjectRelease(v258);
LABEL_63:
  v206 = v110[7];
  v207 = &v17[v206];
  v208 = &v266[v206];
  v209 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v209 - 8) + 24))(v207, v208, v209);
  v210 = v110[8];
  v211 = &v17[v210];
  v212 = &v266[v210];
  *(_QWORD *)v211 = *(_QWORD *)v212;
  v213 = *((_QWORD *)v212 + 1);
  v214 = *((_QWORD *)v211 + 1);
  *((_QWORD *)v211 + 1) = v213;
  swift_bridgeObjectRetain(v213);
  swift_bridgeObjectRelease(v214);
  v17[v110[9]] = v266[v110[9]];
  v17[v110[10]] = v266[v110[10]];
  v215 = v110[11];
  v216 = *(_QWORD *)&v17[v215];
  v217 = *(_QWORD *)&v266[v215];
  *(_QWORD *)&v17[v215] = v217;
  swift_retain(v217);
  swift_release(v216);
  v218 = v110[12];
  v219 = &v17[v218];
  v220 = &v266[v218];
  *(_QWORD *)v219 = *(_QWORD *)v220;
  v221 = *((_QWORD *)v220 + 1);
  v222 = *((_QWORD *)v219 + 1);
  *((_QWORD *)v219 + 1) = v221;
  swift_bridgeObjectRetain(v221);
  swift_bridgeObjectRelease(v222);
  v223 = v110[13];
  v224 = *(_QWORD *)&v266[v223];
  v225 = *(_QWORD *)&v17[v223];
  *(_QWORD *)&v17[v223] = v224;
  swift_retain(v224);
  swift_release(v225);
  v226 = v110[14];
  v227 = *(_QWORD *)&v266[v226];
  v228 = *(_QWORD *)&v17[v226];
  *(_QWORD *)&v17[v226] = v227;
  swift_retain(v227);
  swift_release(v228);
  v229 = v110[15];
  v230 = *(_QWORD *)&v266[v229];
  v231 = *(_QWORD *)&v17[v229];
  *(_QWORD *)&v17[v229] = v230;
  swift_retain(v230);
  swift_release(v231);
  v232 = v110[16];
  v233 = *(_QWORD *)&v266[v232];
  v234 = *(_QWORD *)&v17[v232];
  *(_QWORD *)&v17[v232] = v233;
  swift_retain(v233);
  swift_release(v234);
  v17[v110[17]] = v266[v110[17]];
  v235 = v110[18];
  v236 = *(_QWORD *)&v266[v235];
  v237 = *(_QWORD *)&v17[v235];
  *(_QWORD *)&v17[v235] = v236;
  swift_retain(v236);
  swift_release(v237);
  v238 = v110[19];
  v239 = *(_QWORD *)&v266[v238];
  v240 = *(_QWORD *)&v17[v238];
  *(_QWORD *)&v17[v238] = v239;
  swift_retain(v239);
  swift_release(v240);
  *(_QWORD *)&v17[v110[20]] = *(_QWORD *)&v266[v110[20]];
  v17[v110[21]] = v266[v110[21]];
  v17[v110[22]] = v266[v110[22]];
  v17[v110[23]] = v266[v110[23]];
  v17[v110[24]] = v266[v110[24]];
  v241 = v110[25];
  v242 = &v17[v241];
  v243 = &v266[v241];
  *(_QWORD *)v242 = *(_QWORD *)v243;
  v244 = *((_QWORD *)v243 + 1);
  v245 = *((_QWORD *)v242 + 1);
  *((_QWORD *)v242 + 1) = v244;
  swift_bridgeObjectRetain(v244);
  swift_bridgeObjectRelease(v245);
  v17[v110[26]] = v266[v110[26]];
  *(_QWORD *)&v17[v110[27]] = *(_QWORD *)&v266[v110[27]];
  *(_QWORD *)&v17[v110[28]] = *(_QWORD *)&v266[v110[28]];
  if (v205 != v262)
  {
    v246 = *(int *)(v259 + 40);
    v247 = (_QWORD *)((char *)v205 + v246);
    v248 = (_QWORD *)((char *)v262 + v246);
    sub_100016904((uint64_t)v205 + v246, &qword_1001BF0C8);
    v249 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v248, v249) == 1)
    {
      v250 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v250 - 8) + 16))(v247, v248, v250);
      v251 = 1;
    }
    else
    {
      v252 = *v248;
      *v247 = *v248;
      swift_retain(v252);
      v251 = 0;
    }
    swift_storeEnumTagMultiPayload(v247, v249, v251);
  }
  return v205;
}

_OWORD *sub_10005D0DC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int128 v62;
  int *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  int *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  void (*v113)(char *, char *);
  uint64_t v114;
  int *v115;
  void (*v116)(char *, char *);
  uint64_t v117;
  void (*v118)(char *, char *, uint64_t);
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t);
  void (*v124)(char *, char *, uint64_t);

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  v5 = *(int *)(a3 + 36);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(v6, v7, v8);
  v10 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v11 = v10[5];
  v12 = &v6[v11];
  v13 = &v7[v11];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v16 = v14;
  v124 = v15;
  v15(&v6[v10[6]], &v7[v10[6]], v14);
  v17 = v10[7];
  v18 = &v6[v17];
  v19 = &v7[v17];
  v20 = sub_100005D40(&qword_1001BF090);
  v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
  v21(v18, v19, v20);
  v21(&v6[v10[8]], &v7[v10[8]], v20);
  *(_OWORD *)&v6[v10[9]] = *(_OWORD *)&v7[v10[9]];
  v22 = v10[10];
  v23 = &v6[v22];
  v24 = &v7[v22];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v7[v22], 1, v20))
  {
    v25 = sub_100005D40(&qword_1001BF098);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v21(v23, v24, v20);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v20);
  }
  v26 = v10[11];
  v27 = &v6[v26];
  v28 = &v7[v26];
  v118 = v21;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v7[v26], 1, v20))
  {
    v29 = sub_100005D40(&qword_1001BF098);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v21(v27, v28, v20);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v20);
  }
  v30 = v10[12];
  v31 = &v6[v30];
  v32 = &v7[v30];
  v119 = v8;
  v120 = v9;
  v9(&v6[v30], &v7[v30], v8);
  v33 = (int *)type metadata accessor for ConditionViewModel(0);
  v34 = v33[5];
  v35 = &v31[v34];
  v36 = &v32[v34];
  v37 = type metadata accessor for WeatherCondition(0);
  v113 = *(void (**)(char *, char *))(*(_QWORD *)(v37 - 8) + 32);
  v114 = v37;
  v113(v35, v36);
  *(_OWORD *)&v31[v33[6]] = *(_OWORD *)&v32[v33[6]];
  *(_OWORD *)&v31[v33[7]] = *(_OWORD *)&v32[v33[7]];
  v31[v33[8]] = v32[v33[8]];
  v31[v33[9]] = v32[v33[9]];
  v115 = v33;
  v31[v33[10]] = v32[v33[10]];
  *(_QWORD *)&v6[v10[13]] = *(_QWORD *)&v7[v10[13]];
  v38 = v10[14];
  v39 = &v6[v38];
  v40 = &v7[v38];
  v41 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
  v42 = v10[15];
  v43 = &v6[v42];
  v44 = &v7[v42];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v7[v42], 1, v16))
  {
    v45 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    v46 = v124;
  }
  else
  {
    v46 = v124;
    v124(v43, v44, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v43, 0, 1, v16);
  }
  v47 = v10[16];
  v48 = &v6[v47];
  v49 = &v7[v47];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v7[v47], 1, v16))
  {
    v50 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v46(v48, v49, v16);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v48, 0, 1, v16);
  }
  v51 = v10[17];
  v52 = &v6[v51];
  v53 = &v7[v51];
  v54 = type metadata accessor for UVIndex(0);
  v116 = *(void (**)(char *, char *))(*(_QWORD *)(v54 - 8) + 32);
  v117 = v54;
  v116(v52, v53);
  v55 = v10[18];
  v56 = &v6[v55];
  v57 = &v7[v55];
  v58 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v56, v57, v58);
  *(_QWORD *)&v6[v10[19]] = *(_QWORD *)&v7[v10[19]];
  v59 = v10[20];
  v60 = &v6[v59];
  v61 = &v7[v59];
  v60[32] = v61[32];
  v62 = *((_OWORD *)v61 + 1);
  *(_OWORD *)v60 = *(_OWORD *)v61;
  *((_OWORD *)v60 + 1) = v62;
  v63 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v64 = v63[5];
  v65 = &v6[v64];
  v66 = &v7[v64];
  v120(&v6[v64], &v7[v64], v119);
  v67 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v124(&v65[v67[5]], &v66[v67[5]], v16);
  v118(&v65[v67[6]], &v66[v67[6]], v20);
  v118(&v65[v67[7]], &v66[v67[7]], v20);
  v68 = v67[8];
  v69 = &v65[v68];
  v70 = &v66[v68];
  v120(&v65[v68], &v66[v68], v119);
  ((void (*)(char *, char *, uint64_t))v113)(&v69[v115[5]], &v70[v115[5]], v114);
  *(_OWORD *)&v69[v115[6]] = *(_OWORD *)&v70[v115[6]];
  *(_OWORD *)&v69[v115[7]] = *(_OWORD *)&v70[v115[7]];
  v69[v115[8]] = v70[v115[8]];
  v69[v115[9]] = v70[v115[9]];
  v69[v115[10]] = v70[v115[10]];
  v71 = v67[9];
  v72 = &v65[v71];
  v73 = &v66[v71];
  v74 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
  *(_QWORD *)&v65[v67[10]] = *(_QWORD *)&v66[v67[10]];
  *(_OWORD *)&v65[v67[11]] = *(_OWORD *)&v66[v67[11]];
  *(_OWORD *)&v65[v67[12]] = *(_OWORD *)&v66[v67[12]];
  *(_OWORD *)&v65[v67[13]] = *(_OWORD *)&v66[v67[13]];
  *(_OWORD *)&v65[v67[14]] = *(_OWORD *)&v66[v67[14]];
  v75 = v67[15];
  v76 = &v65[v75];
  v77 = &v66[v75];
  v78 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v76, v77, v78);
  v79 = v67[16];
  v80 = &v65[v79];
  v81 = &v66[v79];
  v82 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v81, 1, v82))
  {
    v83 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v80, v81, v82);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v80, 0, 1, v82);
  }
  v84 = v67[17];
  v85 = &v65[v84];
  v86 = &v66[v84];
  v87 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86, 1, v87))
  {
    v88 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32))(v85, v86, v87);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v85, 0, 1, v87);
  }
  ((void (*)(char *, char *, uint64_t))v116)(&v65[v67[18]], &v66[v67[18]], v117);
  *(_QWORD *)&v65[v67[19]] = *(_QWORD *)&v66[v67[19]];
  v89 = v63[6];
  v90 = &v6[v89];
  v91 = &v7[v89];
  v92 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v91, 1, (uint64_t)v92))
  {
    v93 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v90 = *(_OWORD *)v91;
    v94 = v92[5];
    v95 = &v90[v94];
    v96 = &v91[v94];
    v97 = type metadata accessor for AttributedString(0);
    v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 32);
    v98(v95, v96, v97);
    v99 = v92[6];
    v100 = &v90[v99];
    v101 = &v91[v99];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v91[v99], 1, v97))
    {
      v102 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    }
    else
    {
      v98(v100, v101, v97);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v100, 0, 1, v97);
    }
    *(_OWORD *)&v90[v92[7]] = *(_OWORD *)&v91[v92[7]];
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v90, 0, 1, (uint64_t)v92);
  }
  v103 = v63[7];
  v104 = &v6[v103];
  v105 = &v7[v103];
  v106 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 32))(v104, v105, v106);
  *(_OWORD *)&v6[v63[8]] = *(_OWORD *)&v7[v63[8]];
  v6[v63[9]] = v7[v63[9]];
  v6[v63[10]] = v7[v63[10]];
  *(_QWORD *)&v6[v63[11]] = *(_QWORD *)&v7[v63[11]];
  *(_OWORD *)&v6[v63[12]] = *(_OWORD *)&v7[v63[12]];
  *(_QWORD *)&v6[v63[13]] = *(_QWORD *)&v7[v63[13]];
  *(_QWORD *)&v6[v63[14]] = *(_QWORD *)&v7[v63[14]];
  *(_QWORD *)&v6[v63[15]] = *(_QWORD *)&v7[v63[15]];
  *(_QWORD *)&v6[v63[16]] = *(_QWORD *)&v7[v63[16]];
  v6[v63[17]] = v7[v63[17]];
  *(_QWORD *)&v6[v63[18]] = *(_QWORD *)&v7[v63[18]];
  *(_QWORD *)&v6[v63[19]] = *(_QWORD *)&v7[v63[19]];
  *(_QWORD *)&v6[v63[20]] = *(_QWORD *)&v7[v63[20]];
  v6[v63[21]] = v7[v63[21]];
  v6[v63[22]] = v7[v63[22]];
  v6[v63[23]] = v7[v63[23]];
  v6[v63[24]] = v7[v63[24]];
  *(_OWORD *)&v6[v63[25]] = *(_OWORD *)&v7[v63[25]];
  v6[v63[26]] = v7[v63[26]];
  *(_QWORD *)&v6[v63[27]] = *(_QWORD *)&v7[v63[27]];
  *(_QWORD *)&v6[v63[28]] = *(_QWORD *)&v7[v63[28]];
  v107 = *(int *)(a3 + 40);
  v108 = (char *)a1 + v107;
  v109 = (char *)a2 + v107;
  v110 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v109, v110) == 1)
  {
    v111 = type metadata accessor for Font.Context(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v111 - 8) + 32))(v108, v109, v111);
    swift_storeEnumTagMultiPayload(v108, v110, 1);
  }
  else
  {
    memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_10005DA74(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *);
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  int *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  int *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  int *v173;
  int v174;
  int v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  void (*v181)(char *, char *, uint64_t);
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  void (*v193)(char *, char *, uint64_t);
  uint64_t v194;
  char *v195;
  int v196;
  size_t v197;
  void *v198;
  _QWORD *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v242;
  char *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  void (*v250)(char *, char *, uint64_t);
  uint64_t v251;
  _QWORD *v252;
  void (*v253)(char *, char *);
  uint64_t v254;
  uint64_t v255;
  char *v256;
  void (*v257)(char *, char *, uint64_t);
  void (*v258)(char *, char *, uint64_t);
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void *__src;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[6] = a2[6];
  a1[7] = v12;
  swift_bridgeObjectRelease(v13);
  v14 = a2[9];
  v15 = a1[9];
  a1[8] = a2[8];
  a1[9] = v14;
  swift_bridgeObjectRelease(v15);
  v248 = a3;
  v16 = *(int *)(a3 + 36);
  v17 = (char *)a1 + v16;
  v252 = a2;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for UUID(0);
  v20 = *(void (**)(char *, char *))(*(_QWORD *)(v19 - 8) + 40);
  __src = (void *)v19;
  v20(v17, v18);
  v21 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v22 = v21[5];
  v23 = &v17[v22];
  v24 = &v18[v22];
  v25 = type metadata accessor for Date(0);
  v255 = *(_QWORD *)(v25 - 8);
  v26 = *(void (**)(char *, char *, uint64_t))(v255 + 40);
  v26(v23, v24, v25);
  v258 = v26;
  v260 = v25;
  v26(&v17[v21[6]], &v18[v21[6]], v25);
  v27 = v21[7];
  v28 = &v17[v27];
  v29 = &v18[v27];
  v30 = sub_100005D40(&qword_1001BF090);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(void (**)(char *, char *, uint64_t))(v31 + 40);
  v32(v28, v29, v30);
  v257 = v32;
  v32(&v17[v21[8]], &v18[v21[8]], v30);
  v33 = v21[9];
  v34 = &v17[v33];
  v35 = &v18[v33];
  v37 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  v38 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease(v38);
  v39 = v21[10];
  v40 = &v17[v39];
  v41 = &v18[v39];
  LODWORD(v32) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v39], 1, v30);
  v42 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v41, 1, v30);
  if ((_DWORD)v32)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v40, v41, v30);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v40, 0, 1, v30);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v40, v30);
LABEL_6:
    v43 = sub_100005D40(&qword_1001BF098);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_7;
  }
  v257(v40, v41, v30);
LABEL_7:
  v44 = v21[11];
  v45 = &v17[v44];
  v46 = &v18[v44];
  v47 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v44], 1, v30);
  v48 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v46, 1, v30);
  v249 = a1;
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v45, v46, v30);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v45, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v45, v30);
LABEL_12:
    v49 = sub_100005D40(&qword_1001BF098);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_13;
  }
  v257(v45, v46, v30);
LABEL_13:
  v50 = v21[12];
  v51 = &v17[v50];
  v52 = &v18[v50];
  ((void (*)(char *, char *, void *))v20)(&v17[v50], &v18[v50], __src);
  v53 = (int *)type metadata accessor for ConditionViewModel(0);
  v54 = v53[5];
  v55 = &v51[v54];
  v56 = &v52[v54];
  v57 = type metadata accessor for WeatherCondition(0);
  v253 = *(void (**)(char *, char *))(*(_QWORD *)(v57 - 8) + 40);
  v254 = v57;
  v253(v55, v56);
  v58 = v53[6];
  v59 = &v51[v58];
  v60 = &v52[v58];
  v62 = *(_QWORD *)v60;
  v61 = *((_QWORD *)v60 + 1);
  v63 = *((_QWORD *)v59 + 1);
  *(_QWORD *)v59 = v62;
  *((_QWORD *)v59 + 1) = v61;
  swift_bridgeObjectRelease(v63);
  v64 = v53[7];
  v65 = &v51[v64];
  v66 = &v52[v64];
  v68 = *(_QWORD *)v66;
  v67 = *((_QWORD *)v66 + 1);
  v69 = *((_QWORD *)v65 + 1);
  *(_QWORD *)v65 = v68;
  *((_QWORD *)v65 + 1) = v67;
  swift_bridgeObjectRelease(v69);
  v51[v53[8]] = v52[v53[8]];
  v51[v53[9]] = v52[v53[9]];
  v51[v53[10]] = v52[v53[10]];
  *(_QWORD *)&v17[v21[13]] = *(_QWORD *)&v18[v21[13]];
  v70 = v21[14];
  v71 = &v17[v70];
  v72 = &v18[v70];
  v73 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 40))(v71, v72, v73);
  v74 = v21[15];
  v75 = &v17[v74];
  v76 = &v18[v74];
  LODWORD(v71) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v74], 1, v260);
  v77 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v76, 1, v260);
  if ((_DWORD)v71)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v255 + 32))(v75, v76, v260);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v75, 0, 1, v260);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v255 + 8))(v75, v260);
LABEL_18:
    v78 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_19;
  }
  v258(v75, v76, v260);
LABEL_19:
  v79 = v21[16];
  v80 = &v17[v79];
  v81 = &v18[v79];
  v82 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v17[v79], 1, v260);
  v83 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v81, 1, v260);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v255 + 32))(v80, v81, v260);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v80, 0, 1, v260);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v255 + 8))(v80, v260);
LABEL_24:
    v84 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_25;
  }
  v258(v80, v81, v260);
LABEL_25:
  v85 = v21[17];
  v86 = &v17[v85];
  v87 = &v18[v85];
  v88 = type metadata accessor for UVIndex(0);
  v250 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 40);
  v250(v86, v87, v88);
  v89 = v21[18];
  v90 = &v17[v89];
  v91 = &v18[v89];
  v92 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 40))(v90, v91, v92);
  *(_QWORD *)&v17[v21[19]] = *(_QWORD *)&v18[v21[19]];
  v93 = v21[20];
  v94 = (uint64_t)&v17[v93];
  v95 = &v18[v93];
  v96 = *(_QWORD *)&v17[v93 + 8];
  v251 = v88;
  if (v96)
  {
    v97 = *((_QWORD *)v95 + 1);
    if (v97)
    {
      *(_QWORD *)v94 = *(_QWORD *)v95;
      *(_QWORD *)(v94 + 8) = v97;
      swift_bridgeObjectRelease(v96);
      v98 = v95[32];
      v99 = *(_QWORD *)(v94 + 16);
      v100 = *(_QWORD *)(v94 + 24);
      v101 = *(_BYTE *)(v94 + 32);
      *(_OWORD *)(v94 + 16) = *((_OWORD *)v95 + 1);
      *(_BYTE *)(v94 + 32) = v98;
      sub_100007458(v99, v100, v101);
      goto LABEL_30;
    }
    sub_100008EC4(v94);
  }
  v102 = *((_OWORD *)v95 + 1);
  *(_OWORD *)v94 = *(_OWORD *)v95;
  *(_OWORD *)(v94 + 16) = v102;
  *(_BYTE *)(v94 + 32) = v95[32];
LABEL_30:
  v103 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v104 = v103[5];
  v105 = &v17[v104];
  v256 = v18;
  v106 = &v18[v104];
  ((void (*)(char *, char *, void *))v20)(&v17[v104], &v18[v104], __src);
  v107 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v258(&v105[v107[5]], &v106[v107[5]], v260);
  v257(&v105[v107[6]], &v106[v107[6]], v30);
  v257(&v105[v107[7]], &v106[v107[7]], v30);
  v108 = v107[8];
  v109 = &v105[v108];
  v110 = &v106[v108];
  ((void (*)(char *, char *, void *))v20)(&v105[v108], &v106[v108], __src);
  ((void (*)(char *, char *, uint64_t))v253)(&v109[v53[5]], &v110[v53[5]], v254);
  v111 = v53[6];
  v112 = &v109[v111];
  v113 = (uint64_t *)&v110[v111];
  v115 = *v113;
  v114 = v113[1];
  v116 = *((_QWORD *)v112 + 1);
  *(_QWORD *)v112 = v115;
  *((_QWORD *)v112 + 1) = v114;
  swift_bridgeObjectRelease(v116);
  v117 = v53[7];
  v118 = &v109[v117];
  v119 = (uint64_t *)&v110[v117];
  v121 = *v119;
  v120 = v119[1];
  v122 = *((_QWORD *)v118 + 1);
  *(_QWORD *)v118 = v121;
  *((_QWORD *)v118 + 1) = v120;
  swift_bridgeObjectRelease(v122);
  v109[v53[8]] = v110[v53[8]];
  v109[v53[9]] = v110[v53[9]];
  v109[v53[10]] = v110[v53[10]];
  v123 = v107[9];
  v124 = &v105[v123];
  v125 = &v106[v123];
  v126 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 40))(v124, v125, v126);
  *(_QWORD *)&v105[v107[10]] = *(_QWORD *)&v106[v107[10]];
  v127 = v107[11];
  v128 = &v105[v127];
  v129 = &v106[v127];
  v131 = *(_QWORD *)v129;
  v130 = *((_QWORD *)v129 + 1);
  v132 = *((_QWORD *)v128 + 1);
  *(_QWORD *)v128 = v131;
  *((_QWORD *)v128 + 1) = v130;
  swift_bridgeObjectRelease(v132);
  v133 = v107[12];
  v134 = &v105[v133];
  v135 = &v106[v133];
  v137 = *(_QWORD *)v135;
  v136 = *((_QWORD *)v135 + 1);
  v138 = *((_QWORD *)v134 + 1);
  *(_QWORD *)v134 = v137;
  *((_QWORD *)v134 + 1) = v136;
  swift_bridgeObjectRelease(v138);
  v139 = v107[13];
  v140 = &v105[v139];
  v141 = &v106[v139];
  v143 = *(_QWORD *)v141;
  v142 = *((_QWORD *)v141 + 1);
  v144 = *((_QWORD *)v140 + 1);
  *(_QWORD *)v140 = v143;
  *((_QWORD *)v140 + 1) = v142;
  swift_bridgeObjectRelease(v144);
  v145 = v107[14];
  v146 = &v105[v145];
  v147 = &v106[v145];
  v149 = *(_QWORD *)v147;
  v148 = *((_QWORD *)v147 + 1);
  v150 = *((_QWORD *)v146 + 1);
  *(_QWORD *)v146 = v149;
  *((_QWORD *)v146 + 1) = v148;
  swift_bridgeObjectRelease(v150);
  v151 = v107[15];
  v152 = &v105[v151];
  v153 = &v106[v151];
  v154 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v154 - 8) + 40))(v152, v153, v154);
  v155 = v107[16];
  v156 = &v105[v155];
  v157 = &v106[v155];
  v158 = type metadata accessor for SunEvents(0);
  LODWORD(v152) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v156, 1, v158);
  v159 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157, 1, v158);
  if ((_DWORD)v152)
  {
    if (!v159)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v158 - 8) + 32))(v156, v157, v158);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v156, 0, 1, v158);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v160 = *(_QWORD *)(v158 - 8);
  if (v159)
  {
    (*(void (**)(char *, uint64_t))(v160 + 8))(v156, v158);
LABEL_35:
    v161 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v160 + 40))(v156, v157, v158);
LABEL_36:
  v162 = v107[17];
  v163 = &v105[v162];
  v164 = &v106[v162];
  v165 = type metadata accessor for MoonEvents(0);
  v166 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v163, 1, v165);
  v167 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v164, 1, v165);
  if (v166)
  {
    if (!v167)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v165 - 8) + 32))(v163, v164, v165);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v163, 0, 1, v165);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v168 = *(_QWORD *)(v165 - 8);
  if (v167)
  {
    (*(void (**)(char *, uint64_t))(v168 + 8))(v163, v165);
LABEL_41:
    v169 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v168 + 40))(v163, v164, v165);
LABEL_42:
  v250(&v105[v107[18]], &v106[v107[18]], v251);
  *(_QWORD *)&v105[v107[19]] = *(_QWORD *)&v106[v107[19]];
  v170 = v103[6];
  v171 = &v17[v170];
  v172 = &v256[v170];
  v173 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v174 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v171, 1, (uint64_t)v173);
  v175 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v172, 1, (uint64_t)v173);
  if (v174)
  {
    if (!v175)
    {
      *(_OWORD *)v171 = *(_OWORD *)v172;
      v176 = v173[5];
      v177 = &v171[v176];
      v178 = &v172[v176];
      v179 = type metadata accessor for AttributedString(0);
      v180 = v177;
      v181 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v179 - 8) + 32);
      v181(v180, v178, v179);
      v182 = v173[6];
      v183 = &v171[v182];
      v184 = &v172[v182];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v172[v182], 1, v179))
      {
        v185 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
      }
      else
      {
        v181(v183, v184, v179);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v183, 0, 1, v179);
      }
      *(_OWORD *)&v171[v173[7]] = *(_OWORD *)&v172[v173[7]];
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v171, 0, 1, (uint64_t)v173);
      goto LABEL_60;
    }
LABEL_48:
    v186 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v171, v172, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
LABEL_60:
    v199 = v249;
    goto LABEL_61;
  }
  if (v175)
  {
    sub_100011894((uint64_t)v171, type metadata accessor for RainInlineContentViewModel);
    goto LABEL_48;
  }
  v187 = *((_QWORD *)v172 + 1);
  v188 = *((_QWORD *)v171 + 1);
  *(_QWORD *)v171 = *(_QWORD *)v172;
  *((_QWORD *)v171 + 1) = v187;
  swift_bridgeObjectRelease(v188);
  v189 = v173[5];
  v190 = &v171[v189];
  v191 = &v172[v189];
  v192 = type metadata accessor for AttributedString(0);
  v259 = *(_QWORD *)(v192 - 8);
  v193 = *(void (**)(char *, char *, uint64_t))(v259 + 40);
  v193(v190, v191, v192);
  v194 = v173[6];
  v195 = &v172[v194];
  v261 = (uint64_t)&v171[v194];
  LODWORD(v190) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v171[v194], 1, v192);
  v196 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v195, 1, v192);
  if ((_DWORD)v190)
  {
    if (!v196)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v259 + 32))(v261, v195, v192);
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v261, 0, 1, v192);
      goto LABEL_71;
    }
    v197 = *(_QWORD *)(*(_QWORD *)(sub_100005D40(&qword_1001BF0B8) - 8) + 64);
    v198 = (void *)v261;
  }
  else
  {
    if (!v196)
    {
      v193((char *)v261, v195, v192);
      goto LABEL_71;
    }
    (*(void (**)(uint64_t, uint64_t))(v259 + 8))(v261, v192);
    v197 = *(_QWORD *)(*(_QWORD *)(sub_100005D40(&qword_1001BF0B8) - 8) + 64);
    v198 = (void *)v261;
  }
  memcpy(v198, v195, v197);
LABEL_71:
  v199 = v249;
  v242 = v173[7];
  v243 = &v171[v242];
  v244 = (uint64_t *)&v172[v242];
  v246 = *v244;
  v245 = v244[1];
  v247 = *((_QWORD *)v243 + 1);
  *(_QWORD *)v243 = v246;
  *((_QWORD *)v243 + 1) = v245;
  swift_bridgeObjectRelease(v247);
LABEL_61:
  v200 = v103[7];
  v201 = &v17[v200];
  v202 = &v256[v200];
  v203 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v203 - 8) + 40))(v201, v202, v203);
  v204 = v103[8];
  v205 = &v17[v204];
  v206 = &v256[v204];
  v208 = *(_QWORD *)v206;
  v207 = *((_QWORD *)v206 + 1);
  v209 = *((_QWORD *)v205 + 1);
  *(_QWORD *)v205 = v208;
  *((_QWORD *)v205 + 1) = v207;
  swift_bridgeObjectRelease(v209);
  v17[v103[9]] = v256[v103[9]];
  v17[v103[10]] = v256[v103[10]];
  v210 = v103[11];
  v211 = *(_QWORD *)&v17[v210];
  *(_QWORD *)&v17[v210] = *(_QWORD *)&v256[v210];
  swift_release(v211);
  v212 = v103[12];
  v213 = &v17[v212];
  v214 = &v256[v212];
  v216 = *(_QWORD *)v214;
  v215 = *((_QWORD *)v214 + 1);
  v217 = *((_QWORD *)v213 + 1);
  *(_QWORD *)v213 = v216;
  *((_QWORD *)v213 + 1) = v215;
  swift_bridgeObjectRelease(v217);
  v218 = v103[13];
  v219 = *(_QWORD *)&v17[v218];
  *(_QWORD *)&v17[v218] = *(_QWORD *)&v256[v218];
  swift_release(v219);
  v220 = v103[14];
  v221 = *(_QWORD *)&v17[v220];
  *(_QWORD *)&v17[v220] = *(_QWORD *)&v256[v220];
  swift_release(v221);
  v222 = v103[15];
  v223 = *(_QWORD *)&v17[v222];
  *(_QWORD *)&v17[v222] = *(_QWORD *)&v256[v222];
  swift_release(v223);
  v224 = v103[16];
  v225 = *(_QWORD *)&v17[v224];
  *(_QWORD *)&v17[v224] = *(_QWORD *)&v256[v224];
  swift_release(v225);
  v17[v103[17]] = v256[v103[17]];
  v226 = v103[18];
  v227 = *(_QWORD *)&v17[v226];
  *(_QWORD *)&v17[v226] = *(_QWORD *)&v256[v226];
  swift_release(v227);
  v228 = v103[19];
  v229 = *(_QWORD *)&v17[v228];
  *(_QWORD *)&v17[v228] = *(_QWORD *)&v256[v228];
  swift_release(v229);
  *(_QWORD *)&v17[v103[20]] = *(_QWORD *)&v256[v103[20]];
  v17[v103[21]] = v256[v103[21]];
  v17[v103[22]] = v256[v103[22]];
  v17[v103[23]] = v256[v103[23]];
  v17[v103[24]] = v256[v103[24]];
  v230 = v103[25];
  v231 = &v17[v230];
  v232 = &v256[v230];
  v234 = *(_QWORD *)v232;
  v233 = *((_QWORD *)v232 + 1);
  v235 = *((_QWORD *)v231 + 1);
  *(_QWORD *)v231 = v234;
  *((_QWORD *)v231 + 1) = v233;
  swift_bridgeObjectRelease(v235);
  v17[v103[26]] = v256[v103[26]];
  *(_QWORD *)&v17[v103[27]] = *(_QWORD *)&v256[v103[27]];
  *(_QWORD *)&v17[v103[28]] = *(_QWORD *)&v256[v103[28]];
  if (v199 != v252)
  {
    v236 = *(int *)(v248 + 40);
    v237 = (char *)v199 + v236;
    v238 = (char *)v252 + v236;
    sub_100016904((uint64_t)v199 + v236, &qword_1001BF0C8);
    v239 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v238, v239) == 1)
    {
      v240 = type metadata accessor for Font.Context(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 32))(v237, v238, v240);
      swift_storeEnumTagMultiPayload(v237, v239, 1);
    }
    else
    {
      memcpy(v237, v238, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
    }
  }
  return v199;
}

uint64_t sub_10005E8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005E8E4);
}

void sub_10005E8E4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10006751C();
  if (v1)
  {
    sub_1000674E0();
    sub_1000443A4();
  }
  else
  {
    sub_1000674F8();
    sub_10001C6C0();
    if (v1)
    {
      v2 = *(int *)(v0 + 36);
    }
    else
    {
      sub_100005D40(&qword_1001BF0D0);
      v2 = *(int *)(v0 + 40);
    }
    v3 = sub_10006754C(v2);
    sub_100016B50(v3, v4, v5);
  }
}

uint64_t sub_10005E940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005E94C);
}

void sub_10005E94C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100067508();
  if (v2)
  {
    sub_100067558();
    sub_1000443A4();
  }
  else
  {
    v1 = v0;
    sub_100016B00();
    sub_10001C6D0();
    if (v2)
    {
      v3 = *(int *)(v1 + 36);
    }
    else
    {
      sub_100005D40(&qword_1001BF0D0);
      v3 = *(int *)(v1 + 40);
    }
    v4 = sub_10006752C(v3);
    sub_100016B44(v4, v5, v6, v7);
  }
}

void sub_10005E9B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = &unk_10017CAB0;
  v6[1] = &unk_10017CAB0;
  v6[2] = &unk_10017CAC8;
  v6[3] = &unk_10017CAB0;
  v6[4] = &unk_10017CAB0;
  v2 = type metadata accessor for CurrentObservationViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001C028(319, (unint64_t *)&qword_1001BF140, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

void sub_10005EA60()
{
  sub_100016A54(&qword_1001C0A08, &qword_1001C0838);
}

uint64_t sub_10005EA8C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019EF90, 1);
}

uint64_t sub_10005EA9C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019EF68, 1);
}

uint64_t type metadata accessor for ValueTextView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C0AC8, (uint64_t)&nominal type descriptor for ValueTextView);
}

uint64_t type metadata accessor for ConditionTextView(uint64_t a1)
{
  return sub_10000F804(a1, qword_1001C0B60, (uint64_t)&nominal type descriptor for ConditionTextView);
}

unint64_t sub_10005EAD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0A58;
  if (!qword_1001C0A58)
  {
    v1 = sub_100005DC4(&qword_1001C0A38);
    sub_100016A54(&qword_1001C0A60, &qword_1001C0A30);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0A58);
  }
  return result;
}

uint64_t *sub_10005EB5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  int *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, char *, uint64_t);
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v190)(char *, char *);
  uint64_t v191;
  int *v192;
  void (*v193)(char *, char *);
  uint64_t v194;
  uint64_t v195;
  void (*v196)(char *, char *, uint64_t);
  uint64_t v197;
  char *v198;
  char *v199;
  void (*v203)(char *, char *, uint64_t);
  char *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v31 = *a2;
    *a1 = *a2;
    v32 = (uint64_t *)(v31 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v31);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID(0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
    v12 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v13 = v12[5];
    v14 = &v8[v13];
    v15 = &v9[v13];
    v16 = type metadata accessor for Date(0);
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v195 = v16;
    v203 = v17;
    v17(&v8[v12[6]], &v9[v12[6]], v16);
    v18 = v12[7];
    v19 = &v8[v18];
    v20 = &v9[v18];
    v21 = sub_100005D40(&qword_1001BF090);
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
    v22(v19, v20, v21);
    v22(&v8[v12[8]], &v9[v12[8]], v21);
    v23 = v12[9];
    v24 = &v8[v23];
    v25 = &v9[v23];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    v27 = v12[10];
    v28 = &v8[v27];
    v29 = &v9[v27];
    swift_bridgeObjectRetain(v26);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, v21))
    {
      v30 = sub_100005D40(&qword_1001BF098);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v22(v28, v29, v21);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v28, 0, 1, v21);
    }
    v33 = v12[11];
    v34 = &v8[v33];
    v35 = &v9[v33];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v9[v33], 1, v21))
    {
      v36 = sub_100005D40(&qword_1001BF098);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v22(v34, v35, v21);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v21);
    }
    v37 = v12[12];
    v38 = &v8[v37];
    v39 = &v9[v37];
    v196 = v11;
    v197 = v10;
    v11(&v8[v37], &v9[v37], v10);
    v40 = (int *)type metadata accessor for ConditionViewModel(0);
    v41 = v40[5];
    v42 = &v38[v41];
    v43 = &v39[v41];
    v44 = type metadata accessor for WeatherCondition(0);
    v190 = *(void (**)(char *, char *))(*(_QWORD *)(v44 - 8) + 16);
    v191 = v44;
    v190(v42, v43);
    v45 = v40[6];
    v46 = &v38[v45];
    v47 = &v39[v45];
    v48 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    v49 = v40[7];
    v50 = &v38[v49];
    v51 = &v39[v49];
    v52 = *((_QWORD *)v51 + 1);
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *((_QWORD *)v50 + 1) = v52;
    v38[v40[8]] = v39[v40[8]];
    v38[v40[9]] = v39[v40[9]];
    v192 = v40;
    v38[v40[10]] = v39[v40[10]];
    *(_QWORD *)&v8[v12[13]] = *(_QWORD *)&v9[v12[13]];
    v53 = v12[14];
    v54 = &v8[v53];
    v55 = &v9[v53];
    v56 = type metadata accessor for CloudAltitudeKind(0);
    v206 = v9;
    v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v52);
    v57(v54, v55, v56);
    v58 = v12[15];
    v59 = &v8[v58];
    v60 = &v206[v58];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v206[v58], 1, v195))
    {
      v61 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      v203(v59, v60, v195);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v195);
    }
    v62 = v12[16];
    v63 = &v8[v62];
    v64 = &v206[v62];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v206[v62], 1, v195))
    {
      v65 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      v203(v63, v64, v195);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v195);
    }
    v66 = v12[17];
    v67 = &v8[v66];
    v68 = &v206[v66];
    v69 = type metadata accessor for UVIndex(0);
    v193 = *(void (**)(char *, char *))(*(_QWORD *)(v69 - 8) + 16);
    v194 = v69;
    v193(v67, v68);
    v70 = v12[18];
    v71 = &v8[v70];
    v72 = &v206[v70];
    v73 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
    *(_QWORD *)&v8[v12[19]] = *(_QWORD *)&v206[v12[19]];
    v74 = v12[20];
    v75 = &v8[v74];
    v76 = &v206[v74];
    v77 = *((_QWORD *)v76 + 1);
    if (v77)
    {
      *(_QWORD *)v75 = *(_QWORD *)v76;
      *((_QWORD *)v75 + 1) = v77;
      v78 = *((_QWORD *)v76 + 2);
      v79 = *((_QWORD *)v76 + 3);
      v80 = v76[32];
      swift_bridgeObjectRetain(v77);
      sub_100006E58(v78, v79, v80);
      *((_QWORD *)v75 + 2) = v78;
      *((_QWORD *)v75 + 3) = v79;
      v75[32] = v80;
    }
    else
    {
      v81 = *((_OWORD *)v76 + 1);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v81;
      v75[32] = v76[32];
    }
    v82 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
    v83 = v82[5];
    v199 = v8;
    v84 = &v8[v83];
    v85 = &v206[v83];
    v196(&v8[v83], &v206[v83], v197);
    v86 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v203(&v84[v86[5]], &v85[v86[5]], v195);
    v22(&v84[v86[6]], &v85[v86[6]], v21);
    v22(&v84[v86[7]], &v85[v86[7]], v21);
    v87 = v86[8];
    v88 = &v84[v87];
    v89 = &v85[v87];
    v196(&v84[v87], &v85[v87], v197);
    ((void (*)(char *, char *, uint64_t))v190)(&v88[v192[5]], &v89[v192[5]], v191);
    v90 = v192[6];
    v91 = &v88[v90];
    v92 = &v89[v90];
    v93 = *((_QWORD *)v92 + 1);
    *(_QWORD *)v91 = *(_QWORD *)v92;
    *((_QWORD *)v91 + 1) = v93;
    v94 = v192[7];
    v95 = &v88[v94];
    v96 = &v89[v94];
    v97 = *((_QWORD *)v96 + 1);
    *(_QWORD *)v95 = *(_QWORD *)v96;
    *((_QWORD *)v95 + 1) = v97;
    v88[v192[8]] = v89[v192[8]];
    v88[v192[9]] = v89[v192[9]];
    v88[v192[10]] = v89[v192[10]];
    v98 = v86[9];
    v99 = &v84[v98];
    v100 = &v85[v98];
    v101 = type metadata accessor for Precipitation(0);
    v102 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v97);
    v102(v99, v100, v101);
    *(_QWORD *)&v84[v86[10]] = *(_QWORD *)&v85[v86[10]];
    v103 = v86[11];
    v104 = &v84[v103];
    v105 = &v85[v103];
    v106 = *((_QWORD *)v105 + 1);
    *(_QWORD *)v104 = *(_QWORD *)v105;
    *((_QWORD *)v104 + 1) = v106;
    v107 = v86[12];
    v108 = &v84[v107];
    v109 = &v85[v107];
    v110 = *((_QWORD *)v109 + 1);
    *(_QWORD *)v108 = *(_QWORD *)v109;
    *((_QWORD *)v108 + 1) = v110;
    v111 = v86[13];
    v112 = &v84[v111];
    v113 = &v85[v111];
    v114 = *((_QWORD *)v113 + 1);
    *(_QWORD *)v112 = *(_QWORD *)v113;
    *((_QWORD *)v112 + 1) = v114;
    v115 = v86[14];
    v116 = &v84[v115];
    v117 = &v85[v115];
    v118 = *((_QWORD *)v117 + 1);
    *(_QWORD *)v116 = *(_QWORD *)v117;
    *((_QWORD *)v116 + 1) = v118;
    v119 = v86[15];
    v204 = &v84[v119];
    v198 = &v85[v119];
    v120 = type metadata accessor for TemperatureScaleConfiguration(0);
    v121 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 16);
    swift_bridgeObjectRetain(v106);
    swift_bridgeObjectRetain(v110);
    swift_bridgeObjectRetain(v114);
    swift_bridgeObjectRetain(v118);
    v121(v204, v198, v120);
    v122 = v86[16];
    v123 = &v84[v122];
    v124 = &v85[v122];
    v125 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v124, 1, v125))
    {
      v126 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 16))(v123, v124, v125);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v123, 0, 1, v125);
    }
    v127 = v86[17];
    v128 = &v84[v127];
    v129 = &v85[v127];
    v130 = type metadata accessor for MoonEvents(0);
    v131 = v206;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v129, 1, v130))
    {
      v132 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(v128, v129, v130);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v128, 0, 1, v130);
    }
    ((void (*)(char *, char *, uint64_t))v193)(&v84[v86[18]], &v85[v86[18]], v194);
    *(_QWORD *)&v84[v86[19]] = *(_QWORD *)&v85[v86[19]];
    v133 = v82[6];
    v134 = &v199[v133];
    v135 = &v206[v133];
    v136 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v135, 1, (uint64_t)v136))
    {
      v137 = sub_100005D40(&qword_1001BF0C0);
      memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      v138 = *((_QWORD *)v135 + 1);
      *(_QWORD *)v134 = *(_QWORD *)v135;
      *((_QWORD *)v134 + 1) = v138;
      v139 = v136[5];
      v140 = &v134[v139];
      v141 = &v135[v139];
      v142 = type metadata accessor for AttributedString(0);
      v143 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 16);
      swift_bridgeObjectRetain(v138);
      v143(v140, v141, v142);
      v144 = v136[6];
      v145 = &v134[v144];
      v146 = &v135[v144];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v135[v144], 1, v142))
      {
        v147 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
      }
      else
      {
        v143(v145, v146, v142);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v145, 0, 1, v142);
      }
      v148 = v136[7];
      v149 = &v134[v148];
      v150 = &v135[v148];
      v151 = *((_QWORD *)v150 + 1);
      *(_QWORD *)v149 = *(_QWORD *)v150;
      *((_QWORD *)v149 + 1) = v151;
      swift_bridgeObjectRetain(v151);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v134, 0, 1, (uint64_t)v136);
      v131 = v206;
    }
    v152 = v82[7];
    v153 = &v199[v152];
    v154 = &v131[v152];
    v155 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v153, v154, v155);
    v156 = v82[8];
    v157 = &v199[v156];
    v158 = &v131[v156];
    v159 = *((_QWORD *)v158 + 1);
    *(_QWORD *)v157 = *(_QWORD *)v158;
    *((_QWORD *)v157 + 1) = v159;
    v199[v82[9]] = v131[v82[9]];
    v199[v82[10]] = v131[v82[10]];
    v160 = v82[11];
    v205 = *(_QWORD *)&v131[v160];
    *(_QWORD *)&v199[v160] = v205;
    v161 = v82[12];
    v162 = &v199[v161];
    v163 = &v131[v161];
    v164 = *((_QWORD *)v163 + 1);
    *(_QWORD *)v162 = *(_QWORD *)v163;
    *((_QWORD *)v162 + 1) = v164;
    v165 = v82[13];
    v166 = *(_QWORD *)&v131[v165];
    *(_QWORD *)&v199[v165] = v166;
    v167 = v82[14];
    v168 = *(_QWORD *)&v131[v167];
    *(_QWORD *)&v199[v167] = v168;
    v169 = v82[15];
    v170 = *(_QWORD *)&v131[v169];
    *(_QWORD *)&v199[v169] = v170;
    v171 = v82[16];
    v207 = *(_QWORD *)&v131[v171];
    *(_QWORD *)&v199[v171] = v207;
    v199[v82[17]] = v131[v82[17]];
    v172 = v82[18];
    v173 = *(_QWORD *)&v131[v172];
    *(_QWORD *)&v199[v172] = v173;
    v174 = v82[19];
    v175 = *(_QWORD *)&v131[v174];
    *(_QWORD *)&v199[v174] = v175;
    *(_QWORD *)&v199[v82[20]] = *(_QWORD *)&v131[v82[20]];
    v199[v82[21]] = v131[v82[21]];
    v199[v82[22]] = v131[v82[22]];
    v199[v82[23]] = v131[v82[23]];
    v199[v82[24]] = v131[v82[24]];
    v176 = v82[25];
    v177 = &v199[v176];
    v178 = &v131[v176];
    v179 = *((_QWORD *)v178 + 1);
    *(_QWORD *)v177 = *(_QWORD *)v178;
    *((_QWORD *)v177 + 1) = v179;
    v199[v82[26]] = v131[v82[26]];
    *(_QWORD *)&v199[v82[27]] = *(_QWORD *)&v131[v82[27]];
    *(_QWORD *)&v199[v82[28]] = *(_QWORD *)&v131[v82[28]];
    v180 = *(int *)(a3 + 28);
    v32 = a1;
    v181 = (uint64_t *)((char *)a1 + v180);
    v182 = (uint64_t *)((char *)a2 + v180);
    swift_bridgeObjectRetain(v159);
    swift_retain(v205);
    swift_bridgeObjectRetain(v164);
    swift_retain(v166);
    swift_retain(v168);
    swift_retain(v170);
    swift_retain(v207);
    swift_retain(v173);
    swift_retain(v175);
    swift_bridgeObjectRetain(v179);
    v183 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v182, v183) == 1)
    {
      v184 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v184 - 8) + 16))(v181, v182, v184);
      v185 = v181;
      v186 = v183;
      v187 = 1;
    }
    else
    {
      v188 = *v182;
      *v181 = *v182;
      swift_retain(v188);
      v185 = v181;
      v186 = v183;
      v187 = 0;
    }
    swift_storeEnumTagMultiPayload(v185, v186, v187);
  }
  return v32;
}

uint64_t sub_10005F698(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v54)(uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v59 = a2;
  v60 = a1;
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v4 + v7[5];
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v4 + v7[6], v9);
  v11 = v4 + v7[7];
  v12 = sub_100005D40(&qword_1001BF090);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(v4 + v7[8], v12);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v7[9] + 8));
  v14 = v4 + v7[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v14, 1, v12))
    v13(v14, v12);
  v15 = v4 + v7[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v15, 1, v12))
    v13(v15, v12);
  v16 = v4 + v7[12];
  v58 = v6;
  v6(v16, v5);
  v17 = (int *)type metadata accessor for ConditionViewModel(0);
  v18 = v16 + v17[5];
  v19 = type metadata accessor for WeatherCondition(0);
  v54 = *(void (**)(uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v55 = v19;
  v54(v18);
  swift_bridgeObjectRelease(*(_QWORD *)(v16 + v17[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v16 + v17[7] + 8));
  v20 = v4 + v7[14];
  v21 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = v4 + v7[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v22, 1, v9))
    v10(v22, v9);
  v23 = v4 + v7[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v23, 1, v9))
    v10(v23, v9);
  v24 = v4 + v7[17];
  v25 = type metadata accessor for UVIndex(0);
  v56 = *(void (**)(uint64_t))(*(_QWORD *)(v25 - 8) + 8);
  v57 = v25;
  v56(v24);
  v26 = v4 + v7[18];
  v27 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = v4 + v7[20];
  v29 = *(_QWORD *)(v28 + 8);
  if (v29)
  {
    swift_bridgeObjectRelease(v29);
    sub_100007458(*(_QWORD *)(v28 + 16), *(_QWORD *)(v28 + 24), *(_BYTE *)(v28 + 32));
  }
  v30 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v31 = v4 + v30[5];
  v58(v31, v5);
  v32 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v10(v31 + v32[5], v9);
  v13(v31 + v32[6], v12);
  v13(v31 + v32[7], v12);
  v33 = v31 + v32[8];
  v58(v33, v5);
  ((void (*)(uint64_t, uint64_t))v54)(v33 + v17[5], v55);
  swift_bridgeObjectRelease(*(_QWORD *)(v33 + v17[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v33 + v17[7] + 8));
  v34 = v31 + v32[9];
  v35 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v32[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v32[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v32[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v32[14] + 8));
  v36 = v31 + v32[15];
  v37 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
  v38 = v31 + v32[16];
  v39 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, v39))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  v40 = v31 + v32[17];
  v41 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v40, 1, v41))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v40, v41);
  ((void (*)(uint64_t, uint64_t))v56)(v31 + v32[18], v57);
  v42 = v4 + v30[6];
  v43 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v42, 1, (uint64_t)v43))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + 8));
    v44 = v42 + v43[5];
    v45 = type metadata accessor for AttributedString(0);
    v46 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8);
    v46(v44, v45);
    v47 = v42 + v43[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v47, 1, v45))
      v46(v47, v45);
    swift_bridgeObjectRelease(*(_QWORD *)(v42 + v43[7] + 8));
  }
  v48 = v4 + v30[7];
  v49 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v48, v49);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v30[8] + 8));
  swift_release(*(_QWORD *)(v4 + v30[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v30[12] + 8));
  swift_release(*(_QWORD *)(v4 + v30[13]));
  swift_release(*(_QWORD *)(v4 + v30[14]));
  swift_release(*(_QWORD *)(v4 + v30[15]));
  swift_release(*(_QWORD *)(v4 + v30[16]));
  swift_release(*(_QWORD *)(v4 + v30[18]));
  swift_release(*(_QWORD *)(v4 + v30[19]));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v30[25] + 8));
  v50 = (_QWORD *)(v60 + *(int *)(v59 + 28));
  v51 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v50, v51) != 1)
    return swift_release(*v50);
  v52 = type metadata accessor for ColorSchemeContrast(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v50, v52);
}

_QWORD *sub_10005FCA8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  int *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, char *, uint64_t);
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v184)(char *, char *);
  uint64_t v185;
  int *v186;
  void (*v187)(char *, char *);
  uint64_t v188;
  uint64_t v189;
  void (*v190)(char *, char *, uint64_t);
  uint64_t v191;
  char *v192;
  char *v193;
  void (*v197)(char *, char *, uint64_t);
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  v10 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v11 = v10[5];
  v12 = &v6[v11];
  v13 = &v7[v11];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v15(v12, v13, v14);
  v189 = v14;
  v197 = v15;
  v15(&v6[v10[6]], &v7[v10[6]], v14);
  v16 = v10[7];
  v17 = &v6[v16];
  v18 = &v7[v16];
  v19 = sub_100005D40(&qword_1001BF090);
  v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
  v20(v17, v18, v19);
  v20(&v6[v10[8]], &v7[v10[8]], v19);
  v21 = v10[9];
  v22 = &v6[v21];
  v23 = &v7[v21];
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  v25 = v10[10];
  v26 = &v6[v25];
  v27 = &v7[v25];
  swift_bridgeObjectRetain(v24);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v27, 1, v19))
  {
    v28 = sub_100005D40(&qword_1001BF098);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v20(v26, v27, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v26, 0, 1, v19);
  }
  v29 = v10[11];
  v30 = &v6[v29];
  v31 = &v7[v29];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v7[v29], 1, v19))
  {
    v32 = sub_100005D40(&qword_1001BF098);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v20(v30, v31, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v19);
  }
  v33 = v10[12];
  v34 = &v6[v33];
  v35 = &v7[v33];
  v190 = v9;
  v191 = v8;
  v9(&v6[v33], &v7[v33], v8);
  v36 = (int *)type metadata accessor for ConditionViewModel(0);
  v37 = v36[5];
  v38 = &v34[v37];
  v39 = &v35[v37];
  v40 = type metadata accessor for WeatherCondition(0);
  v184 = *(void (**)(char *, char *))(*(_QWORD *)(v40 - 8) + 16);
  v185 = v40;
  v184(v38, v39);
  v41 = v36[6];
  v42 = &v34[v41];
  v43 = &v35[v41];
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = v44;
  v45 = v36[7];
  v46 = &v34[v45];
  v47 = &v35[v45];
  v48 = *((_QWORD *)v47 + 1);
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *((_QWORD *)v46 + 1) = v48;
  v34[v36[8]] = v35[v36[8]];
  v34[v36[9]] = v35[v36[9]];
  v186 = v36;
  v34[v36[10]] = v35[v36[10]];
  *(_QWORD *)&v6[v10[13]] = *(_QWORD *)&v7[v10[13]];
  v49 = v10[14];
  v50 = &v6[v49];
  v51 = &v7[v49];
  v52 = type metadata accessor for CloudAltitudeKind(0);
  v200 = v7;
  v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v48);
  v53(v50, v51, v52);
  v54 = v10[15];
  v55 = &v6[v54];
  v56 = &v200[v54];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v200[v54], 1, v189))
  {
    v57 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    v197(v55, v56, v189);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v55, 0, 1, v189);
  }
  v58 = v10[16];
  v59 = &v6[v58];
  v60 = &v200[v58];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v200[v58], 1, v189))
  {
    v61 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    v197(v59, v60, v189);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v189);
  }
  v62 = v10[17];
  v63 = &v6[v62];
  v64 = &v200[v62];
  v65 = type metadata accessor for UVIndex(0);
  v187 = *(void (**)(char *, char *))(*(_QWORD *)(v65 - 8) + 16);
  v188 = v65;
  v187(v63, v64);
  v66 = v10[18];
  v67 = &v6[v66];
  v68 = &v200[v66];
  v69 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
  *(_QWORD *)&v6[v10[19]] = *(_QWORD *)&v200[v10[19]];
  v70 = v10[20];
  v71 = &v6[v70];
  v72 = &v200[v70];
  v73 = *((_QWORD *)v72 + 1);
  if (v73)
  {
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = *((_QWORD *)v72 + 2);
    v75 = *((_QWORD *)v72 + 3);
    v76 = v72[32];
    swift_bridgeObjectRetain(v73);
    sub_100006E58(v74, v75, v76);
    *((_QWORD *)v71 + 2) = v74;
    *((_QWORD *)v71 + 3) = v75;
    v71[32] = v76;
  }
  else
  {
    v77 = *((_OWORD *)v72 + 1);
    *(_OWORD *)v71 = *(_OWORD *)v72;
    *((_OWORD *)v71 + 1) = v77;
    v71[32] = v72[32];
  }
  v78 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v79 = v78[5];
  v193 = v6;
  v80 = &v6[v79];
  v81 = &v200[v79];
  v190(&v6[v79], &v200[v79], v191);
  v82 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v197(&v80[v82[5]], &v81[v82[5]], v189);
  v20(&v80[v82[6]], &v81[v82[6]], v19);
  v20(&v80[v82[7]], &v81[v82[7]], v19);
  v83 = v82[8];
  v84 = &v80[v83];
  v85 = &v81[v83];
  v190(&v80[v83], &v81[v83], v191);
  ((void (*)(char *, char *, uint64_t))v184)(&v84[v186[5]], &v85[v186[5]], v185);
  v86 = v186[6];
  v87 = &v84[v86];
  v88 = &v85[v86];
  v89 = *((_QWORD *)v88 + 1);
  *(_QWORD *)v87 = *(_QWORD *)v88;
  *((_QWORD *)v87 + 1) = v89;
  v90 = v186[7];
  v91 = &v84[v90];
  v92 = &v85[v90];
  v93 = *((_QWORD *)v92 + 1);
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *((_QWORD *)v91 + 1) = v93;
  v84[v186[8]] = v85[v186[8]];
  v84[v186[9]] = v85[v186[9]];
  v84[v186[10]] = v85[v186[10]];
  v94 = v82[9];
  v95 = &v80[v94];
  v96 = &v81[v94];
  v97 = type metadata accessor for Precipitation(0);
  v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v93);
  v98(v95, v96, v97);
  *(_QWORD *)&v80[v82[10]] = *(_QWORD *)&v81[v82[10]];
  v99 = v82[11];
  v100 = &v80[v99];
  v101 = &v81[v99];
  v102 = *((_QWORD *)v101 + 1);
  *(_QWORD *)v100 = *(_QWORD *)v101;
  *((_QWORD *)v100 + 1) = v102;
  v103 = v82[12];
  v104 = &v80[v103];
  v105 = &v81[v103];
  v106 = *((_QWORD *)v105 + 1);
  *(_QWORD *)v104 = *(_QWORD *)v105;
  *((_QWORD *)v104 + 1) = v106;
  v107 = v82[13];
  v108 = &v80[v107];
  v109 = &v81[v107];
  v110 = *((_QWORD *)v109 + 1);
  *(_QWORD *)v108 = *(_QWORD *)v109;
  *((_QWORD *)v108 + 1) = v110;
  v111 = v82[14];
  v112 = &v80[v111];
  v113 = &v81[v111];
  v114 = *((_QWORD *)v113 + 1);
  *(_QWORD *)v112 = *(_QWORD *)v113;
  *((_QWORD *)v112 + 1) = v114;
  v115 = v82[15];
  v198 = &v80[v115];
  v192 = &v81[v115];
  v116 = type metadata accessor for TemperatureScaleConfiguration(0);
  v117 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 16);
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRetain(v106);
  swift_bridgeObjectRetain(v110);
  swift_bridgeObjectRetain(v114);
  v117(v198, v192, v116);
  v118 = v82[16];
  v119 = &v80[v118];
  v120 = &v81[v118];
  v121 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v120, 1, v121))
  {
    v122 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v119, v120, v121);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v119, 0, 1, v121);
  }
  v123 = v82[17];
  v124 = &v80[v123];
  v125 = &v81[v123];
  v126 = type metadata accessor for MoonEvents(0);
  v127 = v200;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v125, 1, v126))
  {
    v128 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v124, v125, v126);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v124, 0, 1, v126);
  }
  ((void (*)(char *, char *, uint64_t))v187)(&v80[v82[18]], &v81[v82[18]], v188);
  *(_QWORD *)&v80[v82[19]] = *(_QWORD *)&v81[v82[19]];
  v129 = v78[6];
  v130 = &v193[v129];
  v131 = &v200[v129];
  v132 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v131, 1, (uint64_t)v132))
  {
    v133 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
  }
  else
  {
    v134 = *((_QWORD *)v131 + 1);
    *(_QWORD *)v130 = *(_QWORD *)v131;
    *((_QWORD *)v130 + 1) = v134;
    v135 = v132[5];
    v136 = &v130[v135];
    v137 = &v131[v135];
    v138 = type metadata accessor for AttributedString(0);
    v139 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 16);
    swift_bridgeObjectRetain(v134);
    v139(v136, v137, v138);
    v140 = v132[6];
    v141 = &v130[v140];
    v142 = &v131[v140];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v131[v140], 1, v138))
    {
      v143 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
    }
    else
    {
      v139(v141, v142, v138);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v141, 0, 1, v138);
    }
    v144 = v132[7];
    v145 = &v130[v144];
    v146 = &v131[v144];
    v147 = *((_QWORD *)v146 + 1);
    *(_QWORD *)v145 = *(_QWORD *)v146;
    *((_QWORD *)v145 + 1) = v147;
    swift_bridgeObjectRetain(v147);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v130, 0, 1, (uint64_t)v132);
    v127 = v200;
  }
  v148 = v78[7];
  v149 = &v193[v148];
  v150 = &v127[v148];
  v151 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 16))(v149, v150, v151);
  v152 = v78[8];
  v153 = &v193[v152];
  v154 = &v127[v152];
  v155 = *((_QWORD *)v154 + 1);
  *(_QWORD *)v153 = *(_QWORD *)v154;
  *((_QWORD *)v153 + 1) = v155;
  v193[v78[9]] = v127[v78[9]];
  v193[v78[10]] = v127[v78[10]];
  v156 = v78[11];
  v199 = *(_QWORD *)&v127[v156];
  *(_QWORD *)&v193[v156] = v199;
  v157 = v78[12];
  v158 = &v193[v157];
  v159 = &v127[v157];
  v160 = *((_QWORD *)v159 + 1);
  *(_QWORD *)v158 = *(_QWORD *)v159;
  *((_QWORD *)v158 + 1) = v160;
  v161 = v78[13];
  v162 = *(_QWORD *)&v127[v161];
  *(_QWORD *)&v193[v161] = v162;
  v163 = v78[14];
  v164 = *(_QWORD *)&v127[v163];
  *(_QWORD *)&v193[v163] = v164;
  v165 = v78[15];
  v166 = *(_QWORD *)&v127[v165];
  *(_QWORD *)&v193[v165] = v166;
  v167 = v78[16];
  v201 = *(_QWORD *)&v127[v167];
  *(_QWORD *)&v193[v167] = v201;
  v193[v78[17]] = v127[v78[17]];
  v168 = v78[18];
  v169 = *(_QWORD *)&v127[v168];
  *(_QWORD *)&v193[v168] = v169;
  v170 = v78[19];
  v171 = *(_QWORD *)&v127[v170];
  *(_QWORD *)&v193[v170] = v171;
  *(_QWORD *)&v193[v78[20]] = *(_QWORD *)&v127[v78[20]];
  v193[v78[21]] = v127[v78[21]];
  v193[v78[22]] = v127[v78[22]];
  v193[v78[23]] = v127[v78[23]];
  v193[v78[24]] = v127[v78[24]];
  v172 = v78[25];
  v173 = &v193[v172];
  v174 = &v127[v172];
  v175 = *((_QWORD *)v174 + 1);
  *(_QWORD *)v173 = *(_QWORD *)v174;
  *((_QWORD *)v173 + 1) = v175;
  v193[v78[26]] = v127[v78[26]];
  *(_QWORD *)&v193[v78[27]] = *(_QWORD *)&v127[v78[27]];
  *(_QWORD *)&v193[v78[28]] = *(_QWORD *)&v127[v78[28]];
  v176 = *(int *)(a3 + 28);
  v177 = (_QWORD *)((char *)a1 + v176);
  v178 = (_QWORD *)((char *)a2 + v176);
  swift_bridgeObjectRetain(v155);
  swift_retain(v199);
  swift_bridgeObjectRetain(v160);
  swift_retain(v162);
  swift_retain(v164);
  swift_retain(v166);
  swift_retain(v201);
  swift_retain(v169);
  swift_retain(v171);
  swift_bridgeObjectRetain(v175);
  v179 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v178, v179) == 1)
  {
    v180 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v180 - 8) + 16))(v177, v178, v180);
    v181 = 1;
  }
  else
  {
    v182 = *v178;
    *v177 = *v178;
    swift_retain(v182);
    v181 = 0;
  }
  swift_storeEnumTagMultiPayload(v177, v179, v181);
  return a1;
}

_QWORD *sub_1000607B0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  int *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  int *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  int *v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  void (*v175)(char *, char *, uint64_t);
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  int v191;
  int v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v251;
  _QWORD *v252;
  void (*v253)(char *, char *, uint64_t);
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  void (*v257)(char *, char *);
  uint64_t v258;
  void (*v259)(char *, char *);
  int *v260;
  void (*v261)(char *, char *, uint64_t);
  void (*v262)(char *, char *, uint64_t);
  uint64_t v263;
  void (*v264)(char *, char *, uint64_t);
  uint64_t v265;
  char *v266;
  uint64_t v267;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v251 = a3;
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v256 = a2;
  v12 = (char *)a2 + v10;
  v263 = type metadata accessor for UUID(0);
  v259 = *(void (**)(char *, char *))(*(_QWORD *)(v263 - 8) + 24);
  v259(v11, v12);
  v13 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v14 = v13[5];
  v15 = &v11[v14];
  v16 = &v12[v14];
  v17 = type metadata accessor for Date(0);
  v254 = *(_QWORD *)(v17 - 8);
  v18 = *(void (**)(char *, char *, uint64_t))(v254 + 24);
  v18(v15, v16, v17);
  v262 = v18;
  v18(&v11[v13[6]], &v12[v13[6]], v17);
  v19 = v13[7];
  v20 = &v11[v19];
  v21 = &v12[v19];
  v22 = sub_100005D40(&qword_1001BF090);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(void (**)(char *, char *, uint64_t))(v23 + 24);
  v24(v20, v21, v22);
  v261 = v24;
  v24(&v11[v13[8]], &v12[v13[8]], v22);
  v25 = v13[9];
  v26 = &v11[v25];
  v27 = &v12[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v28 = *((_QWORD *)v27 + 1);
  v29 = *((_QWORD *)v26 + 1);
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = v13[10];
  v31 = &v11[v30];
  v32 = &v12[v30];
  LODWORD(v24) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v11[v30], 1, v22);
  v265 = v22;
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v22);
  if ((_DWORD)v24)
  {
    if (v33)
    {
      v34 = sub_100005D40(&qword_1001BF098);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v31, v32, v22);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v22);
    }
  }
  else if (v33)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v31, v22);
    v35 = sub_100005D40(&qword_1001BF098);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v261(v31, v32, v22);
  }
  v36 = v13[11];
  v37 = &v11[v36];
  v38 = &v12[v36];
  v39 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v11[v36], 1, v22);
  v40 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v38, 1, v22);
  v252 = a1;
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v37, v38, v22);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v37, 0, 1, v22);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v37, v22);
LABEL_13:
    v41 = sub_100005D40(&qword_1001BF098);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_14;
  }
  v261(v37, v38, v22);
LABEL_14:
  v42 = (void (*)(char *, char *, uint64_t))v259;
  v43 = v13[12];
  v44 = &v11[v43];
  v45 = &v12[v43];
  ((void (*)(char *, char *, uint64_t))v259)(&v11[v43], &v12[v43], v263);
  v46 = (int *)type metadata accessor for ConditionViewModel(0);
  v47 = v46[5];
  v48 = &v44[v47];
  v49 = &v45[v47];
  v50 = type metadata accessor for WeatherCondition(0);
  v257 = *(void (**)(char *, char *))(*(_QWORD *)(v50 - 8) + 24);
  v258 = v50;
  v257(v48, v49);
  v51 = v46[6];
  v52 = &v44[v51];
  v53 = &v45[v51];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v54 = *((_QWORD *)v53 + 1);
  v55 = *((_QWORD *)v52 + 1);
  *((_QWORD *)v52 + 1) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v56 = v46[7];
  v57 = &v44[v56];
  v58 = &v45[v56];
  *(_QWORD *)v57 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  v60 = *((_QWORD *)v57 + 1);
  *((_QWORD *)v57 + 1) = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  v44[v46[8]] = v45[v46[8]];
  v44[v46[9]] = v45[v46[9]];
  v44[v46[10]] = v45[v46[10]];
  *(_QWORD *)&v11[v13[13]] = *(_QWORD *)&v12[v13[13]];
  v61 = v13[14];
  v62 = &v11[v61];
  v63 = &v12[v61];
  v64 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 24))(v62, v63, v64);
  v65 = v13[15];
  v66 = &v11[v65];
  v67 = &v12[v65];
  LODWORD(v63) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v11[v65], 1, v17);
  v68 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v17);
  if ((_DWORD)v63)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v254 + 16))(v66, v67, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v17);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v254 + 8))(v66, v17);
LABEL_19:
    v69 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_20;
  }
  v262(v66, v67, v17);
LABEL_20:
  v70 = v13[16];
  v71 = &v11[v70];
  v72 = &v12[v70];
  v73 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v11[v70], 1, v17);
  v74 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v72, 1, v17);
  v260 = v46;
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v254 + 16))(v71, v72, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v71, 0, 1, v17);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v254 + 8))(v71, v17);
LABEL_25:
    v75 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_26;
  }
  v262(v71, v72, v17);
LABEL_26:
  v76 = v13[17];
  v77 = &v11[v76];
  v78 = &v12[v76];
  v79 = type metadata accessor for UVIndex(0);
  v253 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 24);
  v253(v77, v78, v79);
  v80 = v13[18];
  v81 = &v11[v80];
  v82 = &v12[v80];
  v83 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 24))(v81, v82, v83);
  *(_QWORD *)&v11[v13[19]] = *(_QWORD *)&v12[v13[19]];
  v84 = v13[20];
  v85 = (uint64_t)&v11[v84];
  v86 = &v12[v84];
  v87 = *(_QWORD *)&v11[v84 + 8];
  v88 = *(_QWORD *)&v12[v84 + 8];
  v255 = v79;
  if (v87)
  {
    if (v88)
    {
      *(_QWORD *)v85 = *(_QWORD *)v86;
      v89 = *((_QWORD *)v86 + 1);
      *(_QWORD *)(v85 + 8) = v89;
      swift_bridgeObjectRetain(v89);
      swift_bridgeObjectRelease(v87);
      v90 = *((_QWORD *)v86 + 2);
      v91 = *((_QWORD *)v86 + 3);
      v92 = v86[32];
      sub_100006E58(v90, v91, v92);
      v93 = *(_QWORD *)(v85 + 16);
      v94 = *(_QWORD *)(v85 + 24);
      v95 = *(_BYTE *)(v85 + 32);
      *(_QWORD *)(v85 + 16) = v90;
      *(_QWORD *)(v85 + 24) = v91;
      *(_BYTE *)(v85 + 32) = v92;
      sub_100007458(v93, v94, v95);
    }
    else
    {
      sub_100008EC4(v85);
      v100 = v86[32];
      v101 = *((_OWORD *)v86 + 1);
      *(_OWORD *)v85 = *(_OWORD *)v86;
      *(_OWORD *)(v85 + 16) = v101;
      *(_BYTE *)(v85 + 32) = v100;
    }
  }
  else if (v88)
  {
    *(_QWORD *)v85 = *(_QWORD *)v86;
    v96 = *((_QWORD *)v86 + 1);
    *(_QWORD *)(v85 + 8) = v96;
    v97 = *((_QWORD *)v86 + 2);
    v98 = *((_QWORD *)v86 + 3);
    v99 = v86[32];
    swift_bridgeObjectRetain(v96);
    sub_100006E58(v97, v98, v99);
    *(_QWORD *)(v85 + 16) = v97;
    *(_QWORD *)(v85 + 24) = v98;
    *(_BYTE *)(v85 + 32) = v99;
  }
  else
  {
    v102 = *(_OWORD *)v86;
    v103 = *((_OWORD *)v86 + 1);
    *(_BYTE *)(v85 + 32) = v86[32];
    *(_OWORD *)v85 = v102;
    *(_OWORD *)(v85 + 16) = v103;
  }
  v104 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v105 = v104[5];
  v106 = &v11[v105];
  v107 = &v12[v105];
  v42(&v11[v105], &v12[v105], v263);
  v108 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v262(&v106[v108[5]], &v107[v108[5]], v17);
  v261(&v106[v108[6]], &v107[v108[6]], v265);
  v261(&v106[v108[7]], &v107[v108[7]], v265);
  v109 = v108[8];
  v110 = &v106[v109];
  v111 = &v107[v109];
  v42(&v106[v109], &v107[v109], v263);
  ((void (*)(char *, char *, uint64_t))v257)(&v110[v260[5]], &v111[v260[5]], v258);
  v112 = v260[6];
  v113 = &v110[v112];
  v114 = &v111[v112];
  *(_QWORD *)v113 = *(_QWORD *)v114;
  v115 = *((_QWORD *)v114 + 1);
  v116 = *((_QWORD *)v113 + 1);
  *((_QWORD *)v113 + 1) = v115;
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRelease(v116);
  v117 = v260[7];
  v118 = &v110[v117];
  v119 = &v111[v117];
  *(_QWORD *)v118 = *(_QWORD *)v119;
  v120 = *((_QWORD *)v119 + 1);
  v121 = *((_QWORD *)v118 + 1);
  *((_QWORD *)v118 + 1) = v120;
  swift_bridgeObjectRetain(v120);
  swift_bridgeObjectRelease(v121);
  v110[v260[8]] = v111[v260[8]];
  v110[v260[9]] = v111[v260[9]];
  v110[v260[10]] = v111[v260[10]];
  v122 = v108[9];
  v123 = &v106[v122];
  v124 = &v107[v122];
  v125 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 24))(v123, v124, v125);
  *(_QWORD *)&v106[v108[10]] = *(_QWORD *)&v107[v108[10]];
  v126 = v108[11];
  v127 = &v106[v126];
  v128 = &v107[v126];
  *(_QWORD *)v127 = *(_QWORD *)v128;
  v129 = *((_QWORD *)v128 + 1);
  v130 = *((_QWORD *)v127 + 1);
  *((_QWORD *)v127 + 1) = v129;
  swift_bridgeObjectRetain(v129);
  swift_bridgeObjectRelease(v130);
  v131 = v108[12];
  v132 = &v106[v131];
  v133 = &v107[v131];
  *(_QWORD *)v132 = *(_QWORD *)v133;
  v134 = *((_QWORD *)v133 + 1);
  v135 = *((_QWORD *)v132 + 1);
  *((_QWORD *)v132 + 1) = v134;
  swift_bridgeObjectRetain(v134);
  swift_bridgeObjectRelease(v135);
  v136 = v108[13];
  v137 = &v106[v136];
  v138 = &v107[v136];
  *(_QWORD *)v137 = *(_QWORD *)v138;
  v139 = *((_QWORD *)v138 + 1);
  v140 = *((_QWORD *)v137 + 1);
  *((_QWORD *)v137 + 1) = v139;
  swift_bridgeObjectRetain(v139);
  swift_bridgeObjectRelease(v140);
  v141 = v108[14];
  v142 = &v106[v141];
  v143 = &v107[v141];
  *(_QWORD *)v142 = *(_QWORD *)v143;
  v144 = *((_QWORD *)v143 + 1);
  v145 = *((_QWORD *)v142 + 1);
  *((_QWORD *)v142 + 1) = v144;
  swift_bridgeObjectRetain(v144);
  swift_bridgeObjectRelease(v145);
  v146 = v108[15];
  v147 = &v106[v146];
  v148 = &v107[v146];
  v149 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 24))(v147, v148, v149);
  v150 = v108[16];
  v151 = &v106[v150];
  v152 = &v107[v150];
  v153 = type metadata accessor for SunEvents(0);
  LODWORD(v121) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v153);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v152, 1, v153);
  if ((_DWORD)v121)
  {
    if (!v154)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 16))(v151, v152, v153);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v151, 0, 1, v153);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v155 = *(_QWORD *)(v153 - 8);
  if (v154)
  {
    (*(void (**)(char *, uint64_t))(v155 + 8))(v151, v153);
LABEL_41:
    v156 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v155 + 24))(v151, v152, v153);
LABEL_42:
  v157 = v108[17];
  v158 = &v106[v157];
  v159 = &v107[v157];
  v160 = type metadata accessor for MoonEvents(0);
  v161 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, v160);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, v160);
  if (v161)
  {
    if (!v162)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 16))(v158, v159, v160);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v158, 0, 1, v160);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v163 = *(_QWORD *)(v160 - 8);
  if (v162)
  {
    (*(void (**)(char *, uint64_t))(v163 + 8))(v158, v160);
LABEL_47:
    v164 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(char *, char *, uint64_t))(v163 + 24))(v158, v159, v160);
LABEL_48:
  v253(&v106[v108[18]], &v107[v108[18]], v255);
  *(_QWORD *)&v106[v108[19]] = *(_QWORD *)&v107[v108[19]];
  v165 = v104[6];
  v166 = &v11[v165];
  v167 = &v12[v165];
  v168 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v169 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v166, 1, (uint64_t)v168);
  v170 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v167, 1, (uint64_t)v168);
  if (!v169)
  {
    if (v170)
    {
      sub_100011894((uint64_t)v166, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_54;
    }
    *(_QWORD *)v166 = *(_QWORD *)v167;
    v182 = *((_QWORD *)v167 + 1);
    v183 = *((_QWORD *)v166 + 1);
    *((_QWORD *)v166 + 1) = v182;
    swift_bridgeObjectRetain(v182);
    swift_bridgeObjectRelease(v183);
    v184 = v168[5];
    v185 = &v166[v184];
    v186 = &v167[v184];
    v187 = type metadata accessor for AttributedString(0);
    v267 = *(_QWORD *)(v187 - 8);
    v264 = *(void (**)(char *, char *, uint64_t))(v267 + 24);
    v264(v185, v186, v187);
    v188 = v168[6];
    v189 = &v166[v188];
    v190 = &v167[v188];
    v191 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v166[v188], 1, v187);
    v192 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v190, 1, v187);
    if (v191)
    {
      if (!v192)
      {
        (*(void (**)(char *, char *, uint64_t))(v267 + 16))(v189, v190, v187);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v189, 0, 1, v187);
LABEL_65:
        v181 = v252;
        v198 = v168[7];
        v199 = &v166[v198];
        v200 = &v167[v198];
        *(_QWORD *)v199 = *(_QWORD *)v200;
        v201 = *((_QWORD *)v200 + 1);
        v202 = *((_QWORD *)v199 + 1);
        *((_QWORD *)v199 + 1) = v201;
        swift_bridgeObjectRetain(v201);
        swift_bridgeObjectRelease(v202);
        goto LABEL_66;
      }
    }
    else
    {
      if (!v192)
      {
        v264(v189, v190, v187);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v267 + 8))(v189, v187);
    }
    v197 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
    goto LABEL_65;
  }
  if (v170)
  {
LABEL_54:
    v180 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v180 - 8) + 64));
    v181 = v252;
    goto LABEL_66;
  }
  *(_QWORD *)v166 = *(_QWORD *)v167;
  v171 = *((_QWORD *)v167 + 1);
  *((_QWORD *)v166 + 1) = v171;
  v172 = v168[5];
  v173 = &v166[v172];
  v266 = &v167[v172];
  v174 = type metadata accessor for AttributedString(0);
  v175 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v174 - 8) + 16);
  swift_bridgeObjectRetain(v171);
  v175(v173, v266, v174);
  v176 = v168[6];
  v177 = &v166[v176];
  v178 = &v167[v176];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v167[v176], 1, v174))
  {
    v179 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
  }
  else
  {
    v175(v177, v178, v174);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v177, 0, 1, v174);
  }
  v181 = v252;
  v193 = v168[7];
  v194 = &v166[v193];
  v195 = &v167[v193];
  *(_QWORD *)v194 = *(_QWORD *)v195;
  v196 = *((_QWORD *)v195 + 1);
  *((_QWORD *)v194 + 1) = v196;
  swift_bridgeObjectRetain(v196);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v166, 0, 1, (uint64_t)v168);
LABEL_66:
  v203 = v104[7];
  v204 = &v11[v203];
  v205 = &v12[v203];
  v206 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v206 - 8) + 24))(v204, v205, v206);
  v207 = v104[8];
  v208 = &v11[v207];
  v209 = &v12[v207];
  *(_QWORD *)v208 = *(_QWORD *)v209;
  v210 = *((_QWORD *)v209 + 1);
  v211 = *((_QWORD *)v208 + 1);
  *((_QWORD *)v208 + 1) = v210;
  swift_bridgeObjectRetain(v210);
  swift_bridgeObjectRelease(v211);
  v11[v104[9]] = v12[v104[9]];
  v11[v104[10]] = v12[v104[10]];
  v212 = v104[11];
  v213 = *(_QWORD *)&v11[v212];
  v214 = *(_QWORD *)&v12[v212];
  *(_QWORD *)&v11[v212] = v214;
  swift_retain(v214);
  swift_release(v213);
  v215 = v104[12];
  v216 = &v11[v215];
  v217 = &v12[v215];
  *(_QWORD *)v216 = *(_QWORD *)v217;
  v218 = *((_QWORD *)v217 + 1);
  v219 = *((_QWORD *)v216 + 1);
  *((_QWORD *)v216 + 1) = v218;
  swift_bridgeObjectRetain(v218);
  swift_bridgeObjectRelease(v219);
  v220 = v104[13];
  v221 = *(_QWORD *)&v12[v220];
  v222 = *(_QWORD *)&v11[v220];
  *(_QWORD *)&v11[v220] = v221;
  swift_retain(v221);
  swift_release(v222);
  v223 = v104[14];
  v224 = *(_QWORD *)&v12[v223];
  v225 = *(_QWORD *)&v11[v223];
  *(_QWORD *)&v11[v223] = v224;
  swift_retain(v224);
  swift_release(v225);
  v226 = v104[15];
  v227 = *(_QWORD *)&v12[v226];
  v228 = *(_QWORD *)&v11[v226];
  *(_QWORD *)&v11[v226] = v227;
  swift_retain(v227);
  swift_release(v228);
  v229 = v104[16];
  v230 = *(_QWORD *)&v12[v229];
  v231 = *(_QWORD *)&v11[v229];
  *(_QWORD *)&v11[v229] = v230;
  swift_retain(v230);
  swift_release(v231);
  v11[v104[17]] = v12[v104[17]];
  v232 = v104[18];
  v233 = *(_QWORD *)&v12[v232];
  v234 = *(_QWORD *)&v11[v232];
  *(_QWORD *)&v11[v232] = v233;
  swift_retain(v233);
  swift_release(v234);
  v235 = v104[19];
  v236 = *(_QWORD *)&v12[v235];
  v237 = *(_QWORD *)&v11[v235];
  *(_QWORD *)&v11[v235] = v236;
  swift_retain(v236);
  swift_release(v237);
  *(_QWORD *)&v11[v104[20]] = *(_QWORD *)&v12[v104[20]];
  v11[v104[21]] = v12[v104[21]];
  v11[v104[22]] = v12[v104[22]];
  v11[v104[23]] = v12[v104[23]];
  v11[v104[24]] = v12[v104[24]];
  v238 = v104[25];
  v239 = &v11[v238];
  v240 = &v12[v238];
  *(_QWORD *)v239 = *(_QWORD *)v240;
  v241 = *((_QWORD *)v240 + 1);
  v242 = *((_QWORD *)v239 + 1);
  *((_QWORD *)v239 + 1) = v241;
  swift_bridgeObjectRetain(v241);
  swift_bridgeObjectRelease(v242);
  v11[v104[26]] = v12[v104[26]];
  *(_QWORD *)&v11[v104[27]] = *(_QWORD *)&v12[v104[27]];
  *(_QWORD *)&v11[v104[28]] = *(_QWORD *)&v12[v104[28]];
  if (v181 != v256)
  {
    v243 = *(int *)(v251 + 28);
    v244 = (_QWORD *)((char *)v181 + v243);
    v245 = (_QWORD *)((char *)v256 + v243);
    sub_100016904((uint64_t)v181 + v243, &qword_1001BF490);
    v246 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v245, v246) == 1)
    {
      v247 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v247 - 8) + 16))(v244, v245, v247);
      v248 = 1;
    }
    else
    {
      v249 = *v245;
      *v244 = *v245;
      swift_retain(v249);
      v248 = 0;
    }
    swift_storeEnumTagMultiPayload(v244, v246, v248);
  }
  return v181;
}

_OWORD *sub_1000617DC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  void (*v112)(char *, char *);
  uint64_t v113;
  int *v114;
  void (*v115)(char *, char *);
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  void (*v119)(char *, char *, uint64_t);
  void (*v123)(char *, char *, uint64_t);

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
  v8(v5, v6, v7);
  v9 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v10 = v9[5];
  v11 = &v5[v10];
  v12 = &v6[v10];
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v15 = v13;
  v123 = v14;
  v14(&v5[v9[6]], &v6[v9[6]], v13);
  v16 = v9[7];
  v17 = &v5[v16];
  v18 = &v6[v16];
  v19 = sub_100005D40(&qword_1001BF090);
  v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
  v20(v17, v18, v19);
  v20(&v5[v9[8]], &v6[v9[8]], v19);
  *(_OWORD *)&v5[v9[9]] = *(_OWORD *)&v6[v9[9]];
  v21 = v9[10];
  v22 = &v5[v21];
  v23 = &v6[v21];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v6[v21], 1, v19))
  {
    v24 = sub_100005D40(&qword_1001BF098);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v20(v22, v23, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v22, 0, 1, v19);
  }
  v25 = v9[11];
  v26 = &v5[v25];
  v27 = &v6[v25];
  v117 = v20;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v6[v25], 1, v19))
  {
    v28 = sub_100005D40(&qword_1001BF098);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v20(v26, v27, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v26, 0, 1, v19);
  }
  v29 = v9[12];
  v30 = &v5[v29];
  v31 = &v6[v29];
  v118 = v7;
  v119 = v8;
  v8(&v5[v29], &v6[v29], v7);
  v32 = (int *)type metadata accessor for ConditionViewModel(0);
  v33 = v32[5];
  v34 = &v30[v33];
  v35 = &v31[v33];
  v36 = type metadata accessor for WeatherCondition(0);
  v112 = *(void (**)(char *, char *))(*(_QWORD *)(v36 - 8) + 32);
  v113 = v36;
  v112(v34, v35);
  *(_OWORD *)&v30[v32[6]] = *(_OWORD *)&v31[v32[6]];
  *(_OWORD *)&v30[v32[7]] = *(_OWORD *)&v31[v32[7]];
  v30[v32[8]] = v31[v32[8]];
  v30[v32[9]] = v31[v32[9]];
  v114 = v32;
  v30[v32[10]] = v31[v32[10]];
  *(_QWORD *)&v5[v9[13]] = *(_QWORD *)&v6[v9[13]];
  v37 = v9[14];
  v38 = &v5[v37];
  v39 = &v6[v37];
  v40 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
  v41 = v9[15];
  v42 = &v5[v41];
  v43 = &v6[v41];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v6[v41], 1, v15))
  {
    v44 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    v45 = v123;
  }
  else
  {
    v45 = v123;
    v123(v42, v43, v15);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v42, 0, 1, v15);
  }
  v46 = v9[16];
  v47 = &v5[v46];
  v48 = &v6[v46];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v6[v46], 1, v15))
  {
    v49 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    v45(v47, v48, v15);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v47, 0, 1, v15);
  }
  v50 = v9[17];
  v51 = &v5[v50];
  v52 = &v6[v50];
  v53 = type metadata accessor for UVIndex(0);
  v115 = *(void (**)(char *, char *))(*(_QWORD *)(v53 - 8) + 32);
  v116 = v53;
  v115(v51, v52);
  v54 = v9[18];
  v55 = &v5[v54];
  v56 = &v6[v54];
  v57 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
  *(_QWORD *)&v5[v9[19]] = *(_QWORD *)&v6[v9[19]];
  v58 = v9[20];
  v59 = &v5[v58];
  v60 = &v6[v58];
  v59[32] = v60[32];
  v61 = *((_OWORD *)v60 + 1);
  *(_OWORD *)v59 = *(_OWORD *)v60;
  *((_OWORD *)v59 + 1) = v61;
  v62 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v63 = v62[5];
  v64 = &v5[v63];
  v65 = &v6[v63];
  v119(&v5[v63], &v6[v63], v118);
  v66 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v123(&v64[v66[5]], &v65[v66[5]], v15);
  v117(&v64[v66[6]], &v65[v66[6]], v19);
  v117(&v64[v66[7]], &v65[v66[7]], v19);
  v67 = v66[8];
  v68 = &v64[v67];
  v69 = &v65[v67];
  v119(&v64[v67], &v65[v67], v118);
  ((void (*)(char *, char *, uint64_t))v112)(&v68[v114[5]], &v69[v114[5]], v113);
  *(_OWORD *)&v68[v114[6]] = *(_OWORD *)&v69[v114[6]];
  *(_OWORD *)&v68[v114[7]] = *(_OWORD *)&v69[v114[7]];
  v68[v114[8]] = v69[v114[8]];
  v68[v114[9]] = v69[v114[9]];
  v68[v114[10]] = v69[v114[10]];
  v70 = v66[9];
  v71 = &v64[v70];
  v72 = &v65[v70];
  v73 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
  *(_QWORD *)&v64[v66[10]] = *(_QWORD *)&v65[v66[10]];
  *(_OWORD *)&v64[v66[11]] = *(_OWORD *)&v65[v66[11]];
  *(_OWORD *)&v64[v66[12]] = *(_OWORD *)&v65[v66[12]];
  *(_OWORD *)&v64[v66[13]] = *(_OWORD *)&v65[v66[13]];
  *(_OWORD *)&v64[v66[14]] = *(_OWORD *)&v65[v66[14]];
  v74 = v66[15];
  v75 = &v64[v74];
  v76 = &v65[v74];
  v77 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
  v78 = v66[16];
  v79 = &v64[v78];
  v80 = &v65[v78];
  v81 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v80, 1, v81))
  {
    v82 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v79, v80, v81);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v79, 0, 1, v81);
  }
  v83 = v66[17];
  v84 = &v64[v83];
  v85 = &v65[v83];
  v86 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v85, 1, v86))
  {
    v87 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v84, v85, v86);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v84, 0, 1, v86);
  }
  ((void (*)(char *, char *, uint64_t))v115)(&v64[v66[18]], &v65[v66[18]], v116);
  *(_QWORD *)&v64[v66[19]] = *(_QWORD *)&v65[v66[19]];
  v88 = v62[6];
  v89 = &v5[v88];
  v90 = &v6[v88];
  v91 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v90, 1, (uint64_t)v91))
  {
    v92 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v89 = *(_OWORD *)v90;
    v93 = v91[5];
    v94 = &v89[v93];
    v95 = &v90[v93];
    v96 = type metadata accessor for AttributedString(0);
    v97 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32);
    v97(v94, v95, v96);
    v98 = v91[6];
    v99 = &v89[v98];
    v100 = &v90[v98];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v90[v98], 1, v96))
    {
      v101 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    }
    else
    {
      v97(v99, v100, v96);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v96);
    }
    *(_OWORD *)&v89[v91[7]] = *(_OWORD *)&v90[v91[7]];
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v89, 0, 1, (uint64_t)v91);
  }
  v102 = v62[7];
  v103 = &v5[v102];
  v104 = &v6[v102];
  v105 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 32))(v103, v104, v105);
  *(_OWORD *)&v5[v62[8]] = *(_OWORD *)&v6[v62[8]];
  v5[v62[9]] = v6[v62[9]];
  v5[v62[10]] = v6[v62[10]];
  *(_QWORD *)&v5[v62[11]] = *(_QWORD *)&v6[v62[11]];
  *(_OWORD *)&v5[v62[12]] = *(_OWORD *)&v6[v62[12]];
  *(_QWORD *)&v5[v62[13]] = *(_QWORD *)&v6[v62[13]];
  *(_QWORD *)&v5[v62[14]] = *(_QWORD *)&v6[v62[14]];
  *(_QWORD *)&v5[v62[15]] = *(_QWORD *)&v6[v62[15]];
  *(_QWORD *)&v5[v62[16]] = *(_QWORD *)&v6[v62[16]];
  v5[v62[17]] = v6[v62[17]];
  *(_QWORD *)&v5[v62[18]] = *(_QWORD *)&v6[v62[18]];
  *(_QWORD *)&v5[v62[19]] = *(_QWORD *)&v6[v62[19]];
  *(_QWORD *)&v5[v62[20]] = *(_QWORD *)&v6[v62[20]];
  v5[v62[21]] = v6[v62[21]];
  v5[v62[22]] = v6[v62[22]];
  v5[v62[23]] = v6[v62[23]];
  v5[v62[24]] = v6[v62[24]];
  *(_OWORD *)&v5[v62[25]] = *(_OWORD *)&v6[v62[25]];
  v5[v62[26]] = v6[v62[26]];
  *(_QWORD *)&v5[v62[27]] = *(_QWORD *)&v6[v62[27]];
  *(_QWORD *)&v5[v62[28]] = *(_QWORD *)&v6[v62[28]];
  v106 = *(int *)(a3 + 28);
  v107 = (char *)a1 + v106;
  v108 = (char *)a2 + v106;
  v109 = sub_100005D40(&qword_1001BF490);
  if (swift_getEnumCaseMultiPayload(v108, v109) == 1)
  {
    v110 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 32))(v107, v108, v110);
    swift_storeEnumTagMultiPayload(v107, v109, 1);
  }
  else
  {
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_100062164(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *);
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  int *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  int *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  int *v168;
  int v169;
  int v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  void (*v175)(char *, char *, uint64_t);
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v242;
  _QWORD *v243;
  void (*v244)(char *, char *, uint64_t);
  _QWORD *v245;
  void (*v246)(char *, char *);
  uint64_t v247;
  uint64_t v248;
  char *v249;
  void (*v250)(char *, char *, uint64_t);
  void (*v251)(char *, char *, uint64_t);
  uint64_t v252;
  void (*v253)(char *, char *, uint64_t);
  uint64_t v254;
  uint64_t v255;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v242 = a3;
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v245 = a2;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(char *, char *))(*(_QWORD *)(v13 - 8) + 40);
  v254 = v13;
  v14(v11, v12);
  v15 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v16 = v15[5];
  v17 = &v11[v16];
  v18 = &v12[v16];
  v19 = type metadata accessor for Date(0);
  v248 = *(_QWORD *)(v19 - 8);
  v20 = *(void (**)(char *, char *, uint64_t))(v248 + 40);
  v20(v17, v18, v19);
  v251 = v20;
  v252 = v19;
  v20(&v11[v15[6]], &v12[v15[6]], v19);
  v21 = v15[7];
  v22 = &v11[v21];
  v23 = &v12[v21];
  v24 = sub_100005D40(&qword_1001BF090);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(char *, char *, uint64_t))(v25 + 40);
  v26(v22, v23, v24);
  v250 = v26;
  v26(&v11[v15[8]], &v12[v15[8]], v24);
  v27 = v15[9];
  v28 = &v11[v27];
  v29 = &v12[v27];
  v31 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  v32 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v28 = v31;
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v15[10];
  v34 = &v11[v33];
  v35 = &v12[v33];
  LODWORD(v26) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v11[v33], 1, v24);
  v36 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 1, v24);
  if ((_DWORD)v26)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v34, v35, v24);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v34, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v34, v24);
LABEL_6:
    v37 = sub_100005D40(&qword_1001BF098);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_7;
  }
  v250(v34, v35, v24);
LABEL_7:
  v38 = v15[11];
  v39 = &v11[v38];
  v40 = &v12[v38];
  v41 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v11[v38], 1, v24);
  v42 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v40, 1, v24);
  v243 = a1;
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v39, v40, v24);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v39, v24);
LABEL_12:
    v43 = sub_100005D40(&qword_1001BF098);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_13;
  }
  v250(v39, v40, v24);
LABEL_13:
  v44 = v15[12];
  v45 = &v11[v44];
  v46 = &v12[v44];
  ((void (*)(char *, char *, uint64_t))v14)(&v11[v44], &v12[v44], v254);
  v47 = (int *)type metadata accessor for ConditionViewModel(0);
  v48 = v47[5];
  v49 = &v45[v48];
  v50 = &v46[v48];
  v51 = type metadata accessor for WeatherCondition(0);
  v246 = *(void (**)(char *, char *))(*(_QWORD *)(v51 - 8) + 40);
  v247 = v51;
  v246(v49, v50);
  v52 = v47[6];
  v53 = &v45[v52];
  v54 = &v46[v52];
  v56 = *(_QWORD *)v54;
  v55 = *((_QWORD *)v54 + 1);
  v57 = *((_QWORD *)v53 + 1);
  *(_QWORD *)v53 = v56;
  *((_QWORD *)v53 + 1) = v55;
  swift_bridgeObjectRelease(v57);
  v58 = v47[7];
  v59 = &v45[v58];
  v60 = &v46[v58];
  v62 = *(_QWORD *)v60;
  v61 = *((_QWORD *)v60 + 1);
  v63 = *((_QWORD *)v59 + 1);
  *(_QWORD *)v59 = v62;
  *((_QWORD *)v59 + 1) = v61;
  swift_bridgeObjectRelease(v63);
  v45[v47[8]] = v46[v47[8]];
  v45[v47[9]] = v46[v47[9]];
  v45[v47[10]] = v46[v47[10]];
  *(_QWORD *)&v11[v15[13]] = *(_QWORD *)&v12[v15[13]];
  v64 = v15[14];
  v65 = &v11[v64];
  v66 = &v12[v64];
  v67 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 40))(v65, v66, v67);
  v68 = v15[15];
  v69 = &v11[v68];
  v70 = &v12[v68];
  LODWORD(v66) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v11[v68], 1, v252);
  v71 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v70, 1, v252);
  if ((_DWORD)v66)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v248 + 32))(v69, v70, v252);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v69, 0, 1, v252);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v248 + 8))(v69, v252);
LABEL_18:
    v72 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_19;
  }
  v251(v69, v70, v252);
LABEL_19:
  v73 = v15[16];
  v74 = &v11[v73];
  v75 = &v12[v73];
  v76 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v11[v73], 1, v252);
  v77 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v75, 1, v252);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v248 + 32))(v74, v75, v252);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v74, 0, 1, v252);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v248 + 8))(v74, v252);
LABEL_24:
    v78 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_25;
  }
  v251(v74, v75, v252);
LABEL_25:
  v79 = v15[17];
  v80 = &v11[v79];
  v81 = &v12[v79];
  v82 = type metadata accessor for UVIndex(0);
  v244 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 40);
  v244(v80, v81, v82);
  v83 = v15[18];
  v84 = &v11[v83];
  v85 = &v12[v83];
  v86 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 40))(v84, v85, v86);
  *(_QWORD *)&v11[v15[19]] = *(_QWORD *)&v12[v15[19]];
  v87 = v15[20];
  v88 = (uint64_t)&v11[v87];
  v89 = &v12[v87];
  v90 = *(_QWORD *)&v11[v87 + 8];
  if (v90)
  {
    v91 = *((_QWORD *)v89 + 1);
    if (v91)
    {
      *(_QWORD *)v88 = *(_QWORD *)v89;
      *(_QWORD *)(v88 + 8) = v91;
      swift_bridgeObjectRelease(v90);
      v92 = v89[32];
      v93 = *(_QWORD *)(v88 + 16);
      v94 = *(_QWORD *)(v88 + 24);
      v95 = *(_BYTE *)(v88 + 32);
      *(_OWORD *)(v88 + 16) = *((_OWORD *)v89 + 1);
      *(_BYTE *)(v88 + 32) = v92;
      sub_100007458(v93, v94, v95);
      goto LABEL_30;
    }
    sub_100008EC4(v88);
  }
  v96 = *((_OWORD *)v89 + 1);
  *(_OWORD *)v88 = *(_OWORD *)v89;
  *(_OWORD *)(v88 + 16) = v96;
  *(_BYTE *)(v88 + 32) = v89[32];
LABEL_30:
  v97 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v98 = v97[5];
  v99 = &v11[v98];
  v249 = v12;
  v100 = &v12[v98];
  ((void (*)(char *, char *, uint64_t))v14)(&v11[v98], &v12[v98], v254);
  v101 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v251(&v99[v101[5]], &v100[v101[5]], v252);
  v250(&v99[v101[6]], &v100[v101[6]], v24);
  v250(&v99[v101[7]], &v100[v101[7]], v24);
  v102 = v101[8];
  v103 = &v99[v102];
  v104 = &v100[v102];
  ((void (*)(char *, char *, uint64_t))v14)(&v99[v102], &v100[v102], v254);
  ((void (*)(char *, char *, uint64_t))v246)(&v103[v47[5]], &v104[v47[5]], v247);
  v105 = v47[6];
  v106 = &v103[v105];
  v107 = (uint64_t *)&v104[v105];
  v109 = *v107;
  v108 = v107[1];
  v110 = *((_QWORD *)v106 + 1);
  *(_QWORD *)v106 = v109;
  *((_QWORD *)v106 + 1) = v108;
  swift_bridgeObjectRelease(v110);
  v111 = v47[7];
  v112 = &v103[v111];
  v113 = (uint64_t *)&v104[v111];
  v115 = *v113;
  v114 = v113[1];
  v116 = *((_QWORD *)v112 + 1);
  *(_QWORD *)v112 = v115;
  *((_QWORD *)v112 + 1) = v114;
  swift_bridgeObjectRelease(v116);
  v103[v47[8]] = v104[v47[8]];
  v103[v47[9]] = v104[v47[9]];
  v103[v47[10]] = v104[v47[10]];
  v117 = v101[9];
  v118 = &v99[v117];
  v119 = &v100[v117];
  v120 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 40))(v118, v119, v120);
  *(_QWORD *)&v99[v101[10]] = *(_QWORD *)&v100[v101[10]];
  v121 = v101[11];
  v122 = &v99[v121];
  v123 = &v100[v121];
  v125 = *(_QWORD *)v123;
  v124 = *((_QWORD *)v123 + 1);
  v126 = *((_QWORD *)v122 + 1);
  *(_QWORD *)v122 = v125;
  *((_QWORD *)v122 + 1) = v124;
  swift_bridgeObjectRelease(v126);
  v127 = v101[12];
  v128 = &v99[v127];
  v129 = &v100[v127];
  v131 = *(_QWORD *)v129;
  v130 = *((_QWORD *)v129 + 1);
  v132 = *((_QWORD *)v128 + 1);
  *(_QWORD *)v128 = v131;
  *((_QWORD *)v128 + 1) = v130;
  swift_bridgeObjectRelease(v132);
  v133 = v101[13];
  v134 = &v99[v133];
  v135 = &v100[v133];
  v137 = *(_QWORD *)v135;
  v136 = *((_QWORD *)v135 + 1);
  v138 = *((_QWORD *)v134 + 1);
  *(_QWORD *)v134 = v137;
  *((_QWORD *)v134 + 1) = v136;
  swift_bridgeObjectRelease(v138);
  v139 = v101[14];
  v140 = &v99[v139];
  v141 = &v100[v139];
  v143 = *(_QWORD *)v141;
  v142 = *((_QWORD *)v141 + 1);
  v144 = *((_QWORD *)v140 + 1);
  *(_QWORD *)v140 = v143;
  *((_QWORD *)v140 + 1) = v142;
  swift_bridgeObjectRelease(v144);
  v145 = v101[15];
  v146 = &v99[v145];
  v147 = &v100[v145];
  v148 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v148 - 8) + 40))(v146, v147, v148);
  v149 = v101[16];
  v150 = &v99[v149];
  v151 = &v100[v149];
  v152 = type metadata accessor for SunEvents(0);
  v153 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, v152);
  v154 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v151, 1, v152);
  if (v153)
  {
    if (!v154)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 32))(v150, v151, v152);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v150, 0, 1, v152);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v155 = *(_QWORD *)(v152 - 8);
  if (v154)
  {
    (*(void (**)(char *, uint64_t))(v155 + 8))(v150, v152);
LABEL_35:
    v156 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v155 + 40))(v150, v151, v152);
LABEL_36:
  v157 = v101[17];
  v158 = &v99[v157];
  v159 = &v100[v157];
  v160 = type metadata accessor for MoonEvents(0);
  v161 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, v160);
  v162 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v159, 1, v160);
  if (v161)
  {
    if (!v162)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 32))(v158, v159, v160);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v158, 0, 1, v160);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v163 = *(_QWORD *)(v160 - 8);
  if (v162)
  {
    (*(void (**)(char *, uint64_t))(v163 + 8))(v158, v160);
LABEL_41:
    v164 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v163 + 40))(v158, v159, v160);
LABEL_42:
  v244(&v99[v101[18]], &v100[v101[18]], v82);
  *(_QWORD *)&v99[v101[19]] = *(_QWORD *)&v100[v101[19]];
  v165 = v97[6];
  v166 = &v11[v165];
  v167 = &v249[v165];
  v168 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v169 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v166, 1, (uint64_t)v168);
  v170 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v167, 1, (uint64_t)v168);
  if (v169)
  {
    if (!v170)
    {
      *(_OWORD *)v166 = *(_OWORD *)v167;
      v171 = v168[5];
      v172 = &v166[v171];
      v173 = &v167[v171];
      v174 = type metadata accessor for AttributedString(0);
      v175 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v174 - 8) + 32);
      v175(v172, v173, v174);
      v176 = v168[6];
      v177 = &v166[v176];
      v178 = &v167[v176];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v167[v176], 1, v174))
      {
        v179 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
      }
      else
      {
        v175(v177, v178, v174);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v177, 0, 1, v174);
      }
      v181 = v243;
      *(_OWORD *)&v166[v168[7]] = *(_OWORD *)&v167[v168[7]];
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v166, 0, 1, (uint64_t)v168);
      goto LABEL_64;
    }
    goto LABEL_48;
  }
  if (v170)
  {
    sub_100011894((uint64_t)v166, type metadata accessor for RainInlineContentViewModel);
LABEL_48:
    v180 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v180 - 8) + 64));
    v181 = v243;
    goto LABEL_64;
  }
  v182 = *((_QWORD *)v167 + 1);
  v183 = *((_QWORD *)v166 + 1);
  *(_QWORD *)v166 = *(_QWORD *)v167;
  *((_QWORD *)v166 + 1) = v182;
  swift_bridgeObjectRelease(v183);
  v184 = v168[5];
  v185 = &v166[v184];
  v186 = &v167[v184];
  v187 = type metadata accessor for AttributedString(0);
  v255 = *(_QWORD *)(v187 - 8);
  v253 = *(void (**)(char *, char *, uint64_t))(v255 + 40);
  v253(v185, v186, v187);
  v188 = v168[6];
  v189 = &v166[v188];
  v190 = &v167[v188];
  v191 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v166[v188], 1, v187);
  v192 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v190, 1, v187);
  if (!v191)
  {
    if (!v192)
    {
      v253(v189, v190, v187);
      goto LABEL_63;
    }
    (*(void (**)(char *, uint64_t))(v255 + 8))(v189, v187);
    goto LABEL_62;
  }
  if (v192)
  {
LABEL_62:
    v193 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v255 + 32))(v189, v190, v187);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v189, 0, 1, v187);
LABEL_63:
  v181 = v243;
  v194 = v168[7];
  v195 = &v166[v194];
  v196 = (uint64_t *)&v167[v194];
  v198 = *v196;
  v197 = v196[1];
  v199 = *((_QWORD *)v195 + 1);
  *(_QWORD *)v195 = v198;
  *((_QWORD *)v195 + 1) = v197;
  swift_bridgeObjectRelease(v199);
LABEL_64:
  v200 = v97[7];
  v201 = &v11[v200];
  v202 = &v249[v200];
  v203 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v203 - 8) + 40))(v201, v202, v203);
  v204 = v97[8];
  v205 = &v11[v204];
  v206 = &v249[v204];
  v208 = *(_QWORD *)v206;
  v207 = *((_QWORD *)v206 + 1);
  v209 = *((_QWORD *)v205 + 1);
  *(_QWORD *)v205 = v208;
  *((_QWORD *)v205 + 1) = v207;
  swift_bridgeObjectRelease(v209);
  v11[v97[9]] = v249[v97[9]];
  v11[v97[10]] = v249[v97[10]];
  v210 = v97[11];
  v211 = *(_QWORD *)&v11[v210];
  *(_QWORD *)&v11[v210] = *(_QWORD *)&v249[v210];
  swift_release(v211);
  v212 = v97[12];
  v213 = &v11[v212];
  v214 = &v249[v212];
  v216 = *(_QWORD *)v214;
  v215 = *((_QWORD *)v214 + 1);
  v217 = *((_QWORD *)v213 + 1);
  *(_QWORD *)v213 = v216;
  *((_QWORD *)v213 + 1) = v215;
  swift_bridgeObjectRelease(v217);
  v218 = v97[13];
  v219 = *(_QWORD *)&v11[v218];
  *(_QWORD *)&v11[v218] = *(_QWORD *)&v249[v218];
  swift_release(v219);
  v220 = v97[14];
  v221 = *(_QWORD *)&v11[v220];
  *(_QWORD *)&v11[v220] = *(_QWORD *)&v249[v220];
  swift_release(v221);
  v222 = v97[15];
  v223 = *(_QWORD *)&v11[v222];
  *(_QWORD *)&v11[v222] = *(_QWORD *)&v249[v222];
  swift_release(v223);
  v224 = v97[16];
  v225 = *(_QWORD *)&v11[v224];
  *(_QWORD *)&v11[v224] = *(_QWORD *)&v249[v224];
  swift_release(v225);
  v11[v97[17]] = v249[v97[17]];
  v226 = v97[18];
  v227 = *(_QWORD *)&v11[v226];
  *(_QWORD *)&v11[v226] = *(_QWORD *)&v249[v226];
  swift_release(v227);
  v228 = v97[19];
  v229 = *(_QWORD *)&v11[v228];
  *(_QWORD *)&v11[v228] = *(_QWORD *)&v249[v228];
  swift_release(v229);
  *(_QWORD *)&v11[v97[20]] = *(_QWORD *)&v249[v97[20]];
  v11[v97[21]] = v249[v97[21]];
  v11[v97[22]] = v249[v97[22]];
  v11[v97[23]] = v249[v97[23]];
  v11[v97[24]] = v249[v97[24]];
  v230 = v97[25];
  v231 = &v11[v230];
  v232 = &v249[v230];
  v234 = *(_QWORD *)v232;
  v233 = *((_QWORD *)v232 + 1);
  v235 = *((_QWORD *)v231 + 1);
  *(_QWORD *)v231 = v234;
  *((_QWORD *)v231 + 1) = v233;
  swift_bridgeObjectRelease(v235);
  v11[v97[26]] = v249[v97[26]];
  *(_QWORD *)&v11[v97[27]] = *(_QWORD *)&v249[v97[27]];
  *(_QWORD *)&v11[v97[28]] = *(_QWORD *)&v249[v97[28]];
  if (v181 != v245)
  {
    v236 = *(int *)(v242 + 28);
    v237 = (char *)v181 + v236;
    v238 = (char *)v245 + v236;
    sub_100016904((uint64_t)v181 + v236, &qword_1001BF490);
    v239 = sub_100005D40(&qword_1001BF490);
    if (swift_getEnumCaseMultiPayload(v238, v239) == 1)
    {
      v240 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 32))(v237, v238, v240);
      swift_storeEnumTagMultiPayload(v237, v239, 1);
    }
    else
    {
      memcpy(v237, v238, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
    }
  }
  return v181;
}

uint64_t sub_100062F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100062F90);
}

void sub_100062F90()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10006751C();
  if (v1)
  {
    sub_1000674E0();
    sub_1000443A4();
  }
  else
  {
    sub_1000674F8();
    sub_10001C6C0();
    if (v1)
    {
      v2 = *(int *)(v0 + 24);
    }
    else
    {
      sub_100005D40(&qword_1001BF4A8);
      v2 = *(int *)(v0 + 28);
    }
    v3 = sub_10006754C(v2);
    sub_100016B50(v3, v4, v5);
  }
}

uint64_t sub_100062FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100062FF8);
}

void sub_100062FF8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100067508();
  if (v2)
  {
    sub_100067558();
    sub_1000443A4();
  }
  else
  {
    v1 = v0;
    sub_100016B00();
    sub_10001C6D0();
    if (v2)
    {
      v3 = *(int *)(v1 + 24);
    }
    else
    {
      sub_100005D40(&qword_1001BF4A8);
      v3 = *(int *)(v1 + 28);
    }
    v4 = sub_10006752C(v3);
    sub_100016B44(v4, v5, v6, v7);
  }
}

void sub_10006305C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_10017CAB0;
  v6[1] = &unk_10017CAC8;
  v2 = type metadata accessor for CurrentObservationViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001C028(319, (unint64_t *)&qword_1001BF528, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t *sub_100063104(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  __int128 v80;
  int *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  int *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  int *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  void (*v142)(char *, char *, uint64_t);
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  void (*v182)(char *, char *);
  uint64_t v183;
  int *v184;
  void (*v185)(char *, char *);
  uint64_t v186;
  void (*v187)(char *, char *, uint64_t);
  uint64_t v188;
  char *v189;
  void (*v191)(char *, char *, uint64_t);
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v30 = *a2;
    *a1 = *a2;
    v31 = v30 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v30);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UUID(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
    v11 = (int *)type metadata accessor for CurrentObservationViewModel(0);
    v12 = v11[5];
    v13 = &v7[v12];
    v14 = &v8[v12];
    v15 = type metadata accessor for Date(0);
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    v191 = v16;
    v193 = v15;
    v16(&v7[v11[6]], &v8[v11[6]], v15);
    v17 = v11[7];
    v18 = &v7[v17];
    v19 = &v8[v17];
    v20 = sub_100005D40(&qword_1001BF090);
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v21(v18, v19, v20);
    v21(&v7[v11[8]], &v8[v11[8]], v20);
    v22 = v11[9];
    v23 = &v7[v22];
    v24 = &v8[v22];
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = v25;
    v26 = v11[10];
    v27 = &v7[v26];
    v28 = &v8[v26];
    swift_bridgeObjectRetain(v25);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v28, 1, v20))
    {
      v29 = sub_100005D40(&qword_1001BF098);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v21(v27, v28, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v27, 0, 1, v20);
    }
    v32 = v11[11];
    v33 = &v7[v32];
    v34 = &v8[v32];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v8[v32], 1, v20))
    {
      v35 = sub_100005D40(&qword_1001BF098);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v21(v33, v34, v20);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v33, 0, 1, v20);
    }
    v36 = v11[12];
    v37 = &v7[v36];
    v38 = &v8[v36];
    v187 = v10;
    v188 = v9;
    v10(&v7[v36], &v8[v36], v9);
    v39 = (int *)type metadata accessor for ConditionViewModel(0);
    v40 = v39[5];
    v41 = &v37[v40];
    v195 = v8;
    v42 = &v38[v40];
    v43 = type metadata accessor for WeatherCondition(0);
    v182 = *(void (**)(char *, char *))(*(_QWORD *)(v43 - 8) + 16);
    v183 = v43;
    v182(v41, v42);
    v44 = v39[6];
    v45 = &v37[v44];
    v46 = &v38[v44];
    v47 = *((_QWORD *)v46 + 1);
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *((_QWORD *)v45 + 1) = v47;
    v48 = v39[7];
    v49 = &v37[v48];
    v50 = &v38[v48];
    v51 = *((_QWORD *)v50 + 1);
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *((_QWORD *)v49 + 1) = v51;
    v37[v39[8]] = v38[v39[8]];
    v37[v39[9]] = v38[v39[9]];
    v184 = v39;
    v37[v39[10]] = v38[v39[10]];
    *(_QWORD *)&v7[v11[13]] = *(_QWORD *)&v8[v11[13]];
    v52 = v11[14];
    v53 = &v7[v52];
    v54 = &v8[v52];
    v55 = type metadata accessor for CloudAltitudeKind(0);
    v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v51);
    v56(v53, v54, v55);
    v57 = v11[15];
    v58 = &v7[v57];
    v59 = &v195[v57];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v195[v57], 1, v193))
    {
      v60 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v191(v58, v59, v193);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v193);
    }
    v61 = v11[16];
    v62 = &v7[v61];
    v63 = &v195[v61];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v195[v61], 1, v193))
    {
      v64 = sub_100005D40(&qword_1001BF0A0);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      v191(v62, v63, v193);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v62, 0, 1, v193);
    }
    v65 = v11[17];
    v66 = &v7[v65];
    v67 = &v195[v65];
    v68 = type metadata accessor for UVIndex(0);
    v185 = *(void (**)(char *, char *))(*(_QWORD *)(v68 - 8) + 16);
    v186 = v68;
    v185(v66, v67);
    v69 = v11[18];
    v70 = &v7[v69];
    v71 = &v195[v69];
    v72 = type metadata accessor for Wind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
    *(_QWORD *)&v7[v11[19]] = *(_QWORD *)&v195[v11[19]];
    v73 = v11[20];
    v74 = &v7[v73];
    v75 = &v195[v73];
    v76 = *((_QWORD *)v75 + 1);
    if (v76)
    {
      *(_QWORD *)v74 = *(_QWORD *)v75;
      *((_QWORD *)v74 + 1) = v76;
      v77 = *((_QWORD *)v75 + 2);
      v78 = *((_QWORD *)v75 + 3);
      v79 = v75[32];
      swift_bridgeObjectRetain(v76);
      sub_100006E58(v77, v78, v79);
      *((_QWORD *)v74 + 2) = v77;
      *((_QWORD *)v74 + 3) = v78;
      v74[32] = v79;
    }
    else
    {
      v80 = *((_OWORD *)v75 + 1);
      *(_OWORD *)v74 = *(_OWORD *)v75;
      *((_OWORD *)v74 + 1) = v80;
      v74[32] = v75[32];
    }
    v81 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
    v82 = v81[5];
    v189 = v7;
    v83 = &v7[v82];
    v84 = &v195[v82];
    v187(&v7[v82], &v195[v82], v188);
    v85 = (int *)type metadata accessor for DailyForecastViewModel(0);
    v191(&v83[v85[5]], &v84[v85[5]], v193);
    v21(&v83[v85[6]], &v84[v85[6]], v20);
    v21(&v83[v85[7]], &v84[v85[7]], v20);
    v86 = v85[8];
    v87 = &v83[v86];
    v88 = &v84[v86];
    v187(&v83[v86], &v84[v86], v188);
    ((void (*)(char *, char *, uint64_t))v182)(&v87[v184[5]], &v88[v184[5]], v183);
    v89 = v184[6];
    v90 = &v87[v89];
    v91 = &v88[v89];
    v92 = *((_QWORD *)v91 + 1);
    *(_QWORD *)v90 = *(_QWORD *)v91;
    *((_QWORD *)v90 + 1) = v92;
    v93 = v184[7];
    v94 = &v87[v93];
    v95 = &v88[v93];
    v96 = *((_QWORD *)v95 + 1);
    *(_QWORD *)v94 = *(_QWORD *)v95;
    *((_QWORD *)v94 + 1) = v96;
    v87[v184[8]] = v88[v184[8]];
    v87[v184[9]] = v88[v184[9]];
    v87[v184[10]] = v88[v184[10]];
    v97 = v85[9];
    v98 = &v83[v97];
    v99 = &v84[v97];
    v100 = type metadata accessor for Precipitation(0);
    v101 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 16);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v96);
    v101(v98, v99, v100);
    *(_QWORD *)&v83[v85[10]] = *(_QWORD *)&v84[v85[10]];
    v102 = v85[11];
    v103 = &v83[v102];
    v104 = &v84[v102];
    v105 = *((_QWORD *)v104 + 1);
    *(_QWORD *)v103 = *(_QWORD *)v104;
    *((_QWORD *)v103 + 1) = v105;
    v106 = v85[12];
    v107 = &v83[v106];
    v108 = &v84[v106];
    v109 = *((_QWORD *)v108 + 1);
    *(_QWORD *)v107 = *(_QWORD *)v108;
    *((_QWORD *)v107 + 1) = v109;
    v110 = v85[13];
    v111 = &v83[v110];
    v112 = &v84[v110];
    v113 = *((_QWORD *)v112 + 1);
    *(_QWORD *)v111 = *(_QWORD *)v112;
    *((_QWORD *)v111 + 1) = v113;
    v114 = v85[14];
    v115 = &v83[v114];
    v116 = &v84[v114];
    v117 = *((_QWORD *)v116 + 1);
    *(_QWORD *)v115 = *(_QWORD *)v116;
    *((_QWORD *)v115 + 1) = v117;
    v118 = v85[15];
    v192 = &v84[v118];
    v194 = &v83[v118];
    v119 = type metadata accessor for TemperatureScaleConfiguration(0);
    v120 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 16);
    swift_bridgeObjectRetain(v105);
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v113);
    swift_bridgeObjectRetain(v117);
    v120(v194, v192, v119);
    v121 = v85[16];
    v122 = &v83[v121];
    v123 = &v84[v121];
    v124 = type metadata accessor for SunEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v123, 1, v124))
    {
      v125 = sub_100005D40(&qword_1001BF0A8);
      memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(v122, v123, v124);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v122, 0, 1, v124);
    }
    v126 = v85[17];
    v127 = &v83[v126];
    v128 = &v84[v126];
    v129 = type metadata accessor for MoonEvents(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128, 1, v129))
    {
      v130 = sub_100005D40(&qword_1001BF0B0);
      memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 16))(v127, v128, v129);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v127, 0, 1, v129);
    }
    ((void (*)(char *, char *, uint64_t))v185)(&v83[v85[18]], &v84[v85[18]], v186);
    *(_QWORD *)&v83[v85[19]] = *(_QWORD *)&v84[v85[19]];
    v131 = v81[6];
    v132 = &v189[v131];
    v133 = v195;
    v134 = &v195[v131];
    v135 = (int *)type metadata accessor for RainInlineContentViewModel(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v134, 1, (uint64_t)v135))
    {
      v136 = sub_100005D40(&qword_1001BF0C0);
      memcpy(v132, v134, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
    }
    else
    {
      v137 = *((_QWORD *)v134 + 1);
      *(_QWORD *)v132 = *(_QWORD *)v134;
      *((_QWORD *)v132 + 1) = v137;
      v138 = v135[5];
      v139 = &v132[v138];
      v140 = &v134[v138];
      v141 = type metadata accessor for AttributedString(0);
      v142 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 16);
      swift_bridgeObjectRetain(v137);
      v142(v139, v140, v141);
      v143 = v135[6];
      v144 = &v132[v143];
      v145 = &v134[v143];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v134[v143], 1, v141))
      {
        v146 = sub_100005D40(&qword_1001BF0B8);
        memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
      }
      else
      {
        v142(v144, v145, v141);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v144, 0, 1, v141);
      }
      v147 = v135[7];
      v148 = &v132[v147];
      v149 = &v134[v147];
      v150 = *((_QWORD *)v149 + 1);
      *(_QWORD *)v148 = *(_QWORD *)v149;
      *((_QWORD *)v148 + 1) = v150;
      swift_bridgeObjectRetain(v150);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v132, 0, 1, (uint64_t)v135);
      v133 = v195;
    }
    v151 = v81[7];
    v152 = &v189[v151];
    v153 = &v133[v151];
    v154 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v154 - 8) + 16))(v152, v153, v154);
    v155 = v81[8];
    v156 = &v189[v155];
    v157 = &v133[v155];
    v158 = *((_QWORD *)v157 + 1);
    *(_QWORD *)v156 = *(_QWORD *)v157;
    *((_QWORD *)v156 + 1) = v158;
    v189[v81[9]] = v133[v81[9]];
    v189[v81[10]] = v133[v81[10]];
    v159 = v81[11];
    v160 = *(_QWORD *)&v133[v159];
    *(_QWORD *)&v189[v159] = v160;
    v161 = v81[12];
    v162 = &v189[v161];
    v163 = &v133[v161];
    v164 = *((_QWORD *)v163 + 1);
    *(_QWORD *)v162 = *(_QWORD *)v163;
    *((_QWORD *)v162 + 1) = v164;
    v165 = v81[13];
    v166 = *(_QWORD *)&v133[v165];
    *(_QWORD *)&v189[v165] = v166;
    v167 = v81[14];
    v168 = v133;
    v169 = *(_QWORD *)&v133[v167];
    *(_QWORD *)&v189[v167] = v169;
    v170 = v81[15];
    v171 = *(_QWORD *)&v133[v170];
    *(_QWORD *)&v189[v170] = v171;
    v172 = v81[16];
    v196 = *(_QWORD *)&v133[v172];
    *(_QWORD *)&v189[v172] = v196;
    v189[v81[17]] = v133[v81[17]];
    v173 = v81[18];
    v174 = *(_QWORD *)&v133[v173];
    *(_QWORD *)&v189[v173] = v174;
    v175 = v81[19];
    v176 = *(_QWORD *)&v133[v175];
    *(_QWORD *)&v189[v175] = v176;
    *(_QWORD *)&v189[v81[20]] = *(_QWORD *)&v168[v81[20]];
    v189[v81[21]] = v168[v81[21]];
    v189[v81[22]] = v168[v81[22]];
    v189[v81[23]] = v168[v81[23]];
    v189[v81[24]] = v168[v81[24]];
    v177 = v81[25];
    v178 = &v189[v177];
    v179 = &v168[v177];
    v180 = *((_QWORD *)v179 + 1);
    *(_QWORD *)v178 = *(_QWORD *)v179;
    *((_QWORD *)v178 + 1) = v180;
    v189[v81[26]] = v168[v81[26]];
    *(_QWORD *)&v189[v81[27]] = *(_QWORD *)&v168[v81[27]];
    *(_QWORD *)&v189[v81[28]] = *(_QWORD *)&v168[v81[28]];
    swift_bridgeObjectRetain(v158);
    swift_retain(v160);
    swift_bridgeObjectRetain(v164);
    swift_retain(v166);
    swift_retain(v169);
    swift_retain(v171);
    swift_retain(v196);
    swift_retain(v174);
    swift_retain(v176);
    swift_bridgeObjectRetain(v180);
    return a1;
  }
  return (uint64_t *)v31;
}

double sub_100063BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double result;
  void (*v52)(uint64_t);
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v8 = v4 + v7[5];
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v4 + v7[6], v9);
  v11 = v4 + v7[7];
  v12 = sub_100005D40(&qword_1001BF090);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(v4 + v7[8], v12);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v7[9] + 8));
  v14 = v4 + v7[10];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v14, 1, v12))
    v13(v14, v12);
  v15 = v4 + v7[11];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v15, 1, v12))
    v13(v15, v12);
  v16 = v4 + v7[12];
  v56 = v6;
  v6(v16, v5);
  v17 = (int *)type metadata accessor for ConditionViewModel(0);
  v18 = v16 + v17[5];
  v19 = type metadata accessor for WeatherCondition(0);
  v52 = *(void (**)(uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v53 = v19;
  v52(v18);
  swift_bridgeObjectRelease(*(_QWORD *)(v16 + v17[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v16 + v17[7] + 8));
  v20 = v4 + v7[14];
  v21 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = v4 + v7[15];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v22, 1, v9))
    v10(v22, v9);
  v23 = v4 + v7[16];
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v23, 1, v9))
    v10(v23, v9);
  v24 = v4 + v7[17];
  v25 = type metadata accessor for UVIndex(0);
  v54 = *(void (**)(uint64_t))(*(_QWORD *)(v25 - 8) + 8);
  v55 = v25;
  v54(v24);
  v26 = v4 + v7[18];
  v27 = type metadata accessor for Wind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = v4 + v7[20];
  v29 = *(_QWORD *)(v28 + 8);
  if (v29)
  {
    swift_bridgeObjectRelease(v29);
    sub_100007458(*(_QWORD *)(v28 + 16), *(_QWORD *)(v28 + 24), *(_BYTE *)(v28 + 32));
  }
  v30 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v31 = v4 + v30[5];
  v56(v31, v5);
  v32 = v5;
  v33 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v10(v31 + v33[5], v9);
  v13(v31 + v33[6], v12);
  v13(v31 + v33[7], v12);
  v34 = v31 + v33[8];
  v56(v34, v32);
  ((void (*)(uint64_t, uint64_t))v52)(v34 + v17[5], v53);
  swift_bridgeObjectRelease(*(_QWORD *)(v34 + v17[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v34 + v17[7] + 8));
  v35 = v31 + v33[9];
  v36 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v33[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v33[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v33[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v31 + v33[14] + 8));
  v37 = v31 + v33[15];
  v38 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
  v39 = v31 + v33[16];
  v40 = type metadata accessor for SunEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v39, 1, v40))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
  v41 = v31 + v33[17];
  v42 = type metadata accessor for MoonEvents(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v41, 1, v42))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
  ((void (*)(uint64_t, uint64_t))v54)(v31 + v33[18], v55);
  v43 = v4 + v30[6];
  v44 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v43, 1, (uint64_t)v44))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v43 + 8));
    v45 = v43 + v44[5];
    v46 = type metadata accessor for AttributedString(0);
    v47 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8);
    v47(v45, v46);
    v48 = v43 + v44[6];
    if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v48, 1, v46))
      v47(v48, v46);
    swift_bridgeObjectRelease(*(_QWORD *)(v43 + v44[7] + 8));
  }
  v49 = v4 + v30[7];
  v50 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v30[8] + 8));
  swift_release(*(_QWORD *)(v4 + v30[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v30[12] + 8));
  swift_release(*(_QWORD *)(v4 + v30[13]));
  swift_release(*(_QWORD *)(v4 + v30[14]));
  swift_release(*(_QWORD *)(v4 + v30[15]));
  swift_release(*(_QWORD *)(v4 + v30[16]));
  swift_release(*(_QWORD *)(v4 + v30[18]));
  swift_release(*(_QWORD *)(v4 + v30[19]));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v4 + v30[25] + 8)).n128_u64[0];
  return result;
}

_QWORD *sub_100064140(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t);
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  void (*v178)(char *, char *);
  uint64_t v179;
  int *v180;
  void (*v181)(char *, char *);
  uint64_t v182;
  void (*v183)(char *, char *, uint64_t);
  uint64_t v184;
  char *v185;
  void (*v187)(char *, char *, uint64_t);
  char *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain(v3);
  v8(v5, v6, v7);
  v9 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v10 = v9[5];
  v11 = &v5[v10];
  v12 = &v6[v10];
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v14(v11, v12, v13);
  v187 = v14;
  v189 = v13;
  v14(&v5[v9[6]], &v6[v9[6]], v13);
  v15 = v9[7];
  v16 = &v5[v15];
  v17 = &v6[v15];
  v18 = sub_100005D40(&qword_1001BF090);
  v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  v19(v16, v17, v18);
  v19(&v5[v9[8]], &v6[v9[8]], v18);
  v20 = v9[9];
  v21 = &v5[v20];
  v22 = &v6[v20];
  v23 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_QWORD *)v21 + 1) = v23;
  v24 = v9[10];
  v25 = &v5[v24];
  v26 = &v6[v24];
  swift_bridgeObjectRetain(v23);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v18))
  {
    v27 = sub_100005D40(&qword_1001BF098);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v19(v25, v26, v18);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v18);
  }
  v28 = v9[11];
  v29 = &v5[v28];
  v30 = &v6[v28];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v6[v28], 1, v18))
  {
    v31 = sub_100005D40(&qword_1001BF098);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v19(v29, v30, v18);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v18);
  }
  v32 = v9[12];
  v33 = &v5[v32];
  v34 = &v6[v32];
  v183 = v8;
  v184 = v7;
  v8(&v5[v32], &v6[v32], v7);
  v35 = (int *)type metadata accessor for ConditionViewModel(0);
  v36 = v35[5];
  v37 = &v33[v36];
  v191 = v6;
  v38 = &v34[v36];
  v39 = type metadata accessor for WeatherCondition(0);
  v178 = *(void (**)(char *, char *))(*(_QWORD *)(v39 - 8) + 16);
  v179 = v39;
  v178(v37, v38);
  v40 = v35[6];
  v41 = &v33[v40];
  v42 = &v34[v40];
  v43 = *((_QWORD *)v42 + 1);
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = v43;
  v44 = v35[7];
  v45 = &v33[v44];
  v46 = &v34[v44];
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = v47;
  v33[v35[8]] = v34[v35[8]];
  v33[v35[9]] = v34[v35[9]];
  v180 = v35;
  v33[v35[10]] = v34[v35[10]];
  *(_QWORD *)&v5[v9[13]] = *(_QWORD *)&v6[v9[13]];
  v48 = v9[14];
  v49 = &v5[v48];
  v50 = &v6[v48];
  v51 = type metadata accessor for CloudAltitudeKind(0);
  v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v47);
  v52(v49, v50, v51);
  v53 = v9[15];
  v54 = &v5[v53];
  v55 = &v191[v53];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v191[v53], 1, v189))
  {
    v56 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    v187(v54, v55, v189);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v54, 0, 1, v189);
  }
  v57 = v9[16];
  v58 = &v5[v57];
  v59 = &v191[v57];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v191[v57], 1, v189))
  {
    v60 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    v187(v58, v59, v189);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v189);
  }
  v61 = v9[17];
  v62 = &v5[v61];
  v63 = &v191[v61];
  v64 = type metadata accessor for UVIndex(0);
  v181 = *(void (**)(char *, char *))(*(_QWORD *)(v64 - 8) + 16);
  v182 = v64;
  v181(v62, v63);
  v65 = v9[18];
  v66 = &v5[v65];
  v67 = &v191[v65];
  v68 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
  *(_QWORD *)&v5[v9[19]] = *(_QWORD *)&v191[v9[19]];
  v69 = v9[20];
  v70 = &v5[v69];
  v71 = &v191[v69];
  v72 = *((_QWORD *)v71 + 1);
  if (v72)
  {
    *(_QWORD *)v70 = *(_QWORD *)v71;
    *((_QWORD *)v70 + 1) = v72;
    v73 = *((_QWORD *)v71 + 2);
    v74 = *((_QWORD *)v71 + 3);
    v75 = v71[32];
    swift_bridgeObjectRetain(v72);
    sub_100006E58(v73, v74, v75);
    *((_QWORD *)v70 + 2) = v73;
    *((_QWORD *)v70 + 3) = v74;
    v70[32] = v75;
  }
  else
  {
    v76 = *((_OWORD *)v71 + 1);
    *(_OWORD *)v70 = *(_OWORD *)v71;
    *((_OWORD *)v70 + 1) = v76;
    v70[32] = v71[32];
  }
  v77 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v78 = v77[5];
  v185 = v5;
  v79 = &v5[v78];
  v80 = &v191[v78];
  v183(&v5[v78], &v191[v78], v184);
  v81 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v187(&v79[v81[5]], &v80[v81[5]], v189);
  v19(&v79[v81[6]], &v80[v81[6]], v18);
  v19(&v79[v81[7]], &v80[v81[7]], v18);
  v82 = v81[8];
  v83 = &v79[v82];
  v84 = &v80[v82];
  v183(&v79[v82], &v80[v82], v184);
  ((void (*)(char *, char *, uint64_t))v178)(&v83[v180[5]], &v84[v180[5]], v179);
  v85 = v180[6];
  v86 = &v83[v85];
  v87 = &v84[v85];
  v88 = *((_QWORD *)v87 + 1);
  *(_QWORD *)v86 = *(_QWORD *)v87;
  *((_QWORD *)v86 + 1) = v88;
  v89 = v180[7];
  v90 = &v83[v89];
  v91 = &v84[v89];
  v92 = *((_QWORD *)v91 + 1);
  *(_QWORD *)v90 = *(_QWORD *)v91;
  *((_QWORD *)v90 + 1) = v92;
  v83[v180[8]] = v84[v180[8]];
  v83[v180[9]] = v84[v180[9]];
  v83[v180[10]] = v84[v180[10]];
  v93 = v81[9];
  v94 = &v79[v93];
  v95 = &v80[v93];
  v96 = type metadata accessor for Precipitation(0);
  v97 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16);
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v92);
  v97(v94, v95, v96);
  *(_QWORD *)&v79[v81[10]] = *(_QWORD *)&v80[v81[10]];
  v98 = v81[11];
  v99 = &v79[v98];
  v100 = &v80[v98];
  v101 = *((_QWORD *)v100 + 1);
  *(_QWORD *)v99 = *(_QWORD *)v100;
  *((_QWORD *)v99 + 1) = v101;
  v102 = v81[12];
  v103 = &v79[v102];
  v104 = &v80[v102];
  v105 = *((_QWORD *)v104 + 1);
  *(_QWORD *)v103 = *(_QWORD *)v104;
  *((_QWORD *)v103 + 1) = v105;
  v106 = v81[13];
  v107 = &v79[v106];
  v108 = &v80[v106];
  v109 = *((_QWORD *)v108 + 1);
  *(_QWORD *)v107 = *(_QWORD *)v108;
  *((_QWORD *)v107 + 1) = v109;
  v110 = v81[14];
  v111 = &v79[v110];
  v112 = &v80[v110];
  v113 = *((_QWORD *)v112 + 1);
  *(_QWORD *)v111 = *(_QWORD *)v112;
  *((_QWORD *)v111 + 1) = v113;
  v114 = v81[15];
  v188 = &v80[v114];
  v190 = &v79[v114];
  v115 = type metadata accessor for TemperatureScaleConfiguration(0);
  v116 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 16);
  swift_bridgeObjectRetain(v101);
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRetain(v113);
  v116(v190, v188, v115);
  v117 = v81[16];
  v118 = &v79[v117];
  v119 = &v80[v117];
  v120 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v119, 1, v120))
  {
    v121 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v118, v119, v120);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v118, 0, 1, v120);
  }
  v122 = v81[17];
  v123 = &v79[v122];
  v124 = &v80[v122];
  v125 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v124, 1, v125))
  {
    v126 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 16))(v123, v124, v125);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v123, 0, 1, v125);
  }
  ((void (*)(char *, char *, uint64_t))v181)(&v79[v81[18]], &v80[v81[18]], v182);
  *(_QWORD *)&v79[v81[19]] = *(_QWORD *)&v80[v81[19]];
  v127 = v77[6];
  v128 = &v185[v127];
  v129 = v191;
  v130 = &v191[v127];
  v131 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v130, 1, (uint64_t)v131))
  {
    v132 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v128, v130, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
  }
  else
  {
    v133 = *((_QWORD *)v130 + 1);
    *(_QWORD *)v128 = *(_QWORD *)v130;
    *((_QWORD *)v128 + 1) = v133;
    v134 = v131[5];
    v135 = &v128[v134];
    v136 = &v130[v134];
    v137 = type metadata accessor for AttributedString(0);
    v138 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 16);
    swift_bridgeObjectRetain(v133);
    v138(v135, v136, v137);
    v139 = v131[6];
    v140 = &v128[v139];
    v141 = &v130[v139];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v130[v139], 1, v137))
    {
      v142 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
    }
    else
    {
      v138(v140, v141, v137);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v140, 0, 1, v137);
    }
    v143 = v131[7];
    v144 = &v128[v143];
    v145 = &v130[v143];
    v146 = *((_QWORD *)v145 + 1);
    *(_QWORD *)v144 = *(_QWORD *)v145;
    *((_QWORD *)v144 + 1) = v146;
    swift_bridgeObjectRetain(v146);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v128, 0, 1, (uint64_t)v131);
    v129 = v191;
  }
  v147 = v77[7];
  v148 = &v185[v147];
  v149 = &v129[v147];
  v150 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
  v151 = v77[8];
  v152 = &v185[v151];
  v153 = &v129[v151];
  v154 = *((_QWORD *)v153 + 1);
  *(_QWORD *)v152 = *(_QWORD *)v153;
  *((_QWORD *)v152 + 1) = v154;
  v185[v77[9]] = v129[v77[9]];
  v185[v77[10]] = v129[v77[10]];
  v155 = v77[11];
  v156 = *(_QWORD *)&v129[v155];
  *(_QWORD *)&v185[v155] = v156;
  v157 = v77[12];
  v158 = &v185[v157];
  v159 = &v129[v157];
  v160 = *((_QWORD *)v159 + 1);
  *(_QWORD *)v158 = *(_QWORD *)v159;
  *((_QWORD *)v158 + 1) = v160;
  v161 = v77[13];
  v162 = *(_QWORD *)&v129[v161];
  *(_QWORD *)&v185[v161] = v162;
  v163 = v77[14];
  v164 = v129;
  v165 = *(_QWORD *)&v129[v163];
  *(_QWORD *)&v185[v163] = v165;
  v166 = v77[15];
  v167 = *(_QWORD *)&v129[v166];
  *(_QWORD *)&v185[v166] = v167;
  v168 = v77[16];
  v192 = *(_QWORD *)&v129[v168];
  *(_QWORD *)&v185[v168] = v192;
  v185[v77[17]] = v129[v77[17]];
  v169 = v77[18];
  v170 = *(_QWORD *)&v129[v169];
  *(_QWORD *)&v185[v169] = v170;
  v171 = v77[19];
  v172 = *(_QWORD *)&v129[v171];
  *(_QWORD *)&v185[v171] = v172;
  *(_QWORD *)&v185[v77[20]] = *(_QWORD *)&v164[v77[20]];
  v185[v77[21]] = v164[v77[21]];
  v185[v77[22]] = v164[v77[22]];
  v185[v77[23]] = v164[v77[23]];
  v185[v77[24]] = v164[v77[24]];
  v173 = v77[25];
  v174 = &v185[v173];
  v175 = &v164[v173];
  v176 = *((_QWORD *)v175 + 1);
  *(_QWORD *)v174 = *(_QWORD *)v175;
  *((_QWORD *)v174 + 1) = v176;
  v185[v77[26]] = v164[v77[26]];
  *(_QWORD *)&v185[v77[27]] = *(_QWORD *)&v164[v77[27]];
  *(_QWORD *)&v185[v77[28]] = *(_QWORD *)&v164[v77[28]];
  swift_bridgeObjectRetain(v154);
  swift_retain(v156);
  swift_bridgeObjectRetain(v160);
  swift_retain(v162);
  swift_retain(v165);
  swift_retain(v167);
  swift_retain(v192);
  swift_retain(v170);
  swift_retain(v172);
  swift_bridgeObjectRetain(v176);
  return a1;
}

_QWORD *sub_100064BB0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  int *v166;
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  void (*v173)(char *, char *, uint64_t);
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  int v188;
  int v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v241;
  void (*v242)(char *, char *, uint64_t);
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  int *v246;
  void (*v247)(char *, char *);
  uint64_t v248;
  void (*v249)(char *, char *, uint64_t);
  void (*v250)(char *, char *, uint64_t);
  void (*v251)(char *, char *, uint64_t);
  void (*v252)(char *, char *, uint64_t);
  char *v253;
  uint64_t v254;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v245 = a1;
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v252 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24);
  v252(v9, v10, v11);
  v12 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v13 = v12[5];
  v14 = &v9[v13];
  v15 = &v10[v13];
  v16 = type metadata accessor for Date(0);
  v241 = *(_QWORD *)(v16 - 8);
  v17 = *(void (**)(char *, char *, uint64_t))(v241 + 24);
  v17(v14, v15, v16);
  v250 = v17;
  v17(&v9[v12[6]], &v10[v12[6]], v16);
  v18 = v12[7];
  v19 = &v9[v18];
  v20 = &v10[v18];
  v21 = sub_100005D40(&qword_1001BF090);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(void (**)(char *, char *, uint64_t))(v22 + 24);
  v23(v19, v20, v21);
  v249 = v23;
  v23(&v9[v12[8]], &v10[v12[8]], v21);
  v24 = v12[9];
  v25 = &v9[v24];
  v26 = &v10[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  v28 = *((_QWORD *)v25 + 1);
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = v12[10];
  v30 = &v9[v29];
  v31 = &v10[v29];
  LODWORD(v23) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v9[v29], 1, v21);
  v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v21);
  if ((_DWORD)v23)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v30, v31, v21);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v30, v21);
LABEL_6:
    v33 = sub_100005D40(&qword_1001BF098);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_7;
  }
  v249(v30, v31, v21);
LABEL_7:
  v34 = v12[11];
  v35 = &v9[v34];
  v36 = &v10[v34];
  v37 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v9[v34], 1, v21);
  v38 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v36, 1, v21);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v35, v36, v21);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v35, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v35, v21);
LABEL_12:
    v39 = sub_100005D40(&qword_1001BF098);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  v249(v35, v36, v21);
LABEL_13:
  v40 = v12[12];
  v41 = &v9[v40];
  v42 = &v10[v40];
  v243 = v11;
  v252(&v9[v40], &v10[v40], v11);
  v43 = (int *)type metadata accessor for ConditionViewModel(0);
  v44 = v43[5];
  v45 = &v41[v44];
  v46 = &v42[v44];
  v47 = type metadata accessor for WeatherCondition(0);
  v247 = *(void (**)(char *, char *))(*(_QWORD *)(v47 - 8) + 24);
  v248 = v47;
  v247(v45, v46);
  v48 = v43[6];
  v49 = &v41[v48];
  v50 = &v42[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  v52 = *((_QWORD *)v49 + 1);
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  v53 = v43[7];
  v54 = &v41[v53];
  v55 = &v42[v53];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v56 = *((_QWORD *)v55 + 1);
  v57 = *((_QWORD *)v54 + 1);
  *((_QWORD *)v54 + 1) = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  v41[v43[8]] = v42[v43[8]];
  v41[v43[9]] = v42[v43[9]];
  v41[v43[10]] = v42[v43[10]];
  *(_QWORD *)&v9[v12[13]] = *(_QWORD *)&v10[v12[13]];
  v58 = v12[14];
  v59 = &v9[v58];
  v60 = &v10[v58];
  v61 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 24))(v59, v60, v61);
  v62 = v12[15];
  v63 = &v9[v62];
  v64 = &v10[v62];
  LODWORD(v57) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v9[v62], 1, v16);
  v65 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v64, 1, v16);
  v246 = v43;
  if ((_DWORD)v57)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v241 + 16))(v63, v64, v16);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v63, 0, 1, v16);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v241 + 8))(v63, v16);
LABEL_18:
    v66 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_19;
  }
  v250(v63, v64, v16);
LABEL_19:
  v67 = v243;
  v68 = v12[16];
  v69 = &v9[v68];
  v70 = &v10[v68];
  v71 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v9[v68], 1, v16);
  v72 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v70, 1, v16);
  if (v71)
  {
    if (!v72)
    {
      (*(void (**)(char *, char *, uint64_t))(v241 + 16))(v69, v70, v16);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v69, 0, 1, v16);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v72)
  {
    (*(void (**)(char *, uint64_t))(v241 + 8))(v69, v16);
LABEL_24:
    v73 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    goto LABEL_25;
  }
  v250(v69, v70, v16);
LABEL_25:
  v74 = v12[17];
  v75 = &v9[v74];
  v76 = &v10[v74];
  v77 = type metadata accessor for UVIndex(0);
  v242 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 24);
  v242(v75, v76, v77);
  v78 = v12[18];
  v79 = &v9[v78];
  v80 = &v10[v78];
  v81 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 24))(v79, v80, v81);
  *(_QWORD *)&v9[v12[19]] = *(_QWORD *)&v10[v12[19]];
  v82 = v12[20];
  v83 = (uint64_t)&v9[v82];
  v84 = &v10[v82];
  v85 = *(_QWORD *)&v9[v82 + 8];
  v86 = *(_QWORD *)&v10[v82 + 8];
  v244 = v77;
  if (v85)
  {
    if (v86)
    {
      *(_QWORD *)v83 = *(_QWORD *)v84;
      v87 = *((_QWORD *)v84 + 1);
      *(_QWORD *)(v83 + 8) = v87;
      swift_bridgeObjectRetain(v87);
      swift_bridgeObjectRelease(v85);
      v88 = *((_QWORD *)v84 + 2);
      v89 = *((_QWORD *)v84 + 3);
      v90 = v84[32];
      sub_100006E58(v88, v89, v90);
      v91 = *(_QWORD *)(v83 + 16);
      v92 = *(_QWORD *)(v83 + 24);
      v93 = *(_BYTE *)(v83 + 32);
      *(_QWORD *)(v83 + 16) = v88;
      *(_QWORD *)(v83 + 24) = v89;
      *(_BYTE *)(v83 + 32) = v90;
      sub_100007458(v91, v92, v93);
    }
    else
    {
      sub_100008EC4(v83);
      v98 = v84[32];
      v99 = *((_OWORD *)v84 + 1);
      *(_OWORD *)v83 = *(_OWORD *)v84;
      *(_OWORD *)(v83 + 16) = v99;
      *(_BYTE *)(v83 + 32) = v98;
    }
  }
  else if (v86)
  {
    *(_QWORD *)v83 = *(_QWORD *)v84;
    v94 = *((_QWORD *)v84 + 1);
    *(_QWORD *)(v83 + 8) = v94;
    v95 = *((_QWORD *)v84 + 2);
    v96 = *((_QWORD *)v84 + 3);
    v97 = v84[32];
    swift_bridgeObjectRetain(v94);
    sub_100006E58(v95, v96, v97);
    *(_QWORD *)(v83 + 16) = v95;
    *(_QWORD *)(v83 + 24) = v96;
    *(_BYTE *)(v83 + 32) = v97;
  }
  else
  {
    v100 = *(_OWORD *)v84;
    v101 = *((_OWORD *)v84 + 1);
    *(_BYTE *)(v83 + 32) = v84[32];
    *(_OWORD *)v83 = v100;
    *(_OWORD *)(v83 + 16) = v101;
  }
  v102 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v103 = v102[5];
  v104 = &v9[v103];
  v105 = &v10[v103];
  v252(&v9[v103], &v10[v103], v67);
  v106 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v250(&v104[v106[5]], &v105[v106[5]], v16);
  v249(&v104[v106[6]], &v105[v106[6]], v21);
  v249(&v104[v106[7]], &v105[v106[7]], v21);
  v107 = v106[8];
  v108 = &v104[v107];
  v109 = &v105[v107];
  v252(&v104[v107], &v105[v107], v67);
  ((void (*)(char *, char *, uint64_t))v247)(&v108[v246[5]], &v109[v246[5]], v248);
  v110 = v246[6];
  v111 = &v108[v110];
  v112 = &v109[v110];
  *(_QWORD *)v111 = *(_QWORD *)v112;
  v113 = *((_QWORD *)v112 + 1);
  v114 = *((_QWORD *)v111 + 1);
  *((_QWORD *)v111 + 1) = v113;
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRelease(v114);
  v115 = v246[7];
  v116 = &v108[v115];
  v117 = &v109[v115];
  *(_QWORD *)v116 = *(_QWORD *)v117;
  v118 = *((_QWORD *)v117 + 1);
  v119 = *((_QWORD *)v116 + 1);
  *((_QWORD *)v116 + 1) = v118;
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRelease(v119);
  v108[v246[8]] = v109[v246[8]];
  v108[v246[9]] = v109[v246[9]];
  v108[v246[10]] = v109[v246[10]];
  v120 = v106[9];
  v121 = &v104[v120];
  v122 = &v105[v120];
  v123 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 24))(v121, v122, v123);
  *(_QWORD *)&v104[v106[10]] = *(_QWORD *)&v105[v106[10]];
  v124 = v106[11];
  v125 = &v104[v124];
  v126 = &v105[v124];
  *(_QWORD *)v125 = *(_QWORD *)v126;
  v127 = *((_QWORD *)v126 + 1);
  v128 = *((_QWORD *)v125 + 1);
  *((_QWORD *)v125 + 1) = v127;
  swift_bridgeObjectRetain(v127);
  swift_bridgeObjectRelease(v128);
  v129 = v106[12];
  v130 = &v104[v129];
  v131 = &v105[v129];
  *(_QWORD *)v130 = *(_QWORD *)v131;
  v132 = *((_QWORD *)v131 + 1);
  v133 = *((_QWORD *)v130 + 1);
  *((_QWORD *)v130 + 1) = v132;
  swift_bridgeObjectRetain(v132);
  swift_bridgeObjectRelease(v133);
  v134 = v106[13];
  v135 = &v104[v134];
  v136 = &v105[v134];
  *(_QWORD *)v135 = *(_QWORD *)v136;
  v137 = *((_QWORD *)v136 + 1);
  v138 = *((_QWORD *)v135 + 1);
  *((_QWORD *)v135 + 1) = v137;
  swift_bridgeObjectRetain(v137);
  swift_bridgeObjectRelease(v138);
  v139 = v106[14];
  v140 = &v104[v139];
  v141 = &v105[v139];
  *(_QWORD *)v140 = *(_QWORD *)v141;
  v142 = *((_QWORD *)v141 + 1);
  v143 = *((_QWORD *)v140 + 1);
  *((_QWORD *)v140 + 1) = v142;
  swift_bridgeObjectRetain(v142);
  swift_bridgeObjectRelease(v143);
  v144 = v106[15];
  v145 = &v104[v144];
  v146 = &v105[v144];
  v147 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 24))(v145, v146, v147);
  v148 = v106[16];
  v149 = &v104[v148];
  v150 = &v105[v148];
  v151 = type metadata accessor for SunEvents(0);
  LODWORD(v119) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v149, 1, v151);
  v152 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, v151);
  if ((_DWORD)v119)
  {
    if (!v152)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 16))(v149, v150, v151);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v149, 0, 1, v151);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v153 = *(_QWORD *)(v151 - 8);
  if (v152)
  {
    (*(void (**)(char *, uint64_t))(v153 + 8))(v149, v151);
LABEL_41:
    v154 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v153 + 24))(v149, v150, v151);
LABEL_42:
  v155 = v106[17];
  v156 = &v104[v155];
  v157 = &v105[v155];
  v158 = type metadata accessor for MoonEvents(0);
  v159 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v156, 1, v158);
  v160 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157, 1, v158);
  if (v159)
  {
    if (!v160)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v158 - 8) + 16))(v156, v157, v158);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v156, 0, 1, v158);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v161 = *(_QWORD *)(v158 - 8);
  if (v160)
  {
    (*(void (**)(char *, uint64_t))(v161 + 8))(v156, v158);
LABEL_47:
    v162 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(char *, char *, uint64_t))(v161 + 24))(v156, v157, v158);
LABEL_48:
  v242(&v104[v106[18]], &v105[v106[18]], v244);
  *(_QWORD *)&v104[v106[19]] = *(_QWORD *)&v105[v106[19]];
  v163 = v102[6];
  v164 = &v9[v163];
  v165 = &v10[v163];
  v166 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v167 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v164, 1, (uint64_t)v166);
  v168 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v165, 1, (uint64_t)v166);
  if (!v167)
  {
    if (v168)
    {
      sub_100011894((uint64_t)v164, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_54;
    }
    *(_QWORD *)v164 = *(_QWORD *)v165;
    v179 = *((_QWORD *)v165 + 1);
    v180 = *((_QWORD *)v164 + 1);
    *((_QWORD *)v164 + 1) = v179;
    swift_bridgeObjectRetain(v179);
    swift_bridgeObjectRelease(v180);
    v181 = v166[5];
    v182 = &v164[v181];
    v183 = &v165[v181];
    v184 = type metadata accessor for AttributedString(0);
    v254 = *(_QWORD *)(v184 - 8);
    v251 = *(void (**)(char *, char *, uint64_t))(v254 + 24);
    v251(v182, v183, v184);
    v185 = v166[6];
    v186 = &v164[v185];
    v187 = &v165[v185];
    v188 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v164[v185], 1, v184);
    v189 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v187, 1, v184);
    if (v188)
    {
      if (!v189)
      {
        (*(void (**)(char *, char *, uint64_t))(v254 + 16))(v186, v187, v184);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v186, 0, 1, v184);
LABEL_65:
        v195 = v166[7];
        v196 = &v164[v195];
        v197 = &v165[v195];
        *(_QWORD *)v196 = *(_QWORD *)v197;
        v198 = *((_QWORD *)v197 + 1);
        v199 = *((_QWORD *)v196 + 1);
        *((_QWORD *)v196 + 1) = v198;
        swift_bridgeObjectRetain(v198);
        swift_bridgeObjectRelease(v199);
        goto LABEL_66;
      }
    }
    else
    {
      if (!v189)
      {
        v251(v186, v187, v184);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v254 + 8))(v186, v184);
    }
    v194 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
    goto LABEL_65;
  }
  if (v168)
  {
LABEL_54:
    v178 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
    goto LABEL_66;
  }
  *(_QWORD *)v164 = *(_QWORD *)v165;
  v169 = *((_QWORD *)v165 + 1);
  *((_QWORD *)v164 + 1) = v169;
  v170 = v166[5];
  v171 = &v164[v170];
  v253 = &v165[v170];
  v172 = type metadata accessor for AttributedString(0);
  v173 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v172 - 8) + 16);
  swift_bridgeObjectRetain(v169);
  v173(v171, v253, v172);
  v174 = v166[6];
  v175 = &v164[v174];
  v176 = &v165[v174];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v165[v174], 1, v172))
  {
    v177 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
  }
  else
  {
    v173(v175, v176, v172);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v175, 0, 1, v172);
  }
  v190 = v166[7];
  v191 = &v164[v190];
  v192 = &v165[v190];
  *(_QWORD *)v191 = *(_QWORD *)v192;
  v193 = *((_QWORD *)v192 + 1);
  *((_QWORD *)v191 + 1) = v193;
  swift_bridgeObjectRetain(v193);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v164, 0, 1, (uint64_t)v166);
LABEL_66:
  v200 = v102[7];
  v201 = &v9[v200];
  v202 = &v10[v200];
  v203 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v203 - 8) + 24))(v201, v202, v203);
  v204 = v102[8];
  v205 = &v9[v204];
  v206 = &v10[v204];
  *(_QWORD *)v205 = *(_QWORD *)v206;
  v207 = *((_QWORD *)v206 + 1);
  v208 = *((_QWORD *)v205 + 1);
  *((_QWORD *)v205 + 1) = v207;
  swift_bridgeObjectRetain(v207);
  swift_bridgeObjectRelease(v208);
  v9[v102[9]] = v10[v102[9]];
  v9[v102[10]] = v10[v102[10]];
  v209 = v102[11];
  v210 = *(_QWORD *)&v9[v209];
  v211 = *(_QWORD *)&v10[v209];
  *(_QWORD *)&v9[v209] = v211;
  swift_retain(v211);
  swift_release(v210);
  v212 = v102[12];
  v213 = &v9[v212];
  v214 = &v10[v212];
  *(_QWORD *)v213 = *(_QWORD *)v214;
  v215 = *((_QWORD *)v214 + 1);
  v216 = *((_QWORD *)v213 + 1);
  *((_QWORD *)v213 + 1) = v215;
  swift_bridgeObjectRetain(v215);
  swift_bridgeObjectRelease(v216);
  v217 = v102[13];
  v218 = *(_QWORD *)&v10[v217];
  v219 = *(_QWORD *)&v9[v217];
  *(_QWORD *)&v9[v217] = v218;
  swift_retain(v218);
  swift_release(v219);
  v220 = v102[14];
  v221 = *(_QWORD *)&v10[v220];
  v222 = *(_QWORD *)&v9[v220];
  *(_QWORD *)&v9[v220] = v221;
  swift_retain(v221);
  swift_release(v222);
  v223 = v102[15];
  v224 = *(_QWORD *)&v10[v223];
  v225 = *(_QWORD *)&v9[v223];
  *(_QWORD *)&v9[v223] = v224;
  swift_retain(v224);
  swift_release(v225);
  v226 = v102[16];
  v227 = *(_QWORD *)&v10[v226];
  v228 = *(_QWORD *)&v9[v226];
  *(_QWORD *)&v9[v226] = v227;
  swift_retain(v227);
  swift_release(v228);
  v9[v102[17]] = v10[v102[17]];
  v229 = v102[18];
  v230 = *(_QWORD *)&v10[v229];
  v231 = *(_QWORD *)&v9[v229];
  *(_QWORD *)&v9[v229] = v230;
  swift_retain(v230);
  swift_release(v231);
  v232 = v102[19];
  v233 = *(_QWORD *)&v10[v232];
  v234 = *(_QWORD *)&v9[v232];
  *(_QWORD *)&v9[v232] = v233;
  swift_retain(v233);
  swift_release(v234);
  *(_QWORD *)&v9[v102[20]] = *(_QWORD *)&v10[v102[20]];
  v9[v102[21]] = v10[v102[21]];
  v9[v102[22]] = v10[v102[22]];
  v9[v102[23]] = v10[v102[23]];
  v9[v102[24]] = v10[v102[24]];
  v235 = v102[25];
  v236 = &v9[v235];
  v237 = &v10[v235];
  *(_QWORD *)v236 = *(_QWORD *)v237;
  v238 = *((_QWORD *)v237 + 1);
  v239 = *((_QWORD *)v236 + 1);
  *((_QWORD *)v236 + 1) = v238;
  swift_bridgeObjectRetain(v238);
  swift_bridgeObjectRelease(v239);
  v9[v102[26]] = v10[v102[26]];
  *(_QWORD *)&v9[v102[27]] = *(_QWORD *)&v10[v102[27]];
  *(_QWORD *)&v9[v102[28]] = *(_QWORD *)&v10[v102[28]];
  return v245;
}

_OWORD *sub_100065ADC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  int *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  void (*v104)(char *, char *);
  uint64_t v105;
  void (*v106)(char *, char *);
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  void (*v110)(char *, char *, uint64_t);
  uint64_t v112;

  *a1 = *a2;
  v3 = *(int *)(a3 + 20);
  v4 = (char *)a1 + v3;
  v5 = (char *)a2 + v3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(v4, v5, v6);
  v8 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v9 = v8[5];
  v10 = &v4[v9];
  v11 = &v5[v9];
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  v112 = v12;
  v13(&v4[v8[6]], &v5[v8[6]], v12);
  v14 = v8[7];
  v15 = &v4[v14];
  v16 = &v5[v14];
  v17 = sub_100005D40(&qword_1001BF090);
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
  v18(v15, v16, v17);
  v18(&v4[v8[8]], &v5[v8[8]], v17);
  *(_OWORD *)&v4[v8[9]] = *(_OWORD *)&v5[v8[9]];
  v19 = v8[10];
  v20 = &v4[v19];
  v21 = &v5[v19];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v5[v19], 1, v17))
  {
    v22 = sub_100005D40(&qword_1001BF098);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v18(v20, v21, v17);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, v17);
  }
  v23 = v8[11];
  v24 = &v4[v23];
  v25 = &v5[v23];
  v108 = v18;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v5[v23], 1, v17))
  {
    v26 = sub_100005D40(&qword_1001BF098);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v18(v24, v25, v17);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v24, 0, 1, v17);
  }
  v27 = v8[12];
  v28 = &v4[v27];
  v29 = &v5[v27];
  v109 = v6;
  v110 = v7;
  v7(&v4[v27], &v5[v27], v6);
  v30 = (int *)type metadata accessor for ConditionViewModel(0);
  v31 = v30[5];
  v32 = &v28[v31];
  v33 = &v29[v31];
  v34 = type metadata accessor for WeatherCondition(0);
  v104 = *(void (**)(char *, char *))(*(_QWORD *)(v34 - 8) + 32);
  v105 = v34;
  v104(v32, v33);
  *(_OWORD *)&v28[v30[6]] = *(_OWORD *)&v29[v30[6]];
  *(_OWORD *)&v28[v30[7]] = *(_OWORD *)&v29[v30[7]];
  v28[v30[8]] = v29[v30[8]];
  v28[v30[9]] = v29[v30[9]];
  v28[v30[10]] = v29[v30[10]];
  *(_QWORD *)&v4[v8[13]] = *(_QWORD *)&v5[v8[13]];
  v35 = v8[14];
  v36 = &v4[v35];
  v37 = &v5[v35];
  v38 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  v39 = v8[15];
  v40 = &v4[v39];
  v41 = &v5[v39];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v5[v39], 1, v112))
  {
    v42 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v13(v40, v41, v112);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v40, 0, 1, v112);
  }
  v43 = v8[16];
  v44 = &v4[v43];
  v45 = &v5[v43];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v5[v43], 1, v112))
  {
    v46 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    v13(v44, v45, v112);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v44, 0, 1, v112);
  }
  v47 = v8[17];
  v48 = &v4[v47];
  v49 = &v5[v47];
  v50 = type metadata accessor for UVIndex(0);
  v106 = *(void (**)(char *, char *))(*(_QWORD *)(v50 - 8) + 32);
  v107 = v50;
  v106(v48, v49);
  v51 = v8[18];
  v52 = &v4[v51];
  v53 = &v5[v51];
  v54 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
  *(_QWORD *)&v4[v8[19]] = *(_QWORD *)&v5[v8[19]];
  v55 = v8[20];
  v56 = &v4[v55];
  v57 = &v5[v55];
  v56[32] = v57[32];
  v58 = *((_OWORD *)v57 + 1);
  *(_OWORD *)v56 = *(_OWORD *)v57;
  *((_OWORD *)v56 + 1) = v58;
  v59 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v60 = v59[5];
  v61 = &v4[v60];
  v62 = &v5[v60];
  v110(&v4[v60], &v5[v60], v109);
  v63 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v13(&v61[v63[5]], &v62[v63[5]], v112);
  v108(&v61[v63[6]], &v62[v63[6]], v17);
  v108(&v61[v63[7]], &v62[v63[7]], v17);
  v64 = v63[8];
  v65 = &v61[v64];
  v66 = &v62[v64];
  v110(&v61[v64], &v62[v64], v109);
  ((void (*)(char *, char *, uint64_t))v104)(&v65[v30[5]], &v66[v30[5]], v105);
  *(_OWORD *)&v65[v30[6]] = *(_OWORD *)&v66[v30[6]];
  *(_OWORD *)&v65[v30[7]] = *(_OWORD *)&v66[v30[7]];
  v65[v30[8]] = v66[v30[8]];
  v65[v30[9]] = v66[v30[9]];
  v65[v30[10]] = v66[v30[10]];
  v67 = v63[9];
  v68 = &v61[v67];
  v69 = &v62[v67];
  v70 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v68, v69, v70);
  *(_QWORD *)&v61[v63[10]] = *(_QWORD *)&v62[v63[10]];
  *(_OWORD *)&v61[v63[11]] = *(_OWORD *)&v62[v63[11]];
  *(_OWORD *)&v61[v63[12]] = *(_OWORD *)&v62[v63[12]];
  *(_OWORD *)&v61[v63[13]] = *(_OWORD *)&v62[v63[13]];
  *(_OWORD *)&v61[v63[14]] = *(_OWORD *)&v62[v63[14]];
  v71 = v63[15];
  v72 = &v61[v71];
  v73 = &v62[v71];
  v74 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
  v75 = v63[16];
  v76 = &v61[v75];
  v77 = &v62[v75];
  v78 = type metadata accessor for SunEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v77, 1, v78))
  {
    v79 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v76, v77, v78);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v76, 0, 1, v78);
  }
  v80 = v63[17];
  v81 = &v61[v80];
  v82 = &v62[v80];
  v83 = type metadata accessor for MoonEvents(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v82, 1, v83))
  {
    v84 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v81, v82, v83);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v81, 0, 1, v83);
  }
  ((void (*)(char *, char *, uint64_t))v106)(&v61[v63[18]], &v62[v63[18]], v107);
  *(_QWORD *)&v61[v63[19]] = *(_QWORD *)&v62[v63[19]];
  v85 = v59[6];
  v86 = &v4[v85];
  v87 = &v5[v85];
  v88 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v87, 1, (uint64_t)v88))
  {
    v89 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v86 = *(_OWORD *)v87;
    v90 = v88[5];
    v91 = &v86[v90];
    v92 = &v87[v90];
    v93 = type metadata accessor for AttributedString(0);
    v94 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 32);
    v94(v91, v92, v93);
    v95 = v88[6];
    v96 = &v86[v95];
    v97 = &v87[v95];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v87[v95], 1, v93))
    {
      v98 = sub_100005D40(&qword_1001BF0B8);
      memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    }
    else
    {
      v94(v96, v97, v93);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v96, 0, 1, v93);
    }
    *(_OWORD *)&v86[v88[7]] = *(_OWORD *)&v87[v88[7]];
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v86, 0, 1, (uint64_t)v88);
  }
  v99 = v59[7];
  v100 = &v4[v99];
  v101 = &v5[v99];
  v102 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 32))(v100, v101, v102);
  *(_OWORD *)&v4[v59[8]] = *(_OWORD *)&v5[v59[8]];
  v4[v59[9]] = v5[v59[9]];
  v4[v59[10]] = v5[v59[10]];
  *(_QWORD *)&v4[v59[11]] = *(_QWORD *)&v5[v59[11]];
  *(_OWORD *)&v4[v59[12]] = *(_OWORD *)&v5[v59[12]];
  *(_QWORD *)&v4[v59[13]] = *(_QWORD *)&v5[v59[13]];
  *(_QWORD *)&v4[v59[14]] = *(_QWORD *)&v5[v59[14]];
  *(_QWORD *)&v4[v59[15]] = *(_QWORD *)&v5[v59[15]];
  *(_QWORD *)&v4[v59[16]] = *(_QWORD *)&v5[v59[16]];
  v4[v59[17]] = v5[v59[17]];
  *(_QWORD *)&v4[v59[18]] = *(_QWORD *)&v5[v59[18]];
  *(_QWORD *)&v4[v59[19]] = *(_QWORD *)&v5[v59[19]];
  *(_QWORD *)&v4[v59[20]] = *(_QWORD *)&v5[v59[20]];
  v4[v59[21]] = v5[v59[21]];
  v4[v59[22]] = v5[v59[22]];
  v4[v59[23]] = v5[v59[23]];
  v4[v59[24]] = v5[v59[24]];
  *(_OWORD *)&v4[v59[25]] = *(_OWORD *)&v5[v59[25]];
  v4[v59[26]] = v5[v59[26]];
  *(_QWORD *)&v4[v59[27]] = *(_QWORD *)&v5[v59[27]];
  *(_QWORD *)&v4[v59[28]] = *(_QWORD *)&v5[v59[28]];
  return a1;
}

_QWORD *sub_1000663D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  int *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  int *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  int *v167;
  int v168;
  int v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  void (*v174)(char *, char *, uint64_t);
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v235;
  void (*v236)(char *, char *, uint64_t);
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  int *v240;
  void (*v241)(char *, char *);
  uint64_t v242;
  void (*v243)(char *, char *, uint64_t);
  void (*v244)(char *, char *, uint64_t);
  void (*v245)(char *, char *, uint64_t);
  void (*v246)(char *, char *, uint64_t);
  uint64_t v247;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v239 = a1;
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v246 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v246(v9, v10, v11);
  v12 = (int *)type metadata accessor for CurrentObservationViewModel(0);
  v13 = v12[5];
  v14 = &v9[v13];
  v15 = &v10[v13];
  v16 = type metadata accessor for Date(0);
  v235 = *(_QWORD *)(v16 - 8);
  v17 = *(void (**)(char *, char *, uint64_t))(v235 + 40);
  v17(v14, v15, v16);
  v244 = v17;
  v17(&v9[v12[6]], &v10[v12[6]], v16);
  v18 = v12[7];
  v19 = &v9[v18];
  v20 = &v10[v18];
  v21 = sub_100005D40(&qword_1001BF090);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(void (**)(char *, char *, uint64_t))(v22 + 40);
  v23(v19, v20, v21);
  v243 = v23;
  v23(&v9[v12[8]], &v10[v12[8]], v21);
  v24 = v12[9];
  v25 = &v9[v24];
  v26 = &v10[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  v29 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v25 = v28;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease(v29);
  v30 = v12[10];
  v31 = &v9[v30];
  v32 = &v10[v30];
  LODWORD(v23) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v9[v30], 1, v21);
  v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v21);
  if ((_DWORD)v23)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v31, v32, v21);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v31, v21);
LABEL_6:
    v34 = sub_100005D40(&qword_1001BF098);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  v243(v31, v32, v21);
LABEL_7:
  v35 = v12[11];
  v36 = &v9[v35];
  v37 = &v10[v35];
  v38 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v9[v35], 1, v21);
  v39 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v37, 1, v21);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v36, v37, v21);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v36, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v36, v21);
LABEL_12:
    v40 = sub_100005D40(&qword_1001BF098);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  v243(v36, v37, v21);
LABEL_13:
  v41 = v12[12];
  v42 = &v9[v41];
  v43 = &v10[v41];
  v237 = v11;
  v246(&v9[v41], &v10[v41], v11);
  v44 = (int *)type metadata accessor for ConditionViewModel(0);
  v45 = v44[5];
  v46 = &v42[v45];
  v47 = &v43[v45];
  v48 = type metadata accessor for WeatherCondition(0);
  v241 = *(void (**)(char *, char *))(*(_QWORD *)(v48 - 8) + 40);
  v242 = v48;
  v241(v46, v47);
  v49 = v44[6];
  v50 = &v42[v49];
  v51 = &v43[v49];
  v53 = *(_QWORD *)v51;
  v52 = *((_QWORD *)v51 + 1);
  v54 = *((_QWORD *)v50 + 1);
  *(_QWORD *)v50 = v53;
  *((_QWORD *)v50 + 1) = v52;
  swift_bridgeObjectRelease(v54);
  v55 = v44[7];
  v56 = &v42[v55];
  v57 = &v43[v55];
  v59 = *(_QWORD *)v57;
  v58 = *((_QWORD *)v57 + 1);
  v60 = *((_QWORD *)v56 + 1);
  *(_QWORD *)v56 = v59;
  *((_QWORD *)v56 + 1) = v58;
  swift_bridgeObjectRelease(v60);
  v42[v44[8]] = v43[v44[8]];
  v42[v44[9]] = v43[v44[9]];
  v42[v44[10]] = v43[v44[10]];
  *(_QWORD *)&v9[v12[13]] = *(_QWORD *)&v10[v12[13]];
  v61 = v12[14];
  v62 = &v9[v61];
  v63 = &v10[v61];
  v64 = type metadata accessor for CloudAltitudeKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 40))(v62, v63, v64);
  v65 = v12[15];
  v66 = &v9[v65];
  v67 = &v10[v65];
  LODWORD(v46) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v9[v65], 1, v16);
  v68 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v67, 1, v16);
  v240 = v44;
  if ((_DWORD)v46)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v235 + 32))(v66, v67, v16);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v66, 0, 1, v16);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v235 + 8))(v66, v16);
LABEL_18:
    v69 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_19;
  }
  v244(v66, v67, v16);
LABEL_19:
  v70 = v237;
  v71 = v12[16];
  v72 = &v9[v71];
  v73 = &v10[v71];
  v74 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v9[v71], 1, v16);
  v75 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v73, 1, v16);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v235 + 32))(v72, v73, v16);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v72, 0, 1, v16);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v235 + 8))(v72, v16);
LABEL_24:
    v76 = sub_100005D40(&qword_1001BF0A0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_25;
  }
  v244(v72, v73, v16);
LABEL_25:
  v77 = v12[17];
  v78 = &v9[v77];
  v79 = &v10[v77];
  v80 = type metadata accessor for UVIndex(0);
  v81 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 40);
  v81(v78, v79, v80);
  v82 = v12[18];
  v83 = &v9[v82];
  v84 = &v10[v82];
  v85 = type metadata accessor for Wind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 40))(v83, v84, v85);
  *(_QWORD *)&v9[v12[19]] = *(_QWORD *)&v10[v12[19]];
  v86 = v12[20];
  v87 = (uint64_t)&v9[v86];
  v88 = &v10[v86];
  v89 = *(_QWORD *)&v9[v86 + 8];
  v236 = v81;
  v238 = v80;
  if (v89)
  {
    v90 = *((_QWORD *)v88 + 1);
    if (v90)
    {
      *(_QWORD *)v87 = *(_QWORD *)v88;
      *(_QWORD *)(v87 + 8) = v90;
      swift_bridgeObjectRelease(v89);
      v91 = v88[32];
      v92 = *(_QWORD *)(v87 + 16);
      v93 = *(_QWORD *)(v87 + 24);
      v94 = *(_BYTE *)(v87 + 32);
      *(_OWORD *)(v87 + 16) = *((_OWORD *)v88 + 1);
      *(_BYTE *)(v87 + 32) = v91;
      sub_100007458(v92, v93, v94);
      goto LABEL_30;
    }
    sub_100008EC4(v87);
  }
  v95 = *((_OWORD *)v88 + 1);
  *(_OWORD *)v87 = *(_OWORD *)v88;
  *(_OWORD *)(v87 + 16) = v95;
  *(_BYTE *)(v87 + 32) = v88[32];
LABEL_30:
  v96 = (int *)type metadata accessor for CurrentObservationViewAttributes(0);
  v97 = v96[5];
  v98 = &v9[v97];
  v99 = &v10[v97];
  v246(&v9[v97], &v10[v97], v70);
  v100 = (int *)type metadata accessor for DailyForecastViewModel(0);
  v244(&v98[v100[5]], &v99[v100[5]], v16);
  v243(&v98[v100[6]], &v99[v100[6]], v21);
  v243(&v98[v100[7]], &v99[v100[7]], v21);
  v101 = v100[8];
  v102 = &v98[v101];
  v103 = &v99[v101];
  v246(&v98[v101], &v99[v101], v70);
  ((void (*)(char *, char *, uint64_t))v241)(&v102[v240[5]], &v103[v240[5]], v242);
  v104 = v240[6];
  v105 = &v102[v104];
  v106 = (uint64_t *)&v103[v104];
  v108 = *v106;
  v107 = v106[1];
  v109 = *((_QWORD *)v105 + 1);
  *(_QWORD *)v105 = v108;
  *((_QWORD *)v105 + 1) = v107;
  swift_bridgeObjectRelease(v109);
  v110 = v240[7];
  v111 = &v102[v110];
  v112 = (uint64_t *)&v103[v110];
  v114 = *v112;
  v113 = v112[1];
  v115 = *((_QWORD *)v111 + 1);
  *(_QWORD *)v111 = v114;
  *((_QWORD *)v111 + 1) = v113;
  swift_bridgeObjectRelease(v115);
  v102[v240[8]] = v103[v240[8]];
  v102[v240[9]] = v103[v240[9]];
  v102[v240[10]] = v103[v240[10]];
  v116 = v100[9];
  v117 = &v98[v116];
  v118 = &v99[v116];
  v119 = type metadata accessor for Precipitation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 40))(v117, v118, v119);
  *(_QWORD *)&v98[v100[10]] = *(_QWORD *)&v99[v100[10]];
  v120 = v100[11];
  v121 = &v98[v120];
  v122 = &v99[v120];
  v124 = *(_QWORD *)v122;
  v123 = *((_QWORD *)v122 + 1);
  v125 = *((_QWORD *)v121 + 1);
  *(_QWORD *)v121 = v124;
  *((_QWORD *)v121 + 1) = v123;
  swift_bridgeObjectRelease(v125);
  v126 = v100[12];
  v127 = &v98[v126];
  v128 = &v99[v126];
  v130 = *(_QWORD *)v128;
  v129 = *((_QWORD *)v128 + 1);
  v131 = *((_QWORD *)v127 + 1);
  *(_QWORD *)v127 = v130;
  *((_QWORD *)v127 + 1) = v129;
  swift_bridgeObjectRelease(v131);
  v132 = v100[13];
  v133 = &v98[v132];
  v134 = &v99[v132];
  v136 = *(_QWORD *)v134;
  v135 = *((_QWORD *)v134 + 1);
  v137 = *((_QWORD *)v133 + 1);
  *(_QWORD *)v133 = v136;
  *((_QWORD *)v133 + 1) = v135;
  swift_bridgeObjectRelease(v137);
  v138 = v100[14];
  v139 = &v98[v138];
  v140 = &v99[v138];
  v142 = *(_QWORD *)v140;
  v141 = *((_QWORD *)v140 + 1);
  v143 = *((_QWORD *)v139 + 1);
  *(_QWORD *)v139 = v142;
  *((_QWORD *)v139 + 1) = v141;
  swift_bridgeObjectRelease(v143);
  v144 = v100[15];
  v145 = &v98[v144];
  v146 = &v99[v144];
  v147 = type metadata accessor for TemperatureScaleConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 40))(v145, v146, v147);
  v148 = v100[16];
  v149 = &v98[v148];
  v150 = &v99[v148];
  v151 = type metadata accessor for SunEvents(0);
  v152 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v149, 1, v151);
  v153 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v150, 1, v151);
  if (v152)
  {
    if (!v153)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 32))(v149, v150, v151);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v149, 0, 1, v151);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v154 = *(_QWORD *)(v151 - 8);
  if (v153)
  {
    (*(void (**)(char *, uint64_t))(v154 + 8))(v149, v151);
LABEL_35:
    v155 = sub_100005D40(&qword_1001BF0A8);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v154 + 40))(v149, v150, v151);
LABEL_36:
  v156 = v100[17];
  v157 = &v98[v156];
  v158 = &v99[v156];
  v159 = type metadata accessor for MoonEvents(0);
  v160 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v157, 1, v159);
  v161 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v158, 1, v159);
  if (v160)
  {
    if (!v161)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 32))(v157, v158, v159);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v157, 0, 1, v159);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v162 = *(_QWORD *)(v159 - 8);
  if (v161)
  {
    (*(void (**)(char *, uint64_t))(v162 + 8))(v157, v159);
LABEL_41:
    v163 = sub_100005D40(&qword_1001BF0B0);
    memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v162 + 40))(v157, v158, v159);
LABEL_42:
  v236(&v98[v100[18]], &v99[v100[18]], v238);
  *(_QWORD *)&v98[v100[19]] = *(_QWORD *)&v99[v100[19]];
  v164 = v96[6];
  v165 = &v9[v164];
  v166 = &v10[v164];
  v167 = (int *)type metadata accessor for RainInlineContentViewModel(0);
  v168 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v165, 1, (uint64_t)v167);
  v169 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v166, 1, (uint64_t)v167);
  if (!v168)
  {
    if (v169)
    {
      sub_100011894((uint64_t)v165, type metadata accessor for RainInlineContentViewModel);
      goto LABEL_48;
    }
    v180 = *((_QWORD *)v166 + 1);
    v181 = *((_QWORD *)v165 + 1);
    *(_QWORD *)v165 = *(_QWORD *)v166;
    *((_QWORD *)v165 + 1) = v180;
    swift_bridgeObjectRelease(v181);
    v182 = v167[5];
    v183 = &v165[v182];
    v184 = &v166[v182];
    v185 = type metadata accessor for AttributedString(0);
    v247 = *(_QWORD *)(v185 - 8);
    v245 = *(void (**)(char *, char *, uint64_t))(v247 + 40);
    v245(v183, v184, v185);
    v186 = v167[6];
    v187 = &v165[v186];
    v188 = &v166[v186];
    v189 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v165[v186], 1, v185);
    v190 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v188, 1, v185);
    if (v189)
    {
      if (!v190)
      {
        (*(void (**)(char *, char *, uint64_t))(v247 + 32))(v187, v188, v185);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v187, 0, 1, v185);
LABEL_63:
        v192 = v167[7];
        v193 = &v165[v192];
        v194 = &v166[v192];
        v196 = *(_QWORD *)v194;
        v195 = *((_QWORD *)v194 + 1);
        v197 = *((_QWORD *)v193 + 1);
        *(_QWORD *)v193 = v196;
        *((_QWORD *)v193 + 1) = v195;
        swift_bridgeObjectRelease(v197);
        goto LABEL_64;
      }
    }
    else
    {
      if (!v190)
      {
        v245(v187, v188, v185);
        goto LABEL_63;
      }
      (*(void (**)(char *, uint64_t))(v247 + 8))(v187, v185);
    }
    v191 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v187, v188, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
    goto LABEL_63;
  }
  if (v169)
  {
LABEL_48:
    v179 = sub_100005D40(&qword_1001BF0C0);
    memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
    goto LABEL_64;
  }
  *(_OWORD *)v165 = *(_OWORD *)v166;
  v170 = v167[5];
  v171 = &v165[v170];
  v172 = &v166[v170];
  v173 = type metadata accessor for AttributedString(0);
  v174 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32);
  v174(v171, v172, v173);
  v175 = v167[6];
  v176 = &v165[v175];
  v177 = &v166[v175];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v166[v175], 1, v173))
  {
    v178 = sub_100005D40(&qword_1001BF0B8);
    memcpy(v176, v177, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
  }
  else
  {
    v174(v176, v177, v173);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v176, 0, 1, v173);
  }
  *(_OWORD *)&v165[v167[7]] = *(_OWORD *)&v166[v167[7]];
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v165, 0, 1, (uint64_t)v167);
LABEL_64:
  v198 = v96[7];
  v199 = &v9[v198];
  v200 = &v10[v198];
  v201 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v201 - 8) + 40))(v199, v200, v201);
  v202 = v96[8];
  v203 = &v9[v202];
  v204 = &v10[v202];
  v206 = *(_QWORD *)v204;
  v205 = *((_QWORD *)v204 + 1);
  v207 = *((_QWORD *)v203 + 1);
  *(_QWORD *)v203 = v206;
  *((_QWORD *)v203 + 1) = v205;
  swift_bridgeObjectRelease(v207);
  v9[v96[9]] = v10[v96[9]];
  v9[v96[10]] = v10[v96[10]];
  v208 = v96[11];
  v209 = *(_QWORD *)&v9[v208];
  *(_QWORD *)&v9[v208] = *(_QWORD *)&v10[v208];
  swift_release(v209);
  v210 = v96[12];
  v211 = &v9[v210];
  v212 = &v10[v210];
  v214 = *(_QWORD *)v212;
  v213 = *((_QWORD *)v212 + 1);
  v215 = *((_QWORD *)v211 + 1);
  *(_QWORD *)v211 = v214;
  *((_QWORD *)v211 + 1) = v213;
  swift_bridgeObjectRelease(v215);
  v216 = v96[13];
  v217 = *(_QWORD *)&v9[v216];
  *(_QWORD *)&v9[v216] = *(_QWORD *)&v10[v216];
  swift_release(v217);
  v218 = v96[14];
  v219 = *(_QWORD *)&v9[v218];
  *(_QWORD *)&v9[v218] = *(_QWORD *)&v10[v218];
  swift_release(v219);
  v220 = v96[15];
  v221 = *(_QWORD *)&v9[v220];
  *(_QWORD *)&v9[v220] = *(_QWORD *)&v10[v220];
  swift_release(v221);
  v222 = v96[16];
  v223 = *(_QWORD *)&v9[v222];
  *(_QWORD *)&v9[v222] = *(_QWORD *)&v10[v222];
  swift_release(v223);
  v9[v96[17]] = v10[v96[17]];
  v224 = v96[18];
  v225 = *(_QWORD *)&v9[v224];
  *(_QWORD *)&v9[v224] = *(_QWORD *)&v10[v224];
  swift_release(v225);
  v226 = v96[19];
  v227 = *(_QWORD *)&v9[v226];
  *(_QWORD *)&v9[v226] = *(_QWORD *)&v10[v226];
  swift_release(v227);
  *(_QWORD *)&v9[v96[20]] = *(_QWORD *)&v10[v96[20]];
  v9[v96[21]] = v10[v96[21]];
  v9[v96[22]] = v10[v96[22]];
  v9[v96[23]] = v10[v96[23]];
  v9[v96[24]] = v10[v96[24]];
  v228 = v96[25];
  v229 = &v9[v228];
  v230 = &v10[v228];
  v232 = *(_QWORD *)v230;
  v231 = *((_QWORD *)v230 + 1);
  v233 = *((_QWORD *)v229 + 1);
  *(_QWORD *)v229 = v232;
  *((_QWORD *)v229 + 1) = v231;
  swift_bridgeObjectRelease(v233);
  v9[v96[26]] = v10[v96[26]];
  *(_QWORD *)&v9[v96[27]] = *(_QWORD *)&v10[v96[27]];
  *(_QWORD *)&v9[v96[28]] = *(_QWORD *)&v10[v96[28]];
  return v239;
}

uint64_t sub_100067140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006714C);
}

void sub_10006714C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10006751C();
  if (v1)
  {
    sub_1000674E0();
    sub_1000443A4();
  }
  else
  {
    sub_1000674F8();
    v2 = sub_10006754C(*(int *)(v0 + 20));
    sub_100016B50(v2, v3, v4);
  }
}

uint64_t sub_100067188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100067194);
}

void sub_100067194()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100067508();
  if (v1)
  {
    sub_100067558();
    sub_1000443A4();
  }
  else
  {
    v2 = v0;
    sub_100016B00();
    v3 = sub_10006752C(*(int *)(v2 + 20));
    sub_100016B44(v3, v4, v5, v6);
  }
}

uint64_t sub_1000671D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10017CAB0;
  result = type metadata accessor for CurrentObservationViewAttributes(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10006724C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0B98;
  if (!qword_1001C0B98)
  {
    v1 = sub_100005DC4(&qword_1001C0BA0);
    sub_100016A54(&qword_1001C0A20, &qword_1001C0A10);
    sub_100016878((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0B98);
  }
  return result;
}

unint64_t sub_1000672EC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001C0BA8;
  if (!qword_1001C0BA8)
  {
    v1 = sub_100005DC4(&qword_1001C0A48);
    v2[0] = sub_100005DC4(&qword_1001C0A38);
    v2[1] = sub_10005EAD8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100016878((unint64_t *)&qword_1001C0228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0BA8);
  }
  return result;
}

uint64_t sub_100067398(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019EFE0, 1);
}

uint64_t sub_1000673A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10019EFB8, 1);
}

unint64_t sub_1000673B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001C0BD8;
  if (!qword_1001C0BD8)
  {
    v1 = sub_100005DC4(&qword_1001C0BD0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0BD8);
  }
  return result;
}

unint64_t sub_100067420()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001C0C00;
  if (!qword_1001C0C00)
  {
    v1 = sub_100005DC4(&qword_1001C0BC0);
    sub_100016A54(&qword_1001C0BE0, &qword_1001C0BB8);
    v2[0] = sub_100005DC4(&qword_1001C0BD0);
    v2[1] = sub_1000673B8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001C0C00);
  }
  return result;
}

void *sub_1000674D4()
{
  return &protocol witness table for Text;
}

uint64_t sub_1000674E0()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1000674F8()
{
  return type metadata accessor for CurrentObservationViewAttributes(0);
}

uint64_t sub_10006752C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

uint64_t sub_10006753C()
{
  return type metadata accessor for DataDenseViewAttributes(0);
}

uint64_t sub_10006754C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

void sub_100067558()
{
  int v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = (v0 - 1);
}

uint64_t sub_100067564(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void (*v23)(uint64_t, uint64_t);
  _BYTE v25[12];
  int v26;
  uint64_t v27;
  uint64_t v28;

  v26 = a4;
  v8 = sub_100005D40((uint64_t *)&unk_1001C0CE0);
  __chkstk_darwin(v8);
  v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for ContentSizeCategory(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v25[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = v4 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetFamily;
  v16 = type metadata accessor for WidgetFamily(0);
  v27 = *(_QWORD *)(v16 - 8);
  v28 = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v15, a1, v16);
  *(_BYTE *)(v4 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize) = a3;
  sub_10006792C(v4 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory, a2);
  *(_BYTE *)(v4 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_showsWidgetBackground) = v26;
  v17 = v4 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_maxSupportedSizeCategory;
  v18 = (unsigned int *)&enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
  if (a3)
    v18 = (unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v4 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_maxSupportedSizeCategory, *v18, v11);
  if ((sub_10015DC48(a2, v17) & 1) != 0)
  {
    v19 = (uint64_t)v14;
    v20 = v17;
  }
  else
  {
    v19 = (uint64_t)v14;
    v20 = a2;
  }
  sub_10006792C(v19, v20);
  sub_10006792C((uint64_t)v10, (uint64_t)v14);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 0, 1, v11);
  v21 = (void *)UIContentSizeCategory.init(_:)(v10);
  v22 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", v21);

  v23 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v23(a2, v11);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v16);
  v23((uint64_t)v14, v11);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_traitCollection) = v22;
  return v4;
}

uint64_t sub_100067780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetFamily;
  v2 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_maxSupportedSizeCategory, v4);

  return v0;
}

uint64_t sub_10006781C()
{
  uint64_t v0;

  sub_100067780();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100067840()
{
  return type metadata accessor for ViewAttributesFactory(0);
}

uint64_t type metadata accessor for ViewAttributesFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_1001C0C30;
  if (!qword_1001C0C30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ViewAttributesFactory);
  return result;
}

uint64_t sub_100067880(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  void *v10;

  result = type metadata accessor for WidgetFamily(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ContentSizeCategory(319);
    if (v4 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      v7 = v6;
      v8 = &unk_10017CCA8;
      v9 = (char *)&value witness table for Builtin.UnknownObject + 64;
      v10 = &unk_10017CCC0;
      result = swift_updateClassMetadata2(a1, 256, 6, &v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_10006792C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

void sub_100067938(unsigned __int8 a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  sub_100071044();
}

void sub_100067978()
{
  unsigned __int8 *v0;

  sub_100067938(*v0);
}

void sub_100067990()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_100071044();
}

id sub_1000679DC()
{
  uint64_t v0;
  id result;

  result = *(id *)(v0 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationManager);
  if (result)
    return objc_msgSend(result, "_limitsPrecision");
  __break(1u);
  return result;
}

id sub_100067A0C(char *a1)
{
  void *v2;
  id v3;
  char *v4;
  id result;
  uint64_t v6;
  void *v7;

  v2 = *(void **)&a1[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationQueue];
  objc_allocWithZone((Class)CLLocationManager);
  v3 = v2;
  v4 = a1;
  result = sub_10006F3AC(0xD000000000000011, 0x8000000100186DD0, (uint64_t)a1, v2);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationManager;
  v7 = *(void **)&v4[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationManager];
  *(_QWORD *)&v4[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationManager] = result;

  result = *(id *)&v4[v6];
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  objc_msgSend(result, "setDistanceFilter:", 500.0);
  result = *(id *)&v4[v6];
  if (result)
    return objc_msgSend(result, "setDesiredAccuracy:", kCLLocationAccuracyKilometer);
LABEL_7:
  __break(1u);
  return result;
}

void sub_100067ADC(void *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  os_log_type_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v9;
  id v10;
  void *v11;
  NSObject *v12;
  NSString v13;
  unsigned __int8 v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;

  v5 = v3;
  sub_100005D40(&qword_1001C0E90);
  sub_100029068();
  __chkstk_darwin(v9);
  sub_100023344();
  if ((sub_100067DC8(a1) & 1) != 0)
  {
    if ((sub_100068490() & 1) != 0)
    {
      sub_100068724(1, (uint64_t)a2, a3);
    }
    else
    {
      sub_100070744(0, (unint64_t *)&qword_1001C0E98, NSUserDefaults_ptr);
      v12 = static NSUserDefaults.weatherShared.getter();
      v13 = String._bridgeToObjectiveC()();
      v14 = -[NSObject BOOLForKey:](v12, "BOOLForKey:", v13);

      if ((v14 & 1) != 0)
      {
        if (qword_1001BEE80 != -1)
          swift_once(&qword_1001BEE80, sub_100097B54);
        v15 = sub_10002538C();
        sub_100070DA0(v15, (uint64_t)qword_1001D9FA8);
        v16 = sub_1000253F8();
        if (sub_100070FD8(v16))
        {
          v17 = (uint8_t *)sub_1000290AC();
          *(_WORD *)v17 = 0;
          sub_100025384((void *)&_mh_execute_header, v12, v5, "No authorization - returning permission denied", v17);
          sub_10002534C((uint64_t)v17);
        }

        v18 = sub_100070DE8();
        v19 = sub_100070FB0(v18);
      }
      else
      {
        if (qword_1001BEE80 != -1)
          swift_once(&qword_1001BEE80, sub_100097B54);
        v21 = sub_10002538C();
        sub_100070DA0(v21, (uint64_t)qword_1001D9FA8);
        v22 = sub_1000253F8();
        if (os_log_type_enabled(v12, v22))
        {
          v23 = (uint8_t *)sub_1000290AC();
          *(_WORD *)v23 = 0;
          sub_100025384((void *)&_mh_execute_header, v12, v22, "No authorization - returning default location", v23);
          sub_10002534C((uint64_t)v23);
        }

        sub_1000680D0();
        v24 = sub_100070DE8();
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v4, 0, 1, v24);
        v19 = v4;
        v20 = 3;
      }
      v25 = a2(v19, v20);
      sub_100070FA8(v25, &qword_1001C0E90);
    }
  }
  else
  {
    v10 = objc_msgSend(a1, "location");
    if (v10
      && (v11 = v10, v26 = objc_msgSend(v10, "geolocation"), v11, v26))
    {
      sub_100068AF0(v26, (void (*)(_QWORD, _QWORD))a2, a3);

    }
    else
    {
      sub_1000691A0(a1, (void (*)(_QWORD, _QWORD))a2, a3);
    }
  }
}

uint64_t sub_100067DC8(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v31;
  uint64_t v32;

  v2 = objc_msgSend(a1, "location");
  if (!v2)
  {
    if (qword_1001BEE80 != -1)
      swift_once(&qword_1001BEE80, sub_100097B54);
    v13 = type metadata accessor for Logger(0);
    sub_100025184(v13, (uint64_t)qword_1001D9FA8);
    v14 = a1;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(32, -1);
      *(_DWORD *)v17 = 141558275;
      v31 = 1752392040;
      v32 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v17 + 4);
      *(_WORD *)(v17 + 12) = 2081;
      v31 = (uint64_t)v14;
      v19 = type metadata accessor for WeatherIntent();
      v20 = v14;
      v21 = String.init<A>(reflecting:)(&v31, v19);
      v23 = v22;
      v31 = sub_10016EC84(v21, v22, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v17 + 14);

      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Treating nil location as current location on intent: %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
      v24 = 1;
      swift_arrayDestroy(v18, 1);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      return v24;
    }

    return 1;
  }
  v3 = v2;
  sub_10016FA38(v3);
  v5 = v4;
  v7 = v6;
  v8 = static Location.currentLocationID.getter(v4);
  v10 = v9;
  if (v7)
  {
    if (v5 != v8 || v7 != v9)
    {
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v10);
      if ((v12 & 1) != 0)
      {
LABEL_24:

        return 1;
      }
      goto LABEL_14;
    }

    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v10);
    return 1;
  }
  swift_bridgeObjectRelease(v9);
LABEL_14:
  v25 = sub_100070830(v3, (SEL *)&selRef_identifier);
  if (v26)
  {
    v27 = v26;
    if (v25 != 0x7469436C61636F6CLL || v26 != 0xE900000000000079)
    {
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, 0x7469436C61636F6CLL, 0xE900000000000079, 0);
      swift_bridgeObjectRelease(v27);

      return v29 & 1;
    }
    swift_bridgeObjectRelease(v26);
    goto LABEL_24;
  }

  return 0;
}

void sub_1000680D0()
{
  os_log_type_t v0;
  char *v1;
  uint8_t *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _WORD *v21;
  uint64_t v22;
  uint8_t *v23;
  NSObject *v24;
  objc_class *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  _WORD *v30;
  const char *v31;
  os_log_type_t v32;
  _WORD *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  void (*v36)(char *, char *, uint64_t);
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  objc_class *v44;
  uint64_t v45;
  uint64_t v46;
  objc_class *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject v52;

  sub_100070E5C();
  v48 = v3;
  v49 = v1;
  sub_100005D40(&qword_1001C0E90);
  sub_100029068();
  __chkstk_darwin(v4);
  sub_10002325C();
  v7 = v6 - v5;
  v8 = sub_100070DE8();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v45 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v45 - v16;
  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v18 = sub_10002538C();
  v19 = sub_100025184(v18, (uint64_t)qword_1001D9FA8);
  Logger.logObject.getter(v19);
  v20 = sub_1000253F8();
  if (sub_10002908C(v20))
  {
    v21 = (_WORD *)sub_1000290AC();
    sub_100025420(v21);
    sub_100025384((void *)&_mh_execute_header, v19, v0, "About to determine the default location", v2);
    sub_10002534C((uint64_t)v2);
  }

  v22 = *(_QWORD *)&v49[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_savedLocationsReader + 24];
  v23 = *(uint8_t **)&v49[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_savedLocationsReader + 32];
  v24 = sub_100022330(&v49[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_savedLocationsReader], v22);
  v25 = (objc_class *)dispatch thunk of SavedLocationsReaderType.fetchSavedLocations()(v22, v23);
  if (!v25)
  {
    sub_100070FE8();
    v32 = sub_1000253F8();
    if (sub_10002908C(v32))
    {
      v33 = (_WORD *)sub_1000290AC();
      sub_100025420(v33);
      v31 = "We never saved any locations (key is empty).  Returning ALCityManager's default location";
      goto LABEL_11;
    }
LABEL_12:

    WCDefaultCityManager.defaultLocation()(v34);
    goto LABEL_17;
  }
  LOBYTE(v22) = (_BYTE)v25;
  v52.isa = v25;
  v26 = sub_100005D40(&qword_1001C0F58);
  sub_100070708(&qword_1001C0F60, &qword_1001C0F58);
  v24 = &v52;
  v27 = v26;
  v23 = 0;
  Sequence.first<A>(map:)(sub_10006E1D4, 0, v27, v8, v28);
  sub_1000287D8();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v7, 1, v8) == 1)
  {
    sub_10002F014(v7, &qword_1001C0E90);
    sub_100070FE8();
    v29 = sub_1000253F8();
    if (sub_10002908C(v29))
    {
      v30 = (_WORD *)sub_1000290AC();
      sub_100025420(v30);
      v31 = "We deleted all the saved locations (list is empty).  Returning ALCityManager's default location";
LABEL_11:
      sub_100025384((void *)&_mh_execute_header, v24, (os_log_type_t)v22, v31, v23);
      sub_10002534C((uint64_t)v23);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 32);
  v35(v17, v7, v8);
  v36 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v36(v15, v17, v8);
  sub_100070FE8();
  v37 = sub_1000253F8();
  if (os_log_type_enabled(&v52, v37))
  {
    v38 = sub_100025358(22);
    v47 = (objc_class *)sub_100025358(32);
    v52.isa = v47;
    sub_100070ED4(7.2225e-34);
    v49 = (char *)v35;
    v50 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v40);
    *(_WORD *)(v38 + 12) = 2081;
    v46 = v38 + 14;
    v36(v12, v15, v8);
    v41 = String.init<A>(reflecting:)(v12, v8);
    v43 = v42;
    v50 = sub_100070EC0(v41, v42);
    v35 = (void (*)(char *, uint64_t, uint64_t))v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v46);
    swift_bridgeObjectRelease(v43);
    sub_100070F90();
    sub_100070F7C((void *)&_mh_execute_header, &v52, v37, "Computed a default location. Locations=%{private,mask.hash}s", (uint8_t *)v38);
    v44 = v47;
    sub_100025444((uint64_t)v47);
    sub_10002534C((uint64_t)v44);
    sub_10002534C(v38);
  }
  else
  {
    sub_100070F90();
  }

  v35(v48, (uint64_t)v17, v8);
LABEL_17:
  sub_10001C770();
}

uint64_t sub_100068490()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  id v8;
  os_log_type_t v9;
  _WORD *v10;
  const char *v11;
  uint64_t v12;
  os_log_type_t v13;
  _WORD *v14;
  os_log_type_t v15;
  _WORD *v16;
  NSObject *v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _WORD *v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  void *v24;
  id v25;
  int v26;
  os_log_type_t v27;
  _BOOL4 v28;

  v1 = v0;
  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v2 = sub_10002538C();
  v3 = sub_100070DA0(v2, (uint64_t)qword_1001D9FA8);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)sub_1000290AC();
    *(_WORD *)v5 = 0;
    sub_100025384((void *)&_mh_execute_header, v3, v4, "About to retrieve our location permissions from CoreLocation", v5);
    sub_10002534C((uint64_t)v5);
  }

  v6 = OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationManager;
  v7 = *(Class *)((char *)&v0->isa + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationManager);
  if (!v7)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    JUMPOUT(0x100068710);
  }
  v8 = objc_msgSend(v7, "_authorizationStatus");
  switch((int)v8)
  {
    case 0:
      Logger.logObject.getter(v8);
      v9 = sub_1000253F0();
      if (!sub_100070D70(v9))
        goto LABEL_27;
      v10 = (_WORD *)sub_1000290AC();
      sub_100070F60(v10);
      v11 = "Location Permissions - notDetermined";
      goto LABEL_14;
    case 1:
      Logger.logObject.getter(v8);
      v13 = sub_1000253F0();
      if (!sub_100070D70(v13))
        goto LABEL_27;
      v14 = (_WORD *)sub_1000290AC();
      sub_100070F60(v14);
      v11 = "Location Permissions - restricted";
      goto LABEL_14;
    case 2:
      Logger.logObject.getter(v8);
      v15 = sub_1000253F0();
      if (!sub_100070D70(v15))
        goto LABEL_27;
      v16 = (_WORD *)sub_1000290AC();
      sub_100070F60(v16);
      v11 = "Location Permissions - denied";
LABEL_14:
      v17 = v0;
      v18 = v6;
      goto LABEL_15;
    case 3:
      Logger.logObject.getter(v8);
      v19 = sub_1000253F0();
      if (!sub_100070D70(v19))
        goto LABEL_24;
      v20 = (_WORD *)sub_1000290AC();
      sub_100070F60(v20);
      v21 = "Location Permissions - always";
      v22 = v0;
      v23 = v6;
      goto LABEL_22;
    case 4:
      v24 = *(Class *)((char *)&v0->isa + v6);
      if (!v24)
        goto LABEL_31;
      v25 = objc_msgSend(v24, "isAuthorizedForWidgetUpdates");
      v26 = (int)v25;
      Logger.logObject.getter(v25);
      v27 = sub_1000253F0();
      v28 = os_log_type_enabled(v0, v27);
      if (v26)
      {
        if (v28)
        {
          v0 = sub_1000290AC();
          sub_100071054(v0);
          v21 = "Location Permissions - whenInUse";
          v22 = v1;
LABEL_22:
          sub_100025384((void *)&_mh_execute_header, v22, v23, v21, (uint8_t *)v0);
          v12 = 1;
LABEL_23:
          sub_10002534C((uint64_t)v0);
          goto LABEL_28;
        }
LABEL_24:
        v12 = 1;
      }
      else
      {
        if (v28)
        {
          v0 = sub_1000290AC();
          sub_100071054(v0);
          v11 = "Location Permissions - whenInUse for app only";
          v17 = v1;
LABEL_15:
          sub_100025384((void *)&_mh_execute_header, v17, v18, v11, (uint8_t *)v0);
          v12 = 0;
          goto LABEL_23;
        }
LABEL_27:
        v12 = 0;
      }
LABEL_28:

      return v12;
    default:
      return 0;
  }
}

uint64_t sub_100068724(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  unsigned __int8 v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v4 = v3;
  v44 = a3;
  v42 = a2;
  v43 = a1;
  v46 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v46 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v46);
  v41 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - v8;
  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100025184(v10, (uint64_t)qword_1001D9FA8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "About to handle current location update request", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  sub_100070744(0, (unint64_t *)&qword_1001C0E98, NSUserDefaults_ptr);
  v15 = (void *)static NSUserDefaults.weatherShared.getter();
  v45 = v4;
  v16 = v4 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_didReceiveLocationAuthorization;
  v17 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_didReceiveLocationAuthorization);
  v18 = *(_QWORD *)(v16 + 8);
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v15, "BOOLForKey:", v19);

  if ((v20 & 1) == 0)
  {
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "First time being location authorized - setting key", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = (void *)static NSUserDefaults.weatherShared.getter();
    v47 = 1;
    NSUserDefaults.set<A>(_:for:)(&v47, v17, v18, &type metadata for Bool);

  }
  v26 = Logger.logObject.getter(v21);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Starting request to fetch location from CoreLocation", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  static Date.now.getter(v29);
  v30 = swift_allocObject(&unk_1001B5EE0, 24, 7);
  swift_unknownObjectWeakInit(v30 + 16, v45);
  v31 = v41;
  v32 = v46;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v41, v9, v46);
  v33 = *(unsigned __int8 *)(v5 + 80);
  v34 = (v33 + 24) & ~v33;
  v35 = (v6 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = swift_allocObject(&unk_1001B5F08, v35 + 17, v33 | 7);
  *(_QWORD *)(v36 + 16) = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v36 + v34, v31, v32);
  v37 = v36 + v35;
  v38 = v44;
  *(_QWORD *)v37 = v42;
  *(_QWORD *)(v37 + 8) = v38;
  *(_BYTE *)(v37 + 16) = v43 & 1;
  swift_retain(v30);
  swift_retain(v38);
  sub_10006ACDC((uint64_t)sub_10006F4B4, v36);
  swift_release(v36);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v32);
  return swift_release(v30);
}

void sub_100068AF0(void *a1, void (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(_QWORD, _QWORD);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void (*v70)(uint64_t, _QWORD);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(_QWORD, _QWORD);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v4 = v3;
  v8 = sub_100005D40(&qword_1001C0E90);
  __chkstk_darwin(v8);
  v75 = (uint64_t)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100025184(v10, (uint64_t)qword_1001D9FA8);
  v12 = a1;
  v77 = v11;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  v15 = os_log_type_enabled(v13, v14);
  v76 = a2;
  v73 = v4;
  if (v15)
  {
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(32, -1);
    v74 = a3;
    v18 = v17;
    v78 = v17;
    *(_DWORD *)v16 = 141558275;
    v80 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v16 + 4);
    *(_WORD *)(v16 + 12) = 2081;
    v80 = (uint64_t)v12;
    v19 = sub_100070744(0, &qword_1001C0F68, CLPlacemark_ptr);
    v20 = v12;
    v21 = String.init<A>(reflecting:)(&v80, v19);
    v23 = v22;
    v80 = sub_10016EC84(v21, v22, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v16 + 14);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "About to handle old intent. placeMark=%{private,mask.hash}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v18, 1);
    v24 = v18;
    a3 = v74;
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

  }
  v25 = objc_msgSend(v12, "location", v73);
  if (v25
    && (v26 = v25,
        objc_msgSend(v25, "coordinate"),
        v28 = v27,
        v30 = v29,
        v26,
        v31 = sub_100070830(v12, (SEL *)&selRef_name),
        v32))
  {
    v33 = v31;
    v34 = v32;
    v35 = Logger.logObject.getter(v31);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc(22, -1);
      v38 = swift_slowAlloc(32, -1);
      v74 = a3;
      v39 = v38;
      v80 = v38;
      *(_DWORD *)v37 = 141558275;
      v78 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v37 + 4);
      *(_WORD *)(v37 + 12) = 2081;
      v78 = v28;
      v79 = v30;
      type metadata accessor for CLLocationCoordinate2D(0);
      v41 = String.init<A>(reflecting:)(&v78, v40);
      v43 = v42;
      v78 = sub_10016EC84(v41, v42, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v37 + 14);
      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Got a coordinate. Now performing a reverse geocode. coordinate=%{private,mask.hash}s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v39, 1);
      v44 = v39;
      a3 = v74;
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }

    v45 = v76;
    v46 = v73;
    v47 = *(_QWORD *)(v73 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_geocodeManager + 24);
    v48 = *(_QWORD *)(v73 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_geocodeManager + 32);
    sub_100022330((_QWORD *)(v73 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_geocodeManager), v47);
    v49 = dispatch thunk of GeocodeManagerType.reverseGeocode(coordinate:)(v47, v48);
    v50 = swift_allocObject(&unk_1001B5EE0, 24, 7);
    swift_unknownObjectWeakInit(v50 + 16, v46);
    v51 = (_QWORD *)swift_allocObject(&unk_1001B6020, 48, 7);
    v51[2] = v12;
    v51[3] = v50;
    v51[4] = v45;
    v51[5] = a3;
    v52 = v12;
    v53 = swift_retain(a3);
    v54 = (void *)zalgo.getter(v53);
    v55 = Promise.then<A>(on:closure:)(v54, sub_1000708B4, v51, (char *)&type metadata for () + 8);
    swift_release(v49);
    swift_release(v51);

    v56 = (_QWORD *)swift_allocObject(&unk_1001B6048, 48, 7);
    v56[2] = v33;
    v56[3] = v34;
    v56[4] = v45;
    v56[5] = a3;
    v57 = swift_retain(a3);
    v58 = (void *)zalgo.getter(v57);
    v59 = Promise.error(on:closure:)(v58, sub_1000708D4, v56);
    swift_release(v59);
    swift_release(v55);
    swift_release(v56);

  }
  else
  {
    v60 = v12;
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = swift_slowAlloc(22, -1);
      v64 = swift_slowAlloc(32, -1);
      v78 = v64;
      *(_DWORD *)v63 = 141558275;
      v80 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v63 + 4);
      *(_WORD *)(v63 + 12) = 2081;
      v80 = (uint64_t)v60;
      v65 = sub_100070744(0, &qword_1001C0F68, CLPlacemark_ptr);
      v66 = v60;
      v67 = String.init<A>(reflecting:)(&v80, v65);
      v69 = v68;
      v80 = sub_10016EC84(v67, v68, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v63 + 14);

      swift_bridgeObjectRelease(v69);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Can't parse placemark from intent: %{private,mask.hash}s", (uint8_t *)v63, 0x16u);
      swift_arrayDestroy(v64, 1);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v63, -1, -1);

    }
    else
    {

    }
    v70 = v76;
    v71 = type metadata accessor for Location(0);
    v72 = v75;
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v75, 1, 1, v71);
    v70(v72, 0);
    sub_10002F014(v72, &qword_1001C0E90);
  }
}

void sub_1000691A0(void *a1, void (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  void (*v55)(_QWORD, _QWORD);
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void (*v63)(uint64_t, _QWORD);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void (*v70)(_QWORD, _QWORD);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v4 = v3;
  v8 = sub_100005D40(&qword_1001C0E90);
  __chkstk_darwin(v8);
  v68 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100025184(v10, (uint64_t)qword_1001D9FA8);
  v12 = a1;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  v15 = os_log_type_enabled(v13, v14);
  v69 = v4;
  v70 = a2;
  if (v15)
  {
    v16 = swift_slowAlloc(22, -1);
    v66 = v11;
    v17 = v16;
    v18 = swift_slowAlloc(32, -1);
    v67 = a3;
    v19 = v18;
    v71 = v18;
    *(_DWORD *)v17 = 141558275;
    v73 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v17 + 4);
    *(_WORD *)(v17 + 12) = 2081;
    v73 = (uint64_t)v12;
    v20 = type metadata accessor for WeatherIntent();
    v21 = v12;
    v22 = String.init<A>(reflecting:)(&v73, v20);
    v24 = v23;
    v73 = sub_10016EC84(v22, v23, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v17 + 14);

    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "About to handle new intent: %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v19, 1);
    v25 = v19;
    a3 = v67;
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  v26 = objc_msgSend(v12, "location");
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, "displayString");

    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    v32 = swift_bridgeObjectRetain_n(v31, 2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(22, -1);
      v36 = swift_slowAlloc(32, -1);
      v73 = v36;
      *(_DWORD *)v35 = 141558275;
      v71 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v35 + 4);
      *(_WORD *)(v35 + 12) = 2081;
      v71 = v29;
      v72 = v31;
      swift_bridgeObjectRetain(v31);
      v37 = String.init<A>(reflecting:)(&v71, &type metadata for String);
      v39 = v38;
      v71 = sub_10016EC84(v37, v38, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v35 + 14);
      swift_bridgeObjectRelease_n(v31, 2);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Got a name from the intent. Now performing a local search. name=%{private,mask.hash}s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v36, 1);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v31, 2);
    }
    v51 = v69;
    sub_100022330((_QWORD *)(v69 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_localSearchManager), *(_QWORD *)(v69 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_localSearchManager + 24));
    v52 = LocalSearchRequestManager.performLocalSearch(with:)(v29, v31);
    v53 = swift_allocObject(&unk_1001B5EE0, 24, 7);
    swift_unknownObjectWeakInit(v53 + 16, v51);
    v54 = (_QWORD *)swift_allocObject(&unk_1001B60C0, 40, 7);
    v55 = v70;
    v54[2] = v53;
    v54[3] = v55;
    v54[4] = a3;
    v56 = swift_retain(a3);
    v57 = (void *)zalgo.getter(v56);
    v58 = Promise.then<A>(on:closure:)(v57, sub_100070AA4, v54, (char *)&type metadata for () + 8);
    swift_release(v52);
    swift_release(v54);

    v59 = (_QWORD *)swift_allocObject(&unk_1001B60E8, 48, 7);
    v59[2] = v29;
    v59[3] = v31;
    v59[4] = v55;
    v59[5] = a3;
    v60 = swift_retain(a3);
    v61 = (void *)zalgo.getter(v60);
    v62 = Promise.error(on:closure:)(v61, sub_100070AE4, v59);
    swift_release(v62);
    swift_release(v58);
    swift_release(v59);

  }
  else
  {
    v40 = v12;
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(22, -1);
      v44 = swift_slowAlloc(32, -1);
      v73 = v44;
      *(_DWORD *)v43 = 141558275;
      v71 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v43 + 4);
      *(_WORD *)(v43 + 12) = 2081;
      sub_10016FA9C(v40);
      v71 = v45;
      v72 = v46;
      v47 = sub_100005D40(&qword_1001C0FB0);
      v48 = String.init<A>(reflecting:)(&v71, v47);
      v50 = v49;
      v71 = sub_10016EC84(v48, v49, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v43 + 14);

      swift_bridgeObjectRelease(v50);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Aborting: no display string on intent. intent.identifier=%{private,mask.hash}s", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy(v44, 1);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

    }
    else
    {

    }
    v63 = v70;
    v64 = (uint64_t)v68;
    v65 = type metadata accessor for Location(0);
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v64, 1, 1, v65);
    v63(v64, 0);
    sub_10002F014(v64, &qword_1001C0E90);
  }
}

void sub_100069834(os_log_type_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  NSObject *v3;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_100005D40(&qword_1001C0E90);
  sub_100029068();
  __chkstk_darwin(v7);
  sub_100023344();
  if ((sub_100068490() & 1) != 0)
  {
    sub_100068724(a1 & 1, (uint64_t)a2, a3);
  }
  else
  {
    if (qword_1001BEE80 != -1)
      swift_once(&qword_1001BEE80, sub_100097B54);
    v8 = sub_10002538C();
    sub_100070DA0(v8, (uint64_t)qword_1001D9FA8);
    v9 = sub_1000253F8();
    if (sub_100070FD8(v9))
    {
      v10 = (uint8_t *)sub_1000290AC();
      *(_WORD *)v10 = 0;
      sub_100025384((void *)&_mh_execute_header, v3, a1, "No authorization - returning permission denied", v10);
      sub_10002534C((uint64_t)v10);
    }

    v11 = sub_100070DE8();
    v12 = sub_100070FB0(v11);
    v13 = a2(v12);
    sub_100070FA8(v13, &qword_1001C0E90);
  }
}

void sub_100069950()
{
  _swift_stdlib_reportUnimplementedInitializer("WeatherWidget.WidgetLocationManager", 35, "init()", 6, 0);
  __break(1u);
}

id sub_100069988()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WidgetLocationManager()
{
  return objc_opt_self(_TtC13WeatherWidget21WidgetLocationManager);
}

void sub_100069B00(void *a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, int a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t updated;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *Strong;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  double v80;
  double v81;
  double v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  char v112;
  char v113[32];

  v104 = a7;
  v106 = a5;
  v107 = a6;
  v109 = a4;
  LODWORD(v108) = a2;
  v111 = a1;
  v8 = sub_100005D40(&qword_1001BF0A0);
  __chkstk_darwin(v8);
  v98 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v10);
  v97 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001C0E90);
  __chkstk_darwin(v12);
  v105 = (uint64_t)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for CurrentLocationUpdateTelemetryPayload.Success(0);
  v102 = *(_QWORD *)(updated - 8);
  v103 = updated;
  __chkstk_darwin(updated);
  v16 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for CurrentLocationUpdateFailureReason(0);
  v99 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v100 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v110 - 8);
  v19 = __chkstk_darwin(v110);
  v21 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v97 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v97 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v97 - v28;
  v30 = type metadata accessor for CurrentLocationUpdateTelemetryPayload.Failure(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v97 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v113, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(a3);
  if (!Strong)
    return;
  if (((unsigned __int16)v108 & 0x100) != 0)
  {
    v108 = Strong;
    v64 = &Strong[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_currentLocationUpdateTelemetryBackend];
    v65 = *((_QWORD *)v64 + 3);
    v66 = *((_QWORD *)v64 + 4);
    sub_100022330(v64, v65);
    v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16))(v29, v109, v110);
    static Date.now.getter(v67);
    v68 = (char)v111;
    v69 = v100;
    (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v100, *(unsigned int *)*(&off_1001B6128 + (char)v111), v101);
    CurrentLocationUpdateTelemetryPayload.Failure.init(startTime:endTime:reason:)(v29, v27, v69);
    dispatch thunk of CurrentLocationUpdateTelemetryBackendType.recordFailure(_:)(v33, v65, v66);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    v112 = v68;
    v70 = sub_10006F730();
    swift_willThrowTypedImpl(&v112, &type metadata for FailureReason, v70);
    if (qword_1001BEE80 != -1)
      swift_once(&qword_1001BEE80, sub_100097B54);
    v71 = type metadata accessor for Logger(0);
    v72 = sub_100025184(v71, (uint64_t)qword_1001D9FA8);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Error fetching the current location from CoreLocation. Returning location=nil", v75, 2u);
      swift_slowDealloc(v75, -1, -1);
    }

    v76 = type metadata accessor for Location(0);
    v77 = v105;
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v105, 1, 1, v76);
    v106(v77, 0);

    v78 = v77;
    goto LABEL_19;
  }
  v35 = v108;
  v36 = Strong;
  v37 = &Strong[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_currentLocationUpdateTelemetryBackend];
  v38 = *((_QWORD *)v37 + 3);
  v39 = *((_QWORD *)v37 + 4);
  sub_100022330(v37, v38);
  v40 = v110;
  v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16))(v24, v109, v110);
  static Date.now.getter(v41);
  CurrentLocationUpdateTelemetryPayload.Success.init(startTime:endTime:)(v24, v21);
  dispatch thunk of CurrentLocationUpdateTelemetryBackendType.recordSuccess(_:)(v16, v38, v39);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v16, v103);
  if ((v104 & 1) == 0)
  {
    v79 = v111;
    objc_msgSend(v111, "coordinate");
    v81 = v80;
    v83 = v82;
    if (qword_1001BEE80 != -1)
      swift_once(&qword_1001BEE80, sub_100097B54);
    v84 = type metadata accessor for Logger(0);
    v85 = sub_100025184(v84, (uint64_t)qword_1001D9FA8);
    v86 = Logger.logObject.getter(v85);
    v87 = static os_log_type_t.default.getter(v86);
    if (os_log_type_enabled(v86, v87))
    {
      v88 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "Got a location from CoreLocation. shouldReverseGeocode=false. Returning a nameless location with current timezone.", v88, 2u);
      swift_slowDealloc(v88, -1, -1);
    }

    v90 = static Location.currentLocationID.getter(v89);
    v92 = v91;
    v93 = v97;
    static TimeZone.current.getter();
    v94 = v98;
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v98, 1, 1, v40);
    v95 = v105;
    Location.init(id:name:timeZone:coordinate:lastRefreshDate:searchTitle:searchSubtitle:preciseName:secondaryName:)(v90, v92, 0, 0xE000000000000000, v93, v94, 0, 0, v81, v83, 0, 0, 0, 0, 0, 0);
    v96 = type metadata accessor for Location(0);
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v95, 0, 1, v96);
    v106(v95, v35);
    sub_10006F574(v79, v35, 0);

    sub_10006F574(v79, v35, 0);
    v78 = v95;
LABEL_19:
    sub_10002F014(v78, &qword_1001C0E90);
    return;
  }
  v42 = qword_1001BEE80;
  v43 = v111;
  v44 = v111;
  if (v42 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v45 = type metadata accessor for Logger(0);
  v46 = sub_100025184(v45, (uint64_t)qword_1001D9FA8);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.default.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Got a location from CoreLocation. shouldReverseGeocode=true, so about to reverse geocode", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }

  v50 = *(_QWORD *)&v36[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_geocodeManager + 24];
  v51 = *(_QWORD *)&v36[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_geocodeManager + 32];
  sub_100022330(&v36[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_geocodeManager], v50);
  objc_msgSend(v44, "coordinate");
  v52 = dispatch thunk of GeocodeManagerType.reverseGeocode(coordinate:)(v50, v51);
  v53 = swift_allocObject(&unk_1001B5EE0, 24, 7);
  swift_unknownObjectWeakInit(v53 + 16, v36);
  v54 = swift_allocObject(&unk_1001B5FD0, 41, 7);
  v56 = v106;
  v55 = v107;
  *(_QWORD *)(v54 + 16) = v53;
  *(_QWORD *)(v54 + 24) = v56;
  *(_QWORD *)(v54 + 32) = v55;
  *(_BYTE *)(v54 + 40) = v35;
  v57 = swift_retain(v55);
  v58 = (void *)zalgo.getter(v57);
  v59 = Promise.then<A>(on:closure:)(v58, sub_100070678, v54, (char *)&type metadata for () + 8);
  swift_release(v52);
  swift_release(v54);

  v60 = swift_allocObject(&unk_1001B5FF8, 57, 7);
  *(_QWORD *)(v60 + 16) = v43;
  *(_BYTE *)(v60 + 24) = v35;
  *(_BYTE *)(v60 + 25) = 0;
  *(_QWORD *)(v60 + 32) = v44;
  *(_QWORD *)(v60 + 40) = v56;
  *(_QWORD *)(v60 + 48) = v55;
  *(_BYTE *)(v60 + 56) = v35;
  sub_1000706FC(v43, v35, 0);
  sub_1000706FC(v43, v35, 0);
  v61 = swift_retain(v55);
  v62 = (void *)zalgo.getter(v61);
  v63 = Promise.error(on:closure:)(v62, sub_1000706D4, v60);
  swift_release(v63);
  swift_release(v59);
  swift_release(v60);

  sub_10006F574(v43, v35, 0);
  sub_10006F574(v43, v35, 0);

}

uint64_t sub_10006A37C(char *a1, uint64_t a2, void (*a3)(uint64_t, _QWORD), uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  void (*v52)(char *, uint64_t, __n128);
  char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  unsigned int v66;
  uint64_t v67;
  void (*v68)(uint64_t, _QWORD);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  _BYTE v72[24];
  uint64_t v73;

  v66 = a5;
  v67 = a4;
  v68 = a3;
  v70 = a1;
  v7 = sub_100005D40(&qword_1001C0E90);
  __chkstk_darwin(v7);
  v65 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D40(&qword_1001BF0A0);
  __chkstk_darwin(v9);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005D40(&qword_1001C0F18);
  __chkstk_darwin(v12);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Location.Identifier(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100005D40(&qword_1001C0F20);
  __chkstk_darwin(v19);
  v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for Location(0);
  v69 = *(_QWORD *)(v64 - 8);
  v22 = __chkstk_darwin(v64);
  v62 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v63 = (char *)&v59 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v59 - v26;
  a2 += 16;
  swift_beginAccess(a2, v72, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    v60 = (char *)result;
    v61 = v5;
    v29 = Location.identifier.getter();
    v30 = static Location.currentLocationID.getter(v29);
    v32 = v31;
    Location.Identifier.with(id:name:coordinate:)(v30);
    v33 = swift_bridgeObjectRelease(v32);
    (*(void (**)(char *, uint64_t, __n128))(v16 + 8))(v18, v15, v33);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v21, 0, 1, v15);
    v34 = type metadata accessor for TimeZone(0);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 1, 1, v34);
    v35 = type metadata accessor for Date(0);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v11, 1, 1, v35);
    Location.with(identifier:timeZone:lastRefreshDate:searchTitle:searchSubtitle:preciseName:secondaryName:)(v21, v14, v11, 0, 0, 0, 0, 0, 0, 0, 0);
    sub_10002F014((uint64_t)v11, &qword_1001BF0A0);
    sub_10002F014((uint64_t)v14, &qword_1001C0F18);
    sub_10002F014((uint64_t)v21, &qword_1001C0F20);
    if (qword_1001BEE80 != -1)
      swift_once(&qword_1001BEE80, sub_100097B54);
    v36 = type metadata accessor for Logger(0);
    sub_100025184(v36, (uint64_t)qword_1001D9FA8);
    v37 = v69;
    v38 = *(uint64_t (**)(char *, char *, uint64_t))(v69 + 16);
    v40 = v63;
    v39 = v64;
    v41 = v38(v63, v27, v64);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc(22, -1);
      v59 = swift_slowAlloc(32, -1);
      v73 = v59;
      *(_DWORD *)v44 = 141558275;
      v71 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v44 + 4);
      *(_WORD *)(v44 + 12) = 2081;
      v70 = v27;
      v45 = (void (*)(char *, char *, uint64_t))v38;
      v46 = v62;
      v45(v62, v40, v39);
      v47 = String.init<A>(reflecting:)(v46, v39);
      v48 = v40;
      v50 = v49;
      v71 = sub_10016EC84(v47, v49, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v44 + 14);
      v51 = swift_bridgeObjectRelease(v50);
      v52 = *(void (**)(char *, uint64_t, __n128))(v69 + 8);
      v53 = v48;
      v38 = (uint64_t (*)(char *, char *, uint64_t))v45;
      v27 = v70;
      v52(v53, v39, v51);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Successfully performed a reverse geocode. location=%{private,mask.hash}s. Overriding location.identifier to current", (uint8_t *)v44, 0x16u);
      v54 = v59;
      swift_arrayDestroy(v59, 1);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      v52 = *(void (**)(char *, uint64_t, __n128))(v37 + 8);
      ((void (*)(char *, uint64_t))v52)(v40, v39);
    }

    v55 = v60;
    v56 = *(_QWORD *)&v60[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager + 24];
    v57 = *(_QWORD *)&v60[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager + 32];
    sub_100022330(&v60[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager], v56);
    dispatch thunk of CurrentLocationCacheManagerType.cacheLocation(_:)(v27, v56, v57);
    v58 = (uint64_t)v65;
    v38(v65, v27, v39);
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v58, 0, 1, v39);
    v68(v58, v66);

    sub_10002F014(v58, &qword_1001C0E90);
    return ((uint64_t (*)(char *, uint64_t))v52)(v27, v39);
  }
  return result;
}

void sub_10006A8EC(uint64_t a1, void *a2, uint64_t a3, void *a4, void (*a5)(_QWORD, _QWORD), uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_t v50;
  uint64_t v51;
  void (*v52)(_QWORD, _QWORD);
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;

  v54 = a6;
  v12 = sub_100005D40(&qword_1001BF0A0);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005D40(&qword_1001C0E90);
  __chkstk_darwin(v18);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v21 = type metadata accessor for Logger(0);
  sub_100025184(v21, (uint64_t)qword_1001D9FA8);
  sub_1000706FC(a2, a3, BYTE1(a3) & 1);
  v22 = sub_1000706FC(a2, a3, BYTE1(a3) & 1);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter();
  v53 = v24;
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(22, -1);
    v52 = a5;
    v26 = v25;
    v51 = swift_slowAlloc(32, -1);
    v57 = v51;
    *(_DWORD *)v26 = 141558275;
    v55 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v26 + 4);
    *(_WORD *)(v26 + 12) = 2081;
    v49 = v26 + 14;
    v55 = (uint64_t)a2;
    v56 = a3 & 0x1FF;
    sub_1000706FC(a2, a3, BYTE1(a3) & 1);
    v27 = sub_100005D40(&qword_1001C0F10);
    v28 = String.init<A>(reflecting:)(&v55, v27);
    v50 = v23;
    v29 = a4;
    v30 = v17;
    v31 = v14;
    v32 = a7;
    v34 = v33;
    v55 = sub_10016EC84(v28, v33, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v49);
    v35 = v34;
    a7 = v32;
    v14 = v31;
    v17 = v30;
    a4 = v29;
    swift_bridgeObjectRelease(v35);
    sub_10006F574(a2, a3, BYTE1(a3) & 1);
    sub_10006F574(a2, a3, BYTE1(a3) & 1);
    v23 = v50;
    _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v53, "Error performing a reverse geocode. location=%{private,mask.hash}s. Returning a nameless location with current timezone.", (uint8_t *)v26, 0x16u);
    v36 = v51;
    swift_arrayDestroy(v51, 1);
    swift_slowDealloc(v36, -1, -1);
    v37 = v26;
    a5 = v52;
    swift_slowDealloc(v37, -1, -1);
  }
  else
  {
    sub_10006F574(a2, a3, BYTE1(a3) & 1);
    sub_10006F574(a2, a3, BYTE1(a3) & 1);
  }

  v38 = objc_msgSend(a4, "coordinate");
  v40 = v39;
  v42 = v41;
  v43 = static Location.currentLocationID.getter(v38);
  v45 = v44;
  static TimeZone.current.getter();
  v46 = type metadata accessor for Date(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 1, 1, v46);
  Location.init(id:name:timeZone:coordinate:lastRefreshDate:searchTitle:searchSubtitle:preciseName:secondaryName:)(v43, v45, 0, 0xE000000000000000, v17, v14, 0, 0, v40, v42, 0, 0, 0, 0, 0, 0);
  v47 = type metadata accessor for Location(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, v47);
  a5(v20, a7);
  sub_10002F014((uint64_t)v20, &qword_1001C0E90);
}

void sub_10006ACDC(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD aBlock[5];
  _QWORD *v32;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100025184(v12, (uint64_t)qword_1001D9FA8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "About to request location updates from CoreLocation", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = *(void **)&v3[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationManager];
  if (v17)
  {
    v18 = (_QWORD *)swift_allocObject(&unk_1001B5F30, 48, 7);
    v18[2] = v3;
    v18[3] = v17;
    v18[4] = a1;
    v18[5] = a2;
    aBlock[4] = sub_10006F550;
    v32 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10006D9E8;
    aBlock[3] = &unk_1001B5F48;
    v19 = _Block_copy(aBlock);
    v20 = v17;
    v21 = v3;
    v22 = swift_retain(a2);
    static DispatchQoS.unspecified.getter(v22);
    v30 = &_swiftEmptyArrayStorage;
    sub_10002EF14(&qword_1001C0EA0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v24 = v23;
    v25 = sub_100005D40(&qword_1001C0EA8);
    sub_100070708(&qword_1001C0EB0, &qword_1001C0EA8);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v25, v26, v6, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v28);
    swift_release(v32);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10006AFA8(void (*a1)(_BYTE *, void *, uint64_t), void *a2, uint64_t a3, void (*a4)(_BYTE *, _QWORD), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void (*v41)(_BYTE *, void *, uint64_t);
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  int v48;
  _BOOL4 v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t Strong;
  void *v69;
  void *v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  _BYTE *v87;
  _BYTE v89[12];
  int v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  _BYTE *v94;
  void (*v95)(_BYTE *, void *, uint64_t);
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void (*v100)(_BYTE *, _QWORD);
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD v106[2];
  uint64_t v107;

  v101 = a5;
  v99 = a2;
  v100 = a4;
  v95 = a1;
  v6 = sub_100005D40(&qword_1001C0E90);
  __chkstk_darwin(v6);
  v92 = &v89[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100005D40(&qword_1001C0F70);
  __chkstk_darwin(v8);
  v94 = &v89[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100005D40(&qword_1001BF0A0);
  __chkstk_darwin(v10);
  v12 = &v89[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_100005D40(&qword_1001C0F18);
  __chkstk_darwin(v13);
  v15 = &v89[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for Location.Identifier(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = &v89[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = sub_100005D40(&qword_1001C0F20);
  __chkstk_darwin(v20);
  v22 = &v89[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v97 = type metadata accessor for Location(0);
  v104 = *(_QWORD **)(v97 - 8);
  v23 = __chkstk_darwin(v97);
  v102 = &v89[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = __chkstk_darwin(v23);
  v103 = &v89[-v26];
  v27 = __chkstk_darwin(v25);
  v96 = &v89[-v28];
  v93 = v29;
  v30 = __chkstk_darwin(v27);
  v32 = &v89[-v31];
  v98 = a3 + 16;
  Location.identifier.getter(v30);
  sub_100070830(v99, (SEL *)&selRef_name);
  v34 = v33;
  Location.Identifier.with(id:name:coordinate:)(0);
  v35 = swift_bridgeObjectRelease(v34);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v17 + 8))(v19, v16, v35);
  v36 = v32;
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v22, 0, 1, v16);
  v37 = type metadata accessor for TimeZone(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v15, 1, 1, v37);
  v38 = type metadata accessor for Date(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 1, 1, v38);
  Location.with(identifier:timeZone:lastRefreshDate:searchTitle:searchSubtitle:preciseName:secondaryName:)(v22, v15, v12, 0, 0, 0, 0, 0, 0, 0, 0);
  sub_10002F014((uint64_t)v12, &qword_1001BF0A0);
  sub_10002F014((uint64_t)v15, &qword_1001C0F18);
  sub_10002F014((uint64_t)v22, &qword_1001C0F20);
  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v39 = type metadata accessor for Logger(0);
  sub_100025184(v39, (uint64_t)qword_1001D9FA8);
  v40 = v104;
  v41 = (void (*)(_BYTE *, void *, uint64_t))v104[2];
  v43 = v96;
  v42 = v97;
  v41(v96, v36, v97);
  v44 = v103;
  v99 = v36;
  v45 = ((uint64_t (*)(_BYTE *, void *, uint64_t))v41)(v103, v36, v42);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.default.getter(v46);
  v48 = v47;
  v49 = os_log_type_enabled(v46, v47);
  v95 = v41;
  if (v49)
  {
    v50 = swift_slowAlloc(42, -1);
    v91 = swift_slowAlloc(64, -1);
    v107 = v91;
    *(_DWORD *)v50 = 141558787;
    v105 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v50 + 4);
    *(_WORD *)(v50 + 12) = 2081;
    v90 = v48;
    v51 = v102;
    v41(v102, v43, v42);
    v52 = String.init<A>(reflecting:)(v51, v42);
    v54 = v53;
    v105 = sub_10016EC84(v52, v53, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v50 + 14);
    v55 = swift_bridgeObjectRelease(v54);
    v56 = (_QWORD *)v104[1];
    ((void (*)(_BYTE *, uint64_t, __n128))v56)(v43, v42, v55);
    *(_WORD *)(v50 + 22) = 2160;
    v105 = 1752392040;
    v57 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v50 + 24);
    *(_WORD *)(v50 + 32) = 2081;
    v58 = v56;
    v59 = v103;
    v105 = Location.name.getter(v57);
    v106[0] = v60;
    v61 = String.init<A>(reflecting:)(&v105, &type metadata for String);
    v63 = v62;
    v105 = sub_10016EC84(v61, v62, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v50 + 34);
    v64 = swift_bridgeObjectRelease(v63);
    ((void (*)(_BYTE *, uint64_t, __n128))v56)(v59, v42, v64);
    _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v90, "Successfully performed a reverse geocode. location=%{private,mask.hash}s, name=%{private,mask.hash}s", (uint8_t *)v50, 0x2Au);
    v65 = v91;
    swift_arrayDestroy(v91, 2);
    swift_slowDealloc(v65, -1, -1);
    v66 = v50;
    v40 = v104;
    swift_slowDealloc(v66, -1, -1);
  }
  else
  {
    v58 = (_QWORD *)v40[1];
    ((void (*)(_BYTE *, uint64_t))v58)(v43, v42);
    ((void (*)(_BYTE *, uint64_t))v58)(v44, v42);
  }

  v67 = v98;
  swift_beginAccess(v98, &v105, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v67);
  v69 = v99;
  if (Strong)
  {
    v70 = (void *)Strong;
    v71 = type metadata accessor for TaskPriority(0);
    v104 = v58;
    v72 = v94;
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v94, 1, 1, v71);
    v73 = v102;
    v95(v102, v69, v42);
    v74 = *((unsigned __int8 *)v40 + 80);
    v75 = (v74 + 40) & ~v74;
    v76 = v69;
    v77 = (v93 + v75 + 7) & 0xFFFFFFFFFFFFFFF8;
    v78 = (char *)swift_allocObject(&unk_1001B6070, v77 + 16, v74 | 7);
    *((_QWORD *)v78 + 2) = 0;
    *((_QWORD *)v78 + 3) = 0;
    *((_QWORD *)v78 + 4) = v70;
    ((void (*)(char *, _BYTE *, uint64_t))v40[4])(&v78[v75], v73, v42);
    v79 = &v78[v77];
    v69 = v76;
    v80 = v101;
    *(_QWORD *)v79 = v100;
    *((_QWORD *)v79 + 1) = v80;
    v81 = v70;
    swift_retain(v80);
    v82 = (uint64_t)v72;
    v58 = v104;
    v83 = sub_10006BF2C(v82, (uint64_t)&unk_1001C0F80, (uint64_t)v78);

    swift_release(v83);
  }
  else
  {
    v84 = Logger.logObject.getter(0);
    v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v85))
    {
      v86 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v86 = 0;
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "WidgetLocationManager.Self deallocated", v86, 2u);
      swift_slowDealloc(v86, -1, -1);
    }

    v87 = v92;
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v92, 1, 1, v42);
    v100(v87, 0);
    sub_10002F014((uint64_t)v87, &qword_1001C0E90);
  }
  return ((uint64_t (*)(void *, uint64_t))v58)(v69, v42);
}

uint64_t sub_10006B768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v7[5] = a6;
  v7[6] = a7;
  v7[4] = a5;
  v9 = sub_100005D40(&qword_1001C0E90);
  v7[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Location(0);
  v7[8] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[9] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[10] = swift_task_alloc(v12);
  v7[11] = swift_task_alloc(v12);
  v13 = swift_task_alloc(v12);
  v7[12] = v13;
  v14 = (_QWORD *)swift_task_alloc(dword_1001C0F9C);
  v7[13] = v14;
  *v14 = v7;
  v14[1] = sub_10006B83C;
  return sub_10006B87C(v13, a5);
}

uint64_t sub_10006B83C()
{
  sub_100070DB4();
  return sub_100070D44();
}

uint64_t sub_10006B87C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = sub_100005D40(&qword_1001C0FA0);
  v3[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D40(&qword_1001C0E90);
  v3[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Location(0);
  v3[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[12] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[13] = swift_task_alloc(v8);
  v3[14] = swift_task_alloc(v8);
  v3[15] = swift_task_alloc(v8);
  v9 = sub_100005D40(&qword_1001C0FA8);
  v3[16] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[17] = swift_task_alloc(v10);
  v3[18] = swift_task_alloc(v10);
  v3[19] = swift_task_alloc(v10);
  v3[20] = swift_task_alloc(v10);
  return swift_task_switch(sub_10006B994, 0, 0);
}

uint64_t sub_10006B994()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (_QWORD *)(v0[8] + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_savedLocationFinder);
  v2 = v1[3];
  v3 = v1[4];
  sub_100022330(v1, v2);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of SavedLocationFinderType.find(by:)[1]);
  v0[21] = v4;
  *v4 = v0;
  v4[1] = sub_10006BA18;
  return dispatch thunk of SavedLocationFinderType.find(by:)(v0[20], v0[7], v2, v3);
}

uint64_t sub_10006BA18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  return sub_100070D44();
}

uint64_t sub_10006BA74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __n128 v27;
  void (*v28)(uint64_t, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = sub_10002538C();
  v9 = sub_100025184(v8, (uint64_t)qword_1001D9FA8);
  sub_100070A1C(v3, v2);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v11 = v10(v4, v7, v5);
  v12 = v9;
  Logger.logObject.getter(v11);
  v13 = sub_1000253F8();
  v14 = sub_10002908C(v13);
  v15 = *(_QWORD *)(v0 + 152);
  if (v14)
  {
    v16 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 128);
    v52 = *(_QWORD *)(v0 + 120);
    v51 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 88);
    v53 = *(_QWORD *)(v0 + 96);
    v18 = sub_100025358(42);
    v54 = sub_100025358(64);
    v55 = v54;
    sub_100070ED4(7.2227e-34);
    *(_QWORD *)(v0 + 16) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v20);
    *(_WORD *)(v18 + 12) = 2081;
    sub_100070A1C(v15, v16);
    v21 = String.init<A>(reflecting:)(v16, v17);
    v23 = v22;
    *(_QWORD *)(v0 + 24) = sub_10016EC84(v21, v22, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v18 + 14);
    swift_bridgeObjectRelease(v23);
    sub_10002F014(v15, &qword_1001C0FA8);
    *(_WORD *)(v18 + 22) = 2160;
    *(_QWORD *)(v0 + 32) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v18 + 24);
    *(_WORD *)(v18 + 32) = 2081;
    v1 = v52;
    v10(v51, v52, v9);
    v24 = String.init<A>(reflecting:)(v51, v9);
    v26 = v25;
    *(_QWORD *)(v0 + 40) = sub_10016EC84(v24, v25, &v55);
    sub_10007102C(v0 + 40, v0 + 48);
    v27 = swift_bridgeObjectRelease(v26);
    v28 = *(void (**)(uint64_t, uint64_t, __n128))(v53 + 8);
    v28(v52, v9, v27);
    _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v2, "WidgetLocationManager found matched location =%{private,mask.hash}s, for input location=%{private,mask.hash}s", (uint8_t *)v18, 0x2Au);
    swift_arrayDestroy(v54, 2);
    sub_10002534C(v54);
    sub_10002534C(v18);
  }
  else
  {
    v29 = *(_QWORD *)(v0 + 120);
    v30 = *(_QWORD *)(v0 + 88);
    v31 = *(_QWORD *)(v0 + 96);
    sub_10002F014(*(_QWORD *)(v0 + 152), &qword_1001C0FA8);
    v28 = *(void (**)(uint64_t, uint64_t, __n128))(v31 + 8);
    ((void (*)(uint64_t, uint64_t))v28)(v29, v30);
  }

  v32 = *(_QWORD *)(v0 + 136);
  sub_100070A1C(*(_QWORD *)(v0 + 160), v32);
  type metadata accessor for LocationModel(0);
  if (sub_100070EAC(v32) == 1)
  {
    v33 = *(_QWORD *)(v0 + 136);
    sub_10002F014(*(_QWORD *)(v0 + 160), &qword_1001C0FA8);
    v34 = v33;
    v35 = &qword_1001C0FA8;
LABEL_10:
    sub_10002F014(v34, v35);
    v39 = 1;
    goto LABEL_12;
  }
  v36 = *(_QWORD *)(v0 + 72);
  LocationModel.locationOfInterest.getter();
  sub_100070E74();
  type metadata accessor for LocationOfInterest(0);
  v37 = sub_100070EAC(v36);
  if ((_DWORD)v37 == 1)
  {
    v38 = *(_QWORD *)(v0 + 72);
    sub_100071018(v37, &qword_1001C0FA8);
    v35 = (uint64_t *)&unk_1001C0FA0;
    v34 = v38;
    goto LABEL_10;
  }
  v40 = LocationOfInterest.location.getter();
  sub_100071018(v40, &qword_1001C0FA8);
  sub_100070E74();
  v39 = 0;
LABEL_12:
  v41 = *(_QWORD *)(v0 + 104);
  v43 = *(_QWORD *)(v0 + 80);
  v42 = *(_QWORD *)(v0 + 88);
  v44 = *(_QWORD *)(v0 + 56);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v43, v39, 1, v42);
  v10(v41, v44, v42);
  v45 = sub_100070EAC(v43);
  v46 = *(_QWORD *)(v0 + 96);
  v47 = *(_QWORD *)(v0 + 80);
  if (v45 == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v46 + 32))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
    sub_10002F014(v47, &qword_1001C0E90);
  }
  else
  {
    ((void (*)(_QWORD, _QWORD))v28)(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
    v48 = sub_100070F10();
    v49(v48);
  }
  sub_100070E44();
  sub_100070EFC();
  sub_100070FA0();
  sub_100070F20();
  swift_task_dealloc(v46);
  swift_task_dealloc(v28);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006BEB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100070E44();
  sub_100070EFC();
  sub_100070FA0();
  sub_100070F20();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006BF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v6) == 1)
  {
    sub_10002F014(a1, &qword_1001C0F70);
    v7 = 7168;
  }
  else
  {
    v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v7 = v8 | 0x1C00;
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    v14 = v13;
    swift_unknownObjectRelease(v9);
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = swift_allocObject(&unk_1001B6098, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0;
    v18[1] = 0;
    v16 = v18;
    v18[2] = v12;
    v18[3] = v14;
  }
  else
  {
    v16 = 0;
  }
  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_1001C0F90, v15);
}

void sub_10006C070(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, _QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_BYTE *, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  void (*v35)(_BYTE *, uint64_t, __n128);
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  os_log_t v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t);
  void (*v45)(_BYTE *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t Strong;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  _BYTE v63[4];
  int v64;
  os_log_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_BYTE *, _QWORD);
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78[3];
  uint64_t v79;
  uint64_t v80;

  v75 = a3;
  v7 = sub_100005D40(&qword_1001C0E90);
  __chkstk_darwin(v7);
  v9 = &v63[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100005D40(&qword_1001C0F70);
  __chkstk_darwin(v10);
  v72 = &v63[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for Location(0);
  v13 = *(_QWORD **)(v12 - 8);
  v14 = v13[8];
  v15 = __chkstk_darwin(v12);
  v76 = &v63[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v15);
  v77 = &v63[-v17];
  __chkstk_darwin(v16);
  v19 = &v63[-v18];
  v73 = a2 + 16;
  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100025184(v20, (uint64_t)qword_1001D9FA8);
  v22 = (void (*)(_BYTE *, uint64_t, uint64_t))v13[2];
  v22(v19, a1, v12);
  v74 = a1;
  v23 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v22)(v77, a1, v12);
  v70 = v21;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  v26 = v25;
  v27 = os_log_type_enabled(v24, v25);
  v71 = v13;
  if (v27)
  {
    v28 = swift_slowAlloc(42, -1);
    v65 = v24;
    v29 = v28;
    v66 = swift_slowAlloc(64, -1);
    v78[0] = v66;
    *(_DWORD *)v29 = 141558787;
    v79 = 1752392040;
    v64 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v29 + 4);
    *(_WORD *)(v29 + 12) = 2081;
    v67 = v14;
    v68 = v9;
    v30 = v76;
    v22(v76, (uint64_t)v19, v12);
    v31 = String.init<A>(reflecting:)(v30, v12);
    v69 = a4;
    v33 = v32;
    v79 = sub_10016EC84(v31, v32, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v29 + 14);
    v34 = swift_bridgeObjectRelease(v33);
    v35 = (void (*)(_BYTE *, uint64_t, __n128))v13[1];
    v35(v19, v12, v34);
    *(_WORD *)(v29 + 22) = 2160;
    v79 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v29 + 24);
    *(_WORD *)(v29 + 32) = 2081;
    v36 = v77;
    v22(v30, (uint64_t)v77, v12);
    v37 = v30;
    v14 = v67;
    v38 = String.init<A>(reflecting:)(v37, v12);
    v40 = v39;
    v79 = sub_10016EC84(v38, v39, v78);
    v9 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v29 + 34);
    v41 = swift_bridgeObjectRelease(v40);
    v35(v36, v12, v41);
    a4 = v69;
    v42 = v65;
    _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v64, "Successfully performed a local search. location=%{private,mask.hash}s, name=%{private,mask.hash}s", (uint8_t *)v29, 0x2Au);
    v43 = v66;
    swift_arrayDestroy(v66, 2);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {
    v44 = (void (*)(_BYTE *, uint64_t))v13[1];
    v44(v19, v12);
    v44(v77, v12);

  }
  v45 = v22;
  v46 = v73;
  swift_beginAccess(v73, v78, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v46);
  v48 = v74;
  if (Strong)
  {
    v49 = Strong;
    v50 = type metadata accessor for TaskPriority(0);
    v51 = v72;
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v72, 1, 1, v50);
    v52 = v76;
    v45(v76, v48, v12);
    v53 = v71;
    v54 = *((unsigned __int8 *)v71 + 80);
    v55 = (v54 + 40) & ~v54;
    v56 = (v14 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
    v57 = (char *)swift_allocObject(&unk_1001B6110, v56 + 16, v54 | 7);
    *((_QWORD *)v57 + 2) = 0;
    *((_QWORD *)v57 + 3) = 0;
    *((_QWORD *)v57 + 4) = v49;
    ((void (*)(char *, _BYTE *, uint64_t))v53[4])(&v57[v55], v52, v12);
    v58 = &v57[v56];
    *(_QWORD *)v58 = v75;
    *((_QWORD *)v58 + 1) = a4;
    swift_retain(a4);
    v59 = sub_10006BF2C((uint64_t)v51, (uint64_t)&unk_1001C0FC0, (uint64_t)v57);
    swift_release(v59);
  }
  else
  {
    v60 = Logger.logObject.getter(0);
    v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "WidgetLocationManager.Self deallocated", v62, 2u);
      swift_slowDealloc(v62, -1, -1);
    }

    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 1, 1, v12);
    v75(v9, 0);
    sub_10002F014((uint64_t)v9, &qword_1001C0E90);
  }
}

uint64_t sub_10006C5C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v7[5] = a6;
  v7[6] = a7;
  v7[4] = a5;
  v9 = sub_100005D40(&qword_1001C0E90);
  v7[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Location(0);
  v7[8] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[9] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[10] = swift_task_alloc(v12);
  v7[11] = swift_task_alloc(v12);
  v13 = swift_task_alloc(v12);
  v7[12] = v13;
  v14 = (_QWORD *)swift_task_alloc(dword_1001C0F9C);
  v7[13] = v14;
  *v14 = v7;
  v14[1] = sub_10006C69C;
  return sub_10006B87C(v13, a5);
}

uint64_t sub_10006C69C()
{
  sub_100070DB4();
  return sub_100070D44();
}

uint64_t sub_10006C6DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v1, v2);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v4, 0, 1, v2);
  v5(v4, 1);
  sub_10002F014(v4, &qword_1001C0E90);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_100070F6C();
  sub_100070EFC();
  sub_100070FA0();
  sub_100070F20();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;

  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = sub_10002538C();
  sub_100025184(v5, (uint64_t)qword_1001D9FA8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7 = v6(v2, v1, v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v26 = (void (*)(uint64_t, uint64_t, uint64_t))v6;
    v11 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 64);
    v25 = *(_QWORD *)(v0 + 72);
    v13 = sub_100025358(22);
    v14 = sub_100025358(32);
    v27 = v14;
    *(_DWORD *)v13 = 141558275;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4);
    *(_WORD *)(v13 + 12) = 2081;
    v26(v10, v11, v12);
    v15 = String.init<A>(reflecting:)(v10, v12);
    v17 = v16;
    *(_QWORD *)(v0 + 24) = sub_10016EC84(v15, v16, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 14);
    v18 = v17;
    v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v26;
    v19 = swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t, __n128))(v25 + 8))(v11, v12, v19);
    sub_100070F7C((void *)&_mh_execute_header, v8, v9, "Failed to find location through savedLocationFinder location=%{private,mask.hash}s", (uint8_t *)v13);
    sub_100025444(v14);
    sub_10002534C(v14);
    sub_10002534C(v13);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  }

  v20 = *(_QWORD *)(v0 + 56);
  v21 = *(_QWORD *)(v0 + 64);
  v22 = *(void (**)(uint64_t, uint64_t))(v0 + 40);
  v6(v20, *(_QWORD *)(v0 + 32), v21);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v20, 0, 1, v21);
  v22(v20, 1);
  v23 = sub_100070EB8();
  sub_100071018(v23, &qword_1001C0E90);
  sub_100070F6C();
  sub_100070EFC();
  sub_100070FA0();
  sub_100070F20();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10006C9E0()
{
  uint64_t v0;
  const char *v1;
  const char *v2;
  uint64_t (*v3)(uint64_t, _QWORD);
  uint64_t (*v4)(uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  sub_100070E5C();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_100005D40(&qword_1001C0E90);
  sub_100029068();
  __chkstk_darwin(v9);
  sub_100023344();
  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v10 = sub_10002538C();
  sub_100025184(v10, (uint64_t)qword_1001D9FA8);
  v11 = swift_bridgeObjectRetain_n(v6, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = sub_100025358(22);
    v15 = sub_100025358(32);
    v22[1] = v15;
    *(_DWORD *)v14 = 141558275;
    v21 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v14 + 4);
    *(_WORD *)(v14 + 12) = 2081;
    v21 = v8;
    v22[0] = v6;
    swift_bridgeObjectRetain(v6);
    v16 = String.init<A>(reflecting:)(&v21, &type metadata for String);
    v18 = v17;
    v21 = sub_100070EC0(v16, v17);
    sub_10007102C((uint64_t)&v21, (uint64_t)v22);
    sub_100070FF8();
    swift_bridgeObjectRelease(v18);
    sub_100070F7C((void *)&_mh_execute_header, v12, v13, v2, (uint8_t *)v14);
    sub_100025444(v15);
    sub_10002534C(v15);
    sub_10002534C(v14);

  }
  else
  {

    sub_100070FF8();
  }
  v19 = sub_100070DE8();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 1, 1, v19);
  v20 = v4(v0, 0);
  sub_100070FA8(v20, &qword_1001C0E90);
  sub_10001C770();
}

void sub_10006CBC8(uint64_t a1, void *a2, void (*a3)(id, _QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[32];

  if ((sub_100068490() & 1) != 0)
  {
    if (qword_1001BEE80 != -1)
      swift_once(&qword_1001BEE80, sub_100097B54);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100025184(v8, (uint64_t)qword_1001D9FA8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "location permissions granted, we can safely start listening to location updates from CoreLocation.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    UnfairLock.lock()();
    v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_timer);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    v17 = os_log_type_enabled(v15, v16);
    if (v13)
    {
      if (v17)
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "We are already listening to location updates from CoreLocation.", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

    }
    else
    {
      if (v17)
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Starting listening to location updates from CoreLocation.", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

      objc_msgSend(a2, "startUpdatingLocation");
      sub_10006CF44();
    }
    v29 = swift_allocObject(&unk_1001B5F80, 32, 7);
    *(_QWORD *)(v29 + 16) = a3;
    *(_QWORD *)(v29 + 24) = a4;
    v30 = (uint64_t *)(a1 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_completionQueue);
    swift_beginAccess(a1 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_completionQueue, v34, 33, 0);
    swift_retain(a4);
    sub_10006F63C();
    v31 = *(_QWORD *)(*v30 + 16);
    sub_10006F6E4(v31);
    v32 = *v30;
    *(_QWORD *)(v32 + 16) = v31 + 1;
    v33 = v32 + 16 * v31;
    *(_QWORD *)(v33 + 32) = sub_10006F580;
    *(_QWORD *)(v33 + 40) = v29;
    swift_endAccess(v34);
    UnfairLock.unlock()();
  }
  else
  {
    if (qword_1001BEE80 != -1)
      swift_once(&qword_1001BEE80, sub_100097B54);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100025184(v19, (uint64_t)qword_1001D9FA8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "location permissions NOT granted, attempting to return a cachedLocation.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    v24 = sub_10006D488(2);
    v26 = v25;
    v27 = (v25 >> 8) & 1;
    a3(v24, v25 | (v27 << 8));
    sub_10006F574(v24, v26, v27);
  }
}

uint64_t sub_10006CF44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(_QWORD *, uint64_t);
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  _QWORD v49[2];
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD aBlock[5];
  uint64_t v64;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v60 = *(_QWORD *)(v1 - 8);
  v61 = v1;
  __chkstk_darwin(v1);
  v57 = (char *)v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  __chkstk_darwin(v3);
  v56 = (char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for DispatchTimeInterval(0);
  v52 = *(_QWORD *)(v54 - 8);
  v5 = __chkstk_darwin(v54);
  v55 = (_QWORD *)((char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v8 = (_QWORD *)((char *)v49 - v7);
  v53 = type metadata accessor for DispatchTime(0);
  v51 = *(_QWORD *)(v53 - 8);
  v9 = __chkstk_darwin(v53);
  v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v50 = (char *)v49 - v12;
  v13 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100070744(0, &qword_1001C0EB8, OS_dispatch_source_ptr);
  v17 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationQueue);
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_10002EF14(&qword_1001C0EC0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v19 = v18;
  v20 = sub_100005D40(&qword_1001C0EC8);
  sub_100070708(&qword_1001C0ED0, &qword_1001C0EC8);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v13, v19);
  v22 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v16, v17);
  v62 = v22;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  ObjectType = swift_getObjectType(v22);
  static DispatchTime.now()();
  *v8 = 10;
  v24 = v52;
  v25 = v54;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v52 + 104))(v8, enum case for DispatchTimeInterval.seconds(_:), v54);
  v26 = v50;
  + infix(_:_:)(v11, v8);
  v27 = *(void (**)(_QWORD *, uint64_t))(v24 + 8);
  v27(v8, v25);
  v28 = *(void (**)(char *, uint64_t))(v51 + 8);
  v29 = v49[1];
  v30 = v53;
  v28(v11, v53);
  sub_10006E25C((uint64_t)v8);
  v31 = v55;
  sub_10006E2A0(v55);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v26, v8, v31, ObjectType);
  v27(v31, v25);
  v27(v8, v25);
  v28(v26, v30);
  v32 = swift_allocObject(&unk_1001B5EE0, 24, 7);
  swift_unknownObjectWeakInit(v32 + 16, v29);
  aBlock[4] = sub_10006F728;
  v64 = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006D9E8;
  aBlock[3] = &unk_1001B5F98;
  v33 = _Block_copy(aBlock);
  v34 = swift_retain(v32);
  v35 = v56;
  static DispatchQoS.unspecified.getter(v34);
  v36 = v57;
  sub_10006E4C8();
  v37 = v36;
  v38 = v36;
  v39 = v62;
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v35, v37, v33, ObjectType);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v38, v61);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v35, v59);
  v40 = v64;
  swift_release(v32);
  swift_release(v40);
  v41 = v39;
  OS_dispatch_source.resume()();
  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v42 = type metadata accessor for Logger(0);
  v43 = sub_100025184(v42, (uint64_t)qword_1001D9FA8);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Timer: starting current location fetch timer", v46, 2u);
    swift_slowDealloc(v46, -1, -1);
  }

  v47 = *(_QWORD *)(v29 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_timer);
  *(_QWORD *)(v29 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_timer) = v41;
  return swift_unknownObjectRelease(v47);
}

uint64_t sub_10006D448(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  return a2(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8) | (*(unsigned __int8 *)(a1 + 9) << 8));
}

id sub_10006D488(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id result;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[2];

  v2 = v1;
  v42 = a1;
  v3 = sub_100005D40(&qword_1001C0EF8);
  __chkstk_darwin(v3);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CachedCurrentLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v10 = type metadata accessor for Logger(0);
  sub_100025184(v10, (uint64_t)qword_1001D9FA8);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "About to retrieve our last cachedLocation", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationManager;
  result = *(id *)(v2 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationManager);
  if (!result)
  {
    __break(1u);
    goto LABEL_29;
  }
  v16 = objc_msgSend(result, "_authorizationStatus");
  if ((CLAuthorizationStatus.isAuthorized.getter() & 1) != 0)
  {
    result = *(id *)(v2 + v14);
    if (result)
    {
      if (objc_msgSend(result, "isAuthorizedForWidgetUpdates"))
      {
        v17 = (_QWORD *)(v2 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager);
        v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager + 24);
        v19 = v17[4];
        sub_100022330(v17, v18);
        dispatch thunk of CurrentLocationCacheManagerType.readCachedLocation()(v18, v19);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v5, 1, v6) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
          v32 = (id)sub_10006E0D8();
          v33 = Logger.logObject.getter();
          v34 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v33, v34))
          {
            v35 = swift_slowAlloc(22, -1);
            v36 = swift_slowAlloc(32, -1);
            *(_DWORD *)v35 = 141558275;
            v43 = 1752392040;
            v44[0] = v36;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v35 + 4);
            *(_WORD *)(v35 + 12) = 2081;
            v42 = v35 + 14;
            v43 = (uint64_t)v32;
            v37 = sub_100070744(0, (unint64_t *)&unk_1001C0F00, CLLocation_ptr);
            v38 = v32;
            v39 = String.init<A>(reflecting:)(&v43, v37);
            v41 = v40;
            v43 = sub_10016EC84(v39, v40, v44);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v42);

            swift_bridgeObjectRelease(v41);
            _os_log_impl((void *)&_mh_execute_header, v33, v34, "Successfully retrieved a previous cachedLocation. location=%{private,mask.hash}s", (uint8_t *)v35, 0x16u);
            swift_arrayDestroy(v36, 1);
            swift_slowDealloc(v36, -1, -1);
            swift_slowDealloc(v35, -1, -1);
          }
          else
          {

          }
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          return v32;
        }
        sub_10002F014((uint64_t)v5, &qword_1001C0EF8);
        v20 = Logger.logObject.getter();
        v21 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v20, v21))
        {
          v22 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v22 = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "Aborting cachedLocation: no previous location data available", v22, 2u);
          swift_slowDealloc(v22, -1, -1);
        }

        return (id)v42;
      }
      goto LABEL_13;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_13:
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Aborting cachedLocation: we are no longer authorized.", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  if ((CLAuthorizationStatus.isExplicitlyUnauthorized.getter(v16) & 1) != 0)
    goto LABEL_18;
  result = *(id *)(v2 + v14);
  if (result)
  {
    if ((objc_msgSend(result, "isAuthorizedForWidgetUpdates") & 1) != 0)
      return (id)v42;
LABEL_18:
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Previous location authorization revoked. Clearing cache.", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    v30 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager + 24);
    v31 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager + 32);
    sub_100022330((_QWORD *)(v2 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager), v30);
    dispatch thunk of CurrentLocationCacheManagerType.clearCache()(v30, v31);
    return (id)v42;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10006D9EC(void *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v7;
  void (**v8)(_QWORD *, _QWORD, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD *, _QWORD, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void (*v45)(uint64_t *);
  uint64_t v46;
  int v47;
  void *v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51[3];

  v4 = v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(void (***)(_QWORD *, _QWORD, uint64_t))(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v4 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationQueue);
  *v10 = v11;
  v8[13](v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  ((void (*)(_QWORD *, uint64_t))v8[1])(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once(&qword_1001BEE80, sub_100097B54);
    goto LABEL_6;
  }
  LODWORD(v10) = a2 & 1;
  if ((a2 & 1) != 0)
  {
    LOBYTE(v51[0]) = (_BYTE)a1;
    v14 = sub_10006F730();
    swift_willThrowTypedImpl(v51, &type metadata for FailureReason, v14);
    v8 = 0;
    v3 = 0xEC0000006C756673;
    a2 = 0x7365636375736E75;
  }
  else
  {
    v13 = a1;
    v3 = 0xEA00000000006C75;
    a2 = 0x6673736563637573;
    v8 = (void (**)(_QWORD *, _QWORD, uint64_t))a1;
  }
  if (qword_1001BEE80 != -1)
    goto LABEL_20;
LABEL_6:
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100025184(v15, (uint64_t)qword_1001D9FA8);
  v17 = v8;
  v18 = swift_bridgeObjectRetain(v3);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(32, -1);
    v48 = a1;
    v22 = v21;
    v23 = swift_slowAlloc(64, -1);
    v46 = v16;
    v24 = v17;
    v25 = v23;
    v51[0] = v23;
    *(_DWORD *)v22 = 136446723;
    v47 = (int)v10;
    swift_bridgeObjectRetain(v3);
    v49 = sub_10016EC84(a2, v3, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v22 + 4);
    swift_bridgeObjectRelease_n(v3, 3);
    *(_WORD *)(v22 + 12) = 2160;
    v49 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v22 + 14);
    *(_WORD *)(v22 + 22) = 2081;
    v49 = (uint64_t)v8;
    v10 = v24;
    v26 = sub_100005D40(&qword_1001C0EE0);
    v27 = String.init<A>(reflecting:)(&v49, v26);
    v29 = v28;
    v49 = sub_10016EC84(v27, v28, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v22 + 24);

    LOBYTE(v10) = v47;
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "CoreLocation fetch was %{public}s ...now stopping listening to location updates. location=%{private,mask.hash}s", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy(v25, 2);
    v30 = v25;
    v17 = (void (**)(_QWORD *, _QWORD, uint64_t))v24;
    swift_slowDealloc(v30, -1, -1);
    v31 = v22;
    a1 = v48;
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v3, 2);
  }
  *(_BYTE *)(v4 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationIsUpdating) = 0;
  v32 = *(void **)(v4 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationManager);
  if (v32)
  {
    objc_msgSend(v32, "stopUpdatingLocation");
    UnfairLock.lock()();
    sub_10006DF14();
    v33 = (uint64_t *)(v4 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_completionQueue);
    swift_beginAccess(v4 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_completionQueue, v51, 1, 0);
    v34 = *v33;
    *v33 = (uint64_t)&_swiftEmptyArrayStorage;
    UnfairLock.unlock()();
    v35 = sub_10006E050((uint64_t)a1, (char)v10, v4);
    v37 = v36;
    v38 = swift_bridgeObjectRetain(v34);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v41 = 134217984;
      v49 = *(_QWORD *)(v34 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v41 + 4);
      swift_bridgeObjectRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "locationUpdate: completed returning (%ld) requests", v41, 0xCu);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease(v34);
    }
    v42 = *(_QWORD *)(v34 + 16);
    if (v42)
    {
      swift_bridgeObjectRetain(v34);
      v43 = (uint64_t *)(v34 + 40);
      do
      {
        v45 = (void (*)(uint64_t *))*(v43 - 1);
        v44 = *v43;
        v49 = (uint64_t)v35;
        v50 = v37 & 0x1FF;
        swift_retain(v44);
        v45(&v49);
        swift_release(v44);
        v43 += 2;
        --v42;
      }
      while (v42);

      swift_bridgeObjectRelease(v34);
    }
    else
    {

    }
    sub_10006F574(v35, v37, BYTE1(v37) & 1);
    swift_bridgeObjectRelease(v34);
  }
  else
  {
    __break(1u);
  }
}

void sub_10006DF14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_timer;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_timer);
  if (v2)
  {
    v3 = v0;
    swift_getObjectType(*(_QWORD *)(v0 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_timer));
    swift_unknownObjectRetain(v2);
    OS_dispatch_source.cancel()();
    if (qword_1001BEE80 != -1)
      swift_once(&qword_1001BEE80, sub_100097B54);
    v4 = type metadata accessor for Logger(0);
    sub_100025184(v4, (uint64_t)qword_1001D9FA8);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Timer: stopped successfully before expiration", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
      swift_unknownObjectRelease(v2);

    }
    else
    {

      swift_unknownObjectRelease(v2);
    }
    v8 = *(_QWORD *)(v3 + v1);
    *(_QWORD *)(v3 + v1) = 0;
    swift_unknownObjectRelease(v8);
  }
}

id sub_10006E050(uint64_t a1, char a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (void *)a1;
  if ((a2 & 1) != 0)
    return sub_10006D488(a1);
  v4 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager + 24);
  v5 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager + 32);
  sub_100022330((_QWORD *)(a3 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager), v4);
  dispatch thunk of CurrentLocationCacheManagerType.cacheLocation(_:)(v3, v4, v5);
  return v3;
}

uint64_t sub_10006E0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = type metadata accessor for Location(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CachedCurrentLocation.EmbeddedLocation(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  CachedCurrentLocation.embeddedLocation.getter(v5);
  if (swift_getEnumCaseMultiPayload(v7, v4) != 1)
    return *(_QWORD *)v7;
  v8 = (*(uint64_t (**)(char *, char *, uint64_t))(v1 + 32))(v3, v7, v0);
  v9 = Location.coordinate.getter(v8);
  v10 = CLLocationCoordinate2D.clLocation.getter(v9);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v10;
}

uint64_t sub_10006E1D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for LocationDataModel(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return Location.init(locationDataModel:)(v4);
}

uint64_t sub_10006E25C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for DispatchTimeInterval.never(_:);
  v3 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_10006E2A0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = 0;
  v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  v3 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

void sub_10006E2E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  _BYTE v13[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    if (qword_1001BEE80 != -1)
      swift_once(&qword_1001BEE80, sub_100097B54);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100025184(v4, (uint64_t)qword_1001D9FA8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Timer: timed out while attempting to fetch the current location", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    sub_10006D9EC(0, 1);
  }
  else
  {
    if (qword_1001BEE80 != -1)
      swift_once(&qword_1001BEE80, sub_100097B54);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100025184(v9, (uint64_t)qword_1001D9FA8);
    v3 = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v11, "Timer: we were deallocated before the timer timed out", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
  }

}

uint64_t sub_10006E49C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10006E4C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = &_swiftEmptyArrayStorage;
  sub_10002EF14(&qword_1001C0EA0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = v1;
  v3 = sub_100005D40(&qword_1001C0EA8);
  sub_100070708(&qword_1001C0EB0, &qword_1001C0EA8);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v6, v3, v4, v0, v2);
}

void sub_10006E574()
{
  NSObject *v0;
  objc_class *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  CLLocation_optional v28;
  Swift::Bool v29;
  uint64_t v30;
  id v32;
  CLLocation_optional v33;
  void *v34;
  char v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  id v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  _WORD *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  os_log_type_t v56;
  _WORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[16];
  uint64_t v62;

  sub_100070E5C();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  type metadata accessor for CachedCurrentLocation.EmbeddedLocation(0);
  sub_100029068();
  __chkstk_darwin(v7);
  sub_10002325C();
  v10 = v9 - v8;
  sub_100005D40(&qword_1001C0EF8);
  sub_100029068();
  __chkstk_darwin(v11);
  sub_100023344();
  v12 = sub_10007104C();
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10002325C();
  v16 = v15 - v14;
  v17 = *(Class *)((char *)&v2->isa + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationQueue);
  *(_QWORD *)(v15 - v14) = v17;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v15 - v14, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    if (v4 < 0)
      v53 = v4;
    else
      v53 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v54 = _CocoaArrayWrapper.endIndex.getter(v53);
    swift_bridgeObjectRelease(v4);
    if (v54)
      goto LABEL_4;
    goto LABEL_47;
  }
  *((_BYTE *)&v2->isa + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationIsUpdating) = 1;
  v13 = (unint64_t)v4 >> 62;
  if ((unint64_t)v4 >> 62)
    goto LABEL_43;
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    v19 = objc_msgSend((id)v6, "_limitsPrecision");
    v20 = *(uint64_t *)((char *)&v2[3].isa + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager);
    v21 = *(unint64_t *)((char *)&v2[4].isa
                              + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager);
    sub_100022330((Class *)((char *)&v2->isa + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager), v20);
    dispatch thunk of CurrentLocationCacheManagerType.readCachedLocation()(v20, v21);
    v22 = type metadata accessor for CachedCurrentLocation(0);
    v23 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v1, 1, v22);
    if ((_DWORD)v23 == 1)
    {
      sub_100070FA8(v23, &qword_1001C0EF8);
      v1 = 0;
    }
    else
    {
      CachedCurrentLocation.embeddedLocation.getter(v23);
      v25 = (*(uint64_t (**)(objc_class *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v1, v22);
      v1 = (objc_class *)CachedCurrentLocation.EmbeddedLocation.clLocation.getter(v25);
      v24 = sub_100070C58(v10);
    }
    v62 = v4;
    if (v13)
    {
      if (v4 < 0)
        v30 = v4;
      else
        v30 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v26 = _CocoaArrayWrapper.endIndex.getter(v30);
      swift_bridgeObjectRelease(v4);
      if (v26)
      {
LABEL_9:
        v10 = v26 - 1;
        if (__OFSUB__(v26, 1))
          goto LABEL_54;
        v21 = v4 & 0xC000000000000001;
        sub_10006F58C(v26 - 1, (v4 & 0xC000000000000001) == 0, v4);
        if ((v4 & 0xC000000000000001) != 0)
LABEL_55:
          v27 = (id)sub_100071004();
        else
          v27 = *(id *)(v4 + 8 * v10 + 32);
        v6 = (_BOOL8)v27;
        v28.value.super.isa = v1;
        v29 = CLLocation.isValid(limitsPrecision:lastKnownLocation:)(v19, v28);

        if (!v29 && v10)
        {
          v13 = v4 & 0xFFFFFFFFFFFFFF8;
          while (1)
          {
            if (__OFSUB__(v10--, 1))
            {
              __break(1u);
              goto LABEL_42;
            }
            if (v21)
            {
              v32 = (id)sub_100071004();
            }
            else
            {
              if ((v10 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_53:
                __break(1u);
LABEL_54:
                __break(1u);
                goto LABEL_55;
              }
              if (v10 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_53;
              v32 = *(id *)(v4 + 32 + 8 * v10);
            }
            v34 = v32;
            v33.value.super.isa = v1;
            v6 = CLLocation.isValid(limitsPrecision:lastKnownLocation:)(v19, v33);

            if (v6 || !v10)
              goto LABEL_29;
          }
        }
        goto LABEL_29;
      }
    }
    else
    {
      v26 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v26)
        goto LABEL_9;
    }
    v10 = 0;
LABEL_29:
    __chkstk_darwin(v24);
    *(&v58 - 2) = (uint64_t)&v62;
    v36 = sub_1000707DC((_QWORD *(*)(uint64_t *__return_ptr, uint64_t *))sub_100070C3C, (uint64_t)(&v58 - 4), v10, v35 & 1);
    if (v36)
    {
      v37 = v36;
      if (qword_1001BEE80 != -1)
        swift_once(&qword_1001BEE80, sub_100097B54);
      v38 = sub_10002538C();
      v39 = sub_100025184(v38, (uint64_t)qword_1001D9FA8);
      v40 = v37;
      Logger.logObject.getter(v40);
      v41 = sub_1000253F8();
      if (os_log_type_enabled(v39, v41))
      {
        v42 = sub_100025358(22);
        v43 = sub_100025358(32);
        v62 = v43;
        *(_DWORD *)v42 = 141558275;
        v60 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v42 + 4);
        *(_WORD *)(v42 + 12) = 2081;
        v59 = v42 + 14;
        v60 = (uint64_t)v40;
        v44 = sub_100070744(0, (unint64_t *)&unk_1001C0F00, CLLocation_ptr);
        v45 = v40;
        v46 = String.init<A>(reflecting:)(&v60, v44);
        v48 = v47;
        v60 = sub_100070EC0(v46, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v59);

        swift_bridgeObjectRelease(v48);
        sub_100070F7C((void *)&_mh_execute_header, v39, v41, "locationUpdate: completed successfully. location=%{private,mask.hash}s)", (uint8_t *)v42);
        sub_100025444(v43);
        sub_10002534C(v43);
        sub_10002534C(v42);

      }
      else
      {

      }
      v52 = v40;
      sub_10006D9EC(v37, 0);

    }
    else
    {
      if (qword_1001BEE80 != -1)
        swift_once(&qword_1001BEE80, sub_100097B54);
      v49 = sub_10002538C();
      sub_100070DA0(v49, (uint64_t)qword_1001D9FA8);
      v50 = sub_1000253F0();
      if (sub_100025374(v50))
      {
        v51 = (_WORD *)sub_1000290AC();
        sub_100025420(v51);
        sub_100025384((void *)&_mh_execute_header, v2, (os_log_type_t)&v58, "locationUpdate: locationManager did update locations but it's invalid or not accurate enough", 0);
        sub_10002534C(0);
      }

    }
    goto LABEL_51;
  }
LABEL_47:
  if (qword_1001BEE80 != -1)
    swift_once(&qword_1001BEE80, sub_100097B54);
  v55 = sub_10002538C();
  v1 = (objc_class *)sub_100070DA0(v55, (uint64_t)qword_1001D9FA8);
  v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v1, v56))
  {
    v57 = (_WORD *)sub_1000290AC();
    sub_100070F60(v57);
    sub_100025384((void *)&_mh_execute_header, v1, v56, "locationUpdate: locationManager did update locations but location list is empty", (uint8_t *)v6);
    sub_10002534C(v6);
  }
LABEL_51:

  sub_10001C770();
}

void sub_10006EBEC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_100070E5C();
  v3 = v2;
  v4 = sub_10007104C();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100023344();
  v6 = *(void **)(v0 + OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationQueue);
  *v1 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v4);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v1);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v1, v4);
  if ((v6 & 1) != 0)
  {
    if (qword_1001BEE80 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1001BEE80, sub_100097B54);
LABEL_3:
  v8 = sub_10002538C();
  v9 = sub_100025184(v8, (uint64_t)qword_1001D9FA8);
  sub_10007103C();
  v10 = sub_10007103C();
  Logger.logObject.getter(v10);
  v11 = sub_1000253F8();
  if (os_log_type_enabled(v9, v11))
  {
    v12 = (uint8_t *)sub_100025358(12);
    v13 = sub_100025358(32);
    v18 = v3;
    v19 = v13;
    *(_DWORD *)v12 = 136380675;
    sub_10007103C();
    v14 = sub_100005D40(&qword_1001C0FC8);
    v15 = String.init<A>(reflecting:)(&v18, v14);
    v17 = v16;
    v18 = sub_100070EC0(v15, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 4);
    swift_bridgeObjectRelease(v17);
    sub_100070EB8();
    sub_100070EB8();
    _os_log_impl((void *)&_mh_execute_header, v9, v11, "locationUpdate: locationManager didFailWithError: %{private}s ... letting CoreLocation keep trying", v12, 0xCu);
    sub_100025444(v13);
    sub_10002534C(v13);
    sub_10002534C((uint64_t)v12);
  }
  else
  {
    sub_100070EB8();
    sub_100070EB8();
  }

  sub_10001C770();
}

void sub_10006EE24()
{
  uint8_t *v0;
  _QWORD *v1;
  id v2;
  uint8_t *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  os_log_type_t v30;
  os_log_type_t v31;
  _WORD *v32;
  uint8_t *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;

  sub_100070E5C();
  v3 = v0;
  v5 = v4;
  v6 = sub_10007104C();
  v7 = *(id *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100023344();
  v8 = *(void **)&v3[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationQueue];
  *v1 = v8;
  (*((void (**)(_QWORD *, _QWORD, uint64_t))v7 + 13))(v1, enum case for DispatchPredicate.onQueue(_:), v6);
  v9 = v8;
  v10 = _dispatchPreconditionTest(_:)(v1);
  v11 = (*((uint64_t (**)(_QWORD *, uint64_t))v7 + 1))(v1, v6);
  if ((v10 & 1) != 0)
  {
    v2 = sub_100071034(v11, "authorizationStatus");
    v7 = sub_100071034((uint64_t)v2, "_limitsPrecision");
    v10 = sub_100071034((uint64_t)v7, "isAuthorizedForWidgetUpdates");
    if (qword_1001BEE80 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1001BEE80, sub_100097B54);
LABEL_3:
  v12 = sub_10002538C();
  v13 = sub_100025184(v12, (uint64_t)qword_1001D9FA8);
  Logger.logObject.getter(v13);
  v14 = sub_1000253F8();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = sub_100025358(24);
    v16 = sub_100025358(32);
    v36 = v16;
    *(_DWORD *)v15 = 136446722;
    v17 = CLAuthorizationStatus.logDescription.getter(v2);
    v19 = v18;
    v35 = sub_100070EC0(v17, v18);
    sub_10007102C((uint64_t)&v35, (uint64_t)&v36);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 1024;
    LODWORD(v35) = (_DWORD)v7;
    v22 = sub_100071060(v20, v21, v15 + 14);
    *(_WORD *)(v15 + 18) = 1024;
    LODWORD(v35) = v10;
    sub_100071060(v22, v23, v15 + 20);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "locationUpdate: locationManager didChangeAuthorization. Received new states: authorizationState:%{public}s, limitsPrecision: %{BOOL}d, isAuthorizedForWidgetUpdates=%{BOOL}d", (uint8_t *)v15, 0x18u);
    sub_100025444(v16);
    sub_10002534C(v16);
    sub_10002534C(v15);
  }

  v24 = sub_100068490();
  if ((v24 & 1) != 0)
  {
    v25 = v3[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationIsUpdating];
    v26 = v13;
    Logger.logObject.getter(v24);
    v27 = sub_1000253F8();
    v28 = os_log_type_enabled(v13, v27);
    if ((v25 & 1) != 0)
    {
      if (v28)
      {
        v29 = (uint8_t *)sub_1000290AC();
        sub_100071054(v29);
        sub_100025384((void *)&_mh_execute_header, v13, v30, "locationUpdate: not starting listening to location updates: location is already updating", v29);
        sub_10002534C((uint64_t)v29);
      }

    }
    else
    {
      if (v28)
      {
        v33 = (uint8_t *)sub_1000290AC();
        sub_100071054(v33);
        sub_100025384((void *)&_mh_execute_header, v26, v34, "locationUpdate: starting listening to location updates", v33);
        sub_10002534C((uint64_t)v33);
      }

      -[NSObject startUpdatingLocation](v5, "startUpdatingLocation");
    }
  }
  else
  {
    Logger.logObject.getter(v24);
    v31 = sub_1000253F0();
    if (sub_100025374(v31))
    {
      v32 = (_WORD *)sub_1000290AC();
      sub_100025420(v32);
      sub_100025384((void *)&_mh_execute_header, v5, (os_log_type_t)v13, "locationUpdate: not starting listening to location updates: we don't have location permissions", v3);
      sub_10002534C((uint64_t)v3);
    }

  }
  sub_10001C770();
}

uint64_t storeEnumTagSinglePayload for FailureReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10006F1E0 + 4 * byte_10017CD15[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10006F214 + 4 * byte_10017CD10[v4]))();
}

uint64_t sub_10006F214(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006F21C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006F224);
  return result;
}

uint64_t sub_10006F230(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006F238);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10006F23C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006F244(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FailureReason()
{
  return &type metadata for FailureReason;
}

uint64_t storeEnumTagSinglePayload for LocationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10006F2AC + 4 * byte_10017CD1F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10006F2E0 + 4 * byte_10017CD1A[v4]))();
}

uint64_t sub_10006F2E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006F2E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006F2F0);
  return result;
}

uint64_t sub_10006F2FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006F304);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10006F308(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006F310(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationState()
{
  return &type metadata for LocationState;
}

unint64_t sub_10006F330()
{
  unint64_t result;

  result = qword_1001C0E80;
  if (!qword_1001C0E80)
  {
    result = swift_getWitnessTable(&unk_10017CDBC, &type metadata for LocationState);
    atomic_store(result, (unint64_t *)&qword_1001C0E80);
  }
  return result;
}

unint64_t sub_10006F370()
{
  unint64_t result;

  result = qword_1001C0E88;
  if (!qword_1001C0E88)
  {
    result = swift_getWitnessTable(&unk_10017CE64, &type metadata for FailureReason);
    atomic_store(result, (unint64_t *)&qword_1001C0E88);
  }
  return result;
}

id sub_10006F3AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  void *v5;
  NSString v9;
  id v10;

  v5 = v4;
  if (a2)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v9 = 0;
  }
  v10 = objc_msgSend(v5, "initWithEffectiveBundleIdentifier:delegate:onQueue:", v9, a3, a4);

  swift_unknownObjectRelease(a3);
  return v10;
}

uint64_t sub_10006F434()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006F458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for Date(0);
  sub_100070E88();
  swift_release(*(_QWORD *)(v0 + 16));
  sub_100070F28();
  sub_100071020();
  return sub_100070DD4(v0, v2 + 17, v1);
}

void sub_10006F4B4(void *a1, __int16 a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2 & 0x1FF;
  v5 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_100069B00(a1, v4, *(_QWORD *)(v2 + 16), v2 + v6, *(void (**)(uint64_t, uint64_t))v7, *(_QWORD *)(v7 + 8), *(unsigned __int8 *)(v7 + 16));
}

uint64_t sub_10006F528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100071010();
  v1 = sub_100070EEC();
  return swift_deallocObject(v1, v2, v3);
}

void sub_10006F550()
{
  uint64_t v0;

  sub_10006CBC8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(id, _QWORD))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10006F55C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006F56C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10006F574(id a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)

}

uint64_t sub_10006F580(uint64_t a1)
{
  uint64_t v1;

  return sub_10006D448(a1, *(uint64_t (**)(_QWORD, _QWORD))(v1 + 16));
}

unint64_t sub_10006F58C(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10006F5B0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10006F614;
  return v6(a1);
}

uint64_t sub_10006F614()
{
  uint64_t v0;

  sub_100070CDC();
  return sub_100070E38(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10006F63C()
{
  _QWORD *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v3;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10006F900();
    *v0 = v3;
  }
}

void sub_10006F68C()
{
  uint64_t *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v3;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10006FA50(0, *(_QWORD *)(v1 + 16) + 1, 1, v1, &qword_1001C0F50, (void (*)(_QWORD))type metadata accessor for HourlyForecastViewModel);
    *v0 = v3;
  }
}

void sub_10006F6E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 + 1 > *(_QWORD *)(*(_QWORD *)v1 + 24) >> 1)
  {
    sub_10006F900();
    *(_QWORD *)v1 = v2;
  }
}

void sub_10006F728()
{
  uint64_t v0;

  sub_10006E2E8(v0);
}

unint64_t sub_10006F730()
{
  unint64_t result;

  result = qword_1001C0ED8;
  if (!qword_1001C0ED8)
  {
    result = swift_getWitnessTable(&unk_10017CDE4, &type metadata for FailureReason);
    atomic_store(result, (unint64_t *)&qword_1001C0ED8);
  }
  return result;
}

void sub_10006F76C(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 24);
  if (a1 + 1 > (uint64_t)(v2 >> 1))
  {
    sub_10006FA50(v2 > 1, a1 + 1, 1, *v1, &qword_1001C0F50, (void (*)(_QWORD))type metadata accessor for HourlyForecastViewModel);
    *v1 = v3;
  }
}

void sub_10006F7B8()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  sub_100070F04();
  if ((v2 & 1) != 0)
  {
    sub_100070D90();
    if (v3 != v4)
    {
      sub_100070EC8();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_100070D80();
    }
  }
  sub_100070E00();
  if (v1)
  {
    v5 = sub_100005D40((uint64_t *)&unk_1001C0FE0);
    v6 = (_QWORD *)sub_100070EA4(v5, 16 * v1 + 32);
    sub_100070F38(v6);
  }
  if ((v0 & 1) != 0)
  {
    v7 = (char *)sub_100070F84();
    sub_100070294(v7, v8, v9);
    sub_100070D58();
  }
  else
  {
    v10 = sub_100070DF0();
    sub_10006FCE0(v10, v11, v12, v13);
  }
  sub_1000443A4();
}

void sub_10006F84C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_10006FA50(a1, a2, a3, a4, &qword_1001C0F38, (void (*)(_QWORD))type metadata accessor for EventViewModel);
}

void sub_10006F860()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  sub_100070F04();
  if ((v3 & 1) != 0)
  {
    sub_100070D90();
    if (v4 != v5)
    {
      sub_100070EC8();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_100070D80();
    }
  }
  sub_100070E00();
  if (v2)
  {
    v6 = sub_100005D40(&qword_1001C0F40);
    v7 = (_QWORD *)sub_100070EA4(v6, v2 + 32);
    v8 = j__malloc_size(v7);
    v7[2] = v1;
    v7[3] = 2 * v8 - 64;
  }
  if ((v0 & 1) != 0)
  {
    v9 = (char *)sub_100070F84();
    sub_100070330(v9, v10, v11);
    sub_100070D58();
  }
  else
  {
    v12 = sub_100070DF0();
    sub_10006FDD4(v12, v13, v14, v15);
  }
  sub_1000443A4();
}

void sub_10006F900()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  sub_100070F04();
  if ((v2 & 1) != 0)
  {
    sub_100070D90();
    if (v3 != v4)
    {
      sub_100070EC8();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_100070D80();
    }
  }
  sub_100070E00();
  if (v1)
  {
    v6 = sub_100005D40(v5);
    v7 = (_QWORD *)sub_100070EA4(v6, 16 * v1 + 32);
    sub_100070F38(v7);
  }
  if ((v0 & 1) != 0)
  {
    v8 = (char *)sub_100070F84();
    sub_100070408(v8, v9, v10);
    sub_100070D58();
  }
  else
  {
    v11 = sub_100070DF0();
    sub_10006FFB0(v11, v12, v13, v14);
  }
  sub_1000443A4();
}

void sub_10006F990()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  sub_100070F04();
  if ((v3 & 1) != 0)
  {
    sub_100070D90();
    if (v4 != v5)
    {
      sub_100070EC8();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_100070D80();
    }
  }
  sub_100070E00();
  if (v2)
  {
    v6 = sub_100005D40((uint64_t *)&unk_1001C0FD0);
    v7 = (_QWORD *)sub_100070EA4(v6, 32 * v2 + 32);
    v8 = j__malloc_size(v7);
    v7[2] = v1;
    v7[3] = 2 * ((uint64_t)(v8 - 32) / 32);
  }
  if ((v0 & 1) != 0)
  {
    v9 = (char *)sub_100070F84();
    sub_100070460(v9, v10, v11);
    sub_100070D58();
  }
  else
  {
    v12 = sub_100070DF0();
    sub_10006FEC0(v12, v13, v14, v15);
  }
  sub_1000443A4();
}

void sub_10006FA3C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_10006FA50(a1, a2, a3, a4, &qword_1001C0F50, (void (*)(_QWORD))type metadata accessor for HourlyForecastViewModel);
}

void sub_10006FA50(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD))
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;

  if ((a3 & 1) != 0)
  {
    sub_100070D90();
    if (v10 != v11)
    {
      sub_100070EC8();
      if (v10)
      {
        __break(1u);
LABEL_23:
        sub_100070CB0();
        v25 = "Division by zero";
        v26 = 16;
LABEL_25:
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v25, v26, 2, "Swift/IntegerTypes.swift", 24);
        __break(1u);
        return;
      }
      sub_100070D80();
    }
  }
  else
  {
    v9 = a2;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = v9;
  if (!v13)
  {
    v19 = &_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v14 = sub_100005D40(a5);
  v15 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (_QWORD *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  v20 = j__malloc_size(v19);
  if (!v16)
    goto LABEL_23;
  if (v20 - v18 == 0x8000000000000000 && v16 == -1)
  {
    sub_100070CB0();
    v25 = "Division results in an overflow";
    v26 = 31;
    goto LABEL_25;
  }
  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  v22 = *(unsigned __int8 *)(*(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8) + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = (unint64_t)v19 + v23;
  if ((a1 & 1) != 0)
  {
    sub_100070514(a4 + v23, v12, v24, a6);
    sub_100070D58();
  }
  else
  {
    sub_1000700A0(0, v12, v24, a4, (uint64_t (*)(_QWORD))a6);
  }
  sub_100071044();
}

void sub_10006FBF0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_10006FA50(a1, a2, a3, a4, &qword_1001C0F48, (void (*)(_QWORD))type metadata accessor for DailyForecastViewModel);
}

void sub_10006FC04()
{
  sub_10006F900();
}

void sub_10006FC10(char a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_10006FA50(a1, a2, a3, a4, &qword_1001C0F28, (void (*)(_QWORD))type metadata accessor for ForecastEntry);
}

void sub_10006FC24()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  sub_100070F04();
  if ((v3 & 1) != 0)
  {
    sub_100070D90();
    if (v4 != v5)
    {
      sub_100070EC8();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_100070D80();
    }
  }
  sub_100070E00();
  if (v2)
  {
    v6 = sub_100005D40(&qword_1001C01D8);
    v7 = (_QWORD *)sub_100070EA4(v6, 40 * v2 + 32);
    v8 = j__malloc_size(v7);
    v7[2] = v1;
    v7[3] = 2 * ((uint64_t)(v8 - 32) / 40);
  }
  if ((v0 & 1) != 0)
  {
    v9 = (char *)sub_100070F84();
    sub_1000705E4(v9, v10, v11);
    sub_100070D58();
  }
  else
  {
    v12 = sub_100070DF0();
    sub_10007019C(v12, v13, v14, v15);
  }
}

uint64_t sub_10006FCE0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_10006FDD4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = (char *)(a4 + a1 + 32);
  v7 = &__dst[v4];
  if (v6 >= &__dst[v4] || &v6[v4] <= __dst)
  {
    memcpy(__dst, v6, v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_10006FEC0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = (char *)(a4 + 32 * a1 + 32);
  v7 = &__dst[32 * v4];
  if (v6 >= v7 || &v6[32 * v4] <= __dst)
  {
    memcpy(__dst, v6, 32 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10006FFB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_100070CB0();
    v12 = "UnsafeMutablePointer.initialize with negative count";
    v13 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    sub_100005D40(&qword_1001C0EF0);
    swift_arrayInitWithCopy(a3);
    sub_1000287D8();
    return v7;
  }
  sub_100070CB0();
  v12 = "UnsafeMutablePointer.initialize overlapping range";
  v13 = 49;
LABEL_11:
  result = sub_100070D64((uint64_t)"Fatal error", 11, 2, (uint64_t)v12, v13, v10, (uint64_t)"Swift/UnsafePointer.swift", v11, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_1000700A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_100070CB0();
    v20 = "UnsafeMutablePointer.initialize with negative count";
    v21 = 51;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_1000287D8();
    return v14;
  }
  sub_100070CB0();
  v20 = "UnsafeMutablePointer.initialize overlapping range";
  v21 = 49;
LABEL_11:
  result = sub_100070D64((uint64_t)"Fatal error", 11, 2, (uint64_t)v20, v21, v18, (uint64_t)"Swift/UnsafePointer.swift", v19, v22, v23, v24);
  __break(1u);
  return result;
}

char *sub_10007019C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  uint64_t v7;
  char *v8;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = (char *)(a4 + 40 * a1 + 32);
  v7 = 5 * v4;
  v8 = &__dst[8 * v7];
  if (v6 >= v8 || &v6[8 * v7] <= __dst)
  {
    memcpy(__dst, v6, 8 * v7);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100070294(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t sub_100070318(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100070514(a1, a2, a3, (void (*)(_QWORD))&type metadata accessor for MinuteCondition);
}

uint64_t sub_100070324(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100070514(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for EventViewModel);
}

char *sub_100070330(char *__src, size_t __len, char *__dst)
{
  char v4;

  if ((__len & 0x8000000000000000) != 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *sub_1000703B0(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100070CB0();
    result = (char *)sub_100070CC4((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_100070CFC(a3, result);
  }
  return result;
}

char *sub_100070408(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100070CB0();
    result = (char *)sub_100070CC4((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_100070CFC(a3, result);
  }
  return result;
}

char *sub_100070460(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

uint64_t sub_1000704E4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100070514(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for HourlyForecastViewModel);
}

uint64_t sub_1000704F0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100070514(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for DailyForecastViewModel);
}

uint64_t sub_1000704FC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100070514(a1, a2, a3, (void (*)(_QWORD))&type metadata accessor for HourWeather);
}

uint64_t sub_100070508(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100070514(a1, a2, a3, (void (*)(_QWORD))&type metadata accessor for DayWeather);
}

uint64_t sub_100070514(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD))
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  if (a2 < 0)
  {
    sub_100070CB0();
    result = sub_100070CC4((uint64_t)"Fatal error", v14, v15, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v16, v17, (uint64_t)"Swift/UnsafePointer.swift", v18, v19, v20, v21);
    __break(1u);
  }
  else if (a3 < a1
         || (result = ((uint64_t (*)(_QWORD))a4)(0),
             a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    a4(0);
    v10 = sub_100070F10();
    return swift_arrayInitWithTakeFrontToBack(v10, v11, v12, v13);
  }
  else if (a3 != a1)
  {
    v9 = sub_100070F10();
    return swift_arrayInitWithTakeBackToFront(v9);
  }
  return result;
}

char *sub_1000705E4(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

uint64_t sub_100070670()
{
  return sub_100070A6C(41);
}

uint64_t sub_100070678(char *a1)
{
  uint64_t v1;

  return sub_10006A37C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, _QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40));
}

uint64_t sub_100070698()
{
  uint64_t v0;

  sub_10006F574(*(id *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_BYTE *)(v0 + 25));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 57, 7);
}

void sub_1000706D4(uint64_t a1)
{
  uint64_t v1;

  sub_10006A8EC(a1, *(void **)(v1 + 16), *(unsigned __int8 *)(v1 + 24) | (*(unsigned __int8 *)(v1 + 25) << 8), *(void **)(v1 + 32), *(void (**)(_QWORD, _QWORD))(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

id sub_1000706FC(id result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return result;
  return result;
}

void sub_100070708(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100005DC4(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }
  sub_100006338();
}

uint64_t sub_100070744(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

id sub_10007077C(unint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = a2 & 0xC000000000000001;
  sub_10006F58C(a1, (a2 & 0xC000000000000001) == 0, a2);
  if (v4)
    return (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1, a2);
  else
    return *(id *)(a2 + 8 * a1 + 32);
}

_QWORD *sub_1000707DC(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  if ((a4 & 1) != 0)
    return 0;
  v6 = a3;
  result = a1(&v7, &v6);
  if (!v4)
    return (_QWORD *)v7;
  return result;
}

uint64_t sub_100070830(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_10007088C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_100071010();
  v1 = sub_100070EEC();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000708B4(void (*a1)(_BYTE *, void *, uint64_t))
{
  uint64_t v1;

  return sub_10006AFA8(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_BYTE *, _QWORD))(v1 + 32), *(_QWORD *)(v1 + 40));
}

void sub_1000708D4()
{
  sub_10006C9E0();
}

uint64_t sub_1000708FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100070DE8();
  sub_100070D0C();
  v1 = (_QWORD *)swift_task_alloc(dword_1001C0F7C);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100070E10(v1);
  return sub_10006B768(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100070964()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100070988(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1001C0F8C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000709F8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1001C0F88 + dword_1001C0F88))(a1, v4);
}

uint64_t sub_1000709F8()
{
  uint64_t v0;

  sub_100070CDC();
  return sub_100070E38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100070A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D40(&qword_1001C0FA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100070A64()
{
  return sub_100070A6C(40);
}

uint64_t sub_100070A6C(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

void sub_100070AA4(uint64_t a1)
{
  uint64_t v1;

  sub_10006C070(a1, *(_QWORD *)(v1 + 16), *(void (**)(_BYTE *, _QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100070AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  sub_100071010();
  v1 = sub_100070EEC();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100070AE4()
{
  sub_10006C9E0();
}

uint64_t sub_100070B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100070DE8();
  sub_100070E88();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  sub_100070F28();
  sub_100071020();
  return sub_100070DD4(v0, v2 + 16, v1);
}

uint64_t sub_100070B6C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100070DE8();
  sub_100070D0C();
  v1 = (_QWORD *)swift_task_alloc(dword_1001C0FBC);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100070E10(v1);
  return sub_10006C5C8(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100070BD4()
{
  uint64_t v0;

  sub_100070CDC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100070C00@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id result;

  result = sub_10007077C(*a1, *a2);
  if (!v3)
    *a3 = result;
  return result;
}

id sub_100070C3C@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100070C00(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_100070C58(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CachedCurrentLocation.EmbeddedLocation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100070CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11, 2, a4, 55, 2, a7, 25, a9, a10, a11);
}

uint64_t sub_100070CDC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

void *sub_100070CFC@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t sub_100070D44()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_100070D50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return _s13WeatherWidget29DailyForecastViewModelFactoryVwxx_0((_QWORD *)(v1 + a1));
}

uint64_t sub_100070D58()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100070D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 25, a9, a10, a11);
}

BOOL sub_100070D70(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100070DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_100025184(a1, a2);
  return Logger.logObject.getter(v2);
}

uint64_t sub_100070DB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 104);
  *v4 = *v1;
  *(_QWORD *)(v3 + 112) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_100070DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_100070DE8()
{
  return type metadata accessor for Location(0);
}

uint64_t sub_100070DF0()
{
  return 0;
}

uint64_t sub_100070E10(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100070E38(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100070E44()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 160));
}

uint64_t sub_100070E74()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_100070EA4(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7);
}

uint64_t sub_100070EAC(uint64_t a1)
{
  uint64_t v1;

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_100070EB8()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_100070EC0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10016EC84(a1, a2, (uint64_t *)(v2 - 88));
}

void sub_100070ED4(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_100070EEC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100070EFC()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100070F10()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100070F20()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100070F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

size_t sub_100070F38(_QWORD *a1)
{
  uint64_t v1;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / 16);
  return result;
}

_WORD *sub_100070F60(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100070F6C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 96));
}

void sub_100070F7C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t sub_100070F84()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t sub_100070F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_100070FA0()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

void sub_100070FA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10002F014(v2, a2);
}

uint64_t sub_100070FB0(uint64_t a1)
{
  uint64_t v1;

  _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 1, 1, a1);
  return v1;
}

BOOL sub_100070FD8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100070FE8()
{
  return Logger.logObject.getter();
}

void sub_100070FF0(uint64_t a1@<X8>)
{
  uint64_t v1;

}

uint64_t sub_100070FF8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_100071004()
{
  uint64_t v0;
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_100071010()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 40));
}

void sub_100071018(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10002F014(v2, a2);
}

uint64_t sub_100071020()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v0 + v1 + 8));
}

uint64_t sub_10007102C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

id sub_100071034(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10007103C()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_10007104C()
{
  return type metadata accessor for DispatchPredicate(0);
}

_WORD *sub_100071054(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100071060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 96, v3, a3);
}

void sub_10007106C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v76 = a1;
  v69 = type metadata accessor for InstantWeatherViewModel(0);
  sub_100029068();
  __chkstk_darwin(v2);
  sub_10002325C();
  v5 = v4 - v3;
  v6 = type metadata accessor for WeatherCondition(0);
  v70 = *(_QWORD *)(v6 - 8);
  v71 = v6;
  __chkstk_darwin(v6);
  sub_1000230E0();
  v72 = v7;
  v8 = type metadata accessor for LocationComplicationViewModel(0);
  v74 = *(_QWORD *)(v8 - 8);
  v75 = v8;
  __chkstk_darwin(v8);
  sub_1000230E0();
  v73 = v9;
  v10 = type metadata accessor for AggregateWeatherViewModel(0);
  sub_100029068();
  __chkstk_darwin(v11);
  sub_10002325C();
  v14 = v13 - v12;
  v15 = type metadata accessor for WeatherDataViewModel(0);
  sub_100029068();
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v69 - v20;
  v22 = type metadata accessor for ForecastEntry.Model(0);
  sub_100029068();
  __chkstk_darwin(v23);
  sub_10002325C();
  v26 = (_BYTE *)(v25 - v24);
  v27 = type metadata accessor for ForecastEntry(0);
  sub_10000F7C4(v1 + *(int *)(v27 + 28), (uint64_t)v26, type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload(v26, v22) != 1)
  {
    v49 = v76;
    if (*v26)
      v50 = 1;
    else
      v50 = 2;
    v51 = v75;
    goto LABEL_19;
  }
  sub_100011868((uint64_t)v26, (uint64_t)v21, type metadata accessor for WeatherDataViewModel);
  sub_10000F7C4((uint64_t)v21, (uint64_t)v19, type metadata accessor for WeatherDataViewModel);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v15);
  if (!EnumCaseMultiPayload)
  {
    sub_100011868((uint64_t)v19, v14, type metadata accessor for AggregateWeatherViewModel);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v52 = type metadata accessor for Logger(0);
    v53 = sub_100025184(v52, (uint64_t)qword_1001D9FF0);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.default.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      *(_WORD *)sub_1000290AC() = 0;
      sub_100071580((void *)&_mh_execute_header, v54, v55, "Making Location complication view model entry from aggregate weather");
      sub_100071570();
    }

    v56 = *(int *)(v10 + 24);
    v57 = v14 + v56 + *(int *)(type metadata accessor for CurrentObservationViewModel(0) + 48);
    v58 = type metadata accessor for ConditionViewModel(0);
    v59 = *(int *)(v58 + 24);
    v60 = v57 + *(int *)(v58 + 20);
    v61 = *(_QWORD *)(v57 + v59);
    v62 = *(_QWORD *)(v57 + v59 + 8);
    v63 = swift_bridgeObjectRetain(v62);
    v37 = Location.name.getter(v63);
    v65 = v64;
    v66 = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v72, v60, v71);
    v67 = v73;
    LocationComplicationViewModel.init(locationName:conditionKind:conditionSymbol:)(v37, v65, v66, v61, v62);
    sub_100029030(v14, type metadata accessor for AggregateWeatherViewModel);
    sub_100029030((uint64_t)v21, type metadata accessor for WeatherDataViewModel);
    v46 = sub_10007158C();
    v48 = v67;
    goto LABEL_18;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_100011868((uint64_t)v19, v5, type metadata accessor for InstantWeatherViewModel);
    if (qword_1001BEE98 != -1)
      swift_once(&qword_1001BEE98, sub_100097BD0);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100025184(v29, (uint64_t)qword_1001D9FF0);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      *(_WORD *)sub_1000290AC() = 0;
      sub_100071580((void *)&_mh_execute_header, v31, v32, "Making Location complication view model entry from interpolated instant weather");
      sub_100071570();
    }

    v33 = *(int *)(v69 + 24);
    v34 = v5 + v33 + *(int *)(type metadata accessor for CurrentObservationViewModel(0) + 48);
    v35 = type metadata accessor for ConditionViewModel(0);
    v36 = *(int *)(v35 + 24);
    v37 = v34 + *(int *)(v35 + 20);
    v38 = *(_QWORD *)(v34 + v36);
    v39 = *(_QWORD *)(v34 + v36 + 8);
    v40 = swift_bridgeObjectRetain(v39);
    v41 = Location.name.getter(v40);
    v43 = v42;
    v44 = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v72, v37, v71);
    v45 = v73;
    LocationComplicationViewModel.init(locationName:conditionKind:conditionSymbol:)(v41, v43, v44, v38, v39);
    sub_100029030(v5, type metadata accessor for InstantWeatherViewModel);
    sub_100029030((uint64_t)v21, type metadata accessor for WeatherDataViewModel);
    v46 = sub_10007158C();
    v48 = v45;
LABEL_18:
    v68 = v75;
    v47(v46, v48, v75);
    v49 = v37;
    v50 = 0;
    v51 = v68;
LABEL_19:
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v49, v50, 2, v51);
    return;
  }
  sub_100029030((uint64_t)v21, type metadata accessor for WeatherDataViewModel);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v76, 1, 2, v75);
  sub_100029030((uint64_t)v19, type metadata accessor for WeatherDataViewModel);
}

uint64_t sub_100071570()
{
  uint64_t v0;

  return swift_slowDealloc(v0, -1, -1);
}

void sub_100071580(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t sub_10007158C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 88);
}

_QWORD *sub_1000715A0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t EnumCaseMultiPayload;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, char *, uint64_t);
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  int *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  __int128 v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  int *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  void (*v192)(char *, char *, uint64_t);
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  int *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  _BOOL8 v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v260;
  void (*v261)(char *, char *, uint64_t);
  void (*v262)(char *, char *, uint64_t);
  uint64_t v263;
  int *v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  void (*v268)(char *, char *, uint64_t);
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  char *v272;
  int *v273;
  _QWORD *v274;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = a3[5];
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = sub_100005D40(&qword_1001C0290);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = v16;
      v21 = v18;
      v22 = 1;
    }
    else
    {
      v23 = *v17;
      *v16 = *v17;
      swift_retain(v23);
      v20 = v16;
      v21 = v18;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    v24 = a3[6];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = *(_QWORD *)v26;
    v28 = v26[8];
    sub_10001961C(*(_QWORD *)v26, v28);
    *(_QWORD *)v25 = v27;
    v25[8] = v28;
    v29 = a3[7];
    v30 = (_QWORD *)((char *)a1 + v29);
    v31 = (_QWORD *)((char *)a2 + v29);
    v32 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
      v34 = 1;
    }
    else
    {
      v35 = *v31;
      *v30 = *v31;
      swift_retain(v35);
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v32, v34);
    v273 = a3;
    v36 = a3[8];
    v270 = a1;
    v37 = (char *)a1 + v36;
    v274 = a2;
    v38 = (char *)a2 + v36;
    v269 = type metadata accessor for Date(0);
    v268 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v269 - 8) + 16);
    v268(v37, v38, v269);
    v39 = type metadata accessor for ForecastEntry(0);
    v40 = *(int *)(v39 + 20);
    v41 = &v37[v40];
    v42 = &v38[v40];
    v43 = type metadata accessor for TimelineEntryRelevance(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v42, 1, v43))
    {
      v44 = sub_100005D40(&qword_1001BFA20);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v41, 0, 1, v43);
    }
    v271 = v39;
    v45 = *(int *)(v39 + 24);
    v46 = &v37[v45];
    v47 = &v38[v45];
    v48 = *(_QWORD *)&v38[v45 + 8];
    *(_QWORD *)v46 = *(_QWORD *)&v38[v45];
    *((_QWORD *)v46 + 1) = v48;
    v49 = *(_QWORD *)&v38[v45 + 24];
    *((_QWORD *)v46 + 2) = *(_QWORD *)&v38[v45 + 16];
    *((_QWORD *)v46 + 3) = v49;
    v50 = *(_QWORD *)&v38[v45 + 40];
    *((_QWORD *)v46 + 4) = *(_QWORD *)&v38[v45 + 32];
    *((_QWORD *)v46 + 5) = v50;
    *((_DWORD *)v46 + 12) = *(_DWORD *)&v38[v45 + 48];
    v51 = type metadata accessor for WidgetContext(0);
    v52 = *(int *)(v51 + 40);
    v53 = &v46[v52];
    v54 = &v47[v52];
    v55 = type metadata accessor for URL(0);
    v56 = v48;
    v57 = v55;
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v50);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v54, 1, v57))
    {
      v58 = sub_100005D40(&qword_1001BFA28);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v53, v54, v57);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v53, 0, 1, v57);
    }
    v59 = *(int *)(v51 + 44);
    v60 = &v46[v59];
    v61 = &v47[v59];
    v62 = *(_QWORD *)v61;
    *(_QWORD *)v60 = *(_QWORD *)v61;
    v60[8] = v61[8];
    v63 = *(int *)(v271 + 28);
    v64 = &v37[v63];
    v65 = &v38[v63];
    v66 = type metadata accessor for ForecastEntry.Model(0);
    swift_bridgeObjectRetain(v62);
    if (swift_getEnumCaseMultiPayload(v65, v66) == 1)
    {
      v67 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v65, v67);
      v69 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v94 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v64, v65, v94);
        v13 = v270;
      }
      else
      {
        v266 = v67;
        v267 = v66;
        v272 = v64;
        v265 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v70 = type metadata accessor for UUID(0);
          v71 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16);
          v71(v64, v65, v70);
          v72 = type metadata accessor for InstantWeatherViewModel(0);
          v73 = *(int *)(v72 + 20);
          v74 = &v64[v73];
          v75 = &v65[v73];
          v76 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
          v77 = *(int *)(v72 + 24);
          v78 = &v64[v77];
          v79 = &v65[v77];
          v262 = v71;
          v71(&v64[v77], &v65[v77], v70);
          v80 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v268(&v78[v80[5]], &v79[v80[5]], v269);
          v268(&v78[v80[6]], &v79[v80[6]], v269);
          v81 = v80[7];
          v82 = &v78[v81];
          v83 = &v79[v81];
          v84 = sub_100005D40(&qword_1001BF090);
          v85 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16);
          v85(v82, v83, v84);
          v85(&v78[v80[8]], &v79[v80[8]], v84);
          v86 = v80[9];
          v87 = &v78[v86];
          v88 = &v79[v86];
          v89 = *((_QWORD *)v88 + 1);
          *(_QWORD *)v87 = *(_QWORD *)v88;
          *((_QWORD *)v87 + 1) = v89;
          v90 = v80[10];
          v91 = &v78[v90];
          v92 = &v79[v90];
          swift_bridgeObjectRetain(v89);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v92, 1, v84))
          {
            v93 = sub_100005D40(&qword_1001BF098);
            memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
          }
          else
          {
            v85(v91, v92, v84);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v91, 0, 1, v84);
          }
          v119 = v80[11];
          v120 = &v78[v119];
          v121 = &v79[v119];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v79[v119], 1, v84))
          {
            v122 = sub_100005D40(&qword_1001BF098);
            memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
          }
          else
          {
            v85(v120, v121, v84);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v120, 0, 1, v84);
          }
          v123 = v80[12];
          v124 = &v78[v123];
          v125 = &v79[v123];
          v262(&v78[v123], &v79[v123], v70);
          v126 = (int *)type metadata accessor for ConditionViewModel(0);
          v127 = v126[5];
          v128 = &v124[v127];
          v129 = &v125[v127];
          v130 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(v128, v129, v130);
          v131 = v126[6];
          v132 = &v124[v131];
          v133 = &v125[v131];
          v134 = *((_QWORD *)v133 + 1);
          *(_QWORD *)v132 = *(_QWORD *)v133;
          *((_QWORD *)v132 + 1) = v134;
          v135 = v126[7];
          v136 = &v124[v135];
          v137 = &v125[v135];
          v138 = *((_QWORD *)v137 + 1);
          *(_QWORD *)v136 = *(_QWORD *)v137;
          *((_QWORD *)v136 + 1) = v138;
          v124[v126[8]] = v125[v126[8]];
          v124[v126[9]] = v125[v126[9]];
          v124[v126[10]] = v125[v126[10]];
          *(_QWORD *)&v78[v80[13]] = *(_QWORD *)&v79[v80[13]];
          v139 = v80[14];
          v140 = &v78[v139];
          v141 = &v79[v139];
          v142 = type metadata accessor for CloudAltitudeKind(0);
          v143 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 16);
          swift_bridgeObjectRetain(v134);
          swift_bridgeObjectRetain(v138);
          v143(v140, v141, v142);
          v144 = v80[15];
          v145 = &v78[v144];
          v146 = &v79[v144];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v79[v144], 1, v269))
          {
            v147 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
          }
          else
          {
            v268(v145, v146, v269);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v145, 0, 1, v269);
          }
          v13 = v270;
          v148 = v80[16];
          v149 = &v78[v148];
          v150 = &v79[v148];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v79[v148], 1, v269))
          {
            v151 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
          }
          else
          {
            v268(v149, v150, v269);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v149, 0, 1, v269);
          }
          v152 = v80[17];
          v153 = &v78[v152];
          v154 = &v79[v152];
          v155 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v153, v154, v155);
          v156 = v80[18];
          v157 = &v78[v156];
          v158 = &v79[v156];
          v159 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 16))(v157, v158, v159);
          *(_QWORD *)&v78[v80[19]] = *(_QWORD *)&v79[v80[19]];
          v160 = v80[20];
          v161 = &v78[v160];
          v162 = &v79[v160];
          v163 = *((_QWORD *)v162 + 1);
          if (v163)
          {
            *(_QWORD *)v161 = *(_QWORD *)v162;
            *((_QWORD *)v161 + 1) = v163;
            v164 = *((_QWORD *)v162 + 2);
            v165 = *((_QWORD *)v162 + 3);
            v166 = v162[32];
            swift_bridgeObjectRetain(v163);
            sub_100006E58(v164, v165, v166);
            *((_QWORD *)v161 + 2) = v164;
            *((_QWORD *)v161 + 3) = v165;
            v161[32] = v166;
          }
          else
          {
            v167 = *((_OWORD *)v162 + 1);
            *(_OWORD *)v161 = *(_OWORD *)v162;
            *((_OWORD *)v161 + 1) = v167;
            v161[32] = v162[32];
          }
          v64 = v272;
          v67 = v266;
          v66 = v267;
        }
        else
        {
          v260 = v57;
          v95 = type metadata accessor for UUID(0);
          v96 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16);
          v96(v64, v65, v95);
          v97 = type metadata accessor for AggregateWeatherViewModel(0);
          v98 = *(int *)(v97 + 20);
          v99 = &v64[v98];
          v100 = &v65[v98];
          v101 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v99, v100, v101);
          v263 = v95;
          v264 = (int *)v97;
          v102 = *(int *)(v97 + 24);
          v103 = &v64[v102];
          v104 = &v65[v102];
          v261 = v96;
          v96(v103, &v65[v102], v95);
          v105 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v268(&v103[v105[5]], &v104[v105[5]], v269);
          v268(&v103[v105[6]], &v104[v105[6]], v269);
          v106 = v105[7];
          v107 = &v103[v106];
          v108 = &v104[v106];
          v109 = sub_100005D40(&qword_1001BF090);
          v110 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 16);
          v110(v107, v108, v109);
          v110(&v103[v105[8]], &v104[v105[8]], v109);
          v111 = v105[9];
          v112 = &v103[v111];
          v113 = &v104[v111];
          v114 = *((_QWORD *)v113 + 1);
          *(_QWORD *)v112 = *(_QWORD *)v113;
          *((_QWORD *)v112 + 1) = v114;
          v115 = v105[10];
          v116 = &v103[v115];
          v117 = &v104[v115];
          swift_bridgeObjectRetain(v114);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v117, 1, v109))
          {
            v118 = sub_100005D40(&qword_1001BF098);
            memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
          }
          else
          {
            v110(v116, v117, v109);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v116, 0, 1, v109);
          }
          v168 = v105[11];
          v169 = &v103[v168];
          v170 = &v104[v168];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v104[v168], 1, v109))
          {
            v171 = sub_100005D40(&qword_1001BF098);
            memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
          }
          else
          {
            v110(v169, v170, v109);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v169, 0, 1, v109);
          }
          v172 = v105[12];
          v173 = &v103[v172];
          v174 = &v104[v172];
          v261(&v103[v172], &v104[v172], v263);
          v175 = (int *)type metadata accessor for ConditionViewModel(0);
          v176 = v175[5];
          v177 = &v173[v176];
          v178 = &v174[v176];
          v179 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v179 - 8) + 16))(v177, v178, v179);
          v180 = v175[6];
          v181 = &v173[v180];
          v182 = &v174[v180];
          v183 = *((_QWORD *)v182 + 1);
          *(_QWORD *)v181 = *(_QWORD *)v182;
          *((_QWORD *)v181 + 1) = v183;
          v184 = v175[7];
          v185 = &v173[v184];
          v186 = &v174[v184];
          v187 = *((_QWORD *)v186 + 1);
          *(_QWORD *)v185 = *(_QWORD *)v186;
          *((_QWORD *)v185 + 1) = v187;
          v173[v175[8]] = v174[v175[8]];
          v173[v175[9]] = v174[v175[9]];
          v173[v175[10]] = v174[v175[10]];
          *(_QWORD *)&v103[v105[13]] = *(_QWORD *)&v104[v105[13]];
          v188 = v105[14];
          v189 = &v103[v188];
          v190 = &v104[v188];
          v191 = type metadata accessor for CloudAltitudeKind(0);
          v192 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v191 - 8) + 16);
          swift_bridgeObjectRetain(v183);
          swift_bridgeObjectRetain(v187);
          v192(v189, v190, v191);
          v193 = v105[15];
          v194 = &v103[v193];
          v195 = &v104[v193];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v104[v193], 1, v269))
          {
            v196 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
          }
          else
          {
            v268(v194, v195, v269);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v194, 0, 1, v269);
          }
          v197 = v105[16];
          v198 = &v103[v197];
          v199 = &v104[v197];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v104[v197], 1, v269))
          {
            v200 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
          }
          else
          {
            v268(v198, v199, v269);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v198, 0, 1, v269);
          }
          v201 = v105[17];
          v202 = &v103[v201];
          v203 = &v104[v201];
          v204 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v204 - 8) + 16))(v202, v203, v204);
          v205 = v105[18];
          v206 = &v103[v205];
          v207 = &v104[v205];
          v208 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v208 - 8) + 16))(v206, v207, v208);
          *(_QWORD *)&v103[v105[19]] = *(_QWORD *)&v104[v105[19]];
          v209 = v105[20];
          v210 = &v103[v209];
          v211 = &v104[v209];
          v212 = *((_QWORD *)v211 + 1);
          if (v212)
          {
            *(_QWORD *)v210 = *(_QWORD *)v211;
            *((_QWORD *)v210 + 1) = v212;
            v213 = *((_QWORD *)v211 + 2);
            v214 = *((_QWORD *)v211 + 3);
            v215 = v211[32];
            swift_bridgeObjectRetain(v212);
            sub_100006E58(v213, v214, v215);
            *((_QWORD *)v210 + 2) = v213;
            *((_QWORD *)v210 + 3) = v214;
            v210[32] = v215;
          }
          else
          {
            v216 = *((_OWORD *)v211 + 1);
            *(_OWORD *)v210 = *(_OWORD *)v211;
            *((_OWORD *)v210 + 1) = v216;
            v210[32] = v211[32];
          }
          v64 = v272;
          v217 = v264[7];
          v218 = *(_QWORD *)&v65[v217];
          *(_QWORD *)&v272[v217] = v218;
          v219 = v264[8];
          v220 = *(_QWORD *)&v65[v219];
          *(_QWORD *)&v272[v219] = v220;
          v221 = v264[9];
          v222 = &v272[v221];
          v223 = &v65[v221];
          v224 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v218);
          swift_bridgeObjectRetain(v220);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v223, 1, (uint64_t)v224))
          {
            v225 = sub_100005D40(&qword_1001BFA30);
            memcpy(v222, v223, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
          }
          else
          {
            v261(v222, v223, v263);
            v268(&v222[v224[5]], &v223[v224[5]], v269);
            *(_QWORD *)&v222[v224[6]] = *(_QWORD *)&v223[v224[6]];
            v226 = v224[7];
            v227 = &v222[v226];
            v228 = &v223[v226];
            v229 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v229 - 8) + 16))(v227, v228, v229);
            v230 = v224[8];
            v231 = &v222[v230];
            v232 = &v223[v230];
            v233 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v233 - 8) + 16))(v231, v232, v233);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v222, 0, 1, (uint64_t)v224);
          }
          v67 = v266;
          v234 = v264[10];
          v235 = &v272[v234];
          v236 = &v65[v234];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v236, 1, HourPrecipitationChartViewModel))
          {
            v238 = sub_100005D40(&qword_1001BFA38);
            memcpy(v235, v236, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v235, v236, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v235, 0, 1, HourPrecipitationChartViewModel);
          }
          v239 = v264[11];
          v240 = *(_QWORD *)&v65[v239];
          *(_QWORD *)&v272[v239] = v240;
          v241 = v264[12];
          v242 = &v272[v241];
          v243 = &v65[v241];
          *(_QWORD *)v242 = *(_QWORD *)v243;
          *((_WORD *)v242 + 4) = *((_WORD *)v243 + 4);
          v244 = v264[13];
          v245 = &v272[v244];
          v246 = &v65[v244];
          swift_bridgeObjectRetain(v240);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v246, 1, v260))
          {
            v247 = sub_100005D40(&qword_1001BFA28);
            memcpy(v245, v246, *(_QWORD *)(*(_QWORD *)(v247 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v260 - 8) + 16))(v245, v246, v260);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v245, 0, 1, v260);
          }
          v248 = v264[14];
          v249 = &v272[v248];
          v250 = &v65[v248];
          v251 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v250, 1, v251))
          {
            v252 = sub_100005D40(&qword_1001BFA40);
            memcpy(v249, v250, *(_QWORD *)(*(_QWORD *)(v252 - 8) + 64));
          }
          else
          {
            v253 = swift_getEnumCaseMultiPayload(v250, v251) == 1;
            v268(v249, v250, v269);
            swift_storeEnumTagMultiPayload(v249, v251, v253);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v249, 0, 1, v251);
          }
          v13 = v270;
          v66 = v267;
        }
        v69 = v265;
      }
      swift_storeEnumTagMultiPayload(v64, v67, v69);
      swift_storeEnumTagMultiPayload(v64, v66, 1);
    }
    else
    {
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      v13 = v270;
    }
    v254 = v273[9];
    v255 = v273[10];
    v256 = (_QWORD *)((char *)v13 + v254);
    v257 = (_QWORD *)((char *)v274 + v254);
    v258 = *v257;
    v12 = v257[1];
    *v256 = *v257;
    v256[1] = v12;
    *((_BYTE *)v13 + v255) = *((_BYTE *)v274 + v255);
    swift_bridgeObjectRetain(v258);
  }
  swift_retain(v12);
  return v13;
}

uint64_t sub_100072630(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  int *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  int *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  int *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  void (*v97)(uint64_t, uint64_t);
  void (*v98)(uint64_t, uint64_t);

  v4 = sub_100005D40(&qword_1001BFA18);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_100005D40(&qword_1001C0290);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_100019A78(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  v9 = (_QWORD *)((char *)a1 + a2[7]);
  v10 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (char *)a1 + a2[8];
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(v12, v13);
  v15 = (int *)type metadata accessor for ForecastEntry(0);
  v16 = (uint64_t)&v12[v15[5]];
  v17 = type metadata accessor for TimelineEntryRelevance(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v16, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = &v12[v15[6]];
  swift_bridgeObjectRelease(*((_QWORD *)v18 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v18 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v18 + 5));
  v19 = type metadata accessor for WidgetContext(0);
  v20 = (uint64_t)&v18[*(int *)(v19 + 40)];
  v21 = type metadata accessor for URL(0);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v20, 1, v21))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  swift_bridgeObjectRelease(*(_QWORD *)&v18[*(int *)(v19 + 44)]);
  v22 = &v12[v15[7]];
  v23 = type metadata accessor for ForecastEntry.Model(0);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v24);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v65 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v22, v65);
        break;
      case 1:
        v66 = type metadata accessor for UUID(0);
        v67 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v66 - 8) + 8);
        v67(v22, v66);
        v68 = type metadata accessor for InstantWeatherViewModel(0);
        v69 = &v22[*(int *)(v68 + 20)];
        v70 = type metadata accessor for Location(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v70 - 8) + 8))(v69, v70);
        v71 = &v22[*(int *)(v68 + 24)];
        v67(v71, v66);
        v72 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v14(&v71[v72[5]], v13);
        v98 = (void (*)(uint64_t, uint64_t))v14;
        v14(&v71[v72[6]], v13);
        v73 = &v71[v72[7]];
        v74 = sub_100005D40(&qword_1001BF090);
        v75 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v74 - 8) + 8);
        v75(v73, v74);
        v75(&v71[v72[8]], v74);
        swift_bridgeObjectRelease(*(_QWORD *)&v71[v72[9] + 8]);
        v76 = (uint64_t)&v71[v72[10]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v76, 1, v74))
          v75((char *)v76, v74);
        v77 = (uint64_t)&v71[v72[11]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v77, 1, v74))
          v75((char *)v77, v74);
        v78 = &v71[v72[12]];
        v67(v78, v66);
        v79 = (int *)type metadata accessor for ConditionViewModel(0);
        v80 = &v78[v79[5]];
        v81 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v81 - 8) + 8))(v80, v81);
        swift_bridgeObjectRelease(*(_QWORD *)&v78[v79[6] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v78[v79[7] + 8]);
        v82 = &v71[v72[14]];
        v83 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v83 - 8) + 8))(v82, v83);
        v84 = (uint64_t)&v71[v72[15]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v84, 1, v13))
          v98(v84, v13);
        v85 = (uint64_t)&v71[v72[16]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v85, 1, v13))
          v98(v85, v13);
        v86 = &v71[v72[17]];
        v87 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v87 - 8) + 8))(v86, v87);
        v88 = &v71[v72[18]];
        v89 = type metadata accessor for Wind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v89 - 8) + 8))(v88, v89);
        v90 = &v71[v72[20]];
        v91 = *((_QWORD *)v90 + 1);
        if (v91)
        {
          swift_bridgeObjectRelease(v91);
          sub_100007458(*((_QWORD *)v90 + 2), *((_QWORD *)v90 + 3), v90[32]);
        }
        break;
      case 0:
        v26 = type metadata accessor for UUID(0);
        v94 = v13;
        v27 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8);
        v27(v22, v26);
        v28 = type metadata accessor for AggregateWeatherViewModel(0);
        v29 = &v22[*(int *)(v28 + 20)];
        v30 = type metadata accessor for Location(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
        v95 = v26;
        v96 = (int *)v28;
        v31 = &v22[*(int *)(v28 + 24)];
        v27(v31, v26);
        v32 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v14(&v31[v32[5]], v94);
        v97 = (void (*)(uint64_t, uint64_t))v14;
        v14(&v31[v32[6]], v94);
        v33 = &v31[v32[7]];
        v34 = sub_100005D40(&qword_1001BF090);
        v35 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8);
        v35(v33, v34);
        v35(&v31[v32[8]], v34);
        swift_bridgeObjectRelease(*(_QWORD *)&v31[v32[9] + 8]);
        v36 = (uint64_t)&v31[v32[10]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v36, 1, v34))
          v35((char *)v36, v34);
        v37 = (uint64_t)&v31[v32[11]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v37, 1, v34))
          v35((char *)v37, v34);
        v38 = &v31[v32[12]];
        v27(v38, v95);
        v39 = (int *)type metadata accessor for ConditionViewModel(0);
        v40 = &v38[v39[5]];
        v41 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v40, v41);
        swift_bridgeObjectRelease(*(_QWORD *)&v38[v39[6] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v38[v39[7] + 8]);
        v42 = &v31[v32[14]];
        v43 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v42, v43);
        v44 = (uint64_t)&v31[v32[15]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v44, 1, v94))
          v97(v44, v94);
        v45 = (uint64_t)&v31[v32[16]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v45, 1, v94))
          v97(v45, v94);
        v46 = &v31[v32[17]];
        v47 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
        v48 = &v31[v32[18]];
        v49 = type metadata accessor for Wind(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v48, v49);
        v50 = &v31[v32[20]];
        v51 = *((_QWORD *)v50 + 1);
        if (v51)
        {
          swift_bridgeObjectRelease(v51);
          sub_100007458(*((_QWORD *)v50 + 2), *((_QWORD *)v50 + 3), v50[32]);
        }
        v52 = v96;
        swift_bridgeObjectRelease(*(_QWORD *)&v22[v96[7]]);
        swift_bridgeObjectRelease(*(_QWORD *)&v22[v96[8]]);
        v53 = (uint64_t)&v22[v96[9]];
        v54 = (int *)type metadata accessor for AirQualityViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v53, 1, (uint64_t)v54))
        {
          v27((char *)v53, v95);
          v97(v53 + v54[5], v94);
          v55 = v53 + v54[7];
          v56 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v55, v56);
          v57 = v53 + v54[8];
          v58 = type metadata accessor for AirQualityScaleCategory(0);
          v59 = v57;
          v52 = v96;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v59, v58);
        }
        v60 = (uint64_t)&v22[v52[10]];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v60, 1, HourPrecipitationChartViewModel))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v60, HourPrecipitationChartViewModel);
        swift_bridgeObjectRelease(*(_QWORD *)&v22[v52[11]]);
        v62 = (uint64_t)&v22[v52[13]];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v62, 1, v21))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v62, v21);
        v63 = (uint64_t)&v22[v52[14]];
        v64 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v63, 1, v64))
          v97(v63, v94);
        break;
    }
  }
  v92 = (_QWORD *)((char *)a1 + a2[9]);
  swift_bridgeObjectRelease(*v92);
  return swift_release(v92[1]);
}

_QWORD *sub_100072F28(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t EnumCaseMultiPayload;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  int *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  int *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  void (*v141)(char *, char *, uint64_t);
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  __int128 v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  int *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  void (*v190)(char *, char *, uint64_t);
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  int *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  _BOOL8 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v259;
  void (*v260)(char *, char *, uint64_t);
  uint64_t v261;
  int *v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  void (*v266)(char *, char *, uint64_t);
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  int *v273;

  v6 = sub_100005D40(&qword_1001BFA18);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_100005D40(&qword_1001C0290);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_10001961C(*(_QWORD *)v23, v25);
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  v26 = a3[7];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v29 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
    v31 = 1;
  }
  else
  {
    v32 = *v28;
    *v27 = *v28;
    swift_retain(v32);
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v29, v31);
  v33 = a3[8];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v265 = type metadata accessor for Date(0);
  v266 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v265 - 8) + 16);
  v266(v34, v35, v265);
  v36 = type metadata accessor for ForecastEntry(0);
  v37 = *(int *)(v36 + 20);
  v38 = &v34[v37];
  v39 = &v35[v37];
  v40 = type metadata accessor for TimelineEntryRelevance(0);
  v267 = a2;
  v268 = a1;
  v273 = a3;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v39, 1, v40))
  {
    v41 = sub_100005D40(&qword_1001BFA20);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v38, 0, 1, v40);
  }
  v269 = v36;
  v271 = v35;
  v42 = *(int *)(v36 + 24);
  v43 = &v34[v42];
  v44 = &v35[v42];
  v45 = *(_QWORD *)&v35[v42 + 8];
  *(_QWORD *)v43 = *(_QWORD *)&v35[v42];
  *((_QWORD *)v43 + 1) = v45;
  v46 = *(_QWORD *)&v35[v42 + 16];
  v47 = *((_QWORD *)v44 + 3);
  *((_QWORD *)v43 + 2) = v46;
  *((_QWORD *)v43 + 3) = v47;
  v48 = *((_QWORD *)v44 + 5);
  *((_QWORD *)v43 + 4) = *((_QWORD *)v44 + 4);
  *((_QWORD *)v43 + 5) = v48;
  *((_DWORD *)v43 + 12) = *((_DWORD *)v44 + 12);
  v49 = type metadata accessor for WidgetContext(0);
  v50 = *(int *)(v49 + 40);
  v51 = &v43[v50];
  v52 = &v44[v50];
  v53 = type metadata accessor for URL(0);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v48);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v52, 1, v53))
  {
    v54 = sub_100005D40(&qword_1001BFA28);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v51, 0, 1, v53);
  }
  v55 = *(int *)(v49 + 44);
  v56 = &v43[v55];
  v57 = &v44[v55];
  v58 = *(_QWORD *)v57;
  *(_QWORD *)v56 = *(_QWORD *)v57;
  v56[8] = v57[8];
  v59 = *(int *)(v269 + 28);
  v60 = &v34[v59];
  v61 = &v271[v59];
  v62 = type metadata accessor for ForecastEntry.Model(0);
  swift_bridgeObjectRetain(v58);
  if (swift_getEnumCaseMultiPayload(v61, v62) == 1)
  {
    v63 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v61, v63);
    v65 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v92 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v60, v61, v92);
      v91 = v267;
      v90 = v268;
    }
    else
    {
      v270 = v60;
      v272 = v62;
      v264 = v63;
      v263 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v66 = type metadata accessor for UUID(0);
        v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16);
        v67(v60, v61, v66);
        v68 = type metadata accessor for InstantWeatherViewModel(0);
        v69 = *(int *)(v68 + 20);
        v70 = &v60[v69];
        v71 = &v61[v69];
        v72 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
        v73 = *(int *)(v68 + 24);
        v74 = &v60[v73];
        v75 = &v61[v73];
        v67(&v60[v73], &v61[v73], v66);
        v76 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v266(&v74[v76[5]], &v75[v76[5]], v265);
        v266(&v74[v76[6]], &v75[v76[6]], v265);
        v77 = v76[7];
        v78 = &v74[v77];
        v79 = &v75[v77];
        v80 = sub_100005D40(&qword_1001BF090);
        v81 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 16);
        v81(v78, v79, v80);
        v81(&v74[v76[8]], &v75[v76[8]], v80);
        v82 = v76[9];
        v83 = &v74[v82];
        v84 = &v75[v82];
        v85 = *((_QWORD *)v84 + 1);
        *(_QWORD *)v83 = *(_QWORD *)v84;
        *((_QWORD *)v83 + 1) = v85;
        v86 = v76[10];
        v87 = &v74[v86];
        v88 = &v75[v86];
        swift_bridgeObjectRetain(v85);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v88, 1, v80))
        {
          v89 = sub_100005D40(&qword_1001BF098);
          memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
        }
        else
        {
          v81(v87, v88, v80);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v87, 0, 1, v80);
        }
        v117 = v76[11];
        v118 = &v74[v117];
        v119 = &v75[v117];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v75[v117], 1, v80))
        {
          v120 = sub_100005D40(&qword_1001BF098);
          memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
        }
        else
        {
          v81(v118, v119, v80);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v118, 0, 1, v80);
        }
        v121 = v76[12];
        v122 = &v74[v121];
        v123 = &v75[v121];
        v67(&v74[v121], &v75[v121], v66);
        v124 = (int *)type metadata accessor for ConditionViewModel(0);
        v125 = v124[5];
        v126 = &v122[v125];
        v127 = &v123[v125];
        v128 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 16))(v126, v127, v128);
        v129 = v124[6];
        v130 = &v122[v129];
        v131 = &v123[v129];
        v132 = *((_QWORD *)v131 + 1);
        *(_QWORD *)v130 = *(_QWORD *)v131;
        *((_QWORD *)v130 + 1) = v132;
        v133 = v124[7];
        v134 = &v122[v133];
        v135 = &v123[v133];
        v136 = *((_QWORD *)v135 + 1);
        *(_QWORD *)v134 = *(_QWORD *)v135;
        *((_QWORD *)v134 + 1) = v136;
        v122[v124[8]] = v123[v124[8]];
        v122[v124[9]] = v123[v124[9]];
        v122[v124[10]] = v123[v124[10]];
        *(_QWORD *)&v74[v76[13]] = *(_QWORD *)&v75[v76[13]];
        v137 = v76[14];
        v138 = &v74[v137];
        v139 = &v75[v137];
        v140 = type metadata accessor for CloudAltitudeKind(0);
        v141 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16);
        swift_bridgeObjectRetain(v132);
        swift_bridgeObjectRetain(v136);
        v141(v138, v139, v140);
        v142 = v76[15];
        v143 = &v74[v142];
        v144 = &v75[v142];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v75[v142], 1, v265))
        {
          v145 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
        }
        else
        {
          v266(v143, v144, v265);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v143, 0, 1, v265);
        }
        v91 = v267;
        v90 = v268;
        v146 = v76[16];
        v147 = &v74[v146];
        v148 = &v75[v146];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v75[v146], 1, v265))
        {
          v149 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
        }
        else
        {
          v266(v147, v148, v265);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v147, 0, 1, v265);
        }
        v150 = v76[17];
        v151 = &v74[v150];
        v152 = &v75[v150];
        v153 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 16))(v151, v152, v153);
        v154 = v76[18];
        v155 = &v74[v154];
        v156 = &v75[v154];
        v157 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 16))(v155, v156, v157);
        *(_QWORD *)&v74[v76[19]] = *(_QWORD *)&v75[v76[19]];
        v158 = v76[20];
        v159 = &v74[v158];
        v160 = &v75[v158];
        v161 = *((_QWORD *)v160 + 1);
        if (v161)
        {
          *(_QWORD *)v159 = *(_QWORD *)v160;
          *((_QWORD *)v159 + 1) = v161;
          v162 = *((_QWORD *)v160 + 2);
          v163 = *((_QWORD *)v160 + 3);
          v164 = v160[32];
          swift_bridgeObjectRetain(v161);
          sub_100006E58(v162, v163, v164);
          *((_QWORD *)v159 + 2) = v162;
          *((_QWORD *)v159 + 3) = v163;
          v159[32] = v164;
        }
        else
        {
          v165 = *((_OWORD *)v160 + 1);
          *(_OWORD *)v159 = *(_OWORD *)v160;
          *((_OWORD *)v159 + 1) = v165;
          v159[32] = v160[32];
        }
        v60 = v270;
        v62 = v272;
        v63 = v264;
      }
      else
      {
        v259 = v53;
        v93 = type metadata accessor for UUID(0);
        v94 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 16);
        v94(v60, v61, v93);
        v95 = type metadata accessor for AggregateWeatherViewModel(0);
        v96 = *(int *)(v95 + 20);
        v97 = &v60[v96];
        v98 = &v61[v96];
        v99 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(v97, v98, v99);
        v261 = v93;
        v262 = (int *)v95;
        v100 = *(int *)(v95 + 24);
        v101 = &v60[v100];
        v102 = &v61[v100];
        v260 = v94;
        v94(v101, &v61[v100], v93);
        v103 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v266(&v101[v103[5]], &v102[v103[5]], v265);
        v266(&v101[v103[6]], &v102[v103[6]], v265);
        v104 = v103[7];
        v105 = &v101[v104];
        v106 = &v102[v104];
        v107 = sub_100005D40(&qword_1001BF090);
        v108 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16);
        v108(v105, v106, v107);
        v108(&v101[v103[8]], &v102[v103[8]], v107);
        v109 = v103[9];
        v110 = &v101[v109];
        v111 = &v102[v109];
        v112 = *((_QWORD *)v111 + 1);
        *(_QWORD *)v110 = *(_QWORD *)v111;
        *((_QWORD *)v110 + 1) = v112;
        v113 = v103[10];
        v114 = &v101[v113];
        v115 = &v102[v113];
        swift_bridgeObjectRetain(v112);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v115, 1, v107))
        {
          v116 = sub_100005D40(&qword_1001BF098);
          memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
        }
        else
        {
          v108(v114, v115, v107);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v114, 0, 1, v107);
        }
        v166 = v103[11];
        v167 = &v101[v166];
        v168 = &v102[v166];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v102[v166], 1, v107))
        {
          v169 = sub_100005D40(&qword_1001BF098);
          memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
        }
        else
        {
          v108(v167, v168, v107);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v167, 0, 1, v107);
        }
        v170 = v103[12];
        v171 = &v101[v170];
        v172 = &v102[v170];
        v260(&v101[v170], &v102[v170], v261);
        v173 = (int *)type metadata accessor for ConditionViewModel(0);
        v174 = v173[5];
        v175 = &v171[v174];
        v176 = &v172[v174];
        v177 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v177 - 8) + 16))(v175, v176, v177);
        v178 = v173[6];
        v179 = &v171[v178];
        v180 = &v172[v178];
        v181 = *((_QWORD *)v180 + 1);
        *(_QWORD *)v179 = *(_QWORD *)v180;
        *((_QWORD *)v179 + 1) = v181;
        v182 = v173[7];
        v183 = &v171[v182];
        v184 = &v172[v182];
        v185 = *((_QWORD *)v184 + 1);
        *(_QWORD *)v183 = *(_QWORD *)v184;
        *((_QWORD *)v183 + 1) = v185;
        v171[v173[8]] = v172[v173[8]];
        v171[v173[9]] = v172[v173[9]];
        v171[v173[10]] = v172[v173[10]];
        *(_QWORD *)&v101[v103[13]] = *(_QWORD *)&v102[v103[13]];
        v186 = v103[14];
        v187 = &v101[v186];
        v188 = &v102[v186];
        v189 = type metadata accessor for CloudAltitudeKind(0);
        v190 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v189 - 8) + 16);
        swift_bridgeObjectRetain(v181);
        swift_bridgeObjectRetain(v185);
        v190(v187, v188, v189);
        v191 = v103[15];
        v192 = &v101[v191];
        v193 = &v102[v191];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v102[v191], 1, v265))
        {
          v194 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v192, v193, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
        }
        else
        {
          v266(v192, v193, v265);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v192, 0, 1, v265);
        }
        v195 = v103[16];
        v196 = &v101[v195];
        v197 = &v102[v195];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v102[v195], 1, v265))
        {
          v198 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v196, v197, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
        }
        else
        {
          v266(v196, v197, v265);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v196, 0, 1, v265);
        }
        v199 = v103[17];
        v200 = &v101[v199];
        v201 = &v102[v199];
        v202 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v202 - 8) + 16))(v200, v201, v202);
        v203 = v103[18];
        v204 = &v101[v203];
        v205 = &v102[v203];
        v206 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v206 - 8) + 16))(v204, v205, v206);
        *(_QWORD *)&v101[v103[19]] = *(_QWORD *)&v102[v103[19]];
        v207 = v103[20];
        v208 = &v101[v207];
        v209 = &v102[v207];
        v210 = *((_QWORD *)v209 + 1);
        if (v210)
        {
          *(_QWORD *)v208 = *(_QWORD *)v209;
          *((_QWORD *)v208 + 1) = v210;
          v211 = *((_QWORD *)v209 + 2);
          v212 = *((_QWORD *)v209 + 3);
          v213 = v209[32];
          swift_bridgeObjectRetain(v210);
          sub_100006E58(v211, v212, v213);
          *((_QWORD *)v208 + 2) = v211;
          *((_QWORD *)v208 + 3) = v212;
          v208[32] = v213;
        }
        else
        {
          v214 = *((_OWORD *)v209 + 1);
          *(_OWORD *)v208 = *(_OWORD *)v209;
          *((_OWORD *)v208 + 1) = v214;
          v208[32] = v209[32];
        }
        v60 = v270;
        v62 = v272;
        v215 = v262[7];
        v216 = *(_QWORD *)&v61[v215];
        *(_QWORD *)&v270[v215] = v216;
        v217 = v262[8];
        v218 = *(_QWORD *)&v61[v217];
        *(_QWORD *)&v270[v217] = v218;
        v219 = v262[9];
        v220 = &v270[v219];
        v221 = &v61[v219];
        v222 = (int *)type metadata accessor for AirQualityViewModel(0);
        swift_bridgeObjectRetain(v216);
        swift_bridgeObjectRetain(v218);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v221, 1, (uint64_t)v222))
        {
          v223 = sub_100005D40(&qword_1001BFA30);
          memcpy(v220, v221, *(_QWORD *)(*(_QWORD *)(v223 - 8) + 64));
        }
        else
        {
          v260(v220, v221, v261);
          v266(&v220[v222[5]], &v221[v222[5]], v265);
          *(_QWORD *)&v220[v222[6]] = *(_QWORD *)&v221[v222[6]];
          v224 = v222[7];
          v225 = &v220[v224];
          v226 = &v221[v224];
          v227 = type metadata accessor for AirQualityScale(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v227 - 8) + 16))(v225, v226, v227);
          v228 = v222[8];
          v229 = &v220[v228];
          v230 = &v221[v228];
          v231 = type metadata accessor for AirQualityScaleCategory(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v231 - 8) + 16))(v229, v230, v231);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v220, 0, 1, (uint64_t)v222);
        }
        v232 = v262[10];
        v233 = &v270[v232];
        v234 = &v61[v232];
        HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v234, 1, HourPrecipitationChartViewModel))
        {
          v236 = sub_100005D40(&qword_1001BFA38);
          memcpy(v233, v234, *(_QWORD *)(*(_QWORD *)(v236 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v233, v234, HourPrecipitationChartViewModel);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v233, 0, 1, HourPrecipitationChartViewModel);
        }
        v63 = v264;
        v237 = v262[11];
        v238 = *(_QWORD *)&v61[v237];
        *(_QWORD *)&v270[v237] = v238;
        v239 = v262[12];
        v240 = &v270[v239];
        v241 = &v61[v239];
        *(_QWORD *)v240 = *(_QWORD *)v241;
        *((_WORD *)v240 + 4) = *((_WORD *)v241 + 4);
        v242 = v262[13];
        v243 = &v270[v242];
        v244 = &v61[v242];
        swift_bridgeObjectRetain(v238);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v244, 1, v259))
        {
          v245 = sub_100005D40(&qword_1001BFA28);
          memcpy(v243, v244, *(_QWORD *)(*(_QWORD *)(v245 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v259 - 8) + 16))(v243, v244, v259);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v243, 0, 1, v259);
        }
        v246 = v262[14];
        v247 = &v270[v246];
        v248 = &v61[v246];
        v249 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v248, 1, v249))
        {
          v250 = sub_100005D40(&qword_1001BFA40);
          memcpy(v247, v248, *(_QWORD *)(*(_QWORD *)(v250 - 8) + 64));
        }
        else
        {
          v251 = swift_getEnumCaseMultiPayload(v248, v249) == 1;
          v266(v247, v248, v265);
          swift_storeEnumTagMultiPayload(v247, v249, v251);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v247, 0, 1, v249);
        }
        v91 = v267;
        v90 = v268;
      }
      v65 = v263;
    }
    swift_storeEnumTagMultiPayload(v60, v63, v65);
    swift_storeEnumTagMultiPayload(v60, v62, 1);
  }
  else
  {
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    v91 = v267;
    v90 = v268;
  }
  v252 = v273[9];
  v253 = v273[10];
  v254 = (_QWORD *)((char *)v90 + v252);
  v255 = (_QWORD *)((char *)v91 + v252);
  v256 = *v255;
  v257 = v255[1];
  *v254 = *v255;
  v254[1] = v257;
  *((_BYTE *)v90 + v253) = *((_BYTE *)v91 + v253);
  swift_bridgeObjectRetain(v256);
  swift_retain(v257);
  return v90;
}

_QWORD *sub_100073F80(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t EnumCaseMultiPayload;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int *v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  int *v115;
  void (*v116)(char *, char *, uint64_t);
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  void (*v121)(char *, char *, uint64_t);
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  int *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  void (*v158)(char *, char *, uint64_t);
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  int *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  void (*v183)(char *, char *, uint64_t);
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  int *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  _BOOL8 v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v276;
  void (*v277)(char *, char *, uint64_t);
  int *v278;
  char *v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  int *v285;
  uint64_t v286;
  void (*v287)(char *, char *, uint64_t);
  uint64_t v288;
  int *v289;
  _QWORD *v290;
  _QWORD *v291;

  if (a1 != a2)
  {
    sub_100016904((uint64_t)a1, &qword_1001BFA18);
    v6 = sub_100005D40(&qword_1001BFA18);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_100016904((uint64_t)a1 + v12, &qword_1001C0290);
    v15 = sub_100005D40(&qword_1001C0290);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_10001961C(*(_QWORD *)v23, v25);
  v26 = *(_QWORD *)v22;
  v27 = v22[8];
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  sub_100019A78(v26, v27);
  if (a1 != a2)
  {
    v28 = a3[7];
    v29 = (_QWORD *)((char *)a1 + v28);
    v30 = (_QWORD *)((char *)a2 + v28);
    sub_100016904((uint64_t)a1 + v28, &qword_1001BF0C8);
    v31 = sub_100005D40(&qword_1001BF0C8);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = 1;
    }
    else
    {
      v34 = *v30;
      *v29 = *v30;
      swift_retain(v34);
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v31, v33);
  }
  v289 = a3;
  v35 = a3[8];
  v36 = (char *)a1 + v35;
  v291 = a2;
  v37 = (char *)a2 + v35;
  v288 = type metadata accessor for Date(0);
  v284 = *(_QWORD *)(v288 - 8);
  (*(void (**)(char *, char *, uint64_t))(v284 + 24))(v36, v37, v288);
  v38 = (int *)type metadata accessor for ForecastEntry(0);
  v39 = v38[5];
  v40 = &v36[v39];
  v41 = &v37[v39];
  v42 = type metadata accessor for TimelineEntryRelevance(0);
  v43 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v40, 1, v42);
  v44 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v41, 1, v42);
  v290 = a1;
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v40, 0, 1, v42);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  v45 = *(_QWORD *)(v42 - 8);
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v40, v42);
LABEL_19:
    v46 = sub_100005D40(&qword_1001BFA20);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v40, v41, v42);
LABEL_20:
  v47 = v38[6];
  v48 = &v36[v47];
  v49 = &v37[v47];
  *(_QWORD *)v48 = *(_QWORD *)&v37[v47];
  v50 = *(_QWORD *)&v37[v47 + 8];
  v51 = *(_QWORD *)&v36[v47 + 8];
  *((_QWORD *)v48 + 1) = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  *((_QWORD *)v48 + 2) = *((_QWORD *)v49 + 2);
  v52 = *((_QWORD *)v49 + 3);
  v53 = *((_QWORD *)v48 + 3);
  *((_QWORD *)v48 + 3) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  *((_QWORD *)v48 + 4) = *((_QWORD *)v49 + 4);
  v54 = *((_QWORD *)v49 + 5);
  v55 = *((_QWORD *)v48 + 5);
  *((_QWORD *)v48 + 5) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v48[48] = v49[48];
  v48[49] = v49[49];
  v48[50] = v49[50];
  v48[51] = v49[51];
  v56 = type metadata accessor for WidgetContext(0);
  v57 = *(int *)(v56 + 40);
  v58 = &v48[v57];
  v59 = &v49[v57];
  v60 = type metadata accessor for URL(0);
  LODWORD(v55) = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v58, 1, v60);
  v61 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v59, 1, v60);
  v286 = v60;
  if ((_DWORD)v55)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v60);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v62 = *(_QWORD *)(v60 - 8);
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v58, v60);
LABEL_25:
    v63 = sub_100005D40(&qword_1001BFA28);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v62 + 24))(v58, v59, v60);
LABEL_26:
  v64 = *(int *)(v56 + 44);
  v65 = &v48[v64];
  v66 = &v49[v64];
  v67 = *(_QWORD *)v66;
  v68 = *(_QWORD *)&v48[v64];
  *(_QWORD *)&v48[v64] = *(_QWORD *)v66;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  v65[8] = v66[8];
  v69 = v290;
  v70 = v291;
  if (v290 != v291)
  {
    v71 = v38[7];
    v72 = &v36[v71];
    v73 = &v37[v71];
    sub_100011894((uint64_t)&v36[v71], type metadata accessor for ForecastEntry.Model);
    v74 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload(v73, v74) == 1)
    {
      v75 = type metadata accessor for WeatherDataViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v73, v75);
      v77 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v103 = type metadata accessor for SunriseSunsetViewModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v72, v73, v103);
      }
      else
      {
        v282 = v74;
        v283 = v72;
        v281 = v75;
        v280 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v78 = type metadata accessor for UUID(0);
          v79 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16);
          v79(v72, v73, v78);
          v80 = type metadata accessor for InstantWeatherViewModel(0);
          v81 = *(int *)(v80 + 20);
          v82 = &v72[v81];
          v83 = &v73[v81];
          v84 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v82, v83, v84);
          v85 = *(int *)(v80 + 24);
          v86 = &v72[v85];
          v87 = &v73[v85];
          v79(&v72[v85], v87, v78);
          v88 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v89 = *(void (**)(char *, char *, uint64_t))(v284 + 16);
          v89(&v86[v88[5]], &v87[v88[5]], v288);
          v287 = v89;
          v89(&v86[v88[6]], &v87[v88[6]], v288);
          v90 = v88[7];
          v91 = &v86[v90];
          v92 = &v87[v90];
          v93 = sub_100005D40(&qword_1001BF090);
          v94 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 16);
          v94(v91, v92, v93);
          v94(&v86[v88[8]], &v87[v88[8]], v93);
          v95 = v88[9];
          v96 = &v86[v95];
          v97 = &v87[v95];
          *(_QWORD *)v96 = *(_QWORD *)v97;
          v98 = *((_QWORD *)v97 + 1);
          *((_QWORD *)v96 + 1) = v98;
          v99 = v88[10];
          v100 = &v86[v99];
          v101 = &v87[v99];
          swift_bridgeObjectRetain(v98);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v101, 1, v93))
          {
            v102 = sub_100005D40(&qword_1001BF098);
            memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
          }
          else
          {
            v94(v100, v101, v93);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v100, 0, 1, v93);
          }
          v130 = v88[11];
          v131 = &v86[v130];
          v132 = &v87[v130];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v87[v130], 1, v93))
          {
            v133 = sub_100005D40(&qword_1001BF098);
            memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
          }
          else
          {
            v94(v131, v132, v93);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v131, 0, 1, v93);
          }
          v138 = v88[12];
          v139 = &v86[v138];
          v140 = &v87[v138];
          v79(&v86[v138], &v87[v138], v78);
          v141 = (int *)type metadata accessor for ConditionViewModel(0);
          v142 = v141[5];
          v143 = &v139[v142];
          v144 = &v140[v142];
          v145 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
          v146 = v141[6];
          v147 = &v139[v146];
          v148 = &v140[v146];
          *(_QWORD *)v147 = *(_QWORD *)v148;
          v149 = *((_QWORD *)v148 + 1);
          *((_QWORD *)v147 + 1) = v149;
          v150 = v141[7];
          v151 = &v139[v150];
          v152 = &v140[v150];
          *(_QWORD *)v151 = *(_QWORD *)v152;
          v153 = *((_QWORD *)v152 + 1);
          *((_QWORD *)v151 + 1) = v153;
          v139[v141[8]] = v140[v141[8]];
          v139[v141[9]] = v140[v141[9]];
          v139[v141[10]] = v140[v141[10]];
          *(_QWORD *)&v86[v88[13]] = *(_QWORD *)&v87[v88[13]];
          v154 = v88[14];
          v155 = &v86[v154];
          v156 = &v87[v154];
          v157 = type metadata accessor for CloudAltitudeKind(0);
          v158 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 16);
          swift_bridgeObjectRetain(v149);
          swift_bridgeObjectRetain(v153);
          v158(v155, v156, v157);
          v159 = v88[15];
          v160 = &v86[v159];
          v161 = &v87[v159];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v87[v159], 1, v288))
          {
            v162 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
          }
          else
          {
            v287(v160, v161, v288);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v160, 0, 1, v288);
          }
          v70 = v291;
          v188 = v88[16];
          v189 = &v86[v188];
          v190 = &v87[v188];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v87[v188], 1, v288))
          {
            v191 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
          }
          else
          {
            v287(v189, v190, v288);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v189, 0, 1, v288);
          }
          v196 = v88[17];
          v197 = &v86[v196];
          v198 = &v87[v196];
          v199 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v199 - 8) + 16))(v197, v198, v199);
          v200 = v88[18];
          v201 = &v86[v200];
          v202 = &v87[v200];
          v203 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v203 - 8) + 16))(v201, v202, v203);
          *(_QWORD *)&v86[v88[19]] = *(_QWORD *)&v87[v88[19]];
          v204 = v88[20];
          v205 = &v86[v204];
          v206 = &v87[v204];
          if (*((_QWORD *)v206 + 1))
          {
            *(_QWORD *)v205 = *(_QWORD *)v206;
            v207 = *((_QWORD *)v206 + 1);
            *((_QWORD *)v205 + 1) = v207;
            v208 = *((_QWORD *)v206 + 2);
            v209 = *((_QWORD *)v206 + 3);
            v210 = v206[32];
            swift_bridgeObjectRetain(v207);
            sub_100006E58(v208, v209, v210);
            *((_QWORD *)v205 + 2) = v208;
            *((_QWORD *)v205 + 3) = v209;
            v205[32] = v210;
          }
          else
          {
            v226 = *(_OWORD *)v206;
            v227 = *((_OWORD *)v206 + 1);
            v205[32] = v206[32];
            *(_OWORD *)v205 = v226;
            *((_OWORD *)v205 + 1) = v227;
          }
          v74 = v282;
          v72 = v283;
          v75 = v281;
          v77 = 1;
        }
        else
        {
          v104 = type metadata accessor for UUID(0);
          v105 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16);
          v105(v72, v73, v104);
          v106 = type metadata accessor for AggregateWeatherViewModel(0);
          v107 = *(int *)(v106 + 20);
          v108 = &v72[v107];
          v109 = &v73[v107];
          v110 = type metadata accessor for Location(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(v108, v109, v110);
          v111 = *(int *)(v106 + 24);
          v112 = v73;
          v113 = &v72[v111];
          v278 = (int *)v106;
          v279 = v112;
          v114 = &v112[v111];
          v277 = v105;
          v105(v113, &v112[v111], v104);
          v115 = (int *)type metadata accessor for CurrentObservationViewModel(0);
          v116 = *(void (**)(char *, char *, uint64_t))(v284 + 16);
          v116(&v113[v115[5]], &v114[v115[5]], v288);
          v116(&v113[v115[6]], &v114[v115[6]], v288);
          v117 = v115[7];
          v118 = &v113[v117];
          v119 = &v114[v117];
          v120 = sub_100005D40(&qword_1001BF090);
          v121 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 16);
          v121(v118, v119, v120);
          v121(&v113[v115[8]], &v114[v115[8]], v120);
          v122 = v115[9];
          v123 = &v113[v122];
          v124 = &v114[v122];
          *(_QWORD *)v123 = *(_QWORD *)v124;
          v125 = *((_QWORD *)v124 + 1);
          *((_QWORD *)v123 + 1) = v125;
          v285 = v115;
          v126 = v115[10];
          v127 = &v113[v126];
          v128 = &v114[v126];
          swift_bridgeObjectRetain(v125);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v128, 1, v120))
          {
            v129 = sub_100005D40(&qword_1001BF098);
            memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
          }
          else
          {
            v121(v127, v128, v120);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v127, 0, 1, v120);
          }
          v134 = v115[11];
          v135 = &v113[v134];
          v136 = &v114[v134];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v114[v134], 1, v120))
          {
            v137 = sub_100005D40(&qword_1001BF098);
            memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
          }
          else
          {
            v121(v135, v136, v120);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v135, 0, 1, v120);
          }
          v163 = v115[12];
          v164 = &v113[v163];
          v165 = &v114[v163];
          v276 = v104;
          v277(&v113[v163], &v114[v163], v104);
          v166 = (int *)type metadata accessor for ConditionViewModel(0);
          v167 = v166[5];
          v168 = &v164[v167];
          v169 = &v165[v167];
          v170 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 16))(v168, v169, v170);
          v171 = v166[6];
          v172 = &v164[v171];
          v173 = &v165[v171];
          *(_QWORD *)v172 = *(_QWORD *)v173;
          v174 = *((_QWORD *)v173 + 1);
          *((_QWORD *)v172 + 1) = v174;
          v175 = v166[7];
          v176 = &v164[v175];
          v177 = &v165[v175];
          *(_QWORD *)v176 = *(_QWORD *)v177;
          v178 = *((_QWORD *)v177 + 1);
          *((_QWORD *)v176 + 1) = v178;
          v164[v166[8]] = v165[v166[8]];
          v164[v166[9]] = v165[v166[9]];
          v164[v166[10]] = v165[v166[10]];
          *(_QWORD *)&v113[v285[13]] = *(_QWORD *)&v114[v285[13]];
          v179 = v285[14];
          v180 = &v113[v179];
          v181 = &v114[v179];
          v182 = type metadata accessor for CloudAltitudeKind(0);
          v183 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v182 - 8) + 16);
          swift_bridgeObjectRetain(v174);
          swift_bridgeObjectRetain(v178);
          v183(v180, v181, v182);
          v184 = v285[15];
          v185 = &v113[v184];
          v186 = &v114[v184];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v114[v184], 1, v288))
          {
            v187 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
          }
          else
          {
            v116(v185, v186, v288);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v185, 0, 1, v288);
          }
          v192 = v285[16];
          v193 = &v113[v192];
          v194 = &v114[v192];
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v114[v192], 1, v288))
          {
            v195 = sub_100005D40(&qword_1001BF0A0);
            memcpy(v193, v194, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
          }
          else
          {
            v116(v193, v194, v288);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v193, 0, 1, v288);
          }
          v211 = v285[17];
          v212 = &v113[v211];
          v213 = &v114[v211];
          v214 = type metadata accessor for UVIndex(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v214 - 8) + 16))(v212, v213, v214);
          v215 = v285[18];
          v216 = &v113[v215];
          v217 = &v114[v215];
          v218 = type metadata accessor for Wind(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v218 - 8) + 16))(v216, v217, v218);
          *(_QWORD *)&v113[v285[19]] = *(_QWORD *)&v114[v285[19]];
          v219 = v285[20];
          v220 = &v113[v219];
          v221 = &v114[v219];
          if (*((_QWORD *)v221 + 1))
          {
            *(_QWORD *)v220 = *(_QWORD *)v221;
            v222 = *((_QWORD *)v221 + 1);
            *((_QWORD *)v220 + 1) = v222;
            v223 = *((_QWORD *)v221 + 2);
            v224 = *((_QWORD *)v221 + 3);
            v225 = v221[32];
            swift_bridgeObjectRetain(v222);
            sub_100006E58(v223, v224, v225);
            *((_QWORD *)v220 + 2) = v223;
            *((_QWORD *)v220 + 3) = v224;
            v220[32] = v225;
          }
          else
          {
            v228 = *(_OWORD *)v221;
            v229 = *((_OWORD *)v221 + 1);
            v220[32] = v221[32];
            *(_OWORD *)v220 = v228;
            *((_OWORD *)v220 + 1) = v229;
          }
          v72 = v283;
          v230 = v278[7];
          v231 = *(_QWORD *)&v279[v230];
          *(_QWORD *)&v283[v230] = v231;
          v232 = v278[8];
          v233 = *(_QWORD *)&v279[v232];
          *(_QWORD *)&v283[v232] = v233;
          v234 = v278[9];
          v235 = &v283[v234];
          v236 = &v279[v234];
          v237 = (int *)type metadata accessor for AirQualityViewModel(0);
          swift_bridgeObjectRetain(v231);
          swift_bridgeObjectRetain(v233);
          v74 = v282;
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v236, 1, (uint64_t)v237))
          {
            v238 = sub_100005D40(&qword_1001BFA30);
            memcpy(v235, v236, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
          }
          else
          {
            v277(v235, v236, v276);
            v116(&v235[v237[5]], &v236[v237[5]], v288);
            *(_QWORD *)&v235[v237[6]] = *(_QWORD *)&v236[v237[6]];
            v239 = v237[7];
            v240 = &v235[v239];
            v241 = &v236[v239];
            v242 = type metadata accessor for AirQualityScale(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v242 - 8) + 16))(v240, v241, v242);
            v243 = v237[8];
            v244 = &v235[v243];
            v245 = &v236[v243];
            v246 = type metadata accessor for AirQualityScaleCategory(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v246 - 8) + 16))(v244, v245, v246);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v235, 0, 1, (uint64_t)v237);
          }
          v247 = v278[10];
          v248 = &v283[v247];
          v249 = &v279[v247];
          HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v249, 1, HourPrecipitationChartViewModel))
          {
            v251 = sub_100005D40(&qword_1001BFA38);
            memcpy(v248, v249, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 16))(v248, v249, HourPrecipitationChartViewModel);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v248, 0, 1, HourPrecipitationChartViewModel);
          }
          v252 = v278[11];
          v253 = *(_QWORD *)&v279[v252];
          *(_QWORD *)&v283[v252] = v253;
          v254 = v278[12];
          v255 = &v283[v254];
          v256 = &v279[v254];
          v257 = *(_QWORD *)v256;
          *((_WORD *)v255 + 4) = *((_WORD *)v256 + 4);
          *(_QWORD *)v255 = v257;
          v258 = v278[13];
          v259 = &v283[v258];
          v260 = &v279[v258];
          swift_bridgeObjectRetain(v253);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v260, 1, v286))
          {
            v261 = sub_100005D40(&qword_1001BFA28);
            memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v261 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v286 - 8) + 16))(v259, v260, v286);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v259, 0, 1, v286);
          }
          v262 = v278[14];
          v263 = &v283[v262];
          v264 = &v279[v262];
          v265 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
          if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v264, 1, v265))
          {
            v266 = sub_100005D40(&qword_1001BFA40);
            memcpy(v263, v264, *(_QWORD *)(*(_QWORD *)(v266 - 8) + 64));
          }
          else
          {
            v267 = swift_getEnumCaseMultiPayload(v264, v265) == 1;
            v116(v263, v264, v288);
            swift_storeEnumTagMultiPayload(v263, v265, v267);
            _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v263, 0, 1, v265);
          }
          v75 = v281;
          v77 = v280;
          v69 = v290;
        }
      }
      swift_storeEnumTagMultiPayload(v72, v75, v77);
      swift_storeEnumTagMultiPayload(v72, v74, 1);
    }
    else
    {
      memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
  }
  v268 = v289[9];
  v269 = (uint64_t)v69 + v268;
  v270 = (uint64_t)v70 + v268;
  v271 = *(_QWORD *)((char *)v70 + v268);
  v272 = *(_QWORD *)((char *)v69 + v268);
  *(_QWORD *)((char *)v69 + v268) = v271;
  swift_bridgeObjectRetain(v271);
  swift_bridgeObjectRelease(v272);
  v273 = *(_QWORD *)(v269 + 8);
  v274 = *(_QWORD *)(v270 + 8);
  *(_QWORD *)(v269 + 8) = v274;
  swift_retain(v274);
  swift_release(v273);
  *((_BYTE *)v69 + v289[10]) = *((_BYTE *)v70 + v289[10]);
  return v69;
}

char *sub_1000751B0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t EnumCaseMultiPayload;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  int *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  __int128 v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  int *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  __int128 v164;
  uint64_t v165;
  char *v166;
  char *v167;
  int *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  _BOOL8 v195;
  uint64_t v196;
  void (*v198)(char *, char *, uint64_t);
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  void (*v206)(char *, char *, uint64_t);
  uint64_t v207;
  char *v208;
  int *v209;

  v6 = sub_100005D40(&qword_1001BFA18);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100005D40(&qword_1001C0290);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = &a1[v14];
  v18 = &a2[v14];
  v19 = sub_100005D40(&qword_1001BF0C8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for Font.Context(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v208 = a1;
  v209 = a3;
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v207 = type metadata accessor for Date(0);
  v206 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v207 - 8) + 32);
  v206(v22, v23, v207);
  v24 = (int *)type metadata accessor for ForecastEntry(0);
  v25 = v24[5];
  v26 = &v22[v25];
  v27 = &v23[v25];
  v28 = type metadata accessor for TimelineEntryRelevance(0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v27, 1, v28))
  {
    v29 = sub_100005D40(&qword_1001BFA20);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v26, 0, 1, v28);
  }
  v30 = v24[6];
  v31 = &v22[v30];
  v32 = &v23[v30];
  v33 = *(_OWORD *)&v23[v30 + 16];
  *(_OWORD *)v31 = *(_OWORD *)&v23[v30];
  *((_OWORD *)v31 + 1) = v33;
  *((_OWORD *)v31 + 2) = *(_OWORD *)&v23[v30 + 32];
  *((_DWORD *)v31 + 12) = *(_DWORD *)&v23[v30 + 48];
  v34 = type metadata accessor for WidgetContext(0);
  v35 = *(int *)(v34 + 40);
  v36 = &v31[v35];
  v37 = &v32[v35];
  v38 = type metadata accessor for URL(0);
  v205 = v38;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v37, 1, v38))
  {
    v39 = sub_100005D40(&qword_1001BFA28);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v36, 0, 1, v38);
  }
  v40 = *(int *)(v34 + 44);
  v41 = &v31[v40];
  v42 = &v32[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v42[8];
  v43 = v24[7];
  v44 = &v22[v43];
  v45 = &v23[v43];
  v46 = type metadata accessor for ForecastEntry.Model(0);
  if (swift_getEnumCaseMultiPayload(v45, v46) == 1)
  {
    v47 = type metadata accessor for WeatherDataViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v45, v47);
    v49 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v72 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v44, v45, v72);
      v71 = v209;
    }
    else
    {
      v203 = a2;
      v204 = v44;
      v201 = v47;
      v202 = v46;
      v200 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v50 = type metadata accessor for UUID(0);
        v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32);
        v51(v44, v45, v50);
        v52 = type metadata accessor for InstantWeatherViewModel(0);
        v53 = *(int *)(v52 + 20);
        v54 = &v44[v53];
        v55 = &v45[v53];
        v56 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
        v57 = *(int *)(v52 + 24);
        v58 = &v44[v57];
        v59 = &v45[v57];
        v51(&v44[v57], &v45[v57], v50);
        v60 = (int *)type metadata accessor for CurrentObservationViewModel(0);
        v206(&v58[v60[5]], &v59[v60[5]], v207);
        v206(&v58[v60[6]], &v59[v60[6]], v207);
        v61 = v60[7];
        v62 = &v58[v61];
        v63 = &v59[v61];
        v64 = sub_100005D40(&qword_1001BF090);
        v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32);
        v65(v62, v63, v64);
        v65(&v58[v60[8]], &v59[v60[8]], v64);
        *(_OWORD *)&v58[v60[9]] = *(_OWORD *)&v59[v60[9]];
        v66 = v60[10];
        v67 = &v58[v66];
        v68 = &v59[v66];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v59[v66], 1, v64))
        {
          v69 = sub_100005D40(&qword_1001BF098);
          memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        }
        else
        {
          v65(v67, v68, v64);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v67, 0, 1, v64);
        }
        v93 = v60[11];
        v94 = &v58[v93];
        v95 = &v59[v93];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v59[v93], 1, v64))
        {
          v96 = sub_100005D40(&qword_1001BF098);
          memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
        }
        else
        {
          v65(v94, v95, v64);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v94, 0, 1, v64);
        }
        v97 = v60[12];
        v98 = &v58[v97];
        v99 = &v59[v97];
        v51(&v58[v97], &v59[v97], v50);
        v100 = (int *)type metadata accessor for ConditionViewModel(0);
        v101 = v100[5];
        v102 = &v98[v101];
        v103 = &v99[v101];
        v104 = type metadata accessor for WeatherCondition(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 32))(v102, v103, v104);
        *(_OWORD *)&v98[v100[6]] = *(_OWORD *)&v99[v100[6]];
        *(_OWORD *)&v98[v100[7]] = *(_OWORD *)&v99[v100[7]];
        v98[v100[8]] = v99[v100[8]];
        v98[v100[9]] = v99[v100[9]];
        v98[v100[10]] = v99[v100[10]];
        *(_QWORD *)&v58[v60[13]] = *(_QWORD *)&v59[v60[13]];
        v105 = v60[14];
        v106 = &v58[v105];
        v107 = &v59[v105];
        v108 = type metadata accessor for CloudAltitudeKind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 32))(v106, v107, v108);
        v109 = v60[15];
        v110 = &v58[v109];
        v111 = &v59[v109];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v59[v109], 1, v207))
        {
          v112 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
        }
        else
        {
          v206(v110, v111, v207);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v110, 0, 1, v207);
        }
        a2 = v203;
        v70 = v208;
        v71 = v209;
        v113 = v60[16];
        v114 = &v58[v113];
        v115 = &v59[v113];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v59[v113], 1, v207))
        {
          v116 = sub_100005D40(&qword_1001BF0A0);
          memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
        }
        else
        {
          v206(v114, v115, v207);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v114, 0, 1, v207);
        }
        v117 = v60[17];
        v118 = &v58[v117];
        v119 = &v59[v117];
        v120 = type metadata accessor for UVIndex(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 32))(v118, v119, v120);
        v121 = v60[18];
        v122 = &v58[v121];
        v123 = &v59[v121];
        v124 = type metadata accessor for Wind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 32))(v122, v123, v124);
        *(_QWORD *)&v58[v60[19]] = *(_QWORD *)&v59[v60[19]];
        v125 = v60[20];
        v126 = &v58[v125];
        v127 = &v59[v125];
        v126[32] = v127[32];
        v128 = *((_OWORD *)v127 + 1);
        *(_OWORD *)v126 = *(_OWORD *)v127;
        *((_OWORD *)v126 + 1) = v128;
        v44 = v204;
        v47 = v201;
        v46 = v202;
        v49 = 1;
        goto LABEL_60;
      }
      v73 = type metadata accessor for UUID(0);
      v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32);
      v74(v44, v45, v73);
      v75 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
      v76 = v75[5];
      v77 = &v44[v76];
      v78 = &v45[v76];
      v79 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
      v80 = v75[6];
      v81 = &v44[v80];
      v82 = &v45[v80];
      v198 = v74;
      v199 = v73;
      v74(v81, &v45[v80], v73);
      v83 = (int *)type metadata accessor for CurrentObservationViewModel(0);
      v206(&v81[v83[5]], &v82[v83[5]], v207);
      v206(&v81[v83[6]], &v82[v83[6]], v207);
      v84 = v83[7];
      v85 = &v81[v84];
      v86 = &v82[v84];
      v87 = sub_100005D40(&qword_1001BF090);
      v88 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32);
      v88(v85, v86, v87);
      v88(&v81[v83[8]], &v82[v83[8]], v87);
      *(_OWORD *)&v81[v83[9]] = *(_OWORD *)&v82[v83[9]];
      v89 = v83[10];
      v90 = &v81[v89];
      v91 = &v82[v89];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v89], 1, v87))
      {
        v92 = sub_100005D40(&qword_1001BF098);
        memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
      }
      else
      {
        v88(v90, v91, v87);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v90, 0, 1, v87);
      }
      v129 = v83[11];
      v130 = &v81[v129];
      v131 = &v82[v129];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v129], 1, v87))
      {
        v132 = sub_100005D40(&qword_1001BF098);
        memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
      }
      else
      {
        v88(v130, v131, v87);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v130, 0, 1, v87);
      }
      v133 = v83[12];
      v134 = &v81[v133];
      v135 = &v82[v133];
      v198(&v81[v133], &v82[v133], v199);
      v136 = (int *)type metadata accessor for ConditionViewModel(0);
      v137 = v136[5];
      v138 = &v134[v137];
      v139 = &v135[v137];
      v140 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 32))(v138, v139, v140);
      *(_OWORD *)&v134[v136[6]] = *(_OWORD *)&v135[v136[6]];
      *(_OWORD *)&v134[v136[7]] = *(_OWORD *)&v135[v136[7]];
      v134[v136[8]] = v135[v136[8]];
      v134[v136[9]] = v135[v136[9]];
      v134[v136[10]] = v135[v136[10]];
      *(_QWORD *)&v81[v83[13]] = *(_QWORD *)&v82[v83[13]];
      v141 = v83[14];
      v142 = &v81[v141];
      v143 = &v82[v141];
      v144 = type metadata accessor for CloudAltitudeKind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 32))(v142, v143, v144);
      v145 = v83[15];
      v146 = &v81[v145];
      v147 = &v82[v145];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v145], 1, v207))
      {
        v148 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
      }
      else
      {
        v206(v146, v147, v207);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v146, 0, 1, v207);
      }
      a2 = v203;
      v149 = v83[16];
      v150 = &v81[v149];
      v151 = &v82[v149];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v82[v149], 1, v207))
      {
        v152 = sub_100005D40(&qword_1001BF0A0);
        memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
      }
      else
      {
        v206(v150, v151, v207);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v150, 0, 1, v207);
      }
      v153 = v83[17];
      v154 = &v81[v153];
      v155 = &v82[v153];
      v156 = type metadata accessor for UVIndex(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v156 - 8) + 32))(v154, v155, v156);
      v157 = v83[18];
      v158 = &v81[v157];
      v159 = &v82[v157];
      v160 = type metadata accessor for Wind(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 32))(v158, v159, v160);
      *(_QWORD *)&v81[v83[19]] = *(_QWORD *)&v82[v83[19]];
      v161 = v83[20];
      v162 = &v81[v161];
      v163 = &v82[v161];
      v162[32] = v163[32];
      v164 = *((_OWORD *)v163 + 1);
      *(_OWORD *)v162 = *(_OWORD *)v163;
      *((_OWORD *)v162 + 1) = v164;
      v44 = v204;
      *(_QWORD *)&v204[v75[7]] = *(_QWORD *)&v45[v75[7]];
      *(_QWORD *)&v204[v75[8]] = *(_QWORD *)&v45[v75[8]];
      v165 = v75[9];
      v166 = &v204[v165];
      v167 = &v45[v165];
      v168 = (int *)type metadata accessor for AirQualityViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v167, 1, (uint64_t)v168))
      {
        v169 = sub_100005D40(&qword_1001BFA30);
        memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
      }
      else
      {
        v198(v166, v167, v199);
        v206(&v166[v168[5]], &v167[v168[5]], v207);
        *(_QWORD *)&v166[v168[6]] = *(_QWORD *)&v167[v168[6]];
        v170 = v168[7];
        v171 = &v166[v170];
        v172 = &v167[v170];
        v173 = type metadata accessor for AirQualityScale(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32))(v171, v172, v173);
        v174 = v168[8];
        v175 = &v166[v174];
        v176 = &v167[v174];
        v177 = type metadata accessor for AirQualityScaleCategory(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v177 - 8) + 32))(v175, v176, v177);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v166, 0, 1, (uint64_t)v168);
      }
      v46 = v202;
      v178 = v75[10];
      v179 = &v204[v178];
      v180 = &v45[v178];
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v180, 1, HourPrecipitationChartViewModel))
      {
        v182 = sub_100005D40(&qword_1001BFA38);
        memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 32))(v179, v180, HourPrecipitationChartViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v179, 0, 1, HourPrecipitationChartViewModel);
      }
      *(_QWORD *)&v204[v75[11]] = *(_QWORD *)&v45[v75[11]];
      v183 = v75[12];
      v184 = &v204[v183];
      v185 = &v45[v183];
      *(_QWORD *)v184 = *(_QWORD *)v185;
      *((_WORD *)v184 + 4) = *((_WORD *)v185 + 4);
      v186 = v75[13];
      v187 = &v204[v186];
      v188 = &v45[v186];
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v45[v186], 1, v205))
      {
        v189 = sub_100005D40(&qword_1001BFA28);
        memcpy(v187, v188, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v205 - 8) + 32))(v187, v188, v205);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v187, 0, 1, v205);
      }
      v190 = v75[14];
      v191 = &v204[v190];
      v192 = &v45[v190];
      v193 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v192, 1, v193))
      {
        v194 = sub_100005D40(&qword_1001BFA40);
        memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
      }
      else
      {
        v195 = swift_getEnumCaseMultiPayload(v192, v193) == 1;
        v206(v191, v192, v207);
        swift_storeEnumTagMultiPayload(v191, v193, v195);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v191, 0, 1, v193);
      }
      v71 = v209;
      v47 = v201;
      v49 = v200;
    }
    v70 = v208;
LABEL_60:
    swift_storeEnumTagMultiPayload(v44, v47, v49);
    swift_storeEnumTagMultiPayload(v44, v46, 1);
    goto LABEL_61;
  }
  memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  v70 = v208;
  v71 = v209;
LABEL_61:
  v196 = v71[10];
  *(_OWORD *)&v70[v71[9]] = *(_OWORD *)&a2[v71[9]];
  v70[v196] = a2[v196];
  return v70;
}

